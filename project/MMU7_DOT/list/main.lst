# file opened: C:\Zx\CSpect\Projects\vForth17_DOT/source/main.asm
   1  0000              //  ______________________________________________________________________
   2  0000              //
   3  0000              //  main.asm
   4  0000              //  ______________________________________________________________________
   5  0000              //
   6  0000              //  v-Forth 1.7 NextZXOS version
   7  0000              //  DOT-command version
   8  0000              //  build 20240809
   9  0000              //
  10  0000              //  Direct-Threaded version.
  11  0000              //
  12  0000              //  NextZXOS version
  13  0000              //  ______________________________________________________________________
  14  0000              //
  15  0000              // MIT License
  16  0000              //
  17  0000              // Copyright (c) 1990-2024 Matteo Vitturi
  18  0000              //
  19  0000              // Permission is hereby granted, free of charge, to any person obtaining a copy
  20  0000              // of this software and associated documentation files (the "Software"), to deal
  21  0000              // in the Software without restriction, including without limitation the rights
  22  0000              // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  23  0000              // copies of the Software, and to permit persons to whom the Software is
  24  0000              // furnished to do so, subject to the following conditions:
  25  0000              //
  26  0000              // The above copyright notice and this permission notice shall be included in all
  27  0000              // copies or substantial portions of the Software.
  28  0000              //
  29  0000              // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  30  0000              // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  31  0000              // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  32  0000              // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  33  0000              // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  34  0000              // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  35  0000              // SOFTWARE.
  36  0000              //  ______________________________________________________________________
  37  0000              //
  38  0000              //  by Matteo Vitturi, 1990-2024
  39  0000              //
  40  0000              //  https://sites.google.com/view/vforth/vforth15-next
  41  0000              //  https://www.oocities.org/matteo_vitturi/english/index.htm
  42  0000              //
  43  0000              //  This is the complete compiler for v.Forth for SINCLAIR ZX Spectrum Next.
  44  0000              //  Each line of this source list mustn't exceed 80 bytes.
  45  0000              //  Z80N (ZX Spectrum Next) extension is available.
  46  0000              //
  47  0000              //  This list has been tested using the following configuration:
  48  0000              //      - CSpect emulator V.2.12.30
  49  0000              //  ______________________________________________________________________
  50  0000              //
  51  0000              //  Z80 Registers usage map
  52  0000              //
  53  0000              //  AF
  54  0000              //  BC - Instruction Pointer: should be preserved during ROM/OS calls
  55  0000              //  DE - Return Stack Pointer: should be preserved during ROM/OS calls
  56  0000              //  HL - Working
  57  0000              //
  58  0000              //  AF'- Sometime used for backup purpose
  59  0000              //  BC'- Not used
  60  0000              //  DE'- Not used
  61  0000              //  HL'- Not used
  62  0000              //
  63  0000              //  SP - Calculator Stack Pointer
  64  0000              //  IX - Inner interpreter "next" address pointer. This way jp (ix) is 2T-state faster than JP next
  65  0000              //  IY - (ZX System: must be preserved to interact with standard ROM)
  66  0000              //
  67  0000              //  ______________________________________________________________________
  68  0000              //
  69  0000              //  _________________
  70  0000              //
  71  0000              //  FORTH DEFINITIONS
  72  0000              //  _________________
  73  0000
  74  0000                              OPT     --zxnext
  75  0000              //  ______________________________________________________________________
  76  0000              //
  77  0000              // this controls some debugging code in L0.asm
  78  0000              //  0 for final binary release.
  79  0000              //  1 for debugging with Visual Studio Code and DeZog
  80  0000              // -1 for for binary comparison with Forth generated code.
  81  0000              DEBUGGING       equ     1   // .dot
  82  0000              //
  83  0000              //  ______________________________________________________________________
  84  0000
  85  0000                              if ( -1 == DEBUGGING )
  86  0000 ~            // ORIGIN          equ     $6366 - $80                 // for binary comparison with double compilation
  87  0000 ~            ORIGIN          equ     $9B21   -$80             // for binary comparison with single compilation
  88  0000 ~            Heap_Ptr        defl    $1F80                       // HP before compilation
  89  0000 ~            Heap_offset     defl    $2000
  90  0000 ~
  91  0000                              endif
  92  0000              //  ______________________________________________________________________
  93  0000
  94  0000                              if (  0 == DEBUGGING )
  95  0000 ~            ORIGIN          equ     $6366                   // binary and Tape
  96  0000 ~            // ORIGIN          equ     $9A93                // binary and Tape
  97  0000 ~            Heap_Ptr        defl    $0002
  98  0000 ~            Heap_offset     defl     0
  99  0000 ~
 100  0000                              endif
 101  0000              //  ______________________________________________________________________
 102  0000
 103  0000                              if (  1 == DEBUGGING )
 104  0000              ORIGIN          equ     $2000                   // for .dot
 105  0000              Heap_Ptr        defl    $0002
 106  0000              Heap_offset     defl     0
 107  0000
 108  0000                              endif
 109  0000              //  ______________________________________________________________________
 110  0000
 111  0000                              DEVICE  ZXSPECTRUMNEXT
 112  0000
 113  0000                              ORG     ORIGIN
 114  2000
 115  2000                              if ( -1 == DEBUGGING )
 116  2000 ~                            ds 128                            // for binary comparison
 117  2000                              endif
 118  2000
 119  2000              //  ______________________________________________________________________
 120  2000              //
 121  2000              //  Naming convention for Label vs Forth correspondance
 122  2000              //  Forth words are named as they are named for real with some exception to avoid assembler syntax errors.
 123  2000              //    - Leading "0" is converted into "Z_"
 124  2000              //    - Leading "(" is converted into "C_", closing bracket is omitted
 125  2000              //    - Leading numbers are converted in letters: ONE_  TWO_ etc.
 126  2000              //    - Question mark "?" is converted into "Q" or omitted if needed / useful.
 127  2000              //    - Plus sign "+" is converted in _PLUS or ADD_ depending.
 128  2000              //    - Minus sign "-" in L (for Line), MINUS or SUBTRACT depending
 129  2000              //    - Greater-Than sign ">" in _GREATER or TO_ depending
 130  2000              //    - Equal sign "=" is converted in EQUAL
 131  2000              //    - Less-Than sign "<" in _LESS or FROM_ (or TO_ again) depending
 132  2000              //    - Asterisk sign "*" is converted in _MUL or STAR
 133  2000              //    - Slash "/" is converted in _DIV or omitted if it is clear what it means
 134  2000              //    - Exclamation mark "!" is converted in STORE
 135  2000              //    - At-Sign "@" is converted in FETCH
 136  2000              //    - Words that collide with Assembler are normally suffixed with "_OP"
 137  2000
 138  2000                              include "system.asm"
# file opened: C:\Zx\CSpect\Projects\vForth17_DOT/source/system.asm
   1+ 2000              //  ______________________________________________________________________
   2+ 2000              //
   3+ 2000              //  system.asm
   4+ 2000              //  ______________________________________________________________________
   5+ 2000
   6+ 2000              // Registers:
   7+ 2000              //
   8+ 2000              //      BC: Instruction Pointer
   9+ 2000              //      DE: Return Stack Pointer
  10+ 2000              //      HL: W register
  11+ 2000              //      SP: Calc stack Pointer
  12+ 2000              //      IX: Inner-Interpreter Address
  13+ 2000
  14+ 2000              //  ______________________________________________________________________
  15+ 2000              //
  16+ 2000              // ZX-Spectrum standard system variables
  17+ 2000              SCR_CT          equ     $5C8C                   // SCR-CT system variable
  18+ 2000              LASTK           equ     $5C08                   // LASTK system variable
  19+ 2000              BORDCR          equ     $5C48                   // BORDCR system variable
  20+ 2000              FLAGS2          equ     $5C6A                   // for caps-lock
  21+ 2000              RAMTOP          equ     $5CB2
  22+ 2000              TSTACK          equ     $5C00                   // TSTACK
  23+ 2000              // FSTACK          ecu     $4000 - 8
  24+ 2000              //  ______________________________________________________________________
  25+ 2000              //
  26+ 2000              // Flag constants
  27+ 2000              TRUE_FLAG       equ     $FFFF
  28+ 2000              FALSE_FLAG      equ     $0000
  29+ 2000
  30+ 2000              //  ______________________________________________________________________
  31+ 2000              //
  32+ 2000              // Ascii char constants
  33+ 2000              NUL_CHAR        equ     $00
  34+ 2000              COMMA_CHAR      equ     $06
  35+ 2000              BACKSPACE_CHAR  equ     $08
  36+ 2000              CR_CHAR         equ     $0D
  37+ 2000              BLANK_CHAR      equ     $20
  38+ 2000              QUOTE_CHAR      equ     "'"
  39+ 2000              DQUOTE_CHAR     equ     '"'
  40+ 2000              UNDERSCORE_CHAR equ     $5F
  41+ 2000              SOLIDBLOCK_CHAR equ     $8F
  42+ 2000              HALFBLOCK_CHAR  equ     $8C
  43+ 2000              LC_A_CHAR       equ     $61                 // lower-case "a"
  44+ 2000              LC_Z_CHAR       equ     $7A                 // lower-case "z"
  45+ 2000
  46+ 2000
  47+ 2000              //  ______________________________________________________________________
  48+ 2000              //
  49+ 2000
  50+ 2000                              // emulate something like:  ld hl,rp
  51+ 2000              ldhlrp          macro
  52+ 2000 ~                            ld      hl,(RP_Pointer)
  53+ 2000                              endm
  54+ 2000
  55+ 2000                              // emulate something like:  ld rp,hl
  56+ 2000              ldrphl          macro
  57+ 2000 ~                            ld      (RP_Pointer),hl
  58+ 2000                              endm
  59+ 2000
  60+ 2000              //  ______________________________________________________________________
  61+ 2000              //
  62+ 2000              //  Inner interpreter next-address pointer. This is 2T-state faster than "jp address"
  63+ 2000              next            macro
  64+ 2000 ~                            jp      (ix)
  65+ 2000                              endm
  66+ 2000
  67+ 2000              psh1            macro
  68+ 2000 ~                            push    hl
  69+ 2000 ~                            jp      (ix)
  70+ 2000                              endm
  71+ 2000
  72+ 2000              psh2            macro
  73+ 2000 ~                            push    de
  74+ 2000 ~                            push    hl
  75+ 2000 ~                            jp      (ix)
  76+ 2000                              endm
  77+ 2000
  78+ 2000              //  ______________________________________________________________________
  79+ 2000              //
  80+ 2000              // Bit constants in length-byte
  81+ 2000
  82+ 2000              SMUDGE_BIT      equ     %00100000               // $20
  83+ 2000              IMMEDIATE_BIT   equ     %01000000               // $40
  84+ 2000              END_BIT         equ     %10000000               // $80
  85+ 2000
  86+ 2000
  87+ 2000              //  ______________________________________________________________________
  88+ 2000              //
  89+ 2000              //  To create Forth words using this (nice) Assembler, we have to use the two following
  90+ 2000              //  pointers
  91+ 2000              temp_NFA        defl    0
  92+ 2000              last_NFA        defl    0
  93+ 2000              len_NFA         defl    0
  94+ 2000
  95+ 2000              Dict_Ptr        defl    0
  96+ 2000              // Heap_Ptr        defl    $0002
  97+ 2000              Prev_Ptr        defl    0
  98+ 2000              mirror_Ptr      defl    0
  99+ 2000
 100+ 2000              is_code         equ     0                   // so the direct machine-code starts at CFA
 101+ 2000              is_normal       equ     0                   // so the direct machine-code starts at CFA
 102+ 2000              is_immediate    equ     IMMEDIATE_BIT       // $40 - the definition is IMMEDIATE.
 103+ 2000
 104+ 2000
 105+ 2000              Behave          macro   xp
 106+ 2000 ~            temp_PTR        defl    $                   // save this org
 107+ 2000 ~                            org     (Heap_Ptr & $1FFF) + $E000 -2
 108+ 2000 ~                            dw      xp
 109+ 2000 ~                            org     temp_PTR
 110+ 2000                              endm
 111+ 2000
 112+ 2000              //  ______________________________________________________________________
 113+ 2000              //
 114+ 2000              //  Create a new "low-level" definition
 115+ 2000              //  This macro is used in the form  Create FORTH_NAME,n,"forth_name"
 116+ 2000              //  to create a new Forth Dictionary entry the same way Forth itself would do.
 117+ 2000              //  A word begins with a Length-Byte in range 1-31. Top 3 msb are used as flags
 118+ 2000              //  see SMUDGE_BIT and IMMEDIATE_BIT constant above.
 119+ 2000              //  It is followed by the Name of the word, i.e. a string expressed in 7-bit Ascii.
 120+ 2000              //  The last character of the Name must have the msb set to signal the end of it (END_BIT)
 121+ 2000              //  This macro acts much like the standard Forth definition CREATE
 122+ 2000
 123+ 2000              New_Def         macro   label, namec, runcode, bits
 124+ 2000 ~
 125+ 2000 ~            Dict_Ptr        defl    $
 126+ 2000 ~
 127+ 2000 ~            //              ______________________________________________________________________
 128+ 2000 ~            //              Heap part
 129+ 2000 ~
 130+ 2000 ~
 131+ 2000 ~                            org     (Heap_Ptr & $1FFF) + $E000
 132+ 2000 ~
 133+ 2000 ~            temp_NFA        defl    $                   // save this NFA address to temp_NFA
 134+ 2000 ~            Latest_Definition defl  Heap_Ptr
 135+ 2000 ~
 136+ 2000 ~                            // dummy db directives used to calculate length of namec
 137+ 2000 ~                            db      namec
 138+ 2000 ~            len_NFA         defl    $ - temp_NFA
 139+ 2000 ~                            org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 140+ 2000 ~
 141+ 2000 ~                            db      len_NFA | END_BIT | bits  // The start of NFA must have msb set to signal the beginning of the sounted string
 142+ 2000 ~                            db      namec               // name string in 7-bit ascii, but
 143+ 2000 ~                            org     $-1                 // alter last byte of Name just above to set
 144+ 2000 ~                            db      {b $} | END_BIT     // msb as name end
 145+ 2000 ~
 146+ 2000 ~                            dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 147+ 2000 ~            Prev_Ptr        defl    Heap_Ptr
 148+ 2000 ~
 149+ 2000 ~            mirror_Ptr      defl    $
 150+ 2000 ~
 151+ 2000 ~                            dw      Dict_Ptr + 2        // xt
 152+ 2000 ~            Heap_Ptr        defl    $ - $E000           // save current HP
 153+ 2000 ~
 154+ 2000 ~            Current_HP      defl  $ - $E000             // used to set HP once!
 155+ 2000 ~
 156+ 2000 ~            //              ______________________________________________________________________
 157+ 2000 ~            //              Dictionary part
 158+ 2000 ~
 159+ 2000 ~                            org     Dict_Ptr
 160+ 2000 ~
 161+ 2000 ~                            dw      mirror_Ptr - $E000 + Heap_offset
 162+ 2000 ~
 163+ 2000 ~            label:          if runcode != 0 ; ok        // This is the start address of the direct jp(hl)
 164+ 2000 ~                            call    runcode ; ok        // for primitive definitions  actual code
 165+ 2000 ~
 166+ 2000 ~
 167+ 2000 ~                            endif           ; ok        // for other definitions it "points" the correct handler
 168+ 2000 ~                            // Use of "; ok" to suppress "warning[fwdref]"
 169+ 2000 ~
 170+ 2000 ~            last_NFA        defl    temp_NFA            // keep track of NFA saved above
 171+ 2000                              endm
 172+ 2000
 173+ 2000              //  ______________________________________________________________________
 174+ 2000              //
 175+ 2000              // Create a "constant"
 176+ 2000              // The constant value is compiled in first PFA cell
 177+ 2000              Constant_Def    macro   label, namec, constant_value
 178+ 2000 ~                            New_Def  label, namec, Constant_Ptr, is_normal
 179+ 2000 ~                            dw      constant_value
 180+ 2000                              endm
 181+ 2000
 182+ 2000              //  ______________________________________________________________________
 183+ 2000              //
 184+ 2000              // Create a "variable"
 185+ 2000              // The when invoked, a variable returns a pointer, the address of first PFA cell
 186+ 2000              // this allow creation of "variables" which content is  of any length
 187+ 2000              Variable_Def    macro   label, namec, initial_value
 188+ 2000 ~                            New_Def  label, namec, Variable_Ptr, is_normal
 189+ 2000 ~                            dw      initial_value
 190+ 2000                              endm
 191+ 2000
 192+ 2000              //  ______________________________________________________________________
 193+ 2000              //
 194+ 2000              // Create a "user"
 195+ 2000              // It uses a single byte as offset to calculate the address of the variable
 196+ 2000              User_Def        macro   label, namec, offset_value
 197+ 2000 ~                            New_Def  label, namec, User_Ptr, is_normal
 198+ 2000 ~                            db      offset_value
 199+ 2000                              endm
 200+ 2000
 201+ 2000              //  ______________________________________________________________________
 202+ 2000              //
 203+ 2000              // Create a "colon-definition"
 204+ 2000              // The CFA contains a small routine i.e. "call Enter_Ptr".
 205+ 2000              // The PFA, three bytes later, contains the actual Forth definition
 206+ 2000              Colon_Def       macro   label, namec, bits
 207+ 2000 ~                            New_Def  label, namec, Enter_Ptr, bits ; ok
 208+ 2000                              endm
 209+ 2000
 210+ 2000              //  ______________________________________________________________________
 211+ 2000              //
 212+ 2000              // Create a "heap-string"
 213+ 2000              Start_Heap      macro
 214+ 2000 ~            temp_ORG        defl    $                   // save this ORG
 215+ 2000 ~                            org     (Heap_Ptr & $1FFF) + $E000
 216+ 2000 ~
 217+ 2000                              endm
 218+ 2000
 219+ 2000              End_Heap        macro
 220+ 2000 ~            Heap_Ptr        defl    $ - $E000
 221+ 2000 ~                            org     temp_ORG
 222+ 2000 ~
 223+ 2000                              endm
 224+ 2000
 225+ 2000
 226+ 2000              //  ______________________________________________________________________
 227+ 2000              //
 228+ 2000
 229+ 2000
 230+ 2000
 231+ 2000              S0_system:      equ     $D0E8               // Address of top of Calc Stack
 232+ 2000              TIB_system      equ     $D0E8               // TIB grows upwards, Return-Stack downward.
 233+ 2000              R0_system:      equ     $D188               // Address of top of Return Stack. This is S0 + $00A0
 234+ 2000              USER_system:    equ     $D188               // User variables zone.
 235+ 2000              FIRST_system:   equ     $D1E4               // Address of first BUFFER
 236+ 2000              LIMIT_system:   equ     $E000               // Address of first byte beyond last BUFFER
 237+ 2000
# file closed: C:\Zx\CSpect\Projects\vForth17_DOT/source/system.asm
 139  2000                              include "L0.asm"
# file opened: C:\Zx\CSpect\Projects\vForth17_DOT/source/L0.asm
   1+ 2000              //  ______________________________________________________________________
   2+ 2000              //
   3+ 2000              //  L0.asm
   4+ 2000              //
   5+ 2000              //  Origin-Area and Level-0 definitions
   6+ 2000              //  ______________________________________________________________________
   7+ 2000
   8+ 2000              Cold_origin:
   9+ 2000 F3                           di      // and     a
  10+ 2001 C3 FE 32                     jp      ColdRoutine
  11+ 2004              Warm_origin:
  12+ 2004 37                           scf
  13+ 2005 C3 FE 32                     jp      WarmRoutine
  14+ 2008
  15+ 2008              // +008
  16+ 2008 E6 D0        SP_Basic:       dw      $D0E6               // These are bits with some "standard" meaning... 0101
  17+ 200A
  18+ 200A              // +00A
  19+ 200A 00 0E                        dw      $0E00
  20+ 200C
  21+ 200C              // +00C
  22+ 200C E1 0C        Latest_origin:  dw      Latest_Definition   // Latest word (used in Cold_Start)
  23+ 200E
  24+ 200E              // +00E
  25+ 200E 0C 00        DEL_Char_Ptr:   dw      $000C               // This is the characther used as "Back-Space"
  26+ 2010
  27+ 2010              // +010
  28+ 2010 50 B2        CPU_Id          dw      $B250               // Z80 expressed in base 36
  29+ 2012
  30+ 2012              // +012
  31+ 2012 E8 D0        S0_origin:      dw      S0_system
  32+ 2014 88 D1        R0_origin:      dw      R0_system
  33+ 2016 E8 D0        TIB_origin:     dw      TIB_system
  34+ 2018 1F 00        WIDTH_origin:   dw      31
  35+ 201A 01 00        WARNING_origin: dw      1
  36+ 201C 00 80        FENCE_origin:   dw      $8000 // $8184 // 25446 // $6000 // **** Fence_Word
  37+ 201E 00 80        DP_origin       dw      $8000 // $8184 // 25446 // $6000 // ****Fence_Word
  38+ 2020 E6 31        VOCLINK_origin: dw      Voclink_Ptr
  39+ 2022 E4 D1                        dw      FIRST_system
  40+ 2024 00 E0                        dw      LIMIT_system
  41+ 2026 EF 0C        HP_origin:      dw      Current_HP
  42+ 2028
  43+ 2028              // +028
  44+ 2028 8F           Block_Face:     db      SOLIDBLOCK_CHAR     // Caps-Lock   Cursor face
  45+ 2029 8C           Half_Face:      db      HALFBLOCK_CHAR      // Caps-unlock Cursor face
  46+ 202A 5F           Underscore_Face:db      UNDERSCORE_CHAR     // Underscore  Cursor face
  47+ 202B 00                           db      0
  48+ 202C
  49+ 202C              // +02C
  50+ 202C 00 00        SP_Saved:       dw      $0000               // Saved SP during NextOS call
  51+ 202E
  52+ 202E              // +02E
  53+ 202E 88 D1        USER_Pointer:   dw      USER_system
  54+ 2030
  55+ 2030              // +030
  56+ 2030 88 D1        RP_Pointer:     dw      $d188 // R0_system
  57+ 2032
  58+ 2032              // +32
  59+ 2032 00 00        IX_Echo:        dw      $0000               // Echo IX after NextOS call
  60+ 2034
  61+ 2034
  62+ 2034                              Start_Heap
  62+ 2034             >temp_ORG        defl    $                   // save this ORG
  62+ 2034             >                org     (Heap_Ptr & $1FFF) + $E000
  62+ E002             >
  63+ E002              Splash_Ptr      defl    $ - $E000           // save current HP
  64+ E002                              // length include a leading space in each line
  65+ E002 6B                           db      107
  66+ E003 20 76 2D 46                  db      " v-Forth 1.7 - NextZXOS version ", $0D      // 33
  66+ E007 6F 72 74 68
  66+ E00B 20 31 2E 37
  66+ E00F 20 2D 20 4E
  66+ E013 65 78 74 5A
  66+ E017 58 4F 53 20
  66+ E01B 76 65 72 73
  66+ E01F 69 6F 6E 20
  66+ E023 0D
  67+ E024 20 44 6F 74                  db      " Dot-command - build 2024-08-09 ", $0D  // 33
  67+ E028 2D 63 6F 6D
  67+ E02C 6D 61 6E 64
  67+ E030 20 2D 20 62
  67+ E034 75 69 6C 64
  67+ E038 20 32 30 32
  67+ E03C 34 2D 30 38
  67+ E040 2D 30 39 20
  67+ E044 0D
  68+ E045 20 4D 49 54                  db      " MIT License ", 127                         // 14
  68+ E049 20 4C 69 63
  68+ E04D 65 6E 73 65
  68+ E051 20 7F
  69+ E053 20 31 39 39                  db      " 1990-2024 Matteo Vitturi ", $0D            // 27
  69+ E057 30 2D 32 30
  69+ E05B 32 34 20 4D
  69+ E05F 61 74 74 65
  69+ E063 6F 20 56 69
  69+ E067 74 74 75 72
  69+ E06B 69 20 0D
  70+ E06E                              End_Heap
  70+ E06E             >Heap_Ptr        defl    $ - $E000
  70+ E06E             >                org     temp_ORG
  70+ 2034             >
  71+ 2034
  72+ 2034              //  ______________________________________________________________________
  73+ 2034
  74+ 2034              // from this point we can use LDHLRP and LDRPHL Assembler macros
  75+ 2034              // instead of their equivalent long sequences.
  76+ 2034
  77+ 2034              //  ______________________________________________________________________
  78+ 2034
  79+ 2034              // address for "next" - inner interpreter
  80+ 2034              // This address must always be pointed by IX
  81+ 2034              // "next" macro simply does a  jp(ix)  instruction
  82+ 2034
  83+ 2034              // Psh2_Ptr:       push    de
  84+ 2034              // Psh1_Ptr:       push    hl
  85+ 2034
  86+ 2034              Next_Ptr:       // This address must always be kept in IX: "next" relies on that
  87+ 2034
  88+ 2034              //              if ( 1 == DEBUGGING )
  89+ 2034              //              ld      hl, Next_Breakpoint_1
  90+ 2034              //              and     a
  91+ 2034              //              sbc     hl, bc
  92+ 2034              //              jr      nz, Next_Continue
  93+ 2034              //              nop // This is where you have to put a real breakpoint to intercept BC values...
  94+ 2034              //              endif
  95+ 2034
  96+ 2034              Next_Continue:
  97+ 2034 0A                           ld      a, (bc)
  98+ 2035 03                           inc     bc
  99+ 2036 6F                           ld      l, a
 100+ 2037 0A                           ld      a, (bc)
 101+ 2038 03                           inc     bc
 102+ 2039 67                           ld      h, a                // hl contains a CFA (xt) of word being executed
 103+ 203A
 104+ 203A              // Execute xt i.e. CFA held in HL
 105+ 203A              Exec_Ptr:
 106+ 203A
 107+ 203A
 108+ 203A
 109+ 203A
 110+ 203A E9                           jp      (hl)                // and jump to it
 111+ 203B                                                          // there you'll find the real code or a CALL to a ;code part
 112+ 203B
 113+ 203B              // temp_NULL       defl    Heap_Ptr & $1FFF
 114+ 203B              // 0x00         n --      ( compile time )
 115+ 203B              //              New_Def NUL_DUMMY,  $00, is_code, is_immediate
 116+ 203B              //              next
 117+ 203B
 118+ 203B              //  ______________________________________________________________________
 119+ 203B              //
 120+ 203B              // lit          -- x
 121+ 203B              // puts on top of stack the value of the following word.
 122+ 203B              // it is compiled in colon definition before a literal number
 123+ 203B
 124+ 203B                              New_Def  LIT, "LIT", is_code, is_normal
 124+ 203B             >
 124+ 203B             >Dict_Ptr        defl    $
 124+ 203B             >
 124+ 203B             >//              ______________________________________________________________________
 124+ 203B             >//              Heap part
 124+ 203B             >
 124+ 203B             >
 124+ 203B             >                org     (Heap_Ptr & $1FFF) + $E000
 124+ E06E             >
 124+ E06E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 124+ E06E             >Latest_Definition defl  Heap_Ptr
 124+ E06E             >
 124+ E06E             >                // dummy db directives used to calculate length of namec
 124+ E06E 4C 49 54    >                db      "LIT"
 124+ E071             >len_NFA         defl    $ - temp_NFA
 124+ E071             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 124+ E06E             >
 124+ E06E 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 124+ E06F 4C 49 54    >                db      "LIT"               // name string in 7-bit ascii, but
 124+ E072             >                org     $-1                 // alter last byte of Name just above to set
 124+ E071 D4          >                db      {b $} | END_BIT     // msb as name end
 124+ E072             >
 124+ E072 00 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 124+ E074             >Prev_Ptr        defl    Heap_Ptr
 124+ E074             >
 124+ E074             >mirror_Ptr      defl    $
 124+ E074             >
 124+ E074 3D 20       >                dw      Dict_Ptr + 2        // xt
 124+ E076             >Heap_Ptr        defl    $ - $E000           // save current HP
 124+ E076             >
 124+ E076             >Current_HP      defl  $ - $E000             // used to set HP once!
 124+ E076             >
 124+ E076             >//              ______________________________________________________________________
 124+ E076             >//              Dictionary part
 124+ E076             >
 124+ E076             >                org     Dict_Ptr
 124+ 203B             >
 124+ 203B 74 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 124+ 203D             >
 124+ 203D             >LIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 124+ 203D ~           >                call    runcode ; ok        // for primitive definitions  actual code
 124+ 203D ~           >
 124+ 203D ~           >
 124+ 203D             >                endif           ; ok        // for other definitions it "points" the correct handler
 124+ 203D             >                // Use of "; ok" to suppress "warning[fwdref]"
 124+ 203D             >
 124+ 203D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 125+ 203D
 126+ 203D 0A                           ld      a, (bc)
 127+ 203E 03                           inc     bc
 128+ 203F 6F                           ld      l, a
 129+ 2040 0A                           ld      a, (bc)
 130+ 2041 03                           inc     bc
 131+ 2042 67                           ld      h, a
 132+ 2043 E5                           push    hl
 133+ 2044                              next
 133+ 2044 DD E9       >                jp      (ix)
 134+ 2046
 135+ 2046              //  ______________________________________________________________________
 136+ 2046              //
 137+ 2046              // execute      i*x xt -- j*x
 138+ 2046              // execution token. usually xt is given by CFA
 139+ 2046
 140+ 2046                              New_Def  EXECUTE, "EXECUTE", is_code, is_normal
 140+ 2046             >
 140+ 2046             >Dict_Ptr        defl    $
 140+ 2046             >
 140+ 2046             >//              ______________________________________________________________________
 140+ 2046             >//              Heap part
 140+ 2046             >
 140+ 2046             >
 140+ 2046             >                org     (Heap_Ptr & $1FFF) + $E000
 140+ E076             >
 140+ E076             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 140+ E076             >Latest_Definition defl  Heap_Ptr
 140+ E076             >
 140+ E076             >                // dummy db directives used to calculate length of namec
 140+ E076 45 58 45 43 >                db      "EXECUTE"
 140+ E07A 55 54 45    >
 140+ E07D             >len_NFA         defl    $ - temp_NFA
 140+ E07D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 140+ E076             >
 140+ E076 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 140+ E077 45 58 45 43 >                db      "EXECUTE"               // name string in 7-bit ascii, but
 140+ E07B 55 54 45    >
 140+ E07E             >                org     $-1                 // alter last byte of Name just above to set
 140+ E07D C5          >                db      {b $} | END_BIT     // msb as name end
 140+ E07E             >
 140+ E07E 6E 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 140+ E080             >Prev_Ptr        defl    Heap_Ptr
 140+ E080             >
 140+ E080             >mirror_Ptr      defl    $
 140+ E080             >
 140+ E080 48 20       >                dw      Dict_Ptr + 2        // xt
 140+ E082             >Heap_Ptr        defl    $ - $E000           // save current HP
 140+ E082             >
 140+ E082             >Current_HP      defl  $ - $E000             // used to set HP once!
 140+ E082             >
 140+ E082             >//              ______________________________________________________________________
 140+ E082             >//              Dictionary part
 140+ E082             >
 140+ E082             >                org     Dict_Ptr
 140+ 2046             >
 140+ 2046 80 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 140+ 2048             >
 140+ 2048             >EXECUTE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 140+ 2048 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 140+ 2048 ~           >
 140+ 2048 ~           >
 140+ 2048             >                endif           ; ok        // for other definitions it "points" the correct handler
 140+ 2048             >                // Use of "; ok" to suppress "warning[fwdref]"
 140+ 2048             >
 140+ 2048             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 141+ 2048 C9                           ret
 142+ 2049
 143+ 2049              //  ______________________________________________________________________
 144+ 2049              //
 145+ 2049              // brk
 146+ 2049              //              New_Def  BRK, "BRK", is_code, is_normal
 147+ 2049              //              next
 148+ 2049
 149+ 2049
 150+ 2049
 151+ 2049              //  ______________________________________________________________________
 152+ 2049              //
 153+ 2049              // (+loop)      n --
 154+ 2049              // compiled by +LOOP. it uses the top two values of return-stack to
 155+ 2049              // keep track of index and limit, they are accessed via I and I'
 156+ 2049              // Add n to the loop index. If the loop index did not cross the boundary
 157+ 2049              // between the loop limit minus one and the loop limit, continue execution
 158+ 2049              // at the beginning of the loop. Otherwise, discard the current loop control
 159+ 2049              // parameters and continue execution immediately following the loop.
 160+ 2049                              New_Def C_PLOOP, "(+LOOP)", is_code, is_normal
 160+ 2049             >
 160+ 2049             >Dict_Ptr        defl    $
 160+ 2049             >
 160+ 2049             >//              ______________________________________________________________________
 160+ 2049             >//              Heap part
 160+ 2049             >
 160+ 2049             >
 160+ 2049             >                org     (Heap_Ptr & $1FFF) + $E000
 160+ E082             >
 160+ E082             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 160+ E082             >Latest_Definition defl  Heap_Ptr
 160+ E082             >
 160+ E082             >                // dummy db directives used to calculate length of namec
 160+ E082 28 2B 4C 4F >                db      "(+LOOP)"
 160+ E086 4F 50 29    >
 160+ E089             >len_NFA         defl    $ - temp_NFA
 160+ E089             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 160+ E082             >
 160+ E082 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 160+ E083 28 2B 4C 4F >                db      "(+LOOP)"               // name string in 7-bit ascii, but
 160+ E087 4F 50 29    >
 160+ E08A             >                org     $-1                 // alter last byte of Name just above to set
 160+ E089 A9          >                db      {b $} | END_BIT     // msb as name end
 160+ E08A             >
 160+ E08A 76 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 160+ E08C             >Prev_Ptr        defl    Heap_Ptr
 160+ E08C             >
 160+ E08C             >mirror_Ptr      defl    $
 160+ E08C             >
 160+ E08C 4B 20       >                dw      Dict_Ptr + 2        // xt
 160+ E08E             >Heap_Ptr        defl    $ - $E000           // save current HP
 160+ E08E             >
 160+ E08E             >Current_HP      defl  $ - $E000             // used to set HP once!
 160+ E08E             >
 160+ E08E             >//              ______________________________________________________________________
 160+ E08E             >//              Dictionary part
 160+ E08E             >
 160+ E08E             >                org     Dict_Ptr
 160+ 2049             >
 160+ 2049 8C 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 160+ 204B             >
 160+ 204B             >C_PLOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 160+ 204B ~           >                call    runcode ; ok        // for primitive definitions  actual code
 160+ 204B ~           >
 160+ 204B ~           >
 160+ 204B             >                endif           ; ok        // for other definitions it "points" the correct handler
 160+ 204B             >                // Use of "; ok" to suppress "warning[fwdref]"
 160+ 204B             >
 160+ 204B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 161+ 204B
 162+ 204B              Loop_Ptr:
 163+ 204B E1                           pop     hl                  // get increment
 164+ 204C EB                           ex      de, hl
 165+ 204D                              // *** ldhlrp
 166+ 204D C5                           push    bc                  // Save IP
 167+ 204E 42                           ld      b, d                // bc is increment
 168+ 204F 4B                           ld      c, e
 169+ 2050 E5                           push    hl
 170+ 2051 5E                           ld      e, (hl)             // hl points to loop-index, add increment to it.
 171+ 2052 7B                           ld      a, e                // de keeps index before increment.
 172+ 2053 81                           add     c
 173+ 2054 77                           ld      (hl), a
 174+ 2055 23                           inc     hl
 175+ 2056 56                           ld      d, (hl)
 176+ 2057 7A                           ld      a, d
 177+ 2058 88                           adc     b
 178+ 2059 77                           ld      (hl),a
 179+ 205A 23                           inc     hl
 180+ 205B
 181+ 205B 7B                           ld      a, e
 182+ 205C 96                           sub     (hl)
 183+ 205D 5F                           ld      e, a
 184+ 205E 23                           inc     hl
 185+ 205F 7A                           ld      a, d
 186+ 2060 9E                           sbc     (hl)
 187+ 2061 57                           ld      d, a                // DE is index - limit : limit is the "new zero"
 188+ 2062
 189+ 2062 EB                           ex      de, hl              // swap HL and DE, so restore DE:=RP+3
 190+ 2063 09                           add     hl, bc
 191+ 2064 CB 78                        bit     7, b                // keep increment-sign just before overwriting d
 192+ 2066 28 01                        jr      z, Loop_NegativeIncrement
 193+ 2068 3F                               ccf                     // carry-flag tracks bonudary limit crossing.
 194+ 2069              Loop_NegativeIncrement:
 195+ 2069 38 04                        jr      c, Loop_Endif
 196+ 206B D1                               pop     de              // Discard RP+3, retrieve original RP
 197+ 206C C1                               pop     bc                  // Retrieve IP
 198+ 206D 18 13                            jr      Branch_Ptr      // perform branch consuming following cell
 199+ 206F              Loop_Endif:
 200+ 206F C1                           pop     bc                  // discard original RP
 201+ 2070 EB                           ex      de, hl
 202+ 2071 23                           inc     hl                  // keep    RP+4 (exit from loop)
 203+ 2072                              // *** ldrphl                      // ld rp,hl macro 30h +Origin
 204+ 2072 EB                           ex      de, hl
 205+ 2073 C1                           pop     bc                  // Retrieve IP
 206+ 2074 03                           inc     bc                  // skip branch-style offset
 207+ 2075 03                           inc     bc
 208+ 2076                              next
 208+ 2076 DD E9       >                jp      (ix)
 209+ 2078
 210+ 2078              //  ______________________________________________________________________
 211+ 2078              //
 212+ 2078              // (loop)       n --
 213+ 2078              // same as (LOOP) but index is incremented by 1
 214+ 2078              // compiled by LOOP.
 215+ 2078                              New_Def C_LOOP, "(LOOP)", is_code, is_normal
 215+ 2078             >
 215+ 2078             >Dict_Ptr        defl    $
 215+ 2078             >
 215+ 2078             >//              ______________________________________________________________________
 215+ 2078             >//              Heap part
 215+ 2078             >
 215+ 2078             >
 215+ 2078             >                org     (Heap_Ptr & $1FFF) + $E000
 215+ E08E             >
 215+ E08E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 215+ E08E             >Latest_Definition defl  Heap_Ptr
 215+ E08E             >
 215+ E08E             >                // dummy db directives used to calculate length of namec
 215+ E08E 28 4C 4F 4F >                db      "(LOOP)"
 215+ E092 50 29       >
 215+ E094             >len_NFA         defl    $ - temp_NFA
 215+ E094             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 215+ E08E             >
 215+ E08E 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 215+ E08F 28 4C 4F 4F >                db      "(LOOP)"               // name string in 7-bit ascii, but
 215+ E093 50 29       >
 215+ E095             >                org     $-1                 // alter last byte of Name just above to set
 215+ E094 A9          >                db      {b $} | END_BIT     // msb as name end
 215+ E095             >
 215+ E095 82 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 215+ E097             >Prev_Ptr        defl    Heap_Ptr
 215+ E097             >
 215+ E097             >mirror_Ptr      defl    $
 215+ E097             >
 215+ E097 7A 20       >                dw      Dict_Ptr + 2        // xt
 215+ E099             >Heap_Ptr        defl    $ - $E000           // save current HP
 215+ E099             >
 215+ E099             >Current_HP      defl  $ - $E000             // used to set HP once!
 215+ E099             >
 215+ E099             >//              ______________________________________________________________________
 215+ E099             >//              Dictionary part
 215+ E099             >
 215+ E099             >                org     Dict_Ptr
 215+ 2078             >
 215+ 2078 97 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 215+ 207A             >
 215+ 207A             >C_LOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 215+ 207A ~           >                call    runcode ; ok        // for primitive definitions  actual code
 215+ 207A ~           >
 215+ 207A ~           >
 215+ 207A             >                endif           ; ok        // for other definitions it "points" the correct handler
 215+ 207A             >                // Use of "; ok" to suppress "warning[fwdref]"
 215+ 207A             >
 215+ 207A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 216+ 207A ED 8A 00 01                  push    1
 217+ 207E 18 CB                        jr      Loop_Ptr
 218+ 2080
 219+ 2080              //  ______________________________________________________________________
 220+ 2080              //
 221+ 2080              // branch       --
 222+ 2080              // unconditional branch in colon definition using the following cell as an offset from current IP value
 223+ 2080              // compiled by ELSE, AGAIN and some other immediate words
 224+ 2080
 225+ 2080                              New_Def BRANCH, "BRANCH", is_code, is_normal
 225+ 2080             >
 225+ 2080             >Dict_Ptr        defl    $
 225+ 2080             >
 225+ 2080             >//              ______________________________________________________________________
 225+ 2080             >//              Heap part
 225+ 2080             >
 225+ 2080             >
 225+ 2080             >                org     (Heap_Ptr & $1FFF) + $E000
 225+ E099             >
 225+ E099             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 225+ E099             >Latest_Definition defl  Heap_Ptr
 225+ E099             >
 225+ E099             >                // dummy db directives used to calculate length of namec
 225+ E099 42 52 41 4E >                db      "BRANCH"
 225+ E09D 43 48       >
 225+ E09F             >len_NFA         defl    $ - temp_NFA
 225+ E09F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 225+ E099             >
 225+ E099 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 225+ E09A 42 52 41 4E >                db      "BRANCH"               // name string in 7-bit ascii, but
 225+ E09E 43 48       >
 225+ E0A0             >                org     $-1                 // alter last byte of Name just above to set
 225+ E09F C8          >                db      {b $} | END_BIT     // msb as name end
 225+ E0A0             >
 225+ E0A0 8E 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 225+ E0A2             >Prev_Ptr        defl    Heap_Ptr
 225+ E0A2             >
 225+ E0A2             >mirror_Ptr      defl    $
 225+ E0A2             >
 225+ E0A2 82 20       >                dw      Dict_Ptr + 2        // xt
 225+ E0A4             >Heap_Ptr        defl    $ - $E000           // save current HP
 225+ E0A4             >
 225+ E0A4             >Current_HP      defl  $ - $E000             // used to set HP once!
 225+ E0A4             >
 225+ E0A4             >//              ______________________________________________________________________
 225+ E0A4             >//              Dictionary part
 225+ E0A4             >
 225+ E0A4             >                org     Dict_Ptr
 225+ 2080             >
 225+ 2080 A2 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 225+ 2082             >
 225+ 2082             >BRANCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 225+ 2082 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 225+ 2082 ~           >
 225+ 2082 ~           >
 225+ 2082             >                endif           ; ok        // for other definitions it "points" the correct handler
 225+ 2082             >                // Use of "; ok" to suppress "warning[fwdref]"
 225+ 2082             >
 225+ 2082             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 226+ 2082              Branch_Ptr:
 227+ 2082 0A                           ld      a, (bc)
 228+ 2083 6F                           ld      l, a
 229+ 2084 03                           inc     bc
 230+ 2085 0A                           ld      a, (bc)
 231+ 2086 67                           ld      h, a
 232+ 2087 0B                           dec     bc
 233+ 2088 09                           add     hl, bc
 234+ 2089 4D                           ld      c, l
 235+ 208A 44                           ld      b, h
 236+ 208B                              next
 236+ 208B DD E9       >                jp      (ix)
 237+ 208D
 238+ 208D
 239+ 208D              //  ______________________________________________________________________
 240+ 208D              //
 241+ 208D              // 0branch      f --
 242+ 208D              // conditional branch if the top-of-stack is ZERO or FALSE.
 243+ 208D              // compiled by IF, UNTIL and some other immediate words
 244+ 208D
 245+ 208D                              New_Def ZBRANCH, "0BRANCH", is_code, is_normal
 245+ 208D             >
 245+ 208D             >Dict_Ptr        defl    $
 245+ 208D             >
 245+ 208D             >//              ______________________________________________________________________
 245+ 208D             >//              Heap part
 245+ 208D             >
 245+ 208D             >
 245+ 208D             >                org     (Heap_Ptr & $1FFF) + $E000
 245+ E0A4             >
 245+ E0A4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 245+ E0A4             >Latest_Definition defl  Heap_Ptr
 245+ E0A4             >
 245+ E0A4             >                // dummy db directives used to calculate length of namec
 245+ E0A4 30 42 52 41 >                db      "0BRANCH"
 245+ E0A8 4E 43 48    >
 245+ E0AB             >len_NFA         defl    $ - temp_NFA
 245+ E0AB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 245+ E0A4             >
 245+ E0A4 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 245+ E0A5 30 42 52 41 >                db      "0BRANCH"               // name string in 7-bit ascii, but
 245+ E0A9 4E 43 48    >
 245+ E0AC             >                org     $-1                 // alter last byte of Name just above to set
 245+ E0AB C8          >                db      {b $} | END_BIT     // msb as name end
 245+ E0AC             >
 245+ E0AC 99 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 245+ E0AE             >Prev_Ptr        defl    Heap_Ptr
 245+ E0AE             >
 245+ E0AE             >mirror_Ptr      defl    $
 245+ E0AE             >
 245+ E0AE 8F 20       >                dw      Dict_Ptr + 2        // xt
 245+ E0B0             >Heap_Ptr        defl    $ - $E000           // save current HP
 245+ E0B0             >
 245+ E0B0             >Current_HP      defl  $ - $E000             // used to set HP once!
 245+ E0B0             >
 245+ E0B0             >//              ______________________________________________________________________
 245+ E0B0             >//              Dictionary part
 245+ E0B0             >
 245+ E0B0             >                org     Dict_Ptr
 245+ 208D             >
 245+ 208D AE 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 245+ 208F             >
 245+ 208F             >ZBRANCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 245+ 208F ~           >                call    runcode ; ok        // for primitive definitions  actual code
 245+ 208F ~           >
 245+ 208F ~           >
 245+ 208F             >                endif           ; ok        // for other definitions it "points" the correct handler
 245+ 208F             >                // Use of "; ok" to suppress "warning[fwdref]"
 245+ 208F             >
 245+ 208F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 246+ 208F              ZBranch_Ptr:
 247+ 208F E1                           pop     hl
 248+ 2090 7D                           ld      a, l
 249+ 2091 B4                           or      h
 250+ 2092 28 EE                        jr      z, Branch_Ptr
 251+ 2094 03                           inc     bc                  // if not branch, skip offset cell.
 252+ 2095 03                           inc     bc
 253+ 2096                              next
 253+ 2096 DD E9       >                jp      (ix)
 254+ 2098
 255+ 2098              //  ______________________________________________________________________
 256+ 2098              //
 257+ 2098              // (leave)        --
 258+ 2098              // compiled by LEAVE
 259+ 2098              // this forces to exit from loop and jump past
 260+ 2098                              New_Def C_LEAVE, "(LEAVE)", is_code, is_normal
 260+ 2098             >
 260+ 2098             >Dict_Ptr        defl    $
 260+ 2098             >
 260+ 2098             >//              ______________________________________________________________________
 260+ 2098             >//              Heap part
 260+ 2098             >
 260+ 2098             >
 260+ 2098             >                org     (Heap_Ptr & $1FFF) + $E000
 260+ E0B0             >
 260+ E0B0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 260+ E0B0             >Latest_Definition defl  Heap_Ptr
 260+ E0B0             >
 260+ E0B0             >                // dummy db directives used to calculate length of namec
 260+ E0B0 28 4C 45 41 >                db      "(LEAVE)"
 260+ E0B4 56 45 29    >
 260+ E0B7             >len_NFA         defl    $ - temp_NFA
 260+ E0B7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 260+ E0B0             >
 260+ E0B0 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 260+ E0B1 28 4C 45 41 >                db      "(LEAVE)"               // name string in 7-bit ascii, but
 260+ E0B5 56 45 29    >
 260+ E0B8             >                org     $-1                 // alter last byte of Name just above to set
 260+ E0B7 A9          >                db      {b $} | END_BIT     // msb as name end
 260+ E0B8             >
 260+ E0B8 A4 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 260+ E0BA             >Prev_Ptr        defl    Heap_Ptr
 260+ E0BA             >
 260+ E0BA             >mirror_Ptr      defl    $
 260+ E0BA             >
 260+ E0BA 9A 20       >                dw      Dict_Ptr + 2        // xt
 260+ E0BC             >Heap_Ptr        defl    $ - $E000           // save current HP
 260+ E0BC             >
 260+ E0BC             >Current_HP      defl  $ - $E000             // used to set HP once!
 260+ E0BC             >
 260+ E0BC             >//              ______________________________________________________________________
 260+ E0BC             >//              Dictionary part
 260+ E0BC             >
 260+ E0BC             >                org     Dict_Ptr
 260+ 2098             >
 260+ 2098 BA 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 260+ 209A             >
 260+ 209A             >C_LEAVE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 260+ 209A ~           >                call    runcode ; ok        // for primitive definitions  actual code
 260+ 209A ~           >
 260+ 209A ~           >
 260+ 209A             >                endif           ; ok        // for other definitions it "points" the correct handler
 260+ 209A             >                // Use of "; ok" to suppress "warning[fwdref]"
 260+ 209A             >
 260+ 209A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 261+ 209A                              // ex      de, hl
 262+ 209A                              // *** ldhlrp
 263+ 209A 3E 04                        ld      a, 4
 264+ 209C ED 32                        add     de, a
 265+ 209E                              // *** ldrphl
 266+ 209E                              // ex      de, hl
 267+ 209E 18 E2                        jr      Branch_Ptr       // perform branch consuming following cell
 268+ 20A0                              next
 268+ 20A0 DD E9       >                jp      (ix)
 269+ 20A2
 270+ 20A2              //  ______________________________________________________________________
 271+ 20A2              //
 272+ 20A2              // (?do)        lim ind --
 273+ 20A2              // compiled by ?DO to make a loop checking for lim == ind first
 274+ 20A2              // at run-time (?DO) must be followed by a BRANCH offset
 275+ 20A2              // used to skip the loop if lim == ind
 276+ 20A2                              New_Def C_Q_DO, "(?DO)", is_code, is_normal
 276+ 20A2             >
 276+ 20A2             >Dict_Ptr        defl    $
 276+ 20A2             >
 276+ 20A2             >//              ______________________________________________________________________
 276+ 20A2             >//              Heap part
 276+ 20A2             >
 276+ 20A2             >
 276+ 20A2             >                org     (Heap_Ptr & $1FFF) + $E000
 276+ E0BC             >
 276+ E0BC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 276+ E0BC             >Latest_Definition defl  Heap_Ptr
 276+ E0BC             >
 276+ E0BC             >                // dummy db directives used to calculate length of namec
 276+ E0BC 28 3F 44 4F >                db      "(?DO)"
 276+ E0C0 29          >
 276+ E0C1             >len_NFA         defl    $ - temp_NFA
 276+ E0C1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 276+ E0BC             >
 276+ E0BC 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 276+ E0BD 28 3F 44 4F >                db      "(?DO)"               // name string in 7-bit ascii, but
 276+ E0C1 29          >
 276+ E0C2             >                org     $-1                 // alter last byte of Name just above to set
 276+ E0C1 A9          >                db      {b $} | END_BIT     // msb as name end
 276+ E0C2             >
 276+ E0C2 B0 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 276+ E0C4             >Prev_Ptr        defl    Heap_Ptr
 276+ E0C4             >
 276+ E0C4             >mirror_Ptr      defl    $
 276+ E0C4             >
 276+ E0C4 A4 20       >                dw      Dict_Ptr + 2        // xt
 276+ E0C6             >Heap_Ptr        defl    $ - $E000           // save current HP
 276+ E0C6             >
 276+ E0C6             >Current_HP      defl  $ - $E000             // used to set HP once!
 276+ E0C6             >
 276+ E0C6             >//              ______________________________________________________________________
 276+ E0C6             >//              Dictionary part
 276+ E0C6             >
 276+ E0C6             >                org     Dict_Ptr
 276+ 20A2             >
 276+ 20A2 C4 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 276+ 20A4             >
 276+ 20A4             >C_Q_DO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 276+ 20A4 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 276+ 20A4 ~           >
 276+ 20A4 ~           >
 276+ 20A4             >                endif           ; ok        // for other definitions it "points" the correct handler
 276+ 20A4             >                // Use of "; ok" to suppress "warning[fwdref]"
 276+ 20A4             >
 276+ 20A4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 277+ 20A4 D9                           exx
 278+ 20A5 D1                            pop     de                  // de has the index
 279+ 20A6 E1                            pop     hl                  // hl has the limit
 280+ 20A7 44                            ld      b, h
 281+ 20A8 4D                            ld      c, l
 282+ 20A9 E5                            push    hl                  // put them back to stack for later
 283+ 20AA D5                            push    de
 284+ 20AB A7                            and     a                   // reset carry flag
 285+ 20AC ED 52                         sbc     hl, de              // compute limit - index
 286+ 20AE D9                           exx
 287+ 20AF 20 04                        jr      nz, Do_Ptr          // if zero then don't even begin loop
 288+ 20B1 E1                               pop     hl
 289+ 20B2 E1                               pop     hl
 290+ 20B3 18 CD                            jr      Branch_Ptr          // perform branch consuming following cell
 291+ 20B5              Do_Ptr:
 292+ 20B5                              // *** ldhlrp                 // prepare RP
 293+ 20B5                              // *** ex      de, hl
 294+ 20B5                              // dec     de
 295+ 20B5                              // dec     de
 296+ 20B5                              // dec     de
 297+ 20B5                              // dec     de
 298+ 20B5 ED 35 FC FF                  add     de, -4              // cannot use LD A,-4 and ADD DE,A !
 299+ 20B9 D5                           push    de                  // pass it to h'l'
 300+ 20BA                              // *** ex      de, hl
 301+ 20BA                              // *** ldrphl
 302+ 20BA D9                           exx
 303+ 20BB E1                            pop     hl
 304+ 20BC
 305+ 20BC                               // store index as top RP
 306+ 20BC D1                            pop     de
 307+ 20BD 73                            ld      (hl), e
 308+ 20BE 23                            inc     hl
 309+ 20BF 72                            ld      (hl), d
 310+ 20C0 23                            inc     hl
 311+ 20C1                               // stores lim as second from top RP
 312+ 20C1 D1                            pop     de
 313+ 20C2 73                            ld      (hl), e
 314+ 20C3 23                            inc     hl
 315+ 20C4 72                            ld      (hl), d
 316+ 20C5 D9                           exx
 317+ 20C6                              // skip branch-style offseet
 318+ 20C6 03                           inc     bc
 319+ 20C7 03                           inc     bc
 320+ 20C8                              next
 320+ 20C8 DD E9       >                jp      (ix)
 321+ 20CA
 322+ 20CA              //  ______________________________________________________________________
 323+ 20CA              //
 324+ 20CA              // (do)        lim ind --
 325+ 20CA              // compiled by DO to make a loop checking for lim == ind first
 326+ 20CA              // this is a simpler version of (?DO)
 327+ 20CA                              New_Def C_DO, "(DO)", is_code, is_normal
 327+ 20CA             >
 327+ 20CA             >Dict_Ptr        defl    $
 327+ 20CA             >
 327+ 20CA             >//              ______________________________________________________________________
 327+ 20CA             >//              Heap part
 327+ 20CA             >
 327+ 20CA             >
 327+ 20CA             >                org     (Heap_Ptr & $1FFF) + $E000
 327+ E0C6             >
 327+ E0C6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 327+ E0C6             >Latest_Definition defl  Heap_Ptr
 327+ E0C6             >
 327+ E0C6             >                // dummy db directives used to calculate length of namec
 327+ E0C6 28 44 4F 29 >                db      "(DO)"
 327+ E0CA             >len_NFA         defl    $ - temp_NFA
 327+ E0CA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 327+ E0C6             >
 327+ E0C6 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 327+ E0C7 28 44 4F 29 >                db      "(DO)"               // name string in 7-bit ascii, but
 327+ E0CB             >                org     $-1                 // alter last byte of Name just above to set
 327+ E0CA A9          >                db      {b $} | END_BIT     // msb as name end
 327+ E0CB             >
 327+ E0CB BC 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 327+ E0CD             >Prev_Ptr        defl    Heap_Ptr
 327+ E0CD             >
 327+ E0CD             >mirror_Ptr      defl    $
 327+ E0CD             >
 327+ E0CD CC 20       >                dw      Dict_Ptr + 2        // xt
 327+ E0CF             >Heap_Ptr        defl    $ - $E000           // save current HP
 327+ E0CF             >
 327+ E0CF             >Current_HP      defl  $ - $E000             // used to set HP once!
 327+ E0CF             >
 327+ E0CF             >//              ______________________________________________________________________
 327+ E0CF             >//              Dictionary part
 327+ E0CF             >
 327+ E0CF             >                org     Dict_Ptr
 327+ 20CA             >
 327+ 20CA CD 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 327+ 20CC             >
 327+ 20CC             >C_DO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 327+ 20CC ~           >                call    runcode ; ok        // for primitive definitions  actual code
 327+ 20CC ~           >
 327+ 20CC ~           >
 327+ 20CC             >                endif           ; ok        // for other definitions it "points" the correct handler
 327+ 20CC             >                // Use of "; ok" to suppress "warning[fwdref]"
 327+ 20CC             >
 327+ 20CC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 328+ 20CC 0B                           dec     bc                  // prepare IP beforehand
 329+ 20CD 0B                           dec     bc                  // to balance the two final 2 inc bc in (?do)
 330+ 20CE 18 E5                        jr      Do_Ptr
 331+ 20D0
 332+ 20D0              //  ______________________________________________________________________
 333+ 20D0              //
 334+ 20D0              // i            -- n
 335+ 20D0              // used between DO and LOOP or between DO e +LOOP to copy on top of stack
 336+ 20D0              // the current value of the index-loop
 337+ 20D0                              New_Def I, "I", is_code, is_normal
 337+ 20D0             >
 337+ 20D0             >Dict_Ptr        defl    $
 337+ 20D0             >
 337+ 20D0             >//              ______________________________________________________________________
 337+ 20D0             >//              Heap part
 337+ 20D0             >
 337+ 20D0             >
 337+ 20D0             >                org     (Heap_Ptr & $1FFF) + $E000
 337+ E0CF             >
 337+ E0CF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 337+ E0CF             >Latest_Definition defl  Heap_Ptr
 337+ E0CF             >
 337+ E0CF             >                // dummy db directives used to calculate length of namec
 337+ E0CF 49          >                db      "I"
 337+ E0D0             >len_NFA         defl    $ - temp_NFA
 337+ E0D0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 337+ E0CF             >
 337+ E0CF 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 337+ E0D0 49          >                db      "I"               // name string in 7-bit ascii, but
 337+ E0D1             >                org     $-1                 // alter last byte of Name just above to set
 337+ E0D0 C9          >                db      {b $} | END_BIT     // msb as name end
 337+ E0D1             >
 337+ E0D1 C6 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 337+ E0D3             >Prev_Ptr        defl    Heap_Ptr
 337+ E0D3             >
 337+ E0D3             >mirror_Ptr      defl    $
 337+ E0D3             >
 337+ E0D3 D2 20       >                dw      Dict_Ptr + 2        // xt
 337+ E0D5             >Heap_Ptr        defl    $ - $E000           // save current HP
 337+ E0D5             >
 337+ E0D5             >Current_HP      defl  $ - $E000             // used to set HP once!
 337+ E0D5             >
 337+ E0D5             >//              ______________________________________________________________________
 337+ E0D5             >//              Dictionary part
 337+ E0D5             >
 337+ E0D5             >                org     Dict_Ptr
 337+ 20D0             >
 337+ 20D0 D3 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 337+ 20D2             >
 337+ 20D2             >I:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 337+ 20D2 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 337+ 20D2 ~           >
 337+ 20D2 ~           >
 337+ 20D2             >                endif           ; ok        // for other definitions it "points" the correct handler
 337+ 20D2             >                // Use of "; ok" to suppress "warning[fwdref]"
 337+ 20D2             >
 337+ 20D2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 338+ 20D2              I_Ptr:
 339+ 20D2 62                           ld      h, d
 340+ 20D3 6B                           ld      l, e
 341+ 20D4                              // *** ldhlrp
 342+ 20D4              I_Ptr_prime:
 343+ 20D4 7E                           ld      a, (hl)
 344+ 20D5 23                           inc     hl
 345+ 20D6 66                           ld      h, (hl)
 346+ 20D7 6F                           ld      l, a
 347+ 20D8 E5                           push    hl
 348+ 20D9                              next
 348+ 20D9 DD E9       >                jp      (ix)
 349+ 20DB
 350+ 20DB
 351+ 20DB              //  ______________________________________________________________________
 352+ 20DB              //
 353+ 20DB              // i'            -- n
 354+ 20DB              // used between DO and LOOP or between DO e +LOOP to copy on top of stack
 355+ 20DB              // the limit of the index-loop
 356+ 20DB
 357+ 20DB                              New_Def II, "I'", is_code, is_normal
 357+ 20DB             >
 357+ 20DB             >Dict_Ptr        defl    $
 357+ 20DB             >
 357+ 20DB             >//              ______________________________________________________________________
 357+ 20DB             >//              Heap part
 357+ 20DB             >
 357+ 20DB             >
 357+ 20DB             >                org     (Heap_Ptr & $1FFF) + $E000
 357+ E0D5             >
 357+ E0D5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 357+ E0D5             >Latest_Definition defl  Heap_Ptr
 357+ E0D5             >
 357+ E0D5             >                // dummy db directives used to calculate length of namec
 357+ E0D5 49 27       >                db      "I'"
 357+ E0D7             >len_NFA         defl    $ - temp_NFA
 357+ E0D7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 357+ E0D5             >
 357+ E0D5 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 357+ E0D6 49 27       >                db      "I'"               // name string in 7-bit ascii, but
 357+ E0D8             >                org     $-1                 // alter last byte of Name just above to set
 357+ E0D7 A7          >                db      {b $} | END_BIT     // msb as name end
 357+ E0D8             >
 357+ E0D8 CF 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 357+ E0DA             >Prev_Ptr        defl    Heap_Ptr
 357+ E0DA             >
 357+ E0DA             >mirror_Ptr      defl    $
 357+ E0DA             >
 357+ E0DA DD 20       >                dw      Dict_Ptr + 2        // xt
 357+ E0DC             >Heap_Ptr        defl    $ - $E000           // save current HP
 357+ E0DC             >
 357+ E0DC             >Current_HP      defl  $ - $E000             // used to set HP once!
 357+ E0DC             >
 357+ E0DC             >//              ______________________________________________________________________
 357+ E0DC             >//              Dictionary part
 357+ E0DC             >
 357+ E0DC             >                org     Dict_Ptr
 357+ 20DB             >
 357+ 20DB DA 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 357+ 20DD             >
 357+ 20DD             >II:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 357+ 20DD ~           >                call    runcode ; ok        // for primitive definitions  actual code
 357+ 20DD ~           >
 357+ 20DD ~           >
 357+ 20DD             >                endif           ; ok        // for other definitions it "points" the correct handler
 357+ 20DD             >                // Use of "; ok" to suppress "warning[fwdref]"
 357+ 20DD             >
 357+ 20DD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 358+ 20DD 62                           ld      h, d
 359+ 20DE 6B                           ld      l, e
 360+ 20DF                              // *** ldhlrp
 361+ 20DF 23                           inc     hl
 362+ 20E0 23                           inc     hl
 363+ 20E1 18 F1                        jr      I_Ptr_prime
 364+ 20E3
 365+ 20E3
 366+ 20E3              //  ______________________________________________________________________
 367+ 20E3              //
 368+ 20E3              // digit        c n -- u tf  |  ff
 369+ 20E3              // convert a character c using base n
 370+ 20E3              // returns a unsigned number and a true flag
 371+ 20E3              // or just a false flag if the conversion fails
 372+ 20E3                              New_Def DIGIT, "DIGIT", is_code, is_normal
 372+ 20E3             >
 372+ 20E3             >Dict_Ptr        defl    $
 372+ 20E3             >
 372+ 20E3             >//              ______________________________________________________________________
 372+ 20E3             >//              Heap part
 372+ 20E3             >
 372+ 20E3             >
 372+ 20E3             >                org     (Heap_Ptr & $1FFF) + $E000
 372+ E0DC             >
 372+ E0DC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 372+ E0DC             >Latest_Definition defl  Heap_Ptr
 372+ E0DC             >
 372+ E0DC             >                // dummy db directives used to calculate length of namec
 372+ E0DC 44 49 47 49 >                db      "DIGIT"
 372+ E0E0 54          >
 372+ E0E1             >len_NFA         defl    $ - temp_NFA
 372+ E0E1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 372+ E0DC             >
 372+ E0DC 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 372+ E0DD 44 49 47 49 >                db      "DIGIT"               // name string in 7-bit ascii, but
 372+ E0E1 54          >
 372+ E0E2             >                org     $-1                 // alter last byte of Name just above to set
 372+ E0E1 D4          >                db      {b $} | END_BIT     // msb as name end
 372+ E0E2             >
 372+ E0E2 D5 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 372+ E0E4             >Prev_Ptr        defl    Heap_Ptr
 372+ E0E4             >
 372+ E0E4             >mirror_Ptr      defl    $
 372+ E0E4             >
 372+ E0E4 E5 20       >                dw      Dict_Ptr + 2        // xt
 372+ E0E6             >Heap_Ptr        defl    $ - $E000           // save current HP
 372+ E0E6             >
 372+ E0E6             >Current_HP      defl  $ - $E000             // used to set HP once!
 372+ E0E6             >
 372+ E0E6             >//              ______________________________________________________________________
 372+ E0E6             >//              Dictionary part
 372+ E0E6             >
 372+ E0E6             >                org     Dict_Ptr
 372+ 20E3             >
 372+ 20E3 E4 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 372+ 20E5             >
 372+ 20E5             >DIGIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 372+ 20E5 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 372+ 20E5 ~           >
 372+ 20E5 ~           >
 372+ 20E5             >                endif           ; ok        // for other definitions it "points" the correct handler
 372+ 20E5             >                // Use of "; ok" to suppress "warning[fwdref]"
 372+ 20E5             >
 372+ 20E5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 373+ 20E5 D9                           exx
 374+ 20E6 E1                           pop     hl                  // l has the base
 375+ 20E7 D1                           pop     de                  // e has the digit
 376+ 20E8 7B                           ld      a, e
 377+ 20E9 FE 60                        cp      $60                 // check if lowercase
 378+ 20EB 38 02                        jr      c, Digit_Uppercase
 379+ 20ED D6 20                            sub     $20                 // quick'n'dirty uppercase
 380+ 20EF              Digit_Uppercase:
 381+ 20EF D6 30                        sub     $30
 382+ 20F1 38 15                        jr      c, Digit_Fail       // fail when character < "0"
 383+ 20F3 FE 0A                            cp      $0A
 384+ 20F5 38 06                            jr      c, Digit_Decimal    // perhaps is not decimal
 385+ 20F7 D6 07                                sub     7                   // try hex and subtract 7
 386+ 20F9 FE 0A                                cp      $0A
 387+ 20FB 38 0B                                jr      c,  Digit_Fail      // it is not hex !
 388+ 20FD
 389+ 20FD              Digit_Decimal:
 390+ 20FD                              // compare digit
 391+ 20FD BD                           cp      l                   // compare with base
 392+ 20FE 30 08                        jr      nc, Digit_Fail      // fail when greater than base
 393+ 2100 5F                               ld      e, a                // digit is returned as second from TOS
 394+ 2101                              //  ld      hl, -1
 395+ 2101 ED 62                            sbc     hl, hl
 396+ 2103 D5                               push    de
 397+ 2104 E5                               push    hl
 398+ 2105 D9                               exx
 399+ 2106                                  next
 399+ 2106 DD E9       >                jp      (ix)
 400+ 2108              Digit_Fail:
 401+ 2108 21 00 00                     ld      hl, 0
 402+ 210B E5                           push    hl
 403+ 210C D9                           exx
 404+ 210D                              next
 404+ 210D DD E9       >                jp      (ix)
 405+ 210F
 406+ 210F              //  ______________________________________________________________________
 407+ 210F              //
 408+ 210F              //  parametric uppercase routine
 409+ 210F              //  depending on the following op-code the routine can be by-passed
 410+ 210F              //  changing the behaviour of some callers.
 411+ 210F              //  If it is "ret" then the system is Case-Sensitive
 412+ 210F              //  If it is "Nop" then the system is Case-Insensitive
 413+ 210F              //  Only A register is touched.
 414+ 210F 00           Case_Sensitive: nop                         // Default is case-insensitive.
 415+ 2110              Case_Upper:
 416+ 2110 FE 61                        cp      LC_A_CHAR           // lower-case "a"
 417+ 2112 D8                           ret     c                   // no change if A < "a"
 418+ 2113 FE 7B                        cp      LC_Z_CHAR + 1       // lower-case "z" + 1
 419+ 2115 D0                           ret     nc                  // no change if A > "z"
 420+ 2116 D6 20                        sub     $20                 // Make uppercase if A in ["a".."z"]
 421+ 2118 C9                           ret
 422+ 2119
 423+ 2119              //  ______________________________________________________________________
 424+ 2119              //
 425+ 2119              //  caseon      --
 426+ 2119              // set system case-sensitivity on
 427+ 2119              // it patches a RET/NOP at the beginning of the uppercase-routine
 428+ 2119                              New_Def CASEON, "CASEON", is_code, is_normal
 428+ 2119             >
 428+ 2119             >Dict_Ptr        defl    $
 428+ 2119             >
 428+ 2119             >//              ______________________________________________________________________
 428+ 2119             >//              Heap part
 428+ 2119             >
 428+ 2119             >
 428+ 2119             >                org     (Heap_Ptr & $1FFF) + $E000
 428+ E0E6             >
 428+ E0E6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 428+ E0E6             >Latest_Definition defl  Heap_Ptr
 428+ E0E6             >
 428+ E0E6             >                // dummy db directives used to calculate length of namec
 428+ E0E6 43 41 53 45 >                db      "CASEON"
 428+ E0EA 4F 4E       >
 428+ E0EC             >len_NFA         defl    $ - temp_NFA
 428+ E0EC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 428+ E0E6             >
 428+ E0E6 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 428+ E0E7 43 41 53 45 >                db      "CASEON"               // name string in 7-bit ascii, but
 428+ E0EB 4F 4E       >
 428+ E0ED             >                org     $-1                 // alter last byte of Name just above to set
 428+ E0EC CE          >                db      {b $} | END_BIT     // msb as name end
 428+ E0ED             >
 428+ E0ED DC 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 428+ E0EF             >Prev_Ptr        defl    Heap_Ptr
 428+ E0EF             >
 428+ E0EF             >mirror_Ptr      defl    $
 428+ E0EF             >
 428+ E0EF 1B 21       >                dw      Dict_Ptr + 2        // xt
 428+ E0F1             >Heap_Ptr        defl    $ - $E000           // save current HP
 428+ E0F1             >
 428+ E0F1             >Current_HP      defl  $ - $E000             // used to set HP once!
 428+ E0F1             >
 428+ E0F1             >//              ______________________________________________________________________
 428+ E0F1             >//              Dictionary part
 428+ E0F1             >
 428+ E0F1             >                org     Dict_Ptr
 428+ 2119             >
 428+ 2119 EF 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 428+ 211B             >
 428+ 211B             >CASEON:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 428+ 211B ~           >                call    runcode ; ok        // for primitive definitions  actual code
 428+ 211B ~           >
 428+ 211B ~           >
 428+ 211B             >                endif           ; ok        // for other definitions it "points" the correct handler
 428+ 211B             >                // Use of "; ok" to suppress "warning[fwdref]"
 428+ 211B             >
 428+ 211B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 429+ 211B 3E C9                        ld      a, $C9              // "ret"
 430+ 211D 32 0F 21                     ld      (Case_Sensitive), a
 431+ 2120                              next
 431+ 2120 DD E9       >                jp      (ix)
 432+ 2122
 433+ 2122              //  ______________________________________________________________________
 434+ 2122              //
 435+ 2122              //  caseoff     --
 436+ 2122              // set system case-sensitivity on
 437+ 2122              // it patches a RET/NOP at the beginning of the uppercase-routine
 438+ 2122                              New_Def CASEOFF, "CASEOFF", is_code, is_normal
 438+ 2122             >
 438+ 2122             >Dict_Ptr        defl    $
 438+ 2122             >
 438+ 2122             >//              ______________________________________________________________________
 438+ 2122             >//              Heap part
 438+ 2122             >
 438+ 2122             >
 438+ 2122             >                org     (Heap_Ptr & $1FFF) + $E000
 438+ E0F1             >
 438+ E0F1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 438+ E0F1             >Latest_Definition defl  Heap_Ptr
 438+ E0F1             >
 438+ E0F1             >                // dummy db directives used to calculate length of namec
 438+ E0F1 43 41 53 45 >                db      "CASEOFF"
 438+ E0F5 4F 46 46    >
 438+ E0F8             >len_NFA         defl    $ - temp_NFA
 438+ E0F8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 438+ E0F1             >
 438+ E0F1 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 438+ E0F2 43 41 53 45 >                db      "CASEOFF"               // name string in 7-bit ascii, but
 438+ E0F6 4F 46 46    >
 438+ E0F9             >                org     $-1                 // alter last byte of Name just above to set
 438+ E0F8 C6          >                db      {b $} | END_BIT     // msb as name end
 438+ E0F9             >
 438+ E0F9 E6 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 438+ E0FB             >Prev_Ptr        defl    Heap_Ptr
 438+ E0FB             >
 438+ E0FB             >mirror_Ptr      defl    $
 438+ E0FB             >
 438+ E0FB 24 21       >                dw      Dict_Ptr + 2        // xt
 438+ E0FD             >Heap_Ptr        defl    $ - $E000           // save current HP
 438+ E0FD             >
 438+ E0FD             >Current_HP      defl  $ - $E000             // used to set HP once!
 438+ E0FD             >
 438+ E0FD             >//              ______________________________________________________________________
 438+ E0FD             >//              Dictionary part
 438+ E0FD             >
 438+ E0FD             >                org     Dict_Ptr
 438+ 2122             >
 438+ 2122 FB 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 438+ 2124             >
 438+ 2124             >CASEOFF:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 438+ 2124 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 438+ 2124 ~           >
 438+ 2124 ~           >
 438+ 2124             >                endif           ; ok        // for other definitions it "points" the correct handler
 438+ 2124             >                // Use of "; ok" to suppress "warning[fwdref]"
 438+ 2124             >
 438+ 2124             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 439+ 2124 3E 00                        ld      a, $00              // "nop"
 440+ 2126 32 0F 21                     ld      (Case_Sensitive), a
 441+ 2129                              next
 441+ 2129 DD E9       >                jp      (ix)
 442+ 212B
 443+ 212B              //  ______________________________________________________________________
 444+ 212B              //
 445+ 212B              //  upper       c1 -- c1 | c2
 446+ 212B              // character on top of stack is forced to Uppercase.
 447+ 212B                              New_Def UPPER, "UPPER", is_code, is_normal
 447+ 212B             >
 447+ 212B             >Dict_Ptr        defl    $
 447+ 212B             >
 447+ 212B             >//              ______________________________________________________________________
 447+ 212B             >//              Heap part
 447+ 212B             >
 447+ 212B             >
 447+ 212B             >                org     (Heap_Ptr & $1FFF) + $E000
 447+ E0FD             >
 447+ E0FD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 447+ E0FD             >Latest_Definition defl  Heap_Ptr
 447+ E0FD             >
 447+ E0FD             >                // dummy db directives used to calculate length of namec
 447+ E0FD 55 50 50 45 >                db      "UPPER"
 447+ E101 52          >
 447+ E102             >len_NFA         defl    $ - temp_NFA
 447+ E102             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 447+ E0FD             >
 447+ E0FD 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 447+ E0FE 55 50 50 45 >                db      "UPPER"               // name string in 7-bit ascii, but
 447+ E102 52          >
 447+ E103             >                org     $-1                 // alter last byte of Name just above to set
 447+ E102 D2          >                db      {b $} | END_BIT     // msb as name end
 447+ E103             >
 447+ E103 F1 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 447+ E105             >Prev_Ptr        defl    Heap_Ptr
 447+ E105             >
 447+ E105             >mirror_Ptr      defl    $
 447+ E105             >
 447+ E105 2D 21       >                dw      Dict_Ptr + 2        // xt
 447+ E107             >Heap_Ptr        defl    $ - $E000           // save current HP
 447+ E107             >
 447+ E107             >Current_HP      defl  $ - $E000             // used to set HP once!
 447+ E107             >
 447+ E107             >//              ______________________________________________________________________
 447+ E107             >//              Dictionary part
 447+ E107             >
 447+ E107             >                org     Dict_Ptr
 447+ 212B             >
 447+ 212B 05 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 447+ 212D             >
 447+ 212D             >UPPER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 447+ 212D ~           >                call    runcode ; ok        // for primitive definitions  actual code
 447+ 212D ~           >
 447+ 212D ~           >
 447+ 212D             >                endif           ; ok        // for other definitions it "points" the correct handler
 447+ 212D             >                // Use of "; ok" to suppress "warning[fwdref]"
 447+ 212D             >
 447+ 212D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 448+ 212D E1                           pop     hl
 449+ 212E 7D                           ld      a, l
 450+ 212F CD 10 21                     call    Case_Upper
 451+ 2132 6F                           ld      l, a
 452+ 2133
 453+ 2133                              psh1
 453+ 2133 E5          >                push    hl
 453+ 2134 DD E9       >                jp      (ix)
 454+ 2136
 455+ 2136              //  ______________________________________________________________________
 456+ 2136
 457+ 2136              MMU7_read:
 458+ 2136 3E 57                        ld      a, 87
 459+ 2138              NEXTREG_read:
 460+ 2138 01 3B 24                     ld      bc, $243B
 461+ 213B ED 79                        out     (c), a
 462+ 213D 04                           inc     b
 463+ 213E ED 78                        in      a, (c)
 464+ 2140 C9                           ret
 465+ 2141
 466+ 2141              //  ______________________________________________________________________
 467+ 2141
 468+ 2141              // given an HP-pointer in input, turn it into page + offset
 469+ 2141              TO_FAR_rout:
 470+ 2141 7C                           ld      a, h
 471+ 2142 08                           ex      af, af
 472+ 2143 7C                           ld      a, h
 473+ 2144 F6 E0                        or      $E0
 474+ 2146 67                           ld      h, a
 475+ 2147 08                           ex      af, af
 476+ 2148 07                           rlca
 477+ 2149 07                           rlca
 478+ 214A 07                           rlca
 479+ 214B E6 07                        and     $07
 480+ 214D C6 20                        add     $20
 481+ 214F C9                           ret
 482+ 2150
 483+ 2150
 484+ 2150              //  ______________________________________________________________________
 485+ 2150              //
 486+ 2150              // (find)       addr voc -- 0 | cfa b 1
 487+ 2150              // vocabulary search,
 488+ 2150              // - voc is starting word's NFA
 489+ 2150              // - addr is the string to be searched for
 490+ 2150              // On success, it returns the CFA of found word, the first NFA byte
 491+ 2150              // (which contains length and some flags) and a true flag.
 492+ 2150              // On fail, a false flag  (no more: leaves addr unchanged)
 493+ 2150                              New_Def C_FIND, "(FIND)", is_code, is_normal
 493+ 2150             >
 493+ 2150             >Dict_Ptr        defl    $
 493+ 2150             >
 493+ 2150             >//              ______________________________________________________________________
 493+ 2150             >//              Heap part
 493+ 2150             >
 493+ 2150             >
 493+ 2150             >                org     (Heap_Ptr & $1FFF) + $E000
 493+ E107             >
 493+ E107             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 493+ E107             >Latest_Definition defl  Heap_Ptr
 493+ E107             >
 493+ E107             >                // dummy db directives used to calculate length of namec
 493+ E107 28 46 49 4E >                db      "(FIND)"
 493+ E10B 44 29       >
 493+ E10D             >len_NFA         defl    $ - temp_NFA
 493+ E10D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 493+ E107             >
 493+ E107 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 493+ E108 28 46 49 4E >                db      "(FIND)"               // name string in 7-bit ascii, but
 493+ E10C 44 29       >
 493+ E10E             >                org     $-1                 // alter last byte of Name just above to set
 493+ E10D A9          >                db      {b $} | END_BIT     // msb as name end
 493+ E10E             >
 493+ E10E FD 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 493+ E110             >Prev_Ptr        defl    Heap_Ptr
 493+ E110             >
 493+ E110             >mirror_Ptr      defl    $
 493+ E110             >
 493+ E110 52 21       >                dw      Dict_Ptr + 2        // xt
 493+ E112             >Heap_Ptr        defl    $ - $E000           // save current HP
 493+ E112             >
 493+ E112             >Current_HP      defl  $ - $E000             // used to set HP once!
 493+ E112             >
 493+ E112             >//              ______________________________________________________________________
 493+ E112             >//              Dictionary part
 493+ E112             >
 493+ E112             >                org     Dict_Ptr
 493+ 2150             >
 493+ 2150 10 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 493+ 2152             >
 493+ 2152             >C_FIND:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 493+ 2152 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 493+ 2152 ~           >
 493+ 2152 ~           >
 493+ 2152             >                endif           ; ok        // for other definitions it "points" the correct handler
 493+ 2152             >                // Use of "; ok" to suppress "warning[fwdref]"
 493+ 2152             >
 493+ 2152             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 494+ 2152 D9                           exx
 495+ 2153 CD 36 21                     call    MMU7_read
 496+ 2156 D9                           exx
 497+ 2157 6F                           ld      l, a
 498+ 2158 D9                           exx
 499+ 2159
 500+ 2159 D1                           pop     de                      // de has dictionary pointer
 501+ 215A              Find_VocabularyLoop:
 502+ 215A 7A                               ld      a, d
 503+ 215B D6 60                            sub     $60
 504+ 215D 30 08                            jr      nc, Find_far_endif
 505+ 215F EB                                   ex      de, hl
 506+ 2160 CD 41 21                             call    TO_FAR_rout
 507+ 2163 EB                                   ex      de, hl
 508+ 2164 ED 92 57                             nextreg 87, a
 509+ 2167              Find_far_endif:
 510+ 2167 E1                               pop     hl                  // string pointer to search for
 511+ 2168 E5                               push    hl                  // keep it on stack too for the end.
 512+ 2169 1A                               ld      a, (de)             // save NFA length byte
 513+ 216A 08                               ex      af,af'              // for later use (!)
 514+ 216B 1A                               ld      a, (de)             // reload NFA length byte
 515+ 216C AE                               xor     (hl)                // check if same length
 516+ 216D E6 3F                            and     $3F                 // by resetting 3 high bits (flags)
 517+ 216F                                  // word and text haven't the same length, skip to next vocabulary entry
 518+ 216F 20 33                            jr      nz, Find_DifferentLenght
 519+ 2171
 520+ 2171              Find_ThisWord:      // begin loop
 521+ 2171 23                                   inc     hl
 522+ 2172 13                                   inc     de
 523+ 2173 1A                                   ld      a, (de)
 524+ 2174                                      // case insensitive option - begin
 525+ 2174                                      // push    bc
 526+ 2174 E6 80                                and     $80                 // split A in msb and the rest
 527+ 2176 47                                   ld      b, a
 528+ 2177 1A                                   ld      a, (de)
 529+ 2178 E6 7F                                and     $7F                 // ... the rest (lower 7 bits)
 530+ 217A CD 0F 21                             call    Case_Sensitive      // uppercase routine
 531+ 217D 4F                                   ld      c, a
 532+ 217E 7E                                   ld      a, (hl)
 533+ 217F CD 0F 21                             call    Case_Sensitive      // uppercase routine
 534+ 2182 A9                                   xor     c
 535+ 2183 A8                                   xor     b
 536+ 2184                                      // pop     bc
 537+ 2184                                      // case insensitive option - end
 538+ 2184 87                                   add     a                   // ignore msb during compare
 539+ 2185 20 1B                                jr      nz, Find_DidntMatch  // jump if doesn't match (*)
 540+ 2187
 541+ 2187                                  // loop back until last byte msb is found set
 542+ 2187                                  // that bit marks the ending char of this word
 543+ 2187 30 E8                            jr      nc, Find_ThisWord
 544+ 2189
 545+ 2189                                  // match found !
 546+ 2189 21 03 00                         ld      hl, 3               // 3 bytes for CFA offset to skip LFA
 547+ 218C 19                               add     hl, de
 548+ 218D
 549+ 218D                              //  ld      a, h
 550+ 218D                              //  and     $E0
 551+ 218D                              //  xor     h
 552+ 218D                              //  jr      nz, Non_MMU7
 553+ 218D                                  //  call    MMU7_read
 554+ 218D                                  //  dec     a
 555+ 218D                                  //  jr      z, Non_MMU7
 556+ 218D 5E                                       ld      e, (hl)
 557+ 218E 23                                       inc     hl
 558+ 218F 56                                       ld      d, (hl)
 559+ 2190 EB                                       ex      de, hl
 560+ 2191              //Non_MMU7:
 561+ 2191 E3                               ex      (sp), hl            // CFA on stack and drop addr
 562+ 2192 08                               ex      af, af'             // retrieve NFA byte (!)
 563+ 2193 5F                               ld      e, a
 564+ 2194 16 00                            ld      d, 0
 565+ 2196 21 FF FF                         ld      hl, -1
 566+ 2199 D5                               push    de
 567+ 219A E5                               push    hl
 568+ 219B D9                               exx
 569+ 219C 7D                               ld      a, l
 570+ 219D ED 92 57                         nextreg 87, a
 571+ 21A0                                  next
 571+ 21A0 DD E9       >                jp      (ix)
 572+ 21A2
 573+ 21A2              Find_DidntMatch: // didn't match (*)
 574+ 21A2 38 05                            jr      c,  Find_WordEnd   // jump if not end of word (**)
 575+ 21A4
 576+ 21A4              Find_DifferentLenght:
 577+ 21A4                                  // consume chars until the end of the word
 578+ 21A4                                  // that is last byte msb is found set
 579+ 21A4 13                                   inc     de
 580+ 21A5 1A                                   ld      a, (de)
 581+ 21A6 87                                   add     a, a
 582+ 21A7 30 FB                            jr      nc, Find_DifferentLenght
 583+ 21A9
 584+ 21A9              Find_WordEnd:   // word-end  found (**)
 585+ 21A9                                  // take LFA and use it
 586+ 21A9 13                               inc     de
 587+ 21AA EB                               ex      de, hl
 588+ 21AB 5E                               ld      e, (hl)
 589+ 21AC 23                               inc     hl
 590+ 21AD 56                               ld      d, (hl)
 591+ 21AE 7A                               ld      a, d
 592+ 21AF B3                               or      e
 593+ 21B0
 594+ 21B0                              // loop until end of vocabulary
 595+ 21B0 20 A8                        jr      nz, Find_VocabularyLoop
 596+ 21B2
 597+ 21B2 E1                           pop     hl              // without this, leaves addr unchanged
 598+ 21B3 21 00 00                     ld      hl, 0
 599+ 21B6 E5                           push    hl
 600+ 21B7 D9                           exx
 601+ 21B8 7D                           ld      a, l
 602+ 21B9 ED 92 57                     nextreg 87, a
 603+ 21BC                              next
 603+ 21BC DD E9       >                jp      (ix)
 604+ 21BE
 605+ 21BE              //  ______________________________________________________________________
 606+ 21BE              //
 607+ 21BE              // enclose      a c -- a  n1 n2 n3
 608+ 21BE              // starting from a, using delimiter c, determines the offsets:
 609+ 21BE              //   n1   the first character non-delimiter
 610+ 21BE              //   n2   the first delimiter after the text
 611+ 21BE              //   n3   the first character non enclosed.
 612+ 21BE              // This procedure does not go beyond a 'nul' ASCII (0x00) that represents
 613+ 21BE              // an uncoditional delimiter.
 614+ 21BE              // Examples:
 615+ 21BE              //   i:	c  c  x  x  x  c  x	 -- 2  5  6
 616+ 21BE              //  ii:	c  c  x  x  x  'nul' -- 2  5  5
 617+ 21BE              // iii:	c  c  'nul'          -- 2  3  2
 618+ 21BE                              New_Def ENCLOSE, "ENCLOSE", is_code, is_normal
 618+ 21BE             >
 618+ 21BE             >Dict_Ptr        defl    $
 618+ 21BE             >
 618+ 21BE             >//              ______________________________________________________________________
 618+ 21BE             >//              Heap part
 618+ 21BE             >
 618+ 21BE             >
 618+ 21BE             >                org     (Heap_Ptr & $1FFF) + $E000
 618+ E112             >
 618+ E112             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 618+ E112             >Latest_Definition defl  Heap_Ptr
 618+ E112             >
 618+ E112             >                // dummy db directives used to calculate length of namec
 618+ E112 45 4E 43 4C >                db      "ENCLOSE"
 618+ E116 4F 53 45    >
 618+ E119             >len_NFA         defl    $ - temp_NFA
 618+ E119             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 618+ E112             >
 618+ E112 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 618+ E113 45 4E 43 4C >                db      "ENCLOSE"               // name string in 7-bit ascii, but
 618+ E117 4F 53 45    >
 618+ E11A             >                org     $-1                 // alter last byte of Name just above to set
 618+ E119 C5          >                db      {b $} | END_BIT     // msb as name end
 618+ E11A             >
 618+ E11A 07 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 618+ E11C             >Prev_Ptr        defl    Heap_Ptr
 618+ E11C             >
 618+ E11C             >mirror_Ptr      defl    $
 618+ E11C             >
 618+ E11C C0 21       >                dw      Dict_Ptr + 2        // xt
 618+ E11E             >Heap_Ptr        defl    $ - $E000           // save current HP
 618+ E11E             >
 618+ E11E             >Current_HP      defl  $ - $E000             // used to set HP once!
 618+ E11E             >
 618+ E11E             >//              ______________________________________________________________________
 618+ E11E             >//              Dictionary part
 618+ E11E             >
 618+ E11E             >                org     Dict_Ptr
 618+ 21BE             >
 618+ 21BE 1C 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 618+ 21C0             >
 618+ 21C0             >ENCLOSE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 618+ 21C0 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 618+ 21C0 ~           >
 618+ 21C0 ~           >
 618+ 21C0             >                endif           ; ok        // for other definitions it "points" the correct handler
 618+ 21C0             >                // Use of "; ok" to suppress "warning[fwdref]"
 618+ 21C0             >
 618+ 21C0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 619+ 21C0 D9                           exx
 620+ 21C1 D1                           pop     de                  //  e has the character
 621+ 21C2 E1                           pop     hl                  // hl has the string address
 622+ 21C3 E5                           push    hl
 623+ 21C4 7B                           ld      a, e
 624+ 21C5 11 FF FF                     ld      de, -1              // let's start from -1
 625+ 21C8 2B                           dec     hl
 626+ 21C9              Enclose_NonDelimiter:
 627+ 21C9                              // find first non delimiter
 628+ 21C9 23                               inc     hl
 629+ 21CA 13                               inc     de
 630+ 21CB BE                               cp      (hl)
 631+ 21CC 28 FB                        jr      z, Enclose_NonDelimiter
 632+ 21CE D5                           push    de
 633+ 21CF
 634+ 21CF                              // push    bc                  // save Instruction Pointer
 635+ 21CF
 636+ 21CF 4F                           ld      c, a                // save char
 637+ 21D0 7E                           ld      a, (hl)
 638+ 21D1 A7                           and     a                   // stop if 0x00
 639+ 21D2 20 07                        jr      nz, Enclose_NextChar
 640+ 21D4                              /// case iii. no more character in string
 641+ 21D4                                  // pop     bc                  // restore Instruction Pointer
 642+ 21D4 13                               inc     de
 643+ 21D5 D5                               push    de
 644+ 21D6 1B                               dec     de
 645+ 21D7 D5                               push    de
 646+ 21D8 D9                               exx
 647+ 21D9                                  next
 647+ 21D9 DD E9       >                jp      (ix)
 648+ 21DB              Enclose_NextChar:
 649+ 21DB 79                               ld      a, c
 650+ 21DC 23                               inc     hl
 651+ 21DD 13                               inc     de
 652+ 21DE BE                               cp      (hl)
 653+ 21DF 20 06                            jr      nz, Enclose_NonSeparator
 654+ 21E1                                      // case i. first non enclosed
 655+ 21E1                                      // pop     bc                  // restore Instruction Pointer
 656+ 21E1 D5                                   push    de
 657+ 21E2 13                                   inc     de
 658+ 21E3 D5                                   push    de
 659+ 21E4 D9                                   exx
 660+ 21E5                                      next
 660+ 21E5 DD E9       >                jp      (ix)
 661+ 21E7              Enclose_NonSeparator:
 662+ 21E7 7E                               ld      a, (hl)
 663+ 21E8 A7                               and     a
 664+ 21E9 20 F0                        jr      nz, Enclose_NextChar
 665+ 21EB
 666+ 21EB                              // case ii. separator & terminator
 667+ 21EB                              // pop     bc                  // restore Instruction Pointer
 668+ 21EB D5                           push    de
 669+ 21EC D5                           push    de
 670+ 21ED D9                           exx
 671+ 21EE                              next
 671+ 21EE DD E9       >                jp      (ix)
 672+ 21F0
 673+ 21F0              //  ______________________________________________________________________
 674+ 21F0              //
 675+ 21F0              // (map)        a2 a1 n c1 -- c2
 676+ 21F0              // translate character c1 using mapping string a2 and a2
 677+ 21F0              // if c1 is not present within string a1 then
 678+ 21F0              // c2 = c2 if it is not translated. n is the length of both a1 and a2.
 679+ 21F0                              New_Def C_MAP, "(MAP)", is_code, is_normal
 679+ 21F0             >
 679+ 21F0             >Dict_Ptr        defl    $
 679+ 21F0             >
 679+ 21F0             >//              ______________________________________________________________________
 679+ 21F0             >//              Heap part
 679+ 21F0             >
 679+ 21F0             >
 679+ 21F0             >                org     (Heap_Ptr & $1FFF) + $E000
 679+ E11E             >
 679+ E11E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 679+ E11E             >Latest_Definition defl  Heap_Ptr
 679+ E11E             >
 679+ E11E             >                // dummy db directives used to calculate length of namec
 679+ E11E 28 4D 41 50 >                db      "(MAP)"
 679+ E122 29          >
 679+ E123             >len_NFA         defl    $ - temp_NFA
 679+ E123             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 679+ E11E             >
 679+ E11E 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 679+ E11F 28 4D 41 50 >                db      "(MAP)"               // name string in 7-bit ascii, but
 679+ E123 29          >
 679+ E124             >                org     $-1                 // alter last byte of Name just above to set
 679+ E123 A9          >                db      {b $} | END_BIT     // msb as name end
 679+ E124             >
 679+ E124 12 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 679+ E126             >Prev_Ptr        defl    Heap_Ptr
 679+ E126             >
 679+ E126             >mirror_Ptr      defl    $
 679+ E126             >
 679+ E126 F2 21       >                dw      Dict_Ptr + 2        // xt
 679+ E128             >Heap_Ptr        defl    $ - $E000           // save current HP
 679+ E128             >
 679+ E128             >Current_HP      defl  $ - $E000             // used to set HP once!
 679+ E128             >
 679+ E128             >//              ______________________________________________________________________
 679+ E128             >//              Dictionary part
 679+ E128             >
 679+ E128             >                org     Dict_Ptr
 679+ 21F0             >
 679+ 21F0 26 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 679+ 21F2             >
 679+ 21F2             >C_MAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 679+ 21F2 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 679+ 21F2 ~           >
 679+ 21F2 ~           >
 679+ 21F2             >                endif           ; ok        // for other definitions it "points" the correct handler
 679+ 21F2             >                // Use of "; ok" to suppress "warning[fwdref]"
 679+ 21F2             >
 679+ 21F2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 680+ 21F2 D9                           exx
 681+ 21F3 E1                           pop     hl
 682+ 21F4 7D                           ld      a, l
 683+ 21F5 C1                           pop     bc
 684+ 21F6 E1                           pop     hl
 685+ 21F7 50                           ld      d, b
 686+ 21F8 59                           ld      e, c
 687+ 21F9 ED B1                        cpir
 688+ 21FB E1                           pop     hl
 689+ 21FC 20 05                        jr      nz, C_Map_Then
 689+ 21FE
 690+ 21FE 19                               add     hl, de
 691+ 21FF 2B                               dec     hl
 692+ 2200 ED 42                            sbc     hl, bc
 693+ 2202 7E                               ld      a, (hl)
 694+ 2203              C_Map_Then:
 695+ 2203 6F                           ld      l, a
 696+ 2204 26 00                        ld      h, 0
 697+ 2206 E5                           push    hl
 698+ 2207 D9                           exx
 699+ 2208                              next
 699+ 2208 DD E9       >                jp      (ix)
 700+ 220A
 701+ 220A              //  ______________________________________________________________________
 702+ 220A              //
 703+ 220A              // (compare)    a1 a2 n -- b
 704+ 220A              // this word performs a lexicographic compare of n bytes of text at address a1
 705+ 220A              // with n bytes of text at address a2. It returns numeric a value:
 706+ 220A              //  0 : if strings are equal
 707+ 220A              // +1 : if string at a1 greater than string at a2
 708+ 220A              // -1 : if string at a1 less than string at a2
 709+ 220A              // strings can be 256 bytes in length at most.
 710+ 220A                              New_Def C_COMPARE, "(COMPARE)", is_code, is_normal
 710+ 220A             >
 710+ 220A             >Dict_Ptr        defl    $
 710+ 220A             >
 710+ 220A             >//              ______________________________________________________________________
 710+ 220A             >//              Heap part
 710+ 220A             >
 710+ 220A             >
 710+ 220A             >                org     (Heap_Ptr & $1FFF) + $E000
 710+ E128             >
 710+ E128             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 710+ E128             >Latest_Definition defl  Heap_Ptr
 710+ E128             >
 710+ E128             >                // dummy db directives used to calculate length of namec
 710+ E128 28 43 4F 4D >                db      "(COMPARE)"
 710+ E12C 50 41 52 45 >
 710+ E130 29          >
 710+ E131             >len_NFA         defl    $ - temp_NFA
 710+ E131             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 710+ E128             >
 710+ E128 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 710+ E129 28 43 4F 4D >                db      "(COMPARE)"               // name string in 7-bit ascii, but
 710+ E12D 50 41 52 45 >
 710+ E131 29          >
 710+ E132             >                org     $-1                 // alter last byte of Name just above to set
 710+ E131 A9          >                db      {b $} | END_BIT     // msb as name end
 710+ E132             >
 710+ E132 1E 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 710+ E134             >Prev_Ptr        defl    Heap_Ptr
 710+ E134             >
 710+ E134             >mirror_Ptr      defl    $
 710+ E134             >
 710+ E134 0C 22       >                dw      Dict_Ptr + 2        // xt
 710+ E136             >Heap_Ptr        defl    $ - $E000           // save current HP
 710+ E136             >
 710+ E136             >Current_HP      defl  $ - $E000             // used to set HP once!
 710+ E136             >
 710+ E136             >//              ______________________________________________________________________
 710+ E136             >//              Dictionary part
 710+ E136             >
 710+ E136             >                org     Dict_Ptr
 710+ 220A             >
 710+ 220A 34 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 710+ 220C             >
 710+ 220C             >C_COMPARE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 710+ 220C ~           >                call    runcode ; ok        // for primitive definitions  actual code
 710+ 220C ~           >
 710+ 220C ~           >
 710+ 220C             >                endif           ; ok        // for other definitions it "points" the correct handler
 710+ 220C             >                // Use of "; ok" to suppress "warning[fwdref]"
 710+ 220C             >
 710+ 220C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 711+ 220C D9                           exx
 712+ 220D E1                           pop     hl                  // Number of bytes
 713+ 220E 7D                           ld      a, l
 714+ 220F E1                           pop     hl                  // hl points string a2
 715+ 2210 D1                           pop     de                  // hl points string a1
 716+ 2211              //              push    bc                  // Instruction pointer on stack
 717+ 2211 47                           ld      b, a
 718+ 2212              C_Compare_Loop:
 719+ 2212 7E                               ld      a, (hl)
 720+ 2213 CD 0F 21                         call    Case_Sensitive
 721+ 2216 4F                               ld      c, a
 722+ 2217 1A                               ld      a, (de)
 723+ 2218 CD 0F 21                         call    Case_Sensitive
 724+ 221B B9                               cp      c
 725+ 221C 13                               inc     de
 726+ 221D 23                               inc     hl
 727+ 221E 28 0E                            jr      z, C_Compare_Equal
 728+ 2220 38 05                                jr      c, C_Compare_NotLessThan  // If LessThan
 729+ 2222 21 01 00                                 ld      hl, 1               // a1 gt a2
 730+ 2225 18 03                                jr      C_Compare_Then      // Else
 731+ 2227              C_Compare_NotLessThan:
 732+ 2227 21 FF FF                                 ld      hl, -1              // a1 lt a2
 733+ 222A              C_Compare_Then:                                 // Endif
 734+ 222A              //                      pop     bc              // restore Instruction Pointer
 735+ 222A E5                                   push    hl
 736+ 222B D9                                   exx
 737+ 222C
 738+ 222C                                      next
 738+ 222C DD E9       >                jp      (ix)
 739+ 222E
 740+ 222E              C_Compare_Equal:
 741+ 222E 10 E2                        djnz    C_Compare_Loop
 742+ 2230 21 00 00                     ld      hl, 0               // a1 eq a2
 743+ 2233              //              pop     bc                  // restore Instruction Pointer
 744+ 2233 E5                           push    hl
 745+ 2234 D9                           exx
 746+ 2235
 747+ 2235                              next
 747+ 2235 DD E9       >                jp      (ix)
 748+ 2237
 749+ 2237              //  ______________________________________________________________________
 750+ 2237              //
 751+ 2237              // emitc        c --
 752+ 2237              // low level emit, calls ROM routine at #10 to send a character to
 753+ 2237              // the the current channel (see SELECT to change stream-channel)
 754+ 2237                              New_Def EMITC, "EMITC", is_code, is_normal
 754+ 2237             >
 754+ 2237             >Dict_Ptr        defl    $
 754+ 2237             >
 754+ 2237             >//              ______________________________________________________________________
 754+ 2237             >//              Heap part
 754+ 2237             >
 754+ 2237             >
 754+ 2237             >                org     (Heap_Ptr & $1FFF) + $E000
 754+ E136             >
 754+ E136             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 754+ E136             >Latest_Definition defl  Heap_Ptr
 754+ E136             >
 754+ E136             >                // dummy db directives used to calculate length of namec
 754+ E136 45 4D 49 54 >                db      "EMITC"
 754+ E13A 43          >
 754+ E13B             >len_NFA         defl    $ - temp_NFA
 754+ E13B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 754+ E136             >
 754+ E136 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 754+ E137 45 4D 49 54 >                db      "EMITC"               // name string in 7-bit ascii, but
 754+ E13B 43          >
 754+ E13C             >                org     $-1                 // alter last byte of Name just above to set
 754+ E13B C3          >                db      {b $} | END_BIT     // msb as name end
 754+ E13C             >
 754+ E13C 28 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 754+ E13E             >Prev_Ptr        defl    Heap_Ptr
 754+ E13E             >
 754+ E13E             >mirror_Ptr      defl    $
 754+ E13E             >
 754+ E13E 39 22       >                dw      Dict_Ptr + 2        // xt
 754+ E140             >Heap_Ptr        defl    $ - $E000           // save current HP
 754+ E140             >
 754+ E140             >Current_HP      defl  $ - $E000             // used to set HP once!
 754+ E140             >
 754+ E140             >//              ______________________________________________________________________
 754+ E140             >//              Dictionary part
 754+ E140             >
 754+ E140             >                org     Dict_Ptr
 754+ 2237             >
 754+ 2237 3E 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 754+ 2239             >
 754+ 2239             >EMITC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 754+ 2239 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 754+ 2239 ~           >
 754+ 2239 ~           >
 754+ 2239             >                endif           ; ok        // for other definitions it "points" the correct handler
 754+ 2239             >                // Use of "; ok" to suppress "warning[fwdref]"
 754+ 2239             >
 754+ 2239             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 755+ 2239 E1                           pop     hl
 756+ 223A 7D                           ld      a, l
 757+ 223B              Emitc_Ptr:
 758+ 223B C5                           push    bc
 759+ 223C D5                           push    de
 760+ 223D DD E5                        push    ix
 761+ 223F F3                           di
 762+ 2240 D7                           rst     $10
 763+ 2241 FB                           ei
 764+ 2242 DD E1                        pop     ix
 765+ 2244 D1                           pop     de
 766+ 2245 C1                           pop     bc
 767+ 2246 3E FF                        ld      a, 255            // max possible
 768+ 2248 32 8C 5C                     ld      (SCR_CT), a
 769+ 224B                              next
 769+ 224B DD E9       >                jp      (ix)
 770+ 224D
 771+ 224D              //  ______________________________________________________________________
 772+ 224D              //
 773+ 224D              // cr           --
 774+ 224D              // send a CR via EMITC
 775+ 224D                              New_Def CR, "CR", is_code, is_normal
 775+ 224D             >
 775+ 224D             >Dict_Ptr        defl    $
 775+ 224D             >
 775+ 224D             >//              ______________________________________________________________________
 775+ 224D             >//              Heap part
 775+ 224D             >
 775+ 224D             >
 775+ 224D             >                org     (Heap_Ptr & $1FFF) + $E000
 775+ E140             >
 775+ E140             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 775+ E140             >Latest_Definition defl  Heap_Ptr
 775+ E140             >
 775+ E140             >                // dummy db directives used to calculate length of namec
 775+ E140 43 52       >                db      "CR"
 775+ E142             >len_NFA         defl    $ - temp_NFA
 775+ E142             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 775+ E140             >
 775+ E140 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 775+ E141 43 52       >                db      "CR"               // name string in 7-bit ascii, but
 775+ E143             >                org     $-1                 // alter last byte of Name just above to set
 775+ E142 D2          >                db      {b $} | END_BIT     // msb as name end
 775+ E143             >
 775+ E143 36 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 775+ E145             >Prev_Ptr        defl    Heap_Ptr
 775+ E145             >
 775+ E145             >mirror_Ptr      defl    $
 775+ E145             >
 775+ E145 4F 22       >                dw      Dict_Ptr + 2        // xt
 775+ E147             >Heap_Ptr        defl    $ - $E000           // save current HP
 775+ E147             >
 775+ E147             >Current_HP      defl  $ - $E000             // used to set HP once!
 775+ E147             >
 775+ E147             >//              ______________________________________________________________________
 775+ E147             >//              Dictionary part
 775+ E147             >
 775+ E147             >                org     Dict_Ptr
 775+ 224D             >
 775+ 224D 45 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 775+ 224F             >
 775+ 224F             >CR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 775+ 224F ~           >                call    runcode ; ok        // for primitive definitions  actual code
 775+ 224F ~           >
 775+ 224F ~           >
 775+ 224F             >                endif           ; ok        // for other definitions it "points" the correct handler
 775+ 224F             >                // Use of "; ok" to suppress "warning[fwdref]"
 775+ 224F             >
 775+ 224F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 776+ 224F
 777+ 224F 3E 0D                        ld      a, CR_CHAR
 778+ 2251 18 E8                        jr      Emitc_Ptr
 779+ 2253
 780+ 2253              Emitc_Vec:
 781+ 2253 8C 22                        dw      C_Emit_Printable  // comma
 782+ 2255 93 22                        dw      C_Emit_Bel        // bel
 783+ 2257 8C 22                        dw      C_Emit_Printable  // bs
 784+ 2259 AD 22                        dw      C_Emit_Tab        // tab
 785+ 225B 8C 22                        dw      C_Emit_Printable  // cr
 786+ 225D B1 22                        dw      C_Emit_NL         // lf (unix newline)
 787+ 225F 8C 22                        dw      C_Emit_Printable  // blank
 788+ 2261 8C 22                        dw      C_Emit_Printable  // blank
 789+ 2263
 790+ 2263              Emit_Selector_Start:
 791+ 2263 06                           db      $06                 // comma
 792+ 2264 07                           db      $07                 // bel
 793+ 2265 08                           db      $08                 // bs
 794+ 2266 09                           db      $09                 // tab
 795+ 2267 0D                           db      $0D                 // cr
 796+ 2268 0A                           db      $0A                 // lf (unix newline)
 797+ 2269 20                           db      $20
 798+ 226A              Emit_Selector_End:
 799+ 226A 20                           db      $20
 800+ 226B
 801+ 226B              //  ______________________________________________________________________
 802+ 226B              //
 803+ 226B              // (?emit)      c1 -- c2 | c1
 804+ 226B              // decode a character to be sent via EMIT
 805+ 226B              // search first the Emit_Selector table, if found jump to the corresponding routine in Emit_Vector
 806+ 226B              // the routine should resolve anything and convert the character anyway.
 807+ 226B                              New_Def C_EMIT, "(?EMIT)", is_code, is_normal
 807+ 226B             >
 807+ 226B             >Dict_Ptr        defl    $
 807+ 226B             >
 807+ 226B             >//              ______________________________________________________________________
 807+ 226B             >//              Heap part
 807+ 226B             >
 807+ 226B             >
 807+ 226B             >                org     (Heap_Ptr & $1FFF) + $E000
 807+ E147             >
 807+ E147             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 807+ E147             >Latest_Definition defl  Heap_Ptr
 807+ E147             >
 807+ E147             >                // dummy db directives used to calculate length of namec
 807+ E147 28 3F 45 4D >                db      "(?EMIT)"
 807+ E14B 49 54 29    >
 807+ E14E             >len_NFA         defl    $ - temp_NFA
 807+ E14E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 807+ E147             >
 807+ E147 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 807+ E148 28 3F 45 4D >                db      "(?EMIT)"               // name string in 7-bit ascii, but
 807+ E14C 49 54 29    >
 807+ E14F             >                org     $-1                 // alter last byte of Name just above to set
 807+ E14E A9          >                db      {b $} | END_BIT     // msb as name end
 807+ E14F             >
 807+ E14F 40 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 807+ E151             >Prev_Ptr        defl    Heap_Ptr
 807+ E151             >
 807+ E151             >mirror_Ptr      defl    $
 807+ E151             >
 807+ E151 6D 22       >                dw      Dict_Ptr + 2        // xt
 807+ E153             >Heap_Ptr        defl    $ - $E000           // save current HP
 807+ E153             >
 807+ E153             >Current_HP      defl  $ - $E000             // used to set HP once!
 807+ E153             >
 807+ E153             >//              ______________________________________________________________________
 807+ E153             >//              Dictionary part
 807+ E153             >
 807+ E153             >                org     Dict_Ptr
 807+ 226B             >
 807+ 226B 51 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 807+ 226D             >
 807+ 226D             >C_EMIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 807+ 226D ~           >                call    runcode ; ok        // for primitive definitions  actual code
 807+ 226D ~           >
 807+ 226D ~           >
 807+ 226D             >                endif           ; ok        // for other definitions it "points" the correct handler
 807+ 226D             >                // Use of "; ok" to suppress "warning[fwdref]"
 807+ 226D             >
 807+ 226D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 808+ 226D D9                           exx
 809+ 226E D1                           pop     de
 810+ 226F 7B                           ld      a, e                //  de has c1
 811+ 2270 E6 7F                        and     $7F                 // 7-bit ascii only
 812+ 2272                              // push    bc                  // save Instruction Pointer
 813+ 2272 01 08 00                     ld      bc, Emit_Selector_End - Emit_Selector_Start + 1
 814+ 2275 21 6A 22                     ld      hl, Emit_Selector_End
 815+ 2278 ED B9                        cpdr                        // search for c1 in Emit_Selector table, backward
 816+ 227A 20 0A                        jr      nz, C_Emit_Not_Found
 817+ 227C                                  // Found then decode it
 818+ 227C 21 53 22                         ld      hl, Emitc_Vec
 819+ 227F 09                               add     hl, bc
 820+ 2280 09                               add     hl, bc
 821+ 2281 5E                               ld      e, (hl)
 822+ 2282 23                               inc     hl
 823+ 2283 56                               ld      d, (hl)
 824+ 2284 EB                               ex      de, hl
 825+ 2285                                  // pop     bc                  // restore Instruction Pointer
 826+ 2285 E9                               jp      (hl)                // one of the following labels
 827+ 2286              C_Emit_Not_Found:
 828+ 2286                              // pop     bc                  // restore Instruction Pointer
 829+ 2286 FE 20                        cp      BLANK_CHAR          // cp $20 non-printable check
 830+ 2288 30 02                        jr      nc, C_Emit_Printable
 831+ 228A 3E 00                            ld      a, NUL_CHAR         // NUL is never "printed"
 832+ 228C              C_Emit_Printable:
 833+ 228C 6F                           ld      l, a
 834+ 228D 26 00                        ld      h, 0
 835+ 228F E5                           push    hl
 836+ 2290 D9                           exx
 837+ 2291                              next
 837+ 2291 DD E9       >                jp      (ix)
 838+ 2293
 839+ 2293              C_Emit_Bel:
 840+ 2293 D9                            exx
 841+ 2294 C5                           push    bc                  // save Instruction Pointer
 842+ 2295 D5                           push    de
 843+ 2296 11 00 01                     ld      de, $0100
 844+ 2299 21 00 02                     ld      hl, $0200
 845+ 229C DD E5                        push    ix                  // save Next Pointer
 846+ 229E                              // call    $03B6               // bleep Standard-ROM routine
 847+ 229E F3                           di
 848+ 229F DF                           rst     $18
 849+ 22A0 B6 03                        defw    $03B6
 850+ 22A2 FB                           ei
 851+ 22A3 DD E1                        pop     ix                  // restore Next Pointer
 852+ 22A5 D1                           pop     de
 853+ 22A6 C1                           pop     bc                  // restore Instruction Pointer
 854+ 22A7 21 00 00                     ld      hl, NUL_CHAR
 855+ 22AA E5                           push    hl
 856+ 22AB                              next
 856+ 22AB DD E9       >                jp      (ix)
 857+ 22AD
 858+ 22AD 3E 06        C_Emit_Tab:     ld      a, COMMA_CHAR
 859+ 22AF 18 DB                        jr      C_Emit_Printable
 860+ 22B1                          //  push    hl
 861+ 22B1                          //  exx
 862+ 22B1                          //  next
 863+ 22B1
 864+ 22B1 3E 0D        C_Emit_NL       ld      a, CR_CHAR           // 0x0A --> 0x0D  à la Spectrum
 865+ 22B3 18 D7                        jr      C_Emit_Printable
 866+ 22B5                          //  push    hl
 867+ 22B5                          //  exx
 868+ 22B5                          //  next
 869+ 22B5
 870+ 22B5              //  ______________________________________________________________________
 871+ 22B5
 872+ 22B5              Key_Table:
 873+ 22B5 E2                           db      $E2                 //  0: STOP  --> SYMBOL+A : ~
 874+ 22B6 C3                           db      $C3                 //  1: NOT   --> SYMBOL+S : |
 875+ 22B7 CD                           db      $CD                 //  2: STEP  --> SYMBOl+D : //
 876+ 22B8 CC                           db      $CC                 //  3: TO    --> SYMBOL+F : {
 877+ 22B9 CB                           db      $CB                 //  4: THEN  --> SYMBOL+G : }
 878+ 22BA C6                           db      $C6                 //  5: AND   --> SYMBOL+Y : [
 879+ 22BB C5                           db      $C5                 //  6: OR    --> SYMBOL+U : ]
 880+ 22BC AC                           db      $AC                 //  7: AT    --> SYMBOL+I : (C) copyright symbol
 881+ 22BD C7                           db      $C7                 //  8: <=    --> same as SHIFT-1 [EDIT]
 882+ 22BE C8                           db      $C8                 //  9: >=    --> same as SHIFT-0 [BACKSPACE]
 883+ 22BF C9                           db      $C9                 // 10: <>    --> SYMBOL+W is the same as CAPS (toggle) SHIFT+2
 884+ 22C0              Key_MapTo:
 885+ 22C0 18                           db      $18                 // 10: ^X
 886+ 22C1 03                           db      $03                 //  9: ^C
 887+ 22C2 1A                           db      $1A                 //  8: ^Z
 888+ 22C3 7F                           db      $7F                 //  7: SYMBOL+I : (C) copyright symbol
 889+ 22C4 5D                           db      $5D                 //  6: SYMBOL+U : ]
 890+ 22C5 5B                           db      $5B                 //  5: SYMBOL+Y : [
 891+ 22C6 7D                           db      $7D                 //  4: SYMBOL+G : }
 892+ 22C7 7B                           db      $7B                 //  3: SYMBOL+F : {
 893+ 22C8 5C                           db      $5C                 //  2: SYMBOl+D : //
 894+ 22C9 7C                           db      $7C                 //  1: SYMBOL+S : |
 895+ 22CA 7E                           db      $7E                 //  0: SYMBOL+A : ~
 896+ 22CB
 897+ 22CB              //  ______________________________________________________________________
 898+ 22CB              //
 899+ 22CB              // curs         -- c
 900+ 22CB              // wait for a keypress
 901+ 22CB              // This definition need Standard ROM Interrupt to be served
 902+ 22CB
 903+ 22CB                              New_Def CUR, "CURS", is_code, is_normal
 903+ 22CB             >
 903+ 22CB             >Dict_Ptr        defl    $
 903+ 22CB             >
 903+ 22CB             >//              ______________________________________________________________________
 903+ 22CB             >//              Heap part
 903+ 22CB             >
 903+ 22CB             >
 903+ 22CB             >                org     (Heap_Ptr & $1FFF) + $E000
 903+ E153             >
 903+ E153             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 903+ E153             >Latest_Definition defl  Heap_Ptr
 903+ E153             >
 903+ E153             >                // dummy db directives used to calculate length of namec
 903+ E153 43 55 52 53 >                db      "CURS"
 903+ E157             >len_NFA         defl    $ - temp_NFA
 903+ E157             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 903+ E153             >
 903+ E153 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 903+ E154 43 55 52 53 >                db      "CURS"               // name string in 7-bit ascii, but
 903+ E158             >                org     $-1                 // alter last byte of Name just above to set
 903+ E157 D3          >                db      {b $} | END_BIT     // msb as name end
 903+ E158             >
 903+ E158 47 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 903+ E15A             >Prev_Ptr        defl    Heap_Ptr
 903+ E15A             >
 903+ E15A             >mirror_Ptr      defl    $
 903+ E15A             >
 903+ E15A CD 22       >                dw      Dict_Ptr + 2        // xt
 903+ E15C             >Heap_Ptr        defl    $ - $E000           // save current HP
 903+ E15C             >
 903+ E15C             >Current_HP      defl  $ - $E000             // used to set HP once!
 903+ E15C             >
 903+ E15C             >//              ______________________________________________________________________
 903+ E15C             >//              Dictionary part
 903+ E15C             >
 903+ E15C             >                org     Dict_Ptr
 903+ 22CB             >
 903+ 22CB 5A 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 903+ 22CD             >
 903+ 22CD             >CUR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 903+ 22CD ~           >                call    runcode ; ok        // for primitive definitions  actual code
 903+ 22CD ~           >
 903+ 22CD ~           >
 903+ 22CD             >                endif           ; ok        // for other definitions it "points" the correct handler
 903+ 22CD             >                // Use of "; ok" to suppress "warning[fwdref]"
 903+ 22CD             >
 903+ 22CD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 904+ 22CD
 905+ 22CD C5                           push    bc                  // save Instruction Pointer
 906+ 22CE D5                           push    de                  // save Return Stack Pointer
 907+ 22CF DD E5                        push    ix
 908+ 22D1 ED 73 2C 20                  ld      (SP_Saved), sp      // be sure to not to be paged out.
 909+ 22D5                          //  ld      sp, Cold_origin - 5 // maybe $8000 in the future...
 910+ 22D5 31 00 5C                     ld      sp, TSTACK           // Carefully balanced from startup
 911+ 22D8 FD CB 01 AE                  res     5, (iy + 1)         // FLAGS (5C3A+1)
 912+ 22DC
 913+ 22DC              Cur_Wait:
 914+ 22DC 76                               halt
 915+ 22DD 3E 02                            ld      a, 2                // selec channel #2 (Upper Video)
 916+ 22DF                              //  call    $1601               // SELECT Standard-ROM Routine
 917+ 22DF DF                               rst     $18
 918+ 22E0 01 16                            dw      $1601
 919+ 22E2
 920+ 22E2                                  // software-flash: flips face every 320 ms
 921+ 22E2 3E 20                            ld      a, $20              // Timing based
 922+ 22E4 FD A6 3E                         and     (iy + $3E)          // FRAMES (5C3A+3E)
 923+ 22E7
 924+ 22E7 3A 28 20                         ld      a, (Block_Face)     // see origin.asm
 925+ 22EA 20 0C                            jr      nz, Cur_Cursor
 926+ 22EC 3A 29 20                             ld      a, (Half_Face)      // see origin.asm
 927+ 22EF FD CB 30 5E                          bit     3, (iy + $30)       // FLAGS2 (5C3A+$30) that is CAPS-LOCK
 928+ 22F3 28 03                                jr      z, Cur_Cursor
 929+ 22F5 3A 2A 20                                 ld      a, (Underscore_Face) // see origin
 930+ 22F8              Cur_Cursor:
 931+ 22F8 D7                               rst     $10
 932+ 22F9 3E 08                            ld      a, BACKSPACE_CHAR    // backspace
 933+ 22FB D7                               rst     $10
 934+ 22FC FD CB 01 6E                      bit     5, (iy + 1)         // FLAGS (5C3A+1)
 935+ 2300 28 DA                        jr      z, Cur_Wait
 936+ 2302
 937+ 2302 76                           halt    // this is to sync flashing cursor.
 938+ 2303
 939+ 2303 3E 20                        ld      a, BLANK_CHAR       // space to blank cursor
 940+ 2305 D7                           rst     $10
 941+ 2306 3E 08                        ld      a, BACKSPACE_CHAR   // backspace
 942+ 2308 D7                           rst     $10
 943+ 2309
 944+ 2309 ED 7B 2C 20                  ld      sp, (SP_Saved)
 945+ 230D
 946+ 230D DD E1                        pop     ix
 947+ 230F D1                           pop     de                  // Restore Return Stack Pointer
 948+ 2310 C1                           pop     bc                  // Restore Instruction Pointer
 949+ 2311                              next
 949+ 2311 DD E9       >                jp      (ix)
 950+ 2313
 951+ 2313
 952+ 2313              //  ______________________________________________________________________
 953+ 2313              //
 954+ 2313              // key          -- c
 955+ 2313              // This definition need Standard ROM Interrupt to be served
 956+ 2313
 957+ 2313                              New_Def KEY, "KEY", is_code, is_normal
 957+ 2313             >
 957+ 2313             >Dict_Ptr        defl    $
 957+ 2313             >
 957+ 2313             >//              ______________________________________________________________________
 957+ 2313             >//              Heap part
 957+ 2313             >
 957+ 2313             >
 957+ 2313             >                org     (Heap_Ptr & $1FFF) + $E000
 957+ E15C             >
 957+ E15C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 957+ E15C             >Latest_Definition defl  Heap_Ptr
 957+ E15C             >
 957+ E15C             >                // dummy db directives used to calculate length of namec
 957+ E15C 4B 45 59    >                db      "KEY"
 957+ E15F             >len_NFA         defl    $ - temp_NFA
 957+ E15F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 957+ E15C             >
 957+ E15C 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 957+ E15D 4B 45 59    >                db      "KEY"               // name string in 7-bit ascii, but
 957+ E160             >                org     $-1                 // alter last byte of Name just above to set
 957+ E15F D9          >                db      {b $} | END_BIT     // msb as name end
 957+ E160             >
 957+ E160 53 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 957+ E162             >Prev_Ptr        defl    Heap_Ptr
 957+ E162             >
 957+ E162             >mirror_Ptr      defl    $
 957+ E162             >
 957+ E162 15 23       >                dw      Dict_Ptr + 2        // xt
 957+ E164             >Heap_Ptr        defl    $ - $E000           // save current HP
 957+ E164             >
 957+ E164             >Current_HP      defl  $ - $E000             // used to set HP once!
 957+ E164             >
 957+ E164             >//              ______________________________________________________________________
 957+ E164             >//              Dictionary part
 957+ E164             >
 957+ E164             >                org     Dict_Ptr
 957+ 2313             >
 957+ 2313 62 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 957+ 2315             >
 957+ 2315             >KEY:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 957+ 2315 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 957+ 2315 ~           >
 957+ 2315 ~           >
 957+ 2315             >                endif           ; ok        // for other definitions it "points" the correct handler
 957+ 2315             >                // Use of "; ok" to suppress "warning[fwdref]"
 957+ 2315             >
 957+ 2315             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 958+ 2315
 959+ 2315 C5                           push    bc                  // Save Instruction Pointer
 960+ 2316
 961+ 2316              Key_Wait:
 962+ 2316 FD CB 01 6E                      bit     5, (iy + 1)         // FLAGS (5C3A+1)
 963+ 231A 28 FA                        jr      z, Key_Wait
 964+ 231C
 965+ 231C 3A 08 5C                     ld      a, (LASTK)          // get typed character (5C08)
 966+ 231F
 967+ 231F                              // decode character from above table
 968+ 231F 21 B5 22                     ld      hl, Key_Table
 969+ 2322 01 0B 00                     ld      bc, $000B
 970+ 2325 ED B1                        cpir
 971+ 2327 20 05                        jr      nz, Key_DontMap
 972+ 2329 21 C0 22                         ld      hl, Key_MapTo
 973+ 232C 09                               add     hl, bc
 974+ 232D 7E                               ld      a, (hl)
 975+ 232E FE 06        Key_DontMap:    cp      $06                 // CAPS-LOCK management
 976+ 2330 20 09                        jr      nz, Key_NoCapsLock
 977+ 2332 21 6A 5C                         ld      hl, $5C6A           // FLAGS2
 978+ 2335 7E                               ld      a, (hl)
 979+ 2336 EE 08                            xor     $08
 980+ 2338 77                               ld      (hl), a
 981+ 2339 3E 00                            ld      a, NUL_CHAR
 982+ 233B 6F           Key_NoCapsLock: ld      l, a
 983+ 233C 26 00                        ld      h, 0                // Prepare TOS
 984+ 233E
 985+ 233E FD CB 01 AE                  res     5, (iy + 1)         // FLAGS (5C3A+1)
 986+ 2342
 987+ 2342 C1                           pop     bc                  // Restore Instruction Pointer
 988+ 2343
 989+ 2343                              psh1
 989+ 2343 E5          >                push    hl
 989+ 2344 DD E9       >                jp      (ix)
 990+ 2346
 991+ 2346
 992+ 2346              //  ______________________________________________________________________
 993+ 2346              //
 994+ 2346              // click        --
 995+ 2346              // This definition need Standard ROM Interrupt to be served
 996+ 2346              //
 997+ 2346              //              New_Def CLICK, "CLICK", is_code, is_normal
 998+ 2346              //
 999+ 2346              //                push    bc
1000+ 2346              //              ld      a, ($5C48)          // BORDCR system variable
1001+ 2346              //              rra
1002+ 2346              //              rra
1003+ 2346              //              rra
1004+ 2346              //              or      $18                 // quick'n'dirty click
1005+ 2346              //              out     ($fe), a
1006+ 2346              //              ld      b, 0
1007+ 2346              //              djnz    $                   // wait loop
1008+ 2346              //              xor     $18
1009+ 2346              //              out     ($fe), a
1010+ 2346              //                pop     bc
1011+ 2346
1012+ 2346              //              next
1013+ 2346
1014+ 2346              //  ______________________________________________________________________
1015+ 2346              //
1016+ 2346              // key?         -- f
1017+ 2346              // key available
1018+ 2346              //
1019+ 2346              //              New_Def KEY_Q, "KEY?", is_code, is_normal
1020+ 2346              //
1021+ 2346              //              ld      hl, 0000
1022+ 2346              //              bit     5, (iy + 1)         // FLAGS (5C3A+1)
1023+ 2346              //              jr      z, Key_Q
1024+ 2346              //                  dec     hl
1025+ 2346              // Key_Q:
1026+ 2346              //                psh1
1027+ 2346              //              next
1028+ 2346
1029+ 2346              //  ______________________________________________________________________
1030+ 2346              //
1031+ 2346              // ?terminal    -- FALSE | TRUE
1032+ 2346              // test for BREAK keypress
1033+ 2346                              New_Def QTERMINAL, "?TERMINAL", is_code, is_normal
1033+ 2346             >
1033+ 2346             >Dict_Ptr        defl    $
1033+ 2346             >
1033+ 2346             >//              ______________________________________________________________________
1033+ 2346             >//              Heap part
1033+ 2346             >
1033+ 2346             >
1033+ 2346             >                org     (Heap_Ptr & $1FFF) + $E000
1033+ E164             >
1033+ E164             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1033+ E164             >Latest_Definition defl  Heap_Ptr
1033+ E164             >
1033+ E164             >                // dummy db directives used to calculate length of namec
1033+ E164 3F 54 45 52 >                db      "?TERMINAL"
1033+ E168 4D 49 4E 41 >
1033+ E16C 4C          >
1033+ E16D             >len_NFA         defl    $ - temp_NFA
1033+ E16D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1033+ E164             >
1033+ E164 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1033+ E165 3F 54 45 52 >                db      "?TERMINAL"               // name string in 7-bit ascii, but
1033+ E169 4D 49 4E 41 >
1033+ E16D 4C          >
1033+ E16E             >                org     $-1                 // alter last byte of Name just above to set
1033+ E16D CC          >                db      {b $} | END_BIT     // msb as name end
1033+ E16E             >
1033+ E16E 5C 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1033+ E170             >Prev_Ptr        defl    Heap_Ptr
1033+ E170             >
1033+ E170             >mirror_Ptr      defl    $
1033+ E170             >
1033+ E170 48 23       >                dw      Dict_Ptr + 2        // xt
1033+ E172             >Heap_Ptr        defl    $ - $E000           // save current HP
1033+ E172             >
1033+ E172             >Current_HP      defl  $ - $E000             // used to set HP once!
1033+ E172             >
1033+ E172             >//              ______________________________________________________________________
1033+ E172             >//              Dictionary part
1033+ E172             >
1033+ E172             >                org     Dict_Ptr
1033+ 2346             >
1033+ 2346 70 01       >                dw      mirror_Ptr - $E000 + Heap_offset
1033+ 2348             >
1033+ 2348             >QTERMINAL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1033+ 2348 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1033+ 2348 ~           >
1033+ 2348 ~           >
1033+ 2348             >                endif           ; ok        // for other definitions it "points" the correct handler
1033+ 2348             >                // Use of "; ok" to suppress "warning[fwdref]"
1033+ 2348             >
1033+ 2348             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1034+ 2348 D9                           exx
1035+ 2349 01 FE 7F                     ld      bc, $7ffe
1036+ 234C ED 50                        in      d, (c)
1037+ 234E 41                           ld      b, c
1038+ 234F ED 78                        in      a, (c)
1039+ 2351 B2                           or       d
1040+ 2352 1F                           rra
1041+ 2353 3F                           ccf
1042+ 2354 ED 62                        sbc     hl, hl
1043+ 2356 E5                           push    hl
1044+ 2357 D9                           exx
1045+ 2358                              next
1045+ 2358 DD E9       >                jp      (ix)
1046+ 235A
1047+ 235A
1048+ 235A              //  ______________________________________________________________________
1049+ 235A              //
1050+ 235A              // inkey        -- c | 0
1051+ 235A              // call ROM inkey$ routine, returns c or "zero".
1052+ 235A              //
1053+ 235A              //              New_Def INKEY, "INKEY", is_code, is_normal
1054+ 235A              //              push    bc
1055+ 235A              //              push    de
1056+ 235A              //              ld      (SP_Saved), sp
1057+ 235A              //              ld      sp, Cold_origin - 5
1058+ 235A              //              ld      sp, TSTACK           // Carefully balanced from startup
1059+ 235A              //              push    ix
1060+ 235A              //              di
1061+ 235A              //              call    $15E6                   // instead of 15E9
1062+ 235A              //              ei
1063+ 235A              //              pop     ix
1064+ 235A              //              ld      sp, (SP_Saved)
1065+ 235A              //              ld      l, a
1066+ 235A              //              ld      h, 0
1067+ 235A              //              pop     de
1068+ 235A              //              pop     bc
1069+ 235A              //              psh1
1070+ 235A
1071+ 235A              //  ______________________________________________________________________
1072+ 235A              //
1073+ 235A              // select      n --
1074+ 235A              // selects the given channel number
1075+ 235A
1076+ 235A                              New_Def SELECT, "SELECT", is_code, is_normal
1076+ 235A             >
1076+ 235A             >Dict_Ptr        defl    $
1076+ 235A             >
1076+ 235A             >//              ______________________________________________________________________
1076+ 235A             >//              Heap part
1076+ 235A             >
1076+ 235A             >
1076+ 235A             >                org     (Heap_Ptr & $1FFF) + $E000
1076+ E172             >
1076+ E172             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1076+ E172             >Latest_Definition defl  Heap_Ptr
1076+ E172             >
1076+ E172             >                // dummy db directives used to calculate length of namec
1076+ E172 53 45 4C 45 >                db      "SELECT"
1076+ E176 43 54       >
1076+ E178             >len_NFA         defl    $ - temp_NFA
1076+ E178             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1076+ E172             >
1076+ E172 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1076+ E173 53 45 4C 45 >                db      "SELECT"               // name string in 7-bit ascii, but
1076+ E177 43 54       >
1076+ E179             >                org     $-1                 // alter last byte of Name just above to set
1076+ E178 D4          >                db      {b $} | END_BIT     // msb as name end
1076+ E179             >
1076+ E179 64 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1076+ E17B             >Prev_Ptr        defl    Heap_Ptr
1076+ E17B             >
1076+ E17B             >mirror_Ptr      defl    $
1076+ E17B             >
1076+ E17B 5C 23       >                dw      Dict_Ptr + 2        // xt
1076+ E17D             >Heap_Ptr        defl    $ - $E000           // save current HP
1076+ E17D             >
1076+ E17D             >Current_HP      defl  $ - $E000             // used to set HP once!
1076+ E17D             >
1076+ E17D             >//              ______________________________________________________________________
1076+ E17D             >//              Dictionary part
1076+ E17D             >
1076+ E17D             >                org     Dict_Ptr
1076+ 235A             >
1076+ 235A 7B 01       >                dw      mirror_Ptr - $E000 + Heap_offset
1076+ 235C             >
1076+ 235C             >SELECT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1076+ 235C ~           >                call    runcode ; ok        // for primitive definitions  actual code
1076+ 235C ~           >
1076+ 235C ~           >
1076+ 235C             >                endif           ; ok        // for other definitions it "points" the correct handler
1076+ 235C             >                // Use of "; ok" to suppress "warning[fwdref]"
1076+ 235C             >
1076+ 235C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1077+ 235C E1                           pop     hl
1078+ 235D C5                           push    bc
1079+ 235E D5                           push    de
1080+ 235F 7D                           ld      a, l
1081+ 2360 ED 73 2C 20                  ld      (SP_Saved), sp
1082+ 2364                          //  ld      sp, Cold_origin - 5
1083+ 2364 31 00 5C                     ld      sp, TSTACK           // Carefully balanced from startup
1084+ 2367 DD E5                        push    ix
1085+ 2369                          //  call    $1601
1086+ 2369 F3                           di
1087+ 236A DF                           rst     $18
1088+ 236B 01 16                        dw      $1601
1089+ 236D FB                           ei
1090+ 236E DD E1                        pop     ix
1091+ 2370 ED 7B 2C 20                  ld      sp, (SP_Saved)
1092+ 2374 D1                           pop     de
1093+ 2375 C1                           pop     bc
1094+ 2376                              next
1094+ 2376 DD E9       >                jp      (ix)
1095+ 2378
1096+ 2378              //  ______________________________________________________________________
1097+ 2378              //
1098+ 2378              // ZX Spectrum Next - Low Level disk primitives.
1099+ 2378              // this include is "here" for backward compatibility
1100+ 2378
1101+ 2378                              include "next-opt0.asm"
# file opened: C:\Zx\CSpect\Projects\vForth17_DOT/source/next-opt0.asm
   1++2378              //  ______________________________________________________________________
   2++2378              //
   3++2378              //  next-opt.asm
   4++2378              //
   5++2378              //  ZX Spectrum Next - peculiar definitions
   6++2378              //  ______________________________________________________________________
   7++2378
   8++2378              //  ______________________________________________________________________
   9++2378              //
  10++2378              // f_seek       d u -- f
  11++2378              // Seek to position d in file-handle u.
  12++2378              // Return a false-flag 0 on success, True flag on error
  13++2378                              New_Def F_SEEK, "F_SEEK", is_code, is_normal
  13++2378             >
  13++2378             >Dict_Ptr        defl    $
  13++2378             >
  13++2378             >//              ______________________________________________________________________
  13++2378             >//              Heap part
  13++2378             >
  13++2378             >
  13++2378             >                org     (Heap_Ptr & $1FFF) + $E000
  13++E17D             >
  13++E17D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13++E17D             >Latest_Definition defl  Heap_Ptr
  13++E17D             >
  13++E17D             >                // dummy db directives used to calculate length of namec
  13++E17D 46 5F 53 45 >                db      "F_SEEK"
  13++E181 45 4B       >
  13++E183             >len_NFA         defl    $ - temp_NFA
  13++E183             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13++E17D             >
  13++E17D 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  13++E17E 46 5F 53 45 >                db      "F_SEEK"               // name string in 7-bit ascii, but
  13++E182 45 4B       >
  13++E184             >                org     $-1                 // alter last byte of Name just above to set
  13++E183 CB          >                db      {b $} | END_BIT     // msb as name end
  13++E184             >
  13++E184 72 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  13++E186             >Prev_Ptr        defl    Heap_Ptr
  13++E186             >
  13++E186             >mirror_Ptr      defl    $
  13++E186             >
  13++E186 7A 23       >                dw      Dict_Ptr + 2        // xt
  13++E188             >Heap_Ptr        defl    $ - $E000           // save current HP
  13++E188             >
  13++E188             >Current_HP      defl  $ - $E000             // used to set HP once!
  13++E188             >
  13++E188             >//              ______________________________________________________________________
  13++E188             >//              Dictionary part
  13++E188             >
  13++E188             >                org     Dict_Ptr
  13++2378             >
  13++2378 86 01       >                dw      mirror_Ptr - $E000 + Heap_offset
  13++237A             >
  13++237A             >F_SEEK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  13++237A ~           >                call    runcode ; ok        // for primitive definitions  actual code
  13++237A ~           >
  13++237A ~           >
  13++237A             >                endif           ; ok        // for other definitions it "points" the correct handler
  13++237A             >                // Use of "; ok" to suppress "warning[fwdref]"
  13++237A             >
  13++237A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14++237A D9                            exx
  15++237B E1                            pop     hl                  // file-handle
  16++237C 7D                            ld      a, l
  17++237D C1                            pop     bc                  // bc has high-word of d
  18++237E D1                            pop     de
  19++237F D9                           exx
  20++2380 DD E5                        push    ix
  21++2382 D5                           push    de
  22++2383 C5                           push    bc                  // save Instruction Pointer
  23++2384 D9                            exx
  24++2385 21 00 00                      ld      hl, 0 // ix, 0
  25++2388 CF                            rst     $08
  26++2389 9F                            db      $9F
  27++238A              F_Seek_Exit:
  28++238A C1                           pop     bc                  // restore Instruction Pointer
  29++238B D1                           pop     de
  30++238C DD E1                        pop     ix
  31++238E ED 62                        sbc     hl, hl              // to get 0 or -1
  32++2390
  33++2390                              psh1
  33++2390 E5          >                push    hl
  33++2391 DD E9       >                jp      (ix)
  34++2393
  35++2393              //  ______________________________________________________________________
  36++2393              //
  37++2393              // f_close      u -- f
  38++2393              // Close file-handle u.
  39++2393              // Return 0 on success, True flag on error
  40++2393
  41++2393                              New_Def F_CLOSE, "F_CLOSE", is_code, is_normal
  41++2393             >
  41++2393             >Dict_Ptr        defl    $
  41++2393             >
  41++2393             >//              ______________________________________________________________________
  41++2393             >//              Heap part
  41++2393             >
  41++2393             >
  41++2393             >                org     (Heap_Ptr & $1FFF) + $E000
  41++E188             >
  41++E188             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  41++E188             >Latest_Definition defl  Heap_Ptr
  41++E188             >
  41++E188             >                // dummy db directives used to calculate length of namec
  41++E188 46 5F 43 4C >                db      "F_CLOSE"
  41++E18C 4F 53 45    >
  41++E18F             >len_NFA         defl    $ - temp_NFA
  41++E18F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  41++E188             >
  41++E188 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  41++E189 46 5F 43 4C >                db      "F_CLOSE"               // name string in 7-bit ascii, but
  41++E18D 4F 53 45    >
  41++E190             >                org     $-1                 // alter last byte of Name just above to set
  41++E18F C5          >                db      {b $} | END_BIT     // msb as name end
  41++E190             >
  41++E190 7D 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  41++E192             >Prev_Ptr        defl    Heap_Ptr
  41++E192             >
  41++E192             >mirror_Ptr      defl    $
  41++E192             >
  41++E192 95 23       >                dw      Dict_Ptr + 2        // xt
  41++E194             >Heap_Ptr        defl    $ - $E000           // save current HP
  41++E194             >
  41++E194             >Current_HP      defl  $ - $E000             // used to set HP once!
  41++E194             >
  41++E194             >//              ______________________________________________________________________
  41++E194             >//              Dictionary part
  41++E194             >
  41++E194             >                org     Dict_Ptr
  41++2393             >
  41++2393 92 01       >                dw      mirror_Ptr - $E000 + Heap_offset
  41++2395             >
  41++2395             >F_CLOSE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  41++2395 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  41++2395 ~           >
  41++2395 ~           >
  41++2395             >                endif           ; ok        // for other definitions it "points" the correct handler
  41++2395             >                // Use of "; ok" to suppress "warning[fwdref]"
  41++2395             >
  41++2395             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  42++2395
  43++2395 E1                           pop     hl
  44++2396 7D                           ld      a, l                // file-handle
  45++2397 DD E5                        push    ix
  46++2399 D5                           push    de
  47++239A C5                           push    bc                  // Save Instruction pointer
  48++239B CF                           rst     $08
  49++239C 9B                           db      $9B
  50++239D 18 EB                        jr      F_Seek_Exit
  51++239F              //              pop     de
  52++239F              //              pop     bc
  53++239F              //              pop     ix
  54++239F              //              sbc     hl, hl
  55++239F              //              psh1
  56++239F
  57++239F              //  ______________________________________________________________________
  58++239F              //
  59++239F              // f_sync      u -- f
  60++239F              // Close file-handle u.
  61++239F              // Return 0 on success, True flag on error
  62++239F
  63++239F                              New_Def F_SYNC, "F_SYNC", is_code, is_normal
  63++239F             >
  63++239F             >Dict_Ptr        defl    $
  63++239F             >
  63++239F             >//              ______________________________________________________________________
  63++239F             >//              Heap part
  63++239F             >
  63++239F             >
  63++239F             >                org     (Heap_Ptr & $1FFF) + $E000
  63++E194             >
  63++E194             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  63++E194             >Latest_Definition defl  Heap_Ptr
  63++E194             >
  63++E194             >                // dummy db directives used to calculate length of namec
  63++E194 46 5F 53 59 >                db      "F_SYNC"
  63++E198 4E 43       >
  63++E19A             >len_NFA         defl    $ - temp_NFA
  63++E19A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  63++E194             >
  63++E194 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  63++E195 46 5F 53 59 >                db      "F_SYNC"               // name string in 7-bit ascii, but
  63++E199 4E 43       >
  63++E19B             >                org     $-1                 // alter last byte of Name just above to set
  63++E19A C3          >                db      {b $} | END_BIT     // msb as name end
  63++E19B             >
  63++E19B 88 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  63++E19D             >Prev_Ptr        defl    Heap_Ptr
  63++E19D             >
  63++E19D             >mirror_Ptr      defl    $
  63++E19D             >
  63++E19D A1 23       >                dw      Dict_Ptr + 2        // xt
  63++E19F             >Heap_Ptr        defl    $ - $E000           // save current HP
  63++E19F             >
  63++E19F             >Current_HP      defl  $ - $E000             // used to set HP once!
  63++E19F             >
  63++E19F             >//              ______________________________________________________________________
  63++E19F             >//              Dictionary part
  63++E19F             >
  63++E19F             >                org     Dict_Ptr
  63++239F             >
  63++239F 9D 01       >                dw      mirror_Ptr - $E000 + Heap_offset
  63++23A1             >
  63++23A1             >F_SYNC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  63++23A1 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  63++23A1 ~           >
  63++23A1 ~           >
  63++23A1             >                endif           ; ok        // for other definitions it "points" the correct handler
  63++23A1             >                // Use of "; ok" to suppress "warning[fwdref]"
  63++23A1             >
  63++23A1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  64++23A1 E1                           pop     hl
  65++23A2 7D                           ld      a, l                // file-handle
  66++23A3 DD E5                        push    ix
  67++23A5 D5                           push    de
  68++23A6 C5                           push    bc
  69++23A7 CF                           rst     $08
  70++23A8 9C                           db      $9C
  71++23A9 18 DF                        jr      F_Seek_Exit
  72++23AB              //              pop     de
  73++23AB              //              pop     bc
  74++23AB              //              pop     ix
  75++23AB              //              sbc     hl, hl
  76++23AB              //              psh1
  77++23AB
  78++23AB              //  ______________________________________________________________________
  79++23AB              //
  80++23AB              // f_fgetpos    u -- d f
  81++23AB              // Seek to position d in file-handle u.
  82++23AB              // Return a false-flag 0 on success, True flag on error
  83++23AB                              New_Def F_FGETPOS, "F_FGETPOS", is_code, is_normal
  83++23AB             >
  83++23AB             >Dict_Ptr        defl    $
  83++23AB             >
  83++23AB             >//              ______________________________________________________________________
  83++23AB             >//              Heap part
  83++23AB             >
  83++23AB             >
  83++23AB             >                org     (Heap_Ptr & $1FFF) + $E000
  83++E19F             >
  83++E19F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  83++E19F             >Latest_Definition defl  Heap_Ptr
  83++E19F             >
  83++E19F             >                // dummy db directives used to calculate length of namec
  83++E19F 46 5F 46 47 >                db      "F_FGETPOS"
  83++E1A3 45 54 50 4F >
  83++E1A7 53          >
  83++E1A8             >len_NFA         defl    $ - temp_NFA
  83++E1A8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  83++E19F             >
  83++E19F 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  83++E1A0 46 5F 46 47 >                db      "F_FGETPOS"               // name string in 7-bit ascii, but
  83++E1A4 45 54 50 4F >
  83++E1A8 53          >
  83++E1A9             >                org     $-1                 // alter last byte of Name just above to set
  83++E1A8 D3          >                db      {b $} | END_BIT     // msb as name end
  83++E1A9             >
  83++E1A9 94 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  83++E1AB             >Prev_Ptr        defl    Heap_Ptr
  83++E1AB             >
  83++E1AB             >mirror_Ptr      defl    $
  83++E1AB             >
  83++E1AB AD 23       >                dw      Dict_Ptr + 2        // xt
  83++E1AD             >Heap_Ptr        defl    $ - $E000           // save current HP
  83++E1AD             >
  83++E1AD             >Current_HP      defl  $ - $E000             // used to set HP once!
  83++E1AD             >
  83++E1AD             >//              ______________________________________________________________________
  83++E1AD             >//              Dictionary part
  83++E1AD             >
  83++E1AD             >                org     Dict_Ptr
  83++23AB             >
  83++23AB AB 01       >                dw      mirror_Ptr - $E000 + Heap_offset
  83++23AD             >
  83++23AD             >F_FGETPOS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  83++23AD ~           >                call    runcode ; ok        // for primitive definitions  actual code
  83++23AD ~           >
  83++23AD ~           >
  83++23AD             >                endif           ; ok        // for other definitions it "points" the correct handler
  83++23AD             >                // Use of "; ok" to suppress "warning[fwdref]"
  83++23AD             >
  83++23AD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  84++23AD E1                            pop     hl
  85++23AE 7D                            ld      a, l                // file-handle
  86++23AF DD E5                         push    ix
  87++23B1 D5                            push    de
  88++23B2 C5                            push    bc
  89++23B3 CF                            rst     $08
  90++23B4 A0                            db      $A0
  91++23B5 D9                           exx
  92++23B6 C1                           pop     bc                  // IP
  93++23B7 D1                           pop     de                  // Return Stack Pointer
  94++23B8 DD E1                        pop     ix
  95++23BA D9                            exx
  96++23BB D5                            push    de
  97++23BC C5                            push    bc
  98++23BD ED 62                         sbc     hl, hl
  99++23BF E5                            push    hl
 100++23C0 D9                           exx
 101++23C1                              next
 101++23C1 DD E9       >                jp      (ix)
 102++23C3
 103++23C3              //  ______________________________________________________________________
 104++23C3              //
 105++23C3              // f_read       a b u -- n f
 106++23C3              // Read b bytes from file-handle u to address a
 107++23C3              // Return the actual number n of bytes read
 108++23C3              // Return 0 on success, True flag on error
 109++23C3                              New_Def F_READ, "F_READ", is_code, is_normal
 109++23C3             >
 109++23C3             >Dict_Ptr        defl    $
 109++23C3             >
 109++23C3             >//              ______________________________________________________________________
 109++23C3             >//              Heap part
 109++23C3             >
 109++23C3             >
 109++23C3             >                org     (Heap_Ptr & $1FFF) + $E000
 109++E1AD             >
 109++E1AD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 109++E1AD             >Latest_Definition defl  Heap_Ptr
 109++E1AD             >
 109++E1AD             >                // dummy db directives used to calculate length of namec
 109++E1AD 46 5F 52 45 >                db      "F_READ"
 109++E1B1 41 44       >
 109++E1B3             >len_NFA         defl    $ - temp_NFA
 109++E1B3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 109++E1AD             >
 109++E1AD 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 109++E1AE 46 5F 52 45 >                db      "F_READ"               // name string in 7-bit ascii, but
 109++E1B2 41 44       >
 109++E1B4             >                org     $-1                 // alter last byte of Name just above to set
 109++E1B3 C4          >                db      {b $} | END_BIT     // msb as name end
 109++E1B4             >
 109++E1B4 9F 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 109++E1B6             >Prev_Ptr        defl    Heap_Ptr
 109++E1B6             >
 109++E1B6             >mirror_Ptr      defl    $
 109++E1B6             >
 109++E1B6 C5 23       >                dw      Dict_Ptr + 2        // xt
 109++E1B8             >Heap_Ptr        defl    $ - $E000           // save current HP
 109++E1B8             >
 109++E1B8             >Current_HP      defl  $ - $E000             // used to set HP once!
 109++E1B8             >
 109++E1B8             >//              ______________________________________________________________________
 109++E1B8             >//              Dictionary part
 109++E1B8             >
 109++E1B8             >                org     Dict_Ptr
 109++23C3             >
 109++23C3 B6 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 109++23C5             >
 109++23C5             >F_READ:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 109++23C5 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 109++23C5 ~           >
 109++23C5 ~           >
 109++23C5             >                endif           ; ok        // for other definitions it "points" the correct handler
 109++23C5             >                // Use of "; ok" to suppress "warning[fwdref]"
 109++23C5             >
 109++23C5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 110++23C5 D9                            exx
 111++23C6 E1                            pop     hl
 112++23C7 7D                            ld      a, l                // file-handle
 113++23C8 C1                            pop     bc                  // bc has bytes to read
 114++23C9 DD E3                         ex      (sp), ix            // ix has address
 115++23CB DD E5                         push    ix
 116++23CD E1                            pop     hl
 117++23CE D9                           exx
 118++23CF D5                           push    de                  // Save Return Stack pointer
 119++23D0 C5                           push    bc                  // Save Instruction pointer
 120++23D1 D9                            exx
 121++23D2 CF                            rst     $08
 122++23D3 9D                            db      $9D
 123++23D4              F_Read_Exit:
 124++23D4 D9                           exx
 125++23D5 C1                           pop     bc                  // Restore Instruction pointer
 126++23D6 D1                           pop     de                  // Restore Return Stack pointer
 127++23D7 DD E1                        pop     ix                  // Restore ix
 128++23D9 D9                            exx
 129++23DA D5                            push    de                  // bytes involved in i/o operation
 130++23DB ED 62                         sbc     hl, hl
 131++23DD E5                            push    hl
 132++23DE D9                           exx
 133++23DF                              next
 133++23DF DD E9       >                jp      (ix)
 134++23E1
 135++23E1              //  ______________________________________________________________________
 136++23E1              //
 137++23E1              // f_write      a b u -- n f
 138++23E1              // Write bytes currently stored at address a to file-handle u.
 139++23E1              // Return the actual n bytes written and 0 on success, True flag on error.
 140++23E1                              New_Def F_WRITE, "F_WRITE", is_code, is_normal
 140++23E1             >
 140++23E1             >Dict_Ptr        defl    $
 140++23E1             >
 140++23E1             >//              ______________________________________________________________________
 140++23E1             >//              Heap part
 140++23E1             >
 140++23E1             >
 140++23E1             >                org     (Heap_Ptr & $1FFF) + $E000
 140++E1B8             >
 140++E1B8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 140++E1B8             >Latest_Definition defl  Heap_Ptr
 140++E1B8             >
 140++E1B8             >                // dummy db directives used to calculate length of namec
 140++E1B8 46 5F 57 52 >                db      "F_WRITE"
 140++E1BC 49 54 45    >
 140++E1BF             >len_NFA         defl    $ - temp_NFA
 140++E1BF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 140++E1B8             >
 140++E1B8 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 140++E1B9 46 5F 57 52 >                db      "F_WRITE"               // name string in 7-bit ascii, but
 140++E1BD 49 54 45    >
 140++E1C0             >                org     $-1                 // alter last byte of Name just above to set
 140++E1BF C5          >                db      {b $} | END_BIT     // msb as name end
 140++E1C0             >
 140++E1C0 AD 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 140++E1C2             >Prev_Ptr        defl    Heap_Ptr
 140++E1C2             >
 140++E1C2             >mirror_Ptr      defl    $
 140++E1C2             >
 140++E1C2 E3 23       >                dw      Dict_Ptr + 2        // xt
 140++E1C4             >Heap_Ptr        defl    $ - $E000           // save current HP
 140++E1C4             >
 140++E1C4             >Current_HP      defl  $ - $E000             // used to set HP once!
 140++E1C4             >
 140++E1C4             >//              ______________________________________________________________________
 140++E1C4             >//              Dictionary part
 140++E1C4             >
 140++E1C4             >                org     Dict_Ptr
 140++23E1             >
 140++23E1 C2 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 140++23E3             >
 140++23E3             >F_WRITE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 140++23E3 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 140++23E3 ~           >
 140++23E3 ~           >
 140++23E3             >                endif           ; ok        // for other definitions it "points" the correct handler
 140++23E3             >                // Use of "; ok" to suppress "warning[fwdref]"
 140++23E3             >
 140++23E3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 141++23E3 D9                            exx
 142++23E4 E1                            pop     hl
 143++23E5 7D                            ld      a, l                // file-handle
 144++23E6 C1                            pop     bc                  // bc has bytes to read
 145++23E7 DD E3                         ex      (sp), ix            // ix has address
 146++23E9 DD E5                         push    ix
 147++23EB E1                            pop     hl
 148++23EC D9                           exx
 149++23ED D5                           push    de                  // Save Return Stack pointer
 150++23EE C5                           push    bc                  // Save Instruction pointer
 151++23EF D9                            exx
 152++23F0 CF                            rst     $08
 153++23F1 9E                            db      $9E
 154++23F2 18 E0                         jr F_Read_Exit
 155++23F4              //                exx
 156++23F4              //                pop     de                  // Restore Return Stack pointer
 157++23F4              //                pop     bc                  // Restore Instruction pointer
 158++23F4              //                pop     ix                  // Restore ix
 159++23F4              //                 exx
 160++23F4              //                 push    de                  // bytes involved in i/o operation
 161++23F4              //                 sbc     hl, hl
 162++23F4              //                 push    hl
 163++23F4              //                exx
 164++23F4              //                next
 165++23F4
 166++23F4              //  ______________________________________________________________________
 167++23F4              //
 168++23F4              // f_open       a1 a2 b -- u f
 169++23F4              // open a file
 170++23F4              // a1 (filespec) is a null-terminated string, such as produced by ," definition
 171++23F4              // a2 is address to an 8-byte header data used in some cases.
 172++23F4              // b is access mode-byte, that is a combination of:
 173++23F4              // any/all of:
 174++23F4              //   esx_mode_read          $01 request read access
 175++23F4              //   esx_mode_write         $02 request write access
 176++23F4              //   esx_mode_use_header    $40 read/write +3DOS header
 177++23F4              // plus one of:
 178++23F4              //   esx_mode_open_exist    $00 only open existing file
 179++23F4              //   esx_mode_open_creat    $08 open existing or create file
 180++23F4              //   esx_mode_creat_noexist $04 create new file, error if exists
 181++23F4              //   esx_mode_creat_trunc   $0c create new file, delete existing
 182++23F4              // Return file-handle u and 0 on success, True flag on error
 183++23F4                              New_Def F_OPEN, "F_OPEN", is_code, is_normal
 183++23F4             >
 183++23F4             >Dict_Ptr        defl    $
 183++23F4             >
 183++23F4             >//              ______________________________________________________________________
 183++23F4             >//              Heap part
 183++23F4             >
 183++23F4             >
 183++23F4             >                org     (Heap_Ptr & $1FFF) + $E000
 183++E1C4             >
 183++E1C4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 183++E1C4             >Latest_Definition defl  Heap_Ptr
 183++E1C4             >
 183++E1C4             >                // dummy db directives used to calculate length of namec
 183++E1C4 46 5F 4F 50 >                db      "F_OPEN"
 183++E1C8 45 4E       >
 183++E1CA             >len_NFA         defl    $ - temp_NFA
 183++E1CA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 183++E1C4             >
 183++E1C4 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 183++E1C5 46 5F 4F 50 >                db      "F_OPEN"               // name string in 7-bit ascii, but
 183++E1C9 45 4E       >
 183++E1CB             >                org     $-1                 // alter last byte of Name just above to set
 183++E1CA CE          >                db      {b $} | END_BIT     // msb as name end
 183++E1CB             >
 183++E1CB B8 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 183++E1CD             >Prev_Ptr        defl    Heap_Ptr
 183++E1CD             >
 183++E1CD             >mirror_Ptr      defl    $
 183++E1CD             >
 183++E1CD F6 23       >                dw      Dict_Ptr + 2        // xt
 183++E1CF             >Heap_Ptr        defl    $ - $E000           // save current HP
 183++E1CF             >
 183++E1CF             >Current_HP      defl  $ - $E000             // used to set HP once!
 183++E1CF             >
 183++E1CF             >//              ______________________________________________________________________
 183++E1CF             >//              Dictionary part
 183++E1CF             >
 183++E1CF             >                org     Dict_Ptr
 183++23F4             >
 183++23F4 CD 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 183++23F6             >
 183++23F6             >F_OPEN:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 183++23F6 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 183++23F6 ~           >
 183++23F6 ~           >
 183++23F6             >                endif           ; ok        // for other definitions it "points" the correct handler
 183++23F6             >                // Use of "; ok" to suppress "warning[fwdref]"
 183++23F6             >
 183++23F6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 184++23F6 D9                            exx
 185++23F7 C1                            pop     bc                  // file-mode
 186++23F8 41                            ld      b, c                // file-mode
 187++23F9 D1                            pop     de                  // 8-bytes buffer if any
 188++23FA DD E3                         ex      (sp), ix            // filespec nul-terminated
 189++23FC DD E5                         push    ix
 190++23FE E1                            pop     hl
 191++23FF D9                           exx
 192++2400 D5                           push    de                  // Save Return Stack pointer
 193++2401 C5                           push    bc                  // Save Instruction pointer
 194++2402 D9                            exx
 195++2403 3E 2A                         ld      a, "*"
 196++2405 CF                            rst     $08
 197++2406 9A                            db      $9A
 198++2407              F_Open_Exit:
 199++2407 5F                            ld      e, a                // return the handle-number
 200++2408 16 00                         ld      d, 0
 201++240A 18 C8                        jr F_Read_Exit
 202++240C
 203++240C              //   \ CREATE FILENAME ," test.txt"   \ new Counted String
 204++240C              //   \ FILENAME 1+ PAD 1 F_OPEN
 205++240C              //   \ DROP
 206++240C              //   \ F_CLOSE
 207++240C
 208++240C
 209++240C              //  ______________________________________________________________________
 210++240C              //
 211++240C              // f_opendir    a1 -- u f
 212++240C              // open a file
 213++240C                              New_Def F_OPENDIR, "F_OPENDIR", is_code, is_normal
 213++240C             >
 213++240C             >Dict_Ptr        defl    $
 213++240C             >
 213++240C             >//              ______________________________________________________________________
 213++240C             >//              Heap part
 213++240C             >
 213++240C             >
 213++240C             >                org     (Heap_Ptr & $1FFF) + $E000
 213++E1CF             >
 213++E1CF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 213++E1CF             >Latest_Definition defl  Heap_Ptr
 213++E1CF             >
 213++E1CF             >                // dummy db directives used to calculate length of namec
 213++E1CF 46 5F 4F 50 >                db      "F_OPENDIR"
 213++E1D3 45 4E 44 49 >
 213++E1D7 52          >
 213++E1D8             >len_NFA         defl    $ - temp_NFA
 213++E1D8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 213++E1CF             >
 213++E1CF 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 213++E1D0 46 5F 4F 50 >                db      "F_OPENDIR"               // name string in 7-bit ascii, but
 213++E1D4 45 4E 44 49 >
 213++E1D8 52          >
 213++E1D9             >                org     $-1                 // alter last byte of Name just above to set
 213++E1D8 D2          >                db      {b $} | END_BIT     // msb as name end
 213++E1D9             >
 213++E1D9 C4 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 213++E1DB             >Prev_Ptr        defl    Heap_Ptr
 213++E1DB             >
 213++E1DB             >mirror_Ptr      defl    $
 213++E1DB             >
 213++E1DB 0E 24       >                dw      Dict_Ptr + 2        // xt
 213++E1DD             >Heap_Ptr        defl    $ - $E000           // save current HP
 213++E1DD             >
 213++E1DD             >Current_HP      defl  $ - $E000             // used to set HP once!
 213++E1DD             >
 213++E1DD             >//              ______________________________________________________________________
 213++E1DD             >//              Dictionary part
 213++E1DD             >
 213++E1DD             >                org     Dict_Ptr
 213++240C             >
 213++240C DB 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 213++240E             >
 213++240E             >F_OPENDIR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 213++240E ~           >                call    runcode ; ok        // for primitive definitions  actual code
 213++240E ~           >
 213++240E ~           >
 213++240E             >                endif           ; ok        // for other definitions it "points" the correct handler
 213++240E             >                // Use of "; ok" to suppress "warning[fwdref]"
 213++240E             >
 213++240E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 214++240E DD E3                        ex      (sp), ix            // filespec nul-terminated
 215++2410 DD E5                        push    ix
 216++2412 E1                           pop     hl
 217++2413 D5                           push    de                  // Save Return Stack pointer
 218++2414 C5                           push    bc                  // Save Instruction pointer
 219++2415 06 10                        ld      b, $10              // file-mode
 220++2417 3E 43                        ld      a, "C"
 221++2419 CF                           rst     $08
 222++241A A3                           db      $A3
 223++241B 18 EA                        jr      F_Open_Exit
 224++241D
 225++241D
 226++241D              //  ______________________________________________________________________
 227++241D              //
 228++241D              // f_readdir    a1 a2 b -- u f
 229++241D              // open a file
 230++241D                              New_Def F_READDIR, "F_READDIR", is_code, is_normal
 230++241D             >
 230++241D             >Dict_Ptr        defl    $
 230++241D             >
 230++241D             >//              ______________________________________________________________________
 230++241D             >//              Heap part
 230++241D             >
 230++241D             >
 230++241D             >                org     (Heap_Ptr & $1FFF) + $E000
 230++E1DD             >
 230++E1DD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 230++E1DD             >Latest_Definition defl  Heap_Ptr
 230++E1DD             >
 230++E1DD             >                // dummy db directives used to calculate length of namec
 230++E1DD 46 5F 52 45 >                db      "F_READDIR"
 230++E1E1 41 44 44 49 >
 230++E1E5 52          >
 230++E1E6             >len_NFA         defl    $ - temp_NFA
 230++E1E6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 230++E1DD             >
 230++E1DD 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 230++E1DE 46 5F 52 45 >                db      "F_READDIR"               // name string in 7-bit ascii, but
 230++E1E2 41 44 44 49 >
 230++E1E6 52          >
 230++E1E7             >                org     $-1                 // alter last byte of Name just above to set
 230++E1E6 D2          >                db      {b $} | END_BIT     // msb as name end
 230++E1E7             >
 230++E1E7 CF 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 230++E1E9             >Prev_Ptr        defl    Heap_Ptr
 230++E1E9             >
 230++E1E9             >mirror_Ptr      defl    $
 230++E1E9             >
 230++E1E9 1F 24       >                dw      Dict_Ptr + 2        // xt
 230++E1EB             >Heap_Ptr        defl    $ - $E000           // save current HP
 230++E1EB             >
 230++E1EB             >Current_HP      defl  $ - $E000             // used to set HP once!
 230++E1EB             >
 230++E1EB             >//              ______________________________________________________________________
 230++E1EB             >//              Dictionary part
 230++E1EB             >
 230++E1EB             >                org     Dict_Ptr
 230++241D             >
 230++241D E9 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 230++241F             >
 230++241F             >F_READDIR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 230++241F ~           >                call    runcode ; ok        // for primitive definitions  actual code
 230++241F ~           >
 230++241F ~           >
 230++241F             >                endif           ; ok        // for other definitions it "points" the correct handler
 230++241F             >                // Use of "; ok" to suppress "warning[fwdref]"
 230++241F             >
 230++241F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 231++241F D9                            exx
 232++2420 E1                            pop     hl
 233++2421 7D                            ld      a, l
 234++2422 D1                            pop     de
 235++2423 DD E3                         ex      (sp), ix            // filespec nul-terminated
 236++2425 DD E5                         push    ix
 237++2427 E1                            pop     hl
 238++2428 D9                           exx
 239++2429 D5                           push    de                  // Save Return Stack pointer
 240++242A C5                           push    bc                  // Save Instruction pointer
 241++242B D9                            exx
 242++242C CF                            rst     $08
 243++242D A4                            db      $A4
 244++242E 18 D7                         jr      F_Open_Exit
 245++2430
# file closed: C:\Zx\CSpect\Projects\vForth17_DOT/source/next-opt0.asm
1102+ 2430
1103+ 2430
1104+ 2430              //  ______________________________________________________________________
1105+ 2430              //
1106+ 2430              // cmove    a1 a2 u --
1107+ 2430              // If u > 0, moves memory content starting at address a1 for n bytes long
1108+ 2430              // storing then starting at address addr2.
1109+ 2430              // The content of a1 is moved first. See CMOVE> also.
1110+ 2430                              New_Def CMOVE, "CMOVE", is_code, is_normal
1110+ 2430             >
1110+ 2430             >Dict_Ptr        defl    $
1110+ 2430             >
1110+ 2430             >//              ______________________________________________________________________
1110+ 2430             >//              Heap part
1110+ 2430             >
1110+ 2430             >
1110+ 2430             >                org     (Heap_Ptr & $1FFF) + $E000
1110+ E1EB             >
1110+ E1EB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1110+ E1EB             >Latest_Definition defl  Heap_Ptr
1110+ E1EB             >
1110+ E1EB             >                // dummy db directives used to calculate length of namec
1110+ E1EB 43 4D 4F 56 >                db      "CMOVE"
1110+ E1EF 45          >
1110+ E1F0             >len_NFA         defl    $ - temp_NFA
1110+ E1F0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1110+ E1EB             >
1110+ E1EB 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1110+ E1EC 43 4D 4F 56 >                db      "CMOVE"               // name string in 7-bit ascii, but
1110+ E1F0 45          >
1110+ E1F1             >                org     $-1                 // alter last byte of Name just above to set
1110+ E1F0 C5          >                db      {b $} | END_BIT     // msb as name end
1110+ E1F1             >
1110+ E1F1 DD 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1110+ E1F3             >Prev_Ptr        defl    Heap_Ptr
1110+ E1F3             >
1110+ E1F3             >mirror_Ptr      defl    $
1110+ E1F3             >
1110+ E1F3 32 24       >                dw      Dict_Ptr + 2        // xt
1110+ E1F5             >Heap_Ptr        defl    $ - $E000           // save current HP
1110+ E1F5             >
1110+ E1F5             >Current_HP      defl  $ - $E000             // used to set HP once!
1110+ E1F5             >
1110+ E1F5             >//              ______________________________________________________________________
1110+ E1F5             >//              Dictionary part
1110+ E1F5             >
1110+ E1F5             >                org     Dict_Ptr
1110+ 2430             >
1110+ 2430 F3 01       >                dw      mirror_Ptr - $E000 + Heap_offset
1110+ 2432             >
1110+ 2432             >CMOVE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1110+ 2432 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1110+ 2432 ~           >
1110+ 2432 ~           >
1110+ 2432             >                endif           ; ok        // for other definitions it "points" the correct handler
1110+ 2432             >                // Use of "; ok" to suppress "warning[fwdref]"
1110+ 2432             >
1110+ 2432             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1111+ 2432 D9                           exx
1112+ 2433
1113+ 2433 C1                           pop     bc                  // bc has counter
1114+ 2434 D1                           pop     de                  // de now has dest
1115+ 2435 E1                           pop     hl                 // hl has source, save Instruction Pointer
1116+ 2436 78                           ld      a, b
1117+ 2437 B1                           or      c
1118+ 2438 28 02                        jr      z, Cmove_NoMove
1119+ 243A ED B0                            ldir
1120+ 243C              Cmove_NoMove:
1121+ 243C D9                           exx
1122+ 243D
1123+ 243D                              next
1123+ 243D DD E9       >                jp      (ix)
1124+ 243F
1125+ 243F              //  ______________________________________________________________________
1126+ 243F              //
1127+ 243F              // cmove>    a1 a2 u --
1128+ 243F              // If u > 0, moves memory content starting at address a1 for n bytes long
1129+ 243F              // storing then starting at address addr2.
1130+ 243F              // The content of a1 is moved last. See cmove.
1131+ 243F                              New_Def CMOVE_TO, "CMOVE>", is_code, is_normal
1131+ 243F             >
1131+ 243F             >Dict_Ptr        defl    $
1131+ 243F             >
1131+ 243F             >//              ______________________________________________________________________
1131+ 243F             >//              Heap part
1131+ 243F             >
1131+ 243F             >
1131+ 243F             >                org     (Heap_Ptr & $1FFF) + $E000
1131+ E1F5             >
1131+ E1F5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1131+ E1F5             >Latest_Definition defl  Heap_Ptr
1131+ E1F5             >
1131+ E1F5             >                // dummy db directives used to calculate length of namec
1131+ E1F5 43 4D 4F 56 >                db      "CMOVE>"
1131+ E1F9 45 3E       >
1131+ E1FB             >len_NFA         defl    $ - temp_NFA
1131+ E1FB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1131+ E1F5             >
1131+ E1F5 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1131+ E1F6 43 4D 4F 56 >                db      "CMOVE>"               // name string in 7-bit ascii, but
1131+ E1FA 45 3E       >
1131+ E1FC             >                org     $-1                 // alter last byte of Name just above to set
1131+ E1FB BE          >                db      {b $} | END_BIT     // msb as name end
1131+ E1FC             >
1131+ E1FC EB 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1131+ E1FE             >Prev_Ptr        defl    Heap_Ptr
1131+ E1FE             >
1131+ E1FE             >mirror_Ptr      defl    $
1131+ E1FE             >
1131+ E1FE 41 24       >                dw      Dict_Ptr + 2        // xt
1131+ E200             >Heap_Ptr        defl    $ - $E000           // save current HP
1131+ E200             >
1131+ E200             >Current_HP      defl  $ - $E000             // used to set HP once!
1131+ E200             >
1131+ E200             >//              ______________________________________________________________________
1131+ E200             >//              Dictionary part
1131+ E200             >
1131+ E200             >                org     Dict_Ptr
1131+ 243F             >
1131+ 243F FE 01       >                dw      mirror_Ptr - $E000 + Heap_offset
1131+ 2441             >
1131+ 2441             >CMOVE_TO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1131+ 2441 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1131+ 2441 ~           >
1131+ 2441 ~           >
1131+ 2441             >                endif           ; ok        // for other definitions it "points" the correct handler
1131+ 2441             >                // Use of "; ok" to suppress "warning[fwdref]"
1131+ 2441             >
1131+ 2441             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1132+ 2441 D9                           exx
1133+ 2442
1134+ 2442 C1                           pop     bc                  // bc has counter
1135+ 2443 D1                           pop     de                  // de has dest
1136+ 2444 E1                           pop     hl                  // hl has source, save Instruction Pointer
1137+ 2445 78                           ld      a, b
1138+ 2446 B1                           or      c
1139+ 2447 28 08                        jr      z, CmoveV_NoMove
1140+ 2449 EB                               ex      de, hl              // compute address to
1141+ 244A 09                               add     hl, bc              // operate backward
1142+ 244B 2B                               dec     hl
1143+ 244C EB                               ex      de, hl
1144+ 244D 09                               add     hl, bc
1145+ 244E 2B                               dec     hl
1146+ 244F ED B8                            lddr                        // backward
1147+ 2451              CmoveV_NoMove:
1148+ 2451 D9                           exx
1149+ 2452
1150+ 2452                              next
1150+ 2452 DD E9       >                jp      (ix)
1151+ 2454
1152+ 2454              //  ______________________________________________________________________
1153+ 2454              //
1154+ 2454              // um*      u1 u2 -- ud
1155+ 2454              // Unsigned multiplication
1156+ 2454              // A double-integer is kept in CPU registers as DEHL then pushed on stack.
1157+ 2454              // On the stack a double number is treated as two single numbers
1158+ 2454              // where DE is on the top of the stack and HL is the second from top,
1159+ 2454              // Instead, in 2VARIABLE a double number is stored as EDLH.
1160+ 2454              // this definition could use "MUL" Z80N new op-code.
1161+ 2454                              New_Def UM_MUL, "UM*", is_code, is_normal
1161+ 2454             >
1161+ 2454             >Dict_Ptr        defl    $
1161+ 2454             >
1161+ 2454             >//              ______________________________________________________________________
1161+ 2454             >//              Heap part
1161+ 2454             >
1161+ 2454             >
1161+ 2454             >                org     (Heap_Ptr & $1FFF) + $E000
1161+ E200             >
1161+ E200             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1161+ E200             >Latest_Definition defl  Heap_Ptr
1161+ E200             >
1161+ E200             >                // dummy db directives used to calculate length of namec
1161+ E200 55 4D 2A    >                db      "UM*"
1161+ E203             >len_NFA         defl    $ - temp_NFA
1161+ E203             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1161+ E200             >
1161+ E200 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1161+ E201 55 4D 2A    >                db      "UM*"               // name string in 7-bit ascii, but
1161+ E204             >                org     $-1                 // alter last byte of Name just above to set
1161+ E203 AA          >                db      {b $} | END_BIT     // msb as name end
1161+ E204             >
1161+ E204 F5 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1161+ E206             >Prev_Ptr        defl    Heap_Ptr
1161+ E206             >
1161+ E206             >mirror_Ptr      defl    $
1161+ E206             >
1161+ E206 56 24       >                dw      Dict_Ptr + 2        // xt
1161+ E208             >Heap_Ptr        defl    $ - $E000           // save current HP
1161+ E208             >
1161+ E208             >Current_HP      defl  $ - $E000             // used to set HP once!
1161+ E208             >
1161+ E208             >//              ______________________________________________________________________
1161+ E208             >//              Dictionary part
1161+ E208             >
1161+ E208             >                org     Dict_Ptr
1161+ 2454             >
1161+ 2454 06 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1161+ 2456             >
1161+ 2456             >UM_MUL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1161+ 2456 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1161+ 2456 ~           >
1161+ 2456 ~           >
1161+ 2456             >                endif           ; ok        // for other definitions it "points" the correct handler
1161+ 2456             >                // Use of "; ok" to suppress "warning[fwdref]"
1161+ 2456             >
1161+ 2456             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1162+ 2456 D9                           exx
1163+ 2457 D1                           pop     de                    // de has u2 operand
1164+ 2458 E1                           pop     hl                    // hl has u1 operand
1165+ 2459 45                           ld      b, l
1166+ 245A 4B                           ld      c, e
1167+ 245B 5D                           ld      e, l
1168+ 245C 6A                           ld      l, d
1169+ 245D E5                           push    hl
1170+ 245E 69                           ld      l, c
1171+ 245F ED 30                        mul
1172+ 2461 EB                           ex      de, hl
1173+ 2462 ED 30                        mul
1174+ 2464 AF                           xor     a
1175+ 2465 19                           add     hl, de
1176+ 2466 8F                           adc     a
1177+ 2467 59                           ld      e, c
1178+ 2468 50                           ld      d, b
1179+ 2469 ED 30                        mul
1180+ 246B 47                           ld      b, a
1181+ 246C 4C                           ld      c, h
1182+ 246D 7A                           ld      a, d
1183+ 246E 85                           add     l
1184+ 246F 67                           ld      h, a
1185+ 2470 6B                           ld      l, e
1186+ 2471 D1                           pop     de
1187+ 2472 ED 30                        mul
1188+ 2474 EB                           ex      de, hl
1189+ 2475 ED 4A                        adc     hl, bc
1190+ 2477 D5                           push    de
1191+ 2478 E5                           push    hl
1192+ 2479 D9                           exx
1193+ 247A                              next
1193+ 247A DD E9       >                jp      (ix)
1194+ 247C
1195+ 247C              //  ______________________________________________________________________
1196+ 247C              //
1197+ 247C              // um/mod      ud u1 -- q r
1198+ 247C              // divides ud into u1 giving quotient q and remainder r
1199+ 247C              // algorithm takes 16 bit at a time starting from msb
1200+ 247C              // DE grows from lsb upward with quotient result
1201+ 247C              // HL keeps the remainder at each stage of division
1202+ 247C              // each loop 'lowers' the next binary digit to form the current dividend
1203+ 247C                              New_Def UMDIVMOD, "UM/MOD", is_code, is_normal
1203+ 247C             >
1203+ 247C             >Dict_Ptr        defl    $
1203+ 247C             >
1203+ 247C             >//              ______________________________________________________________________
1203+ 247C             >//              Heap part
1203+ 247C             >
1203+ 247C             >
1203+ 247C             >                org     (Heap_Ptr & $1FFF) + $E000
1203+ E208             >
1203+ E208             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1203+ E208             >Latest_Definition defl  Heap_Ptr
1203+ E208             >
1203+ E208             >                // dummy db directives used to calculate length of namec
1203+ E208 55 4D 2F 4D >                db      "UM/MOD"
1203+ E20C 4F 44       >
1203+ E20E             >len_NFA         defl    $ - temp_NFA
1203+ E20E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1203+ E208             >
1203+ E208 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1203+ E209 55 4D 2F 4D >                db      "UM/MOD"               // name string in 7-bit ascii, but
1203+ E20D 4F 44       >
1203+ E20F             >                org     $-1                 // alter last byte of Name just above to set
1203+ E20E C4          >                db      {b $} | END_BIT     // msb as name end
1203+ E20F             >
1203+ E20F 00 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1203+ E211             >Prev_Ptr        defl    Heap_Ptr
1203+ E211             >
1203+ E211             >mirror_Ptr      defl    $
1203+ E211             >
1203+ E211 7E 24       >                dw      Dict_Ptr + 2        // xt
1203+ E213             >Heap_Ptr        defl    $ - $E000           // save current HP
1203+ E213             >
1203+ E213             >Current_HP      defl  $ - $E000             // used to set HP once!
1203+ E213             >
1203+ E213             >//              ______________________________________________________________________
1203+ E213             >//              Dictionary part
1203+ E213             >
1203+ E213             >                org     Dict_Ptr
1203+ 247C             >
1203+ 247C 11 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1203+ 247E             >
1203+ 247E             >UMDIVMOD:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1203+ 247E ~           >                call    runcode ; ok        // for primitive definitions  actual code
1203+ 247E ~           >
1203+ 247E ~           >
1203+ 247E             >                endif           ; ok        // for other definitions it "points" the correct handler
1203+ 247E             >                // Use of "; ok" to suppress "warning[fwdref]"
1203+ 247E             >
1203+ 247E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1204+ 247E D9                           exx
1205+ 247F C1                           pop     bc                      // divisor
1206+ 2480
1207+ 2480 E1                           pop     hl                      // < high part
1208+ 2481 D1                           pop     de                      // < low part and
1209+ 2482
1210+ 2482 7D                           ld      a, l                    // check without changing arguments
1211+ 2483 91                           sub     c                       // if divisor is greater than high part
1212+ 2484 7C                           ld      a, h                    // so quotient will be in range
1213+ 2485 98                           sbc     a, b
1214+ 2486 30 20                        jr      nc, Um_DivMod_OutOfRange
1215+ 2488 3E 10                            ld      a, 16
1216+ 248A              Um_DivMod_Loop:
1217+ 248A CB 23                                sla     e
1218+ 248C CB 12                                rl      d
1219+ 248E ED 6A                                adc     hl, hl
1220+ 2490 30 05                                jr      nc, Um_DivMod_Carry
1221+ 2492 A7                                       and     a
1222+ 2493 ED 42                                    sbc     hl, bc
1223+ 2495 18 07                                jr      Um_DivMod_Endif    // else
1224+ 2497              Um_DivMod_Carry:
1225+ 2497 A7                                       and     a
1226+ 2498 ED 42                                    sbc     hl, bc
1227+ 249A 30 02                                    jr      nc, Um_DivMod_Endif
1228+ 249C 09                                           add     hl, bc
1229+ 249D 1B                                           dec     de
1230+ 249E              Um_DivMod_Endif:                                   // endif
1231+ 249E 13                                   inc     de
1232+ 249F 3D                                   dec     a
1233+ 24A0 20 E8                            jr      nz, Um_DivMod_Loop
1234+ 24A2 EB                               ex      de, hl
1235+ 24A3              Um_DivMod_Bailout:
1236+ 24A3 D5                               push    de                  // de := remanider
1237+ 24A4 E5                               push    hl                  // hl := quotient
1238+ 24A5 D9                               exx
1239+ 24A6                                  next
1239+ 24A6 DD E9       >                jp      (ix)
1240+ 24A8
1241+ 24A8              Um_DivMod_OutOfRange:
1242+ 24A8 21 FF FF                     ld      hl, -1
1243+ 24AB 54                           ld      d, h
1244+ 24AC 5D                           ld      e, l
1245+ 24AD 18 F4                        jr      Um_DivMod_Bailout
1246+ 24AF
1247+ 24AF              //  ______________________________________________________________________
1248+ 24AF              //
1249+ 24AF              // and          n1 n2 -- n3
1250+ 24AF              // bit logical AND. Returns n3 as n1 & n2
1251+ 24AF                              New_Def AND_OP, "AND", is_code, is_normal
1251+ 24AF             >
1251+ 24AF             >Dict_Ptr        defl    $
1251+ 24AF             >
1251+ 24AF             >//              ______________________________________________________________________
1251+ 24AF             >//              Heap part
1251+ 24AF             >
1251+ 24AF             >
1251+ 24AF             >                org     (Heap_Ptr & $1FFF) + $E000
1251+ E213             >
1251+ E213             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1251+ E213             >Latest_Definition defl  Heap_Ptr
1251+ E213             >
1251+ E213             >                // dummy db directives used to calculate length of namec
1251+ E213 41 4E 44    >                db      "AND"
1251+ E216             >len_NFA         defl    $ - temp_NFA
1251+ E216             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1251+ E213             >
1251+ E213 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1251+ E214 41 4E 44    >                db      "AND"               // name string in 7-bit ascii, but
1251+ E217             >                org     $-1                 // alter last byte of Name just above to set
1251+ E216 C4          >                db      {b $} | END_BIT     // msb as name end
1251+ E217             >
1251+ E217 08 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1251+ E219             >Prev_Ptr        defl    Heap_Ptr
1251+ E219             >
1251+ E219             >mirror_Ptr      defl    $
1251+ E219             >
1251+ E219 B1 24       >                dw      Dict_Ptr + 2        // xt
1251+ E21B             >Heap_Ptr        defl    $ - $E000           // save current HP
1251+ E21B             >
1251+ E21B             >Current_HP      defl  $ - $E000             // used to set HP once!
1251+ E21B             >
1251+ E21B             >//              ______________________________________________________________________
1251+ E21B             >//              Dictionary part
1251+ E21B             >
1251+ E21B             >                org     Dict_Ptr
1251+ 24AF             >
1251+ 24AF 19 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1251+ 24B1             >
1251+ 24B1             >AND_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1251+ 24B1 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1251+ 24B1 ~           >
1251+ 24B1 ~           >
1251+ 24B1             >                endif           ; ok        // for other definitions it "points" the correct handler
1251+ 24B1             >                // Use of "; ok" to suppress "warning[fwdref]"
1251+ 24B1             >
1251+ 24B1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1252+ 24B1 D9                           exx
1253+ 24B2 D1                           pop     de
1254+ 24B3 E1                           pop     hl
1255+ 24B4 7B                           ld      a, e
1256+ 24B5 A5                           and     l
1257+ 24B6 6F                           ld      l, a
1258+ 24B7 7A                           ld      a, d
1259+ 24B8 A4                           and     h
1260+ 24B9              Boolean_exit:
1261+ 24B9 67                           ld      h, a
1262+ 24BA E5                           push    hl
1263+ 24BB D9                           exx
1264+ 24BC                              next
1264+ 24BC DD E9       >                jp      (ix)
1265+ 24BE
1266+ 24BE              //  ______________________________________________________________________
1267+ 24BE              //
1268+ 24BE              // or           n1 n2 -- n3
1269+ 24BE              // bit logical OR. Returns n3 as n1 | n2
1270+ 24BE                              New_Def OR_OP, "OR", is_code, is_normal
1270+ 24BE             >
1270+ 24BE             >Dict_Ptr        defl    $
1270+ 24BE             >
1270+ 24BE             >//              ______________________________________________________________________
1270+ 24BE             >//              Heap part
1270+ 24BE             >
1270+ 24BE             >
1270+ 24BE             >                org     (Heap_Ptr & $1FFF) + $E000
1270+ E21B             >
1270+ E21B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1270+ E21B             >Latest_Definition defl  Heap_Ptr
1270+ E21B             >
1270+ E21B             >                // dummy db directives used to calculate length of namec
1270+ E21B 4F 52       >                db      "OR"
1270+ E21D             >len_NFA         defl    $ - temp_NFA
1270+ E21D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1270+ E21B             >
1270+ E21B 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1270+ E21C 4F 52       >                db      "OR"               // name string in 7-bit ascii, but
1270+ E21E             >                org     $-1                 // alter last byte of Name just above to set
1270+ E21D D2          >                db      {b $} | END_BIT     // msb as name end
1270+ E21E             >
1270+ E21E 13 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1270+ E220             >Prev_Ptr        defl    Heap_Ptr
1270+ E220             >
1270+ E220             >mirror_Ptr      defl    $
1270+ E220             >
1270+ E220 C0 24       >                dw      Dict_Ptr + 2        // xt
1270+ E222             >Heap_Ptr        defl    $ - $E000           // save current HP
1270+ E222             >
1270+ E222             >Current_HP      defl  $ - $E000             // used to set HP once!
1270+ E222             >
1270+ E222             >//              ______________________________________________________________________
1270+ E222             >//              Dictionary part
1270+ E222             >
1270+ E222             >                org     Dict_Ptr
1270+ 24BE             >
1270+ 24BE 20 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1270+ 24C0             >
1270+ 24C0             >OR_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1270+ 24C0 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1270+ 24C0 ~           >
1270+ 24C0 ~           >
1270+ 24C0             >                endif           ; ok        // for other definitions it "points" the correct handler
1270+ 24C0             >                // Use of "; ok" to suppress "warning[fwdref]"
1270+ 24C0             >
1270+ 24C0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1271+ 24C0 D9                           exx
1272+ 24C1 D1                           pop     de
1273+ 24C2 E1                           pop     hl
1274+ 24C3 7B                           ld      a, e
1275+ 24C4 B5                           or      l
1276+ 24C5 6F                           ld      l, a
1277+ 24C6 7A                           ld      a, d
1278+ 24C7 B4                           or      h
1279+ 24C8 18 EF                        jr      Boolean_exit
1280+ 24CA                        //    ld      h, a
1281+ 24CA                        //    push    hl
1282+ 24CA                        //    exx
1283+ 24CA                        //    next
1284+ 24CA
1285+ 24CA              //  ______________________________________________________________________
1286+ 24CA              //
1287+ 24CA              // xor          n1 n2 -- n3
1288+ 24CA              // bit logical OR. Returns n3 as n1 ^ n2
1289+ 24CA                              New_Def XOR_OP, "XOR", is_code, is_normal
1289+ 24CA             >
1289+ 24CA             >Dict_Ptr        defl    $
1289+ 24CA             >
1289+ 24CA             >//              ______________________________________________________________________
1289+ 24CA             >//              Heap part
1289+ 24CA             >
1289+ 24CA             >
1289+ 24CA             >                org     (Heap_Ptr & $1FFF) + $E000
1289+ E222             >
1289+ E222             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1289+ E222             >Latest_Definition defl  Heap_Ptr
1289+ E222             >
1289+ E222             >                // dummy db directives used to calculate length of namec
1289+ E222 58 4F 52    >                db      "XOR"
1289+ E225             >len_NFA         defl    $ - temp_NFA
1289+ E225             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1289+ E222             >
1289+ E222 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1289+ E223 58 4F 52    >                db      "XOR"               // name string in 7-bit ascii, but
1289+ E226             >                org     $-1                 // alter last byte of Name just above to set
1289+ E225 D2          >                db      {b $} | END_BIT     // msb as name end
1289+ E226             >
1289+ E226 1B 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1289+ E228             >Prev_Ptr        defl    Heap_Ptr
1289+ E228             >
1289+ E228             >mirror_Ptr      defl    $
1289+ E228             >
1289+ E228 CC 24       >                dw      Dict_Ptr + 2        // xt
1289+ E22A             >Heap_Ptr        defl    $ - $E000           // save current HP
1289+ E22A             >
1289+ E22A             >Current_HP      defl  $ - $E000             // used to set HP once!
1289+ E22A             >
1289+ E22A             >//              ______________________________________________________________________
1289+ E22A             >//              Dictionary part
1289+ E22A             >
1289+ E22A             >                org     Dict_Ptr
1289+ 24CA             >
1289+ 24CA 28 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1289+ 24CC             >
1289+ 24CC             >XOR_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1289+ 24CC ~           >                call    runcode ; ok        // for primitive definitions  actual code
1289+ 24CC ~           >
1289+ 24CC ~           >
1289+ 24CC             >                endif           ; ok        // for other definitions it "points" the correct handler
1289+ 24CC             >                // Use of "; ok" to suppress "warning[fwdref]"
1289+ 24CC             >
1289+ 24CC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1290+ 24CC D9                           exx
1291+ 24CD D1                           pop     de
1292+ 24CE E1                           pop     hl
1293+ 24CF 7B                           ld      a, e
1294+ 24D0 AD                           xor     l
1295+ 24D1 6F                           ld      l, a
1296+ 24D2 7A                           ld      a, d
1297+ 24D3 AC                           xor     h
1298+ 24D4 18 E3                        jr      Boolean_exit
1299+ 24D6                        //    ld      h, a
1300+ 24D6                        //    push    hl
1301+ 24D6                        //    exx
1302+ 24D6                        //    next
1303+ 24D6
1304+ 24D6              //  ______________________________________________________________________
1305+ 24D6              //
1306+ 24D6              // sp@      -- a
1307+ 24D6              // returns on top of stack the value of SP before execution
1308+ 24D6                              New_Def SPFETCH, "SP@", is_code, is_normal
1308+ 24D6             >
1308+ 24D6             >Dict_Ptr        defl    $
1308+ 24D6             >
1308+ 24D6             >//              ______________________________________________________________________
1308+ 24D6             >//              Heap part
1308+ 24D6             >
1308+ 24D6             >
1308+ 24D6             >                org     (Heap_Ptr & $1FFF) + $E000
1308+ E22A             >
1308+ E22A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1308+ E22A             >Latest_Definition defl  Heap_Ptr
1308+ E22A             >
1308+ E22A             >                // dummy db directives used to calculate length of namec
1308+ E22A 53 50 40    >                db      "SP@"
1308+ E22D             >len_NFA         defl    $ - temp_NFA
1308+ E22D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1308+ E22A             >
1308+ E22A 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1308+ E22B 53 50 40    >                db      "SP@"               // name string in 7-bit ascii, but
1308+ E22E             >                org     $-1                 // alter last byte of Name just above to set
1308+ E22D C0          >                db      {b $} | END_BIT     // msb as name end
1308+ E22E             >
1308+ E22E 22 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1308+ E230             >Prev_Ptr        defl    Heap_Ptr
1308+ E230             >
1308+ E230             >mirror_Ptr      defl    $
1308+ E230             >
1308+ E230 D8 24       >                dw      Dict_Ptr + 2        // xt
1308+ E232             >Heap_Ptr        defl    $ - $E000           // save current HP
1308+ E232             >
1308+ E232             >Current_HP      defl  $ - $E000             // used to set HP once!
1308+ E232             >
1308+ E232             >//              ______________________________________________________________________
1308+ E232             >//              Dictionary part
1308+ E232             >
1308+ E232             >                org     Dict_Ptr
1308+ 24D6             >
1308+ 24D6 30 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1308+ 24D8             >
1308+ 24D8             >SPFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1308+ 24D8 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1308+ 24D8 ~           >
1308+ 24D8 ~           >
1308+ 24D8             >                endif           ; ok        // for other definitions it "points" the correct handler
1308+ 24D8             >                // Use of "; ok" to suppress "warning[fwdref]"
1308+ 24D8             >
1308+ 24D8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1309+ 24D8
1310+ 24D8 21 00 00                     ld      hl, 0
1311+ 24DB 39                           add     hl, sp
1312+ 24DC
1313+ 24DC                              psh1
1313+ 24DC E5          >                push    hl
1313+ 24DD DD E9       >                jp      (ix)
1314+ 24DF
1315+ 24DF              //  ______________________________________________________________________
1316+ 24DF              //
1317+ 24DF              // sp!      a --
1318+ 24DF              // restore SP to the initial value passed
1319+ 24DF              // normally it is S0, i.e. the word at offset 6 and 7 of user variabiles area.
1320+ 24DF                              New_Def SPSTORE, "SP!", is_code, is_normal
1320+ 24DF             >
1320+ 24DF             >Dict_Ptr        defl    $
1320+ 24DF             >
1320+ 24DF             >//              ______________________________________________________________________
1320+ 24DF             >//              Heap part
1320+ 24DF             >
1320+ 24DF             >
1320+ 24DF             >                org     (Heap_Ptr & $1FFF) + $E000
1320+ E232             >
1320+ E232             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1320+ E232             >Latest_Definition defl  Heap_Ptr
1320+ E232             >
1320+ E232             >                // dummy db directives used to calculate length of namec
1320+ E232 53 50 21    >                db      "SP!"
1320+ E235             >len_NFA         defl    $ - temp_NFA
1320+ E235             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1320+ E232             >
1320+ E232 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1320+ E233 53 50 21    >                db      "SP!"               // name string in 7-bit ascii, but
1320+ E236             >                org     $-1                 // alter last byte of Name just above to set
1320+ E235 A1          >                db      {b $} | END_BIT     // msb as name end
1320+ E236             >
1320+ E236 2A 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1320+ E238             >Prev_Ptr        defl    Heap_Ptr
1320+ E238             >
1320+ E238             >mirror_Ptr      defl    $
1320+ E238             >
1320+ E238 E1 24       >                dw      Dict_Ptr + 2        // xt
1320+ E23A             >Heap_Ptr        defl    $ - $E000           // save current HP
1320+ E23A             >
1320+ E23A             >Current_HP      defl  $ - $E000             // used to set HP once!
1320+ E23A             >
1320+ E23A             >//              ______________________________________________________________________
1320+ E23A             >//              Dictionary part
1320+ E23A             >
1320+ E23A             >                org     Dict_Ptr
1320+ 24DF             >
1320+ 24DF 38 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1320+ 24E1             >
1320+ 24E1             >SPSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1320+ 24E1 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1320+ 24E1 ~           >
1320+ 24E1 ~           >
1320+ 24E1             >                endif           ; ok        // for other definitions it "points" the correct handler
1320+ 24E1             >                // Use of "; ok" to suppress "warning[fwdref]"
1320+ 24E1             >
1320+ 24E1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1321+ 24E1 E1                           pop     hl
1322+ 24E2 F9                           ld      sp, hl
1323+ 24E3
1324+ 24E3                              next
1324+ 24E3 DD E9       >                jp      (ix)
1325+ 24E5
1326+ 24E5              //  ______________________________________________________________________
1327+ 24E5              //
1328+ 24E5              // rp@      -- a
1329+ 24E5              // returns on top of stack the value of Return-Pointer
1330+ 24E5                              New_Def RPFETCH, "RP@", is_code, is_normal
1330+ 24E5             >
1330+ 24E5             >Dict_Ptr        defl    $
1330+ 24E5             >
1330+ 24E5             >//              ______________________________________________________________________
1330+ 24E5             >//              Heap part
1330+ 24E5             >
1330+ 24E5             >
1330+ 24E5             >                org     (Heap_Ptr & $1FFF) + $E000
1330+ E23A             >
1330+ E23A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1330+ E23A             >Latest_Definition defl  Heap_Ptr
1330+ E23A             >
1330+ E23A             >                // dummy db directives used to calculate length of namec
1330+ E23A 52 50 40    >                db      "RP@"
1330+ E23D             >len_NFA         defl    $ - temp_NFA
1330+ E23D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1330+ E23A             >
1330+ E23A 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1330+ E23B 52 50 40    >                db      "RP@"               // name string in 7-bit ascii, but
1330+ E23E             >                org     $-1                 // alter last byte of Name just above to set
1330+ E23D C0          >                db      {b $} | END_BIT     // msb as name end
1330+ E23E             >
1330+ E23E 32 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1330+ E240             >Prev_Ptr        defl    Heap_Ptr
1330+ E240             >
1330+ E240             >mirror_Ptr      defl    $
1330+ E240             >
1330+ E240 E7 24       >                dw      Dict_Ptr + 2        // xt
1330+ E242             >Heap_Ptr        defl    $ - $E000           // save current HP
1330+ E242             >
1330+ E242             >Current_HP      defl  $ - $E000             // used to set HP once!
1330+ E242             >
1330+ E242             >//              ______________________________________________________________________
1330+ E242             >//              Dictionary part
1330+ E242             >
1330+ E242             >                org     Dict_Ptr
1330+ 24E5             >
1330+ 24E5 40 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1330+ 24E7             >
1330+ 24E7             >RPFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1330+ 24E7 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1330+ 24E7 ~           >
1330+ 24E7 ~           >
1330+ 24E7             >                endif           ; ok        // for other definitions it "points" the correct handler
1330+ 24E7             >                // Use of "; ok" to suppress "warning[fwdref]"
1330+ 24E7             >
1330+ 24E7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1331+ 24E7
1332+ 24E7                              // *** ldhlrp
1333+ 24E7                              // *** ex      de, hl
1334+ 24E7 D5                           push de
1335+ 24E8
1336+ 24E8                              next
1336+ 24E8 DD E9       >                jp      (ix)
1337+ 24EA
1338+ 24EA              //  ______________________________________________________________________
1339+ 24EA              //
1340+ 24EA              // rp!      a --
1341+ 24EA              // restore RP to the initial value passed
1342+ 24EA              // normally it is R0 @, i.e. the word at offset 8 of user variabiles area.
1343+ 24EA                              New_Def RPSTORE, "RP!", is_code, is_normal
1343+ 24EA             >
1343+ 24EA             >Dict_Ptr        defl    $
1343+ 24EA             >
1343+ 24EA             >//              ______________________________________________________________________
1343+ 24EA             >//              Heap part
1343+ 24EA             >
1343+ 24EA             >
1343+ 24EA             >                org     (Heap_Ptr & $1FFF) + $E000
1343+ E242             >
1343+ E242             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1343+ E242             >Latest_Definition defl  Heap_Ptr
1343+ E242             >
1343+ E242             >                // dummy db directives used to calculate length of namec
1343+ E242 52 50 21    >                db      "RP!"
1343+ E245             >len_NFA         defl    $ - temp_NFA
1343+ E245             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1343+ E242             >
1343+ E242 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1343+ E243 52 50 21    >                db      "RP!"               // name string in 7-bit ascii, but
1343+ E246             >                org     $-1                 // alter last byte of Name just above to set
1343+ E245 A1          >                db      {b $} | END_BIT     // msb as name end
1343+ E246             >
1343+ E246 3A 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1343+ E248             >Prev_Ptr        defl    Heap_Ptr
1343+ E248             >
1343+ E248             >mirror_Ptr      defl    $
1343+ E248             >
1343+ E248 EC 24       >                dw      Dict_Ptr + 2        // xt
1343+ E24A             >Heap_Ptr        defl    $ - $E000           // save current HP
1343+ E24A             >
1343+ E24A             >Current_HP      defl  $ - $E000             // used to set HP once!
1343+ E24A             >
1343+ E24A             >//              ______________________________________________________________________
1343+ E24A             >//              Dictionary part
1343+ E24A             >
1343+ E24A             >                org     Dict_Ptr
1343+ 24EA             >
1343+ 24EA 48 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1343+ 24EC             >
1343+ 24EC             >RPSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1343+ 24EC ~           >                call    runcode ; ok        // for primitive definitions  actual code
1343+ 24EC ~           >
1343+ 24EC ~           >
1343+ 24EC             >                endif           ; ok        // for other definitions it "points" the correct handler
1343+ 24EC             >                // Use of "; ok" to suppress "warning[fwdref]"
1343+ 24EC             >
1343+ 24EC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1344+ 24EC D1                           pop     de
1345+ 24ED                              // *** ex      de, hl
1346+ 24ED                              // *** ldrphl
1347+ 24ED
1348+ 24ED                              next
1348+ 24ED DD E9       >                jp      (ix)
1349+ 24EF
1350+ 24EF              //  ______________________________________________________________________
1351+ 24EF              //
1352+ 24EF              // exit       --
1353+ 24EF              // exits back to the caller word
1354+ 24EF                              New_Def EXIT, "EXIT", is_code, is_normal
1354+ 24EF             >
1354+ 24EF             >Dict_Ptr        defl    $
1354+ 24EF             >
1354+ 24EF             >//              ______________________________________________________________________
1354+ 24EF             >//              Heap part
1354+ 24EF             >
1354+ 24EF             >
1354+ 24EF             >                org     (Heap_Ptr & $1FFF) + $E000
1354+ E24A             >
1354+ E24A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1354+ E24A             >Latest_Definition defl  Heap_Ptr
1354+ E24A             >
1354+ E24A             >                // dummy db directives used to calculate length of namec
1354+ E24A 45 58 49 54 >                db      "EXIT"
1354+ E24E             >len_NFA         defl    $ - temp_NFA
1354+ E24E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1354+ E24A             >
1354+ E24A 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1354+ E24B 45 58 49 54 >                db      "EXIT"               // name string in 7-bit ascii, but
1354+ E24F             >                org     $-1                 // alter last byte of Name just above to set
1354+ E24E D4          >                db      {b $} | END_BIT     // msb as name end
1354+ E24F             >
1354+ E24F 42 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1354+ E251             >Prev_Ptr        defl    Heap_Ptr
1354+ E251             >
1354+ E251             >mirror_Ptr      defl    $
1354+ E251             >
1354+ E251 F1 24       >                dw      Dict_Ptr + 2        // xt
1354+ E253             >Heap_Ptr        defl    $ - $E000           // save current HP
1354+ E253             >
1354+ E253             >Current_HP      defl  $ - $E000             // used to set HP once!
1354+ E253             >
1354+ E253             >//              ______________________________________________________________________
1354+ E253             >//              Dictionary part
1354+ E253             >
1354+ E253             >                org     Dict_Ptr
1354+ 24EF             >
1354+ 24EF 51 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1354+ 24F1             >
1354+ 24F1             >EXIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1354+ 24F1 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1354+ 24F1 ~           >
1354+ 24F1 ~           >
1354+ 24F1             >                endif           ; ok        // for other definitions it "points" the correct handler
1354+ 24F1             >                // Use of "; ok" to suppress "warning[fwdref]"
1354+ 24F1             >
1354+ 24F1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1355+ 24F1 EB                           ex      de, hl
1356+ 24F2                              // *** ldhlrp                      // Get Return Stack Pointer
1357+ 24F2 4E                           ld      c, (hl)             // pop Instruction Pointer
1358+ 24F3 23                           inc     hl                  // from Return Stack
1359+ 24F4 46                           ld      b, (hl)
1360+ 24F5 23                           inc     hl
1361+ 24F6                              // *** ldrphl                      // Set Return Stack Pointer
1362+ 24F6 EB                           ex      de, hl
1363+ 24F7                              next
1363+ 24F7 DD E9       >                jp      (ix)
1364+ 24F9
1365+ 24F9              //  ______________________________________________________________________
1366+ 24F9              //
1367+ 24F9              // lastl      --
1368+ 24F9              // exits back to the caller word
1369+ 24F9              //              New_Def EXIT, "LASTL", is_code, is_normal
1370+ 24F9              //              push    de
1371+ 24F9              //              ex      de, hl //**
1372+ 24F9              //              // *** ldhlrp                      // Get Return Stack Pointer
1373+ 24F9              //              ld      e, (hl)             // pop Instruction Pointer
1374+ 24F9              //              inc     hl                  // from Return Stack
1375+ 24F9              //              ld      d, (hl)
1376+ 24F9              //              inc     hl
1377+ 24F9              //              ld      (hl), e
1378+ 24F9              //              inc     hl
1379+ 24F9              //              ld      (hl), d
1380+ 24F9              //              add     hl, -3
1381+ 24F9              //              pop     de
1382+ 24F9              //              next
1383+ 24F9
1384+ 24F9              //  ______________________________________________________________________
1385+ 24F9              //
1386+ 24F9              // >r      n --
1387+ 24F9              // pop from calculator-stack and push into return-stack
1388+ 24F9                              New_Def TO_R, ">R", is_code, is_normal
1388+ 24F9             >
1388+ 24F9             >Dict_Ptr        defl    $
1388+ 24F9             >
1388+ 24F9             >//              ______________________________________________________________________
1388+ 24F9             >//              Heap part
1388+ 24F9             >
1388+ 24F9             >
1388+ 24F9             >                org     (Heap_Ptr & $1FFF) + $E000
1388+ E253             >
1388+ E253             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1388+ E253             >Latest_Definition defl  Heap_Ptr
1388+ E253             >
1388+ E253             >                // dummy db directives used to calculate length of namec
1388+ E253 3E 52       >                db      ">R"
1388+ E255             >len_NFA         defl    $ - temp_NFA
1388+ E255             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1388+ E253             >
1388+ E253 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1388+ E254 3E 52       >                db      ">R"               // name string in 7-bit ascii, but
1388+ E256             >                org     $-1                 // alter last byte of Name just above to set
1388+ E255 D2          >                db      {b $} | END_BIT     // msb as name end
1388+ E256             >
1388+ E256 4A 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1388+ E258             >Prev_Ptr        defl    Heap_Ptr
1388+ E258             >
1388+ E258             >mirror_Ptr      defl    $
1388+ E258             >
1388+ E258 FB 24       >                dw      Dict_Ptr + 2        // xt
1388+ E25A             >Heap_Ptr        defl    $ - $E000           // save current HP
1388+ E25A             >
1388+ E25A             >Current_HP      defl  $ - $E000             // used to set HP once!
1388+ E25A             >
1388+ E25A             >//              ______________________________________________________________________
1388+ E25A             >//              Dictionary part
1388+ E25A             >
1388+ E25A             >                org     Dict_Ptr
1388+ 24F9             >
1388+ 24F9 58 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1388+ 24FB             >
1388+ 24FB             >TO_R:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1388+ 24FB ~           >                call    runcode ; ok        // for primitive definitions  actual code
1388+ 24FB ~           >
1388+ 24FB ~           >
1388+ 24FB             >                endif           ; ok        // for other definitions it "points" the correct handler
1388+ 24FB             >                // Use of "; ok" to suppress "warning[fwdref]"
1388+ 24FB             >
1388+ 24FB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1389+ 24FB E1                           pop     hl
1390+ 24FC EB                           ex      de, hl //**
1391+ 24FD                              // *** ldhlrp
1392+ 24FD 2B                           dec     hl
1393+ 24FE 72                           ld      (hl), d             // store current TOS
1394+ 24FF 2B                           dec     hl                  // to Return Stack
1395+ 2500 73                           ld      (hl), e
1396+ 2501                              // *** ldrphl
1397+ 2501 EB                           ex      de, hl //**
1398+ 2502                              next
1398+ 2502 DD E9       >                jp      (ix)
1399+ 2504
1400+ 2504              //  ______________________________________________________________________
1401+ 2504              //
1402+ 2504              // r>      -- n
1403+ 2504              // pop from return-stack and push into calculator-stack
1404+ 2504                              New_Def R_TO, "R>", is_code, is_normal
1404+ 2504             >
1404+ 2504             >Dict_Ptr        defl    $
1404+ 2504             >
1404+ 2504             >//              ______________________________________________________________________
1404+ 2504             >//              Heap part
1404+ 2504             >
1404+ 2504             >
1404+ 2504             >                org     (Heap_Ptr & $1FFF) + $E000
1404+ E25A             >
1404+ E25A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1404+ E25A             >Latest_Definition defl  Heap_Ptr
1404+ E25A             >
1404+ E25A             >                // dummy db directives used to calculate length of namec
1404+ E25A 52 3E       >                db      "R>"
1404+ E25C             >len_NFA         defl    $ - temp_NFA
1404+ E25C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1404+ E25A             >
1404+ E25A 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1404+ E25B 52 3E       >                db      "R>"               // name string in 7-bit ascii, but
1404+ E25D             >                org     $-1                 // alter last byte of Name just above to set
1404+ E25C BE          >                db      {b $} | END_BIT     // msb as name end
1404+ E25D             >
1404+ E25D 53 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1404+ E25F             >Prev_Ptr        defl    Heap_Ptr
1404+ E25F             >
1404+ E25F             >mirror_Ptr      defl    $
1404+ E25F             >
1404+ E25F 06 25       >                dw      Dict_Ptr + 2        // xt
1404+ E261             >Heap_Ptr        defl    $ - $E000           // save current HP
1404+ E261             >
1404+ E261             >Current_HP      defl  $ - $E000             // used to set HP once!
1404+ E261             >
1404+ E261             >//              ______________________________________________________________________
1404+ E261             >//              Dictionary part
1404+ E261             >
1404+ E261             >                org     Dict_Ptr
1404+ 2504             >
1404+ 2504 5F 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1404+ 2506             >
1404+ 2506             >R_TO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1404+ 2506 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1404+ 2506 ~           >
1404+ 2506 ~           >
1404+ 2506             >                endif           ; ok        // for other definitions it "points" the correct handler
1404+ 2506             >                // Use of "; ok" to suppress "warning[fwdref]"
1404+ 2506             >
1404+ 2506             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1405+ 2506
1406+ 2506 EB                           ex      de, hl //**
1407+ 2507                              // *** ldhlrp
1408+ 2507 5E                           ld      e, (hl)             // retrieve from Return Stack
1409+ 2508 23                           inc     hl
1410+ 2509 56                           ld      d, (hl)
1411+ 250A 23                           inc     hl
1412+ 250B                              // *** ldrphl
1413+ 250B EB                           ex      de, hl //**
1414+ 250C E5                           push    hl
1415+ 250D                              next
1415+ 250D DD E9       >                jp      (ix)
1416+ 250F
1417+ 250F              //  ______________________________________________________________________
1418+ 250F              //
1419+ 250F              // r@           -- n
1420+ 250F              // return on top of stack the value of top of return-stack
1421+ 250F              // Since this is the same as I, we alter R's CFA to jump there
1422+ 250F                              New_Def R_OP, "R@", is_code, is_normal
1422+ 250F             >
1422+ 250F             >Dict_Ptr        defl    $
1422+ 250F             >
1422+ 250F             >//              ______________________________________________________________________
1422+ 250F             >//              Heap part
1422+ 250F             >
1422+ 250F             >
1422+ 250F             >                org     (Heap_Ptr & $1FFF) + $E000
1422+ E261             >
1422+ E261             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1422+ E261             >Latest_Definition defl  Heap_Ptr
1422+ E261             >
1422+ E261             >                // dummy db directives used to calculate length of namec
1422+ E261 52 40       >                db      "R@"
1422+ E263             >len_NFA         defl    $ - temp_NFA
1422+ E263             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1422+ E261             >
1422+ E261 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1422+ E262 52 40       >                db      "R@"               // name string in 7-bit ascii, but
1422+ E264             >                org     $-1                 // alter last byte of Name just above to set
1422+ E263 C0          >                db      {b $} | END_BIT     // msb as name end
1422+ E264             >
1422+ E264 5A 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1422+ E266             >Prev_Ptr        defl    Heap_Ptr
1422+ E266             >
1422+ E266             >mirror_Ptr      defl    $
1422+ E266             >
1422+ E266 11 25       >                dw      Dict_Ptr + 2        // xt
1422+ E268             >Heap_Ptr        defl    $ - $E000           // save current HP
1422+ E268             >
1422+ E268             >Current_HP      defl  $ - $E000             // used to set HP once!
1422+ E268             >
1422+ E268             >//              ______________________________________________________________________
1422+ E268             >//              Dictionary part
1422+ E268             >
1422+ E268             >                org     Dict_Ptr
1422+ 250F             >
1422+ 250F 66 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1422+ 2511             >
1422+ 2511             >R_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1422+ 2511 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1422+ 2511 ~           >
1422+ 2511 ~           >
1422+ 2511             >                endif           ; ok        // for other definitions it "points" the correct handler
1422+ 2511             >                // Use of "; ok" to suppress "warning[fwdref]"
1422+ 2511             >
1422+ 2511             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1423+ 2511                          //  Behave  I_Ptr
1424+ 2511 C3 D2 20                     jp      I_Ptr
1425+ 2514
1426+ 2514              //  ______________________________________________________________________
1427+ 2514              //
1428+ 2514              // r            -- n
1429+ 2514              // return on top of stack the value of top of return-stack
1430+ 2514              // Since this is the same as I, we alter R's CFA to jump there
1431+ 2514              //              New_Def R_OLD, "R", is_code, is_normal
1432+ 2514              //              jp      I_Ptr
1433+ 2514
1434+ 2514              //  ______________________________________________________________________
1435+ 2514              //
1436+ 2514              // 0=           n -- f
1437+ 2514              // true (non zero) if n is zero, false (0) elsewere
1438+ 2514                              New_Def ZEQUAL, "0=", is_code, is_normal
1438+ 2514             >
1438+ 2514             >Dict_Ptr        defl    $
1438+ 2514             >
1438+ 2514             >//              ______________________________________________________________________
1438+ 2514             >//              Heap part
1438+ 2514             >
1438+ 2514             >
1438+ 2514             >                org     (Heap_Ptr & $1FFF) + $E000
1438+ E268             >
1438+ E268             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1438+ E268             >Latest_Definition defl  Heap_Ptr
1438+ E268             >
1438+ E268             >                // dummy db directives used to calculate length of namec
1438+ E268 30 3D       >                db      "0="
1438+ E26A             >len_NFA         defl    $ - temp_NFA
1438+ E26A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1438+ E268             >
1438+ E268 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1438+ E269 30 3D       >                db      "0="               // name string in 7-bit ascii, but
1438+ E26B             >                org     $-1                 // alter last byte of Name just above to set
1438+ E26A BD          >                db      {b $} | END_BIT     // msb as name end
1438+ E26B             >
1438+ E26B 61 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1438+ E26D             >Prev_Ptr        defl    Heap_Ptr
1438+ E26D             >
1438+ E26D             >mirror_Ptr      defl    $
1438+ E26D             >
1438+ E26D 16 25       >                dw      Dict_Ptr + 2        // xt
1438+ E26F             >Heap_Ptr        defl    $ - $E000           // save current HP
1438+ E26F             >
1438+ E26F             >Current_HP      defl  $ - $E000             // used to set HP once!
1438+ E26F             >
1438+ E26F             >//              ______________________________________________________________________
1438+ E26F             >//              Dictionary part
1438+ E26F             >
1438+ E26F             >                org     Dict_Ptr
1438+ 2514             >
1438+ 2514 6D 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1438+ 2516             >
1438+ 2516             >ZEQUAL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1438+ 2516 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1438+ 2516 ~           >
1438+ 2516 ~           >
1438+ 2516             >                endif           ; ok        // for other definitions it "points" the correct handler
1438+ 2516             >                // Use of "; ok" to suppress "warning[fwdref]"
1438+ 2516             >
1438+ 2516             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1439+ 2516              Zero_Equal:
1440+ 2516 E1                           pop     hl
1441+ 2517 7D                           ld      a, l
1442+ 2518 B4                           or      h
1443+ 2519 21 00 00                     ld      hl, FALSE_FLAG
1444+ 251C 20 01                        jr      nz, ZEqual_Skip
1445+ 251E 2B                               dec     hl
1446+ 251F              ZEqual_Skip:
1447+ 251F                              psh1
1447+ 251F E5          >                push    hl
1447+ 2520 DD E9       >                jp      (ix)
1448+ 2522
1449+ 2522              //  ______________________________________________________________________
1450+ 2522              //
1451+ 2522              // not         a1 -- a2
1452+ 2522              // increment by 2 top of stack
1453+ 2522                              New_Def NOT_OP, "NOT", is_code, is_normal
1453+ 2522             >
1453+ 2522             >Dict_Ptr        defl    $
1453+ 2522             >
1453+ 2522             >//              ______________________________________________________________________
1453+ 2522             >//              Heap part
1453+ 2522             >
1453+ 2522             >
1453+ 2522             >                org     (Heap_Ptr & $1FFF) + $E000
1453+ E26F             >
1453+ E26F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1453+ E26F             >Latest_Definition defl  Heap_Ptr
1453+ E26F             >
1453+ E26F             >                // dummy db directives used to calculate length of namec
1453+ E26F 4E 4F 54    >                db      "NOT"
1453+ E272             >len_NFA         defl    $ - temp_NFA
1453+ E272             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1453+ E26F             >
1453+ E26F 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1453+ E270 4E 4F 54    >                db      "NOT"               // name string in 7-bit ascii, but
1453+ E273             >                org     $-1                 // alter last byte of Name just above to set
1453+ E272 D4          >                db      {b $} | END_BIT     // msb as name end
1453+ E273             >
1453+ E273 68 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1453+ E275             >Prev_Ptr        defl    Heap_Ptr
1453+ E275             >
1453+ E275             >mirror_Ptr      defl    $
1453+ E275             >
1453+ E275 24 25       >                dw      Dict_Ptr + 2        // xt
1453+ E277             >Heap_Ptr        defl    $ - $E000           // save current HP
1453+ E277             >
1453+ E277             >Current_HP      defl  $ - $E000             // used to set HP once!
1453+ E277             >
1453+ E277             >//              ______________________________________________________________________
1453+ E277             >//              Dictionary part
1453+ E277             >
1453+ E277             >                org     Dict_Ptr
1453+ 2522             >
1453+ 2522 75 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1453+ 2524             >
1453+ 2524             >NOT_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1453+ 2524 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1453+ 2524 ~           >
1453+ 2524 ~           >
1453+ 2524             >                endif           ; ok        // for other definitions it "points" the correct handler
1453+ 2524             >                // Use of "; ok" to suppress "warning[fwdref]"
1453+ 2524             >
1453+ 2524             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1454+ 2524                          //  Behave  Zero_Equal
1455+ 2524 18 F0                        jr      Zero_Equal
1456+ 2526
1457+ 2526              //  ______________________________________________________________________
1458+ 2526              //
1459+ 2526              // 0<           n -- f
1460+ 2526              // true (non zero) if n is less than zero, false (0) elsewere
1461+ 2526                              New_Def ZLESS, "0<", is_code, is_normal
1461+ 2526             >
1461+ 2526             >Dict_Ptr        defl    $
1461+ 2526             >
1461+ 2526             >//              ______________________________________________________________________
1461+ 2526             >//              Heap part
1461+ 2526             >
1461+ 2526             >
1461+ 2526             >                org     (Heap_Ptr & $1FFF) + $E000
1461+ E277             >
1461+ E277             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1461+ E277             >Latest_Definition defl  Heap_Ptr
1461+ E277             >
1461+ E277             >                // dummy db directives used to calculate length of namec
1461+ E277 30 3C       >                db      "0<"
1461+ E279             >len_NFA         defl    $ - temp_NFA
1461+ E279             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1461+ E277             >
1461+ E277 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1461+ E278 30 3C       >                db      "0<"               // name string in 7-bit ascii, but
1461+ E27A             >                org     $-1                 // alter last byte of Name just above to set
1461+ E279 BC          >                db      {b $} | END_BIT     // msb as name end
1461+ E27A             >
1461+ E27A 6F 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1461+ E27C             >Prev_Ptr        defl    Heap_Ptr
1461+ E27C             >
1461+ E27C             >mirror_Ptr      defl    $
1461+ E27C             >
1461+ E27C 28 25       >                dw      Dict_Ptr + 2        // xt
1461+ E27E             >Heap_Ptr        defl    $ - $E000           // save current HP
1461+ E27E             >
1461+ E27E             >Current_HP      defl  $ - $E000             // used to set HP once!
1461+ E27E             >
1461+ E27E             >//              ______________________________________________________________________
1461+ E27E             >//              Dictionary part
1461+ E27E             >
1461+ E27E             >                org     Dict_Ptr
1461+ 2526             >
1461+ 2526 7C 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1461+ 2528             >
1461+ 2528             >ZLESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1461+ 2528 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1461+ 2528 ~           >
1461+ 2528 ~           >
1461+ 2528             >                endif           ; ok        // for other definitions it "points" the correct handler
1461+ 2528             >                // Use of "; ok" to suppress "warning[fwdref]"
1461+ 2528             >
1461+ 2528             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1462+ 2528 E1                           pop     hl
1463+ 2529 29                           add     hl, hl
1464+ 252A ED 62                        sbc     hl, hl
1465+ 252C                              psh1
1465+ 252C E5          >                push    hl
1465+ 252D DD E9       >                jp      (ix)
1466+ 252F
1467+ 252F              //  ______________________________________________________________________
1468+ 252F              //
1469+ 252F              // 0>           n -- f
1470+ 252F              // true (non zero) if n is less than zero, false (0) elsewere
1471+ 252F                              New_Def ZGREATER, "0>", is_code, is_normal
1471+ 252F             >
1471+ 252F             >Dict_Ptr        defl    $
1471+ 252F             >
1471+ 252F             >//              ______________________________________________________________________
1471+ 252F             >//              Heap part
1471+ 252F             >
1471+ 252F             >
1471+ 252F             >                org     (Heap_Ptr & $1FFF) + $E000
1471+ E27E             >
1471+ E27E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1471+ E27E             >Latest_Definition defl  Heap_Ptr
1471+ E27E             >
1471+ E27E             >                // dummy db directives used to calculate length of namec
1471+ E27E 30 3E       >                db      "0>"
1471+ E280             >len_NFA         defl    $ - temp_NFA
1471+ E280             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1471+ E27E             >
1471+ E27E 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1471+ E27F 30 3E       >                db      "0>"               // name string in 7-bit ascii, but
1471+ E281             >                org     $-1                 // alter last byte of Name just above to set
1471+ E280 BE          >                db      {b $} | END_BIT     // msb as name end
1471+ E281             >
1471+ E281 77 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1471+ E283             >Prev_Ptr        defl    Heap_Ptr
1471+ E283             >
1471+ E283             >mirror_Ptr      defl    $
1471+ E283             >
1471+ E283 31 25       >                dw      Dict_Ptr + 2        // xt
1471+ E285             >Heap_Ptr        defl    $ - $E000           // save current HP
1471+ E285             >
1471+ E285             >Current_HP      defl  $ - $E000             // used to set HP once!
1471+ E285             >
1471+ E285             >//              ______________________________________________________________________
1471+ E285             >//              Dictionary part
1471+ E285             >
1471+ E285             >                org     Dict_Ptr
1471+ 252F             >
1471+ 252F 83 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1471+ 2531             >
1471+ 2531             >ZGREATER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1471+ 2531 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1471+ 2531 ~           >
1471+ 2531 ~           >
1471+ 2531             >                endif           ; ok        // for other definitions it "points" the correct handler
1471+ 2531             >                // Use of "; ok" to suppress "warning[fwdref]"
1471+ 2531             >
1471+ 2531             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1472+ 2531 E1                           pop     hl
1473+ 2532 7D                           ld      a, l
1474+ 2533 B4                           or      h
1475+ 2534 29                           add     hl, hl
1476+ 2535 21 00 00                     ld      hl, FALSE_FLAG
1477+ 2538 38 04                        jr      c, ZGreater_Skip
1478+ 253A A7                               and     a
1479+ 253B 28 01                            jr      z, ZGreater_Skip
1480+ 253D 2B                                   dec     hl
1481+ 253E              ZGreater_Skip:
1482+ 253E                              psh1
1482+ 253E E5          >                push    hl
1482+ 253F DD E9       >                jp      (ix)
1483+ 2541
1484+ 2541              //  ______________________________________________________________________
1485+ 2541              //
1486+ 2541              // +            n1 n2 -- n3
1487+ 2541              // returns the unsigned sum of two top values
1488+ 2541                              New_Def PLUS, "+", is_code, is_normal
1488+ 2541             >
1488+ 2541             >Dict_Ptr        defl    $
1488+ 2541             >
1488+ 2541             >//              ______________________________________________________________________
1488+ 2541             >//              Heap part
1488+ 2541             >
1488+ 2541             >
1488+ 2541             >                org     (Heap_Ptr & $1FFF) + $E000
1488+ E285             >
1488+ E285             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1488+ E285             >Latest_Definition defl  Heap_Ptr
1488+ E285             >
1488+ E285             >                // dummy db directives used to calculate length of namec
1488+ E285 2B          >                db      "+"
1488+ E286             >len_NFA         defl    $ - temp_NFA
1488+ E286             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1488+ E285             >
1488+ E285 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1488+ E286 2B          >                db      "+"               // name string in 7-bit ascii, but
1488+ E287             >                org     $-1                 // alter last byte of Name just above to set
1488+ E286 AB          >                db      {b $} | END_BIT     // msb as name end
1488+ E287             >
1488+ E287 7E 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1488+ E289             >Prev_Ptr        defl    Heap_Ptr
1488+ E289             >
1488+ E289             >mirror_Ptr      defl    $
1488+ E289             >
1488+ E289 43 25       >                dw      Dict_Ptr + 2        // xt
1488+ E28B             >Heap_Ptr        defl    $ - $E000           // save current HP
1488+ E28B             >
1488+ E28B             >Current_HP      defl  $ - $E000             // used to set HP once!
1488+ E28B             >
1488+ E28B             >//              ______________________________________________________________________
1488+ E28B             >//              Dictionary part
1488+ E28B             >
1488+ E28B             >                org     Dict_Ptr
1488+ 2541             >
1488+ 2541 89 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1488+ 2543             >
1488+ 2543             >PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1488+ 2543 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1488+ 2543 ~           >
1488+ 2543 ~           >
1488+ 2543             >                endif           ; ok        // for other definitions it "points" the correct handler
1488+ 2543             >                // Use of "; ok" to suppress "warning[fwdref]"
1488+ 2543             >
1488+ 2543             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1489+ 2543 D9                           exx
1490+ 2544 E1                           pop     hl
1491+ 2545 D1                           pop     de
1492+ 2546 19                           add     hl, de
1493+ 2547 E5                           push    hl
1494+ 2548 D9                           exx
1495+ 2549                              next
1495+ 2549 DD E9       >                jp      (ix)
1496+ 254B
1497+ 254B
1498+ 254B              //  ______________________________________________________________________
1499+ 254B              //
1500+ 254B              // d+           d1 d2 -- d3
1501+ 254B              // returns the unsigned sum of two top double-numbers
1502+ 254B              //      d2  d1
1503+ 254B              //      h l h l
1504+ 254B              // SP   LHEDLHED
1505+ 254B              // SP  +01234567
1506+ 254B                              New_Def DPLUS, "D+", is_code, is_normal
1506+ 254B             >
1506+ 254B             >Dict_Ptr        defl    $
1506+ 254B             >
1506+ 254B             >//              ______________________________________________________________________
1506+ 254B             >//              Heap part
1506+ 254B             >
1506+ 254B             >
1506+ 254B             >                org     (Heap_Ptr & $1FFF) + $E000
1506+ E28B             >
1506+ E28B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1506+ E28B             >Latest_Definition defl  Heap_Ptr
1506+ E28B             >
1506+ E28B             >                // dummy db directives used to calculate length of namec
1506+ E28B 44 2B       >                db      "D+"
1506+ E28D             >len_NFA         defl    $ - temp_NFA
1506+ E28D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1506+ E28B             >
1506+ E28B 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1506+ E28C 44 2B       >                db      "D+"               // name string in 7-bit ascii, but
1506+ E28E             >                org     $-1                 // alter last byte of Name just above to set
1506+ E28D AB          >                db      {b $} | END_BIT     // msb as name end
1506+ E28E             >
1506+ E28E 85 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1506+ E290             >Prev_Ptr        defl    Heap_Ptr
1506+ E290             >
1506+ E290             >mirror_Ptr      defl    $
1506+ E290             >
1506+ E290 4D 25       >                dw      Dict_Ptr + 2        // xt
1506+ E292             >Heap_Ptr        defl    $ - $E000           // save current HP
1506+ E292             >
1506+ E292             >Current_HP      defl  $ - $E000             // used to set HP once!
1506+ E292             >
1506+ E292             >//              ______________________________________________________________________
1506+ E292             >//              Dictionary part
1506+ E292             >
1506+ E292             >                org     Dict_Ptr
1506+ 254B             >
1506+ 254B 90 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1506+ 254D             >
1506+ 254D             >DPLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1506+ 254D ~           >                call    runcode ; ok        // for primitive definitions  actual code
1506+ 254D ~           >
1506+ 254D ~           >
1506+ 254D             >                endif           ; ok        // for other definitions it "points" the correct handler
1506+ 254D             >                // Use of "; ok" to suppress "warning[fwdref]"
1506+ 254D             >
1506+ 254D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1507+ 254D
1508+ 254D D9                           exx
1509+ 254E C1                           pop     bc                  // bc := d2.H
1510+ 254F D1                           pop     de                  // hl := d2.L
1511+ 2550 E1                           pop     hl                  // d1.H
1512+ 2551 E3                           ex      (sp), hl            // d1.L
1513+ 2552 19                           add     hl, de              // hl := d2.L + d1.L
1514+ 2553 E3                           ex      (sp), hl            // d1.H
1515+ 2554 ED 4A                        adc     hl, bc              // d1.H + d2.H
1516+ 2556 E5                           push    hl
1517+ 2557 D9                           exx
1518+ 2558                              next
1518+ 2558 DD E9       >                jp      (ix)
1519+ 255A
1520+ 255A              //  ______________________________________________________________________
1521+ 255A              //
1522+ 255A              // 1+           n1 -- n2
1523+ 255A              // increment by 1 top of stack
1524+ 255A                              New_Def ONE_PLUS, "1+", is_code, is_normal
1524+ 255A             >
1524+ 255A             >Dict_Ptr        defl    $
1524+ 255A             >
1524+ 255A             >//              ______________________________________________________________________
1524+ 255A             >//              Heap part
1524+ 255A             >
1524+ 255A             >
1524+ 255A             >                org     (Heap_Ptr & $1FFF) + $E000
1524+ E292             >
1524+ E292             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1524+ E292             >Latest_Definition defl  Heap_Ptr
1524+ E292             >
1524+ E292             >                // dummy db directives used to calculate length of namec
1524+ E292 31 2B       >                db      "1+"
1524+ E294             >len_NFA         defl    $ - temp_NFA
1524+ E294             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1524+ E292             >
1524+ E292 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1524+ E293 31 2B       >                db      "1+"               // name string in 7-bit ascii, but
1524+ E295             >                org     $-1                 // alter last byte of Name just above to set
1524+ E294 AB          >                db      {b $} | END_BIT     // msb as name end
1524+ E295             >
1524+ E295 8B 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1524+ E297             >Prev_Ptr        defl    Heap_Ptr
1524+ E297             >
1524+ E297             >mirror_Ptr      defl    $
1524+ E297             >
1524+ E297 5C 25       >                dw      Dict_Ptr + 2        // xt
1524+ E299             >Heap_Ptr        defl    $ - $E000           // save current HP
1524+ E299             >
1524+ E299             >Current_HP      defl  $ - $E000             // used to set HP once!
1524+ E299             >
1524+ E299             >//              ______________________________________________________________________
1524+ E299             >//              Dictionary part
1524+ E299             >
1524+ E299             >                org     Dict_Ptr
1524+ 255A             >
1524+ 255A 97 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1524+ 255C             >
1524+ 255C             >ONE_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1524+ 255C ~           >                call    runcode ; ok        // for primitive definitions  actual code
1524+ 255C ~           >
1524+ 255C ~           >
1524+ 255C             >                endif           ; ok        // for other definitions it "points" the correct handler
1524+ 255C             >                // Use of "; ok" to suppress "warning[fwdref]"
1524+ 255C             >
1524+ 255C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1525+ 255C E1                           pop     hl
1526+ 255D 23                           inc     hl
1527+ 255E
1528+ 255E                              psh1
1528+ 255E E5          >                push    hl
1528+ 255F DD E9       >                jp      (ix)
1529+ 2561
1530+ 2561              //  ______________________________________________________________________
1531+ 2561              //
1532+ 2561              // 1-           n1 -- n2
1533+ 2561              // decrement by 1 top of stack
1534+ 2561                              New_Def ONE_SUBTRACT, "1-", is_code, is_normal
1534+ 2561             >
1534+ 2561             >Dict_Ptr        defl    $
1534+ 2561             >
1534+ 2561             >//              ______________________________________________________________________
1534+ 2561             >//              Heap part
1534+ 2561             >
1534+ 2561             >
1534+ 2561             >                org     (Heap_Ptr & $1FFF) + $E000
1534+ E299             >
1534+ E299             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1534+ E299             >Latest_Definition defl  Heap_Ptr
1534+ E299             >
1534+ E299             >                // dummy db directives used to calculate length of namec
1534+ E299 31 2D       >                db      "1-"
1534+ E29B             >len_NFA         defl    $ - temp_NFA
1534+ E29B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1534+ E299             >
1534+ E299 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1534+ E29A 31 2D       >                db      "1-"               // name string in 7-bit ascii, but
1534+ E29C             >                org     $-1                 // alter last byte of Name just above to set
1534+ E29B AD          >                db      {b $} | END_BIT     // msb as name end
1534+ E29C             >
1534+ E29C 92 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1534+ E29E             >Prev_Ptr        defl    Heap_Ptr
1534+ E29E             >
1534+ E29E             >mirror_Ptr      defl    $
1534+ E29E             >
1534+ E29E 63 25       >                dw      Dict_Ptr + 2        // xt
1534+ E2A0             >Heap_Ptr        defl    $ - $E000           // save current HP
1534+ E2A0             >
1534+ E2A0             >Current_HP      defl  $ - $E000             // used to set HP once!
1534+ E2A0             >
1534+ E2A0             >//              ______________________________________________________________________
1534+ E2A0             >//              Dictionary part
1534+ E2A0             >
1534+ E2A0             >                org     Dict_Ptr
1534+ 2561             >
1534+ 2561 9E 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1534+ 2563             >
1534+ 2563             >ONE_SUBTRACT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1534+ 2563 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1534+ 2563 ~           >
1534+ 2563 ~           >
1534+ 2563             >                endif           ; ok        // for other definitions it "points" the correct handler
1534+ 2563             >                // Use of "; ok" to suppress "warning[fwdref]"
1534+ 2563             >
1534+ 2563             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1535+ 2563 E1                           pop     hl
1536+ 2564 2B                           dec     hl
1537+ 2565
1538+ 2565                              psh1
1538+ 2565 E5          >                push    hl
1538+ 2566 DD E9       >                jp      (ix)
1539+ 2568
1540+ 2568              //  ______________________________________________________________________
1541+ 2568              //
1542+ 2568              // 2+           n1 -- n2
1543+ 2568              // increment by 2 top of stack
1544+ 2568                              New_Def TWO_PLUS, "2+", is_code, is_normal
1544+ 2568             >
1544+ 2568             >Dict_Ptr        defl    $
1544+ 2568             >
1544+ 2568             >//              ______________________________________________________________________
1544+ 2568             >//              Heap part
1544+ 2568             >
1544+ 2568             >
1544+ 2568             >                org     (Heap_Ptr & $1FFF) + $E000
1544+ E2A0             >
1544+ E2A0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1544+ E2A0             >Latest_Definition defl  Heap_Ptr
1544+ E2A0             >
1544+ E2A0             >                // dummy db directives used to calculate length of namec
1544+ E2A0 32 2B       >                db      "2+"
1544+ E2A2             >len_NFA         defl    $ - temp_NFA
1544+ E2A2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1544+ E2A0             >
1544+ E2A0 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1544+ E2A1 32 2B       >                db      "2+"               // name string in 7-bit ascii, but
1544+ E2A3             >                org     $-1                 // alter last byte of Name just above to set
1544+ E2A2 AB          >                db      {b $} | END_BIT     // msb as name end
1544+ E2A3             >
1544+ E2A3 99 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1544+ E2A5             >Prev_Ptr        defl    Heap_Ptr
1544+ E2A5             >
1544+ E2A5             >mirror_Ptr      defl    $
1544+ E2A5             >
1544+ E2A5 6A 25       >                dw      Dict_Ptr + 2        // xt
1544+ E2A7             >Heap_Ptr        defl    $ - $E000           // save current HP
1544+ E2A7             >
1544+ E2A7             >Current_HP      defl  $ - $E000             // used to set HP once!
1544+ E2A7             >
1544+ E2A7             >//              ______________________________________________________________________
1544+ E2A7             >//              Dictionary part
1544+ E2A7             >
1544+ E2A7             >                org     Dict_Ptr
1544+ 2568             >
1544+ 2568 A5 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1544+ 256A             >
1544+ 256A             >TWO_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1544+ 256A ~           >                call    runcode ; ok        // for primitive definitions  actual code
1544+ 256A ~           >
1544+ 256A ~           >
1544+ 256A             >                endif           ; ok        // for other definitions it "points" the correct handler
1544+ 256A             >                // Use of "; ok" to suppress "warning[fwdref]"
1544+ 256A             >
1544+ 256A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1545+ 256A              Two_Plus:
1546+ 256A E1                           pop     hl
1547+ 256B 23                           inc     hl
1548+ 256C 23                           inc     hl
1549+ 256D
1550+ 256D                              psh1
1550+ 256D E5          >                push    hl
1550+ 256E DD E9       >                jp      (ix)
1551+ 2570
1552+ 2570              //  ______________________________________________________________________
1553+ 2570              //
1554+ 2570              // cell+        a1 -- a2
1555+ 2570              // increment by 2 top of stack
1556+ 2570                              New_Def CELL_PLUS, "CELL+", is_code, is_normal
1556+ 2570             >
1556+ 2570             >Dict_Ptr        defl    $
1556+ 2570             >
1556+ 2570             >//              ______________________________________________________________________
1556+ 2570             >//              Heap part
1556+ 2570             >
1556+ 2570             >
1556+ 2570             >                org     (Heap_Ptr & $1FFF) + $E000
1556+ E2A7             >
1556+ E2A7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1556+ E2A7             >Latest_Definition defl  Heap_Ptr
1556+ E2A7             >
1556+ E2A7             >                // dummy db directives used to calculate length of namec
1556+ E2A7 43 45 4C 4C >                db      "CELL+"
1556+ E2AB 2B          >
1556+ E2AC             >len_NFA         defl    $ - temp_NFA
1556+ E2AC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1556+ E2A7             >
1556+ E2A7 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1556+ E2A8 43 45 4C 4C >                db      "CELL+"               // name string in 7-bit ascii, but
1556+ E2AC 2B          >
1556+ E2AD             >                org     $-1                 // alter last byte of Name just above to set
1556+ E2AC AB          >                db      {b $} | END_BIT     // msb as name end
1556+ E2AD             >
1556+ E2AD A0 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1556+ E2AF             >Prev_Ptr        defl    Heap_Ptr
1556+ E2AF             >
1556+ E2AF             >mirror_Ptr      defl    $
1556+ E2AF             >
1556+ E2AF 72 25       >                dw      Dict_Ptr + 2        // xt
1556+ E2B1             >Heap_Ptr        defl    $ - $E000           // save current HP
1556+ E2B1             >
1556+ E2B1             >Current_HP      defl  $ - $E000             // used to set HP once!
1556+ E2B1             >
1556+ E2B1             >//              ______________________________________________________________________
1556+ E2B1             >//              Dictionary part
1556+ E2B1             >
1556+ E2B1             >                org     Dict_Ptr
1556+ 2570             >
1556+ 2570 AF 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1556+ 2572             >
1556+ 2572             >CELL_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1556+ 2572 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1556+ 2572 ~           >
1556+ 2572 ~           >
1556+ 2572             >                endif           ; ok        // for other definitions it "points" the correct handler
1556+ 2572             >                // Use of "; ok" to suppress "warning[fwdref]"
1556+ 2572             >
1556+ 2572             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1557+ 2572 18 F6                        jr      Two_Plus
1558+ 2574
1559+ 2574              //  ______________________________________________________________________
1560+ 2574              //
1561+ 2574              // align        a1 -- a2
1562+ 2574              // align memory : not used
1563+ 2574              //              New_Def ALIGN_ADDR, "ALIGN", is_code, is_normal
1564+ 2574              //            next
1565+ 2574
1566+ 2574              //  ______________________________________________________________________
1567+ 2574              //
1568+ 2574              // cell-        a1 -- a2
1569+ 2574              // decrement by 2 top of stack
1570+ 2574                              New_Def CELL_MINUS, "CELL-", is_code, is_normal
1570+ 2574             >
1570+ 2574             >Dict_Ptr        defl    $
1570+ 2574             >
1570+ 2574             >//              ______________________________________________________________________
1570+ 2574             >//              Heap part
1570+ 2574             >
1570+ 2574             >
1570+ 2574             >                org     (Heap_Ptr & $1FFF) + $E000
1570+ E2B1             >
1570+ E2B1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1570+ E2B1             >Latest_Definition defl  Heap_Ptr
1570+ E2B1             >
1570+ E2B1             >                // dummy db directives used to calculate length of namec
1570+ E2B1 43 45 4C 4C >                db      "CELL-"
1570+ E2B5 2D          >
1570+ E2B6             >len_NFA         defl    $ - temp_NFA
1570+ E2B6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1570+ E2B1             >
1570+ E2B1 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1570+ E2B2 43 45 4C 4C >                db      "CELL-"               // name string in 7-bit ascii, but
1570+ E2B6 2D          >
1570+ E2B7             >                org     $-1                 // alter last byte of Name just above to set
1570+ E2B6 AD          >                db      {b $} | END_BIT     // msb as name end
1570+ E2B7             >
1570+ E2B7 A7 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1570+ E2B9             >Prev_Ptr        defl    Heap_Ptr
1570+ E2B9             >
1570+ E2B9             >mirror_Ptr      defl    $
1570+ E2B9             >
1570+ E2B9 76 25       >                dw      Dict_Ptr + 2        // xt
1570+ E2BB             >Heap_Ptr        defl    $ - $E000           // save current HP
1570+ E2BB             >
1570+ E2BB             >Current_HP      defl  $ - $E000             // used to set HP once!
1570+ E2BB             >
1570+ E2BB             >//              ______________________________________________________________________
1570+ E2BB             >//              Dictionary part
1570+ E2BB             >
1570+ E2BB             >                org     Dict_Ptr
1570+ 2574             >
1570+ 2574 B9 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1570+ 2576             >
1570+ 2576             >CELL_MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1570+ 2576 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1570+ 2576 ~           >
1570+ 2576 ~           >
1570+ 2576             >                endif           ; ok        // for other definitions it "points" the correct handler
1570+ 2576             >                // Use of "; ok" to suppress "warning[fwdref]"
1570+ 2576             >
1570+ 2576             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1571+ 2576              CellMinus:
1572+ 2576 E1                           pop     hl
1573+ 2577 2B                           dec     hl
1574+ 2578 2B                           dec     hl
1575+ 2579
1576+ 2579                              psh1
1576+ 2579 E5          >                push    hl
1576+ 257A DD E9       >                jp      (ix)
1577+ 257C
1578+ 257C              //  ______________________________________________________________________
1579+ 257C              //
1580+ 257C              // 2-           a1 -- a2
1581+ 257C              // decrement by 2 top of stack
1582+ 257C                              New_Def TWO_MINUS, "2-", is_code, is_normal
1582+ 257C             >
1582+ 257C             >Dict_Ptr        defl    $
1582+ 257C             >
1582+ 257C             >//              ______________________________________________________________________
1582+ 257C             >//              Heap part
1582+ 257C             >
1582+ 257C             >
1582+ 257C             >                org     (Heap_Ptr & $1FFF) + $E000
1582+ E2BB             >
1582+ E2BB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1582+ E2BB             >Latest_Definition defl  Heap_Ptr
1582+ E2BB             >
1582+ E2BB             >                // dummy db directives used to calculate length of namec
1582+ E2BB 32 2D       >                db      "2-"
1582+ E2BD             >len_NFA         defl    $ - temp_NFA
1582+ E2BD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1582+ E2BB             >
1582+ E2BB 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1582+ E2BC 32 2D       >                db      "2-"               // name string in 7-bit ascii, but
1582+ E2BE             >                org     $-1                 // alter last byte of Name just above to set
1582+ E2BD AD          >                db      {b $} | END_BIT     // msb as name end
1582+ E2BE             >
1582+ E2BE B1 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1582+ E2C0             >Prev_Ptr        defl    Heap_Ptr
1582+ E2C0             >
1582+ E2C0             >mirror_Ptr      defl    $
1582+ E2C0             >
1582+ E2C0 7E 25       >                dw      Dict_Ptr + 2        // xt
1582+ E2C2             >Heap_Ptr        defl    $ - $E000           // save current HP
1582+ E2C2             >
1582+ E2C2             >Current_HP      defl  $ - $E000             // used to set HP once!
1582+ E2C2             >
1582+ E2C2             >//              ______________________________________________________________________
1582+ E2C2             >//              Dictionary part
1582+ E2C2             >
1582+ E2C2             >                org     Dict_Ptr
1582+ 257C             >
1582+ 257C C0 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1582+ 257E             >
1582+ 257E             >TWO_MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1582+ 257E ~           >                call    runcode ; ok        // for primitive definitions  actual code
1582+ 257E ~           >
1582+ 257E ~           >
1582+ 257E             >                endif           ; ok        // for other definitions it "points" the correct handler
1582+ 257E             >                // Use of "; ok" to suppress "warning[fwdref]"
1582+ 257E             >
1582+ 257E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1583+ 257E C3 76 25                     jp      CellMinus
1584+ 2581
1585+ 2581              //  ______________________________________________________________________
1586+ 2581              //
1587+ 2581              // negate       n1 -- n2
1588+ 2581              // change the sign of number
1589+ 2581                              New_Def MINUS, "NEGATE", is_code, is_normal
1589+ 2581             >
1589+ 2581             >Dict_Ptr        defl    $
1589+ 2581             >
1589+ 2581             >//              ______________________________________________________________________
1589+ 2581             >//              Heap part
1589+ 2581             >
1589+ 2581             >
1589+ 2581             >                org     (Heap_Ptr & $1FFF) + $E000
1589+ E2C2             >
1589+ E2C2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1589+ E2C2             >Latest_Definition defl  Heap_Ptr
1589+ E2C2             >
1589+ E2C2             >                // dummy db directives used to calculate length of namec
1589+ E2C2 4E 45 47 41 >                db      "NEGATE"
1589+ E2C6 54 45       >
1589+ E2C8             >len_NFA         defl    $ - temp_NFA
1589+ E2C8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1589+ E2C2             >
1589+ E2C2 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1589+ E2C3 4E 45 47 41 >                db      "NEGATE"               // name string in 7-bit ascii, but
1589+ E2C7 54 45       >
1589+ E2C9             >                org     $-1                 // alter last byte of Name just above to set
1589+ E2C8 C5          >                db      {b $} | END_BIT     // msb as name end
1589+ E2C9             >
1589+ E2C9 BB 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1589+ E2CB             >Prev_Ptr        defl    Heap_Ptr
1589+ E2CB             >
1589+ E2CB             >mirror_Ptr      defl    $
1589+ E2CB             >
1589+ E2CB 83 25       >                dw      Dict_Ptr + 2        // xt
1589+ E2CD             >Heap_Ptr        defl    $ - $E000           // save current HP
1589+ E2CD             >
1589+ E2CD             >Current_HP      defl  $ - $E000             // used to set HP once!
1589+ E2CD             >
1589+ E2CD             >//              ______________________________________________________________________
1589+ E2CD             >//              Dictionary part
1589+ E2CD             >
1589+ E2CD             >                org     Dict_Ptr
1589+ 2581             >
1589+ 2581 CB 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1589+ 2583             >
1589+ 2583             >MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1589+ 2583 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1589+ 2583 ~           >
1589+ 2583 ~           >
1589+ 2583             >                endif           ; ok        // for other definitions it "points" the correct handler
1589+ 2583             >                // Use of "; ok" to suppress "warning[fwdref]"
1589+ 2583             >
1589+ 2583             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1590+ 2583 D9                           exx
1591+ 2584 D1                           pop     de
1592+ 2585 AF                           xor     a
1593+ 2586 67                           ld      h, a
1594+ 2587 6F                           ld      l, a
1595+ 2588 ED 52                        sbc     hl, de
1596+ 258A E5                           push    hl
1597+ 258B D9                           exx
1598+ 258C                              next
1598+ 258C DD E9       >                jp      (ix)
1599+ 258E
1600+ 258E              //  ______________________________________________________________________
1601+ 258E              //
1602+ 258E              // dnegate      d1 -- d2
1603+ 258E              // change the sign of a double number
1604+ 258E                              New_Def DMINUS, "DNEGATE", is_code, is_normal
1604+ 258E             >
1604+ 258E             >Dict_Ptr        defl    $
1604+ 258E             >
1604+ 258E             >//              ______________________________________________________________________
1604+ 258E             >//              Heap part
1604+ 258E             >
1604+ 258E             >
1604+ 258E             >                org     (Heap_Ptr & $1FFF) + $E000
1604+ E2CD             >
1604+ E2CD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1604+ E2CD             >Latest_Definition defl  Heap_Ptr
1604+ E2CD             >
1604+ E2CD             >                // dummy db directives used to calculate length of namec
1604+ E2CD 44 4E 45 47 >                db      "DNEGATE"
1604+ E2D1 41 54 45    >
1604+ E2D4             >len_NFA         defl    $ - temp_NFA
1604+ E2D4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1604+ E2CD             >
1604+ E2CD 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1604+ E2CE 44 4E 45 47 >                db      "DNEGATE"               // name string in 7-bit ascii, but
1604+ E2D2 41 54 45    >
1604+ E2D5             >                org     $-1                 // alter last byte of Name just above to set
1604+ E2D4 C5          >                db      {b $} | END_BIT     // msb as name end
1604+ E2D5             >
1604+ E2D5 C2 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1604+ E2D7             >Prev_Ptr        defl    Heap_Ptr
1604+ E2D7             >
1604+ E2D7             >mirror_Ptr      defl    $
1604+ E2D7             >
1604+ E2D7 90 25       >                dw      Dict_Ptr + 2        // xt
1604+ E2D9             >Heap_Ptr        defl    $ - $E000           // save current HP
1604+ E2D9             >
1604+ E2D9             >Current_HP      defl  $ - $E000             // used to set HP once!
1604+ E2D9             >
1604+ E2D9             >//              ______________________________________________________________________
1604+ E2D9             >//              Dictionary part
1604+ E2D9             >
1604+ E2D9             >                org     Dict_Ptr
1604+ 258E             >
1604+ 258E D7 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1604+ 2590             >
1604+ 2590             >DMINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1604+ 2590 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1604+ 2590 ~           >
1604+ 2590 ~           >
1604+ 2590             >                endif           ; ok        // for other definitions it "points" the correct handler
1604+ 2590             >                // Use of "; ok" to suppress "warning[fwdref]"
1604+ 2590             >
1604+ 2590             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1605+ 2590 D9                           exx
1606+ 2591 C1                           pop     bc                  // d1.H
1607+ 2592 D1                           pop     de                  // d1.L
1608+ 2593 AF                           xor     a
1609+ 2594 67                           ld      h, a
1610+ 2595 6F                           ld      l, a
1611+ 2596 ED 52                        sbc     hl, de              // subtact from zero
1612+ 2598 E5                           push    hl                  // > d2-L
1613+ 2599 67                           ld      h, a
1614+ 259A 6F                           ld      l, a
1615+ 259B ED 42                        sbc     hl, bc              // subtract from zero with carry
1616+ 259D                                                          // > d2-H
1617+ 259D E5                           push    hl
1618+ 259E D9                           exx
1619+ 259F                              next
1619+ 259F DD E9       >                jp      (ix)
1620+ 25A1
1621+ 25A1              //  ______________________________________________________________________
1622+ 25A1              //
1623+ 25A1              // over         n1 n2 -- n1 n2 n1
1624+ 25A1              // copy the second value of stack and put it on top.
1625+ 25A1                              New_Def OVER, "OVER", is_code, is_normal
1625+ 25A1             >
1625+ 25A1             >Dict_Ptr        defl    $
1625+ 25A1             >
1625+ 25A1             >//              ______________________________________________________________________
1625+ 25A1             >//              Heap part
1625+ 25A1             >
1625+ 25A1             >
1625+ 25A1             >                org     (Heap_Ptr & $1FFF) + $E000
1625+ E2D9             >
1625+ E2D9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1625+ E2D9             >Latest_Definition defl  Heap_Ptr
1625+ E2D9             >
1625+ E2D9             >                // dummy db directives used to calculate length of namec
1625+ E2D9 4F 56 45 52 >                db      "OVER"
1625+ E2DD             >len_NFA         defl    $ - temp_NFA
1625+ E2DD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1625+ E2D9             >
1625+ E2D9 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1625+ E2DA 4F 56 45 52 >                db      "OVER"               // name string in 7-bit ascii, but
1625+ E2DE             >                org     $-1                 // alter last byte of Name just above to set
1625+ E2DD D2          >                db      {b $} | END_BIT     // msb as name end
1625+ E2DE             >
1625+ E2DE CD 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1625+ E2E0             >Prev_Ptr        defl    Heap_Ptr
1625+ E2E0             >
1625+ E2E0             >mirror_Ptr      defl    $
1625+ E2E0             >
1625+ E2E0 A3 25       >                dw      Dict_Ptr + 2        // xt
1625+ E2E2             >Heap_Ptr        defl    $ - $E000           // save current HP
1625+ E2E2             >
1625+ E2E2             >Current_HP      defl  $ - $E000             // used to set HP once!
1625+ E2E2             >
1625+ E2E2             >//              ______________________________________________________________________
1625+ E2E2             >//              Dictionary part
1625+ E2E2             >
1625+ E2E2             >                org     Dict_Ptr
1625+ 25A1             >
1625+ 25A1 E0 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1625+ 25A3             >
1625+ 25A3             >OVER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1625+ 25A3 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1625+ 25A3 ~           >
1625+ 25A3 ~           >
1625+ 25A3             >                endif           ; ok        // for other definitions it "points" the correct handler
1625+ 25A3             >                // Use of "; ok" to suppress "warning[fwdref]"
1625+ 25A3             >
1625+ 25A3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1626+ 25A3                              // exx     // we can use af instead OPTIMIZATION possible
1627+ 25A3 F1                           pop     af                  //   n2
1628+ 25A4 E1                           pop     hl                  // < n1
1629+ 25A5 E5                           push    hl                  // > n1
1630+ 25A6 F5                           push    af                  // > n2
1631+ 25A7 E5                           push    hl                  // > n1
1632+ 25A8                              // exx
1633+ 25A8                              next
1633+ 25A8 DD E9       >                jp      (ix)
1634+ 25AA
1635+ 25AA              //  ______________________________________________________________________
1636+ 25AA              //
1637+ 25AA              // drop         n1 --
1638+ 25AA              // drops the top of stack
1639+ 25AA                              New_Def DROP, "DROP", is_code, is_normal
1639+ 25AA             >
1639+ 25AA             >Dict_Ptr        defl    $
1639+ 25AA             >
1639+ 25AA             >//              ______________________________________________________________________
1639+ 25AA             >//              Heap part
1639+ 25AA             >
1639+ 25AA             >
1639+ 25AA             >                org     (Heap_Ptr & $1FFF) + $E000
1639+ E2E2             >
1639+ E2E2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1639+ E2E2             >Latest_Definition defl  Heap_Ptr
1639+ E2E2             >
1639+ E2E2             >                // dummy db directives used to calculate length of namec
1639+ E2E2 44 52 4F 50 >                db      "DROP"
1639+ E2E6             >len_NFA         defl    $ - temp_NFA
1639+ E2E6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1639+ E2E2             >
1639+ E2E2 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1639+ E2E3 44 52 4F 50 >                db      "DROP"               // name string in 7-bit ascii, but
1639+ E2E7             >                org     $-1                 // alter last byte of Name just above to set
1639+ E2E6 D0          >                db      {b $} | END_BIT     // msb as name end
1639+ E2E7             >
1639+ E2E7 D9 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1639+ E2E9             >Prev_Ptr        defl    Heap_Ptr
1639+ E2E9             >
1639+ E2E9             >mirror_Ptr      defl    $
1639+ E2E9             >
1639+ E2E9 AC 25       >                dw      Dict_Ptr + 2        // xt
1639+ E2EB             >Heap_Ptr        defl    $ - $E000           // save current HP
1639+ E2EB             >
1639+ E2EB             >Current_HP      defl  $ - $E000             // used to set HP once!
1639+ E2EB             >
1639+ E2EB             >//              ______________________________________________________________________
1639+ E2EB             >//              Dictionary part
1639+ E2EB             >
1639+ E2EB             >                org     Dict_Ptr
1639+ 25AA             >
1639+ 25AA E9 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1639+ 25AC             >
1639+ 25AC             >DROP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1639+ 25AC ~           >                call    runcode ; ok        // for primitive definitions  actual code
1639+ 25AC ~           >
1639+ 25AC ~           >
1639+ 25AC             >                endif           ; ok        // for other definitions it "points" the correct handler
1639+ 25AC             >                // Use of "; ok" to suppress "warning[fwdref]"
1639+ 25AC             >
1639+ 25AC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1640+ 25AC E1                           pop     hl                  // < n1 and discard previous TOS
1641+ 25AD                              next
1641+ 25AD DD E9       >                jp      (ix)
1642+ 25AF
1643+ 25AF              //  ______________________________________________________________________
1644+ 25AF              //
1645+ 25AF              // nip          n1 n2 -- n2
1646+ 25AF              // drops the second elemento on the stack
1647+ 25AF                              New_Def NIP, "NIP", is_code, is_normal
1647+ 25AF             >
1647+ 25AF             >Dict_Ptr        defl    $
1647+ 25AF             >
1647+ 25AF             >//              ______________________________________________________________________
1647+ 25AF             >//              Heap part
1647+ 25AF             >
1647+ 25AF             >
1647+ 25AF             >                org     (Heap_Ptr & $1FFF) + $E000
1647+ E2EB             >
1647+ E2EB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1647+ E2EB             >Latest_Definition defl  Heap_Ptr
1647+ E2EB             >
1647+ E2EB             >                // dummy db directives used to calculate length of namec
1647+ E2EB 4E 49 50    >                db      "NIP"
1647+ E2EE             >len_NFA         defl    $ - temp_NFA
1647+ E2EE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1647+ E2EB             >
1647+ E2EB 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1647+ E2EC 4E 49 50    >                db      "NIP"               // name string in 7-bit ascii, but
1647+ E2EF             >                org     $-1                 // alter last byte of Name just above to set
1647+ E2EE D0          >                db      {b $} | END_BIT     // msb as name end
1647+ E2EF             >
1647+ E2EF E2 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1647+ E2F1             >Prev_Ptr        defl    Heap_Ptr
1647+ E2F1             >
1647+ E2F1             >mirror_Ptr      defl    $
1647+ E2F1             >
1647+ E2F1 B1 25       >                dw      Dict_Ptr + 2        // xt
1647+ E2F3             >Heap_Ptr        defl    $ - $E000           // save current HP
1647+ E2F3             >
1647+ E2F3             >Current_HP      defl  $ - $E000             // used to set HP once!
1647+ E2F3             >
1647+ E2F3             >//              ______________________________________________________________________
1647+ E2F3             >//              Dictionary part
1647+ E2F3             >
1647+ E2F3             >                org     Dict_Ptr
1647+ 25AF             >
1647+ 25AF F1 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1647+ 25B1             >
1647+ 25B1             >NIP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1647+ 25B1 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1647+ 25B1 ~           >
1647+ 25B1 ~           >
1647+ 25B1             >                endif           ; ok        // for other definitions it "points" the correct handler
1647+ 25B1             >                // Use of "; ok" to suppress "warning[fwdref]"
1647+ 25B1             >
1647+ 25B1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1648+ 25B1
1649+ 25B1 E1                           pop     hl                  // < n1 discarded
1650+ 25B2 E3                           ex      (sp), hl
1651+ 25B3                              next
1651+ 25B3 DD E9       >                jp      (ix)
1652+ 25B5
1653+ 25B5              //  ______________________________________________________________________
1654+ 25B5              //
1655+ 25B5              // tuck         n1 n2 -- n2 n1 n2
1656+ 25B5              // copy the top element after the second.
1657+ 25B5                              New_Def TUCK, "TUCK", is_code, is_normal
1657+ 25B5             >
1657+ 25B5             >Dict_Ptr        defl    $
1657+ 25B5             >
1657+ 25B5             >//              ______________________________________________________________________
1657+ 25B5             >//              Heap part
1657+ 25B5             >
1657+ 25B5             >
1657+ 25B5             >                org     (Heap_Ptr & $1FFF) + $E000
1657+ E2F3             >
1657+ E2F3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1657+ E2F3             >Latest_Definition defl  Heap_Ptr
1657+ E2F3             >
1657+ E2F3             >                // dummy db directives used to calculate length of namec
1657+ E2F3 54 55 43 4B >                db      "TUCK"
1657+ E2F7             >len_NFA         defl    $ - temp_NFA
1657+ E2F7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1657+ E2F3             >
1657+ E2F3 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1657+ E2F4 54 55 43 4B >                db      "TUCK"               // name string in 7-bit ascii, but
1657+ E2F8             >                org     $-1                 // alter last byte of Name just above to set
1657+ E2F7 CB          >                db      {b $} | END_BIT     // msb as name end
1657+ E2F8             >
1657+ E2F8 EB 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1657+ E2FA             >Prev_Ptr        defl    Heap_Ptr
1657+ E2FA             >
1657+ E2FA             >mirror_Ptr      defl    $
1657+ E2FA             >
1657+ E2FA B7 25       >                dw      Dict_Ptr + 2        // xt
1657+ E2FC             >Heap_Ptr        defl    $ - $E000           // save current HP
1657+ E2FC             >
1657+ E2FC             >Current_HP      defl  $ - $E000             // used to set HP once!
1657+ E2FC             >
1657+ E2FC             >//              ______________________________________________________________________
1657+ E2FC             >//              Dictionary part
1657+ E2FC             >
1657+ E2FC             >                org     Dict_Ptr
1657+ 25B5             >
1657+ 25B5 FA 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1657+ 25B7             >
1657+ 25B7             >TUCK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1657+ 25B7 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1657+ 25B7 ~           >
1657+ 25B7 ~           >
1657+ 25B7             >                endif           ; ok        // for other definitions it "points" the correct handler
1657+ 25B7             >                // Use of "; ok" to suppress "warning[fwdref]"
1657+ 25B7             >
1657+ 25B7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1658+ 25B7 E1                           pop     hl
1659+ 25B8 F1                           pop     af                  // < n1
1660+ 25B9 E5                           push    hl                  // > n2  and TOS
1661+ 25BA F5                           push    af                  // > n1
1662+ 25BB E5                           push    hl
1663+ 25BC                              next
1663+ 25BC DD E9       >                jp      (ix)
1664+ 25BE
1665+ 25BE              //  ______________________________________________________________________
1666+ 25BE              //
1667+ 25BE              // swap         n1 n2 -- n2 n1
1668+ 25BE              // swaps the two values on top of stack
1669+ 25BE                              New_Def SWAP, "SWAP", is_code, is_normal
1669+ 25BE             >
1669+ 25BE             >Dict_Ptr        defl    $
1669+ 25BE             >
1669+ 25BE             >//              ______________________________________________________________________
1669+ 25BE             >//              Heap part
1669+ 25BE             >
1669+ 25BE             >
1669+ 25BE             >                org     (Heap_Ptr & $1FFF) + $E000
1669+ E2FC             >
1669+ E2FC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1669+ E2FC             >Latest_Definition defl  Heap_Ptr
1669+ E2FC             >
1669+ E2FC             >                // dummy db directives used to calculate length of namec
1669+ E2FC 53 57 41 50 >                db      "SWAP"
1669+ E300             >len_NFA         defl    $ - temp_NFA
1669+ E300             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1669+ E2FC             >
1669+ E2FC 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1669+ E2FD 53 57 41 50 >                db      "SWAP"               // name string in 7-bit ascii, but
1669+ E301             >                org     $-1                 // alter last byte of Name just above to set
1669+ E300 D0          >                db      {b $} | END_BIT     // msb as name end
1669+ E301             >
1669+ E301 F3 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1669+ E303             >Prev_Ptr        defl    Heap_Ptr
1669+ E303             >
1669+ E303             >mirror_Ptr      defl    $
1669+ E303             >
1669+ E303 C0 25       >                dw      Dict_Ptr + 2        // xt
1669+ E305             >Heap_Ptr        defl    $ - $E000           // save current HP
1669+ E305             >
1669+ E305             >Current_HP      defl  $ - $E000             // used to set HP once!
1669+ E305             >
1669+ E305             >//              ______________________________________________________________________
1669+ E305             >//              Dictionary part
1669+ E305             >
1669+ E305             >                org     Dict_Ptr
1669+ 25BE             >
1669+ 25BE 03 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1669+ 25C0             >
1669+ 25C0             >SWAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1669+ 25C0 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1669+ 25C0 ~           >
1669+ 25C0 ~           >
1669+ 25C0             >                endif           ; ok        // for other definitions it "points" the correct handler
1669+ 25C0             >                // Use of "; ok" to suppress "warning[fwdref]"
1669+ 25C0             >
1669+ 25C0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1670+ 25C0 E1                           pop     hl                  // < n1
1671+ 25C1 E3                           ex      (sp),hl             // > n2
1672+ 25C2 E5                           push    hl                  // copy n1 to TOS
1673+ 25C3                              next
1673+ 25C3 DD E9       >                jp      (ix)
1674+ 25C5
1675+ 25C5              //  ______________________________________________________________________
1676+ 25C5              //
1677+ 25C5              // dup         n -- n n
1678+ 25C5              // duplicates the top value of stack
1679+ 25C5                              New_Def DUP, "DUP", is_code, is_normal
1679+ 25C5             >
1679+ 25C5             >Dict_Ptr        defl    $
1679+ 25C5             >
1679+ 25C5             >//              ______________________________________________________________________
1679+ 25C5             >//              Heap part
1679+ 25C5             >
1679+ 25C5             >
1679+ 25C5             >                org     (Heap_Ptr & $1FFF) + $E000
1679+ E305             >
1679+ E305             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1679+ E305             >Latest_Definition defl  Heap_Ptr
1679+ E305             >
1679+ E305             >                // dummy db directives used to calculate length of namec
1679+ E305 44 55 50    >                db      "DUP"
1679+ E308             >len_NFA         defl    $ - temp_NFA
1679+ E308             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1679+ E305             >
1679+ E305 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1679+ E306 44 55 50    >                db      "DUP"               // name string in 7-bit ascii, but
1679+ E309             >                org     $-1                 // alter last byte of Name just above to set
1679+ E308 D0          >                db      {b $} | END_BIT     // msb as name end
1679+ E309             >
1679+ E309 FC 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1679+ E30B             >Prev_Ptr        defl    Heap_Ptr
1679+ E30B             >
1679+ E30B             >mirror_Ptr      defl    $
1679+ E30B             >
1679+ E30B C7 25       >                dw      Dict_Ptr + 2        // xt
1679+ E30D             >Heap_Ptr        defl    $ - $E000           // save current HP
1679+ E30D             >
1679+ E30D             >Current_HP      defl  $ - $E000             // used to set HP once!
1679+ E30D             >
1679+ E30D             >//              ______________________________________________________________________
1679+ E30D             >//              Dictionary part
1679+ E30D             >
1679+ E30D             >                org     Dict_Ptr
1679+ 25C5             >
1679+ 25C5 0B 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1679+ 25C7             >
1679+ 25C7             >DUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1679+ 25C7 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1679+ 25C7 ~           >
1679+ 25C7 ~           >
1679+ 25C7             >                endif           ; ok        // for other definitions it "points" the correct handler
1679+ 25C7             >                // Use of "; ok" to suppress "warning[fwdref]"
1679+ 25C7             >
1679+ 25C7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1680+ 25C7 E1                           pop     hl
1681+ 25C8 E5                           push    hl                  // > n duplicate TOS
1682+ 25C9 E5                           push    hl
1683+ 25CA                              next
1683+ 25CA DD E9       >                jp      (ix)
1684+ 25CC
1685+ 25CC              //  ______________________________________________________________________
1686+ 25CC              //
1687+ 25CC              // rot         n1 n2 n3 -- n2 n3 n1
1688+ 25CC              // Rotates the 3 top values of stack by picking the 3rd in access-order
1689+ 25CC              // and putting it on top. The other two are shifted down one place.
1690+ 25CC                              New_Def ROT, "ROT", is_code, is_normal
1690+ 25CC             >
1690+ 25CC             >Dict_Ptr        defl    $
1690+ 25CC             >
1690+ 25CC             >//              ______________________________________________________________________
1690+ 25CC             >//              Heap part
1690+ 25CC             >
1690+ 25CC             >
1690+ 25CC             >                org     (Heap_Ptr & $1FFF) + $E000
1690+ E30D             >
1690+ E30D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1690+ E30D             >Latest_Definition defl  Heap_Ptr
1690+ E30D             >
1690+ E30D             >                // dummy db directives used to calculate length of namec
1690+ E30D 52 4F 54    >                db      "ROT"
1690+ E310             >len_NFA         defl    $ - temp_NFA
1690+ E310             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1690+ E30D             >
1690+ E30D 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1690+ E30E 52 4F 54    >                db      "ROT"               // name string in 7-bit ascii, but
1690+ E311             >                org     $-1                 // alter last byte of Name just above to set
1690+ E310 D4          >                db      {b $} | END_BIT     // msb as name end
1690+ E311             >
1690+ E311 05 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1690+ E313             >Prev_Ptr        defl    Heap_Ptr
1690+ E313             >
1690+ E313             >mirror_Ptr      defl    $
1690+ E313             >
1690+ E313 CE 25       >                dw      Dict_Ptr + 2        // xt
1690+ E315             >Heap_Ptr        defl    $ - $E000           // save current HP
1690+ E315             >
1690+ E315             >Current_HP      defl  $ - $E000             // used to set HP once!
1690+ E315             >
1690+ E315             >//              ______________________________________________________________________
1690+ E315             >//              Dictionary part
1690+ E315             >
1690+ E315             >                org     Dict_Ptr
1690+ 25CC             >
1690+ 25CC 13 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1690+ 25CE             >
1690+ 25CE             >ROT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1690+ 25CE ~           >                call    runcode ; ok        // for primitive definitions  actual code
1690+ 25CE ~           >
1690+ 25CE ~           >
1690+ 25CE             >                endif           ; ok        // for other definitions it "points" the correct handler
1690+ 25CE             >                // Use of "; ok" to suppress "warning[fwdref]"
1690+ 25CE             >
1690+ 25CE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1691+ 25CE                          //  exx
1692+ 25CE F1                           pop     af                  // < n3
1693+ 25CF E1                           pop     hl                  // < n2
1694+ 25D0 E3                           ex      (sp),hl             // > n2 < n1
1695+ 25D1 F5                           push    af                  // > n3
1696+ 25D2 E5                           push    hl                  // copy n1 to TOS
1697+ 25D3                          //  exx
1698+ 25D3                              next
1698+ 25D3 DD E9       >                jp      (ix)
1699+ 25D5
1700+ 25D5              //  ______________________________________________________________________
1701+ 25D5              //
1702+ 25D5              // -rot         n1 n2 n3 -- n3 n1 n2
1703+ 25D5              // Rotates the 3 top values of stack by picking the 1st in access-order
1704+ 25D5              // and putting back to 3rd place. The other two are shifted down one place.
1705+ 25D5                              New_Def DASH_ROT, "-ROT", is_code, is_normal
1705+ 25D5             >
1705+ 25D5             >Dict_Ptr        defl    $
1705+ 25D5             >
1705+ 25D5             >//              ______________________________________________________________________
1705+ 25D5             >//              Heap part
1705+ 25D5             >
1705+ 25D5             >
1705+ 25D5             >                org     (Heap_Ptr & $1FFF) + $E000
1705+ E315             >
1705+ E315             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1705+ E315             >Latest_Definition defl  Heap_Ptr
1705+ E315             >
1705+ E315             >                // dummy db directives used to calculate length of namec
1705+ E315 2D 52 4F 54 >                db      "-ROT"
1705+ E319             >len_NFA         defl    $ - temp_NFA
1705+ E319             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1705+ E315             >
1705+ E315 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1705+ E316 2D 52 4F 54 >                db      "-ROT"               // name string in 7-bit ascii, but
1705+ E31A             >                org     $-1                 // alter last byte of Name just above to set
1705+ E319 D4          >                db      {b $} | END_BIT     // msb as name end
1705+ E31A             >
1705+ E31A 0D 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1705+ E31C             >Prev_Ptr        defl    Heap_Ptr
1705+ E31C             >
1705+ E31C             >mirror_Ptr      defl    $
1705+ E31C             >
1705+ E31C D7 25       >                dw      Dict_Ptr + 2        // xt
1705+ E31E             >Heap_Ptr        defl    $ - $E000           // save current HP
1705+ E31E             >
1705+ E31E             >Current_HP      defl  $ - $E000             // used to set HP once!
1705+ E31E             >
1705+ E31E             >//              ______________________________________________________________________
1705+ E31E             >//              Dictionary part
1705+ E31E             >
1705+ E31E             >                org     Dict_Ptr
1705+ 25D5             >
1705+ 25D5 1C 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1705+ 25D7             >
1705+ 25D7             >DASH_ROT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1705+ 25D7 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1705+ 25D7 ~           >
1705+ 25D7 ~           >
1705+ 25D7             >                endif           ; ok        // for other definitions it "points" the correct handler
1705+ 25D7             >                // Use of "; ok" to suppress "warning[fwdref]"
1705+ 25D7             >
1705+ 25D7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1706+ 25D7                          //  exx
1707+ 25D7 E1                           pop     hl                  // < n3
1708+ 25D8 F1                           pop     af                  // < n2
1709+ 25D9 E3                           ex      (sp),hl             // > n3 < n1
1710+ 25DA E5                           push    hl                  // > n1
1711+ 25DB F5                           push    af                  // copy n3 to TOS
1712+ 25DC                          //  exx
1713+ 25DC                              next
1713+ 25DC DD E9       >                jp      (ix)
1714+ 25DE
1715+ 25DE              //  ______________________________________________________________________
1716+ 25DE              //
1717+ 25DE              // pick        n1 -- nx
1718+ 25DE              // picks the nth element from TOS
1719+ 25DE                              New_Def PICK, "PICK", is_code, is_normal
1719+ 25DE             >
1719+ 25DE             >Dict_Ptr        defl    $
1719+ 25DE             >
1719+ 25DE             >//              ______________________________________________________________________
1719+ 25DE             >//              Heap part
1719+ 25DE             >
1719+ 25DE             >
1719+ 25DE             >                org     (Heap_Ptr & $1FFF) + $E000
1719+ E31E             >
1719+ E31E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1719+ E31E             >Latest_Definition defl  Heap_Ptr
1719+ E31E             >
1719+ E31E             >                // dummy db directives used to calculate length of namec
1719+ E31E 50 49 43 4B >                db      "PICK"
1719+ E322             >len_NFA         defl    $ - temp_NFA
1719+ E322             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1719+ E31E             >
1719+ E31E 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1719+ E31F 50 49 43 4B >                db      "PICK"               // name string in 7-bit ascii, but
1719+ E323             >                org     $-1                 // alter last byte of Name just above to set
1719+ E322 CB          >                db      {b $} | END_BIT     // msb as name end
1719+ E323             >
1719+ E323 15 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1719+ E325             >Prev_Ptr        defl    Heap_Ptr
1719+ E325             >
1719+ E325             >mirror_Ptr      defl    $
1719+ E325             >
1719+ E325 E0 25       >                dw      Dict_Ptr + 2        // xt
1719+ E327             >Heap_Ptr        defl    $ - $E000           // save current HP
1719+ E327             >
1719+ E327             >Current_HP      defl  $ - $E000             // used to set HP once!
1719+ E327             >
1719+ E327             >//              ______________________________________________________________________
1719+ E327             >//              Dictionary part
1719+ E327             >
1719+ E327             >                org     Dict_Ptr
1719+ 25DE             >
1719+ 25DE 25 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1719+ 25E0             >
1719+ 25E0             >PICK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1719+ 25E0 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1719+ 25E0 ~           >
1719+ 25E0 ~           >
1719+ 25E0             >                endif           ; ok        // for other definitions it "points" the correct handler
1719+ 25E0             >                // Use of "; ok" to suppress "warning[fwdref]"
1719+ 25E0             >
1719+ 25E0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1720+ 25E0 E1                           pop     hl                  // take TOS as index
1721+ 25E1 29                           add     hl, hl              // as cells
1722+ 25E2 39                           add     hl, sp              // from Stack Pointer
1723+ 25E3 7E                           ld      a, (hl)             // replace TOS
1724+ 25E4 23                           inc     hl
1725+ 25E5 66                           ld      h, (hl)
1726+ 25E6 6F                           ld      l, a
1727+ 25E7 E5                           push    hl
1728+ 25E8                              next
1728+ 25E8 DD E9       >                jp      (ix)
1729+ 25EA
1730+ 25EA
1731+ 25EA              //  ______________________________________________________________________
1732+ 25EA              //
1733+ 25EA              // roll        n1 n2 n3 ... n -- n2 n3 ... n1
1734+ 25EA              // picks the nth element from TOS
1735+ 25EA              //              New_Def ROLL, "ROLL", is_code, is_normal
1736+ 25EA              //              exx                     // we need all registers free
1737+ 25EA              //              pop     hl              // number of cells to roll
1738+ 25EA              //              ld      a, h
1739+ 25EA              //              or       l
1740+ 25EA              //              jr      z, Roll_Zero
1741+ 25EA              //                  add     hl, hl              // number of bytes to move
1742+ 25EA              //                  ld      b, h
1743+ 25EA              //                  ld      c, l
1744+ 25EA              //                  add     hl, sp          // address of n1
1745+ 25EA              //                  ld      a, (hl)         // take n1 into a and a,
1746+ 25EA              //                  inc     hl
1747+ 25EA              //                  ex      af, af'
1748+ 25EA              //                  ld      a, (hl)         // take n1 into a and a,
1749+ 25EA              //                  ld      d, h
1750+ 25EA              //                  ld      e, l
1751+ 25EA              //                  dec     hl
1752+ 25EA              //                  dec     hl
1753+ 25EA              //                  lddr
1754+ 25EA              //                  ex      de, hl
1755+ 25EA              //                  ld      (hl), a
1756+ 25EA              //                  dec     hl
1757+ 25EA              //                  ex      af, af'
1758+ 25EA              //                  ld      (hl), a
1759+ 25EA              //Roll_Zero:
1760+ 25EA              //              exx
1761+ 25EA              //              next
1762+ 25EA
1763+ 25EA
1764+ 25EA              //  ______________________________________________________________________
1765+ 25EA              //
1766+ 25EA              // 2over        d1 d2 -- d1 d2 d1
1767+ 25EA              //              n1 n2 n3 n4 -- n1 n2 n3 n4 n1 n2
1768+ 25EA              // copy the second double of stack and put on top.
1769+ 25EA                              New_Def TWO_OVER, "2OVER", is_code, is_normal
1769+ 25EA             >
1769+ 25EA             >Dict_Ptr        defl    $
1769+ 25EA             >
1769+ 25EA             >//              ______________________________________________________________________
1769+ 25EA             >//              Heap part
1769+ 25EA             >
1769+ 25EA             >
1769+ 25EA             >                org     (Heap_Ptr & $1FFF) + $E000
1769+ E327             >
1769+ E327             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1769+ E327             >Latest_Definition defl  Heap_Ptr
1769+ E327             >
1769+ E327             >                // dummy db directives used to calculate length of namec
1769+ E327 32 4F 56 45 >                db      "2OVER"
1769+ E32B 52          >
1769+ E32C             >len_NFA         defl    $ - temp_NFA
1769+ E32C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1769+ E327             >
1769+ E327 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1769+ E328 32 4F 56 45 >                db      "2OVER"               // name string in 7-bit ascii, but
1769+ E32C 52          >
1769+ E32D             >                org     $-1                 // alter last byte of Name just above to set
1769+ E32C D2          >                db      {b $} | END_BIT     // msb as name end
1769+ E32D             >
1769+ E32D 1E 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1769+ E32F             >Prev_Ptr        defl    Heap_Ptr
1769+ E32F             >
1769+ E32F             >mirror_Ptr      defl    $
1769+ E32F             >
1769+ E32F EC 25       >                dw      Dict_Ptr + 2        // xt
1769+ E331             >Heap_Ptr        defl    $ - $E000           // save current HP
1769+ E331             >
1769+ E331             >Current_HP      defl  $ - $E000             // used to set HP once!
1769+ E331             >
1769+ E331             >//              ______________________________________________________________________
1769+ E331             >//              Dictionary part
1769+ E331             >
1769+ E331             >                org     Dict_Ptr
1769+ 25EA             >
1769+ 25EA 2F 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1769+ 25EC             >
1769+ 25EC             >TWO_OVER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1769+ 25EC ~           >                call    runcode ; ok        // for primitive definitions  actual code
1769+ 25EC ~           >
1769+ 25EC ~           >
1769+ 25EC             >                endif           ; ok        // for other definitions it "points" the correct handler
1769+ 25EC             >                // Use of "; ok" to suppress "warning[fwdref]"
1769+ 25EC             >
1769+ 25EC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1770+ 25EC D9                           exx
1771+ 25ED E1                           pop     hl      // 10
1772+ 25EE D1                           pop     de      // 10
1773+ 25EF C1                           pop     bc      // 10
1774+ 25F0 F1                           pop     af      // 10
1775+ 25F1 F5                           push    af      // 11
1776+ 25F2 C5                           push    bc      // 11
1777+ 25F3 D5                           push    de      // 11
1778+ 25F4 E5                           push    hl      // 11
1779+ 25F5 F5                           push    af      // 11
1780+ 25F6 C5                           push    bc      // 11
1781+ 25F7 D9                           exx
1782+ 25F8                              next
1782+ 25F8 DD E9       >                jp      (ix)
1783+ 25FA
1784+ 25FA              //  ______________________________________________________________________
1785+ 25FA              //
1786+ 25FA              // 2drop        d --
1787+ 25FA              //              n1 n2 --
1788+ 25FA              // drops the top double from stack
1789+ 25FA                              New_Def TWO_DROP, "2DROP", is_code, is_normal
1789+ 25FA             >
1789+ 25FA             >Dict_Ptr        defl    $
1789+ 25FA             >
1789+ 25FA             >//              ______________________________________________________________________
1789+ 25FA             >//              Heap part
1789+ 25FA             >
1789+ 25FA             >
1789+ 25FA             >                org     (Heap_Ptr & $1FFF) + $E000
1789+ E331             >
1789+ E331             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1789+ E331             >Latest_Definition defl  Heap_Ptr
1789+ E331             >
1789+ E331             >                // dummy db directives used to calculate length of namec
1789+ E331 32 44 52 4F >                db      "2DROP"
1789+ E335 50          >
1789+ E336             >len_NFA         defl    $ - temp_NFA
1789+ E336             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1789+ E331             >
1789+ E331 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1789+ E332 32 44 52 4F >                db      "2DROP"               // name string in 7-bit ascii, but
1789+ E336 50          >
1789+ E337             >                org     $-1                 // alter last byte of Name just above to set
1789+ E336 D0          >                db      {b $} | END_BIT     // msb as name end
1789+ E337             >
1789+ E337 27 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1789+ E339             >Prev_Ptr        defl    Heap_Ptr
1789+ E339             >
1789+ E339             >mirror_Ptr      defl    $
1789+ E339             >
1789+ E339 FC 25       >                dw      Dict_Ptr + 2        // xt
1789+ E33B             >Heap_Ptr        defl    $ - $E000           // save current HP
1789+ E33B             >
1789+ E33B             >Current_HP      defl  $ - $E000             // used to set HP once!
1789+ E33B             >
1789+ E33B             >//              ______________________________________________________________________
1789+ E33B             >//              Dictionary part
1789+ E33B             >
1789+ E33B             >                org     Dict_Ptr
1789+ 25FA             >
1789+ 25FA 39 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1789+ 25FC             >
1789+ 25FC             >TWO_DROP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1789+ 25FC ~           >                call    runcode ; ok        // for primitive definitions  actual code
1789+ 25FC ~           >
1789+ 25FC ~           >
1789+ 25FC             >                endif           ; ok        // for other definitions it "points" the correct handler
1789+ 25FC             >                // Use of "; ok" to suppress "warning[fwdref]"
1789+ 25FC             >
1789+ 25FC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1790+ 25FC E1                           pop     hl
1791+ 25FD E1                           pop     hl
1792+ 25FE                              next
1792+ 25FE DD E9       >                jp      (ix)
1793+ 2600
1794+ 2600              //  ______________________________________________________________________
1795+ 2600              //
1796+ 2600              // 2nip         d1 d2 -- d2
1797+ 2600              //              n1 n2 n3 n4 -- n3 n4
1798+ 2600              // drops the second double on the stack
1799+ 2600              //              New_Def TWO_NIP, 4, "2nip"
1800+ 2600              //              ...
1801+ 2600
1802+ 2600              //  ______________________________________________________________________
1803+ 2600              //
1804+ 2600              // 2tuck         d1 d2 -- d2 d1 d2
1805+ 2600              // copy the top element after the second.
1806+ 2600              //              New_Def TWO_TUCK, 5, "2tuck"
1807+ 2600              //              ...
1808+ 2600
1809+ 2600              //  ______________________________________________________________________
1810+ 2600              //
1811+ 2600              // 2swap         d1 d2 -- d2 d1
1812+ 2600              //               n1 n2 n3 n4 -- n3 n4 n1 n2
1813+ 2600              // swaps the two doubles on top of stack
1814+ 2600                              New_Def TWO_SWAP, "2SWAP", is_code, is_normal
1814+ 2600             >
1814+ 2600             >Dict_Ptr        defl    $
1814+ 2600             >
1814+ 2600             >//              ______________________________________________________________________
1814+ 2600             >//              Heap part
1814+ 2600             >
1814+ 2600             >
1814+ 2600             >                org     (Heap_Ptr & $1FFF) + $E000
1814+ E33B             >
1814+ E33B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1814+ E33B             >Latest_Definition defl  Heap_Ptr
1814+ E33B             >
1814+ E33B             >                // dummy db directives used to calculate length of namec
1814+ E33B 32 53 57 41 >                db      "2SWAP"
1814+ E33F 50          >
1814+ E340             >len_NFA         defl    $ - temp_NFA
1814+ E340             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1814+ E33B             >
1814+ E33B 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1814+ E33C 32 53 57 41 >                db      "2SWAP"               // name string in 7-bit ascii, but
1814+ E340 50          >
1814+ E341             >                org     $-1                 // alter last byte of Name just above to set
1814+ E340 D0          >                db      {b $} | END_BIT     // msb as name end
1814+ E341             >
1814+ E341 31 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1814+ E343             >Prev_Ptr        defl    Heap_Ptr
1814+ E343             >
1814+ E343             >mirror_Ptr      defl    $
1814+ E343             >
1814+ E343 02 26       >                dw      Dict_Ptr + 2        // xt
1814+ E345             >Heap_Ptr        defl    $ - $E000           // save current HP
1814+ E345             >
1814+ E345             >Current_HP      defl  $ - $E000             // used to set HP once!
1814+ E345             >
1814+ E345             >//              ______________________________________________________________________
1814+ E345             >//              Dictionary part
1814+ E345             >
1814+ E345             >                org     Dict_Ptr
1814+ 2600             >
1814+ 2600 43 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1814+ 2602             >
1814+ 2602             >TWO_SWAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1814+ 2602 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1814+ 2602 ~           >
1814+ 2602 ~           >
1814+ 2602             >                endif           ; ok        // for other definitions it "points" the correct handler
1814+ 2602             >                // Use of "; ok" to suppress "warning[fwdref]"
1814+ 2602             >
1814+ 2602             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1815+ 2602 D9                           exx
1816+ 2603 F1                           pop     af                  //   d2-H
1817+ 2604 E1                           pop     hl                  // < d2-L
1818+ 2605 D1                           pop     de                  // < d1-H
1819+ 2606 E3                           ex      (sp), hl            // < d1-L > d2-L
1820+ 2607 F5                           push    af                  // > d2-H
1821+ 2608 E5                           push    hl                  // > d1-L
1822+ 2609 D5                           push    de
1823+ 260A D9                           exx
1824+ 260B                              next
1824+ 260B DD E9       >                jp      (ix)
1825+ 260D
1826+ 260D              //  ______________________________________________________________________
1827+ 260D              //
1828+ 260D              // 2dup         d -- d d
1829+ 260D              //              n1 n2 -- n1 n2 n1 n2
1830+ 260D              // duplicates the top double of stack
1831+ 260D                              New_Def TWO_DUP, "2DUP", is_code, is_normal
1831+ 260D             >
1831+ 260D             >Dict_Ptr        defl    $
1831+ 260D             >
1831+ 260D             >//              ______________________________________________________________________
1831+ 260D             >//              Heap part
1831+ 260D             >
1831+ 260D             >
1831+ 260D             >                org     (Heap_Ptr & $1FFF) + $E000
1831+ E345             >
1831+ E345             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1831+ E345             >Latest_Definition defl  Heap_Ptr
1831+ E345             >
1831+ E345             >                // dummy db directives used to calculate length of namec
1831+ E345 32 44 55 50 >                db      "2DUP"
1831+ E349             >len_NFA         defl    $ - temp_NFA
1831+ E349             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1831+ E345             >
1831+ E345 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1831+ E346 32 44 55 50 >                db      "2DUP"               // name string in 7-bit ascii, but
1831+ E34A             >                org     $-1                 // alter last byte of Name just above to set
1831+ E349 D0          >                db      {b $} | END_BIT     // msb as name end
1831+ E34A             >
1831+ E34A 3B 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1831+ E34C             >Prev_Ptr        defl    Heap_Ptr
1831+ E34C             >
1831+ E34C             >mirror_Ptr      defl    $
1831+ E34C             >
1831+ E34C 0F 26       >                dw      Dict_Ptr + 2        // xt
1831+ E34E             >Heap_Ptr        defl    $ - $E000           // save current HP
1831+ E34E             >
1831+ E34E             >Current_HP      defl  $ - $E000             // used to set HP once!
1831+ E34E             >
1831+ E34E             >//              ______________________________________________________________________
1831+ E34E             >//              Dictionary part
1831+ E34E             >
1831+ E34E             >                org     Dict_Ptr
1831+ 260D             >
1831+ 260D 4C 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1831+ 260F             >
1831+ 260F             >TWO_DUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1831+ 260F ~           >                call    runcode ; ok        // for primitive definitions  actual code
1831+ 260F ~           >
1831+ 260F ~           >
1831+ 260F             >                endif           ; ok        // for other definitions it "points" the correct handler
1831+ 260F             >                // Use of "; ok" to suppress "warning[fwdref]"
1831+ 260F             >
1831+ 260F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1832+ 260F E1                           pop     hl                  // < d-H
1833+ 2610 F1                           pop     af                  // < d-L
1834+ 2611 F5                           push    af                  // < d-L
1835+ 2612 E5                           push    hl                  // > d-H
1836+ 2613 F5                           push    af                  // > d-L
1837+ 2614 E5                           push    hl                  // > d-H
1838+ 2615                              next
1838+ 2615 DD E9       >                jp      (ix)
1839+ 2617
1840+ 2617              //  ______________________________________________________________________
1841+ 2617              //
1842+ 2617              // 2rot         d1 d2 d3 -- d2 d3 d1
1843+ 2617              //              n1 n2 n3 n4 n5 n6 -- n3 n4 n5 n6 n1 n2
1844+ 2617              // Rotates the 3 top doubles of stack by picking the 3rd in access-order
1845+ 2617              // and putting it on top. The other two are shifted down one place.
1846+ 2617              //              New_Def TWO?ROT, 4, "2rot"
1847+ 2617              //              ...
1848+ 2617              //              New_Def TWO_ROT, "2ROT", is_code, is_normal
1849+ 2617              //
1850+ 2617              //      d3  |d2  |d1  |
1851+ 2617              //      h l |h l |h l |
1852+ 2617              // SP   LHED|LHED|LHED|
1853+ 2617              // SP  +0123|4567|89ab|
1854+ 2617              //              ld      hl, $000B
1855+ 2617              //              add     hl, sp
1856+ 2617              //              ld      d, (hl)
1857+ 2617              //              dec     hl
1858+ 2617              //              ld      e, (hl)
1859+ 2617              //              dec     hl
1860+ 2617              //              push    de
1861+ 2617              //              ld      d, (hl)
1862+ 2617              //              dec     hl
1863+ 2617              //              ld      e, (hl)
1864+ 2617              //              dec     hl
1865+ 2617              //              push    de
1866+ 2617
1867+ 2617              //      d1  |d3  |d2  |d1  |
1868+ 2617              //      h l |h l |h l |h l |
1869+ 2617              // SP   LHED|LHED|LHED|LHED|
1870+ 2617              // SP       +0123|4567|89ab|
1871+ 2617
1872+ 2617              //              ld      d, h
1873+ 2617              //              ld      e, l
1874+ 2617              //              inc     de
1875+ 2617              //              inc     de
1876+ 2617              //              inc     de
1877+ 2617              //              inc     de
1878+ 2617              //              push    bc
1879+ 2617              //              ld      bc, $000C
1880+ 2617              //              lddr
1881+ 2617              //              pop     bc
1882+ 2617              //              pop     de
1883+ 2617              //              pop     de
1884+ 2617              //
1885+ 2617              //              next
1886+ 2617
1887+ 2617
1888+ 2617              //  ______________________________________________________________________
1889+ 2617              //
1890+ 2617              // +!           n a --
1891+ 2617              // Sums to the content of address a the number n.
1892+ 2617              // It is the same of  a @ n + a !
1893+ 2617                              New_Def PLUSSTORE, "+!", is_code, is_normal
1893+ 2617             >
1893+ 2617             >Dict_Ptr        defl    $
1893+ 2617             >
1893+ 2617             >//              ______________________________________________________________________
1893+ 2617             >//              Heap part
1893+ 2617             >
1893+ 2617             >
1893+ 2617             >                org     (Heap_Ptr & $1FFF) + $E000
1893+ E34E             >
1893+ E34E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1893+ E34E             >Latest_Definition defl  Heap_Ptr
1893+ E34E             >
1893+ E34E             >                // dummy db directives used to calculate length of namec
1893+ E34E 2B 21       >                db      "+!"
1893+ E350             >len_NFA         defl    $ - temp_NFA
1893+ E350             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1893+ E34E             >
1893+ E34E 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1893+ E34F 2B 21       >                db      "+!"               // name string in 7-bit ascii, but
1893+ E351             >                org     $-1                 // alter last byte of Name just above to set
1893+ E350 A1          >                db      {b $} | END_BIT     // msb as name end
1893+ E351             >
1893+ E351 45 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1893+ E353             >Prev_Ptr        defl    Heap_Ptr
1893+ E353             >
1893+ E353             >mirror_Ptr      defl    $
1893+ E353             >
1893+ E353 19 26       >                dw      Dict_Ptr + 2        // xt
1893+ E355             >Heap_Ptr        defl    $ - $E000           // save current HP
1893+ E355             >
1893+ E355             >Current_HP      defl  $ - $E000             // used to set HP once!
1893+ E355             >
1893+ E355             >//              ______________________________________________________________________
1893+ E355             >//              Dictionary part
1893+ E355             >
1893+ E355             >                org     Dict_Ptr
1893+ 2617             >
1893+ 2617 53 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1893+ 2619             >
1893+ 2619             >PLUSSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1893+ 2619 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1893+ 2619 ~           >
1893+ 2619 ~           >
1893+ 2619             >                endif           ; ok        // for other definitions it "points" the correct handler
1893+ 2619             >                // Use of "; ok" to suppress "warning[fwdref]"
1893+ 2619             >
1893+ 2619             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1894+ 2619 D9                           exx
1895+ 261A E1                           pop     hl                  // hl is the address
1896+ 261B D1                           pop     de                  // de is the number
1897+ 261C 7E                           ld      a, (hl)
1898+ 261D 83                           add     e
1899+ 261E 77                           ld      (hl), a
1900+ 261F 23                           inc     hl
1901+ 2620 7E                           ld      a, (hl)
1902+ 2621 8A                           adc     d
1903+ 2622 77                           ld      (hl), a
1904+ 2623 D9                           exx
1905+ 2624                              next
1905+ 2624 DD E9       >                jp      (ix)
1906+ 2626
1907+ 2626              //  ______________________________________________________________________
1908+ 2626              //
1909+ 2626              // toggle       a n --
1910+ 2626              // Complements (xor) the byte at addrress  a  with the model n.
1911+ 2626                              New_Def TOGGLE, "TOGGLE", is_code, is_normal
1911+ 2626             >
1911+ 2626             >Dict_Ptr        defl    $
1911+ 2626             >
1911+ 2626             >//              ______________________________________________________________________
1911+ 2626             >//              Heap part
1911+ 2626             >
1911+ 2626             >
1911+ 2626             >                org     (Heap_Ptr & $1FFF) + $E000
1911+ E355             >
1911+ E355             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1911+ E355             >Latest_Definition defl  Heap_Ptr
1911+ E355             >
1911+ E355             >                // dummy db directives used to calculate length of namec
1911+ E355 54 4F 47 47 >                db      "TOGGLE"
1911+ E359 4C 45       >
1911+ E35B             >len_NFA         defl    $ - temp_NFA
1911+ E35B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1911+ E355             >
1911+ E355 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1911+ E356 54 4F 47 47 >                db      "TOGGLE"               // name string in 7-bit ascii, but
1911+ E35A 4C 45       >
1911+ E35C             >                org     $-1                 // alter last byte of Name just above to set
1911+ E35B C5          >                db      {b $} | END_BIT     // msb as name end
1911+ E35C             >
1911+ E35C 4E 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1911+ E35E             >Prev_Ptr        defl    Heap_Ptr
1911+ E35E             >
1911+ E35E             >mirror_Ptr      defl    $
1911+ E35E             >
1911+ E35E 28 26       >                dw      Dict_Ptr + 2        // xt
1911+ E360             >Heap_Ptr        defl    $ - $E000           // save current HP
1911+ E360             >
1911+ E360             >Current_HP      defl  $ - $E000             // used to set HP once!
1911+ E360             >
1911+ E360             >//              ______________________________________________________________________
1911+ E360             >//              Dictionary part
1911+ E360             >
1911+ E360             >                org     Dict_Ptr
1911+ 2626             >
1911+ 2626 5E 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1911+ 2628             >
1911+ 2628             >TOGGLE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1911+ 2628 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1911+ 2628 ~           >
1911+ 2628 ~           >
1911+ 2628             >                endif           ; ok        // for other definitions it "points" the correct handler
1911+ 2628             >                // Use of "; ok" to suppress "warning[fwdref]"
1911+ 2628             >
1911+ 2628             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1912+ 2628 E1                           pop     hl
1913+ 2629 7D                           ld      a, l
1914+ 262A E1                           pop     hl
1915+ 262B AE                           xor     (hl)
1916+ 262C 77                           ld      (hl), a
1917+ 262D
1918+ 262D                              next
1918+ 262D DD E9       >                jp      (ix)
1919+ 262F
1920+ 262F              //  ______________________________________________________________________
1921+ 262F              //
1922+ 262F              // @            a -- n
1923+ 262F              // fetch 16 bit number n from address a. Z80 keeps high byte is in high memory
1924+ 262F                              New_Def FETCH, "@", is_code, is_normal
1924+ 262F             >
1924+ 262F             >Dict_Ptr        defl    $
1924+ 262F             >
1924+ 262F             >//              ______________________________________________________________________
1924+ 262F             >//              Heap part
1924+ 262F             >
1924+ 262F             >
1924+ 262F             >                org     (Heap_Ptr & $1FFF) + $E000
1924+ E360             >
1924+ E360             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1924+ E360             >Latest_Definition defl  Heap_Ptr
1924+ E360             >
1924+ E360             >                // dummy db directives used to calculate length of namec
1924+ E360 40          >                db      "@"
1924+ E361             >len_NFA         defl    $ - temp_NFA
1924+ E361             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1924+ E360             >
1924+ E360 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1924+ E361 40          >                db      "@"               // name string in 7-bit ascii, but
1924+ E362             >                org     $-1                 // alter last byte of Name just above to set
1924+ E361 C0          >                db      {b $} | END_BIT     // msb as name end
1924+ E362             >
1924+ E362 55 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1924+ E364             >Prev_Ptr        defl    Heap_Ptr
1924+ E364             >
1924+ E364             >mirror_Ptr      defl    $
1924+ E364             >
1924+ E364 31 26       >                dw      Dict_Ptr + 2        // xt
1924+ E366             >Heap_Ptr        defl    $ - $E000           // save current HP
1924+ E366             >
1924+ E366             >Current_HP      defl  $ - $E000             // used to set HP once!
1924+ E366             >
1924+ E366             >//              ______________________________________________________________________
1924+ E366             >//              Dictionary part
1924+ E366             >
1924+ E366             >                org     Dict_Ptr
1924+ 262F             >
1924+ 262F 64 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1924+ 2631             >
1924+ 2631             >FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1924+ 2631 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1924+ 2631 ~           >
1924+ 2631 ~           >
1924+ 2631             >                endif           ; ok        // for other definitions it "points" the correct handler
1924+ 2631             >                // Use of "; ok" to suppress "warning[fwdref]"
1924+ 2631             >
1924+ 2631             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1925+ 2631 E1                           pop     hl
1926+ 2632 7E                           ld      a, (hl)             // low-byte
1927+ 2633 23                           inc     hl
1928+ 2634 66                           ld      h, (hl)             // high-byte
1929+ 2635 6F                           ld      l, a
1930+ 2636 E5                           push    hl
1931+ 2637                              next
1931+ 2637 DD E9       >                jp      (ix)
1932+ 2639
1933+ 2639              //  ______________________________________________________________________
1934+ 2639              //
1935+ 2639              // !            n a --
1936+ 2639              // store 16 bit number n from address a. Z80 keeps high byte is in high memory
1937+ 2639                              New_Def STORE, "!", is_code, is_normal
1937+ 2639             >
1937+ 2639             >Dict_Ptr        defl    $
1937+ 2639             >
1937+ 2639             >//              ______________________________________________________________________
1937+ 2639             >//              Heap part
1937+ 2639             >
1937+ 2639             >
1937+ 2639             >                org     (Heap_Ptr & $1FFF) + $E000
1937+ E366             >
1937+ E366             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1937+ E366             >Latest_Definition defl  Heap_Ptr
1937+ E366             >
1937+ E366             >                // dummy db directives used to calculate length of namec
1937+ E366 21          >                db      "!"
1937+ E367             >len_NFA         defl    $ - temp_NFA
1937+ E367             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1937+ E366             >
1937+ E366 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1937+ E367 21          >                db      "!"               // name string in 7-bit ascii, but
1937+ E368             >                org     $-1                 // alter last byte of Name just above to set
1937+ E367 A1          >                db      {b $} | END_BIT     // msb as name end
1937+ E368             >
1937+ E368 60 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1937+ E36A             >Prev_Ptr        defl    Heap_Ptr
1937+ E36A             >
1937+ E36A             >mirror_Ptr      defl    $
1937+ E36A             >
1937+ E36A 3B 26       >                dw      Dict_Ptr + 2        // xt
1937+ E36C             >Heap_Ptr        defl    $ - $E000           // save current HP
1937+ E36C             >
1937+ E36C             >Current_HP      defl  $ - $E000             // used to set HP once!
1937+ E36C             >
1937+ E36C             >//              ______________________________________________________________________
1937+ E36C             >//              Dictionary part
1937+ E36C             >
1937+ E36C             >                org     Dict_Ptr
1937+ 2639             >
1937+ 2639 6A 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1937+ 263B             >
1937+ 263B             >STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1937+ 263B ~           >                call    runcode ; ok        // for primitive definitions  actual code
1937+ 263B ~           >
1937+ 263B ~           >
1937+ 263B             >                endif           ; ok        // for other definitions it "points" the correct handler
1937+ 263B             >                // Use of "; ok" to suppress "warning[fwdref]"
1937+ 263B             >
1937+ 263B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1938+ 263B D9                           exx
1939+ 263C E1                           pop     hl                  // address
1940+ 263D D1                           pop     de                  // < n
1941+ 263E 73                           ld      (hl), e             // low-byte
1942+ 263F 23                           inc     hl
1943+ 2640 72                           ld      (hl), d             // high-byte
1944+ 2641 D9                           exx
1945+ 2642                              next
1945+ 2642 DD E9       >                jp      (ix)
1946+ 2644
1947+ 2644              //  ______________________________________________________________________
1948+ 2644              //
1949+ 2644              // c@           a -- c
1950+ 2644              // fetch a character n from address a
1951+ 2644                              New_Def CFETCH, "C@", is_code, is_normal
1951+ 2644             >
1951+ 2644             >Dict_Ptr        defl    $
1951+ 2644             >
1951+ 2644             >//              ______________________________________________________________________
1951+ 2644             >//              Heap part
1951+ 2644             >
1951+ 2644             >
1951+ 2644             >                org     (Heap_Ptr & $1FFF) + $E000
1951+ E36C             >
1951+ E36C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1951+ E36C             >Latest_Definition defl  Heap_Ptr
1951+ E36C             >
1951+ E36C             >                // dummy db directives used to calculate length of namec
1951+ E36C 43 40       >                db      "C@"
1951+ E36E             >len_NFA         defl    $ - temp_NFA
1951+ E36E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1951+ E36C             >
1951+ E36C 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1951+ E36D 43 40       >                db      "C@"               // name string in 7-bit ascii, but
1951+ E36F             >                org     $-1                 // alter last byte of Name just above to set
1951+ E36E C0          >                db      {b $} | END_BIT     // msb as name end
1951+ E36F             >
1951+ E36F 66 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1951+ E371             >Prev_Ptr        defl    Heap_Ptr
1951+ E371             >
1951+ E371             >mirror_Ptr      defl    $
1951+ E371             >
1951+ E371 46 26       >                dw      Dict_Ptr + 2        // xt
1951+ E373             >Heap_Ptr        defl    $ - $E000           // save current HP
1951+ E373             >
1951+ E373             >Current_HP      defl  $ - $E000             // used to set HP once!
1951+ E373             >
1951+ E373             >//              ______________________________________________________________________
1951+ E373             >//              Dictionary part
1951+ E373             >
1951+ E373             >                org     Dict_Ptr
1951+ 2644             >
1951+ 2644 71 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1951+ 2646             >
1951+ 2646             >CFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1951+ 2646 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1951+ 2646 ~           >
1951+ 2646 ~           >
1951+ 2646             >                endif           ; ok        // for other definitions it "points" the correct handler
1951+ 2646             >                // Use of "; ok" to suppress "warning[fwdref]"
1951+ 2646             >
1951+ 2646             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1952+ 2646 E1                           pop     hl
1953+ 2647 6E                           ld      l, (hl)             // low-byte
1954+ 2648 26 00                        ld      h, 0
1955+ 264A
1956+ 264A                              psh1
1956+ 264A E5          >                push    hl
1956+ 264B DD E9       >                jp      (ix)
1957+ 264D
1958+ 264D              //  ______________________________________________________________________
1959+ 264D              //
1960+ 264D              // c!           c a --
1961+ 264D              // fetch 16 bit number n from address a. Z80 keeps high byte is in high memory
1962+ 264D                              New_Def CSTORE, "C!", is_code, is_normal
1962+ 264D             >
1962+ 264D             >Dict_Ptr        defl    $
1962+ 264D             >
1962+ 264D             >//              ______________________________________________________________________
1962+ 264D             >//              Heap part
1962+ 264D             >
1962+ 264D             >
1962+ 264D             >                org     (Heap_Ptr & $1FFF) + $E000
1962+ E373             >
1962+ E373             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1962+ E373             >Latest_Definition defl  Heap_Ptr
1962+ E373             >
1962+ E373             >                // dummy db directives used to calculate length of namec
1962+ E373 43 21       >                db      "C!"
1962+ E375             >len_NFA         defl    $ - temp_NFA
1962+ E375             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1962+ E373             >
1962+ E373 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1962+ E374 43 21       >                db      "C!"               // name string in 7-bit ascii, but
1962+ E376             >                org     $-1                 // alter last byte of Name just above to set
1962+ E375 A1          >                db      {b $} | END_BIT     // msb as name end
1962+ E376             >
1962+ E376 6C 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1962+ E378             >Prev_Ptr        defl    Heap_Ptr
1962+ E378             >
1962+ E378             >mirror_Ptr      defl    $
1962+ E378             >
1962+ E378 4F 26       >                dw      Dict_Ptr + 2        // xt
1962+ E37A             >Heap_Ptr        defl    $ - $E000           // save current HP
1962+ E37A             >
1962+ E37A             >Current_HP      defl  $ - $E000             // used to set HP once!
1962+ E37A             >
1962+ E37A             >//              ______________________________________________________________________
1962+ E37A             >//              Dictionary part
1962+ E37A             >
1962+ E37A             >                org     Dict_Ptr
1962+ 264D             >
1962+ 264D 78 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1962+ 264F             >
1962+ 264F             >CSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1962+ 264F ~           >                call    runcode ; ok        // for primitive definitions  actual code
1962+ 264F ~           >
1962+ 264F ~           >
1962+ 264F             >                endif           ; ok        // for other definitions it "points" the correct handler
1962+ 264F             >                // Use of "; ok" to suppress "warning[fwdref]"
1962+ 264F             >
1962+ 264F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1963+ 264F D9                           exx
1964+ 2650 E1                           pop     hl                  // < address
1965+ 2651 D1                           pop     de
1966+ 2652 73                           ld      (hl), e             // low-byte
1967+ 2653 D9                           exx
1968+ 2654                              next
1968+ 2654 DD E9       >                jp      (ix)
1969+ 2656
1970+ 2656              //  ______________________________________________________________________
1971+ 2656              //
1972+ 2656              // 2@           a -- d
1973+ 2656              // fetch a 32 bits number d from address a and leaves it on top of the
1974+ 2656              // stack as two single numbers, high part as top of the stack.
1975+ 2656              // A double number is normally kept in CPU registers as HLDE.
1976+ 2656              // On stack a double number is treated as two single numbers
1977+ 2656              // where BC is on the top of the stack and HL is the second from top,
1978+ 2656              // so the sign of the number can be checked on top of stack
1979+ 2656              // and in the stack memory it appears as LHED.
1980+ 2656                              New_Def TWO_FETCH, "2@", is_code, is_normal
1980+ 2656             >
1980+ 2656             >Dict_Ptr        defl    $
1980+ 2656             >
1980+ 2656             >//              ______________________________________________________________________
1980+ 2656             >//              Heap part
1980+ 2656             >
1980+ 2656             >
1980+ 2656             >                org     (Heap_Ptr & $1FFF) + $E000
1980+ E37A             >
1980+ E37A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1980+ E37A             >Latest_Definition defl  Heap_Ptr
1980+ E37A             >
1980+ E37A             >                // dummy db directives used to calculate length of namec
1980+ E37A 32 40       >                db      "2@"
1980+ E37C             >len_NFA         defl    $ - temp_NFA
1980+ E37C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1980+ E37A             >
1980+ E37A 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1980+ E37B 32 40       >                db      "2@"               // name string in 7-bit ascii, but
1980+ E37D             >                org     $-1                 // alter last byte of Name just above to set
1980+ E37C C0          >                db      {b $} | END_BIT     // msb as name end
1980+ E37D             >
1980+ E37D 73 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1980+ E37F             >Prev_Ptr        defl    Heap_Ptr
1980+ E37F             >
1980+ E37F             >mirror_Ptr      defl    $
1980+ E37F             >
1980+ E37F 58 26       >                dw      Dict_Ptr + 2        // xt
1980+ E381             >Heap_Ptr        defl    $ - $E000           // save current HP
1980+ E381             >
1980+ E381             >Current_HP      defl  $ - $E000             // used to set HP once!
1980+ E381             >
1980+ E381             >//              ______________________________________________________________________
1980+ E381             >//              Dictionary part
1980+ E381             >
1980+ E381             >                org     Dict_Ptr
1980+ 2656             >
1980+ 2656 7F 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1980+ 2658             >
1980+ 2658             >TWO_FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1980+ 2658 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1980+ 2658 ~           >
1980+ 2658 ~           >
1980+ 2658             >                endif           ; ok        // for other definitions it "points" the correct handler
1980+ 2658             >                // Use of "; ok" to suppress "warning[fwdref]"
1980+ 2658             >
1980+ 2658             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1981+ 2658 D9                           exx
1982+ 2659 E1                           pop     hl                  // address
1983+ 265A 5E                           ld      e, (hl)             // low-byte
1984+ 265B 23                           inc     hl
1985+ 265C 56                           ld      d, (hl)             // high-byte
1986+ 265D 23                           inc     hl
1987+ 265E 4E                           ld      c, (hl)             // low-byte
1988+ 265F 23                           inc     hl
1989+ 2660 46                           ld      b, (hl)             // high-byte
1990+ 2661 C5                           push    bc
1991+ 2662 D5                           push    de
1992+ 2663 D9                           exx
1993+ 2664                              next
1993+ 2664 DD E9       >                jp      (ix)
1994+ 2666
1995+ 2666              //  ______________________________________________________________________
1996+ 2666              //
1997+ 2666              // 2!           d a --
1998+ 2666              // stores a 32 bits number d from address a and leaves it on top of the
1999+ 2666              // stack as two single numbers, high part as top of the stack.
2000+ 2666              // A double number is normally kept in CPU registers as HLDE.
2001+ 2666              // On stack a double number is treated as two single numbers
2002+ 2666              // where BC is on the top of the stack and HL is the second from top,
2003+ 2666              // so the sign of the number can be checked on top of stack
2004+ 2666              // and in the stack memory it appears as LHED.
2005+ 2666                              New_Def TWO_STORE, "2!", is_code, is_normal
2005+ 2666             >
2005+ 2666             >Dict_Ptr        defl    $
2005+ 2666             >
2005+ 2666             >//              ______________________________________________________________________
2005+ 2666             >//              Heap part
2005+ 2666             >
2005+ 2666             >
2005+ 2666             >                org     (Heap_Ptr & $1FFF) + $E000
2005+ E381             >
2005+ E381             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2005+ E381             >Latest_Definition defl  Heap_Ptr
2005+ E381             >
2005+ E381             >                // dummy db directives used to calculate length of namec
2005+ E381 32 21       >                db      "2!"
2005+ E383             >len_NFA         defl    $ - temp_NFA
2005+ E383             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2005+ E381             >
2005+ E381 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2005+ E382 32 21       >                db      "2!"               // name string in 7-bit ascii, but
2005+ E384             >                org     $-1                 // alter last byte of Name just above to set
2005+ E383 A1          >                db      {b $} | END_BIT     // msb as name end
2005+ E384             >
2005+ E384 7A 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2005+ E386             >Prev_Ptr        defl    Heap_Ptr
2005+ E386             >
2005+ E386             >mirror_Ptr      defl    $
2005+ E386             >
2005+ E386 68 26       >                dw      Dict_Ptr + 2        // xt
2005+ E388             >Heap_Ptr        defl    $ - $E000           // save current HP
2005+ E388             >
2005+ E388             >Current_HP      defl  $ - $E000             // used to set HP once!
2005+ E388             >
2005+ E388             >//              ______________________________________________________________________
2005+ E388             >//              Dictionary part
2005+ E388             >
2005+ E388             >                org     Dict_Ptr
2005+ 2666             >
2005+ 2666 86 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2005+ 2668             >
2005+ 2668             >TWO_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2005+ 2668 ~           >                call    runcode ; ok        // for primitive definitions  actual code
2005+ 2668 ~           >
2005+ 2668 ~           >
2005+ 2668             >                endif           ; ok        // for other definitions it "points" the correct handler
2005+ 2668             >                // Use of "; ok" to suppress "warning[fwdref]"
2005+ 2668             >
2005+ 2668             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2006+ 2668 D9                           exx
2007+ 2669 E1                           pop     hl                  // address
2008+ 266A C1                           pop     bc                  // < high-part
2009+ 266B D1                           pop     de                  // < low-part > Instruction Pointer
2010+ 266C 71                           ld      (hl), c
2011+ 266D 23                           inc     hl
2012+ 266E 70                           ld      (hl), b
2013+ 266F 23                           inc     hl
2014+ 2670 73                           ld      (hl), e
2015+ 2671 23                           inc     hl
2016+ 2672 72                           ld      (hl), d
2017+ 2673 D9                           exx
2018+ 2674                              next
2018+ 2674 DD E9       >                jp      (ix)
2019+ 2676
2020+ 2676              //  ______________________________________________________________________
2021+ 2676              //
2022+ 2676              // p@           a -- c
2023+ 2676              // Read one byte from port a and leave the result on top of stack
2024+ 2676                              New_Def PFETCH, "P@", is_code, is_normal
2024+ 2676             >
2024+ 2676             >Dict_Ptr        defl    $
2024+ 2676             >
2024+ 2676             >//              ______________________________________________________________________
2024+ 2676             >//              Heap part
2024+ 2676             >
2024+ 2676             >
2024+ 2676             >                org     (Heap_Ptr & $1FFF) + $E000
2024+ E388             >
2024+ E388             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2024+ E388             >Latest_Definition defl  Heap_Ptr
2024+ E388             >
2024+ E388             >                // dummy db directives used to calculate length of namec
2024+ E388 50 40       >                db      "P@"
2024+ E38A             >len_NFA         defl    $ - temp_NFA
2024+ E38A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2024+ E388             >
2024+ E388 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2024+ E389 50 40       >                db      "P@"               // name string in 7-bit ascii, but
2024+ E38B             >                org     $-1                 // alter last byte of Name just above to set
2024+ E38A C0          >                db      {b $} | END_BIT     // msb as name end
2024+ E38B             >
2024+ E38B 81 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2024+ E38D             >Prev_Ptr        defl    Heap_Ptr
2024+ E38D             >
2024+ E38D             >mirror_Ptr      defl    $
2024+ E38D             >
2024+ E38D 78 26       >                dw      Dict_Ptr + 2        // xt
2024+ E38F             >Heap_Ptr        defl    $ - $E000           // save current HP
2024+ E38F             >
2024+ E38F             >Current_HP      defl  $ - $E000             // used to set HP once!
2024+ E38F             >
2024+ E38F             >//              ______________________________________________________________________
2024+ E38F             >//              Dictionary part
2024+ E38F             >
2024+ E38F             >                org     Dict_Ptr
2024+ 2676             >
2024+ 2676 8D 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2024+ 2678             >
2024+ 2678             >PFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2024+ 2678 ~           >                call    runcode ; ok        // for primitive definitions  actual code
2024+ 2678 ~           >
2024+ 2678 ~           >
2024+ 2678             >                endif           ; ok        // for other definitions it "points" the correct handler
2024+ 2678             >                // Use of "; ok" to suppress "warning[fwdref]"
2024+ 2678             >
2024+ 2678             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2025+ 2678 D9                           exx
2026+ 2679 C1                           pop     bc
2027+ 267A 26 00                        ld      h, 0
2028+ 267C ED 68                        in      l, (c)
2029+ 267E E5                           push    hl
2030+ 267F D9                           exx
2031+ 2680                              next
2031+ 2680 DD E9       >                jp      (ix)
2032+ 2682
2033+ 2682              //  ______________________________________________________________________
2034+ 2682              //
2035+ 2682              // p!           c a --
2036+ 2682              // Send one byte (top of stack) to port a
2037+ 2682                              New_Def PSTORE, "P!", is_code, is_normal
2037+ 2682             >
2037+ 2682             >Dict_Ptr        defl    $
2037+ 2682             >
2037+ 2682             >//              ______________________________________________________________________
2037+ 2682             >//              Heap part
2037+ 2682             >
2037+ 2682             >
2037+ 2682             >                org     (Heap_Ptr & $1FFF) + $E000
2037+ E38F             >
2037+ E38F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2037+ E38F             >Latest_Definition defl  Heap_Ptr
2037+ E38F             >
2037+ E38F             >                // dummy db directives used to calculate length of namec
2037+ E38F 50 21       >                db      "P!"
2037+ E391             >len_NFA         defl    $ - temp_NFA
2037+ E391             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2037+ E38F             >
2037+ E38F 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2037+ E390 50 21       >                db      "P!"               // name string in 7-bit ascii, but
2037+ E392             >                org     $-1                 // alter last byte of Name just above to set
2037+ E391 A1          >                db      {b $} | END_BIT     // msb as name end
2037+ E392             >
2037+ E392 88 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2037+ E394             >Prev_Ptr        defl    Heap_Ptr
2037+ E394             >
2037+ E394             >mirror_Ptr      defl    $
2037+ E394             >
2037+ E394 84 26       >                dw      Dict_Ptr + 2        // xt
2037+ E396             >Heap_Ptr        defl    $ - $E000           // save current HP
2037+ E396             >
2037+ E396             >Current_HP      defl  $ - $E000             // used to set HP once!
2037+ E396             >
2037+ E396             >//              ______________________________________________________________________
2037+ E396             >//              Dictionary part
2037+ E396             >
2037+ E396             >                org     Dict_Ptr
2037+ 2682             >
2037+ 2682 94 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2037+ 2684             >
2037+ 2684             >PSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2037+ 2684 ~           >                call    runcode ; ok        // for primitive definitions  actual code
2037+ 2684 ~           >
2037+ 2684 ~           >
2037+ 2684             >                endif           ; ok        // for other definitions it "points" the correct handler
2037+ 2684             >                // Use of "; ok" to suppress "warning[fwdref]"
2037+ 2684             >
2037+ 2684             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2038+ 2684 D9                           exx
2039+ 2685 C1                           pop     bc
2040+ 2686 E1                           pop     hl                  // < c
2041+ 2687 ED 69                        out     (c), l              // low-byte
2042+ 2689 D9                           exx
2043+ 268A                              next
2043+ 268A DD E9       >                jp      (ix)
2044+ 268C
2045+ 268C
2046+ 268C              //  ______________________________________________________________________
2047+ 268C              //
2048+ 268C              // 2*           n1 -- n2
2049+ 268C              // doubles the number at top of stack
2050+ 268C                              New_Def TWO_MUL, "2*", is_code, is_normal
2050+ 268C             >
2050+ 268C             >Dict_Ptr        defl    $
2050+ 268C             >
2050+ 268C             >//              ______________________________________________________________________
2050+ 268C             >//              Heap part
2050+ 268C             >
2050+ 268C             >
2050+ 268C             >                org     (Heap_Ptr & $1FFF) + $E000
2050+ E396             >
2050+ E396             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2050+ E396             >Latest_Definition defl  Heap_Ptr
2050+ E396             >
2050+ E396             >                // dummy db directives used to calculate length of namec
2050+ E396 32 2A       >                db      "2*"
2050+ E398             >len_NFA         defl    $ - temp_NFA
2050+ E398             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2050+ E396             >
2050+ E396 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2050+ E397 32 2A       >                db      "2*"               // name string in 7-bit ascii, but
2050+ E399             >                org     $-1                 // alter last byte of Name just above to set
2050+ E398 AA          >                db      {b $} | END_BIT     // msb as name end
2050+ E399             >
2050+ E399 8F 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2050+ E39B             >Prev_Ptr        defl    Heap_Ptr
2050+ E39B             >
2050+ E39B             >mirror_Ptr      defl    $
2050+ E39B             >
2050+ E39B 8E 26       >                dw      Dict_Ptr + 2        // xt
2050+ E39D             >Heap_Ptr        defl    $ - $E000           // save current HP
2050+ E39D             >
2050+ E39D             >Current_HP      defl  $ - $E000             // used to set HP once!
2050+ E39D             >
2050+ E39D             >//              ______________________________________________________________________
2050+ E39D             >//              Dictionary part
2050+ E39D             >
2050+ E39D             >                org     Dict_Ptr
2050+ 268C             >
2050+ 268C 9B 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2050+ 268E             >
2050+ 268E             >TWO_MUL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2050+ 268E ~           >                call    runcode ; ok        // for primitive definitions  actual code
2050+ 268E ~           >
2050+ 268E ~           >
2050+ 268E             >                endif           ; ok        // for other definitions it "points" the correct handler
2050+ 268E             >                // Use of "; ok" to suppress "warning[fwdref]"
2050+ 268E             >
2050+ 268E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2051+ 268E              Two_Mul_Ptr:
2052+ 268E E1                           pop     hl
2053+ 268F 29                           add     hl, hl
2054+ 2690
2055+ 2690                              psh1
2055+ 2690 E5          >                push    hl
2055+ 2691 DD E9       >                jp      (ix)
2056+ 2693
2057+ 2693              //  ______________________________________________________________________
2058+ 2693              //
2059+ 2693              // 2/           n1 -- n2
2060+ 2693              // halves the top of stack, sign is unchanged
2061+ 2693                              New_Def TWO_DIV, "2/", is_code, is_normal
2061+ 2693             >
2061+ 2693             >Dict_Ptr        defl    $
2061+ 2693             >
2061+ 2693             >//              ______________________________________________________________________
2061+ 2693             >//              Heap part
2061+ 2693             >
2061+ 2693             >
2061+ 2693             >                org     (Heap_Ptr & $1FFF) + $E000
2061+ E39D             >
2061+ E39D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2061+ E39D             >Latest_Definition defl  Heap_Ptr
2061+ E39D             >
2061+ E39D             >                // dummy db directives used to calculate length of namec
2061+ E39D 32 2F       >                db      "2/"
2061+ E39F             >len_NFA         defl    $ - temp_NFA
2061+ E39F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2061+ E39D             >
2061+ E39D 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2061+ E39E 32 2F       >                db      "2/"               // name string in 7-bit ascii, but
2061+ E3A0             >                org     $-1                 // alter last byte of Name just above to set
2061+ E39F AF          >                db      {b $} | END_BIT     // msb as name end
2061+ E3A0             >
2061+ E3A0 96 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2061+ E3A2             >Prev_Ptr        defl    Heap_Ptr
2061+ E3A2             >
2061+ E3A2             >mirror_Ptr      defl    $
2061+ E3A2             >
2061+ E3A2 95 26       >                dw      Dict_Ptr + 2        // xt
2061+ E3A4             >Heap_Ptr        defl    $ - $E000           // save current HP
2061+ E3A4             >
2061+ E3A4             >Current_HP      defl  $ - $E000             // used to set HP once!
2061+ E3A4             >
2061+ E3A4             >//              ______________________________________________________________________
2061+ E3A4             >//              Dictionary part
2061+ E3A4             >
2061+ E3A4             >                org     Dict_Ptr
2061+ 2693             >
2061+ 2693 A2 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2061+ 2695             >
2061+ 2695             >TWO_DIV:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2061+ 2695 ~           >                call    runcode ; ok        // for primitive definitions  actual code
2061+ 2695 ~           >
2061+ 2695 ~           >
2061+ 2695             >                endif           ; ok        // for other definitions it "points" the correct handler
2061+ 2695             >                // Use of "; ok" to suppress "warning[fwdref]"
2061+ 2695             >
2061+ 2695             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2062+ 2695 E1                           pop     hl
2063+ 2696 CB 2C                        sra     h
2064+ 2698 CB 1D                        rr      l
2065+ 269A
2066+ 269A                              psh1
2066+ 269A E5          >                push    hl
2066+ 269B DD E9       >                jp      (ix)
2067+ 269D
2068+ 269D              //  ______________________________________________________________________
2069+ 269D              //
2070+ 269D              // lshift       n1 u -- n2
2071+ 269D              // bit left shift of u bits
2072+ 269D                              New_Def LSHIFT, "LSHIFT", is_code, is_normal
2072+ 269D             >
2072+ 269D             >Dict_Ptr        defl    $
2072+ 269D             >
2072+ 269D             >//              ______________________________________________________________________
2072+ 269D             >//              Heap part
2072+ 269D             >
2072+ 269D             >
2072+ 269D             >                org     (Heap_Ptr & $1FFF) + $E000
2072+ E3A4             >
2072+ E3A4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2072+ E3A4             >Latest_Definition defl  Heap_Ptr
2072+ E3A4             >
2072+ E3A4             >                // dummy db directives used to calculate length of namec
2072+ E3A4 4C 53 48 49 >                db      "LSHIFT"
2072+ E3A8 46 54       >
2072+ E3AA             >len_NFA         defl    $ - temp_NFA
2072+ E3AA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2072+ E3A4             >
2072+ E3A4 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2072+ E3A5 4C 53 48 49 >                db      "LSHIFT"               // name string in 7-bit ascii, but
2072+ E3A9 46 54       >
2072+ E3AB             >                org     $-1                 // alter last byte of Name just above to set
2072+ E3AA D4          >                db      {b $} | END_BIT     // msb as name end
2072+ E3AB             >
2072+ E3AB 9D 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2072+ E3AD             >Prev_Ptr        defl    Heap_Ptr
2072+ E3AD             >
2072+ E3AD             >mirror_Ptr      defl    $
2072+ E3AD             >
2072+ E3AD 9F 26       >                dw      Dict_Ptr + 2        // xt
2072+ E3AF             >Heap_Ptr        defl    $ - $E000           // save current HP
2072+ E3AF             >
2072+ E3AF             >Current_HP      defl  $ - $E000             // used to set HP once!
2072+ E3AF             >
2072+ E3AF             >//              ______________________________________________________________________
2072+ E3AF             >//              Dictionary part
2072+ E3AF             >
2072+ E3AF             >                org     Dict_Ptr
2072+ 269D             >
2072+ 269D AD 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2072+ 269F             >
2072+ 269F             >LSHIFT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2072+ 269F ~           >                call    runcode ; ok        // for primitive definitions  actual code
2072+ 269F ~           >
2072+ 269F ~           >
2072+ 269F             >                endif           ; ok        // for other definitions it "points" the correct handler
2072+ 269F             >                // Use of "; ok" to suppress "warning[fwdref]"
2072+ 269F             >
2072+ 269F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2073+ 269F D9                           exx
2074+ 26A0 C1                           pop     bc
2075+ 26A1 41                           ld      b, c
2076+ 26A2 D1                           pop     de
2077+ 26A3 ED 28                        bsla    de, b
2078+ 26A5 D5                           push    de
2079+ 26A6 D9                           exx
2080+ 26A7                              next
2080+ 26A7 DD E9       >                jp      (ix)
2081+ 26A9
2082+ 26A9              //  ______________________________________________________________________
2083+ 26A9              //
2084+ 26A9              // rshift       n1 u -- n2
2085+ 26A9              // bit right shift of u bits
2086+ 26A9                              New_Def RSHIFT, "RSHIFT", is_code, is_normal
2086+ 26A9             >
2086+ 26A9             >Dict_Ptr        defl    $
2086+ 26A9             >
2086+ 26A9             >//              ______________________________________________________________________
2086+ 26A9             >//              Heap part
2086+ 26A9             >
2086+ 26A9             >
2086+ 26A9             >                org     (Heap_Ptr & $1FFF) + $E000
2086+ E3AF             >
2086+ E3AF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2086+ E3AF             >Latest_Definition defl  Heap_Ptr
2086+ E3AF             >
2086+ E3AF             >                // dummy db directives used to calculate length of namec
2086+ E3AF 52 53 48 49 >                db      "RSHIFT"
2086+ E3B3 46 54       >
2086+ E3B5             >len_NFA         defl    $ - temp_NFA
2086+ E3B5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2086+ E3AF             >
2086+ E3AF 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2086+ E3B0 52 53 48 49 >                db      "RSHIFT"               // name string in 7-bit ascii, but
2086+ E3B4 46 54       >
2086+ E3B6             >                org     $-1                 // alter last byte of Name just above to set
2086+ E3B5 D4          >                db      {b $} | END_BIT     // msb as name end
2086+ E3B6             >
2086+ E3B6 A4 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2086+ E3B8             >Prev_Ptr        defl    Heap_Ptr
2086+ E3B8             >
2086+ E3B8             >mirror_Ptr      defl    $
2086+ E3B8             >
2086+ E3B8 AB 26       >                dw      Dict_Ptr + 2        // xt
2086+ E3BA             >Heap_Ptr        defl    $ - $E000           // save current HP
2086+ E3BA             >
2086+ E3BA             >Current_HP      defl  $ - $E000             // used to set HP once!
2086+ E3BA             >
2086+ E3BA             >//              ______________________________________________________________________
2086+ E3BA             >//              Dictionary part
2086+ E3BA             >
2086+ E3BA             >                org     Dict_Ptr
2086+ 26A9             >
2086+ 26A9 B8 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2086+ 26AB             >
2086+ 26AB             >RSHIFT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2086+ 26AB ~           >                call    runcode ; ok        // for primitive definitions  actual code
2086+ 26AB ~           >
2086+ 26AB ~           >
2086+ 26AB             >                endif           ; ok        // for other definitions it "points" the correct handler
2086+ 26AB             >                // Use of "; ok" to suppress "warning[fwdref]"
2086+ 26AB             >
2086+ 26AB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2087+ 26AB D9                           exx
2088+ 26AC C1                           pop     bc
2089+ 26AD 41                           ld      b, c
2090+ 26AE D1                           pop     de
2091+ 26AF ED 2A                        bsrl    de, b
2092+ 26B1 D5                           push    de
2093+ 26B2 D9                           exx
2094+ 26B3                              next
2094+ 26B3 DD E9       >                jp      (ix)
2095+ 26B5
2096+ 26B5              //  ______________________________________________________________________
2097+ 26B5              //
2098+ 26B5              // cells        n1 -- n2
2099+ 26B5              // decrement by 2 top of stack
2100+ 26B5                              New_Def CELLS, "CELLS", is_code, is_normal
2100+ 26B5             >
2100+ 26B5             >Dict_Ptr        defl    $
2100+ 26B5             >
2100+ 26B5             >//              ______________________________________________________________________
2100+ 26B5             >//              Heap part
2100+ 26B5             >
2100+ 26B5             >
2100+ 26B5             >                org     (Heap_Ptr & $1FFF) + $E000
2100+ E3BA             >
2100+ E3BA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2100+ E3BA             >Latest_Definition defl  Heap_Ptr
2100+ E3BA             >
2100+ E3BA             >                // dummy db directives used to calculate length of namec
2100+ E3BA 43 45 4C 4C >                db      "CELLS"
2100+ E3BE 53          >
2100+ E3BF             >len_NFA         defl    $ - temp_NFA
2100+ E3BF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2100+ E3BA             >
2100+ E3BA 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2100+ E3BB 43 45 4C 4C >                db      "CELLS"               // name string in 7-bit ascii, but
2100+ E3BF 53          >
2100+ E3C0             >                org     $-1                 // alter last byte of Name just above to set
2100+ E3BF D3          >                db      {b $} | END_BIT     // msb as name end
2100+ E3C0             >
2100+ E3C0 AF 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2100+ E3C2             >Prev_Ptr        defl    Heap_Ptr
2100+ E3C2             >
2100+ E3C2             >mirror_Ptr      defl    $
2100+ E3C2             >
2100+ E3C2 B7 26       >                dw      Dict_Ptr + 2        // xt
2100+ E3C4             >Heap_Ptr        defl    $ - $E000           // save current HP
2100+ E3C4             >
2100+ E3C4             >Current_HP      defl  $ - $E000             // used to set HP once!
2100+ E3C4             >
2100+ E3C4             >//              ______________________________________________________________________
2100+ E3C4             >//              Dictionary part
2100+ E3C4             >
2100+ E3C4             >                org     Dict_Ptr
2100+ 26B5             >
2100+ 26B5 C2 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2100+ 26B7             >
2100+ 26B7             >CELLS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2100+ 26B7 ~           >                call    runcode ; ok        // for primitive definitions  actual code
2100+ 26B7 ~           >
2100+ 26B7 ~           >
2100+ 26B7             >                endif           ; ok        // for other definitions it "points" the correct handler
2100+ 26B7             >                // Use of "; ok" to suppress "warning[fwdref]"
2100+ 26B7             >
2100+ 26B7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2101+ 26B7 18 D5                        jr      Two_Mul_Ptr
2102+ 26B9
2103+ 26B9
2104+ 26B9              //  ______________________________________________________________________
2105+ 26B9
# file closed: C:\Zx\CSpect\Projects\vForth17_DOT/source/L0.asm
 140  26B9                              include "L1.asm"
# file opened: C:\Zx\CSpect\Projects\vForth17_DOT/source/L1.asm
   1+ 26B9              //  ______________________________________________________________________
   2+ 26B9              //
   3+ 26B9              //  L1.asm
   4+ 26B9              //
   5+ 26B9              //  Level-1 definitions and derivate
   6+ 26B9              //  ______________________________________________________________________
   7+ 26B9
   8+ 26B9              //  ______________________________________________________________________
   9+ 26B9              //
  10+ 26B9              // :            -- cccc     ( compile time )
  11+ 26B9              //              i*x -- j*x  ( run time )
  12+ 26B9              // Colon Definition
  13+ 26B9                              Colon_Def COLON, ":", is_normal      // has forward-ref
  13+ 26B9             >                New_Def  COLON, ":", Enter_Ptr, is_normal ; ok
  13+ 26B9             >
  13+ 26B9             >Dict_Ptr        defl    $
  13+ 26B9             >
  13+ 26B9             >//              ______________________________________________________________________
  13+ 26B9             >//              Heap part
  13+ 26B9             >
  13+ 26B9             >
  13+ 26B9             >                org     (Heap_Ptr & $1FFF) + $E000
  13+ E3C4             >
  13+ E3C4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13+ E3C4             >Latest_Definition defl  Heap_Ptr
  13+ E3C4             >
  13+ E3C4             >                // dummy db directives used to calculate length of namec
  13+ E3C4 3A          >                db      ":"
  13+ E3C5             >len_NFA         defl    $ - temp_NFA
  13+ E3C5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13+ E3C4             >
  13+ E3C4 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  13+ E3C5 3A          >                db      ":"               // name string in 7-bit ascii, but
  13+ E3C6             >                org     $-1                 // alter last byte of Name just above to set
  13+ E3C5 BA          >                db      {b $} | END_BIT     // msb as name end
  13+ E3C6             >
  13+ E3C6 BA 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  13+ E3C8             >Prev_Ptr        defl    Heap_Ptr
  13+ E3C8             >
  13+ E3C8             >mirror_Ptr      defl    $
  13+ E3C8             >
  13+ E3C8 BB 26       >                dw      Dict_Ptr + 2        // xt
  13+ E3CA             >Heap_Ptr        defl    $ - $E000           // save current HP
  13+ E3CA             >
  13+ E3CA             >Current_HP      defl  $ - $E000             // used to set HP once!
  13+ E3CA             >
  13+ E3CA             >//              ______________________________________________________________________
  13+ E3CA             >//              Dictionary part
  13+ E3CA             >
  13+ E3CA             >                org     Dict_Ptr
  13+ 26B9             >
  13+ 26B9 C8 03       >                dw      mirror_Ptr - $E000 + Heap_offset
  13+ 26BB             >
  13+ 26BB             >COLON:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  13+ 26BB CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  13+ 26BE             >
  13+ 26BE             >
  13+ 26BE             >                endif           ; ok        // for other definitions it "points" the correct handler
  13+ 26BE             >                // Use of "; ok" to suppress "warning[fwdref]"
  13+ 26BE             >
  13+ 26BE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14+ 26BE
  15+ 26BE A8 2A                        dw      QEXEC                   // ?exec
  16+ 26C0 73 2A                        dw      STORE_CSP               // !csp
  17+ 26C2 EC 27 31 26                  dw      CURRENT, FETCH          // current @
  18+ 26C6 E6 27 3B 26                  dw      CONTEXT, STORE          // context !
  19+ 26CA 96 30                        dw      CREATE                  // create  ( forward )
  20+ 26CC 2A 2B                        dw      SMUDGE                  // dmudge
  21+ 26CE 1B 2B                        dw      SQUARED_CLOSE           // ]
  22+ 26D0 66 2B                        dw      C_SEMICOLON_CODE        // ;code ( change the 3-bytes CFA of defining word to call Enter_Ptr )
  23+ 26D2                                                              // ... immediate
  24+ 26D2              Enter_Ptr:
  25+ 26D2                              // via call coded in CFA
  26+ 26D2 EB                           ex      de, hl //**
  27+ 26D3                              // *** ldhlrp
  28+ 26D3 2B                           dec     hl                  // push on Return-Stack current Instruction-Pointer
  29+ 26D4 70                           ld      (hl), b
  30+ 26D5 2B                           dec     hl
  31+ 26D6 71                           ld      (hl), c
  32+ 26D7                              // *** ldrphl
  33+ 26D7 EB                           ex      de, hl //**
  34+ 26D8
  35+ 26D8
  36+ 26D8 C1                           pop     bc                  // points to PFA of "this" word
  37+ 26D9                              next
  37+ 26D9 DD E9       >                jp      (ix)
  38+ 26DB
  39+ 26DB              //  ______________________________________________________________________
  40+ 26DB              //
  41+ 26DB              // ;            --
  42+ 26DB              // Semicolon. End of Colon-Definition. Stack must be balanced.
  43+ 26DB                              Colon_Def SEMICOLON, ";", is_immediate   // has forward-ref
  43+ 26DB             >                New_Def  SEMICOLON, ";", Enter_Ptr, is_immediate ; ok
  43+ 26DB             >
  43+ 26DB             >Dict_Ptr        defl    $
  43+ 26DB             >
  43+ 26DB             >//              ______________________________________________________________________
  43+ 26DB             >//              Heap part
  43+ 26DB             >
  43+ 26DB             >
  43+ 26DB             >                org     (Heap_Ptr & $1FFF) + $E000
  43+ E3CA             >
  43+ E3CA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  43+ E3CA             >Latest_Definition defl  Heap_Ptr
  43+ E3CA             >
  43+ E3CA             >                // dummy db directives used to calculate length of namec
  43+ E3CA 3B          >                db      ";"
  43+ E3CB             >len_NFA         defl    $ - temp_NFA
  43+ E3CB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  43+ E3CA             >
  43+ E3CA C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
  43+ E3CB 3B          >                db      ";"               // name string in 7-bit ascii, but
  43+ E3CC             >                org     $-1                 // alter last byte of Name just above to set
  43+ E3CB BB          >                db      {b $} | END_BIT     // msb as name end
  43+ E3CC             >
  43+ E3CC C4 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  43+ E3CE             >Prev_Ptr        defl    Heap_Ptr
  43+ E3CE             >
  43+ E3CE             >mirror_Ptr      defl    $
  43+ E3CE             >
  43+ E3CE DD 26       >                dw      Dict_Ptr + 2        // xt
  43+ E3D0             >Heap_Ptr        defl    $ - $E000           // save current HP
  43+ E3D0             >
  43+ E3D0             >Current_HP      defl  $ - $E000             // used to set HP once!
  43+ E3D0             >
  43+ E3D0             >//              ______________________________________________________________________
  43+ E3D0             >//              Dictionary part
  43+ E3D0             >
  43+ E3D0             >                org     Dict_Ptr
  43+ 26DB             >
  43+ 26DB CE 03       >                dw      mirror_Ptr - $E000 + Heap_offset
  43+ 26DD             >
  43+ 26DD             >SEMICOLON:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  43+ 26DD CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  43+ 26E0             >
  43+ 26E0             >
  43+ 26E0             >                endif           ; ok        // for other definitions it "points" the correct handler
  43+ 26E0             >                // Use of "; ok" to suppress "warning[fwdref]"
  43+ 26E0             >
  43+ 26E0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  44+ 26E0
  45+ 26E0 C8 2A                        dw      QCSP                    // ?csp
  46+ 26E2 F0 2A F1 24                  dw      COMPILE, EXIT           // [compile] ;s
  47+ 26E6 2A 2B                        dw      SMUDGE                  // smudge
  48+ 26E8 0E 2B                        dw      SQUARED_OPEN            // [
  49+ 26EA F1 24                        dw      EXIT                    // ; immediate
  50+ 26EC
  51+ 26EC              //  ______________________________________________________________________
  52+ 26EC              //
  53+ 26EC              // noop         --
  54+ 26EC
  55+ 26EC                              New_Def NOOP, "NOOP", is_code, is_normal
  55+ 26EC             >
  55+ 26EC             >Dict_Ptr        defl    $
  55+ 26EC             >
  55+ 26EC             >//              ______________________________________________________________________
  55+ 26EC             >//              Heap part
  55+ 26EC             >
  55+ 26EC             >
  55+ 26EC             >                org     (Heap_Ptr & $1FFF) + $E000
  55+ E3D0             >
  55+ E3D0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  55+ E3D0             >Latest_Definition defl  Heap_Ptr
  55+ E3D0             >
  55+ E3D0             >                // dummy db directives used to calculate length of namec
  55+ E3D0 4E 4F 4F 50 >                db      "NOOP"
  55+ E3D4             >len_NFA         defl    $ - temp_NFA
  55+ E3D4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  55+ E3D0             >
  55+ E3D0 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  55+ E3D1 4E 4F 4F 50 >                db      "NOOP"               // name string in 7-bit ascii, but
  55+ E3D5             >                org     $-1                 // alter last byte of Name just above to set
  55+ E3D4 D0          >                db      {b $} | END_BIT     // msb as name end
  55+ E3D5             >
  55+ E3D5 CA 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  55+ E3D7             >Prev_Ptr        defl    Heap_Ptr
  55+ E3D7             >
  55+ E3D7             >mirror_Ptr      defl    $
  55+ E3D7             >
  55+ E3D7 EE 26       >                dw      Dict_Ptr + 2        // xt
  55+ E3D9             >Heap_Ptr        defl    $ - $E000           // save current HP
  55+ E3D9             >
  55+ E3D9             >Current_HP      defl  $ - $E000             // used to set HP once!
  55+ E3D9             >
  55+ E3D9             >//              ______________________________________________________________________
  55+ E3D9             >//              Dictionary part
  55+ E3D9             >
  55+ E3D9             >                org     Dict_Ptr
  55+ 26EC             >
  55+ 26EC D7 03       >                dw      mirror_Ptr - $E000 + Heap_offset
  55+ 26EE             >
  55+ 26EE             >NOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  55+ 26EE ~           >                call    runcode ; ok        // for primitive definitions  actual code
  55+ 26EE ~           >
  55+ 26EE ~           >
  55+ 26EE             >                endif           ; ok        // for other definitions it "points" the correct handler
  55+ 26EE             >                // Use of "; ok" to suppress "warning[fwdref]"
  55+ 26EE             >
  55+ 26EE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  56+ 26EE                              next
  56+ 26EE DD E9       >                jp      (ix)
  57+ 26F0
  58+ 26F0              //  ______________________________________________________________________
  59+ 26F0              //
  60+ 26F0              // constant     n -- cccc     ( compile time )
  61+ 26F0              //              -- n          ( run time )
  62+ 26F0              // Constant definition.
  63+ 26F0                              Colon_Def CONSTANT, "CONSTANT", is_normal   // has forward-ref
  63+ 26F0             >                New_Def  CONSTANT, "CONSTANT", Enter_Ptr, is_normal ; ok
  63+ 26F0             >
  63+ 26F0             >Dict_Ptr        defl    $
  63+ 26F0             >
  63+ 26F0             >//              ______________________________________________________________________
  63+ 26F0             >//              Heap part
  63+ 26F0             >
  63+ 26F0             >
  63+ 26F0             >                org     (Heap_Ptr & $1FFF) + $E000
  63+ E3D9             >
  63+ E3D9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  63+ E3D9             >Latest_Definition defl  Heap_Ptr
  63+ E3D9             >
  63+ E3D9             >                // dummy db directives used to calculate length of namec
  63+ E3D9 43 4F 4E 53 >                db      "CONSTANT"
  63+ E3DD 54 41 4E 54 >
  63+ E3E1             >len_NFA         defl    $ - temp_NFA
  63+ E3E1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  63+ E3D9             >
  63+ E3D9 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  63+ E3DA 43 4F 4E 53 >                db      "CONSTANT"               // name string in 7-bit ascii, but
  63+ E3DE 54 41 4E 54 >
  63+ E3E2             >                org     $-1                 // alter last byte of Name just above to set
  63+ E3E1 D4          >                db      {b $} | END_BIT     // msb as name end
  63+ E3E2             >
  63+ E3E2 D0 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  63+ E3E4             >Prev_Ptr        defl    Heap_Ptr
  63+ E3E4             >
  63+ E3E4             >mirror_Ptr      defl    $
  63+ E3E4             >
  63+ E3E4 F2 26       >                dw      Dict_Ptr + 2        // xt
  63+ E3E6             >Heap_Ptr        defl    $ - $E000           // save current HP
  63+ E3E6             >
  63+ E3E6             >Current_HP      defl  $ - $E000             // used to set HP once!
  63+ E3E6             >
  63+ E3E6             >//              ______________________________________________________________________
  63+ E3E6             >//              Dictionary part
  63+ E3E6             >
  63+ E3E6             >                org     Dict_Ptr
  63+ 26F0             >
  63+ 26F0 E4 03       >                dw      mirror_Ptr - $E000 + Heap_offset
  63+ 26F2             >
  63+ 26F2             >CONSTANT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  63+ 26F2 CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  63+ 26F5             >
  63+ 26F5             >
  63+ 26F5             >                endif           ; ok        // for other definitions it "points" the correct handler
  63+ 26F5             >                // Use of "; ok" to suppress "warning[fwdref]"
  63+ 26F5             >
  63+ 26F5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  64+ 26F5 96 30                        dw      CREATE                  // create
  65+ 26F7 62 28                        dw      COMMA                   // ,    ( at PFA then, store the value )
  66+ 26F9 66 2B                        dw      C_SEMICOLON_CODE        // ;code (  changes the 3-bytes CFA to call Constant_Ptr )
  67+ 26FB              Constant_Ptr:
  68+ 26FB
  69+ 26FB
  70+ 26FB E1                           pop     hl
  71+ 26FC
  72+ 26FC 7E                           ld      a, (hl)
  73+ 26FD 23                           inc     hl
  74+ 26FE 66                           ld      h, (hl)
  75+ 26FF 6F                           ld      l, a
  76+ 2700 E5                           push    hl
  77+ 2701                              next
  77+ 2701 DD E9       >                jp      (ix)
  78+ 2703
  79+ 2703              //  ______________________________________________________________________
  80+ 2703              //
  81+ 2703              // variable     n -- cccc     ( compile time )
  82+ 2703              //              -- a          ( run time )
  83+ 2703              // Variable definition, n is the initial value.
  84+ 2703                              Colon_Def VARIABLE, "VARIABLE", is_normal   // has forward-ref
  84+ 2703             >                New_Def  VARIABLE, "VARIABLE", Enter_Ptr, is_normal ; ok
  84+ 2703             >
  84+ 2703             >Dict_Ptr        defl    $
  84+ 2703             >
  84+ 2703             >//              ______________________________________________________________________
  84+ 2703             >//              Heap part
  84+ 2703             >
  84+ 2703             >
  84+ 2703             >                org     (Heap_Ptr & $1FFF) + $E000
  84+ E3E6             >
  84+ E3E6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  84+ E3E6             >Latest_Definition defl  Heap_Ptr
  84+ E3E6             >
  84+ E3E6             >                // dummy db directives used to calculate length of namec
  84+ E3E6 56 41 52 49 >                db      "VARIABLE"
  84+ E3EA 41 42 4C 45 >
  84+ E3EE             >len_NFA         defl    $ - temp_NFA
  84+ E3EE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  84+ E3E6             >
  84+ E3E6 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  84+ E3E7 56 41 52 49 >                db      "VARIABLE"               // name string in 7-bit ascii, but
  84+ E3EB 41 42 4C 45 >
  84+ E3EF             >                org     $-1                 // alter last byte of Name just above to set
  84+ E3EE C5          >                db      {b $} | END_BIT     // msb as name end
  84+ E3EF             >
  84+ E3EF D9 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  84+ E3F1             >Prev_Ptr        defl    Heap_Ptr
  84+ E3F1             >
  84+ E3F1             >mirror_Ptr      defl    $
  84+ E3F1             >
  84+ E3F1 05 27       >                dw      Dict_Ptr + 2        // xt
  84+ E3F3             >Heap_Ptr        defl    $ - $E000           // save current HP
  84+ E3F3             >
  84+ E3F3             >Current_HP      defl  $ - $E000             // used to set HP once!
  84+ E3F3             >
  84+ E3F3             >//              ______________________________________________________________________
  84+ E3F3             >//              Dictionary part
  84+ E3F3             >
  84+ E3F3             >                org     Dict_Ptr
  84+ 2703             >
  84+ 2703 F1 03       >                dw      mirror_Ptr - $E000 + Heap_offset
  84+ 2705             >
  84+ 2705             >VARIABLE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  84+ 2705 CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  84+ 2708             >
  84+ 2708             >
  84+ 2708             >                endif           ; ok        // for other definitions it "points" the correct handler
  84+ 2708             >                // Use of "; ok" to suppress "warning[fwdref]"
  84+ 2708             >
  84+ 2708             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  85+ 2708
  86+ 2708 27 27                        dw      ZERO
  87+ 270A F2 26                        dw      CONSTANT                // constant
  88+ 270C 66 2B                        dw      C_SEMICOLON_CODE        // ;code ( changes the 3-bytes CFA to call Variable_Ptr )
  89+ 270E              Variable_Ptr:
  90+ 270E
  91+ 270E
  92+ 270E
  93+ 270E
  94+ 270E                              next
  94+ 270E DD E9       >                jp      (ix)
  95+ 2710
  96+ 2710              //  ______________________________________________________________________
  97+ 2710              //
  98+ 2710              // user         b -- cccc     ( compile time )
  99+ 2710              //              -- a          ( run time )
 100+ 2710              // User variable definition
 101+ 2710                              Colon_Def USER, "USER", is_normal
 101+ 2710             >                New_Def  USER, "USER", Enter_Ptr, is_normal ; ok
 101+ 2710             >
 101+ 2710             >Dict_Ptr        defl    $
 101+ 2710             >
 101+ 2710             >//              ______________________________________________________________________
 101+ 2710             >//              Heap part
 101+ 2710             >
 101+ 2710             >
 101+ 2710             >                org     (Heap_Ptr & $1FFF) + $E000
 101+ E3F3             >
 101+ E3F3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 101+ E3F3             >Latest_Definition defl  Heap_Ptr
 101+ E3F3             >
 101+ E3F3             >                // dummy db directives used to calculate length of namec
 101+ E3F3 55 53 45 52 >                db      "USER"
 101+ E3F7             >len_NFA         defl    $ - temp_NFA
 101+ E3F7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 101+ E3F3             >
 101+ E3F3 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 101+ E3F4 55 53 45 52 >                db      "USER"               // name string in 7-bit ascii, but
 101+ E3F8             >                org     $-1                 // alter last byte of Name just above to set
 101+ E3F7 D2          >                db      {b $} | END_BIT     // msb as name end
 101+ E3F8             >
 101+ E3F8 E6 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 101+ E3FA             >Prev_Ptr        defl    Heap_Ptr
 101+ E3FA             >
 101+ E3FA             >mirror_Ptr      defl    $
 101+ E3FA             >
 101+ E3FA 12 27       >                dw      Dict_Ptr + 2        // xt
 101+ E3FC             >Heap_Ptr        defl    $ - $E000           // save current HP
 101+ E3FC             >
 101+ E3FC             >Current_HP      defl  $ - $E000             // used to set HP once!
 101+ E3FC             >
 101+ E3FC             >//              ______________________________________________________________________
 101+ E3FC             >//              Dictionary part
 101+ E3FC             >
 101+ E3FC             >                org     Dict_Ptr
 101+ 2710             >
 101+ 2710 FA 03       >                dw      mirror_Ptr - $E000 + Heap_offset
 101+ 2712             >
 101+ 2712             >USER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 101+ 2712 CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 101+ 2715             >
 101+ 2715             >
 101+ 2715             >                endif           ; ok        // for other definitions it "points" the correct handler
 101+ 2715             >                // Use of "; ok" to suppress "warning[fwdref]"
 101+ 2715             >
 101+ 2715             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 102+ 2715
 103+ 2715 96 30                        dw      CREATE                  // create
 104+ 2717 71 28                        dw      CCOMMA                  // c,
 105+ 2719 66 2B                        dw      C_SEMICOLON_CODE        // ;code () changes the 3-bytes CFA to call User_Ptr )
 106+ 271B
 107+ 271B
 108+ 271B              User_Ptr:
 109+ 271B                              // via call coded in CFA
 110+ 271B E1                           pop     hl
 111+ 271C
 112+ 271C 7E                           ld      a, (hl)
 113+ 271D 2A 2E 20                     ld      hl, (USER_Pointer)
 114+ 2720 ED 31                        add     hl, a
 115+ 2722 E5                           push    hl
 116+ 2723                              next
 116+ 2723 DD E9       >                jp      (ix)
 117+ 2725
 118+ 2725              //  ______________________________________________________________________
 119+ 2725              //
 120+ 2725                              Constant_Def ZERO       ,   "0"     ,   0
 120+ 2725             >                New_Def  ZERO, "0", Constant_Ptr, is_normal
 120+ 2725             >
 120+ 2725             >Dict_Ptr        defl    $
 120+ 2725             >
 120+ 2725             >//              ______________________________________________________________________
 120+ 2725             >//              Heap part
 120+ 2725             >
 120+ 2725             >
 120+ 2725             >                org     (Heap_Ptr & $1FFF) + $E000
 120+ E3FC             >
 120+ E3FC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 120+ E3FC             >Latest_Definition defl  Heap_Ptr
 120+ E3FC             >
 120+ E3FC             >                // dummy db directives used to calculate length of namec
 120+ E3FC 30          >                db      "0"
 120+ E3FD             >len_NFA         defl    $ - temp_NFA
 120+ E3FD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 120+ E3FC             >
 120+ E3FC 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 120+ E3FD 30          >                db      "0"               // name string in 7-bit ascii, but
 120+ E3FE             >                org     $-1                 // alter last byte of Name just above to set
 120+ E3FD B0          >                db      {b $} | END_BIT     // msb as name end
 120+ E3FE             >
 120+ E3FE F3 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 120+ E400             >Prev_Ptr        defl    Heap_Ptr
 120+ E400             >
 120+ E400             >mirror_Ptr      defl    $
 120+ E400             >
 120+ E400 27 27       >                dw      Dict_Ptr + 2        // xt
 120+ E402             >Heap_Ptr        defl    $ - $E000           // save current HP
 120+ E402             >
 120+ E402             >Current_HP      defl  $ - $E000             // used to set HP once!
 120+ E402             >
 120+ E402             >//              ______________________________________________________________________
 120+ E402             >//              Dictionary part
 120+ E402             >
 120+ E402             >                org     Dict_Ptr
 120+ 2725             >
 120+ 2725 00 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 120+ 2727             >
 120+ 2727             >ZERO:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 120+ 2727 CD FB 26    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 120+ 272A             >
 120+ 272A             >
 120+ 272A             >                endif           ; ok        // for other definitions it "points" the correct handler
 120+ 272A             >                // Use of "; ok" to suppress "warning[fwdref]"
 120+ 272A             >
 120+ 272A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 120+ 272A 00 00       >                dw      0
 121+ 272C                              Constant_Def ONE        ,   "1"     ,   1
 121+ 272C             >                New_Def  ONE, "1", Constant_Ptr, is_normal
 121+ 272C             >
 121+ 272C             >Dict_Ptr        defl    $
 121+ 272C             >
 121+ 272C             >//              ______________________________________________________________________
 121+ 272C             >//              Heap part
 121+ 272C             >
 121+ 272C             >
 121+ 272C             >                org     (Heap_Ptr & $1FFF) + $E000
 121+ E402             >
 121+ E402             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 121+ E402             >Latest_Definition defl  Heap_Ptr
 121+ E402             >
 121+ E402             >                // dummy db directives used to calculate length of namec
 121+ E402 31          >                db      "1"
 121+ E403             >len_NFA         defl    $ - temp_NFA
 121+ E403             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 121+ E402             >
 121+ E402 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 121+ E403 31          >                db      "1"               // name string in 7-bit ascii, but
 121+ E404             >                org     $-1                 // alter last byte of Name just above to set
 121+ E403 B1          >                db      {b $} | END_BIT     // msb as name end
 121+ E404             >
 121+ E404 FC 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 121+ E406             >Prev_Ptr        defl    Heap_Ptr
 121+ E406             >
 121+ E406             >mirror_Ptr      defl    $
 121+ E406             >
 121+ E406 2E 27       >                dw      Dict_Ptr + 2        // xt
 121+ E408             >Heap_Ptr        defl    $ - $E000           // save current HP
 121+ E408             >
 121+ E408             >Current_HP      defl  $ - $E000             // used to set HP once!
 121+ E408             >
 121+ E408             >//              ______________________________________________________________________
 121+ E408             >//              Dictionary part
 121+ E408             >
 121+ E408             >                org     Dict_Ptr
 121+ 272C             >
 121+ 272C 06 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 121+ 272E             >
 121+ 272E             >ONE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 121+ 272E CD FB 26    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 121+ 2731             >
 121+ 2731             >
 121+ 2731             >                endif           ; ok        // for other definitions it "points" the correct handler
 121+ 2731             >                // Use of "; ok" to suppress "warning[fwdref]"
 121+ 2731             >
 121+ 2731             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 121+ 2731 01 00       >                dw      1
 122+ 2733                              Constant_Def TWO        ,   "2"     ,   2
 122+ 2733             >                New_Def  TWO, "2", Constant_Ptr, is_normal
 122+ 2733             >
 122+ 2733             >Dict_Ptr        defl    $
 122+ 2733             >
 122+ 2733             >//              ______________________________________________________________________
 122+ 2733             >//              Heap part
 122+ 2733             >
 122+ 2733             >
 122+ 2733             >                org     (Heap_Ptr & $1FFF) + $E000
 122+ E408             >
 122+ E408             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 122+ E408             >Latest_Definition defl  Heap_Ptr
 122+ E408             >
 122+ E408             >                // dummy db directives used to calculate length of namec
 122+ E408 32          >                db      "2"
 122+ E409             >len_NFA         defl    $ - temp_NFA
 122+ E409             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 122+ E408             >
 122+ E408 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 122+ E409 32          >                db      "2"               // name string in 7-bit ascii, but
 122+ E40A             >                org     $-1                 // alter last byte of Name just above to set
 122+ E409 B2          >                db      {b $} | END_BIT     // msb as name end
 122+ E40A             >
 122+ E40A 02 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 122+ E40C             >Prev_Ptr        defl    Heap_Ptr
 122+ E40C             >
 122+ E40C             >mirror_Ptr      defl    $
 122+ E40C             >
 122+ E40C 35 27       >                dw      Dict_Ptr + 2        // xt
 122+ E40E             >Heap_Ptr        defl    $ - $E000           // save current HP
 122+ E40E             >
 122+ E40E             >Current_HP      defl  $ - $E000             // used to set HP once!
 122+ E40E             >
 122+ E40E             >//              ______________________________________________________________________
 122+ E40E             >//              Dictionary part
 122+ E40E             >
 122+ E40E             >                org     Dict_Ptr
 122+ 2733             >
 122+ 2733 0C 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 122+ 2735             >
 122+ 2735             >TWO:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 122+ 2735 CD FB 26    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 122+ 2738             >
 122+ 2738             >
 122+ 2738             >                endif           ; ok        // for other definitions it "points" the correct handler
 122+ 2738             >                // Use of "; ok" to suppress "warning[fwdref]"
 122+ 2738             >
 122+ 2738             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 122+ 2738 02 00       >                dw      2
 123+ 273A                              Constant_Def THREE      ,   "3"     ,   3
 123+ 273A             >                New_Def  THREE, "3", Constant_Ptr, is_normal
 123+ 273A             >
 123+ 273A             >Dict_Ptr        defl    $
 123+ 273A             >
 123+ 273A             >//              ______________________________________________________________________
 123+ 273A             >//              Heap part
 123+ 273A             >
 123+ 273A             >
 123+ 273A             >                org     (Heap_Ptr & $1FFF) + $E000
 123+ E40E             >
 123+ E40E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 123+ E40E             >Latest_Definition defl  Heap_Ptr
 123+ E40E             >
 123+ E40E             >                // dummy db directives used to calculate length of namec
 123+ E40E 33          >                db      "3"
 123+ E40F             >len_NFA         defl    $ - temp_NFA
 123+ E40F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 123+ E40E             >
 123+ E40E 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 123+ E40F 33          >                db      "3"               // name string in 7-bit ascii, but
 123+ E410             >                org     $-1                 // alter last byte of Name just above to set
 123+ E40F B3          >                db      {b $} | END_BIT     // msb as name end
 123+ E410             >
 123+ E410 08 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 123+ E412             >Prev_Ptr        defl    Heap_Ptr
 123+ E412             >
 123+ E412             >mirror_Ptr      defl    $
 123+ E412             >
 123+ E412 3C 27       >                dw      Dict_Ptr + 2        // xt
 123+ E414             >Heap_Ptr        defl    $ - $E000           // save current HP
 123+ E414             >
 123+ E414             >Current_HP      defl  $ - $E000             // used to set HP once!
 123+ E414             >
 123+ E414             >//              ______________________________________________________________________
 123+ E414             >//              Dictionary part
 123+ E414             >
 123+ E414             >                org     Dict_Ptr
 123+ 273A             >
 123+ 273A 12 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 123+ 273C             >
 123+ 273C             >THREE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 123+ 273C CD FB 26    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 123+ 273F             >
 123+ 273F             >
 123+ 273F             >                endif           ; ok        // for other definitions it "points" the correct handler
 123+ 273F             >                // Use of "; ok" to suppress "warning[fwdref]"
 123+ 273F             >
 123+ 273F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 123+ 273F 03 00       >                dw      3
 124+ 2741                              Constant_Def NEG_ONE    ,   "-1"    ,  -1
 124+ 2741             >                New_Def  NEG_ONE, "-1", Constant_Ptr, is_normal
 124+ 2741             >
 124+ 2741             >Dict_Ptr        defl    $
 124+ 2741             >
 124+ 2741             >//              ______________________________________________________________________
 124+ 2741             >//              Heap part
 124+ 2741             >
 124+ 2741             >
 124+ 2741             >                org     (Heap_Ptr & $1FFF) + $E000
 124+ E414             >
 124+ E414             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 124+ E414             >Latest_Definition defl  Heap_Ptr
 124+ E414             >
 124+ E414             >                // dummy db directives used to calculate length of namec
 124+ E414 2D 31       >                db      "-1"
 124+ E416             >len_NFA         defl    $ - temp_NFA
 124+ E416             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 124+ E414             >
 124+ E414 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 124+ E415 2D 31       >                db      "-1"               // name string in 7-bit ascii, but
 124+ E417             >                org     $-1                 // alter last byte of Name just above to set
 124+ E416 B1          >                db      {b $} | END_BIT     // msb as name end
 124+ E417             >
 124+ E417 0E 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 124+ E419             >Prev_Ptr        defl    Heap_Ptr
 124+ E419             >
 124+ E419             >mirror_Ptr      defl    $
 124+ E419             >
 124+ E419 43 27       >                dw      Dict_Ptr + 2        // xt
 124+ E41B             >Heap_Ptr        defl    $ - $E000           // save current HP
 124+ E41B             >
 124+ E41B             >Current_HP      defl  $ - $E000             // used to set HP once!
 124+ E41B             >
 124+ E41B             >//              ______________________________________________________________________
 124+ E41B             >//              Dictionary part
 124+ E41B             >
 124+ E41B             >                org     Dict_Ptr
 124+ 2741             >
 124+ 2741 19 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 124+ 2743             >
 124+ 2743             >NEG_ONE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 124+ 2743 CD FB 26    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 124+ 2746             >
 124+ 2746             >
 124+ 2746             >                endif           ; ok        // for other definitions it "points" the correct handler
 124+ 2746             >                // Use of "; ok" to suppress "warning[fwdref]"
 124+ 2746             >
 124+ 2746             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 124+ 2746 FF FF       >                dw      -1
 125+ 2748                              Constant_Def BL         ,   "BL"    , $20
 125+ 2748             >                New_Def  BL, "BL", Constant_Ptr, is_normal
 125+ 2748             >
 125+ 2748             >Dict_Ptr        defl    $
 125+ 2748             >
 125+ 2748             >//              ______________________________________________________________________
 125+ 2748             >//              Heap part
 125+ 2748             >
 125+ 2748             >
 125+ 2748             >                org     (Heap_Ptr & $1FFF) + $E000
 125+ E41B             >
 125+ E41B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 125+ E41B             >Latest_Definition defl  Heap_Ptr
 125+ E41B             >
 125+ E41B             >                // dummy db directives used to calculate length of namec
 125+ E41B 42 4C       >                db      "BL"
 125+ E41D             >len_NFA         defl    $ - temp_NFA
 125+ E41D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 125+ E41B             >
 125+ E41B 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 125+ E41C 42 4C       >                db      "BL"               // name string in 7-bit ascii, but
 125+ E41E             >                org     $-1                 // alter last byte of Name just above to set
 125+ E41D CC          >                db      {b $} | END_BIT     // msb as name end
 125+ E41E             >
 125+ E41E 14 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 125+ E420             >Prev_Ptr        defl    Heap_Ptr
 125+ E420             >
 125+ E420             >mirror_Ptr      defl    $
 125+ E420             >
 125+ E420 4A 27       >                dw      Dict_Ptr + 2        // xt
 125+ E422             >Heap_Ptr        defl    $ - $E000           // save current HP
 125+ E422             >
 125+ E422             >Current_HP      defl  $ - $E000             // used to set HP once!
 125+ E422             >
 125+ E422             >//              ______________________________________________________________________
 125+ E422             >//              Dictionary part
 125+ E422             >
 125+ E422             >                org     Dict_Ptr
 125+ 2748             >
 125+ 2748 20 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 125+ 274A             >
 125+ 274A             >BL:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 125+ 274A CD FB 26    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 125+ 274D             >
 125+ 274D             >
 125+ 274D             >                endif           ; ok        // for other definitions it "points" the correct handler
 125+ 274D             >                // Use of "; ok" to suppress "warning[fwdref]"
 125+ 274D             >
 125+ 274D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 125+ 274D 20 00       >                dw      $20
 126+ 274F                              Constant_Def CL         ,   "C/L"   ,  64
 126+ 274F             >                New_Def  CL, "C/L", Constant_Ptr, is_normal
 126+ 274F             >
 126+ 274F             >Dict_Ptr        defl    $
 126+ 274F             >
 126+ 274F             >//              ______________________________________________________________________
 126+ 274F             >//              Heap part
 126+ 274F             >
 126+ 274F             >
 126+ 274F             >                org     (Heap_Ptr & $1FFF) + $E000
 126+ E422             >
 126+ E422             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 126+ E422             >Latest_Definition defl  Heap_Ptr
 126+ E422             >
 126+ E422             >                // dummy db directives used to calculate length of namec
 126+ E422 43 2F 4C    >                db      "C/L"
 126+ E425             >len_NFA         defl    $ - temp_NFA
 126+ E425             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 126+ E422             >
 126+ E422 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 126+ E423 43 2F 4C    >                db      "C/L"               // name string in 7-bit ascii, but
 126+ E426             >                org     $-1                 // alter last byte of Name just above to set
 126+ E425 CC          >                db      {b $} | END_BIT     // msb as name end
 126+ E426             >
 126+ E426 1B 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 126+ E428             >Prev_Ptr        defl    Heap_Ptr
 126+ E428             >
 126+ E428             >mirror_Ptr      defl    $
 126+ E428             >
 126+ E428 51 27       >                dw      Dict_Ptr + 2        // xt
 126+ E42A             >Heap_Ptr        defl    $ - $E000           // save current HP
 126+ E42A             >
 126+ E42A             >Current_HP      defl  $ - $E000             // used to set HP once!
 126+ E42A             >
 126+ E42A             >//              ______________________________________________________________________
 126+ E42A             >//              Dictionary part
 126+ E42A             >
 126+ E42A             >                org     Dict_Ptr
 126+ 274F             >
 126+ 274F 28 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 126+ 2751             >
 126+ 2751             >CL:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 126+ 2751 CD FB 26    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 126+ 2754             >
 126+ 2754             >
 126+ 2754             >                endif           ; ok        // for other definitions it "points" the correct handler
 126+ 2754             >                // Use of "; ok" to suppress "warning[fwdref]"
 126+ 2754             >
 126+ 2754             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 126+ 2754 40 00       >                dw      64
 127+ 2756                              Constant_Def BBUF       ,   "B/BUF" , 512
 127+ 2756             >                New_Def  BBUF, "B/BUF", Constant_Ptr, is_normal
 127+ 2756             >
 127+ 2756             >Dict_Ptr        defl    $
 127+ 2756             >
 127+ 2756             >//              ______________________________________________________________________
 127+ 2756             >//              Heap part
 127+ 2756             >
 127+ 2756             >
 127+ 2756             >                org     (Heap_Ptr & $1FFF) + $E000
 127+ E42A             >
 127+ E42A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 127+ E42A             >Latest_Definition defl  Heap_Ptr
 127+ E42A             >
 127+ E42A             >                // dummy db directives used to calculate length of namec
 127+ E42A 42 2F 42 55 >                db      "B/BUF"
 127+ E42E 46          >
 127+ E42F             >len_NFA         defl    $ - temp_NFA
 127+ E42F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 127+ E42A             >
 127+ E42A 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 127+ E42B 42 2F 42 55 >                db      "B/BUF"               // name string in 7-bit ascii, but
 127+ E42F 46          >
 127+ E430             >                org     $-1                 // alter last byte of Name just above to set
 127+ E42F C6          >                db      {b $} | END_BIT     // msb as name end
 127+ E430             >
 127+ E430 22 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 127+ E432             >Prev_Ptr        defl    Heap_Ptr
 127+ E432             >
 127+ E432             >mirror_Ptr      defl    $
 127+ E432             >
 127+ E432 58 27       >                dw      Dict_Ptr + 2        // xt
 127+ E434             >Heap_Ptr        defl    $ - $E000           // save current HP
 127+ E434             >
 127+ E434             >Current_HP      defl  $ - $E000             // used to set HP once!
 127+ E434             >
 127+ E434             >//              ______________________________________________________________________
 127+ E434             >//              Dictionary part
 127+ E434             >
 127+ E434             >                org     Dict_Ptr
 127+ 2756             >
 127+ 2756 32 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 127+ 2758             >
 127+ 2758             >BBUF:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 127+ 2758 CD FB 26    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 127+ 275B             >
 127+ 275B             >
 127+ 275B             >                endif           ; ok        // for other definitions it "points" the correct handler
 127+ 275B             >                // Use of "; ok" to suppress "warning[fwdref]"
 127+ 275B             >
 127+ 275B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 127+ 275B 00 02       >                dw      512
 128+ 275D                              Constant_Def BSCR       ,   "B/SCR" ,   2
 128+ 275D             >                New_Def  BSCR, "B/SCR", Constant_Ptr, is_normal
 128+ 275D             >
 128+ 275D             >Dict_Ptr        defl    $
 128+ 275D             >
 128+ 275D             >//              ______________________________________________________________________
 128+ 275D             >//              Heap part
 128+ 275D             >
 128+ 275D             >
 128+ 275D             >                org     (Heap_Ptr & $1FFF) + $E000
 128+ E434             >
 128+ E434             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 128+ E434             >Latest_Definition defl  Heap_Ptr
 128+ E434             >
 128+ E434             >                // dummy db directives used to calculate length of namec
 128+ E434 42 2F 53 43 >                db      "B/SCR"
 128+ E438 52          >
 128+ E439             >len_NFA         defl    $ - temp_NFA
 128+ E439             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 128+ E434             >
 128+ E434 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 128+ E435 42 2F 53 43 >                db      "B/SCR"               // name string in 7-bit ascii, but
 128+ E439 52          >
 128+ E43A             >                org     $-1                 // alter last byte of Name just above to set
 128+ E439 D2          >                db      {b $} | END_BIT     // msb as name end
 128+ E43A             >
 128+ E43A 2A 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 128+ E43C             >Prev_Ptr        defl    Heap_Ptr
 128+ E43C             >
 128+ E43C             >mirror_Ptr      defl    $
 128+ E43C             >
 128+ E43C 5F 27       >                dw      Dict_Ptr + 2        // xt
 128+ E43E             >Heap_Ptr        defl    $ - $E000           // save current HP
 128+ E43E             >
 128+ E43E             >Current_HP      defl  $ - $E000             // used to set HP once!
 128+ E43E             >
 128+ E43E             >//              ______________________________________________________________________
 128+ E43E             >//              Dictionary part
 128+ E43E             >
 128+ E43E             >                org     Dict_Ptr
 128+ 275D             >
 128+ 275D 3C 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 128+ 275F             >
 128+ 275F             >BSCR:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 128+ 275F CD FB 26    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 128+ 2762             >
 128+ 2762             >
 128+ 2762             >                endif           ; ok        // for other definitions it "points" the correct handler
 128+ 2762             >                // Use of "; ok" to suppress "warning[fwdref]"
 128+ 2762             >
 128+ 2762             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 128+ 2762 02 00       >                dw      2
 129+ 2764                              Constant_Def LSCR       ,   "L/SCR" ,  16
 129+ 2764             >                New_Def  LSCR, "L/SCR", Constant_Ptr, is_normal
 129+ 2764             >
 129+ 2764             >Dict_Ptr        defl    $
 129+ 2764             >
 129+ 2764             >//              ______________________________________________________________________
 129+ 2764             >//              Heap part
 129+ 2764             >
 129+ 2764             >
 129+ 2764             >                org     (Heap_Ptr & $1FFF) + $E000
 129+ E43E             >
 129+ E43E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 129+ E43E             >Latest_Definition defl  Heap_Ptr
 129+ E43E             >
 129+ E43E             >                // dummy db directives used to calculate length of namec
 129+ E43E 4C 2F 53 43 >                db      "L/SCR"
 129+ E442 52          >
 129+ E443             >len_NFA         defl    $ - temp_NFA
 129+ E443             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 129+ E43E             >
 129+ E43E 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 129+ E43F 4C 2F 53 43 >                db      "L/SCR"               // name string in 7-bit ascii, but
 129+ E443 52          >
 129+ E444             >                org     $-1                 // alter last byte of Name just above to set
 129+ E443 D2          >                db      {b $} | END_BIT     // msb as name end
 129+ E444             >
 129+ E444 34 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 129+ E446             >Prev_Ptr        defl    Heap_Ptr
 129+ E446             >
 129+ E446             >mirror_Ptr      defl    $
 129+ E446             >
 129+ E446 66 27       >                dw      Dict_Ptr + 2        // xt
 129+ E448             >Heap_Ptr        defl    $ - $E000           // save current HP
 129+ E448             >
 129+ E448             >Current_HP      defl  $ - $E000             // used to set HP once!
 129+ E448             >
 129+ E448             >//              ______________________________________________________________________
 129+ E448             >//              Dictionary part
 129+ E448             >
 129+ E448             >                org     Dict_Ptr
 129+ 2764             >
 129+ 2764 46 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 129+ 2766             >
 129+ 2766             >LSCR:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 129+ 2766 CD FB 26    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 129+ 2769             >
 129+ 2769             >
 129+ 2769             >                endif           ; ok        // for other definitions it "points" the correct handler
 129+ 2769             >                // Use of "; ok" to suppress "warning[fwdref]"
 129+ 2769             >
 129+ 2769             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 129+ 2769 10 00       >                dw      16
 130+ 276B
 131+ 276B              //  ______________________________________________________________________
 132+ 276B              //
 133+ 276B              // +origin         --
 134+ 276B              //              Colon_Def PLUS_ORIGIN, "+ORIGIN", is_normal
 135+ 276B              //              dw      LIT, Cold_origin        // [ hex 6366 ] literal
 136+ 276B              //              dw      PLUS                    // +
 137+ 276B              //              dw      EXIT                    // ;
 138+ 276B                              New_Def  PLUS_ORIGIN, "+ORIGIN", is_code, is_normal
 138+ 276B             >
 138+ 276B             >Dict_Ptr        defl    $
 138+ 276B             >
 138+ 276B             >//              ______________________________________________________________________
 138+ 276B             >//              Heap part
 138+ 276B             >
 138+ 276B             >
 138+ 276B             >                org     (Heap_Ptr & $1FFF) + $E000
 138+ E448             >
 138+ E448             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 138+ E448             >Latest_Definition defl  Heap_Ptr
 138+ E448             >
 138+ E448             >                // dummy db directives used to calculate length of namec
 138+ E448 2B 4F 52 49 >                db      "+ORIGIN"
 138+ E44C 47 49 4E    >
 138+ E44F             >len_NFA         defl    $ - temp_NFA
 138+ E44F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 138+ E448             >
 138+ E448 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 138+ E449 2B 4F 52 49 >                db      "+ORIGIN"               // name string in 7-bit ascii, but
 138+ E44D 47 49 4E    >
 138+ E450             >                org     $-1                 // alter last byte of Name just above to set
 138+ E44F CE          >                db      {b $} | END_BIT     // msb as name end
 138+ E450             >
 138+ E450 3E 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 138+ E452             >Prev_Ptr        defl    Heap_Ptr
 138+ E452             >
 138+ E452             >mirror_Ptr      defl    $
 138+ E452             >
 138+ E452 6D 27       >                dw      Dict_Ptr + 2        // xt
 138+ E454             >Heap_Ptr        defl    $ - $E000           // save current HP
 138+ E454             >
 138+ E454             >Current_HP      defl  $ - $E000             // used to set HP once!
 138+ E454             >
 138+ E454             >//              ______________________________________________________________________
 138+ E454             >//              Dictionary part
 138+ E454             >
 138+ E454             >                org     Dict_Ptr
 138+ 276B             >
 138+ 276B 52 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 138+ 276D             >
 138+ 276D             >PLUS_ORIGIN:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 138+ 276D ~           >                call    runcode ; ok        // for primitive definitions  actual code
 138+ 276D ~           >
 138+ 276D ~           >
 138+ 276D             >                endif           ; ok        // for other definitions it "points" the correct handler
 138+ 276D             >                // Use of "; ok" to suppress "warning[fwdref]"
 138+ 276D             >
 138+ 276D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 139+ 276D D9                           exx
 140+ 276E E1                           pop     hl
 141+ 276F 11 00 20                     ld      de, Cold_origin
 142+ 2772 19                           add     hl, de
 143+ 2773 E5                           push    hl
 144+ 2774 D9                           exx
 145+ 2775                              next
 145+ 2775 DD E9       >                jp      (ix)
 146+ 2777
 147+ 2777
 148+ 2777              //  ______________________________________________________________________
 149+ 2777              //
 150+ 2777                              Constant_Def CNEXT      ,   "(NEXT)", Next_Ptr
 150+ 2777             >                New_Def  CNEXT, "(NEXT)", Constant_Ptr, is_normal
 150+ 2777             >
 150+ 2777             >Dict_Ptr        defl    $
 150+ 2777             >
 150+ 2777             >//              ______________________________________________________________________
 150+ 2777             >//              Heap part
 150+ 2777             >
 150+ 2777             >
 150+ 2777             >                org     (Heap_Ptr & $1FFF) + $E000
 150+ E454             >
 150+ E454             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 150+ E454             >Latest_Definition defl  Heap_Ptr
 150+ E454             >
 150+ E454             >                // dummy db directives used to calculate length of namec
 150+ E454 28 4E 45 58 >                db      "(NEXT)"
 150+ E458 54 29       >
 150+ E45A             >len_NFA         defl    $ - temp_NFA
 150+ E45A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 150+ E454             >
 150+ E454 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 150+ E455 28 4E 45 58 >                db      "(NEXT)"               // name string in 7-bit ascii, but
 150+ E459 54 29       >
 150+ E45B             >                org     $-1                 // alter last byte of Name just above to set
 150+ E45A A9          >                db      {b $} | END_BIT     // msb as name end
 150+ E45B             >
 150+ E45B 48 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 150+ E45D             >Prev_Ptr        defl    Heap_Ptr
 150+ E45D             >
 150+ E45D             >mirror_Ptr      defl    $
 150+ E45D             >
 150+ E45D 79 27       >                dw      Dict_Ptr + 2        // xt
 150+ E45F             >Heap_Ptr        defl    $ - $E000           // save current HP
 150+ E45F             >
 150+ E45F             >Current_HP      defl  $ - $E000             // used to set HP once!
 150+ E45F             >
 150+ E45F             >//              ______________________________________________________________________
 150+ E45F             >//              Dictionary part
 150+ E45F             >
 150+ E45F             >                org     Dict_Ptr
 150+ 2777             >
 150+ 2777 5D 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 150+ 2779             >
 150+ 2779             >CNEXT:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 150+ 2779 CD FB 26    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 150+ 277C             >
 150+ 277C             >
 150+ 277C             >                endif           ; ok        // for other definitions it "points" the correct handler
 150+ 277C             >                // Use of "; ok" to suppress "warning[fwdref]"
 150+ 277C             >
 150+ 277C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 150+ 277C 34 20       >                dw      Next_Ptr
 151+ 277E
 152+ 277E              //  ______________________________________________________________________
 153+ 277E              //
 154+ 277E
 155+ 277E                              User_Def S0         , "S0"        , 06 // starting value of Stack-Pointer
 155+ 277E             >                New_Def  S0, "S0", User_Ptr, is_normal
 155+ 277E             >
 155+ 277E             >Dict_Ptr        defl    $
 155+ 277E             >
 155+ 277E             >//              ______________________________________________________________________
 155+ 277E             >//              Heap part
 155+ 277E             >
 155+ 277E             >
 155+ 277E             >                org     (Heap_Ptr & $1FFF) + $E000
 155+ E45F             >
 155+ E45F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 155+ E45F             >Latest_Definition defl  Heap_Ptr
 155+ E45F             >
 155+ E45F             >                // dummy db directives used to calculate length of namec
 155+ E45F 53 30       >                db      "S0"
 155+ E461             >len_NFA         defl    $ - temp_NFA
 155+ E461             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 155+ E45F             >
 155+ E45F 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 155+ E460 53 30       >                db      "S0"               // name string in 7-bit ascii, but
 155+ E462             >                org     $-1                 // alter last byte of Name just above to set
 155+ E461 B0          >                db      {b $} | END_BIT     // msb as name end
 155+ E462             >
 155+ E462 54 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 155+ E464             >Prev_Ptr        defl    Heap_Ptr
 155+ E464             >
 155+ E464             >mirror_Ptr      defl    $
 155+ E464             >
 155+ E464 80 27       >                dw      Dict_Ptr + 2        // xt
 155+ E466             >Heap_Ptr        defl    $ - $E000           // save current HP
 155+ E466             >
 155+ E466             >Current_HP      defl  $ - $E000             // used to set HP once!
 155+ E466             >
 155+ E466             >//              ______________________________________________________________________
 155+ E466             >//              Dictionary part
 155+ E466             >
 155+ E466             >                org     Dict_Ptr
 155+ 277E             >
 155+ 277E 64 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 155+ 2780             >
 155+ 2780             >S0:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 155+ 2780 CD 1B 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 155+ 2783             >
 155+ 2783             >
 155+ 2783             >                endif           ; ok        // for other definitions it "points" the correct handler
 155+ 2783             >                // Use of "; ok" to suppress "warning[fwdref]"
 155+ 2783             >
 155+ 2783             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 155+ 2783 06          >                db      06
 156+ 2784                              User_Def R0         , "R0"        , 08 // starting value of Return-Pointer
 156+ 2784             >                New_Def  R0, "R0", User_Ptr, is_normal
 156+ 2784             >
 156+ 2784             >Dict_Ptr        defl    $
 156+ 2784             >
 156+ 2784             >//              ______________________________________________________________________
 156+ 2784             >//              Heap part
 156+ 2784             >
 156+ 2784             >
 156+ 2784             >                org     (Heap_Ptr & $1FFF) + $E000
 156+ E466             >
 156+ E466             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 156+ E466             >Latest_Definition defl  Heap_Ptr
 156+ E466             >
 156+ E466             >                // dummy db directives used to calculate length of namec
 156+ E466 52 30       >                db      "R0"
 156+ E468             >len_NFA         defl    $ - temp_NFA
 156+ E468             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 156+ E466             >
 156+ E466 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 156+ E467 52 30       >                db      "R0"               // name string in 7-bit ascii, but
 156+ E469             >                org     $-1                 // alter last byte of Name just above to set
 156+ E468 B0          >                db      {b $} | END_BIT     // msb as name end
 156+ E469             >
 156+ E469 5F 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 156+ E46B             >Prev_Ptr        defl    Heap_Ptr
 156+ E46B             >
 156+ E46B             >mirror_Ptr      defl    $
 156+ E46B             >
 156+ E46B 86 27       >                dw      Dict_Ptr + 2        // xt
 156+ E46D             >Heap_Ptr        defl    $ - $E000           // save current HP
 156+ E46D             >
 156+ E46D             >Current_HP      defl  $ - $E000             // used to set HP once!
 156+ E46D             >
 156+ E46D             >//              ______________________________________________________________________
 156+ E46D             >//              Dictionary part
 156+ E46D             >
 156+ E46D             >                org     Dict_Ptr
 156+ 2784             >
 156+ 2784 6B 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 156+ 2786             >
 156+ 2786             >R0:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 156+ 2786 CD 1B 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 156+ 2789             >
 156+ 2789             >
 156+ 2789             >                endif           ; ok        // for other definitions it "points" the correct handler
 156+ 2789             >                // Use of "; ok" to suppress "warning[fwdref]"
 156+ 2789             >
 156+ 2789             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 156+ 2789 08          >                db      08
 157+ 278A                              User_Def TIB        , "TIB"       , 10 // input terminal buffer address
 157+ 278A             >                New_Def  TIB, "TIB", User_Ptr, is_normal
 157+ 278A             >
 157+ 278A             >Dict_Ptr        defl    $
 157+ 278A             >
 157+ 278A             >//              ______________________________________________________________________
 157+ 278A             >//              Heap part
 157+ 278A             >
 157+ 278A             >
 157+ 278A             >                org     (Heap_Ptr & $1FFF) + $E000
 157+ E46D             >
 157+ E46D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 157+ E46D             >Latest_Definition defl  Heap_Ptr
 157+ E46D             >
 157+ E46D             >                // dummy db directives used to calculate length of namec
 157+ E46D 54 49 42    >                db      "TIB"
 157+ E470             >len_NFA         defl    $ - temp_NFA
 157+ E470             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 157+ E46D             >
 157+ E46D 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 157+ E46E 54 49 42    >                db      "TIB"               // name string in 7-bit ascii, but
 157+ E471             >                org     $-1                 // alter last byte of Name just above to set
 157+ E470 C2          >                db      {b $} | END_BIT     // msb as name end
 157+ E471             >
 157+ E471 66 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 157+ E473             >Prev_Ptr        defl    Heap_Ptr
 157+ E473             >
 157+ E473             >mirror_Ptr      defl    $
 157+ E473             >
 157+ E473 8C 27       >                dw      Dict_Ptr + 2        // xt
 157+ E475             >Heap_Ptr        defl    $ - $E000           // save current HP
 157+ E475             >
 157+ E475             >Current_HP      defl  $ - $E000             // used to set HP once!
 157+ E475             >
 157+ E475             >//              ______________________________________________________________________
 157+ E475             >//              Dictionary part
 157+ E475             >
 157+ E475             >                org     Dict_Ptr
 157+ 278A             >
 157+ 278A 73 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 157+ 278C             >
 157+ 278C             >TIB:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 157+ 278C CD 1B 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 157+ 278F             >
 157+ 278F             >
 157+ 278F             >                endif           ; ok        // for other definitions it "points" the correct handler
 157+ 278F             >                // Use of "; ok" to suppress "warning[fwdref]"
 157+ 278F             >
 157+ 278F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 157+ 278F 0A          >                db      10
 158+ 2790                              User_Def WIDTH      , "WIDTH"     , 12 // maximum number of characters for a word name
 158+ 2790             >                New_Def  WIDTH, "WIDTH", User_Ptr, is_normal
 158+ 2790             >
 158+ 2790             >Dict_Ptr        defl    $
 158+ 2790             >
 158+ 2790             >//              ______________________________________________________________________
 158+ 2790             >//              Heap part
 158+ 2790             >
 158+ 2790             >
 158+ 2790             >                org     (Heap_Ptr & $1FFF) + $E000
 158+ E475             >
 158+ E475             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 158+ E475             >Latest_Definition defl  Heap_Ptr
 158+ E475             >
 158+ E475             >                // dummy db directives used to calculate length of namec
 158+ E475 57 49 44 54 >                db      "WIDTH"
 158+ E479 48          >
 158+ E47A             >len_NFA         defl    $ - temp_NFA
 158+ E47A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 158+ E475             >
 158+ E475 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 158+ E476 57 49 44 54 >                db      "WIDTH"               // name string in 7-bit ascii, but
 158+ E47A 48          >
 158+ E47B             >                org     $-1                 // alter last byte of Name just above to set
 158+ E47A C8          >                db      {b $} | END_BIT     // msb as name end
 158+ E47B             >
 158+ E47B 6D 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 158+ E47D             >Prev_Ptr        defl    Heap_Ptr
 158+ E47D             >
 158+ E47D             >mirror_Ptr      defl    $
 158+ E47D             >
 158+ E47D 92 27       >                dw      Dict_Ptr + 2        // xt
 158+ E47F             >Heap_Ptr        defl    $ - $E000           // save current HP
 158+ E47F             >
 158+ E47F             >Current_HP      defl  $ - $E000             // used to set HP once!
 158+ E47F             >
 158+ E47F             >//              ______________________________________________________________________
 158+ E47F             >//              Dictionary part
 158+ E47F             >
 158+ E47F             >                org     Dict_Ptr
 158+ 2790             >
 158+ 2790 7D 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 158+ 2792             >
 158+ 2792             >WIDTH:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 158+ 2792 CD 1B 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 158+ 2795             >
 158+ 2795             >
 158+ 2795             >                endif           ; ok        // for other definitions it "points" the correct handler
 158+ 2795             >                // Use of "; ok" to suppress "warning[fwdref]"
 158+ 2795             >
 158+ 2795             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 158+ 2795 0C          >                db      12
 159+ 2796                              User_Def WARNING    , "WARNING"   , 14 // error reporting method: 0 base, 1 verbose
 159+ 2796             >                New_Def  WARNING, "WARNING", User_Ptr, is_normal
 159+ 2796             >
 159+ 2796             >Dict_Ptr        defl    $
 159+ 2796             >
 159+ 2796             >//              ______________________________________________________________________
 159+ 2796             >//              Heap part
 159+ 2796             >
 159+ 2796             >
 159+ 2796             >                org     (Heap_Ptr & $1FFF) + $E000
 159+ E47F             >
 159+ E47F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 159+ E47F             >Latest_Definition defl  Heap_Ptr
 159+ E47F             >
 159+ E47F             >                // dummy db directives used to calculate length of namec
 159+ E47F 57 41 52 4E >                db      "WARNING"
 159+ E483 49 4E 47    >
 159+ E486             >len_NFA         defl    $ - temp_NFA
 159+ E486             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 159+ E47F             >
 159+ E47F 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 159+ E480 57 41 52 4E >                db      "WARNING"               // name string in 7-bit ascii, but
 159+ E484 49 4E 47    >
 159+ E487             >                org     $-1                 // alter last byte of Name just above to set
 159+ E486 C7          >                db      {b $} | END_BIT     // msb as name end
 159+ E487             >
 159+ E487 75 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 159+ E489             >Prev_Ptr        defl    Heap_Ptr
 159+ E489             >
 159+ E489             >mirror_Ptr      defl    $
 159+ E489             >
 159+ E489 98 27       >                dw      Dict_Ptr + 2        // xt
 159+ E48B             >Heap_Ptr        defl    $ - $E000           // save current HP
 159+ E48B             >
 159+ E48B             >Current_HP      defl  $ - $E000             // used to set HP once!
 159+ E48B             >
 159+ E48B             >//              ______________________________________________________________________
 159+ E48B             >//              Dictionary part
 159+ E48B             >
 159+ E48B             >                org     Dict_Ptr
 159+ 2796             >
 159+ 2796 89 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 159+ 2798             >
 159+ 2798             >WARNING:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 159+ 2798 CD 1B 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 159+ 279B             >
 159+ 279B             >
 159+ 279B             >                endif           ; ok        // for other definitions it "points" the correct handler
 159+ 279B             >                // Use of "; ok" to suppress "warning[fwdref]"
 159+ 279B             >
 159+ 279B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 159+ 279B 0E          >                db      14
 160+ 279C                              User_Def FENCE      , "FENCE"     , 16 // minimum address where FORGET can work
 160+ 279C             >                New_Def  FENCE, "FENCE", User_Ptr, is_normal
 160+ 279C             >
 160+ 279C             >Dict_Ptr        defl    $
 160+ 279C             >
 160+ 279C             >//              ______________________________________________________________________
 160+ 279C             >//              Heap part
 160+ 279C             >
 160+ 279C             >
 160+ 279C             >                org     (Heap_Ptr & $1FFF) + $E000
 160+ E48B             >
 160+ E48B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 160+ E48B             >Latest_Definition defl  Heap_Ptr
 160+ E48B             >
 160+ E48B             >                // dummy db directives used to calculate length of namec
 160+ E48B 46 45 4E 43 >                db      "FENCE"
 160+ E48F 45          >
 160+ E490             >len_NFA         defl    $ - temp_NFA
 160+ E490             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 160+ E48B             >
 160+ E48B 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 160+ E48C 46 45 4E 43 >                db      "FENCE"               // name string in 7-bit ascii, but
 160+ E490 45          >
 160+ E491             >                org     $-1                 // alter last byte of Name just above to set
 160+ E490 C5          >                db      {b $} | END_BIT     // msb as name end
 160+ E491             >
 160+ E491 7F 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 160+ E493             >Prev_Ptr        defl    Heap_Ptr
 160+ E493             >
 160+ E493             >mirror_Ptr      defl    $
 160+ E493             >
 160+ E493 9E 27       >                dw      Dict_Ptr + 2        // xt
 160+ E495             >Heap_Ptr        defl    $ - $E000           // save current HP
 160+ E495             >
 160+ E495             >Current_HP      defl  $ - $E000             // used to set HP once!
 160+ E495             >
 160+ E495             >//              ______________________________________________________________________
 160+ E495             >//              Dictionary part
 160+ E495             >
 160+ E495             >                org     Dict_Ptr
 160+ 279C             >
 160+ 279C 93 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 160+ 279E             >
 160+ 279E             >FENCE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 160+ 279E CD 1B 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 160+ 27A1             >
 160+ 27A1             >
 160+ 27A1             >                endif           ; ok        // for other definitions it "points" the correct handler
 160+ 27A1             >                // Use of "; ok" to suppress "warning[fwdref]"
 160+ 27A1             >
 160+ 27A1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 160+ 27A1 10          >                db      16
 161+ 27A2                              User_Def DP         , "DP"        , 18 // Dictionary Pointer
 161+ 27A2             >                New_Def  DP, "DP", User_Ptr, is_normal
 161+ 27A2             >
 161+ 27A2             >Dict_Ptr        defl    $
 161+ 27A2             >
 161+ 27A2             >//              ______________________________________________________________________
 161+ 27A2             >//              Heap part
 161+ 27A2             >
 161+ 27A2             >
 161+ 27A2             >                org     (Heap_Ptr & $1FFF) + $E000
 161+ E495             >
 161+ E495             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 161+ E495             >Latest_Definition defl  Heap_Ptr
 161+ E495             >
 161+ E495             >                // dummy db directives used to calculate length of namec
 161+ E495 44 50       >                db      "DP"
 161+ E497             >len_NFA         defl    $ - temp_NFA
 161+ E497             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 161+ E495             >
 161+ E495 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 161+ E496 44 50       >                db      "DP"               // name string in 7-bit ascii, but
 161+ E498             >                org     $-1                 // alter last byte of Name just above to set
 161+ E497 D0          >                db      {b $} | END_BIT     // msb as name end
 161+ E498             >
 161+ E498 8B 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 161+ E49A             >Prev_Ptr        defl    Heap_Ptr
 161+ E49A             >
 161+ E49A             >mirror_Ptr      defl    $
 161+ E49A             >
 161+ E49A A4 27       >                dw      Dict_Ptr + 2        // xt
 161+ E49C             >Heap_Ptr        defl    $ - $E000           // save current HP
 161+ E49C             >
 161+ E49C             >Current_HP      defl  $ - $E000             // used to set HP once!
 161+ E49C             >
 161+ E49C             >//              ______________________________________________________________________
 161+ E49C             >//              Dictionary part
 161+ E49C             >
 161+ E49C             >                org     Dict_Ptr
 161+ 27A2             >
 161+ 27A2 9A 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 161+ 27A4             >
 161+ 27A4             >DP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 161+ 27A4 CD 1B 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 161+ 27A7             >
 161+ 27A7             >
 161+ 27A7             >                endif           ; ok        // for other definitions it "points" the correct handler
 161+ 27A7             >                // Use of "; ok" to suppress "warning[fwdref]"
 161+ 27A7             >
 161+ 27A7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 161+ 27A7 12          >                db      18
 162+ 27A8                              User_Def VOC_LINK   , "VOC-LINK"  , 20 // pointer to the latest vocabulary
 162+ 27A8             >                New_Def  VOC_LINK, "VOC-LINK", User_Ptr, is_normal
 162+ 27A8             >
 162+ 27A8             >Dict_Ptr        defl    $
 162+ 27A8             >
 162+ 27A8             >//              ______________________________________________________________________
 162+ 27A8             >//              Heap part
 162+ 27A8             >
 162+ 27A8             >
 162+ 27A8             >                org     (Heap_Ptr & $1FFF) + $E000
 162+ E49C             >
 162+ E49C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 162+ E49C             >Latest_Definition defl  Heap_Ptr
 162+ E49C             >
 162+ E49C             >                // dummy db directives used to calculate length of namec
 162+ E49C 56 4F 43 2D >                db      "VOC-LINK"
 162+ E4A0 4C 49 4E 4B >
 162+ E4A4             >len_NFA         defl    $ - temp_NFA
 162+ E4A4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 162+ E49C             >
 162+ E49C 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 162+ E49D 56 4F 43 2D >                db      "VOC-LINK"               // name string in 7-bit ascii, but
 162+ E4A1 4C 49 4E 4B >
 162+ E4A5             >                org     $-1                 // alter last byte of Name just above to set
 162+ E4A4 CB          >                db      {b $} | END_BIT     // msb as name end
 162+ E4A5             >
 162+ E4A5 95 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 162+ E4A7             >Prev_Ptr        defl    Heap_Ptr
 162+ E4A7             >
 162+ E4A7             >mirror_Ptr      defl    $
 162+ E4A7             >
 162+ E4A7 AA 27       >                dw      Dict_Ptr + 2        // xt
 162+ E4A9             >Heap_Ptr        defl    $ - $E000           // save current HP
 162+ E4A9             >
 162+ E4A9             >Current_HP      defl  $ - $E000             // used to set HP once!
 162+ E4A9             >
 162+ E4A9             >//              ______________________________________________________________________
 162+ E4A9             >//              Dictionary part
 162+ E4A9             >
 162+ E4A9             >                org     Dict_Ptr
 162+ 27A8             >
 162+ 27A8 A7 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 162+ 27AA             >
 162+ 27AA             >VOC_LINK:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 162+ 27AA CD 1B 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 162+ 27AD             >
 162+ 27AD             >
 162+ 27AD             >                endif           ; ok        // for other definitions it "points" the correct handler
 162+ 27AD             >                // Use of "; ok" to suppress "warning[fwdref]"
 162+ 27AD             >
 162+ 27AD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 162+ 27AD 14          >                db      20
 163+ 27AE                              User_Def FIRST      , "FIRST"     , 22 // address of first buffer
 163+ 27AE             >                New_Def  FIRST, "FIRST", User_Ptr, is_normal
 163+ 27AE             >
 163+ 27AE             >Dict_Ptr        defl    $
 163+ 27AE             >
 163+ 27AE             >//              ______________________________________________________________________
 163+ 27AE             >//              Heap part
 163+ 27AE             >
 163+ 27AE             >
 163+ 27AE             >                org     (Heap_Ptr & $1FFF) + $E000
 163+ E4A9             >
 163+ E4A9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 163+ E4A9             >Latest_Definition defl  Heap_Ptr
 163+ E4A9             >
 163+ E4A9             >                // dummy db directives used to calculate length of namec
 163+ E4A9 46 49 52 53 >                db      "FIRST"
 163+ E4AD 54          >
 163+ E4AE             >len_NFA         defl    $ - temp_NFA
 163+ E4AE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 163+ E4A9             >
 163+ E4A9 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 163+ E4AA 46 49 52 53 >                db      "FIRST"               // name string in 7-bit ascii, but
 163+ E4AE 54          >
 163+ E4AF             >                org     $-1                 // alter last byte of Name just above to set
 163+ E4AE D4          >                db      {b $} | END_BIT     // msb as name end
 163+ E4AF             >
 163+ E4AF 9C 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 163+ E4B1             >Prev_Ptr        defl    Heap_Ptr
 163+ E4B1             >
 163+ E4B1             >mirror_Ptr      defl    $
 163+ E4B1             >
 163+ E4B1 B0 27       >                dw      Dict_Ptr + 2        // xt
 163+ E4B3             >Heap_Ptr        defl    $ - $E000           // save current HP
 163+ E4B3             >
 163+ E4B3             >Current_HP      defl  $ - $E000             // used to set HP once!
 163+ E4B3             >
 163+ E4B3             >//              ______________________________________________________________________
 163+ E4B3             >//              Dictionary part
 163+ E4B3             >
 163+ E4B3             >                org     Dict_Ptr
 163+ 27AE             >
 163+ 27AE B1 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 163+ 27B0             >
 163+ 27B0             >FIRST:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 163+ 27B0 CD 1B 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 163+ 27B3             >
 163+ 27B3             >
 163+ 27B3             >                endif           ; ok        // for other definitions it "points" the correct handler
 163+ 27B3             >                // Use of "; ok" to suppress "warning[fwdref]"
 163+ 27B3             >
 163+ 27B3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 163+ 27B3 16          >                db      22
 164+ 27B4                              User_Def LIMIT      , "LIMIT"     , 24 // address of last buffer
 164+ 27B4             >                New_Def  LIMIT, "LIMIT", User_Ptr, is_normal
 164+ 27B4             >
 164+ 27B4             >Dict_Ptr        defl    $
 164+ 27B4             >
 164+ 27B4             >//              ______________________________________________________________________
 164+ 27B4             >//              Heap part
 164+ 27B4             >
 164+ 27B4             >
 164+ 27B4             >                org     (Heap_Ptr & $1FFF) + $E000
 164+ E4B3             >
 164+ E4B3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 164+ E4B3             >Latest_Definition defl  Heap_Ptr
 164+ E4B3             >
 164+ E4B3             >                // dummy db directives used to calculate length of namec
 164+ E4B3 4C 49 4D 49 >                db      "LIMIT"
 164+ E4B7 54          >
 164+ E4B8             >len_NFA         defl    $ - temp_NFA
 164+ E4B8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 164+ E4B3             >
 164+ E4B3 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 164+ E4B4 4C 49 4D 49 >                db      "LIMIT"               // name string in 7-bit ascii, but
 164+ E4B8 54          >
 164+ E4B9             >                org     $-1                 // alter last byte of Name just above to set
 164+ E4B8 D4          >                db      {b $} | END_BIT     // msb as name end
 164+ E4B9             >
 164+ E4B9 A9 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 164+ E4BB             >Prev_Ptr        defl    Heap_Ptr
 164+ E4BB             >
 164+ E4BB             >mirror_Ptr      defl    $
 164+ E4BB             >
 164+ E4BB B6 27       >                dw      Dict_Ptr + 2        // xt
 164+ E4BD             >Heap_Ptr        defl    $ - $E000           // save current HP
 164+ E4BD             >
 164+ E4BD             >Current_HP      defl  $ - $E000             // used to set HP once!
 164+ E4BD             >
 164+ E4BD             >//              ______________________________________________________________________
 164+ E4BD             >//              Dictionary part
 164+ E4BD             >
 164+ E4BD             >                org     Dict_Ptr
 164+ 27B4             >
 164+ 27B4 BB 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 164+ 27B6             >
 164+ 27B6             >LIMIT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 164+ 27B6 CD 1B 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 164+ 27B9             >
 164+ 27B9             >
 164+ 27B9             >                endif           ; ok        // for other definitions it "points" the correct handler
 164+ 27B9             >                // Use of "; ok" to suppress "warning[fwdref]"
 164+ 27B9             >
 164+ 27B9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 164+ 27B9 18          >                db      24
 165+ 27BA                              User_Def HP         , "HP"        , 26 // heap-pointer address
 165+ 27BA             >                New_Def  HP, "HP", User_Ptr, is_normal
 165+ 27BA             >
 165+ 27BA             >Dict_Ptr        defl    $
 165+ 27BA             >
 165+ 27BA             >//              ______________________________________________________________________
 165+ 27BA             >//              Heap part
 165+ 27BA             >
 165+ 27BA             >
 165+ 27BA             >                org     (Heap_Ptr & $1FFF) + $E000
 165+ E4BD             >
 165+ E4BD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 165+ E4BD             >Latest_Definition defl  Heap_Ptr
 165+ E4BD             >
 165+ E4BD             >                // dummy db directives used to calculate length of namec
 165+ E4BD 48 50       >                db      "HP"
 165+ E4BF             >len_NFA         defl    $ - temp_NFA
 165+ E4BF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 165+ E4BD             >
 165+ E4BD 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 165+ E4BE 48 50       >                db      "HP"               // name string in 7-bit ascii, but
 165+ E4C0             >                org     $-1                 // alter last byte of Name just above to set
 165+ E4BF D0          >                db      {b $} | END_BIT     // msb as name end
 165+ E4C0             >
 165+ E4C0 B3 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 165+ E4C2             >Prev_Ptr        defl    Heap_Ptr
 165+ E4C2             >
 165+ E4C2             >mirror_Ptr      defl    $
 165+ E4C2             >
 165+ E4C2 BC 27       >                dw      Dict_Ptr + 2        // xt
 165+ E4C4             >Heap_Ptr        defl    $ - $E000           // save current HP
 165+ E4C4             >
 165+ E4C4             >Current_HP      defl  $ - $E000             // used to set HP once!
 165+ E4C4             >
 165+ E4C4             >//              ______________________________________________________________________
 165+ E4C4             >//              Dictionary part
 165+ E4C4             >
 165+ E4C4             >                org     Dict_Ptr
 165+ 27BA             >
 165+ 27BA C2 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 165+ 27BC             >
 165+ 27BC             >HP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 165+ 27BC CD 1B 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 165+ 27BF             >
 165+ 27BF             >
 165+ 27BF             >                endif           ; ok        // for other definitions it "points" the correct handler
 165+ 27BF             >                // Use of "; ok" to suppress "warning[fwdref]"
 165+ 27BF             >
 165+ 27BF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 165+ 27BF 1A          >                db      26
 166+ 27C0                              User_Def NMODE      , "NMODE"     , 28 // number mode: 0 integer, 1 floating point
 166+ 27C0             >                New_Def  NMODE, "NMODE", User_Ptr, is_normal
 166+ 27C0             >
 166+ 27C0             >Dict_Ptr        defl    $
 166+ 27C0             >
 166+ 27C0             >//              ______________________________________________________________________
 166+ 27C0             >//              Heap part
 166+ 27C0             >
 166+ 27C0             >
 166+ 27C0             >                org     (Heap_Ptr & $1FFF) + $E000
 166+ E4C4             >
 166+ E4C4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 166+ E4C4             >Latest_Definition defl  Heap_Ptr
 166+ E4C4             >
 166+ E4C4             >                // dummy db directives used to calculate length of namec
 166+ E4C4 4E 4D 4F 44 >                db      "NMODE"
 166+ E4C8 45          >
 166+ E4C9             >len_NFA         defl    $ - temp_NFA
 166+ E4C9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 166+ E4C4             >
 166+ E4C4 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 166+ E4C5 4E 4D 4F 44 >                db      "NMODE"               // name string in 7-bit ascii, but
 166+ E4C9 45          >
 166+ E4CA             >                org     $-1                 // alter last byte of Name just above to set
 166+ E4C9 C5          >                db      {b $} | END_BIT     // msb as name end
 166+ E4CA             >
 166+ E4CA BD 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 166+ E4CC             >Prev_Ptr        defl    Heap_Ptr
 166+ E4CC             >
 166+ E4CC             >mirror_Ptr      defl    $
 166+ E4CC             >
 166+ E4CC C2 27       >                dw      Dict_Ptr + 2        // xt
 166+ E4CE             >Heap_Ptr        defl    $ - $E000           // save current HP
 166+ E4CE             >
 166+ E4CE             >Current_HP      defl  $ - $E000             // used to set HP once!
 166+ E4CE             >
 166+ E4CE             >//              ______________________________________________________________________
 166+ E4CE             >//              Dictionary part
 166+ E4CE             >
 166+ E4CE             >                org     Dict_Ptr
 166+ 27C0             >
 166+ 27C0 CC 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 166+ 27C2             >
 166+ 27C2             >NMODE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 166+ 27C2 CD 1B 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 166+ 27C5             >
 166+ 27C5             >
 166+ 27C5             >                endif           ; ok        // for other definitions it "points" the correct handler
 166+ 27C5             >                // Use of "; ok" to suppress "warning[fwdref]"
 166+ 27C5             >
 166+ 27C5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 166+ 27C5 1C          >                db      28
 167+ 27C6                              User_Def BLK        , "BLK"       , 30 // block number to be interpreted. 0 for terminal
 167+ 27C6             >                New_Def  BLK, "BLK", User_Ptr, is_normal
 167+ 27C6             >
 167+ 27C6             >Dict_Ptr        defl    $
 167+ 27C6             >
 167+ 27C6             >//              ______________________________________________________________________
 167+ 27C6             >//              Heap part
 167+ 27C6             >
 167+ 27C6             >
 167+ 27C6             >                org     (Heap_Ptr & $1FFF) + $E000
 167+ E4CE             >
 167+ E4CE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 167+ E4CE             >Latest_Definition defl  Heap_Ptr
 167+ E4CE             >
 167+ E4CE             >                // dummy db directives used to calculate length of namec
 167+ E4CE 42 4C 4B    >                db      "BLK"
 167+ E4D1             >len_NFA         defl    $ - temp_NFA
 167+ E4D1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 167+ E4CE             >
 167+ E4CE 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 167+ E4CF 42 4C 4B    >                db      "BLK"               // name string in 7-bit ascii, but
 167+ E4D2             >                org     $-1                 // alter last byte of Name just above to set
 167+ E4D1 CB          >                db      {b $} | END_BIT     // msb as name end
 167+ E4D2             >
 167+ E4D2 C4 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 167+ E4D4             >Prev_Ptr        defl    Heap_Ptr
 167+ E4D4             >
 167+ E4D4             >mirror_Ptr      defl    $
 167+ E4D4             >
 167+ E4D4 C8 27       >                dw      Dict_Ptr + 2        // xt
 167+ E4D6             >Heap_Ptr        defl    $ - $E000           // save current HP
 167+ E4D6             >
 167+ E4D6             >Current_HP      defl  $ - $E000             // used to set HP once!
 167+ E4D6             >
 167+ E4D6             >//              ______________________________________________________________________
 167+ E4D6             >//              Dictionary part
 167+ E4D6             >
 167+ E4D6             >                org     Dict_Ptr
 167+ 27C6             >
 167+ 27C6 D4 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 167+ 27C8             >
 167+ 27C8             >BLK:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 167+ 27C8 CD 1B 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 167+ 27CB             >
 167+ 27CB             >
 167+ 27CB             >                endif           ; ok        // for other definitions it "points" the correct handler
 167+ 27CB             >                // Use of "; ok" to suppress "warning[fwdref]"
 167+ 27CB             >
 167+ 27CB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 167+ 27CB 1E          >                db      30
 168+ 27CC                              User_Def TO_IN      , ">IN"       , 32 // incremented when consuming input buffer
 168+ 27CC             >                New_Def  TO_IN, ">IN", User_Ptr, is_normal
 168+ 27CC             >
 168+ 27CC             >Dict_Ptr        defl    $
 168+ 27CC             >
 168+ 27CC             >//              ______________________________________________________________________
 168+ 27CC             >//              Heap part
 168+ 27CC             >
 168+ 27CC             >
 168+ 27CC             >                org     (Heap_Ptr & $1FFF) + $E000
 168+ E4D6             >
 168+ E4D6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 168+ E4D6             >Latest_Definition defl  Heap_Ptr
 168+ E4D6             >
 168+ E4D6             >                // dummy db directives used to calculate length of namec
 168+ E4D6 3E 49 4E    >                db      ">IN"
 168+ E4D9             >len_NFA         defl    $ - temp_NFA
 168+ E4D9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 168+ E4D6             >
 168+ E4D6 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 168+ E4D7 3E 49 4E    >                db      ">IN"               // name string in 7-bit ascii, but
 168+ E4DA             >                org     $-1                 // alter last byte of Name just above to set
 168+ E4D9 CE          >                db      {b $} | END_BIT     // msb as name end
 168+ E4DA             >
 168+ E4DA CE 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 168+ E4DC             >Prev_Ptr        defl    Heap_Ptr
 168+ E4DC             >
 168+ E4DC             >mirror_Ptr      defl    $
 168+ E4DC             >
 168+ E4DC CE 27       >                dw      Dict_Ptr + 2        // xt
 168+ E4DE             >Heap_Ptr        defl    $ - $E000           // save current HP
 168+ E4DE             >
 168+ E4DE             >Current_HP      defl  $ - $E000             // used to set HP once!
 168+ E4DE             >
 168+ E4DE             >//              ______________________________________________________________________
 168+ E4DE             >//              Dictionary part
 168+ E4DE             >
 168+ E4DE             >                org     Dict_Ptr
 168+ 27CC             >
 168+ 27CC DC 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 168+ 27CE             >
 168+ 27CE             >TO_IN:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 168+ 27CE CD 1B 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 168+ 27D1             >
 168+ 27D1             >
 168+ 27D1             >                endif           ; ok        // for other definitions it "points" the correct handler
 168+ 27D1             >                // Use of "; ok" to suppress "warning[fwdref]"
 168+ 27D1             >
 168+ 27D1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 168+ 27D1 20          >                db      32
 169+ 27D2                              User_Def OUT        , "OUT"       , 34 // incremented when sending to output
 169+ 27D2             >                New_Def  OUT, "OUT", User_Ptr, is_normal
 169+ 27D2             >
 169+ 27D2             >Dict_Ptr        defl    $
 169+ 27D2             >
 169+ 27D2             >//              ______________________________________________________________________
 169+ 27D2             >//              Heap part
 169+ 27D2             >
 169+ 27D2             >
 169+ 27D2             >                org     (Heap_Ptr & $1FFF) + $E000
 169+ E4DE             >
 169+ E4DE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 169+ E4DE             >Latest_Definition defl  Heap_Ptr
 169+ E4DE             >
 169+ E4DE             >                // dummy db directives used to calculate length of namec
 169+ E4DE 4F 55 54    >                db      "OUT"
 169+ E4E1             >len_NFA         defl    $ - temp_NFA
 169+ E4E1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 169+ E4DE             >
 169+ E4DE 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 169+ E4DF 4F 55 54    >                db      "OUT"               // name string in 7-bit ascii, but
 169+ E4E2             >                org     $-1                 // alter last byte of Name just above to set
 169+ E4E1 D4          >                db      {b $} | END_BIT     // msb as name end
 169+ E4E2             >
 169+ E4E2 D6 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 169+ E4E4             >Prev_Ptr        defl    Heap_Ptr
 169+ E4E4             >
 169+ E4E4             >mirror_Ptr      defl    $
 169+ E4E4             >
 169+ E4E4 D4 27       >                dw      Dict_Ptr + 2        // xt
 169+ E4E6             >Heap_Ptr        defl    $ - $E000           // save current HP
 169+ E4E6             >
 169+ E4E6             >Current_HP      defl  $ - $E000             // used to set HP once!
 169+ E4E6             >
 169+ E4E6             >//              ______________________________________________________________________
 169+ E4E6             >//              Dictionary part
 169+ E4E6             >
 169+ E4E6             >                org     Dict_Ptr
 169+ 27D2             >
 169+ 27D2 E4 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 169+ 27D4             >
 169+ 27D4             >OUT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 169+ 27D4 CD 1B 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 169+ 27D7             >
 169+ 27D7             >
 169+ 27D7             >                endif           ; ok        // for other definitions it "points" the correct handler
 169+ 27D7             >                // Use of "; ok" to suppress "warning[fwdref]"
 169+ 27D7             >
 169+ 27D7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 169+ 27D7 22          >                db      34
 170+ 27D8                              User_Def SCR        , "SCR"       , 36 // latest screen retreieved by LIST
 170+ 27D8             >                New_Def  SCR, "SCR", User_Ptr, is_normal
 170+ 27D8             >
 170+ 27D8             >Dict_Ptr        defl    $
 170+ 27D8             >
 170+ 27D8             >//              ______________________________________________________________________
 170+ 27D8             >//              Heap part
 170+ 27D8             >
 170+ 27D8             >
 170+ 27D8             >                org     (Heap_Ptr & $1FFF) + $E000
 170+ E4E6             >
 170+ E4E6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 170+ E4E6             >Latest_Definition defl  Heap_Ptr
 170+ E4E6             >
 170+ E4E6             >                // dummy db directives used to calculate length of namec
 170+ E4E6 53 43 52    >                db      "SCR"
 170+ E4E9             >len_NFA         defl    $ - temp_NFA
 170+ E4E9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 170+ E4E6             >
 170+ E4E6 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 170+ E4E7 53 43 52    >                db      "SCR"               // name string in 7-bit ascii, but
 170+ E4EA             >                org     $-1                 // alter last byte of Name just above to set
 170+ E4E9 D2          >                db      {b $} | END_BIT     // msb as name end
 170+ E4EA             >
 170+ E4EA DE 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 170+ E4EC             >Prev_Ptr        defl    Heap_Ptr
 170+ E4EC             >
 170+ E4EC             >mirror_Ptr      defl    $
 170+ E4EC             >
 170+ E4EC DA 27       >                dw      Dict_Ptr + 2        // xt
 170+ E4EE             >Heap_Ptr        defl    $ - $E000           // save current HP
 170+ E4EE             >
 170+ E4EE             >Current_HP      defl  $ - $E000             // used to set HP once!
 170+ E4EE             >
 170+ E4EE             >//              ______________________________________________________________________
 170+ E4EE             >//              Dictionary part
 170+ E4EE             >
 170+ E4EE             >                org     Dict_Ptr
 170+ 27D8             >
 170+ 27D8 EC 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 170+ 27DA             >
 170+ 27DA             >SCR:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 170+ 27DA CD 1B 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 170+ 27DD             >
 170+ 27DD             >
 170+ 27DD             >                endif           ; ok        // for other definitions it "points" the correct handler
 170+ 27DD             >                // Use of "; ok" to suppress "warning[fwdref]"
 170+ 27DD             >
 170+ 27DD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 170+ 27DD 24          >                db      36
 171+ 27DE                              User_Def OFFSET     , "OFFSET"    , 38 //
 171+ 27DE             >                New_Def  OFFSET, "OFFSET", User_Ptr, is_normal
 171+ 27DE             >
 171+ 27DE             >Dict_Ptr        defl    $
 171+ 27DE             >
 171+ 27DE             >//              ______________________________________________________________________
 171+ 27DE             >//              Heap part
 171+ 27DE             >
 171+ 27DE             >
 171+ 27DE             >                org     (Heap_Ptr & $1FFF) + $E000
 171+ E4EE             >
 171+ E4EE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 171+ E4EE             >Latest_Definition defl  Heap_Ptr
 171+ E4EE             >
 171+ E4EE             >                // dummy db directives used to calculate length of namec
 171+ E4EE 4F 46 46 53 >                db      "OFFSET"
 171+ E4F2 45 54       >
 171+ E4F4             >len_NFA         defl    $ - temp_NFA
 171+ E4F4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 171+ E4EE             >
 171+ E4EE 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 171+ E4EF 4F 46 46 53 >                db      "OFFSET"               // name string in 7-bit ascii, but
 171+ E4F3 45 54       >
 171+ E4F5             >                org     $-1                 // alter last byte of Name just above to set
 171+ E4F4 D4          >                db      {b $} | END_BIT     // msb as name end
 171+ E4F5             >
 171+ E4F5 E6 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 171+ E4F7             >Prev_Ptr        defl    Heap_Ptr
 171+ E4F7             >
 171+ E4F7             >mirror_Ptr      defl    $
 171+ E4F7             >
 171+ E4F7 E0 27       >                dw      Dict_Ptr + 2        // xt
 171+ E4F9             >Heap_Ptr        defl    $ - $E000           // save current HP
 171+ E4F9             >
 171+ E4F9             >Current_HP      defl  $ - $E000             // used to set HP once!
 171+ E4F9             >
 171+ E4F9             >//              ______________________________________________________________________
 171+ E4F9             >//              Dictionary part
 171+ E4F9             >
 171+ E4F9             >                org     Dict_Ptr
 171+ 27DE             >
 171+ 27DE F7 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 171+ 27E0             >
 171+ 27E0             >OFFSET:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 171+ 27E0 CD 1B 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 171+ 27E3             >
 171+ 27E3             >
 171+ 27E3             >                endif           ; ok        // for other definitions it "points" the correct handler
 171+ 27E3             >                // Use of "; ok" to suppress "warning[fwdref]"
 171+ 27E3             >
 171+ 27E3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 171+ 27E3 26          >                db      38
 172+ 27E4                              User_Def CONTEXT    , "CONTEXT"   , 40 // pointer to the vocabulary where search begins
 172+ 27E4             >                New_Def  CONTEXT, "CONTEXT", User_Ptr, is_normal
 172+ 27E4             >
 172+ 27E4             >Dict_Ptr        defl    $
 172+ 27E4             >
 172+ 27E4             >//              ______________________________________________________________________
 172+ 27E4             >//              Heap part
 172+ 27E4             >
 172+ 27E4             >
 172+ 27E4             >                org     (Heap_Ptr & $1FFF) + $E000
 172+ E4F9             >
 172+ E4F9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 172+ E4F9             >Latest_Definition defl  Heap_Ptr
 172+ E4F9             >
 172+ E4F9             >                // dummy db directives used to calculate length of namec
 172+ E4F9 43 4F 4E 54 >                db      "CONTEXT"
 172+ E4FD 45 58 54    >
 172+ E500             >len_NFA         defl    $ - temp_NFA
 172+ E500             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 172+ E4F9             >
 172+ E4F9 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 172+ E4FA 43 4F 4E 54 >                db      "CONTEXT"               // name string in 7-bit ascii, but
 172+ E4FE 45 58 54    >
 172+ E501             >                org     $-1                 // alter last byte of Name just above to set
 172+ E500 D4          >                db      {b $} | END_BIT     // msb as name end
 172+ E501             >
 172+ E501 EE 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 172+ E503             >Prev_Ptr        defl    Heap_Ptr
 172+ E503             >
 172+ E503             >mirror_Ptr      defl    $
 172+ E503             >
 172+ E503 E6 27       >                dw      Dict_Ptr + 2        // xt
 172+ E505             >Heap_Ptr        defl    $ - $E000           // save current HP
 172+ E505             >
 172+ E505             >Current_HP      defl  $ - $E000             // used to set HP once!
 172+ E505             >
 172+ E505             >//              ______________________________________________________________________
 172+ E505             >//              Dictionary part
 172+ E505             >
 172+ E505             >                org     Dict_Ptr
 172+ 27E4             >
 172+ 27E4 03 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 172+ 27E6             >
 172+ 27E6             >CONTEXT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 172+ 27E6 CD 1B 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 172+ 27E9             >
 172+ 27E9             >
 172+ 27E9             >                endif           ; ok        // for other definitions it "points" the correct handler
 172+ 27E9             >                // Use of "; ok" to suppress "warning[fwdref]"
 172+ 27E9             >
 172+ 27E9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 172+ 27E9 28          >                db      40
 173+ 27EA                              User_Def CURRENT    , "CURRENT"   , 42 // pointer to the vocabulary where search continues
 173+ 27EA             >                New_Def  CURRENT, "CURRENT", User_Ptr, is_normal
 173+ 27EA             >
 173+ 27EA             >Dict_Ptr        defl    $
 173+ 27EA             >
 173+ 27EA             >//              ______________________________________________________________________
 173+ 27EA             >//              Heap part
 173+ 27EA             >
 173+ 27EA             >
 173+ 27EA             >                org     (Heap_Ptr & $1FFF) + $E000
 173+ E505             >
 173+ E505             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 173+ E505             >Latest_Definition defl  Heap_Ptr
 173+ E505             >
 173+ E505             >                // dummy db directives used to calculate length of namec
 173+ E505 43 55 52 52 >                db      "CURRENT"
 173+ E509 45 4E 54    >
 173+ E50C             >len_NFA         defl    $ - temp_NFA
 173+ E50C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 173+ E505             >
 173+ E505 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 173+ E506 43 55 52 52 >                db      "CURRENT"               // name string in 7-bit ascii, but
 173+ E50A 45 4E 54    >
 173+ E50D             >                org     $-1                 // alter last byte of Name just above to set
 173+ E50C D4          >                db      {b $} | END_BIT     // msb as name end
 173+ E50D             >
 173+ E50D F9 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 173+ E50F             >Prev_Ptr        defl    Heap_Ptr
 173+ E50F             >
 173+ E50F             >mirror_Ptr      defl    $
 173+ E50F             >
 173+ E50F EC 27       >                dw      Dict_Ptr + 2        // xt
 173+ E511             >Heap_Ptr        defl    $ - $E000           // save current HP
 173+ E511             >
 173+ E511             >Current_HP      defl  $ - $E000             // used to set HP once!
 173+ E511             >
 173+ E511             >//              ______________________________________________________________________
 173+ E511             >//              Dictionary part
 173+ E511             >
 173+ E511             >                org     Dict_Ptr
 173+ 27EA             >
 173+ 27EA 0F 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 173+ 27EC             >
 173+ 27EC             >CURRENT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 173+ 27EC CD 1B 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 173+ 27EF             >
 173+ 27EF             >
 173+ 27EF             >                endif           ; ok        // for other definitions it "points" the correct handler
 173+ 27EF             >                // Use of "; ok" to suppress "warning[fwdref]"
 173+ 27EF             >
 173+ 27EF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 173+ 27EF 2A          >                db      42
 174+ 27F0                              User_Def STATE      , "STATE"     , 44 // compilation status. 0 interpreting.
 174+ 27F0             >                New_Def  STATE, "STATE", User_Ptr, is_normal
 174+ 27F0             >
 174+ 27F0             >Dict_Ptr        defl    $
 174+ 27F0             >
 174+ 27F0             >//              ______________________________________________________________________
 174+ 27F0             >//              Heap part
 174+ 27F0             >
 174+ 27F0             >
 174+ 27F0             >                org     (Heap_Ptr & $1FFF) + $E000
 174+ E511             >
 174+ E511             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 174+ E511             >Latest_Definition defl  Heap_Ptr
 174+ E511             >
 174+ E511             >                // dummy db directives used to calculate length of namec
 174+ E511 53 54 41 54 >                db      "STATE"
 174+ E515 45          >
 174+ E516             >len_NFA         defl    $ - temp_NFA
 174+ E516             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 174+ E511             >
 174+ E511 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 174+ E512 53 54 41 54 >                db      "STATE"               // name string in 7-bit ascii, but
 174+ E516 45          >
 174+ E517             >                org     $-1                 // alter last byte of Name just above to set
 174+ E516 C5          >                db      {b $} | END_BIT     // msb as name end
 174+ E517             >
 174+ E517 05 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 174+ E519             >Prev_Ptr        defl    Heap_Ptr
 174+ E519             >
 174+ E519             >mirror_Ptr      defl    $
 174+ E519             >
 174+ E519 F2 27       >                dw      Dict_Ptr + 2        // xt
 174+ E51B             >Heap_Ptr        defl    $ - $E000           // save current HP
 174+ E51B             >
 174+ E51B             >Current_HP      defl  $ - $E000             // used to set HP once!
 174+ E51B             >
 174+ E51B             >//              ______________________________________________________________________
 174+ E51B             >//              Dictionary part
 174+ E51B             >
 174+ E51B             >                org     Dict_Ptr
 174+ 27F0             >
 174+ 27F0 19 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 174+ 27F2             >
 174+ 27F2             >STATE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 174+ 27F2 CD 1B 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 174+ 27F5             >
 174+ 27F5             >
 174+ 27F5             >                endif           ; ok        // for other definitions it "points" the correct handler
 174+ 27F5             >                // Use of "; ok" to suppress "warning[fwdref]"
 174+ 27F5             >
 174+ 27F5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 174+ 27F5 2C          >                db      44
 175+ 27F6                              User_Def BASE       , "BASE"      , 46 //
 175+ 27F6             >                New_Def  BASE, "BASE", User_Ptr, is_normal
 175+ 27F6             >
 175+ 27F6             >Dict_Ptr        defl    $
 175+ 27F6             >
 175+ 27F6             >//              ______________________________________________________________________
 175+ 27F6             >//              Heap part
 175+ 27F6             >
 175+ 27F6             >
 175+ 27F6             >                org     (Heap_Ptr & $1FFF) + $E000
 175+ E51B             >
 175+ E51B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 175+ E51B             >Latest_Definition defl  Heap_Ptr
 175+ E51B             >
 175+ E51B             >                // dummy db directives used to calculate length of namec
 175+ E51B 42 41 53 45 >                db      "BASE"
 175+ E51F             >len_NFA         defl    $ - temp_NFA
 175+ E51F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 175+ E51B             >
 175+ E51B 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 175+ E51C 42 41 53 45 >                db      "BASE"               // name string in 7-bit ascii, but
 175+ E520             >                org     $-1                 // alter last byte of Name just above to set
 175+ E51F C5          >                db      {b $} | END_BIT     // msb as name end
 175+ E520             >
 175+ E520 11 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 175+ E522             >Prev_Ptr        defl    Heap_Ptr
 175+ E522             >
 175+ E522             >mirror_Ptr      defl    $
 175+ E522             >
 175+ E522 F8 27       >                dw      Dict_Ptr + 2        // xt
 175+ E524             >Heap_Ptr        defl    $ - $E000           // save current HP
 175+ E524             >
 175+ E524             >Current_HP      defl  $ - $E000             // used to set HP once!
 175+ E524             >
 175+ E524             >//              ______________________________________________________________________
 175+ E524             >//              Dictionary part
 175+ E524             >
 175+ E524             >                org     Dict_Ptr
 175+ 27F6             >
 175+ 27F6 22 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 175+ 27F8             >
 175+ 27F8             >BASE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 175+ 27F8 CD 1B 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 175+ 27FB             >
 175+ 27FB             >
 175+ 27FB             >                endif           ; ok        // for other definitions it "points" the correct handler
 175+ 27FB             >                // Use of "; ok" to suppress "warning[fwdref]"
 175+ 27FB             >
 175+ 27FB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 175+ 27FB 2E          >                db      46
 176+ 27FC                              User_Def DPL        , "DPL"       , 48 // number of digits after decimal point in conversion
 176+ 27FC             >                New_Def  DPL, "DPL", User_Ptr, is_normal
 176+ 27FC             >
 176+ 27FC             >Dict_Ptr        defl    $
 176+ 27FC             >
 176+ 27FC             >//              ______________________________________________________________________
 176+ 27FC             >//              Heap part
 176+ 27FC             >
 176+ 27FC             >
 176+ 27FC             >                org     (Heap_Ptr & $1FFF) + $E000
 176+ E524             >
 176+ E524             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 176+ E524             >Latest_Definition defl  Heap_Ptr
 176+ E524             >
 176+ E524             >                // dummy db directives used to calculate length of namec
 176+ E524 44 50 4C    >                db      "DPL"
 176+ E527             >len_NFA         defl    $ - temp_NFA
 176+ E527             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 176+ E524             >
 176+ E524 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 176+ E525 44 50 4C    >                db      "DPL"               // name string in 7-bit ascii, but
 176+ E528             >                org     $-1                 // alter last byte of Name just above to set
 176+ E527 CC          >                db      {b $} | END_BIT     // msb as name end
 176+ E528             >
 176+ E528 1B 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 176+ E52A             >Prev_Ptr        defl    Heap_Ptr
 176+ E52A             >
 176+ E52A             >mirror_Ptr      defl    $
 176+ E52A             >
 176+ E52A FE 27       >                dw      Dict_Ptr + 2        // xt
 176+ E52C             >Heap_Ptr        defl    $ - $E000           // save current HP
 176+ E52C             >
 176+ E52C             >Current_HP      defl  $ - $E000             // used to set HP once!
 176+ E52C             >
 176+ E52C             >//              ______________________________________________________________________
 176+ E52C             >//              Dictionary part
 176+ E52C             >
 176+ E52C             >                org     Dict_Ptr
 176+ 27FC             >
 176+ 27FC 2A 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 176+ 27FE             >
 176+ 27FE             >DPL:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 176+ 27FE CD 1B 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 176+ 2801             >
 176+ 2801             >
 176+ 2801             >                endif           ; ok        // for other definitions it "points" the correct handler
 176+ 2801             >                // Use of "; ok" to suppress "warning[fwdref]"
 176+ 2801             >
 176+ 2801             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 176+ 2801 30          >                db      48
 177+ 2802                              User_Def FLD        , "FLD"       , 50 // output field width
 177+ 2802             >                New_Def  FLD, "FLD", User_Ptr, is_normal
 177+ 2802             >
 177+ 2802             >Dict_Ptr        defl    $
 177+ 2802             >
 177+ 2802             >//              ______________________________________________________________________
 177+ 2802             >//              Heap part
 177+ 2802             >
 177+ 2802             >
 177+ 2802             >                org     (Heap_Ptr & $1FFF) + $E000
 177+ E52C             >
 177+ E52C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 177+ E52C             >Latest_Definition defl  Heap_Ptr
 177+ E52C             >
 177+ E52C             >                // dummy db directives used to calculate length of namec
 177+ E52C 46 4C 44    >                db      "FLD"
 177+ E52F             >len_NFA         defl    $ - temp_NFA
 177+ E52F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 177+ E52C             >
 177+ E52C 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 177+ E52D 46 4C 44    >                db      "FLD"               // name string in 7-bit ascii, but
 177+ E530             >                org     $-1                 // alter last byte of Name just above to set
 177+ E52F C4          >                db      {b $} | END_BIT     // msb as name end
 177+ E530             >
 177+ E530 24 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 177+ E532             >Prev_Ptr        defl    Heap_Ptr
 177+ E532             >
 177+ E532             >mirror_Ptr      defl    $
 177+ E532             >
 177+ E532 04 28       >                dw      Dict_Ptr + 2        // xt
 177+ E534             >Heap_Ptr        defl    $ - $E000           // save current HP
 177+ E534             >
 177+ E534             >Current_HP      defl  $ - $E000             // used to set HP once!
 177+ E534             >
 177+ E534             >//              ______________________________________________________________________
 177+ E534             >//              Dictionary part
 177+ E534             >
 177+ E534             >                org     Dict_Ptr
 177+ 2802             >
 177+ 2802 32 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 177+ 2804             >
 177+ 2804             >FLD:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 177+ 2804 CD 1B 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 177+ 2807             >
 177+ 2807             >
 177+ 2807             >                endif           ; ok        // for other definitions it "points" the correct handler
 177+ 2807             >                // Use of "; ok" to suppress "warning[fwdref]"
 177+ 2807             >
 177+ 2807             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 177+ 2807 32          >                db      50
 178+ 2808                              User_Def CSP        , "CSP"       , 52 // used to temporary store Stack-Pointer value
 178+ 2808             >                New_Def  CSP, "CSP", User_Ptr, is_normal
 178+ 2808             >
 178+ 2808             >Dict_Ptr        defl    $
 178+ 2808             >
 178+ 2808             >//              ______________________________________________________________________
 178+ 2808             >//              Heap part
 178+ 2808             >
 178+ 2808             >
 178+ 2808             >                org     (Heap_Ptr & $1FFF) + $E000
 178+ E534             >
 178+ E534             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 178+ E534             >Latest_Definition defl  Heap_Ptr
 178+ E534             >
 178+ E534             >                // dummy db directives used to calculate length of namec
 178+ E534 43 53 50    >                db      "CSP"
 178+ E537             >len_NFA         defl    $ - temp_NFA
 178+ E537             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 178+ E534             >
 178+ E534 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 178+ E535 43 53 50    >                db      "CSP"               // name string in 7-bit ascii, but
 178+ E538             >                org     $-1                 // alter last byte of Name just above to set
 178+ E537 D0          >                db      {b $} | END_BIT     // msb as name end
 178+ E538             >
 178+ E538 2C 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 178+ E53A             >Prev_Ptr        defl    Heap_Ptr
 178+ E53A             >
 178+ E53A             >mirror_Ptr      defl    $
 178+ E53A             >
 178+ E53A 0A 28       >                dw      Dict_Ptr + 2        // xt
 178+ E53C             >Heap_Ptr        defl    $ - $E000           // save current HP
 178+ E53C             >
 178+ E53C             >Current_HP      defl  $ - $E000             // used to set HP once!
 178+ E53C             >
 178+ E53C             >//              ______________________________________________________________________
 178+ E53C             >//              Dictionary part
 178+ E53C             >
 178+ E53C             >                org     Dict_Ptr
 178+ 2808             >
 178+ 2808 3A 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 178+ 280A             >
 178+ 280A             >CSP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 178+ 280A CD 1B 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 178+ 280D             >
 178+ 280D             >
 178+ 280D             >                endif           ; ok        // for other definitions it "points" the correct handler
 178+ 280D             >                // Use of "; ok" to suppress "warning[fwdref]"
 178+ 280D             >
 178+ 280D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 178+ 280D 34          >                db      52
 179+ 280E                              User_Def RSHARP     , "R#"        , 54 // location of editing cursor
 179+ 280E             >                New_Def  RSHARP, "R#", User_Ptr, is_normal
 179+ 280E             >
 179+ 280E             >Dict_Ptr        defl    $
 179+ 280E             >
 179+ 280E             >//              ______________________________________________________________________
 179+ 280E             >//              Heap part
 179+ 280E             >
 179+ 280E             >
 179+ 280E             >                org     (Heap_Ptr & $1FFF) + $E000
 179+ E53C             >
 179+ E53C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 179+ E53C             >Latest_Definition defl  Heap_Ptr
 179+ E53C             >
 179+ E53C             >                // dummy db directives used to calculate length of namec
 179+ E53C 52 23       >                db      "R#"
 179+ E53E             >len_NFA         defl    $ - temp_NFA
 179+ E53E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 179+ E53C             >
 179+ E53C 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 179+ E53D 52 23       >                db      "R#"               // name string in 7-bit ascii, but
 179+ E53F             >                org     $-1                 // alter last byte of Name just above to set
 179+ E53E A3          >                db      {b $} | END_BIT     // msb as name end
 179+ E53F             >
 179+ E53F 34 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 179+ E541             >Prev_Ptr        defl    Heap_Ptr
 179+ E541             >
 179+ E541             >mirror_Ptr      defl    $
 179+ E541             >
 179+ E541 10 28       >                dw      Dict_Ptr + 2        // xt
 179+ E543             >Heap_Ptr        defl    $ - $E000           // save current HP
 179+ E543             >
 179+ E543             >Current_HP      defl  $ - $E000             // used to set HP once!
 179+ E543             >
 179+ E543             >//              ______________________________________________________________________
 179+ E543             >//              Dictionary part
 179+ E543             >
 179+ E543             >                org     Dict_Ptr
 179+ 280E             >
 179+ 280E 41 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 179+ 2810             >
 179+ 2810             >RSHARP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 179+ 2810 CD 1B 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 179+ 2813             >
 179+ 2813             >
 179+ 2813             >                endif           ; ok        // for other definitions it "points" the correct handler
 179+ 2813             >                // Use of "; ok" to suppress "warning[fwdref]"
 179+ 2813             >
 179+ 2813             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 179+ 2813 36          >                db      54
 180+ 2814                              User_Def HLD        , "HLD"       , 56 // last character during a number conversion output
 180+ 2814             >                New_Def  HLD, "HLD", User_Ptr, is_normal
 180+ 2814             >
 180+ 2814             >Dict_Ptr        defl    $
 180+ 2814             >
 180+ 2814             >//              ______________________________________________________________________
 180+ 2814             >//              Heap part
 180+ 2814             >
 180+ 2814             >
 180+ 2814             >                org     (Heap_Ptr & $1FFF) + $E000
 180+ E543             >
 180+ E543             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 180+ E543             >Latest_Definition defl  Heap_Ptr
 180+ E543             >
 180+ E543             >                // dummy db directives used to calculate length of namec
 180+ E543 48 4C 44    >                db      "HLD"
 180+ E546             >len_NFA         defl    $ - temp_NFA
 180+ E546             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 180+ E543             >
 180+ E543 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 180+ E544 48 4C 44    >                db      "HLD"               // name string in 7-bit ascii, but
 180+ E547             >                org     $-1                 // alter last byte of Name just above to set
 180+ E546 C4          >                db      {b $} | END_BIT     // msb as name end
 180+ E547             >
 180+ E547 3C 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 180+ E549             >Prev_Ptr        defl    Heap_Ptr
 180+ E549             >
 180+ E549             >mirror_Ptr      defl    $
 180+ E549             >
 180+ E549 16 28       >                dw      Dict_Ptr + 2        // xt
 180+ E54B             >Heap_Ptr        defl    $ - $E000           // save current HP
 180+ E54B             >
 180+ E54B             >Current_HP      defl  $ - $E000             // used to set HP once!
 180+ E54B             >
 180+ E54B             >//              ______________________________________________________________________
 180+ E54B             >//              Dictionary part
 180+ E54B             >
 180+ E54B             >                org     Dict_Ptr
 180+ 2814             >
 180+ 2814 49 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 180+ 2816             >
 180+ 2816             >HLD:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 180+ 2816 CD 1B 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 180+ 2819             >
 180+ 2819             >
 180+ 2819             >                endif           ; ok        // for other definitions it "points" the correct handler
 180+ 2819             >                // Use of "; ok" to suppress "warning[fwdref]"
 180+ 2819             >
 180+ 2819             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 180+ 2819 38          >                db      56
 181+ 281A                              User_Def USED       , "USED"      , 58 // address of last used block
 181+ 281A             >                New_Def  USED, "USED", User_Ptr, is_normal
 181+ 281A             >
 181+ 281A             >Dict_Ptr        defl    $
 181+ 281A             >
 181+ 281A             >//              ______________________________________________________________________
 181+ 281A             >//              Heap part
 181+ 281A             >
 181+ 281A             >
 181+ 281A             >                org     (Heap_Ptr & $1FFF) + $E000
 181+ E54B             >
 181+ E54B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 181+ E54B             >Latest_Definition defl  Heap_Ptr
 181+ E54B             >
 181+ E54B             >                // dummy db directives used to calculate length of namec
 181+ E54B 55 53 45 44 >                db      "USED"
 181+ E54F             >len_NFA         defl    $ - temp_NFA
 181+ E54F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 181+ E54B             >
 181+ E54B 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 181+ E54C 55 53 45 44 >                db      "USED"               // name string in 7-bit ascii, but
 181+ E550             >                org     $-1                 // alter last byte of Name just above to set
 181+ E54F C4          >                db      {b $} | END_BIT     // msb as name end
 181+ E550             >
 181+ E550 43 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 181+ E552             >Prev_Ptr        defl    Heap_Ptr
 181+ E552             >
 181+ E552             >mirror_Ptr      defl    $
 181+ E552             >
 181+ E552 1C 28       >                dw      Dict_Ptr + 2        // xt
 181+ E554             >Heap_Ptr        defl    $ - $E000           // save current HP
 181+ E554             >
 181+ E554             >Current_HP      defl  $ - $E000             // used to set HP once!
 181+ E554             >
 181+ E554             >//              ______________________________________________________________________
 181+ E554             >//              Dictionary part
 181+ E554             >
 181+ E554             >                org     Dict_Ptr
 181+ 281A             >
 181+ 281A 52 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 181+ 281C             >
 181+ 281C             >USED:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 181+ 281C CD 1B 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 181+ 281F             >
 181+ 281F             >
 181+ 281F             >                endif           ; ok        // for other definitions it "points" the correct handler
 181+ 281F             >                // Use of "; ok" to suppress "warning[fwdref]"
 181+ 281F             >
 181+ 281F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 181+ 281F 3A          >                db      58
 182+ 2820                              User_Def PREV       , "PREV"      , 60 // address of previous used block
 182+ 2820             >                New_Def  PREV, "PREV", User_Ptr, is_normal
 182+ 2820             >
 182+ 2820             >Dict_Ptr        defl    $
 182+ 2820             >
 182+ 2820             >//              ______________________________________________________________________
 182+ 2820             >//              Heap part
 182+ 2820             >
 182+ 2820             >
 182+ 2820             >                org     (Heap_Ptr & $1FFF) + $E000
 182+ E554             >
 182+ E554             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 182+ E554             >Latest_Definition defl  Heap_Ptr
 182+ E554             >
 182+ E554             >                // dummy db directives used to calculate length of namec
 182+ E554 50 52 45 56 >                db      "PREV"
 182+ E558             >len_NFA         defl    $ - temp_NFA
 182+ E558             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 182+ E554             >
 182+ E554 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 182+ E555 50 52 45 56 >                db      "PREV"               // name string in 7-bit ascii, but
 182+ E559             >                org     $-1                 // alter last byte of Name just above to set
 182+ E558 D6          >                db      {b $} | END_BIT     // msb as name end
 182+ E559             >
 182+ E559 4B 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 182+ E55B             >Prev_Ptr        defl    Heap_Ptr
 182+ E55B             >
 182+ E55B             >mirror_Ptr      defl    $
 182+ E55B             >
 182+ E55B 22 28       >                dw      Dict_Ptr + 2        // xt
 182+ E55D             >Heap_Ptr        defl    $ - $E000           // save current HP
 182+ E55D             >
 182+ E55D             >Current_HP      defl  $ - $E000             // used to set HP once!
 182+ E55D             >
 182+ E55D             >//              ______________________________________________________________________
 182+ E55D             >//              Dictionary part
 182+ E55D             >
 182+ E55D             >                org     Dict_Ptr
 182+ 2820             >
 182+ 2820 5B 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 182+ 2822             >
 182+ 2822             >PREV:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 182+ 2822 CD 1B 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 182+ 2825             >
 182+ 2825             >
 182+ 2825             >                endif           ; ok        // for other definitions it "points" the correct handler
 182+ 2825             >                // Use of "; ok" to suppress "warning[fwdref]"
 182+ 2825             >
 182+ 2825             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 182+ 2825 3C          >                db      60
 183+ 2826                              User_Def LP         , "LP"        , 62 // line printer (not used)
 183+ 2826             >                New_Def  LP, "LP", User_Ptr, is_normal
 183+ 2826             >
 183+ 2826             >Dict_Ptr        defl    $
 183+ 2826             >
 183+ 2826             >//              ______________________________________________________________________
 183+ 2826             >//              Heap part
 183+ 2826             >
 183+ 2826             >
 183+ 2826             >                org     (Heap_Ptr & $1FFF) + $E000
 183+ E55D             >
 183+ E55D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 183+ E55D             >Latest_Definition defl  Heap_Ptr
 183+ E55D             >
 183+ E55D             >                // dummy db directives used to calculate length of namec
 183+ E55D 4C 50       >                db      "LP"
 183+ E55F             >len_NFA         defl    $ - temp_NFA
 183+ E55F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 183+ E55D             >
 183+ E55D 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 183+ E55E 4C 50       >                db      "LP"               // name string in 7-bit ascii, but
 183+ E560             >                org     $-1                 // alter last byte of Name just above to set
 183+ E55F D0          >                db      {b $} | END_BIT     // msb as name end
 183+ E560             >
 183+ E560 54 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 183+ E562             >Prev_Ptr        defl    Heap_Ptr
 183+ E562             >
 183+ E562             >mirror_Ptr      defl    $
 183+ E562             >
 183+ E562 28 28       >                dw      Dict_Ptr + 2        // xt
 183+ E564             >Heap_Ptr        defl    $ - $E000           // save current HP
 183+ E564             >
 183+ E564             >Current_HP      defl  $ - $E000             // used to set HP once!
 183+ E564             >
 183+ E564             >//              ______________________________________________________________________
 183+ E564             >//              Dictionary part
 183+ E564             >
 183+ E564             >                org     Dict_Ptr
 183+ 2826             >
 183+ 2826 62 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 183+ 2828             >
 183+ 2828             >LP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 183+ 2828 CD 1B 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 183+ 282B             >
 183+ 282B             >
 183+ 282B             >                endif           ; ok        // for other definitions it "points" the correct handler
 183+ 282B             >                // Use of "; ok" to suppress "warning[fwdref]"
 183+ 282B             >
 183+ 282B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 183+ 282B 3E          >                db      62
 184+ 282C                              User_Def PLACE      , "PLACE"     , 64 // number of digits after decimal point in output
 184+ 282C             >                New_Def  PLACE, "PLACE", User_Ptr, is_normal
 184+ 282C             >
 184+ 282C             >Dict_Ptr        defl    $
 184+ 282C             >
 184+ 282C             >//              ______________________________________________________________________
 184+ 282C             >//              Heap part
 184+ 282C             >
 184+ 282C             >
 184+ 282C             >                org     (Heap_Ptr & $1FFF) + $E000
 184+ E564             >
 184+ E564             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 184+ E564             >Latest_Definition defl  Heap_Ptr
 184+ E564             >
 184+ E564             >                // dummy db directives used to calculate length of namec
 184+ E564 50 4C 41 43 >                db      "PLACE"
 184+ E568 45          >
 184+ E569             >len_NFA         defl    $ - temp_NFA
 184+ E569             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 184+ E564             >
 184+ E564 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 184+ E565 50 4C 41 43 >                db      "PLACE"               // name string in 7-bit ascii, but
 184+ E569 45          >
 184+ E56A             >                org     $-1                 // alter last byte of Name just above to set
 184+ E569 C5          >                db      {b $} | END_BIT     // msb as name end
 184+ E56A             >
 184+ E56A 5D 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 184+ E56C             >Prev_Ptr        defl    Heap_Ptr
 184+ E56C             >
 184+ E56C             >mirror_Ptr      defl    $
 184+ E56C             >
 184+ E56C 2E 28       >                dw      Dict_Ptr + 2        // xt
 184+ E56E             >Heap_Ptr        defl    $ - $E000           // save current HP
 184+ E56E             >
 184+ E56E             >Current_HP      defl  $ - $E000             // used to set HP once!
 184+ E56E             >
 184+ E56E             >//              ______________________________________________________________________
 184+ E56E             >//              Dictionary part
 184+ E56E             >
 184+ E56E             >                org     Dict_Ptr
 184+ 282C             >
 184+ 282C 6C 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 184+ 282E             >
 184+ 282E             >PLACE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 184+ 282E CD 1B 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 184+ 2831             >
 184+ 2831             >
 184+ 2831             >                endif           ; ok        // for other definitions it "points" the correct handler
 184+ 2831             >                // Use of "; ok" to suppress "warning[fwdref]"
 184+ 2831             >
 184+ 2831             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 184+ 2831 40          >                db      64
 185+ 2832                              User_Def SOURCE_ID  , "SOURCE-ID" , 66 // data-stream number in INCLUDE and LOAD-
 185+ 2832             >                New_Def  SOURCE_ID, "SOURCE-ID", User_Ptr, is_normal
 185+ 2832             >
 185+ 2832             >Dict_Ptr        defl    $
 185+ 2832             >
 185+ 2832             >//              ______________________________________________________________________
 185+ 2832             >//              Heap part
 185+ 2832             >
 185+ 2832             >
 185+ 2832             >                org     (Heap_Ptr & $1FFF) + $E000
 185+ E56E             >
 185+ E56E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 185+ E56E             >Latest_Definition defl  Heap_Ptr
 185+ E56E             >
 185+ E56E             >                // dummy db directives used to calculate length of namec
 185+ E56E 53 4F 55 52 >                db      "SOURCE-ID"
 185+ E572 43 45 2D 49 >
 185+ E576 44          >
 185+ E577             >len_NFA         defl    $ - temp_NFA
 185+ E577             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 185+ E56E             >
 185+ E56E 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 185+ E56F 53 4F 55 52 >                db      "SOURCE-ID"               // name string in 7-bit ascii, but
 185+ E573 43 45 2D 49 >
 185+ E577 44          >
 185+ E578             >                org     $-1                 // alter last byte of Name just above to set
 185+ E577 C4          >                db      {b $} | END_BIT     // msb as name end
 185+ E578             >
 185+ E578 64 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 185+ E57A             >Prev_Ptr        defl    Heap_Ptr
 185+ E57A             >
 185+ E57A             >mirror_Ptr      defl    $
 185+ E57A             >
 185+ E57A 34 28       >                dw      Dict_Ptr + 2        // xt
 185+ E57C             >Heap_Ptr        defl    $ - $E000           // save current HP
 185+ E57C             >
 185+ E57C             >Current_HP      defl  $ - $E000             // used to set HP once!
 185+ E57C             >
 185+ E57C             >//              ______________________________________________________________________
 185+ E57C             >//              Dictionary part
 185+ E57C             >
 185+ E57C             >                org     Dict_Ptr
 185+ 2832             >
 185+ 2832 7A 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 185+ 2834             >
 185+ 2834             >SOURCE_ID:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 185+ 2834 CD 1B 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 185+ 2837             >
 185+ 2837             >
 185+ 2837             >                endif           ; ok        // for other definitions it "points" the correct handler
 185+ 2837             >                // Use of "; ok" to suppress "warning[fwdref]"
 185+ 2837             >
 185+ 2837             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 185+ 2837 42          >                db      66
 186+ 2838                              User_Def SPAN       , "SPAN"      , 68 // number of character of last EXPECT
 186+ 2838             >                New_Def  SPAN, "SPAN", User_Ptr, is_normal
 186+ 2838             >
 186+ 2838             >Dict_Ptr        defl    $
 186+ 2838             >
 186+ 2838             >//              ______________________________________________________________________
 186+ 2838             >//              Heap part
 186+ 2838             >
 186+ 2838             >
 186+ 2838             >                org     (Heap_Ptr & $1FFF) + $E000
 186+ E57C             >
 186+ E57C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 186+ E57C             >Latest_Definition defl  Heap_Ptr
 186+ E57C             >
 186+ E57C             >                // dummy db directives used to calculate length of namec
 186+ E57C 53 50 41 4E >                db      "SPAN"
 186+ E580             >len_NFA         defl    $ - temp_NFA
 186+ E580             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 186+ E57C             >
 186+ E57C 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 186+ E57D 53 50 41 4E >                db      "SPAN"               // name string in 7-bit ascii, but
 186+ E581             >                org     $-1                 // alter last byte of Name just above to set
 186+ E580 CE          >                db      {b $} | END_BIT     // msb as name end
 186+ E581             >
 186+ E581 6E 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 186+ E583             >Prev_Ptr        defl    Heap_Ptr
 186+ E583             >
 186+ E583             >mirror_Ptr      defl    $
 186+ E583             >
 186+ E583 3A 28       >                dw      Dict_Ptr + 2        // xt
 186+ E585             >Heap_Ptr        defl    $ - $E000           // save current HP
 186+ E585             >
 186+ E585             >Current_HP      defl  $ - $E000             // used to set HP once!
 186+ E585             >
 186+ E585             >//              ______________________________________________________________________
 186+ E585             >//              Dictionary part
 186+ E585             >
 186+ E585             >                org     Dict_Ptr
 186+ 2838             >
 186+ 2838 83 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 186+ 283A             >
 186+ 283A             >SPAN:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 186+ 283A CD 1B 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 186+ 283D             >
 186+ 283D             >
 186+ 283D             >                endif           ; ok        // for other definitions it "points" the correct handler
 186+ 283D             >                // Use of "; ok" to suppress "warning[fwdref]"
 186+ 283D             >
 186+ 283D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 186+ 283D 44          >                db      68
 187+ 283E                              User_Def HANDLER    , "HANDLER"   , 70 // Used by THROW-CATCH
 187+ 283E             >                New_Def  HANDLER, "HANDLER", User_Ptr, is_normal
 187+ 283E             >
 187+ 283E             >Dict_Ptr        defl    $
 187+ 283E             >
 187+ 283E             >//              ______________________________________________________________________
 187+ 283E             >//              Heap part
 187+ 283E             >
 187+ 283E             >
 187+ 283E             >                org     (Heap_Ptr & $1FFF) + $E000
 187+ E585             >
 187+ E585             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 187+ E585             >Latest_Definition defl  Heap_Ptr
 187+ E585             >
 187+ E585             >                // dummy db directives used to calculate length of namec
 187+ E585 48 41 4E 44 >                db      "HANDLER"
 187+ E589 4C 45 52    >
 187+ E58C             >len_NFA         defl    $ - temp_NFA
 187+ E58C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 187+ E585             >
 187+ E585 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 187+ E586 48 41 4E 44 >                db      "HANDLER"               // name string in 7-bit ascii, but
 187+ E58A 4C 45 52    >
 187+ E58D             >                org     $-1                 // alter last byte of Name just above to set
 187+ E58C D2          >                db      {b $} | END_BIT     // msb as name end
 187+ E58D             >
 187+ E58D 7C 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 187+ E58F             >Prev_Ptr        defl    Heap_Ptr
 187+ E58F             >
 187+ E58F             >mirror_Ptr      defl    $
 187+ E58F             >
 187+ E58F 40 28       >                dw      Dict_Ptr + 2        // xt
 187+ E591             >Heap_Ptr        defl    $ - $E000           // save current HP
 187+ E591             >
 187+ E591             >Current_HP      defl  $ - $E000             // used to set HP once!
 187+ E591             >
 187+ E591             >//              ______________________________________________________________________
 187+ E591             >//              Dictionary part
 187+ E591             >
 187+ E591             >                org     Dict_Ptr
 187+ 283E             >
 187+ 283E 8F 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 187+ 2840             >
 187+ 2840             >HANDLER:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 187+ 2840 CD 1B 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 187+ 2843             >
 187+ 2843             >
 187+ 2843             >                endif           ; ok        // for other definitions it "points" the correct handler
 187+ 2843             >                // Use of "; ok" to suppress "warning[fwdref]"
 187+ 2843             >
 187+ 2843             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 187+ 2843 46          >                db      70
 188+ 2844                              User_Def EXP        , "EXP"       , 72 // keeps the exponent in number conversion
 188+ 2844             >                New_Def  EXP, "EXP", User_Ptr, is_normal
 188+ 2844             >
 188+ 2844             >Dict_Ptr        defl    $
 188+ 2844             >
 188+ 2844             >//              ______________________________________________________________________
 188+ 2844             >//              Heap part
 188+ 2844             >
 188+ 2844             >
 188+ 2844             >                org     (Heap_Ptr & $1FFF) + $E000
 188+ E591             >
 188+ E591             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 188+ E591             >Latest_Definition defl  Heap_Ptr
 188+ E591             >
 188+ E591             >                // dummy db directives used to calculate length of namec
 188+ E591 45 58 50    >                db      "EXP"
 188+ E594             >len_NFA         defl    $ - temp_NFA
 188+ E594             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 188+ E591             >
 188+ E591 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 188+ E592 45 58 50    >                db      "EXP"               // name string in 7-bit ascii, but
 188+ E595             >                org     $-1                 // alter last byte of Name just above to set
 188+ E594 D0          >                db      {b $} | END_BIT     // msb as name end
 188+ E595             >
 188+ E595 85 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 188+ E597             >Prev_Ptr        defl    Heap_Ptr
 188+ E597             >
 188+ E597             >mirror_Ptr      defl    $
 188+ E597             >
 188+ E597 46 28       >                dw      Dict_Ptr + 2        // xt
 188+ E599             >Heap_Ptr        defl    $ - $E000           // save current HP
 188+ E599             >
 188+ E599             >Current_HP      defl  $ - $E000             // used to set HP once!
 188+ E599             >
 188+ E599             >//              ______________________________________________________________________
 188+ E599             >//              Dictionary part
 188+ E599             >
 188+ E599             >                org     Dict_Ptr
 188+ 2844             >
 188+ 2844 97 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 188+ 2846             >
 188+ 2846             >EXP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 188+ 2846 CD 1B 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 188+ 2849             >
 188+ 2849             >
 188+ 2849             >                endif           ; ok        // for other definitions it "points" the correct handler
 188+ 2849             >                // Use of "; ok" to suppress "warning[fwdref]"
 188+ 2849             >
 188+ 2849             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 188+ 2849 48          >                db      72
 189+ 284A
 190+ 284A              //  ______________________________________________________________________
 191+ 284A              //
 192+ 284A              // here         -- a
 193+ 284A                              Colon_Def HERE, "HERE", is_normal
 193+ 284A             >                New_Def  HERE, "HERE", Enter_Ptr, is_normal ; ok
 193+ 284A             >
 193+ 284A             >Dict_Ptr        defl    $
 193+ 284A             >
 193+ 284A             >//              ______________________________________________________________________
 193+ 284A             >//              Heap part
 193+ 284A             >
 193+ 284A             >
 193+ 284A             >                org     (Heap_Ptr & $1FFF) + $E000
 193+ E599             >
 193+ E599             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 193+ E599             >Latest_Definition defl  Heap_Ptr
 193+ E599             >
 193+ E599             >                // dummy db directives used to calculate length of namec
 193+ E599 48 45 52 45 >                db      "HERE"
 193+ E59D             >len_NFA         defl    $ - temp_NFA
 193+ E59D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 193+ E599             >
 193+ E599 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 193+ E59A 48 45 52 45 >                db      "HERE"               // name string in 7-bit ascii, but
 193+ E59E             >                org     $-1                 // alter last byte of Name just above to set
 193+ E59D C5          >                db      {b $} | END_BIT     // msb as name end
 193+ E59E             >
 193+ E59E 91 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 193+ E5A0             >Prev_Ptr        defl    Heap_Ptr
 193+ E5A0             >
 193+ E5A0             >mirror_Ptr      defl    $
 193+ E5A0             >
 193+ E5A0 4C 28       >                dw      Dict_Ptr + 2        // xt
 193+ E5A2             >Heap_Ptr        defl    $ - $E000           // save current HP
 193+ E5A2             >
 193+ E5A2             >Current_HP      defl  $ - $E000             // used to set HP once!
 193+ E5A2             >
 193+ E5A2             >//              ______________________________________________________________________
 193+ E5A2             >//              Dictionary part
 193+ E5A2             >
 193+ E5A2             >                org     Dict_Ptr
 193+ 284A             >
 193+ 284A A0 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 193+ 284C             >
 193+ 284C             >HERE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 193+ 284C CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 193+ 284F             >
 193+ 284F             >
 193+ 284F             >                endif           ; ok        // for other definitions it "points" the correct handler
 193+ 284F             >                // Use of "; ok" to suppress "warning[fwdref]"
 193+ 284F             >
 193+ 284F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 194+ 284F A4 27 31 26                  dw      DP, FETCH               // dp @
 195+ 2853 F1 24                        dw      EXIT                    // ;
 196+ 2855
 197+ 2855              //  ______________________________________________________________________
 198+ 2855              //
 199+ 2855              // allot        n --
 200+ 2855                              Colon_Def ALLOT, "ALLOT", is_normal
 200+ 2855             >                New_Def  ALLOT, "ALLOT", Enter_Ptr, is_normal ; ok
 200+ 2855             >
 200+ 2855             >Dict_Ptr        defl    $
 200+ 2855             >
 200+ 2855             >//              ______________________________________________________________________
 200+ 2855             >//              Heap part
 200+ 2855             >
 200+ 2855             >
 200+ 2855             >                org     (Heap_Ptr & $1FFF) + $E000
 200+ E5A2             >
 200+ E5A2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 200+ E5A2             >Latest_Definition defl  Heap_Ptr
 200+ E5A2             >
 200+ E5A2             >                // dummy db directives used to calculate length of namec
 200+ E5A2 41 4C 4C 4F >                db      "ALLOT"
 200+ E5A6 54          >
 200+ E5A7             >len_NFA         defl    $ - temp_NFA
 200+ E5A7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 200+ E5A2             >
 200+ E5A2 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 200+ E5A3 41 4C 4C 4F >                db      "ALLOT"               // name string in 7-bit ascii, but
 200+ E5A7 54          >
 200+ E5A8             >                org     $-1                 // alter last byte of Name just above to set
 200+ E5A7 D4          >                db      {b $} | END_BIT     // msb as name end
 200+ E5A8             >
 200+ E5A8 99 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 200+ E5AA             >Prev_Ptr        defl    Heap_Ptr
 200+ E5AA             >
 200+ E5AA             >mirror_Ptr      defl    $
 200+ E5AA             >
 200+ E5AA 57 28       >                dw      Dict_Ptr + 2        // xt
 200+ E5AC             >Heap_Ptr        defl    $ - $E000           // save current HP
 200+ E5AC             >
 200+ E5AC             >Current_HP      defl  $ - $E000             // used to set HP once!
 200+ E5AC             >
 200+ E5AC             >//              ______________________________________________________________________
 200+ E5AC             >//              Dictionary part
 200+ E5AC             >
 200+ E5AC             >                org     Dict_Ptr
 200+ 2855             >
 200+ 2855 AA 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 200+ 2857             >
 200+ 2857             >ALLOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 200+ 2857 CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 200+ 285A             >
 200+ 285A             >
 200+ 285A             >                endif           ; ok        // for other definitions it "points" the correct handler
 200+ 285A             >                // Use of "; ok" to suppress "warning[fwdref]"
 200+ 285A             >
 200+ 285A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 201+ 285A A4 27 19 26                  dw      DP,  PLUSSTORE          // dp +!
 202+ 285E F1 24                        dw      EXIT                    // ;
 203+ 2860
 204+ 2860              //  ______________________________________________________________________
 205+ 2860              //
 206+ 2860              // comma        n --
 207+ 2860                              Colon_Def COMMA, ",", is_normal
 207+ 2860             >                New_Def  COMMA, ",", Enter_Ptr, is_normal ; ok
 207+ 2860             >
 207+ 2860             >Dict_Ptr        defl    $
 207+ 2860             >
 207+ 2860             >//              ______________________________________________________________________
 207+ 2860             >//              Heap part
 207+ 2860             >
 207+ 2860             >
 207+ 2860             >                org     (Heap_Ptr & $1FFF) + $E000
 207+ E5AC             >
 207+ E5AC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 207+ E5AC             >Latest_Definition defl  Heap_Ptr
 207+ E5AC             >
 207+ E5AC             >                // dummy db directives used to calculate length of namec
 207+ E5AC 2C          >                db      ","
 207+ E5AD             >len_NFA         defl    $ - temp_NFA
 207+ E5AD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 207+ E5AC             >
 207+ E5AC 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 207+ E5AD 2C          >                db      ","               // name string in 7-bit ascii, but
 207+ E5AE             >                org     $-1                 // alter last byte of Name just above to set
 207+ E5AD AC          >                db      {b $} | END_BIT     // msb as name end
 207+ E5AE             >
 207+ E5AE A2 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 207+ E5B0             >Prev_Ptr        defl    Heap_Ptr
 207+ E5B0             >
 207+ E5B0             >mirror_Ptr      defl    $
 207+ E5B0             >
 207+ E5B0 62 28       >                dw      Dict_Ptr + 2        // xt
 207+ E5B2             >Heap_Ptr        defl    $ - $E000           // save current HP
 207+ E5B2             >
 207+ E5B2             >Current_HP      defl  $ - $E000             // used to set HP once!
 207+ E5B2             >
 207+ E5B2             >//              ______________________________________________________________________
 207+ E5B2             >//              Dictionary part
 207+ E5B2             >
 207+ E5B2             >                org     Dict_Ptr
 207+ 2860             >
 207+ 2860 B0 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 207+ 2862             >
 207+ 2862             >COMMA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 207+ 2862 CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 207+ 2865             >
 207+ 2865             >
 207+ 2865             >                endif           ; ok        // for other definitions it "points" the correct handler
 207+ 2865             >                // Use of "; ok" to suppress "warning[fwdref]"
 207+ 2865             >
 207+ 2865             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 208+ 2865 4C 28 3B 26                  dw      HERE, STORE             // here !
 209+ 2869 35 27 57 28                  dw      TWO, ALLOT              // 2 allot
 210+ 286D F1 24                        dw      EXIT                    // ;
 211+ 286F
 212+ 286F              //  ______________________________________________________________________
 213+ 286F              //
 214+ 286F              // ccomma       c --
 215+ 286F                              Colon_Def CCOMMA, "C,", is_normal
 215+ 286F             >                New_Def  CCOMMA, "C,", Enter_Ptr, is_normal ; ok
 215+ 286F             >
 215+ 286F             >Dict_Ptr        defl    $
 215+ 286F             >
 215+ 286F             >//              ______________________________________________________________________
 215+ 286F             >//              Heap part
 215+ 286F             >
 215+ 286F             >
 215+ 286F             >                org     (Heap_Ptr & $1FFF) + $E000
 215+ E5B2             >
 215+ E5B2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 215+ E5B2             >Latest_Definition defl  Heap_Ptr
 215+ E5B2             >
 215+ E5B2             >                // dummy db directives used to calculate length of namec
 215+ E5B2 43 2C       >                db      "C,"
 215+ E5B4             >len_NFA         defl    $ - temp_NFA
 215+ E5B4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 215+ E5B2             >
 215+ E5B2 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 215+ E5B3 43 2C       >                db      "C,"               // name string in 7-bit ascii, but
 215+ E5B5             >                org     $-1                 // alter last byte of Name just above to set
 215+ E5B4 AC          >                db      {b $} | END_BIT     // msb as name end
 215+ E5B5             >
 215+ E5B5 AC 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 215+ E5B7             >Prev_Ptr        defl    Heap_Ptr
 215+ E5B7             >
 215+ E5B7             >mirror_Ptr      defl    $
 215+ E5B7             >
 215+ E5B7 71 28       >                dw      Dict_Ptr + 2        // xt
 215+ E5B9             >Heap_Ptr        defl    $ - $E000           // save current HP
 215+ E5B9             >
 215+ E5B9             >Current_HP      defl  $ - $E000             // used to set HP once!
 215+ E5B9             >
 215+ E5B9             >//              ______________________________________________________________________
 215+ E5B9             >//              Dictionary part
 215+ E5B9             >
 215+ E5B9             >                org     Dict_Ptr
 215+ 286F             >
 215+ 286F B7 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 215+ 2871             >
 215+ 2871             >CCOMMA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 215+ 2871 CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 215+ 2874             >
 215+ 2874             >
 215+ 2874             >                endif           ; ok        // for other definitions it "points" the correct handler
 215+ 2874             >                // Use of "; ok" to suppress "warning[fwdref]"
 215+ 2874             >
 215+ 2874             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 216+ 2874 4C 28 4F 26                  dw      HERE, CSTORE            // here c!
 217+ 2878 2E 27 57 28                  dw      ONE, ALLOT              // 1 allot
 218+ 287C F1 24                        dw      EXIT                    // ;
 219+ 287E
 220+ 287E              //  ______________________________________________________________________
 221+ 287E              //
 222+ 287E              // hpcomma      n --
 223+ 287E              //              Colon_Def HCOMMA, "HP,", is_normal
 224+ 287E              //              dw      HP_FETCH, FAR, STORE    // HP@ FAR !
 225+ 287E              //              dw      TWO, HP, PLUSSTORE      // 2 HP +!
 226+ 287E              //              dw      EXIT                    // ;
 227+ 287E
 228+ 287E              //  ______________________________________________________________________
 229+ 287E              //
 230+ 287E              // s>d          n -- d
 231+ 287E              // converts a single precision integer in a double precision
 232+ 287E                              New_Def S_TO_D, "S>D", is_code, is_normal
 232+ 287E             >
 232+ 287E             >Dict_Ptr        defl    $
 232+ 287E             >
 232+ 287E             >//              ______________________________________________________________________
 232+ 287E             >//              Heap part
 232+ 287E             >
 232+ 287E             >
 232+ 287E             >                org     (Heap_Ptr & $1FFF) + $E000
 232+ E5B9             >
 232+ E5B9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 232+ E5B9             >Latest_Definition defl  Heap_Ptr
 232+ E5B9             >
 232+ E5B9             >                // dummy db directives used to calculate length of namec
 232+ E5B9 53 3E 44    >                db      "S>D"
 232+ E5BC             >len_NFA         defl    $ - temp_NFA
 232+ E5BC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 232+ E5B9             >
 232+ E5B9 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 232+ E5BA 53 3E 44    >                db      "S>D"               // name string in 7-bit ascii, but
 232+ E5BD             >                org     $-1                 // alter last byte of Name just above to set
 232+ E5BC C4          >                db      {b $} | END_BIT     // msb as name end
 232+ E5BD             >
 232+ E5BD B2 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 232+ E5BF             >Prev_Ptr        defl    Heap_Ptr
 232+ E5BF             >
 232+ E5BF             >mirror_Ptr      defl    $
 232+ E5BF             >
 232+ E5BF 80 28       >                dw      Dict_Ptr + 2        // xt
 232+ E5C1             >Heap_Ptr        defl    $ - $E000           // save current HP
 232+ E5C1             >
 232+ E5C1             >Current_HP      defl  $ - $E000             // used to set HP once!
 232+ E5C1             >
 232+ E5C1             >//              ______________________________________________________________________
 232+ E5C1             >//              Dictionary part
 232+ E5C1             >
 232+ E5C1             >                org     Dict_Ptr
 232+ 287E             >
 232+ 287E BF 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 232+ 2880             >
 232+ 2880             >S_TO_D:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 232+ 2880 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 232+ 2880 ~           >
 232+ 2880 ~           >
 232+ 2880             >                endif           ; ok        // for other definitions it "points" the correct handler
 232+ 2880             >                // Use of "; ok" to suppress "warning[fwdref]"
 232+ 2880             >
 232+ 2880             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 233+ 2880 E1                           pop     hl
 234+ 2881 7C                           ld      a, h
 235+ 2882 E5                           push    hl
 236+ 2883 17                           rla
 237+ 2884 ED 62                        sbc     hl, hl
 238+ 2886 E5                           push    hl
 239+ 2887                              next
 239+ 2887 DD E9       >                jp      (ix)
 240+ 2889
 241+ 2889              //  ______________________________________________________________________
 242+ 2889              //
 243+ 2889              // -            n1 n2 -- n3
 244+ 2889              // subtraction
 245+ 2889                              New_Def SUBTRACT, "-", is_code, is_normal
 245+ 2889             >
 245+ 2889             >Dict_Ptr        defl    $
 245+ 2889             >
 245+ 2889             >//              ______________________________________________________________________
 245+ 2889             >//              Heap part
 245+ 2889             >
 245+ 2889             >
 245+ 2889             >                org     (Heap_Ptr & $1FFF) + $E000
 245+ E5C1             >
 245+ E5C1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 245+ E5C1             >Latest_Definition defl  Heap_Ptr
 245+ E5C1             >
 245+ E5C1             >                // dummy db directives used to calculate length of namec
 245+ E5C1 2D          >                db      "-"
 245+ E5C2             >len_NFA         defl    $ - temp_NFA
 245+ E5C2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 245+ E5C1             >
 245+ E5C1 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 245+ E5C2 2D          >                db      "-"               // name string in 7-bit ascii, but
 245+ E5C3             >                org     $-1                 // alter last byte of Name just above to set
 245+ E5C2 AD          >                db      {b $} | END_BIT     // msb as name end
 245+ E5C3             >
 245+ E5C3 B9 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 245+ E5C5             >Prev_Ptr        defl    Heap_Ptr
 245+ E5C5             >
 245+ E5C5             >mirror_Ptr      defl    $
 245+ E5C5             >
 245+ E5C5 8B 28       >                dw      Dict_Ptr + 2        // xt
 245+ E5C7             >Heap_Ptr        defl    $ - $E000           // save current HP
 245+ E5C7             >
 245+ E5C7             >Current_HP      defl  $ - $E000             // used to set HP once!
 245+ E5C7             >
 245+ E5C7             >//              ______________________________________________________________________
 245+ E5C7             >//              Dictionary part
 245+ E5C7             >
 245+ E5C7             >                org     Dict_Ptr
 245+ 2889             >
 245+ 2889 C5 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 245+ 288B             >
 245+ 288B             >SUBTRACT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 245+ 288B ~           >                call    runcode ; ok        // for primitive definitions  actual code
 245+ 288B ~           >
 245+ 288B ~           >
 245+ 288B             >                endif           ; ok        // for other definitions it "points" the correct handler
 245+ 288B             >                // Use of "; ok" to suppress "warning[fwdref]"
 245+ 288B             >
 245+ 288B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 246+ 288B D9                           exx
 247+ 288C D1                           pop     de
 248+ 288D E1                           pop     hl
 249+ 288E A7                           and     a
 250+ 288F ED 52                        sbc     hl, de
 251+ 2891 E5                           push    hl
 252+ 2892 D9                           exx
 253+ 2893                              next
 253+ 2893 DD E9       >                jp      (ix)
 254+ 2895
 255+ 2895
 256+ 2895              //  ______________________________________________________________________
 257+ 2895              //
 258+ 2895              // =            n1 n2 -- n3
 259+ 2895              // equals
 260+ 2895                              Colon_Def EQUALS, "=", is_normal
 260+ 2895             >                New_Def  EQUALS, "=", Enter_Ptr, is_normal ; ok
 260+ 2895             >
 260+ 2895             >Dict_Ptr        defl    $
 260+ 2895             >
 260+ 2895             >//              ______________________________________________________________________
 260+ 2895             >//              Heap part
 260+ 2895             >
 260+ 2895             >
 260+ 2895             >                org     (Heap_Ptr & $1FFF) + $E000
 260+ E5C7             >
 260+ E5C7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 260+ E5C7             >Latest_Definition defl  Heap_Ptr
 260+ E5C7             >
 260+ E5C7             >                // dummy db directives used to calculate length of namec
 260+ E5C7 3D          >                db      "="
 260+ E5C8             >len_NFA         defl    $ - temp_NFA
 260+ E5C8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 260+ E5C7             >
 260+ E5C7 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 260+ E5C8 3D          >                db      "="               // name string in 7-bit ascii, but
 260+ E5C9             >                org     $-1                 // alter last byte of Name just above to set
 260+ E5C8 BD          >                db      {b $} | END_BIT     // msb as name end
 260+ E5C9             >
 260+ E5C9 C1 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 260+ E5CB             >Prev_Ptr        defl    Heap_Ptr
 260+ E5CB             >
 260+ E5CB             >mirror_Ptr      defl    $
 260+ E5CB             >
 260+ E5CB 97 28       >                dw      Dict_Ptr + 2        // xt
 260+ E5CD             >Heap_Ptr        defl    $ - $E000           // save current HP
 260+ E5CD             >
 260+ E5CD             >Current_HP      defl  $ - $E000             // used to set HP once!
 260+ E5CD             >
 260+ E5CD             >//              ______________________________________________________________________
 260+ E5CD             >//              Dictionary part
 260+ E5CD             >
 260+ E5CD             >                org     Dict_Ptr
 260+ 2895             >
 260+ 2895 CB 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 260+ 2897             >
 260+ 2897             >EQUALS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 260+ 2897 CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 260+ 289A             >
 260+ 289A             >
 260+ 289A             >                endif           ; ok        // for other definitions it "points" the correct handler
 260+ 289A             >                // Use of "; ok" to suppress "warning[fwdref]"
 260+ 289A             >
 260+ 289A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 261+ 289A 8B 28 16 25                  dw      SUBTRACT, ZEQUAL        // - 0=
 262+ 289E F1 24                        dw      EXIT                    // ;
 263+ 28A0
 264+ 28A0              //  ______________________________________________________________________
 265+ 28A0              //
 266+ 28A0              // u<           u1 u2 -- u3
 267+ 28A0              // unsigned less-than
 268+ 28A0                              New_Def ULESS, "U<", is_code, is_normal
 268+ 28A0             >
 268+ 28A0             >Dict_Ptr        defl    $
 268+ 28A0             >
 268+ 28A0             >//              ______________________________________________________________________
 268+ 28A0             >//              Heap part
 268+ 28A0             >
 268+ 28A0             >
 268+ 28A0             >                org     (Heap_Ptr & $1FFF) + $E000
 268+ E5CD             >
 268+ E5CD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 268+ E5CD             >Latest_Definition defl  Heap_Ptr
 268+ E5CD             >
 268+ E5CD             >                // dummy db directives used to calculate length of namec
 268+ E5CD 55 3C       >                db      "U<"
 268+ E5CF             >len_NFA         defl    $ - temp_NFA
 268+ E5CF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 268+ E5CD             >
 268+ E5CD 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 268+ E5CE 55 3C       >                db      "U<"               // name string in 7-bit ascii, but
 268+ E5D0             >                org     $-1                 // alter last byte of Name just above to set
 268+ E5CF BC          >                db      {b $} | END_BIT     // msb as name end
 268+ E5D0             >
 268+ E5D0 C7 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 268+ E5D2             >Prev_Ptr        defl    Heap_Ptr
 268+ E5D2             >
 268+ E5D2             >mirror_Ptr      defl    $
 268+ E5D2             >
 268+ E5D2 A2 28       >                dw      Dict_Ptr + 2        // xt
 268+ E5D4             >Heap_Ptr        defl    $ - $E000           // save current HP
 268+ E5D4             >
 268+ E5D4             >Current_HP      defl  $ - $E000             // used to set HP once!
 268+ E5D4             >
 268+ E5D4             >//              ______________________________________________________________________
 268+ E5D4             >//              Dictionary part
 268+ E5D4             >
 268+ E5D4             >                org     Dict_Ptr
 268+ 28A0             >
 268+ 28A0 D2 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 268+ 28A2             >
 268+ 28A2             >ULESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 268+ 28A2 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 268+ 28A2 ~           >
 268+ 28A2 ~           >
 268+ 28A2             >                endif           ; ok        // for other definitions it "points" the correct handler
 268+ 28A2             >                // Use of "; ok" to suppress "warning[fwdref]"
 268+ 28A2             >
 268+ 28A2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 269+ 28A2 D9                           exx
 270+ 28A3 D1                           pop     de
 271+ 28A4 E1                           pop     hl
 272+ 28A5              Unsigned_Less_Exit:
 273+ 28A5 A7                           and     a
 274+ 28A6 ED 52                        sbc     hl, de
 275+ 28A8 ED 62                        sbc     hl, hl
 276+ 28AA E5                           push    hl
 277+ 28AB D9                           exx
 278+ 28AC                              next
 278+ 28AC DD E9       >                jp      (ix)
 279+ 28AE
 280+ 28AE              //  ______________________________________________________________________
 281+ 28AE              //
 282+ 28AE              // <           n1 n2 -- n3
 283+ 28AE              // less-than
 284+ 28AE                              New_Def LESS, "<", is_code, is_normal
 284+ 28AE             >
 284+ 28AE             >Dict_Ptr        defl    $
 284+ 28AE             >
 284+ 28AE             >//              ______________________________________________________________________
 284+ 28AE             >//              Heap part
 284+ 28AE             >
 284+ 28AE             >
 284+ 28AE             >                org     (Heap_Ptr & $1FFF) + $E000
 284+ E5D4             >
 284+ E5D4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 284+ E5D4             >Latest_Definition defl  Heap_Ptr
 284+ E5D4             >
 284+ E5D4             >                // dummy db directives used to calculate length of namec
 284+ E5D4 3C          >                db      "<"
 284+ E5D5             >len_NFA         defl    $ - temp_NFA
 284+ E5D5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 284+ E5D4             >
 284+ E5D4 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 284+ E5D5 3C          >                db      "<"               // name string in 7-bit ascii, but
 284+ E5D6             >                org     $-1                 // alter last byte of Name just above to set
 284+ E5D5 BC          >                db      {b $} | END_BIT     // msb as name end
 284+ E5D6             >
 284+ E5D6 CD 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 284+ E5D8             >Prev_Ptr        defl    Heap_Ptr
 284+ E5D8             >
 284+ E5D8             >mirror_Ptr      defl    $
 284+ E5D8             >
 284+ E5D8 B0 28       >                dw      Dict_Ptr + 2        // xt
 284+ E5DA             >Heap_Ptr        defl    $ - $E000           // save current HP
 284+ E5DA             >
 284+ E5DA             >Current_HP      defl  $ - $E000             // used to set HP once!
 284+ E5DA             >
 284+ E5DA             >//              ______________________________________________________________________
 284+ E5DA             >//              Dictionary part
 284+ E5DA             >
 284+ E5DA             >                org     Dict_Ptr
 284+ 28AE             >
 284+ 28AE D8 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 284+ 28B0             >
 284+ 28B0             >LESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 284+ 28B0 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 284+ 28B0 ~           >
 284+ 28B0 ~           >
 284+ 28B0             >                endif           ; ok        // for other definitions it "points" the correct handler
 284+ 28B0             >                // Use of "; ok" to suppress "warning[fwdref]"
 284+ 28B0             >
 284+ 28B0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 285+ 28B0 D9                           exx
 286+ 28B1 E1                           pop     hl
 287+ 28B2 D1                           pop     de
 288+ 28B3 01 00 80                     ld      bc, $8000
 289+ 28B6 09                           add     hl, bc
 290+ 28B7 EB                           ex      de, hl
 291+ 28B8 09                           add     hl, bc
 292+ 28B9 18 EA                        jr      Unsigned_Less_Exit
 293+ 28BB              //              and     a
 294+ 28BB              //              sbc     hl, de
 295+ 28BB              //              sbc     hl, hl
 296+ 28BB              //              push    hl
 297+ 28BB              //              exx
 298+ 28BB              //              next
 299+ 28BB
 300+ 28BB              //  ______________________________________________________________________
 301+ 28BB              //
 302+ 28BB              // >            n1 n2 -- n3
 303+ 28BB              // greater than
 304+ 28BB                              Colon_Def GREATER, ">", is_normal
 304+ 28BB             >                New_Def  GREATER, ">", Enter_Ptr, is_normal ; ok
 304+ 28BB             >
 304+ 28BB             >Dict_Ptr        defl    $
 304+ 28BB             >
 304+ 28BB             >//              ______________________________________________________________________
 304+ 28BB             >//              Heap part
 304+ 28BB             >
 304+ 28BB             >
 304+ 28BB             >                org     (Heap_Ptr & $1FFF) + $E000
 304+ E5DA             >
 304+ E5DA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 304+ E5DA             >Latest_Definition defl  Heap_Ptr
 304+ E5DA             >
 304+ E5DA             >                // dummy db directives used to calculate length of namec
 304+ E5DA 3E          >                db      ">"
 304+ E5DB             >len_NFA         defl    $ - temp_NFA
 304+ E5DB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 304+ E5DA             >
 304+ E5DA 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 304+ E5DB 3E          >                db      ">"               // name string in 7-bit ascii, but
 304+ E5DC             >                org     $-1                 // alter last byte of Name just above to set
 304+ E5DB BE          >                db      {b $} | END_BIT     // msb as name end
 304+ E5DC             >
 304+ E5DC D4 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 304+ E5DE             >Prev_Ptr        defl    Heap_Ptr
 304+ E5DE             >
 304+ E5DE             >mirror_Ptr      defl    $
 304+ E5DE             >
 304+ E5DE BD 28       >                dw      Dict_Ptr + 2        // xt
 304+ E5E0             >Heap_Ptr        defl    $ - $E000           // save current HP
 304+ E5E0             >
 304+ E5E0             >Current_HP      defl  $ - $E000             // used to set HP once!
 304+ E5E0             >
 304+ E5E0             >//              ______________________________________________________________________
 304+ E5E0             >//              Dictionary part
 304+ E5E0             >
 304+ E5E0             >                org     Dict_Ptr
 304+ 28BB             >
 304+ 28BB DE 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 304+ 28BD             >
 304+ 28BD             >GREATER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 304+ 28BD CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 304+ 28C0             >
 304+ 28C0             >
 304+ 28C0             >                endif           ; ok        // for other definitions it "points" the correct handler
 304+ 28C0             >                // Use of "; ok" to suppress "warning[fwdref]"
 304+ 28C0             >
 304+ 28C0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 305+ 28C0 C0 25 B0 28                  dw      SWAP, LESS              // swap <
 306+ 28C4 F1 24                        dw      EXIT                    // ;
 307+ 28C6              //  ______________________________________________________________________
 308+ 28C6              //
 309+ 28C6              // min          n1 n2 -- n3
 310+ 28C6              // minimum between n1 and n2
 311+ 28C6                              Colon_Def MIN, "MIN" , is_normal
 311+ 28C6             >                New_Def  MIN, "MIN", Enter_Ptr, is_normal ; ok
 311+ 28C6             >
 311+ 28C6             >Dict_Ptr        defl    $
 311+ 28C6             >
 311+ 28C6             >//              ______________________________________________________________________
 311+ 28C6             >//              Heap part
 311+ 28C6             >
 311+ 28C6             >
 311+ 28C6             >                org     (Heap_Ptr & $1FFF) + $E000
 311+ E5E0             >
 311+ E5E0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 311+ E5E0             >Latest_Definition defl  Heap_Ptr
 311+ E5E0             >
 311+ E5E0             >                // dummy db directives used to calculate length of namec
 311+ E5E0 4D 49 4E    >                db      "MIN"
 311+ E5E3             >len_NFA         defl    $ - temp_NFA
 311+ E5E3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 311+ E5E0             >
 311+ E5E0 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 311+ E5E1 4D 49 4E    >                db      "MIN"               // name string in 7-bit ascii, but
 311+ E5E4             >                org     $-1                 // alter last byte of Name just above to set
 311+ E5E3 CE          >                db      {b $} | END_BIT     // msb as name end
 311+ E5E4             >
 311+ E5E4 DA 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 311+ E5E6             >Prev_Ptr        defl    Heap_Ptr
 311+ E5E6             >
 311+ E5E6             >mirror_Ptr      defl    $
 311+ E5E6             >
 311+ E5E6 C8 28       >                dw      Dict_Ptr + 2        // xt
 311+ E5E8             >Heap_Ptr        defl    $ - $E000           // save current HP
 311+ E5E8             >
 311+ E5E8             >Current_HP      defl  $ - $E000             // used to set HP once!
 311+ E5E8             >
 311+ E5E8             >//              ______________________________________________________________________
 311+ E5E8             >//              Dictionary part
 311+ E5E8             >
 311+ E5E8             >                org     Dict_Ptr
 311+ 28C6             >
 311+ 28C6 E6 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 311+ 28C8             >
 311+ 28C8             >MIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 311+ 28C8 CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 311+ 28CB             >
 311+ 28CB             >
 311+ 28CB             >                endif           ; ok        // for other definitions it "points" the correct handler
 311+ 28CB             >                // Use of "; ok" to suppress "warning[fwdref]"
 311+ 28CB             >
 311+ 28CB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 312+ 28CB 0F 26                        dw      TWO_DUP                 // 2dup
 313+ 28CD BD 28                        dw      GREATER                 // >
 314+ 28CF 8F 20                        dw      ZBRANCH
 315+ 28D1 04 00                        dw      Min_Skip - $   // if
 316+ 28D3 C0 25                        dw          SWAP                //      swap
 317+ 28D5              Min_Skip:                                       // endif
 318+ 28D5 AC 25                        dw      DROP                    // drop
 319+ 28D7 F1 24                        dw      EXIT                    // ;
 320+ 28D9
 321+ 28D9              //  ______________________________________________________________________
 322+ 28D9              //
 323+ 28D9              // max          n1 n2 -- n3
 324+ 28D9              // maximum between n1 and n2
 325+ 28D9                              Colon_Def MAX, "MAX", is_normal
 325+ 28D9             >                New_Def  MAX, "MAX", Enter_Ptr, is_normal ; ok
 325+ 28D9             >
 325+ 28D9             >Dict_Ptr        defl    $
 325+ 28D9             >
 325+ 28D9             >//              ______________________________________________________________________
 325+ 28D9             >//              Heap part
 325+ 28D9             >
 325+ 28D9             >
 325+ 28D9             >                org     (Heap_Ptr & $1FFF) + $E000
 325+ E5E8             >
 325+ E5E8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 325+ E5E8             >Latest_Definition defl  Heap_Ptr
 325+ E5E8             >
 325+ E5E8             >                // dummy db directives used to calculate length of namec
 325+ E5E8 4D 41 58    >                db      "MAX"
 325+ E5EB             >len_NFA         defl    $ - temp_NFA
 325+ E5EB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 325+ E5E8             >
 325+ E5E8 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 325+ E5E9 4D 41 58    >                db      "MAX"               // name string in 7-bit ascii, but
 325+ E5EC             >                org     $-1                 // alter last byte of Name just above to set
 325+ E5EB D8          >                db      {b $} | END_BIT     // msb as name end
 325+ E5EC             >
 325+ E5EC E0 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 325+ E5EE             >Prev_Ptr        defl    Heap_Ptr
 325+ E5EE             >
 325+ E5EE             >mirror_Ptr      defl    $
 325+ E5EE             >
 325+ E5EE DB 28       >                dw      Dict_Ptr + 2        // xt
 325+ E5F0             >Heap_Ptr        defl    $ - $E000           // save current HP
 325+ E5F0             >
 325+ E5F0             >Current_HP      defl  $ - $E000             // used to set HP once!
 325+ E5F0             >
 325+ E5F0             >//              ______________________________________________________________________
 325+ E5F0             >//              Dictionary part
 325+ E5F0             >
 325+ E5F0             >                org     Dict_Ptr
 325+ 28D9             >
 325+ 28D9 EE 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 325+ 28DB             >
 325+ 28DB             >MAX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 325+ 28DB CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 325+ 28DE             >
 325+ 28DE             >
 325+ 28DE             >                endif           ; ok        // for other definitions it "points" the correct handler
 325+ 28DE             >                // Use of "; ok" to suppress "warning[fwdref]"
 325+ 28DE             >
 325+ 28DE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 326+ 28DE 0F 26                        dw      TWO_DUP                 // 2dup
 327+ 28E0 B0 28                        dw      LESS                    // <
 328+ 28E2 8F 20                        dw      ZBRANCH
 329+ 28E4 04 00                        dw      Max_Skip - $   // if
 330+ 28E6 C0 25                        dw          SWAP                //      swap
 331+ 28E8              Max_Skip:                                       // endif
 332+ 28E8 AC 25                        dw      DROP                    // drop
 333+ 28EA F1 24                        dw      EXIT                    // ;
 334+ 28EC
 335+ 28EC              //  ______________________________________________________________________
 336+ 28EC              //
 337+ 28EC              // ?dup         n -- 0 | n n
 338+ 28EC              // duplicate if not zero
 339+ 28EC                              New_Def QDUP, "?DUP", is_code, is_normal
 339+ 28EC             >
 339+ 28EC             >Dict_Ptr        defl    $
 339+ 28EC             >
 339+ 28EC             >//              ______________________________________________________________________
 339+ 28EC             >//              Heap part
 339+ 28EC             >
 339+ 28EC             >
 339+ 28EC             >                org     (Heap_Ptr & $1FFF) + $E000
 339+ E5F0             >
 339+ E5F0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 339+ E5F0             >Latest_Definition defl  Heap_Ptr
 339+ E5F0             >
 339+ E5F0             >                // dummy db directives used to calculate length of namec
 339+ E5F0 3F 44 55 50 >                db      "?DUP"
 339+ E5F4             >len_NFA         defl    $ - temp_NFA
 339+ E5F4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 339+ E5F0             >
 339+ E5F0 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 339+ E5F1 3F 44 55 50 >                db      "?DUP"               // name string in 7-bit ascii, but
 339+ E5F5             >                org     $-1                 // alter last byte of Name just above to set
 339+ E5F4 D0          >                db      {b $} | END_BIT     // msb as name end
 339+ E5F5             >
 339+ E5F5 E8 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 339+ E5F7             >Prev_Ptr        defl    Heap_Ptr
 339+ E5F7             >
 339+ E5F7             >mirror_Ptr      defl    $
 339+ E5F7             >
 339+ E5F7 EE 28       >                dw      Dict_Ptr + 2        // xt
 339+ E5F9             >Heap_Ptr        defl    $ - $E000           // save current HP
 339+ E5F9             >
 339+ E5F9             >Current_HP      defl  $ - $E000             // used to set HP once!
 339+ E5F9             >
 339+ E5F9             >//              ______________________________________________________________________
 339+ E5F9             >//              Dictionary part
 339+ E5F9             >
 339+ E5F9             >                org     Dict_Ptr
 339+ 28EC             >
 339+ 28EC F7 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 339+ 28EE             >
 339+ 28EE             >QDUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 339+ 28EE ~           >                call    runcode ; ok        // for primitive definitions  actual code
 339+ 28EE ~           >
 339+ 28EE ~           >
 339+ 28EE             >                endif           ; ok        // for other definitions it "points" the correct handler
 339+ 28EE             >                // Use of "; ok" to suppress "warning[fwdref]"
 339+ 28EE             >
 339+ 28EE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 340+ 28EE              QDup_Ptr:
 341+ 28EE E1                           pop     hl
 342+ 28EF 7C                           ld      a, h
 343+ 28F0 B5                           or      l
 344+ 28F1 28 01                        jr      z, QDup_Skip
 345+ 28F3 E5                               push    hl
 346+ 28F4              QDup_Skip:
 347+ 28F4                              psh1
 347+ 28F4 E5          >                push    hl
 347+ 28F5 DD E9       >                jp      (ix)
 348+ 28F7
 349+ 28F7              //  ______________________________________________________________________
 350+ 28F7              //
 351+ 28F7              // -dup         n -- 0 | n n
 352+ 28F7              // duplicate if not zero
 353+ 28F7                              New_Def LDUP, "-DUP", is_code, is_normal
 353+ 28F7             >
 353+ 28F7             >Dict_Ptr        defl    $
 353+ 28F7             >
 353+ 28F7             >//              ______________________________________________________________________
 353+ 28F7             >//              Heap part
 353+ 28F7             >
 353+ 28F7             >
 353+ 28F7             >                org     (Heap_Ptr & $1FFF) + $E000
 353+ E5F9             >
 353+ E5F9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 353+ E5F9             >Latest_Definition defl  Heap_Ptr
 353+ E5F9             >
 353+ E5F9             >                // dummy db directives used to calculate length of namec
 353+ E5F9 2D 44 55 50 >                db      "-DUP"
 353+ E5FD             >len_NFA         defl    $ - temp_NFA
 353+ E5FD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 353+ E5F9             >
 353+ E5F9 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 353+ E5FA 2D 44 55 50 >                db      "-DUP"               // name string in 7-bit ascii, but
 353+ E5FE             >                org     $-1                 // alter last byte of Name just above to set
 353+ E5FD D0          >                db      {b $} | END_BIT     // msb as name end
 353+ E5FE             >
 353+ E5FE F0 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 353+ E600             >Prev_Ptr        defl    Heap_Ptr
 353+ E600             >
 353+ E600             >mirror_Ptr      defl    $
 353+ E600             >
 353+ E600 F9 28       >                dw      Dict_Ptr + 2        // xt
 353+ E602             >Heap_Ptr        defl    $ - $E000           // save current HP
 353+ E602             >
 353+ E602             >Current_HP      defl  $ - $E000             // used to set HP once!
 353+ E602             >
 353+ E602             >//              ______________________________________________________________________
 353+ E602             >//              Dictionary part
 353+ E602             >
 353+ E602             >                org     Dict_Ptr
 353+ 28F7             >
 353+ 28F7 00 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 353+ 28F9             >
 353+ 28F9             >LDUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 353+ 28F9 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 353+ 28F9 ~           >
 353+ 28F9 ~           >
 353+ 28F9             >                endif           ; ok        // for other definitions it "points" the correct handler
 353+ 28F9             >                // Use of "; ok" to suppress "warning[fwdref]"
 353+ 28F9             >
 353+ 28F9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 354+ 28F9 C3 EE 28                     jp      QDup_Ptr
 355+ 28FC
 356+ 28FC              //  ______________________________________________________________________
 357+ 28FC              //
 358+ 28FC              // emit         c --
 359+ 28FC                              Colon_Def EMIT, "EMIT", is_normal
 359+ 28FC             >                New_Def  EMIT, "EMIT", Enter_Ptr, is_normal ; ok
 359+ 28FC             >
 359+ 28FC             >Dict_Ptr        defl    $
 359+ 28FC             >
 359+ 28FC             >//              ______________________________________________________________________
 359+ 28FC             >//              Heap part
 359+ 28FC             >
 359+ 28FC             >
 359+ 28FC             >                org     (Heap_Ptr & $1FFF) + $E000
 359+ E602             >
 359+ E602             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 359+ E602             >Latest_Definition defl  Heap_Ptr
 359+ E602             >
 359+ E602             >                // dummy db directives used to calculate length of namec
 359+ E602 45 4D 49 54 >                db      "EMIT"
 359+ E606             >len_NFA         defl    $ - temp_NFA
 359+ E606             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 359+ E602             >
 359+ E602 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 359+ E603 45 4D 49 54 >                db      "EMIT"               // name string in 7-bit ascii, but
 359+ E607             >                org     $-1                 // alter last byte of Name just above to set
 359+ E606 D4          >                db      {b $} | END_BIT     // msb as name end
 359+ E607             >
 359+ E607 F9 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 359+ E609             >Prev_Ptr        defl    Heap_Ptr
 359+ E609             >
 359+ E609             >mirror_Ptr      defl    $
 359+ E609             >
 359+ E609 FE 28       >                dw      Dict_Ptr + 2        // xt
 359+ E60B             >Heap_Ptr        defl    $ - $E000           // save current HP
 359+ E60B             >
 359+ E60B             >Current_HP      defl  $ - $E000             // used to set HP once!
 359+ E60B             >
 359+ E60B             >//              ______________________________________________________________________
 359+ E60B             >//              Dictionary part
 359+ E60B             >
 359+ E60B             >                org     Dict_Ptr
 359+ 28FC             >
 359+ 28FC 09 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 359+ 28FE             >
 359+ 28FE             >EMIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 359+ 28FE CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 359+ 2901             >
 359+ 2901             >
 359+ 2901             >                endif           ; ok        // for other definitions it "points" the correct handler
 359+ 2901             >                // Use of "; ok" to suppress "warning[fwdref]"
 359+ 2901             >
 359+ 2901             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 360+ 2901 6D 22                        dw      C_EMIT                      // (?emit)
 361+ 2903 EE 28                        dw      QDUP                        // ?dup
 362+ 2905                                                                  // if
 363+ 2905 8F 20                        dw      ZBRANCH
 364+ 2907 0A 00                        dw      Emit_Skip - $
 365+ 2909 39 22                        dw          EMITC                   //      emitc
 366+ 290B 2E 27                        dw          ONE                     //      1
 367+ 290D D4 27 19 26                  dw          OUT, PLUSSTORE        //      out +!
 368+ 2911              Emit_Skip:                                          // endif
 369+ 2911 F1 24                        dw      EXIT                        // ;
 370+ 2913
 371+ 2913              //  ______________________________________________________________________
 372+ 2913              //
 373+ 2913              // space        --
 374+ 2913                              Colon_Def SPACE, "SPACE", is_normal
 374+ 2913             >                New_Def  SPACE, "SPACE", Enter_Ptr, is_normal ; ok
 374+ 2913             >
 374+ 2913             >Dict_Ptr        defl    $
 374+ 2913             >
 374+ 2913             >//              ______________________________________________________________________
 374+ 2913             >//              Heap part
 374+ 2913             >
 374+ 2913             >
 374+ 2913             >                org     (Heap_Ptr & $1FFF) + $E000
 374+ E60B             >
 374+ E60B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 374+ E60B             >Latest_Definition defl  Heap_Ptr
 374+ E60B             >
 374+ E60B             >                // dummy db directives used to calculate length of namec
 374+ E60B 53 50 41 43 >                db      "SPACE"
 374+ E60F 45          >
 374+ E610             >len_NFA         defl    $ - temp_NFA
 374+ E610             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 374+ E60B             >
 374+ E60B 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 374+ E60C 53 50 41 43 >                db      "SPACE"               // name string in 7-bit ascii, but
 374+ E610 45          >
 374+ E611             >                org     $-1                 // alter last byte of Name just above to set
 374+ E610 C5          >                db      {b $} | END_BIT     // msb as name end
 374+ E611             >
 374+ E611 02 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 374+ E613             >Prev_Ptr        defl    Heap_Ptr
 374+ E613             >
 374+ E613             >mirror_Ptr      defl    $
 374+ E613             >
 374+ E613 15 29       >                dw      Dict_Ptr + 2        // xt
 374+ E615             >Heap_Ptr        defl    $ - $E000           // save current HP
 374+ E615             >
 374+ E615             >Current_HP      defl  $ - $E000             // used to set HP once!
 374+ E615             >
 374+ E615             >//              ______________________________________________________________________
 374+ E615             >//              Dictionary part
 374+ E615             >
 374+ E615             >                org     Dict_Ptr
 374+ 2913             >
 374+ 2913 13 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 374+ 2915             >
 374+ 2915             >SPACE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 374+ 2915 CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 374+ 2918             >
 374+ 2918             >
 374+ 2918             >                endif           ; ok        // for other definitions it "points" the correct handler
 374+ 2918             >                // Use of "; ok" to suppress "warning[fwdref]"
 374+ 2918             >
 374+ 2918             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 375+ 2918 4A 27 FE 28                  dw      BL, EMIT                // bl emit
 376+ 291C F1 24                        dw      EXIT                    // ;
 377+ 291E
 378+ 291E              //  ______________________________________________________________________
 379+ 291E              //
 380+ 291E              // traverse     a n -- a
 381+ 291E              // A dictionary entry is structured as follows
 382+ 291E              // NFA: +0   one byte of word-length (n<32) | some flags (immediate, smudge) | $80
 383+ 291E              //      +1   word name, last character is toggled with $80
 384+ 291E              // LFA: +1+n link to NFA ofprevious  dictionary entry.
 385+ 291E              // CFA: +3+n routine address. Colon definitions here have a CALL aa
 386+ 291E              // PFA: +6+n "is_code", definitions have no PFA. // +5
 387+ 291E              //
 388+ 291E                              Colon_Def TRAVERSE, "TRAVERSE", is_normal
 388+ 291E             >                New_Def  TRAVERSE, "TRAVERSE", Enter_Ptr, is_normal ; ok
 388+ 291E             >
 388+ 291E             >Dict_Ptr        defl    $
 388+ 291E             >
 388+ 291E             >//              ______________________________________________________________________
 388+ 291E             >//              Heap part
 388+ 291E             >
 388+ 291E             >
 388+ 291E             >                org     (Heap_Ptr & $1FFF) + $E000
 388+ E615             >
 388+ E615             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 388+ E615             >Latest_Definition defl  Heap_Ptr
 388+ E615             >
 388+ E615             >                // dummy db directives used to calculate length of namec
 388+ E615 54 52 41 56 >                db      "TRAVERSE"
 388+ E619 45 52 53 45 >
 388+ E61D             >len_NFA         defl    $ - temp_NFA
 388+ E61D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 388+ E615             >
 388+ E615 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 388+ E616 54 52 41 56 >                db      "TRAVERSE"               // name string in 7-bit ascii, but
 388+ E61A 45 52 53 45 >
 388+ E61E             >                org     $-1                 // alter last byte of Name just above to set
 388+ E61D C5          >                db      {b $} | END_BIT     // msb as name end
 388+ E61E             >
 388+ E61E 0B 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 388+ E620             >Prev_Ptr        defl    Heap_Ptr
 388+ E620             >
 388+ E620             >mirror_Ptr      defl    $
 388+ E620             >
 388+ E620 20 29       >                dw      Dict_Ptr + 2        // xt
 388+ E622             >Heap_Ptr        defl    $ - $E000           // save current HP
 388+ E622             >
 388+ E622             >Current_HP      defl  $ - $E000             // used to set HP once!
 388+ E622             >
 388+ E622             >//              ______________________________________________________________________
 388+ E622             >//              Dictionary part
 388+ E622             >
 388+ E622             >                org     Dict_Ptr
 388+ 291E             >
 388+ 291E 20 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 388+ 2920             >
 388+ 2920             >TRAVERSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 388+ 2920 CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 388+ 2923             >
 388+ 2923             >
 388+ 2923             >                endif           ; ok        // for other definitions it "points" the correct handler
 388+ 2923             >                // Use of "; ok" to suppress "warning[fwdref]"
 388+ 2923             >
 388+ 2923             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 389+ 2923 C0 25                        dw      SWAP                    // swap
 390+ 2925              Traverse_Begin:                                 // begin
 391+ 2925 A3 25 43 25                  dw          OVER, PLUS          //      over +
 392+ 2929 3D 20 7F 00                  dw          LIT, 127            //      127
 393+ 292D A3 25 46 26                  dw          OVER, CFETCH        //      over @
 394+ 2931 B0 28                        dw          LESS                //      <
 395+ 2933                                                              // until
 396+ 2933 8F 20                        dw      ZBRANCH
 397+ 2935 F0 FF                        dw      Traverse_Begin - $
 398+ 2937 B1 25                        dw      NIP                     //  nip
 399+ 2939 F1 24                        dw      EXIT                    //  ;
 400+ 293B
 401+ 293B              //  ______________________________________________________________________
 402+ 293B              //
 403+ 293B              // mmu7@        -- n
 404+ 293B              // query current page in MMU7 8K-RAM : 0 and 223
 405+ 293B
 406+ 293B                              New_Def MMU7_FETCH, "MMU7@", is_code, is_normal
 406+ 293B             >
 406+ 293B             >Dict_Ptr        defl    $
 406+ 293B             >
 406+ 293B             >//              ______________________________________________________________________
 406+ 293B             >//              Heap part
 406+ 293B             >
 406+ 293B             >
 406+ 293B             >                org     (Heap_Ptr & $1FFF) + $E000
 406+ E622             >
 406+ E622             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 406+ E622             >Latest_Definition defl  Heap_Ptr
 406+ E622             >
 406+ E622             >                // dummy db directives used to calculate length of namec
 406+ E622 4D 4D 55 37 >                db      "MMU7@"
 406+ E626 40          >
 406+ E627             >len_NFA         defl    $ - temp_NFA
 406+ E627             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 406+ E622             >
 406+ E622 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 406+ E623 4D 4D 55 37 >                db      "MMU7@"               // name string in 7-bit ascii, but
 406+ E627 40          >
 406+ E628             >                org     $-1                 // alter last byte of Name just above to set
 406+ E627 C0          >                db      {b $} | END_BIT     // msb as name end
 406+ E628             >
 406+ E628 15 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 406+ E62A             >Prev_Ptr        defl    Heap_Ptr
 406+ E62A             >
 406+ E62A             >mirror_Ptr      defl    $
 406+ E62A             >
 406+ E62A 3D 29       >                dw      Dict_Ptr + 2        // xt
 406+ E62C             >Heap_Ptr        defl    $ - $E000           // save current HP
 406+ E62C             >
 406+ E62C             >Current_HP      defl  $ - $E000             // used to set HP once!
 406+ E62C             >
 406+ E62C             >//              ______________________________________________________________________
 406+ E62C             >//              Dictionary part
 406+ E62C             >
 406+ E62C             >                org     Dict_Ptr
 406+ 293B             >
 406+ 293B 2A 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 406+ 293D             >
 406+ 293D             >MMU7_FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 406+ 293D ~           >                call    runcode ; ok        // for primitive definitions  actual code
 406+ 293D ~           >
 406+ 293D ~           >
 406+ 293D             >                endif           ; ok        // for other definitions it "points" the correct handler
 406+ 293D             >                // Use of "; ok" to suppress "warning[fwdref]"
 406+ 293D             >
 406+ 293D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 407+ 293D D9                           exx
 408+ 293E CD 36 21                     call    MMU7_read
 409+ 2941 D9                           exx
 410+ 2942 6F                           ld      l, a
 411+ 2943 26 00                        ld      h, 0
 412+ 2945 E5                           push    hl
 413+ 2946                              next
 413+ 2946 DD E9       >                jp      (ix)
 414+ 2948
 415+ 2948              //  ______________________________________________________________________
 416+ 2948              //
 417+ 2948              // mmu7!        n --
 418+ 2948              // set MMU7 8K-RAM page to n given between 0 and 223
 419+ 2948              // optimized version that uses NEXTREG n,A Z80n op-code.
 420+ 2948
 421+ 2948                              New_Def MMU7_STORE, "MMU7!", is_code, is_normal
 421+ 2948             >
 421+ 2948             >Dict_Ptr        defl    $
 421+ 2948             >
 421+ 2948             >//              ______________________________________________________________________
 421+ 2948             >//              Heap part
 421+ 2948             >
 421+ 2948             >
 421+ 2948             >                org     (Heap_Ptr & $1FFF) + $E000
 421+ E62C             >
 421+ E62C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 421+ E62C             >Latest_Definition defl  Heap_Ptr
 421+ E62C             >
 421+ E62C             >                // dummy db directives used to calculate length of namec
 421+ E62C 4D 4D 55 37 >                db      "MMU7!"
 421+ E630 21          >
 421+ E631             >len_NFA         defl    $ - temp_NFA
 421+ E631             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 421+ E62C             >
 421+ E62C 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 421+ E62D 4D 4D 55 37 >                db      "MMU7!"               // name string in 7-bit ascii, but
 421+ E631 21          >
 421+ E632             >                org     $-1                 // alter last byte of Name just above to set
 421+ E631 A1          >                db      {b $} | END_BIT     // msb as name end
 421+ E632             >
 421+ E632 22 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 421+ E634             >Prev_Ptr        defl    Heap_Ptr
 421+ E634             >
 421+ E634             >mirror_Ptr      defl    $
 421+ E634             >
 421+ E634 4A 29       >                dw      Dict_Ptr + 2        // xt
 421+ E636             >Heap_Ptr        defl    $ - $E000           // save current HP
 421+ E636             >
 421+ E636             >Current_HP      defl  $ - $E000             // used to set HP once!
 421+ E636             >
 421+ E636             >//              ______________________________________________________________________
 421+ E636             >//              Dictionary part
 421+ E636             >
 421+ E636             >                org     Dict_Ptr
 421+ 2948             >
 421+ 2948 34 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 421+ 294A             >
 421+ 294A             >MMU7_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 421+ 294A ~           >                call    runcode ; ok        // for primitive definitions  actual code
 421+ 294A ~           >
 421+ 294A ~           >
 421+ 294A             >                endif           ; ok        // for other definitions it "points" the correct handler
 421+ 294A             >                // Use of "; ok" to suppress "warning[fwdref]"
 421+ 294A             >
 421+ 294A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 422+ 294A E1                           pop     hl
 423+ 294B 7D                           ld      a, l
 424+ 294C ED 92 57                     nextreg 87, a
 425+ 294F
 426+ 294F                              next
 426+ 294F DD E9       >                jp      (ix)
 427+ 2951
 428+ 2951              //  ______________________________________________________________________
 429+ 2951              //
 430+ 2951              // >far         ha -- a n
 431+ 2951              // decode bits 765 of H as one of the 8K-page between 64 and 71 (40h-47h)
 432+ 2951              // take lower bits of H and L as an offset from E000h
 433+ 2951              // then return address  a  between E000h-FFFFh
 434+ 2951              // and page number n  between 64-71 (40h-47h)
 435+ 2951              // For example, in hex:
 436+ 2951              //   0000 >FAR  gives  40.E000
 437+ 2951              //   1FFF >FAR  gives  40.FFFF
 438+ 2951              //   2000 >FAR  gives  41.E000
 439+ 2951              //   3FFF >FAR  gives  41.FFFF
 440+ 2951              //   EFFF >FAR  gives  47.EFFF
 441+ 2951              //   FFFF >FAR  gives  47.FFFF
 442+ 2951                              New_Def TO_FAR, ">FAR", is_code, is_normal
 442+ 2951             >
 442+ 2951             >Dict_Ptr        defl    $
 442+ 2951             >
 442+ 2951             >//              ______________________________________________________________________
 442+ 2951             >//              Heap part
 442+ 2951             >
 442+ 2951             >
 442+ 2951             >                org     (Heap_Ptr & $1FFF) + $E000
 442+ E636             >
 442+ E636             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 442+ E636             >Latest_Definition defl  Heap_Ptr
 442+ E636             >
 442+ E636             >                // dummy db directives used to calculate length of namec
 442+ E636 3E 46 41 52 >                db      ">FAR"
 442+ E63A             >len_NFA         defl    $ - temp_NFA
 442+ E63A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 442+ E636             >
 442+ E636 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 442+ E637 3E 46 41 52 >                db      ">FAR"               // name string in 7-bit ascii, but
 442+ E63B             >                org     $-1                 // alter last byte of Name just above to set
 442+ E63A D2          >                db      {b $} | END_BIT     // msb as name end
 442+ E63B             >
 442+ E63B 2C 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 442+ E63D             >Prev_Ptr        defl    Heap_Ptr
 442+ E63D             >
 442+ E63D             >mirror_Ptr      defl    $
 442+ E63D             >
 442+ E63D 53 29       >                dw      Dict_Ptr + 2        // xt
 442+ E63F             >Heap_Ptr        defl    $ - $E000           // save current HP
 442+ E63F             >
 442+ E63F             >Current_HP      defl  $ - $E000             // used to set HP once!
 442+ E63F             >
 442+ E63F             >//              ______________________________________________________________________
 442+ E63F             >//              Dictionary part
 442+ E63F             >
 442+ E63F             >                org     Dict_Ptr
 442+ 2951             >
 442+ 2951 3D 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 442+ 2953             >
 442+ 2953             >TO_FAR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 442+ 2953 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 442+ 2953 ~           >
 442+ 2953 ~           >
 442+ 2953             >                endif           ; ok        // for other definitions it "points" the correct handler
 442+ 2953             >                // Use of "; ok" to suppress "warning[fwdref]"
 442+ 2953             >
 442+ 2953             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 443+ 2953 E1                           pop     hl
 444+ 2954 CD 41 21                     call    TO_FAR_rout
 445+ 2957 E5                           push    hl
 446+ 2958 6F                           ld      l, a
 447+ 2959 26 00                        ld      h, 0
 448+ 295B E5                           push    hl
 449+ 295C                              next
 449+ 295C DD E9       >                jp      (ix)
 450+ 295E
 451+ 295E              //  ______________________________________________________________________
 452+ 295E              //
 453+ 295E              // <far         a n  -- ha
 454+ 295E              // given an address E000-FFFF and a page number n (64-71 or 40h-47h)
 455+ 295E              // reverse of >FAR: encodes a FAR address compressing
 456+ 295E              // to bits 765 of H, lower bits of HL address offset from E000h
 457+ 295E                              New_Def FROM_FAR, "<FAR", is_code, is_normal
 457+ 295E             >
 457+ 295E             >Dict_Ptr        defl    $
 457+ 295E             >
 457+ 295E             >//              ______________________________________________________________________
 457+ 295E             >//              Heap part
 457+ 295E             >
 457+ 295E             >
 457+ 295E             >                org     (Heap_Ptr & $1FFF) + $E000
 457+ E63F             >
 457+ E63F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 457+ E63F             >Latest_Definition defl  Heap_Ptr
 457+ E63F             >
 457+ E63F             >                // dummy db directives used to calculate length of namec
 457+ E63F 3C 46 41 52 >                db      "<FAR"
 457+ E643             >len_NFA         defl    $ - temp_NFA
 457+ E643             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 457+ E63F             >
 457+ E63F 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 457+ E640 3C 46 41 52 >                db      "<FAR"               // name string in 7-bit ascii, but
 457+ E644             >                org     $-1                 // alter last byte of Name just above to set
 457+ E643 D2          >                db      {b $} | END_BIT     // msb as name end
 457+ E644             >
 457+ E644 36 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 457+ E646             >Prev_Ptr        defl    Heap_Ptr
 457+ E646             >
 457+ E646             >mirror_Ptr      defl    $
 457+ E646             >
 457+ E646 60 29       >                dw      Dict_Ptr + 2        // xt
 457+ E648             >Heap_Ptr        defl    $ - $E000           // save current HP
 457+ E648             >
 457+ E648             >Current_HP      defl  $ - $E000             // used to set HP once!
 457+ E648             >
 457+ E648             >//              ______________________________________________________________________
 457+ E648             >//              Dictionary part
 457+ E648             >
 457+ E648             >                org     Dict_Ptr
 457+ 295E             >
 457+ 295E 46 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 457+ 2960             >
 457+ 2960             >FROM_FAR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 457+ 2960 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 457+ 2960 ~           >
 457+ 2960 ~           >
 457+ 2960             >                endif           ; ok        // for other definitions it "points" the correct handler
 457+ 2960             >                // Use of "; ok" to suppress "warning[fwdref]"
 457+ 2960             >
 457+ 2960             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 458+ 2960 E1                           pop     hl                  // page number in l
 459+ 2961 7D                           ld      a, l
 460+ 2962 E6 07                        and     07
 461+ 2964 0F                           rrca
 462+ 2965 0F                           rrca
 463+ 2966 0F                           rrca
 464+ 2967 08                           ex      af, af
 465+ 2968 E1                           pop     hl                  // address in hl
 466+ 2969 7C                           ld      a, h
 467+ 296A E6 1F                        and     $1F
 468+ 296C 67                           ld      h, a
 469+ 296D 08                           ex      af, af
 470+ 296E B4                           or      h
 471+ 296F 67                           ld      h, a
 472+ 2970                              psh1
 472+ 2970 E5          >                push    hl
 472+ 2971 DD E9       >                jp      (ix)
 473+ 2973
 474+ 2973              //  ______________________________________________________________________
 475+ 2973              //
 476+ 2973              // ?IN_MMU7        a -- f
 477+ 2973              // check if address lies on MMU7
 478+ 2973              // tf is passed address is on MMU7
 479+ 2973                              Colon_Def QMMU7, "?IN_MMU7", is_normal
 479+ 2973             >                New_Def  QMMU7, "?IN_MMU7", Enter_Ptr, is_normal ; ok
 479+ 2973             >
 479+ 2973             >Dict_Ptr        defl    $
 479+ 2973             >
 479+ 2973             >//              ______________________________________________________________________
 479+ 2973             >//              Heap part
 479+ 2973             >
 479+ 2973             >
 479+ 2973             >                org     (Heap_Ptr & $1FFF) + $E000
 479+ E648             >
 479+ E648             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 479+ E648             >Latest_Definition defl  Heap_Ptr
 479+ E648             >
 479+ E648             >                // dummy db directives used to calculate length of namec
 479+ E648 3F 49 4E 5F >                db      "?IN_MMU7"
 479+ E64C 4D 4D 55 37 >
 479+ E650             >len_NFA         defl    $ - temp_NFA
 479+ E650             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 479+ E648             >
 479+ E648 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 479+ E649 3F 49 4E 5F >                db      "?IN_MMU7"               // name string in 7-bit ascii, but
 479+ E64D 4D 4D 55 37 >
 479+ E651             >                org     $-1                 // alter last byte of Name just above to set
 479+ E650 B7          >                db      {b $} | END_BIT     // msb as name end
 479+ E651             >
 479+ E651 3F 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 479+ E653             >Prev_Ptr        defl    Heap_Ptr
 479+ E653             >
 479+ E653             >mirror_Ptr      defl    $
 479+ E653             >
 479+ E653 75 29       >                dw      Dict_Ptr + 2        // xt
 479+ E655             >Heap_Ptr        defl    $ - $E000           // save current HP
 479+ E655             >
 479+ E655             >Current_HP      defl  $ - $E000             // used to set HP once!
 479+ E655             >
 479+ E655             >//              ______________________________________________________________________
 479+ E655             >//              Dictionary part
 479+ E655             >
 479+ E655             >                org     Dict_Ptr
 479+ 2973             >
 479+ 2973 53 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 479+ 2975             >
 479+ 2975             >QMMU7:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 479+ 2975 CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 479+ 2978             >
 479+ 2978             >
 479+ 2978             >                endif           ; ok        // for other definitions it "points" the correct handler
 479+ 2978             >                // Use of "; ok" to suppress "warning[fwdref]"
 479+ 2978             >
 479+ 2978             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 480+ 2978 C7 25                        dw      DUP
 481+ 297A 3D 20 00 E0                  dw      LIT, $E000
 482+ 297E A2 28                        dw      ULESS
 483+ 2980 24 25                        dw      NOT_OP
 484+ 2982 F1 24                        dw      EXIT
 485+ 2984
 486+ 2984              //  ______________________________________________________________________
 487+ 2984              //
 488+ 2984              // far          hp -- ha
 489+ 2984              // Convert an "heap-pointer address" (ha) into a real address (a)
 490+ 2984              // between E000h and FFFFh and fit the correct 8K page on MMU7
 491+ 2984              // An "ha" uses the 3 msb as page-number and the lower bits as offset at E000.
 492+ 2984                              Colon_Def FAR, "FAR", is_normal
 492+ 2984             >                New_Def  FAR, "FAR", Enter_Ptr, is_normal ; ok
 492+ 2984             >
 492+ 2984             >Dict_Ptr        defl    $
 492+ 2984             >
 492+ 2984             >//              ______________________________________________________________________
 492+ 2984             >//              Heap part
 492+ 2984             >
 492+ 2984             >
 492+ 2984             >                org     (Heap_Ptr & $1FFF) + $E000
 492+ E655             >
 492+ E655             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 492+ E655             >Latest_Definition defl  Heap_Ptr
 492+ E655             >
 492+ E655             >                // dummy db directives used to calculate length of namec
 492+ E655 46 41 52    >                db      "FAR"
 492+ E658             >len_NFA         defl    $ - temp_NFA
 492+ E658             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 492+ E655             >
 492+ E655 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 492+ E656 46 41 52    >                db      "FAR"               // name string in 7-bit ascii, but
 492+ E659             >                org     $-1                 // alter last byte of Name just above to set
 492+ E658 D2          >                db      {b $} | END_BIT     // msb as name end
 492+ E659             >
 492+ E659 48 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 492+ E65B             >Prev_Ptr        defl    Heap_Ptr
 492+ E65B             >
 492+ E65B             >mirror_Ptr      defl    $
 492+ E65B             >
 492+ E65B 86 29       >                dw      Dict_Ptr + 2        // xt
 492+ E65D             >Heap_Ptr        defl    $ - $E000           // save current HP
 492+ E65D             >
 492+ E65D             >Current_HP      defl  $ - $E000             // used to set HP once!
 492+ E65D             >
 492+ E65D             >//              ______________________________________________________________________
 492+ E65D             >//              Dictionary part
 492+ E65D             >
 492+ E65D             >                org     Dict_Ptr
 492+ 2984             >
 492+ 2984 5B 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 492+ 2986             >
 492+ 2986             >FAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 492+ 2986 CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 492+ 2989             >
 492+ 2989             >
 492+ 2989             >                endif           ; ok        // for other definitions it "points" the correct handler
 492+ 2989             >                // Use of "; ok" to suppress "warning[fwdref]"
 492+ 2989             >
 492+ 2989             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 493+ 2989 53 29                        dw      TO_FAR
 494+ 298B 4A 29                        dw      MMU7_STORE
 495+ 298D F1 24                        dw      EXIT
 496+ 298F
 497+ 298F              //  ______________________________________________________________________
 498+ 298F              //
 499+ 298F              // ?HEAP_PTR       n -- n f
 500+ 298F              // check if it's a non-zero heap-pointer or less than $6300
 501+ 298F              // tf if passed argument is an hp
 502+ 298F              // ff if passed argument isn't hp
 503+ 298F                              Colon_Def QHEAPP, "?HEAP_PTR", is_normal
 503+ 298F             >                New_Def  QHEAPP, "?HEAP_PTR", Enter_Ptr, is_normal ; ok
 503+ 298F             >
 503+ 298F             >Dict_Ptr        defl    $
 503+ 298F             >
 503+ 298F             >//              ______________________________________________________________________
 503+ 298F             >//              Heap part
 503+ 298F             >
 503+ 298F             >
 503+ 298F             >                org     (Heap_Ptr & $1FFF) + $E000
 503+ E65D             >
 503+ E65D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 503+ E65D             >Latest_Definition defl  Heap_Ptr
 503+ E65D             >
 503+ E65D             >                // dummy db directives used to calculate length of namec
 503+ E65D 3F 48 45 41 >                db      "?HEAP_PTR"
 503+ E661 50 5F 50 54 >
 503+ E665 52          >
 503+ E666             >len_NFA         defl    $ - temp_NFA
 503+ E666             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 503+ E65D             >
 503+ E65D 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 503+ E65E 3F 48 45 41 >                db      "?HEAP_PTR"               // name string in 7-bit ascii, but
 503+ E662 50 5F 50 54 >
 503+ E666 52          >
 503+ E667             >                org     $-1                 // alter last byte of Name just above to set
 503+ E666 D2          >                db      {b $} | END_BIT     // msb as name end
 503+ E667             >
 503+ E667 55 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 503+ E669             >Prev_Ptr        defl    Heap_Ptr
 503+ E669             >
 503+ E669             >mirror_Ptr      defl    $
 503+ E669             >
 503+ E669 91 29       >                dw      Dict_Ptr + 2        // xt
 503+ E66B             >Heap_Ptr        defl    $ - $E000           // save current HP
 503+ E66B             >
 503+ E66B             >Current_HP      defl  $ - $E000             // used to set HP once!
 503+ E66B             >
 503+ E66B             >//              ______________________________________________________________________
 503+ E66B             >//              Dictionary part
 503+ E66B             >
 503+ E66B             >                org     Dict_Ptr
 503+ 298F             >
 503+ 298F 69 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 503+ 2991             >
 503+ 2991             >QHEAPP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 503+ 2991 CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 503+ 2994             >
 503+ 2994             >
 503+ 2994             >                endif           ; ok        // for other definitions it "points" the correct handler
 503+ 2994             >                // Use of "; ok" to suppress "warning[fwdref]"
 503+ 2994             >
 503+ 2994             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 504+ 2994 C7 25                        dw      DUP
 505+ 2996 8F 20                        dw      ZBRANCH
 506+ 2998 08 00                        dw      QHeap_Skip - $
 507+ 299A 3D 20 00 63                  dw          LIT, $6300
 508+ 299E A2 28                        dw          ULESS
 509+ 29A0              QHeap_Skip:                                          // endif
 510+ 29A0 F1 24                        dw      EXIT                        // ;
 511+ 29A2
 512+ 29A2              //  ______________________________________________________________________
 513+ 29A2              //
 514+ 29A2              // ?>heap       n1 -- n2
 515+ 29A2              // heap correction: given an LFA check if it's a real address or a heap-pointer
 516+ 29A2              // address <= 6300h -- except 0000h -- are interpreted as heap-pointers
 517+ 29A2              // and converted to heap address updating MMU7 via FAR
 518+ 29A2                              Colon_Def QTOHEAP, "?>HEAP", is_normal
 518+ 29A2             >                New_Def  QTOHEAP, "?>HEAP", Enter_Ptr, is_normal ; ok
 518+ 29A2             >
 518+ 29A2             >Dict_Ptr        defl    $
 518+ 29A2             >
 518+ 29A2             >//              ______________________________________________________________________
 518+ 29A2             >//              Heap part
 518+ 29A2             >
 518+ 29A2             >
 518+ 29A2             >                org     (Heap_Ptr & $1FFF) + $E000
 518+ E66B             >
 518+ E66B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 518+ E66B             >Latest_Definition defl  Heap_Ptr
 518+ E66B             >
 518+ E66B             >                // dummy db directives used to calculate length of namec
 518+ E66B 3F 3E 48 45 >                db      "?>HEAP"
 518+ E66F 41 50       >
 518+ E671             >len_NFA         defl    $ - temp_NFA
 518+ E671             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 518+ E66B             >
 518+ E66B 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 518+ E66C 3F 3E 48 45 >                db      "?>HEAP"               // name string in 7-bit ascii, but
 518+ E670 41 50       >
 518+ E672             >                org     $-1                 // alter last byte of Name just above to set
 518+ E671 D0          >                db      {b $} | END_BIT     // msb as name end
 518+ E672             >
 518+ E672 5D 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 518+ E674             >Prev_Ptr        defl    Heap_Ptr
 518+ E674             >
 518+ E674             >mirror_Ptr      defl    $
 518+ E674             >
 518+ E674 A4 29       >                dw      Dict_Ptr + 2        // xt
 518+ E676             >Heap_Ptr        defl    $ - $E000           // save current HP
 518+ E676             >
 518+ E676             >Current_HP      defl  $ - $E000             // used to set HP once!
 518+ E676             >
 518+ E676             >//              ______________________________________________________________________
 518+ E676             >//              Dictionary part
 518+ E676             >
 518+ E676             >                org     Dict_Ptr
 518+ 29A2             >
 518+ 29A2 74 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 518+ 29A4             >
 518+ 29A4             >QTOHEAP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 518+ 29A4 CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 518+ 29A7             >
 518+ 29A7             >
 518+ 29A7             >                endif           ; ok        // for other definitions it "points" the correct handler
 518+ 29A7             >                // Use of "; ok" to suppress "warning[fwdref]"
 518+ 29A7             >
 518+ 29A7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 519+ 29A7 C7 25                        dw      DUP
 520+ 29A9 91 29                        dw      QHEAPP
 521+ 29AB 8F 20                        dw      ZBRANCH
 522+ 29AD 04 00                        dw      Q2Heap_Skip - $
 523+ 29AF 86 29                        dw          FAR
 524+ 29B1              Q2Heap_Skip:                                          // endif
 525+ 29B1 F1 24                        dw      EXIT                        // ;
 526+ 29B3
 527+ 29B3              //  ______________________________________________________________________
 528+ 29B3              //
 529+ 29B3              // hp_fetch     -- a
 530+ 29B3                              Colon_Def HP_FETCH, "HP@", is_normal
 530+ 29B3             >                New_Def  HP_FETCH, "HP@", Enter_Ptr, is_normal ; ok
 530+ 29B3             >
 530+ 29B3             >Dict_Ptr        defl    $
 530+ 29B3             >
 530+ 29B3             >//              ______________________________________________________________________
 530+ 29B3             >//              Heap part
 530+ 29B3             >
 530+ 29B3             >
 530+ 29B3             >                org     (Heap_Ptr & $1FFF) + $E000
 530+ E676             >
 530+ E676             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 530+ E676             >Latest_Definition defl  Heap_Ptr
 530+ E676             >
 530+ E676             >                // dummy db directives used to calculate length of namec
 530+ E676 48 50 40    >                db      "HP@"
 530+ E679             >len_NFA         defl    $ - temp_NFA
 530+ E679             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 530+ E676             >
 530+ E676 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 530+ E677 48 50 40    >                db      "HP@"               // name string in 7-bit ascii, but
 530+ E67A             >                org     $-1                 // alter last byte of Name just above to set
 530+ E679 C0          >                db      {b $} | END_BIT     // msb as name end
 530+ E67A             >
 530+ E67A 6B 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 530+ E67C             >Prev_Ptr        defl    Heap_Ptr
 530+ E67C             >
 530+ E67C             >mirror_Ptr      defl    $
 530+ E67C             >
 530+ E67C B5 29       >                dw      Dict_Ptr + 2        // xt
 530+ E67E             >Heap_Ptr        defl    $ - $E000           // save current HP
 530+ E67E             >
 530+ E67E             >Current_HP      defl  $ - $E000             // used to set HP once!
 530+ E67E             >
 530+ E67E             >//              ______________________________________________________________________
 530+ E67E             >//              Dictionary part
 530+ E67E             >
 530+ E67E             >                org     Dict_Ptr
 530+ 29B3             >
 530+ 29B3 7C 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 530+ 29B5             >
 530+ 29B5             >HP_FETCH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 530+ 29B5 CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 530+ 29B8             >
 530+ 29B8             >
 530+ 29B8             >                endif           ; ok        // for other definitions it "points" the correct handler
 530+ 29B8             >                // Use of "; ok" to suppress "warning[fwdref]"
 530+ 29B8             >
 530+ 29B8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 531+ 29B8 BC 27 31 26                  dw      HP, FETCH               // hp @
 532+ 29BC F1 24                        dw      EXIT                    // ;
 533+ 29BE
 534+ 29BE              //  ______________________________________________________________________
 535+ 29BE              //
 536+ 29BE              // page-watermark   -- n
 537+ 29BE              // how much a 8K page can be filled..
 538+ 29BE                              Constant_Def PAGE_WATERMARK,   "PAGE-WATERMARK", $1F80
 538+ 29BE             >                New_Def  PAGE_WATERMARK, "PAGE-WATERMARK", Constant_Ptr, is_normal
 538+ 29BE             >
 538+ 29BE             >Dict_Ptr        defl    $
 538+ 29BE             >
 538+ 29BE             >//              ______________________________________________________________________
 538+ 29BE             >//              Heap part
 538+ 29BE             >
 538+ 29BE             >
 538+ 29BE             >                org     (Heap_Ptr & $1FFF) + $E000
 538+ E67E             >
 538+ E67E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 538+ E67E             >Latest_Definition defl  Heap_Ptr
 538+ E67E             >
 538+ E67E             >                // dummy db directives used to calculate length of namec
 538+ E67E 50 41 47 45 >                db      "PAGE-WATERMARK"
 538+ E682 2D 57 41 54 >
 538+ E686 45 52 4D 41 >
 538+ E68A 52 4B       >
 538+ E68C             >len_NFA         defl    $ - temp_NFA
 538+ E68C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 538+ E67E             >
 538+ E67E 8E          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 538+ E67F 50 41 47 45 >                db      "PAGE-WATERMARK"               // name string in 7-bit ascii, but
 538+ E683 2D 57 41 54 >
 538+ E687 45 52 4D 41 >
 538+ E68B 52 4B       >
 538+ E68D             >                org     $-1                 // alter last byte of Name just above to set
 538+ E68C CB          >                db      {b $} | END_BIT     // msb as name end
 538+ E68D             >
 538+ E68D 76 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 538+ E68F             >Prev_Ptr        defl    Heap_Ptr
 538+ E68F             >
 538+ E68F             >mirror_Ptr      defl    $
 538+ E68F             >
 538+ E68F C0 29       >                dw      Dict_Ptr + 2        // xt
 538+ E691             >Heap_Ptr        defl    $ - $E000           // save current HP
 538+ E691             >
 538+ E691             >Current_HP      defl  $ - $E000             // used to set HP once!
 538+ E691             >
 538+ E691             >//              ______________________________________________________________________
 538+ E691             >//              Dictionary part
 538+ E691             >
 538+ E691             >                org     Dict_Ptr
 538+ 29BE             >
 538+ 29BE 8F 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 538+ 29C0             >
 538+ 29C0             >PAGE_WATERMARK:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 538+ 29C0 CD FB 26    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 538+ 29C3             >
 538+ 29C3             >
 538+ 29C3             >                endif           ; ok        // for other definitions it "points" the correct handler
 538+ 29C3             >                // Use of "; ok" to suppress "warning[fwdref]"
 538+ 29C3             >
 538+ 29C3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 538+ 29C3 80 1F       >                dw      $1F80
 539+ 29C5
 540+ 29C5              //  ______________________________________________________________________
 541+ 29C5              //
 542+ 29C5              // skip-hp-page ha -- a
 543+ 29C5                              Colon_Def SKIP_HP_PAGE, "SKIP-HP-PAGE", is_normal
 543+ 29C5             >                New_Def  SKIP_HP_PAGE, "SKIP-HP-PAGE", Enter_Ptr, is_normal ; ok
 543+ 29C5             >
 543+ 29C5             >Dict_Ptr        defl    $
 543+ 29C5             >
 543+ 29C5             >//              ______________________________________________________________________
 543+ 29C5             >//              Heap part
 543+ 29C5             >
 543+ 29C5             >
 543+ 29C5             >                org     (Heap_Ptr & $1FFF) + $E000
 543+ E691             >
 543+ E691             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 543+ E691             >Latest_Definition defl  Heap_Ptr
 543+ E691             >
 543+ E691             >                // dummy db directives used to calculate length of namec
 543+ E691 53 4B 49 50 >                db      "SKIP-HP-PAGE"
 543+ E695 2D 48 50 2D >
 543+ E699 50 41 47 45 >
 543+ E69D             >len_NFA         defl    $ - temp_NFA
 543+ E69D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 543+ E691             >
 543+ E691 8C          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 543+ E692 53 4B 49 50 >                db      "SKIP-HP-PAGE"               // name string in 7-bit ascii, but
 543+ E696 2D 48 50 2D >
 543+ E69A 50 41 47 45 >
 543+ E69E             >                org     $-1                 // alter last byte of Name just above to set
 543+ E69D C5          >                db      {b $} | END_BIT     // msb as name end
 543+ E69E             >
 543+ E69E 7E 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 543+ E6A0             >Prev_Ptr        defl    Heap_Ptr
 543+ E6A0             >
 543+ E6A0             >mirror_Ptr      defl    $
 543+ E6A0             >
 543+ E6A0 C7 29       >                dw      Dict_Ptr + 2        // xt
 543+ E6A2             >Heap_Ptr        defl    $ - $E000           // save current HP
 543+ E6A2             >
 543+ E6A2             >Current_HP      defl  $ - $E000             // used to set HP once!
 543+ E6A2             >
 543+ E6A2             >//              ______________________________________________________________________
 543+ E6A2             >//              Dictionary part
 543+ E6A2             >
 543+ E6A2             >                org     Dict_Ptr
 543+ 29C5             >
 543+ 29C5 A0 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 543+ 29C7             >
 543+ 29C7             >SKIP_HP_PAGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 543+ 29C7 CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 543+ 29CA             >
 543+ 29CA             >
 543+ 29CA             >                endif           ; ok        // for other definitions it "points" the correct handler
 543+ 29CA             >                // Use of "; ok" to suppress "warning[fwdref]"
 543+ 29CA             >
 543+ 29CA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 544+ 29CA B5 29                        dw      HP_FETCH                // hp@
 545+ 29CC 3D 20 FF 1F                  dw      LIT, $1FFF, AND_OP      // 1FFF and
 545+ 29D0 B1 24
 546+ 29D2 43 25                        dw      PLUS
 547+ 29D4 C0 29                        dw      PAGE_WATERMARK
 548+ 29D6 BD 28                        dw      GREATER
 549+ 29D8 8F 20                        dw      ZBRANCH
 550+ 29DA 12 00                        dw      Skip_Skip - $   // if
 551+ 29DC B5 29                        dw      HP_FETCH
 552+ 29DE 3D 20 FF 1F                  dw      LIT, $1FFF, OR_OP
 552+ 29E2 C0 24
 553+ 29E4 5C 25 6A 25                  dw      ONE_PLUS, TWO_PLUS
 554+ 29E8 BC 27 3B 26                  dw      HP, STORE
 555+ 29EC              Skip_Skip:
 556+ 29EC F1 24                        dw      EXIT                    // ;
 557+ 29EE              //  ______________________________________________________________________
 558+ 29EE              //
 559+ 29EE              // latest       -- nfa
 560+ 29EE                              Colon_Def LATEST, "LATEST", is_normal
 560+ 29EE             >                New_Def  LATEST, "LATEST", Enter_Ptr, is_normal ; ok
 560+ 29EE             >
 560+ 29EE             >Dict_Ptr        defl    $
 560+ 29EE             >
 560+ 29EE             >//              ______________________________________________________________________
 560+ 29EE             >//              Heap part
 560+ 29EE             >
 560+ 29EE             >
 560+ 29EE             >                org     (Heap_Ptr & $1FFF) + $E000
 560+ E6A2             >
 560+ E6A2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 560+ E6A2             >Latest_Definition defl  Heap_Ptr
 560+ E6A2             >
 560+ E6A2             >                // dummy db directives used to calculate length of namec
 560+ E6A2 4C 41 54 45 >                db      "LATEST"
 560+ E6A6 53 54       >
 560+ E6A8             >len_NFA         defl    $ - temp_NFA
 560+ E6A8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 560+ E6A2             >
 560+ E6A2 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 560+ E6A3 4C 41 54 45 >                db      "LATEST"               // name string in 7-bit ascii, but
 560+ E6A7 53 54       >
 560+ E6A9             >                org     $-1                 // alter last byte of Name just above to set
 560+ E6A8 D4          >                db      {b $} | END_BIT     // msb as name end
 560+ E6A9             >
 560+ E6A9 91 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 560+ E6AB             >Prev_Ptr        defl    Heap_Ptr
 560+ E6AB             >
 560+ E6AB             >mirror_Ptr      defl    $
 560+ E6AB             >
 560+ E6AB F0 29       >                dw      Dict_Ptr + 2        // xt
 560+ E6AD             >Heap_Ptr        defl    $ - $E000           // save current HP
 560+ E6AD             >
 560+ E6AD             >Current_HP      defl  $ - $E000             // used to set HP once!
 560+ E6AD             >
 560+ E6AD             >//              ______________________________________________________________________
 560+ E6AD             >//              Dictionary part
 560+ E6AD             >
 560+ E6AD             >                org     Dict_Ptr
 560+ 29EE             >
 560+ 29EE AB 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 560+ 29F0             >
 560+ 29F0             >LATEST:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 560+ 29F0 CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 560+ 29F3             >
 560+ 29F3             >
 560+ 29F3             >                endif           ; ok        // for other definitions it "points" the correct handler
 560+ 29F3             >                // Use of "; ok" to suppress "warning[fwdref]"
 560+ 29F3             >
 560+ 29F3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 561+ 29F3 EC 27                        dw      CURRENT                 // current
 562+ 29F5 31 26 31 26                  dw      FETCH, FETCH            // @ @
 563+ 29F9 86 29                        dw      FAR // Q TO HEAP
 564+ 29FB F1 24                        dw      EXIT                    // ;
 565+ 29FD
 566+ 29FD              //  ______________________________________________________________________
 567+ 29FD              //
 568+ 29FD              // >body        cfa -- pfa
 569+ 29FD                              Colon_Def TO_BODY, ">BODY", is_normal
 569+ 29FD             >                New_Def  TO_BODY, ">BODY", Enter_Ptr, is_normal ; ok
 569+ 29FD             >
 569+ 29FD             >Dict_Ptr        defl    $
 569+ 29FD             >
 569+ 29FD             >//              ______________________________________________________________________
 569+ 29FD             >//              Heap part
 569+ 29FD             >
 569+ 29FD             >
 569+ 29FD             >                org     (Heap_Ptr & $1FFF) + $E000
 569+ E6AD             >
 569+ E6AD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 569+ E6AD             >Latest_Definition defl  Heap_Ptr
 569+ E6AD             >
 569+ E6AD             >                // dummy db directives used to calculate length of namec
 569+ E6AD 3E 42 4F 44 >                db      ">BODY"
 569+ E6B1 59          >
 569+ E6B2             >len_NFA         defl    $ - temp_NFA
 569+ E6B2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 569+ E6AD             >
 569+ E6AD 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 569+ E6AE 3E 42 4F 44 >                db      ">BODY"               // name string in 7-bit ascii, but
 569+ E6B2 59          >
 569+ E6B3             >                org     $-1                 // alter last byte of Name just above to set
 569+ E6B2 D9          >                db      {b $} | END_BIT     // msb as name end
 569+ E6B3             >
 569+ E6B3 A2 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 569+ E6B5             >Prev_Ptr        defl    Heap_Ptr
 569+ E6B5             >
 569+ E6B5             >mirror_Ptr      defl    $
 569+ E6B5             >
 569+ E6B5 FF 29       >                dw      Dict_Ptr + 2        // xt
 569+ E6B7             >Heap_Ptr        defl    $ - $E000           // save current HP
 569+ E6B7             >
 569+ E6B7             >Current_HP      defl  $ - $E000             // used to set HP once!
 569+ E6B7             >
 569+ E6B7             >//              ______________________________________________________________________
 569+ E6B7             >//              Dictionary part
 569+ E6B7             >
 569+ E6B7             >                org     Dict_Ptr
 569+ 29FD             >
 569+ 29FD B5 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 569+ 29FF             >
 569+ 29FF             >TO_BODY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 569+ 29FF CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 569+ 2A02             >
 569+ 2A02             >
 569+ 2A02             >                endif           ; ok        // for other definitions it "points" the correct handler
 569+ 2A02             >                // Use of "; ok" to suppress "warning[fwdref]"
 569+ 2A02             >
 569+ 2A02             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 570+ 2A02 3C 27 43 25                  dw      THREE, PLUS             // cell+ --> 3 +
 571+ 2A06 F1 24                        dw      EXIT                    // ;
 572+ 2A08
 573+ 2A08              //  ______________________________________________________________________
 574+ 2A08              //
 575+ 2A08              // <name        cfa -- nfa
 576+ 2A08                              Colon_Def TO_NAME, "<NAME", is_normal
 576+ 2A08             >                New_Def  TO_NAME, "<NAME", Enter_Ptr, is_normal ; ok
 576+ 2A08             >
 576+ 2A08             >Dict_Ptr        defl    $
 576+ 2A08             >
 576+ 2A08             >//              ______________________________________________________________________
 576+ 2A08             >//              Heap part
 576+ 2A08             >
 576+ 2A08             >
 576+ 2A08             >                org     (Heap_Ptr & $1FFF) + $E000
 576+ E6B7             >
 576+ E6B7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 576+ E6B7             >Latest_Definition defl  Heap_Ptr
 576+ E6B7             >
 576+ E6B7             >                // dummy db directives used to calculate length of namec
 576+ E6B7 3C 4E 41 4D >                db      "<NAME"
 576+ E6BB 45          >
 576+ E6BC             >len_NFA         defl    $ - temp_NFA
 576+ E6BC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 576+ E6B7             >
 576+ E6B7 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 576+ E6B8 3C 4E 41 4D >                db      "<NAME"               // name string in 7-bit ascii, but
 576+ E6BC 45          >
 576+ E6BD             >                org     $-1                 // alter last byte of Name just above to set
 576+ E6BC C5          >                db      {b $} | END_BIT     // msb as name end
 576+ E6BD             >
 576+ E6BD AD 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 576+ E6BF             >Prev_Ptr        defl    Heap_Ptr
 576+ E6BF             >
 576+ E6BF             >mirror_Ptr      defl    $
 576+ E6BF             >
 576+ E6BF 0A 2A       >                dw      Dict_Ptr + 2        // xt
 576+ E6C1             >Heap_Ptr        defl    $ - $E000           // save current HP
 576+ E6C1             >
 576+ E6C1             >Current_HP      defl  $ - $E000             // used to set HP once!
 576+ E6C1             >
 576+ E6C1             >//              ______________________________________________________________________
 576+ E6C1             >//              Dictionary part
 576+ E6C1             >
 576+ E6C1             >                org     Dict_Ptr
 576+ 2A08             >
 576+ 2A08 BF 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 576+ 2A0A             >
 576+ 2A0A             >TO_NAME:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 576+ 2A0A CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 576+ 2A0D             >
 576+ 2A0D             >
 576+ 2A0D             >                endif           ; ok        // for other definitions it "points" the correct handler
 576+ 2A0D             >                // Use of "; ok" to suppress "warning[fwdref]"
 576+ 2A0D             >
 576+ 2A0D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 577+ 2A0D 76 25                        dw      CELL_MINUS              // cell-
 578+ 2A0F C7 25 31 26                  dw      DUP, FETCH
 579+ 2A13 91 29                        dw      QHEAPP
 580+ 2A15 8F 20                        dw      ZBRANCH
 581+ 2A17 08 00                        dw      ToName_Skip - $
 582+ 2A19 31 26 86 29                  dw          FETCH, FAR
 583+ 2A1D 76 25                        dw          CELL_MINUS
 584+ 2A1F              ToName_Skip:                                    // endif
 585+ 2A1F
 586+ 2A1F 63 25                        dw      ONE_SUBTRACT            // 1-
 587+ 2A21 43 27                        dw      NEG_ONE                 // -1
 588+ 2A23 20 29                        dw      TRAVERSE                // traverse
 589+ 2A25 F1 24                        dw      EXIT                    // ;
 590+ 2A27
 591+ 2A27              //  ______________________________________________________________________
 592+ 2A27              //
 593+ 2A27              // cfa          pfa -- cfa
 594+ 2A27                              Colon_Def CFA, "CFA", is_normal
 594+ 2A27             >                New_Def  CFA, "CFA", Enter_Ptr, is_normal ; ok
 594+ 2A27             >
 594+ 2A27             >Dict_Ptr        defl    $
 594+ 2A27             >
 594+ 2A27             >//              ______________________________________________________________________
 594+ 2A27             >//              Heap part
 594+ 2A27             >
 594+ 2A27             >
 594+ 2A27             >                org     (Heap_Ptr & $1FFF) + $E000
 594+ E6C1             >
 594+ E6C1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 594+ E6C1             >Latest_Definition defl  Heap_Ptr
 594+ E6C1             >
 594+ E6C1             >                // dummy db directives used to calculate length of namec
 594+ E6C1 43 46 41    >                db      "CFA"
 594+ E6C4             >len_NFA         defl    $ - temp_NFA
 594+ E6C4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 594+ E6C1             >
 594+ E6C1 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 594+ E6C2 43 46 41    >                db      "CFA"               // name string in 7-bit ascii, but
 594+ E6C5             >                org     $-1                 // alter last byte of Name just above to set
 594+ E6C4 C1          >                db      {b $} | END_BIT     // msb as name end
 594+ E6C5             >
 594+ E6C5 B7 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 594+ E6C7             >Prev_Ptr        defl    Heap_Ptr
 594+ E6C7             >
 594+ E6C7             >mirror_Ptr      defl    $
 594+ E6C7             >
 594+ E6C7 29 2A       >                dw      Dict_Ptr + 2        // xt
 594+ E6C9             >Heap_Ptr        defl    $ - $E000           // save current HP
 594+ E6C9             >
 594+ E6C9             >Current_HP      defl  $ - $E000             // used to set HP once!
 594+ E6C9             >
 594+ E6C9             >//              ______________________________________________________________________
 594+ E6C9             >//              Dictionary part
 594+ E6C9             >
 594+ E6C9             >                org     Dict_Ptr
 594+ 2A27             >
 594+ 2A27 C7 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 594+ 2A29             >
 594+ 2A29             >CFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 594+ 2A29 CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 594+ 2A2C             >
 594+ 2A2C             >
 594+ 2A2C             >                endif           ; ok        // for other definitions it "points" the correct handler
 594+ 2A2C             >                // Use of "; ok" to suppress "warning[fwdref]"
 594+ 2A2C             >
 594+ 2A2C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 595+ 2A2C 3C 27 8B 28                  dw      THREE, SUBTRACT         // 3 -
 596+ 2A30 F1 24                        dw      EXIT                    // ;
 597+ 2A32
 598+ 2A32              //  ______________________________________________________________________
 599+ 2A32              //
 600+ 2A32              // nfa          pfa -- nfa
 601+ 2A32                              Colon_Def NFA, "NFA", is_normal
 601+ 2A32             >                New_Def  NFA, "NFA", Enter_Ptr, is_normal ; ok
 601+ 2A32             >
 601+ 2A32             >Dict_Ptr        defl    $
 601+ 2A32             >
 601+ 2A32             >//              ______________________________________________________________________
 601+ 2A32             >//              Heap part
 601+ 2A32             >
 601+ 2A32             >
 601+ 2A32             >                org     (Heap_Ptr & $1FFF) + $E000
 601+ E6C9             >
 601+ E6C9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 601+ E6C9             >Latest_Definition defl  Heap_Ptr
 601+ E6C9             >
 601+ E6C9             >                // dummy db directives used to calculate length of namec
 601+ E6C9 4E 46 41    >                db      "NFA"
 601+ E6CC             >len_NFA         defl    $ - temp_NFA
 601+ E6CC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 601+ E6C9             >
 601+ E6C9 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 601+ E6CA 4E 46 41    >                db      "NFA"               // name string in 7-bit ascii, but
 601+ E6CD             >                org     $-1                 // alter last byte of Name just above to set
 601+ E6CC C1          >                db      {b $} | END_BIT     // msb as name end
 601+ E6CD             >
 601+ E6CD C1 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 601+ E6CF             >Prev_Ptr        defl    Heap_Ptr
 601+ E6CF             >
 601+ E6CF             >mirror_Ptr      defl    $
 601+ E6CF             >
 601+ E6CF 34 2A       >                dw      Dict_Ptr + 2        // xt
 601+ E6D1             >Heap_Ptr        defl    $ - $E000           // save current HP
 601+ E6D1             >
 601+ E6D1             >Current_HP      defl  $ - $E000             // used to set HP once!
 601+ E6D1             >
 601+ E6D1             >//              ______________________________________________________________________
 601+ E6D1             >//              Dictionary part
 601+ E6D1             >
 601+ E6D1             >                org     Dict_Ptr
 601+ 2A32             >
 601+ 2A32 CF 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 601+ 2A34             >
 601+ 2A34             >NFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 601+ 2A34 CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 601+ 2A37             >
 601+ 2A37             >
 601+ 2A37             >                endif           ; ok        // for other definitions it "points" the correct handler
 601+ 2A37             >                // Use of "; ok" to suppress "warning[fwdref]"
 601+ 2A37             >
 601+ 2A37             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 602+ 2A37 29 2A                        dw      CFA                     // cfa
 603+ 2A39 0A 2A                        dw      TO_NAME                 // traverse
 604+ 2A3B F1 24                        dw      EXIT                    // ;
 605+ 2A3D
 606+ 2A3D              //  ______________________________________________________________________
 607+ 2A3D              //
 608+ 2A3D              // lfa          pfa -- lfa
 609+ 2A3D                              Colon_Def LFA, "LFA", is_normal
 609+ 2A3D             >                New_Def  LFA, "LFA", Enter_Ptr, is_normal ; ok
 609+ 2A3D             >
 609+ 2A3D             >Dict_Ptr        defl    $
 609+ 2A3D             >
 609+ 2A3D             >//              ______________________________________________________________________
 609+ 2A3D             >//              Heap part
 609+ 2A3D             >
 609+ 2A3D             >
 609+ 2A3D             >                org     (Heap_Ptr & $1FFF) + $E000
 609+ E6D1             >
 609+ E6D1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 609+ E6D1             >Latest_Definition defl  Heap_Ptr
 609+ E6D1             >
 609+ E6D1             >                // dummy db directives used to calculate length of namec
 609+ E6D1 4C 46 41    >                db      "LFA"
 609+ E6D4             >len_NFA         defl    $ - temp_NFA
 609+ E6D4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 609+ E6D1             >
 609+ E6D1 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 609+ E6D2 4C 46 41    >                db      "LFA"               // name string in 7-bit ascii, but
 609+ E6D5             >                org     $-1                 // alter last byte of Name just above to set
 609+ E6D4 C1          >                db      {b $} | END_BIT     // msb as name end
 609+ E6D5             >
 609+ E6D5 C9 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 609+ E6D7             >Prev_Ptr        defl    Heap_Ptr
 609+ E6D7             >
 609+ E6D7             >mirror_Ptr      defl    $
 609+ E6D7             >
 609+ E6D7 3F 2A       >                dw      Dict_Ptr + 2        // xt
 609+ E6D9             >Heap_Ptr        defl    $ - $E000           // save current HP
 609+ E6D9             >
 609+ E6D9             >Current_HP      defl  $ - $E000             // used to set HP once!
 609+ E6D9             >
 609+ E6D9             >//              ______________________________________________________________________
 609+ E6D9             >//              Dictionary part
 609+ E6D9             >
 609+ E6D9             >                org     Dict_Ptr
 609+ 2A3D             >
 609+ 2A3D D7 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 609+ 2A3F             >
 609+ 2A3F             >LFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 609+ 2A3F CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 609+ 2A42             >
 609+ 2A42             >
 609+ 2A42             >                endif           ; ok        // for other definitions it "points" the correct handler
 609+ 2A42             >                // Use of "; ok" to suppress "warning[fwdref]"
 609+ 2A42             >
 609+ 2A42             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 610+ 2A42 34 2A                        dw      NFA                     // nfa
 611+ 2A44 2E 27                        dw      ONE                     // 1
 612+ 2A46 20 29                        dw      TRAVERSE                // traverse
 613+ 2A48 5C 25                        dw      ONE_PLUS                // 1+
 614+ 2A4A F1 24                        dw      EXIT                    // ;
 615+ 2A4C
 616+ 2A4C              //  ______________________________________________________________________
 617+ 2A4C              //
 618+ 2A4C              // pfa          nfa -- pfa
 619+ 2A4C                              Colon_Def PFA, "PFA", is_normal
 619+ 2A4C             >                New_Def  PFA, "PFA", Enter_Ptr, is_normal ; ok
 619+ 2A4C             >
 619+ 2A4C             >Dict_Ptr        defl    $
 619+ 2A4C             >
 619+ 2A4C             >//              ______________________________________________________________________
 619+ 2A4C             >//              Heap part
 619+ 2A4C             >
 619+ 2A4C             >
 619+ 2A4C             >                org     (Heap_Ptr & $1FFF) + $E000
 619+ E6D9             >
 619+ E6D9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 619+ E6D9             >Latest_Definition defl  Heap_Ptr
 619+ E6D9             >
 619+ E6D9             >                // dummy db directives used to calculate length of namec
 619+ E6D9 50 46 41    >                db      "PFA"
 619+ E6DC             >len_NFA         defl    $ - temp_NFA
 619+ E6DC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 619+ E6D9             >
 619+ E6D9 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 619+ E6DA 50 46 41    >                db      "PFA"               // name string in 7-bit ascii, but
 619+ E6DD             >                org     $-1                 // alter last byte of Name just above to set
 619+ E6DC C1          >                db      {b $} | END_BIT     // msb as name end
 619+ E6DD             >
 619+ E6DD D1 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 619+ E6DF             >Prev_Ptr        defl    Heap_Ptr
 619+ E6DF             >
 619+ E6DF             >mirror_Ptr      defl    $
 619+ E6DF             >
 619+ E6DF 4E 2A       >                dw      Dict_Ptr + 2        // xt
 619+ E6E1             >Heap_Ptr        defl    $ - $E000           // save current HP
 619+ E6E1             >
 619+ E6E1             >Current_HP      defl  $ - $E000             // used to set HP once!
 619+ E6E1             >
 619+ E6E1             >//              ______________________________________________________________________
 619+ E6E1             >//              Dictionary part
 619+ E6E1             >
 619+ E6E1             >                org     Dict_Ptr
 619+ 2A4C             >
 619+ 2A4C DF 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 619+ 2A4E             >
 619+ 2A4E             >PFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 619+ 2A4E CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 619+ 2A51             >
 619+ 2A51             >
 619+ 2A51             >                endif           ; ok        // for other definitions it "points" the correct handler
 619+ 2A51             >                // Use of "; ok" to suppress "warning[fwdref]"
 619+ 2A51             >
 619+ 2A51             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 620+ 2A51 A4 29                        dw      QTOHEAP
 621+ 2A53 2E 27                        dw      ONE                     // 1
 622+ 2A55 20 29                        dw      TRAVERSE                // traverse
 623+ 2A57 5C 25                        dw      ONE_PLUS                // 1+
 624+ 2A59 72 25                        dw      CELL_PLUS               // cell+
 625+ 2A5B 75 29                        dw      QMMU7
 626+ 2A5D 8F 20                        dw      ZBRANCH
 627+ 2A5F 0E 00                        dw      PFA_Skip - $
 628+ 2A61 3D 29                        dw          MMU7_FETCH
 629+ 2A63 2E 27 8B 28                  dw          ONE, SUBTRACT
 630+ 2A67 8F 20                        dw          ZBRANCH
 631+ 2A69 04 00                        dw          PFA_Skip - $
 632+ 2A6B 31 26                        dw              FETCH
 633+ 2A6D              PFA_Skip:                                    // endif
 634+ 2A6D FF 29                        dw      TO_BODY                 // >body
 635+ 2A6F F1 24                        dw      EXIT                    // ;
 636+ 2A71
 637+ 2A71              //  ______________________________________________________________________
 638+ 2A71              //
 639+ 2A71              // !csp         --
 640+ 2A71              // store in user variable CSP current value of SP. Used at compile-time for syntax checkng
 641+ 2A71                              Colon_Def STORE_CSP, "!CSP", is_normal
 641+ 2A71             >                New_Def  STORE_CSP, "!CSP", Enter_Ptr, is_normal ; ok
 641+ 2A71             >
 641+ 2A71             >Dict_Ptr        defl    $
 641+ 2A71             >
 641+ 2A71             >//              ______________________________________________________________________
 641+ 2A71             >//              Heap part
 641+ 2A71             >
 641+ 2A71             >
 641+ 2A71             >                org     (Heap_Ptr & $1FFF) + $E000
 641+ E6E1             >
 641+ E6E1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 641+ E6E1             >Latest_Definition defl  Heap_Ptr
 641+ E6E1             >
 641+ E6E1             >                // dummy db directives used to calculate length of namec
 641+ E6E1 21 43 53 50 >                db      "!CSP"
 641+ E6E5             >len_NFA         defl    $ - temp_NFA
 641+ E6E5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 641+ E6E1             >
 641+ E6E1 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 641+ E6E2 21 43 53 50 >                db      "!CSP"               // name string in 7-bit ascii, but
 641+ E6E6             >                org     $-1                 // alter last byte of Name just above to set
 641+ E6E5 D0          >                db      {b $} | END_BIT     // msb as name end
 641+ E6E6             >
 641+ E6E6 D9 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 641+ E6E8             >Prev_Ptr        defl    Heap_Ptr
 641+ E6E8             >
 641+ E6E8             >mirror_Ptr      defl    $
 641+ E6E8             >
 641+ E6E8 73 2A       >                dw      Dict_Ptr + 2        // xt
 641+ E6EA             >Heap_Ptr        defl    $ - $E000           // save current HP
 641+ E6EA             >
 641+ E6EA             >Current_HP      defl  $ - $E000             // used to set HP once!
 641+ E6EA             >
 641+ E6EA             >//              ______________________________________________________________________
 641+ E6EA             >//              Dictionary part
 641+ E6EA             >
 641+ E6EA             >                org     Dict_Ptr
 641+ 2A71             >
 641+ 2A71 E8 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 641+ 2A73             >
 641+ 2A73             >STORE_CSP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 641+ 2A73 CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 641+ 2A76             >
 641+ 2A76             >
 641+ 2A76             >                endif           ; ok        // for other definitions it "points" the correct handler
 641+ 2A76             >                // Use of "; ok" to suppress "warning[fwdref]"
 641+ 2A76             >
 641+ 2A76             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 642+ 2A76 D8 24                        dw      SPFETCH                 // sp@
 643+ 2A78 0A 28 3B 26                  dw      CSP, STORE              // csp !
 644+ 2A7C F1 24                        dw      EXIT                    // ;
 645+ 2A7E
 646+ 2A7E              //  ______________________________________________________________________
 647+ 2A7E              //
 648+ 2A7E              // ?error       f n --
 649+ 2A7E              // rase error n if flag f it true
 650+ 2A7E                              Colon_Def QERROR, "?ERROR", is_normal
 650+ 2A7E             >                New_Def  QERROR, "?ERROR", Enter_Ptr, is_normal ; ok
 650+ 2A7E             >
 650+ 2A7E             >Dict_Ptr        defl    $
 650+ 2A7E             >
 650+ 2A7E             >//              ______________________________________________________________________
 650+ 2A7E             >//              Heap part
 650+ 2A7E             >
 650+ 2A7E             >
 650+ 2A7E             >                org     (Heap_Ptr & $1FFF) + $E000
 650+ E6EA             >
 650+ E6EA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 650+ E6EA             >Latest_Definition defl  Heap_Ptr
 650+ E6EA             >
 650+ E6EA             >                // dummy db directives used to calculate length of namec
 650+ E6EA 3F 45 52 52 >                db      "?ERROR"
 650+ E6EE 4F 52       >
 650+ E6F0             >len_NFA         defl    $ - temp_NFA
 650+ E6F0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 650+ E6EA             >
 650+ E6EA 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 650+ E6EB 3F 45 52 52 >                db      "?ERROR"               // name string in 7-bit ascii, but
 650+ E6EF 4F 52       >
 650+ E6F1             >                org     $-1                 // alter last byte of Name just above to set
 650+ E6F0 D2          >                db      {b $} | END_BIT     // msb as name end
 650+ E6F1             >
 650+ E6F1 E1 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 650+ E6F3             >Prev_Ptr        defl    Heap_Ptr
 650+ E6F3             >
 650+ E6F3             >mirror_Ptr      defl    $
 650+ E6F3             >
 650+ E6F3 80 2A       >                dw      Dict_Ptr + 2        // xt
 650+ E6F5             >Heap_Ptr        defl    $ - $E000           // save current HP
 650+ E6F5             >
 650+ E6F5             >Current_HP      defl  $ - $E000             // used to set HP once!
 650+ E6F5             >
 650+ E6F5             >//              ______________________________________________________________________
 650+ E6F5             >//              Dictionary part
 650+ E6F5             >
 650+ E6F5             >                org     Dict_Ptr
 650+ 2A7E             >
 650+ 2A7E F3 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 650+ 2A80             >
 650+ 2A80             >QERROR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 650+ 2A80 CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 650+ 2A83             >
 650+ 2A83             >
 650+ 2A83             >                endif           ; ok        // for other definitions it "points" the correct handler
 650+ 2A83             >                // Use of "; ok" to suppress "warning[fwdref]"
 650+ 2A83             >
 650+ 2A83             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 651+ 2A83 C0 25                        dw      SWAP                    // swap
 652+ 2A85                                                              // if
 653+ 2A85 8F 20                        dw      ZBRANCH
 654+ 2A87 08 00                        dw      QError_Else - $
 655+ 2A89 BA 2F                        dw          ERROR               //      error  ( is a forward-ref )
 656+ 2A8B                                                              // else
 657+ 2A8B 82 20                        dw      BRANCH
 658+ 2A8D 04 00                        dw      QError_Endif - $
 659+ 2A8F              QError_Else:
 660+ 2A8F AC 25                        dw          DROP                //      drop
 661+ 2A91              QError_Endif:                                   // endif
 662+ 2A91 F1 24                        dw      EXIT                    // ;
 663+ 2A93
 664+ 2A93              //  ______________________________________________________________________
 665+ 2A93              //
 666+ 2A93              // ?comp       --
 667+ 2A93              // raise msg #17 if not compiling
 668+ 2A93                              Colon_Def QCOMP, "?COMP", is_normal
 668+ 2A93             >                New_Def  QCOMP, "?COMP", Enter_Ptr, is_normal ; ok
 668+ 2A93             >
 668+ 2A93             >Dict_Ptr        defl    $
 668+ 2A93             >
 668+ 2A93             >//              ______________________________________________________________________
 668+ 2A93             >//              Heap part
 668+ 2A93             >
 668+ 2A93             >
 668+ 2A93             >                org     (Heap_Ptr & $1FFF) + $E000
 668+ E6F5             >
 668+ E6F5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 668+ E6F5             >Latest_Definition defl  Heap_Ptr
 668+ E6F5             >
 668+ E6F5             >                // dummy db directives used to calculate length of namec
 668+ E6F5 3F 43 4F 4D >                db      "?COMP"
 668+ E6F9 50          >
 668+ E6FA             >len_NFA         defl    $ - temp_NFA
 668+ E6FA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 668+ E6F5             >
 668+ E6F5 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 668+ E6F6 3F 43 4F 4D >                db      "?COMP"               // name string in 7-bit ascii, but
 668+ E6FA 50          >
 668+ E6FB             >                org     $-1                 // alter last byte of Name just above to set
 668+ E6FA D0          >                db      {b $} | END_BIT     // msb as name end
 668+ E6FB             >
 668+ E6FB EA 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 668+ E6FD             >Prev_Ptr        defl    Heap_Ptr
 668+ E6FD             >
 668+ E6FD             >mirror_Ptr      defl    $
 668+ E6FD             >
 668+ E6FD 95 2A       >                dw      Dict_Ptr + 2        // xt
 668+ E6FF             >Heap_Ptr        defl    $ - $E000           // save current HP
 668+ E6FF             >
 668+ E6FF             >Current_HP      defl  $ - $E000             // used to set HP once!
 668+ E6FF             >
 668+ E6FF             >//              ______________________________________________________________________
 668+ E6FF             >//              Dictionary part
 668+ E6FF             >
 668+ E6FF             >                org     Dict_Ptr
 668+ 2A93             >
 668+ 2A93 FD 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 668+ 2A95             >
 668+ 2A95             >QCOMP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 668+ 2A95 CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 668+ 2A98             >
 668+ 2A98             >
 668+ 2A98             >                endif           ; ok        // for other definitions it "points" the correct handler
 668+ 2A98             >                // Use of "; ok" to suppress "warning[fwdref]"
 668+ 2A98             >
 668+ 2A98             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 669+ 2A98 F2 27 31 26                  dw      STATE, FETCH            // state @
 670+ 2A9C 16 25                        dw      ZEQUAL                  // 0=
 671+ 2A9E 3D 20 11 00                  dw      LIT, 17                 // 17  ( can't be executed )
 672+ 2AA2 80 2A                        dw      QERROR                  // ?error
 673+ 2AA4 F1 24                        dw      EXIT                    // ;
 674+ 2AA6
 675+ 2AA6              //  ______________________________________________________________________
 676+ 2AA6              //
 677+ 2AA6              // ?exec       --
 678+ 2AA6              // raise msg #18 if compiling
 679+ 2AA6                              Colon_Def QEXEC, "?EXEC", is_normal
 679+ 2AA6             >                New_Def  QEXEC, "?EXEC", Enter_Ptr, is_normal ; ok
 679+ 2AA6             >
 679+ 2AA6             >Dict_Ptr        defl    $
 679+ 2AA6             >
 679+ 2AA6             >//              ______________________________________________________________________
 679+ 2AA6             >//              Heap part
 679+ 2AA6             >
 679+ 2AA6             >
 679+ 2AA6             >                org     (Heap_Ptr & $1FFF) + $E000
 679+ E6FF             >
 679+ E6FF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 679+ E6FF             >Latest_Definition defl  Heap_Ptr
 679+ E6FF             >
 679+ E6FF             >                // dummy db directives used to calculate length of namec
 679+ E6FF 3F 45 58 45 >                db      "?EXEC"
 679+ E703 43          >
 679+ E704             >len_NFA         defl    $ - temp_NFA
 679+ E704             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 679+ E6FF             >
 679+ E6FF 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 679+ E700 3F 45 58 45 >                db      "?EXEC"               // name string in 7-bit ascii, but
 679+ E704 43          >
 679+ E705             >                org     $-1                 // alter last byte of Name just above to set
 679+ E704 C3          >                db      {b $} | END_BIT     // msb as name end
 679+ E705             >
 679+ E705 F5 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 679+ E707             >Prev_Ptr        defl    Heap_Ptr
 679+ E707             >
 679+ E707             >mirror_Ptr      defl    $
 679+ E707             >
 679+ E707 A8 2A       >                dw      Dict_Ptr + 2        // xt
 679+ E709             >Heap_Ptr        defl    $ - $E000           // save current HP
 679+ E709             >
 679+ E709             >Current_HP      defl  $ - $E000             // used to set HP once!
 679+ E709             >
 679+ E709             >//              ______________________________________________________________________
 679+ E709             >//              Dictionary part
 679+ E709             >
 679+ E709             >                org     Dict_Ptr
 679+ 2AA6             >
 679+ 2AA6 07 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 679+ 2AA8             >
 679+ 2AA8             >QEXEC:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 679+ 2AA8 CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 679+ 2AAB             >
 679+ 2AAB             >
 679+ 2AAB             >                endif           ; ok        // for other definitions it "points" the correct handler
 679+ 2AAB             >                // Use of "; ok" to suppress "warning[fwdref]"
 679+ 2AAB             >
 679+ 2AAB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 680+ 2AAB F2 27 31 26                  dw      STATE, FETCH            // state @
 681+ 2AAF 3D 20 12 00                  dw      LIT, 18                 // 18  ( can't be compiled )
 682+ 2AB3 80 2A                        dw      QERROR                  // ?error
 683+ 2AB5 F1 24                        dw      EXIT                    // ;
 684+ 2AB7
 685+ 2AB7              //  ______________________________________________________________________
 686+ 2AB7              //
 687+ 2AB7              // ?pairs       n1 n2 --
 688+ 2AB7              // raise msg #19 if n1 != n2. Compiler pushes some placeholder to stack for syntax checking
 689+ 2AB7                              Colon_Def QPAIRS, "?PAIRS", is_normal
 689+ 2AB7             >                New_Def  QPAIRS, "?PAIRS", Enter_Ptr, is_normal ; ok
 689+ 2AB7             >
 689+ 2AB7             >Dict_Ptr        defl    $
 689+ 2AB7             >
 689+ 2AB7             >//              ______________________________________________________________________
 689+ 2AB7             >//              Heap part
 689+ 2AB7             >
 689+ 2AB7             >
 689+ 2AB7             >                org     (Heap_Ptr & $1FFF) + $E000
 689+ E709             >
 689+ E709             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 689+ E709             >Latest_Definition defl  Heap_Ptr
 689+ E709             >
 689+ E709             >                // dummy db directives used to calculate length of namec
 689+ E709 3F 50 41 49 >                db      "?PAIRS"
 689+ E70D 52 53       >
 689+ E70F             >len_NFA         defl    $ - temp_NFA
 689+ E70F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 689+ E709             >
 689+ E709 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 689+ E70A 3F 50 41 49 >                db      "?PAIRS"               // name string in 7-bit ascii, but
 689+ E70E 52 53       >
 689+ E710             >                org     $-1                 // alter last byte of Name just above to set
 689+ E70F D3          >                db      {b $} | END_BIT     // msb as name end
 689+ E710             >
 689+ E710 FF 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 689+ E712             >Prev_Ptr        defl    Heap_Ptr
 689+ E712             >
 689+ E712             >mirror_Ptr      defl    $
 689+ E712             >
 689+ E712 B9 2A       >                dw      Dict_Ptr + 2        // xt
 689+ E714             >Heap_Ptr        defl    $ - $E000           // save current HP
 689+ E714             >
 689+ E714             >Current_HP      defl  $ - $E000             // used to set HP once!
 689+ E714             >
 689+ E714             >//              ______________________________________________________________________
 689+ E714             >//              Dictionary part
 689+ E714             >
 689+ E714             >                org     Dict_Ptr
 689+ 2AB7             >
 689+ 2AB7 12 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 689+ 2AB9             >
 689+ 2AB9             >QPAIRS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 689+ 2AB9 CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 689+ 2ABC             >
 689+ 2ABC             >
 689+ 2ABC             >                endif           ; ok        // for other definitions it "points" the correct handler
 689+ 2ABC             >                // Use of "; ok" to suppress "warning[fwdref]"
 689+ 2ABC             >
 689+ 2ABC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 690+ 2ABC 8B 28                        dw      SUBTRACT                // -
 691+ 2ABE 3D 20 13 00                  dw      LIT, 19                 // 18  ( syntax error )
 692+ 2AC2 80 2A                        dw      QERROR                  // ?error
 693+ 2AC4 F1 24                        dw      EXIT                    // ;
 694+ 2AC6
 695+ 2AC6              //  ______________________________________________________________________
 696+ 2AC6              //
 697+ 2AC6              // ?csp       --
 698+ 2AC6              // raise msg #20 if surrent SP in not what previously saved in CSP.
 699+ 2AC6              // Compiler relies on that for  syntax checking of structures
 700+ 2AC6                              Colon_Def QCSP, "?CSP", is_normal
 700+ 2AC6             >                New_Def  QCSP, "?CSP", Enter_Ptr, is_normal ; ok
 700+ 2AC6             >
 700+ 2AC6             >Dict_Ptr        defl    $
 700+ 2AC6             >
 700+ 2AC6             >//              ______________________________________________________________________
 700+ 2AC6             >//              Heap part
 700+ 2AC6             >
 700+ 2AC6             >
 700+ 2AC6             >                org     (Heap_Ptr & $1FFF) + $E000
 700+ E714             >
 700+ E714             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 700+ E714             >Latest_Definition defl  Heap_Ptr
 700+ E714             >
 700+ E714             >                // dummy db directives used to calculate length of namec
 700+ E714 3F 43 53 50 >                db      "?CSP"
 700+ E718             >len_NFA         defl    $ - temp_NFA
 700+ E718             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 700+ E714             >
 700+ E714 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 700+ E715 3F 43 53 50 >                db      "?CSP"               // name string in 7-bit ascii, but
 700+ E719             >                org     $-1                 // alter last byte of Name just above to set
 700+ E718 D0          >                db      {b $} | END_BIT     // msb as name end
 700+ E719             >
 700+ E719 09 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 700+ E71B             >Prev_Ptr        defl    Heap_Ptr
 700+ E71B             >
 700+ E71B             >mirror_Ptr      defl    $
 700+ E71B             >
 700+ E71B C8 2A       >                dw      Dict_Ptr + 2        // xt
 700+ E71D             >Heap_Ptr        defl    $ - $E000           // save current HP
 700+ E71D             >
 700+ E71D             >Current_HP      defl  $ - $E000             // used to set HP once!
 700+ E71D             >
 700+ E71D             >//              ______________________________________________________________________
 700+ E71D             >//              Dictionary part
 700+ E71D             >
 700+ E71D             >                org     Dict_Ptr
 700+ 2AC6             >
 700+ 2AC6 1B 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 700+ 2AC8             >
 700+ 2AC8             >QCSP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 700+ 2AC8 CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 700+ 2ACB             >
 700+ 2ACB             >
 700+ 2ACB             >                endif           ; ok        // for other definitions it "points" the correct handler
 700+ 2ACB             >                // Use of "; ok" to suppress "warning[fwdref]"
 700+ 2ACB             >
 700+ 2ACB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 701+ 2ACB D8 24                        dw      SPFETCH                 // sp@
 702+ 2ACD 0A 28 31 26                  dw      CSP, FETCH              // csp @
 703+ 2AD1 8B 28                        dw      SUBTRACT                // -
 704+ 2AD3 3D 20 14 00                  dw      LIT, 20                 // 20  ( bad definition end )
 705+ 2AD7 80 2A                        dw      QERROR                  // ?error
 706+ 2AD9 F1 24                        dw      EXIT                    // ;
 707+ 2ADB
 708+ 2ADB              //  ______________________________________________________________________
 709+ 2ADB              //
 710+ 2ADB              // ?loading      --
 711+ 2ADB              // raise msg #22 if not loading
 712+ 2ADB                              Colon_Def QLOADING, "?LOADING", is_normal
 712+ 2ADB             >                New_Def  QLOADING, "?LOADING", Enter_Ptr, is_normal ; ok
 712+ 2ADB             >
 712+ 2ADB             >Dict_Ptr        defl    $
 712+ 2ADB             >
 712+ 2ADB             >//              ______________________________________________________________________
 712+ 2ADB             >//              Heap part
 712+ 2ADB             >
 712+ 2ADB             >
 712+ 2ADB             >                org     (Heap_Ptr & $1FFF) + $E000
 712+ E71D             >
 712+ E71D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 712+ E71D             >Latest_Definition defl  Heap_Ptr
 712+ E71D             >
 712+ E71D             >                // dummy db directives used to calculate length of namec
 712+ E71D 3F 4C 4F 41 >                db      "?LOADING"
 712+ E721 44 49 4E 47 >
 712+ E725             >len_NFA         defl    $ - temp_NFA
 712+ E725             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 712+ E71D             >
 712+ E71D 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 712+ E71E 3F 4C 4F 41 >                db      "?LOADING"               // name string in 7-bit ascii, but
 712+ E722 44 49 4E 47 >
 712+ E726             >                org     $-1                 // alter last byte of Name just above to set
 712+ E725 C7          >                db      {b $} | END_BIT     // msb as name end
 712+ E726             >
 712+ E726 14 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 712+ E728             >Prev_Ptr        defl    Heap_Ptr
 712+ E728             >
 712+ E728             >mirror_Ptr      defl    $
 712+ E728             >
 712+ E728 DD 2A       >                dw      Dict_Ptr + 2        // xt
 712+ E72A             >Heap_Ptr        defl    $ - $E000           // save current HP
 712+ E72A             >
 712+ E72A             >Current_HP      defl  $ - $E000             // used to set HP once!
 712+ E72A             >
 712+ E72A             >//              ______________________________________________________________________
 712+ E72A             >//              Dictionary part
 712+ E72A             >
 712+ E72A             >                org     Dict_Ptr
 712+ 2ADB             >
 712+ 2ADB 28 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 712+ 2ADD             >
 712+ 2ADD             >QLOADING:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 712+ 2ADD CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 712+ 2AE0             >
 712+ 2AE0             >
 712+ 2AE0             >                endif           ; ok        // for other definitions it "points" the correct handler
 712+ 2AE0             >                // Use of "; ok" to suppress "warning[fwdref]"
 712+ 2AE0             >
 712+ 2AE0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 713+ 2AE0 C8 27 31 26                  dw      BLK, FETCH              // blk @
 714+ 2AE4 16 25                        dw      ZEQUAL                  // 0=
 715+ 2AE6 3D 20 16 00                  dw      LIT, 22                 // 22  ( aren't loading now )
 716+ 2AEA 80 2A                        dw      QERROR                  // ?error
 717+ 2AEC F1 24                        dw      EXIT                    // ;
 718+ 2AEE
 719+ 2AEE              //  ______________________________________________________________________
 720+ 2AEE              //
 721+ 2AEE              // compile      --
 722+ 2AEE              // compiles the following word
 723+ 2AEE                              Colon_Def COMPILE, "COMPILE", is_normal
 723+ 2AEE             >                New_Def  COMPILE, "COMPILE", Enter_Ptr, is_normal ; ok
 723+ 2AEE             >
 723+ 2AEE             >Dict_Ptr        defl    $
 723+ 2AEE             >
 723+ 2AEE             >//              ______________________________________________________________________
 723+ 2AEE             >//              Heap part
 723+ 2AEE             >
 723+ 2AEE             >
 723+ 2AEE             >                org     (Heap_Ptr & $1FFF) + $E000
 723+ E72A             >
 723+ E72A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 723+ E72A             >Latest_Definition defl  Heap_Ptr
 723+ E72A             >
 723+ E72A             >                // dummy db directives used to calculate length of namec
 723+ E72A 43 4F 4D 50 >                db      "COMPILE"
 723+ E72E 49 4C 45    >
 723+ E731             >len_NFA         defl    $ - temp_NFA
 723+ E731             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 723+ E72A             >
 723+ E72A 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 723+ E72B 43 4F 4D 50 >                db      "COMPILE"               // name string in 7-bit ascii, but
 723+ E72F 49 4C 45    >
 723+ E732             >                org     $-1                 // alter last byte of Name just above to set
 723+ E731 C5          >                db      {b $} | END_BIT     // msb as name end
 723+ E732             >
 723+ E732 1D 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 723+ E734             >Prev_Ptr        defl    Heap_Ptr
 723+ E734             >
 723+ E734             >mirror_Ptr      defl    $
 723+ E734             >
 723+ E734 F0 2A       >                dw      Dict_Ptr + 2        // xt
 723+ E736             >Heap_Ptr        defl    $ - $E000           // save current HP
 723+ E736             >
 723+ E736             >Current_HP      defl  $ - $E000             // used to set HP once!
 723+ E736             >
 723+ E736             >//              ______________________________________________________________________
 723+ E736             >//              Dictionary part
 723+ E736             >
 723+ E736             >                org     Dict_Ptr
 723+ 2AEE             >
 723+ 2AEE 34 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 723+ 2AF0             >
 723+ 2AF0             >COMPILE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 723+ 2AF0 CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 723+ 2AF3             >
 723+ 2AF3             >
 723+ 2AF3             >                endif           ; ok        // for other definitions it "points" the correct handler
 723+ 2AF3             >                // Use of "; ok" to suppress "warning[fwdref]"
 723+ 2AF3             >
 723+ 2AF3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 724+ 2AF3 95 2A                        dw      QCOMP                   // ?comp
 725+ 2AF5 06 25                        dw      R_TO                    // r>
 726+ 2AF7 C7 25 72 25                  dw      DUP, CELL_PLUS          // dup, cell+
 727+ 2AFB FB 24                        dw      TO_R                    // >r
 728+ 2AFD 31 26 62 28                  dw      FETCH, COMMA            // @ ,
 729+ 2B01 F1 24                        dw      EXIT                    // ;
 730+ 2B03
 731+ 2B03              //  ______________________________________________________________________
 732+ 2B03              //
 733+ 2B03              // compile,     --
 734+ 2B03              // compiles the following word
 735+ 2B03                              Colon_Def COMPILE_XT, "COMPILE,", is_normal
 735+ 2B03             >                New_Def  COMPILE_XT, "COMPILE,", Enter_Ptr, is_normal ; ok
 735+ 2B03             >
 735+ 2B03             >Dict_Ptr        defl    $
 735+ 2B03             >
 735+ 2B03             >//              ______________________________________________________________________
 735+ 2B03             >//              Heap part
 735+ 2B03             >
 735+ 2B03             >
 735+ 2B03             >                org     (Heap_Ptr & $1FFF) + $E000
 735+ E736             >
 735+ E736             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 735+ E736             >Latest_Definition defl  Heap_Ptr
 735+ E736             >
 735+ E736             >                // dummy db directives used to calculate length of namec
 735+ E736 43 4F 4D 50 >                db      "COMPILE,"
 735+ E73A 49 4C 45 2C >
 735+ E73E             >len_NFA         defl    $ - temp_NFA
 735+ E73E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 735+ E736             >
 735+ E736 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 735+ E737 43 4F 4D 50 >                db      "COMPILE,"               // name string in 7-bit ascii, but
 735+ E73B 49 4C 45 2C >
 735+ E73F             >                org     $-1                 // alter last byte of Name just above to set
 735+ E73E AC          >                db      {b $} | END_BIT     // msb as name end
 735+ E73F             >
 735+ E73F 2A 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 735+ E741             >Prev_Ptr        defl    Heap_Ptr
 735+ E741             >
 735+ E741             >mirror_Ptr      defl    $
 735+ E741             >
 735+ E741 05 2B       >                dw      Dict_Ptr + 2        // xt
 735+ E743             >Heap_Ptr        defl    $ - $E000           // save current HP
 735+ E743             >
 735+ E743             >Current_HP      defl  $ - $E000             // used to set HP once!
 735+ E743             >
 735+ E743             >//              ______________________________________________________________________
 735+ E743             >//              Dictionary part
 735+ E743             >
 735+ E743             >                org     Dict_Ptr
 735+ 2B03             >
 735+ 2B03 41 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 735+ 2B05             >
 735+ 2B05             >COMPILE_XT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 735+ 2B05 CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 735+ 2B08             >
 735+ 2B08             >
 735+ 2B08             >                endif           ; ok        // for other definitions it "points" the correct handler
 735+ 2B08             >                // Use of "; ok" to suppress "warning[fwdref]"
 735+ 2B08             >
 735+ 2B08             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 736+ 2B08              //              dw      QCOMP                   // ?comp
 737+ 2B08 62 28                        dw      COMMA                   // ,
 738+ 2B0A F1 24                        dw      EXIT                    // ;
 739+ 2B0C
 740+ 2B0C              //  ______________________________________________________________________
 741+ 2B0C              //
 742+ 2B0C              // [            --
 743+ 2B0C              // stop compilation
 744+ 2B0C                              Colon_Def SQUARED_OPEN, "[", is_immediate
 744+ 2B0C             >                New_Def  SQUARED_OPEN, "[", Enter_Ptr, is_immediate ; ok
 744+ 2B0C             >
 744+ 2B0C             >Dict_Ptr        defl    $
 744+ 2B0C             >
 744+ 2B0C             >//              ______________________________________________________________________
 744+ 2B0C             >//              Heap part
 744+ 2B0C             >
 744+ 2B0C             >
 744+ 2B0C             >                org     (Heap_Ptr & $1FFF) + $E000
 744+ E743             >
 744+ E743             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 744+ E743             >Latest_Definition defl  Heap_Ptr
 744+ E743             >
 744+ E743             >                // dummy db directives used to calculate length of namec
 744+ E743 5B          >                db      "["
 744+ E744             >len_NFA         defl    $ - temp_NFA
 744+ E744             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 744+ E743             >
 744+ E743 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 744+ E744 5B          >                db      "["               // name string in 7-bit ascii, but
 744+ E745             >                org     $-1                 // alter last byte of Name just above to set
 744+ E744 DB          >                db      {b $} | END_BIT     // msb as name end
 744+ E745             >
 744+ E745 36 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 744+ E747             >Prev_Ptr        defl    Heap_Ptr
 744+ E747             >
 744+ E747             >mirror_Ptr      defl    $
 744+ E747             >
 744+ E747 0E 2B       >                dw      Dict_Ptr + 2        // xt
 744+ E749             >Heap_Ptr        defl    $ - $E000           // save current HP
 744+ E749             >
 744+ E749             >Current_HP      defl  $ - $E000             // used to set HP once!
 744+ E749             >
 744+ E749             >//              ______________________________________________________________________
 744+ E749             >//              Dictionary part
 744+ E749             >
 744+ E749             >                org     Dict_Ptr
 744+ 2B0C             >
 744+ 2B0C 47 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 744+ 2B0E             >
 744+ 2B0E             >SQUARED_OPEN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 744+ 2B0E CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 744+ 2B11             >
 744+ 2B11             >
 744+ 2B11             >                endif           ; ok        // for other definitions it "points" the correct handler
 744+ 2B11             >                // Use of "; ok" to suppress "warning[fwdref]"
 744+ 2B11             >
 744+ 2B11             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 745+ 2B11 27 27                        dw      ZERO                    // 0
 746+ 2B13 F2 27 3B 26                  dw      STATE, STORE            // state !
 747+ 2B17 F1 24                        dw      EXIT                    // ; immediate
 748+ 2B19
 749+ 2B19              //  ______________________________________________________________________
 750+ 2B19              //
 751+ 2B19              // ]            --
 752+ 2B19              // start compilation
 753+ 2B19                              Colon_Def SQUARED_CLOSE, "]", is_normal
 753+ 2B19             >                New_Def  SQUARED_CLOSE, "]", Enter_Ptr, is_normal ; ok
 753+ 2B19             >
 753+ 2B19             >Dict_Ptr        defl    $
 753+ 2B19             >
 753+ 2B19             >//              ______________________________________________________________________
 753+ 2B19             >//              Heap part
 753+ 2B19             >
 753+ 2B19             >
 753+ 2B19             >                org     (Heap_Ptr & $1FFF) + $E000
 753+ E749             >
 753+ E749             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 753+ E749             >Latest_Definition defl  Heap_Ptr
 753+ E749             >
 753+ E749             >                // dummy db directives used to calculate length of namec
 753+ E749 5D          >                db      "]"
 753+ E74A             >len_NFA         defl    $ - temp_NFA
 753+ E74A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 753+ E749             >
 753+ E749 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 753+ E74A 5D          >                db      "]"               // name string in 7-bit ascii, but
 753+ E74B             >                org     $-1                 // alter last byte of Name just above to set
 753+ E74A DD          >                db      {b $} | END_BIT     // msb as name end
 753+ E74B             >
 753+ E74B 43 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 753+ E74D             >Prev_Ptr        defl    Heap_Ptr
 753+ E74D             >
 753+ E74D             >mirror_Ptr      defl    $
 753+ E74D             >
 753+ E74D 1B 2B       >                dw      Dict_Ptr + 2        // xt
 753+ E74F             >Heap_Ptr        defl    $ - $E000           // save current HP
 753+ E74F             >
 753+ E74F             >Current_HP      defl  $ - $E000             // used to set HP once!
 753+ E74F             >
 753+ E74F             >//              ______________________________________________________________________
 753+ E74F             >//              Dictionary part
 753+ E74F             >
 753+ E74F             >                org     Dict_Ptr
 753+ 2B19             >
 753+ 2B19 4D 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 753+ 2B1B             >
 753+ 2B1B             >SQUARED_CLOSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 753+ 2B1B CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 753+ 2B1E             >
 753+ 2B1E             >
 753+ 2B1E             >                endif           ; ok        // for other definitions it "points" the correct handler
 753+ 2B1E             >                // Use of "; ok" to suppress "warning[fwdref]"
 753+ 2B1E             >
 753+ 2B1E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 754+ 2B1E 3D 20 C0 00                  dw      LIT, $C0                // 192
 755+ 2B22 F2 27 3B 26                  dw      STATE, STORE            // state !
 756+ 2B26 F1 24                        dw      EXIT                    // ;
 757+ 2B28
 758+ 2B28              //  ______________________________________________________________________
 759+ 2B28              //
 760+ 2B28              // smudge       --
 761+ 2B28              // toggle smudge bit of latest definition
 762+ 2B28                              Colon_Def SMUDGE, "SMUDGE", is_normal
 762+ 2B28             >                New_Def  SMUDGE, "SMUDGE", Enter_Ptr, is_normal ; ok
 762+ 2B28             >
 762+ 2B28             >Dict_Ptr        defl    $
 762+ 2B28             >
 762+ 2B28             >//              ______________________________________________________________________
 762+ 2B28             >//              Heap part
 762+ 2B28             >
 762+ 2B28             >
 762+ 2B28             >                org     (Heap_Ptr & $1FFF) + $E000
 762+ E74F             >
 762+ E74F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 762+ E74F             >Latest_Definition defl  Heap_Ptr
 762+ E74F             >
 762+ E74F             >                // dummy db directives used to calculate length of namec
 762+ E74F 53 4D 55 44 >                db      "SMUDGE"
 762+ E753 47 45       >
 762+ E755             >len_NFA         defl    $ - temp_NFA
 762+ E755             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 762+ E74F             >
 762+ E74F 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 762+ E750 53 4D 55 44 >                db      "SMUDGE"               // name string in 7-bit ascii, but
 762+ E754 47 45       >
 762+ E756             >                org     $-1                 // alter last byte of Name just above to set
 762+ E755 C5          >                db      {b $} | END_BIT     // msb as name end
 762+ E756             >
 762+ E756 49 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 762+ E758             >Prev_Ptr        defl    Heap_Ptr
 762+ E758             >
 762+ E758             >mirror_Ptr      defl    $
 762+ E758             >
 762+ E758 2A 2B       >                dw      Dict_Ptr + 2        // xt
 762+ E75A             >Heap_Ptr        defl    $ - $E000           // save current HP
 762+ E75A             >
 762+ E75A             >Current_HP      defl  $ - $E000             // used to set HP once!
 762+ E75A             >
 762+ E75A             >//              ______________________________________________________________________
 762+ E75A             >//              Dictionary part
 762+ E75A             >
 762+ E75A             >                org     Dict_Ptr
 762+ 2B28             >
 762+ 2B28 58 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 762+ 2B2A             >
 762+ 2B2A             >SMUDGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 762+ 2B2A CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 762+ 2B2D             >
 762+ 2B2D             >
 762+ 2B2D             >                endif           ; ok        // for other definitions it "points" the correct handler
 762+ 2B2D             >                // Use of "; ok" to suppress "warning[fwdref]"
 762+ 2B2D             >
 762+ 2B2D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 763+ 2B2D F0 29                        dw      LATEST                  // latest
 764+ 2B2F 3D 20 20 00                  dw      LIT, SMUDGE_BIT         // 32
 765+ 2B33 28 26                        dw      TOGGLE                  // toggle
 766+ 2B35 F1 24                        dw      EXIT                    // ;
 767+ 2B37
 768+ 2B37              //  ______________________________________________________________________
 769+ 2B37              //
 770+ 2B37              // immediate    --
 771+ 2B37              // make immediate the latest definition
 772+ 2B37                              Colon_Def IMMEDIATE, "IMMEDIATE", is_normal
 772+ 2B37             >                New_Def  IMMEDIATE, "IMMEDIATE", Enter_Ptr, is_normal ; ok
 772+ 2B37             >
 772+ 2B37             >Dict_Ptr        defl    $
 772+ 2B37             >
 772+ 2B37             >//              ______________________________________________________________________
 772+ 2B37             >//              Heap part
 772+ 2B37             >
 772+ 2B37             >
 772+ 2B37             >                org     (Heap_Ptr & $1FFF) + $E000
 772+ E75A             >
 772+ E75A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 772+ E75A             >Latest_Definition defl  Heap_Ptr
 772+ E75A             >
 772+ E75A             >                // dummy db directives used to calculate length of namec
 772+ E75A 49 4D 4D 45 >                db      "IMMEDIATE"
 772+ E75E 44 49 41 54 >
 772+ E762 45          >
 772+ E763             >len_NFA         defl    $ - temp_NFA
 772+ E763             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 772+ E75A             >
 772+ E75A 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 772+ E75B 49 4D 4D 45 >                db      "IMMEDIATE"               // name string in 7-bit ascii, but
 772+ E75F 44 49 41 54 >
 772+ E763 45          >
 772+ E764             >                org     $-1                 // alter last byte of Name just above to set
 772+ E763 C5          >                db      {b $} | END_BIT     // msb as name end
 772+ E764             >
 772+ E764 4F 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 772+ E766             >Prev_Ptr        defl    Heap_Ptr
 772+ E766             >
 772+ E766             >mirror_Ptr      defl    $
 772+ E766             >
 772+ E766 39 2B       >                dw      Dict_Ptr + 2        // xt
 772+ E768             >Heap_Ptr        defl    $ - $E000           // save current HP
 772+ E768             >
 772+ E768             >Current_HP      defl  $ - $E000             // used to set HP once!
 772+ E768             >
 772+ E768             >//              ______________________________________________________________________
 772+ E768             >//              Dictionary part
 772+ E768             >
 772+ E768             >                org     Dict_Ptr
 772+ 2B37             >
 772+ 2B37 66 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 772+ 2B39             >
 772+ 2B39             >IMMEDIATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 772+ 2B39 CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 772+ 2B3C             >
 772+ 2B3C             >
 772+ 2B3C             >                endif           ; ok        // for other definitions it "points" the correct handler
 772+ 2B3C             >                // Use of "; ok" to suppress "warning[fwdref]"
 772+ 2B3C             >
 772+ 2B3C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 773+ 2B3C F0 29                        dw      LATEST                  // latest
 774+ 2B3E 3D 20 40 00                  dw      LIT, IMMEDIATE_BIT      // 64
 775+ 2B42 28 26                        dw      TOGGLE                  // toggle
 776+ 2B44 F1 24                        dw      EXIT                    // ;
 777+ 2B46
 778+ 2B46              //  ______________________________________________________________________
 779+ 2B46              //
 780+ 2B46              // hex          --
 781+ 2B46              // change numeration base
 782+ 2B46                              Colon_Def HEX, "HEX", is_normal
 782+ 2B46             >                New_Def  HEX, "HEX", Enter_Ptr, is_normal ; ok
 782+ 2B46             >
 782+ 2B46             >Dict_Ptr        defl    $
 782+ 2B46             >
 782+ 2B46             >//              ______________________________________________________________________
 782+ 2B46             >//              Heap part
 782+ 2B46             >
 782+ 2B46             >
 782+ 2B46             >                org     (Heap_Ptr & $1FFF) + $E000
 782+ E768             >
 782+ E768             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 782+ E768             >Latest_Definition defl  Heap_Ptr
 782+ E768             >
 782+ E768             >                // dummy db directives used to calculate length of namec
 782+ E768 48 45 58    >                db      "HEX"
 782+ E76B             >len_NFA         defl    $ - temp_NFA
 782+ E76B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 782+ E768             >
 782+ E768 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 782+ E769 48 45 58    >                db      "HEX"               // name string in 7-bit ascii, but
 782+ E76C             >                org     $-1                 // alter last byte of Name just above to set
 782+ E76B D8          >                db      {b $} | END_BIT     // msb as name end
 782+ E76C             >
 782+ E76C 5A 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 782+ E76E             >Prev_Ptr        defl    Heap_Ptr
 782+ E76E             >
 782+ E76E             >mirror_Ptr      defl    $
 782+ E76E             >
 782+ E76E 48 2B       >                dw      Dict_Ptr + 2        // xt
 782+ E770             >Heap_Ptr        defl    $ - $E000           // save current HP
 782+ E770             >
 782+ E770             >Current_HP      defl  $ - $E000             // used to set HP once!
 782+ E770             >
 782+ E770             >//              ______________________________________________________________________
 782+ E770             >//              Dictionary part
 782+ E770             >
 782+ E770             >                org     Dict_Ptr
 782+ 2B46             >
 782+ 2B46 6E 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 782+ 2B48             >
 782+ 2B48             >HEX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 782+ 2B48 CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 782+ 2B4B             >
 782+ 2B4B             >
 782+ 2B4B             >                endif           ; ok        // for other definitions it "points" the correct handler
 782+ 2B4B             >                // Use of "; ok" to suppress "warning[fwdref]"
 782+ 2B4B             >
 782+ 2B4B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 783+ 2B4B 3D 20 10 00                  dw      LIT, 16                 // 16
 784+ 2B4F F8 27 3B 26                  dw      BASE, STORE             // base !
 785+ 2B53 F1 24                        dw      EXIT                    // ;
 786+ 2B55
 787+ 2B55              //  ______________________________________________________________________
 788+ 2B55              //
 789+ 2B55              // decimal      --
 790+ 2B55              // change numeration base
 791+ 2B55                              Colon_Def DECIMAL, "DECIMAL", is_normal
 791+ 2B55             >                New_Def  DECIMAL, "DECIMAL", Enter_Ptr, is_normal ; ok
 791+ 2B55             >
 791+ 2B55             >Dict_Ptr        defl    $
 791+ 2B55             >
 791+ 2B55             >//              ______________________________________________________________________
 791+ 2B55             >//              Heap part
 791+ 2B55             >
 791+ 2B55             >
 791+ 2B55             >                org     (Heap_Ptr & $1FFF) + $E000
 791+ E770             >
 791+ E770             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 791+ E770             >Latest_Definition defl  Heap_Ptr
 791+ E770             >
 791+ E770             >                // dummy db directives used to calculate length of namec
 791+ E770 44 45 43 49 >                db      "DECIMAL"
 791+ E774 4D 41 4C    >
 791+ E777             >len_NFA         defl    $ - temp_NFA
 791+ E777             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 791+ E770             >
 791+ E770 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 791+ E771 44 45 43 49 >                db      "DECIMAL"               // name string in 7-bit ascii, but
 791+ E775 4D 41 4C    >
 791+ E778             >                org     $-1                 // alter last byte of Name just above to set
 791+ E777 CC          >                db      {b $} | END_BIT     // msb as name end
 791+ E778             >
 791+ E778 68 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 791+ E77A             >Prev_Ptr        defl    Heap_Ptr
 791+ E77A             >
 791+ E77A             >mirror_Ptr      defl    $
 791+ E77A             >
 791+ E77A 57 2B       >                dw      Dict_Ptr + 2        // xt
 791+ E77C             >Heap_Ptr        defl    $ - $E000           // save current HP
 791+ E77C             >
 791+ E77C             >Current_HP      defl  $ - $E000             // used to set HP once!
 791+ E77C             >
 791+ E77C             >//              ______________________________________________________________________
 791+ E77C             >//              Dictionary part
 791+ E77C             >
 791+ E77C             >                org     Dict_Ptr
 791+ 2B55             >
 791+ 2B55 7A 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 791+ 2B57             >
 791+ 2B57             >DECIMAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 791+ 2B57 CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 791+ 2B5A             >
 791+ 2B5A             >
 791+ 2B5A             >                endif           ; ok        // for other definitions it "points" the correct handler
 791+ 2B5A             >                // Use of "; ok" to suppress "warning[fwdref]"
 791+ 2B5A             >
 791+ 2B5A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 792+ 2B5A 3D 20 0A 00                  dw      LIT, 10                 // 10
 793+ 2B5E F8 27 3B 26                  dw      BASE, STORE             // base !
 794+ 2B62 F1 24                        dw      EXIT                    // ;
 795+ 2B64
 796+ 2B64              //  ______________________________________________________________________
 797+ 2B64              //
 798+ 2B64              // (;code)       --
 799+ 2B64              // patch to CFA to call/jump to the "following code"
 800+ 2B64                              Colon_Def C_SEMICOLON_CODE, "(;CODE)", is_normal
 800+ 2B64             >                New_Def  C_SEMICOLON_CODE, "(;CODE)", Enter_Ptr, is_normal ; ok
 800+ 2B64             >
 800+ 2B64             >Dict_Ptr        defl    $
 800+ 2B64             >
 800+ 2B64             >//              ______________________________________________________________________
 800+ 2B64             >//              Heap part
 800+ 2B64             >
 800+ 2B64             >
 800+ 2B64             >                org     (Heap_Ptr & $1FFF) + $E000
 800+ E77C             >
 800+ E77C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 800+ E77C             >Latest_Definition defl  Heap_Ptr
 800+ E77C             >
 800+ E77C             >                // dummy db directives used to calculate length of namec
 800+ E77C 28 3B 43 4F >                db      "(;CODE)"
 800+ E780 44 45 29    >
 800+ E783             >len_NFA         defl    $ - temp_NFA
 800+ E783             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 800+ E77C             >
 800+ E77C 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 800+ E77D 28 3B 43 4F >                db      "(;CODE)"               // name string in 7-bit ascii, but
 800+ E781 44 45 29    >
 800+ E784             >                org     $-1                 // alter last byte of Name just above to set
 800+ E783 A9          >                db      {b $} | END_BIT     // msb as name end
 800+ E784             >
 800+ E784 70 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 800+ E786             >Prev_Ptr        defl    Heap_Ptr
 800+ E786             >
 800+ E786             >mirror_Ptr      defl    $
 800+ E786             >
 800+ E786 66 2B       >                dw      Dict_Ptr + 2        // xt
 800+ E788             >Heap_Ptr        defl    $ - $E000           // save current HP
 800+ E788             >
 800+ E788             >Current_HP      defl  $ - $E000             // used to set HP once!
 800+ E788             >
 800+ E788             >//              ______________________________________________________________________
 800+ E788             >//              Dictionary part
 800+ E788             >
 800+ E788             >                org     Dict_Ptr
 800+ 2B64             >
 800+ 2B64 86 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 800+ 2B66             >
 800+ 2B66             >C_SEMICOLON_CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 800+ 2B66 CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 800+ 2B69             >
 800+ 2B69             >
 800+ 2B69             >                endif           ; ok        // for other definitions it "points" the correct handler
 800+ 2B69             >                // Use of "; ok" to suppress "warning[fwdref]"
 800+ 2B69             >
 800+ 2B69             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 801+ 2B69 06 25                        dw      R_TO                    // r>       ( Return Stack has IP to caller's next cell )
 802+ 2B6B F0 29                        dw      LATEST                  // latest   ( Word being defined in this moment )
 803+ 2B6D 4E 2A 29 2A                  dw      PFA, CFA                // pfa cfa  ( cfa of latest word )
 804+ 2B71
 805+ 2B71 3D 20 CD 00                  dw      LIT, $CD                // $CD      ( At Latest CFA put "call" op-code )
 806+ 2B75 A3 25 4F 26                  dw      OVER, CSTORE            // over c!  ( why can't use comma? because CFA was already ALLOTted by create? )
 807+ 2B79 5C 25                        dw      ONE_PLUS                // 1+       ( At Latest CFA+1 put address for call. )
 808+ 2B7B
 809+ 2B7B 3B 26                        dw      STORE                   // !
 810+ 2B7D F1 24                        dw      EXIT                    // ;
 811+ 2B7F
 812+ 2B7F              //  ______________________________________________________________________
 813+ 2B7F              //
 814+ 2B7F              // ;code        --
 815+ 2B7F                              Colon_Def SEMICOLON_CODE, ";CODE", is_immediate
 815+ 2B7F             >                New_Def  SEMICOLON_CODE, ";CODE", Enter_Ptr, is_immediate ; ok
 815+ 2B7F             >
 815+ 2B7F             >Dict_Ptr        defl    $
 815+ 2B7F             >
 815+ 2B7F             >//              ______________________________________________________________________
 815+ 2B7F             >//              Heap part
 815+ 2B7F             >
 815+ 2B7F             >
 815+ 2B7F             >                org     (Heap_Ptr & $1FFF) + $E000
 815+ E788             >
 815+ E788             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 815+ E788             >Latest_Definition defl  Heap_Ptr
 815+ E788             >
 815+ E788             >                // dummy db directives used to calculate length of namec
 815+ E788 3B 43 4F 44 >                db      ";CODE"
 815+ E78C 45          >
 815+ E78D             >len_NFA         defl    $ - temp_NFA
 815+ E78D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 815+ E788             >
 815+ E788 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 815+ E789 3B 43 4F 44 >                db      ";CODE"               // name string in 7-bit ascii, but
 815+ E78D 45          >
 815+ E78E             >                org     $-1                 // alter last byte of Name just above to set
 815+ E78D C5          >                db      {b $} | END_BIT     // msb as name end
 815+ E78E             >
 815+ E78E 7C 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 815+ E790             >Prev_Ptr        defl    Heap_Ptr
 815+ E790             >
 815+ E790             >mirror_Ptr      defl    $
 815+ E790             >
 815+ E790 81 2B       >                dw      Dict_Ptr + 2        // xt
 815+ E792             >Heap_Ptr        defl    $ - $E000           // save current HP
 815+ E792             >
 815+ E792             >Current_HP      defl  $ - $E000             // used to set HP once!
 815+ E792             >
 815+ E792             >//              ______________________________________________________________________
 815+ E792             >//              Dictionary part
 815+ E792             >
 815+ E792             >                org     Dict_Ptr
 815+ 2B7F             >
 815+ 2B7F 90 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 815+ 2B81             >
 815+ 2B81             >SEMICOLON_CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 815+ 2B81 CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 815+ 2B84             >
 815+ 2B84             >
 815+ 2B84             >                endif           ; ok        // for other definitions it "points" the correct handler
 815+ 2B84             >                // Use of "; ok" to suppress "warning[fwdref]"
 815+ 2B84             >
 815+ 2B84             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 816+ 2B84 C8 2A                        dw      QCSP                    // ?csp
 817+ 2B86 F0 2A                        dw      COMPILE                 // compile
 818+ 2B88 66 2B                        dw      C_SEMICOLON_CODE        // (;code)
 819+ 2B8A 0E 2B                        dw      SQUARED_OPEN            // [
 820+ 2B8C EE 26                        dw      NOOP                    // noop () can be patched later to ASSEMBLER... )
 821+ 2B8E F1 24                        dw      EXIT                    // ; immediate
 822+ 2B90
 823+ 2B90              //  ______________________________________________________________________
 824+ 2B90              //
 825+ 2B90              // <builds      --
 826+ 2B90                              Colon_Def CBUILDS, "<BUILDS", is_normal
 826+ 2B90             >                New_Def  CBUILDS, "<BUILDS", Enter_Ptr, is_normal ; ok
 826+ 2B90             >
 826+ 2B90             >Dict_Ptr        defl    $
 826+ 2B90             >
 826+ 2B90             >//              ______________________________________________________________________
 826+ 2B90             >//              Heap part
 826+ 2B90             >
 826+ 2B90             >
 826+ 2B90             >                org     (Heap_Ptr & $1FFF) + $E000
 826+ E792             >
 826+ E792             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 826+ E792             >Latest_Definition defl  Heap_Ptr
 826+ E792             >
 826+ E792             >                // dummy db directives used to calculate length of namec
 826+ E792 3C 42 55 49 >                db      "<BUILDS"
 826+ E796 4C 44 53    >
 826+ E799             >len_NFA         defl    $ - temp_NFA
 826+ E799             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 826+ E792             >
 826+ E792 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 826+ E793 3C 42 55 49 >                db      "<BUILDS"               // name string in 7-bit ascii, but
 826+ E797 4C 44 53    >
 826+ E79A             >                org     $-1                 // alter last byte of Name just above to set
 826+ E799 D3          >                db      {b $} | END_BIT     // msb as name end
 826+ E79A             >
 826+ E79A 88 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 826+ E79C             >Prev_Ptr        defl    Heap_Ptr
 826+ E79C             >
 826+ E79C             >mirror_Ptr      defl    $
 826+ E79C             >
 826+ E79C 92 2B       >                dw      Dict_Ptr + 2        // xt
 826+ E79E             >Heap_Ptr        defl    $ - $E000           // save current HP
 826+ E79E             >
 826+ E79E             >Current_HP      defl  $ - $E000             // used to set HP once!
 826+ E79E             >
 826+ E79E             >//              ______________________________________________________________________
 826+ E79E             >//              Dictionary part
 826+ E79E             >
 826+ E79E             >                org     Dict_Ptr
 826+ 2B90             >
 826+ 2B90 9C 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 826+ 2B92             >
 826+ 2B92             >CBUILDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 826+ 2B92 CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 826+ 2B95             >
 826+ 2B95             >
 826+ 2B95             >                endif           ; ok        // for other definitions it "points" the correct handler
 826+ 2B95             >                // Use of "; ok" to suppress "warning[fwdref]"
 826+ 2B95             >
 826+ 2B95             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 827+ 2B95 27 27                        dw      ZERO                    // 0
 828+ 2B97 F2 26                        dw      CONSTANT                // constant
 829+ 2B99 F1 24                        dw      EXIT                    // ;
 830+ 2B9B
 831+ 2B9B              //  ______________________________________________________________________
 832+ 2B9B              //
 833+ 2B9B              // recurse      --
 834+ 2B9B              //              Colon_Def RECURSE, "RECURSE", is_immediate
 835+ 2B9B              //              dw      QCOMP                   // ?comp
 836+ 2B9B              //              dw      LATEST                  // latest
 837+ 2B9B              //              dw      PFA, CFA                // pfa cfa
 838+ 2B9B              //              dw      COMMA                   // ,
 839+ 2B9B              //              dw      EXIT                    // ; immediate
 840+ 2B9B
 841+ 2B9B              //  ______________________________________________________________________
 842+ 2B9B              //
 843+ 2B9B              // does>     --
 844+ 2B9B                              Colon_Def DOES_TO, "DOES>", is_normal
 844+ 2B9B             >                New_Def  DOES_TO, "DOES>", Enter_Ptr, is_normal ; ok
 844+ 2B9B             >
 844+ 2B9B             >Dict_Ptr        defl    $
 844+ 2B9B             >
 844+ 2B9B             >//              ______________________________________________________________________
 844+ 2B9B             >//              Heap part
 844+ 2B9B             >
 844+ 2B9B             >
 844+ 2B9B             >                org     (Heap_Ptr & $1FFF) + $E000
 844+ E79E             >
 844+ E79E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 844+ E79E             >Latest_Definition defl  Heap_Ptr
 844+ E79E             >
 844+ E79E             >                // dummy db directives used to calculate length of namec
 844+ E79E 44 4F 45 53 >                db      "DOES>"
 844+ E7A2 3E          >
 844+ E7A3             >len_NFA         defl    $ - temp_NFA
 844+ E7A3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 844+ E79E             >
 844+ E79E 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 844+ E79F 44 4F 45 53 >                db      "DOES>"               // name string in 7-bit ascii, but
 844+ E7A3 3E          >
 844+ E7A4             >                org     $-1                 // alter last byte of Name just above to set
 844+ E7A3 BE          >                db      {b $} | END_BIT     // msb as name end
 844+ E7A4             >
 844+ E7A4 92 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 844+ E7A6             >Prev_Ptr        defl    Heap_Ptr
 844+ E7A6             >
 844+ E7A6             >mirror_Ptr      defl    $
 844+ E7A6             >
 844+ E7A6 9D 2B       >                dw      Dict_Ptr + 2        // xt
 844+ E7A8             >Heap_Ptr        defl    $ - $E000           // save current HP
 844+ E7A8             >
 844+ E7A8             >Current_HP      defl  $ - $E000             // used to set HP once!
 844+ E7A8             >
 844+ E7A8             >//              ______________________________________________________________________
 844+ E7A8             >//              Dictionary part
 844+ E7A8             >
 844+ E7A8             >                org     Dict_Ptr
 844+ 2B9B             >
 844+ 2B9B A6 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 844+ 2B9D             >
 844+ 2B9D             >DOES_TO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 844+ 2B9D CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 844+ 2BA0             >
 844+ 2BA0             >
 844+ 2BA0             >                endif           ; ok        // for other definitions it "points" the correct handler
 844+ 2BA0             >                // Use of "; ok" to suppress "warning[fwdref]"
 844+ 2BA0             >
 844+ 2BA0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 845+ 2BA0 06 25                        dw      R_TO                    // r>
 846+ 2BA2 F0 29                        dw      LATEST                  // latest
 847+ 2BA4 4E 2A                        dw      PFA                     // pfa
 848+ 2BA6 3B 26                        dw      STORE                   // !        \ old use of <BUILDS
 849+ 2BA8              //              dw      COMMA                   // ,        \ new use of CREATE
 850+ 2BA8 66 2B                        dw      C_SEMICOLON_CODE        // ;code
 851+ 2BAA              Does_Ptr:
 852+ 2BAA                              // via call coded in CFA
 853+ 2BAA EB                           ex      de, hl //**
 854+ 2BAB                              // *** ldhlrp
 855+ 2BAB 2B                           dec     hl                  // push on Return-Stack current Instruction-Pointer
 856+ 2BAC 70                           ld      (hl), b
 857+ 2BAD 2B                           dec     hl
 858+ 2BAE 71                           ld      (hl), c
 859+ 2BAF                              // *** ldrphl
 860+ 2BAF EB                           ex      de, hl //**
 861+ 2BB0 E1                           pop     hl                  // CFA has a call to this, so PFA -> IP
 862+ 2BB1
 863+ 2BB1 4E                           ld      c, (hl)
 864+ 2BB2 23                           inc     hl
 865+ 2BB3 46                           ld      b, (hl)
 866+ 2BB4 23                           inc     hl
 867+ 2BB5
 868+ 2BB5                              psh1
 868+ 2BB5 E5          >                push    hl
 868+ 2BB6 DD E9       >                jp      (ix)
 869+ 2BB8                              // SMUDGE !
 870+ 2BB8
 871+ 2BB8              //  ______________________________________________________________________
 872+ 2BB8              //
 873+ 2BB8              // count        a -- a2 n
 874+ 2BB8              // expects a counted string at address a, returns string address and counter
 875+ 2BB8                              New_Def COUNT, "COUNT", is_code, is_normal
 875+ 2BB8             >
 875+ 2BB8             >Dict_Ptr        defl    $
 875+ 2BB8             >
 875+ 2BB8             >//              ______________________________________________________________________
 875+ 2BB8             >//              Heap part
 875+ 2BB8             >
 875+ 2BB8             >
 875+ 2BB8             >                org     (Heap_Ptr & $1FFF) + $E000
 875+ E7A8             >
 875+ E7A8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 875+ E7A8             >Latest_Definition defl  Heap_Ptr
 875+ E7A8             >
 875+ E7A8             >                // dummy db directives used to calculate length of namec
 875+ E7A8 43 4F 55 4E >                db      "COUNT"
 875+ E7AC 54          >
 875+ E7AD             >len_NFA         defl    $ - temp_NFA
 875+ E7AD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 875+ E7A8             >
 875+ E7A8 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 875+ E7A9 43 4F 55 4E >                db      "COUNT"               // name string in 7-bit ascii, but
 875+ E7AD 54          >
 875+ E7AE             >                org     $-1                 // alter last byte of Name just above to set
 875+ E7AD D4          >                db      {b $} | END_BIT     // msb as name end
 875+ E7AE             >
 875+ E7AE 9E 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 875+ E7B0             >Prev_Ptr        defl    Heap_Ptr
 875+ E7B0             >
 875+ E7B0             >mirror_Ptr      defl    $
 875+ E7B0             >
 875+ E7B0 BA 2B       >                dw      Dict_Ptr + 2        // xt
 875+ E7B2             >Heap_Ptr        defl    $ - $E000           // save current HP
 875+ E7B2             >
 875+ E7B2             >Current_HP      defl  $ - $E000             // used to set HP once!
 875+ E7B2             >
 875+ E7B2             >//              ______________________________________________________________________
 875+ E7B2             >//              Dictionary part
 875+ E7B2             >
 875+ E7B2             >                org     Dict_Ptr
 875+ 2BB8             >
 875+ 2BB8 B0 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 875+ 2BBA             >
 875+ 2BBA             >COUNT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 875+ 2BBA ~           >                call    runcode ; ok        // for primitive definitions  actual code
 875+ 2BBA ~           >
 875+ 2BBA ~           >
 875+ 2BBA             >                endif           ; ok        // for other definitions it "points" the correct handler
 875+ 2BBA             >                // Use of "; ok" to suppress "warning[fwdref]"
 875+ 2BBA             >
 875+ 2BBA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 876+ 2BBA D9                           exx
 877+ 2BBB E1                           pop     hl
 878+ 2BBC 5E                           ld      e, (hl)
 879+ 2BBD 16 00                        ld      d, 0
 880+ 2BBF 23                           inc     hl
 881+ 2BC0              Count_Here:
 882+ 2BC0 E5                           push    hl
 883+ 2BC1 D5                           push    de
 884+ 2BC2 D9                           exx
 885+ 2BC3                              next
 885+ 2BC3 DD E9       >                jp      (ix)
 886+ 2BC5              //                pop     hl
 887+ 2BC5              //                ld      a, (hl)
 888+ 2BC5              //                inc     hl
 889+ 2BC5              //                push    hl
 890+ 2BC5              //                ld      h, 0
 891+ 2BC5              //                ld      l, a
 892+ 2BC5              //                push    hl
 893+ 2BC5              //                next
 894+ 2BC5
 895+ 2BC5              //  ______________________________________________________________________
 896+ 2BC5              //
 897+ 2BC5              // bounds       a n -- a+n n
 898+ 2BC5              // given an address and a length ( a n ) calculate the bound addresses
 899+ 2BC5              // suitable for DO-LOOP
 900+ 2BC5                              New_Def BOUNDS, "BOUNDS", is_code, is_normal
 900+ 2BC5             >
 900+ 2BC5             >Dict_Ptr        defl    $
 900+ 2BC5             >
 900+ 2BC5             >//              ______________________________________________________________________
 900+ 2BC5             >//              Heap part
 900+ 2BC5             >
 900+ 2BC5             >
 900+ 2BC5             >                org     (Heap_Ptr & $1FFF) + $E000
 900+ E7B2             >
 900+ E7B2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 900+ E7B2             >Latest_Definition defl  Heap_Ptr
 900+ E7B2             >
 900+ E7B2             >                // dummy db directives used to calculate length of namec
 900+ E7B2 42 4F 55 4E >                db      "BOUNDS"
 900+ E7B6 44 53       >
 900+ E7B8             >len_NFA         defl    $ - temp_NFA
 900+ E7B8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 900+ E7B2             >
 900+ E7B2 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 900+ E7B3 42 4F 55 4E >                db      "BOUNDS"               // name string in 7-bit ascii, but
 900+ E7B7 44 53       >
 900+ E7B9             >                org     $-1                 // alter last byte of Name just above to set
 900+ E7B8 D3          >                db      {b $} | END_BIT     // msb as name end
 900+ E7B9             >
 900+ E7B9 A8 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 900+ E7BB             >Prev_Ptr        defl    Heap_Ptr
 900+ E7BB             >
 900+ E7BB             >mirror_Ptr      defl    $
 900+ E7BB             >
 900+ E7BB C7 2B       >                dw      Dict_Ptr + 2        // xt
 900+ E7BD             >Heap_Ptr        defl    $ - $E000           // save current HP
 900+ E7BD             >
 900+ E7BD             >Current_HP      defl  $ - $E000             // used to set HP once!
 900+ E7BD             >
 900+ E7BD             >//              ______________________________________________________________________
 900+ E7BD             >//              Dictionary part
 900+ E7BD             >
 900+ E7BD             >                org     Dict_Ptr
 900+ 2BC5             >
 900+ 2BC5 BB 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 900+ 2BC7             >
 900+ 2BC7             >BOUNDS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 900+ 2BC7 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 900+ 2BC7 ~           >
 900+ 2BC7 ~           >
 900+ 2BC7             >                endif           ; ok        // for other definitions it "points" the correct handler
 900+ 2BC7             >                // Use of "; ok" to suppress "warning[fwdref]"
 900+ 2BC7             >
 900+ 2BC7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 901+ 2BC7 D9                           exx
 902+ 2BC8 E1                           pop     hl
 903+ 2BC9 D1                           pop     de
 904+ 2BCA 19                           add     hl, de
 905+ 2BCB 18 F3                        jr      Count_Here
 906+ 2BCD                              // push    hl
 907+ 2BCD                              // push    de
 908+ 2BCD                              // exx
 909+ 2BCD                              // next
 910+ 2BCD
 911+ 2BCD              //  ______________________________________________________________________
 912+ 2BCD              //
 913+ 2BCD              // leave        --
 914+ 2BCD              // Compile (leave) to leave current LOOP and jump just after it
 915+ 2BCD                              Colon_Def LEAVE, "LEAVE", is_immediate
 915+ 2BCD             >                New_Def  LEAVE, "LEAVE", Enter_Ptr, is_immediate ; ok
 915+ 2BCD             >
 915+ 2BCD             >Dict_Ptr        defl    $
 915+ 2BCD             >
 915+ 2BCD             >//              ______________________________________________________________________
 915+ 2BCD             >//              Heap part
 915+ 2BCD             >
 915+ 2BCD             >
 915+ 2BCD             >                org     (Heap_Ptr & $1FFF) + $E000
 915+ E7BD             >
 915+ E7BD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 915+ E7BD             >Latest_Definition defl  Heap_Ptr
 915+ E7BD             >
 915+ E7BD             >                // dummy db directives used to calculate length of namec
 915+ E7BD 4C 45 41 56 >                db      "LEAVE"
 915+ E7C1 45          >
 915+ E7C2             >len_NFA         defl    $ - temp_NFA
 915+ E7C2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 915+ E7BD             >
 915+ E7BD C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 915+ E7BE 4C 45 41 56 >                db      "LEAVE"               // name string in 7-bit ascii, but
 915+ E7C2 45          >
 915+ E7C3             >                org     $-1                 // alter last byte of Name just above to set
 915+ E7C2 C5          >                db      {b $} | END_BIT     // msb as name end
 915+ E7C3             >
 915+ E7C3 B2 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 915+ E7C5             >Prev_Ptr        defl    Heap_Ptr
 915+ E7C5             >
 915+ E7C5             >mirror_Ptr      defl    $
 915+ E7C5             >
 915+ E7C5 CF 2B       >                dw      Dict_Ptr + 2        // xt
 915+ E7C7             >Heap_Ptr        defl    $ - $E000           // save current HP
 915+ E7C7             >
 915+ E7C7             >Current_HP      defl  $ - $E000             // used to set HP once!
 915+ E7C7             >
 915+ E7C7             >//              ______________________________________________________________________
 915+ E7C7             >//              Dictionary part
 915+ E7C7             >
 915+ E7C7             >                org     Dict_Ptr
 915+ 2BCD             >
 915+ 2BCD C5 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 915+ 2BCF             >
 915+ 2BCF             >LEAVE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 915+ 2BCF CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 915+ 2BD2             >
 915+ 2BD2             >
 915+ 2BD2             >                endif           ; ok        // for other definitions it "points" the correct handler
 915+ 2BD2             >                // Use of "; ok" to suppress "warning[fwdref]"
 915+ 2BD2             >
 915+ 2BD2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 916+ 2BD2 F0 2A 9A 20                  dw      COMPILE, C_LEAVE       // compile (leave)     \ unloop and branch
 917+ 2BD6 4C 28 FB 24                  dw      HERE, TO_R, ZERO, COMMA // here >r 0 ,
 917+ 2BDA 27 27 62 28
 918+ 2BDE 27 27 27 27                  dw      ZERO, ZERO
 919+ 2BE2 D8 24 C7 25                  dw      SPFETCH, DUP
 920+ 2BE6 72 25 72 25                  dw      CELL_PLUS, CELL_PLUS
 921+ 2BEA B7 25                        dw      TUCK
 922+ 2BEC 0A 28 31 26                  dw      CSP, FETCH
 923+ 2BF0 C0 25 8B 28                  dw      SWAP, SUBTRACT
 924+ 2BF4 32 24                        dw      CMOVE
 925+ 2BF6 0A 28 31 26                  dw      CSP, FETCH, CELL_MINUS
 925+ 2BFA 76 25
 926+ 2BFC 06 25 A3 25                  dw      R_TO, OVER, STORE
 926+ 2C00 3B 26
 927+ 2C02 76 25 27 27                  dw      CELL_MINUS, ZERO
 928+ 2C06 C0 25 3B 26                  dw      SWAP, STORE
 929+ 2C0A F1 24                        dw      EXIT                    // ;
 930+ 2C0C
 931+ 2C0C              //  ______________________________________________________________________
 932+ 2C0C              //
 933+ 2C0C              // type         a n --
 934+ 2C0C              // Sends to current output channel n characters starting at address a.
 935+ 2C0C                              Colon_Def TYPE, "TYPE", is_normal
 935+ 2C0C             >                New_Def  TYPE, "TYPE", Enter_Ptr, is_normal ; ok
 935+ 2C0C             >
 935+ 2C0C             >Dict_Ptr        defl    $
 935+ 2C0C             >
 935+ 2C0C             >//              ______________________________________________________________________
 935+ 2C0C             >//              Heap part
 935+ 2C0C             >
 935+ 2C0C             >
 935+ 2C0C             >                org     (Heap_Ptr & $1FFF) + $E000
 935+ E7C7             >
 935+ E7C7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 935+ E7C7             >Latest_Definition defl  Heap_Ptr
 935+ E7C7             >
 935+ E7C7             >                // dummy db directives used to calculate length of namec
 935+ E7C7 54 59 50 45 >                db      "TYPE"
 935+ E7CB             >len_NFA         defl    $ - temp_NFA
 935+ E7CB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 935+ E7C7             >
 935+ E7C7 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 935+ E7C8 54 59 50 45 >                db      "TYPE"               // name string in 7-bit ascii, but
 935+ E7CC             >                org     $-1                 // alter last byte of Name just above to set
 935+ E7CB C5          >                db      {b $} | END_BIT     // msb as name end
 935+ E7CC             >
 935+ E7CC BD 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 935+ E7CE             >Prev_Ptr        defl    Heap_Ptr
 935+ E7CE             >
 935+ E7CE             >mirror_Ptr      defl    $
 935+ E7CE             >
 935+ E7CE 0E 2C       >                dw      Dict_Ptr + 2        // xt
 935+ E7D0             >Heap_Ptr        defl    $ - $E000           // save current HP
 935+ E7D0             >
 935+ E7D0             >Current_HP      defl  $ - $E000             // used to set HP once!
 935+ E7D0             >
 935+ E7D0             >//              ______________________________________________________________________
 935+ E7D0             >//              Dictionary part
 935+ E7D0             >
 935+ E7D0             >                org     Dict_Ptr
 935+ 2C0C             >
 935+ 2C0C CE 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 935+ 2C0E             >
 935+ 2C0E             >TYPE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 935+ 2C0E CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 935+ 2C11             >
 935+ 2C11             >
 935+ 2C11             >                endif           ; ok        // for other definitions it "points" the correct handler
 935+ 2C11             >                // Use of "; ok" to suppress "warning[fwdref]"
 935+ 2C11             >
 935+ 2C11             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 936+ 2C11 C7 2B                        dw      BOUNDS                  // bounds
 937+ 2C13 A4 20                        dw      C_Q_DO                  // ?do
 938+ 2C15 0C 00                        dw      Type_Skip - $
 939+ 2C17              Type_Loop:
 940+ 2C17 D2 20 46 26                  dw          I, CFETCH           //      i c@
 941+ 2C1B FE 28                        dw          EMIT                //      emit
 942+ 2C1D 7A 20                        dw      C_LOOP                  // loop
 943+ 2C1F F8 FF                        dw      Type_Loop - $
 944+ 2C21              Type_Skip:
 945+ 2C21 F1 24                        dw      EXIT                    // ;
 946+ 2C23
 947+ 2C23              //  ______________________________________________________________________
 948+ 2C23              //
 949+ 2C23              // -trailing    a n1 -- a n2
 950+ 2C23              // Assumes that an n1 bytes-long string is stored at address a
 951+ 2C23              // and the string contains a space delimited word,
 952+ 2C23              // Finds n2 as the position of the first character after the word.
 953+ 2C23                              Colon_Def LTRAILING, "-TRAILING", is_normal
 953+ 2C23             >                New_Def  LTRAILING, "-TRAILING", Enter_Ptr, is_normal ; ok
 953+ 2C23             >
 953+ 2C23             >Dict_Ptr        defl    $
 953+ 2C23             >
 953+ 2C23             >//              ______________________________________________________________________
 953+ 2C23             >//              Heap part
 953+ 2C23             >
 953+ 2C23             >
 953+ 2C23             >                org     (Heap_Ptr & $1FFF) + $E000
 953+ E7D0             >
 953+ E7D0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 953+ E7D0             >Latest_Definition defl  Heap_Ptr
 953+ E7D0             >
 953+ E7D0             >                // dummy db directives used to calculate length of namec
 953+ E7D0 2D 54 52 41 >                db      "-TRAILING"
 953+ E7D4 49 4C 49 4E >
 953+ E7D8 47          >
 953+ E7D9             >len_NFA         defl    $ - temp_NFA
 953+ E7D9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 953+ E7D0             >
 953+ E7D0 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 953+ E7D1 2D 54 52 41 >                db      "-TRAILING"               // name string in 7-bit ascii, but
 953+ E7D5 49 4C 49 4E >
 953+ E7D9 47          >
 953+ E7DA             >                org     $-1                 // alter last byte of Name just above to set
 953+ E7D9 C7          >                db      {b $} | END_BIT     // msb as name end
 953+ E7DA             >
 953+ E7DA C7 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 953+ E7DC             >Prev_Ptr        defl    Heap_Ptr
 953+ E7DC             >
 953+ E7DC             >mirror_Ptr      defl    $
 953+ E7DC             >
 953+ E7DC 25 2C       >                dw      Dict_Ptr + 2        // xt
 953+ E7DE             >Heap_Ptr        defl    $ - $E000           // save current HP
 953+ E7DE             >
 953+ E7DE             >Current_HP      defl  $ - $E000             // used to set HP once!
 953+ E7DE             >
 953+ E7DE             >//              ______________________________________________________________________
 953+ E7DE             >//              Dictionary part
 953+ E7DE             >
 953+ E7DE             >                org     Dict_Ptr
 953+ 2C23             >
 953+ 2C23 DC 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 953+ 2C25             >
 953+ 2C25             >LTRAILING:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 953+ 2C25 CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 953+ 2C28             >
 953+ 2C28             >
 953+ 2C28             >                endif           ; ok        // for other definitions it "points" the correct handler
 953+ 2C28             >                // Use of "; ok" to suppress "warning[fwdref]"
 953+ 2C28             >
 953+ 2C28             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 954+ 2C28 C7 25 27 27                  dw      DUP, ZERO               // dup 0
 955+ 2C2C                                                              // do
 956+ 2C2C A4 20                        dw      C_Q_DO
 957+ 2C2E 20 00                        dw      LTrailing_Leave - $
 958+ 2C30              LTrailing_Loop:
 959+ 2C30 0F 26 43 25                  dw          TWO_DUP, PLUS       //      2dup +
 960+ 2C34 63 25                        dw          ONE_SUBTRACT        //      1-
 961+ 2C36 46 26                        dw          CFETCH              //      c@
 962+ 2C38 4A 27 8B 28                  dw          BL, SUBTRACT        //      bl -
 963+ 2C3C                                                              //      if
 964+ 2C3C 8F 20                        dw          ZBRANCH
 965+ 2C3E 0A 00                        dw          LTrailing_Else - $
 966+ 2C40 9A 20                        dw              C_LEAVE         //          leave
 967+ 2C42 0C 00                        dw              LTrailing_Leave - $
 968+ 2C44 82 20                        dw          BRANCH              //      else
 969+ 2C46 04 00                        dw          LTrailing_Endif - $
 970+ 2C48              LTrailing_Else:
 971+ 2C48 63 25                        dw              ONE_SUBTRACT    //          1-
 972+ 2C4A              LTrailing_Endif:                                //      endif
 973+ 2C4A                                                              // loop
 974+ 2C4A 7A 20                        dw      C_LOOP
 975+ 2C4C E4 FF                        dw      LTrailing_Loop - $
 976+ 2C4E              LTrailing_Leave:
 977+ 2C4E F1 24                        dw      EXIT                    // ;
 978+ 2C50
 979+ 2C50              //  ______________________________________________________________________
 980+ 2C50              //
 981+ 2C50              // accept       a n1 -- n2
 982+ 2C50              // Accepts at most n1 characters from terminal and stores them at address a
 983+ 2C50              // CR stops input. A 'nul' is added as trailer.
 984+ 2C50              // n2 is the string length. n2 is kept in span user variable also.
 985+ 2C50                              Colon_Def ACCEPT, "ACCEPT", is_normal
 985+ 2C50             >                New_Def  ACCEPT, "ACCEPT", Enter_Ptr, is_normal ; ok
 985+ 2C50             >
 985+ 2C50             >Dict_Ptr        defl    $
 985+ 2C50             >
 985+ 2C50             >//              ______________________________________________________________________
 985+ 2C50             >//              Heap part
 985+ 2C50             >
 985+ 2C50             >
 985+ 2C50             >                org     (Heap_Ptr & $1FFF) + $E000
 985+ E7DE             >
 985+ E7DE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 985+ E7DE             >Latest_Definition defl  Heap_Ptr
 985+ E7DE             >
 985+ E7DE             >                // dummy db directives used to calculate length of namec
 985+ E7DE 41 43 43 45 >                db      "ACCEPT"
 985+ E7E2 50 54       >
 985+ E7E4             >len_NFA         defl    $ - temp_NFA
 985+ E7E4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 985+ E7DE             >
 985+ E7DE 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 985+ E7DF 41 43 43 45 >                db      "ACCEPT"               // name string in 7-bit ascii, but
 985+ E7E3 50 54       >
 985+ E7E5             >                org     $-1                 // alter last byte of Name just above to set
 985+ E7E4 D4          >                db      {b $} | END_BIT     // msb as name end
 985+ E7E5             >
 985+ E7E5 D0 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 985+ E7E7             >Prev_Ptr        defl    Heap_Ptr
 985+ E7E7             >
 985+ E7E7             >mirror_Ptr      defl    $
 985+ E7E7             >
 985+ E7E7 52 2C       >                dw      Dict_Ptr + 2        // xt
 985+ E7E9             >Heap_Ptr        defl    $ - $E000           // save current HP
 985+ E7E9             >
 985+ E7E9             >Current_HP      defl  $ - $E000             // used to set HP once!
 985+ E7E9             >
 985+ E7E9             >//              ______________________________________________________________________
 985+ E7E9             >//              Dictionary part
 985+ E7E9             >
 985+ E7E9             >                org     Dict_Ptr
 985+ 2C50             >
 985+ 2C50 E7 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 985+ 2C52             >
 985+ 2C52             >ACCEPT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 985+ 2C52 CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 985+ 2C55             >
 985+ 2C55             >
 985+ 2C55             >                endif           ; ok        // for other definitions it "points" the correct handler
 985+ 2C55             >                // Use of "; ok" to suppress "warning[fwdref]"
 985+ 2C55             >
 985+ 2C55             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 986+ 2C55 A3 25 43 25                  dw      OVER, PLUS, OVER        //                      ( a  n1+a  a )
 986+ 2C59 A3 25
 987+ 2C5B 27 27 D7 25                  dw      ZERO, DASH_ROT          //                      ( a  0     a+n1  a )
 988+ 2C5F                                                              // do
 989+ 2C5F A4 20                        dw      C_Q_DO
 990+ 2C61 8C 00                        dw      Accept_Leave - $
 991+ 2C63              Accept_Loop:
 992+ 2C63 CD 22                        dw          CUR                 //      cur             ( a  0 )
 993+ 2C65 AC 25 15 23                  dw          DROP, KEY           //      drop key        ( a  c )
 994+ 2C69 C7 25                        dw          DUP                 //      dup             ( a  c  c )
 995+ 2C6B 3D 20 0E 00                  dw          LIT, $0E            //      0E
 996+ 2C6F 6D 27                        dw          PLUS_ORIGIN         //      +origin
 997+ 2C71 31 26                        dw          FETCH               //      @               ( a  c  c  del )
 998+ 2C73 97 28                        dw          EQUALS              //      =               ( a  c  c==del )
 999+ 2C75                                                              //      if
1000+ 2C75 8F 20                        dw          ZBRANCH
1001+ 2C77 2C 00                        dw          Accept_Else_0 - $
1002+ 2C79 AC 25                        dw              DROP            //          drop        ( a  )
1003+ 2C7B C7 25 D2 20                  dw              DUP, I, EQUALS  //          dup i =     ( a  a==i )
1003+ 2C7F 97 28
1004+ 2C81 2E 27 B1 24                  dw              ONE, AND_OP     //          1 and
1005+ 2C85 C7 25                        dw              DUP             //          dup         ( a  a==i  a==i )
1006+ 2C87 06 25                        dw              R_TO            //          r> 2 - + r>
1007+ 2C89 7E 25 43 25                  dw              TWO_MINUS, PLUS //      ( decrement index by 1 or 2 )
1008+ 2C8D FB 24                        dw              TO_R            //
1009+ 2C8F                                                              //          if
1010+ 2C8F 8F 20                        dw              ZBRANCH
1011+ 2C91 0A 00                        dw              Accept_Else_1 - $
1012+ 2C93 3D 20 07 00                  dw                  LIT, 7      //              7       ( a  7 )
1013+ 2C97                                                              //          else
1014+ 2C97 82 20                        dw              BRANCH
1015+ 2C99 06 00                        dw              Accept_Endif_1 - $
1016+ 2C9B              Accept_Else_1:
1017+ 2C9B 3D 20 08 00                  dw                  LIT, 8      //              8       ( a  8 )
1018+ 2C9F              Accept_Endif_1:                                 //          endif
1019+ 2C9F 82 20                        dw          BRANCH
1020+ 2CA1 2E 00                        dw          Accept_Endif_0 - $
1021+ 2CA3              Accept_Else_0:                                  //      else
1022+ 2CA3 C7 25                        dw              DUP             //          dup         ( a  c  c )
1023+ 2CA5 3D 20 0D 00                  dw              LIT, 13         //          13
1024+ 2CA9 97 28                        dw              EQUALS          //          =           ( a  c  c==CR )
1025+ 2CAB                                                              //          if
1026+ 2CAB 8F 20                        dw              ZBRANCH
1027+ 2CAD 0C 00                        dw              Accept_Else_2 - $
1028+ 2CAF AC 25 4A 27                  dw                  DROP, BL    //              drop bl ( a  bl )
1029+ 2CB3 27 27                        dw                  ZERO        //              0       ( a  c  0 )
1030+ 2CB5                                                              //          else
1031+ 2CB5 82 20                        dw              BRANCH
1032+ 2CB7 04 00                        dw              Accept_Endif_2 - $
1033+ 2CB9              Accept_Else_2:
1034+ 2CB9 C7 25                        dw                  DUP         //              dup     ( a  c  c )
1035+ 2CBB                                                              //          endif
1036+ 2CBB              Accept_Endif_2:
1037+ 2CBB D2 20 4F 26                  dw              I, CSTORE       //          i           ( a  c )
1038+ 2CBF C7 25 4A 27                  dw              DUP, BL, LESS   //          dup bl <    ( a  c  c<BL )
1038+ 2CC3 B0 28
1039+ 2CC5                                                              //          if
1040+ 2CC5 8F 20                        dw              ZBRANCH
1041+ 2CC7 08 00                        dw              Accept_Endif_3 - $
1042+ 2CC9 06 25                        dw                  R_TO        //              r>
1043+ 2CCB 63 25                        dw                  ONE_SUBTRACT//              1-
1044+ 2CCD FB 24                        dw                  TO_R        //              >r
1045+ 2CCF                                                              //          endif
1046+ 2CCF              Accept_Endif_3:
1047+ 2CCF              Accept_Endif_0:                                 //      endif
1048+ 2CCF FE 28                        dw          EMIT                //      emit            ( a )
1049+ 2CD1
1050+ 2CD1 27 27 D2 20                  dw          ZERO, I, ONE_PLUS   //      0 i 1+ !
1050+ 2CD5 5C 25
1051+ 2CD7 3B 26                        dw          STORE               //          ( zero pad )
1052+ 2CD9 D2 20                        dw          I                   //      i
1053+ 2CDB D2 20 46 26                  dw          I, CFETCH, ZEQUAL   //      i c@ 0= if
1053+ 2CDF 16 25
1054+ 2CE1 8F 20                        dw          ZBRANCH             //
1055+ 2CE3 06 00                        dw              Accept_Endif_4 - $
1056+ 2CE5 9A 20                        dw                  C_LEAVE     //              leave
1057+ 2CE7 06 00                        dw                  Accept_Leave - $
1058+ 2CE9              Accept_Endif_4:                                 //      endif
1059+ 2CE9                                                              // loop
1060+ 2CE9 7A 20                        dw      C_LOOP
1061+ 2CEB 78 FF                        dw      Accept_Loop - $
1062+ 2CED              Accept_Leave:
1063+ 2CED C0 25 8B 28                  dw      SWAP, SUBTRACT          // swap -
1064+ 2CF1 5C 25                        dw      ONE_PLUS                // 1+
1065+ 2CF3 C7 25 3A 28                  dw      DUP, SPAN, STORE        // dup span !
1065+ 2CF7 3B 26
1066+ 2CF9 F1 24                        dw      EXIT                    // ;
1067+ 2CFB
1068+ 2CFB              //  ______________________________________________________________________
1069+ 2CFB              //
1070+ 2CFB              // expect      a n --
1071+ 2CFB              // Accepts at most n1 characters from terminal and stores them at address a
1072+ 2CFB              // CR stops input. A 'nul' is added as trailer.
1073+ 2CFB              // n2 is the string length. n2 is kept in span user variable also.
1074+ 2CFB              //              Colon_Def EXPECT, "EXPECT", is_normal
1075+ 2CFB              //              dw      ACCEPT, DROP            // accept drop
1076+ 2CFB              //              dw      EXIT                    // ;
1077+ 2CFB
1078+ 2CFB              //  ______________________________________________________________________
1079+ 2CFB              //
1080+ 2CFB              // query        --
1081+ 2CFB              // Accept at most 80 character from console. CR stops.
1082+ 2CFB              // Text is stored in TIB. Variable IN is zeroed.
1083+ 2CFB                              Colon_Def QUERY, "QUERY", is_normal
1083+ 2CFB             >                New_Def  QUERY, "QUERY", Enter_Ptr, is_normal ; ok
1083+ 2CFB             >
1083+ 2CFB             >Dict_Ptr        defl    $
1083+ 2CFB             >
1083+ 2CFB             >//              ______________________________________________________________________
1083+ 2CFB             >//              Heap part
1083+ 2CFB             >
1083+ 2CFB             >
1083+ 2CFB             >                org     (Heap_Ptr & $1FFF) + $E000
1083+ E7E9             >
1083+ E7E9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1083+ E7E9             >Latest_Definition defl  Heap_Ptr
1083+ E7E9             >
1083+ E7E9             >                // dummy db directives used to calculate length of namec
1083+ E7E9 51 55 45 52 >                db      "QUERY"
1083+ E7ED 59          >
1083+ E7EE             >len_NFA         defl    $ - temp_NFA
1083+ E7EE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1083+ E7E9             >
1083+ E7E9 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1083+ E7EA 51 55 45 52 >                db      "QUERY"               // name string in 7-bit ascii, but
1083+ E7EE 59          >
1083+ E7EF             >                org     $-1                 // alter last byte of Name just above to set
1083+ E7EE D9          >                db      {b $} | END_BIT     // msb as name end
1083+ E7EF             >
1083+ E7EF DE 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1083+ E7F1             >Prev_Ptr        defl    Heap_Ptr
1083+ E7F1             >
1083+ E7F1             >mirror_Ptr      defl    $
1083+ E7F1             >
1083+ E7F1 FD 2C       >                dw      Dict_Ptr + 2        // xt
1083+ E7F3             >Heap_Ptr        defl    $ - $E000           // save current HP
1083+ E7F3             >
1083+ E7F3             >Current_HP      defl  $ - $E000             // used to set HP once!
1083+ E7F3             >
1083+ E7F3             >//              ______________________________________________________________________
1083+ E7F3             >//              Dictionary part
1083+ E7F3             >
1083+ E7F3             >                org     Dict_Ptr
1083+ 2CFB             >
1083+ 2CFB F1 07       >                dw      mirror_Ptr - $E000 + Heap_offset
1083+ 2CFD             >
1083+ 2CFD             >QUERY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1083+ 2CFD CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1083+ 2D00             >
1083+ 2D00             >
1083+ 2D00             >                endif           ; ok        // for other definitions it "points" the correct handler
1083+ 2D00             >                // Use of "; ok" to suppress "warning[fwdref]"
1083+ 2D00             >
1083+ 2D00             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1084+ 2D00 8C 27 31 26                  dw      TIB, FETCH              // tib @
1085+ 2D04 3D 20 50 00                  dw      LIT, 80                 // 80
1086+ 2D08 52 2C AC 25                  dw      ACCEPT, DROP            // accept drop
1087+ 2D0C 27 27 CE 27                  dw      ZERO, TO_IN, STORE      // 0 >in !
1087+ 2D10 3B 26
1088+ 2D12 F1 24                        dw      EXIT                    // ;
1089+ 2D14
1090+ 2D14              //  ______________________________________________________________________
1091+ 2D14              //
1092+ 2D14              // fill        a n c --
1093+ 2D14              // If n > 0, fills n locations starting from address a with the value c.
1094+ 2D14                              New_Def FILL, "FILL", is_code, is_normal
1094+ 2D14             >
1094+ 2D14             >Dict_Ptr        defl    $
1094+ 2D14             >
1094+ 2D14             >//              ______________________________________________________________________
1094+ 2D14             >//              Heap part
1094+ 2D14             >
1094+ 2D14             >
1094+ 2D14             >                org     (Heap_Ptr & $1FFF) + $E000
1094+ E7F3             >
1094+ E7F3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1094+ E7F3             >Latest_Definition defl  Heap_Ptr
1094+ E7F3             >
1094+ E7F3             >                // dummy db directives used to calculate length of namec
1094+ E7F3 46 49 4C 4C >                db      "FILL"
1094+ E7F7             >len_NFA         defl    $ - temp_NFA
1094+ E7F7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1094+ E7F3             >
1094+ E7F3 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1094+ E7F4 46 49 4C 4C >                db      "FILL"               // name string in 7-bit ascii, but
1094+ E7F8             >                org     $-1                 // alter last byte of Name just above to set
1094+ E7F7 CC          >                db      {b $} | END_BIT     // msb as name end
1094+ E7F8             >
1094+ E7F8 E9 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1094+ E7FA             >Prev_Ptr        defl    Heap_Ptr
1094+ E7FA             >
1094+ E7FA             >mirror_Ptr      defl    $
1094+ E7FA             >
1094+ E7FA 16 2D       >                dw      Dict_Ptr + 2        // xt
1094+ E7FC             >Heap_Ptr        defl    $ - $E000           // save current HP
1094+ E7FC             >
1094+ E7FC             >Current_HP      defl  $ - $E000             // used to set HP once!
1094+ E7FC             >
1094+ E7FC             >//              ______________________________________________________________________
1094+ E7FC             >//              Dictionary part
1094+ E7FC             >
1094+ E7FC             >                org     Dict_Ptr
1094+ 2D14             >
1094+ 2D14 FA 07       >                dw      mirror_Ptr - $E000 + Heap_offset
1094+ 2D16             >
1094+ 2D16             >FILL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1094+ 2D16 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1094+ 2D16 ~           >
1094+ 2D16 ~           >
1094+ 2D16             >                endif           ; ok        // for other definitions it "points" the correct handler
1094+ 2D16             >                // Use of "; ok" to suppress "warning[fwdref]"
1094+ 2D16             >
1094+ 2D16             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1095+ 2D16 D9                           exx
1096+ 2D17 D1                           pop     de                  // de has character
1097+ 2D18 C1                           pop     bc                  // bc has counter
1098+ 2D19 E1                           pop     hl                  // hl has address, save Instruction Pointer
1099+ 2D1A              Fill_Loop:
1100+ 2D1A 78                               ld      a, b
1101+ 2D1B B1                               or      c
1102+ 2D1C 28 05                        jr      z, Fill_While_End
1103+ 2D1E 73                               ld      (hl), e
1104+ 2D1F 0B                               dec     bc
1105+ 2D20 23                               inc     hl
1106+ 2D21 18 F7                        jr      Fill_Loop
1107+ 2D23              Fill_While_End:
1108+ 2D23 D9                           exx
1109+ 2D24                              next
1109+ 2D24 DD E9       >                jp      (ix)
1110+ 2D26
1111+ 2D26              //  ______________________________________________________________________
1112+ 2D26              //
1113+ 2D26              // erase        a n --
1114+ 2D26              // If n > 0, fills n locations starting from address a with 'nul' characters.
1115+ 2D26                              Colon_Def ERASE, "ERASE", is_normal
1115+ 2D26             >                New_Def  ERASE, "ERASE", Enter_Ptr, is_normal ; ok
1115+ 2D26             >
1115+ 2D26             >Dict_Ptr        defl    $
1115+ 2D26             >
1115+ 2D26             >//              ______________________________________________________________________
1115+ 2D26             >//              Heap part
1115+ 2D26             >
1115+ 2D26             >
1115+ 2D26             >                org     (Heap_Ptr & $1FFF) + $E000
1115+ E7FC             >
1115+ E7FC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1115+ E7FC             >Latest_Definition defl  Heap_Ptr
1115+ E7FC             >
1115+ E7FC             >                // dummy db directives used to calculate length of namec
1115+ E7FC 45 52 41 53 >                db      "ERASE"
1115+ E800 45          >
1115+ E801             >len_NFA         defl    $ - temp_NFA
1115+ E801             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1115+ E7FC             >
1115+ E7FC 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1115+ E7FD 45 52 41 53 >                db      "ERASE"               // name string in 7-bit ascii, but
1115+ E801 45          >
1115+ E802             >                org     $-1                 // alter last byte of Name just above to set
1115+ E801 C5          >                db      {b $} | END_BIT     // msb as name end
1115+ E802             >
1115+ E802 F3 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1115+ E804             >Prev_Ptr        defl    Heap_Ptr
1115+ E804             >
1115+ E804             >mirror_Ptr      defl    $
1115+ E804             >
1115+ E804 28 2D       >                dw      Dict_Ptr + 2        // xt
1115+ E806             >Heap_Ptr        defl    $ - $E000           // save current HP
1115+ E806             >
1115+ E806             >Current_HP      defl  $ - $E000             // used to set HP once!
1115+ E806             >
1115+ E806             >//              ______________________________________________________________________
1115+ E806             >//              Dictionary part
1115+ E806             >
1115+ E806             >                org     Dict_Ptr
1115+ 2D26             >
1115+ 2D26 04 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1115+ 2D28             >
1115+ 2D28             >ERASE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1115+ 2D28 CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1115+ 2D2B             >
1115+ 2D2B             >
1115+ 2D2B             >                endif           ; ok        // for other definitions it "points" the correct handler
1115+ 2D2B             >                // Use of "; ok" to suppress "warning[fwdref]"
1115+ 2D2B             >
1115+ 2D2B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1116+ 2D2B 27 27 16 2D                  dw      ZERO, FILL              // 0 fill
1117+ 2D2F F1 24                        dw      EXIT                    // ;
1118+ 2D31
1119+ 2D31              //  ______________________________________________________________________
1120+ 2D31              //
1121+ 2D31              // blank        a n --
1122+ 2D31              // If n > 0, fills n locations starting from address a with 'nul' characters.
1123+ 2D31                              Colon_Def BLANK, "BLANK", is_normal
1123+ 2D31             >                New_Def  BLANK, "BLANK", Enter_Ptr, is_normal ; ok
1123+ 2D31             >
1123+ 2D31             >Dict_Ptr        defl    $
1123+ 2D31             >
1123+ 2D31             >//              ______________________________________________________________________
1123+ 2D31             >//              Heap part
1123+ 2D31             >
1123+ 2D31             >
1123+ 2D31             >                org     (Heap_Ptr & $1FFF) + $E000
1123+ E806             >
1123+ E806             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1123+ E806             >Latest_Definition defl  Heap_Ptr
1123+ E806             >
1123+ E806             >                // dummy db directives used to calculate length of namec
1123+ E806 42 4C 41 4E >                db      "BLANK"
1123+ E80A 4B          >
1123+ E80B             >len_NFA         defl    $ - temp_NFA
1123+ E80B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1123+ E806             >
1123+ E806 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1123+ E807 42 4C 41 4E >                db      "BLANK"               // name string in 7-bit ascii, but
1123+ E80B 4B          >
1123+ E80C             >                org     $-1                 // alter last byte of Name just above to set
1123+ E80B CB          >                db      {b $} | END_BIT     // msb as name end
1123+ E80C             >
1123+ E80C FC 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1123+ E80E             >Prev_Ptr        defl    Heap_Ptr
1123+ E80E             >
1123+ E80E             >mirror_Ptr      defl    $
1123+ E80E             >
1123+ E80E 33 2D       >                dw      Dict_Ptr + 2        // xt
1123+ E810             >Heap_Ptr        defl    $ - $E000           // save current HP
1123+ E810             >
1123+ E810             >Current_HP      defl  $ - $E000             // used to set HP once!
1123+ E810             >
1123+ E810             >//              ______________________________________________________________________
1123+ E810             >//              Dictionary part
1123+ E810             >
1123+ E810             >                org     Dict_Ptr
1123+ 2D31             >
1123+ 2D31 0E 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1123+ 2D33             >
1123+ 2D33             >BLANK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1123+ 2D33 CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1123+ 2D36             >
1123+ 2D36             >
1123+ 2D36             >                endif           ; ok        // for other definitions it "points" the correct handler
1123+ 2D36             >                // Use of "; ok" to suppress "warning[fwdref]"
1123+ 2D36             >
1123+ 2D36             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1124+ 2D36 4A 27 16 2D                  dw      BL, FILL                // bl fill
1125+ 2D3A F1 24                        dw      EXIT                    // ;
1126+ 2D3C
1127+ 2D3C              //  ______________________________________________________________________
1128+ 2D3C              //
1129+ 2D3C              // hold         c --
1130+ 2D3C              // Used between <# and #> to insert a character c in numeric formatting.
1131+ 2D3C                              Colon_Def HOLD, "HOLD", is_normal
1131+ 2D3C             >                New_Def  HOLD, "HOLD", Enter_Ptr, is_normal ; ok
1131+ 2D3C             >
1131+ 2D3C             >Dict_Ptr        defl    $
1131+ 2D3C             >
1131+ 2D3C             >//              ______________________________________________________________________
1131+ 2D3C             >//              Heap part
1131+ 2D3C             >
1131+ 2D3C             >
1131+ 2D3C             >                org     (Heap_Ptr & $1FFF) + $E000
1131+ E810             >
1131+ E810             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1131+ E810             >Latest_Definition defl  Heap_Ptr
1131+ E810             >
1131+ E810             >                // dummy db directives used to calculate length of namec
1131+ E810 48 4F 4C 44 >                db      "HOLD"
1131+ E814             >len_NFA         defl    $ - temp_NFA
1131+ E814             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1131+ E810             >
1131+ E810 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1131+ E811 48 4F 4C 44 >                db      "HOLD"               // name string in 7-bit ascii, but
1131+ E815             >                org     $-1                 // alter last byte of Name just above to set
1131+ E814 C4          >                db      {b $} | END_BIT     // msb as name end
1131+ E815             >
1131+ E815 06 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1131+ E817             >Prev_Ptr        defl    Heap_Ptr
1131+ E817             >
1131+ E817             >mirror_Ptr      defl    $
1131+ E817             >
1131+ E817 3E 2D       >                dw      Dict_Ptr + 2        // xt
1131+ E819             >Heap_Ptr        defl    $ - $E000           // save current HP
1131+ E819             >
1131+ E819             >Current_HP      defl  $ - $E000             // used to set HP once!
1131+ E819             >
1131+ E819             >//              ______________________________________________________________________
1131+ E819             >//              Dictionary part
1131+ E819             >
1131+ E819             >                org     Dict_Ptr
1131+ 2D3C             >
1131+ 2D3C 17 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1131+ 2D3E             >
1131+ 2D3E             >HOLD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1131+ 2D3E CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1131+ 2D41             >
1131+ 2D41             >
1131+ 2D41             >                endif           ; ok        // for other definitions it "points" the correct handler
1131+ 2D41             >                // Use of "; ok" to suppress "warning[fwdref]"
1131+ 2D41             >
1131+ 2D41             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1132+ 2D41 43 27                        dw      NEG_ONE                 // -1
1133+ 2D43 16 28 19 26                  dw      HLD, PLUSSTORE          // hld +!
1134+ 2D47 16 28 31 26                  dw      HLD, FETCH, CSTORE      // hld @ c!
1134+ 2D4B 4F 26
1135+ 2D4D F1 24                        dw      EXIT                    // ;
1136+ 2D4F
1137+ 2D4F              //  ______________________________________________________________________
1138+ 2D4F              //
1139+ 2D4F              // pad         -- a
1140+ 2D4F              // leaves the buffer text address. This is at a fixed distance over HERE.
1141+ 2D4F                              Colon_Def PAD, "PAD", is_normal
1141+ 2D4F             >                New_Def  PAD, "PAD", Enter_Ptr, is_normal ; ok
1141+ 2D4F             >
1141+ 2D4F             >Dict_Ptr        defl    $
1141+ 2D4F             >
1141+ 2D4F             >//              ______________________________________________________________________
1141+ 2D4F             >//              Heap part
1141+ 2D4F             >
1141+ 2D4F             >
1141+ 2D4F             >                org     (Heap_Ptr & $1FFF) + $E000
1141+ E819             >
1141+ E819             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1141+ E819             >Latest_Definition defl  Heap_Ptr
1141+ E819             >
1141+ E819             >                // dummy db directives used to calculate length of namec
1141+ E819 50 41 44    >                db      "PAD"
1141+ E81C             >len_NFA         defl    $ - temp_NFA
1141+ E81C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1141+ E819             >
1141+ E819 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1141+ E81A 50 41 44    >                db      "PAD"               // name string in 7-bit ascii, but
1141+ E81D             >                org     $-1                 // alter last byte of Name just above to set
1141+ E81C C4          >                db      {b $} | END_BIT     // msb as name end
1141+ E81D             >
1141+ E81D 10 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1141+ E81F             >Prev_Ptr        defl    Heap_Ptr
1141+ E81F             >
1141+ E81F             >mirror_Ptr      defl    $
1141+ E81F             >
1141+ E81F 51 2D       >                dw      Dict_Ptr + 2        // xt
1141+ E821             >Heap_Ptr        defl    $ - $E000           // save current HP
1141+ E821             >
1141+ E821             >Current_HP      defl  $ - $E000             // used to set HP once!
1141+ E821             >
1141+ E821             >//              ______________________________________________________________________
1141+ E821             >//              Dictionary part
1141+ E821             >
1141+ E821             >                org     Dict_Ptr
1141+ 2D4F             >
1141+ 2D4F 1F 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1141+ 2D51             >
1141+ 2D51             >PAD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1141+ 2D51 CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1141+ 2D54             >
1141+ 2D54             >
1141+ 2D54             >                endif           ; ok        // for other definitions it "points" the correct handler
1141+ 2D54             >                // Use of "; ok" to suppress "warning[fwdref]"
1141+ 2D54             >
1141+ 2D54             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1142+ 2D54 4C 28                        dw      HERE                    // here
1143+ 2D56 3D 20 44 00                  dw      LIT, 68                 // 68
1144+ 2D5A 43 25                        dw      PLUS                    // +
1145+ 2D5C F1 24                        dw      EXIT                    // ;
1146+ 2D5E
1147+ 2D5E              //  ______________________________________________________________________
1148+ 2D5E              //
1149+ 2D5E              // word         c -- a
1150+ 2D5E              // reads characters from input streams until it encouners a c delimiter.
1151+ 2D5E              // Stores that packet so it starts from HERE
1152+ 2D5E              // WORD leaves a counter as first byte and ends the packet with two spaces.
1153+ 2D5E              // Other occurrences of c are ignored.
1154+ 2D5E              // If BLK is zero, text is taken from terminal buffer TIB.
1155+ 2D5E              // Otherwise text is taken from the disk-block given by BLK.
1156+ 2D5E              // "in" variable is incremented of the number of character read.
1157+ 2D5E              // The number of characters read is given by ENCLOSE.
1158+ 2D5E                              Colon_Def WORD, "WORD", is_normal
1158+ 2D5E             >                New_Def  WORD, "WORD", Enter_Ptr, is_normal ; ok
1158+ 2D5E             >
1158+ 2D5E             >Dict_Ptr        defl    $
1158+ 2D5E             >
1158+ 2D5E             >//              ______________________________________________________________________
1158+ 2D5E             >//              Heap part
1158+ 2D5E             >
1158+ 2D5E             >
1158+ 2D5E             >                org     (Heap_Ptr & $1FFF) + $E000
1158+ E821             >
1158+ E821             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1158+ E821             >Latest_Definition defl  Heap_Ptr
1158+ E821             >
1158+ E821             >                // dummy db directives used to calculate length of namec
1158+ E821 57 4F 52 44 >                db      "WORD"
1158+ E825             >len_NFA         defl    $ - temp_NFA
1158+ E825             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1158+ E821             >
1158+ E821 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1158+ E822 57 4F 52 44 >                db      "WORD"               // name string in 7-bit ascii, but
1158+ E826             >                org     $-1                 // alter last byte of Name just above to set
1158+ E825 C4          >                db      {b $} | END_BIT     // msb as name end
1158+ E826             >
1158+ E826 19 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1158+ E828             >Prev_Ptr        defl    Heap_Ptr
1158+ E828             >
1158+ E828             >mirror_Ptr      defl    $
1158+ E828             >
1158+ E828 60 2D       >                dw      Dict_Ptr + 2        // xt
1158+ E82A             >Heap_Ptr        defl    $ - $E000           // save current HP
1158+ E82A             >
1158+ E82A             >Current_HP      defl  $ - $E000             // used to set HP once!
1158+ E82A             >
1158+ E82A             >//              ______________________________________________________________________
1158+ E82A             >//              Dictionary part
1158+ E82A             >
1158+ E82A             >                org     Dict_Ptr
1158+ 2D5E             >
1158+ 2D5E 28 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1158+ 2D60             >
1158+ 2D60             >WORD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1158+ 2D60 CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1158+ 2D63             >
1158+ 2D63             >
1158+ 2D63             >                endif           ; ok        // for other definitions it "points" the correct handler
1158+ 2D63             >                // Use of "; ok" to suppress "warning[fwdref]"
1158+ 2D63             >
1158+ 2D63             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1159+ 2D63 C8 27 31 26                  dw      BLK, FETCH              // blk @
1160+ 2D67                                                              // if
1161+ 2D67 8F 20                        dw      ZBRANCH
1162+ 2D69 0C 00                        dw      Word_Else - $
1163+ 2D6B C8 27 31 26                  dw          BLK, FETCH          //      blk @
1164+ 2D6F 2B 37                        dw          BLOCK               //      block ( forward )
1165+ 2D71                                                              // else
1166+ 2D71 82 20                        dw      BRANCH
1167+ 2D73 06 00                        dw      Word_Endif - $
1168+ 2D75              Word_Else:
1169+ 2D75 8C 27 31 26                  dw         TIB, FETCH           //      tib @
1170+ 2D79              Word_Endif:                                     // endif
1171+ 2D79 CE 27 31 26                  dw      TO_IN, FETCH, PLUS      // >in @ +
1171+ 2D7D 43 25
1172+ 2D7F C0 25 C0 21                  dw      SWAP, ENCLOSE           // swap enclose
1173+ 2D83 4C 28 3D 20                  dw      HERE, LIT, 34, BLANK    // here 34 blank
1173+ 2D87 22 00 33 2D
1174+ 2D8B CE 27 19 26                  dw      TO_IN, PLUSSTORE        // >in @ +
1175+ 2D8F A3 25 8B 28                  dw      OVER, SUBTRACT, TO_R    // over - >r
1175+ 2D93 FB 24
1176+ 2D95 11 25 4C 28                  dw      R_OP, HERE, CSTORE      // r here c!
1176+ 2D99 4F 26
1177+ 2D9B 43 25                        dw      PLUS                    // +
1178+ 2D9D 4C 28 5C 25                  dw      HERE, ONE_PLUS, R_TO    // here 1+ r>
1178+ 2DA1 06 25
1179+ 2DA3 32 24                        dw      CMOVE                   // cmove
1180+ 2DA5 4C 28                        dw      HERE                    // here
1181+ 2DA7 F1 24                        dw      EXIT                    // ;
1182+ 2DA9
1183+ 2DA9              //  ______________________________________________________________________
1184+ 2DA9              //
1185+ 2DA9              // (.")         --
1186+ 2DA9              // Direct procedure compiled by ." and  .(  It executes TYPE.
1187+ 2DA9                              Colon_Def C_DOT_QUOTE, '(.")', is_normal
1187+ 2DA9             >                New_Def  C_DOT_QUOTE, '(.")', Enter_Ptr, is_normal ; ok
1187+ 2DA9             >
1187+ 2DA9             >Dict_Ptr        defl    $
1187+ 2DA9             >
1187+ 2DA9             >//              ______________________________________________________________________
1187+ 2DA9             >//              Heap part
1187+ 2DA9             >
1187+ 2DA9             >
1187+ 2DA9             >                org     (Heap_Ptr & $1FFF) + $E000
1187+ E82A             >
1187+ E82A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1187+ E82A             >Latest_Definition defl  Heap_Ptr
1187+ E82A             >
1187+ E82A             >                // dummy db directives used to calculate length of namec
1187+ E82A 28 2E 22 29 >                db      '(.")'
1187+ E82E             >len_NFA         defl    $ - temp_NFA
1187+ E82E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1187+ E82A             >
1187+ E82A 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1187+ E82B 28 2E 22 29 >                db      '(.")'               // name string in 7-bit ascii, but
1187+ E82F             >                org     $-1                 // alter last byte of Name just above to set
1187+ E82E A9          >                db      {b $} | END_BIT     // msb as name end
1187+ E82F             >
1187+ E82F 21 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1187+ E831             >Prev_Ptr        defl    Heap_Ptr
1187+ E831             >
1187+ E831             >mirror_Ptr      defl    $
1187+ E831             >
1187+ E831 AB 2D       >                dw      Dict_Ptr + 2        // xt
1187+ E833             >Heap_Ptr        defl    $ - $E000           // save current HP
1187+ E833             >
1187+ E833             >Current_HP      defl  $ - $E000             // used to set HP once!
1187+ E833             >
1187+ E833             >//              ______________________________________________________________________
1187+ E833             >//              Dictionary part
1187+ E833             >
1187+ E833             >                org     Dict_Ptr
1187+ 2DA9             >
1187+ 2DA9 31 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1187+ 2DAB             >
1187+ 2DAB             >C_DOT_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1187+ 2DAB CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1187+ 2DAE             >
1187+ 2DAE             >
1187+ 2DAE             >                endif           ; ok        // for other definitions it "points" the correct handler
1187+ 2DAE             >                // Use of "; ok" to suppress "warning[fwdref]"
1187+ 2DAE             >
1187+ 2DAE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1188+ 2DAE 11 25 BA 2B                  dw      R_OP, COUNT             // r count
1189+ 2DB2 C7 25 5C 25                  dw      DUP, ONE_PLUS           // dup 1+
1190+ 2DB6 06 25 43 25                  dw      R_TO, PLUS, TO_R        // r> + >r  ( advance IP )
1190+ 2DBA FB 24
1191+ 2DBC 0E 2C                        dw      TYPE                    // type
1192+ 2DBE F1 24                        dw      EXIT                    // ;
1193+ 2DC0
1194+ 2DC0              //  ______________________________________________________________________
1195+ 2DC0              //
1196+ 2DC0              // char         -- c
1197+ 2DC0              // get first character from next input word
1198+ 2DC0                              Colon_Def CHAR,  "CHAR", is_normal
1198+ 2DC0             >                New_Def  CHAR, "CHAR", Enter_Ptr, is_normal ; ok
1198+ 2DC0             >
1198+ 2DC0             >Dict_Ptr        defl    $
1198+ 2DC0             >
1198+ 2DC0             >//              ______________________________________________________________________
1198+ 2DC0             >//              Heap part
1198+ 2DC0             >
1198+ 2DC0             >
1198+ 2DC0             >                org     (Heap_Ptr & $1FFF) + $E000
1198+ E833             >
1198+ E833             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1198+ E833             >Latest_Definition defl  Heap_Ptr
1198+ E833             >
1198+ E833             >                // dummy db directives used to calculate length of namec
1198+ E833 43 48 41 52 >                db      "CHAR"
1198+ E837             >len_NFA         defl    $ - temp_NFA
1198+ E837             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1198+ E833             >
1198+ E833 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1198+ E834 43 48 41 52 >                db      "CHAR"               // name string in 7-bit ascii, but
1198+ E838             >                org     $-1                 // alter last byte of Name just above to set
1198+ E837 D2          >                db      {b $} | END_BIT     // msb as name end
1198+ E838             >
1198+ E838 2A 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1198+ E83A             >Prev_Ptr        defl    Heap_Ptr
1198+ E83A             >
1198+ E83A             >mirror_Ptr      defl    $
1198+ E83A             >
1198+ E83A C2 2D       >                dw      Dict_Ptr + 2        // xt
1198+ E83C             >Heap_Ptr        defl    $ - $E000           // save current HP
1198+ E83C             >
1198+ E83C             >Current_HP      defl  $ - $E000             // used to set HP once!
1198+ E83C             >
1198+ E83C             >//              ______________________________________________________________________
1198+ E83C             >//              Dictionary part
1198+ E83C             >
1198+ E83C             >                org     Dict_Ptr
1198+ 2DC0             >
1198+ 2DC0 3A 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1198+ 2DC2             >
1198+ 2DC2             >CHAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1198+ 2DC2 CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1198+ 2DC5             >
1198+ 2DC5             >
1198+ 2DC5             >                endif           ; ok        // for other definitions it "points" the correct handler
1198+ 2DC5             >                // Use of "; ok" to suppress "warning[fwdref]"
1198+ 2DC5             >
1198+ 2DC5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1199+ 2DC5 4A 27 60 2D                  dw      BL, WORD                // bl word
1200+ 2DC9 5C 25 46 26                  dw      ONE_PLUS, CFETCH        // 1+ c@
1201+ 2DCD F1 24                        dw      EXIT                    // ;
1202+ 2DCF
1203+ 2DCF              //  ______________________________________________________________________
1204+ 2DCF              //
1205+ 2DCF              // ,"           --
1206+ 2DCF              // compiles a string terminated by " as a counted string from next input stream
1207+ 2DCF                              Colon_Def COMMA_QUOTE,  ',"', is_normal
1207+ 2DCF             >                New_Def  COMMA_QUOTE, ',"', Enter_Ptr, is_normal ; ok
1207+ 2DCF             >
1207+ 2DCF             >Dict_Ptr        defl    $
1207+ 2DCF             >
1207+ 2DCF             >//              ______________________________________________________________________
1207+ 2DCF             >//              Heap part
1207+ 2DCF             >
1207+ 2DCF             >
1207+ 2DCF             >                org     (Heap_Ptr & $1FFF) + $E000
1207+ E83C             >
1207+ E83C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1207+ E83C             >Latest_Definition defl  Heap_Ptr
1207+ E83C             >
1207+ E83C             >                // dummy db directives used to calculate length of namec
1207+ E83C 2C 22       >                db      ',"'
1207+ E83E             >len_NFA         defl    $ - temp_NFA
1207+ E83E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1207+ E83C             >
1207+ E83C 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1207+ E83D 2C 22       >                db      ',"'               // name string in 7-bit ascii, but
1207+ E83F             >                org     $-1                 // alter last byte of Name just above to set
1207+ E83E A2          >                db      {b $} | END_BIT     // msb as name end
1207+ E83F             >
1207+ E83F 33 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1207+ E841             >Prev_Ptr        defl    Heap_Ptr
1207+ E841             >
1207+ E841             >mirror_Ptr      defl    $
1207+ E841             >
1207+ E841 D1 2D       >                dw      Dict_Ptr + 2        // xt
1207+ E843             >Heap_Ptr        defl    $ - $E000           // save current HP
1207+ E843             >
1207+ E843             >Current_HP      defl  $ - $E000             // used to set HP once!
1207+ E843             >
1207+ E843             >//              ______________________________________________________________________
1207+ E843             >//              Dictionary part
1207+ E843             >
1207+ E843             >                org     Dict_Ptr
1207+ 2DCF             >
1207+ 2DCF 41 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1207+ 2DD1             >
1207+ 2DD1             >COMMA_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1207+ 2DD1 CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1207+ 2DD4             >
1207+ 2DD4             >
1207+ 2DD4             >                endif           ; ok        // for other definitions it "points" the correct handler
1207+ 2DD4             >                // Use of "; ok" to suppress "warning[fwdref]"
1207+ 2DD4             >
1207+ 2DD4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1208+ 2DD4 3D 20 22 00                  dw      LIT, DQUOTE_CHAR        // [char] "
1209+ 2DD8 60 2D                        dw      WORD                    // word
1210+ 2DDA 46 26 5C 25                  dw      CFETCH, ONE_PLUS        // c@ 1+
1211+ 2DDE 57 28                        dw      ALLOT                   // allot
1212+ 2DE0 27 27 71 28                  dw      ZERO, CCOMMA            // 0 c,  ( nul-terminated string - useful anyway )
1213+ 2DE4 F1 24                        dw      EXIT
1214+ 2DE6
1215+ 2DE6              //  ______________________________________________________________________
1216+ 2DE6              //
1217+ 2DE6              // .c           c --
1218+ 2DE6              // intermediate general purpose string builder, used by ." and .(
1219+ 2DE6                              Colon_Def DOT_C,  ".C", is_immediate
1219+ 2DE6             >                New_Def  DOT_C, ".C", Enter_Ptr, is_immediate ; ok
1219+ 2DE6             >
1219+ 2DE6             >Dict_Ptr        defl    $
1219+ 2DE6             >
1219+ 2DE6             >//              ______________________________________________________________________
1219+ 2DE6             >//              Heap part
1219+ 2DE6             >
1219+ 2DE6             >
1219+ 2DE6             >                org     (Heap_Ptr & $1FFF) + $E000
1219+ E843             >
1219+ E843             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1219+ E843             >Latest_Definition defl  Heap_Ptr
1219+ E843             >
1219+ E843             >                // dummy db directives used to calculate length of namec
1219+ E843 2E 43       >                db      ".C"
1219+ E845             >len_NFA         defl    $ - temp_NFA
1219+ E845             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1219+ E843             >
1219+ E843 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1219+ E844 2E 43       >                db      ".C"               // name string in 7-bit ascii, but
1219+ E846             >                org     $-1                 // alter last byte of Name just above to set
1219+ E845 C3          >                db      {b $} | END_BIT     // msb as name end
1219+ E846             >
1219+ E846 3C 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1219+ E848             >Prev_Ptr        defl    Heap_Ptr
1219+ E848             >
1219+ E848             >mirror_Ptr      defl    $
1219+ E848             >
1219+ E848 E8 2D       >                dw      Dict_Ptr + 2        // xt
1219+ E84A             >Heap_Ptr        defl    $ - $E000           // save current HP
1219+ E84A             >
1219+ E84A             >Current_HP      defl  $ - $E000             // used to set HP once!
1219+ E84A             >
1219+ E84A             >//              ______________________________________________________________________
1219+ E84A             >//              Dictionary part
1219+ E84A             >
1219+ E84A             >                org     Dict_Ptr
1219+ 2DE6             >
1219+ 2DE6 48 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1219+ 2DE8             >
1219+ 2DE8             >DOT_C:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1219+ 2DE8 CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1219+ 2DEB             >
1219+ 2DEB             >
1219+ 2DEB             >                endif           ; ok        // for other definitions it "points" the correct handler
1219+ 2DEB             >                // Use of "; ok" to suppress "warning[fwdref]"
1219+ 2DEB             >
1219+ 2DEB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1220+ 2DEB F2 27 31 26                  dw      STATE, FETCH            // state @
1221+ 2DEF                                                              // if
1222+ 2DEF 8F 20                        dw      ZBRANCH
1223+ 2DF1 12 00                        dw      Dot_C_Else - $
1224+ 2DF3 F0 2A AB 2D                  dw          COMPILE, C_DOT_QUOTE //     compile (.")
1225+ 2DF7 60 2D 46 26                  dw          WORD, CFETCH        //      word c@
1226+ 2DFB 5C 25 57 28                  dw          ONE_PLUS, ALLOT     //      1+ allot
1227+ 2DFF                                                              // else
1228+ 2DFF 82 20                        dw      BRANCH
1229+ 2E01 08 00                        dw      Dot_C_Endif - $
1230+ 2E03              Dot_C_Else:
1231+ 2E03 60 2D BA 2B                  dw          WORD, COUNT, TYPE   //      word count type
1231+ 2E07 0E 2C
1232+ 2E09              Dot_C_Endif:                                    // endif
1233+ 2E09 F1 24                        dw      EXIT                    ;
1234+ 2E0B
1235+ 2E0B              //  ______________________________________________________________________
1236+ 2E0B              //
1237+ 2E0B              // ."           c --
1238+ 2E0B                              Colon_Def DOT_QUOTE,  '."', is_immediate
1238+ 2E0B             >                New_Def  DOT_QUOTE, '."', Enter_Ptr, is_immediate ; ok
1238+ 2E0B             >
1238+ 2E0B             >Dict_Ptr        defl    $
1238+ 2E0B             >
1238+ 2E0B             >//              ______________________________________________________________________
1238+ 2E0B             >//              Heap part
1238+ 2E0B             >
1238+ 2E0B             >
1238+ 2E0B             >                org     (Heap_Ptr & $1FFF) + $E000
1238+ E84A             >
1238+ E84A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1238+ E84A             >Latest_Definition defl  Heap_Ptr
1238+ E84A             >
1238+ E84A             >                // dummy db directives used to calculate length of namec
1238+ E84A 2E 22       >                db      '."'
1238+ E84C             >len_NFA         defl    $ - temp_NFA
1238+ E84C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1238+ E84A             >
1238+ E84A C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1238+ E84B 2E 22       >                db      '."'               // name string in 7-bit ascii, but
1238+ E84D             >                org     $-1                 // alter last byte of Name just above to set
1238+ E84C A2          >                db      {b $} | END_BIT     // msb as name end
1238+ E84D             >
1238+ E84D 43 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1238+ E84F             >Prev_Ptr        defl    Heap_Ptr
1238+ E84F             >
1238+ E84F             >mirror_Ptr      defl    $
1238+ E84F             >
1238+ E84F 0D 2E       >                dw      Dict_Ptr + 2        // xt
1238+ E851             >Heap_Ptr        defl    $ - $E000           // save current HP
1238+ E851             >
1238+ E851             >Current_HP      defl  $ - $E000             // used to set HP once!
1238+ E851             >
1238+ E851             >//              ______________________________________________________________________
1238+ E851             >//              Dictionary part
1238+ E851             >
1238+ E851             >                org     Dict_Ptr
1238+ 2E0B             >
1238+ 2E0B 4F 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1238+ 2E0D             >
1238+ 2E0D             >DOT_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1238+ 2E0D CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1238+ 2E10             >
1238+ 2E10             >
1238+ 2E10             >                endif           ; ok        // for other definitions it "points" the correct handler
1238+ 2E10             >                // Use of "; ok" to suppress "warning[fwdref]"
1238+ 2E10             >
1238+ 2E10             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1239+ 2E10 3D 20 22 00                  dw      LIT, DQUOTE_CHAR        // [char] "
1240+ 2E14 E8 2D                        dw      DOT_C                   // [compile] .c
1241+ 2E16 F1 24                        dw      EXIT                    // ; immediate
1242+ 2E18
1243+ 2E18              //  ______________________________________________________________________
1244+ 2E18              //
1245+ 2E18              // .(           c --
1246+ 2E18                              Colon_Def DOT_BRACKET,  ".(", is_immediate
1246+ 2E18             >                New_Def  DOT_BRACKET, ".(", Enter_Ptr, is_immediate ; ok
1246+ 2E18             >
1246+ 2E18             >Dict_Ptr        defl    $
1246+ 2E18             >
1246+ 2E18             >//              ______________________________________________________________________
1246+ 2E18             >//              Heap part
1246+ 2E18             >
1246+ 2E18             >
1246+ 2E18             >                org     (Heap_Ptr & $1FFF) + $E000
1246+ E851             >
1246+ E851             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1246+ E851             >Latest_Definition defl  Heap_Ptr
1246+ E851             >
1246+ E851             >                // dummy db directives used to calculate length of namec
1246+ E851 2E 28       >                db      ".("
1246+ E853             >len_NFA         defl    $ - temp_NFA
1246+ E853             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1246+ E851             >
1246+ E851 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1246+ E852 2E 28       >                db      ".("               // name string in 7-bit ascii, but
1246+ E854             >                org     $-1                 // alter last byte of Name just above to set
1246+ E853 A8          >                db      {b $} | END_BIT     // msb as name end
1246+ E854             >
1246+ E854 4A 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1246+ E856             >Prev_Ptr        defl    Heap_Ptr
1246+ E856             >
1246+ E856             >mirror_Ptr      defl    $
1246+ E856             >
1246+ E856 1A 2E       >                dw      Dict_Ptr + 2        // xt
1246+ E858             >Heap_Ptr        defl    $ - $E000           // save current HP
1246+ E858             >
1246+ E858             >Current_HP      defl  $ - $E000             // used to set HP once!
1246+ E858             >
1246+ E858             >//              ______________________________________________________________________
1246+ E858             >//              Dictionary part
1246+ E858             >
1246+ E858             >                org     Dict_Ptr
1246+ 2E18             >
1246+ 2E18 56 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1246+ 2E1A             >
1246+ 2E1A             >DOT_BRACKET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1246+ 2E1A CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1246+ 2E1D             >
1246+ 2E1D             >
1246+ 2E1D             >                endif           ; ok        // for other definitions it "points" the correct handler
1246+ 2E1D             >                // Use of "; ok" to suppress "warning[fwdref]"
1246+ 2E1D             >
1246+ 2E1D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1247+ 2E1D 3D 20 29 00                  dw      LIT, ")"                // [char] )
1248+ 2E21 E8 2D                        dw      DOT_C                   // [compile] .c
1249+ 2E23 F1 24                        dw      EXIT                    // ; immediate
1250+ 2E25
1251+ 2E25              //  ______________________________________________________________________
1252+ 2E25              //
1253+ 2E25              // (sgn)        a -- a f
1254+ 2E25              // determines if char in addr a is a sign (+ or -), and in that case increments
1255+ 2E25              // a flag. Returns f as the sign, true for negative, false for positive.
1256+ 2E25              // called by NUMBER and (EXP)
1257+ 2E25                              Colon_Def CSGN,  "(SGN)", is_normal
1257+ 2E25             >                New_Def  CSGN, "(SGN)", Enter_Ptr, is_normal ; ok
1257+ 2E25             >
1257+ 2E25             >Dict_Ptr        defl    $
1257+ 2E25             >
1257+ 2E25             >//              ______________________________________________________________________
1257+ 2E25             >//              Heap part
1257+ 2E25             >
1257+ 2E25             >
1257+ 2E25             >                org     (Heap_Ptr & $1FFF) + $E000
1257+ E858             >
1257+ E858             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1257+ E858             >Latest_Definition defl  Heap_Ptr
1257+ E858             >
1257+ E858             >                // dummy db directives used to calculate length of namec
1257+ E858 28 53 47 4E >                db      "(SGN)"
1257+ E85C 29          >
1257+ E85D             >len_NFA         defl    $ - temp_NFA
1257+ E85D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1257+ E858             >
1257+ E858 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1257+ E859 28 53 47 4E >                db      "(SGN)"               // name string in 7-bit ascii, but
1257+ E85D 29          >
1257+ E85E             >                org     $-1                 // alter last byte of Name just above to set
1257+ E85D A9          >                db      {b $} | END_BIT     // msb as name end
1257+ E85E             >
1257+ E85E 51 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1257+ E860             >Prev_Ptr        defl    Heap_Ptr
1257+ E860             >
1257+ E860             >mirror_Ptr      defl    $
1257+ E860             >
1257+ E860 27 2E       >                dw      Dict_Ptr + 2        // xt
1257+ E862             >Heap_Ptr        defl    $ - $E000           // save current HP
1257+ E862             >
1257+ E862             >Current_HP      defl  $ - $E000             // used to set HP once!
1257+ E862             >
1257+ E862             >//              ______________________________________________________________________
1257+ E862             >//              Dictionary part
1257+ E862             >
1257+ E862             >                org     Dict_Ptr
1257+ 2E25             >
1257+ 2E25 60 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1257+ 2E27             >
1257+ 2E27             >CSGN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1257+ 2E27 CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1257+ 2E2A             >
1257+ 2E2A             >
1257+ 2E2A             >                endif           ; ok        // for other definitions it "points" the correct handler
1257+ 2E2A             >                // Use of "; ok" to suppress "warning[fwdref]"
1257+ 2E2A             >
1257+ 2E2A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1258+ 2E2A C7 25 5C 25                  dw      DUP, ONE_PLUS, CFETCH   // dup 1+ c@
1258+ 2E2E 46 26
1259+ 2E30 C7 25 3D 20                  dw      DUP, LIT, "-", EQUALS   // dup [char] - =
1259+ 2E34 2D 00 97 28
1260+ 2E38                                                              // if
1261+ 2E38 8F 20                        dw      ZBRANCH
1262+ 2E3A 12 00                        dw      CSgn_Else_0 - $
1263+ 2E3C AC 25                        dw          DROP                //      drop
1264+ 2E3E 5C 25                        dw          ONE_PLUS            //      1+
1265+ 2E40 2E 27 FE 27                  dw          ONE, DPL, PLUSSTORE //      1 dpl +!
1265+ 2E44 19 26
1266+ 2E46 2E 27                        dw          ONE                 //      1
1267+ 2E48                                                              // else
1268+ 2E48 82 20                        dw      BRANCH
1269+ 2E4A 16 00                        dw      CSgn_Endif_0 - $
1270+ 2E4C              CSgn_Else_0:
1271+ 2E4C 3D 20 2B 00                  dw          LIT, "+", EQUALS    //      [char] + =
1271+ 2E50 97 28
1272+ 2E52                                                              //      if
1273+ 2E52 8F 20                        dw          ZBRANCH
1274+ 2E54 0A 00                        dw          CSgn_Endif_1 - $
1275+ 2E56 5C 25                        dw              ONE_PLUS        //          1+
1276+ 2E58 2E 27 FE 27                  dw              ONE, DPL        //          1 dpl
1277+ 2E5C 19 26                        dw              PLUSSTORE       //          +!
1278+ 2E5E              CSgn_Endif_1                                    //      endif
1279+ 2E5E 27 27                        dw          ZERO                //      0
1280+ 2E60              CSgn_Endif_0:                                   // endif
1281+ 2E60 F1 24                        dw      EXIT
1282+ 2E62
1283+ 2E62              //  ______________________________________________________________________
1284+ 2E62              //
1285+ 2E62              // (number)     d a -- d1 a1
1286+ 2E62              // using the current BASE parse characters stored in address a
1287+ 2E62              // accumulating a double precision integer d
1288+ 2E62              // the process stops at the first not-convertible character
1289+ 2E62              // A double-number is kept in CPU registers as HLDE.
1290+ 2E62              // On the stack a double number is treated as two single numbers
1291+ 2E62              // where HL is on the top of the stack and DE is the second from top,
1292+ 2E62              // so in the stack memory it appears as LHED.
1293+ 2E62              // Instead, in 2VARIABLE a double number is stored as EDLH.
1294+ 2E62                              Colon_Def CNUMBER,  "(NUMBER)", is_normal
1294+ 2E62             >                New_Def  CNUMBER, "(NUMBER)", Enter_Ptr, is_normal ; ok
1294+ 2E62             >
1294+ 2E62             >Dict_Ptr        defl    $
1294+ 2E62             >
1294+ 2E62             >//              ______________________________________________________________________
1294+ 2E62             >//              Heap part
1294+ 2E62             >
1294+ 2E62             >
1294+ 2E62             >                org     (Heap_Ptr & $1FFF) + $E000
1294+ E862             >
1294+ E862             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1294+ E862             >Latest_Definition defl  Heap_Ptr
1294+ E862             >
1294+ E862             >                // dummy db directives used to calculate length of namec
1294+ E862 28 4E 55 4D >                db      "(NUMBER)"
1294+ E866 42 45 52 29 >
1294+ E86A             >len_NFA         defl    $ - temp_NFA
1294+ E86A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1294+ E862             >
1294+ E862 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1294+ E863 28 4E 55 4D >                db      "(NUMBER)"               // name string in 7-bit ascii, but
1294+ E867 42 45 52 29 >
1294+ E86B             >                org     $-1                 // alter last byte of Name just above to set
1294+ E86A A9          >                db      {b $} | END_BIT     // msb as name end
1294+ E86B             >
1294+ E86B 58 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1294+ E86D             >Prev_Ptr        defl    Heap_Ptr
1294+ E86D             >
1294+ E86D             >mirror_Ptr      defl    $
1294+ E86D             >
1294+ E86D 64 2E       >                dw      Dict_Ptr + 2        // xt
1294+ E86F             >Heap_Ptr        defl    $ - $E000           // save current HP
1294+ E86F             >
1294+ E86F             >Current_HP      defl  $ - $E000             // used to set HP once!
1294+ E86F             >
1294+ E86F             >//              ______________________________________________________________________
1294+ E86F             >//              Dictionary part
1294+ E86F             >
1294+ E86F             >                org     Dict_Ptr
1294+ 2E62             >
1294+ 2E62 6D 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1294+ 2E64             >
1294+ 2E64             >CNUMBER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1294+ 2E64 CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1294+ 2E67             >
1294+ 2E67             >
1294+ 2E67             >                endif           ; ok        // for other definitions it "points" the correct handler
1294+ 2E67             >                // Use of "; ok" to suppress "warning[fwdref]"
1294+ 2E67             >
1294+ 2E67             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1295+ 2E67                                                              // begin
1296+ 2E67              CNumber_Begin:
1297+ 2E67 5C 25                        dw          ONE_PLUS            //      1+
1298+ 2E69 C7 25 FB 24                  dw          DUP, TO_R           //      dup >r
1299+ 2E6D 46 26                        dw          CFETCH              //      @
1300+ 2E6F F8 27 31 26                  dw          BASE, FETCH         //      base @
1301+ 2E73 E5 20                        dw          DIGIT               //      digit
1302+ 2E75                                                              // while
1303+ 2E75 8F 20                        dw      ZBRANCH
1304+ 2E77 2C 00                        dw      CNumber_While_end - $
1305+ 2E79 C0 25                        dw          SWAP                //      swap
1306+ 2E7B F8 27 31 26                  dw          BASE, FETCH         //      base @
1307+ 2E7F 56 24                        dw          UM_MUL              //      um*
1308+ 2E81 AC 25 CE 25                  dw          DROP, ROT           //      drop rot
1309+ 2E85 F8 27 31 26                  dw          BASE, FETCH         //      base @
1310+ 2E89 56 24                        dw          UM_MUL              //      um*
1311+ 2E8B 4D 25                        dw          DPLUS               //      d+
1312+ 2E8D FE 27 31 26                  dw          DPL, FETCH          //      dpl @
1313+ 2E91 5C 25                        dw          ONE_PLUS            //      1+
1314+ 2E93                                                              //      if
1315+ 2E93 8F 20                        dw          ZBRANCH
1316+ 2E95 08 00                        dw          CNumber_Endif - $
1317+ 2E97 2E 27 FE 27                  dw              ONE, DPL        //          1 dpl
1318+ 2E9B 19 26                        dw              PLUSSTORE       //          +!
1319+ 2E9D              CNumber_Endif:                                  //      endif
1320+ 2E9D 06 25                        dw             R_TO             //      r>  ( balance rp )
1321+ 2E9F 82 20                        dw      BRANCH
1322+ 2EA1 C6 FF                        dw      CNumber_Begin - $
1323+ 2EA3              CNumber_While_end:                              // repeat
1324+ 2EA3 06 25                        dw      R_TO                    // r>  ( balance rp on exit while-repeat )
1325+ 2EA5 F1 24                        dw      EXIT                    // ;
1326+ 2EA7
1327+ 2EA7              //  ______________________________________________________________________
1328+ 2EA7              //
1329+ 2EA7              // (prefix)
1330+ 2EA7                              Colon_Def CPREFIX,  "(PREFIX)", is_normal
1330+ 2EA7             >                New_Def  CPREFIX, "(PREFIX)", Enter_Ptr, is_normal ; ok
1330+ 2EA7             >
1330+ 2EA7             >Dict_Ptr        defl    $
1330+ 2EA7             >
1330+ 2EA7             >//              ______________________________________________________________________
1330+ 2EA7             >//              Heap part
1330+ 2EA7             >
1330+ 2EA7             >
1330+ 2EA7             >                org     (Heap_Ptr & $1FFF) + $E000
1330+ E86F             >
1330+ E86F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1330+ E86F             >Latest_Definition defl  Heap_Ptr
1330+ E86F             >
1330+ E86F             >                // dummy db directives used to calculate length of namec
1330+ E86F 28 50 52 45 >                db      "(PREFIX)"
1330+ E873 46 49 58 29 >
1330+ E877             >len_NFA         defl    $ - temp_NFA
1330+ E877             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1330+ E86F             >
1330+ E86F 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1330+ E870 28 50 52 45 >                db      "(PREFIX)"               // name string in 7-bit ascii, but
1330+ E874 46 49 58 29 >
1330+ E878             >                org     $-1                 // alter last byte of Name just above to set
1330+ E877 A9          >                db      {b $} | END_BIT     // msb as name end
1330+ E878             >
1330+ E878 62 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1330+ E87A             >Prev_Ptr        defl    Heap_Ptr
1330+ E87A             >
1330+ E87A             >mirror_Ptr      defl    $
1330+ E87A             >
1330+ E87A A9 2E       >                dw      Dict_Ptr + 2        // xt
1330+ E87C             >Heap_Ptr        defl    $ - $E000           // save current HP
1330+ E87C             >
1330+ E87C             >Current_HP      defl  $ - $E000             // used to set HP once!
1330+ E87C             >
1330+ E87C             >//              ______________________________________________________________________
1330+ E87C             >//              Dictionary part
1330+ E87C             >
1330+ E87C             >                org     Dict_Ptr
1330+ 2EA7             >
1330+ 2EA7 7A 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1330+ 2EA9             >
1330+ 2EA9             >CPREFIX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1330+ 2EA9 CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1330+ 2EAC             >
1330+ 2EAC             >
1330+ 2EAC             >                endif           ; ok        // for other definitions it "points" the correct handler
1330+ 2EAC             >                // Use of "; ok" to suppress "warning[fwdref]"
1330+ 2EAC             >
1330+ 2EAC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1331+ 2EAC C7 25 5C 25                  dw      DUP, ONE_PLUS, CFETCH   // dup 1+ c@
1331+ 2EB0 46 26
1332+ 2EB2 C7 25 FB 24                  dw      DUP, TO_R               // dup >r
1333+ 2EB6 3D 20 24 00                  dw      LIT, "$", EQUALS        // [char] $ =
1333+ 2EBA 97 28
1334+ 2EBC                                                              // if
1335+ 2EBC 8F 20                        dw      ZBRANCH
1336+ 2EBE 06 00                        dw      CPrefix_Endif_0 - $
1337+ 2EC0 5C 25                        dw          ONE_PLUS            //      1+
1338+ 2EC2 48 2B                        dw          HEX
1339+ 2EC4              CPrefix_Endif_0:                                // endif
1340+ 2EC4 11 25                        dw      R_OP                    // r@
1341+ 2EC6 3D 20 25 00                  dw      LIT, "%", EQUALS        // [char] $ =
1341+ 2ECA 97 28
1342+ 2ECC                                                              // if
1343+ 2ECC 8F 20                        dw      ZBRANCH
1344+ 2ECE 0A 00                        dw      CPrefix_Endif_1 - $
1345+ 2ED0 5C 25                        dw          ONE_PLUS            //      1+
1346+ 2ED2 35 27                        dw          TWO
1347+ 2ED4 F8 27 3B 26                  dw          BASE, STORE         //      2 base !
1348+ 2ED8              CPrefix_Endif_1:                                // endif
1349+ 2ED8 06 25                        dw      R_TO                    // r>
1350+ 2EDA 3D 20 23 00                  dw      LIT, "#", EQUALS        // [char] $ =
1350+ 2EDE 97 28
1351+ 2EE0                                                              // if
1352+ 2EE0 8F 20                        dw      ZBRANCH
1353+ 2EE2 06 00                        dw      CPrefix_Endif_2 - $
1354+ 2EE4 5C 25                        dw          ONE_PLUS            //      1+
1355+ 2EE6 57 2B                        dw          DECIMAL
1356+ 2EE8              CPrefix_Endif_2:                                // endif
1357+ 2EE8 F1 24                        dw      EXIT
1358+ 2EEA
1359+ 2EEA              //  ______________________________________________________________________
1360+ 2EEA
1361+ 2EEA              PDOM_PTR:
1362+ 2EEA              //              New_Def PDOM,   "PDOM", Create_Ptr, is_normal
1363+ 2EEA 2C 2F 2D 3A                  db ',/-:'
1364+ 2EEE              PCDM_PTR:
1365+ 2EEE              //              New_Def PCDM,   "PCDM", Create_Ptr, is_normal
1366+ 2EEE 2E 2E 2E 2E                  db '....'
1367+ 2EF2
1368+ 2EF2              //  ______________________________________________________________________
1369+ 2EF2              //
1370+ 2EF2              // number       a -- d
1371+ 2EF2                              Colon_Def NUMBER,  "NUMBER", is_normal
1371+ 2EF2             >                New_Def  NUMBER, "NUMBER", Enter_Ptr, is_normal ; ok
1371+ 2EF2             >
1371+ 2EF2             >Dict_Ptr        defl    $
1371+ 2EF2             >
1371+ 2EF2             >//              ______________________________________________________________________
1371+ 2EF2             >//              Heap part
1371+ 2EF2             >
1371+ 2EF2             >
1371+ 2EF2             >                org     (Heap_Ptr & $1FFF) + $E000
1371+ E87C             >
1371+ E87C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1371+ E87C             >Latest_Definition defl  Heap_Ptr
1371+ E87C             >
1371+ E87C             >                // dummy db directives used to calculate length of namec
1371+ E87C 4E 55 4D 42 >                db      "NUMBER"
1371+ E880 45 52       >
1371+ E882             >len_NFA         defl    $ - temp_NFA
1371+ E882             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1371+ E87C             >
1371+ E87C 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1371+ E87D 4E 55 4D 42 >                db      "NUMBER"               // name string in 7-bit ascii, but
1371+ E881 45 52       >
1371+ E883             >                org     $-1                 // alter last byte of Name just above to set
1371+ E882 D2          >                db      {b $} | END_BIT     // msb as name end
1371+ E883             >
1371+ E883 6F 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1371+ E885             >Prev_Ptr        defl    Heap_Ptr
1371+ E885             >
1371+ E885             >mirror_Ptr      defl    $
1371+ E885             >
1371+ E885 F4 2E       >                dw      Dict_Ptr + 2        // xt
1371+ E887             >Heap_Ptr        defl    $ - $E000           // save current HP
1371+ E887             >
1371+ E887             >Current_HP      defl  $ - $E000             // used to set HP once!
1371+ E887             >
1371+ E887             >//              ______________________________________________________________________
1371+ E887             >//              Dictionary part
1371+ E887             >
1371+ E887             >                org     Dict_Ptr
1371+ 2EF2             >
1371+ 2EF2 85 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1371+ 2EF4             >
1371+ 2EF4             >NUMBER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1371+ 2EF4 CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1371+ 2EF7             >
1371+ 2EF7             >
1371+ 2EF7             >                endif           ; ok        // for other definitions it "points" the correct handler
1371+ 2EF7             >                // Use of "; ok" to suppress "warning[fwdref]"
1371+ 2EF7             >
1371+ 2EF7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1372+ 2EF7 27 27 27 27                  dw      ZERO, ZERO              // 0 0
1373+ 2EFB CE 25                        dw      ROT                     // rot
1374+ 2EFD
1375+ 2EFD F8 27 31 26                  dw      BASE, FETCH, TO_R       // base @ >r  // ***
1375+ 2F01 FB 24
1376+ 2F03 A9 2E                        dw      CPREFIX                 // (prefix)   // ***
1377+ 2F05
1378+ 2F05 27 2E FB 24                  dw      CSGN, TO_R              // (sgn) >r
1379+ 2F09
1380+ 2F09 43 27 FE 27                  dw      NEG_ONE, DPL, STORE     // -1 dpl !
1380+ 2F0D 3B 26
1381+ 2F0F 64 2E                        dw      CNUMBER                 // (number)
1382+ 2F11              Number_Begin:                                   // begin
1383+ 2F11 C7 25 46 26                  dw        DUP, CFETCH             // dup c@
1384+ 2F15 FB 24                        dw        TO_R                    // >r
1385+ 2F17                          //  dw        PCDM, PDOM              //  pcdm pdom
1386+ 2F17 3D 20 EE 2E                  dw        LIT, PCDM_PTR           //
1387+ 2F1B 3D 20 EA 2E                  dw        LIT, PDOM_PTR           //
1388+ 2F1F 3D 20 04 00                  dw        LIT, 4                  //  4
1389+ 2F23 06 25                        dw        R_TO                    // r>
1390+ 2F25 F2 21                        dw        C_MAP                   // (map)
1391+ 2F27 27 27 C0 25                  dw        ZERO, SWAP              // 0 swap
1392+ 2F2B 3D 20 2E 00                  dw        LIT, ".", EQUALS        // [char] . =  ( decimal point )
1392+ 2F2F 97 28
1393+ 2F31
1394+ 2F31 8F 20                        dw        ZBRANCH                 // if
1395+ 2F33 0A 00                        dw        Number_Endif_1 - $
1396+ 2F35 27 27 FE 27                  dw          ZERO, DPL, STORE        //      0 dpl !
1396+ 2F39 3B 26
1397+ 2F3B 5C 25                        dw          ONE_PLUS                //      1+
1398+ 2F3D              Number_Endif_1:                                   // endif
1399+ 2F3D
1400+ 2F3D 8F 20                        dw      ZBRANCH                // while
1401+ 2F3F 08 00                        dw      Number_While_end - $
1402+ 2F41 64 2E                        dw        CNUMBER                 // (number)
1403+ 2F43 82 20                        dw      BRANCH
1404+ 2F45 CC FF                        dw      Number_Begin - $
1405+ 2F47              Number_While_end:                               // repeat
1406+ 2F47
1407+ 2F47 46 26 4A 27                  dw      CFETCH, BL              // c@ bl
1408+ 2F4B 8B 28 27 27                  dw      SUBTRACT, ZERO, QERROR  // - 0 ?error
1408+ 2F4F 80 2A
1409+ 2F51 06 25                        dw      R_TO                    // r>
1410+ 2F53                                                              // if
1411+ 2F53 8F 20                        dw      ZBRANCH
1412+ 2F55 04 00                        dw      Number_Endif_2 - $
1413+ 2F57 90 25                        dw          DMINUS              //      dminus
1414+ 2F59              Number_Endif_2:                                 // endif
1415+ 2F59 06 25 F8 27                  dw      R_TO, BASE, STORE       // r> base !  // ***
1415+ 2F5D 3B 26
1416+ 2F5F F1 24                        dw      EXIT                    // ;
1417+ 2F61
1418+ 2F61              //  ______________________________________________________________________
1419+ 2F61              //
1420+ 2F61              // twofind      a -- d
1421+ 2F61                              Colon_Def TWOFIND,  "2FIND", is_normal
1421+ 2F61             >                New_Def  TWOFIND, "2FIND", Enter_Ptr, is_normal ; ok
1421+ 2F61             >
1421+ 2F61             >Dict_Ptr        defl    $
1421+ 2F61             >
1421+ 2F61             >//              ______________________________________________________________________
1421+ 2F61             >//              Heap part
1421+ 2F61             >
1421+ 2F61             >
1421+ 2F61             >                org     (Heap_Ptr & $1FFF) + $E000
1421+ E887             >
1421+ E887             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1421+ E887             >Latest_Definition defl  Heap_Ptr
1421+ E887             >
1421+ E887             >                // dummy db directives used to calculate length of namec
1421+ E887 32 46 49 4E >                db      "2FIND"
1421+ E88B 44          >
1421+ E88C             >len_NFA         defl    $ - temp_NFA
1421+ E88C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1421+ E887             >
1421+ E887 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1421+ E888 32 46 49 4E >                db      "2FIND"               // name string in 7-bit ascii, but
1421+ E88C 44          >
1421+ E88D             >                org     $-1                 // alter last byte of Name just above to set
1421+ E88C C4          >                db      {b $} | END_BIT     // msb as name end
1421+ E88D             >
1421+ E88D 7C 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1421+ E88F             >Prev_Ptr        defl    Heap_Ptr
1421+ E88F             >
1421+ E88F             >mirror_Ptr      defl    $
1421+ E88F             >
1421+ E88F 63 2F       >                dw      Dict_Ptr + 2        // xt
1421+ E891             >Heap_Ptr        defl    $ - $E000           // save current HP
1421+ E891             >
1421+ E891             >Current_HP      defl  $ - $E000             // used to set HP once!
1421+ E891             >
1421+ E891             >//              ______________________________________________________________________
1421+ E891             >//              Dictionary part
1421+ E891             >
1421+ E891             >                org     Dict_Ptr
1421+ 2F61             >
1421+ 2F61 8F 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1421+ 2F63             >
1421+ 2F63             >TWOFIND:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1421+ 2F63 CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1421+ 2F66             >
1421+ 2F66             >
1421+ 2F66             >                endif           ; ok        // for other definitions it "points" the correct handler
1421+ 2F66             >                // Use of "; ok" to suppress "warning[fwdref]"
1421+ 2F66             >
1421+ 2F66             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1422+ 2F66 FB 24 11 25                  dw      TO_R, R_OP              // >r r@
1423+ 2F6A E6 27 31 26                  dw      CONTEXT, FETCH, FETCH   // context @ @
1423+ 2F6E 31 26
1424+ 2F70 52 21                        dw      C_FIND                  // (find)
1425+ 2F72 EE 28                        dw      QDUP                    // ?dup
1426+ 2F74 16 25                        dw      ZEQUAL                  // 0=
1427+ 2F76                                                              // if
1428+ 2F76 8F 20                        dw      ZBRANCH
1429+ 2F78 24 00                        dw      LFind_Endif - $
1430+ 2F7A 11 25                        dw          R_OP                //      r@
1431+ 2F7C                              // dw          LATEST               //      latest
1432+ 2F7C EC 27 31 26                  dw          CURRENT, FETCH, FETCH   // context @ @
1432+ 2F80 31 26
1433+ 2F82 52 21                        dw          C_FIND              //      (find)
1434+ 2F84
1435+ 2F84 EE 28                            dw      QDUP                    // ?dup
1436+ 2F86 16 25                            dw      ZEQUAL                  // 0=
1437+ 2F88                                                                  // if
1438+ 2F88 8F 20                            dw      ZBRANCH
1439+ 2F8A 12 00                            dw      LFind_Endif2 - $
1440+ 2F8C 11 25                            dw          R_OP                //      r@
1441+ 2F8E 3D 20 DD 31                      dw          LIT, FORTH, TO_BODY
1441+ 2F92 FF 29
1442+ 2F94 72 25 72 25                      dw          CELL_PLUS, CELL_PLUS
1443+ 2F98 31 26                            dw          FETCH
1444+ 2F9A 52 21                            dw          C_FIND              //      (find)
1445+ 2F9C              LFind_Endif2:                                    // endif
1446+ 2F9C
1447+ 2F9C
1448+ 2F9C              LFind_Endif:                                    // endif
1449+ 2F9C 06 25 AC 25                  dw      R_TO, DROP              // r> drop
1450+ 2FA0 F1 24                        dw      EXIT                    // ;
1451+ 2FA2
1452+ 2FA2              //  ______________________________________________________________________
1453+ 2FA2              //
1454+ 2FA2              // -find        a -- d
1455+ 2FA2                              Colon_Def LFIND,  "-FIND", is_normal
1455+ 2FA2             >                New_Def  LFIND, "-FIND", Enter_Ptr, is_normal ; ok
1455+ 2FA2             >
1455+ 2FA2             >Dict_Ptr        defl    $
1455+ 2FA2             >
1455+ 2FA2             >//              ______________________________________________________________________
1455+ 2FA2             >//              Heap part
1455+ 2FA2             >
1455+ 2FA2             >
1455+ 2FA2             >                org     (Heap_Ptr & $1FFF) + $E000
1455+ E891             >
1455+ E891             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1455+ E891             >Latest_Definition defl  Heap_Ptr
1455+ E891             >
1455+ E891             >                // dummy db directives used to calculate length of namec
1455+ E891 2D 46 49 4E >                db      "-FIND"
1455+ E895 44          >
1455+ E896             >len_NFA         defl    $ - temp_NFA
1455+ E896             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1455+ E891             >
1455+ E891 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1455+ E892 2D 46 49 4E >                db      "-FIND"               // name string in 7-bit ascii, but
1455+ E896 44          >
1455+ E897             >                org     $-1                 // alter last byte of Name just above to set
1455+ E896 C4          >                db      {b $} | END_BIT     // msb as name end
1455+ E897             >
1455+ E897 87 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1455+ E899             >Prev_Ptr        defl    Heap_Ptr
1455+ E899             >
1455+ E899             >mirror_Ptr      defl    $
1455+ E899             >
1455+ E899 A4 2F       >                dw      Dict_Ptr + 2        // xt
1455+ E89B             >Heap_Ptr        defl    $ - $E000           // save current HP
1455+ E89B             >
1455+ E89B             >Current_HP      defl  $ - $E000             // used to set HP once!
1455+ E89B             >
1455+ E89B             >//              ______________________________________________________________________
1455+ E89B             >//              Dictionary part
1455+ E89B             >
1455+ E89B             >                org     Dict_Ptr
1455+ 2FA2             >
1455+ 2FA2 99 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1455+ 2FA4             >
1455+ 2FA4             >LFIND:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1455+ 2FA4 CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1455+ 2FA7             >
1455+ 2FA7             >
1455+ 2FA7             >                endif           ; ok        // for other definitions it "points" the correct handler
1455+ 2FA7             >                // Use of "; ok" to suppress "warning[fwdref]"
1455+ 2FA7             >
1455+ 2FA7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1456+ 2FA7 4A 27 60 2D                  dw      BL, WORD                // bl word
1457+ 2FAB 63 2F                        dw      TWOFIND                 // 2find
1458+ 2FAD F1 24                        dw      EXIT                    // ;
1459+ 2FAF
1460+ 2FAF              //  ______________________________________________________________________
1461+ 2FAF              //
1462+ 2FAF              // (abort)      --
1463+ 2FAF                              Colon_Def CABORT,  "(ABORT)", is_normal
1463+ 2FAF             >                New_Def  CABORT, "(ABORT)", Enter_Ptr, is_normal ; ok
1463+ 2FAF             >
1463+ 2FAF             >Dict_Ptr        defl    $
1463+ 2FAF             >
1463+ 2FAF             >//              ______________________________________________________________________
1463+ 2FAF             >//              Heap part
1463+ 2FAF             >
1463+ 2FAF             >
1463+ 2FAF             >                org     (Heap_Ptr & $1FFF) + $E000
1463+ E89B             >
1463+ E89B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1463+ E89B             >Latest_Definition defl  Heap_Ptr
1463+ E89B             >
1463+ E89B             >                // dummy db directives used to calculate length of namec
1463+ E89B 28 41 42 4F >                db      "(ABORT)"
1463+ E89F 52 54 29    >
1463+ E8A2             >len_NFA         defl    $ - temp_NFA
1463+ E8A2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1463+ E89B             >
1463+ E89B 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1463+ E89C 28 41 42 4F >                db      "(ABORT)"               // name string in 7-bit ascii, but
1463+ E8A0 52 54 29    >
1463+ E8A3             >                org     $-1                 // alter last byte of Name just above to set
1463+ E8A2 A9          >                db      {b $} | END_BIT     // msb as name end
1463+ E8A3             >
1463+ E8A3 91 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1463+ E8A5             >Prev_Ptr        defl    Heap_Ptr
1463+ E8A5             >
1463+ E8A5             >mirror_Ptr      defl    $
1463+ E8A5             >
1463+ E8A5 B1 2F       >                dw      Dict_Ptr + 2        // xt
1463+ E8A7             >Heap_Ptr        defl    $ - $E000           // save current HP
1463+ E8A7             >
1463+ E8A7             >Current_HP      defl  $ - $E000             // used to set HP once!
1463+ E8A7             >
1463+ E8A7             >//              ______________________________________________________________________
1463+ E8A7             >//              Dictionary part
1463+ E8A7             >
1463+ E8A7             >                org     Dict_Ptr
1463+ 2FAF             >
1463+ 2FAF A5 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1463+ 2FB1             >
1463+ 2FB1             >CABORT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1463+ 2FB1 CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1463+ 2FB4             >
1463+ 2FB4             >
1463+ 2FB4             >                endif           ; ok        // for other definitions it "points" the correct handler
1463+ 2FB4             >                // Use of "; ok" to suppress "warning[fwdref]"
1463+ 2FB4             >
1463+ 2FB4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1464+ 2FB4 44 32                        dw      ABORT                   // abort
1465+ 2FB6 F1 24                        dw      EXIT                    // ;
1466+ 2FB8
1467+ 2FB8              //  ______________________________________________________________________
1468+ 2FB8              //
1469+ 2FB8              // error        n --
1470+ 2FB8              // raise an error
1471+ 2FB8              // if WARNING is 0, prints "MSG#n".
1472+ 2FB8              // if WARNING is 1, prints line n of screen 4.
1473+ 2FB8              // if WARNING is -1 does (ABORT) that normally does ABORT
1474+ 2FB8              // value can be negative or beyond block 4.
1475+ 2FB8                              Colon_Def ERROR,  "ERROR", is_normal
1475+ 2FB8             >                New_Def  ERROR, "ERROR", Enter_Ptr, is_normal ; ok
1475+ 2FB8             >
1475+ 2FB8             >Dict_Ptr        defl    $
1475+ 2FB8             >
1475+ 2FB8             >//              ______________________________________________________________________
1475+ 2FB8             >//              Heap part
1475+ 2FB8             >
1475+ 2FB8             >
1475+ 2FB8             >                org     (Heap_Ptr & $1FFF) + $E000
1475+ E8A7             >
1475+ E8A7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1475+ E8A7             >Latest_Definition defl  Heap_Ptr
1475+ E8A7             >
1475+ E8A7             >                // dummy db directives used to calculate length of namec
1475+ E8A7 45 52 52 4F >                db      "ERROR"
1475+ E8AB 52          >
1475+ E8AC             >len_NFA         defl    $ - temp_NFA
1475+ E8AC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1475+ E8A7             >
1475+ E8A7 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1475+ E8A8 45 52 52 4F >                db      "ERROR"               // name string in 7-bit ascii, but
1475+ E8AC 52          >
1475+ E8AD             >                org     $-1                 // alter last byte of Name just above to set
1475+ E8AC D2          >                db      {b $} | END_BIT     // msb as name end
1475+ E8AD             >
1475+ E8AD 9B 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1475+ E8AF             >Prev_Ptr        defl    Heap_Ptr
1475+ E8AF             >
1475+ E8AF             >mirror_Ptr      defl    $
1475+ E8AF             >
1475+ E8AF BA 2F       >                dw      Dict_Ptr + 2        // xt
1475+ E8B1             >Heap_Ptr        defl    $ - $E000           // save current HP
1475+ E8B1             >
1475+ E8B1             >Current_HP      defl  $ - $E000             // used to set HP once!
1475+ E8B1             >
1475+ E8B1             >//              ______________________________________________________________________
1475+ E8B1             >//              Dictionary part
1475+ E8B1             >
1475+ E8B1             >                org     Dict_Ptr
1475+ 2FB8             >
1475+ 2FB8 AF 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1475+ 2FBA             >
1475+ 2FBA             >ERROR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1475+ 2FBA CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1475+ 2FBD             >
1475+ 2FBD             >
1475+ 2FBD             >                endif           ; ok        // for other definitions it "points" the correct handler
1475+ 2FBD             >                // Use of "; ok" to suppress "warning[fwdref]"
1475+ 2FBD             >
1475+ 2FBD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1476+ 2FBD 98 27 31 26                  dw      WARNING, FETCH, ZLESS   // warning @ 0<
1476+ 2FC1 28 25
1477+ 2FC3                                                              // if
1478+ 2FC3 8F 20                        dw      ZBRANCH
1479+ 2FC5 04 00                        dw      Error_Endif_1 - $
1480+ 2FC7 B1 2F                        dw          CABORT              //      (abort)
1481+ 2FC9              Error_Endif_1:                                  // endif
1482+ 2FC9 4C 28 BA 2B                  dw      HERE, COUNT, TYPE       // here count type
1482+ 2FCD 0E 2C
1483+ 2FCF AB 2D                        dw      C_DOT_QUOTE             // .( ? )
1484+ 2FD1 02 3F 20                     db      2, "? "
1485+ 2FD4 6C 35                        dw      MESSAGE                 // message  ( forward )
1486+ 2FD6 80 27 31 26                  dw      S0, FETCH, SPSTORE      // s0 @ sp!
1486+ 2FDA E1 24
1487+ 2FDC C8 27 31 26                  dw      BLK, FETCH, QDUP        // blk @ ?dup
1487+ 2FE0 EE 28
1488+ 2FE2                                                              // if
1489+ 2FE2 8F 20                        dw      ZBRANCH
1490+ 2FE4 08 00                        dw      Error_Endif_2 - $
1491+ 2FE6 CE 27 31 26                  dw          TO_IN, FETCH, SWAP  //      >in @ swap
1491+ 2FEA C0 25
1492+ 2FEC              Error_Endif_2:                                  // endif
1493+ 2FEC 08 32                        dw      QUIT                    // quit ( forward )
1494+ 2FEE F1 24                        dw      EXIT                    // ;
1495+ 2FF0              //  ______________________________________________________________________
1496+ 2FF0              //
1497+ 2FF0              // id.          nfa --
1498+ 2FF0                              Colon_Def ID_DOT,  "ID.", is_normal
1498+ 2FF0             >                New_Def  ID_DOT, "ID.", Enter_Ptr, is_normal ; ok
1498+ 2FF0             >
1498+ 2FF0             >Dict_Ptr        defl    $
1498+ 2FF0             >
1498+ 2FF0             >//              ______________________________________________________________________
1498+ 2FF0             >//              Heap part
1498+ 2FF0             >
1498+ 2FF0             >
1498+ 2FF0             >                org     (Heap_Ptr & $1FFF) + $E000
1498+ E8B1             >
1498+ E8B1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1498+ E8B1             >Latest_Definition defl  Heap_Ptr
1498+ E8B1             >
1498+ E8B1             >                // dummy db directives used to calculate length of namec
1498+ E8B1 49 44 2E    >                db      "ID."
1498+ E8B4             >len_NFA         defl    $ - temp_NFA
1498+ E8B4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1498+ E8B1             >
1498+ E8B1 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1498+ E8B2 49 44 2E    >                db      "ID."               // name string in 7-bit ascii, but
1498+ E8B5             >                org     $-1                 // alter last byte of Name just above to set
1498+ E8B4 AE          >                db      {b $} | END_BIT     // msb as name end
1498+ E8B5             >
1498+ E8B5 A7 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1498+ E8B7             >Prev_Ptr        defl    Heap_Ptr
1498+ E8B7             >
1498+ E8B7             >mirror_Ptr      defl    $
1498+ E8B7             >
1498+ E8B7 F2 2F       >                dw      Dict_Ptr + 2        // xt
1498+ E8B9             >Heap_Ptr        defl    $ - $E000           // save current HP
1498+ E8B9             >
1498+ E8B9             >Current_HP      defl  $ - $E000             // used to set HP once!
1498+ E8B9             >
1498+ E8B9             >//              ______________________________________________________________________
1498+ E8B9             >//              Dictionary part
1498+ E8B9             >
1498+ E8B9             >                org     Dict_Ptr
1498+ 2FF0             >
1498+ 2FF0 B7 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1498+ 2FF2             >
1498+ 2FF2             >ID_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1498+ 2FF2 CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1498+ 2FF5             >
1498+ 2FF5             >
1498+ 2FF5             >                endif           ; ok        // for other definitions it "points" the correct handler
1498+ 2FF5             >                // Use of "; ok" to suppress "warning[fwdref]"
1498+ 2FF5             >
1498+ 2FF5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1499+ 2FF5 A4 29                        dw      QTOHEAP
1500+ 2FF7 C7 25 2E 27                  dw      DUP, ONE, TRAVERSE      // dup 1 traverse
1500+ 2FFB 20 29
1501+ 2FFD 5C 25                        dw      ONE_PLUS                // 1+
1502+ 2FFF A3 25 8B 28                  dw      OVER, SUBTRACT          // over -
1503+ 3003 C7 25 FB 24                  dw      DUP, TO_R               // >r
1504+ 3007 51 2D C0 25                  dw      PAD, SWAP               // pad swap
1505+ 300B 32 24                        dw      CMOVE                   // cmove
1506+ 300D 51 2D 5C 25                  dw      PAD, ONE_PLUS           // pad 1+
1507+ 3011 06 25 63 25                  dw      R_TO, ONE_SUBTRACT      // R> 1-
1508+ 3015 0E 2C 15 29                  dw      TYPE, SPACE             // type
1509+ 3019 F1 24                        dw      EXIT                    // ;
1510+ 301B
1511+ 301B              //  ______________________________________________________________________
1512+ 301B              //
1513+ 301B              // code         -- cccc
1514+ 301B                              Colon_Def CODE,  "CODE", is_normal
1514+ 301B             >                New_Def  CODE, "CODE", Enter_Ptr, is_normal ; ok
1514+ 301B             >
1514+ 301B             >Dict_Ptr        defl    $
1514+ 301B             >
1514+ 301B             >//              ______________________________________________________________________
1514+ 301B             >//              Heap part
1514+ 301B             >
1514+ 301B             >
1514+ 301B             >                org     (Heap_Ptr & $1FFF) + $E000
1514+ E8B9             >
1514+ E8B9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1514+ E8B9             >Latest_Definition defl  Heap_Ptr
1514+ E8B9             >
1514+ E8B9             >                // dummy db directives used to calculate length of namec
1514+ E8B9 43 4F 44 45 >                db      "CODE"
1514+ E8BD             >len_NFA         defl    $ - temp_NFA
1514+ E8BD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1514+ E8B9             >
1514+ E8B9 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1514+ E8BA 43 4F 44 45 >                db      "CODE"               // name string in 7-bit ascii, but
1514+ E8BE             >                org     $-1                 // alter last byte of Name just above to set
1514+ E8BD C5          >                db      {b $} | END_BIT     // msb as name end
1514+ E8BE             >
1514+ E8BE B1 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1514+ E8C0             >Prev_Ptr        defl    Heap_Ptr
1514+ E8C0             >
1514+ E8C0             >mirror_Ptr      defl    $
1514+ E8C0             >
1514+ E8C0 1D 30       >                dw      Dict_Ptr + 2        // xt
1514+ E8C2             >Heap_Ptr        defl    $ - $E000           // save current HP
1514+ E8C2             >
1514+ E8C2             >Current_HP      defl  $ - $E000             // used to set HP once!
1514+ E8C2             >
1514+ E8C2             >//              ______________________________________________________________________
1514+ E8C2             >//              Dictionary part
1514+ E8C2             >
1514+ E8C2             >                org     Dict_Ptr
1514+ 301B             >
1514+ 301B C0 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1514+ 301D             >
1514+ 301D             >CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1514+ 301D CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1514+ 3020             >
1514+ 3020             >
1514+ 3020             >                endif           ; ok        // for other definitions it "points" the correct handler
1514+ 3020             >                // Use of "; ok" to suppress "warning[fwdref]"
1514+ 3020             >
1514+ 3020             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1515+ 3020 A4 2F                        dw      LFIND                   // -find
1516+ 3022                                                              // if
1517+ 3022 8F 20                        dw      ZBRANCH
1518+ 3024 10 00                        dw      Code_Endif - $
1519+ 3026 AC 25                        dw          DROP                //      drop
1520+ 3028 0A 2A F2 2F                  dw          TO_NAME, ID_DOT     //      >name id.
1521+ 302C 3D 20 04 00                  dw          LIT, 4, MESSAGE     //      4 message
1521+ 3030 6C 35
1522+ 3032 15 29                        dw          SPACE               //      space
1523+ 3034              Code_Endif:                                     // endif
1524+ 3034 4C 28                        dw      HERE                    // here
1525+ 3036                                                              // ( ---- here begins NFA ---- )
1526+ 3036 C7 25 46 26                  dw      DUP, CFETCH             // dup c@
1527+ 303A 92 27 31 26                  dw      WIDTH, FETCH, MIN       // width @ min  ( max 31 character length )
1527+ 303E C8 28
1528+ 3040 5C 25                        dw      ONE_PLUS                // 1+
1529+ 3042 C7 25 57 28                  dw      DUP, ALLOT              // dup allot
1530+ 3046 72 25 72 25                  dw      CELL_PLUS, CELL_PLUS    // cell+ cell+
1531+ 304A FB 24                        dw      TO_R                    // >r
1532+ 304C C7 25                        dw      DUP                     // dup
1533+ 304E 3D 20                        dw      LIT
1534+ 3050 A0 00                        dw      SMUDGE_BIT | END_BIT    // 160
1535+ 3052 28 26                        dw      TOGGLE                  // toggle
1536+ 3054 4C 28 63 25                  dw      HERE, ONE_SUBTRACT      // here 1- ( last character )
1537+ 3058 3D 20 80 00                  dw      LIT, END_BIT, TOGGLE    // 128 toggle
1537+ 305C 28 26
1538+ 305E                                                              // ( ---- here is LFA ---- )
1539+ 305E EC 27 31 26                  dw      CURRENT, FETCH, FETCH   // current @ @ , \ latest ,
1539+ 3062 31 26
1540+ 3064 62 28                        dw      COMMA
1541+ 3066 C7 25 72 25                  dw      DUP, CELL_PLUS, COMMA   // dup cell+ ,
1541+ 306A 62 28
1542+ 306C B5 29                        dw      HP_FETCH                // hp@
1543+ 306E EC 27 31 26                  dw      CURRENT, FETCH, STORE   // current @ ! ( save this word as the latest )
1543+ 3072 3B 26
1544+ 3074 B5 29 86 29                  dw      HP_FETCH, FAR           // hp@ far R@ cmove
1545+ 3078 11 25 32 24                  dw      R_OP, CMOVE
1546+ 307C 11 25 83 25                  dw      R_OP, MINUS, ALLOT      // r@ negate allot
1546+ 3080 57 28
1547+ 3082 06 25 BC 27                  dw      R_TO, HP, PLUSSTORE     // r> hp +!
1547+ 3086 19 26
1548+ 3088 B5 29 76 25                  dw      HP_FETCH, CELL_MINUS    // hp@ cell- ,
1549+ 308C 62 28                        dw      COMMA
1550+ 308E 27 27 C7 29                  dw      ZERO, SKIP_HP_PAGE
1551+ 3092                                                              // ( ---- here is LFA ---- )
1552+ 3092 F1 24                        dw      EXIT                    // ;
1553+ 3094
1554+ 3094              //  ______________________________________________________________________
1555+ 3094              //
1556+ 3094              // create       -- cccc     ( compile time )
1557+ 3094              //              -- a        ( run time )
1558+ 3094                              Colon_Def CREATE,  "CREATE", is_normal
1558+ 3094             >                New_Def  CREATE, "CREATE", Enter_Ptr, is_normal ; ok
1558+ 3094             >
1558+ 3094             >Dict_Ptr        defl    $
1558+ 3094             >
1558+ 3094             >//              ______________________________________________________________________
1558+ 3094             >//              Heap part
1558+ 3094             >
1558+ 3094             >
1558+ 3094             >                org     (Heap_Ptr & $1FFF) + $E000
1558+ E8C2             >
1558+ E8C2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1558+ E8C2             >Latest_Definition defl  Heap_Ptr
1558+ E8C2             >
1558+ E8C2             >                // dummy db directives used to calculate length of namec
1558+ E8C2 43 52 45 41 >                db      "CREATE"
1558+ E8C6 54 45       >
1558+ E8C8             >len_NFA         defl    $ - temp_NFA
1558+ E8C8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1558+ E8C2             >
1558+ E8C2 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1558+ E8C3 43 52 45 41 >                db      "CREATE"               // name string in 7-bit ascii, but
1558+ E8C7 54 45       >
1558+ E8C9             >                org     $-1                 // alter last byte of Name just above to set
1558+ E8C8 C5          >                db      {b $} | END_BIT     // msb as name end
1558+ E8C9             >
1558+ E8C9 B9 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1558+ E8CB             >Prev_Ptr        defl    Heap_Ptr
1558+ E8CB             >
1558+ E8CB             >mirror_Ptr      defl    $
1558+ E8CB             >
1558+ E8CB 96 30       >                dw      Dict_Ptr + 2        // xt
1558+ E8CD             >Heap_Ptr        defl    $ - $E000           // save current HP
1558+ E8CD             >
1558+ E8CD             >Current_HP      defl  $ - $E000             // used to set HP once!
1558+ E8CD             >
1558+ E8CD             >//              ______________________________________________________________________
1558+ E8CD             >//              Dictionary part
1558+ E8CD             >
1558+ E8CD             >                org     Dict_Ptr
1558+ 3094             >
1558+ 3094 CB 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1558+ 3096             >
1558+ 3096             >CREATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1558+ 3096 CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1558+ 3099             >
1558+ 3099             >
1558+ 3099             >                endif           ; ok        // for other definitions it "points" the correct handler
1558+ 3099             >                // Use of "; ok" to suppress "warning[fwdref]"
1558+ 3099             >
1558+ 3099             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1559+ 3099 1D 30 2A 2B                  dw      CODE, SMUDGE            // code smudge
1560+ 309D 3D 20 CD 00                  dw      LIT, $CD, CCOMMA        // 00CD c,
1560+ 30A1 71 28
1561+ 30A3 3D 20 0E 27                  dw      LIT, Variable_Ptr, COMMA// Variable_Ptr ,
1561+ 30A7 62 28
1562+ 30A9 66 2B                        dw      C_SEMICOLON_CODE
1563+ 30AB                              // this routine is called from the call coded in CFA
1564+ 30AB              Create_Ptr:
1565+ 30AB
1566+ 30AB
1567+ 30AB
1568+ 30AB                              next
1568+ 30AB DD E9       >                jp      (ix)
1569+ 30AD
1570+ 30AD              //  ______________________________________________________________________
1571+ 30AD              //
1572+ 30AD              // [compile]    -- cccc     ( compile time )
1573+ 30AD                              Colon_Def COMPILE_IMMEDIATE,  "[COMPILE]", is_immediate
1573+ 30AD             >                New_Def  COMPILE_IMMEDIATE, "[COMPILE]", Enter_Ptr, is_immediate ; ok
1573+ 30AD             >
1573+ 30AD             >Dict_Ptr        defl    $
1573+ 30AD             >
1573+ 30AD             >//              ______________________________________________________________________
1573+ 30AD             >//              Heap part
1573+ 30AD             >
1573+ 30AD             >
1573+ 30AD             >                org     (Heap_Ptr & $1FFF) + $E000
1573+ E8CD             >
1573+ E8CD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1573+ E8CD             >Latest_Definition defl  Heap_Ptr
1573+ E8CD             >
1573+ E8CD             >                // dummy db directives used to calculate length of namec
1573+ E8CD 5B 43 4F 4D >                db      "[COMPILE]"
1573+ E8D1 50 49 4C 45 >
1573+ E8D5 5D          >
1573+ E8D6             >len_NFA         defl    $ - temp_NFA
1573+ E8D6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1573+ E8CD             >
1573+ E8CD C9          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1573+ E8CE 5B 43 4F 4D >                db      "[COMPILE]"               // name string in 7-bit ascii, but
1573+ E8D2 50 49 4C 45 >
1573+ E8D6 5D          >
1573+ E8D7             >                org     $-1                 // alter last byte of Name just above to set
1573+ E8D6 DD          >                db      {b $} | END_BIT     // msb as name end
1573+ E8D7             >
1573+ E8D7 C2 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1573+ E8D9             >Prev_Ptr        defl    Heap_Ptr
1573+ E8D9             >
1573+ E8D9             >mirror_Ptr      defl    $
1573+ E8D9             >
1573+ E8D9 AF 30       >                dw      Dict_Ptr + 2        // xt
1573+ E8DB             >Heap_Ptr        defl    $ - $E000           // save current HP
1573+ E8DB             >
1573+ E8DB             >Current_HP      defl  $ - $E000             // used to set HP once!
1573+ E8DB             >
1573+ E8DB             >//              ______________________________________________________________________
1573+ E8DB             >//              Dictionary part
1573+ E8DB             >
1573+ E8DB             >                org     Dict_Ptr
1573+ 30AD             >
1573+ 30AD D9 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1573+ 30AF             >
1573+ 30AF             >COMPILE_IMMEDIATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1573+ 30AF CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1573+ 30B2             >
1573+ 30B2             >
1573+ 30B2             >                endif           ; ok        // for other definitions it "points" the correct handler
1573+ 30B2             >                // Use of "; ok" to suppress "warning[fwdref]"
1573+ 30B2             >
1573+ 30B2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1574+ 30B2 A4 2F                        dw      LFIND                   // -find      (  cfa  b  f  )
1575+ 30B4 16 25                        dw      ZEQUAL                  // 0=         (  cfa  b  )
1576+ 30B6 27 27 80 2A                  dw      ZERO, QERROR            // 0 ?error
1577+ 30BA AC 25                        dw      DROP                    // drop       (  cfa  )
1578+ 30BC 62 28                        dw      COMMA                   // ,
1579+ 30BE F1 24                        dw      EXIT                    // ; immediate
1580+ 30C0
1581+ 30C0              //  ______________________________________________________________________
1582+ 30C0              //
1583+ 30C0              // literal      n --      ( compile time )
1584+ 30C0                              Colon_Def LITERAL,  "LITERAL", is_immediate
1584+ 30C0             >                New_Def  LITERAL, "LITERAL", Enter_Ptr, is_immediate ; ok
1584+ 30C0             >
1584+ 30C0             >Dict_Ptr        defl    $
1584+ 30C0             >
1584+ 30C0             >//              ______________________________________________________________________
1584+ 30C0             >//              Heap part
1584+ 30C0             >
1584+ 30C0             >
1584+ 30C0             >                org     (Heap_Ptr & $1FFF) + $E000
1584+ E8DB             >
1584+ E8DB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1584+ E8DB             >Latest_Definition defl  Heap_Ptr
1584+ E8DB             >
1584+ E8DB             >                // dummy db directives used to calculate length of namec
1584+ E8DB 4C 49 54 45 >                db      "LITERAL"
1584+ E8DF 52 41 4C    >
1584+ E8E2             >len_NFA         defl    $ - temp_NFA
1584+ E8E2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1584+ E8DB             >
1584+ E8DB C7          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1584+ E8DC 4C 49 54 45 >                db      "LITERAL"               // name string in 7-bit ascii, but
1584+ E8E0 52 41 4C    >
1584+ E8E3             >                org     $-1                 // alter last byte of Name just above to set
1584+ E8E2 CC          >                db      {b $} | END_BIT     // msb as name end
1584+ E8E3             >
1584+ E8E3 CD 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1584+ E8E5             >Prev_Ptr        defl    Heap_Ptr
1584+ E8E5             >
1584+ E8E5             >mirror_Ptr      defl    $
1584+ E8E5             >
1584+ E8E5 C2 30       >                dw      Dict_Ptr + 2        // xt
1584+ E8E7             >Heap_Ptr        defl    $ - $E000           // save current HP
1584+ E8E7             >
1584+ E8E7             >Current_HP      defl  $ - $E000             // used to set HP once!
1584+ E8E7             >
1584+ E8E7             >//              ______________________________________________________________________
1584+ E8E7             >//              Dictionary part
1584+ E8E7             >
1584+ E8E7             >                org     Dict_Ptr
1584+ 30C0             >
1584+ 30C0 E5 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1584+ 30C2             >
1584+ 30C2             >LITERAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1584+ 30C2 CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1584+ 30C5             >
1584+ 30C5             >
1584+ 30C5             >                endif           ; ok        // for other definitions it "points" the correct handler
1584+ 30C5             >                // Use of "; ok" to suppress "warning[fwdref]"
1584+ 30C5             >
1584+ 30C5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1585+ 30C5 F2 27 31 26                  dw      STATE, FETCH            // state @
1586+ 30C9                                                              // if
1587+ 30C9 8F 20                        dw      ZBRANCH
1588+ 30CB 08 00                        dw      Literal_Endif - $
1589+ 30CD F0 2A 3D 20                  dw          COMPILE, LIT        //      compile lit
1590+ 30D1 62 28                        dw          COMMA               //      ,
1591+ 30D3              Literal_Endif:                                  // endif
1592+ 30D3 F1 24                        dw      EXIT                    // ; immediate
1593+ 30D5
1594+ 30D5              //  ______________________________________________________________________
1595+ 30D5              //
1596+ 30D5              // dliteral     n --      ( compile time )
1597+ 30D5                              Colon_Def DLITERAL,  "DLITERAL", is_immediate
1597+ 30D5             >                New_Def  DLITERAL, "DLITERAL", Enter_Ptr, is_immediate ; ok
1597+ 30D5             >
1597+ 30D5             >Dict_Ptr        defl    $
1597+ 30D5             >
1597+ 30D5             >//              ______________________________________________________________________
1597+ 30D5             >//              Heap part
1597+ 30D5             >
1597+ 30D5             >
1597+ 30D5             >                org     (Heap_Ptr & $1FFF) + $E000
1597+ E8E7             >
1597+ E8E7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1597+ E8E7             >Latest_Definition defl  Heap_Ptr
1597+ E8E7             >
1597+ E8E7             >                // dummy db directives used to calculate length of namec
1597+ E8E7 44 4C 49 54 >                db      "DLITERAL"
1597+ E8EB 45 52 41 4C >
1597+ E8EF             >len_NFA         defl    $ - temp_NFA
1597+ E8EF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1597+ E8E7             >
1597+ E8E7 C8          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1597+ E8E8 44 4C 49 54 >                db      "DLITERAL"               // name string in 7-bit ascii, but
1597+ E8EC 45 52 41 4C >
1597+ E8F0             >                org     $-1                 // alter last byte of Name just above to set
1597+ E8EF CC          >                db      {b $} | END_BIT     // msb as name end
1597+ E8F0             >
1597+ E8F0 DB 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1597+ E8F2             >Prev_Ptr        defl    Heap_Ptr
1597+ E8F2             >
1597+ E8F2             >mirror_Ptr      defl    $
1597+ E8F2             >
1597+ E8F2 D7 30       >                dw      Dict_Ptr + 2        // xt
1597+ E8F4             >Heap_Ptr        defl    $ - $E000           // save current HP
1597+ E8F4             >
1597+ E8F4             >Current_HP      defl  $ - $E000             // used to set HP once!
1597+ E8F4             >
1597+ E8F4             >//              ______________________________________________________________________
1597+ E8F4             >//              Dictionary part
1597+ E8F4             >
1597+ E8F4             >                org     Dict_Ptr
1597+ 30D5             >
1597+ 30D5 F2 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1597+ 30D7             >
1597+ 30D7             >DLITERAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1597+ 30D7 CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1597+ 30DA             >
1597+ 30DA             >
1597+ 30DA             >                endif           ; ok        // for other definitions it "points" the correct handler
1597+ 30DA             >                // Use of "; ok" to suppress "warning[fwdref]"
1597+ 30DA             >
1597+ 30DA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1598+ 30DA F2 27 31 26                  dw      STATE, FETCH            // state @
1599+ 30DE                                                              // if
1600+ 30DE 8F 20                        dw      ZBRANCH
1601+ 30E0 08 00                        dw      DLiteral_Endif - $
1602+ 30E2 C0 25                        dw          SWAP                //      swap
1603+ 30E4 C2 30 C2 30                  dw          LITERAL,  LITERAL   //      [compile] literal [compile] literal
1604+ 30E8              DLiteral_Endif:                                 // endif
1605+ 30E8 F1 24                        dw      EXIT                    // ; immediate
1606+ 30EA
1607+ 30EA              //  ______________________________________________________________________
1608+ 30EA              //
1609+ 30EA              // [char]       n --      ( compile time )
1610+ 30EA              // inside colon definition, gets first character from next input word
1611+ 30EA              // and compiles it as literal.
1612+ 30EA                              Colon_Def COMPILE_CHAR,  "[CHAR]", is_immediate
1612+ 30EA             >                New_Def  COMPILE_CHAR, "[CHAR]", Enter_Ptr, is_immediate ; ok
1612+ 30EA             >
1612+ 30EA             >Dict_Ptr        defl    $
1612+ 30EA             >
1612+ 30EA             >//              ______________________________________________________________________
1612+ 30EA             >//              Heap part
1612+ 30EA             >
1612+ 30EA             >
1612+ 30EA             >                org     (Heap_Ptr & $1FFF) + $E000
1612+ E8F4             >
1612+ E8F4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1612+ E8F4             >Latest_Definition defl  Heap_Ptr
1612+ E8F4             >
1612+ E8F4             >                // dummy db directives used to calculate length of namec
1612+ E8F4 5B 43 48 41 >                db      "[CHAR]"
1612+ E8F8 52 5D       >
1612+ E8FA             >len_NFA         defl    $ - temp_NFA
1612+ E8FA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1612+ E8F4             >
1612+ E8F4 C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1612+ E8F5 5B 43 48 41 >                db      "[CHAR]"               // name string in 7-bit ascii, but
1612+ E8F9 52 5D       >
1612+ E8FB             >                org     $-1                 // alter last byte of Name just above to set
1612+ E8FA DD          >                db      {b $} | END_BIT     // msb as name end
1612+ E8FB             >
1612+ E8FB E7 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1612+ E8FD             >Prev_Ptr        defl    Heap_Ptr
1612+ E8FD             >
1612+ E8FD             >mirror_Ptr      defl    $
1612+ E8FD             >
1612+ E8FD EC 30       >                dw      Dict_Ptr + 2        // xt
1612+ E8FF             >Heap_Ptr        defl    $ - $E000           // save current HP
1612+ E8FF             >
1612+ E8FF             >Current_HP      defl  $ - $E000             // used to set HP once!
1612+ E8FF             >
1612+ E8FF             >//              ______________________________________________________________________
1612+ E8FF             >//              Dictionary part
1612+ E8FF             >
1612+ E8FF             >                org     Dict_Ptr
1612+ 30EA             >
1612+ 30EA FD 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1612+ 30EC             >
1612+ 30EC             >COMPILE_CHAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1612+ 30EC CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1612+ 30EF             >
1612+ 30EF             >
1612+ 30EF             >                endif           ; ok        // for other definitions it "points" the correct handler
1612+ 30EF             >                // Use of "; ok" to suppress "warning[fwdref]"
1612+ 30EF             >
1612+ 30EF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1613+ 30EF C2 2D C2 30                  dw      CHAR, LITERAL           // char [compile] literal
1614+ 30F3 F1 24                        dw      EXIT                    // ; immediate
1615+ 30F5
1616+ 30F5              //  ______________________________________________________________________
1617+ 30F5              //
1618+ 30F5              // 0x00         n --      ( compile time )
1619+ 30F5                              Colon_Def NUL_WORD,  $00, is_immediate
1619+ 30F5             >                New_Def  NUL_WORD, $00, Enter_Ptr, is_immediate ; ok
1619+ 30F5             >
1619+ 30F5             >Dict_Ptr        defl    $
1619+ 30F5             >
1619+ 30F5             >//              ______________________________________________________________________
1619+ 30F5             >//              Heap part
1619+ 30F5             >
1619+ 30F5             >
1619+ 30F5             >                org     (Heap_Ptr & $1FFF) + $E000
1619+ E8FF             >
1619+ E8FF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1619+ E8FF             >Latest_Definition defl  Heap_Ptr
1619+ E8FF             >
1619+ E8FF             >                // dummy db directives used to calculate length of namec
1619+ E8FF 00          >                db      $00
1619+ E900             >len_NFA         defl    $ - temp_NFA
1619+ E900             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1619+ E8FF             >
1619+ E8FF C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1619+ E900 00          >                db      $00               // name string in 7-bit ascii, but
1619+ E901             >                org     $-1                 // alter last byte of Name just above to set
1619+ E900 80          >                db      {b $} | END_BIT     // msb as name end
1619+ E901             >
1619+ E901 F4 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1619+ E903             >Prev_Ptr        defl    Heap_Ptr
1619+ E903             >
1619+ E903             >mirror_Ptr      defl    $
1619+ E903             >
1619+ E903 F7 30       >                dw      Dict_Ptr + 2        // xt
1619+ E905             >Heap_Ptr        defl    $ - $E000           // save current HP
1619+ E905             >
1619+ E905             >Current_HP      defl  $ - $E000             // used to set HP once!
1619+ E905             >
1619+ E905             >//              ______________________________________________________________________
1619+ E905             >//              Dictionary part
1619+ E905             >
1619+ E905             >                org     Dict_Ptr
1619+ 30F5             >
1619+ 30F5 03 09       >                dw      mirror_Ptr - $E000 + Heap_offset
1619+ 30F7             >
1619+ 30F7             >NUL_WORD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1619+ 30F7 CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1619+ 30FA             >
1619+ 30FA             >
1619+ 30FA             >                endif           ; ok        // for other definitions it "points" the correct handler
1619+ 30FA             >                // Use of "; ok" to suppress "warning[fwdref]"
1619+ 30FA             >
1619+ 30FA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1620+ 30FA C8 27 31 26                  dw      BLK, FETCH, ONE         // blk @ 1
1620+ 30FE 2E 27
1621+ 3100 BD 28                        dw      GREATER                 // > if
1622+ 3102                                                              // if
1623+ 3102 8F 20                        dw      ZBRANCH
1624+ 3104 28 00                        dw      Nul_Else_1 - $
1625+ 3106 2E 27 C8 27                  dw          ONE, BLK, PLUSSTORE //      1 blk +!
1625+ 310A 19 26
1626+ 310C 27 27 CE 27                  dw          ZERO, TO_IN, STORE  //      0 >in !
1626+ 3110 3B 26
1627+ 3112 C8 27 31 26                  dw          BLK, FETCH          //      blk @
1628+ 3116 5F 27                        dw          BSCR                //      b/scr
1629+ 3118 63 25                        dw          ONE_SUBTRACT        //      1 -
1630+ 311A B1 24                        dw          AND_OP              //      and  ( this is tricky )
1631+ 311C 16 25                        dw          ZEQUAL              //      0=
1632+ 311E                                                              //      if
1633+ 311E 8F 20                        dw          ZBRANCH
1634+ 3120 08 00                        dw          Nul_Endif_2 - $
1635+ 3122 A8 2A                        dw              QEXEC           //          ?exec
1636+ 3124 06 25 AC 25                  dw              R_TO, DROP      //          r> drop
1637+ 3128              Nul_Endif_2:                                    //      endif
1638+ 3128 82 20                        dw      BRANCH
1639+ 312A 06 00                        dw      Nul_Endif_1 - $
1640+ 312C              Nul_Else_1:                                     // else
1641+ 312C 06 25 AC 25                  dw          R_TO, DROP          //      r> drop
1642+ 3130              Nul_Endif_1:                                    // endif
1643+ 3130 F1 24                        dw      EXIT                    // ;
1644+ 3132
1645+ 3132              //  ______________________________________________________________________
1646+ 3132              //
1647+ 3132              // ?stack       --
1648+ 3132              // Raise error #1 if stack is empty and you pop it
1649+ 3132              // Raise error #7 if stack is full.
1650+ 3132              // This means SP must always stay between HERE and FFFF
1651+ 3132              // For 128K BANK paging purpose SP must be <= BFE0 and 50 words room
1652+ 3132              // for Next 8K MMU paging this is $DOE8
1653+ 3132                              Colon_Def QSTACK, "?STACK", is_normal
1653+ 3132             >                New_Def  QSTACK, "?STACK", Enter_Ptr, is_normal ; ok
1653+ 3132             >
1653+ 3132             >Dict_Ptr        defl    $
1653+ 3132             >
1653+ 3132             >//              ______________________________________________________________________
1653+ 3132             >//              Heap part
1653+ 3132             >
1653+ 3132             >
1653+ 3132             >                org     (Heap_Ptr & $1FFF) + $E000
1653+ E905             >
1653+ E905             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1653+ E905             >Latest_Definition defl  Heap_Ptr
1653+ E905             >
1653+ E905             >                // dummy db directives used to calculate length of namec
1653+ E905 3F 53 54 41 >                db      "?STACK"
1653+ E909 43 4B       >
1653+ E90B             >len_NFA         defl    $ - temp_NFA
1653+ E90B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1653+ E905             >
1653+ E905 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1653+ E906 3F 53 54 41 >                db      "?STACK"               // name string in 7-bit ascii, but
1653+ E90A 43 4B       >
1653+ E90C             >                org     $-1                 // alter last byte of Name just above to set
1653+ E90B CB          >                db      {b $} | END_BIT     // msb as name end
1653+ E90C             >
1653+ E90C FF 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1653+ E90E             >Prev_Ptr        defl    Heap_Ptr
1653+ E90E             >
1653+ E90E             >mirror_Ptr      defl    $
1653+ E90E             >
1653+ E90E 34 31       >                dw      Dict_Ptr + 2        // xt
1653+ E910             >Heap_Ptr        defl    $ - $E000           // save current HP
1653+ E910             >
1653+ E910             >Current_HP      defl  $ - $E000             // used to set HP once!
1653+ E910             >
1653+ E910             >//              ______________________________________________________________________
1653+ E910             >//              Dictionary part
1653+ E910             >
1653+ E910             >                org     Dict_Ptr
1653+ 3132             >
1653+ 3132 0E 09       >                dw      mirror_Ptr - $E000 + Heap_offset
1653+ 3134             >
1653+ 3134             >QSTACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1653+ 3134 CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1653+ 3137             >
1653+ 3137             >
1653+ 3137             >                endif           ; ok        // for other definitions it "points" the correct handler
1653+ 3137             >                // Use of "; ok" to suppress "warning[fwdref]"
1653+ 3137             >
1653+ 3137             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1654+ 3137 D8 24                        dw      SPFETCH                 // sp@
1655+ 3139 80 27 31 26                  dw      S0, FETCH               // s0 @
1656+ 313D C0 25 A2 28                  dw      SWAP, ULESS             // swap u<
1657+ 3141 2E 27 80 2A                  dw      ONE, QERROR             // 1 ?error
1658+ 3145 4C 28                        dw      HERE                    // here
1659+ 3147 80 27 31 26                  dw      S0, FETCH, LESS         // s0 @ <
1659+ 314B B0 28
1660+ 314D                                                              // if
1661+ 314D 8F 20                        dw      ZBRANCH
1662+ 314F 14 00                        dw      QStack_Endif - $
1663+ 3151 D8 24                        dw          SPFETCH             //      sp@
1664+ 3153 4C 28 3D 20                  dw          HERE, LIT, 128      //      here 128
1664+ 3157 80 00
1665+ 3159 43 25 A2 28                  dw          PLUS, ULESS         //      plus u<
1666+ 315D 3D 20 07 00                  dw          LIT, 7, QERROR      //      7 Cerror
1666+ 3161 80 2A
1667+ 3163              QStack_Endif:                                   // endif
1668+ 3163 F1 24                        dw      EXIT                    // ;
1669+ 3165
1670+ 3165
# file closed: C:\Zx\CSpect\Projects\vForth17_DOT/source/L1.asm
 141  3165                              include "L2.asm"
# file opened: C:\Zx\CSpect\Projects\vForth17_DOT/source/L2.asm
   1+ 3165              //  ______________________________________________________________________
   2+ 3165              //
   3+ 3165              //  L2.asm
   4+ 3165              //
   5+ 3165              //  Level-2 3dos
   6+ 3165              //  the Forth interpreter, vocabulary, cold/warm start and quit from Forth.
   7+ 3165              //  ______________________________________________________________________
   8+ 3165
   9+ 3165
  10+ 3165              //  ______________________________________________________________________
  11+ 3165              //
  12+ 3165              // interpret    --
  13+ 3165              // This is the text interpreter.
  14+ 3165              // It executes or compiles, depending on STATE, the text coming from
  15+ 3165              // current input stream.
  16+ 3165              // If the word search fails after parsing CONTEXT and CURRENT vocabulary,
  17+ 3165              // the word is interpreted as numeric and converted, using current BASE,
  18+ 3165              // leaving on top of stack a single or double precision number, depending
  19+ 3165              // on the presence of a decimal point.
  20+ 3165              // If the number conversion fails, the terminal is notified with ? followed
  21+ 3165              // by the offending word.
  22+ 3165                              Colon_Def INTERPRET, "INTERPRET", is_normal
  22+ 3165             >                New_Def  INTERPRET, "INTERPRET", Enter_Ptr, is_normal ; ok
  22+ 3165             >
  22+ 3165             >Dict_Ptr        defl    $
  22+ 3165             >
  22+ 3165             >//              ______________________________________________________________________
  22+ 3165             >//              Heap part
  22+ 3165             >
  22+ 3165             >
  22+ 3165             >                org     (Heap_Ptr & $1FFF) + $E000
  22+ E910             >
  22+ E910             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  22+ E910             >Latest_Definition defl  Heap_Ptr
  22+ E910             >
  22+ E910             >                // dummy db directives used to calculate length of namec
  22+ E910 49 4E 54 45 >                db      "INTERPRET"
  22+ E914 52 50 52 45 >
  22+ E918 54          >
  22+ E919             >len_NFA         defl    $ - temp_NFA
  22+ E919             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  22+ E910             >
  22+ E910 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  22+ E911 49 4E 54 45 >                db      "INTERPRET"               // name string in 7-bit ascii, but
  22+ E915 52 50 52 45 >
  22+ E919 54          >
  22+ E91A             >                org     $-1                 // alter last byte of Name just above to set
  22+ E919 D4          >                db      {b $} | END_BIT     // msb as name end
  22+ E91A             >
  22+ E91A 05 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  22+ E91C             >Prev_Ptr        defl    Heap_Ptr
  22+ E91C             >
  22+ E91C             >mirror_Ptr      defl    $
  22+ E91C             >
  22+ E91C 67 31       >                dw      Dict_Ptr + 2        // xt
  22+ E91E             >Heap_Ptr        defl    $ - $E000           // save current HP
  22+ E91E             >
  22+ E91E             >Current_HP      defl  $ - $E000             // used to set HP once!
  22+ E91E             >
  22+ E91E             >//              ______________________________________________________________________
  22+ E91E             >//              Dictionary part
  22+ E91E             >
  22+ E91E             >                org     Dict_Ptr
  22+ 3165             >
  22+ 3165 1C 09       >                dw      mirror_Ptr - $E000 + Heap_offset
  22+ 3167             >
  22+ 3167             >INTERPRET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  22+ 3167 CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  22+ 316A             >
  22+ 316A             >
  22+ 316A             >                endif           ; ok        // for other definitions it "points" the correct handler
  22+ 316A             >                // Use of "; ok" to suppress "warning[fwdref]"
  22+ 316A             >
  22+ 316A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  23+ 316A
  24+ 316A              Interpret_Begin:                                        // begin
  25+ 316A A4 2F                        dw          LFIND                       //      -find
  26+ 316C                                                                      //      if
  27+ 316C 8F 20                        dw          ZBRANCH
  28+ 316E 1A 00                        dw          Interpret_Else_1 - $
  29+ 3170 F2 27 31 26                  dw              STATE, FETCH, LESS      //          state @ <
  29+ 3174 B0 28
  30+ 3176                                                                      //          if
  31+ 3176 8F 20                        dw              ZBRANCH
  32+ 3178 08 00                        dw              Interpret_Else_2 - $
  33+ 317A 05 2B                        dw                  COMPILE_XT          //              compile,
  34+ 317C                                                                      //          else
  35+ 317C 82 20                        dw              BRANCH
  36+ 317E 06 00                        dw              Interpret_Endif_2 - $
  37+ 3180              Interpret_Else_2:
  38+ 3180 48 20 EE 26                  dw                  EXECUTE, NOOP       //              execute nooop
  39+ 3184              Interpret_Endif_2:                                      //          endif
  40+ 3184                                                                      //      else
  41+ 3184 82 20                        dw          BRANCH
  42+ 3186 1A 00                        dw          Interpret_Endif_1 - $
  43+ 3188              Interpret_Else_1:
  44+ 3188 4C 28 F4 2E                  dw              HERE, NUMBER            //          here number
  45+ 318C FE 27 31 26                  dw              DPL, FETCH, ONE_PLUS    //          dpl @ 1+
  45+ 3190 5C 25
  46+ 3192                                                                      //          if
  47+ 3192 8F 20                        dw              ZBRANCH
  48+ 3194 08 00                        dw              Interpret_Else_3 - $
  49+ 3196              //              dw                  NMODE, FETCH        //              nmode @
  50+ 3196              //                                                      //              if
  51+ 3196              //              dw                  ZBRANCH
  52+ 3196              //              dw                  Interpret_Endif_4 - $
  53+ 3196              //              dw                      ONE, ZERO       //                  1 0
  54+ 3196              //              dw                      TWO_DROP        //                  2drop
  55+ 3196              //Interpret_Endif_4:                                      //              endif
  56+ 3196 D7 30                        dw                  DLITERAL            //              [compile] dliteral
  57+ 3198                                                                      //          else
  58+ 3198 82 20                        dw              BRANCH
  59+ 319A 06 00                        dw              Interpret_Endif_3 - $
  60+ 319C              Interpret_Else_3:
  61+ 319C AC 25                        dw                  DROP                //              drop
  62+ 319E C2 30                        dw                  LITERAL             //              [compile]  literal
  63+ 31A0              Interpret_Endif_3:                                      //          endif
  64+ 31A0              Interpret_Endif_1:                                      //      endif
  65+ 31A0 34 31                        dw          QSTACK                      //      ?stack
  66+ 31A2 48 23                        dw          QTERMINAL                   //      ?terminal
  67+ 31A4                                                                      //      if
  68+ 31A4 8F 20                        dw          ZBRANCH
  69+ 31A6 04 00                        dw          Interpret_Endif_5 - $
  70+ 31A8 08 32                        dw              QUIT                    //          quit
  71+ 31AA              Interpret_Endif_5:                                      //      endif
  72+ 31AA 82 20                        dw      BRANCH
  73+ 31AC BE FF                        dw      Interpret_Begin - $
  74+ 31AE F1 24                        dw      EXIT                            // ;
  75+ 31B0
  76+ 31B0              //  ______________________________________________________________________
  77+ 31B0              //
  78+ 31B0              // vocabulary   -- cccc     ( compile time )
  79+ 31B0              // Defining word used in the form   VOCABULARY cccc
  80+ 31B0              // creates the word  cccc  that gives the name to the vocabulary.
  81+ 31B0              // Giving  cccc  makes the vocabulary CONTEXT so its words are executed first
  82+ 31B0              // Giving  cccc DEFINITIONS makes  the vocabulary  CURRENT
  83+ 31B0              // so new definitions can be inserted in that vocabulary.
  84+ 31B0                              Colon_Def VOCABULARY, "VOCABULARY", is_normal
  84+ 31B0             >                New_Def  VOCABULARY, "VOCABULARY", Enter_Ptr, is_normal ; ok
  84+ 31B0             >
  84+ 31B0             >Dict_Ptr        defl    $
  84+ 31B0             >
  84+ 31B0             >//              ______________________________________________________________________
  84+ 31B0             >//              Heap part
  84+ 31B0             >
  84+ 31B0             >
  84+ 31B0             >                org     (Heap_Ptr & $1FFF) + $E000
  84+ E91E             >
  84+ E91E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  84+ E91E             >Latest_Definition defl  Heap_Ptr
  84+ E91E             >
  84+ E91E             >                // dummy db directives used to calculate length of namec
  84+ E91E 56 4F 43 41 >                db      "VOCABULARY"
  84+ E922 42 55 4C 41 >
  84+ E926 52 59       >
  84+ E928             >len_NFA         defl    $ - temp_NFA
  84+ E928             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  84+ E91E             >
  84+ E91E 8A          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  84+ E91F 56 4F 43 41 >                db      "VOCABULARY"               // name string in 7-bit ascii, but
  84+ E923 42 55 4C 41 >
  84+ E927 52 59       >
  84+ E929             >                org     $-1                 // alter last byte of Name just above to set
  84+ E928 D9          >                db      {b $} | END_BIT     // msb as name end
  84+ E929             >
  84+ E929 10 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  84+ E92B             >Prev_Ptr        defl    Heap_Ptr
  84+ E92B             >
  84+ E92B             >mirror_Ptr      defl    $
  84+ E92B             >
  84+ E92B B2 31       >                dw      Dict_Ptr + 2        // xt
  84+ E92D             >Heap_Ptr        defl    $ - $E000           // save current HP
  84+ E92D             >
  84+ E92D             >Current_HP      defl  $ - $E000             // used to set HP once!
  84+ E92D             >
  84+ E92D             >//              ______________________________________________________________________
  84+ E92D             >//              Dictionary part
  84+ E92D             >
  84+ E92D             >                org     Dict_Ptr
  84+ 31B0             >
  84+ 31B0 2B 09       >                dw      mirror_Ptr - $E000 + Heap_offset
  84+ 31B2             >
  84+ 31B2             >VOCABULARY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  84+ 31B2 CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  84+ 31B5             >
  84+ 31B5             >
  84+ 31B5             >                endif           ; ok        // for other definitions it "points" the correct handler
  84+ 31B5             >                // Use of "; ok" to suppress "warning[fwdref]"
  84+ 31B5             >
  84+ 31B5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  85+ 31B5
  86+ 31B5 92 2B                        dw      CBUILDS
  87+ 31B7
  88+ 31B7                              // dummy word + link part
  89+ 31B7 3D 20 81 A0                  dw      LIT, $A081, COMMA       // $81A0 ,
  89+ 31BB 62 28
  90+ 31BD EC 27 31 26                  dw      CURRENT, FETCH          // current @
  91+ 31C1 31 26                        dw      FETCH                   // @
  92+ 31C3                          //  dw      CELL_MINUS              // cell-
  93+ 31C3 62 28                        dw      COMMA                   // ,
  94+ 31C5
  95+ 31C5                              // voc-link part
  96+ 31C5 4C 28                        dw      HERE                    // here
  97+ 31C7 AA 27 31 26                  dw      VOC_LINK, FETCH         // voc-link @
  98+ 31CB 62 28                        dw      COMMA                   // ,
  99+ 31CD AA 27 3B 26                  dw      VOC_LINK, STORE         // voc-link !
 100+ 31D1                              // DOES part
 101+ 31D1 9D 2B                        dw      DOES_TO                 // does>
 102+ 31D3              Vocabulary_Does:
 103+ 31D3 72 25                        dw      CELL_PLUS               // cell+
 104+ 31D5 E6 27 3B 26                  dw      CONTEXT, STORE          // context !
 105+ 31D9 F1 24                        dw      EXIT                    // ;
 106+ 31DB
 107+ 31DB              //  ______________________________________________________________________
 108+ 31DB              //
 109+ 31DB              // forth        --
 110+ 31DB              // Name of the first vocabulary.
 111+ 31DB              // It makes FORTH the CONTEXT vocabulary.
 112+ 31DB              // Until new user vocabulary are defined, new colon-definitions becomes
 113+ 31DB              // part of FORTH. It is immediate, so it will executed during the creation
 114+ 31DB              // of a colon definition to be able to select the vocabulary.
 115+ 31DB
 116+ 31DB                              New_Def FORTH, "FORTH", Does_Ptr, is_immediate
 116+ 31DB             >
 116+ 31DB             >Dict_Ptr        defl    $
 116+ 31DB             >
 116+ 31DB             >//              ______________________________________________________________________
 116+ 31DB             >//              Heap part
 116+ 31DB             >
 116+ 31DB             >
 116+ 31DB             >                org     (Heap_Ptr & $1FFF) + $E000
 116+ E92D             >
 116+ E92D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 116+ E92D             >Latest_Definition defl  Heap_Ptr
 116+ E92D             >
 116+ E92D             >                // dummy db directives used to calculate length of namec
 116+ E92D 46 4F 52 54 >                db      "FORTH"
 116+ E931 48          >
 116+ E932             >len_NFA         defl    $ - temp_NFA
 116+ E932             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 116+ E92D             >
 116+ E92D C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 116+ E92E 46 4F 52 54 >                db      "FORTH"               // name string in 7-bit ascii, but
 116+ E932 48          >
 116+ E933             >                org     $-1                 // alter last byte of Name just above to set
 116+ E932 C8          >                db      {b $} | END_BIT     // msb as name end
 116+ E933             >
 116+ E933 1E 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 116+ E935             >Prev_Ptr        defl    Heap_Ptr
 116+ E935             >
 116+ E935             >mirror_Ptr      defl    $
 116+ E935             >
 116+ E935 DD 31       >                dw      Dict_Ptr + 2        // xt
 116+ E937             >Heap_Ptr        defl    $ - $E000           // save current HP
 116+ E937             >
 116+ E937             >Current_HP      defl  $ - $E000             // used to set HP once!
 116+ E937             >
 116+ E937             >//              ______________________________________________________________________
 116+ E937             >//              Dictionary part
 116+ E937             >
 116+ E937             >                org     Dict_Ptr
 116+ 31DB             >
 116+ 31DB 35 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 116+ 31DD             >
 116+ 31DD             >FORTH:          if Does_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 116+ 31DD CD AA 2B    >                call    Does_Ptr ; ok        // for primitive definitions  actual code
 116+ 31E0             >
 116+ 31E0             >
 116+ 31E0             >                endif           ; ok        // for other definitions it "points" the correct handler
 116+ 31E0             >                // Use of "; ok" to suppress "warning[fwdref]"
 116+ 31E0             >
 116+ 31E0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 117+ 31E0 D3 31                        dw      Vocabulary_Does
 118+ 31E2
 119+ 31E2 81 A0                        db      $81, $A0
 120+ 31E4              Forth_Latest_Ptr:
 121+ 31E4 2D 09                        dw      Latest_Definition
 122+ 31E6              Voclink_Ptr:
 123+ 31E6 00 00                        dw      0
 124+ 31E8
 125+ 31E8              // ____
 126+ 31E8              // temp_VOC        defl    $                   // save this address
 127+ 31E8              //              org     (Heap_Ptr & $1FFF) + $E000
 128+ 31E8              //              db      $81, $A0
 129+ 31E8              // Forth_Latest_Ptr_HEAP:
 130+ 31E8              //                 dw      Latest_Definition
 131+ 31E8              // Voclink_Ptr_HEAP:
 132+ 31E8              //                 dw      0
 133+ 31E8              // Heap_Ptr        defl    $ - $E000           // save current HP
 134+ 31E8              //                 org     temp_VOC
 135+ 31E8              // ____
 136+ 31E8
 137+ 31E8              // Any new vocabulary is structured as follow:
 138+ 31E8              // PFA+0 points to DOES> part of VOCABULARY to perform CELL+ CONTEXT !
 139+ 31E8              // PFA+2 is 81,A0 i.e. a null-word used as LATEST in the new vocabulary
 140+ 31E8              // PFA+4 always contains the LATEST word of this VOCABULARY.
 141+ 31E8              //       at creations it points to the null-word of its parent vocabulary
 142+ 31E8              //       that is normally FORTH, For example ASSEMBLER points FORTH's null-word
 143+ 31E8              // PFA+6 is the pointer that builds up the vocabulary linked list.
 144+ 31E8              //       FORTH has 0 here to signal the end of the list and user's variable
 145+ 31E8              //       VOC-LINK points to PFA+6 of the newest vocabulary created.
 146+ 31E8              //       While FORTH is the only vocabulary, VOC-LINK points to FORTH's PFA+6
 147+ 31E8              //       When ASSEMBLER is created, its PFA+6 points to FORTH's PFA+6, and so on
 148+ 31E8
 149+ 31E8              //  ______________________________________________________________________
 150+ 31E8              //
 151+ 31E8              // definitions  --
 152+ 31E8              // Used in the form  cccc DEFINITIONS
 153+ 31E8              // set the CURRENT vocabulary at CONTEXT to insert new definitions in
 154+ 31E8              // vocabulary cccc.
 155+ 31E8                              Colon_Def DEFINITIONS, "DEFINITIONS", is_normal
 155+ 31E8             >                New_Def  DEFINITIONS, "DEFINITIONS", Enter_Ptr, is_normal ; ok
 155+ 31E8             >
 155+ 31E8             >Dict_Ptr        defl    $
 155+ 31E8             >
 155+ 31E8             >//              ______________________________________________________________________
 155+ 31E8             >//              Heap part
 155+ 31E8             >
 155+ 31E8             >
 155+ 31E8             >                org     (Heap_Ptr & $1FFF) + $E000
 155+ E937             >
 155+ E937             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 155+ E937             >Latest_Definition defl  Heap_Ptr
 155+ E937             >
 155+ E937             >                // dummy db directives used to calculate length of namec
 155+ E937 44 45 46 49 >                db      "DEFINITIONS"
 155+ E93B 4E 49 54 49 >
 155+ E93F 4F 4E 53    >
 155+ E942             >len_NFA         defl    $ - temp_NFA
 155+ E942             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 155+ E937             >
 155+ E937 8B          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 155+ E938 44 45 46 49 >                db      "DEFINITIONS"               // name string in 7-bit ascii, but
 155+ E93C 4E 49 54 49 >
 155+ E940 4F 4E 53    >
 155+ E943             >                org     $-1                 // alter last byte of Name just above to set
 155+ E942 D3          >                db      {b $} | END_BIT     // msb as name end
 155+ E943             >
 155+ E943 2D 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 155+ E945             >Prev_Ptr        defl    Heap_Ptr
 155+ E945             >
 155+ E945             >mirror_Ptr      defl    $
 155+ E945             >
 155+ E945 EA 31       >                dw      Dict_Ptr + 2        // xt
 155+ E947             >Heap_Ptr        defl    $ - $E000           // save current HP
 155+ E947             >
 155+ E947             >Current_HP      defl  $ - $E000             // used to set HP once!
 155+ E947             >
 155+ E947             >//              ______________________________________________________________________
 155+ E947             >//              Dictionary part
 155+ E947             >
 155+ E947             >                org     Dict_Ptr
 155+ 31E8             >
 155+ 31E8 45 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 155+ 31EA             >
 155+ 31EA             >DEFINITIONS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 155+ 31EA CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 155+ 31ED             >
 155+ 31ED             >
 155+ 31ED             >                endif           ; ok        // for other definitions it "points" the correct handler
 155+ 31ED             >                // Use of "; ok" to suppress "warning[fwdref]"
 155+ 31ED             >
 155+ 31ED             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 156+ 31ED E6 27 31 26                  dw      CONTEXT, FETCH          // context @
 157+ 31F1 EC 27 3B 26                  dw      CURRENT, STORE          // current !
 158+ 31F5 F1 24                        dw      EXIT                    // ;
 159+ 31F7
 160+ 31F7              //  ______________________________________________________________________
 161+ 31F7              //
 162+ 31F7              // (            -- cccc )
 163+ 31F7              // the following text is interpreted as a comment until a closing )
 164+ 31F7                              Colon_Def COMMENT_BRAKET, "(", is_immediate
 164+ 31F7             >                New_Def  COMMENT_BRAKET, "(", Enter_Ptr, is_immediate ; ok
 164+ 31F7             >
 164+ 31F7             >Dict_Ptr        defl    $
 164+ 31F7             >
 164+ 31F7             >//              ______________________________________________________________________
 164+ 31F7             >//              Heap part
 164+ 31F7             >
 164+ 31F7             >
 164+ 31F7             >                org     (Heap_Ptr & $1FFF) + $E000
 164+ E947             >
 164+ E947             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 164+ E947             >Latest_Definition defl  Heap_Ptr
 164+ E947             >
 164+ E947             >                // dummy db directives used to calculate length of namec
 164+ E947 28          >                db      "("
 164+ E948             >len_NFA         defl    $ - temp_NFA
 164+ E948             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 164+ E947             >
 164+ E947 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 164+ E948 28          >                db      "("               // name string in 7-bit ascii, but
 164+ E949             >                org     $-1                 // alter last byte of Name just above to set
 164+ E948 A8          >                db      {b $} | END_BIT     // msb as name end
 164+ E949             >
 164+ E949 37 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 164+ E94B             >Prev_Ptr        defl    Heap_Ptr
 164+ E94B             >
 164+ E94B             >mirror_Ptr      defl    $
 164+ E94B             >
 164+ E94B F9 31       >                dw      Dict_Ptr + 2        // xt
 164+ E94D             >Heap_Ptr        defl    $ - $E000           // save current HP
 164+ E94D             >
 164+ E94D             >Current_HP      defl  $ - $E000             // used to set HP once!
 164+ E94D             >
 164+ E94D             >//              ______________________________________________________________________
 164+ E94D             >//              Dictionary part
 164+ E94D             >
 164+ E94D             >                org     Dict_Ptr
 164+ 31F7             >
 164+ 31F7 4B 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 164+ 31F9             >
 164+ 31F9             >COMMENT_BRAKET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 164+ 31F9 CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 164+ 31FC             >
 164+ 31FC             >
 164+ 31FC             >                endif           ; ok        // for other definitions it "points" the correct handler
 164+ 31FC             >                // Use of "; ok" to suppress "warning[fwdref]"
 164+ 31FC             >
 164+ 31FC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 165+ 31FC 3D 20 29 00                  dw      LIT, ")"                // [char] )
 166+ 3200 60 2D AC 25                  dw      WORD, DROP              // word drop
 167+ 3204 F1 24                        dw      EXIT                    // ;
 168+ 3206
 169+ 3206              //  ______________________________________________________________________
 170+ 3206              //
 171+ 3206              // quit         --
 172+ 3206              // \ Erase the return-stack, stop any compilation and give controlo to the console. No message is issued.
 173+ 3206                              Colon_Def QUIT, "QUIT", is_normal
 173+ 3206             >                New_Def  QUIT, "QUIT", Enter_Ptr, is_normal ; ok
 173+ 3206             >
 173+ 3206             >Dict_Ptr        defl    $
 173+ 3206             >
 173+ 3206             >//              ______________________________________________________________________
 173+ 3206             >//              Heap part
 173+ 3206             >
 173+ 3206             >
 173+ 3206             >                org     (Heap_Ptr & $1FFF) + $E000
 173+ E94D             >
 173+ E94D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 173+ E94D             >Latest_Definition defl  Heap_Ptr
 173+ E94D             >
 173+ E94D             >                // dummy db directives used to calculate length of namec
 173+ E94D 51 55 49 54 >                db      "QUIT"
 173+ E951             >len_NFA         defl    $ - temp_NFA
 173+ E951             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 173+ E94D             >
 173+ E94D 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 173+ E94E 51 55 49 54 >                db      "QUIT"               // name string in 7-bit ascii, but
 173+ E952             >                org     $-1                 // alter last byte of Name just above to set
 173+ E951 D4          >                db      {b $} | END_BIT     // msb as name end
 173+ E952             >
 173+ E952 47 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 173+ E954             >Prev_Ptr        defl    Heap_Ptr
 173+ E954             >
 173+ E954             >mirror_Ptr      defl    $
 173+ E954             >
 173+ E954 08 32       >                dw      Dict_Ptr + 2        // xt
 173+ E956             >Heap_Ptr        defl    $ - $E000           // save current HP
 173+ E956             >
 173+ E956             >Current_HP      defl  $ - $E000             // used to set HP once!
 173+ E956             >
 173+ E956             >//              ______________________________________________________________________
 173+ E956             >//              Dictionary part
 173+ E956             >
 173+ E956             >                org     Dict_Ptr
 173+ 3206             >
 173+ 3206 54 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 173+ 3208             >
 173+ 3208             >QUIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 173+ 3208 CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 173+ 320B             >
 173+ 320B             >
 173+ 320B             >                endif           ; ok        // for other definitions it "points" the correct handler
 173+ 320B             >                // Use of "; ok" to suppress "warning[fwdref]"
 173+ 320B             >
 173+ 320B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 174+ 320B
 175+ 320B 34 28 31 26                  dw      SOURCE_ID, FETCH        // source-id @
 176+ 320F 95 23 AC 25                  dw      F_CLOSE, DROP           // f_close drop
 177+ 3213 27 27 34 28                  dw      ZERO, SOURCE_ID, STORE  // 0 source-id !
 177+ 3217 3B 26
 178+ 3219 27 27 C8 27                  dw      ZERO, BLK, STORE        // 0 blk !
 178+ 321D 3B 26
 179+ 321F 0E 2B                        dw      SQUARED_OPEN            // [compile] [
 180+ 3221                                                              // begin
 181+ 3221              Quit_Begin:
 182+ 3221 86 27 31 26                  dw      R0, FETCH, RPSTORE      //      r0 @ rp!
 182+ 3225 EC 24
 183+ 3227 4F 22                        dw      CR                      //      cr
 184+ 3229 FD 2C                        dw      QUERY                   //      query
 185+ 322B              Next_Breakpoint_1:
 186+ 322B 67 31                        dw      INTERPRET               //      interpret
 187+ 322D F2 27 31 26                  dw      STATE, FETCH, ZEQUAL    //      state @ 0=
 187+ 3231 16 25
 188+ 3233                                                              //      if
 189+ 3233 8F 20                        dw      ZBRANCH
 190+ 3235 07 00                        dw      Quit_Endif - $
 191+ 3237 AB 2D                        dw          C_DOT_QUOTE
 192+ 3239 02 6F 6B                     db          2, "ok"             //          .( ok)
 193+ 323C              Quit_Endif:                                     //      else
 194+ 323C                                                              // again
 195+ 323C 82 20                        dw      BRANCH
 196+ 323E E3 FF                        dw      Quit_Begin - $
 197+ 3240 F1 24                        dw      EXIT                    // ;
 198+ 3242
 199+ 3242              //  ______________________________________________________________________
 200+ 3242              //
 201+ 3242              // abort        --
 202+ 3242                              Colon_Def ABORT, "ABORT", is_normal
 202+ 3242             >                New_Def  ABORT, "ABORT", Enter_Ptr, is_normal ; ok
 202+ 3242             >
 202+ 3242             >Dict_Ptr        defl    $
 202+ 3242             >
 202+ 3242             >//              ______________________________________________________________________
 202+ 3242             >//              Heap part
 202+ 3242             >
 202+ 3242             >
 202+ 3242             >                org     (Heap_Ptr & $1FFF) + $E000
 202+ E956             >
 202+ E956             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 202+ E956             >Latest_Definition defl  Heap_Ptr
 202+ E956             >
 202+ E956             >                // dummy db directives used to calculate length of namec
 202+ E956 41 42 4F 52 >                db      "ABORT"
 202+ E95A 54          >
 202+ E95B             >len_NFA         defl    $ - temp_NFA
 202+ E95B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 202+ E956             >
 202+ E956 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 202+ E957 41 42 4F 52 >                db      "ABORT"               // name string in 7-bit ascii, but
 202+ E95B 54          >
 202+ E95C             >                org     $-1                 // alter last byte of Name just above to set
 202+ E95B D4          >                db      {b $} | END_BIT     // msb as name end
 202+ E95C             >
 202+ E95C 4D 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 202+ E95E             >Prev_Ptr        defl    Heap_Ptr
 202+ E95E             >
 202+ E95E             >mirror_Ptr      defl    $
 202+ E95E             >
 202+ E95E 44 32       >                dw      Dict_Ptr + 2        // xt
 202+ E960             >Heap_Ptr        defl    $ - $E000           // save current HP
 202+ E960             >
 202+ E960             >Current_HP      defl  $ - $E000             // used to set HP once!
 202+ E960             >
 202+ E960             >//              ______________________________________________________________________
 202+ E960             >//              Dictionary part
 202+ E960             >
 202+ E960             >                org     Dict_Ptr
 202+ 3242             >
 202+ 3242 5E 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 202+ 3244             >
 202+ 3244             >ABORT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 202+ 3244 CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 202+ 3247             >
 202+ 3247             >
 202+ 3247             >                endif           ; ok        // for other definitions it "points" the correct handler
 202+ 3247             >                // Use of "; ok" to suppress "warning[fwdref]"
 202+ 3247             >
 202+ 3247             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 203+ 3247 80 27 31 26                  dw      S0, FETCH               // s0 @
 204+ 324B 4A 27                        dw      BL                      // bl
 205+ 324D A3 25 3B 26                  dw      OVER, STORE             // over !
 206+ 3251 E1 24                        dw      SPSTORE                 // sp!
 207+ 3253 57 2B                        dw      DECIMAL                 // decimal
 208+ 3255 DD 31                        dw      FORTH                   // [compile] forth
 209+ 3257 EA 31                        dw      DEFINITIONS             // definitions
 210+ 3259
 211+ 3259 0E 2B                        dw      SQUARED_OPEN            // [compile] [
 212+ 325B 86 27 31 26                  dw      R0, FETCH, RPSTORE      //      r0 @ rp!
 212+ 325F EC 24
 213+ 3261
 214+ 3261              Autoexec_Ptr:
 215+ 3261 80 3D                        dw      AUTOEXEC                // autoexec, patched to noop
 216+ 3263 08 32                        dw      QUIT                    // quit
 217+ 3265              //              dw      EXIT                    // ;
 218+ 3265
 219+ 3265              //  ______________________________________________________________________
 220+ 3265              //
 221+ 3265              // warm         --
 222+ 3265                              Colon_Def WARM, "WARM", is_normal
 222+ 3265             >                New_Def  WARM, "WARM", Enter_Ptr, is_normal ; ok
 222+ 3265             >
 222+ 3265             >Dict_Ptr        defl    $
 222+ 3265             >
 222+ 3265             >//              ______________________________________________________________________
 222+ 3265             >//              Heap part
 222+ 3265             >
 222+ 3265             >
 222+ 3265             >                org     (Heap_Ptr & $1FFF) + $E000
 222+ E960             >
 222+ E960             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 222+ E960             >Latest_Definition defl  Heap_Ptr
 222+ E960             >
 222+ E960             >                // dummy db directives used to calculate length of namec
 222+ E960 57 41 52 4D >                db      "WARM"
 222+ E964             >len_NFA         defl    $ - temp_NFA
 222+ E964             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 222+ E960             >
 222+ E960 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 222+ E961 57 41 52 4D >                db      "WARM"               // name string in 7-bit ascii, but
 222+ E965             >                org     $-1                 // alter last byte of Name just above to set
 222+ E964 CD          >                db      {b $} | END_BIT     // msb as name end
 222+ E965             >
 222+ E965 56 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 222+ E967             >Prev_Ptr        defl    Heap_Ptr
 222+ E967             >
 222+ E967             >mirror_Ptr      defl    $
 222+ E967             >
 222+ E967 67 32       >                dw      Dict_Ptr + 2        // xt
 222+ E969             >Heap_Ptr        defl    $ - $E000           // save current HP
 222+ E969             >
 222+ E969             >Current_HP      defl  $ - $E000             // used to set HP once!
 222+ E969             >
 222+ E969             >//              ______________________________________________________________________
 222+ E969             >//              Dictionary part
 222+ E969             >
 222+ E969             >                org     Dict_Ptr
 222+ 3265             >
 222+ 3265 67 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 222+ 3267             >
 222+ 3267             >WARM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 222+ 3267 CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 222+ 326A             >
 222+ 326A             >
 222+ 326A             >                endif           ; ok        // for other definitions it "points" the correct handler
 222+ 326A             >                // Use of "; ok" to suppress "warning[fwdref]"
 222+ 326A             >
 222+ 326A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 223+ 326A 32 36                        dw      BLK_INIT                // blk-init
 224+ 326C                          //  dw      SPLASH                  // splash
 225+ 326C                          //  dw      LIT, 7, EMIT            // 7 emit
 226+ 326C 44 32                        dw      ABORT                   // abort
 227+ 326E                          //  dw      EXIT                    // exit
 228+ 326E
 229+ 326E              //  ______________________________________________________________________
 230+ 326E              //
 231+ 326E              // cold         --
 232+ 326E                              Colon_Def COLD, "COLD", is_normal
 232+ 326E             >                New_Def  COLD, "COLD", Enter_Ptr, is_normal ; ok
 232+ 326E             >
 232+ 326E             >Dict_Ptr        defl    $
 232+ 326E             >
 232+ 326E             >//              ______________________________________________________________________
 232+ 326E             >//              Heap part
 232+ 326E             >
 232+ 326E             >
 232+ 326E             >                org     (Heap_Ptr & $1FFF) + $E000
 232+ E969             >
 232+ E969             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 232+ E969             >Latest_Definition defl  Heap_Ptr
 232+ E969             >
 232+ E969             >                // dummy db directives used to calculate length of namec
 232+ E969 43 4F 4C 44 >                db      "COLD"
 232+ E96D             >len_NFA         defl    $ - temp_NFA
 232+ E96D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 232+ E969             >
 232+ E969 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 232+ E96A 43 4F 4C 44 >                db      "COLD"               // name string in 7-bit ascii, but
 232+ E96E             >                org     $-1                 // alter last byte of Name just above to set
 232+ E96D C4          >                db      {b $} | END_BIT     // msb as name end
 232+ E96E             >
 232+ E96E 60 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 232+ E970             >Prev_Ptr        defl    Heap_Ptr
 232+ E970             >
 232+ E970             >mirror_Ptr      defl    $
 232+ E970             >
 232+ E970 70 32       >                dw      Dict_Ptr + 2        // xt
 232+ E972             >Heap_Ptr        defl    $ - $E000           // save current HP
 232+ E972             >
 232+ E972             >Current_HP      defl  $ - $E000             // used to set HP once!
 232+ E972             >
 232+ E972             >//              ______________________________________________________________________
 232+ E972             >//              Dictionary part
 232+ E972             >
 232+ E972             >                org     Dict_Ptr
 232+ 326E             >
 232+ 326E 70 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 232+ 3270             >
 232+ 3270             >COLD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 232+ 3270 CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 232+ 3273             >
 232+ 3273             >
 232+ 3273             >                endif           ; ok        // for other definitions it "points" the correct handler
 232+ 3273             >                // Use of "; ok" to suppress "warning[fwdref]"
 232+ 3273             >
 232+ 3273             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 233+ 3273 EE 26 EE 26                  dw      NOOP, NOOP
 234+ 3277 3D 20 12 20                  dw      LIT, S0_origin          // [ hex $12 +origin ] Literal
 235+ 327B 3D 20 2E 20                  dw      LIT, USER_Pointer       // [ hex $3E +origin ] literal
 236+ 327F 31 26                        dw      FETCH                   // @
 237+ 3281 3D 20 06 00                  dw      LIT, 6, PLUS            // 6 +
 237+ 3285 43 25
 238+ 3287 3D 20 16 00                  dw      LIT, 22                 // 22
 239+ 328B 32 24                        dw      CMOVE
 240+ 328D 3D 20 0C 20                  dw      LIT, Latest_origin      // [ hex 0C +origin ] literal
 241+ 3291 31 26                        dw      FETCH                   // @
 242+ 3293 3D 20 E4 31                  dw      LIT, Forth_Latest_Ptr   // [ ' forth >body 4 + ] Literal
 243+ 3297 3B 26                        dw      STORE                   // !
 244+ 3299 27 27 C2 27                  dw      ZERO, NMODE, STORE      // 0 nmode !
 244+ 329D 3B 26
 245+ 329F B0 27 31 26                  dw      FIRST, FETCH, DUP       // first @ dup
 245+ 32A3 C7 25
 246+ 32A5 1C 28 3B 26                  dw      USED, STORE             // used !
 247+ 32A9 22 28 3B 26                  dw      PREV, STORE             // prev !
 248+ 32AD 3D 20 04 00                  dw      LIT, 4, PLACE, STORE    // 4 place !
 248+ 32B1 2E 28 3B 26
 249+ 32B5              //              dw      LIT, 8
 250+ 32B5              //              dw      LIT, FLAGS2, CSTORE     // 8 5C6A c!
 251+ 32B5 D3 36                        dw      EMPTY_BUFFERS
 252+ 32B7 27 27 C8 27                  dw      ZERO, BLK, STORE
 252+ 32BB 3B 26
 253+ 32BD 27 27 34 28                  dw      ZERO, SOURCE_ID, STORE
 253+ 32C1 3B 26
 254+ 32C3
 255+ 32C3 3D 20 1A 00                  dw      LIT, 26, EMITC    // unlimited scroll
 255+ 32C7 39 22
 256+ 32C9 27 27 39 22                  dw      ZERO, EMITC
 257+ 32CD
 258+ 32CD 67 32        Warm_Start:     dw      WARM
 259+ 32CF 70 32        Cold_Start:     dw      COLD
 260+ 32D1              //              dw      EXIT
 261+ 32D1
 262+ 32D1
 263+ 32D1              //  ______________________________________________________________________
 264+ 32D1
 265+ 32D1              Tools_vForth_Directory
 266+ 32D1 43 3A 2F 74                  db      "C:/tools/vForth/", $FF
 266+ 32D5 6F 6F 6C 73
 266+ 32D9 2F 76 46 6F
 266+ 32DD 72 74 68 2F
 266+ 32E1 FF
 267+ 32E2 43 3A 2F 64  Filename_Ram7:  db      "C:/dot/vforth.bin",0
 267+ 32E6 6F 74 2F 76
 267+ 32EA 66 6F 72 74
 267+ 32EE 68 2E 62 69
 267+ 32F2 6E 00
 268+ 32F4
 269+ 32F4              Saved_Speed:
 270+ 32F4 00                           db      0
 271+ 32F5 02 03 04 05  Saved_MMU       db      2,3,4,5,6,7   // MMU2-MMU7
 271+ 32F9 06 07
 272+ 32FB
 273+ 32FB              Saved_Layer:
 274+ 32FB 00                           db      0           // graphics current mode
 275+ 32FC
 276+ 32FC 00 00        Saved_Basic_Add dw      0
 277+ 32FE
 278+ 32FE              //  ______________________________________________________________________
 279+ 32FE              WarmRoutine:
 280+ 32FE              ColdRoutine:
 281+ 32FE              //  ______________________________________________________________________
 282+ 32FE              // 0.
 283+ 32FE ED 73 08 20                  ld      (SP_Basic), sp
 284+ 3302 31 00 40                     ld      sp, $4000               // safe area
 285+ 3305 D9                           exx
 286+ 3306 22 FC 32                     ld      (Saved_Basic_Add), hl   //  save Basic's h'l' return address
 287+ 3309 D9                           exx
 288+ 330A
 289+ 330A              //  ______________________________________________________________________
 290+ 330A              // 1.
 291+ 330A              // Accepts one parameter from Basic as the filename to load
 292+ 330A 7C                           ld      a, h
 293+ 330B B5                           or      l
 294+ 330C 28 15                        jr      z, Skip_Parameter
 295+ 330E
 296+ 330E 11 43 3F                     ld      de, Param_From_Basic
 297+ 3311 01 00 00                     ld      bc, 0
 298+ 3314              Parameter_Loop:
 299+ 3314 7E                           ld      a, (hl)
 300+ 3315 FE 3A                        cp      ':'
 301+ 3317 28 08                        jr      z, End_Parameter
 302+ 3319 FE 0D                        cp      $0D
 303+ 331B 28 04                        jr      z, End_Parameter
 304+ 331D ED A0                        ldi
 305+ 331F 18 F3                        jr      Parameter_Loop
 306+ 3321              End_Parameter:
 307+ 3321                              // append 0x00
 308+ 3321 AF                           xor     a
 309+ 3322 12                           ld      (de), a
 310+ 3323                          //  ld      hl, 0
 311+ 3323                          //  sbc     hl, bc
 312+ 3323                          //  ld      a, l
 313+ 3323                          //  ld      (Len_Filename), a
 314+ 3323              Skip_Parameter:
 315+ 3323
 316+ 3323              //  ______________________________________________________________________
 317+ 3323              // 2. prepare save-area address and hw register port
 318+ 3323 21 F4 32                     ld      hl, Saved_Speed     // save-area
 319+ 3326              //              ld      bc, $243B               // hw-register port
 320+ 3326              //  ______________________________________________________________________
 321+ 3326              // 2.1
 322+ 3326              // ask / read speed and MMU status
 323+ 3326 3E 07                        ld      a ,$07                  // read current speed
 324+ 3328 CD E1 33                     call    Get_MMU_status
 325+ 332B 16 03                        ld      d, 3                    // set top speed
 326+ 332D B2                           or      d                       // reuse data just read
 327+ 332E ED 92 07                     nextreg 07, a
 328+ 3331
 329+ 3331 1E 06                        ld      e, 6                    // loop limit
 330+ 3333              MMU_read_loop:
 331+ 3333 3E 58                        ld      a, $58                  // MMU2-MMU7 ($52-$57)
 332+ 3335 93                           sub     e
 333+ 3336 CD E1 33                     call    Get_MMU_status
 334+ 3339 1D                           dec     e
 335+ 333A 20 F7                        jr      nz, MMU_read_loop
 336+ 333C              //  ______________________________________________________________________
 337+ 333C              // 2.2
 338+ 333C              // save current LAYER status
 339+ 333C
 340+ 333C 11 D5 01                     ld      de, $01D5   // on success set carry-flag
 341+ 333F 0E 07                        ld      c, 7        // necessary to call M_P3DOS
 342+ 3341 3E 00                        ld      a, 0        // query current status
 343+ 3343 CF                           rst     8
 344+ 3344 94                           db      $94         // carry flag set on success
 345+ 3345
 346+ 3345 32 FB 32                     ld      (Saved_Layer), a     // store after MMUs
 347+ 3348              //  ______________________________________________________________________
 348+ 3348              // 3.
 349+ 3348              // Reserve from OS twelve pages from $1D upward.
 350+ 3348 CD BC 33                     call    Restore_Reserve_MMU     // multiple IDE_BANK  !
 351+ 334B
 352+ 334B              //  ______________________________________________________________________
 353+ 334B              // 4.
 354+ 334B              // Backup MMU2 content to page $28
 355+ 334B 21 00 60                     ld      hl, $6000
 356+ 334E 11 00 40                     ld      de, $4000
 357+ 3351 CD 9B 33                     call    Backup_Restore_MMU
 358+ 3354
 359+ 3354              //  ______________________________________________________________________
 360+ 3354              // 5.
 361+ 3354              // Set current drive/directory
 362+ 3354
 363+ 3354              //              ld      a, $00
 364+ 3354              //              rst     8
 365+ 3354              //              defb    $89     ; m_getsetdrv
 366+ 3354              //              rst     8
 367+ 3354              //              defb    $89     ; m_getsetdrv
 368+ 3354
 369+ 3354 CD 81 33                     call    Set_Cur_Dir
 370+ 3357
 371+ 3357              //  ______________________________________________________________________
 372+ 3357              // 6.
 373+ 3357              // Setup MMU for Forth system (set MMU3-MMU7 to $20-$1C)
 374+ 3357 CD AB 33                     call    Set_forth_MMU
 375+ 335A
 376+ 335A              //  ______________________________________________________________________
 377+ 335A              // 7.
 378+ 335A              // Get current handle via M_GETHANDLE and load ram
 379+ 335A CF                           rst     8
 380+ 335B 8D                           DEFB    $8d             ; M_GETHANDLE
 381+ 335C F5                           push    af
 382+ 335D 21 00 E0                     ld      hl, $E000
 383+ 3360 01 FF 1F                     ld      bc, $1FFF
 384+ 3363 CF                           rst     8
 385+ 3364 9D                           DEFB    $9D             ; f_read
 386+ 3365 F1                           pop     af
 387+ 3366 CF                           rst     8
 388+ 3367 9B                           DEFB    $9B             ; f_close
 389+ 3368
 390+ 3368              //  ______________________________________________________________________
 391+ 3368              // 8.
 392+ 3368              // set LAYER 1,2
 393+ 3368 D9                           exx
 394+ 3369 01 02 01                     ld      bc, $0102
 395+ 336C CD E7 33                     call    Set_Layer
 396+ 336F
 397+ 336F              //  ______________________________________________________________________
 398+ 336F              // 9.
 399+ 336F              // pre-set the four main 16-bit registers
 400+ 336F ED 7B 12 20                  ld      sp, (S0_origin)         // Calculator Stack Pointer
 401+ 3373 DD 21 34 20                  ld      ix, Next_Ptr            // Inner Interpreter Pointer
 402+ 3377 ED 5B 14 20                  ld      de, (R0_origin)         // Return Stack Pointer
 403+ 337B 01 CF 32                     ld      bc, Cold_Start          // Instruction Pointer
 404+ 337E
 405+ 337E                              // unlimited scrolling: print chr$26;chr$0
 406+ 337E                              // ld      a, 26
 407+ 337E                              // rst     $10
 408+ 337E                              // xor     a
 409+ 337E                              // rst     $10
 410+ 337E
 411+ 337E FB                           ei
 412+ 337F
 413+ 337F                          //  push    ix
 414+ 337F                          //  pop     hl
 415+ 337F                          //  rst     $20
 416+ 337F                              next
 416+ 337F DD E9       >                jp      (ix)
 417+ 3381
 418+ 3381
 419+ 3381              //  ______________________________________________________________________
 420+ 3381              // Routine
 421+ 3381              // set current directory  /tools/vForth
 422+ 3381              Set_Cur_Dir:
 423+ 3381 21 D1 32                     ld      hl, Tools_vForth_Directory
 424+ 3384 11 00 40                     ld      de, $4000 // use some temporary safe zone
 425+ 3387 01 11 00                     ld      bc, 17    // length of Tools_vForth_Directory
 426+ 338A ED B0                        ldir
 427+ 338C D9                           exx
 428+ 338D 21 00 40                     ld      hl, $4000
 429+ 3390                          //  ld      hl, Tools_vForth_Directory
 430+ 3390 D9                           exx
 431+ 3391 11 B1 01                     ld      de, $01B1
 432+ 3394 0E 07                        ld      c, 7
 433+ 3396 3E 00                        ld      a, 0
 434+ 3398 CF                           rst     8
 435+ 3399 94                           db      $94     // carry flag set on success !
 436+ 339A                                              // but we don't care for now, in case
 437+ 339A                                              // later INIT-BLK will issue an error
 438+ 339A C9                           ret
 439+ 339B
 440+ 339B              //  ______________________________________________________________________
 441+ 339B              // Routine, safe backup
 442+ 339B              // INput: hl:$6000, de:$E000 for backup or viceversa for restore.
 443+ 339B              Backup_Restore_MMU:
 444+ 339B ED 91 52 28                  nextreg $52, $28        ;   MMU2  = $6000
 445+ 339F 01 00 20                     ld      bc, $2000
 446+ 33A2 ED B0                        ldir
 447+ 33A4 3A F5 32                     ld      a, (Saved_MMU)
 448+ 33A7 ED 92 52                     nextreg $52, a
 449+ 33AA C9                           ret
 450+ 33AB
 451+ 33AB              //  ______________________________________________________________________
 452+ 33AB              // Routine
 453+ 33AB              // set MMU7 to $20 and laod ram7.bin
 454+ 33AB              Set_forth_MMU:
 455+ 33AB                      ////    nextreg $53, $28         ;   MMU3  = 24576
 456+ 33AB ED 91 54 1D                  nextreg $54, $1D         ;   MMU4  = $8000
 457+ 33AF ED 91 55 1E                  nextreg $55, $1E         ;   MMU5
 458+ 33B3 ED 91 56 1F                  nextreg $56, $1F         ;   MMU6
 459+ 33B7 ED 91 57 20                  nextreg $57, $20         ;   MMU7
 460+ 33BB C9                           ret
 461+ 33BC
 462+ 33BC              //  ______________________________________________________________________
 463+ 33BC              // Routine:
 464+ 33BC              // reserve MMU pages
 465+ 33BC              Restore_Reserve_MMU:
 466+ 33BC 2E 1D                        ld      l, $1D      // first page
 467+ 33BE 26 0C                        ld      h, 8+3+1    // 8 HEAP, 3 MAIN, 1 BACKUP
 468+ 33C0              Reserve_MMU_Loop:
 469+ 33C0 7D                           ld      a, l            // pass page through a
 470+ 33C1 D9                           exx
 471+ 33C2                               // parameters:
 472+ 33C2              Deallocate_MMU:
 473+ 33C2 21 02 00                      ld      hl, $0002      // L=2:reserve E', =3:deallocate, H=0:normal 8k page
 474+ 33C5 5F                            ld      e, a           // E' is bank-id
 475+ 33C6 D9                           exx
 476+ 33C7 E5                           push    hl
 477+ 33C8
 478+ 33C8 0E 07                        ld      c, 07           // page 7 for M_P3DOS
 479+ 33CA 3E 01                        ld      a, 1
 480+ 33CC 11 BD 01                     ld      de, $01BD  // IDE_BANK
 481+ 33CF CF                           rst     8
 482+ 33D0 94                           db      $94     // M_P3DOS
 483+ 33D1
 484+ 33D1 E1                           pop     hl
 485+ 33D2 2C                           inc     l       // next page number
 486+ 33D3 25                           dec     h       // decrease counter.
 487+ 33D4 20 EA                        jr      nz, Reserve_MMU_Loop
 488+ 33D6 C9                           ret
 489+ 33D7
 490+ 33D7              //  ______________________________________________________________________
 491+ 33D7              // Routine
 492+ 33D7              // Input:  bc=$243B, a=reg, hl=array
 493+ 33D7              // Operation: set  hardware register  a  to value at  (hl)
 494+ 33D7              // Output: bc=$243B, a=a+1, hl=hl+1
 495+ 33D7              Put_MMU_status:
 496+ 33D7 56                           ld      d, (hl)
 497+ 33D8 ED 79                        out     (c), a
 498+ 33DA 04                           inc     b        // 253Bh
 499+ 33DB ED 51                        out     (c), d
 500+ 33DD 05                           dec     b        // 243Bh
 501+ 33DE 23                           inc     hl
 502+ 33DF 3C                           inc     a
 503+ 33E0 C9                           ret
 504+ 33E1
 505+ 33E1              //  ______________________________________________________________________
 506+ 33E1              // Routine
 507+ 33E1              // Input:  bc=$243B, a=reg, hl=array
 508+ 33E1              // Operation: get current value of hardware register  a  and store at (hl)
 509+ 33E1              // Output: bc=$243B, a=a+1, hl=hl+1
 510+ 33E1              Get_MMU_status:
 511+ 33E1              //              out     (c), a
 512+ 33E1              //              inc     b        // 253Bh
 513+ 33E1              //              in      d ,(c)
 514+ 33E1              //              dec     b        // 243Bh
 515+ 33E1 CD 38 21                     call    NEXTREG_read
 516+ 33E4 77                           ld      (hl), a
 517+ 33E5 23                           inc     hl
 518+ 33E6 C9                           ret
 519+ 33E7
 520+ 33E7              //  ______________________________________________________________________
 521+ 33E7              // Routine
 522+ 33E7              // set LAYER B,C
 523+ 33E7              // Input: bc=$0102 for Layer 1,2
 524+ 33E7              Set_Layer:
 525+ 33E7 D9                           exx
 526+ 33E8 11 D5 01                     ld      de, $01D5
 527+ 33EB 0E 07                        ld      c, 7
 528+ 33ED 3E 01                        ld      a, 1
 529+ 33EF CF                           rst     8
 530+ 33F0 94                           db      $94
 531+ 33F1 C9                           ret
 532+ 33F2
 533+ 33F2              //  ______________________________________________________________________
 534+ 33F2              //
 535+ 33F2              // basic        --
 536+ 33F2                              New_Def BASIC, "BASIC", is_code, is_normal
 536+ 33F2             >
 536+ 33F2             >Dict_Ptr        defl    $
 536+ 33F2             >
 536+ 33F2             >//              ______________________________________________________________________
 536+ 33F2             >//              Heap part
 536+ 33F2             >
 536+ 33F2             >
 536+ 33F2             >                org     (Heap_Ptr & $1FFF) + $E000
 536+ E972             >
 536+ E972             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 536+ E972             >Latest_Definition defl  Heap_Ptr
 536+ E972             >
 536+ E972             >                // dummy db directives used to calculate length of namec
 536+ E972 42 41 53 49 >                db      "BASIC"
 536+ E976 43          >
 536+ E977             >len_NFA         defl    $ - temp_NFA
 536+ E977             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 536+ E972             >
 536+ E972 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 536+ E973 42 41 53 49 >                db      "BASIC"               // name string in 7-bit ascii, but
 536+ E977 43          >
 536+ E978             >                org     $-1                 // alter last byte of Name just above to set
 536+ E977 C3          >                db      {b $} | END_BIT     // msb as name end
 536+ E978             >
 536+ E978 69 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 536+ E97A             >Prev_Ptr        defl    Heap_Ptr
 536+ E97A             >
 536+ E97A             >mirror_Ptr      defl    $
 536+ E97A             >
 536+ E97A F4 33       >                dw      Dict_Ptr + 2        // xt
 536+ E97C             >Heap_Ptr        defl    $ - $E000           // save current HP
 536+ E97C             >
 536+ E97C             >Current_HP      defl  $ - $E000             // used to set HP once!
 536+ E97C             >
 536+ E97C             >//              ______________________________________________________________________
 536+ E97C             >//              Dictionary part
 536+ E97C             >
 536+ E97C             >                org     Dict_Ptr
 536+ 33F2             >
 536+ 33F2 7A 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 536+ 33F4             >
 536+ 33F4             >BASIC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 536+ 33F4 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 536+ 33F4 ~           >
 536+ 33F4 ~           >
 536+ 33F4             >                endif           ; ok        // for other definitions it "points" the correct handler
 536+ 33F4             >                // Use of "; ok" to suppress "warning[fwdref]"
 536+ 33F4             >
 536+ 33F4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 537+ 33F4
 538+ 33F4              // using dot-command, no more needs to return bc
 539+ 33F4              //              pop     bc                      // return  TOS  value to Basic
 540+ 33F4
 541+ 33F4 F3                           di
 542+ 33F5
 543+ 33F5 31 FC 3F                     ld      sp, $4000 - 4           // Carefully balanced from startup
 544+ 33F8
 545+ 33F8                              // address
 546+ 33F8 21 F4 32                     ld      hl, Saved_Speed
 547+ 33FB 01 3B 24                     ld      bc , $243B
 548+ 33FE
 549+ 33FE                              // set speed
 550+ 33FE 3E 07                        ld      a, $07
 551+ 3400 CD D7 33                     call    Put_MMU_status
 552+ 3403
 553+ 3403                        //    inc     hl
 554+ 3403                        //    inc     hl
 555+ 3403                              // set MMU pages
 556+ 3403 3E 52                        ld      a, $52
 557+ 3405 1E 06                        ld      e, 6
 558+ 3407              MMU_put_loop:
 559+ 3407 CD D7 33                     call    Put_MMU_status
 560+ 340A 1D                           dec     e
 561+ 340B 20 FA                        jr      nz, MMU_put_loop
 562+ 340D              //  ______________________________________________________________________
 563+ 340D                              // restore layer ide mode
 564+ 340D 7E                           ld      a, (hl)
 565+ 340E
 566+ 340E                              // decode what service $01D5 returned at startup
 567+ 340E                              // bits 0..1=layer (0,1,2)
 568+ 340E                              // bits 2..3=sub-mode for layer 1 (0=lores,1=ula,2=hires,3=hicol)
 569+ 340E D9                           exx
 570+ 340F 47                           ld      b, a
 571+ 3410 0F                           rrca
 572+ 3411 0F                           rrca
 573+ 3412 E6 03                        and     3
 574+ 3414 4F                           ld      c, a
 575+ 3415 78                           ld      a, b
 576+ 3416 E6 03                        and     3
 577+ 3418 47                           ld      b, a
 578+ 3419 CD E7 33                     call    Set_Layer
 579+ 341C
 580+ 341C              //  ______________________________________________________________________
 581+ 341C              //
 582+ 341C 21 00 40                     ld      hl, $4000
 583+ 341F 11 00 60                     ld      de, $6000
 584+ 3422 CD 9B 33                     call    Backup_Restore_MMU
 585+ 3425              //  ______________________________________________________________________
 586+ 3425              //
 587+ 3425                              // free 8k pages
 588+ 3425 3E 03                        ld      a, 3
 589+ 3427 32 C3 33                     ld      (Deallocate_MMU+1), a
 590+ 342A CD BC 33                     call    Restore_Reserve_MMU     // multiple IDE_BANK  !
 591+ 342D              //  ______________________________________________________________________
 592+ 342D
 593+ 342D                              // restore basic pointers
 594+ 342D 2A FC 32                     ld      hl, (Saved_Basic_Add)   // restore h'l'
 595+ 3430 D9                           exx
 596+ 3431 ED 7B 08 20                  ld      sp, (SP_Basic)          // restore Basic's SP
 597+ 3435
 598+ 3435 FB                           ei
 599+ 3436
 600+ 3436                              // these two bytes are patched by BLK-INIT with RST8+$FF
 601+ 3436              Exit_with_error:
 602+ 3436 AF                           xor     a
 603+ 3437 76                           halt
 604+ 3438 C9                           ret                             // to where USR Basic was left
 605+ 3439
 606+ 3439              //  ______________________________________________________________________
 607+ 3439              //
 608+ 3439              // +-           n1 n2 -- n3
 609+ 3439              // leaves n1 with the sign of n2 as n3.
 610+ 3439                              Colon_Def PLUS_MINUS, "+-", is_normal
 610+ 3439             >                New_Def  PLUS_MINUS, "+-", Enter_Ptr, is_normal ; ok
 610+ 3439             >
 610+ 3439             >Dict_Ptr        defl    $
 610+ 3439             >
 610+ 3439             >//              ______________________________________________________________________
 610+ 3439             >//              Heap part
 610+ 3439             >
 610+ 3439             >
 610+ 3439             >                org     (Heap_Ptr & $1FFF) + $E000
 610+ E97C             >
 610+ E97C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 610+ E97C             >Latest_Definition defl  Heap_Ptr
 610+ E97C             >
 610+ E97C             >                // dummy db directives used to calculate length of namec
 610+ E97C 2B 2D       >                db      "+-"
 610+ E97E             >len_NFA         defl    $ - temp_NFA
 610+ E97E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 610+ E97C             >
 610+ E97C 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 610+ E97D 2B 2D       >                db      "+-"               // name string in 7-bit ascii, but
 610+ E97F             >                org     $-1                 // alter last byte of Name just above to set
 610+ E97E AD          >                db      {b $} | END_BIT     // msb as name end
 610+ E97F             >
 610+ E97F 72 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 610+ E981             >Prev_Ptr        defl    Heap_Ptr
 610+ E981             >
 610+ E981             >mirror_Ptr      defl    $
 610+ E981             >
 610+ E981 3B 34       >                dw      Dict_Ptr + 2        // xt
 610+ E983             >Heap_Ptr        defl    $ - $E000           // save current HP
 610+ E983             >
 610+ E983             >Current_HP      defl  $ - $E000             // used to set HP once!
 610+ E983             >
 610+ E983             >//              ______________________________________________________________________
 610+ E983             >//              Dictionary part
 610+ E983             >
 610+ E983             >                org     Dict_Ptr
 610+ 3439             >
 610+ 3439 81 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 610+ 343B             >
 610+ 343B             >PLUS_MINUS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 610+ 343B CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 610+ 343E             >
 610+ 343E             >
 610+ 343E             >                endif           ; ok        // for other definitions it "points" the correct handler
 610+ 343E             >                // Use of "; ok" to suppress "warning[fwdref]"
 610+ 343E             >
 610+ 343E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 611+ 343E 28 25                        dw      ZLESS                   // 0<
 612+ 3440                                                              // if
 613+ 3440 8F 20                        dw      ZBRANCH
 614+ 3442 04 00                        dw      Plus_Minus_Endif - $
 615+ 3444 83 25                        dw          MINUS               //      minus
 616+ 3446              Plus_Minus_Endif:                               // endif
 617+ 3446 F1 24                        dw      EXIT                    // ;
 618+ 3448
 619+ 3448              //  ______________________________________________________________________
 620+ 3448              //
 621+ 3448              // d+-          d1 n -- d2
 622+ 3448              // leaves d1 with the sign of n as d2.
 623+ 3448                              Colon_Def DPLUS_MINUS, "D+-", is_normal
 623+ 3448             >                New_Def  DPLUS_MINUS, "D+-", Enter_Ptr, is_normal ; ok
 623+ 3448             >
 623+ 3448             >Dict_Ptr        defl    $
 623+ 3448             >
 623+ 3448             >//              ______________________________________________________________________
 623+ 3448             >//              Heap part
 623+ 3448             >
 623+ 3448             >
 623+ 3448             >                org     (Heap_Ptr & $1FFF) + $E000
 623+ E983             >
 623+ E983             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 623+ E983             >Latest_Definition defl  Heap_Ptr
 623+ E983             >
 623+ E983             >                // dummy db directives used to calculate length of namec
 623+ E983 44 2B 2D    >                db      "D+-"
 623+ E986             >len_NFA         defl    $ - temp_NFA
 623+ E986             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 623+ E983             >
 623+ E983 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 623+ E984 44 2B 2D    >                db      "D+-"               // name string in 7-bit ascii, but
 623+ E987             >                org     $-1                 // alter last byte of Name just above to set
 623+ E986 AD          >                db      {b $} | END_BIT     // msb as name end
 623+ E987             >
 623+ E987 7C 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 623+ E989             >Prev_Ptr        defl    Heap_Ptr
 623+ E989             >
 623+ E989             >mirror_Ptr      defl    $
 623+ E989             >
 623+ E989 4A 34       >                dw      Dict_Ptr + 2        // xt
 623+ E98B             >Heap_Ptr        defl    $ - $E000           // save current HP
 623+ E98B             >
 623+ E98B             >Current_HP      defl  $ - $E000             // used to set HP once!
 623+ E98B             >
 623+ E98B             >//              ______________________________________________________________________
 623+ E98B             >//              Dictionary part
 623+ E98B             >
 623+ E98B             >                org     Dict_Ptr
 623+ 3448             >
 623+ 3448 89 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 623+ 344A             >
 623+ 344A             >DPLUS_MINUS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 623+ 344A CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 623+ 344D             >
 623+ 344D             >
 623+ 344D             >                endif           ; ok        // for other definitions it "points" the correct handler
 623+ 344D             >                // Use of "; ok" to suppress "warning[fwdref]"
 623+ 344D             >
 623+ 344D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 624+ 344D 28 25                        dw      ZLESS                   // 0<
 625+ 344F                                                              // if
 626+ 344F 8F 20                        dw      ZBRANCH
 627+ 3451 04 00                        dw      DPlus_Minus_Endif - $
 628+ 3453 90 25                        dw          DMINUS              //      dminus
 629+ 3455              DPlus_Minus_Endif:                              // endif
 630+ 3455 F1 24                        dw      EXIT                    // ;
 631+ 3457
 632+ 3457              //  ______________________________________________________________________
 633+ 3457              //
 634+ 3457              // abs          n1 -- n2
 635+ 3457                              Colon_Def ABS_OP, "ABS", is_normal
 635+ 3457             >                New_Def  ABS_OP, "ABS", Enter_Ptr, is_normal ; ok
 635+ 3457             >
 635+ 3457             >Dict_Ptr        defl    $
 635+ 3457             >
 635+ 3457             >//              ______________________________________________________________________
 635+ 3457             >//              Heap part
 635+ 3457             >
 635+ 3457             >
 635+ 3457             >                org     (Heap_Ptr & $1FFF) + $E000
 635+ E98B             >
 635+ E98B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 635+ E98B             >Latest_Definition defl  Heap_Ptr
 635+ E98B             >
 635+ E98B             >                // dummy db directives used to calculate length of namec
 635+ E98B 41 42 53    >                db      "ABS"
 635+ E98E             >len_NFA         defl    $ - temp_NFA
 635+ E98E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 635+ E98B             >
 635+ E98B 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 635+ E98C 41 42 53    >                db      "ABS"               // name string in 7-bit ascii, but
 635+ E98F             >                org     $-1                 // alter last byte of Name just above to set
 635+ E98E D3          >                db      {b $} | END_BIT     // msb as name end
 635+ E98F             >
 635+ E98F 83 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 635+ E991             >Prev_Ptr        defl    Heap_Ptr
 635+ E991             >
 635+ E991             >mirror_Ptr      defl    $
 635+ E991             >
 635+ E991 59 34       >                dw      Dict_Ptr + 2        // xt
 635+ E993             >Heap_Ptr        defl    $ - $E000           // save current HP
 635+ E993             >
 635+ E993             >Current_HP      defl  $ - $E000             // used to set HP once!
 635+ E993             >
 635+ E993             >//              ______________________________________________________________________
 635+ E993             >//              Dictionary part
 635+ E993             >
 635+ E993             >                org     Dict_Ptr
 635+ 3457             >
 635+ 3457 91 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 635+ 3459             >
 635+ 3459             >ABS_OP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 635+ 3459 CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 635+ 345C             >
 635+ 345C             >
 635+ 345C             >                endif           ; ok        // for other definitions it "points" the correct handler
 635+ 345C             >                // Use of "; ok" to suppress "warning[fwdref]"
 635+ 345C             >
 635+ 345C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 636+ 345C C7 25                        dw      DUP                     // dup
 637+ 345E 3B 34                        dw      PLUS_MINUS              // +-
 638+ 3460 F1 24                        dw      EXIT                    // ;
 639+ 3462
 640+ 3462              //  ______________________________________________________________________
 641+ 3462              //
 642+ 3462              // dabs         d1 -- d2
 643+ 3462                              Colon_Def DABS, "DABS", is_normal
 643+ 3462             >                New_Def  DABS, "DABS", Enter_Ptr, is_normal ; ok
 643+ 3462             >
 643+ 3462             >Dict_Ptr        defl    $
 643+ 3462             >
 643+ 3462             >//              ______________________________________________________________________
 643+ 3462             >//              Heap part
 643+ 3462             >
 643+ 3462             >
 643+ 3462             >                org     (Heap_Ptr & $1FFF) + $E000
 643+ E993             >
 643+ E993             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 643+ E993             >Latest_Definition defl  Heap_Ptr
 643+ E993             >
 643+ E993             >                // dummy db directives used to calculate length of namec
 643+ E993 44 41 42 53 >                db      "DABS"
 643+ E997             >len_NFA         defl    $ - temp_NFA
 643+ E997             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 643+ E993             >
 643+ E993 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 643+ E994 44 41 42 53 >                db      "DABS"               // name string in 7-bit ascii, but
 643+ E998             >                org     $-1                 // alter last byte of Name just above to set
 643+ E997 D3          >                db      {b $} | END_BIT     // msb as name end
 643+ E998             >
 643+ E998 8B 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 643+ E99A             >Prev_Ptr        defl    Heap_Ptr
 643+ E99A             >
 643+ E99A             >mirror_Ptr      defl    $
 643+ E99A             >
 643+ E99A 64 34       >                dw      Dict_Ptr + 2        // xt
 643+ E99C             >Heap_Ptr        defl    $ - $E000           // save current HP
 643+ E99C             >
 643+ E99C             >Current_HP      defl  $ - $E000             // used to set HP once!
 643+ E99C             >
 643+ E99C             >//              ______________________________________________________________________
 643+ E99C             >//              Dictionary part
 643+ E99C             >
 643+ E99C             >                org     Dict_Ptr
 643+ 3462             >
 643+ 3462 9A 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 643+ 3464             >
 643+ 3464             >DABS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 643+ 3464 CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 643+ 3467             >
 643+ 3467             >
 643+ 3467             >                endif           ; ok        // for other definitions it "points" the correct handler
 643+ 3467             >                // Use of "; ok" to suppress "warning[fwdref]"
 643+ 3467             >
 643+ 3467             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 644+ 3467 C7 25                        dw      DUP                     // dup
 645+ 3469 4A 34                        dw      DPLUS_MINUS             // d+-
 646+ 346B F1 24                        dw      EXIT                    // ;
 647+ 346D
 648+ 346D              //  ______________________________________________________________________
 649+ 346D              //
 650+ 346D              // m*           n1 n2 -- d
 651+ 346D              // multiply two integer giving a double
 652+ 346D                              Colon_Def MMUL, "M*", is_normal
 652+ 346D             >                New_Def  MMUL, "M*", Enter_Ptr, is_normal ; ok
 652+ 346D             >
 652+ 346D             >Dict_Ptr        defl    $
 652+ 346D             >
 652+ 346D             >//              ______________________________________________________________________
 652+ 346D             >//              Heap part
 652+ 346D             >
 652+ 346D             >
 652+ 346D             >                org     (Heap_Ptr & $1FFF) + $E000
 652+ E99C             >
 652+ E99C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 652+ E99C             >Latest_Definition defl  Heap_Ptr
 652+ E99C             >
 652+ E99C             >                // dummy db directives used to calculate length of namec
 652+ E99C 4D 2A       >                db      "M*"
 652+ E99E             >len_NFA         defl    $ - temp_NFA
 652+ E99E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 652+ E99C             >
 652+ E99C 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 652+ E99D 4D 2A       >                db      "M*"               // name string in 7-bit ascii, but
 652+ E99F             >                org     $-1                 // alter last byte of Name just above to set
 652+ E99E AA          >                db      {b $} | END_BIT     // msb as name end
 652+ E99F             >
 652+ E99F 93 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 652+ E9A1             >Prev_Ptr        defl    Heap_Ptr
 652+ E9A1             >
 652+ E9A1             >mirror_Ptr      defl    $
 652+ E9A1             >
 652+ E9A1 6F 34       >                dw      Dict_Ptr + 2        // xt
 652+ E9A3             >Heap_Ptr        defl    $ - $E000           // save current HP
 652+ E9A3             >
 652+ E9A3             >Current_HP      defl  $ - $E000             // used to set HP once!
 652+ E9A3             >
 652+ E9A3             >//              ______________________________________________________________________
 652+ E9A3             >//              Dictionary part
 652+ E9A3             >
 652+ E9A3             >                org     Dict_Ptr
 652+ 346D             >
 652+ 346D A1 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 652+ 346F             >
 652+ 346F             >MMUL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 652+ 346F CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 652+ 3472             >
 652+ 3472             >
 652+ 3472             >                endif           ; ok        // for other definitions it "points" the correct handler
 652+ 3472             >                // Use of "; ok" to suppress "warning[fwdref]"
 652+ 3472             >
 652+ 3472             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 653+ 3472 0F 26 CC 24                  dw      TWO_DUP, XOR_OP, TO_R   // 2dup xor >r
 653+ 3476 FB 24
 654+ 3478 59 34 C0 25                  dw      ABS_OP, SWAP            // abs swap
 655+ 347C 59 34 56 24                  dw      ABS_OP, UM_MUL          // abs um*
 656+ 3480 06 25 4A 34                  dw      R_TO, DPLUS_MINUS       // r> d+-
 657+ 3484 F1 24                        dw      EXIT                    // ;
 658+ 3486
 659+ 3486              //  ______________________________________________________________________
 660+ 3486              //
 661+ 3486              // sm/rem       d n -- q r
 662+ 3486              // Symmetric division: divides a double into n giving quotient q and remainder r
 663+ 3486              // the remainder has the sign of d.
 664+ 3486                              Colon_Def SMDIVM, "SM/REM", is_normal
 664+ 3486             >                New_Def  SMDIVM, "SM/REM", Enter_Ptr, is_normal ; ok
 664+ 3486             >
 664+ 3486             >Dict_Ptr        defl    $
 664+ 3486             >
 664+ 3486             >//              ______________________________________________________________________
 664+ 3486             >//              Heap part
 664+ 3486             >
 664+ 3486             >
 664+ 3486             >                org     (Heap_Ptr & $1FFF) + $E000
 664+ E9A3             >
 664+ E9A3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 664+ E9A3             >Latest_Definition defl  Heap_Ptr
 664+ E9A3             >
 664+ E9A3             >                // dummy db directives used to calculate length of namec
 664+ E9A3 53 4D 2F 52 >                db      "SM/REM"
 664+ E9A7 45 4D       >
 664+ E9A9             >len_NFA         defl    $ - temp_NFA
 664+ E9A9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 664+ E9A3             >
 664+ E9A3 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 664+ E9A4 53 4D 2F 52 >                db      "SM/REM"               // name string in 7-bit ascii, but
 664+ E9A8 45 4D       >
 664+ E9AA             >                org     $-1                 // alter last byte of Name just above to set
 664+ E9A9 CD          >                db      {b $} | END_BIT     // msb as name end
 664+ E9AA             >
 664+ E9AA 9C 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 664+ E9AC             >Prev_Ptr        defl    Heap_Ptr
 664+ E9AC             >
 664+ E9AC             >mirror_Ptr      defl    $
 664+ E9AC             >
 664+ E9AC 88 34       >                dw      Dict_Ptr + 2        // xt
 664+ E9AE             >Heap_Ptr        defl    $ - $E000           // save current HP
 664+ E9AE             >
 664+ E9AE             >Current_HP      defl  $ - $E000             // used to set HP once!
 664+ E9AE             >
 664+ E9AE             >//              ______________________________________________________________________
 664+ E9AE             >//              Dictionary part
 664+ E9AE             >
 664+ E9AE             >                org     Dict_Ptr
 664+ 3486             >
 664+ 3486 AC 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 664+ 3488             >
 664+ 3488             >SMDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 664+ 3488 CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 664+ 348B             >
 664+ 348B             >
 664+ 348B             >                endif           ; ok        // for other definitions it "points" the correct handler
 664+ 348B             >                // Use of "; ok" to suppress "warning[fwdref]"
 664+ 348B             >
 664+ 348B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 665+ 348B A3 25 FB 24                  dw      OVER, TO_R, TO_R        // over >r >r
 665+ 348F FB 24
 666+ 3491 64 34 11 25                  dw      DABS, R_OP, ABS_OP      // dabs r abs
 666+ 3495 59 34
 667+ 3497 7E 24                        dw      UMDIVMOD                // um/mod
 668+ 3499 06 25                        dw      R_TO                    // r>
 669+ 349B 11 25 CC 24                  dw      R_OP, XOR_OP            // r xor
 670+ 349F 3B 34 C0 25                  dw      PLUS_MINUS, SWAP        // +- swap
 671+ 34A3 06 25                        dw      R_TO                    // r>
 672+ 34A5 3B 34 C0 25                  dw      PLUS_MINUS, SWAP        // +- swap
 673+ 34A9 F1 24                        dw      EXIT                    // ;
 674+ 34AB
 675+ 34AB              //  ______________________________________________________________________
 676+ 34AB              //
 677+ 34AB              // fm/mod       d n -- q r
 678+ 34AB              // Floored division: divides a double into n giving quotient q and remainder r
 679+ 34AB              // the remainder has the sign of d.
 680+ 34AB                              Colon_Def FMDIVM, "FM/MOD", is_normal
 680+ 34AB             >                New_Def  FMDIVM, "FM/MOD", Enter_Ptr, is_normal ; ok
 680+ 34AB             >
 680+ 34AB             >Dict_Ptr        defl    $
 680+ 34AB             >
 680+ 34AB             >//              ______________________________________________________________________
 680+ 34AB             >//              Heap part
 680+ 34AB             >
 680+ 34AB             >
 680+ 34AB             >                org     (Heap_Ptr & $1FFF) + $E000
 680+ E9AE             >
 680+ E9AE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 680+ E9AE             >Latest_Definition defl  Heap_Ptr
 680+ E9AE             >
 680+ E9AE             >                // dummy db directives used to calculate length of namec
 680+ E9AE 46 4D 2F 4D >                db      "FM/MOD"
 680+ E9B2 4F 44       >
 680+ E9B4             >len_NFA         defl    $ - temp_NFA
 680+ E9B4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 680+ E9AE             >
 680+ E9AE 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 680+ E9AF 46 4D 2F 4D >                db      "FM/MOD"               // name string in 7-bit ascii, but
 680+ E9B3 4F 44       >
 680+ E9B5             >                org     $-1                 // alter last byte of Name just above to set
 680+ E9B4 C4          >                db      {b $} | END_BIT     // msb as name end
 680+ E9B5             >
 680+ E9B5 A3 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 680+ E9B7             >Prev_Ptr        defl    Heap_Ptr
 680+ E9B7             >
 680+ E9B7             >mirror_Ptr      defl    $
 680+ E9B7             >
 680+ E9B7 AD 34       >                dw      Dict_Ptr + 2        // xt
 680+ E9B9             >Heap_Ptr        defl    $ - $E000           // save current HP
 680+ E9B9             >
 680+ E9B9             >Current_HP      defl  $ - $E000             // used to set HP once!
 680+ E9B9             >
 680+ E9B9             >//              ______________________________________________________________________
 680+ E9B9             >//              Dictionary part
 680+ E9B9             >
 680+ E9B9             >                org     Dict_Ptr
 680+ 34AB             >
 680+ 34AB B7 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 680+ 34AD             >
 680+ 34AD             >FMDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 680+ 34AD CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 680+ 34B0             >
 680+ 34B0             >
 680+ 34B0             >                endif           ; ok        // for other definitions it "points" the correct handler
 680+ 34B0             >                // Use of "; ok" to suppress "warning[fwdref]"
 680+ 34B0             >
 680+ 34B0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 681+ 34B0 C7 25 FB 24                  dw      DUP, TO_R               // dup >r
 682+ 34B4 88 34                        dw      SMDIVM
 683+ 34B6 A3 25 C7 25                  dw      OVER, DUP
 684+ 34BA 16 25 16 25                  dw      ZEQUAL, ZEQUAL
 685+ 34BE C0 25 28 25                  dw      SWAP, ZLESS
 686+ 34C2 11 25 28 25                  dw      R_OP, ZLESS
 687+ 34C6 CC 24 B1 24                  dw      XOR_OP, AND_OP
 688+ 34CA 8F 20                        dw      ZBRANCH
 689+ 34CC 10 00                        dw      Fm_Mod_Else - $
 690+ 34CE 63 25                        dw          ONE_SUBTRACT
 691+ 34D0 C0 25 06 25                  dw          SWAP, R_TO
 692+ 34D4 43 25 C0 25                  dw          PLUS, SWAP
 693+ 34D8 82 20                        dw      BRANCH
 694+ 34DA 06 00                        dw      Fm_Mod_Endif - $
 695+ 34DC              Fm_Mod_Else:
 696+ 34DC 06 25 AC 25                  dw          R_TO, DROP
 697+ 34E0              Fm_Mod_Endif:
 698+ 34E0 F1 24                        dw      EXIT
 699+ 34E2              //              dw      TWO_DUP                 // 2dup
 700+ 34E2              //              dw      XOR_OP, TO_R, TO_R      // xor >r >r
 701+ 34E2              //              dw      DABS, R_OP, ABS_OP      // dabs r abs
 702+ 34E2              //              dw      UMDIVMOD                // um/mod
 703+ 34E2              //              dw      SWAP                    // swap
 704+ 34E2              //              dw      II, ZLESS               // i'
 705+ 34E2              //              dw      ONE, AND_OP, PLUS       // 0< 1 and +
 706+ 34E2              //              dw      R_TO                    // r>
 707+ 34E2              //              dw      PLUS_MINUS, SWAP        // +- swap
 708+ 34E2              //              dw      R_OP                    // r@
 709+ 34E2              //              dw      ZLESS                   // i'
 710+ 34E2              //              dw      ONE, AND_OP, PLUS       // 0< 1 and +
 711+ 34E2              //              dw      R_TO                    // r>
 712+ 34E2              //              dw      PLUS_MINUS              // +- swap
 713+ 34E2              //              dw      EXIT                    // ;
 714+ 34E2
 715+ 34E2              //  ______________________________________________________________________
 716+ 34E2              //
 717+ 34E2              // m/mod        d n -- q r
 718+ 34E2              // multiply two integer giving a double
 719+ 34E2                              Colon_Def MDIVM, "M/MOD", is_normal
 719+ 34E2             >                New_Def  MDIVM, "M/MOD", Enter_Ptr, is_normal ; ok
 719+ 34E2             >
 719+ 34E2             >Dict_Ptr        defl    $
 719+ 34E2             >
 719+ 34E2             >//              ______________________________________________________________________
 719+ 34E2             >//              Heap part
 719+ 34E2             >
 719+ 34E2             >
 719+ 34E2             >                org     (Heap_Ptr & $1FFF) + $E000
 719+ E9B9             >
 719+ E9B9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 719+ E9B9             >Latest_Definition defl  Heap_Ptr
 719+ E9B9             >
 719+ E9B9             >                // dummy db directives used to calculate length of namec
 719+ E9B9 4D 2F 4D 4F >                db      "M/MOD"
 719+ E9BD 44          >
 719+ E9BE             >len_NFA         defl    $ - temp_NFA
 719+ E9BE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 719+ E9B9             >
 719+ E9B9 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 719+ E9BA 4D 2F 4D 4F >                db      "M/MOD"               // name string in 7-bit ascii, but
 719+ E9BE 44          >
 719+ E9BF             >                org     $-1                 // alter last byte of Name just above to set
 719+ E9BE C4          >                db      {b $} | END_BIT     // msb as name end
 719+ E9BF             >
 719+ E9BF AE 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 719+ E9C1             >Prev_Ptr        defl    Heap_Ptr
 719+ E9C1             >
 719+ E9C1             >mirror_Ptr      defl    $
 719+ E9C1             >
 719+ E9C1 E4 34       >                dw      Dict_Ptr + 2        // xt
 719+ E9C3             >Heap_Ptr        defl    $ - $E000           // save current HP
 719+ E9C3             >
 719+ E9C3             >Current_HP      defl  $ - $E000             // used to set HP once!
 719+ E9C3             >
 719+ E9C3             >//              ______________________________________________________________________
 719+ E9C3             >//              Dictionary part
 719+ E9C3             >
 719+ E9C3             >                org     Dict_Ptr
 719+ 34E2             >
 719+ 34E2 C1 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 719+ 34E4             >
 719+ 34E4             >MDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 719+ 34E4 CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 719+ 34E7             >
 719+ 34E7             >
 719+ 34E7             >                endif           ; ok        // for other definitions it "points" the correct handler
 719+ 34E7             >                // Use of "; ok" to suppress "warning[fwdref]"
 719+ 34E7             >
 719+ 34E7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 720+ 34E7 88 34                        dw      SMDIVM
 721+ 34E9 F1 24                        dw      EXIT                    // ;
 722+ 34EB
 723+ 34EB              //  ______________________________________________________________________
 724+ 34EB              //
 725+ 34EB              // m/           d n -- q
 726+ 34EB              // multiply two integer giving a double
 727+ 34EB                              Colon_Def MDIV, "M/", is_normal
 727+ 34EB             >                New_Def  MDIV, "M/", Enter_Ptr, is_normal ; ok
 727+ 34EB             >
 727+ 34EB             >Dict_Ptr        defl    $
 727+ 34EB             >
 727+ 34EB             >//              ______________________________________________________________________
 727+ 34EB             >//              Heap part
 727+ 34EB             >
 727+ 34EB             >
 727+ 34EB             >                org     (Heap_Ptr & $1FFF) + $E000
 727+ E9C3             >
 727+ E9C3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 727+ E9C3             >Latest_Definition defl  Heap_Ptr
 727+ E9C3             >
 727+ E9C3             >                // dummy db directives used to calculate length of namec
 727+ E9C3 4D 2F       >                db      "M/"
 727+ E9C5             >len_NFA         defl    $ - temp_NFA
 727+ E9C5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 727+ E9C3             >
 727+ E9C3 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 727+ E9C4 4D 2F       >                db      "M/"               // name string in 7-bit ascii, but
 727+ E9C6             >                org     $-1                 // alter last byte of Name just above to set
 727+ E9C5 AF          >                db      {b $} | END_BIT     // msb as name end
 727+ E9C6             >
 727+ E9C6 B9 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 727+ E9C8             >Prev_Ptr        defl    Heap_Ptr
 727+ E9C8             >
 727+ E9C8             >mirror_Ptr      defl    $
 727+ E9C8             >
 727+ E9C8 ED 34       >                dw      Dict_Ptr + 2        // xt
 727+ E9CA             >Heap_Ptr        defl    $ - $E000           // save current HP
 727+ E9CA             >
 727+ E9CA             >Current_HP      defl  $ - $E000             // used to set HP once!
 727+ E9CA             >
 727+ E9CA             >//              ______________________________________________________________________
 727+ E9CA             >//              Dictionary part
 727+ E9CA             >
 727+ E9CA             >                org     Dict_Ptr
 727+ 34EB             >
 727+ 34EB C8 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 727+ 34ED             >
 727+ 34ED             >MDIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 727+ 34ED CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 727+ 34F0             >
 727+ 34F0             >
 727+ 34F0             >                endif           ; ok        // for other definitions it "points" the correct handler
 727+ 34F0             >                // Use of "; ok" to suppress "warning[fwdref]"
 727+ 34F0             >
 727+ 34F0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 728+ 34F0 E4 34 B1 25                  dw      MDIVM, NIP
 729+ 34F4 F1 24                        dw      EXIT                    // ;
 730+ 34F6
 731+ 34F6              //  ______________________________________________________________________
 732+ 34F6              //
 733+ 34F6              // *            n1 n2 -- n3
 734+ 34F6              // multiply two integer
 735+ 34F6                              Colon_Def MUL, "*", is_normal
 735+ 34F6             >                New_Def  MUL, "*", Enter_Ptr, is_normal ; ok
 735+ 34F6             >
 735+ 34F6             >Dict_Ptr        defl    $
 735+ 34F6             >
 735+ 34F6             >//              ______________________________________________________________________
 735+ 34F6             >//              Heap part
 735+ 34F6             >
 735+ 34F6             >
 735+ 34F6             >                org     (Heap_Ptr & $1FFF) + $E000
 735+ E9CA             >
 735+ E9CA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 735+ E9CA             >Latest_Definition defl  Heap_Ptr
 735+ E9CA             >
 735+ E9CA             >                // dummy db directives used to calculate length of namec
 735+ E9CA 2A          >                db      "*"
 735+ E9CB             >len_NFA         defl    $ - temp_NFA
 735+ E9CB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 735+ E9CA             >
 735+ E9CA 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 735+ E9CB 2A          >                db      "*"               // name string in 7-bit ascii, but
 735+ E9CC             >                org     $-1                 // alter last byte of Name just above to set
 735+ E9CB AA          >                db      {b $} | END_BIT     // msb as name end
 735+ E9CC             >
 735+ E9CC C3 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 735+ E9CE             >Prev_Ptr        defl    Heap_Ptr
 735+ E9CE             >
 735+ E9CE             >mirror_Ptr      defl    $
 735+ E9CE             >
 735+ E9CE F8 34       >                dw      Dict_Ptr + 2        // xt
 735+ E9D0             >Heap_Ptr        defl    $ - $E000           // save current HP
 735+ E9D0             >
 735+ E9D0             >Current_HP      defl  $ - $E000             // used to set HP once!
 735+ E9D0             >
 735+ E9D0             >//              ______________________________________________________________________
 735+ E9D0             >//              Dictionary part
 735+ E9D0             >
 735+ E9D0             >                org     Dict_Ptr
 735+ 34F6             >
 735+ 34F6 CE 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 735+ 34F8             >
 735+ 34F8             >MUL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 735+ 34F8 CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 735+ 34FB             >
 735+ 34FB             >
 735+ 34FB             >                endif           ; ok        // for other definitions it "points" the correct handler
 735+ 34FB             >                // Use of "; ok" to suppress "warning[fwdref]"
 735+ 34FB             >
 735+ 34FB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 736+ 34FB 6F 34 AC 25                  dw      MMUL, DROP              // m* drop
 737+ 34FF F1 24                        dw      EXIT                    // ;
 738+ 3501
 739+ 3501              //  ______________________________________________________________________
 740+ 3501              //
 741+ 3501              // /mod         n1 n2 -- n3 n4
 742+ 3501              // leaves quotient n4 and remainder n3 of the integer division n1 / n2.
 743+ 3501              // The remainder has the sign of n1
 744+ 3501                              Colon_Def DIVMOD, "/MOD", is_normal
 744+ 3501             >                New_Def  DIVMOD, "/MOD", Enter_Ptr, is_normal ; ok
 744+ 3501             >
 744+ 3501             >Dict_Ptr        defl    $
 744+ 3501             >
 744+ 3501             >//              ______________________________________________________________________
 744+ 3501             >//              Heap part
 744+ 3501             >
 744+ 3501             >
 744+ 3501             >                org     (Heap_Ptr & $1FFF) + $E000
 744+ E9D0             >
 744+ E9D0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 744+ E9D0             >Latest_Definition defl  Heap_Ptr
 744+ E9D0             >
 744+ E9D0             >                // dummy db directives used to calculate length of namec
 744+ E9D0 2F 4D 4F 44 >                db      "/MOD"
 744+ E9D4             >len_NFA         defl    $ - temp_NFA
 744+ E9D4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 744+ E9D0             >
 744+ E9D0 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 744+ E9D1 2F 4D 4F 44 >                db      "/MOD"               // name string in 7-bit ascii, but
 744+ E9D5             >                org     $-1                 // alter last byte of Name just above to set
 744+ E9D4 C4          >                db      {b $} | END_BIT     // msb as name end
 744+ E9D5             >
 744+ E9D5 CA 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 744+ E9D7             >Prev_Ptr        defl    Heap_Ptr
 744+ E9D7             >
 744+ E9D7             >mirror_Ptr      defl    $
 744+ E9D7             >
 744+ E9D7 03 35       >                dw      Dict_Ptr + 2        // xt
 744+ E9D9             >Heap_Ptr        defl    $ - $E000           // save current HP
 744+ E9D9             >
 744+ E9D9             >Current_HP      defl  $ - $E000             // used to set HP once!
 744+ E9D9             >
 744+ E9D9             >//              ______________________________________________________________________
 744+ E9D9             >//              Dictionary part
 744+ E9D9             >
 744+ E9D9             >                org     Dict_Ptr
 744+ 3501             >
 744+ 3501 D7 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 744+ 3503             >
 744+ 3503             >DIVMOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 744+ 3503 CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 744+ 3506             >
 744+ 3506             >
 744+ 3506             >                endif           ; ok        // for other definitions it "points" the correct handler
 744+ 3506             >                // Use of "; ok" to suppress "warning[fwdref]"
 744+ 3506             >
 744+ 3506             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 745+ 3506 FB 24 80 28                  dw      TO_R, S_TO_D, R_TO      // >r s->d r>
 745+ 350A 06 25
 746+ 350C E4 34                        dw      MDIVM                   // m/mod
 747+ 350E F1 24                        dw      EXIT                    // ;
 748+ 3510
 749+ 3510              //  ______________________________________________________________________
 750+ 3510              //
 751+ 3510              // /            n1 n2 -- n3
 752+ 3510              // division
 753+ 3510                              Colon_Def DIV, "/", is_normal
 753+ 3510             >                New_Def  DIV, "/", Enter_Ptr, is_normal ; ok
 753+ 3510             >
 753+ 3510             >Dict_Ptr        defl    $
 753+ 3510             >
 753+ 3510             >//              ______________________________________________________________________
 753+ 3510             >//              Heap part
 753+ 3510             >
 753+ 3510             >
 753+ 3510             >                org     (Heap_Ptr & $1FFF) + $E000
 753+ E9D9             >
 753+ E9D9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 753+ E9D9             >Latest_Definition defl  Heap_Ptr
 753+ E9D9             >
 753+ E9D9             >                // dummy db directives used to calculate length of namec
 753+ E9D9 2F          >                db      "/"
 753+ E9DA             >len_NFA         defl    $ - temp_NFA
 753+ E9DA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 753+ E9D9             >
 753+ E9D9 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 753+ E9DA 2F          >                db      "/"               // name string in 7-bit ascii, but
 753+ E9DB             >                org     $-1                 // alter last byte of Name just above to set
 753+ E9DA AF          >                db      {b $} | END_BIT     // msb as name end
 753+ E9DB             >
 753+ E9DB D0 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 753+ E9DD             >Prev_Ptr        defl    Heap_Ptr
 753+ E9DD             >
 753+ E9DD             >mirror_Ptr      defl    $
 753+ E9DD             >
 753+ E9DD 12 35       >                dw      Dict_Ptr + 2        // xt
 753+ E9DF             >Heap_Ptr        defl    $ - $E000           // save current HP
 753+ E9DF             >
 753+ E9DF             >Current_HP      defl  $ - $E000             // used to set HP once!
 753+ E9DF             >
 753+ E9DF             >//              ______________________________________________________________________
 753+ E9DF             >//              Dictionary part
 753+ E9DF             >
 753+ E9DF             >                org     Dict_Ptr
 753+ 3510             >
 753+ 3510 DD 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 753+ 3512             >
 753+ 3512             >DIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 753+ 3512 CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 753+ 3515             >
 753+ 3515             >
 753+ 3515             >                endif           ; ok        // for other definitions it "points" the correct handler
 753+ 3515             >                // Use of "; ok" to suppress "warning[fwdref]"
 753+ 3515             >
 753+ 3515             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 754+ 3515 03 35 B1 25                  dw      DIVMOD, NIP             // /mod nip
 755+ 3519 F1 24                        dw      EXIT                    // ;
 756+ 351B
 757+ 351B              //  ______________________________________________________________________
 758+ 351B              //
 759+ 351B              // mod          n1 n2 -- n3
 760+ 351B                              Colon_Def MOD, "MOD", is_normal
 760+ 351B             >                New_Def  MOD, "MOD", Enter_Ptr, is_normal ; ok
 760+ 351B             >
 760+ 351B             >Dict_Ptr        defl    $
 760+ 351B             >
 760+ 351B             >//              ______________________________________________________________________
 760+ 351B             >//              Heap part
 760+ 351B             >
 760+ 351B             >
 760+ 351B             >                org     (Heap_Ptr & $1FFF) + $E000
 760+ E9DF             >
 760+ E9DF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 760+ E9DF             >Latest_Definition defl  Heap_Ptr
 760+ E9DF             >
 760+ E9DF             >                // dummy db directives used to calculate length of namec
 760+ E9DF 4D 4F 44    >                db      "MOD"
 760+ E9E2             >len_NFA         defl    $ - temp_NFA
 760+ E9E2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 760+ E9DF             >
 760+ E9DF 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 760+ E9E0 4D 4F 44    >                db      "MOD"               // name string in 7-bit ascii, but
 760+ E9E3             >                org     $-1                 // alter last byte of Name just above to set
 760+ E9E2 C4          >                db      {b $} | END_BIT     // msb as name end
 760+ E9E3             >
 760+ E9E3 D9 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 760+ E9E5             >Prev_Ptr        defl    Heap_Ptr
 760+ E9E5             >
 760+ E9E5             >mirror_Ptr      defl    $
 760+ E9E5             >
 760+ E9E5 1D 35       >                dw      Dict_Ptr + 2        // xt
 760+ E9E7             >Heap_Ptr        defl    $ - $E000           // save current HP
 760+ E9E7             >
 760+ E9E7             >Current_HP      defl  $ - $E000             // used to set HP once!
 760+ E9E7             >
 760+ E9E7             >//              ______________________________________________________________________
 760+ E9E7             >//              Dictionary part
 760+ E9E7             >
 760+ E9E7             >                org     Dict_Ptr
 760+ 351B             >
 760+ 351B E5 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 760+ 351D             >
 760+ 351D             >MOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 760+ 351D CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 760+ 3520             >
 760+ 3520             >
 760+ 3520             >                endif           ; ok        // for other definitions it "points" the correct handler
 760+ 3520             >                // Use of "; ok" to suppress "warning[fwdref]"
 760+ 3520             >
 760+ 3520             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 761+ 3520 03 35 AC 25                  dw      DIVMOD, DROP            // /mod drop
 762+ 3524 F1 24                        dw      EXIT                    // ;
 763+ 3526
 764+ 3526              //  ______________________________________________________________________
 765+ 3526              //
 766+ 3526              // */mod        n1 n2 n3 -- n4 n5
 767+ 3526              // leaves the quotient n5 and the remainder n4 of the operation
 768+ 3526              // (n1 * n2) / n3. The intermediate passage through a double number
 769+ 3526              // avoids loss of precision
 770+ 3526                              Colon_Def MUL_DIV_MOD, "*/MOD", is_normal
 770+ 3526             >                New_Def  MUL_DIV_MOD, "*/MOD", Enter_Ptr, is_normal ; ok
 770+ 3526             >
 770+ 3526             >Dict_Ptr        defl    $
 770+ 3526             >
 770+ 3526             >//              ______________________________________________________________________
 770+ 3526             >//              Heap part
 770+ 3526             >
 770+ 3526             >
 770+ 3526             >                org     (Heap_Ptr & $1FFF) + $E000
 770+ E9E7             >
 770+ E9E7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 770+ E9E7             >Latest_Definition defl  Heap_Ptr
 770+ E9E7             >
 770+ E9E7             >                // dummy db directives used to calculate length of namec
 770+ E9E7 2A 2F 4D 4F >                db      "*/MOD"
 770+ E9EB 44          >
 770+ E9EC             >len_NFA         defl    $ - temp_NFA
 770+ E9EC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 770+ E9E7             >
 770+ E9E7 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 770+ E9E8 2A 2F 4D 4F >                db      "*/MOD"               // name string in 7-bit ascii, but
 770+ E9EC 44          >
 770+ E9ED             >                org     $-1                 // alter last byte of Name just above to set
 770+ E9EC C4          >                db      {b $} | END_BIT     // msb as name end
 770+ E9ED             >
 770+ E9ED DF 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 770+ E9EF             >Prev_Ptr        defl    Heap_Ptr
 770+ E9EF             >
 770+ E9EF             >mirror_Ptr      defl    $
 770+ E9EF             >
 770+ E9EF 28 35       >                dw      Dict_Ptr + 2        // xt
 770+ E9F1             >Heap_Ptr        defl    $ - $E000           // save current HP
 770+ E9F1             >
 770+ E9F1             >Current_HP      defl  $ - $E000             // used to set HP once!
 770+ E9F1             >
 770+ E9F1             >//              ______________________________________________________________________
 770+ E9F1             >//              Dictionary part
 770+ E9F1             >
 770+ E9F1             >                org     Dict_Ptr
 770+ 3526             >
 770+ 3526 EF 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 770+ 3528             >
 770+ 3528             >MUL_DIV_MOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 770+ 3528 CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 770+ 352B             >
 770+ 352B             >
 770+ 352B             >                endif           ; ok        // for other definitions it "points" the correct handler
 770+ 352B             >                // Use of "; ok" to suppress "warning[fwdref]"
 770+ 352B             >
 770+ 352B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 771+ 352B FB 24 6F 34                  dw      TO_R, MMUL              // >r  m*
 772+ 352F 06 25 E4 34                  dw      R_TO, MDIVM             // r>  m/mod
 773+ 3533 F1 24                        dw      EXIT                    // ;
 774+ 3535
 775+ 3535              //  ______________________________________________________________________
 776+ 3535              //
 777+ 3535              // */          n1 n2 n3 -- n4
 778+ 3535              // (n1 * n2) / n3. The intermediate passage through a double number avoids loss of precision
 779+ 3535                              Colon_Def MUL_DIV, "*/", is_normal
 779+ 3535             >                New_Def  MUL_DIV, "*/", Enter_Ptr, is_normal ; ok
 779+ 3535             >
 779+ 3535             >Dict_Ptr        defl    $
 779+ 3535             >
 779+ 3535             >//              ______________________________________________________________________
 779+ 3535             >//              Heap part
 779+ 3535             >
 779+ 3535             >
 779+ 3535             >                org     (Heap_Ptr & $1FFF) + $E000
 779+ E9F1             >
 779+ E9F1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 779+ E9F1             >Latest_Definition defl  Heap_Ptr
 779+ E9F1             >
 779+ E9F1             >                // dummy db directives used to calculate length of namec
 779+ E9F1 2A 2F       >                db      "*/"
 779+ E9F3             >len_NFA         defl    $ - temp_NFA
 779+ E9F3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 779+ E9F1             >
 779+ E9F1 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 779+ E9F2 2A 2F       >                db      "*/"               // name string in 7-bit ascii, but
 779+ E9F4             >                org     $-1                 // alter last byte of Name just above to set
 779+ E9F3 AF          >                db      {b $} | END_BIT     // msb as name end
 779+ E9F4             >
 779+ E9F4 E7 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 779+ E9F6             >Prev_Ptr        defl    Heap_Ptr
 779+ E9F6             >
 779+ E9F6             >mirror_Ptr      defl    $
 779+ E9F6             >
 779+ E9F6 37 35       >                dw      Dict_Ptr + 2        // xt
 779+ E9F8             >Heap_Ptr        defl    $ - $E000           // save current HP
 779+ E9F8             >
 779+ E9F8             >Current_HP      defl  $ - $E000             // used to set HP once!
 779+ E9F8             >
 779+ E9F8             >//              ______________________________________________________________________
 779+ E9F8             >//              Dictionary part
 779+ E9F8             >
 779+ E9F8             >                org     Dict_Ptr
 779+ 3535             >
 779+ 3535 F6 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 779+ 3537             >
 779+ 3537             >MUL_DIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 779+ 3537 CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 779+ 353A             >
 779+ 353A             >
 779+ 353A             >                endif           ; ok        // for other definitions it "points" the correct handler
 779+ 353A             >                // Use of "; ok" to suppress "warning[fwdref]"
 779+ 353A             >
 779+ 353A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 780+ 353A 28 35                        dw     MUL_DIV_MOD              // */mod
 781+ 353C B1 25                        dw     NIP                      // nip
 782+ 353E F1 24                        dw     EXIT                     // ;
 783+ 3540
 784+ 3540
 785+ 3540              //  ______________________________________________________________________
 786+ 3540              //
 787+ 3540              // m/mod        ud1 u2 -- u3 ud4
 788+ 3540              // mixed operation: it leaves the remainder u3 and the quotient ud4 of ud1 / u1.
 789+ 3540              // All terms are unsigned.
 790+ 3540              //              Colon_Def MDIV_MOD, "M/MOD", is_normal
 791+ 3540              //              dw      TO_R                    // >r           ( ud1 )
 792+ 3540              //              dw      ZERO, R_OP, UMDIVMOD    // 0 r um/mod   ( l rem1 h/r )
 793+ 3540              //              dw      R_TO, SWAP, TO_R        // r> swap >r   ( l rem )
 794+ 3540              //              dw      UMDIVMOD                // um/mod       ( rem2 l/r )
 795+ 3540              //              dw      R_TO                    // r>           ( rem2 l/r h/r )
 796+ 3540              //              dw      EXIT                    // ;
 797+ 3540
 798+ 3540              //  ______________________________________________________________________
 799+ 3540              //
 800+ 3540              // (line)       n1 n2 -- a b
 801+ 3540              // sends the line n1 of block n2 to the disk buffer.
 802+ 3540              // it returns the address a and ca counter b = C/L meaning a whole line.
 803+ 3540                              Colon_Def CLINE, "(LINE)", is_normal
 803+ 3540             >                New_Def  CLINE, "(LINE)", Enter_Ptr, is_normal ; ok
 803+ 3540             >
 803+ 3540             >Dict_Ptr        defl    $
 803+ 3540             >
 803+ 3540             >//              ______________________________________________________________________
 803+ 3540             >//              Heap part
 803+ 3540             >
 803+ 3540             >
 803+ 3540             >                org     (Heap_Ptr & $1FFF) + $E000
 803+ E9F8             >
 803+ E9F8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 803+ E9F8             >Latest_Definition defl  Heap_Ptr
 803+ E9F8             >
 803+ E9F8             >                // dummy db directives used to calculate length of namec
 803+ E9F8 28 4C 49 4E >                db      "(LINE)"
 803+ E9FC 45 29       >
 803+ E9FE             >len_NFA         defl    $ - temp_NFA
 803+ E9FE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 803+ E9F8             >
 803+ E9F8 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 803+ E9F9 28 4C 49 4E >                db      "(LINE)"               // name string in 7-bit ascii, but
 803+ E9FD 45 29       >
 803+ E9FF             >                org     $-1                 // alter last byte of Name just above to set
 803+ E9FE A9          >                db      {b $} | END_BIT     // msb as name end
 803+ E9FF             >
 803+ E9FF F1 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 803+ EA01             >Prev_Ptr        defl    Heap_Ptr
 803+ EA01             >
 803+ EA01             >mirror_Ptr      defl    $
 803+ EA01             >
 803+ EA01 42 35       >                dw      Dict_Ptr + 2        // xt
 803+ EA03             >Heap_Ptr        defl    $ - $E000           // save current HP
 803+ EA03             >
 803+ EA03             >Current_HP      defl  $ - $E000             // used to set HP once!
 803+ EA03             >
 803+ EA03             >//              ______________________________________________________________________
 803+ EA03             >//              Dictionary part
 803+ EA03             >
 803+ EA03             >                org     Dict_Ptr
 803+ 3540             >
 803+ 3540 01 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 803+ 3542             >
 803+ 3542             >CLINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 803+ 3542 CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 803+ 3545             >
 803+ 3545             >
 803+ 3545             >                endif           ; ok        // for other definitions it "points" the correct handler
 803+ 3545             >                // Use of "; ok" to suppress "warning[fwdref]"
 803+ 3545             >
 803+ 3545             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 804+ 3545 FB 24                        dw      TO_R                    // >r
 805+ 3547 51 27                        dw      CL                      // c/l
 806+ 3549 58 27 28 35                  dw      BBUF, MUL_DIV_MOD       // */mod
 807+ 354D 06 25                        dw      R_TO                    // r>
 808+ 354F 5F 27 F8 34                  dw      BSCR, MUL, PLUS         // b/scr * +
 808+ 3553 43 25
 809+ 3555 2B 37                        dw      BLOCK                   // block   ( forward )
 810+ 3557 43 25                        dw      PLUS                    // +
 811+ 3559 51 27                        dw      CL                      // c/l
 812+ 355B F1 24                        dw      EXIT                    // ;
 813+ 355D
 814+ 355D              //  ______________________________________________________________________
 815+ 355D              //
 816+ 355D              // .line        n1 n2 --
 817+ 355D              // Sends to output line  n1  of screen n2.
 818+ 355D                              Colon_Def DOT_LINE, ".LINE", is_normal
 818+ 355D             >                New_Def  DOT_LINE, ".LINE", Enter_Ptr, is_normal ; ok
 818+ 355D             >
 818+ 355D             >Dict_Ptr        defl    $
 818+ 355D             >
 818+ 355D             >//              ______________________________________________________________________
 818+ 355D             >//              Heap part
 818+ 355D             >
 818+ 355D             >
 818+ 355D             >                org     (Heap_Ptr & $1FFF) + $E000
 818+ EA03             >
 818+ EA03             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 818+ EA03             >Latest_Definition defl  Heap_Ptr
 818+ EA03             >
 818+ EA03             >                // dummy db directives used to calculate length of namec
 818+ EA03 2E 4C 49 4E >                db      ".LINE"
 818+ EA07 45          >
 818+ EA08             >len_NFA         defl    $ - temp_NFA
 818+ EA08             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 818+ EA03             >
 818+ EA03 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 818+ EA04 2E 4C 49 4E >                db      ".LINE"               // name string in 7-bit ascii, but
 818+ EA08 45          >
 818+ EA09             >                org     $-1                 // alter last byte of Name just above to set
 818+ EA08 C5          >                db      {b $} | END_BIT     // msb as name end
 818+ EA09             >
 818+ EA09 F8 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 818+ EA0B             >Prev_Ptr        defl    Heap_Ptr
 818+ EA0B             >
 818+ EA0B             >mirror_Ptr      defl    $
 818+ EA0B             >
 818+ EA0B 5F 35       >                dw      Dict_Ptr + 2        // xt
 818+ EA0D             >Heap_Ptr        defl    $ - $E000           // save current HP
 818+ EA0D             >
 818+ EA0D             >Current_HP      defl  $ - $E000             // used to set HP once!
 818+ EA0D             >
 818+ EA0D             >//              ______________________________________________________________________
 818+ EA0D             >//              Dictionary part
 818+ EA0D             >
 818+ EA0D             >                org     Dict_Ptr
 818+ 355D             >
 818+ 355D 0B 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 818+ 355F             >
 818+ 355F             >DOT_LINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 818+ 355F CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 818+ 3562             >
 818+ 3562             >
 818+ 3562             >                endif           ; ok        // for other definitions it "points" the correct handler
 818+ 3562             >                // Use of "; ok" to suppress "warning[fwdref]"
 818+ 3562             >
 818+ 3562             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 819+ 3562 42 35 25 2C                  dw      CLINE, LTRAILING, TYPE  // (line) -trailing type
 819+ 3566 0E 2C
 820+ 3568 F1 24                        dw      EXIT                    // ;
 821+ 356A
 822+ 356A              //  ______________________________________________________________________
 823+ 356A              //
 824+ 356A              // message       n1 n2 --
 825+ 356A              // prints error message to current channel.
 826+ 356A              // if WARNING is 0, prints "MSG#n".
 827+ 356A              // if WARNING is 1, prints line n of screen 4.
 828+ 356A              // if WARNING is -1, see ERROR
 829+ 356A              // value can be negative or beyond block 4.
 830+ 356A                              Colon_Def MESSAGE, "MESSAGE", is_normal
 830+ 356A             >                New_Def  MESSAGE, "MESSAGE", Enter_Ptr, is_normal ; ok
 830+ 356A             >
 830+ 356A             >Dict_Ptr        defl    $
 830+ 356A             >
 830+ 356A             >//              ______________________________________________________________________
 830+ 356A             >//              Heap part
 830+ 356A             >
 830+ 356A             >
 830+ 356A             >                org     (Heap_Ptr & $1FFF) + $E000
 830+ EA0D             >
 830+ EA0D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 830+ EA0D             >Latest_Definition defl  Heap_Ptr
 830+ EA0D             >
 830+ EA0D             >                // dummy db directives used to calculate length of namec
 830+ EA0D 4D 45 53 53 >                db      "MESSAGE"
 830+ EA11 41 47 45    >
 830+ EA14             >len_NFA         defl    $ - temp_NFA
 830+ EA14             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 830+ EA0D             >
 830+ EA0D 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 830+ EA0E 4D 45 53 53 >                db      "MESSAGE"               // name string in 7-bit ascii, but
 830+ EA12 41 47 45    >
 830+ EA15             >                org     $-1                 // alter last byte of Name just above to set
 830+ EA14 C5          >                db      {b $} | END_BIT     // msb as name end
 830+ EA15             >
 830+ EA15 03 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 830+ EA17             >Prev_Ptr        defl    Heap_Ptr
 830+ EA17             >
 830+ EA17             >mirror_Ptr      defl    $
 830+ EA17             >
 830+ EA17 6C 35       >                dw      Dict_Ptr + 2        // xt
 830+ EA19             >Heap_Ptr        defl    $ - $E000           // save current HP
 830+ EA19             >
 830+ EA19             >Current_HP      defl  $ - $E000             // used to set HP once!
 830+ EA19             >
 830+ EA19             >//              ______________________________________________________________________
 830+ EA19             >//              Dictionary part
 830+ EA19             >
 830+ EA19             >                org     Dict_Ptr
 830+ 356A             >
 830+ 356A 17 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 830+ 356C             >
 830+ 356C             >MESSAGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 830+ 356C CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 830+ 356F             >
 830+ 356F             >
 830+ 356F             >                endif           ; ok        // for other definitions it "points" the correct handler
 830+ 356F             >                // Use of "; ok" to suppress "warning[fwdref]"
 830+ 356F             >
 830+ 356F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 831+ 356F 98 27 31 26                  dw      WARNING, FETCH          // warning @
 832+ 3573                                                              // if
 833+ 3573 8F 20                        dw      ZBRANCH
 834+ 3575 12 00                        dw      Message_Else - $
 835+ 3577 3D 20 20 00                  dw          LIT, 32, PLUS       //      32 +
 835+ 357B 43 25
 836+ 357D 35 27                        dw          TWO                 //      2
 837+ 357F 5F 35                        dw          DOT_LINE            //      .line
 838+ 3581 15 29                        dw          SPACE               //      space
 839+ 3583                                                              // else
 840+ 3583
 841+ 3583 82 20                        dw      BRANCH
 842+ 3585 0B 00                        dw      Message_ENdif - $
 843+ 3587              Message_Else:
 844+ 3587 AB 2D                        dw          C_DOT_QUOTE         //      .( msg#)
 845+ 3589 04 6D 73 67                  db          4, "msg#"
 845+ 358D 23
 846+ 358E 59 3C                        dw          DOT                 //      .  ( forward )
 847+ 3590              Message_ENdif:                                  // endif
 848+ 3590 F1 24                        dw      EXIT                    // ;
 849+ 3592
 850+ 3592
 851+ 3592              //  ______________________________________________________________________
 852+ 3592              //
 853+ 3592              // device
 854+ 3592                              Variable_Def DEVICE,   "DEVICE",   2
 854+ 3592             >                New_Def  DEVICE, "DEVICE", Variable_Ptr, is_normal
 854+ 3592             >
 854+ 3592             >Dict_Ptr        defl    $
 854+ 3592             >
 854+ 3592             >//              ______________________________________________________________________
 854+ 3592             >//              Heap part
 854+ 3592             >
 854+ 3592             >
 854+ 3592             >                org     (Heap_Ptr & $1FFF) + $E000
 854+ EA19             >
 854+ EA19             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 854+ EA19             >Latest_Definition defl  Heap_Ptr
 854+ EA19             >
 854+ EA19             >                // dummy db directives used to calculate length of namec
 854+ EA19 44 45 56 49 >                db      "DEVICE"
 854+ EA1D 43 45       >
 854+ EA1F             >len_NFA         defl    $ - temp_NFA
 854+ EA1F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 854+ EA19             >
 854+ EA19 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 854+ EA1A 44 45 56 49 >                db      "DEVICE"               // name string in 7-bit ascii, but
 854+ EA1E 43 45       >
 854+ EA20             >                org     $-1                 // alter last byte of Name just above to set
 854+ EA1F C5          >                db      {b $} | END_BIT     // msb as name end
 854+ EA20             >
 854+ EA20 0D 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 854+ EA22             >Prev_Ptr        defl    Heap_Ptr
 854+ EA22             >
 854+ EA22             >mirror_Ptr      defl    $
 854+ EA22             >
 854+ EA22 94 35       >                dw      Dict_Ptr + 2        // xt
 854+ EA24             >Heap_Ptr        defl    $ - $E000           // save current HP
 854+ EA24             >
 854+ EA24             >Current_HP      defl  $ - $E000             // used to set HP once!
 854+ EA24             >
 854+ EA24             >//              ______________________________________________________________________
 854+ EA24             >//              Dictionary part
 854+ EA24             >
 854+ EA24             >                org     Dict_Ptr
 854+ 3592             >
 854+ 3592 22 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 854+ 3594             >
 854+ 3594             >DEVICE:          if Variable_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 854+ 3594 CD 0E 27    >                call    Variable_Ptr ; ok        // for primitive definitions  actual code
 854+ 3597             >
 854+ 3597             >
 854+ 3597             >                endif           ; ok        // for other definitions it "points" the correct handler
 854+ 3597             >                // Use of "; ok" to suppress "warning[fwdref]"
 854+ 3597             >
 854+ 3597             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 854+ 3597 02 00       >                dw      2
 855+ 3599
 856+ 3599              //  ______________________________________________________________________
 857+ 3599
# file closed: C:\Zx\CSpect\Projects\vForth17_DOT/source/L2.asm
 142  3599                              include "next-opt1.asm"
# file opened: C:\Zx\CSpect\Projects\vForth17_DOT/source/next-opt1.asm
   1+ 3599              //  ______________________________________________________________________
   2+ 3599              //
   3+ 3599              //  next-opt.asm
   4+ 3599              //
   5+ 3599              //  ZX Spectrum Next - peculiar definitions
   6+ 3599              //  ______________________________________________________________________
   7+ 3599
   8+ 3599              //  ______________________________________________________________________
   9+ 3599              //
  10+ 3599              // reg@         n -- b
  11+ 3599              // read Next REGister n giving byte b
  12+ 3599              //
  13+ 3599              //              Colon_Def REG_FETCH, "REG@", is_normal
  14+ 3599              //              dw      LIT, $243B
  15+ 3599              //              dw      PSTORE
  16+ 3599              //              dw      LIT, $253B
  17+ 3599              //              dw      PFETCH
  18+ 3599              //              dw      EXIT
  19+ 3599                              New_Def REG_FETCH, "REG@", is_code, is_normal
  19+ 3599             >
  19+ 3599             >Dict_Ptr        defl    $
  19+ 3599             >
  19+ 3599             >//              ______________________________________________________________________
  19+ 3599             >//              Heap part
  19+ 3599             >
  19+ 3599             >
  19+ 3599             >                org     (Heap_Ptr & $1FFF) + $E000
  19+ EA24             >
  19+ EA24             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  19+ EA24             >Latest_Definition defl  Heap_Ptr
  19+ EA24             >
  19+ EA24             >                // dummy db directives used to calculate length of namec
  19+ EA24 52 45 47 40 >                db      "REG@"
  19+ EA28             >len_NFA         defl    $ - temp_NFA
  19+ EA28             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  19+ EA24             >
  19+ EA24 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  19+ EA25 52 45 47 40 >                db      "REG@"               // name string in 7-bit ascii, but
  19+ EA29             >                org     $-1                 // alter last byte of Name just above to set
  19+ EA28 C0          >                db      {b $} | END_BIT     // msb as name end
  19+ EA29             >
  19+ EA29 19 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  19+ EA2B             >Prev_Ptr        defl    Heap_Ptr
  19+ EA2B             >
  19+ EA2B             >mirror_Ptr      defl    $
  19+ EA2B             >
  19+ EA2B 9B 35       >                dw      Dict_Ptr + 2        // xt
  19+ EA2D             >Heap_Ptr        defl    $ - $E000           // save current HP
  19+ EA2D             >
  19+ EA2D             >Current_HP      defl  $ - $E000             // used to set HP once!
  19+ EA2D             >
  19+ EA2D             >//              ______________________________________________________________________
  19+ EA2D             >//              Dictionary part
  19+ EA2D             >
  19+ EA2D             >                org     Dict_Ptr
  19+ 3599             >
  19+ 3599 2B 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  19+ 359B             >
  19+ 359B             >REG_FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  19+ 359B ~           >                call    runcode ; ok        // for primitive definitions  actual code
  19+ 359B ~           >
  19+ 359B ~           >
  19+ 359B             >                endif           ; ok        // for other definitions it "points" the correct handler
  19+ 359B             >                // Use of "; ok" to suppress "warning[fwdref]"
  19+ 359B             >
  19+ 359B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  20+ 359B D9                           exx
  21+ 359C 01 3B 24                     ld      bc, $243B
  22+ 359F E1                           pop     hl
  23+ 35A0 ED 69                        out     (c), l
  24+ 35A2 04                           inc     b
  25+ 35A3 ED 68                        in      l, (c)
  26+ 35A5 E5                           push    hl
  27+ 35A6 D9                           exx
  28+ 35A7                              next
  28+ 35A7 DD E9       >                jp      (ix)
  29+ 35A9
  30+ 35A9
  31+ 35A9              //  ______________________________________________________________________
  32+ 35A9              //
  33+ 35A9              // reg!         b n --
  34+ 35A9              // write value b to Next REGister n
  35+ 35A9              //
  36+ 35A9              //              Colon_Def REG_STORE, "REG!", is_normal
  37+ 35A9              //              dw      LIT, $243B
  38+ 35A9              //              dw      PSTORE
  39+ 35A9              //              dw      LIT, $253B
  40+ 35A9              //              dw      PSTORE
  41+ 35A9              //              dw      EXIT
  42+ 35A9                              New_Def REG_STORE, "REG!", is_code, is_normal
  42+ 35A9             >
  42+ 35A9             >Dict_Ptr        defl    $
  42+ 35A9             >
  42+ 35A9             >//              ______________________________________________________________________
  42+ 35A9             >//              Heap part
  42+ 35A9             >
  42+ 35A9             >
  42+ 35A9             >                org     (Heap_Ptr & $1FFF) + $E000
  42+ EA2D             >
  42+ EA2D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  42+ EA2D             >Latest_Definition defl  Heap_Ptr
  42+ EA2D             >
  42+ EA2D             >                // dummy db directives used to calculate length of namec
  42+ EA2D 52 45 47 21 >                db      "REG!"
  42+ EA31             >len_NFA         defl    $ - temp_NFA
  42+ EA31             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  42+ EA2D             >
  42+ EA2D 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  42+ EA2E 52 45 47 21 >                db      "REG!"               // name string in 7-bit ascii, but
  42+ EA32             >                org     $-1                 // alter last byte of Name just above to set
  42+ EA31 A1          >                db      {b $} | END_BIT     // msb as name end
  42+ EA32             >
  42+ EA32 24 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  42+ EA34             >Prev_Ptr        defl    Heap_Ptr
  42+ EA34             >
  42+ EA34             >mirror_Ptr      defl    $
  42+ EA34             >
  42+ EA34 AB 35       >                dw      Dict_Ptr + 2        // xt
  42+ EA36             >Heap_Ptr        defl    $ - $E000           // save current HP
  42+ EA36             >
  42+ EA36             >Current_HP      defl  $ - $E000             // used to set HP once!
  42+ EA36             >
  42+ EA36             >//              ______________________________________________________________________
  42+ EA36             >//              Dictionary part
  42+ EA36             >
  42+ EA36             >                org     Dict_Ptr
  42+ 35A9             >
  42+ 35A9 34 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  42+ 35AB             >
  42+ 35AB             >REG_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  42+ 35AB ~           >                call    runcode ; ok        // for primitive definitions  actual code
  42+ 35AB ~           >
  42+ 35AB ~           >
  42+ 35AB             >                endif           ; ok        // for other definitions it "points" the correct handler
  42+ 35AB             >                // Use of "; ok" to suppress "warning[fwdref]"
  42+ 35AB             >
  42+ 35AB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  43+ 35AB D9                           exx
  44+ 35AC 01 3B 24                     ld      bc, $243B
  45+ 35AF E1                           pop     hl
  46+ 35B0 ED 69                        out     (c), l
  47+ 35B2 04                           inc     b
  48+ 35B3 E1                           pop     hl
  49+ 35B4 ED 69                        out     (c), l
  50+ 35B6 D9                           exx
  51+ 35B7                              next
  51+ 35B7 DD E9       >                jp      (ix)
  52+ 35B9
  53+ 35B9
  54+ 35B9              //  ______________________________________________________________________
  55+ 35B9              //
  56+ 35B9              // m_p3dos      n1 n2 n3 n4 a -- n5 n6 n7 n8  f
  57+ 35B9              // NextZXOS call wrapper.
  58+ 35B9              //  n1 = hl register parameter value
  59+ 35B9              //  n2 = de register parameter value
  60+ 35B9              //  n3 = bc register parameter value
  61+ 35B9              //  n4 =  a register parameter value
  62+ 35B9              //   a = routine address in ROM 3
  63+ 35B9              // ----
  64+ 35B9              //  n5 = hl returned value
  65+ 35B9              //  n6 = de returned value
  66+ 35B9              //  n7 = bc returned value
  67+ 35B9              //  n8 =  a returned value
  68+ 35B9              //   f
  69+ 35B9                              New_Def M_P3DOS, "M_P3DOS", is_code, is_normal
  69+ 35B9             >
  69+ 35B9             >Dict_Ptr        defl    $
  69+ 35B9             >
  69+ 35B9             >//              ______________________________________________________________________
  69+ 35B9             >//              Heap part
  69+ 35B9             >
  69+ 35B9             >
  69+ 35B9             >                org     (Heap_Ptr & $1FFF) + $E000
  69+ EA36             >
  69+ EA36             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  69+ EA36             >Latest_Definition defl  Heap_Ptr
  69+ EA36             >
  69+ EA36             >                // dummy db directives used to calculate length of namec
  69+ EA36 4D 5F 50 33 >                db      "M_P3DOS"
  69+ EA3A 44 4F 53    >
  69+ EA3D             >len_NFA         defl    $ - temp_NFA
  69+ EA3D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  69+ EA36             >
  69+ EA36 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  69+ EA37 4D 5F 50 33 >                db      "M_P3DOS"               // name string in 7-bit ascii, but
  69+ EA3B 44 4F 53    >
  69+ EA3E             >                org     $-1                 // alter last byte of Name just above to set
  69+ EA3D D3          >                db      {b $} | END_BIT     // msb as name end
  69+ EA3E             >
  69+ EA3E 2D 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  69+ EA40             >Prev_Ptr        defl    Heap_Ptr
  69+ EA40             >
  69+ EA40             >mirror_Ptr      defl    $
  69+ EA40             >
  69+ EA40 BB 35       >                dw      Dict_Ptr + 2        // xt
  69+ EA42             >Heap_Ptr        defl    $ - $E000           // save current HP
  69+ EA42             >
  69+ EA42             >Current_HP      defl  $ - $E000             // used to set HP once!
  69+ EA42             >
  69+ EA42             >//              ______________________________________________________________________
  69+ EA42             >//              Dictionary part
  69+ EA42             >
  69+ EA42             >                org     Dict_Ptr
  69+ 35B9             >
  69+ 35B9 40 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  69+ 35BB             >
  69+ 35BB             >M_P3DOS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  69+ 35BB ~           >                call    runcode ; ok        // for primitive definitions  actual code
  69+ 35BB ~           >
  69+ 35BB ~           >
  69+ 35BB             >                endif           ; ok        // for other definitions it "points" the correct handler
  69+ 35BB             >                // Use of "; ok" to suppress "warning[fwdref]"
  69+ 35BB             >
  69+ 35BB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  70+ 35BB D9                            exx
  71+ 35BC E1                            pop     hl                  // dos call entry address a  //  n1 n2 n3 n4
  72+ 35BD D1                            pop     de                  // a register argument       //  n1 n2 n3
  73+ 35BE 7B                            ld      a, e
  74+ 35BF C1                            pop     bc                  // bc' argument              //  n1 n2
  75+ 35C0 D1                            pop     de                  // de' argument              //  n1
  76+ 35C1 E3                            ex      (sp), hl            // hl' argument and entry address in TOS
  77+ 35C2 D9                           exx
  78+ 35C3 E1                           pop     hl                  // entry address a
  79+ 35C4 DD E5                        push    ix
  80+ 35C6 D5                           push    de
  81+ 35C7 C5                           push    bc
  82+ 35C8 EB                           ex      de, hl              // de is entry address
  83+ 35C9              //              ld      (SP_Saved), sp
  84+ 35C9              //              ld      sp, Cold_origin - 5
  85+ 35C9              //              ld      sp, TSTACK          // Carefully balanced from startup
  86+ 35C9 0E 07                        ld      c, 7                // use 7 RAM Bank
  87+ 35CB F3                           di
  88+ 35CC CF                           rst     08
  89+ 35CD 94                           db      $94
  90+ 35CE FB                           ei
  91+ 35CF                      ////    ld      a, (Saved_MMU + 1)
  92+ 35CF                      ////    nextreg $53, a            // some calls reset MMU3 to $11 !
  93+ 35CF
  94+ 35CF              //              ld      sp, (SP_Saved)
  95+ 35CF              //              push    ix
  96+ 35CF              //              pop     hl
  97+ 35CF              //              ld      (IX_Echo), hl
  98+ 35CF DD 22 32 20                  ld      (IX_Echo), ix
  99+ 35D3
 100+ 35D3 D9                           exx
 101+ 35D4 C1                           pop     bc
 102+ 35D5 D1                           pop     de
 103+ 35D6 DD E1                        pop     ix
 104+ 35D8 D9                            exx
 105+ 35D9 E5                            push    hl
 106+ 35DA D5                            push    de
 107+ 35DB C5                            push    bc
 108+ 35DC 26 00                         ld      h, 0
 109+ 35DE 6F                            ld      l, a
 110+ 35DF E5                            push    hl
 111+ 35E0 D9                           exx
 112+ 35E1 ED 62                        sbc     hl, hl              // -1 for OK ; 0 for KO but now...
 113+ 35E3 23                           inc     hl                  //  0 for OK ; 1 for ko
 114+ 35E4 E5                           push    hl
 115+ 35E5                              next
 115+ 35E5 DD E9       >                jp      (ix)
 116+ 35E7
 117+ 35E7              //  ______________________________________________________________________
 118+ 35E7              //
 119+ 35E7              // blk-fh
 120+ 35E7              // MOVED AT THE END.
 121+ 35E7              //              Variable_Def BLK_FH,   "BLK-FH",   1
 122+ 35E7              //
 123+ 35E7              //              New_Def BLK_FNAME,   "BLK-FNAME", Create_Ptr, is_normal
 124+ 35E7              // Len_Filename:   db      30
 125+ 35E7              // Blk_filename:   db      "c:/tools/vforth/!Blocks-64.bin", 0
 126+ 35E7              //                 ds      32
 127+ 35E7
 128+ 35E7              //  ______________________________________________________________________
 129+ 35E7              //
 130+ 35E7              // blk-seek     n --
 131+ 35E7              // seek block n  within blocks!.bin  file
 132+ 35E7                              Colon_Def BLK_SEEK, "BLK-SEEK", is_normal
 132+ 35E7             >                New_Def  BLK_SEEK, "BLK-SEEK", Enter_Ptr, is_normal ; ok
 132+ 35E7             >
 132+ 35E7             >Dict_Ptr        defl    $
 132+ 35E7             >
 132+ 35E7             >//              ______________________________________________________________________
 132+ 35E7             >//              Heap part
 132+ 35E7             >
 132+ 35E7             >
 132+ 35E7             >                org     (Heap_Ptr & $1FFF) + $E000
 132+ EA42             >
 132+ EA42             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 132+ EA42             >Latest_Definition defl  Heap_Ptr
 132+ EA42             >
 132+ EA42             >                // dummy db directives used to calculate length of namec
 132+ EA42 42 4C 4B 2D >                db      "BLK-SEEK"
 132+ EA46 53 45 45 4B >
 132+ EA4A             >len_NFA         defl    $ - temp_NFA
 132+ EA4A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 132+ EA42             >
 132+ EA42 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 132+ EA43 42 4C 4B 2D >                db      "BLK-SEEK"               // name string in 7-bit ascii, but
 132+ EA47 53 45 45 4B >
 132+ EA4B             >                org     $-1                 // alter last byte of Name just above to set
 132+ EA4A CB          >                db      {b $} | END_BIT     // msb as name end
 132+ EA4B             >
 132+ EA4B 36 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 132+ EA4D             >Prev_Ptr        defl    Heap_Ptr
 132+ EA4D             >
 132+ EA4D             >mirror_Ptr      defl    $
 132+ EA4D             >
 132+ EA4D E9 35       >                dw      Dict_Ptr + 2        // xt
 132+ EA4F             >Heap_Ptr        defl    $ - $E000           // save current HP
 132+ EA4F             >
 132+ EA4F             >Current_HP      defl  $ - $E000             // used to set HP once!
 132+ EA4F             >
 132+ EA4F             >//              ______________________________________________________________________
 132+ EA4F             >//              Dictionary part
 132+ EA4F             >
 132+ EA4F             >                org     Dict_Ptr
 132+ 35E7             >
 132+ 35E7 4D 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 132+ 35E9             >
 132+ 35E9             >BLK_SEEK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 132+ 35E9 CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 132+ 35EC             >
 132+ 35EC             >
 132+ 35EC             >                endif           ; ok        // for other definitions it "points" the correct handler
 132+ 35EC             >                // Use of "; ok" to suppress "warning[fwdref]"
 132+ 35EC             >
 132+ 35EC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 133+ 35EC 58 27 6F 34                  dw  BBUF, MMUL
 134+ 35F0 29 3F 31 26                  dw  BLK_FH, FETCH
 135+ 35F4 7A 23                        dw  F_SEEK
 136+ 35F6 3D 20 2D 00                  dw  LIT, $2D, QERROR
 136+ 35FA 80 2A
 137+ 35FC F1 24                        dw  EXIT
 138+ 35FE
 139+ 35FE              //  ______________________________________________________________________
 140+ 35FE              //
 141+ 35FE              // blk-read     n --
 142+ 35FE              // seek block n  within blocks!.bin  file
 143+ 35FE                              Colon_Def BLK_READ, "BLK-READ", is_normal
 143+ 35FE             >                New_Def  BLK_READ, "BLK-READ", Enter_Ptr, is_normal ; ok
 143+ 35FE             >
 143+ 35FE             >Dict_Ptr        defl    $
 143+ 35FE             >
 143+ 35FE             >//              ______________________________________________________________________
 143+ 35FE             >//              Heap part
 143+ 35FE             >
 143+ 35FE             >
 143+ 35FE             >                org     (Heap_Ptr & $1FFF) + $E000
 143+ EA4F             >
 143+ EA4F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 143+ EA4F             >Latest_Definition defl  Heap_Ptr
 143+ EA4F             >
 143+ EA4F             >                // dummy db directives used to calculate length of namec
 143+ EA4F 42 4C 4B 2D >                db      "BLK-READ"
 143+ EA53 52 45 41 44 >
 143+ EA57             >len_NFA         defl    $ - temp_NFA
 143+ EA57             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 143+ EA4F             >
 143+ EA4F 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 143+ EA50 42 4C 4B 2D >                db      "BLK-READ"               // name string in 7-bit ascii, but
 143+ EA54 52 45 41 44 >
 143+ EA58             >                org     $-1                 // alter last byte of Name just above to set
 143+ EA57 C4          >                db      {b $} | END_BIT     // msb as name end
 143+ EA58             >
 143+ EA58 42 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 143+ EA5A             >Prev_Ptr        defl    Heap_Ptr
 143+ EA5A             >
 143+ EA5A             >mirror_Ptr      defl    $
 143+ EA5A             >
 143+ EA5A 00 36       >                dw      Dict_Ptr + 2        // xt
 143+ EA5C             >Heap_Ptr        defl    $ - $E000           // save current HP
 143+ EA5C             >
 143+ EA5C             >Current_HP      defl  $ - $E000             // used to set HP once!
 143+ EA5C             >
 143+ EA5C             >//              ______________________________________________________________________
 143+ EA5C             >//              Dictionary part
 143+ EA5C             >
 143+ EA5C             >                org     Dict_Ptr
 143+ 35FE             >
 143+ 35FE 5A 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 143+ 3600             >
 143+ 3600             >BLK_READ:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 143+ 3600 CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 143+ 3603             >
 143+ 3603             >
 143+ 3603             >                endif           ; ok        // for other definitions it "points" the correct handler
 143+ 3603             >                // Use of "; ok" to suppress "warning[fwdref]"
 143+ 3603             >
 143+ 3603             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 144+ 3603 E9 35                        dw  BLK_SEEK
 145+ 3605 58 27                        dw  BBUF
 146+ 3607 29 3F 31 26                  dw  BLK_FH, FETCH
 147+ 360B C5 23                        dw  F_READ
 148+ 360D 3D 20 2E 00                  dw  LIT, $2E, QERROR
 148+ 3611 80 2A
 149+ 3613 AC 25                        dw  DROP
 150+ 3615 F1 24                        dw  EXIT
 151+ 3617
 152+ 3617              //  ______________________________________________________________________
 153+ 3617              //
 154+ 3617              // blk-write     n --
 155+ 3617              // seek block n  within blocks!.bin  file
 156+ 3617                              Colon_Def BLK_WRITE, "BLK-WRITE", is_normal
 156+ 3617             >                New_Def  BLK_WRITE, "BLK-WRITE", Enter_Ptr, is_normal ; ok
 156+ 3617             >
 156+ 3617             >Dict_Ptr        defl    $
 156+ 3617             >
 156+ 3617             >//              ______________________________________________________________________
 156+ 3617             >//              Heap part
 156+ 3617             >
 156+ 3617             >
 156+ 3617             >                org     (Heap_Ptr & $1FFF) + $E000
 156+ EA5C             >
 156+ EA5C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 156+ EA5C             >Latest_Definition defl  Heap_Ptr
 156+ EA5C             >
 156+ EA5C             >                // dummy db directives used to calculate length of namec
 156+ EA5C 42 4C 4B 2D >                db      "BLK-WRITE"
 156+ EA60 57 52 49 54 >
 156+ EA64 45          >
 156+ EA65             >len_NFA         defl    $ - temp_NFA
 156+ EA65             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 156+ EA5C             >
 156+ EA5C 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 156+ EA5D 42 4C 4B 2D >                db      "BLK-WRITE"               // name string in 7-bit ascii, but
 156+ EA61 57 52 49 54 >
 156+ EA65 45          >
 156+ EA66             >                org     $-1                 // alter last byte of Name just above to set
 156+ EA65 C5          >                db      {b $} | END_BIT     // msb as name end
 156+ EA66             >
 156+ EA66 4F 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 156+ EA68             >Prev_Ptr        defl    Heap_Ptr
 156+ EA68             >
 156+ EA68             >mirror_Ptr      defl    $
 156+ EA68             >
 156+ EA68 19 36       >                dw      Dict_Ptr + 2        // xt
 156+ EA6A             >Heap_Ptr        defl    $ - $E000           // save current HP
 156+ EA6A             >
 156+ EA6A             >Current_HP      defl  $ - $E000             // used to set HP once!
 156+ EA6A             >
 156+ EA6A             >//              ______________________________________________________________________
 156+ EA6A             >//              Dictionary part
 156+ EA6A             >
 156+ EA6A             >                org     Dict_Ptr
 156+ 3617             >
 156+ 3617 68 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 156+ 3619             >
 156+ 3619             >BLK_WRITE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 156+ 3619 CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 156+ 361C             >
 156+ 361C             >
 156+ 361C             >                endif           ; ok        // for other definitions it "points" the correct handler
 156+ 361C             >                // Use of "; ok" to suppress "warning[fwdref]"
 156+ 361C             >
 156+ 361C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 157+ 361C E9 35                        dw  BLK_SEEK
 158+ 361E 58 27                        dw  BBUF
 159+ 3620 29 3F 31 26                  dw  BLK_FH, FETCH
 160+ 3624 E3 23                        dw  F_WRITE
 161+ 3626 3D 20 2F 00                  dw  LIT, $2F, QERROR
 161+ 362A 80 2A
 162+ 362C AC 25                        dw  DROP
 163+ 362E F1 24                        dw  EXIT
 164+ 3630
 165+ 3630              //  ______________________________________________________________________
 166+ 3630              //
 167+ 3630              // blk-init     n --
 168+ 3630              // seek block n  within blocks!.bin  file
 169+ 3630                              Colon_Def BLK_INIT, "BLK-INIT", is_normal
 169+ 3630             >                New_Def  BLK_INIT, "BLK-INIT", Enter_Ptr, is_normal ; ok
 169+ 3630             >
 169+ 3630             >Dict_Ptr        defl    $
 169+ 3630             >
 169+ 3630             >//              ______________________________________________________________________
 169+ 3630             >//              Heap part
 169+ 3630             >
 169+ 3630             >
 169+ 3630             >                org     (Heap_Ptr & $1FFF) + $E000
 169+ EA6A             >
 169+ EA6A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 169+ EA6A             >Latest_Definition defl  Heap_Ptr
 169+ EA6A             >
 169+ EA6A             >                // dummy db directives used to calculate length of namec
 169+ EA6A 42 4C 4B 2D >                db      "BLK-INIT"
 169+ EA6E 49 4E 49 54 >
 169+ EA72             >len_NFA         defl    $ - temp_NFA
 169+ EA72             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 169+ EA6A             >
 169+ EA6A 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 169+ EA6B 42 4C 4B 2D >                db      "BLK-INIT"               // name string in 7-bit ascii, but
 169+ EA6F 49 4E 49 54 >
 169+ EA73             >                org     $-1                 // alter last byte of Name just above to set
 169+ EA72 D4          >                db      {b $} | END_BIT     // msb as name end
 169+ EA73             >
 169+ EA73 5C 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 169+ EA75             >Prev_Ptr        defl    Heap_Ptr
 169+ EA75             >
 169+ EA75             >mirror_Ptr      defl    $
 169+ EA75             >
 169+ EA75 32 36       >                dw      Dict_Ptr + 2        // xt
 169+ EA77             >Heap_Ptr        defl    $ - $E000           // save current HP
 169+ EA77             >
 169+ EA77             >Current_HP      defl  $ - $E000             // used to set HP once!
 169+ EA77             >
 169+ EA77             >//              ______________________________________________________________________
 169+ EA77             >//              Dictionary part
 169+ EA77             >
 169+ EA77             >                org     Dict_Ptr
 169+ 3630             >
 169+ 3630 75 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 169+ 3632             >
 169+ 3632             >BLK_INIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 169+ 3632 CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 169+ 3635             >
 169+ 3635             >
 169+ 3635             >                endif           ; ok        // for other definitions it "points" the correct handler
 169+ 3635             >                // Use of "; ok" to suppress "warning[fwdref]"
 169+ 3635             >
 169+ 3635             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 170+ 3635 29 3F 31 26                  dw  BLK_FH, FETCH, F_CLOSE, DROP
 170+ 3639 95 23 AC 25
 171+ 363D 30 3F 5C 25                  dw  BLK_FNAME, ONE_PLUS
 172+ 3641 4C 28 3C 27                  dw  HERE, THREE, F_OPEN         // open for update (read+write)
 172+ 3645 F6 23
 173+ 3647                          //    dw  LIT, $2C, QERROR
 174+ 3647
 175+ 3647 8F 20                        dw  ZBRANCH
 176+ 3649 0E 00                        dw  Blk_Init_Endif - $
 177+ 364B
 178+ 364B 3D 20 CF FF                  dw  LIT, $FFCF                  // PATCH op-code RST $08, $FF
 179+ 364F 3D 20 36 34                  dw  LIT, Exit_with_error
 180+ 3653 3B 26                        dw  STORE
 181+ 3655
 182+ 3655 F4 33                        dw  BASIC
 183+ 3657              Blk_Init_Endif:
 184+ 3657
 185+ 3657 29 3F 3B 26                  dw  BLK_FH, STORE
 186+ 365B F1 24                        dw  EXIT
 187+ 365D
 188+ 365D              //  ______________________________________________________________________
 189+ 365D              //
 190+ 365D              // #sec
 191+ 365D              // number of 512-Byte "sectors" available on thie sysstem.
 192+ 365D              // it adds up to 16 MByte of data that can be used as source or pool for almost anything.
 193+ 365D
 194+ 365D                              Constant_Def NSEC , "#SEC", 32767
 194+ 365D             >                New_Def  NSEC, "#SEC", Constant_Ptr, is_normal
 194+ 365D             >
 194+ 365D             >Dict_Ptr        defl    $
 194+ 365D             >
 194+ 365D             >//              ______________________________________________________________________
 194+ 365D             >//              Heap part
 194+ 365D             >
 194+ 365D             >
 194+ 365D             >                org     (Heap_Ptr & $1FFF) + $E000
 194+ EA77             >
 194+ EA77             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 194+ EA77             >Latest_Definition defl  Heap_Ptr
 194+ EA77             >
 194+ EA77             >                // dummy db directives used to calculate length of namec
 194+ EA77 23 53 45 43 >                db      "#SEC"
 194+ EA7B             >len_NFA         defl    $ - temp_NFA
 194+ EA7B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 194+ EA77             >
 194+ EA77 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 194+ EA78 23 53 45 43 >                db      "#SEC"               // name string in 7-bit ascii, but
 194+ EA7C             >                org     $-1                 // alter last byte of Name just above to set
 194+ EA7B C3          >                db      {b $} | END_BIT     // msb as name end
 194+ EA7C             >
 194+ EA7C 6A 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 194+ EA7E             >Prev_Ptr        defl    Heap_Ptr
 194+ EA7E             >
 194+ EA7E             >mirror_Ptr      defl    $
 194+ EA7E             >
 194+ EA7E 5F 36       >                dw      Dict_Ptr + 2        // xt
 194+ EA80             >Heap_Ptr        defl    $ - $E000           // save current HP
 194+ EA80             >
 194+ EA80             >Current_HP      defl  $ - $E000             // used to set HP once!
 194+ EA80             >
 194+ EA80             >//              ______________________________________________________________________
 194+ EA80             >//              Dictionary part
 194+ EA80             >
 194+ EA80             >                org     Dict_Ptr
 194+ 365D             >
 194+ 365D 7E 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 194+ 365F             >
 194+ 365F             >NSEC:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 194+ 365F CD FB 26    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 194+ 3662             >
 194+ 3662             >
 194+ 3662             >                endif           ; ok        // for other definitions it "points" the correct handler
 194+ 3662             >                // Use of "; ok" to suppress "warning[fwdref]"
 194+ 3662             >
 194+ 3662             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 194+ 3662 FF 7F       >                dw      32767
 195+ 3664
 196+ 3664              //  ______________________________________________________________________
 197+ 3664
 198+ 3664
# file closed: C:\Zx\CSpect\Projects\vForth17_DOT/source/next-opt1.asm
 143  3664                              include "L3.asm"
# file opened: C:\Zx\CSpect\Projects\vForth17_DOT/source/L3.asm
   1+ 3664              //  ______________________________________________________________________
   2+ 3664              //
   3+ 3664              //  L3.asm
   4+ 3664              //
   5+ 3664              //  Continuation of L2.asm
   6+ 3664              //  I/O Block definitions
   7+ 3664              //  ______________________________________________________________________
   8+ 3664
   9+ 3664
  10+ 3664              //  ______________________________________________________________________
  11+ 3664              //
  12+ 3664              // r/w          a n f --
  13+ 3664              // read/write block n depending on flag f, true-flag means read, false-flag means write.
  14+ 3664                              Colon_Def READ_WRITE, "R/W", is_normal
  14+ 3664             >                New_Def  READ_WRITE, "R/W", Enter_Ptr, is_normal ; ok
  14+ 3664             >
  14+ 3664             >Dict_Ptr        defl    $
  14+ 3664             >
  14+ 3664             >//              ______________________________________________________________________
  14+ 3664             >//              Heap part
  14+ 3664             >
  14+ 3664             >
  14+ 3664             >                org     (Heap_Ptr & $1FFF) + $E000
  14+ EA80             >
  14+ EA80             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  14+ EA80             >Latest_Definition defl  Heap_Ptr
  14+ EA80             >
  14+ EA80             >                // dummy db directives used to calculate length of namec
  14+ EA80 52 2F 57    >                db      "R/W"
  14+ EA83             >len_NFA         defl    $ - temp_NFA
  14+ EA83             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  14+ EA80             >
  14+ EA80 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  14+ EA81 52 2F 57    >                db      "R/W"               // name string in 7-bit ascii, but
  14+ EA84             >                org     $-1                 // alter last byte of Name just above to set
  14+ EA83 D7          >                db      {b $} | END_BIT     // msb as name end
  14+ EA84             >
  14+ EA84 77 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  14+ EA86             >Prev_Ptr        defl    Heap_Ptr
  14+ EA86             >
  14+ EA86             >mirror_Ptr      defl    $
  14+ EA86             >
  14+ EA86 66 36       >                dw      Dict_Ptr + 2        // xt
  14+ EA88             >Heap_Ptr        defl    $ - $E000           // save current HP
  14+ EA88             >
  14+ EA88             >Current_HP      defl  $ - $E000             // used to set HP once!
  14+ EA88             >
  14+ EA88             >//              ______________________________________________________________________
  14+ EA88             >//              Dictionary part
  14+ EA88             >
  14+ EA88             >                org     Dict_Ptr
  14+ 3664             >
  14+ 3664 86 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  14+ 3666             >
  14+ 3666             >READ_WRITE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  14+ 3666 CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  14+ 3669             >
  14+ 3669             >
  14+ 3669             >                endif           ; ok        // for other definitions it "points" the correct handler
  14+ 3669             >                // Use of "; ok" to suppress "warning[fwdref]"
  14+ 3669             >
  14+ 3669             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  15+ 3669 FB 24                        dw      TO_R                    // >r
  16+ 366B 63 25                        dw      ONE_SUBTRACT            // 1-
  17+ 366D C7 25 28 25                  dw      DUP, ZLESS              // dup 0<
  18+ 3671 A3 25 5F 36                  dw      OVER, NSEC              // over #sec
  19+ 3675 63 25 BD 28                  dw      ONE_SUBTRACT, GREATER   // 1- >
  20+ 3679 C0 24                        dw      OR_OP                   // or
  21+ 367B 3D 20 06 00                  dw      LIT, 6, QERROR          // 6 ?error
  21+ 367F 80 2A
  22+ 3681 06 25                        dw      R_TO                    // r>
  23+ 3683                                                              // if
  24+ 3683 8F 20                        dw      ZBRANCH
  25+ 3685 08 00                        dw      Read_Write_Else - $
  26+ 3687 00 36                        dw          BLK_READ            //      blk-read
  27+ 3689 82 20                        dw      BRANCH
  28+ 368B 04 00                        dw      Read_Write_Endif - $
  29+ 368D              Read_Write_Else:                                // else
  30+ 368D 19 36                        dw          BLK_WRITE           //      blk-write
  31+ 368F              Read_Write_Endif:                               // endif
  32+ 368F F1 24                        dw      EXIT                    // ;
  33+ 3691
  34+ 3691
  35+ 3691              //  ______________________________________________________________________
  36+ 3691              //
  37+ 3691              // +buf        a1 -- a2 f
  38+ 3691              // advences to next buffer, cyclically rotating along them
  39+ 3691                              Colon_Def PBUF, "+BUF", is_normal
  39+ 3691             >                New_Def  PBUF, "+BUF", Enter_Ptr, is_normal ; ok
  39+ 3691             >
  39+ 3691             >Dict_Ptr        defl    $
  39+ 3691             >
  39+ 3691             >//              ______________________________________________________________________
  39+ 3691             >//              Heap part
  39+ 3691             >
  39+ 3691             >
  39+ 3691             >                org     (Heap_Ptr & $1FFF) + $E000
  39+ EA88             >
  39+ EA88             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  39+ EA88             >Latest_Definition defl  Heap_Ptr
  39+ EA88             >
  39+ EA88             >                // dummy db directives used to calculate length of namec
  39+ EA88 2B 42 55 46 >                db      "+BUF"
  39+ EA8C             >len_NFA         defl    $ - temp_NFA
  39+ EA8C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  39+ EA88             >
  39+ EA88 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  39+ EA89 2B 42 55 46 >                db      "+BUF"               // name string in 7-bit ascii, but
  39+ EA8D             >                org     $-1                 // alter last byte of Name just above to set
  39+ EA8C C6          >                db      {b $} | END_BIT     // msb as name end
  39+ EA8D             >
  39+ EA8D 80 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  39+ EA8F             >Prev_Ptr        defl    Heap_Ptr
  39+ EA8F             >
  39+ EA8F             >mirror_Ptr      defl    $
  39+ EA8F             >
  39+ EA8F 93 36       >                dw      Dict_Ptr + 2        // xt
  39+ EA91             >Heap_Ptr        defl    $ - $E000           // save current HP
  39+ EA91             >
  39+ EA91             >Current_HP      defl  $ - $E000             // used to set HP once!
  39+ EA91             >
  39+ EA91             >//              ______________________________________________________________________
  39+ EA91             >//              Dictionary part
  39+ EA91             >
  39+ EA91             >                org     Dict_Ptr
  39+ 3691             >
  39+ 3691 8F 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  39+ 3693             >
  39+ 3693             >PBUF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  39+ 3693 CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  39+ 3696             >
  39+ 3696             >
  39+ 3696             >                endif           ; ok        // for other definitions it "points" the correct handler
  39+ 3696             >                // Use of "; ok" to suppress "warning[fwdref]"
  39+ 3696             >
  39+ 3696             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  40+ 3696 3D 20 04 02                  dw      LIT, 516, PLUS          // 516 +
  40+ 369A 43 25
  41+ 369C C7 25 B6 27                  dw      DUP, LIMIT, FETCH       // dup limit @
  41+ 36A0 31 26
  42+ 36A2 97 28                        dw      EQUALS                  // =
  43+ 36A4                                                              // if
  44+ 36A4 8F 20                        dw      ZBRANCH
  45+ 36A6 08 00                        dw      PBuf_Endif - $
  46+ 36A8 AC 25                        dw          DROP                //      drop
  47+ 36AA B0 27 31 26                  dw          FIRST, FETCH        //      first @
  48+ 36AE              PBuf_Endif:                                     // endif
  49+ 36AE C7 25 22 28                  dw      DUP, PREV, FETCH        // dup prev @
  49+ 36B2 31 26
  50+ 36B4 8B 28                        dw      SUBTRACT                // -
  51+ 36B6 F1 24                        dw      EXIT                    // ;
  52+ 36B8
  53+ 36B8              //  ______________________________________________________________________
  54+ 36B8              //
  55+ 36B8              // update       --
  56+ 36B8              // mark the last used block to be written to disk
  57+ 36B8                              Colon_Def UPDATE, "UPDATE", is_normal
  57+ 36B8             >                New_Def  UPDATE, "UPDATE", Enter_Ptr, is_normal ; ok
  57+ 36B8             >
  57+ 36B8             >Dict_Ptr        defl    $
  57+ 36B8             >
  57+ 36B8             >//              ______________________________________________________________________
  57+ 36B8             >//              Heap part
  57+ 36B8             >
  57+ 36B8             >
  57+ 36B8             >                org     (Heap_Ptr & $1FFF) + $E000
  57+ EA91             >
  57+ EA91             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  57+ EA91             >Latest_Definition defl  Heap_Ptr
  57+ EA91             >
  57+ EA91             >                // dummy db directives used to calculate length of namec
  57+ EA91 55 50 44 41 >                db      "UPDATE"
  57+ EA95 54 45       >
  57+ EA97             >len_NFA         defl    $ - temp_NFA
  57+ EA97             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  57+ EA91             >
  57+ EA91 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  57+ EA92 55 50 44 41 >                db      "UPDATE"               // name string in 7-bit ascii, but
  57+ EA96 54 45       >
  57+ EA98             >                org     $-1                 // alter last byte of Name just above to set
  57+ EA97 C5          >                db      {b $} | END_BIT     // msb as name end
  57+ EA98             >
  57+ EA98 88 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  57+ EA9A             >Prev_Ptr        defl    Heap_Ptr
  57+ EA9A             >
  57+ EA9A             >mirror_Ptr      defl    $
  57+ EA9A             >
  57+ EA9A BA 36       >                dw      Dict_Ptr + 2        // xt
  57+ EA9C             >Heap_Ptr        defl    $ - $E000           // save current HP
  57+ EA9C             >
  57+ EA9C             >Current_HP      defl  $ - $E000             // used to set HP once!
  57+ EA9C             >
  57+ EA9C             >//              ______________________________________________________________________
  57+ EA9C             >//              Dictionary part
  57+ EA9C             >
  57+ EA9C             >                org     Dict_Ptr
  57+ 36B8             >
  57+ 36B8 9A 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  57+ 36BA             >
  57+ 36BA             >UPDATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  57+ 36BA CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  57+ 36BD             >
  57+ 36BD             >
  57+ 36BD             >                endif           ; ok        // for other definitions it "points" the correct handler
  57+ 36BD             >                // Use of "; ok" to suppress "warning[fwdref]"
  57+ 36BD             >
  57+ 36BD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  58+ 36BD 22 28 31 26                  dw      PREV, FETCH, FETCH      // prev @ @
  58+ 36C1 31 26
  59+ 36C3 3D 20 00 80                  dw      LIT, $8000, OR_OP       // $8000, or
  59+ 36C7 C0 24
  60+ 36C9 22 28 31 26                  dw      PREV, FETCH, STORE      // prev @ !
  60+ 36CD 3B 26
  61+ 36CF F1 24                        dw      EXIT                    // ;
  62+ 36D1
  63+ 36D1
  64+ 36D1              //  ______________________________________________________________________
  65+ 36D1              //
  66+ 36D1              // empty-buffers --
  67+ 36D1                              Colon_Def EMPTY_BUFFERS, "EMPTY-BUFFERS", is_normal
  67+ 36D1             >                New_Def  EMPTY_BUFFERS, "EMPTY-BUFFERS", Enter_Ptr, is_normal ; ok
  67+ 36D1             >
  67+ 36D1             >Dict_Ptr        defl    $
  67+ 36D1             >
  67+ 36D1             >//              ______________________________________________________________________
  67+ 36D1             >//              Heap part
  67+ 36D1             >
  67+ 36D1             >
  67+ 36D1             >                org     (Heap_Ptr & $1FFF) + $E000
  67+ EA9C             >
  67+ EA9C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  67+ EA9C             >Latest_Definition defl  Heap_Ptr
  67+ EA9C             >
  67+ EA9C             >                // dummy db directives used to calculate length of namec
  67+ EA9C 45 4D 50 54 >                db      "EMPTY-BUFFERS"
  67+ EAA0 59 2D 42 55 >
  67+ EAA4 46 46 45 52 >
  67+ EAA8 53          >
  67+ EAA9             >len_NFA         defl    $ - temp_NFA
  67+ EAA9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  67+ EA9C             >
  67+ EA9C 8D          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  67+ EA9D 45 4D 50 54 >                db      "EMPTY-BUFFERS"               // name string in 7-bit ascii, but
  67+ EAA1 59 2D 42 55 >
  67+ EAA5 46 46 45 52 >
  67+ EAA9 53          >
  67+ EAAA             >                org     $-1                 // alter last byte of Name just above to set
  67+ EAA9 D3          >                db      {b $} | END_BIT     // msb as name end
  67+ EAAA             >
  67+ EAAA 91 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  67+ EAAC             >Prev_Ptr        defl    Heap_Ptr
  67+ EAAC             >
  67+ EAAC             >mirror_Ptr      defl    $
  67+ EAAC             >
  67+ EAAC D3 36       >                dw      Dict_Ptr + 2        // xt
  67+ EAAE             >Heap_Ptr        defl    $ - $E000           // save current HP
  67+ EAAE             >
  67+ EAAE             >Current_HP      defl  $ - $E000             // used to set HP once!
  67+ EAAE             >
  67+ EAAE             >//              ______________________________________________________________________
  67+ EAAE             >//              Dictionary part
  67+ EAAE             >
  67+ EAAE             >                org     Dict_Ptr
  67+ 36D1             >
  67+ 36D1 AC 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  67+ 36D3             >
  67+ 36D3             >EMPTY_BUFFERS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  67+ 36D3 CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  67+ 36D6             >
  67+ 36D6             >
  67+ 36D6             >                endif           ; ok        // for other definitions it "points" the correct handler
  67+ 36D6             >                // Use of "; ok" to suppress "warning[fwdref]"
  67+ 36D6             >
  67+ 36D6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  68+ 36D6 B0 27 31 26                  dw      FIRST, FETCH            // first @
  69+ 36DA B6 27 31 26                  dw      LIMIT, FETCH            // limit @
  70+ 36DE A3 25 8B 28                  dw      OVER, SUBTRACT, ERASE   // over - erase
  70+ 36E2 28 2D
  71+ 36E4 F1 24                        dw      EXIT                    // ;
  72+ 36E6
  73+ 36E6              //  ______________________________________________________________________
  74+ 36E6              //
  75+ 36E6              // buffer       n -- a
  76+ 36E6              // read block n and gives the address to a buffer
  77+ 36E6              // any block previously inside the buffer, if modified, is rewritten to
  78+ 36E6              // disk before reading the block n.
  79+ 36E6
  80+ 36E6                              Colon_Def BUFFER, "BUFFER", is_normal
  80+ 36E6             >                New_Def  BUFFER, "BUFFER", Enter_Ptr, is_normal ; ok
  80+ 36E6             >
  80+ 36E6             >Dict_Ptr        defl    $
  80+ 36E6             >
  80+ 36E6             >//              ______________________________________________________________________
  80+ 36E6             >//              Heap part
  80+ 36E6             >
  80+ 36E6             >
  80+ 36E6             >                org     (Heap_Ptr & $1FFF) + $E000
  80+ EAAE             >
  80+ EAAE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  80+ EAAE             >Latest_Definition defl  Heap_Ptr
  80+ EAAE             >
  80+ EAAE             >                // dummy db directives used to calculate length of namec
  80+ EAAE 42 55 46 46 >                db      "BUFFER"
  80+ EAB2 45 52       >
  80+ EAB4             >len_NFA         defl    $ - temp_NFA
  80+ EAB4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  80+ EAAE             >
  80+ EAAE 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  80+ EAAF 42 55 46 46 >                db      "BUFFER"               // name string in 7-bit ascii, but
  80+ EAB3 45 52       >
  80+ EAB5             >                org     $-1                 // alter last byte of Name just above to set
  80+ EAB4 D2          >                db      {b $} | END_BIT     // msb as name end
  80+ EAB5             >
  80+ EAB5 9C 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  80+ EAB7             >Prev_Ptr        defl    Heap_Ptr
  80+ EAB7             >
  80+ EAB7             >mirror_Ptr      defl    $
  80+ EAB7             >
  80+ EAB7 E8 36       >                dw      Dict_Ptr + 2        // xt
  80+ EAB9             >Heap_Ptr        defl    $ - $E000           // save current HP
  80+ EAB9             >
  80+ EAB9             >Current_HP      defl  $ - $E000             // used to set HP once!
  80+ EAB9             >
  80+ EAB9             >//              ______________________________________________________________________
  80+ EAB9             >//              Dictionary part
  80+ EAB9             >
  80+ EAB9             >                org     Dict_Ptr
  80+ 36E6             >
  80+ 36E6 B7 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  80+ 36E8             >
  80+ 36E8             >BUFFER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  80+ 36E8 CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  80+ 36EB             >
  80+ 36EB             >
  80+ 36EB             >                endif           ; ok        // for other definitions it "points" the correct handler
  80+ 36EB             >                // Use of "; ok" to suppress "warning[fwdref]"
  80+ 36EB             >
  80+ 36EB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  81+ 36EB 1C 28 31 26                  dw      USED, FETCH             // used @
  82+ 36EF C7 25 FB 24                  dw      DUP, TO_R               // dup >r
  83+ 36F3                                                              // begin
  84+ 36F3              Buffer_Begin:
  85+ 36F3 93 36                        dw          PBUF                //      +buf
  86+ 36F5                                                              // until
  87+ 36F5 8F 20                        dw      ZBRANCH
  88+ 36F7 FC FF                        dw      Buffer_Begin - $
  89+ 36F9 1C 28 3B 26                  dw      USED, STORE             // used !
  90+ 36FD 11 25 31 26                  dw      R_OP, FETCH, ZLESS      // r @ 0<
  90+ 3701 28 25
  91+ 3703                                                              // if
  92+ 3703 8F 20                        dw      ZBRANCH
  93+ 3705 14 00                        dw      Buffer_Endif - $
  94+ 3707 11 25 72 25                  dw          R_OP, CELL_PLUS     //      r cell+
  95+ 370B 11 25 31 26                  dw          R_OP, FETCH         //      r fetch
  96+ 370F 3D 20 FF 7F                  dw          LIT, $7FFF          //      7FFF
  97+ 3713 B1 24                        dw          AND_OP              //      and
  98+ 3715 27 27 66 36                  dw          ZERO, READ_WRITE    //      0 r/w
  99+ 3719              Buffer_Endif:                                   // endif
 100+ 3719 11 25 3B 26                  dw      R_OP, STORE             // r !
 101+ 371D 11 25 22 28                  dw      R_OP, PREV, STORE       // r prev !
 101+ 3721 3B 26
 102+ 3723 06 25 72 25                  dw      R_TO, CELL_PLUS         // r> cell+
 103+ 3727 F1 24                        dw      EXIT                    // ;
 104+ 3729
 105+ 3729              //  ______________________________________________________________________
 106+ 3729              //
 107+ 3729              // block        n -- a
 108+ 3729              // Leaves the buffer address that contains the block n.
 109+ 3729              // If the block is not already present, it will be loaded from disk
 110+ 3729              // The block previously inside the buffer, if modified, is rewritten to
 111+ 3729              // disk before reading the block n.
 112+ 3729              // See also BUFFER, R/W, UPDATE, FLUSH.
 113+ 3729
 114+ 3729                              Colon_Def BLOCK, "BLOCK", is_normal
 114+ 3729             >                New_Def  BLOCK, "BLOCK", Enter_Ptr, is_normal ; ok
 114+ 3729             >
 114+ 3729             >Dict_Ptr        defl    $
 114+ 3729             >
 114+ 3729             >//              ______________________________________________________________________
 114+ 3729             >//              Heap part
 114+ 3729             >
 114+ 3729             >
 114+ 3729             >                org     (Heap_Ptr & $1FFF) + $E000
 114+ EAB9             >
 114+ EAB9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 114+ EAB9             >Latest_Definition defl  Heap_Ptr
 114+ EAB9             >
 114+ EAB9             >                // dummy db directives used to calculate length of namec
 114+ EAB9 42 4C 4F 43 >                db      "BLOCK"
 114+ EABD 4B          >
 114+ EABE             >len_NFA         defl    $ - temp_NFA
 114+ EABE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 114+ EAB9             >
 114+ EAB9 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 114+ EABA 42 4C 4F 43 >                db      "BLOCK"               // name string in 7-bit ascii, but
 114+ EABE 4B          >
 114+ EABF             >                org     $-1                 // alter last byte of Name just above to set
 114+ EABE CB          >                db      {b $} | END_BIT     // msb as name end
 114+ EABF             >
 114+ EABF AE 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 114+ EAC1             >Prev_Ptr        defl    Heap_Ptr
 114+ EAC1             >
 114+ EAC1             >mirror_Ptr      defl    $
 114+ EAC1             >
 114+ EAC1 2B 37       >                dw      Dict_Ptr + 2        // xt
 114+ EAC3             >Heap_Ptr        defl    $ - $E000           // save current HP
 114+ EAC3             >
 114+ EAC3             >Current_HP      defl  $ - $E000             // used to set HP once!
 114+ EAC3             >
 114+ EAC3             >//              ______________________________________________________________________
 114+ EAC3             >//              Dictionary part
 114+ EAC3             >
 114+ EAC3             >                org     Dict_Ptr
 114+ 3729             >
 114+ 3729 C1 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 114+ 372B             >
 114+ 372B             >BLOCK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 114+ 372B CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 114+ 372E             >
 114+ 372E             >
 114+ 372E             >                endif           ; ok        // for other definitions it "points" the correct handler
 114+ 372E             >                // Use of "; ok" to suppress "warning[fwdref]"
 114+ 372E             >
 114+ 372E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 115+ 372E                          //  dw      OFFSET, FETCH           // offset @
 116+ 372E                          //  dw      PLUS
 117+ 372E FB 24                        dw      TO_R                    // + >r
 118+ 3730 22 28 31 26                  dw      PREV, FETCH             // prev @
 119+ 3734 C7 25 31 26                  dw      DUP, FETCH              // dup @
 120+ 3738 11 25 8B 28                  dw      R_OP, SUBTRACT          // r -
 121+ 373C C7 25 43 25                  dw      DUP, PLUS               // dup +  ( trick: check equality without most significant bit )
 122+ 3740                                                              // if
 123+ 3740 8F 20                        dw        ZBRANCH
 124+ 3742 32 00                        dw        Block_Endif_1 - $
 125+ 3744              Block_Begin:                                    //      begin
 126+ 3744 93 36 16 25                  dw          PBUF, ZEQUAL        //          +buf 0
 127+ 3748                                                              //          if
 128+ 3748 8F 20                        dw          ZBRANCH
 129+ 374A 12 00                        dw          Block_Endif_2 - $
 130+ 374C AC 25                        dw              DROP            //              drop
 131+ 374E 11 25 E8 36                  dw              R_OP, BUFFER    //              r buffer
 132+ 3752 C7 25                        dw              DUP             //              dup
 133+ 3754 11 25 2E 27                  dw              R_OP, ONE       //              r 1
 134+ 3758 66 36                        dw              READ_WRITE      //              r/w
 135+ 375A 7E 25                        dw              TWO_MINUS       //              2-
 136+ 375C              Block_Endif_2:                                  //          endif
 137+ 375C C7 25 31 26                  dw          DUP, FETCH, R_OP    //          dup @ r
 137+ 3760 11 25
 138+ 3762 8B 28 C7 25                  dw          SUBTRACT, DUP       //          - dup
 139+ 3766 43 25 16 25                  dw          PLUS, ZEQUAL        //          + 0=
 140+ 376A                                                              //      until
 141+ 376A 8F 20                        dw        ZBRANCH
 142+ 376C D8 FF                        dw        Block_Begin - $
 143+ 376E C7 25 22 28                  dw        DUP, PREV, STORE      //      dup prev !
 143+ 3772 3B 26
 144+ 3774              Block_Endif_1:                                  // endif
 145+ 3774 06 25 AC 25                  dw      R_TO, DROP, CELL_PLUS   // r> drop cell+
 145+ 3778 72 25
 146+ 377A F1 24                        dw      EXIT                    // ;
 147+ 377C
 148+ 377C              //  ______________________________________________________________________
 149+ 377C              //
 150+ 377C              // #buff        -- n
 151+ 377C              // number of buffers available. must be the difference between LIMIT and FIRST divided by 516
 152+ 377C                              Constant_Def NBUFF,   "#BUFF", 7
 152+ 377C             >                New_Def  NBUFF, "#BUFF", Constant_Ptr, is_normal
 152+ 377C             >
 152+ 377C             >Dict_Ptr        defl    $
 152+ 377C             >
 152+ 377C             >//              ______________________________________________________________________
 152+ 377C             >//              Heap part
 152+ 377C             >
 152+ 377C             >
 152+ 377C             >                org     (Heap_Ptr & $1FFF) + $E000
 152+ EAC3             >
 152+ EAC3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 152+ EAC3             >Latest_Definition defl  Heap_Ptr
 152+ EAC3             >
 152+ EAC3             >                // dummy db directives used to calculate length of namec
 152+ EAC3 23 42 55 46 >                db      "#BUFF"
 152+ EAC7 46          >
 152+ EAC8             >len_NFA         defl    $ - temp_NFA
 152+ EAC8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 152+ EAC3             >
 152+ EAC3 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 152+ EAC4 23 42 55 46 >                db      "#BUFF"               // name string in 7-bit ascii, but
 152+ EAC8 46          >
 152+ EAC9             >                org     $-1                 // alter last byte of Name just above to set
 152+ EAC8 C6          >                db      {b $} | END_BIT     // msb as name end
 152+ EAC9             >
 152+ EAC9 B9 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 152+ EACB             >Prev_Ptr        defl    Heap_Ptr
 152+ EACB             >
 152+ EACB             >mirror_Ptr      defl    $
 152+ EACB             >
 152+ EACB 7E 37       >                dw      Dict_Ptr + 2        // xt
 152+ EACD             >Heap_Ptr        defl    $ - $E000           // save current HP
 152+ EACD             >
 152+ EACD             >Current_HP      defl  $ - $E000             // used to set HP once!
 152+ EACD             >
 152+ EACD             >//              ______________________________________________________________________
 152+ EACD             >//              Dictionary part
 152+ EACD             >
 152+ EACD             >                org     Dict_Ptr
 152+ 377C             >
 152+ 377C CB 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 152+ 377E             >
 152+ 377E             >NBUFF:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 152+ 377E CD FB 26    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 152+ 3781             >
 152+ 3781             >
 152+ 3781             >                endif           ; ok        // for other definitions it "points" the correct handler
 152+ 3781             >                // Use of "; ok" to suppress "warning[fwdref]"
 152+ 3781             >
 152+ 3781             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 152+ 3781 07 00       >                dw      7
 153+ 3783
 154+ 3783              //  ______________________________________________________________________
 155+ 3783              //
 156+ 3783              // flush        --
 157+ 3783                              Colon_Def FLUSH, "FLUSH", is_normal
 157+ 3783             >                New_Def  FLUSH, "FLUSH", Enter_Ptr, is_normal ; ok
 157+ 3783             >
 157+ 3783             >Dict_Ptr        defl    $
 157+ 3783             >
 157+ 3783             >//              ______________________________________________________________________
 157+ 3783             >//              Heap part
 157+ 3783             >
 157+ 3783             >
 157+ 3783             >                org     (Heap_Ptr & $1FFF) + $E000
 157+ EACD             >
 157+ EACD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 157+ EACD             >Latest_Definition defl  Heap_Ptr
 157+ EACD             >
 157+ EACD             >                // dummy db directives used to calculate length of namec
 157+ EACD 46 4C 55 53 >                db      "FLUSH"
 157+ EAD1 48          >
 157+ EAD2             >len_NFA         defl    $ - temp_NFA
 157+ EAD2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 157+ EACD             >
 157+ EACD 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 157+ EACE 46 4C 55 53 >                db      "FLUSH"               // name string in 7-bit ascii, but
 157+ EAD2 48          >
 157+ EAD3             >                org     $-1                 // alter last byte of Name just above to set
 157+ EAD2 C8          >                db      {b $} | END_BIT     // msb as name end
 157+ EAD3             >
 157+ EAD3 C3 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 157+ EAD5             >Prev_Ptr        defl    Heap_Ptr
 157+ EAD5             >
 157+ EAD5             >mirror_Ptr      defl    $
 157+ EAD5             >
 157+ EAD5 85 37       >                dw      Dict_Ptr + 2        // xt
 157+ EAD7             >Heap_Ptr        defl    $ - $E000           // save current HP
 157+ EAD7             >
 157+ EAD7             >Current_HP      defl  $ - $E000             // used to set HP once!
 157+ EAD7             >
 157+ EAD7             >//              ______________________________________________________________________
 157+ EAD7             >//              Dictionary part
 157+ EAD7             >
 157+ EAD7             >                org     Dict_Ptr
 157+ 3783             >
 157+ 3783 D5 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 157+ 3785             >
 157+ 3785             >FLUSH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 157+ 3785 CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 157+ 3788             >
 157+ 3788             >
 157+ 3788             >                endif           ; ok        // for other definitions it "points" the correct handler
 157+ 3788             >                // Use of "; ok" to suppress "warning[fwdref]"
 157+ 3788             >
 157+ 3788             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 158+ 3788 7E 37 5C 25                  dw      NBUFF, ONE_PLUS, ZERO   // #buff 1+ 0
 158+ 378C 27 27
 159+ 378E              Flush_Do:                                       // do
 160+ 378E CC 20                        dw      C_DO
 161+ 3790 27 27 E8 36                  dw      ZERO, BUFFER, DROP      //      0 buffer drop
 161+ 3794 AC 25
 162+ 3796                                                              // loop
 163+ 3796 7A 20 F8 FF                  dw      C_LOOP, Flush_Do - $
 164+ 379A 29 3F 31 26                  dw      BLK_FH, FETCH           // blk-fh @     ( ZX-Next dependance )
 165+ 379E A1 23 AC 25                  dw      F_SYNC, DROP            // f_sync drop
 166+ 37A2 F1 24                        dw      EXIT                    // exit
 167+ 37A4
 168+ 37A4              //  ______________________________________________________________________
 169+ 37A4              //
 170+ 37A4              // f_getline    a m fh -- n
 171+ 37A4              // Given an open filehandle read next line (terminated with $0D or $0A)
 172+ 37A4              // Address a is left for subsequent processing
 173+ 37A4              // and n as the actual number of byte read, that is the length of line
 174+ 37A4                              Colon_Def F_GETLINE, "F_GETLINE", is_normal
 174+ 37A4             >                New_Def  F_GETLINE, "F_GETLINE", Enter_Ptr, is_normal ; ok
 174+ 37A4             >
 174+ 37A4             >Dict_Ptr        defl    $
 174+ 37A4             >
 174+ 37A4             >//              ______________________________________________________________________
 174+ 37A4             >//              Heap part
 174+ 37A4             >
 174+ 37A4             >
 174+ 37A4             >                org     (Heap_Ptr & $1FFF) + $E000
 174+ EAD7             >
 174+ EAD7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 174+ EAD7             >Latest_Definition defl  Heap_Ptr
 174+ EAD7             >
 174+ EAD7             >                // dummy db directives used to calculate length of namec
 174+ EAD7 46 5F 47 45 >                db      "F_GETLINE"
 174+ EADB 54 4C 49 4E >
 174+ EADF 45          >
 174+ EAE0             >len_NFA         defl    $ - temp_NFA
 174+ EAE0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 174+ EAD7             >
 174+ EAD7 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 174+ EAD8 46 5F 47 45 >                db      "F_GETLINE"               // name string in 7-bit ascii, but
 174+ EADC 54 4C 49 4E >
 174+ EAE0 45          >
 174+ EAE1             >                org     $-1                 // alter last byte of Name just above to set
 174+ EAE0 C5          >                db      {b $} | END_BIT     // msb as name end
 174+ EAE1             >
 174+ EAE1 CD 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 174+ EAE3             >Prev_Ptr        defl    Heap_Ptr
 174+ EAE3             >
 174+ EAE3             >mirror_Ptr      defl    $
 174+ EAE3             >
 174+ EAE3 A6 37       >                dw      Dict_Ptr + 2        // xt
 174+ EAE5             >Heap_Ptr        defl    $ - $E000           // save current HP
 174+ EAE5             >
 174+ EAE5             >Current_HP      defl  $ - $E000             // used to set HP once!
 174+ EAE5             >
 174+ EAE5             >//              ______________________________________________________________________
 174+ EAE5             >//              Dictionary part
 174+ EAE5             >
 174+ EAE5             >                org     Dict_Ptr
 174+ 37A4             >
 174+ 37A4 E3 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 174+ 37A6             >
 174+ 37A6             >F_GETLINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 174+ 37A6 CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 174+ 37A9             >
 174+ 37A9             >
 174+ 37A9             >                endif           ; ok        // for other definitions it "points" the correct handler
 174+ 37A9             >                // Use of "; ok" to suppress "warning[fwdref]"
 174+ 37A9             >
 174+ 37A9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 175+ 37A9 FB 24                        dw      TO_R                    // >r               ( a  m  )     \  fh
 176+ 37AB B7 25                        dw      TUCK                    // tuck             ( m a m )
 177+ 37AD 11 25 AD 23                  dw      R_OP, F_FGETPOS         // r f_fgetpos      ( m a m d f )
 178+ 37B1 3D 20 23 00                  dw      LIT, 35, QERROR         // 44 ?error        ( m a m d )
 178+ 37B5 80 2A
 179+ 37B7
 180+ 37B7 02 26 A3 25                  dw      TWO_SWAP, OVER          // 2swap over       ( m d a m )
 181+ 37BB 5C 25 C0 25                  dw      ONE_PLUS, SWAP          // 1+ swap          ( m d a a+1 m )
 182+ 37BF
 183+ 37BF 11 25 C5 23                  dw      R_OP, F_READ            // r f_read         ( m d a n f )
 184+ 37C3 3D 20 23 00                  dw      LIT, 35, QERROR         // 46 ?error        ( m d a n )
 184+ 37C7 80 2A
 185+ 37C9                                                              // if ( at least 1 chr was read )  \  fh
 186+ 37C9 8F 20                        dw      ZBRANCH
 187+ 37CB 3C 00                        dw      FGetline_Else - $
 188+ 37CD 3D 20 0A 00                  dw          LIT, 10, ENCLOSE    //      10 enclose       ( m d a x b x )
 188+ 37D1 C0 21
 189+ 37D3 AC 25 B1 25                  dw          DROP, NIP           //      drop nip         ( m d a b )
 190+ 37D7 C0 25                        dw          SWAP                //      drop swap        ( m d b a )
 191+ 37D9 3D 20 0D 00                  dw          LIT, 13, ENCLOSE    //      13 enclose       ( m d b a x c x )
 191+ 37DD C0 21
 192+ 37DF AC 25 B1 25                  dw          DROP, NIP           //      drop nip         ( m d b a c )
 193+ 37E3 CE 25 C8 28                  dw          ROT, MIN            //      rot min          ( m d a n )
 194+ 37E7 C7 25 3A 28                  dw          DUP, SPAN, STORE    //      dup span !       ( m d a n )
 194+ 37EB 3B 26
 195+ 37ED C7 25 FB 24                  dw          DUP, TO_R           //      dup >r           ( m d a n )      \ fh n
 196+ 37F1 02 26 06 25                  dw          TWO_SWAP, R_TO      //      2swap r>         ( m a n d n )    \ fh
 197+ 37F5 27 27 4D 25                  dw          ZERO, DPLUS         //      0 d+             ( m a n d+n )
 198+ 37F9 06 25 7A 23                  dw          R_TO, F_SEEK        //      r> f_seek        ( m a n f )
 199+ 37FD 3D 20 24 00                  dw          LIT, 36, QERROR     //      45 ?error        ( m a n )
 199+ 3801 80 2A
 200+ 3803                                                              // else
 201+ 3803 82 20                        dw      BRANCH
 202+ 3805 0C 00                        dw      FGetline_Endif - $
 203+ 3807              FGetline_Else:
 204+ 3807 06 25                        dw          R_TO                //      r>              ( m d a fh )
 205+ 3809 02 26 FC 25                  dw          TWO_SWAP, TWO_DROP  //      2swap 2drop     ( m a fh )
 206+ 380D AC 25 27 27                  dw          DROP, ZERO          //      drop, 0         ( m a 0 )
 207+ 3811              FGetline_Endif:                                 // endif
 208+ 3811 FB 24 C7 25                  dw      TO_R, DUP, DUP          // >r dup dup           ( m a a a )
 208+ 3815 C7 25
 209+ 3817 5C 25 C0 25                  dw      ONE_PLUS, SWAP          // 1+ swap              ( m a a+1 a )
 210+ 381B 11 25 32 24                  dw      R_OP, CMOVE             // r cmove              ( m a )
 211+ 381F 0F 26 43 25                  dw      TWO_DUP, PLUS           // 2dup +               ( m a m+a )
 212+ 3823 27 27 C0 25                  dw      ZERO, SWAP              // 0 swap
 213+ 3827 76 25 3B 26                  dw      CELL_MINUS,  STORE      // cell-  !             ( m a )
 214+ 382B 11 25 43 25                  dw      R_OP, PLUS, ONE_SUBTRACT// r + 1-               ( m a+n1 )
 214+ 382F 63 25
 215+ 3831 C0 25 11 25                  dw      SWAP, R_OP, SUBTRACT    // swap r -             ( a+n+1 m-n )
 215+ 3835 8B 28
 216+ 3837 33 2D                        dw      BLANK                   // blank
 217+ 3839 06 25                        dw      R_TO                    // r>                   ( n )
 218+ 383B F1 24                        dw      EXIT                    // ;
 219+ 383D
 220+ 383D              //  ______________________________________________________________________
 221+ 383D              //
 222+ 383D              // f_include    fh --
 223+ 383D              // Given a filehandle includes the source from file
 224+ 383D                              Colon_Def F_INCLUDE, "F_INCLUDE", is_normal
 224+ 383D             >                New_Def  F_INCLUDE, "F_INCLUDE", Enter_Ptr, is_normal ; ok
 224+ 383D             >
 224+ 383D             >Dict_Ptr        defl    $
 224+ 383D             >
 224+ 383D             >//              ______________________________________________________________________
 224+ 383D             >//              Heap part
 224+ 383D             >
 224+ 383D             >
 224+ 383D             >                org     (Heap_Ptr & $1FFF) + $E000
 224+ EAE5             >
 224+ EAE5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 224+ EAE5             >Latest_Definition defl  Heap_Ptr
 224+ EAE5             >
 224+ EAE5             >                // dummy db directives used to calculate length of namec
 224+ EAE5 46 5F 49 4E >                db      "F_INCLUDE"
 224+ EAE9 43 4C 55 44 >
 224+ EAED 45          >
 224+ EAEE             >len_NFA         defl    $ - temp_NFA
 224+ EAEE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 224+ EAE5             >
 224+ EAE5 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 224+ EAE6 46 5F 49 4E >                db      "F_INCLUDE"               // name string in 7-bit ascii, but
 224+ EAEA 43 4C 55 44 >
 224+ EAEE 45          >
 224+ EAEF             >                org     $-1                 // alter last byte of Name just above to set
 224+ EAEE C5          >                db      {b $} | END_BIT     // msb as name end
 224+ EAEF             >
 224+ EAEF D7 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 224+ EAF1             >Prev_Ptr        defl    Heap_Ptr
 224+ EAF1             >
 224+ EAF1             >mirror_Ptr      defl    $
 224+ EAF1             >
 224+ EAF1 3F 38       >                dw      Dict_Ptr + 2        // xt
 224+ EAF3             >Heap_Ptr        defl    $ - $E000           // save current HP
 224+ EAF3             >
 224+ EAF3             >Current_HP      defl  $ - $E000             // used to set HP once!
 224+ EAF3             >
 224+ EAF3             >//              ______________________________________________________________________
 224+ EAF3             >//              Dictionary part
 224+ EAF3             >
 224+ EAF3             >                org     Dict_Ptr
 224+ 383D             >
 224+ 383D F1 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 224+ 383F             >
 224+ 383F             >F_INCLUDE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 224+ 383F CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 224+ 3842             >
 224+ 3842             >
 224+ 3842             >                endif           ; ok        // for other definitions it "points" the correct handler
 224+ 3842             >                // Use of "; ok" to suppress "warning[fwdref]"
 224+ 3842             >
 224+ 3842             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 225+ 3842 C8 27 31 26                  dw      BLK, FETCH, TO_R        // blk @ >r
 225+ 3846 FB 24
 226+ 3848 CE 27 31 26                  dw      TO_IN, FETCH, TO_R      // >in @ >r
 226+ 384C FB 24
 227+ 384E 34 28 31 26                  dw      SOURCE_ID, FETCH, TO_R  // source-id @ >r
 227+ 3852 FB 24
 228+ 3854 11 25                        dw      R_OP                    // r
 229+ 3856 31 25                        dw      ZGREATER                // 0>  (filehandle)
 230+ 3858                                                              // if
 231+ 3858 8F 20                        dw      ZBRANCH
 232+ 385A 20 00                        dw      FInclude_Else_1 - $
 233+ 385C 11 25 AD 23                  dw          R_OP, F_FGETPOS     //      r f_getpos
 234+ 3860 3D 20 2C 00                  dw          LIT, 44, QERROR     //      44 ?error
 234+ 3864 80 2A
 235+ 3866 CE 27 31 26                  dw          TO_IN, FETCH        //      >in @ 2-
 236+ 386A 7E 25                        dw          TWO_MINUS
 237+ 386C 3A 28 31 26                  dw          SPAN, FETCH         //      span @ -
 238+ 3870 8B 28                        dw          SUBTRACT
 239+ 3872 80 28 4D 25                  dw          S_TO_D, DPLUS       //      s>d d+
 240+ 3876                                                              // else
 241+ 3876 82 20                        dw      BRANCH
 242+ 3878 06 00                        dw      FInclude_Endif_1 - $
 243+ 387A              FInclude_Else_1:
 244+ 387A 27 27 27 27                  dw          ZERO, ZERO          //      0 0
 245+ 387E                                                              // endif
 246+ 387E              FInclude_Endif_1:
 247+ 387E FB 24 FB 24                  dw      TO_R, TO_R              // >r >r
 248+ 3882 34 28 3B 26                  dw      SOURCE_ID, STORE        // source-id !
 249+ 3886              FInclude_Begin:                                 // begin
 250+ 3886 2E 27 2B 37                  dw          ONE, BLOCK, BBUF    //      1 block b/buf
 250+ 388A 58 27
 251+ 388C 0F 26 33 2D                  dw          TWO_DUP, BLANK      //      2dup blank
 252+ 3890 C0 25 5C 25                  dw          SWAP, ONE_PLUS      //      swap 1+
 253+ 3894 C0 25 76 25                  dw          SWAP, CELL_MINUS    //      swap cell-
 254+ 3898 34 28 31 26                  dw          SOURCE_ID, FETCH    //      source-id @
 255+ 389C A6 37                        dw          F_GETLINE           //      f_getline
 256+ 389E                                                              // while
 257+ 389E 8F 20                        dw      ZBRANCH
 258+ 38A0 14 00                        dw      FInclude_Repeat - $
 259+ 38A2 2E 27 C8 27                  dw          ONE, BLK, STORE     //      1 blk !
 259+ 38A6 3B 26
 260+ 38A8 27 27 CE 27                  dw          ZERO, TO_IN, STORE  //      0 >in !
 260+ 38AC 3B 26
 261+ 38AE 67 31                        dw          INTERPRET           //      interpret
 262+ 38B0 82 20                        dw      BRANCH
 263+ 38B2 D4 FF                        dw      FInclude_Begin - $
 264+ 38B4              FInclude_Repeat:                                // repeat
 265+ 38B4                              //  close current file
 266+ 38B4 34 28 31 26                  dw      SOURCE_ID, FETCH        // source-id @
 267+ 38B8 95 23                        dw      F_CLOSE                 // f_close
 268+ 38BA 3D 20 2A 00                  dw      LIT, 42, QERROR         // 42 ?error
 268+ 38BE 80 2A
 269+ 38C0
 270+ 38C0 06 25 06 25                  dw      R_TO, R_TO, R_TO        // r> r> r>
 270+ 38C4 06 25
 271+ 38C6 C7 25 34 28                  dw      DUP, SOURCE_ID, STORE   // dup source-id !
 271+ 38CA 3B 26
 272+ 38CC 31 25                        dw      ZGREATER                // 0>
 273+ 38CE                                                              // if
 274+ 38CE 8F 20                        dw      ZBRANCH
 275+ 38D0 12 00                        dw      FInclude_Else_2 - $
 276+ 38D2 34 28 31 26                  dw          SOURCE_ID, FETCH    //      source-id @
 277+ 38D6 7A 23                        dw          F_SEEK              //      f_seek
 278+ 38D8 3D 20 2B 00                  dw          LIT, 43, QERROR     //      43, ?error
 278+ 38DC 80 2A
 279+ 38DE                                                              // else
 280+ 38DE 82 20                        dw      BRANCH
 281+ 38E0 04 00                        dw      FInclude_Endif_2 - $
 282+ 38E2              FInclude_Else_2:
 283+ 38E2 FC 25                        dw          TWO_DROP            //      2drop
 284+ 38E4              FInclude_Endif_2:                               // endif
 285+ 38E4 06 25 CE 27                  dw      R_TO, TO_IN, STORE      // r> >in !
 285+ 38E8 3B 26
 286+ 38EA 06 25 C8 27                  dw      R_TO, BLK, STORE        // r> blk !
 286+ 38EE 3B 26
 287+ 38F0 F1 24                        dw      EXIT                    // ;
 288+ 38F2
 289+ 38F2              //  ______________________________________________________________________
 290+ 38F2              //
 291+ 38F2              // open<         -- fh
 292+ 38F2              // Open the following filename and return it file-handle
 293+ 38F2              // Used in the form OPEN CCCC
 294+ 38F2                              Colon_Def OPEN_FH, "OPEN<", is_normal
 294+ 38F2             >                New_Def  OPEN_FH, "OPEN<", Enter_Ptr, is_normal ; ok
 294+ 38F2             >
 294+ 38F2             >Dict_Ptr        defl    $
 294+ 38F2             >
 294+ 38F2             >//              ______________________________________________________________________
 294+ 38F2             >//              Heap part
 294+ 38F2             >
 294+ 38F2             >
 294+ 38F2             >                org     (Heap_Ptr & $1FFF) + $E000
 294+ EAF3             >
 294+ EAF3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 294+ EAF3             >Latest_Definition defl  Heap_Ptr
 294+ EAF3             >
 294+ EAF3             >                // dummy db directives used to calculate length of namec
 294+ EAF3 4F 50 45 4E >                db      "OPEN<"
 294+ EAF7 3C          >
 294+ EAF8             >len_NFA         defl    $ - temp_NFA
 294+ EAF8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 294+ EAF3             >
 294+ EAF3 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 294+ EAF4 4F 50 45 4E >                db      "OPEN<"               // name string in 7-bit ascii, but
 294+ EAF8 3C          >
 294+ EAF9             >                org     $-1                 // alter last byte of Name just above to set
 294+ EAF8 BC          >                db      {b $} | END_BIT     // msb as name end
 294+ EAF9             >
 294+ EAF9 E5 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 294+ EAFB             >Prev_Ptr        defl    Heap_Ptr
 294+ EAFB             >
 294+ EAFB             >mirror_Ptr      defl    $
 294+ EAFB             >
 294+ EAFB F4 38       >                dw      Dict_Ptr + 2        // xt
 294+ EAFD             >Heap_Ptr        defl    $ - $E000           // save current HP
 294+ EAFD             >
 294+ EAFD             >Current_HP      defl  $ - $E000             // used to set HP once!
 294+ EAFD             >
 294+ EAFD             >//              ______________________________________________________________________
 294+ EAFD             >//              Dictionary part
 294+ EAFD             >
 294+ EAFD             >                org     Dict_Ptr
 294+ 38F2             >
 294+ 38F2 FB 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 294+ 38F4             >
 294+ 38F4             >OPEN_FH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 294+ 38F4 CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 294+ 38F7             >
 294+ 38F7             >
 294+ 38F7             >                endif           ; ok        // for other definitions it "points" the correct handler
 294+ 38F7             >                // Use of "; ok" to suppress "warning[fwdref]"
 294+ 38F7             >
 294+ 38F7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 295+ 38F7 4A 27                        dw      BL
 296+ 38F9 60 2D BA 2B                  dw      WORD, COUNT, OVER       // bl word count over
 296+ 38FD A3 25
 297+ 38FF 43 25 27 27                  dw      PLUS, ZERO, SWAP, STORE // + 0 swap !
 297+ 3903 C0 25 3B 26
 298+ 3907 51 2D 2E 27                  dw      PAD, ONE, F_OPEN        // pad 1 f_open
 298+ 390B F6 23
 299+ 390D 3D 20 2B 00                  dw      LIT, 43                 // 43
 300+ 3911 80 2A                        dw      QERROR                  // ?error
 301+ 3913 F1 24                        dw      EXIT                    // ;
 302+ 3915
 303+ 3915              //  ______________________________________________________________________
 304+ 3915              //
 305+ 3915              // use          -- cccc
 306+ 3915              // Include the following filename
 307+ 3915              //              Colon_Def USE, "USE", is_normal
 308+ 3915              //              dw      OPEN_FH                 // open<
 309+ 3915              //              dw      BLK_FH, FETCH           // blk-fh @
 310+ 3915              //              dw      F_CLOSE, DROP           // f_close drop
 311+ 3915              //              dw      BLK_FH, STORE           // blk-fh !
 312+ 3915              //              dw      EXIT                    // ;
 313+ 3915
 314+ 3915              //  ______________________________________________________________________
 315+ 3915              //
 316+ 3915              // include      -- cccc
 317+ 3915              // Include the following filename
 318+ 3915                              Colon_Def INCLUDE, "INCLUDE", is_normal
 318+ 3915             >                New_Def  INCLUDE, "INCLUDE", Enter_Ptr, is_normal ; ok
 318+ 3915             >
 318+ 3915             >Dict_Ptr        defl    $
 318+ 3915             >
 318+ 3915             >//              ______________________________________________________________________
 318+ 3915             >//              Heap part
 318+ 3915             >
 318+ 3915             >
 318+ 3915             >                org     (Heap_Ptr & $1FFF) + $E000
 318+ EAFD             >
 318+ EAFD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 318+ EAFD             >Latest_Definition defl  Heap_Ptr
 318+ EAFD             >
 318+ EAFD             >                // dummy db directives used to calculate length of namec
 318+ EAFD 49 4E 43 4C >                db      "INCLUDE"
 318+ EB01 55 44 45    >
 318+ EB04             >len_NFA         defl    $ - temp_NFA
 318+ EB04             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 318+ EAFD             >
 318+ EAFD 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 318+ EAFE 49 4E 43 4C >                db      "INCLUDE"               // name string in 7-bit ascii, but
 318+ EB02 55 44 45    >
 318+ EB05             >                org     $-1                 // alter last byte of Name just above to set
 318+ EB04 C5          >                db      {b $} | END_BIT     // msb as name end
 318+ EB05             >
 318+ EB05 F3 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 318+ EB07             >Prev_Ptr        defl    Heap_Ptr
 318+ EB07             >
 318+ EB07             >mirror_Ptr      defl    $
 318+ EB07             >
 318+ EB07 17 39       >                dw      Dict_Ptr + 2        // xt
 318+ EB09             >Heap_Ptr        defl    $ - $E000           // save current HP
 318+ EB09             >
 318+ EB09             >Current_HP      defl  $ - $E000             // used to set HP once!
 318+ EB09             >
 318+ EB09             >//              ______________________________________________________________________
 318+ EB09             >//              Dictionary part
 318+ EB09             >
 318+ EB09             >                org     Dict_Ptr
 318+ 3915             >
 318+ 3915 07 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 318+ 3917             >
 318+ 3917             >INCLUDE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 318+ 3917 CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 318+ 391A             >
 318+ 391A             >
 318+ 391A             >                endif           ; ok        // for other definitions it "points" the correct handler
 318+ 391A             >                // Use of "; ok" to suppress "warning[fwdref]"
 318+ 391A             >
 318+ 391A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 319+ 391A F4 38                        dw      OPEN_FH                 // open<
 320+ 391C 3F 38                        dw      F_INCLUDE               //  f_include
 321+ 391E F1 24                        dw      EXIT                    // ;
 322+ 3920
 323+ 3920              //  ______________________________________________________________________
 324+ 3920              //
 325+ 3920              // needs
 326+ 3920              // check for cccc exists in vocabulary
 327+ 3920              // if it doesn't then  INCLUDE  inc/cccc.F
 328+ 3920
 329+ 3920              // temp filename cccc.f as counted string zero-padded
 330+ 3920                              New_Def NEEDS_W,   "NEEDS-W", Create_Ptr, is_normal
 330+ 3920             >
 330+ 3920             >Dict_Ptr        defl    $
 330+ 3920             >
 330+ 3920             >//              ______________________________________________________________________
 330+ 3920             >//              Heap part
 330+ 3920             >
 330+ 3920             >
 330+ 3920             >                org     (Heap_Ptr & $1FFF) + $E000
 330+ EB09             >
 330+ EB09             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 330+ EB09             >Latest_Definition defl  Heap_Ptr
 330+ EB09             >
 330+ EB09             >                // dummy db directives used to calculate length of namec
 330+ EB09 4E 45 45 44 >                db      "NEEDS-W"
 330+ EB0D 53 2D 57    >
 330+ EB10             >len_NFA         defl    $ - temp_NFA
 330+ EB10             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 330+ EB09             >
 330+ EB09 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 330+ EB0A 4E 45 45 44 >                db      "NEEDS-W"               // name string in 7-bit ascii, but
 330+ EB0E 53 2D 57    >
 330+ EB11             >                org     $-1                 // alter last byte of Name just above to set
 330+ EB10 D7          >                db      {b $} | END_BIT     // msb as name end
 330+ EB11             >
 330+ EB11 FD 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 330+ EB13             >Prev_Ptr        defl    Heap_Ptr
 330+ EB13             >
 330+ EB13             >mirror_Ptr      defl    $
 330+ EB13             >
 330+ EB13 22 39       >                dw      Dict_Ptr + 2        // xt
 330+ EB15             >Heap_Ptr        defl    $ - $E000           // save current HP
 330+ EB15             >
 330+ EB15             >Current_HP      defl  $ - $E000             // used to set HP once!
 330+ EB15             >
 330+ EB15             >//              ______________________________________________________________________
 330+ EB15             >//              Dictionary part
 330+ EB15             >
 330+ EB15             >                org     Dict_Ptr
 330+ 3920             >
 330+ 3920 13 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 330+ 3922             >
 330+ 3922             >NEEDS_W:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 330+ 3922 CD AB 30    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 330+ 3925             >
 330+ 3925             >
 330+ 3925             >                endif           ; ok        // for other definitions it "points" the correct handler
 330+ 3925             >                // Use of "; ok" to suppress "warning[fwdref]"
 330+ 3925             >
 330+ 3925             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 331+ 3925 00 00 00...                  ds      35                      // 32 + .f + 0x00 = len 35
 332+ 3948              // temp complete path+filename
 333+ 3948                              New_Def NEEDS_FN,  "NEEDS-FN", Create_Ptr, is_normal
 333+ 3948             >
 333+ 3948             >Dict_Ptr        defl    $
 333+ 3948             >
 333+ 3948             >//              ______________________________________________________________________
 333+ 3948             >//              Heap part
 333+ 3948             >
 333+ 3948             >
 333+ 3948             >                org     (Heap_Ptr & $1FFF) + $E000
 333+ EB15             >
 333+ EB15             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 333+ EB15             >Latest_Definition defl  Heap_Ptr
 333+ EB15             >
 333+ EB15             >                // dummy db directives used to calculate length of namec
 333+ EB15 4E 45 45 44 >                db      "NEEDS-FN"
 333+ EB19 53 2D 46 4E >
 333+ EB1D             >len_NFA         defl    $ - temp_NFA
 333+ EB1D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 333+ EB15             >
 333+ EB15 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 333+ EB16 4E 45 45 44 >                db      "NEEDS-FN"               // name string in 7-bit ascii, but
 333+ EB1A 53 2D 46 4E >
 333+ EB1E             >                org     $-1                 // alter last byte of Name just above to set
 333+ EB1D CE          >                db      {b $} | END_BIT     // msb as name end
 333+ EB1E             >
 333+ EB1E 09 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 333+ EB20             >Prev_Ptr        defl    Heap_Ptr
 333+ EB20             >
 333+ EB20             >mirror_Ptr      defl    $
 333+ EB20             >
 333+ EB20 4A 39       >                dw      Dict_Ptr + 2        // xt
 333+ EB22             >Heap_Ptr        defl    $ - $E000           // save current HP
 333+ EB22             >
 333+ EB22             >Current_HP      defl  $ - $E000             // used to set HP once!
 333+ EB22             >
 333+ EB22             >//              ______________________________________________________________________
 333+ EB22             >//              Dictionary part
 333+ EB22             >
 333+ EB22             >                org     Dict_Ptr
 333+ 3948             >
 333+ 3948 20 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 333+ 394A             >
 333+ 394A             >NEEDS_FN:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 333+ 394A CD AB 30    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 333+ 394D             >
 333+ 394D             >
 333+ 394D             >                endif           ; ok        // for other definitions it "points" the correct handler
 333+ 394D             >                // Use of "; ok" to suppress "warning[fwdref]"
 333+ 394D             >
 333+ 394D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 334+ 394D 00 00 00...                  ds      40
 335+ 3975              // constant path
 336+ 3975                              New_Def NEEDS_INC,  "NEEDS-INC", Create_Ptr, is_normal
 336+ 3975             >
 336+ 3975             >Dict_Ptr        defl    $
 336+ 3975             >
 336+ 3975             >//              ______________________________________________________________________
 336+ 3975             >//              Heap part
 336+ 3975             >
 336+ 3975             >
 336+ 3975             >                org     (Heap_Ptr & $1FFF) + $E000
 336+ EB22             >
 336+ EB22             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 336+ EB22             >Latest_Definition defl  Heap_Ptr
 336+ EB22             >
 336+ EB22             >                // dummy db directives used to calculate length of namec
 336+ EB22 4E 45 45 44 >                db      "NEEDS-INC"
 336+ EB26 53 2D 49 4E >
 336+ EB2A 43          >
 336+ EB2B             >len_NFA         defl    $ - temp_NFA
 336+ EB2B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 336+ EB22             >
 336+ EB22 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 336+ EB23 4E 45 45 44 >                db      "NEEDS-INC"               // name string in 7-bit ascii, but
 336+ EB27 53 2D 49 4E >
 336+ EB2B 43          >
 336+ EB2C             >                org     $-1                 // alter last byte of Name just above to set
 336+ EB2B C3          >                db      {b $} | END_BIT     // msb as name end
 336+ EB2C             >
 336+ EB2C 15 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 336+ EB2E             >Prev_Ptr        defl    Heap_Ptr
 336+ EB2E             >
 336+ EB2E             >mirror_Ptr      defl    $
 336+ EB2E             >
 336+ EB2E 77 39       >                dw      Dict_Ptr + 2        // xt
 336+ EB30             >Heap_Ptr        defl    $ - $E000           // save current HP
 336+ EB30             >
 336+ EB30             >Current_HP      defl  $ - $E000             // used to set HP once!
 336+ EB30             >
 336+ EB30             >//              ______________________________________________________________________
 336+ EB30             >//              Dictionary part
 336+ EB30             >
 336+ EB30             >                org     Dict_Ptr
 336+ 3975             >
 336+ 3975 2E 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 336+ 3977             >
 336+ 3977             >NEEDS_INC:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 336+ 3977 CD AB 30    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 336+ 397A             >
 336+ 397A             >
 336+ 397A             >                endif           ; ok        // for other definitions it "points" the correct handler
 336+ 397A             >                // Use of "; ok" to suppress "warning[fwdref]"
 336+ 397A             >
 336+ 397A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 337+ 397A 04 69 6E 63                  db      4, "inc/", 0
 337+ 397E 2F 00
 338+ 3980                              New_Def NEEDS_LIB,  "NEEDS-LIB", Create_Ptr, is_normal
 338+ 3980             >
 338+ 3980             >Dict_Ptr        defl    $
 338+ 3980             >
 338+ 3980             >//              ______________________________________________________________________
 338+ 3980             >//              Heap part
 338+ 3980             >
 338+ 3980             >
 338+ 3980             >                org     (Heap_Ptr & $1FFF) + $E000
 338+ EB30             >
 338+ EB30             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 338+ EB30             >Latest_Definition defl  Heap_Ptr
 338+ EB30             >
 338+ EB30             >                // dummy db directives used to calculate length of namec
 338+ EB30 4E 45 45 44 >                db      "NEEDS-LIB"
 338+ EB34 53 2D 4C 49 >
 338+ EB38 42          >
 338+ EB39             >len_NFA         defl    $ - temp_NFA
 338+ EB39             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 338+ EB30             >
 338+ EB30 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 338+ EB31 4E 45 45 44 >                db      "NEEDS-LIB"               // name string in 7-bit ascii, but
 338+ EB35 53 2D 4C 49 >
 338+ EB39 42          >
 338+ EB3A             >                org     $-1                 // alter last byte of Name just above to set
 338+ EB39 C2          >                db      {b $} | END_BIT     // msb as name end
 338+ EB3A             >
 338+ EB3A 22 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 338+ EB3C             >Prev_Ptr        defl    Heap_Ptr
 338+ EB3C             >
 338+ EB3C             >mirror_Ptr      defl    $
 338+ EB3C             >
 338+ EB3C 82 39       >                dw      Dict_Ptr + 2        // xt
 338+ EB3E             >Heap_Ptr        defl    $ - $E000           // save current HP
 338+ EB3E             >
 338+ EB3E             >Current_HP      defl  $ - $E000             // used to set HP once!
 338+ EB3E             >
 338+ EB3E             >//              ______________________________________________________________________
 338+ EB3E             >//              Dictionary part
 338+ EB3E             >
 338+ EB3E             >                org     Dict_Ptr
 338+ 3980             >
 338+ 3980 3C 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 338+ 3982             >
 338+ 3982             >NEEDS_LIB:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 338+ 3982 CD AB 30    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 338+ 3985             >
 338+ 3985             >
 338+ 3985             >                endif           ; ok        // for other definitions it "points" the correct handler
 338+ 3985             >                // Use of "; ok" to suppress "warning[fwdref]"
 338+ 3985             >
 338+ 3985             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 339+ 3985 04 6C 69 62                  db      4, "lib/", 0
 339+ 3989 2F 00
 340+ 398B
 341+ 398B              // Concatenate path at a and filename and include it
 342+ 398B              // No error is issued if filename doesn't exist.
 343+ 398B                              Colon_Def NEEDS_SLASH, "NEEDS/", is_normal
 343+ 398B             >                New_Def  NEEDS_SLASH, "NEEDS/", Enter_Ptr, is_normal ; ok
 343+ 398B             >
 343+ 398B             >Dict_Ptr        defl    $
 343+ 398B             >
 343+ 398B             >//              ______________________________________________________________________
 343+ 398B             >//              Heap part
 343+ 398B             >
 343+ 398B             >
 343+ 398B             >                org     (Heap_Ptr & $1FFF) + $E000
 343+ EB3E             >
 343+ EB3E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 343+ EB3E             >Latest_Definition defl  Heap_Ptr
 343+ EB3E             >
 343+ EB3E             >                // dummy db directives used to calculate length of namec
 343+ EB3E 4E 45 45 44 >                db      "NEEDS/"
 343+ EB42 53 2F       >
 343+ EB44             >len_NFA         defl    $ - temp_NFA
 343+ EB44             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 343+ EB3E             >
 343+ EB3E 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 343+ EB3F 4E 45 45 44 >                db      "NEEDS/"               // name string in 7-bit ascii, but
 343+ EB43 53 2F       >
 343+ EB45             >                org     $-1                 // alter last byte of Name just above to set
 343+ EB44 AF          >                db      {b $} | END_BIT     // msb as name end
 343+ EB45             >
 343+ EB45 30 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 343+ EB47             >Prev_Ptr        defl    Heap_Ptr
 343+ EB47             >
 343+ EB47             >mirror_Ptr      defl    $
 343+ EB47             >
 343+ EB47 8D 39       >                dw      Dict_Ptr + 2        // xt
 343+ EB49             >Heap_Ptr        defl    $ - $E000           // save current HP
 343+ EB49             >
 343+ EB49             >Current_HP      defl  $ - $E000             // used to set HP once!
 343+ EB49             >
 343+ EB49             >//              ______________________________________________________________________
 343+ EB49             >//              Dictionary part
 343+ EB49             >
 343+ EB49             >                org     Dict_Ptr
 343+ 398B             >
 343+ 398B 47 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 343+ 398D             >
 343+ 398D             >NEEDS_SLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 343+ 398D CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 343+ 3990             >
 343+ 3990             >
 343+ 3990             >                endif           ; ok        // for other definitions it "points" the correct handler
 343+ 3990             >                // Use of "; ok" to suppress "warning[fwdref]"
 343+ 3990             >
 343+ 3990             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 344+ 3990 BA 2B B7 25                  dw      COUNT, TUCK             // n a n
 345+ 3994 4A 39 C0 25                  dw      NEEDS_FN, SWAP, CMOVE   // n        \ Path
 345+ 3998 32 24
 346+ 399A 4A 39 43 25                  dw      NEEDS_FN, PLUS          // a1+n     \ Concat
 347+ 399E 22 39 5C 25                  dw      NEEDS_W, ONE_PLUS, SWAP
 347+ 39A2 C0 25
 348+ 39A4 3D 20 23 00                  dw      LIT, 35
 349+ 39A8 32 24                        dw      CMOVE
 350+ 39AA 4A 39                        dw      NEEDS_FN
 351+ 39AC 51 2D 2E 27                  dw      PAD, ONE, F_OPEN
 351+ 39B0 F6 23
 352+ 39B2 16 25                        dw      ZEQUAL
 353+ 39B4 8F 20                        dw      ZBRANCH
 354+ 39B6 08 00                        dw      Needs_1 - $
 355+ 39B8 3F 38                        dw          F_INCLUDE
 356+ 39BA 82 20                        dw      BRANCH
 357+ 39BC 04 00                        dw      Needs_2 - $
 358+ 39BE              Needs_1:
 359+ 39BE              //              dw          NEEDS_W, COUNT, TYPE, SPACE
 360+ 39BE              //              dw          LIT, 43, MESSAGE
 361+ 39BE AC 25                        dw          DROP
 362+ 39C0              Needs_2:
 363+ 39C0 F1 24                        dw      EXIT                    // ;
 364+ 39C2
 365+ 39C2              NDOM_PTR:
 366+ 39C2              //              New_Def NDOM,   "NDOM", Create_Ptr, is_normal
 367+ 39C2              //              db $3A, $3F, $2F, $2A, $7C, $5C, $3C, $3E, $22
 368+ 39C2 3A 3F 2F 2A                  db ':?/*|\<>"'
 368+ 39C6 7C 5C 3C 3E
 368+ 39CA 22
 369+ 39CB              //              db 0
 370+ 39CB
 371+ 39CB              NCDM_PTR:
 372+ 39CB              //              New_Def NCDM,   "NCDM", Create_Ptr, is_normal
 373+ 39CB              //              db $5F, $5E, $25, $26, $24, $5F, $7B, $7D, $7E
 374+ 39CB 5F 5E 25 26                  db '_^%&$_{}~'
 374+ 39CF 24 5F 7B 7D
 374+ 39D3 7E
 375+ 39D4              //              db 0
 376+ 39D4
 377+ 39D4              // Replace illegal character in filename using the map here above
 378+ 39D4              // at the moment we need only  "
 379+ 39D4                              Colon_Def NEEDS_CHECK, "MAP-FN", is_normal
 379+ 39D4             >                New_Def  NEEDS_CHECK, "MAP-FN", Enter_Ptr, is_normal ; ok
 379+ 39D4             >
 379+ 39D4             >Dict_Ptr        defl    $
 379+ 39D4             >
 379+ 39D4             >//              ______________________________________________________________________
 379+ 39D4             >//              Heap part
 379+ 39D4             >
 379+ 39D4             >
 379+ 39D4             >                org     (Heap_Ptr & $1FFF) + $E000
 379+ EB49             >
 379+ EB49             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 379+ EB49             >Latest_Definition defl  Heap_Ptr
 379+ EB49             >
 379+ EB49             >                // dummy db directives used to calculate length of namec
 379+ EB49 4D 41 50 2D >                db      "MAP-FN"
 379+ EB4D 46 4E       >
 379+ EB4F             >len_NFA         defl    $ - temp_NFA
 379+ EB4F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 379+ EB49             >
 379+ EB49 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 379+ EB4A 4D 41 50 2D >                db      "MAP-FN"               // name string in 7-bit ascii, but
 379+ EB4E 46 4E       >
 379+ EB50             >                org     $-1                 // alter last byte of Name just above to set
 379+ EB4F CE          >                db      {b $} | END_BIT     // msb as name end
 379+ EB50             >
 379+ EB50 3E 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 379+ EB52             >Prev_Ptr        defl    Heap_Ptr
 379+ EB52             >
 379+ EB52             >mirror_Ptr      defl    $
 379+ EB52             >
 379+ EB52 D6 39       >                dw      Dict_Ptr + 2        // xt
 379+ EB54             >Heap_Ptr        defl    $ - $E000           // save current HP
 379+ EB54             >
 379+ EB54             >Current_HP      defl  $ - $E000             // used to set HP once!
 379+ EB54             >
 379+ EB54             >//              ______________________________________________________________________
 379+ EB54             >//              Dictionary part
 379+ EB54             >
 379+ EB54             >                org     Dict_Ptr
 379+ 39D4             >
 379+ 39D4 52 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 379+ 39D6             >
 379+ 39D6             >NEEDS_CHECK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 379+ 39D6 CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 379+ 39D9             >
 379+ 39D9             >
 379+ 39D9             >                endif           ; ok        // for other definitions it "points" the correct handler
 379+ 39D9             >                // Use of "; ok" to suppress "warning[fwdref]"
 379+ 39D9             >
 379+ 39D9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 380+ 39D9 BA 2B C7 2B                  dw      COUNT, BOUNDS
 381+ 39DD CC 20                        dw      C_DO
 382+ 39DF              Needs_3:
 383+ 39DF              //              dw          NCDM, NDOM, LIT, 10
 384+ 39DF 3D 20 CB 39                  dw          LIT, NCDM_PTR           //
 385+ 39E3 3D 20 C2 39                  dw          LIT, NDOM_PTR           //
 386+ 39E7 3D 20 09 00                  dw          LIT, 9
 387+ 39EB D2 20 46 26                  dw          I, CFETCH
 388+ 39EF F2 21                        dw          C_MAP
 389+ 39F1 D2 20 4F 26                  dw          I, CSTORE
 390+ 39F5              Needs_4:
 391+ 39F5 7A 20                        dw      C_LOOP
 392+ 39F7 E8 FF                        dw      Needs_3 - $
 393+ 39F9 F1 24                        dw      EXIT
 394+ 39FB
 395+ 39FB
 396+ 39FB              // include  "path/cccc.f" if cccc is not defined
 397+ 39FB              // filename cccc.f is temporary stored at NEEDS-W
 398+ 39FB                              Colon_Def NEEDS_PATH, "NEEDS-F", is_normal
 398+ 39FB             >                New_Def  NEEDS_PATH, "NEEDS-F", Enter_Ptr, is_normal ; ok
 398+ 39FB             >
 398+ 39FB             >Dict_Ptr        defl    $
 398+ 39FB             >
 398+ 39FB             >//              ______________________________________________________________________
 398+ 39FB             >//              Heap part
 398+ 39FB             >
 398+ 39FB             >
 398+ 39FB             >                org     (Heap_Ptr & $1FFF) + $E000
 398+ EB54             >
 398+ EB54             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 398+ EB54             >Latest_Definition defl  Heap_Ptr
 398+ EB54             >
 398+ EB54             >                // dummy db directives used to calculate length of namec
 398+ EB54 4E 45 45 44 >                db      "NEEDS-F"
 398+ EB58 53 2D 46    >
 398+ EB5B             >len_NFA         defl    $ - temp_NFA
 398+ EB5B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 398+ EB54             >
 398+ EB54 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 398+ EB55 4E 45 45 44 >                db      "NEEDS-F"               // name string in 7-bit ascii, but
 398+ EB59 53 2D 46    >
 398+ EB5C             >                org     $-1                 // alter last byte of Name just above to set
 398+ EB5B C6          >                db      {b $} | END_BIT     // msb as name end
 398+ EB5C             >
 398+ EB5C 49 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 398+ EB5E             >Prev_Ptr        defl    Heap_Ptr
 398+ EB5E             >
 398+ EB5E             >mirror_Ptr      defl    $
 398+ EB5E             >
 398+ EB5E FD 39       >                dw      Dict_Ptr + 2        // xt
 398+ EB60             >Heap_Ptr        defl    $ - $E000           // save current HP
 398+ EB60             >
 398+ EB60             >Current_HP      defl  $ - $E000             // used to set HP once!
 398+ EB60             >
 398+ EB60             >//              ______________________________________________________________________
 398+ EB60             >//              Dictionary part
 398+ EB60             >
 398+ EB60             >                org     Dict_Ptr
 398+ 39FB             >
 398+ 39FB 5E 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 398+ 39FD             >
 398+ 39FD             >NEEDS_PATH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 398+ 39FD CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 398+ 3A00             >
 398+ 3A00             >
 398+ 3A00             >                endif           ; ok        // for other definitions it "points" the correct handler
 398+ 3A00             >                // Use of "; ok" to suppress "warning[fwdref]"
 398+ 3A00             >
 398+ 3A00             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 399+ 3A00 A4 2F                        dw      LFIND
 400+ 3A02 8F 20                        dw      ZBRANCH
 401+ 3A04 0A 00                        dw      Needs_5 - $
 402+ 3A06
 403+ 3A06 AC 25 FC 25                  dw          DROP, TWO_DROP
 404+ 3A0A 82 20                        dw      BRANCH
 405+ 3A0C 2C 00                        dw      Needs_6 - $
 406+ 3A0E              Needs_5:
 407+ 3A0E 22 39                        dw          NEEDS_W
 408+ 3A10 3D 20 23 00                  dw          LIT, 35
 409+ 3A14 28 2D                        dw          ERASE                   // a
 410+ 3A16 4C 28 46 26                  dw          HERE, CFETCH, ONE_PLUS  // a n
 410+ 3A1A 5C 25
 411+ 3A1C 4C 28 A3 25                  dw          HERE, OVER              // a n here n
 412+ 3A20 22 39 C0 25                  dw          NEEDS_W, SWAP, CMOVE    // a n
 412+ 3A24 32 24
 413+ 3A26 22 39 D6 39                  dw          NEEDS_W, NEEDS_CHECK
 414+ 3A2A 22 39 43 25                  dw          NEEDS_W, PLUS           // a a1+1
 415+ 3A2E 3D 20 2E 66                  dw          LIT, $662E              // a a1+1 ".F"
 416+ 3A32 C0 25 3B 26                  dw          SWAP, STORE             // a
 417+ 3A36 8D 39                        dw          NEEDS_SLASH
 418+ 3A38              Needs_6:
 419+ 3A38 F1 24                        dw      EXIT
 420+ 3A3A
 421+ 3A3A
 422+ 3A3A              // check for cccc exists in vocabulary
 423+ 3A3A              // if it doesn't then  INCLUDE  inc/cccc.F
 424+ 3A3A              // search in inc subdirectory
 425+ 3A3A                              Colon_Def NEEDS, "NEEDS", is_normal
 425+ 3A3A             >                New_Def  NEEDS, "NEEDS", Enter_Ptr, is_normal ; ok
 425+ 3A3A             >
 425+ 3A3A             >Dict_Ptr        defl    $
 425+ 3A3A             >
 425+ 3A3A             >//              ______________________________________________________________________
 425+ 3A3A             >//              Heap part
 425+ 3A3A             >
 425+ 3A3A             >
 425+ 3A3A             >                org     (Heap_Ptr & $1FFF) + $E000
 425+ EB60             >
 425+ EB60             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 425+ EB60             >Latest_Definition defl  Heap_Ptr
 425+ EB60             >
 425+ EB60             >                // dummy db directives used to calculate length of namec
 425+ EB60 4E 45 45 44 >                db      "NEEDS"
 425+ EB64 53          >
 425+ EB65             >len_NFA         defl    $ - temp_NFA
 425+ EB65             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 425+ EB60             >
 425+ EB60 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 425+ EB61 4E 45 45 44 >                db      "NEEDS"               // name string in 7-bit ascii, but
 425+ EB65 53          >
 425+ EB66             >                org     $-1                 // alter last byte of Name just above to set
 425+ EB65 D3          >                db      {b $} | END_BIT     // msb as name end
 425+ EB66             >
 425+ EB66 54 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 425+ EB68             >Prev_Ptr        defl    Heap_Ptr
 425+ EB68             >
 425+ EB68             >mirror_Ptr      defl    $
 425+ EB68             >
 425+ EB68 3C 3A       >                dw      Dict_Ptr + 2        // xt
 425+ EB6A             >Heap_Ptr        defl    $ - $E000           // save current HP
 425+ EB6A             >
 425+ EB6A             >Current_HP      defl  $ - $E000             // used to set HP once!
 425+ EB6A             >
 425+ EB6A             >//              ______________________________________________________________________
 425+ EB6A             >//              Dictionary part
 425+ EB6A             >
 425+ EB6A             >                org     Dict_Ptr
 425+ 3A3A             >
 425+ 3A3A 68 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 425+ 3A3C             >
 425+ 3A3C             >NEEDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 425+ 3A3C CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 425+ 3A3F             >
 425+ 3A3F             >
 425+ 3A3F             >                endif           ; ok        // for other definitions it "points" the correct handler
 425+ 3A3F             >                // Use of "; ok" to suppress "warning[fwdref]"
 425+ 3A3F             >
 425+ 3A3F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 426+ 3A3F CE 27 31 26                  dw      TO_IN, FETCH
 427+ 3A43 C7 25                        dw      DUP
 428+ 3A45 77 39 FD 39                  dw      NEEDS_INC, NEEDS_PATH
 429+ 3A49 CE 27 3B 26                  dw      TO_IN, STORE
 430+ 3A4D 82 39 FD 39                  dw      NEEDS_LIB, NEEDS_PATH
 431+ 3A51 CE 27 3B 26                  dw      TO_IN, STORE
 432+ 3A55 A4 2F                        dw      LFIND
 433+ 3A57 8F 20                        dw      ZBRANCH
 434+ 3A59 08 00                        dw      Needs_10 - $
 435+ 3A5B FC 25                        dw          TWO_DROP
 436+ 3A5D 82 20                        dw      BRANCH
 437+ 3A5F 10 00                        dw      Needs_11 - $
 438+ 3A61              Needs_10:
 439+ 3A61 22 39 BA 2B                  dw      NEEDS_W, COUNT, TYPE, SPACE
 439+ 3A65 0E 2C 15 29
 440+ 3A69 3D 20 2B 00                  dw      LIT, 43, MESSAGE
 440+ 3A6D 6C 35
 441+ 3A6F              Needs_11:
 442+ 3A6F F1 24                        dw      EXIT
 443+ 3A71
 444+ 3A71
 445+ 3A71              //  ______________________________________________________________________
 446+ 3A71              //
 447+ 3A71              // load         n --
 448+ 3A71                              Colon_Def LOAD, "LOAD", is_normal
 448+ 3A71             >                New_Def  LOAD, "LOAD", Enter_Ptr, is_normal ; ok
 448+ 3A71             >
 448+ 3A71             >Dict_Ptr        defl    $
 448+ 3A71             >
 448+ 3A71             >//              ______________________________________________________________________
 448+ 3A71             >//              Heap part
 448+ 3A71             >
 448+ 3A71             >
 448+ 3A71             >                org     (Heap_Ptr & $1FFF) + $E000
 448+ EB6A             >
 448+ EB6A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 448+ EB6A             >Latest_Definition defl  Heap_Ptr
 448+ EB6A             >
 448+ EB6A             >                // dummy db directives used to calculate length of namec
 448+ EB6A 4C 4F 41 44 >                db      "LOAD"
 448+ EB6E             >len_NFA         defl    $ - temp_NFA
 448+ EB6E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 448+ EB6A             >
 448+ EB6A 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 448+ EB6B 4C 4F 41 44 >                db      "LOAD"               // name string in 7-bit ascii, but
 448+ EB6F             >                org     $-1                 // alter last byte of Name just above to set
 448+ EB6E C4          >                db      {b $} | END_BIT     // msb as name end
 448+ EB6F             >
 448+ EB6F 60 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 448+ EB71             >Prev_Ptr        defl    Heap_Ptr
 448+ EB71             >
 448+ EB71             >mirror_Ptr      defl    $
 448+ EB71             >
 448+ EB71 73 3A       >                dw      Dict_Ptr + 2        // xt
 448+ EB73             >Heap_Ptr        defl    $ - $E000           // save current HP
 448+ EB73             >
 448+ EB73             >Current_HP      defl  $ - $E000             // used to set HP once!
 448+ EB73             >
 448+ EB73             >//              ______________________________________________________________________
 448+ EB73             >//              Dictionary part
 448+ EB73             >
 448+ EB73             >                org     Dict_Ptr
 448+ 3A71             >
 448+ 3A71 71 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 448+ 3A73             >
 448+ 3A73             >LOAD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 448+ 3A73 CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 448+ 3A76             >
 448+ 3A76             >
 448+ 3A76             >                endif           ; ok        // for other definitions it "points" the correct handler
 448+ 3A76             >                // Use of "; ok" to suppress "warning[fwdref]"
 448+ 3A76             >
 448+ 3A76             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 449+ 3A76 C8 27 31 26                  dw      BLK, FETCH, TO_R        // blk @ >r
 449+ 3A7A FB 24
 450+ 3A7C CE 27 31 26                  dw      TO_IN, FETCH, TO_R      // >in @ >r
 450+ 3A80 FB 24
 451+ 3A82
 452+ 3A82 27 27 CE 27                  dw      ZERO, TO_IN, STORE      // 0 >in !
 452+ 3A86 3B 26
 453+ 3A88 5F 27 F8 34                  dw      BSCR, MUL, BLK, STORE   // b/scr * blk !
 453+ 3A8C C8 27 3B 26
 454+ 3A90 67 31                        dw      INTERPRET               // interpret
 455+ 3A92
 456+ 3A92 06 25 CE 27                  dw      R_TO, TO_IN, STORE      // r> >in !
 456+ 3A96 3B 26
 457+ 3A98 06 25 C8 27                  dw      R_TO, BLK, STORE        // r> blk !
 457+ 3A9C 3B 26
 458+ 3A9E F1 24                        dw      EXIT                    // ;
 459+ 3AA0
 460+ 3AA0              //  ______________________________________________________________________
 461+ 3AA0              //
 462+ 3AA0              // -->          --
 463+ 3AA0                              Colon_Def LOAD_NEXT, "-->", is_immediate
 463+ 3AA0             >                New_Def  LOAD_NEXT, "-->", Enter_Ptr, is_immediate ; ok
 463+ 3AA0             >
 463+ 3AA0             >Dict_Ptr        defl    $
 463+ 3AA0             >
 463+ 3AA0             >//              ______________________________________________________________________
 463+ 3AA0             >//              Heap part
 463+ 3AA0             >
 463+ 3AA0             >
 463+ 3AA0             >                org     (Heap_Ptr & $1FFF) + $E000
 463+ EB73             >
 463+ EB73             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 463+ EB73             >Latest_Definition defl  Heap_Ptr
 463+ EB73             >
 463+ EB73             >                // dummy db directives used to calculate length of namec
 463+ EB73 2D 2D 3E    >                db      "-->"
 463+ EB76             >len_NFA         defl    $ - temp_NFA
 463+ EB76             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 463+ EB73             >
 463+ EB73 C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 463+ EB74 2D 2D 3E    >                db      "-->"               // name string in 7-bit ascii, but
 463+ EB77             >                org     $-1                 // alter last byte of Name just above to set
 463+ EB76 BE          >                db      {b $} | END_BIT     // msb as name end
 463+ EB77             >
 463+ EB77 6A 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 463+ EB79             >Prev_Ptr        defl    Heap_Ptr
 463+ EB79             >
 463+ EB79             >mirror_Ptr      defl    $
 463+ EB79             >
 463+ EB79 A2 3A       >                dw      Dict_Ptr + 2        // xt
 463+ EB7B             >Heap_Ptr        defl    $ - $E000           // save current HP
 463+ EB7B             >
 463+ EB7B             >Current_HP      defl  $ - $E000             // used to set HP once!
 463+ EB7B             >
 463+ EB7B             >//              ______________________________________________________________________
 463+ EB7B             >//              Dictionary part
 463+ EB7B             >
 463+ EB7B             >                org     Dict_Ptr
 463+ 3AA0             >
 463+ 3AA0 79 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 463+ 3AA2             >
 463+ 3AA2             >LOAD_NEXT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 463+ 3AA2 CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 463+ 3AA5             >
 463+ 3AA5             >
 463+ 3AA5             >                endif           ; ok        // for other definitions it "points" the correct handler
 463+ 3AA5             >                // Use of "; ok" to suppress "warning[fwdref]"
 463+ 3AA5             >
 463+ 3AA5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 464+ 3AA5 DD 2A                        dw      QLOADING                // ?loading
 465+ 3AA7 27 27 CE 27                  dw      ZERO, TO_IN, STORE      // 0 >in !
 465+ 3AAB 3B 26
 466+ 3AAD 5F 27                        dw      BSCR                    // b/scr
 467+ 3AAF C8 27 31 26                  dw      BLK, FETCH              // blk @
 468+ 3AB3 A3 25                        dw      OVER                    // over
 469+ 3AB5 1D 35                        dw      MOD                     // mod
 470+ 3AB7 8B 28                        dw      SUBTRACT                // -
 471+ 3AB9 C8 27 19 26                  dw      BLK, PLUSSTORE          // +!
 472+ 3ABD F1 24                        dw      EXIT                    // ;
 473+ 3ABF
 474+ 3ABF              //  ______________________________________________________________________
 475+ 3ABF              //
 476+ 3ABF              // '            -- xt
 477+ 3ABF                              Colon_Def TICK, "'", is_normal
 477+ 3ABF             >                New_Def  TICK, "'", Enter_Ptr, is_normal ; ok
 477+ 3ABF             >
 477+ 3ABF             >Dict_Ptr        defl    $
 477+ 3ABF             >
 477+ 3ABF             >//              ______________________________________________________________________
 477+ 3ABF             >//              Heap part
 477+ 3ABF             >
 477+ 3ABF             >
 477+ 3ABF             >                org     (Heap_Ptr & $1FFF) + $E000
 477+ EB7B             >
 477+ EB7B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 477+ EB7B             >Latest_Definition defl  Heap_Ptr
 477+ EB7B             >
 477+ EB7B             >                // dummy db directives used to calculate length of namec
 477+ EB7B 27          >                db      "'"
 477+ EB7C             >len_NFA         defl    $ - temp_NFA
 477+ EB7C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 477+ EB7B             >
 477+ EB7B 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 477+ EB7C 27          >                db      "'"               // name string in 7-bit ascii, but
 477+ EB7D             >                org     $-1                 // alter last byte of Name just above to set
 477+ EB7C A7          >                db      {b $} | END_BIT     // msb as name end
 477+ EB7D             >
 477+ EB7D 73 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 477+ EB7F             >Prev_Ptr        defl    Heap_Ptr
 477+ EB7F             >
 477+ EB7F             >mirror_Ptr      defl    $
 477+ EB7F             >
 477+ EB7F C1 3A       >                dw      Dict_Ptr + 2        // xt
 477+ EB81             >Heap_Ptr        defl    $ - $E000           // save current HP
 477+ EB81             >
 477+ EB81             >Current_HP      defl  $ - $E000             // used to set HP once!
 477+ EB81             >
 477+ EB81             >//              ______________________________________________________________________
 477+ EB81             >//              Dictionary part
 477+ EB81             >
 477+ EB81             >                org     Dict_Ptr
 477+ 3ABF             >
 477+ 3ABF 7F 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 477+ 3AC1             >
 477+ 3AC1             >TICK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 477+ 3AC1 CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 477+ 3AC4             >
 477+ 3AC4             >
 477+ 3AC4             >                endif           ; ok        // for other definitions it "points" the correct handler
 477+ 3AC4             >                // Use of "; ok" to suppress "warning[fwdref]"
 477+ 3AC4             >
 477+ 3AC4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 478+ 3AC4 A4 2F                        dw      LFIND                   // -find
 479+ 3AC6 16 25                        dw      ZEQUAL                  // 0=
 480+ 3AC8 27 27 80 2A                  dw      ZERO, QERROR            // 0 ?error
 481+ 3ACC AC 25                        dw      DROP                    // drop
 482+ 3ACE F1 24                        dw      EXIT                    // ;
 483+ 3AD0
 484+ 3AD0              //  ______________________________________________________________________
 485+ 3AD0              //
 486+ 3AD0              // forget       -- cccc
 487+ 3AD0                              Colon_Def FORGET, "FORGET", is_normal
 487+ 3AD0             >                New_Def  FORGET, "FORGET", Enter_Ptr, is_normal ; ok
 487+ 3AD0             >
 487+ 3AD0             >Dict_Ptr        defl    $
 487+ 3AD0             >
 487+ 3AD0             >//              ______________________________________________________________________
 487+ 3AD0             >//              Heap part
 487+ 3AD0             >
 487+ 3AD0             >
 487+ 3AD0             >                org     (Heap_Ptr & $1FFF) + $E000
 487+ EB81             >
 487+ EB81             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 487+ EB81             >Latest_Definition defl  Heap_Ptr
 487+ EB81             >
 487+ EB81             >                // dummy db directives used to calculate length of namec
 487+ EB81 46 4F 52 47 >                db      "FORGET"
 487+ EB85 45 54       >
 487+ EB87             >len_NFA         defl    $ - temp_NFA
 487+ EB87             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 487+ EB81             >
 487+ EB81 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 487+ EB82 46 4F 52 47 >                db      "FORGET"               // name string in 7-bit ascii, but
 487+ EB86 45 54       >
 487+ EB88             >                org     $-1                 // alter last byte of Name just above to set
 487+ EB87 D4          >                db      {b $} | END_BIT     // msb as name end
 487+ EB88             >
 487+ EB88 7B 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 487+ EB8A             >Prev_Ptr        defl    Heap_Ptr
 487+ EB8A             >
 487+ EB8A             >mirror_Ptr      defl    $
 487+ EB8A             >
 487+ EB8A D2 3A       >                dw      Dict_Ptr + 2        // xt
 487+ EB8C             >Heap_Ptr        defl    $ - $E000           // save current HP
 487+ EB8C             >
 487+ EB8C             >Current_HP      defl  $ - $E000             // used to set HP once!
 487+ EB8C             >
 487+ EB8C             >//              ______________________________________________________________________
 487+ EB8C             >//              Dictionary part
 487+ EB8C             >
 487+ EB8C             >                org     Dict_Ptr
 487+ 3AD0             >
 487+ 3AD0 8A 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 487+ 3AD2             >
 487+ 3AD2             >FORGET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 487+ 3AD2 CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 487+ 3AD5             >
 487+ 3AD5             >
 487+ 3AD5             >                endif           ; ok        // for other definitions it "points" the correct handler
 487+ 3AD5             >                // Use of "; ok" to suppress "warning[fwdref]"
 487+ 3AD5             >
 487+ 3AD5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 488+ 3AD5 EC 27 31 26                  dw      CURRENT, FETCH          // current @
 489+ 3AD9 E6 27 31 26                  dw      CONTEXT, FETCH          // context @
 490+ 3ADD 8B 28 3D 20                  dw      SUBTRACT, LIT, 23, QERROR // - 23 ?error
 490+ 3AE1 17 00 80 2A
 491+ 3AE5 C1 3A FF 29                  dw      TICK, TO_BODY           // ' >body
 492+ 3AE9 C7 25 9E 27                  dw      DUP, FENCE, FETCH       // dup fence @
 492+ 3AED 31 26
 493+ 3AEF A2 28 3D 20                  dw      ULESS, LIT, 21, QERROR  // u< 21 ?error
 493+ 3AF3 15 00 80 2A
 494+ 3AF7 C7 25 34 2A                  dw      DUP, NFA                // dup nfa
 495+ 3AFB
 496+ 3AFB                          //  dw      DUP
 497+ 3AFB                          //  dw      LIT, $E000, LESS
 498+ 3AFB                          //  dw      MMU7_FETCH, ONE, EQUALS
 499+ 3AFB                          //  dw      OR_OP, NOT_OP
 500+ 3AFB                          //  dw      ZBRANCH
 501+ 3AFB                          //  dw      Forget_then - $
 502+ 3AFB
 503+ 3AFB 3D 29 60 29                  dw      MMU7_FETCH, FROM_FAR
 504+ 3AFF BC 27 3B 26                  dw      HP, STORE
 505+ 3B03 C7 25 29 2A                  dw      DUP, CFA, CELL_MINUS
 505+ 3B07 76 25
 506+ 3B09              // Forget_then:
 507+ 3B09 A4 27 3B 26                  dw      DP, STORE               // dp !
 508+ 3B0D 3F 2A 31 26                  dw      LFA, FETCH              // lfa @
 509+ 3B11 E6 27 31 26                  dw      CONTEXT, FETCH, STORE   // context @ !
 509+ 3B15 3B 26
 510+ 3B17 F1 24                        dw      EXIT                    // ;
 511+ 3B19
 512+ 3B19              //  ______________________________________________________________________
 513+ 3B19              //
 514+ 3B19              // marker       -- cccc
 515+ 3B19                              Colon_Def MARKER, "MARKER", is_immediate
 515+ 3B19             >                New_Def  MARKER, "MARKER", Enter_Ptr, is_immediate ; ok
 515+ 3B19             >
 515+ 3B19             >Dict_Ptr        defl    $
 515+ 3B19             >
 515+ 3B19             >//              ______________________________________________________________________
 515+ 3B19             >//              Heap part
 515+ 3B19             >
 515+ 3B19             >
 515+ 3B19             >                org     (Heap_Ptr & $1FFF) + $E000
 515+ EB8C             >
 515+ EB8C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 515+ EB8C             >Latest_Definition defl  Heap_Ptr
 515+ EB8C             >
 515+ EB8C             >                // dummy db directives used to calculate length of namec
 515+ EB8C 4D 41 52 4B >                db      "MARKER"
 515+ EB90 45 52       >
 515+ EB92             >len_NFA         defl    $ - temp_NFA
 515+ EB92             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 515+ EB8C             >
 515+ EB8C C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 515+ EB8D 4D 41 52 4B >                db      "MARKER"               // name string in 7-bit ascii, but
 515+ EB91 45 52       >
 515+ EB93             >                org     $-1                 // alter last byte of Name just above to set
 515+ EB92 D2          >                db      {b $} | END_BIT     // msb as name end
 515+ EB93             >
 515+ EB93 81 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 515+ EB95             >Prev_Ptr        defl    Heap_Ptr
 515+ EB95             >
 515+ EB95             >mirror_Ptr      defl    $
 515+ EB95             >
 515+ EB95 1B 3B       >                dw      Dict_Ptr + 2        // xt
 515+ EB97             >Heap_Ptr        defl    $ - $E000           // save current HP
 515+ EB97             >
 515+ EB97             >Current_HP      defl  $ - $E000             // used to set HP once!
 515+ EB97             >
 515+ EB97             >//              ______________________________________________________________________
 515+ EB97             >//              Dictionary part
 515+ EB97             >
 515+ EB97             >                org     Dict_Ptr
 515+ 3B19             >
 515+ 3B19 95 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 515+ 3B1B             >
 515+ 3B1B             >MARKER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 515+ 3B1B CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 515+ 3B1E             >
 515+ 3B1E             >
 515+ 3B1E             >                endif           ; ok        // for other definitions it "points" the correct handler
 515+ 3B1E             >                // Use of "; ok" to suppress "warning[fwdref]"
 515+ 3B1E             >
 515+ 3B1E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 516+ 3B1E 92 2B                        dw      CBUILDS
 517+ 3B20 AA 27 31 26                  dw      VOC_LINK, FETCH, COMMA
 517+ 3B24 62 28
 518+ 3B26 EC 27 31 26                  dw      CURRENT, FETCH, COMMA
 518+ 3B2A 62 28
 519+ 3B2C E6 27 31 26                  dw      CONTEXT, FETCH, COMMA
 519+ 3B30 62 28
 520+ 3B32 EC 27 31 26                  dw      CURRENT, FETCH, FETCH,  COMMA
 520+ 3B36 31 26 62 28
 521+ 3B3A F0 29 4E 2A                  dw      LATEST, PFA, LFA, FETCH, COMMA
 521+ 3B3E 3F 2A 31 26
 521+ 3B42 62 28
 522+ 3B44 9D 2B                        dw      DOES_TO
 523+ 3B46 C7 25 31 26                  dw      DUP, FETCH, VOC_LINK, STORE, CELL_PLUS
 523+ 3B4A AA 27 3B 26
 523+ 3B4E 72 25
 524+ 3B50 C7 25 31 26                  dw      DUP, FETCH, CURRENT, STORE, CELL_PLUS
 524+ 3B54 EC 27 3B 26
 524+ 3B58 72 25
 525+ 3B5A C7 25 31 26                  dw      DUP, FETCH, CONTEXT, STORE, CELL_PLUS
 525+ 3B5E E6 27 3B 26
 525+ 3B62 72 25
 526+ 3B64 C7 25 31 26                  dw      DUP, FETCH
 527+ 3B68                          //  dw      DUP, QHEAPP
 528+ 3B68                          //  dw      ZBRANCH
 529+ 3B68                          //  dw      Marker_then - $
 530+ 3B68 C7 25 BC 27                  dw          DUP, HP, STORE
 530+ 3B6C 3B 26
 531+ 3B6E 4E 2A 29 2A                  dw          PFA, CFA, CELL_MINUS
 531+ 3B72 76 25
 532+ 3B74              // Marker_then:
 533+ 3B74 A4 27 3B 26                  dw      DP, STORE, CELL_PLUS
 533+ 3B78 72 25
 534+ 3B7A 31 26 EC 27                  dw      FETCH, CURRENT, FETCH, STORE
 534+ 3B7E 31 26 3B 26
 535+ 3B82 F1 24                        dw      EXIT
 536+ 3B84
 537+ 3B84              //  ______________________________________________________________________
 538+ 3B84              //
 539+ 3B84              // spaces       n --
 540+ 3B84                              Colon_Def SPACES, "SPACES", is_normal
 540+ 3B84             >                New_Def  SPACES, "SPACES", Enter_Ptr, is_normal ; ok
 540+ 3B84             >
 540+ 3B84             >Dict_Ptr        defl    $
 540+ 3B84             >
 540+ 3B84             >//              ______________________________________________________________________
 540+ 3B84             >//              Heap part
 540+ 3B84             >
 540+ 3B84             >
 540+ 3B84             >                org     (Heap_Ptr & $1FFF) + $E000
 540+ EB97             >
 540+ EB97             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 540+ EB97             >Latest_Definition defl  Heap_Ptr
 540+ EB97             >
 540+ EB97             >                // dummy db directives used to calculate length of namec
 540+ EB97 53 50 41 43 >                db      "SPACES"
 540+ EB9B 45 53       >
 540+ EB9D             >len_NFA         defl    $ - temp_NFA
 540+ EB9D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 540+ EB97             >
 540+ EB97 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 540+ EB98 53 50 41 43 >                db      "SPACES"               // name string in 7-bit ascii, but
 540+ EB9C 45 53       >
 540+ EB9E             >                org     $-1                 // alter last byte of Name just above to set
 540+ EB9D D3          >                db      {b $} | END_BIT     // msb as name end
 540+ EB9E             >
 540+ EB9E 8C 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 540+ EBA0             >Prev_Ptr        defl    Heap_Ptr
 540+ EBA0             >
 540+ EBA0             >mirror_Ptr      defl    $
 540+ EBA0             >
 540+ EBA0 86 3B       >                dw      Dict_Ptr + 2        // xt
 540+ EBA2             >Heap_Ptr        defl    $ - $E000           // save current HP
 540+ EBA2             >
 540+ EBA2             >Current_HP      defl  $ - $E000             // used to set HP once!
 540+ EBA2             >
 540+ EBA2             >//              ______________________________________________________________________
 540+ EBA2             >//              Dictionary part
 540+ EBA2             >
 540+ EBA2             >                org     Dict_Ptr
 540+ 3B84             >
 540+ 3B84 A0 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 540+ 3B86             >
 540+ 3B86             >SPACES:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 540+ 3B86 CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 540+ 3B89             >
 540+ 3B89             >
 540+ 3B89             >                endif           ; ok        // for other definitions it "points" the correct handler
 540+ 3B89             >                // Use of "; ok" to suppress "warning[fwdref]"
 540+ 3B89             >
 540+ 3B89             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 541+ 3B89 27 27 DB 28                  dw      ZERO, MAX
 542+ 3B8D 27 27 A4 20                  dw      ZERO, C_Q_DO
 543+ 3B91 08 00                        dw      Spaces_Leave - $
 544+ 3B93              Spaces_Loop:
 545+ 3B93 15 29                        dw          SPACE
 546+ 3B95 7A 20                        dw      C_LOOP
 547+ 3B97 FC FF                        dw      Spaces_Loop - $
 548+ 3B99              Spaces_Leave:
 549+ 3B99 F1 24                        dw      EXIT                    // ;
 550+ 3B9B
 551+ 3B9B              //  ______________________________________________________________________
 552+ 3B9B              //
 553+ 3B9B              // <#           --
 554+ 3B9B                              Colon_Def BEGIN_DASH, "<#", is_normal
 554+ 3B9B             >                New_Def  BEGIN_DASH, "<#", Enter_Ptr, is_normal ; ok
 554+ 3B9B             >
 554+ 3B9B             >Dict_Ptr        defl    $
 554+ 3B9B             >
 554+ 3B9B             >//              ______________________________________________________________________
 554+ 3B9B             >//              Heap part
 554+ 3B9B             >
 554+ 3B9B             >
 554+ 3B9B             >                org     (Heap_Ptr & $1FFF) + $E000
 554+ EBA2             >
 554+ EBA2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 554+ EBA2             >Latest_Definition defl  Heap_Ptr
 554+ EBA2             >
 554+ EBA2             >                // dummy db directives used to calculate length of namec
 554+ EBA2 3C 23       >                db      "<#"
 554+ EBA4             >len_NFA         defl    $ - temp_NFA
 554+ EBA4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 554+ EBA2             >
 554+ EBA2 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 554+ EBA3 3C 23       >                db      "<#"               // name string in 7-bit ascii, but
 554+ EBA5             >                org     $-1                 // alter last byte of Name just above to set
 554+ EBA4 A3          >                db      {b $} | END_BIT     // msb as name end
 554+ EBA5             >
 554+ EBA5 97 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 554+ EBA7             >Prev_Ptr        defl    Heap_Ptr
 554+ EBA7             >
 554+ EBA7             >mirror_Ptr      defl    $
 554+ EBA7             >
 554+ EBA7 9D 3B       >                dw      Dict_Ptr + 2        // xt
 554+ EBA9             >Heap_Ptr        defl    $ - $E000           // save current HP
 554+ EBA9             >
 554+ EBA9             >Current_HP      defl  $ - $E000             // used to set HP once!
 554+ EBA9             >
 554+ EBA9             >//              ______________________________________________________________________
 554+ EBA9             >//              Dictionary part
 554+ EBA9             >
 554+ EBA9             >                org     Dict_Ptr
 554+ 3B9B             >
 554+ 3B9B A7 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 554+ 3B9D             >
 554+ 3B9D             >BEGIN_DASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 554+ 3B9D CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 554+ 3BA0             >
 554+ 3BA0             >
 554+ 3BA0             >                endif           ; ok        // for other definitions it "points" the correct handler
 554+ 3BA0             >                // Use of "; ok" to suppress "warning[fwdref]"
 554+ 3BA0             >
 554+ 3BA0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 555+ 3BA0 51 2D 16 28                  dw      PAD, HLD, STORE
 555+ 3BA4 3B 26
 556+ 3BA6 F1 24                        dw      EXIT
 557+ 3BA8
 558+ 3BA8              //  ______________________________________________________________________
 559+ 3BA8              //
 560+ 3BA8              // #>           --
 561+ 3BA8                              Colon_Def DASH_END, "#>", is_normal
 561+ 3BA8             >                New_Def  DASH_END, "#>", Enter_Ptr, is_normal ; ok
 561+ 3BA8             >
 561+ 3BA8             >Dict_Ptr        defl    $
 561+ 3BA8             >
 561+ 3BA8             >//              ______________________________________________________________________
 561+ 3BA8             >//              Heap part
 561+ 3BA8             >
 561+ 3BA8             >
 561+ 3BA8             >                org     (Heap_Ptr & $1FFF) + $E000
 561+ EBA9             >
 561+ EBA9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 561+ EBA9             >Latest_Definition defl  Heap_Ptr
 561+ EBA9             >
 561+ EBA9             >                // dummy db directives used to calculate length of namec
 561+ EBA9 23 3E       >                db      "#>"
 561+ EBAB             >len_NFA         defl    $ - temp_NFA
 561+ EBAB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 561+ EBA9             >
 561+ EBA9 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 561+ EBAA 23 3E       >                db      "#>"               // name string in 7-bit ascii, but
 561+ EBAC             >                org     $-1                 // alter last byte of Name just above to set
 561+ EBAB BE          >                db      {b $} | END_BIT     // msb as name end
 561+ EBAC             >
 561+ EBAC A2 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 561+ EBAE             >Prev_Ptr        defl    Heap_Ptr
 561+ EBAE             >
 561+ EBAE             >mirror_Ptr      defl    $
 561+ EBAE             >
 561+ EBAE AA 3B       >                dw      Dict_Ptr + 2        // xt
 561+ EBB0             >Heap_Ptr        defl    $ - $E000           // save current HP
 561+ EBB0             >
 561+ EBB0             >Current_HP      defl  $ - $E000             // used to set HP once!
 561+ EBB0             >
 561+ EBB0             >//              ______________________________________________________________________
 561+ EBB0             >//              Dictionary part
 561+ EBB0             >
 561+ EBB0             >                org     Dict_Ptr
 561+ 3BA8             >
 561+ 3BA8 AE 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 561+ 3BAA             >
 561+ 3BAA             >DASH_END:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 561+ 3BAA CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 561+ 3BAD             >
 561+ 3BAD             >
 561+ 3BAD             >                endif           ; ok        // for other definitions it "points" the correct handler
 561+ 3BAD             >                // Use of "; ok" to suppress "warning[fwdref]"
 561+ 3BAD             >
 561+ 3BAD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 562+ 3BAD FC 25                        dw      TWO_DROP
 563+ 3BAF 16 28 31 26                  dw      HLD, FETCH, PAD, OVER, SUBTRACT
 563+ 3BB3 51 2D A3 25
 563+ 3BB7 8B 28
 564+ 3BB9 F1 24                        dw      EXIT
 565+ 3BBB
 566+ 3BBB              //  ______________________________________________________________________
 567+ 3BBB              //
 568+ 3BBB              // sign         n d -- d
 569+ 3BBB                              Colon_Def SIGN, "SIGN", is_normal
 569+ 3BBB             >                New_Def  SIGN, "SIGN", Enter_Ptr, is_normal ; ok
 569+ 3BBB             >
 569+ 3BBB             >Dict_Ptr        defl    $
 569+ 3BBB             >
 569+ 3BBB             >//              ______________________________________________________________________
 569+ 3BBB             >//              Heap part
 569+ 3BBB             >
 569+ 3BBB             >
 569+ 3BBB             >                org     (Heap_Ptr & $1FFF) + $E000
 569+ EBB0             >
 569+ EBB0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 569+ EBB0             >Latest_Definition defl  Heap_Ptr
 569+ EBB0             >
 569+ EBB0             >                // dummy db directives used to calculate length of namec
 569+ EBB0 53 49 47 4E >                db      "SIGN"
 569+ EBB4             >len_NFA         defl    $ - temp_NFA
 569+ EBB4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 569+ EBB0             >
 569+ EBB0 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 569+ EBB1 53 49 47 4E >                db      "SIGN"               // name string in 7-bit ascii, but
 569+ EBB5             >                org     $-1                 // alter last byte of Name just above to set
 569+ EBB4 CE          >                db      {b $} | END_BIT     // msb as name end
 569+ EBB5             >
 569+ EBB5 A9 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 569+ EBB7             >Prev_Ptr        defl    Heap_Ptr
 569+ EBB7             >
 569+ EBB7             >mirror_Ptr      defl    $
 569+ EBB7             >
 569+ EBB7 BD 3B       >                dw      Dict_Ptr + 2        // xt
 569+ EBB9             >Heap_Ptr        defl    $ - $E000           // save current HP
 569+ EBB9             >
 569+ EBB9             >Current_HP      defl  $ - $E000             // used to set HP once!
 569+ EBB9             >
 569+ EBB9             >//              ______________________________________________________________________
 569+ EBB9             >//              Dictionary part
 569+ EBB9             >
 569+ EBB9             >                org     Dict_Ptr
 569+ 3BBB             >
 569+ 3BBB B7 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 569+ 3BBD             >
 569+ 3BBD             >SIGN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 569+ 3BBD CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 569+ 3BC0             >
 569+ 3BC0             >
 569+ 3BC0             >                endif           ; ok        // for other definitions it "points" the correct handler
 569+ 3BC0             >                // Use of "; ok" to suppress "warning[fwdref]"
 569+ 3BC0             >
 569+ 3BC0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 570+ 3BC0 28 25                        dw      ZLESS
 571+ 3BC2 8F 20                        dw      ZBRANCH
 572+ 3BC4 08 00                        dw      Sign_Endif - $
 573+ 3BC6 3D 20 2D 00                  dw          LIT, 45, HOLD
 573+ 3BCA 3E 2D
 574+ 3BCC              Sign_Endif:
 575+ 3BCC F1 24                        dw      EXIT
 576+ 3BCE
 577+ 3BCE              //  ______________________________________________________________________
 578+ 3BCE              //
 579+ 3BCE              // #           d1 -- d2
 580+ 3BCE                              Colon_Def DASH, "#", is_normal
 580+ 3BCE             >                New_Def  DASH, "#", Enter_Ptr, is_normal ; ok
 580+ 3BCE             >
 580+ 3BCE             >Dict_Ptr        defl    $
 580+ 3BCE             >
 580+ 3BCE             >//              ______________________________________________________________________
 580+ 3BCE             >//              Heap part
 580+ 3BCE             >
 580+ 3BCE             >
 580+ 3BCE             >                org     (Heap_Ptr & $1FFF) + $E000
 580+ EBB9             >
 580+ EBB9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 580+ EBB9             >Latest_Definition defl  Heap_Ptr
 580+ EBB9             >
 580+ EBB9             >                // dummy db directives used to calculate length of namec
 580+ EBB9 23          >                db      "#"
 580+ EBBA             >len_NFA         defl    $ - temp_NFA
 580+ EBBA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 580+ EBB9             >
 580+ EBB9 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 580+ EBBA 23          >                db      "#"               // name string in 7-bit ascii, but
 580+ EBBB             >                org     $-1                 // alter last byte of Name just above to set
 580+ EBBA A3          >                db      {b $} | END_BIT     // msb as name end
 580+ EBBB             >
 580+ EBBB B0 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 580+ EBBD             >Prev_Ptr        defl    Heap_Ptr
 580+ EBBD             >
 580+ EBBD             >mirror_Ptr      defl    $
 580+ EBBD             >
 580+ EBBD D0 3B       >                dw      Dict_Ptr + 2        // xt
 580+ EBBF             >Heap_Ptr        defl    $ - $E000           // save current HP
 580+ EBBF             >
 580+ EBBF             >Current_HP      defl  $ - $E000             // used to set HP once!
 580+ EBBF             >
 580+ EBBF             >//              ______________________________________________________________________
 580+ EBBF             >//              Dictionary part
 580+ EBBF             >
 580+ EBBF             >                org     Dict_Ptr
 580+ 3BCE             >
 580+ 3BCE BD 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 580+ 3BD0             >
 580+ 3BD0             >DASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 580+ 3BD0 CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 580+ 3BD3             >
 580+ 3BD3             >
 580+ 3BD3             >                endif           ; ok        // for other definitions it "points" the correct handler
 580+ 3BD3             >                // Use of "; ok" to suppress "warning[fwdref]"
 580+ 3BD3             >
 580+ 3BD3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 581+ 3BD3 F8 27 31 26                  dw      BASE, FETCH
 582+ 3BD7
 583+ 3BD7 FB 24                        dw      TO_R                    // >r           ( ud1 )
 584+ 3BD9 27 27 11 25                  dw      ZERO, R_OP, UMDIVMOD    // 0 r um/mod   ( l rem1 h/r )
 584+ 3BDD 7E 24
 585+ 3BDF 06 25 C0 25                  dw      R_TO, SWAP, TO_R        // r> swap >r   ( l rem )
 585+ 3BE3 FB 24
 586+ 3BE5 7E 24                        dw      UMDIVMOD                // um/mod       ( rem2 l/r )
 587+ 3BE7 06 25                        dw      R_TO                    // r>           ( rem2 l/r h/r )
 588+ 3BE9
 589+ 3BE9 CE 25                        dw      ROT
 590+ 3BEB 3D 20 09 00                  dw      LIT, 9, OVER, LESS
 590+ 3BEF A3 25 B0 28
 591+ 3BF3 8F 20                        dw      ZBRANCH
 592+ 3BF5 08 00                        dw      Dash_Endif - $
 593+ 3BF7 3D 20 07 00                  dw          LIT, 7, PLUS
 593+ 3BFB 43 25
 594+ 3BFD              Dash_Endif:
 595+ 3BFD
 596+ 3BFD 3D 20 30 00                  dw      LIT, 48, PLUS, HOLD
 596+ 3C01 43 25 3E 2D
 597+ 3C05 F1 24                        dw      EXIT
 598+ 3C07
 599+ 3C07              //  ______________________________________________________________________
 600+ 3C07              //
 601+ 3C07              // #s           d1 -- d2
 602+ 3C07                              Colon_Def DASHES, "#S", is_normal
 602+ 3C07             >                New_Def  DASHES, "#S", Enter_Ptr, is_normal ; ok
 602+ 3C07             >
 602+ 3C07             >Dict_Ptr        defl    $
 602+ 3C07             >
 602+ 3C07             >//              ______________________________________________________________________
 602+ 3C07             >//              Heap part
 602+ 3C07             >
 602+ 3C07             >
 602+ 3C07             >                org     (Heap_Ptr & $1FFF) + $E000
 602+ EBBF             >
 602+ EBBF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 602+ EBBF             >Latest_Definition defl  Heap_Ptr
 602+ EBBF             >
 602+ EBBF             >                // dummy db directives used to calculate length of namec
 602+ EBBF 23 53       >                db      "#S"
 602+ EBC1             >len_NFA         defl    $ - temp_NFA
 602+ EBC1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 602+ EBBF             >
 602+ EBBF 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 602+ EBC0 23 53       >                db      "#S"               // name string in 7-bit ascii, but
 602+ EBC2             >                org     $-1                 // alter last byte of Name just above to set
 602+ EBC1 D3          >                db      {b $} | END_BIT     // msb as name end
 602+ EBC2             >
 602+ EBC2 B9 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 602+ EBC4             >Prev_Ptr        defl    Heap_Ptr
 602+ EBC4             >
 602+ EBC4             >mirror_Ptr      defl    $
 602+ EBC4             >
 602+ EBC4 09 3C       >                dw      Dict_Ptr + 2        // xt
 602+ EBC6             >Heap_Ptr        defl    $ - $E000           // save current HP
 602+ EBC6             >
 602+ EBC6             >Current_HP      defl  $ - $E000             // used to set HP once!
 602+ EBC6             >
 602+ EBC6             >//              ______________________________________________________________________
 602+ EBC6             >//              Dictionary part
 602+ EBC6             >
 602+ EBC6             >                org     Dict_Ptr
 602+ 3C07             >
 602+ 3C07 C4 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 602+ 3C09             >
 602+ 3C09             >DASHES:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 602+ 3C09 CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 602+ 3C0C             >
 602+ 3C0C             >
 602+ 3C0C             >                endif           ; ok        // for other definitions it "points" the correct handler
 602+ 3C0C             >                // Use of "; ok" to suppress "warning[fwdref]"
 602+ 3C0C             >
 602+ 3C0C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 603+ 3C0C              Dashes_Begin:
 604+ 3C0C D0 3B 0F 26                  dw      DASH, TWO_DUP
 605+ 3C10 C0 24 16 25                  dw          OR_OP, ZEQUAL
 606+ 3C14 8F 20                        dw      ZBRANCH
 607+ 3C16 F6 FF                        dw      Dashes_Begin - $
 608+ 3C18 F1 24                        dw      EXIT
 609+ 3C1A
 610+ 3C1A              //  ______________________________________________________________________
 611+ 3C1A              //
 612+ 3C1A              // d.r          d n --
 613+ 3C1A                              Colon_Def D_DOT_R, "D.R", is_normal
 613+ 3C1A             >                New_Def  D_DOT_R, "D.R", Enter_Ptr, is_normal ; ok
 613+ 3C1A             >
 613+ 3C1A             >Dict_Ptr        defl    $
 613+ 3C1A             >
 613+ 3C1A             >//              ______________________________________________________________________
 613+ 3C1A             >//              Heap part
 613+ 3C1A             >
 613+ 3C1A             >
 613+ 3C1A             >                org     (Heap_Ptr & $1FFF) + $E000
 613+ EBC6             >
 613+ EBC6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 613+ EBC6             >Latest_Definition defl  Heap_Ptr
 613+ EBC6             >
 613+ EBC6             >                // dummy db directives used to calculate length of namec
 613+ EBC6 44 2E 52    >                db      "D.R"
 613+ EBC9             >len_NFA         defl    $ - temp_NFA
 613+ EBC9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 613+ EBC6             >
 613+ EBC6 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 613+ EBC7 44 2E 52    >                db      "D.R"               // name string in 7-bit ascii, but
 613+ EBCA             >                org     $-1                 // alter last byte of Name just above to set
 613+ EBC9 D2          >                db      {b $} | END_BIT     // msb as name end
 613+ EBCA             >
 613+ EBCA BF 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 613+ EBCC             >Prev_Ptr        defl    Heap_Ptr
 613+ EBCC             >
 613+ EBCC             >mirror_Ptr      defl    $
 613+ EBCC             >
 613+ EBCC 1C 3C       >                dw      Dict_Ptr + 2        // xt
 613+ EBCE             >Heap_Ptr        defl    $ - $E000           // save current HP
 613+ EBCE             >
 613+ EBCE             >Current_HP      defl  $ - $E000             // used to set HP once!
 613+ EBCE             >
 613+ EBCE             >//              ______________________________________________________________________
 613+ EBCE             >//              Dictionary part
 613+ EBCE             >
 613+ EBCE             >                org     Dict_Ptr
 613+ 3C1A             >
 613+ 3C1A CC 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 613+ 3C1C             >
 613+ 3C1C             >D_DOT_R:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 613+ 3C1C CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 613+ 3C1F             >
 613+ 3C1F             >
 613+ 3C1F             >                endif           ; ok        // for other definitions it "points" the correct handler
 613+ 3C1F             >                // Use of "; ok" to suppress "warning[fwdref]"
 613+ 3C1F             >
 613+ 3C1F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 614+ 3C1F FB 24                        dw      TO_R
 615+ 3C21 B7 25 64 34                  dw      TUCK, DABS
 616+ 3C25 9D 3B 09 3C                  dw      BEGIN_DASH, DASHES, ROT, SIGN, DASH_END
 616+ 3C29 CE 25 BD 3B
 616+ 3C2D AA 3B
 617+ 3C2F 06 25                        dw      R_TO
 618+ 3C31 A3 25 8B 28                  dw      OVER, SUBTRACT, SPACES, TYPE
 618+ 3C35 86 3B 0E 2C
 619+ 3C39 F1 24                        dw      EXIT
 620+ 3C3B
 621+ 3C3B              //  ______________________________________________________________________
 622+ 3C3B              //
 623+ 3C3B              // .r           n1 n2 --
 624+ 3C3B                              Colon_Def DOT_R, ".R", is_normal
 624+ 3C3B             >                New_Def  DOT_R, ".R", Enter_Ptr, is_normal ; ok
 624+ 3C3B             >
 624+ 3C3B             >Dict_Ptr        defl    $
 624+ 3C3B             >
 624+ 3C3B             >//              ______________________________________________________________________
 624+ 3C3B             >//              Heap part
 624+ 3C3B             >
 624+ 3C3B             >
 624+ 3C3B             >                org     (Heap_Ptr & $1FFF) + $E000
 624+ EBCE             >
 624+ EBCE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 624+ EBCE             >Latest_Definition defl  Heap_Ptr
 624+ EBCE             >
 624+ EBCE             >                // dummy db directives used to calculate length of namec
 624+ EBCE 2E 52       >                db      ".R"
 624+ EBD0             >len_NFA         defl    $ - temp_NFA
 624+ EBD0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 624+ EBCE             >
 624+ EBCE 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 624+ EBCF 2E 52       >                db      ".R"               // name string in 7-bit ascii, but
 624+ EBD1             >                org     $-1                 // alter last byte of Name just above to set
 624+ EBD0 D2          >                db      {b $} | END_BIT     // msb as name end
 624+ EBD1             >
 624+ EBD1 C6 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 624+ EBD3             >Prev_Ptr        defl    Heap_Ptr
 624+ EBD3             >
 624+ EBD3             >mirror_Ptr      defl    $
 624+ EBD3             >
 624+ EBD3 3D 3C       >                dw      Dict_Ptr + 2        // xt
 624+ EBD5             >Heap_Ptr        defl    $ - $E000           // save current HP
 624+ EBD5             >
 624+ EBD5             >Current_HP      defl  $ - $E000             // used to set HP once!
 624+ EBD5             >
 624+ EBD5             >//              ______________________________________________________________________
 624+ EBD5             >//              Dictionary part
 624+ EBD5             >
 624+ EBD5             >                org     Dict_Ptr
 624+ 3C3B             >
 624+ 3C3B D3 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 624+ 3C3D             >
 624+ 3C3D             >DOT_R:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 624+ 3C3D CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 624+ 3C40             >
 624+ 3C40             >
 624+ 3C40             >                endif           ; ok        // for other definitions it "points" the correct handler
 624+ 3C40             >                // Use of "; ok" to suppress "warning[fwdref]"
 624+ 3C40             >
 624+ 3C40             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 625+ 3C40 FB 24                        dw      TO_R
 626+ 3C42 80 28 06 25                  dw      S_TO_D, R_TO
 627+ 3C46 1C 3C                        dw      D_DOT_R
 628+ 3C48 F1 24                        dw      EXIT
 629+ 3C4A
 630+ 3C4A              //  ______________________________________________________________________
 631+ 3C4A              //
 632+ 3C4A              // d.           d --
 633+ 3C4A                              Colon_Def D_DOT, "D.", is_normal
 633+ 3C4A             >                New_Def  D_DOT, "D.", Enter_Ptr, is_normal ; ok
 633+ 3C4A             >
 633+ 3C4A             >Dict_Ptr        defl    $
 633+ 3C4A             >
 633+ 3C4A             >//              ______________________________________________________________________
 633+ 3C4A             >//              Heap part
 633+ 3C4A             >
 633+ 3C4A             >
 633+ 3C4A             >                org     (Heap_Ptr & $1FFF) + $E000
 633+ EBD5             >
 633+ EBD5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 633+ EBD5             >Latest_Definition defl  Heap_Ptr
 633+ EBD5             >
 633+ EBD5             >                // dummy db directives used to calculate length of namec
 633+ EBD5 44 2E       >                db      "D."
 633+ EBD7             >len_NFA         defl    $ - temp_NFA
 633+ EBD7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 633+ EBD5             >
 633+ EBD5 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 633+ EBD6 44 2E       >                db      "D."               // name string in 7-bit ascii, but
 633+ EBD8             >                org     $-1                 // alter last byte of Name just above to set
 633+ EBD7 AE          >                db      {b $} | END_BIT     // msb as name end
 633+ EBD8             >
 633+ EBD8 CE 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 633+ EBDA             >Prev_Ptr        defl    Heap_Ptr
 633+ EBDA             >
 633+ EBDA             >mirror_Ptr      defl    $
 633+ EBDA             >
 633+ EBDA 4C 3C       >                dw      Dict_Ptr + 2        // xt
 633+ EBDC             >Heap_Ptr        defl    $ - $E000           // save current HP
 633+ EBDC             >
 633+ EBDC             >Current_HP      defl  $ - $E000             // used to set HP once!
 633+ EBDC             >
 633+ EBDC             >//              ______________________________________________________________________
 633+ EBDC             >//              Dictionary part
 633+ EBDC             >
 633+ EBDC             >                org     Dict_Ptr
 633+ 3C4A             >
 633+ 3C4A DA 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 633+ 3C4C             >
 633+ 3C4C             >D_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 633+ 3C4C CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 633+ 3C4F             >
 633+ 3C4F             >
 633+ 3C4F             >                endif           ; ok        // for other definitions it "points" the correct handler
 633+ 3C4F             >                // Use of "; ok" to suppress "warning[fwdref]"
 633+ 3C4F             >
 633+ 3C4F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 634+ 3C4F 27 27 1C 3C                  dw      ZERO, D_DOT_R, SPACE
 634+ 3C53 15 29
 635+ 3C55 F1 24                        dw      EXIT
 636+ 3C57
 637+ 3C57              //  ______________________________________________________________________
 638+ 3C57              //
 639+ 3C57              // .            n --
 640+ 3C57                              Colon_Def DOT, ".", is_normal
 640+ 3C57             >                New_Def  DOT, ".", Enter_Ptr, is_normal ; ok
 640+ 3C57             >
 640+ 3C57             >Dict_Ptr        defl    $
 640+ 3C57             >
 640+ 3C57             >//              ______________________________________________________________________
 640+ 3C57             >//              Heap part
 640+ 3C57             >
 640+ 3C57             >
 640+ 3C57             >                org     (Heap_Ptr & $1FFF) + $E000
 640+ EBDC             >
 640+ EBDC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 640+ EBDC             >Latest_Definition defl  Heap_Ptr
 640+ EBDC             >
 640+ EBDC             >                // dummy db directives used to calculate length of namec
 640+ EBDC 2E          >                db      "."
 640+ EBDD             >len_NFA         defl    $ - temp_NFA
 640+ EBDD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 640+ EBDC             >
 640+ EBDC 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 640+ EBDD 2E          >                db      "."               // name string in 7-bit ascii, but
 640+ EBDE             >                org     $-1                 // alter last byte of Name just above to set
 640+ EBDD AE          >                db      {b $} | END_BIT     // msb as name end
 640+ EBDE             >
 640+ EBDE D5 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 640+ EBE0             >Prev_Ptr        defl    Heap_Ptr
 640+ EBE0             >
 640+ EBE0             >mirror_Ptr      defl    $
 640+ EBE0             >
 640+ EBE0 59 3C       >                dw      Dict_Ptr + 2        // xt
 640+ EBE2             >Heap_Ptr        defl    $ - $E000           // save current HP
 640+ EBE2             >
 640+ EBE2             >Current_HP      defl  $ - $E000             // used to set HP once!
 640+ EBE2             >
 640+ EBE2             >//              ______________________________________________________________________
 640+ EBE2             >//              Dictionary part
 640+ EBE2             >
 640+ EBE2             >                org     Dict_Ptr
 640+ 3C57             >
 640+ 3C57 E0 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 640+ 3C59             >
 640+ 3C59             >DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 640+ 3C59 CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 640+ 3C5C             >
 640+ 3C5C             >
 640+ 3C5C             >                endif           ; ok        // for other definitions it "points" the correct handler
 640+ 3C5C             >                // Use of "; ok" to suppress "warning[fwdref]"
 640+ 3C5C             >
 640+ 3C5C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 641+ 3C5C 80 28 4C 3C                  dw      S_TO_D, D_DOT
 642+ 3C60 F1 24                        dw      EXIT
 643+ 3C62
 644+ 3C62              //  ______________________________________________________________________
 645+ 3C62              //
 646+ 3C62              // ?            n --
 647+ 3C62                              Colon_Def QUESTION, "?", is_normal
 647+ 3C62             >                New_Def  QUESTION, "?", Enter_Ptr, is_normal ; ok
 647+ 3C62             >
 647+ 3C62             >Dict_Ptr        defl    $
 647+ 3C62             >
 647+ 3C62             >//              ______________________________________________________________________
 647+ 3C62             >//              Heap part
 647+ 3C62             >
 647+ 3C62             >
 647+ 3C62             >                org     (Heap_Ptr & $1FFF) + $E000
 647+ EBE2             >
 647+ EBE2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 647+ EBE2             >Latest_Definition defl  Heap_Ptr
 647+ EBE2             >
 647+ EBE2             >                // dummy db directives used to calculate length of namec
 647+ EBE2 3F          >                db      "?"
 647+ EBE3             >len_NFA         defl    $ - temp_NFA
 647+ EBE3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 647+ EBE2             >
 647+ EBE2 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 647+ EBE3 3F          >                db      "?"               // name string in 7-bit ascii, but
 647+ EBE4             >                org     $-1                 // alter last byte of Name just above to set
 647+ EBE3 BF          >                db      {b $} | END_BIT     // msb as name end
 647+ EBE4             >
 647+ EBE4 DC 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 647+ EBE6             >Prev_Ptr        defl    Heap_Ptr
 647+ EBE6             >
 647+ EBE6             >mirror_Ptr      defl    $
 647+ EBE6             >
 647+ EBE6 64 3C       >                dw      Dict_Ptr + 2        // xt
 647+ EBE8             >Heap_Ptr        defl    $ - $E000           // save current HP
 647+ EBE8             >
 647+ EBE8             >Current_HP      defl  $ - $E000             // used to set HP once!
 647+ EBE8             >
 647+ EBE8             >//              ______________________________________________________________________
 647+ EBE8             >//              Dictionary part
 647+ EBE8             >
 647+ EBE8             >                org     Dict_Ptr
 647+ 3C62             >
 647+ 3C62 E6 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 647+ 3C64             >
 647+ 3C64             >QUESTION:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 647+ 3C64 CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 647+ 3C67             >
 647+ 3C67             >
 647+ 3C67             >                endif           ; ok        // for other definitions it "points" the correct handler
 647+ 3C67             >                // Use of "; ok" to suppress "warning[fwdref]"
 647+ 3C67             >
 647+ 3C67             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 648+ 3C67 31 26 59 3C                  dw      FETCH, DOT
 649+ 3C6B F1 24                        dw      EXIT
 650+ 3C6D
 651+ 3C6D              //  ______________________________________________________________________
 652+ 3C6D              //
 653+ 3C6D              // u.           u --
 654+ 3C6D                              Colon_Def U_DOT, "U.", is_normal
 654+ 3C6D             >                New_Def  U_DOT, "U.", Enter_Ptr, is_normal ; ok
 654+ 3C6D             >
 654+ 3C6D             >Dict_Ptr        defl    $
 654+ 3C6D             >
 654+ 3C6D             >//              ______________________________________________________________________
 654+ 3C6D             >//              Heap part
 654+ 3C6D             >
 654+ 3C6D             >
 654+ 3C6D             >                org     (Heap_Ptr & $1FFF) + $E000
 654+ EBE8             >
 654+ EBE8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 654+ EBE8             >Latest_Definition defl  Heap_Ptr
 654+ EBE8             >
 654+ EBE8             >                // dummy db directives used to calculate length of namec
 654+ EBE8 55 2E       >                db      "U."
 654+ EBEA             >len_NFA         defl    $ - temp_NFA
 654+ EBEA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 654+ EBE8             >
 654+ EBE8 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 654+ EBE9 55 2E       >                db      "U."               // name string in 7-bit ascii, but
 654+ EBEB             >                org     $-1                 // alter last byte of Name just above to set
 654+ EBEA AE          >                db      {b $} | END_BIT     // msb as name end
 654+ EBEB             >
 654+ EBEB E2 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 654+ EBED             >Prev_Ptr        defl    Heap_Ptr
 654+ EBED             >
 654+ EBED             >mirror_Ptr      defl    $
 654+ EBED             >
 654+ EBED 6F 3C       >                dw      Dict_Ptr + 2        // xt
 654+ EBEF             >Heap_Ptr        defl    $ - $E000           // save current HP
 654+ EBEF             >
 654+ EBEF             >Current_HP      defl  $ - $E000             // used to set HP once!
 654+ EBEF             >
 654+ EBEF             >//              ______________________________________________________________________
 654+ EBEF             >//              Dictionary part
 654+ EBEF             >
 654+ EBEF             >                org     Dict_Ptr
 654+ 3C6D             >
 654+ 3C6D ED 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 654+ 3C6F             >
 654+ 3C6F             >U_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 654+ 3C6F CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 654+ 3C72             >
 654+ 3C72             >
 654+ 3C72             >                endif           ; ok        // for other definitions it "points" the correct handler
 654+ 3C72             >                // Use of "; ok" to suppress "warning[fwdref]"
 654+ 3C72             >
 654+ 3C72             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 655+ 3C72 27 27 4C 3C                  dw      ZERO, D_DOT
 656+ 3C76 F1 24                        dw      EXIT
 657+ 3C78
 658+ 3C78              //  ______________________________________________________________________
 659+ 3C78              //
 660+ 3C78              // words        --
 661+ 3C78                              Colon_Def WORDS, "WORDS", is_normal
 661+ 3C78             >                New_Def  WORDS, "WORDS", Enter_Ptr, is_normal ; ok
 661+ 3C78             >
 661+ 3C78             >Dict_Ptr        defl    $
 661+ 3C78             >
 661+ 3C78             >//              ______________________________________________________________________
 661+ 3C78             >//              Heap part
 661+ 3C78             >
 661+ 3C78             >
 661+ 3C78             >                org     (Heap_Ptr & $1FFF) + $E000
 661+ EBEF             >
 661+ EBEF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 661+ EBEF             >Latest_Definition defl  Heap_Ptr
 661+ EBEF             >
 661+ EBEF             >                // dummy db directives used to calculate length of namec
 661+ EBEF 57 4F 52 44 >                db      "WORDS"
 661+ EBF3 53          >
 661+ EBF4             >len_NFA         defl    $ - temp_NFA
 661+ EBF4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 661+ EBEF             >
 661+ EBEF 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 661+ EBF0 57 4F 52 44 >                db      "WORDS"               // name string in 7-bit ascii, but
 661+ EBF4 53          >
 661+ EBF5             >                org     $-1                 // alter last byte of Name just above to set
 661+ EBF4 D3          >                db      {b $} | END_BIT     // msb as name end
 661+ EBF5             >
 661+ EBF5 E8 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 661+ EBF7             >Prev_Ptr        defl    Heap_Ptr
 661+ EBF7             >
 661+ EBF7             >mirror_Ptr      defl    $
 661+ EBF7             >
 661+ EBF7 7A 3C       >                dw      Dict_Ptr + 2        // xt
 661+ EBF9             >Heap_Ptr        defl    $ - $E000           // save current HP
 661+ EBF9             >
 661+ EBF9             >Current_HP      defl  $ - $E000             // used to set HP once!
 661+ EBF9             >
 661+ EBF9             >//              ______________________________________________________________________
 661+ EBF9             >//              Dictionary part
 661+ EBF9             >
 661+ EBF9             >                org     Dict_Ptr
 661+ 3C78             >
 661+ 3C78 F7 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 661+ 3C7A             >
 661+ 3C7A             >WORDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 661+ 3C7A CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 661+ 3C7D             >
 661+ 3C7D             >
 661+ 3C7D             >                endif           ; ok        // for other definitions it "points" the correct handler
 661+ 3C7D             >                // Use of "; ok" to suppress "warning[fwdref]"
 661+ 3C7D             >
 661+ 3C7D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 662+ 3C7D 3D 20 80 00                  dw      LIT, 128, OUT, STORE
 662+ 3C81 D4 27 3B 26
 663+ 3C85 E6 27 31 26                  dw      CONTEXT, FETCH, FETCH
 663+ 3C89 31 26
 664+ 3C8B              Words_Begin:
 665+ 3C8B 86 29                        dw          FAR // Q TO HEAP
 666+ 3C8D C7 25 46 26                  dw          DUP, CFETCH, LIT, $1F, AND_OP
 666+ 3C91 3D 20 1F 00
 666+ 3C95 B1 24
 667+ 3C97 D4 27 31 26                  dw          OUT, FETCH, PLUS
 667+ 3C9B 43 25
 668+ 3C9D 51 27 B0 28                  dw          CL, LESS, ZEQUAL
 668+ 3CA1 16 25
 669+ 3CA3 8F 20                        dw          ZBRANCH
 670+ 3CA5 0A 00                        dw          Words_Endif - $
 671+ 3CA7 4F 22 27 27                  dw              CR, ZERO, OUT, STORE
 671+ 3CAB D4 27 3B 26
 672+ 3CAF              Words_Endif:
 673+ 3CAF C7 25 F2 2F                  dw          DUP, ID_DOT
 674+ 3CB3 2E 27 20 29                  dw          ONE, TRAVERSE, ONE_PLUS, FETCH
 674+ 3CB7 5C 25 31 26
 675+ 3CBB C7 25 16 25                  dw          DUP, ZEQUAL
 676+ 3CBF 48 23 C0 24                  dw          QTERMINAL, OR_OP
 677+ 3CC3 8F 20                        dw      ZBRANCH
 678+ 3CC5 C6 FF                        dw      Words_Begin - $
 679+ 3CC7 AC 25                        dw      DROP
 680+ 3CC9 F1 24                        dw      EXIT
 681+ 3CCB
 682+ 3CCB              //  ______________________________________________________________________
 683+ 3CCB              //
 684+ 3CCB              // list         n --
 685+ 3CCB                              Colon_Def LIST, "LIST", is_normal
 685+ 3CCB             >                New_Def  LIST, "LIST", Enter_Ptr, is_normal ; ok
 685+ 3CCB             >
 685+ 3CCB             >Dict_Ptr        defl    $
 685+ 3CCB             >
 685+ 3CCB             >//              ______________________________________________________________________
 685+ 3CCB             >//              Heap part
 685+ 3CCB             >
 685+ 3CCB             >
 685+ 3CCB             >                org     (Heap_Ptr & $1FFF) + $E000
 685+ EBF9             >
 685+ EBF9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 685+ EBF9             >Latest_Definition defl  Heap_Ptr
 685+ EBF9             >
 685+ EBF9             >                // dummy db directives used to calculate length of namec
 685+ EBF9 4C 49 53 54 >                db      "LIST"
 685+ EBFD             >len_NFA         defl    $ - temp_NFA
 685+ EBFD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 685+ EBF9             >
 685+ EBF9 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 685+ EBFA 4C 49 53 54 >                db      "LIST"               // name string in 7-bit ascii, but
 685+ EBFE             >                org     $-1                 // alter last byte of Name just above to set
 685+ EBFD D4          >                db      {b $} | END_BIT     // msb as name end
 685+ EBFE             >
 685+ EBFE EF 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 685+ EC00             >Prev_Ptr        defl    Heap_Ptr
 685+ EC00             >
 685+ EC00             >mirror_Ptr      defl    $
 685+ EC00             >
 685+ EC00 CD 3C       >                dw      Dict_Ptr + 2        // xt
 685+ EC02             >Heap_Ptr        defl    $ - $E000           // save current HP
 685+ EC02             >
 685+ EC02             >Current_HP      defl  $ - $E000             // used to set HP once!
 685+ EC02             >
 685+ EC02             >//              ______________________________________________________________________
 685+ EC02             >//              Dictionary part
 685+ EC02             >
 685+ EC02             >                org     Dict_Ptr
 685+ 3CCB             >
 685+ 3CCB 00 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 685+ 3CCD             >
 685+ 3CCD             >LIST:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 685+ 3CCD CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 685+ 3CD0             >
 685+ 3CD0             >
 685+ 3CD0             >                endif           ; ok        // for other definitions it "points" the correct handler
 685+ 3CD0             >                // Use of "; ok" to suppress "warning[fwdref]"
 685+ 3CD0             >
 685+ 3CD0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 686+ 3CD0 57 2B 4F 22                  dw      DECIMAL, CR
 687+ 3CD4 C7 25 DA 27                  dw      DUP, SCR, STORE
 687+ 3CD8 3B 26
 688+ 3CDA AB 2D                        dw      C_DOT_QUOTE
 689+ 3CDC 05 53 63 72                  db      5, "Scr# "
 689+ 3CE0 23 20
 690+ 3CE2 59 3C                        dw      DOT
 691+ 3CE4 66 27 27 27                  dw      LSCR, ZERO, C_DO
 691+ 3CE8 CC 20
 692+ 3CEA              List_Loop:
 693+ 3CEA 4F 22                        dw          CR
 694+ 3CEC D2 20 3C 27                  dw          I, THREE
 695+ 3CF0 3D 3C 15 29                  dw          DOT_R, SPACE
 696+ 3CF4 D2 20 DA 27                  dw          I, SCR, FETCH, DOT_LINE
 696+ 3CF8 31 26 5F 35
 697+ 3CFC 48 23                        dw          QTERMINAL
 698+ 3CFE 8F 20                        dw          ZBRANCH
 699+ 3D00 06 00                        dw          List_Endif - $
 700+ 3D02 9A 20                        dw              C_LEAVE
 701+ 3D04 06 00                        dw              List_Leave - $
 702+ 3D06              List_Endif:
 703+ 3D06 7A 20                        dw      C_LOOP
 704+ 3D08 E2 FF                        dw      List_Loop - $
 705+ 3D0A              List_Leave:
 706+ 3D0A 4F 22                        dw      CR
 707+ 3D0C F1 24                        dw      EXIT
 708+ 3D0E
 709+ 3D0E              //  ______________________________________________________________________
 710+ 3D0E              //
 711+ 3D0E              // index        n1 n2 --
 712+ 3D0E                              Colon_Def INDEX, "INDEX", is_normal
 712+ 3D0E             >                New_Def  INDEX, "INDEX", Enter_Ptr, is_normal ; ok
 712+ 3D0E             >
 712+ 3D0E             >Dict_Ptr        defl    $
 712+ 3D0E             >
 712+ 3D0E             >//              ______________________________________________________________________
 712+ 3D0E             >//              Heap part
 712+ 3D0E             >
 712+ 3D0E             >
 712+ 3D0E             >                org     (Heap_Ptr & $1FFF) + $E000
 712+ EC02             >
 712+ EC02             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 712+ EC02             >Latest_Definition defl  Heap_Ptr
 712+ EC02             >
 712+ EC02             >                // dummy db directives used to calculate length of namec
 712+ EC02 49 4E 44 45 >                db      "INDEX"
 712+ EC06 58          >
 712+ EC07             >len_NFA         defl    $ - temp_NFA
 712+ EC07             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 712+ EC02             >
 712+ EC02 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 712+ EC03 49 4E 44 45 >                db      "INDEX"               // name string in 7-bit ascii, but
 712+ EC07 58          >
 712+ EC08             >                org     $-1                 // alter last byte of Name just above to set
 712+ EC07 D8          >                db      {b $} | END_BIT     // msb as name end
 712+ EC08             >
 712+ EC08 F9 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 712+ EC0A             >Prev_Ptr        defl    Heap_Ptr
 712+ EC0A             >
 712+ EC0A             >mirror_Ptr      defl    $
 712+ EC0A             >
 712+ EC0A 10 3D       >                dw      Dict_Ptr + 2        // xt
 712+ EC0C             >Heap_Ptr        defl    $ - $E000           // save current HP
 712+ EC0C             >
 712+ EC0C             >Current_HP      defl  $ - $E000             // used to set HP once!
 712+ EC0C             >
 712+ EC0C             >//              ______________________________________________________________________
 712+ EC0C             >//              Dictionary part
 712+ EC0C             >
 712+ EC0C             >                org     Dict_Ptr
 712+ 3D0E             >
 712+ 3D0E 0A 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 712+ 3D10             >
 712+ 3D10             >INDEX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 712+ 3D10 CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 712+ 3D13             >
 712+ 3D13             >
 712+ 3D13             >                endif           ; ok        // for other definitions it "points" the correct handler
 712+ 3D13             >                // Use of "; ok" to suppress "warning[fwdref]"
 712+ 3D13             >
 712+ 3D13             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 713+ 3D13 5C 25 C0 25                  dw      ONE_PLUS, SWAP, C_DO
 713+ 3D17 CC 20
 714+ 3D19              Index_Loop:
 715+ 3D19 4F 22 D2 20                  dw          CR, I, THREE
 715+ 3D1D 3C 27
 716+ 3D1F 3D 3C 15 29                  dw          DOT_R, SPACE
 717+ 3D23 27 27 D2 20                  dw          ZERO, I, DOT_LINE
 717+ 3D27 5F 35
 718+ 3D29 48 23                        dw          QTERMINAL
 719+ 3D2B 8F 20                        dw          ZBRANCH
 720+ 3D2D 06 00                        dw          Index_Endif - $
 721+ 3D2F 9A 20                        dw              C_LEAVE
 722+ 3D31 06 00                        dw              Index_Leave - $
 723+ 3D33              Index_Endif:
 724+ 3D33 7A 20                        dw      C_LOOP
 725+ 3D35 E4 FF                        dw      Index_Loop - $
 726+ 3D37              Index_Leave:
 727+ 3D37 4F 22                        dw      CR
 728+ 3D39 F1 24                        dw      EXIT
 729+ 3D3B
 730+ 3D3B              //  ______________________________________________________________________
 731+ 3D3B              //
 732+ 3D3B              // cls          --
 733+ 3D3B              //              Colon_Def CLS, "CLS", is_normal
 734+ 3D3B              //              dw      LIT, $0E, EMITC
 735+ 3D3B              //              dw      EXIT
 736+ 3D3B
 737+ 3D3B                              New_Def CLS, "CLS", is_code, is_normal
 737+ 3D3B             >
 737+ 3D3B             >Dict_Ptr        defl    $
 737+ 3D3B             >
 737+ 3D3B             >//              ______________________________________________________________________
 737+ 3D3B             >//              Heap part
 737+ 3D3B             >
 737+ 3D3B             >
 737+ 3D3B             >                org     (Heap_Ptr & $1FFF) + $E000
 737+ EC0C             >
 737+ EC0C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 737+ EC0C             >Latest_Definition defl  Heap_Ptr
 737+ EC0C             >
 737+ EC0C             >                // dummy db directives used to calculate length of namec
 737+ EC0C 43 4C 53    >                db      "CLS"
 737+ EC0F             >len_NFA         defl    $ - temp_NFA
 737+ EC0F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 737+ EC0C             >
 737+ EC0C 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 737+ EC0D 43 4C 53    >                db      "CLS"               // name string in 7-bit ascii, but
 737+ EC10             >                org     $-1                 // alter last byte of Name just above to set
 737+ EC0F D3          >                db      {b $} | END_BIT     // msb as name end
 737+ EC10             >
 737+ EC10 02 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 737+ EC12             >Prev_Ptr        defl    Heap_Ptr
 737+ EC12             >
 737+ EC12             >mirror_Ptr      defl    $
 737+ EC12             >
 737+ EC12 3D 3D       >                dw      Dict_Ptr + 2        // xt
 737+ EC14             >Heap_Ptr        defl    $ - $E000           // save current HP
 737+ EC14             >
 737+ EC14             >Current_HP      defl  $ - $E000             // used to set HP once!
 737+ EC14             >
 737+ EC14             >//              ______________________________________________________________________
 737+ EC14             >//              Dictionary part
 737+ EC14             >
 737+ EC14             >                org     Dict_Ptr
 737+ 3D3B             >
 737+ 3D3B 12 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 737+ 3D3D             >
 737+ 3D3D             >CLS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 737+ 3D3D ~           >                call    runcode ; ok        // for primitive definitions  actual code
 737+ 3D3D ~           >
 737+ 3D3D ~           >
 737+ 3D3D             >                endif           ; ok        // for other definitions it "points" the correct handler
 737+ 3D3D             >                // Use of "; ok" to suppress "warning[fwdref]"
 737+ 3D3D             >
 737+ 3D3D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 738+ 3D3D C5                           push    bc
 739+ 3D3E D5                           push    de
 740+ 3D3F DD E5                        push    ix
 741+ 3D41 11 D5 01                     ld      de, $01D5   // on success set carry-flag
 742+ 3D44 0E 07                        ld      c, 7        // necessary to call M_P3DOS
 743+ 3D46 AF                           xor     a           // query current status
 744+ 3D47 CF                           rst     8
 745+ 3D48 94                           db      $94         // carry flag set on success
 746+ 3D49 A7                           and     a
 747+ 3D4A 20 05                        jr      nz, CLS_No_Layer_0
 748+ 3D4C DF                             rst     $18
 749+ 3D4D AF 0D                          defw    $0DAF
 750+ 3D4F 18 03                        jr      CLS_Layer_0
 751+ 3D51              CLS_No_Layer_0:
 752+ 3D51 3E 0E                          ld      a, $0E
 753+ 3D53 D7                             rst     $10
 754+ 3D54              CLS_Layer_0:
 755+ 3D54 DD E1                        pop     ix
 756+ 3D56 D1                           pop     de
 757+ 3D57 C1                           pop     bc
 758+ 3D58                              next
 758+ 3D58 DD E9       >                jp      (ix)
 759+ 3D5A
 760+ 3D5A              //  ______________________________________________________________________
 761+ 3D5A              //
 762+ 3D5A              // splash       --
 763+ 3D5A              //              Colon_Def SPLASH, "SPLASH", is_normal
 764+ 3D5A              //              dw      CLS
 765+ 3D5A              //              dw      C_DOT_QUOTE
 766+ 3D5A              //              db      87
 767+ 3D5A              //              db      "v-Forth 1.7 NextZXOS version", 13    // 29
 768+ 3D5A              //              db      "Heap Vocabulary - build 20240616", 13  // 33
 769+ 3D5A              //              db      "1990-2024 Matteo Vitturi", 13        // 25
 770+ 3D5A              //              dw      EXIT
 771+ 3D5A
 772+ 3D5A              //  ______________________________________________________________________
 773+ 3D5A              //
 774+ 3D5A              // splash       --
 775+ 3D5A                              Colon_Def SPLASH, "SPLASH", is_normal
 775+ 3D5A             >                New_Def  SPLASH, "SPLASH", Enter_Ptr, is_normal ; ok
 775+ 3D5A             >
 775+ 3D5A             >Dict_Ptr        defl    $
 775+ 3D5A             >
 775+ 3D5A             >//              ______________________________________________________________________
 775+ 3D5A             >//              Heap part
 775+ 3D5A             >
 775+ 3D5A             >
 775+ 3D5A             >                org     (Heap_Ptr & $1FFF) + $E000
 775+ EC14             >
 775+ EC14             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 775+ EC14             >Latest_Definition defl  Heap_Ptr
 775+ EC14             >
 775+ EC14             >                // dummy db directives used to calculate length of namec
 775+ EC14 53 50 4C 41 >                db      "SPLASH"
 775+ EC18 53 48       >
 775+ EC1A             >len_NFA         defl    $ - temp_NFA
 775+ EC1A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 775+ EC14             >
 775+ EC14 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 775+ EC15 53 50 4C 41 >                db      "SPLASH"               // name string in 7-bit ascii, but
 775+ EC19 53 48       >
 775+ EC1B             >                org     $-1                 // alter last byte of Name just above to set
 775+ EC1A C8          >                db      {b $} | END_BIT     // msb as name end
 775+ EC1B             >
 775+ EC1B 0C 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 775+ EC1D             >Prev_Ptr        defl    Heap_Ptr
 775+ EC1D             >
 775+ EC1D             >mirror_Ptr      defl    $
 775+ EC1D             >
 775+ EC1D 5C 3D       >                dw      Dict_Ptr + 2        // xt
 775+ EC1F             >Heap_Ptr        defl    $ - $E000           // save current HP
 775+ EC1F             >
 775+ EC1F             >Current_HP      defl  $ - $E000             // used to set HP once!
 775+ EC1F             >
 775+ EC1F             >//              ______________________________________________________________________
 775+ EC1F             >//              Dictionary part
 775+ EC1F             >
 775+ EC1F             >                org     Dict_Ptr
 775+ 3D5A             >
 775+ 3D5A 1D 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 775+ 3D5C             >
 775+ 3D5C             >SPLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 775+ 3D5C CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 775+ 3D5F             >
 775+ 3D5F             >
 775+ 3D5F             >                endif           ; ok        // for other definitions it "points" the correct handler
 775+ 3D5F             >                // Use of "; ok" to suppress "warning[fwdref]"
 775+ 3D5F             >
 775+ 3D5F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 776+ 3D5F 3D 3D                        dw      CLS
 777+ 3D61 3D 20 02 00                  dw      LIT, Splash_Ptr
 778+ 3D65 86 29                        dw      FAR
 779+ 3D67 BA 2B 0E 2C                  dw      COUNT, TYPE
 780+ 3D6B F1 24                        dw      EXIT
 781+ 3D6D
 782+ 3D6D              //  ______________________________________________________________________
 783+ 3D6D              //
 784+ 3D6D              // video        --
 785+ 3D6D                              Colon_Def VIDEO, "VIDEO", is_normal
 785+ 3D6D             >                New_Def  VIDEO, "VIDEO", Enter_Ptr, is_normal ; ok
 785+ 3D6D             >
 785+ 3D6D             >Dict_Ptr        defl    $
 785+ 3D6D             >
 785+ 3D6D             >//              ______________________________________________________________________
 785+ 3D6D             >//              Heap part
 785+ 3D6D             >
 785+ 3D6D             >
 785+ 3D6D             >                org     (Heap_Ptr & $1FFF) + $E000
 785+ EC1F             >
 785+ EC1F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 785+ EC1F             >Latest_Definition defl  Heap_Ptr
 785+ EC1F             >
 785+ EC1F             >                // dummy db directives used to calculate length of namec
 785+ EC1F 56 49 44 45 >                db      "VIDEO"
 785+ EC23 4F          >
 785+ EC24             >len_NFA         defl    $ - temp_NFA
 785+ EC24             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 785+ EC1F             >
 785+ EC1F 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 785+ EC20 56 49 44 45 >                db      "VIDEO"               // name string in 7-bit ascii, but
 785+ EC24 4F          >
 785+ EC25             >                org     $-1                 // alter last byte of Name just above to set
 785+ EC24 CF          >                db      {b $} | END_BIT     // msb as name end
 785+ EC25             >
 785+ EC25 14 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 785+ EC27             >Prev_Ptr        defl    Heap_Ptr
 785+ EC27             >
 785+ EC27             >mirror_Ptr      defl    $
 785+ EC27             >
 785+ EC27 6F 3D       >                dw      Dict_Ptr + 2        // xt
 785+ EC29             >Heap_Ptr        defl    $ - $E000           // save current HP
 785+ EC29             >
 785+ EC29             >Current_HP      defl  $ - $E000             // used to set HP once!
 785+ EC29             >
 785+ EC29             >//              ______________________________________________________________________
 785+ EC29             >//              Dictionary part
 785+ EC29             >
 785+ EC29             >                org     Dict_Ptr
 785+ 3D6D             >
 785+ 3D6D 27 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 785+ 3D6F             >
 785+ 3D6F             >VIDEO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 785+ 3D6F CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 785+ 3D72             >
 785+ 3D72             >
 785+ 3D72             >                endif           ; ok        // for other definitions it "points" the correct handler
 785+ 3D72             >                // Use of "; ok" to suppress "warning[fwdref]"
 785+ 3D72             >
 785+ 3D72             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 786+ 3D72 35 27 C7 25                  dw      TWO, DUP, DEVICE, STORE
 786+ 3D76 94 35 3B 26
 787+ 3D7A 5C 23                        dw      SELECT
 788+ 3D7C F1 24                        dw      EXIT
 789+ 3D7E
 790+ 3D7E              //  ______________________________________________________________________
 791+ 3D7E              //
 792+ 3D7E              // autoexec     --
 793+ 3D7E              // this word is called the first time the Forth system boot to
 794+ 3D7E              // load Screen# 1. Once called it patches itself to prevent furhter runs.
 795+ 3D7E                              Colon_Def AUTOEXEC, "AUTOEXEC", is_normal
 795+ 3D7E             >                New_Def  AUTOEXEC, "AUTOEXEC", Enter_Ptr, is_normal ; ok
 795+ 3D7E             >
 795+ 3D7E             >Dict_Ptr        defl    $
 795+ 3D7E             >
 795+ 3D7E             >//              ______________________________________________________________________
 795+ 3D7E             >//              Heap part
 795+ 3D7E             >
 795+ 3D7E             >
 795+ 3D7E             >                org     (Heap_Ptr & $1FFF) + $E000
 795+ EC29             >
 795+ EC29             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 795+ EC29             >Latest_Definition defl  Heap_Ptr
 795+ EC29             >
 795+ EC29             >                // dummy db directives used to calculate length of namec
 795+ EC29 41 55 54 4F >                db      "AUTOEXEC"
 795+ EC2D 45 58 45 43 >
 795+ EC31             >len_NFA         defl    $ - temp_NFA
 795+ EC31             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 795+ EC29             >
 795+ EC29 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 795+ EC2A 41 55 54 4F >                db      "AUTOEXEC"               // name string in 7-bit ascii, but
 795+ EC2E 45 58 45 43 >
 795+ EC32             >                org     $-1                 // alter last byte of Name just above to set
 795+ EC31 C3          >                db      {b $} | END_BIT     // msb as name end
 795+ EC32             >
 795+ EC32 1F 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 795+ EC34             >Prev_Ptr        defl    Heap_Ptr
 795+ EC34             >
 795+ EC34             >mirror_Ptr      defl    $
 795+ EC34             >
 795+ EC34 80 3D       >                dw      Dict_Ptr + 2        // xt
 795+ EC36             >Heap_Ptr        defl    $ - $E000           // save current HP
 795+ EC36             >
 795+ EC36             >Current_HP      defl  $ - $E000             // used to set HP once!
 795+ EC36             >
 795+ EC36             >//              ______________________________________________________________________
 795+ EC36             >//              Dictionary part
 795+ EC36             >
 795+ EC36             >                org     Dict_Ptr
 795+ 3D7E             >
 795+ 3D7E 34 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 795+ 3D80             >
 795+ 3D80             >AUTOEXEC:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 795+ 3D80 CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 795+ 3D83             >
 795+ 3D83             >
 795+ 3D83             >                endif           ; ok        // for other definitions it "points" the correct handler
 795+ 3D83             >                // Use of "; ok" to suppress "warning[fwdref]"
 795+ 3D83             >
 795+ 3D83             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 796+ 3D83              Autoexec_Self:
 797+ 3D83 3D 20 EE 26                  dw      LIT, NOOP
 798+ 3D87 3D 20 61 32                  dw      LIT, Autoexec_Ptr
 799+ 3D8B 3B 26                        dw      STORE
 800+ 3D8D 3D 20 43 3F                  dw      LIT, Param_From_Basic
 801+ 3D91 51 2D 2E 27                  dw      PAD, ONE
 802+ 3D95 F6 23                        dw      F_OPEN
 803+ 3D97 AC 25                        dw      DROP
 804+ 3D99 3F 38                        dw      F_INCLUDE
 805+ 3D9B F1 24                        dw      EXIT
 806+ 3D9D
 807+ 3D9D
 808+ 3D9D              //              dw      LIT, 11
 809+ 3D9D              //              dw      LIT, NOOP
 810+ 3D9D              //              dw      LIT, Autoexec_Ptr
 811+ 3D9D              //              dw      STORE
 812+ 3D9D              //              dw      LOAD
 813+ 3D9D              //
 814+ 3D9D              //              dw      NEEDS_FN, ONE, F_OPEN
 815+ 3D9D              //              dw      LIT, 43, QERROR
 816+ 3D9D              //              dw      DUP, F_INCLUDE
 817+ 3D9D              //              dw      F_CLOSE, DROP
 818+ 3D9D
 819+ 3D9D              //              dw      QUIT
 820+ 3D9D              //              dw      EXIT
 821+ 3D9D
 822+ 3D9D
 823+ 3D9D              //  ______________________________________________________________________
 824+ 3D9D              //
 825+ 3D9D              // bye     --
 826+ 3D9D              //
 827+ 3D9D                              Colon_Def BYE, "BYE", is_normal
 827+ 3D9D             >                New_Def  BYE, "BYE", Enter_Ptr, is_normal ; ok
 827+ 3D9D             >
 827+ 3D9D             >Dict_Ptr        defl    $
 827+ 3D9D             >
 827+ 3D9D             >//              ______________________________________________________________________
 827+ 3D9D             >//              Heap part
 827+ 3D9D             >
 827+ 3D9D             >
 827+ 3D9D             >                org     (Heap_Ptr & $1FFF) + $E000
 827+ EC36             >
 827+ EC36             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 827+ EC36             >Latest_Definition defl  Heap_Ptr
 827+ EC36             >
 827+ EC36             >                // dummy db directives used to calculate length of namec
 827+ EC36 42 59 45    >                db      "BYE"
 827+ EC39             >len_NFA         defl    $ - temp_NFA
 827+ EC39             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 827+ EC36             >
 827+ EC36 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 827+ EC37 42 59 45    >                db      "BYE"               // name string in 7-bit ascii, but
 827+ EC3A             >                org     $-1                 // alter last byte of Name just above to set
 827+ EC39 C5          >                db      {b $} | END_BIT     // msb as name end
 827+ EC3A             >
 827+ EC3A 29 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 827+ EC3C             >Prev_Ptr        defl    Heap_Ptr
 827+ EC3C             >
 827+ EC3C             >mirror_Ptr      defl    $
 827+ EC3C             >
 827+ EC3C 9F 3D       >                dw      Dict_Ptr + 2        // xt
 827+ EC3E             >Heap_Ptr        defl    $ - $E000           // save current HP
 827+ EC3E             >
 827+ EC3E             >Current_HP      defl  $ - $E000             // used to set HP once!
 827+ EC3E             >
 827+ EC3E             >//              ______________________________________________________________________
 827+ EC3E             >//              Dictionary part
 827+ EC3E             >
 827+ EC3E             >                org     Dict_Ptr
 827+ 3D9D             >
 827+ 3D9D 3C 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 827+ 3D9F             >
 827+ 3D9F             >BYE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 827+ 3D9F CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 827+ 3DA2             >
 827+ 3DA2             >
 827+ 3DA2             >                endif           ; ok        // for other definitions it "points" the correct handler
 827+ 3DA2             >                // Use of "; ok" to suppress "warning[fwdref]"
 827+ 3DA2             >
 827+ 3DA2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 828+ 3DA2 85 37                        dw      FLUSH
 829+ 3DA4 D3 36                        dw      EMPTY_BUFFERS
 830+ 3DA6 29 3F 31 26                  dw      BLK_FH, FETCH, F_CLOSE, DROP
 830+ 3DAA 95 23 AC 25
 831+ 3DAE 27 27 6D 27                  dw      ZERO, PLUS_ORIGIN
 832+ 3DB2 F4 33                        dw      BASIC
 833+ 3DB4
 834+ 3DB4              //  ______________________________________________________________________
 835+ 3DB4              //
 836+ 3DB4              // invv     --
 837+ 3DB4              //
 838+ 3DB4              //              Colon_Def INVV, "INVV", is_normal
 839+ 3DB4              //              dw      LIT, 20, EMITC, ONE, EMITC
 840+ 3DB4              //              dw      EXIT
 841+ 3DB4
 842+ 3DB4              //  ______________________________________________________________________
 843+ 3DB4              //
 844+ 3DB4              // truv     --
 845+ 3DB4              //
 846+ 3DB4              //              Colon_Def TRUV, "TRUV", is_normal
 847+ 3DB4              //              dw      LIT, 20, EMITC, ZERO, EMITC
 848+ 3DB4              //              dw      EXIT
 849+ 3DB4
 850+ 3DB4              //  ______________________________________________________________________
 851+ 3DB4              //
 852+ 3DB4              // mark     --
 853+ 3DB4              //
 854+ 3DB4              //              Colon_Def MARK, "MARK", is_normal
 855+ 3DB4              //              dw      INVV, TYPE, TRUV
 856+ 3DB4              //              dw      EXIT
 857+ 3DB4
 858+ 3DB4              //  ______________________________________________________________________
 859+ 3DB4              //
 860+ 3DB4              // back     --
 861+ 3DB4              //
 862+ 3DB4                              Colon_Def BACK, "BACK", is_normal
 862+ 3DB4             >                New_Def  BACK, "BACK", Enter_Ptr, is_normal ; ok
 862+ 3DB4             >
 862+ 3DB4             >Dict_Ptr        defl    $
 862+ 3DB4             >
 862+ 3DB4             >//              ______________________________________________________________________
 862+ 3DB4             >//              Heap part
 862+ 3DB4             >
 862+ 3DB4             >
 862+ 3DB4             >                org     (Heap_Ptr & $1FFF) + $E000
 862+ EC3E             >
 862+ EC3E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 862+ EC3E             >Latest_Definition defl  Heap_Ptr
 862+ EC3E             >
 862+ EC3E             >                // dummy db directives used to calculate length of namec
 862+ EC3E 42 41 43 4B >                db      "BACK"
 862+ EC42             >len_NFA         defl    $ - temp_NFA
 862+ EC42             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 862+ EC3E             >
 862+ EC3E 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 862+ EC3F 42 41 43 4B >                db      "BACK"               // name string in 7-bit ascii, but
 862+ EC43             >                org     $-1                 // alter last byte of Name just above to set
 862+ EC42 CB          >                db      {b $} | END_BIT     // msb as name end
 862+ EC43             >
 862+ EC43 36 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 862+ EC45             >Prev_Ptr        defl    Heap_Ptr
 862+ EC45             >
 862+ EC45             >mirror_Ptr      defl    $
 862+ EC45             >
 862+ EC45 B6 3D       >                dw      Dict_Ptr + 2        // xt
 862+ EC47             >Heap_Ptr        defl    $ - $E000           // save current HP
 862+ EC47             >
 862+ EC47             >Current_HP      defl  $ - $E000             // used to set HP once!
 862+ EC47             >
 862+ EC47             >//              ______________________________________________________________________
 862+ EC47             >//              Dictionary part
 862+ EC47             >
 862+ EC47             >                org     Dict_Ptr
 862+ 3DB4             >
 862+ 3DB4 45 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 862+ 3DB6             >
 862+ 3DB6             >BACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 862+ 3DB6 CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 862+ 3DB9             >
 862+ 3DB9             >
 862+ 3DB9             >                endif           ; ok        // for other definitions it "points" the correct handler
 862+ 3DB9             >                // Use of "; ok" to suppress "warning[fwdref]"
 862+ 3DB9             >
 862+ 3DB9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 863+ 3DB9 4C 28 8B 28                  dw      HERE, SUBTRACT, COMMA
 863+ 3DBD 62 28
 864+ 3DBF F1 24                        dw      EXIT
 865+ 3DC1
 866+ 3DC1              //  ______________________________________________________________________
 867+ 3DC1              //
 868+ 3DC1              // if          ( -- a 2 ) \ compile-time
 869+ 3DC1              // IF ... THEN
 870+ 3DC1              // IF ... ELSE ... ENDIF
 871+ 3DC1                              Colon_Def IF, "IF", is_immediate
 871+ 3DC1             >                New_Def  IF, "IF", Enter_Ptr, is_immediate ; ok
 871+ 3DC1             >
 871+ 3DC1             >Dict_Ptr        defl    $
 871+ 3DC1             >
 871+ 3DC1             >//              ______________________________________________________________________
 871+ 3DC1             >//              Heap part
 871+ 3DC1             >
 871+ 3DC1             >
 871+ 3DC1             >                org     (Heap_Ptr & $1FFF) + $E000
 871+ EC47             >
 871+ EC47             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 871+ EC47             >Latest_Definition defl  Heap_Ptr
 871+ EC47             >
 871+ EC47             >                // dummy db directives used to calculate length of namec
 871+ EC47 49 46       >                db      "IF"
 871+ EC49             >len_NFA         defl    $ - temp_NFA
 871+ EC49             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 871+ EC47             >
 871+ EC47 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 871+ EC48 49 46       >                db      "IF"               // name string in 7-bit ascii, but
 871+ EC4A             >                org     $-1                 // alter last byte of Name just above to set
 871+ EC49 C6          >                db      {b $} | END_BIT     // msb as name end
 871+ EC4A             >
 871+ EC4A 3E 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 871+ EC4C             >Prev_Ptr        defl    Heap_Ptr
 871+ EC4C             >
 871+ EC4C             >mirror_Ptr      defl    $
 871+ EC4C             >
 871+ EC4C C3 3D       >                dw      Dict_Ptr + 2        // xt
 871+ EC4E             >Heap_Ptr        defl    $ - $E000           // save current HP
 871+ EC4E             >
 871+ EC4E             >Current_HP      defl  $ - $E000             // used to set HP once!
 871+ EC4E             >
 871+ EC4E             >//              ______________________________________________________________________
 871+ EC4E             >//              Dictionary part
 871+ EC4E             >
 871+ EC4E             >                org     Dict_Ptr
 871+ 3DC1             >
 871+ 3DC1 4C 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 871+ 3DC3             >
 871+ 3DC3             >IF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 871+ 3DC3 CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 871+ 3DC6             >
 871+ 3DC6             >
 871+ 3DC6             >                endif           ; ok        // for other definitions it "points" the correct handler
 871+ 3DC6             >                // Use of "; ok" to suppress "warning[fwdref]"
 871+ 3DC6             >
 871+ 3DC6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 872+ 3DC6 F0 2A 8F 20                  dw      COMPILE, ZBRANCH
 873+ 3DCA 4C 28 27 27                  dw      HERE, ZERO, COMMA
 873+ 3DCE 62 28
 874+ 3DD0 35 27                        dw      TWO
 875+ 3DD2 F1 24                        dw      EXIT
 876+ 3DD4
 877+ 3DD4              //  ______________________________________________________________________
 878+ 3DD4              //
 879+ 3DD4              // then        ( a 2 -- ) \ compile-time
 880+ 3DD4              //
 881+ 3DD4                              Colon_Def THEN, "THEN", is_immediate
 881+ 3DD4             >                New_Def  THEN, "THEN", Enter_Ptr, is_immediate ; ok
 881+ 3DD4             >
 881+ 3DD4             >Dict_Ptr        defl    $
 881+ 3DD4             >
 881+ 3DD4             >//              ______________________________________________________________________
 881+ 3DD4             >//              Heap part
 881+ 3DD4             >
 881+ 3DD4             >
 881+ 3DD4             >                org     (Heap_Ptr & $1FFF) + $E000
 881+ EC4E             >
 881+ EC4E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 881+ EC4E             >Latest_Definition defl  Heap_Ptr
 881+ EC4E             >
 881+ EC4E             >                // dummy db directives used to calculate length of namec
 881+ EC4E 54 48 45 4E >                db      "THEN"
 881+ EC52             >len_NFA         defl    $ - temp_NFA
 881+ EC52             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 881+ EC4E             >
 881+ EC4E C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 881+ EC4F 54 48 45 4E >                db      "THEN"               // name string in 7-bit ascii, but
 881+ EC53             >                org     $-1                 // alter last byte of Name just above to set
 881+ EC52 CE          >                db      {b $} | END_BIT     // msb as name end
 881+ EC53             >
 881+ EC53 47 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 881+ EC55             >Prev_Ptr        defl    Heap_Ptr
 881+ EC55             >
 881+ EC55             >mirror_Ptr      defl    $
 881+ EC55             >
 881+ EC55 D6 3D       >                dw      Dict_Ptr + 2        // xt
 881+ EC57             >Heap_Ptr        defl    $ - $E000           // save current HP
 881+ EC57             >
 881+ EC57             >Current_HP      defl  $ - $E000             // used to set HP once!
 881+ EC57             >
 881+ EC57             >//              ______________________________________________________________________
 881+ EC57             >//              Dictionary part
 881+ EC57             >
 881+ EC57             >                org     Dict_Ptr
 881+ 3DD4             >
 881+ 3DD4 55 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 881+ 3DD6             >
 881+ 3DD6             >THEN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 881+ 3DD6 CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 881+ 3DD9             >
 881+ 3DD9             >
 881+ 3DD9             >                endif           ; ok        // for other definitions it "points" the correct handler
 881+ 3DD9             >                // Use of "; ok" to suppress "warning[fwdref]"
 881+ 3DD9             >
 881+ 3DD9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 882+ 3DD9 95 2A                        dw      QCOMP
 883+ 3DDB 35 27 B9 2A                  dw      TWO, QPAIRS
 884+ 3DDF 4C 28 A3 25                  dw      HERE, OVER, SUBTRACT, SWAP, STORE
 884+ 3DE3 8B 28 C0 25
 884+ 3DE7 3B 26
 885+ 3DE9 F1 24                        dw      EXIT
 886+ 3DEB
 887+ 3DEB              //  ______________________________________________________________________
 888+ 3DEB              //
 889+ 3DEB              // endif       ( a 2 -- ) \ compile-time
 890+ 3DEB              //
 891+ 3DEB                              Colon_Def ENDIF, "ENDIF", is_immediate
 891+ 3DEB             >                New_Def  ENDIF, "ENDIF", Enter_Ptr, is_immediate ; ok
 891+ 3DEB             >
 891+ 3DEB             >Dict_Ptr        defl    $
 891+ 3DEB             >
 891+ 3DEB             >//              ______________________________________________________________________
 891+ 3DEB             >//              Heap part
 891+ 3DEB             >
 891+ 3DEB             >
 891+ 3DEB             >                org     (Heap_Ptr & $1FFF) + $E000
 891+ EC57             >
 891+ EC57             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 891+ EC57             >Latest_Definition defl  Heap_Ptr
 891+ EC57             >
 891+ EC57             >                // dummy db directives used to calculate length of namec
 891+ EC57 45 4E 44 49 >                db      "ENDIF"
 891+ EC5B 46          >
 891+ EC5C             >len_NFA         defl    $ - temp_NFA
 891+ EC5C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 891+ EC57             >
 891+ EC57 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 891+ EC58 45 4E 44 49 >                db      "ENDIF"               // name string in 7-bit ascii, but
 891+ EC5C 46          >
 891+ EC5D             >                org     $-1                 // alter last byte of Name just above to set
 891+ EC5C C6          >                db      {b $} | END_BIT     // msb as name end
 891+ EC5D             >
 891+ EC5D 4E 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 891+ EC5F             >Prev_Ptr        defl    Heap_Ptr
 891+ EC5F             >
 891+ EC5F             >mirror_Ptr      defl    $
 891+ EC5F             >
 891+ EC5F ED 3D       >                dw      Dict_Ptr + 2        // xt
 891+ EC61             >Heap_Ptr        defl    $ - $E000           // save current HP
 891+ EC61             >
 891+ EC61             >Current_HP      defl  $ - $E000             // used to set HP once!
 891+ EC61             >
 891+ EC61             >//              ______________________________________________________________________
 891+ EC61             >//              Dictionary part
 891+ EC61             >
 891+ EC61             >                org     Dict_Ptr
 891+ 3DEB             >
 891+ 3DEB 5F 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 891+ 3DED             >
 891+ 3DED             >ENDIF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 891+ 3DED CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 891+ 3DF0             >
 891+ 3DF0             >
 891+ 3DF0             >                endif           ; ok        // for other definitions it "points" the correct handler
 891+ 3DF0             >                // Use of "; ok" to suppress "warning[fwdref]"
 891+ 3DF0             >
 891+ 3DF0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 892+ 3DF0 D6 3D                        dw      THEN
 893+ 3DF2 F1 24                        dw      EXIT
 894+ 3DF4
 895+ 3DF4              //  ______________________________________________________________________
 896+ 3DF4              //
 897+ 3DF4              // else        ( a1 2 -- a2 2 ) \ compile-time
 898+ 3DF4              //
 899+ 3DF4                              Colon_Def ELSE, "ELSE", is_immediate
 899+ 3DF4             >                New_Def  ELSE, "ELSE", Enter_Ptr, is_immediate ; ok
 899+ 3DF4             >
 899+ 3DF4             >Dict_Ptr        defl    $
 899+ 3DF4             >
 899+ 3DF4             >//              ______________________________________________________________________
 899+ 3DF4             >//              Heap part
 899+ 3DF4             >
 899+ 3DF4             >
 899+ 3DF4             >                org     (Heap_Ptr & $1FFF) + $E000
 899+ EC61             >
 899+ EC61             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 899+ EC61             >Latest_Definition defl  Heap_Ptr
 899+ EC61             >
 899+ EC61             >                // dummy db directives used to calculate length of namec
 899+ EC61 45 4C 53 45 >                db      "ELSE"
 899+ EC65             >len_NFA         defl    $ - temp_NFA
 899+ EC65             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 899+ EC61             >
 899+ EC61 C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 899+ EC62 45 4C 53 45 >                db      "ELSE"               // name string in 7-bit ascii, but
 899+ EC66             >                org     $-1                 // alter last byte of Name just above to set
 899+ EC65 C5          >                db      {b $} | END_BIT     // msb as name end
 899+ EC66             >
 899+ EC66 57 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 899+ EC68             >Prev_Ptr        defl    Heap_Ptr
 899+ EC68             >
 899+ EC68             >mirror_Ptr      defl    $
 899+ EC68             >
 899+ EC68 F6 3D       >                dw      Dict_Ptr + 2        // xt
 899+ EC6A             >Heap_Ptr        defl    $ - $E000           // save current HP
 899+ EC6A             >
 899+ EC6A             >Current_HP      defl  $ - $E000             // used to set HP once!
 899+ EC6A             >
 899+ EC6A             >//              ______________________________________________________________________
 899+ EC6A             >//              Dictionary part
 899+ EC6A             >
 899+ EC6A             >                org     Dict_Ptr
 899+ 3DF4             >
 899+ 3DF4 68 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 899+ 3DF6             >
 899+ 3DF6             >ELSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 899+ 3DF6 CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 899+ 3DF9             >
 899+ 3DF9             >
 899+ 3DF9             >                endif           ; ok        // for other definitions it "points" the correct handler
 899+ 3DF9             >                // Use of "; ok" to suppress "warning[fwdref]"
 899+ 3DF9             >
 899+ 3DF9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 900+ 3DF9 95 2A                        dw      QCOMP
 901+ 3DFB 35 27 B9 2A                  dw      TWO, QPAIRS
 902+ 3DFF F0 2A 82 20                  dw      COMPILE, BRANCH
 903+ 3E03 4C 28 27 27                  dw      HERE, ZERO, COMMA
 903+ 3E07 62 28
 904+ 3E09 C0 25 35 27                  dw      SWAP, TWO, THEN
 904+ 3E0D D6 3D
 905+ 3E0F 35 27                        dw      TWO
 906+ 3E11 F1 24                        dw      EXIT
 907+ 3E13
 908+ 3E13              //  ______________________________________________________________________
 909+ 3E13              //
 910+ 3E13              // begin        ( -- a 1 ) \ compile-time
 911+ 3E13              // BEGIN ... AGAIN
 912+ 3E13              // BEGIN ... f UNTIL
 913+ 3E13              // BEGIN ... f WHILE ... REPEAT
 914+ 3E13                              Colon_Def BEGIN, "BEGIN", is_immediate
 914+ 3E13             >                New_Def  BEGIN, "BEGIN", Enter_Ptr, is_immediate ; ok
 914+ 3E13             >
 914+ 3E13             >Dict_Ptr        defl    $
 914+ 3E13             >
 914+ 3E13             >//              ______________________________________________________________________
 914+ 3E13             >//              Heap part
 914+ 3E13             >
 914+ 3E13             >
 914+ 3E13             >                org     (Heap_Ptr & $1FFF) + $E000
 914+ EC6A             >
 914+ EC6A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 914+ EC6A             >Latest_Definition defl  Heap_Ptr
 914+ EC6A             >
 914+ EC6A             >                // dummy db directives used to calculate length of namec
 914+ EC6A 42 45 47 49 >                db      "BEGIN"
 914+ EC6E 4E          >
 914+ EC6F             >len_NFA         defl    $ - temp_NFA
 914+ EC6F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 914+ EC6A             >
 914+ EC6A C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 914+ EC6B 42 45 47 49 >                db      "BEGIN"               // name string in 7-bit ascii, but
 914+ EC6F 4E          >
 914+ EC70             >                org     $-1                 // alter last byte of Name just above to set
 914+ EC6F CE          >                db      {b $} | END_BIT     // msb as name end
 914+ EC70             >
 914+ EC70 61 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 914+ EC72             >Prev_Ptr        defl    Heap_Ptr
 914+ EC72             >
 914+ EC72             >mirror_Ptr      defl    $
 914+ EC72             >
 914+ EC72 15 3E       >                dw      Dict_Ptr + 2        // xt
 914+ EC74             >Heap_Ptr        defl    $ - $E000           // save current HP
 914+ EC74             >
 914+ EC74             >Current_HP      defl  $ - $E000             // used to set HP once!
 914+ EC74             >
 914+ EC74             >//              ______________________________________________________________________
 914+ EC74             >//              Dictionary part
 914+ EC74             >
 914+ EC74             >                org     Dict_Ptr
 914+ 3E13             >
 914+ 3E13 72 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 914+ 3E15             >
 914+ 3E15             >BEGIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 914+ 3E15 CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 914+ 3E18             >
 914+ 3E18             >
 914+ 3E18             >                endif           ; ok        // for other definitions it "points" the correct handler
 914+ 3E18             >                // Use of "; ok" to suppress "warning[fwdref]"
 914+ 3E18             >
 914+ 3E18             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 915+ 3E18 95 2A                        dw      QCOMP
 916+ 3E1A 4C 28                        dw      HERE
 917+ 3E1C 35 27                        dw      TWO
 918+ 3E1E F1 24                        dw      EXIT
 919+ 3E20
 920+ 3E20              //  ______________________________________________________________________
 921+ 3E20              //
 922+ 3E20              // again        ( a 1 -- ) \ compile-time
 923+ 3E20                              Colon_Def AGAIN, "AGAIN", is_immediate
 923+ 3E20             >                New_Def  AGAIN, "AGAIN", Enter_Ptr, is_immediate ; ok
 923+ 3E20             >
 923+ 3E20             >Dict_Ptr        defl    $
 923+ 3E20             >
 923+ 3E20             >//              ______________________________________________________________________
 923+ 3E20             >//              Heap part
 923+ 3E20             >
 923+ 3E20             >
 923+ 3E20             >                org     (Heap_Ptr & $1FFF) + $E000
 923+ EC74             >
 923+ EC74             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 923+ EC74             >Latest_Definition defl  Heap_Ptr
 923+ EC74             >
 923+ EC74             >                // dummy db directives used to calculate length of namec
 923+ EC74 41 47 41 49 >                db      "AGAIN"
 923+ EC78 4E          >
 923+ EC79             >len_NFA         defl    $ - temp_NFA
 923+ EC79             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 923+ EC74             >
 923+ EC74 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 923+ EC75 41 47 41 49 >                db      "AGAIN"               // name string in 7-bit ascii, but
 923+ EC79 4E          >
 923+ EC7A             >                org     $-1                 // alter last byte of Name just above to set
 923+ EC79 CE          >                db      {b $} | END_BIT     // msb as name end
 923+ EC7A             >
 923+ EC7A 6A 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 923+ EC7C             >Prev_Ptr        defl    Heap_Ptr
 923+ EC7C             >
 923+ EC7C             >mirror_Ptr      defl    $
 923+ EC7C             >
 923+ EC7C 22 3E       >                dw      Dict_Ptr + 2        // xt
 923+ EC7E             >Heap_Ptr        defl    $ - $E000           // save current HP
 923+ EC7E             >
 923+ EC7E             >Current_HP      defl  $ - $E000             // used to set HP once!
 923+ EC7E             >
 923+ EC7E             >//              ______________________________________________________________________
 923+ EC7E             >//              Dictionary part
 923+ EC7E             >
 923+ EC7E             >                org     Dict_Ptr
 923+ 3E20             >
 923+ 3E20 7C 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 923+ 3E22             >
 923+ 3E22             >AGAIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 923+ 3E22 CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 923+ 3E25             >
 923+ 3E25             >
 923+ 3E25             >                endif           ; ok        // for other definitions it "points" the correct handler
 923+ 3E25             >                // Use of "; ok" to suppress "warning[fwdref]"
 923+ 3E25             >
 923+ 3E25             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 924+ 3E25 95 2A                        dw      QCOMP
 925+ 3E27 35 27 B9 2A                  dw      TWO, QPAIRS
 926+ 3E2B F0 2A 82 20                  dw      COMPILE, BRANCH
 927+ 3E2F B6 3D                        dw      BACK
 928+ 3E31 F1 24                        dw      EXIT
 929+ 3E33
 930+ 3E33              //  ______________________________________________________________________
 931+ 3E33              //
 932+ 3E33              // until        ( a 1 -- ) \ compile-time
 933+ 3E33                              Colon_Def UNTIL, "UNTIL", is_immediate
 933+ 3E33             >                New_Def  UNTIL, "UNTIL", Enter_Ptr, is_immediate ; ok
 933+ 3E33             >
 933+ 3E33             >Dict_Ptr        defl    $
 933+ 3E33             >
 933+ 3E33             >//              ______________________________________________________________________
 933+ 3E33             >//              Heap part
 933+ 3E33             >
 933+ 3E33             >
 933+ 3E33             >                org     (Heap_Ptr & $1FFF) + $E000
 933+ EC7E             >
 933+ EC7E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 933+ EC7E             >Latest_Definition defl  Heap_Ptr
 933+ EC7E             >
 933+ EC7E             >                // dummy db directives used to calculate length of namec
 933+ EC7E 55 4E 54 49 >                db      "UNTIL"
 933+ EC82 4C          >
 933+ EC83             >len_NFA         defl    $ - temp_NFA
 933+ EC83             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 933+ EC7E             >
 933+ EC7E C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 933+ EC7F 55 4E 54 49 >                db      "UNTIL"               // name string in 7-bit ascii, but
 933+ EC83 4C          >
 933+ EC84             >                org     $-1                 // alter last byte of Name just above to set
 933+ EC83 CC          >                db      {b $} | END_BIT     // msb as name end
 933+ EC84             >
 933+ EC84 74 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 933+ EC86             >Prev_Ptr        defl    Heap_Ptr
 933+ EC86             >
 933+ EC86             >mirror_Ptr      defl    $
 933+ EC86             >
 933+ EC86 35 3E       >                dw      Dict_Ptr + 2        // xt
 933+ EC88             >Heap_Ptr        defl    $ - $E000           // save current HP
 933+ EC88             >
 933+ EC88             >Current_HP      defl  $ - $E000             // used to set HP once!
 933+ EC88             >
 933+ EC88             >//              ______________________________________________________________________
 933+ EC88             >//              Dictionary part
 933+ EC88             >
 933+ EC88             >                org     Dict_Ptr
 933+ 3E33             >
 933+ 3E33 86 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 933+ 3E35             >
 933+ 3E35             >UNTIL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 933+ 3E35 CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 933+ 3E38             >
 933+ 3E38             >
 933+ 3E38             >                endif           ; ok        // for other definitions it "points" the correct handler
 933+ 3E38             >                // Use of "; ok" to suppress "warning[fwdref]"
 933+ 3E38             >
 933+ 3E38             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 934+ 3E38 95 2A                        dw      QCOMP
 935+ 3E3A 35 27 B9 2A                  dw      TWO, QPAIRS
 936+ 3E3E F0 2A 8F 20                  dw      COMPILE, ZBRANCH
 937+ 3E42 B6 3D                        dw      BACK
 938+ 3E44 F1 24                        dw      EXIT
 939+ 3E46
 940+ 3E46              //  ______________________________________________________________________
 941+ 3E46              //
 942+ 3E46              // end          ( a 1 -- ) \ compile-time
 943+ 3E46                              Colon_Def END, "END", is_immediate
 943+ 3E46             >                New_Def  END, "END", Enter_Ptr, is_immediate ; ok
 943+ 3E46             >
 943+ 3E46             >Dict_Ptr        defl    $
 943+ 3E46             >
 943+ 3E46             >//              ______________________________________________________________________
 943+ 3E46             >//              Heap part
 943+ 3E46             >
 943+ 3E46             >
 943+ 3E46             >                org     (Heap_Ptr & $1FFF) + $E000
 943+ EC88             >
 943+ EC88             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 943+ EC88             >Latest_Definition defl  Heap_Ptr
 943+ EC88             >
 943+ EC88             >                // dummy db directives used to calculate length of namec
 943+ EC88 45 4E 44    >                db      "END"
 943+ EC8B             >len_NFA         defl    $ - temp_NFA
 943+ EC8B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 943+ EC88             >
 943+ EC88 C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 943+ EC89 45 4E 44    >                db      "END"               // name string in 7-bit ascii, but
 943+ EC8C             >                org     $-1                 // alter last byte of Name just above to set
 943+ EC8B C4          >                db      {b $} | END_BIT     // msb as name end
 943+ EC8C             >
 943+ EC8C 7E 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 943+ EC8E             >Prev_Ptr        defl    Heap_Ptr
 943+ EC8E             >
 943+ EC8E             >mirror_Ptr      defl    $
 943+ EC8E             >
 943+ EC8E 48 3E       >                dw      Dict_Ptr + 2        // xt
 943+ EC90             >Heap_Ptr        defl    $ - $E000           // save current HP
 943+ EC90             >
 943+ EC90             >Current_HP      defl  $ - $E000             // used to set HP once!
 943+ EC90             >
 943+ EC90             >//              ______________________________________________________________________
 943+ EC90             >//              Dictionary part
 943+ EC90             >
 943+ EC90             >                org     Dict_Ptr
 943+ 3E46             >
 943+ 3E46 8E 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 943+ 3E48             >
 943+ 3E48             >END:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 943+ 3E48 CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 943+ 3E4B             >
 943+ 3E4B             >
 943+ 3E4B             >                endif           ; ok        // for other definitions it "points" the correct handler
 943+ 3E4B             >                // Use of "; ok" to suppress "warning[fwdref]"
 943+ 3E4B             >
 943+ 3E4B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 944+ 3E4B 35 3E                        dw      UNTIL
 945+ 3E4D F1 24                        dw      EXIT
 946+ 3E4F
 947+ 3E4F              //  ______________________________________________________________________
 948+ 3E4F              //
 949+ 3E4F              // while        ( a1 1 -- a1 1 a2 4 ) \ compile-time
 950+ 3E4F                              Colon_Def WHILE, "WHILE", is_immediate
 950+ 3E4F             >                New_Def  WHILE, "WHILE", Enter_Ptr, is_immediate ; ok
 950+ 3E4F             >
 950+ 3E4F             >Dict_Ptr        defl    $
 950+ 3E4F             >
 950+ 3E4F             >//              ______________________________________________________________________
 950+ 3E4F             >//              Heap part
 950+ 3E4F             >
 950+ 3E4F             >
 950+ 3E4F             >                org     (Heap_Ptr & $1FFF) + $E000
 950+ EC90             >
 950+ EC90             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 950+ EC90             >Latest_Definition defl  Heap_Ptr
 950+ EC90             >
 950+ EC90             >                // dummy db directives used to calculate length of namec
 950+ EC90 57 48 49 4C >                db      "WHILE"
 950+ EC94 45          >
 950+ EC95             >len_NFA         defl    $ - temp_NFA
 950+ EC95             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 950+ EC90             >
 950+ EC90 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 950+ EC91 57 48 49 4C >                db      "WHILE"               // name string in 7-bit ascii, but
 950+ EC95 45          >
 950+ EC96             >                org     $-1                 // alter last byte of Name just above to set
 950+ EC95 C5          >                db      {b $} | END_BIT     // msb as name end
 950+ EC96             >
 950+ EC96 88 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 950+ EC98             >Prev_Ptr        defl    Heap_Ptr
 950+ EC98             >
 950+ EC98             >mirror_Ptr      defl    $
 950+ EC98             >
 950+ EC98 51 3E       >                dw      Dict_Ptr + 2        // xt
 950+ EC9A             >Heap_Ptr        defl    $ - $E000           // save current HP
 950+ EC9A             >
 950+ EC9A             >Current_HP      defl  $ - $E000             // used to set HP once!
 950+ EC9A             >
 950+ EC9A             >//              ______________________________________________________________________
 950+ EC9A             >//              Dictionary part
 950+ EC9A             >
 950+ EC9A             >                org     Dict_Ptr
 950+ 3E4F             >
 950+ 3E4F 98 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 950+ 3E51             >
 950+ 3E51             >WHILE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 950+ 3E51 CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 950+ 3E54             >
 950+ 3E54             >
 950+ 3E54             >                endif           ; ok        // for other definitions it "points" the correct handler
 950+ 3E54             >                // Use of "; ok" to suppress "warning[fwdref]"
 950+ 3E54             >
 950+ 3E54             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 951+ 3E54 C3 3D                        dw      IF
 952+ 3E56              //              dw      TWO_PLUS // ( that is 4 )
 953+ 3E56 02 26                        dw      TWO_SWAP
 954+ 3E58 F1 24                        dw      EXIT
 955+ 3E5A
 956+ 3E5A              //  ______________________________________________________________________
 957+ 3E5A              //
 958+ 3E5A              // repeat       ( a1 1 a2 4 -- ) \ compile-time
 959+ 3E5A                              Colon_Def REPEAT, "REPEAT", is_immediate
 959+ 3E5A             >                New_Def  REPEAT, "REPEAT", Enter_Ptr, is_immediate ; ok
 959+ 3E5A             >
 959+ 3E5A             >Dict_Ptr        defl    $
 959+ 3E5A             >
 959+ 3E5A             >//              ______________________________________________________________________
 959+ 3E5A             >//              Heap part
 959+ 3E5A             >
 959+ 3E5A             >
 959+ 3E5A             >                org     (Heap_Ptr & $1FFF) + $E000
 959+ EC9A             >
 959+ EC9A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 959+ EC9A             >Latest_Definition defl  Heap_Ptr
 959+ EC9A             >
 959+ EC9A             >                // dummy db directives used to calculate length of namec
 959+ EC9A 52 45 50 45 >                db      "REPEAT"
 959+ EC9E 41 54       >
 959+ ECA0             >len_NFA         defl    $ - temp_NFA
 959+ ECA0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 959+ EC9A             >
 959+ EC9A C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 959+ EC9B 52 45 50 45 >                db      "REPEAT"               // name string in 7-bit ascii, but
 959+ EC9F 41 54       >
 959+ ECA1             >                org     $-1                 // alter last byte of Name just above to set
 959+ ECA0 D4          >                db      {b $} | END_BIT     // msb as name end
 959+ ECA1             >
 959+ ECA1 90 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 959+ ECA3             >Prev_Ptr        defl    Heap_Ptr
 959+ ECA3             >
 959+ ECA3             >mirror_Ptr      defl    $
 959+ ECA3             >
 959+ ECA3 5C 3E       >                dw      Dict_Ptr + 2        // xt
 959+ ECA5             >Heap_Ptr        defl    $ - $E000           // save current HP
 959+ ECA5             >
 959+ ECA5             >Current_HP      defl  $ - $E000             // used to set HP once!
 959+ ECA5             >
 959+ ECA5             >//              ______________________________________________________________________
 959+ ECA5             >//              Dictionary part
 959+ ECA5             >
 959+ ECA5             >                org     Dict_Ptr
 959+ 3E5A             >
 959+ 3E5A A3 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 959+ 3E5C             >
 959+ 3E5C             >REPEAT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 959+ 3E5C CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 959+ 3E5F             >
 959+ 3E5F             >
 959+ 3E5F             >                endif           ; ok        // for other definitions it "points" the correct handler
 959+ 3E5F             >                // Use of "; ok" to suppress "warning[fwdref]"
 959+ 3E5F             >
 959+ 3E5F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 960+ 3E5F 22 3E                        dw      AGAIN
 961+ 3E61              //              dw      TWO_MINUS
 962+ 3E61 D6 3D                        dw      THEN
 963+ 3E63 F1 24                        dw      EXIT
 964+ 3E65
 965+ 3E65              //  ______________________________________________________________________
 966+ 3E65              //
 967+ 3E65              // ?do-
 968+ 3E65              // special version of "BACK" used by ?DO and LOOP
 969+ 3E65                              Colon_Def C_DO_BACK, "?DO-", is_normal
 969+ 3E65             >                New_Def  C_DO_BACK, "?DO-", Enter_Ptr, is_normal ; ok
 969+ 3E65             >
 969+ 3E65             >Dict_Ptr        defl    $
 969+ 3E65             >
 969+ 3E65             >//              ______________________________________________________________________
 969+ 3E65             >//              Heap part
 969+ 3E65             >
 969+ 3E65             >
 969+ 3E65             >                org     (Heap_Ptr & $1FFF) + $E000
 969+ ECA5             >
 969+ ECA5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 969+ ECA5             >Latest_Definition defl  Heap_Ptr
 969+ ECA5             >
 969+ ECA5             >                // dummy db directives used to calculate length of namec
 969+ ECA5 3F 44 4F 2D >                db      "?DO-"
 969+ ECA9             >len_NFA         defl    $ - temp_NFA
 969+ ECA9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 969+ ECA5             >
 969+ ECA5 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 969+ ECA6 3F 44 4F 2D >                db      "?DO-"               // name string in 7-bit ascii, but
 969+ ECAA             >                org     $-1                 // alter last byte of Name just above to set
 969+ ECA9 AD          >                db      {b $} | END_BIT     // msb as name end
 969+ ECAA             >
 969+ ECAA 9A 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 969+ ECAC             >Prev_Ptr        defl    Heap_Ptr
 969+ ECAC             >
 969+ ECAC             >mirror_Ptr      defl    $
 969+ ECAC             >
 969+ ECAC 67 3E       >                dw      Dict_Ptr + 2        // xt
 969+ ECAE             >Heap_Ptr        defl    $ - $E000           // save current HP
 969+ ECAE             >
 969+ ECAE             >Current_HP      defl  $ - $E000             // used to set HP once!
 969+ ECAE             >
 969+ ECAE             >//              ______________________________________________________________________
 969+ ECAE             >//              Dictionary part
 969+ ECAE             >
 969+ ECAE             >                org     Dict_Ptr
 969+ 3E65             >
 969+ 3E65 AC 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 969+ 3E67             >
 969+ 3E67             >C_DO_BACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 969+ 3E67 CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 969+ 3E6A             >
 969+ 3E6A             >
 969+ 3E6A             >                endif           ; ok        // for other definitions it "points" the correct handler
 969+ 3E6A             >                // Use of "; ok" to suppress "warning[fwdref]"
 969+ 3E6A             >
 969+ 3E6A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 970+ 3E6A B6 3D                        dw      BACK
 971+ 3E6C              CDoBack_Begin:
 972+ 3E6C D8 24 0A 28                  dw      SPFETCH, CSP, FETCH, SUBTRACT
 972+ 3E70 31 26 8B 28
 973+ 3E74 8F 20                        dw      ZBRANCH
 974+ 3E76 0A 00                        dw      CDoBack_While - $
 975+ 3E78 6A 25 D6 3D                  dw          TWO_PLUS, THEN
 976+ 3E7C 82 20                        dw      BRANCH
 977+ 3E7E EE FF                        dw      CDoBack_Begin - $
 978+ 3E80              CDoBack_While:
 979+ 3E80 C8 2A 0A 28                  dw      QCSP, CSP, STORE
 979+ 3E84 3B 26
 980+ 3E86 F1 24                        dw      EXIT
 981+ 3E88
 982+ 3E88              //  ______________________________________________________________________
 983+ 3E88              //
 984+ 3E88              // do
 985+ 3E88              // DO  ... LOOP
 986+ 3E88              // DO  ... n +LOOP
 987+ 3E88              // ?DO ... LOOP
 988+ 3E88              // ?DO ... n +LOOP
 989+ 3E88                              Colon_Def DO, "DO", is_immediate
 989+ 3E88             >                New_Def  DO, "DO", Enter_Ptr, is_immediate ; ok
 989+ 3E88             >
 989+ 3E88             >Dict_Ptr        defl    $
 989+ 3E88             >
 989+ 3E88             >//              ______________________________________________________________________
 989+ 3E88             >//              Heap part
 989+ 3E88             >
 989+ 3E88             >
 989+ 3E88             >                org     (Heap_Ptr & $1FFF) + $E000
 989+ ECAE             >
 989+ ECAE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 989+ ECAE             >Latest_Definition defl  Heap_Ptr
 989+ ECAE             >
 989+ ECAE             >                // dummy db directives used to calculate length of namec
 989+ ECAE 44 4F       >                db      "DO"
 989+ ECB0             >len_NFA         defl    $ - temp_NFA
 989+ ECB0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 989+ ECAE             >
 989+ ECAE C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 989+ ECAF 44 4F       >                db      "DO"               // name string in 7-bit ascii, but
 989+ ECB1             >                org     $-1                 // alter last byte of Name just above to set
 989+ ECB0 CF          >                db      {b $} | END_BIT     // msb as name end
 989+ ECB1             >
 989+ ECB1 A5 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 989+ ECB3             >Prev_Ptr        defl    Heap_Ptr
 989+ ECB3             >
 989+ ECB3             >mirror_Ptr      defl    $
 989+ ECB3             >
 989+ ECB3 8A 3E       >                dw      Dict_Ptr + 2        // xt
 989+ ECB5             >Heap_Ptr        defl    $ - $E000           // save current HP
 989+ ECB5             >
 989+ ECB5             >Current_HP      defl  $ - $E000             // used to set HP once!
 989+ ECB5             >
 989+ ECB5             >//              ______________________________________________________________________
 989+ ECB5             >//              Dictionary part
 989+ ECB5             >
 989+ ECB5             >                org     Dict_Ptr
 989+ 3E88             >
 989+ 3E88 B3 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 989+ 3E8A             >
 989+ 3E8A             >DO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 989+ 3E8A CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 989+ 3E8D             >
 989+ 3E8D             >
 989+ 3E8D             >                endif           ; ok        // for other definitions it "points" the correct handler
 989+ 3E8D             >                // Use of "; ok" to suppress "warning[fwdref]"
 989+ 3E8D             >
 989+ 3E8D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 990+ 3E8D F0 2A CC 20                  dw      COMPILE, C_DO
 991+ 3E91 0A 28 31 26                  dw      CSP, FETCH, STORE_CSP
 991+ 3E95 73 2A
 992+ 3E97 4C 28 3C 27                  dw      HERE, THREE
 993+ 3E9B F1 24                        dw      EXIT
 994+ 3E9D
 995+ 3E9D              //  ______________________________________________________________________
 996+ 3E9D              //
 997+ 3E9D              // loop
 998+ 3E9D                              Colon_Def LOOP, "LOOP", is_immediate
 998+ 3E9D             >                New_Def  LOOP, "LOOP", Enter_Ptr, is_immediate ; ok
 998+ 3E9D             >
 998+ 3E9D             >Dict_Ptr        defl    $
 998+ 3E9D             >
 998+ 3E9D             >//              ______________________________________________________________________
 998+ 3E9D             >//              Heap part
 998+ 3E9D             >
 998+ 3E9D             >
 998+ 3E9D             >                org     (Heap_Ptr & $1FFF) + $E000
 998+ ECB5             >
 998+ ECB5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 998+ ECB5             >Latest_Definition defl  Heap_Ptr
 998+ ECB5             >
 998+ ECB5             >                // dummy db directives used to calculate length of namec
 998+ ECB5 4C 4F 4F 50 >                db      "LOOP"
 998+ ECB9             >len_NFA         defl    $ - temp_NFA
 998+ ECB9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 998+ ECB5             >
 998+ ECB5 C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 998+ ECB6 4C 4F 4F 50 >                db      "LOOP"               // name string in 7-bit ascii, but
 998+ ECBA             >                org     $-1                 // alter last byte of Name just above to set
 998+ ECB9 D0          >                db      {b $} | END_BIT     // msb as name end
 998+ ECBA             >
 998+ ECBA AE 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 998+ ECBC             >Prev_Ptr        defl    Heap_Ptr
 998+ ECBC             >
 998+ ECBC             >mirror_Ptr      defl    $
 998+ ECBC             >
 998+ ECBC 9F 3E       >                dw      Dict_Ptr + 2        // xt
 998+ ECBE             >Heap_Ptr        defl    $ - $E000           // save current HP
 998+ ECBE             >
 998+ ECBE             >Current_HP      defl  $ - $E000             // used to set HP once!
 998+ ECBE             >
 998+ ECBE             >//              ______________________________________________________________________
 998+ ECBE             >//              Dictionary part
 998+ ECBE             >
 998+ ECBE             >                org     Dict_Ptr
 998+ 3E9D             >
 998+ 3E9D BC 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 998+ 3E9F             >
 998+ 3E9F             >LOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 998+ 3E9F CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 998+ 3EA2             >
 998+ 3EA2             >
 998+ 3EA2             >                endif           ; ok        // for other definitions it "points" the correct handler
 998+ 3EA2             >                // Use of "; ok" to suppress "warning[fwdref]"
 998+ 3EA2             >
 998+ 3EA2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 999+ 3EA2 3C 27 B9 2A                  dw      THREE, QPAIRS
1000+ 3EA6 F0 2A 7A 20                  dw      COMPILE, C_LOOP
1001+ 3EAA 67 3E                        dw      C_DO_BACK
1002+ 3EAC F1 24                        dw      EXIT
1003+ 3EAE
1004+ 3EAE              //  ______________________________________________________________________
1005+ 3EAE              //
1006+ 3EAE              // +loop
1007+ 3EAE                              Colon_Def PLOOP, "+LOOP", is_immediate
1007+ 3EAE             >                New_Def  PLOOP, "+LOOP", Enter_Ptr, is_immediate ; ok
1007+ 3EAE             >
1007+ 3EAE             >Dict_Ptr        defl    $
1007+ 3EAE             >
1007+ 3EAE             >//              ______________________________________________________________________
1007+ 3EAE             >//              Heap part
1007+ 3EAE             >
1007+ 3EAE             >
1007+ 3EAE             >                org     (Heap_Ptr & $1FFF) + $E000
1007+ ECBE             >
1007+ ECBE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1007+ ECBE             >Latest_Definition defl  Heap_Ptr
1007+ ECBE             >
1007+ ECBE             >                // dummy db directives used to calculate length of namec
1007+ ECBE 2B 4C 4F 4F >                db      "+LOOP"
1007+ ECC2 50          >
1007+ ECC3             >len_NFA         defl    $ - temp_NFA
1007+ ECC3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1007+ ECBE             >
1007+ ECBE C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1007+ ECBF 2B 4C 4F 4F >                db      "+LOOP"               // name string in 7-bit ascii, but
1007+ ECC3 50          >
1007+ ECC4             >                org     $-1                 // alter last byte of Name just above to set
1007+ ECC3 D0          >                db      {b $} | END_BIT     // msb as name end
1007+ ECC4             >
1007+ ECC4 B5 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1007+ ECC6             >Prev_Ptr        defl    Heap_Ptr
1007+ ECC6             >
1007+ ECC6             >mirror_Ptr      defl    $
1007+ ECC6             >
1007+ ECC6 B0 3E       >                dw      Dict_Ptr + 2        // xt
1007+ ECC8             >Heap_Ptr        defl    $ - $E000           // save current HP
1007+ ECC8             >
1007+ ECC8             >Current_HP      defl  $ - $E000             // used to set HP once!
1007+ ECC8             >
1007+ ECC8             >//              ______________________________________________________________________
1007+ ECC8             >//              Dictionary part
1007+ ECC8             >
1007+ ECC8             >                org     Dict_Ptr
1007+ 3EAE             >
1007+ 3EAE C6 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
1007+ 3EB0             >
1007+ 3EB0             >PLOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1007+ 3EB0 CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1007+ 3EB3             >
1007+ 3EB3             >
1007+ 3EB3             >                endif           ; ok        // for other definitions it "points" the correct handler
1007+ 3EB3             >                // Use of "; ok" to suppress "warning[fwdref]"
1007+ 3EB3             >
1007+ 3EB3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1008+ 3EB3 3C 27 B9 2A                  dw      THREE, QPAIRS
1009+ 3EB7 F0 2A 4B 20                  dw      COMPILE, C_PLOOP
1010+ 3EBB 67 3E                        dw      C_DO_BACK
1011+ 3EBD F1 24                        dw      EXIT
1012+ 3EBF
1013+ 3EBF              //  ______________________________________________________________________
1014+ 3EBF              //
1015+ 3EBF              // ?do
1016+ 3EBF                              Colon_Def QDO, "?DO", is_immediate
1016+ 3EBF             >                New_Def  QDO, "?DO", Enter_Ptr, is_immediate ; ok
1016+ 3EBF             >
1016+ 3EBF             >Dict_Ptr        defl    $
1016+ 3EBF             >
1016+ 3EBF             >//              ______________________________________________________________________
1016+ 3EBF             >//              Heap part
1016+ 3EBF             >
1016+ 3EBF             >
1016+ 3EBF             >                org     (Heap_Ptr & $1FFF) + $E000
1016+ ECC8             >
1016+ ECC8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1016+ ECC8             >Latest_Definition defl  Heap_Ptr
1016+ ECC8             >
1016+ ECC8             >                // dummy db directives used to calculate length of namec
1016+ ECC8 3F 44 4F    >                db      "?DO"
1016+ ECCB             >len_NFA         defl    $ - temp_NFA
1016+ ECCB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1016+ ECC8             >
1016+ ECC8 C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1016+ ECC9 3F 44 4F    >                db      "?DO"               // name string in 7-bit ascii, but
1016+ ECCC             >                org     $-1                 // alter last byte of Name just above to set
1016+ ECCB CF          >                db      {b $} | END_BIT     // msb as name end
1016+ ECCC             >
1016+ ECCC BE 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1016+ ECCE             >Prev_Ptr        defl    Heap_Ptr
1016+ ECCE             >
1016+ ECCE             >mirror_Ptr      defl    $
1016+ ECCE             >
1016+ ECCE C1 3E       >                dw      Dict_Ptr + 2        // xt
1016+ ECD0             >Heap_Ptr        defl    $ - $E000           // save current HP
1016+ ECD0             >
1016+ ECD0             >Current_HP      defl  $ - $E000             // used to set HP once!
1016+ ECD0             >
1016+ ECD0             >//              ______________________________________________________________________
1016+ ECD0             >//              Dictionary part
1016+ ECD0             >
1016+ ECD0             >                org     Dict_Ptr
1016+ 3EBF             >
1016+ 3EBF CE 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
1016+ 3EC1             >
1016+ 3EC1             >QDO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1016+ 3EC1 CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1016+ 3EC4             >
1016+ 3EC4             >
1016+ 3EC4             >                endif           ; ok        // for other definitions it "points" the correct handler
1016+ 3EC4             >                // Use of "; ok" to suppress "warning[fwdref]"
1016+ 3EC4             >
1016+ 3EC4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1017+ 3EC4 F0 2A A4 20                  dw      COMPILE, C_Q_DO
1018+ 3EC8 0A 28 31 26                  dw      CSP, FETCH, STORE_CSP
1018+ 3ECC 73 2A
1019+ 3ECE 4C 28 27 27                  dw      HERE, ZERO, COMMA, ZERO
1019+ 3ED2 62 28 27 27
1020+ 3ED6 4C 28 3C 27                  dw      HERE, THREE
1021+ 3EDA F1 24                        dw      EXIT
1022+ 3EDC
1023+ 3EDC              //  ______________________________________________________________________
1024+ 3EDC              //
1025+ 3EDC              // \
1026+ 3EDC                              Colon_Def BACKSLASH, "\\", is_immediate  // this is a single back-slash
1026+ 3EDC             >                New_Def  BACKSLASH, "\\", Enter_Ptr, is_immediate ; ok
1026+ 3EDC             >
1026+ 3EDC             >Dict_Ptr        defl    $
1026+ 3EDC             >
1026+ 3EDC             >//              ______________________________________________________________________
1026+ 3EDC             >//              Heap part
1026+ 3EDC             >
1026+ 3EDC             >
1026+ 3EDC             >                org     (Heap_Ptr & $1FFF) + $E000
1026+ ECD0             >
1026+ ECD0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1026+ ECD0             >Latest_Definition defl  Heap_Ptr
1026+ ECD0             >
1026+ ECD0             >                // dummy db directives used to calculate length of namec
1026+ ECD0 5C          >                db      "\\"
1026+ ECD1             >len_NFA         defl    $ - temp_NFA
1026+ ECD1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1026+ ECD0             >
1026+ ECD0 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1026+ ECD1 5C          >                db      "\\"               // name string in 7-bit ascii, but
1026+ ECD2             >                org     $-1                 // alter last byte of Name just above to set
1026+ ECD1 DC          >                db      {b $} | END_BIT     // msb as name end
1026+ ECD2             >
1026+ ECD2 C8 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1026+ ECD4             >Prev_Ptr        defl    Heap_Ptr
1026+ ECD4             >
1026+ ECD4             >mirror_Ptr      defl    $
1026+ ECD4             >
1026+ ECD4 DE 3E       >                dw      Dict_Ptr + 2        // xt
1026+ ECD6             >Heap_Ptr        defl    $ - $E000           // save current HP
1026+ ECD6             >
1026+ ECD6             >Current_HP      defl  $ - $E000             // used to set HP once!
1026+ ECD6             >
1026+ ECD6             >//              ______________________________________________________________________
1026+ ECD6             >//              Dictionary part
1026+ ECD6             >
1026+ ECD6             >                org     Dict_Ptr
1026+ 3EDC             >
1026+ 3EDC D4 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
1026+ 3EDE             >
1026+ 3EDE             >BACKSLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1026+ 3EDE CD D2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1026+ 3EE1             >
1026+ 3EE1             >
1026+ 3EE1             >                endif           ; ok        // for other definitions it "points" the correct handler
1026+ 3EE1             >                // Use of "; ok" to suppress "warning[fwdref]"
1026+ 3EE1             >
1026+ 3EE1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1027+ 3EE1 C8 27 31 26                  dw      BLK, FETCH
1028+ 3EE5 63 25                        dw      ONE_SUBTRACT // BLOCK 1 is used as temp-line in INCLUDE file
1029+ 3EE7 8F 20                        dw      ZBRANCH
1030+ 3EE9 34 00                        dw      Backslash_Else_1 - $
1031+ 3EEB
1032+ 3EEB C8 27 31 26                  dw          BLK, FETCH
1033+ 3EEF 8F 20                        dw          ZBRANCH
1034+ 3EF1 1A 00                        dw          Backslash_Else_2 - $
1035+ 3EF3
1036+ 3EF3 CE 27 31 26                  dw              TO_IN, FETCH, CL, ONE_SUBTRACT, AND_OP, CL
1036+ 3EF7 51 27 63 25
1036+ 3EFB B1 24 51 27
1037+ 3EFF C0 25 8B 28                  dw              SWAP, SUBTRACT, TO_IN, PLUSSTORE
1037+ 3F03 CE 27 19 26
1038+ 3F07 82 20                        dw          BRANCH
1039+ 3F09 10 00                        dw          Backslash_Endif_2 - $
1040+ 3F0B              Backslash_Else_2:
1041+ 3F0B 27 27 8C 27                  dw              ZERO, TIB, FETCH, TO_IN, FETCH, PLUS, CSTORE
1041+ 3F0F 31 26 CE 27
1041+ 3F13 31 26 43 25
1041+ 3F17 4F 26
1042+ 3F19              Backslash_Endif_2:
1043+ 3F19 82 20                        dw      BRANCH
1044+ 3F1B 0A 00                        dw      Backslash_Endif_1 - $
1045+ 3F1D              Backslash_Else_1:
1046+ 3F1D 58 27 76 25                  dw              BBUF, CELL_MINUS, TO_IN, STORE
1046+ 3F21 CE 27 3B 26
1047+ 3F25              Backslash_Endif_1:
1048+ 3F25 F1 24                        dw      EXIT
1049+ 3F27
1050+ 3F27              //  ______________________________________________________________________
1051+ 3F27              //
1052+ 3F27              // blk-fh
1053+ 3F27                              Variable_Def BLK_FH,   "BLK-FH",   1
1053+ 3F27             >                New_Def  BLK_FH, "BLK-FH", Variable_Ptr, is_normal
1053+ 3F27             >
1053+ 3F27             >Dict_Ptr        defl    $
1053+ 3F27             >
1053+ 3F27             >//              ______________________________________________________________________
1053+ 3F27             >//              Heap part
1053+ 3F27             >
1053+ 3F27             >
1053+ 3F27             >                org     (Heap_Ptr & $1FFF) + $E000
1053+ ECD6             >
1053+ ECD6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1053+ ECD6             >Latest_Definition defl  Heap_Ptr
1053+ ECD6             >
1053+ ECD6             >                // dummy db directives used to calculate length of namec
1053+ ECD6 42 4C 4B 2D >                db      "BLK-FH"
1053+ ECDA 46 48       >
1053+ ECDC             >len_NFA         defl    $ - temp_NFA
1053+ ECDC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1053+ ECD6             >
1053+ ECD6 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1053+ ECD7 42 4C 4B 2D >                db      "BLK-FH"               // name string in 7-bit ascii, but
1053+ ECDB 46 48       >
1053+ ECDD             >                org     $-1                 // alter last byte of Name just above to set
1053+ ECDC C8          >                db      {b $} | END_BIT     // msb as name end
1053+ ECDD             >
1053+ ECDD D0 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1053+ ECDF             >Prev_Ptr        defl    Heap_Ptr
1053+ ECDF             >
1053+ ECDF             >mirror_Ptr      defl    $
1053+ ECDF             >
1053+ ECDF 29 3F       >                dw      Dict_Ptr + 2        // xt
1053+ ECE1             >Heap_Ptr        defl    $ - $E000           // save current HP
1053+ ECE1             >
1053+ ECE1             >Current_HP      defl  $ - $E000             // used to set HP once!
1053+ ECE1             >
1053+ ECE1             >//              ______________________________________________________________________
1053+ ECE1             >//              Dictionary part
1053+ ECE1             >
1053+ ECE1             >                org     Dict_Ptr
1053+ 3F27             >
1053+ 3F27 DF 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
1053+ 3F29             >
1053+ 3F29             >BLK_FH:          if Variable_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1053+ 3F29 CD 0E 27    >                call    Variable_Ptr ; ok        // for primitive definitions  actual code
1053+ 3F2C             >
1053+ 3F2C             >
1053+ 3F2C             >                endif           ; ok        // for other definitions it "points" the correct handler
1053+ 3F2C             >                // Use of "; ok" to suppress "warning[fwdref]"
1053+ 3F2C             >
1053+ 3F2C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1053+ 3F2C 01 00       >                dw      1
1054+ 3F2E
1055+ 3F2E                              New_Def BLK_FNAME,   "BLK-FNAME", Create_Ptr, is_normal
1055+ 3F2E             >
1055+ 3F2E             >Dict_Ptr        defl    $
1055+ 3F2E             >
1055+ 3F2E             >//              ______________________________________________________________________
1055+ 3F2E             >//              Heap part
1055+ 3F2E             >
1055+ 3F2E             >
1055+ 3F2E             >                org     (Heap_Ptr & $1FFF) + $E000
1055+ ECE1             >
1055+ ECE1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1055+ ECE1             >Latest_Definition defl  Heap_Ptr
1055+ ECE1             >
1055+ ECE1             >                // dummy db directives used to calculate length of namec
1055+ ECE1 42 4C 4B 2D >                db      "BLK-FNAME"
1055+ ECE5 46 4E 41 4D >
1055+ ECE9 45          >
1055+ ECEA             >len_NFA         defl    $ - temp_NFA
1055+ ECEA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1055+ ECE1             >
1055+ ECE1 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1055+ ECE2 42 4C 4B 2D >                db      "BLK-FNAME"               // name string in 7-bit ascii, but
1055+ ECE6 46 4E 41 4D >
1055+ ECEA 45          >
1055+ ECEB             >                org     $-1                 // alter last byte of Name just above to set
1055+ ECEA C5          >                db      {b $} | END_BIT     // msb as name end
1055+ ECEB             >
1055+ ECEB D6 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1055+ ECED             >Prev_Ptr        defl    Heap_Ptr
1055+ ECED             >
1055+ ECED             >mirror_Ptr      defl    $
1055+ ECED             >
1055+ ECED 30 3F       >                dw      Dict_Ptr + 2        // xt
1055+ ECEF             >Heap_Ptr        defl    $ - $E000           // save current HP
1055+ ECEF             >
1055+ ECEF             >Current_HP      defl  $ - $E000             // used to set HP once!
1055+ ECEF             >
1055+ ECEF             >//              ______________________________________________________________________
1055+ ECEF             >//              Dictionary part
1055+ ECEF             >
1055+ ECEF             >                org     Dict_Ptr
1055+ 3F2E             >
1055+ 3F2E ED 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
1055+ 3F30             >
1055+ 3F30             >BLK_FNAME:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1055+ 3F30 CD AB 30    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
1055+ 3F33             >
1055+ 3F33             >
1055+ 3F33             >                endif           ; ok        // for other definitions it "points" the correct handler
1055+ 3F33             >                // Use of "; ok" to suppress "warning[fwdref]"
1055+ 3F33             >
1055+ 3F33             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1056+ 3F33 0E           Len_Filename:   db      14   // length of the following string, excluding 0x00
1057+ 3F34 21 42 6C 6F  Blk_filename:   db      "!Blocks-64.bin", 0
1057+ 3F38 63 6B 73 2D
1057+ 3F3C 36 34 2E 62
1057+ 3F40 69 6E 00
1058+ 3F43              Param_From_Basic:
1059+ 3F43 6C 69 62 2F                  db      "lib/autoexec.f", 0
1059+ 3F47 61 75 74 6F
1059+ 3F4B 65 78 65 63
1059+ 3F4F 2E 66 00
1060+ 3F52
1061+ 3F52              Fence_Word:
1062+ 3F52              //  ______________________________________________________________________
1063+ 3F52              //
1064+ 3F52
1065+ 3F52 00           Here_Dictionary db      0
1066+ 3F53
# file closed: C:\Zx\CSpect\Projects\vForth17_DOT/source/L3.asm
 144  3F53
 145  3F53              // now we save the compiled file so we can either run it or debug it
 146  3F53                              SAVENEX OPEN "output/main.nex", ORIGIN
 147  3F53                              SAVENEX CORE 3, 0, 0                                // Next core 3.0.0 required as minimum
 148  3F53                              SAVENEX CFG  0
 149  3F53                              SAVENEX BANK 2, 0
 150  3F53                              SAVENEX AUTO
 151  3F53                              SAVENEX CLOSE
 152  3F53
 153  3F53              //              PAGE 7 ;set 7 page to current slot
 154  3F53              //              SAVEBIN "ram7.bin",$C000,$4000 ;- save 4000h begin from C000h of RAM to file
 155  3F53              //              SAVEBIN "output/ram2.bin", $8000, 9800 ;- save 3000h begin from 8000h of RAM to file
 156  3F53
 157  3F53                      ////    SAVETAP "output/F16d.tap", CODE, "forth17d", ORIGIN, $2000
 158  3F53                      ////    SAVETAP "output/F16e.tap", CODE, "forth17e", $E000, $2000
 159  3F53
 160  3F53                      ////    SAVEBIN "output/vforth", ORIGIN, $2000
 161  3F53                      ////    SAVEBIN "output/vforth.bin", $E000, $2000 ;- save 2000h begin from E000h of RAM to file
 162  3F53
 163  3F53                              SAVEBIN "output/vforth.1", ORIGIN, $2000
 164  3F53                              SAVEBIN "output/vforth.2", $E000, $2000 ;- save 2000h begin from E000h of RAM to file
 165  3F53
 166  3F53                              // To run must copy vforth and vforth.bin to /dot directory
 167  3F53                              // then start with
 168  3F53                              //      .vforth
 169  3F53
 170  3F53                              END
# file closed: C:\Zx\CSpect\Projects\vForth17_DOT/source/main.asm
