# file opened: C:\Zx\CSpect\Projects\vForth17_DOT/source/main.asm
   1  0000              //  ______________________________________________________________________
   2  0000              //
   3  0000              //  main.asm
   4  0000              //  ______________________________________________________________________
   5  0000              //
   6  0000              //  v-Forth 1.7 NextZXOS version
   7  0000              //  DOT-command version
   8  0000              //  build 20240420
   9  0000              //
  10  0000              //  Direct-Threaded version.
  11  0000              //
  12  0000              //  NextZXOS version
  13  0000              //  ______________________________________________________________________
  14  0000              //
  15  0000              // MIT License
  16  0000              //
  17  0000              // Copyright (c) 1990-2024 Matteo Vitturi
  18  0000              //
  19  0000              // Permission is hereby granted, free of charge, to any person obtaining a copy
  20  0000              // of this software and associated documentation files (the "Software"), to deal
  21  0000              // in the Software without restriction, including without limitation the rights
  22  0000              // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  23  0000              // copies of the Software, and to permit persons to whom the Software is
  24  0000              // furnished to do so, subject to the following conditions:
  25  0000              //
  26  0000              // The above copyright notice and this permission notice shall be included in all
  27  0000              // copies or substantial portions of the Software.
  28  0000              //
  29  0000              // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  30  0000              // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  31  0000              // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  32  0000              // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  33  0000              // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  34  0000              // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  35  0000              // SOFTWARE.
  36  0000              //  ______________________________________________________________________
  37  0000              //
  38  0000              //  by Matteo Vitturi, 1990-2024
  39  0000              //
  40  0000              //  https://sites.google.com/view/vforth/vforth15-next
  41  0000              //  https://www.oocities.org/matteo_vitturi/english/index.htm
  42  0000              //
  43  0000              //  This is the complete compiler for v.Forth for SINCLAIR ZX Spectrum Next.
  44  0000              //  Each line of this source list mustn't exceed 80 bytes.
  45  0000              //  Z80N (ZX Spectrum Next) extension is available.
  46  0000              //
  47  0000              //  This list has been tested using the following configuration:
  48  0000              //      - CSpect emulator V.2.12.30
  49  0000              //  ______________________________________________________________________
  50  0000              //
  51  0000              //  Z80 Registers usage map
  52  0000              //
  53  0000              //  AF
  54  0000              //  BC - Instruction Pointer: should be preserved during ROM/OS calls
  55  0000              //  DE - Return Stack Pointer: should be preserved during ROM/OS calls
  56  0000              //  HL - Working
  57  0000              //
  58  0000              //  AF'- Sometime used for backup purpose
  59  0000              //  BC'- Not used
  60  0000              //  DE'- Not used
  61  0000              //  HL'- Not used
  62  0000              //
  63  0000              //  SP - Calculator Stack Pointer
  64  0000              //  IX - Inner interpreter "next" address pointer. This way jp (ix) is 2T-state faster than JP next
  65  0000              //  IY - (ZX System: must be preserved to interact with standard ROM)
  66  0000              //
  67  0000              //  ______________________________________________________________________
  68  0000              //
  69  0000              //  _________________
  70  0000              //
  71  0000              //  FORTH DEFINITIONS
  72  0000              //  _________________
  73  0000
  74  0000                              OPT     --zxnext
  75  0000              //  ______________________________________________________________________
  76  0000              //
  77  0000              // this controls some debugging code in L0.asm
  78  0000              //  0 for final binary release.
  79  0000              //  1 for debugging with Visual Studio Code and DeZog
  80  0000              // -1 for for binary comparison with Forth generated code.
  81  0000              DEBUGGING       equ     1   // .dot
  82  0000              //
  83  0000              //  ______________________________________________________________________
  84  0000
  85  0000                              if ( -1 == DEBUGGING )
  86  0000 ~            // ORIGIN          equ     $6366 - $80                 // for binary comparison with double compilation
  87  0000 ~            ORIGIN          equ     $9B21   -$80             // for binary comparison with single compilation
  88  0000 ~            Heap_Ptr        defl    $1F80                       // HP before compilation
  89  0000 ~            Heap_offset     defl    $2000
  90  0000 ~
  91  0000                              endif
  92  0000              //  ______________________________________________________________________
  93  0000
  94  0000                              if (  0 == DEBUGGING )
  95  0000 ~            ORIGIN          equ     $6366                   // binary and Tape
  96  0000 ~            // ORIGIN          equ     $9A93                // binary and Tape
  97  0000 ~            Heap_Ptr        defl    $0002
  98  0000 ~            Heap_offset     defl     0
  99  0000 ~
 100  0000                              endif
 101  0000              //  ______________________________________________________________________
 102  0000
 103  0000                              if (  1 == DEBUGGING )
 104  0000              ORIGIN          equ     $2000                   // for .dot
 105  0000              Heap_Ptr        defl    $0002
 106  0000              Heap_offset     defl     0
 107  0000
 108  0000                              endif
 109  0000              //  ______________________________________________________________________
 110  0000
 111  0000                              DEVICE  ZXSPECTRUMNEXT
 112  0000
 113  0000                              ORG     ORIGIN
 114  2000
 115  2000                              if ( -1 == DEBUGGING )
 116  2000 ~                            ds 128                            // for binary comparison
 117  2000                              endif
 118  2000
 119  2000              //  ______________________________________________________________________
 120  2000              //
 121  2000              //  Naming convention for Label vs Forth correspondance
 122  2000              //  Forth words are named as they are named for real with some exception to avoid assembler syntax errors.
 123  2000              //    - Leading "0" is converted into "Z_"
 124  2000              //    - Leading "(" is converted into "C_", closing bracket is omitted
 125  2000              //    - Leading numbers are converted in letters: ONE_  TWO_ etc.
 126  2000              //    - Question mark "?" is converted into "Q" or omitted if needed / useful.
 127  2000              //    - Plus sign "+" is converted in _PLUS or ADD_ depending.
 128  2000              //    - Minus sign "-" in L (for Line), MINUS or SUBTRACT depending
 129  2000              //    - Greater-Than sign ">" in _GREATER or TO_ depending
 130  2000              //    - Equal sign "=" is converted in EQUAL
 131  2000              //    - Less-Than sign "<" in _LESS or FROM_ (or TO_ again) depending
 132  2000              //    - Asterisk sign "*" is converted in _MUL or STAR
 133  2000              //    - Slash "/" is converted in _DIV or omitted if it is clear what it means
 134  2000              //    - Exclamation mark "!" is converted in STORE
 135  2000              //    - At-Sign "@" is converted in FETCH
 136  2000              //    - Words that collide with Assembler are normally suffixed with "_OP"
 137  2000
 138  2000                              include "system.asm"
# file opened: C:\Zx\CSpect\Projects\vForth17_DOT/source/system.asm
   1+ 2000              //  ______________________________________________________________________
   2+ 2000              //
   3+ 2000              //  system.asm
   4+ 2000              //  ______________________________________________________________________
   5+ 2000
   6+ 2000              // Registers:
   7+ 2000              //
   8+ 2000              //      BC: Instruction Pointer
   9+ 2000              //      DE: Return Stack Pointer
  10+ 2000              //      HL: W register
  11+ 2000              //      SP: Calc stack Pointer
  12+ 2000              //      IX: Inner-Interpreter Address
  13+ 2000
  14+ 2000              //  ______________________________________________________________________
  15+ 2000              //
  16+ 2000              // ZX-Spectrum standard system variables
  17+ 2000              SCR_CT          equ     $5C8C                   // SCR-CT system variable
  18+ 2000              LASTK           equ     $5C08                   // LASTK system variable
  19+ 2000              BORDCR          equ     $5C48                   // BORDCR system variable
  20+ 2000              FLAGS2          equ     $5C6A                   // for caps-lock
  21+ 2000              RAMTOP          equ     $5CB2
  22+ 2000              TSTACK          equ     $5C00                   // TSTACK
  23+ 2000              // FSTACK          ecu     $4000 - 8
  24+ 2000              //  ______________________________________________________________________
  25+ 2000              //
  26+ 2000              // Flag constants
  27+ 2000              TRUE_FLAG       equ     $FFFF
  28+ 2000              FALSE_FLAG      equ     $0000
  29+ 2000
  30+ 2000              //  ______________________________________________________________________
  31+ 2000              //
  32+ 2000              // Ascii char constants
  33+ 2000              NUL_CHAR        equ     $00
  34+ 2000              COMMA_CHAR      equ     $06
  35+ 2000              BACKSPACE_CHAR  equ     $08
  36+ 2000              CR_CHAR         equ     $0D
  37+ 2000              BLANK_CHAR      equ     $20
  38+ 2000              QUOTE_CHAR      equ     "'"
  39+ 2000              DQUOTE_CHAR     equ     '"'
  40+ 2000              UNDERSCORE_CHAR equ     $5F
  41+ 2000              SOLIDBLOCK_CHAR equ     $8F
  42+ 2000              HALFBLOCK_CHAR  equ     $8C
  43+ 2000              LC_A_CHAR       equ     $61                 // lower-case "a"
  44+ 2000              LC_Z_CHAR       equ     $7A                 // lower-case "z"
  45+ 2000
  46+ 2000
  47+ 2000              //  ______________________________________________________________________
  48+ 2000              //
  49+ 2000
  50+ 2000                              // emulate something like:  ld hl,rp
  51+ 2000              ldhlrp          macro
  52+ 2000 ~                            ld      hl,(RP_Pointer)
  53+ 2000                              endm
  54+ 2000
  55+ 2000                              // emulate something like:  ld rp,hl
  56+ 2000              ldrphl          macro
  57+ 2000 ~                            ld      (RP_Pointer),hl
  58+ 2000                              endm
  59+ 2000
  60+ 2000              //  ______________________________________________________________________
  61+ 2000              //
  62+ 2000              //  Inner interpreter next-address pointer. This is 2T-state faster than "jp address"
  63+ 2000              next            macro
  64+ 2000 ~                            jp      (ix)
  65+ 2000                              endm
  66+ 2000
  67+ 2000              psh1            macro
  68+ 2000 ~                            push    hl
  69+ 2000 ~                            jp      (ix)
  70+ 2000                              endm
  71+ 2000
  72+ 2000              psh2            macro
  73+ 2000 ~                            push    de
  74+ 2000 ~                            push    hl
  75+ 2000 ~                            jp      (ix)
  76+ 2000                              endm
  77+ 2000
  78+ 2000              //  ______________________________________________________________________
  79+ 2000              //
  80+ 2000              // Bit constants in length-byte
  81+ 2000
  82+ 2000              SMUDGE_BIT      equ     %00100000               // $20
  83+ 2000              IMMEDIATE_BIT   equ     %01000000               // $40
  84+ 2000              END_BIT         equ     %10000000               // $80
  85+ 2000
  86+ 2000
  87+ 2000              //  ______________________________________________________________________
  88+ 2000              //
  89+ 2000              //  To create Forth words using this (nice) Assembler, we have to use the two following
  90+ 2000              //  pointers
  91+ 2000              temp_NFA        defl    0
  92+ 2000              last_NFA        defl    0
  93+ 2000              len_NFA         defl    0
  94+ 2000
  95+ 2000              Dict_Ptr        defl    0
  96+ 2000              // Heap_Ptr        defl    $0002
  97+ 2000              Prev_Ptr        defl    0
  98+ 2000              mirror_Ptr      defl    0
  99+ 2000
 100+ 2000              is_code         equ     0                   // so the direct machine-code starts at CFA
 101+ 2000              is_normal       equ     0                   // so the direct machine-code starts at CFA
 102+ 2000              is_immediate    equ     IMMEDIATE_BIT       // $40 - the definition is IMMEDIATE.
 103+ 2000
 104+ 2000
 105+ 2000              Behave          macro   xp
 106+ 2000 ~            temp_PTR        defl    $                   // save this org
 107+ 2000 ~                            org     (Heap_Ptr & $1FFF) + $E000 -2
 108+ 2000 ~                            dw      xp
 109+ 2000 ~                            org     temp_PTR
 110+ 2000                              endm
 111+ 2000
 112+ 2000              //  ______________________________________________________________________
 113+ 2000              //
 114+ 2000              //  Create a new "low-level" definition
 115+ 2000              //  This macro is used in the form  Create FORTH_NAME,n,"forth_name"
 116+ 2000              //  to create a new Forth Dictionary entry the same way Forth itself would do.
 117+ 2000              //  A word begins with a Length-Byte in range 1-31. Top 3 msb are used as flags
 118+ 2000              //  see SMUDGE_BIT and IMMEDIATE_BIT constant above.
 119+ 2000              //  It is followed by the Name of the word, i.e. a string expressed in 7-bit Ascii.
 120+ 2000              //  The last character of the Name must have the msb set to signal the end of it (END_BIT)
 121+ 2000              //  This macro acts much like the standard Forth definition CREATE
 122+ 2000
 123+ 2000              New_Def         macro   label, namec, runcode, bits
 124+ 2000 ~
 125+ 2000 ~            Dict_Ptr        defl    $
 126+ 2000 ~
 127+ 2000 ~            //              ______________________________________________________________________
 128+ 2000 ~            //              Heap part
 129+ 2000 ~
 130+ 2000 ~
 131+ 2000 ~                            org     (Heap_Ptr & $1FFF) + $E000
 132+ 2000 ~
 133+ 2000 ~            temp_NFA        defl    $                   // save this NFA address to temp_NFA
 134+ 2000 ~            Latest_Definition defl  Heap_Ptr
 135+ 2000 ~
 136+ 2000 ~                            // dummy db directives used to calculate length of namec
 137+ 2000 ~                            db      namec
 138+ 2000 ~            len_NFA         defl    $ - temp_NFA
 139+ 2000 ~                            org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 140+ 2000 ~
 141+ 2000 ~                            db      len_NFA | END_BIT | bits  // The start of NFA must have msb set to signal the beginning of the sounted string
 142+ 2000 ~                            db      namec               // name string in 7-bit ascii, but
 143+ 2000 ~                            org     $-1                 // alter last byte of Name just above to set
 144+ 2000 ~                            db      {b $} | END_BIT     // msb as name end
 145+ 2000 ~
 146+ 2000 ~                            dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 147+ 2000 ~            Prev_Ptr        defl    Heap_Ptr
 148+ 2000 ~
 149+ 2000 ~            mirror_Ptr      defl    $
 150+ 2000 ~
 151+ 2000 ~                            dw      Dict_Ptr + 2        // xt
 152+ 2000 ~            Heap_Ptr        defl    $ - $E000           // save current HP
 153+ 2000 ~
 154+ 2000 ~            Current_HP      defl  $ - $E000             // used to set HP once!
 155+ 2000 ~
 156+ 2000 ~            //              ______________________________________________________________________
 157+ 2000 ~            //              Dictionary part
 158+ 2000 ~
 159+ 2000 ~                            org     Dict_Ptr
 160+ 2000 ~
 161+ 2000 ~                            dw      mirror_Ptr - $E000 + Heap_offset
 162+ 2000 ~
 163+ 2000 ~            label:          if runcode != 0 ; ok        // This is the start address of the direct jp(hl)
 164+ 2000 ~                            call    runcode ; ok        // for primitive definitions  actual code
 165+ 2000 ~
 166+ 2000 ~
 167+ 2000 ~                            endif           ; ok        // for other definitions it "points" the correct handler
 168+ 2000 ~                            // Use of "; ok" to suppress "warning[fwdref]"
 169+ 2000 ~
 170+ 2000 ~            last_NFA        defl    temp_NFA            // keep track of NFA saved above
 171+ 2000                              endm
 172+ 2000
 173+ 2000              //  ______________________________________________________________________
 174+ 2000              //
 175+ 2000              // Create a "constant"
 176+ 2000              // The constant value is compiled in first PFA cell
 177+ 2000              Constant_Def    macro   label, namec, constant_value
 178+ 2000 ~                            New_Def  label, namec, Constant_Ptr, is_normal
 179+ 2000 ~                            dw      constant_value
 180+ 2000                              endm
 181+ 2000
 182+ 2000              //  ______________________________________________________________________
 183+ 2000              //
 184+ 2000              // Create a "variable"
 185+ 2000              // The when invoked, a variable returns a pointer, the address of first PFA cell
 186+ 2000              // this allow creation of "variables" which content is  of any length
 187+ 2000              Variable_Def    macro   label, namec, initial_value
 188+ 2000 ~                            New_Def  label, namec, Variable_Ptr, is_normal
 189+ 2000 ~                            dw      initial_value
 190+ 2000                              endm
 191+ 2000
 192+ 2000              //  ______________________________________________________________________
 193+ 2000              //
 194+ 2000              // Create a "user"
 195+ 2000              // It uses a single byte as offset to calculate the address of the variable
 196+ 2000              User_Def        macro   label, namec, offset_value
 197+ 2000 ~                            New_Def  label, namec, User_Ptr, is_normal
 198+ 2000 ~                            db      offset_value
 199+ 2000                              endm
 200+ 2000
 201+ 2000              //  ______________________________________________________________________
 202+ 2000              //
 203+ 2000              // Create a "colon-definition"
 204+ 2000              // The CFA contains a small routine i.e. "call Enter_Ptr".
 205+ 2000              // The PFA, three bytes later, contains the actual Forth definition
 206+ 2000              Colon_Def       macro   label, namec, bits
 207+ 2000 ~                            New_Def  label, namec, Enter_Ptr, bits ; ok
 208+ 2000                              endm
 209+ 2000
 210+ 2000              //  ______________________________________________________________________
 211+ 2000              //
 212+ 2000              // Create a "heap-string"
 213+ 2000              Start_Heap      macro
 214+ 2000 ~            temp_ORG        defl    $                   // save this ORG
 215+ 2000 ~                            org     (Heap_Ptr & $1FFF) + $E000
 216+ 2000 ~
 217+ 2000                              endm
 218+ 2000
 219+ 2000              End_Heap        macro
 220+ 2000 ~            Heap_Ptr        defl    $ - $E000
 221+ 2000 ~                            org     temp_ORG
 222+ 2000 ~
 223+ 2000                              endm
 224+ 2000
 225+ 2000
 226+ 2000              //  ______________________________________________________________________
 227+ 2000              //
 228+ 2000
 229+ 2000
 230+ 2000
 231+ 2000              S0_system:      equ     $D0E8               // Address of top of Calc Stack
 232+ 2000              TIB_system      equ     $D0E8               // TIB grows upwards, Return-Stack downward.
 233+ 2000              R0_system:      equ     $D188               // Address of top of Return Stack. This is S0 + $00A0
 234+ 2000              USER_system:    equ     $D188               // User variables zone.
 235+ 2000              FIRST_system:   equ     $D1E4               // Address of first BUFFER
 236+ 2000              LIMIT_system:   equ     $E000               // Address of first byte beyond last BUFFER
 237+ 2000
# file closed: C:\Zx\CSpect\Projects\vForth17_DOT/source/system.asm
 139  2000                              include "L0.asm"
# file opened: C:\Zx\CSpect\Projects\vForth17_DOT/source/L0.asm
   1+ 2000              //  ______________________________________________________________________
   2+ 2000              //
   3+ 2000              //  L0.asm
   4+ 2000              //
   5+ 2000              //  Origin-Area and Level-0 definitions
   6+ 2000              //  ______________________________________________________________________
   7+ 2000
   8+ 2000              Cold_origin:
   9+ 2000 F3                           di      // and     a
  10+ 2001 C3 12 33                     jp      ColdRoutine
  11+ 2004              Warm_origin:
  12+ 2004 37                           scf
  13+ 2005 C3 12 33                     jp      WarmRoutine
  14+ 2008
  15+ 2008              // +008
  16+ 2008 E6 D0        SP_Basic:       dw      $D0E6               // These are bits with some "standard" meaning... 0101
  17+ 200A
  18+ 200A              // +00A
  19+ 200A 00 0E                        dw      $0E00
  20+ 200C
  21+ 200C              // +00C
  22+ 200C FE 0C        Latest_origin:  dw      Latest_Definition   // Latest word (used in Cold_Start)
  23+ 200E
  24+ 200E              // +00E
  25+ 200E 0C 00        DEL_Char_Ptr:   dw      $000C               // This is the characther used as "Back-Space"
  26+ 2010
  27+ 2010              // +010
  28+ 2010 50 B2        CPU_Id          dw      $B250               // Z80 expressed in base 36
  29+ 2012
  30+ 2012              // +012
  31+ 2012 E8 D0        S0_origin:      dw      S0_system
  32+ 2014 88 D1        R0_origin:      dw      R0_system
  33+ 2016 E8 D0        TIB_origin:     dw      TIB_system
  34+ 2018 1F 00        WIDTH_origin:   dw      31
  35+ 201A 01 00        WARNING_origin: dw      1
  36+ 201C 00 80        FENCE_origin:   dw      $8000 // $8184 // 25446 // $6000 // **** Fence_Word
  37+ 201E 00 80        DP_origin       dw      $8000 // $8184 // 25446 // $6000 // ****Fence_Word
  38+ 2020 FE 31        VOCLINK_origin: dw      Voclink_Ptr
  39+ 2022 E4 D1                        dw      FIRST_system
  40+ 2024 00 E0                        dw      LIMIT_system
  41+ 2026 0C 0D        HP_origin:      dw      Current_HP
  42+ 2028
  43+ 2028              // +028
  44+ 2028 8F           Block_Face:     db      SOLIDBLOCK_CHAR     // Caps-Lock   Cursor face
  45+ 2029 8C           Half_Face:      db      HALFBLOCK_CHAR      // Caps-unlock Cursor face
  46+ 202A 5F           Underscore_Face:db      UNDERSCORE_CHAR     // Underscore  Cursor face
  47+ 202B 00                           db      0
  48+ 202C
  49+ 202C              // +02C
  50+ 202C 00 00        SP_Saved:       dw      $0000               // Saved SP during NextOS call
  51+ 202E
  52+ 202E              // +02E
  53+ 202E 88 D1        USER_Pointer:   dw      USER_system
  54+ 2030
  55+ 2030              // +030
  56+ 2030 88 D1        RP_Pointer:     dw      $d188 // R0_system
  57+ 2032
  58+ 2032              // +32
  59+ 2032 00 00        IX_Echo:        dw      $0000               // Echo IX after NextOS call
  60+ 2034
  61+ 2034
  62+ 2034                              Start_Heap
  62+ 2034             >temp_ORG        defl    $                   // save this ORG
  62+ 2034             >                org     (Heap_Ptr & $1FFF) + $E000
  62+ E002             >
  63+ E002              Splash_Ptr      defl    $ - $E000           // save current HP
  64+ E002                              // length include a leading space in each line
  65+ E002 6E                           db      110
  66+ E003 20 76 2D 46                  db      " v-Forth 1.7 - NextZXOS version ", $0D      // 33
  66+ E007 6F 72 74 68
  66+ E00B 20 31 2E 37
  66+ E00F 20 2D 20 4E
  66+ E013 65 78 74 5A
  66+ E017 58 4F 53 20
  66+ E01B 76 65 72 73
  66+ E01F 69 6F 6E 20
  66+ E023 0D
  67+ E024 20 48 65 61                  db      " Heap Vocabulary - build 2024-04-20 ", $0D  // 37
  67+ E028 70 20 56 6F
  67+ E02C 63 61 62 75
  67+ E030 6C 61 72 79
  67+ E034 20 2D 20 62
  67+ E038 75 69 6C 64
  67+ E03C 20 32 30 32
  67+ E040 34 2D 30 34
  67+ E044 2D 32 30 20
  67+ E048 0D
  68+ E049 20 4D 49 54                  db      " MIT License ", 127                         // 14
  68+ E04D 20 4C 69 63
  68+ E051 65 6E 73 65
  68+ E055 20 7F
  69+ E057 20 31 39 39                  db      " 1990-2023 Matteo Vitturi "                 // 26
  69+ E05B 30 2D 32 30
  69+ E05F 32 33 20 4D
  69+ E063 61 74 74 65
  69+ E067 6F 20 56 69
  69+ E06B 74 74 75 72
  69+ E06F 69 20
  70+ E071                              End_Heap
  70+ E071             >Heap_Ptr        defl    $ - $E000
  70+ E071             >                org     temp_ORG
  70+ 2034             >
  71+ 2034
  72+ 2034              //  ______________________________________________________________________
  73+ 2034
  74+ 2034              // from this point we can use LDHLRP and LDRPHL Assembler macros
  75+ 2034              // instead of their equivalent long sequences.
  76+ 2034
  77+ 2034              //  ______________________________________________________________________
  78+ 2034
  79+ 2034              // address for "next" - inner interpreter
  80+ 2034              // This address must always be pointed by IX
  81+ 2034              // "next" macro simply does a  jp(ix)  instruction
  82+ 2034
  83+ 2034              // Psh2_Ptr:       push    de
  84+ 2034              // Psh1_Ptr:       push    hl
  85+ 2034
  86+ 2034              Next_Ptr:       // This address must always be kept in IX: "next" relies on that
  87+ 2034
  88+ 2034              //              if ( 1 == DEBUGGING )
  89+ 2034              //              ld      hl, Next_Breakpoint_1
  90+ 2034              //              and     a
  91+ 2034              //              sbc     hl, bc
  92+ 2034              //              jr      nz, Next_Continue
  93+ 2034              //              nop // This is where you have to put a real breakpoint to intercept BC values...
  94+ 2034              //              endif
  95+ 2034
  96+ 2034              Next_Continue:
  97+ 2034 0A                           ld      a, (bc)
  98+ 2035 03                           inc     bc
  99+ 2036 6F                           ld      l, a
 100+ 2037 0A                           ld      a, (bc)
 101+ 2038 03                           inc     bc
 102+ 2039 67                           ld      h, a                // hl contains a CFA (xt) of word being executed
 103+ 203A
 104+ 203A              // Execute xt i.e. CFA held in HL
 105+ 203A              Exec_Ptr:
 106+ 203A
 107+ 203A
 108+ 203A
 109+ 203A
 110+ 203A E9                           jp      (hl)                // and jump to it
 111+ 203B                                                          // there you'll find the real code or a CALL to a ;code part
 112+ 203B
 113+ 203B              // temp_NULL       defl    Heap_Ptr & $1FFF
 114+ 203B              // 0x00         n --      ( compile time )
 115+ 203B              //              New_Def NUL_DUMMY,  $00, is_code, is_immediate
 116+ 203B              //              next
 117+ 203B
 118+ 203B              //  ______________________________________________________________________
 119+ 203B              //
 120+ 203B              // lit          -- x
 121+ 203B              // puts on top of stack the value of the following word.
 122+ 203B              // it is compiled in colon definition before a literal number
 123+ 203B
 124+ 203B                              New_Def  LIT, "LIT", is_code, is_normal
 124+ 203B             >
 124+ 203B             >Dict_Ptr        defl    $
 124+ 203B             >
 124+ 203B             >//              ______________________________________________________________________
 124+ 203B             >//              Heap part
 124+ 203B             >
 124+ 203B             >
 124+ 203B             >                org     (Heap_Ptr & $1FFF) + $E000
 124+ E071             >
 124+ E071             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 124+ E071             >Latest_Definition defl  Heap_Ptr
 124+ E071             >
 124+ E071             >                // dummy db directives used to calculate length of namec
 124+ E071 4C 49 54    >                db      "LIT"
 124+ E074             >len_NFA         defl    $ - temp_NFA
 124+ E074             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 124+ E071             >
 124+ E071 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 124+ E072 4C 49 54    >                db      "LIT"               // name string in 7-bit ascii, but
 124+ E075             >                org     $-1                 // alter last byte of Name just above to set
 124+ E074 D4          >                db      {b $} | END_BIT     // msb as name end
 124+ E075             >
 124+ E075 00 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 124+ E077             >Prev_Ptr        defl    Heap_Ptr
 124+ E077             >
 124+ E077             >mirror_Ptr      defl    $
 124+ E077             >
 124+ E077 3D 20       >                dw      Dict_Ptr + 2        // xt
 124+ E079             >Heap_Ptr        defl    $ - $E000           // save current HP
 124+ E079             >
 124+ E079             >Current_HP      defl  $ - $E000             // used to set HP once!
 124+ E079             >
 124+ E079             >//              ______________________________________________________________________
 124+ E079             >//              Dictionary part
 124+ E079             >
 124+ E079             >                org     Dict_Ptr
 124+ 203B             >
 124+ 203B 77 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 124+ 203D             >
 124+ 203D             >LIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 124+ 203D ~           >                call    runcode ; ok        // for primitive definitions  actual code
 124+ 203D ~           >
 124+ 203D ~           >
 124+ 203D             >                endif           ; ok        // for other definitions it "points" the correct handler
 124+ 203D             >                // Use of "; ok" to suppress "warning[fwdref]"
 124+ 203D             >
 124+ 203D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 125+ 203D
 126+ 203D 0A                           ld      a, (bc)
 127+ 203E 03                           inc     bc
 128+ 203F 6F                           ld      l, a
 129+ 2040 0A                           ld      a, (bc)
 130+ 2041 03                           inc     bc
 131+ 2042 67                           ld      h, a
 132+ 2043 E5                           push    hl
 133+ 2044                              next
 133+ 2044 DD E9       >                jp      (ix)
 134+ 2046
 135+ 2046              //  ______________________________________________________________________
 136+ 2046              //
 137+ 2046              // execute      i*x xt -- j*x
 138+ 2046              // execution token. usually xt is given by CFA
 139+ 2046
 140+ 2046                              New_Def  EXECUTE, "EXECUTE", is_code, is_normal
 140+ 2046             >
 140+ 2046             >Dict_Ptr        defl    $
 140+ 2046             >
 140+ 2046             >//              ______________________________________________________________________
 140+ 2046             >//              Heap part
 140+ 2046             >
 140+ 2046             >
 140+ 2046             >                org     (Heap_Ptr & $1FFF) + $E000
 140+ E079             >
 140+ E079             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 140+ E079             >Latest_Definition defl  Heap_Ptr
 140+ E079             >
 140+ E079             >                // dummy db directives used to calculate length of namec
 140+ E079 45 58 45 43 >                db      "EXECUTE"
 140+ E07D 55 54 45    >
 140+ E080             >len_NFA         defl    $ - temp_NFA
 140+ E080             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 140+ E079             >
 140+ E079 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 140+ E07A 45 58 45 43 >                db      "EXECUTE"               // name string in 7-bit ascii, but
 140+ E07E 55 54 45    >
 140+ E081             >                org     $-1                 // alter last byte of Name just above to set
 140+ E080 C5          >                db      {b $} | END_BIT     // msb as name end
 140+ E081             >
 140+ E081 71 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 140+ E083             >Prev_Ptr        defl    Heap_Ptr
 140+ E083             >
 140+ E083             >mirror_Ptr      defl    $
 140+ E083             >
 140+ E083 48 20       >                dw      Dict_Ptr + 2        // xt
 140+ E085             >Heap_Ptr        defl    $ - $E000           // save current HP
 140+ E085             >
 140+ E085             >Current_HP      defl  $ - $E000             // used to set HP once!
 140+ E085             >
 140+ E085             >//              ______________________________________________________________________
 140+ E085             >//              Dictionary part
 140+ E085             >
 140+ E085             >                org     Dict_Ptr
 140+ 2046             >
 140+ 2046 83 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 140+ 2048             >
 140+ 2048             >EXECUTE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 140+ 2048 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 140+ 2048 ~           >
 140+ 2048 ~           >
 140+ 2048             >                endif           ; ok        // for other definitions it "points" the correct handler
 140+ 2048             >                // Use of "; ok" to suppress "warning[fwdref]"
 140+ 2048             >
 140+ 2048             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 141+ 2048 C9                           ret
 142+ 2049
 143+ 2049              //  ______________________________________________________________________
 144+ 2049              //
 145+ 2049              // brk
 146+ 2049              //              New_Def  BRK, "BRK", is_code, is_normal
 147+ 2049              //              next
 148+ 2049
 149+ 2049
 150+ 2049
 151+ 2049              //  ______________________________________________________________________
 152+ 2049              //
 153+ 2049              // (+loop)      n --
 154+ 2049              // compiled by +LOOP. it uses the top two values of return-stack to
 155+ 2049              // keep track of index and limit, they are accessed via I and I'
 156+ 2049              // Add n to the loop index. If the loop index did not cross the boundary
 157+ 2049              // between the loop limit minus one and the loop limit, continue execution
 158+ 2049              // at the beginning of the loop. Otherwise, discard the current loop control
 159+ 2049              // parameters and continue execution immediately following the loop.
 160+ 2049                              New_Def C_PLOOP, "(+LOOP)", is_code, is_normal
 160+ 2049             >
 160+ 2049             >Dict_Ptr        defl    $
 160+ 2049             >
 160+ 2049             >//              ______________________________________________________________________
 160+ 2049             >//              Heap part
 160+ 2049             >
 160+ 2049             >
 160+ 2049             >                org     (Heap_Ptr & $1FFF) + $E000
 160+ E085             >
 160+ E085             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 160+ E085             >Latest_Definition defl  Heap_Ptr
 160+ E085             >
 160+ E085             >                // dummy db directives used to calculate length of namec
 160+ E085 28 2B 4C 4F >                db      "(+LOOP)"
 160+ E089 4F 50 29    >
 160+ E08C             >len_NFA         defl    $ - temp_NFA
 160+ E08C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 160+ E085             >
 160+ E085 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 160+ E086 28 2B 4C 4F >                db      "(+LOOP)"               // name string in 7-bit ascii, but
 160+ E08A 4F 50 29    >
 160+ E08D             >                org     $-1                 // alter last byte of Name just above to set
 160+ E08C A9          >                db      {b $} | END_BIT     // msb as name end
 160+ E08D             >
 160+ E08D 79 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 160+ E08F             >Prev_Ptr        defl    Heap_Ptr
 160+ E08F             >
 160+ E08F             >mirror_Ptr      defl    $
 160+ E08F             >
 160+ E08F 4B 20       >                dw      Dict_Ptr + 2        // xt
 160+ E091             >Heap_Ptr        defl    $ - $E000           // save current HP
 160+ E091             >
 160+ E091             >Current_HP      defl  $ - $E000             // used to set HP once!
 160+ E091             >
 160+ E091             >//              ______________________________________________________________________
 160+ E091             >//              Dictionary part
 160+ E091             >
 160+ E091             >                org     Dict_Ptr
 160+ 2049             >
 160+ 2049 8F 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 160+ 204B             >
 160+ 204B             >C_PLOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 160+ 204B ~           >                call    runcode ; ok        // for primitive definitions  actual code
 160+ 204B ~           >
 160+ 204B ~           >
 160+ 204B             >                endif           ; ok        // for other definitions it "points" the correct handler
 160+ 204B             >                // Use of "; ok" to suppress "warning[fwdref]"
 160+ 204B             >
 160+ 204B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 161+ 204B
 162+ 204B              Loop_Ptr:
 163+ 204B E1                           pop     hl                  // get increment
 164+ 204C EB                           ex      de, hl
 165+ 204D                              // *** ldhlrp
 166+ 204D C5                           push    bc                  // Save IP
 167+ 204E 42                           ld      b, d                // bc is increment
 168+ 204F 4B                           ld      c, e
 169+ 2050 E5                           push    hl
 170+ 2051 5E                           ld      e, (hl)             // hl points to loop-index, add increment to it.
 171+ 2052 7B                           ld      a, e                // de keeps index before increment.
 172+ 2053 81                           add     c
 173+ 2054 77                           ld      (hl), a
 174+ 2055 23                           inc     hl
 175+ 2056 56                           ld      d, (hl)
 176+ 2057 7A                           ld      a, d
 177+ 2058 88                           adc     b
 178+ 2059 77                           ld      (hl),a
 179+ 205A 23                           inc     hl
 180+ 205B
 181+ 205B 7B                           ld      a, e
 182+ 205C 96                           sub     (hl)
 183+ 205D 5F                           ld      e, a
 184+ 205E 23                           inc     hl
 185+ 205F 7A                           ld      a, d
 186+ 2060 9E                           sbc     (hl)
 187+ 2061 57                           ld      d, a                // DE is index - limit : limit is the "new zero"
 188+ 2062
 189+ 2062 EB                           ex      de, hl              // swap HL and DE, so restore DE:=RP+3
 190+ 2063 09                           add     hl, bc
 191+ 2064 CB 78                        bit     7, b                // keep increment-sign just before overwriting d
 192+ 2066 28 01                        jr      z, Loop_NegativeIncrement
 193+ 2068 3F                               ccf                     // carry-flag tracks bonudary limit crossing.
 194+ 2069              Loop_NegativeIncrement:
 195+ 2069 38 04                        jr      c, Loop_Endif
 196+ 206B D1                               pop     de              // Discard RP+3, retrieve original RP
 197+ 206C C1                               pop     bc                  // Retrieve IP
 198+ 206D 18 13                            jr      Branch_Ptr      // perform branch consuming following cell
 199+ 206F              Loop_Endif:
 200+ 206F C1                           pop     bc                  // discard original RP
 201+ 2070 EB                           ex      de, hl
 202+ 2071 23                           inc     hl                  // keep    RP+4 (exit from loop)
 203+ 2072                              // *** ldrphl                      // ld rp,hl macro 30h +Origin
 204+ 2072 EB                           ex      de, hl
 205+ 2073 C1                           pop     bc                  // Retrieve IP
 206+ 2074 03                           inc     bc                  // skip branch-style offset
 207+ 2075 03                           inc     bc
 208+ 2076                              next
 208+ 2076 DD E9       >                jp      (ix)
 209+ 2078
 210+ 2078              //  ______________________________________________________________________
 211+ 2078              //
 212+ 2078              // (loop)       n --
 213+ 2078              // same as (LOOP) but index is incremented by 1
 214+ 2078              // compiled by LOOP.
 215+ 2078                              New_Def C_LOOP, "(LOOP)", is_code, is_normal
 215+ 2078             >
 215+ 2078             >Dict_Ptr        defl    $
 215+ 2078             >
 215+ 2078             >//              ______________________________________________________________________
 215+ 2078             >//              Heap part
 215+ 2078             >
 215+ 2078             >
 215+ 2078             >                org     (Heap_Ptr & $1FFF) + $E000
 215+ E091             >
 215+ E091             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 215+ E091             >Latest_Definition defl  Heap_Ptr
 215+ E091             >
 215+ E091             >                // dummy db directives used to calculate length of namec
 215+ E091 28 4C 4F 4F >                db      "(LOOP)"
 215+ E095 50 29       >
 215+ E097             >len_NFA         defl    $ - temp_NFA
 215+ E097             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 215+ E091             >
 215+ E091 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 215+ E092 28 4C 4F 4F >                db      "(LOOP)"               // name string in 7-bit ascii, but
 215+ E096 50 29       >
 215+ E098             >                org     $-1                 // alter last byte of Name just above to set
 215+ E097 A9          >                db      {b $} | END_BIT     // msb as name end
 215+ E098             >
 215+ E098 85 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 215+ E09A             >Prev_Ptr        defl    Heap_Ptr
 215+ E09A             >
 215+ E09A             >mirror_Ptr      defl    $
 215+ E09A             >
 215+ E09A 7A 20       >                dw      Dict_Ptr + 2        // xt
 215+ E09C             >Heap_Ptr        defl    $ - $E000           // save current HP
 215+ E09C             >
 215+ E09C             >Current_HP      defl  $ - $E000             // used to set HP once!
 215+ E09C             >
 215+ E09C             >//              ______________________________________________________________________
 215+ E09C             >//              Dictionary part
 215+ E09C             >
 215+ E09C             >                org     Dict_Ptr
 215+ 2078             >
 215+ 2078 9A 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 215+ 207A             >
 215+ 207A             >C_LOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 215+ 207A ~           >                call    runcode ; ok        // for primitive definitions  actual code
 215+ 207A ~           >
 215+ 207A ~           >
 215+ 207A             >                endif           ; ok        // for other definitions it "points" the correct handler
 215+ 207A             >                // Use of "; ok" to suppress "warning[fwdref]"
 215+ 207A             >
 215+ 207A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 216+ 207A ED 8A 00 01                  push    1
 217+ 207E 18 CB                        jr      Loop_Ptr
 218+ 2080
 219+ 2080              //  ______________________________________________________________________
 220+ 2080              //
 221+ 2080              // branch       --
 222+ 2080              // unconditional branch in colon definition using the following cell as an offset from current IP value
 223+ 2080              // compiled by ELSE, AGAIN and some other immediate words
 224+ 2080
 225+ 2080                              New_Def BRANCH, "BRANCH", is_code, is_normal
 225+ 2080             >
 225+ 2080             >Dict_Ptr        defl    $
 225+ 2080             >
 225+ 2080             >//              ______________________________________________________________________
 225+ 2080             >//              Heap part
 225+ 2080             >
 225+ 2080             >
 225+ 2080             >                org     (Heap_Ptr & $1FFF) + $E000
 225+ E09C             >
 225+ E09C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 225+ E09C             >Latest_Definition defl  Heap_Ptr
 225+ E09C             >
 225+ E09C             >                // dummy db directives used to calculate length of namec
 225+ E09C 42 52 41 4E >                db      "BRANCH"
 225+ E0A0 43 48       >
 225+ E0A2             >len_NFA         defl    $ - temp_NFA
 225+ E0A2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 225+ E09C             >
 225+ E09C 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 225+ E09D 42 52 41 4E >                db      "BRANCH"               // name string in 7-bit ascii, but
 225+ E0A1 43 48       >
 225+ E0A3             >                org     $-1                 // alter last byte of Name just above to set
 225+ E0A2 C8          >                db      {b $} | END_BIT     // msb as name end
 225+ E0A3             >
 225+ E0A3 91 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 225+ E0A5             >Prev_Ptr        defl    Heap_Ptr
 225+ E0A5             >
 225+ E0A5             >mirror_Ptr      defl    $
 225+ E0A5             >
 225+ E0A5 82 20       >                dw      Dict_Ptr + 2        // xt
 225+ E0A7             >Heap_Ptr        defl    $ - $E000           // save current HP
 225+ E0A7             >
 225+ E0A7             >Current_HP      defl  $ - $E000             // used to set HP once!
 225+ E0A7             >
 225+ E0A7             >//              ______________________________________________________________________
 225+ E0A7             >//              Dictionary part
 225+ E0A7             >
 225+ E0A7             >                org     Dict_Ptr
 225+ 2080             >
 225+ 2080 A5 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 225+ 2082             >
 225+ 2082             >BRANCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 225+ 2082 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 225+ 2082 ~           >
 225+ 2082 ~           >
 225+ 2082             >                endif           ; ok        // for other definitions it "points" the correct handler
 225+ 2082             >                // Use of "; ok" to suppress "warning[fwdref]"
 225+ 2082             >
 225+ 2082             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 226+ 2082              Branch_Ptr:
 227+ 2082 0A                           ld      a, (bc)
 228+ 2083 6F                           ld      l, a
 229+ 2084 03                           inc     bc
 230+ 2085 0A                           ld      a, (bc)
 231+ 2086 67                           ld      h, a
 232+ 2087 0B                           dec     bc
 233+ 2088 09                           add     hl, bc
 234+ 2089 4D                           ld      c, l
 235+ 208A 44                           ld      b, h
 236+ 208B                              next
 236+ 208B DD E9       >                jp      (ix)
 237+ 208D
 238+ 208D
 239+ 208D              //  ______________________________________________________________________
 240+ 208D              //
 241+ 208D              // 0branch      f --
 242+ 208D              // conditional branch if the top-of-stack is ZERO or FALSE.
 243+ 208D              // compiled by IF, UNTIL and some other immediate words
 244+ 208D
 245+ 208D                              New_Def ZBRANCH, "0BRANCH", is_code, is_normal
 245+ 208D             >
 245+ 208D             >Dict_Ptr        defl    $
 245+ 208D             >
 245+ 208D             >//              ______________________________________________________________________
 245+ 208D             >//              Heap part
 245+ 208D             >
 245+ 208D             >
 245+ 208D             >                org     (Heap_Ptr & $1FFF) + $E000
 245+ E0A7             >
 245+ E0A7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 245+ E0A7             >Latest_Definition defl  Heap_Ptr
 245+ E0A7             >
 245+ E0A7             >                // dummy db directives used to calculate length of namec
 245+ E0A7 30 42 52 41 >                db      "0BRANCH"
 245+ E0AB 4E 43 48    >
 245+ E0AE             >len_NFA         defl    $ - temp_NFA
 245+ E0AE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 245+ E0A7             >
 245+ E0A7 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 245+ E0A8 30 42 52 41 >                db      "0BRANCH"               // name string in 7-bit ascii, but
 245+ E0AC 4E 43 48    >
 245+ E0AF             >                org     $-1                 // alter last byte of Name just above to set
 245+ E0AE C8          >                db      {b $} | END_BIT     // msb as name end
 245+ E0AF             >
 245+ E0AF 9C 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 245+ E0B1             >Prev_Ptr        defl    Heap_Ptr
 245+ E0B1             >
 245+ E0B1             >mirror_Ptr      defl    $
 245+ E0B1             >
 245+ E0B1 8F 20       >                dw      Dict_Ptr + 2        // xt
 245+ E0B3             >Heap_Ptr        defl    $ - $E000           // save current HP
 245+ E0B3             >
 245+ E0B3             >Current_HP      defl  $ - $E000             // used to set HP once!
 245+ E0B3             >
 245+ E0B3             >//              ______________________________________________________________________
 245+ E0B3             >//              Dictionary part
 245+ E0B3             >
 245+ E0B3             >                org     Dict_Ptr
 245+ 208D             >
 245+ 208D B1 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 245+ 208F             >
 245+ 208F             >ZBRANCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 245+ 208F ~           >                call    runcode ; ok        // for primitive definitions  actual code
 245+ 208F ~           >
 245+ 208F ~           >
 245+ 208F             >                endif           ; ok        // for other definitions it "points" the correct handler
 245+ 208F             >                // Use of "; ok" to suppress "warning[fwdref]"
 245+ 208F             >
 245+ 208F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 246+ 208F              ZBranch_Ptr:
 247+ 208F E1                           pop     hl
 248+ 2090 7D                           ld      a, l
 249+ 2091 B4                           or      h
 250+ 2092 28 EE                        jr      z, Branch_Ptr
 251+ 2094 03                           inc     bc                  // if not branch, skip offset cell.
 252+ 2095 03                           inc     bc
 253+ 2096                              next
 253+ 2096 DD E9       >                jp      (ix)
 254+ 2098
 255+ 2098              //  ______________________________________________________________________
 256+ 2098              //
 257+ 2098              // (leave)        --
 258+ 2098              // compiled by LEAVE
 259+ 2098              // this forces to exit from loop and jump past
 260+ 2098                              New_Def C_LEAVE, "(LEAVE)", is_code, is_normal
 260+ 2098             >
 260+ 2098             >Dict_Ptr        defl    $
 260+ 2098             >
 260+ 2098             >//              ______________________________________________________________________
 260+ 2098             >//              Heap part
 260+ 2098             >
 260+ 2098             >
 260+ 2098             >                org     (Heap_Ptr & $1FFF) + $E000
 260+ E0B3             >
 260+ E0B3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 260+ E0B3             >Latest_Definition defl  Heap_Ptr
 260+ E0B3             >
 260+ E0B3             >                // dummy db directives used to calculate length of namec
 260+ E0B3 28 4C 45 41 >                db      "(LEAVE)"
 260+ E0B7 56 45 29    >
 260+ E0BA             >len_NFA         defl    $ - temp_NFA
 260+ E0BA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 260+ E0B3             >
 260+ E0B3 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 260+ E0B4 28 4C 45 41 >                db      "(LEAVE)"               // name string in 7-bit ascii, but
 260+ E0B8 56 45 29    >
 260+ E0BB             >                org     $-1                 // alter last byte of Name just above to set
 260+ E0BA A9          >                db      {b $} | END_BIT     // msb as name end
 260+ E0BB             >
 260+ E0BB A7 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 260+ E0BD             >Prev_Ptr        defl    Heap_Ptr
 260+ E0BD             >
 260+ E0BD             >mirror_Ptr      defl    $
 260+ E0BD             >
 260+ E0BD 9A 20       >                dw      Dict_Ptr + 2        // xt
 260+ E0BF             >Heap_Ptr        defl    $ - $E000           // save current HP
 260+ E0BF             >
 260+ E0BF             >Current_HP      defl  $ - $E000             // used to set HP once!
 260+ E0BF             >
 260+ E0BF             >//              ______________________________________________________________________
 260+ E0BF             >//              Dictionary part
 260+ E0BF             >
 260+ E0BF             >                org     Dict_Ptr
 260+ 2098             >
 260+ 2098 BD 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 260+ 209A             >
 260+ 209A             >C_LEAVE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 260+ 209A ~           >                call    runcode ; ok        // for primitive definitions  actual code
 260+ 209A ~           >
 260+ 209A ~           >
 260+ 209A             >                endif           ; ok        // for other definitions it "points" the correct handler
 260+ 209A             >                // Use of "; ok" to suppress "warning[fwdref]"
 260+ 209A             >
 260+ 209A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 261+ 209A                              // ex      de, hl
 262+ 209A                              // *** ldhlrp
 263+ 209A 3E 04                        ld      a, 4
 264+ 209C ED 32                        add     de, a
 265+ 209E                              // *** ldrphl
 266+ 209E                              // ex      de, hl
 267+ 209E 18 E2                        jr      Branch_Ptr       // perform branch consuming following cell
 268+ 20A0                              next
 268+ 20A0 DD E9       >                jp      (ix)
 269+ 20A2
 270+ 20A2              //  ______________________________________________________________________
 271+ 20A2              //
 272+ 20A2              // (?do)        lim ind --
 273+ 20A2              // compiled by ?DO to make a loop checking for lim == ind first
 274+ 20A2              // at run-time (?DO) must be followed by a BRANCH offset
 275+ 20A2              // used to skip the loop if lim == ind
 276+ 20A2                              New_Def C_Q_DO, "(?DO)", is_code, is_normal
 276+ 20A2             >
 276+ 20A2             >Dict_Ptr        defl    $
 276+ 20A2             >
 276+ 20A2             >//              ______________________________________________________________________
 276+ 20A2             >//              Heap part
 276+ 20A2             >
 276+ 20A2             >
 276+ 20A2             >                org     (Heap_Ptr & $1FFF) + $E000
 276+ E0BF             >
 276+ E0BF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 276+ E0BF             >Latest_Definition defl  Heap_Ptr
 276+ E0BF             >
 276+ E0BF             >                // dummy db directives used to calculate length of namec
 276+ E0BF 28 3F 44 4F >                db      "(?DO)"
 276+ E0C3 29          >
 276+ E0C4             >len_NFA         defl    $ - temp_NFA
 276+ E0C4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 276+ E0BF             >
 276+ E0BF 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 276+ E0C0 28 3F 44 4F >                db      "(?DO)"               // name string in 7-bit ascii, but
 276+ E0C4 29          >
 276+ E0C5             >                org     $-1                 // alter last byte of Name just above to set
 276+ E0C4 A9          >                db      {b $} | END_BIT     // msb as name end
 276+ E0C5             >
 276+ E0C5 B3 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 276+ E0C7             >Prev_Ptr        defl    Heap_Ptr
 276+ E0C7             >
 276+ E0C7             >mirror_Ptr      defl    $
 276+ E0C7             >
 276+ E0C7 A4 20       >                dw      Dict_Ptr + 2        // xt
 276+ E0C9             >Heap_Ptr        defl    $ - $E000           // save current HP
 276+ E0C9             >
 276+ E0C9             >Current_HP      defl  $ - $E000             // used to set HP once!
 276+ E0C9             >
 276+ E0C9             >//              ______________________________________________________________________
 276+ E0C9             >//              Dictionary part
 276+ E0C9             >
 276+ E0C9             >                org     Dict_Ptr
 276+ 20A2             >
 276+ 20A2 C7 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 276+ 20A4             >
 276+ 20A4             >C_Q_DO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 276+ 20A4 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 276+ 20A4 ~           >
 276+ 20A4 ~           >
 276+ 20A4             >                endif           ; ok        // for other definitions it "points" the correct handler
 276+ 20A4             >                // Use of "; ok" to suppress "warning[fwdref]"
 276+ 20A4             >
 276+ 20A4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 277+ 20A4 D9                           exx
 278+ 20A5 D1                            pop     de                  // de has the index
 279+ 20A6 E1                            pop     hl                  // hl has the limit
 280+ 20A7 44                            ld      b, h
 281+ 20A8 4D                            ld      c, l
 282+ 20A9 E5                            push    hl                  // put them back to stack for later
 283+ 20AA D5                            push    de
 284+ 20AB A7                            and     a                   // reset carry flag
 285+ 20AC ED 52                         sbc     hl, de              // compute limit - index
 286+ 20AE D9                           exx
 287+ 20AF 20 04                        jr      nz, Do_Ptr          // if zero then don't even begin loop
 288+ 20B1 E1                               pop     hl
 289+ 20B2 E1                               pop     hl
 290+ 20B3 18 CD                            jr      Branch_Ptr          // perform branch consuming following cell
 291+ 20B5              Do_Ptr:
 292+ 20B5                              // *** ldhlrp                 // prepare RP
 293+ 20B5                              // *** ex      de, hl
 294+ 20B5                              // dec     de
 295+ 20B5                              // dec     de
 296+ 20B5                              // dec     de
 297+ 20B5                              // dec     de
 298+ 20B5 ED 35 FC FF                  add     de, -4              // cannot use LD A,-4 and ADD DE,A !
 299+ 20B9 D5                           push    de                  // pass it to h'l'
 300+ 20BA                              // *** ex      de, hl
 301+ 20BA                              // *** ldrphl
 302+ 20BA D9                           exx
 303+ 20BB E1                            pop     hl
 304+ 20BC
 305+ 20BC                               // store index as top RP
 306+ 20BC D1                            pop     de
 307+ 20BD 73                            ld      (hl), e
 308+ 20BE 23                            inc     hl
 309+ 20BF 72                            ld      (hl), d
 310+ 20C0 23                            inc     hl
 311+ 20C1                               // stores lim as second from top RP
 312+ 20C1 D1                            pop     de
 313+ 20C2 73                            ld      (hl), e
 314+ 20C3 23                            inc     hl
 315+ 20C4 72                            ld      (hl), d
 316+ 20C5 D9                           exx
 317+ 20C6                              // skip branch-style offseet
 318+ 20C6 03                           inc     bc
 319+ 20C7 03                           inc     bc
 320+ 20C8                              next
 320+ 20C8 DD E9       >                jp      (ix)
 321+ 20CA
 322+ 20CA              //  ______________________________________________________________________
 323+ 20CA              //
 324+ 20CA              // (do)        lim ind --
 325+ 20CA              // compiled by DO to make a loop checking for lim == ind first
 326+ 20CA              // this is a simpler version of (?DO)
 327+ 20CA                              New_Def C_DO, "(DO)", is_code, is_normal
 327+ 20CA             >
 327+ 20CA             >Dict_Ptr        defl    $
 327+ 20CA             >
 327+ 20CA             >//              ______________________________________________________________________
 327+ 20CA             >//              Heap part
 327+ 20CA             >
 327+ 20CA             >
 327+ 20CA             >                org     (Heap_Ptr & $1FFF) + $E000
 327+ E0C9             >
 327+ E0C9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 327+ E0C9             >Latest_Definition defl  Heap_Ptr
 327+ E0C9             >
 327+ E0C9             >                // dummy db directives used to calculate length of namec
 327+ E0C9 28 44 4F 29 >                db      "(DO)"
 327+ E0CD             >len_NFA         defl    $ - temp_NFA
 327+ E0CD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 327+ E0C9             >
 327+ E0C9 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 327+ E0CA 28 44 4F 29 >                db      "(DO)"               // name string in 7-bit ascii, but
 327+ E0CE             >                org     $-1                 // alter last byte of Name just above to set
 327+ E0CD A9          >                db      {b $} | END_BIT     // msb as name end
 327+ E0CE             >
 327+ E0CE BF 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 327+ E0D0             >Prev_Ptr        defl    Heap_Ptr
 327+ E0D0             >
 327+ E0D0             >mirror_Ptr      defl    $
 327+ E0D0             >
 327+ E0D0 CC 20       >                dw      Dict_Ptr + 2        // xt
 327+ E0D2             >Heap_Ptr        defl    $ - $E000           // save current HP
 327+ E0D2             >
 327+ E0D2             >Current_HP      defl  $ - $E000             // used to set HP once!
 327+ E0D2             >
 327+ E0D2             >//              ______________________________________________________________________
 327+ E0D2             >//              Dictionary part
 327+ E0D2             >
 327+ E0D2             >                org     Dict_Ptr
 327+ 20CA             >
 327+ 20CA D0 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 327+ 20CC             >
 327+ 20CC             >C_DO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 327+ 20CC ~           >                call    runcode ; ok        // for primitive definitions  actual code
 327+ 20CC ~           >
 327+ 20CC ~           >
 327+ 20CC             >                endif           ; ok        // for other definitions it "points" the correct handler
 327+ 20CC             >                // Use of "; ok" to suppress "warning[fwdref]"
 327+ 20CC             >
 327+ 20CC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 328+ 20CC 0B                           dec     bc                  // prepare IP beforehand
 329+ 20CD 0B                           dec     bc                  // to balance the two final 2 inc bc in (?do)
 330+ 20CE 18 E5                        jr      Do_Ptr
 331+ 20D0
 332+ 20D0              //  ______________________________________________________________________
 333+ 20D0              //
 334+ 20D0              // i            -- n
 335+ 20D0              // used between DO and LOOP or between DO e +LOOP to copy on top of stack
 336+ 20D0              // the current value of the index-loop
 337+ 20D0                              New_Def I, "I", is_code, is_normal
 337+ 20D0             >
 337+ 20D0             >Dict_Ptr        defl    $
 337+ 20D0             >
 337+ 20D0             >//              ______________________________________________________________________
 337+ 20D0             >//              Heap part
 337+ 20D0             >
 337+ 20D0             >
 337+ 20D0             >                org     (Heap_Ptr & $1FFF) + $E000
 337+ E0D2             >
 337+ E0D2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 337+ E0D2             >Latest_Definition defl  Heap_Ptr
 337+ E0D2             >
 337+ E0D2             >                // dummy db directives used to calculate length of namec
 337+ E0D2 49          >                db      "I"
 337+ E0D3             >len_NFA         defl    $ - temp_NFA
 337+ E0D3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 337+ E0D2             >
 337+ E0D2 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 337+ E0D3 49          >                db      "I"               // name string in 7-bit ascii, but
 337+ E0D4             >                org     $-1                 // alter last byte of Name just above to set
 337+ E0D3 C9          >                db      {b $} | END_BIT     // msb as name end
 337+ E0D4             >
 337+ E0D4 C9 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 337+ E0D6             >Prev_Ptr        defl    Heap_Ptr
 337+ E0D6             >
 337+ E0D6             >mirror_Ptr      defl    $
 337+ E0D6             >
 337+ E0D6 D2 20       >                dw      Dict_Ptr + 2        // xt
 337+ E0D8             >Heap_Ptr        defl    $ - $E000           // save current HP
 337+ E0D8             >
 337+ E0D8             >Current_HP      defl  $ - $E000             // used to set HP once!
 337+ E0D8             >
 337+ E0D8             >//              ______________________________________________________________________
 337+ E0D8             >//              Dictionary part
 337+ E0D8             >
 337+ E0D8             >                org     Dict_Ptr
 337+ 20D0             >
 337+ 20D0 D6 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 337+ 20D2             >
 337+ 20D2             >I:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 337+ 20D2 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 337+ 20D2 ~           >
 337+ 20D2 ~           >
 337+ 20D2             >                endif           ; ok        // for other definitions it "points" the correct handler
 337+ 20D2             >                // Use of "; ok" to suppress "warning[fwdref]"
 337+ 20D2             >
 337+ 20D2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 338+ 20D2              I_Ptr:
 339+ 20D2 62                           ld      h, d
 340+ 20D3 6B                           ld      l, e
 341+ 20D4                              // *** ldhlrp
 342+ 20D4              I_Ptr_prime:
 343+ 20D4 7E                           ld      a, (hl)
 344+ 20D5 23                           inc     hl
 345+ 20D6 66                           ld      h, (hl)
 346+ 20D7 6F                           ld      l, a
 347+ 20D8 E5                           push    hl
 348+ 20D9                              next
 348+ 20D9 DD E9       >                jp      (ix)
 349+ 20DB
 350+ 20DB
 351+ 20DB              //  ______________________________________________________________________
 352+ 20DB              //
 353+ 20DB              // i'            -- n
 354+ 20DB              // used between DO and LOOP or between DO e +LOOP to copy on top of stack
 355+ 20DB              // the limit of the index-loop
 356+ 20DB
 357+ 20DB                              New_Def II, "I'", is_code, is_normal
 357+ 20DB             >
 357+ 20DB             >Dict_Ptr        defl    $
 357+ 20DB             >
 357+ 20DB             >//              ______________________________________________________________________
 357+ 20DB             >//              Heap part
 357+ 20DB             >
 357+ 20DB             >
 357+ 20DB             >                org     (Heap_Ptr & $1FFF) + $E000
 357+ E0D8             >
 357+ E0D8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 357+ E0D8             >Latest_Definition defl  Heap_Ptr
 357+ E0D8             >
 357+ E0D8             >                // dummy db directives used to calculate length of namec
 357+ E0D8 49 27       >                db      "I'"
 357+ E0DA             >len_NFA         defl    $ - temp_NFA
 357+ E0DA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 357+ E0D8             >
 357+ E0D8 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 357+ E0D9 49 27       >                db      "I'"               // name string in 7-bit ascii, but
 357+ E0DB             >                org     $-1                 // alter last byte of Name just above to set
 357+ E0DA A7          >                db      {b $} | END_BIT     // msb as name end
 357+ E0DB             >
 357+ E0DB D2 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 357+ E0DD             >Prev_Ptr        defl    Heap_Ptr
 357+ E0DD             >
 357+ E0DD             >mirror_Ptr      defl    $
 357+ E0DD             >
 357+ E0DD DD 20       >                dw      Dict_Ptr + 2        // xt
 357+ E0DF             >Heap_Ptr        defl    $ - $E000           // save current HP
 357+ E0DF             >
 357+ E0DF             >Current_HP      defl  $ - $E000             // used to set HP once!
 357+ E0DF             >
 357+ E0DF             >//              ______________________________________________________________________
 357+ E0DF             >//              Dictionary part
 357+ E0DF             >
 357+ E0DF             >                org     Dict_Ptr
 357+ 20DB             >
 357+ 20DB DD 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 357+ 20DD             >
 357+ 20DD             >II:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 357+ 20DD ~           >                call    runcode ; ok        // for primitive definitions  actual code
 357+ 20DD ~           >
 357+ 20DD ~           >
 357+ 20DD             >                endif           ; ok        // for other definitions it "points" the correct handler
 357+ 20DD             >                // Use of "; ok" to suppress "warning[fwdref]"
 357+ 20DD             >
 357+ 20DD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 358+ 20DD 62                           ld      h, d
 359+ 20DE 6B                           ld      l, e
 360+ 20DF                              // *** ldhlrp
 361+ 20DF 23                           inc     hl
 362+ 20E0 23                           inc     hl
 363+ 20E1 18 F1                        jr      I_Ptr_prime
 364+ 20E3
 365+ 20E3
 366+ 20E3              //  ______________________________________________________________________
 367+ 20E3              //
 368+ 20E3              // digit        c n -- u tf  |  ff
 369+ 20E3              // convert a character c using base n
 370+ 20E3              // returns a unsigned number and a true flag
 371+ 20E3              // or just a false flag if the conversion fails
 372+ 20E3                              New_Def DIGIT, "DIGIT", is_code, is_normal
 372+ 20E3             >
 372+ 20E3             >Dict_Ptr        defl    $
 372+ 20E3             >
 372+ 20E3             >//              ______________________________________________________________________
 372+ 20E3             >//              Heap part
 372+ 20E3             >
 372+ 20E3             >
 372+ 20E3             >                org     (Heap_Ptr & $1FFF) + $E000
 372+ E0DF             >
 372+ E0DF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 372+ E0DF             >Latest_Definition defl  Heap_Ptr
 372+ E0DF             >
 372+ E0DF             >                // dummy db directives used to calculate length of namec
 372+ E0DF 44 49 47 49 >                db      "DIGIT"
 372+ E0E3 54          >
 372+ E0E4             >len_NFA         defl    $ - temp_NFA
 372+ E0E4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 372+ E0DF             >
 372+ E0DF 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 372+ E0E0 44 49 47 49 >                db      "DIGIT"               // name string in 7-bit ascii, but
 372+ E0E4 54          >
 372+ E0E5             >                org     $-1                 // alter last byte of Name just above to set
 372+ E0E4 D4          >                db      {b $} | END_BIT     // msb as name end
 372+ E0E5             >
 372+ E0E5 D8 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 372+ E0E7             >Prev_Ptr        defl    Heap_Ptr
 372+ E0E7             >
 372+ E0E7             >mirror_Ptr      defl    $
 372+ E0E7             >
 372+ E0E7 E5 20       >                dw      Dict_Ptr + 2        // xt
 372+ E0E9             >Heap_Ptr        defl    $ - $E000           // save current HP
 372+ E0E9             >
 372+ E0E9             >Current_HP      defl  $ - $E000             // used to set HP once!
 372+ E0E9             >
 372+ E0E9             >//              ______________________________________________________________________
 372+ E0E9             >//              Dictionary part
 372+ E0E9             >
 372+ E0E9             >                org     Dict_Ptr
 372+ 20E3             >
 372+ 20E3 E7 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 372+ 20E5             >
 372+ 20E5             >DIGIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 372+ 20E5 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 372+ 20E5 ~           >
 372+ 20E5 ~           >
 372+ 20E5             >                endif           ; ok        // for other definitions it "points" the correct handler
 372+ 20E5             >                // Use of "; ok" to suppress "warning[fwdref]"
 372+ 20E5             >
 372+ 20E5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 373+ 20E5 D9                           exx
 374+ 20E6 E1                           pop     hl                  // l has the base
 375+ 20E7 D1                           pop     de                  // e has the digit
 376+ 20E8 7B                           ld      a, e
 377+ 20E9 FE 60                        cp      $60                 // check if lowercase
 378+ 20EB 38 02                        jr      c, Digit_Uppercase
 379+ 20ED D6 20                            sub     $20                 // quick'n'dirty uppercase
 380+ 20EF              Digit_Uppercase:
 381+ 20EF D6 30                        sub     $30
 382+ 20F1 38 15                        jr      c, Digit_Fail       // fail when character < "0"
 383+ 20F3 FE 0A                            cp      $0A
 384+ 20F5 38 06                            jr      c, Digit_Decimal    // perhaps is not decimal
 385+ 20F7 D6 07                                sub     7                   // try hex and subtract 7
 386+ 20F9 FE 0A                                cp      $0A
 387+ 20FB 38 0B                                jr      c,  Digit_Fail      // it is not hex !
 388+ 20FD
 389+ 20FD              Digit_Decimal:
 390+ 20FD                              // compare digit
 391+ 20FD BD                           cp      l                   // compare with base
 392+ 20FE 30 08                        jr      nc, Digit_Fail      // fail when greater than base
 393+ 2100 5F                               ld      e, a                // digit is returned as second from TOS
 394+ 2101                              //  ld      hl, -1
 395+ 2101 ED 62                            sbc     hl, hl
 396+ 2103 D5                               push    de
 397+ 2104 E5                               push    hl
 398+ 2105 D9                               exx
 399+ 2106                                  next
 399+ 2106 DD E9       >                jp      (ix)
 400+ 2108              Digit_Fail:
 401+ 2108 21 00 00                     ld      hl, 0
 402+ 210B E5                           push    hl
 403+ 210C D9                           exx
 404+ 210D                              next
 404+ 210D DD E9       >                jp      (ix)
 405+ 210F
 406+ 210F              //  ______________________________________________________________________
 407+ 210F              //
 408+ 210F              //  parametric uppercase routine
 409+ 210F              //  depending on the following op-code the routine can be by-passed
 410+ 210F              //  changing the behaviour of some callers.
 411+ 210F              //  If it is "ret" then the system is Case-Sensitive
 412+ 210F              //  If it is "Nop" then the system is Case-Insensitive
 413+ 210F              //  Only A register is touched.
 414+ 210F 00           Case_Sensitive: nop                         // Default is case-insensitive.
 415+ 2110              Case_Upper:
 416+ 2110 FE 61                        cp      LC_A_CHAR           // lower-case "a"
 417+ 2112 D8                           ret     c                   // no change if A < "a"
 418+ 2113 FE 7B                        cp      LC_Z_CHAR + 1       // lower-case "z" + 1
 419+ 2115 D0                           ret     nc                  // no change if A > "z"
 420+ 2116 D6 20                        sub     $20                 // Make uppercase if A in ["a".."z"]
 421+ 2118 C9                           ret
 422+ 2119
 423+ 2119              //  ______________________________________________________________________
 424+ 2119              //
 425+ 2119              //  caseon      --
 426+ 2119              // set system case-sensitivity on
 427+ 2119              // it patches a RET/NOP at the beginning of the uppercase-routine
 428+ 2119                              New_Def CASEON, "CASEON", is_code, is_normal
 428+ 2119             >
 428+ 2119             >Dict_Ptr        defl    $
 428+ 2119             >
 428+ 2119             >//              ______________________________________________________________________
 428+ 2119             >//              Heap part
 428+ 2119             >
 428+ 2119             >
 428+ 2119             >                org     (Heap_Ptr & $1FFF) + $E000
 428+ E0E9             >
 428+ E0E9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 428+ E0E9             >Latest_Definition defl  Heap_Ptr
 428+ E0E9             >
 428+ E0E9             >                // dummy db directives used to calculate length of namec
 428+ E0E9 43 41 53 45 >                db      "CASEON"
 428+ E0ED 4F 4E       >
 428+ E0EF             >len_NFA         defl    $ - temp_NFA
 428+ E0EF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 428+ E0E9             >
 428+ E0E9 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 428+ E0EA 43 41 53 45 >                db      "CASEON"               // name string in 7-bit ascii, but
 428+ E0EE 4F 4E       >
 428+ E0F0             >                org     $-1                 // alter last byte of Name just above to set
 428+ E0EF CE          >                db      {b $} | END_BIT     // msb as name end
 428+ E0F0             >
 428+ E0F0 DF 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 428+ E0F2             >Prev_Ptr        defl    Heap_Ptr
 428+ E0F2             >
 428+ E0F2             >mirror_Ptr      defl    $
 428+ E0F2             >
 428+ E0F2 1B 21       >                dw      Dict_Ptr + 2        // xt
 428+ E0F4             >Heap_Ptr        defl    $ - $E000           // save current HP
 428+ E0F4             >
 428+ E0F4             >Current_HP      defl  $ - $E000             // used to set HP once!
 428+ E0F4             >
 428+ E0F4             >//              ______________________________________________________________________
 428+ E0F4             >//              Dictionary part
 428+ E0F4             >
 428+ E0F4             >                org     Dict_Ptr
 428+ 2119             >
 428+ 2119 F2 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 428+ 211B             >
 428+ 211B             >CASEON:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 428+ 211B ~           >                call    runcode ; ok        // for primitive definitions  actual code
 428+ 211B ~           >
 428+ 211B ~           >
 428+ 211B             >                endif           ; ok        // for other definitions it "points" the correct handler
 428+ 211B             >                // Use of "; ok" to suppress "warning[fwdref]"
 428+ 211B             >
 428+ 211B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 429+ 211B 3E C9                        ld      a, $C9              // "ret"
 430+ 211D 32 0F 21                     ld      (Case_Sensitive), a
 431+ 2120                              next
 431+ 2120 DD E9       >                jp      (ix)
 432+ 2122
 433+ 2122              //  ______________________________________________________________________
 434+ 2122              //
 435+ 2122              //  caseoff     --
 436+ 2122              // set system case-sensitivity on
 437+ 2122              // it patches a RET/NOP at the beginning of the uppercase-routine
 438+ 2122                              New_Def CASEOFF, "CASEOFF", is_code, is_normal
 438+ 2122             >
 438+ 2122             >Dict_Ptr        defl    $
 438+ 2122             >
 438+ 2122             >//              ______________________________________________________________________
 438+ 2122             >//              Heap part
 438+ 2122             >
 438+ 2122             >
 438+ 2122             >                org     (Heap_Ptr & $1FFF) + $E000
 438+ E0F4             >
 438+ E0F4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 438+ E0F4             >Latest_Definition defl  Heap_Ptr
 438+ E0F4             >
 438+ E0F4             >                // dummy db directives used to calculate length of namec
 438+ E0F4 43 41 53 45 >                db      "CASEOFF"
 438+ E0F8 4F 46 46    >
 438+ E0FB             >len_NFA         defl    $ - temp_NFA
 438+ E0FB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 438+ E0F4             >
 438+ E0F4 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 438+ E0F5 43 41 53 45 >                db      "CASEOFF"               // name string in 7-bit ascii, but
 438+ E0F9 4F 46 46    >
 438+ E0FC             >                org     $-1                 // alter last byte of Name just above to set
 438+ E0FB C6          >                db      {b $} | END_BIT     // msb as name end
 438+ E0FC             >
 438+ E0FC E9 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 438+ E0FE             >Prev_Ptr        defl    Heap_Ptr
 438+ E0FE             >
 438+ E0FE             >mirror_Ptr      defl    $
 438+ E0FE             >
 438+ E0FE 24 21       >                dw      Dict_Ptr + 2        // xt
 438+ E100             >Heap_Ptr        defl    $ - $E000           // save current HP
 438+ E100             >
 438+ E100             >Current_HP      defl  $ - $E000             // used to set HP once!
 438+ E100             >
 438+ E100             >//              ______________________________________________________________________
 438+ E100             >//              Dictionary part
 438+ E100             >
 438+ E100             >                org     Dict_Ptr
 438+ 2122             >
 438+ 2122 FE 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 438+ 2124             >
 438+ 2124             >CASEOFF:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 438+ 2124 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 438+ 2124 ~           >
 438+ 2124 ~           >
 438+ 2124             >                endif           ; ok        // for other definitions it "points" the correct handler
 438+ 2124             >                // Use of "; ok" to suppress "warning[fwdref]"
 438+ 2124             >
 438+ 2124             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 439+ 2124 3E 00                        ld      a, $00              // "nop"
 440+ 2126 32 0F 21                     ld      (Case_Sensitive), a
 441+ 2129                              next
 441+ 2129 DD E9       >                jp      (ix)
 442+ 212B
 443+ 212B              //  ______________________________________________________________________
 444+ 212B              //
 445+ 212B              //  upper       c1 -- c1 | c2
 446+ 212B              // character on top of stack is forced to Uppercase.
 447+ 212B                              New_Def UPPER, "UPPER", is_code, is_normal
 447+ 212B             >
 447+ 212B             >Dict_Ptr        defl    $
 447+ 212B             >
 447+ 212B             >//              ______________________________________________________________________
 447+ 212B             >//              Heap part
 447+ 212B             >
 447+ 212B             >
 447+ 212B             >                org     (Heap_Ptr & $1FFF) + $E000
 447+ E100             >
 447+ E100             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 447+ E100             >Latest_Definition defl  Heap_Ptr
 447+ E100             >
 447+ E100             >                // dummy db directives used to calculate length of namec
 447+ E100 55 50 50 45 >                db      "UPPER"
 447+ E104 52          >
 447+ E105             >len_NFA         defl    $ - temp_NFA
 447+ E105             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 447+ E100             >
 447+ E100 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 447+ E101 55 50 50 45 >                db      "UPPER"               // name string in 7-bit ascii, but
 447+ E105 52          >
 447+ E106             >                org     $-1                 // alter last byte of Name just above to set
 447+ E105 D2          >                db      {b $} | END_BIT     // msb as name end
 447+ E106             >
 447+ E106 F4 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 447+ E108             >Prev_Ptr        defl    Heap_Ptr
 447+ E108             >
 447+ E108             >mirror_Ptr      defl    $
 447+ E108             >
 447+ E108 2D 21       >                dw      Dict_Ptr + 2        // xt
 447+ E10A             >Heap_Ptr        defl    $ - $E000           // save current HP
 447+ E10A             >
 447+ E10A             >Current_HP      defl  $ - $E000             // used to set HP once!
 447+ E10A             >
 447+ E10A             >//              ______________________________________________________________________
 447+ E10A             >//              Dictionary part
 447+ E10A             >
 447+ E10A             >                org     Dict_Ptr
 447+ 212B             >
 447+ 212B 08 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 447+ 212D             >
 447+ 212D             >UPPER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 447+ 212D ~           >                call    runcode ; ok        // for primitive definitions  actual code
 447+ 212D ~           >
 447+ 212D ~           >
 447+ 212D             >                endif           ; ok        // for other definitions it "points" the correct handler
 447+ 212D             >                // Use of "; ok" to suppress "warning[fwdref]"
 447+ 212D             >
 447+ 212D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 448+ 212D E1                           pop     hl
 449+ 212E 7D                           ld      a, l
 450+ 212F CD 10 21                     call    Case_Upper
 451+ 2132 6F                           ld      l, a
 452+ 2133
 453+ 2133                              psh1
 453+ 2133 E5          >                push    hl
 453+ 2134 DD E9       >                jp      (ix)
 454+ 2136
 455+ 2136              //  ______________________________________________________________________
 456+ 2136
 457+ 2136              MMU7_read:
 458+ 2136 3E 57                        ld      a, 87
 459+ 2138              NEXTREG_read:
 460+ 2138 01 3B 24                     ld      bc, $243B
 461+ 213B ED 79                        out     (c), a
 462+ 213D 04                           inc     b
 463+ 213E ED 78                        in      a, (c)
 464+ 2140 C9                           ret
 465+ 2141
 466+ 2141              //  ______________________________________________________________________
 467+ 2141
 468+ 2141              // given an HP-pointer in input, turn it into page + offset
 469+ 2141              TO_FAR_rout:
 470+ 2141 7C                           ld      a, h
 471+ 2142 08                           ex      af, af
 472+ 2143 7C                           ld      a, h
 473+ 2144 F6 E0                        or      $E0
 474+ 2146 67                           ld      h, a
 475+ 2147 08                           ex      af, af
 476+ 2148 07                           rlca
 477+ 2149 07                           rlca
 478+ 214A 07                           rlca
 479+ 214B E6 07                        and     $07
 480+ 214D C6 20                        add     $20
 481+ 214F C9                           ret
 482+ 2150
 483+ 2150
 484+ 2150              //  ______________________________________________________________________
 485+ 2150              //
 486+ 2150              // (find)       addr voc -- 0 | cfa b 1
 487+ 2150              // vocabulary search,
 488+ 2150              // - voc is starting word's NFA
 489+ 2150              // - addr is the string to be searched for
 490+ 2150              // On success, it returns the CFA of found word, the first NFA byte
 491+ 2150              // (which contains length and some flags) and a true flag.
 492+ 2150              // On fail, a false flag  (no more: leaves addr unchanged)
 493+ 2150                              New_Def C_FIND, "(FIND)", is_code, is_normal
 493+ 2150             >
 493+ 2150             >Dict_Ptr        defl    $
 493+ 2150             >
 493+ 2150             >//              ______________________________________________________________________
 493+ 2150             >//              Heap part
 493+ 2150             >
 493+ 2150             >
 493+ 2150             >                org     (Heap_Ptr & $1FFF) + $E000
 493+ E10A             >
 493+ E10A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 493+ E10A             >Latest_Definition defl  Heap_Ptr
 493+ E10A             >
 493+ E10A             >                // dummy db directives used to calculate length of namec
 493+ E10A 28 46 49 4E >                db      "(FIND)"
 493+ E10E 44 29       >
 493+ E110             >len_NFA         defl    $ - temp_NFA
 493+ E110             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 493+ E10A             >
 493+ E10A 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 493+ E10B 28 46 49 4E >                db      "(FIND)"               // name string in 7-bit ascii, but
 493+ E10F 44 29       >
 493+ E111             >                org     $-1                 // alter last byte of Name just above to set
 493+ E110 A9          >                db      {b $} | END_BIT     // msb as name end
 493+ E111             >
 493+ E111 00 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 493+ E113             >Prev_Ptr        defl    Heap_Ptr
 493+ E113             >
 493+ E113             >mirror_Ptr      defl    $
 493+ E113             >
 493+ E113 52 21       >                dw      Dict_Ptr + 2        // xt
 493+ E115             >Heap_Ptr        defl    $ - $E000           // save current HP
 493+ E115             >
 493+ E115             >Current_HP      defl  $ - $E000             // used to set HP once!
 493+ E115             >
 493+ E115             >//              ______________________________________________________________________
 493+ E115             >//              Dictionary part
 493+ E115             >
 493+ E115             >                org     Dict_Ptr
 493+ 2150             >
 493+ 2150 13 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 493+ 2152             >
 493+ 2152             >C_FIND:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 493+ 2152 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 493+ 2152 ~           >
 493+ 2152 ~           >
 493+ 2152             >                endif           ; ok        // for other definitions it "points" the correct handler
 493+ 2152             >                // Use of "; ok" to suppress "warning[fwdref]"
 493+ 2152             >
 493+ 2152             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 494+ 2152 D9                           exx
 495+ 2153 CD 36 21                     call    MMU7_read
 496+ 2156 D9                           exx
 497+ 2157 6F                           ld      l, a
 498+ 2158 D9                           exx
 499+ 2159
 500+ 2159 D1                           pop     de                      // de has dictionary pointer
 501+ 215A              Find_VocabularyLoop:
 502+ 215A 7A                               ld      a, d
 503+ 215B D6 60                            sub     $60
 504+ 215D 30 08                            jr      nc, Find_far_endif
 505+ 215F EB                                   ex      de, hl
 506+ 2160 CD 41 21                             call    TO_FAR_rout
 507+ 2163 EB                                   ex      de, hl
 508+ 2164 ED 92 57                             nextreg 87, a
 509+ 2167              Find_far_endif:
 510+ 2167 E1                               pop     hl                  // string pointer to search for
 511+ 2168 E5                               push    hl                  // keep it on stack too for the end.
 512+ 2169 1A                               ld      a, (de)             // save NFA length byte
 513+ 216A 08                               ex      af,af'              // for later use (!)
 514+ 216B 1A                               ld      a, (de)             // reload NFA length byte
 515+ 216C AE                               xor     (hl)                // check if same length
 516+ 216D E6 3F                            and     $3F                 // by resetting 3 high bits (flags)
 517+ 216F                                  // word and text haven't the same length, skip to next vocabulary entry
 518+ 216F 20 33                            jr      nz, Find_DifferentLenght
 519+ 2171
 520+ 2171              Find_ThisWord:      // begin loop
 521+ 2171 23                                   inc     hl
 522+ 2172 13                                   inc     de
 523+ 2173 1A                                   ld      a, (de)
 524+ 2174                                      // case insensitive option - begin
 525+ 2174                                      // push    bc
 526+ 2174 E6 80                                and     $80                 // split A in msb and the rest
 527+ 2176 47                                   ld      b, a
 528+ 2177 1A                                   ld      a, (de)
 529+ 2178 E6 7F                                and     $7F                 // ... the rest (lower 7 bits)
 530+ 217A CD 0F 21                             call    Case_Sensitive      // uppercase routine
 531+ 217D 4F                                   ld      c, a
 532+ 217E 7E                                   ld      a, (hl)
 533+ 217F CD 0F 21                             call    Case_Sensitive      // uppercase routine
 534+ 2182 A9                                   xor     c
 535+ 2183 A8                                   xor     b
 536+ 2184                                      // pop     bc
 537+ 2184                                      // case insensitive option - end
 538+ 2184 87                                   add     a                   // ignore msb during compare
 539+ 2185 20 1B                                jr      nz, Find_DidntMatch  // jump if doesn't match (*)
 540+ 2187
 541+ 2187                                  // loop back until last byte msb is found set
 542+ 2187                                  // that bit marks the ending char of this word
 543+ 2187 30 E8                            jr      nc, Find_ThisWord
 544+ 2189
 545+ 2189                                  // match found !
 546+ 2189 21 03 00                         ld      hl, 3               // 3 bytes for CFA offset to skip LFA
 547+ 218C 19                               add     hl, de
 548+ 218D
 549+ 218D                              //  ld      a, h
 550+ 218D                              //  and     $E0
 551+ 218D                              //  xor     h
 552+ 218D                              //  jr      nz, Non_MMU7
 553+ 218D                                  //  call    MMU7_read
 554+ 218D                                  //  dec     a
 555+ 218D                                  //  jr      z, Non_MMU7
 556+ 218D 5E                                       ld      e, (hl)
 557+ 218E 23                                       inc     hl
 558+ 218F 56                                       ld      d, (hl)
 559+ 2190 EB                                       ex      de, hl
 560+ 2191              //Non_MMU7:
 561+ 2191 E3                               ex      (sp), hl            // CFA on stack and drop addr
 562+ 2192 08                               ex      af, af'             // retrieve NFA byte (!)
 563+ 2193 5F                               ld      e, a
 564+ 2194 16 00                            ld      d, 0
 565+ 2196 21 FF FF                         ld      hl, -1
 566+ 2199 D5                               push    de
 567+ 219A E5                               push    hl
 568+ 219B D9                               exx
 569+ 219C 7D                               ld      a, l
 570+ 219D ED 92 57                         nextreg 87, a
 571+ 21A0                                  next
 571+ 21A0 DD E9       >                jp      (ix)
 572+ 21A2
 573+ 21A2              Find_DidntMatch: // didn't match (*)
 574+ 21A2 38 05                            jr      c,  Find_WordEnd   // jump if not end of word (**)
 575+ 21A4
 576+ 21A4              Find_DifferentLenght:
 577+ 21A4                                  // consume chars until the end of the word
 578+ 21A4                                  // that is last byte msb is found set
 579+ 21A4 13                                   inc     de
 580+ 21A5 1A                                   ld      a, (de)
 581+ 21A6 87                                   add     a, a
 582+ 21A7 30 FB                            jr      nc, Find_DifferentLenght
 583+ 21A9
 584+ 21A9              Find_WordEnd:   // word-end  found (**)
 585+ 21A9                                  // take LFA and use it
 586+ 21A9 13                               inc     de
 587+ 21AA EB                               ex      de, hl
 588+ 21AB 5E                               ld      e, (hl)
 589+ 21AC 23                               inc     hl
 590+ 21AD 56                               ld      d, (hl)
 591+ 21AE 7A                               ld      a, d
 592+ 21AF B3                               or      e
 593+ 21B0
 594+ 21B0                              // loop until end of vocabulary
 595+ 21B0 20 A8                        jr      nz, Find_VocabularyLoop
 596+ 21B2
 597+ 21B2 E1                           pop     hl              // without this, leaves addr unchanged
 598+ 21B3 21 00 00                     ld      hl, 0
 599+ 21B6 E5                           push    hl
 600+ 21B7 D9                           exx
 601+ 21B8 7D                           ld      a, l
 602+ 21B9 ED 92 57                     nextreg 87, a
 603+ 21BC                              next
 603+ 21BC DD E9       >                jp      (ix)
 604+ 21BE
 605+ 21BE              //  ______________________________________________________________________
 606+ 21BE              //
 607+ 21BE              // enclose      a c -- a  n1 n2 n3
 608+ 21BE              // starting from a, using delimiter c, determines the offsets:
 609+ 21BE              //   n1   the first character non-delimiter
 610+ 21BE              //   n2   the first delimiter after the text
 611+ 21BE              //   n3   the first character non enclosed.
 612+ 21BE              // This procedure does not go beyond a 'nul' ASCII (0x00) that represents
 613+ 21BE              // an uncoditional delimiter.
 614+ 21BE              // Examples:
 615+ 21BE              //   i:	c  c  x  x  x  c  x	 -- 2  5  6
 616+ 21BE              //  ii:	c  c  x  x  x  'nul' -- 2  5  5
 617+ 21BE              // iii:	c  c  'nul'          -- 2  3  2
 618+ 21BE                              New_Def ENCLOSE, "ENCLOSE", is_code, is_normal
 618+ 21BE             >
 618+ 21BE             >Dict_Ptr        defl    $
 618+ 21BE             >
 618+ 21BE             >//              ______________________________________________________________________
 618+ 21BE             >//              Heap part
 618+ 21BE             >
 618+ 21BE             >
 618+ 21BE             >                org     (Heap_Ptr & $1FFF) + $E000
 618+ E115             >
 618+ E115             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 618+ E115             >Latest_Definition defl  Heap_Ptr
 618+ E115             >
 618+ E115             >                // dummy db directives used to calculate length of namec
 618+ E115 45 4E 43 4C >                db      "ENCLOSE"
 618+ E119 4F 53 45    >
 618+ E11C             >len_NFA         defl    $ - temp_NFA
 618+ E11C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 618+ E115             >
 618+ E115 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 618+ E116 45 4E 43 4C >                db      "ENCLOSE"               // name string in 7-bit ascii, but
 618+ E11A 4F 53 45    >
 618+ E11D             >                org     $-1                 // alter last byte of Name just above to set
 618+ E11C C5          >                db      {b $} | END_BIT     // msb as name end
 618+ E11D             >
 618+ E11D 0A 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 618+ E11F             >Prev_Ptr        defl    Heap_Ptr
 618+ E11F             >
 618+ E11F             >mirror_Ptr      defl    $
 618+ E11F             >
 618+ E11F C0 21       >                dw      Dict_Ptr + 2        // xt
 618+ E121             >Heap_Ptr        defl    $ - $E000           // save current HP
 618+ E121             >
 618+ E121             >Current_HP      defl  $ - $E000             // used to set HP once!
 618+ E121             >
 618+ E121             >//              ______________________________________________________________________
 618+ E121             >//              Dictionary part
 618+ E121             >
 618+ E121             >                org     Dict_Ptr
 618+ 21BE             >
 618+ 21BE 1F 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 618+ 21C0             >
 618+ 21C0             >ENCLOSE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 618+ 21C0 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 618+ 21C0 ~           >
 618+ 21C0 ~           >
 618+ 21C0             >                endif           ; ok        // for other definitions it "points" the correct handler
 618+ 21C0             >                // Use of "; ok" to suppress "warning[fwdref]"
 618+ 21C0             >
 618+ 21C0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 619+ 21C0 D9                           exx
 620+ 21C1 D1                           pop     de                  //  e has the character
 621+ 21C2 E1                           pop     hl                  // hl has the string address
 622+ 21C3 E5                           push    hl
 623+ 21C4 7B                           ld      a, e
 624+ 21C5 11 FF FF                     ld      de, -1              // let's start from -1
 625+ 21C8 2B                           dec     hl
 626+ 21C9              Enclose_NonDelimiter:
 627+ 21C9                              // find first non delimiter
 628+ 21C9 23                               inc     hl
 629+ 21CA 13                               inc     de
 630+ 21CB BE                               cp      (hl)
 631+ 21CC 28 FB                        jr      z, Enclose_NonDelimiter
 632+ 21CE D5                           push    de
 633+ 21CF
 634+ 21CF                              // push    bc                  // save Instruction Pointer
 635+ 21CF
 636+ 21CF 4F                           ld      c, a                // save char
 637+ 21D0 7E                           ld      a, (hl)
 638+ 21D1 A7                           and     a                   // stop if 0x00
 639+ 21D2 20 07                        jr      nz, Enclose_NextChar
 640+ 21D4                              /// case iii. no more character in string
 641+ 21D4                                  // pop     bc                  // restore Instruction Pointer
 642+ 21D4 13                               inc     de
 643+ 21D5 D5                               push    de
 644+ 21D6 1B                               dec     de
 645+ 21D7 D5                               push    de
 646+ 21D8 D9                               exx
 647+ 21D9                                  next
 647+ 21D9 DD E9       >                jp      (ix)
 648+ 21DB              Enclose_NextChar:
 649+ 21DB 79                               ld      a, c
 650+ 21DC 23                               inc     hl
 651+ 21DD 13                               inc     de
 652+ 21DE BE                               cp      (hl)
 653+ 21DF 20 06                            jr      nz, Enclose_NonSeparator
 654+ 21E1                                      // case i. first non enclosed
 655+ 21E1                                      // pop     bc                  // restore Instruction Pointer
 656+ 21E1 D5                                   push    de
 657+ 21E2 13                                   inc     de
 658+ 21E3 D5                                   push    de
 659+ 21E4 D9                                   exx
 660+ 21E5                                      next
 660+ 21E5 DD E9       >                jp      (ix)
 661+ 21E7              Enclose_NonSeparator:
 662+ 21E7 7E                               ld      a, (hl)
 663+ 21E8 A7                               and     a
 664+ 21E9 20 F0                        jr      nz, Enclose_NextChar
 665+ 21EB
 666+ 21EB                              // case ii. separator & terminator
 667+ 21EB                              // pop     bc                  // restore Instruction Pointer
 668+ 21EB D5                           push    de
 669+ 21EC D5                           push    de
 670+ 21ED D9                           exx
 671+ 21EE                              next
 671+ 21EE DD E9       >                jp      (ix)
 672+ 21F0
 673+ 21F0              //  ______________________________________________________________________
 674+ 21F0              //
 675+ 21F0              // (map)        a2 a1 n c1 -- c2
 676+ 21F0              // translate character c1 using mapping string a2 and a2
 677+ 21F0              // if c1 is not present within string a1 then
 678+ 21F0              // c2 = c2 if it is not translated. n is the length of both a1 and a2.
 679+ 21F0                              New_Def C_MAP, "(MAP)", is_code, is_normal
 679+ 21F0             >
 679+ 21F0             >Dict_Ptr        defl    $
 679+ 21F0             >
 679+ 21F0             >//              ______________________________________________________________________
 679+ 21F0             >//              Heap part
 679+ 21F0             >
 679+ 21F0             >
 679+ 21F0             >                org     (Heap_Ptr & $1FFF) + $E000
 679+ E121             >
 679+ E121             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 679+ E121             >Latest_Definition defl  Heap_Ptr
 679+ E121             >
 679+ E121             >                // dummy db directives used to calculate length of namec
 679+ E121 28 4D 41 50 >                db      "(MAP)"
 679+ E125 29          >
 679+ E126             >len_NFA         defl    $ - temp_NFA
 679+ E126             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 679+ E121             >
 679+ E121 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 679+ E122 28 4D 41 50 >                db      "(MAP)"               // name string in 7-bit ascii, but
 679+ E126 29          >
 679+ E127             >                org     $-1                 // alter last byte of Name just above to set
 679+ E126 A9          >                db      {b $} | END_BIT     // msb as name end
 679+ E127             >
 679+ E127 15 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 679+ E129             >Prev_Ptr        defl    Heap_Ptr
 679+ E129             >
 679+ E129             >mirror_Ptr      defl    $
 679+ E129             >
 679+ E129 F2 21       >                dw      Dict_Ptr + 2        // xt
 679+ E12B             >Heap_Ptr        defl    $ - $E000           // save current HP
 679+ E12B             >
 679+ E12B             >Current_HP      defl  $ - $E000             // used to set HP once!
 679+ E12B             >
 679+ E12B             >//              ______________________________________________________________________
 679+ E12B             >//              Dictionary part
 679+ E12B             >
 679+ E12B             >                org     Dict_Ptr
 679+ 21F0             >
 679+ 21F0 29 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 679+ 21F2             >
 679+ 21F2             >C_MAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 679+ 21F2 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 679+ 21F2 ~           >
 679+ 21F2 ~           >
 679+ 21F2             >                endif           ; ok        // for other definitions it "points" the correct handler
 679+ 21F2             >                // Use of "; ok" to suppress "warning[fwdref]"
 679+ 21F2             >
 679+ 21F2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 680+ 21F2 D9                           exx
 681+ 21F3 E1                           pop     hl
 682+ 21F4 7D                           ld      a, l
 683+ 21F5 C1                           pop     bc
 684+ 21F6 E1                           pop     hl
 685+ 21F7 50                           ld      d, b
 686+ 21F8 59                           ld      e, c
 687+ 21F9 ED B1                        cpir
 688+ 21FB E1                           pop     hl
 689+ 21FC 20 05                        jr      nz, C_Map_Then
 689+ 21FE
 690+ 21FE 19                               add     hl, de
 691+ 21FF 2B                               dec     hl
 692+ 2200 ED 42                            sbc     hl, bc
 693+ 2202 7E                               ld      a, (hl)
 694+ 2203              C_Map_Then:
 695+ 2203 6F                           ld      l, a
 696+ 2204 26 00                        ld      h, 0
 697+ 2206 E5                           push    hl
 698+ 2207 D9                           exx
 699+ 2208                              next
 699+ 2208 DD E9       >                jp      (ix)
 700+ 220A
 701+ 220A              //  ______________________________________________________________________
 702+ 220A              //
 703+ 220A              // (compare)    a1 a2 n -- b
 704+ 220A              // this word performs a lexicographic compare of n bytes of text at address a1
 705+ 220A              // with n bytes of text at address a2. It returns numeric a value:
 706+ 220A              //  0 : if strings are equal
 707+ 220A              // +1 : if string at a1 greater than string at a2
 708+ 220A              // -1 : if string at a1 less than string at a2
 709+ 220A              // strings can be 256 bytes in length at most.
 710+ 220A                              New_Def C_COMPARE, "(COMPARE)", is_code, is_normal
 710+ 220A             >
 710+ 220A             >Dict_Ptr        defl    $
 710+ 220A             >
 710+ 220A             >//              ______________________________________________________________________
 710+ 220A             >//              Heap part
 710+ 220A             >
 710+ 220A             >
 710+ 220A             >                org     (Heap_Ptr & $1FFF) + $E000
 710+ E12B             >
 710+ E12B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 710+ E12B             >Latest_Definition defl  Heap_Ptr
 710+ E12B             >
 710+ E12B             >                // dummy db directives used to calculate length of namec
 710+ E12B 28 43 4F 4D >                db      "(COMPARE)"
 710+ E12F 50 41 52 45 >
 710+ E133 29          >
 710+ E134             >len_NFA         defl    $ - temp_NFA
 710+ E134             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 710+ E12B             >
 710+ E12B 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 710+ E12C 28 43 4F 4D >                db      "(COMPARE)"               // name string in 7-bit ascii, but
 710+ E130 50 41 52 45 >
 710+ E134 29          >
 710+ E135             >                org     $-1                 // alter last byte of Name just above to set
 710+ E134 A9          >                db      {b $} | END_BIT     // msb as name end
 710+ E135             >
 710+ E135 21 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 710+ E137             >Prev_Ptr        defl    Heap_Ptr
 710+ E137             >
 710+ E137             >mirror_Ptr      defl    $
 710+ E137             >
 710+ E137 0C 22       >                dw      Dict_Ptr + 2        // xt
 710+ E139             >Heap_Ptr        defl    $ - $E000           // save current HP
 710+ E139             >
 710+ E139             >Current_HP      defl  $ - $E000             // used to set HP once!
 710+ E139             >
 710+ E139             >//              ______________________________________________________________________
 710+ E139             >//              Dictionary part
 710+ E139             >
 710+ E139             >                org     Dict_Ptr
 710+ 220A             >
 710+ 220A 37 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 710+ 220C             >
 710+ 220C             >C_COMPARE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 710+ 220C ~           >                call    runcode ; ok        // for primitive definitions  actual code
 710+ 220C ~           >
 710+ 220C ~           >
 710+ 220C             >                endif           ; ok        // for other definitions it "points" the correct handler
 710+ 220C             >                // Use of "; ok" to suppress "warning[fwdref]"
 710+ 220C             >
 710+ 220C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 711+ 220C D9                           exx
 712+ 220D E1                           pop     hl                  // Number of bytes
 713+ 220E 7D                           ld      a, l
 714+ 220F E1                           pop     hl                  // hl points string a2
 715+ 2210 D1                           pop     de                  // hl points string a1
 716+ 2211              //              push    bc                  // Instruction pointer on stack
 717+ 2211 47                           ld      b, a
 718+ 2212              C_Compare_Loop:
 719+ 2212 7E                               ld      a, (hl)
 720+ 2213 CD 0F 21                         call    Case_Sensitive
 721+ 2216 4F                               ld      c, a
 722+ 2217 1A                               ld      a, (de)
 723+ 2218 CD 0F 21                         call    Case_Sensitive
 724+ 221B B9                               cp      c
 725+ 221C 13                               inc     de
 726+ 221D 23                               inc     hl
 727+ 221E 28 0E                            jr      z, C_Compare_Equal
 728+ 2220 38 05                                jr      c, C_Compare_NotLessThan  // If LessThan
 729+ 2222 21 01 00                                 ld      hl, 1               // a1 gt a2
 730+ 2225 18 03                                jr      C_Compare_Then      // Else
 731+ 2227              C_Compare_NotLessThan:
 732+ 2227 21 FF FF                                 ld      hl, -1              // a1 lt a2
 733+ 222A              C_Compare_Then:                                 // Endif
 734+ 222A              //                      pop     bc              // restore Instruction Pointer
 735+ 222A E5                                   push    hl
 736+ 222B D9                                   exx
 737+ 222C
 738+ 222C                                      next
 738+ 222C DD E9       >                jp      (ix)
 739+ 222E
 740+ 222E              C_Compare_Equal:
 741+ 222E 10 E2                        djnz    C_Compare_Loop
 742+ 2230 21 00 00                     ld      hl, 0               // a1 eq a2
 743+ 2233              //              pop     bc                  // restore Instruction Pointer
 744+ 2233 E5                           push    hl
 745+ 2234 D9                           exx
 746+ 2235
 747+ 2235                              next
 747+ 2235 DD E9       >                jp      (ix)
 748+ 2237
 749+ 2237              //  ______________________________________________________________________
 750+ 2237              //
 751+ 2237              // emitc        c --
 752+ 2237              // low level emit, calls ROM routine at #10 to send a character to
 753+ 2237              // the the current channel (see SELECT to change stream-channel)
 754+ 2237                              New_Def EMITC, "EMITC", is_code, is_normal
 754+ 2237             >
 754+ 2237             >Dict_Ptr        defl    $
 754+ 2237             >
 754+ 2237             >//              ______________________________________________________________________
 754+ 2237             >//              Heap part
 754+ 2237             >
 754+ 2237             >
 754+ 2237             >                org     (Heap_Ptr & $1FFF) + $E000
 754+ E139             >
 754+ E139             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 754+ E139             >Latest_Definition defl  Heap_Ptr
 754+ E139             >
 754+ E139             >                // dummy db directives used to calculate length of namec
 754+ E139 45 4D 49 54 >                db      "EMITC"
 754+ E13D 43          >
 754+ E13E             >len_NFA         defl    $ - temp_NFA
 754+ E13E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 754+ E139             >
 754+ E139 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 754+ E13A 45 4D 49 54 >                db      "EMITC"               // name string in 7-bit ascii, but
 754+ E13E 43          >
 754+ E13F             >                org     $-1                 // alter last byte of Name just above to set
 754+ E13E C3          >                db      {b $} | END_BIT     // msb as name end
 754+ E13F             >
 754+ E13F 2B 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 754+ E141             >Prev_Ptr        defl    Heap_Ptr
 754+ E141             >
 754+ E141             >mirror_Ptr      defl    $
 754+ E141             >
 754+ E141 39 22       >                dw      Dict_Ptr + 2        // xt
 754+ E143             >Heap_Ptr        defl    $ - $E000           // save current HP
 754+ E143             >
 754+ E143             >Current_HP      defl  $ - $E000             // used to set HP once!
 754+ E143             >
 754+ E143             >//              ______________________________________________________________________
 754+ E143             >//              Dictionary part
 754+ E143             >
 754+ E143             >                org     Dict_Ptr
 754+ 2237             >
 754+ 2237 41 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 754+ 2239             >
 754+ 2239             >EMITC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 754+ 2239 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 754+ 2239 ~           >
 754+ 2239 ~           >
 754+ 2239             >                endif           ; ok        // for other definitions it "points" the correct handler
 754+ 2239             >                // Use of "; ok" to suppress "warning[fwdref]"
 754+ 2239             >
 754+ 2239             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 755+ 2239 E1                           pop     hl
 756+ 223A 7D                           ld      a, l
 757+ 223B              Emitc_Ptr:
 758+ 223B C5                           push    bc
 759+ 223C D5                           push    de
 760+ 223D DD E5                        push    ix
 761+ 223F F3                           di
 762+ 2240 D7                           rst     $10
 763+ 2241 FB                           ei
 764+ 2242 DD E1                        pop     ix
 765+ 2244 D1                           pop     de
 766+ 2245 C1                           pop     bc
 767+ 2246              //              ld      a, -1            // max possible
 768+ 2246              //              ld      (SCR_CT), a
 769+ 2246                              next
 769+ 2246 DD E9       >                jp      (ix)
 770+ 2248
 771+ 2248              //  ______________________________________________________________________
 772+ 2248              //
 773+ 2248              // cr           --
 774+ 2248              // send a CR via EMITC
 775+ 2248                              Colon_Def CR, "CR", is_normal
 775+ 2248             >                New_Def  CR, "CR", Enter_Ptr, is_normal ; ok
 775+ 2248             >
 775+ 2248             >Dict_Ptr        defl    $
 775+ 2248             >
 775+ 2248             >//              ______________________________________________________________________
 775+ 2248             >//              Heap part
 775+ 2248             >
 775+ 2248             >
 775+ 2248             >                org     (Heap_Ptr & $1FFF) + $E000
 775+ E143             >
 775+ E143             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 775+ E143             >Latest_Definition defl  Heap_Ptr
 775+ E143             >
 775+ E143             >                // dummy db directives used to calculate length of namec
 775+ E143 43 52       >                db      "CR"
 775+ E145             >len_NFA         defl    $ - temp_NFA
 775+ E145             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 775+ E143             >
 775+ E143 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 775+ E144 43 52       >                db      "CR"               // name string in 7-bit ascii, but
 775+ E146             >                org     $-1                 // alter last byte of Name just above to set
 775+ E145 D2          >                db      {b $} | END_BIT     // msb as name end
 775+ E146             >
 775+ E146 39 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 775+ E148             >Prev_Ptr        defl    Heap_Ptr
 775+ E148             >
 775+ E148             >mirror_Ptr      defl    $
 775+ E148             >
 775+ E148 4A 22       >                dw      Dict_Ptr + 2        // xt
 775+ E14A             >Heap_Ptr        defl    $ - $E000           // save current HP
 775+ E14A             >
 775+ E14A             >Current_HP      defl  $ - $E000             // used to set HP once!
 775+ E14A             >
 775+ E14A             >//              ______________________________________________________________________
 775+ E14A             >//              Dictionary part
 775+ E14A             >
 775+ E14A             >                org     Dict_Ptr
 775+ 2248             >
 775+ 2248 48 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 775+ 224A             >
 775+ 224A             >CR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 775+ 224A CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 775+ 224D             >
 775+ 224D             >
 775+ 224D             >                endif           ; ok        // for other definitions it "points" the correct handler
 775+ 224D             >                // Use of "; ok" to suppress "warning[fwdref]"
 775+ 224D             >
 775+ 224D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 776+ 224D 3D 20 1A 00                  dw      LIT, 26, EMITC
 776+ 2251 39 22
 777+ 2253 3F 27 39 22                  dw      ZERO, EMITC
 778+ 2257 3D 20 0D 00                  dw      LIT, 13, EMITC
 778+ 225B 39 22
 779+ 225D 09 25                        dw      EXIT
 780+ 225F
 781+ 225F              Emitc_Vec:
 782+ 225F 98 22                        dw      C_Emit_Printable  // comma
 783+ 2261 9F 22                        dw      C_Emit_Bel        // bel
 784+ 2263 98 22                        dw      C_Emit_Printable  // bs
 785+ 2265 B9 22                        dw      C_Emit_Tab        // tab
 786+ 2267 98 22                        dw      C_Emit_Printable  // cr
 787+ 2269 BD 22                        dw      C_Emit_NL         // lf (unix newline)
 788+ 226B 98 22                        dw      C_Emit_Printable  // blank
 789+ 226D 98 22                        dw      C_Emit_Printable  // blank
 790+ 226F
 791+ 226F              Emit_Selector_Start:
 792+ 226F 06                           db      $06                 // comma
 793+ 2270 07                           db      $07                 // bel
 794+ 2271 08                           db      $08                 // bs
 795+ 2272 09                           db      $09                 // tab
 796+ 2273 0D                           db      $0D                 // cr
 797+ 2274 0A                           db      $0A                 // lf (unix newline)
 798+ 2275 20                           db      $20
 799+ 2276              Emit_Selector_End:
 800+ 2276 20                           db      $20
 801+ 2277
 802+ 2277              //  ______________________________________________________________________
 803+ 2277              //
 804+ 2277              // (?emit)      c1 -- c2 | c1
 805+ 2277              // decode a character to be sent via EMIT
 806+ 2277              // search first the Emit_Selector table, if found jump to the corresponding routine in Emit_Vector
 807+ 2277              // the routine should resolve anything and convert the character anyway.
 808+ 2277                              New_Def C_EMIT, "(?EMIT)", is_code, is_normal
 808+ 2277             >
 808+ 2277             >Dict_Ptr        defl    $
 808+ 2277             >
 808+ 2277             >//              ______________________________________________________________________
 808+ 2277             >//              Heap part
 808+ 2277             >
 808+ 2277             >
 808+ 2277             >                org     (Heap_Ptr & $1FFF) + $E000
 808+ E14A             >
 808+ E14A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 808+ E14A             >Latest_Definition defl  Heap_Ptr
 808+ E14A             >
 808+ E14A             >                // dummy db directives used to calculate length of namec
 808+ E14A 28 3F 45 4D >                db      "(?EMIT)"
 808+ E14E 49 54 29    >
 808+ E151             >len_NFA         defl    $ - temp_NFA
 808+ E151             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 808+ E14A             >
 808+ E14A 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 808+ E14B 28 3F 45 4D >                db      "(?EMIT)"               // name string in 7-bit ascii, but
 808+ E14F 49 54 29    >
 808+ E152             >                org     $-1                 // alter last byte of Name just above to set
 808+ E151 A9          >                db      {b $} | END_BIT     // msb as name end
 808+ E152             >
 808+ E152 43 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 808+ E154             >Prev_Ptr        defl    Heap_Ptr
 808+ E154             >
 808+ E154             >mirror_Ptr      defl    $
 808+ E154             >
 808+ E154 79 22       >                dw      Dict_Ptr + 2        // xt
 808+ E156             >Heap_Ptr        defl    $ - $E000           // save current HP
 808+ E156             >
 808+ E156             >Current_HP      defl  $ - $E000             // used to set HP once!
 808+ E156             >
 808+ E156             >//              ______________________________________________________________________
 808+ E156             >//              Dictionary part
 808+ E156             >
 808+ E156             >                org     Dict_Ptr
 808+ 2277             >
 808+ 2277 54 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 808+ 2279             >
 808+ 2279             >C_EMIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 808+ 2279 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 808+ 2279 ~           >
 808+ 2279 ~           >
 808+ 2279             >                endif           ; ok        // for other definitions it "points" the correct handler
 808+ 2279             >                // Use of "; ok" to suppress "warning[fwdref]"
 808+ 2279             >
 808+ 2279             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 809+ 2279 D9                           exx
 810+ 227A D1                           pop     de
 811+ 227B 7B                           ld      a, e                //  de has c1
 812+ 227C E6 7F                        and     $7F                 // 7-bit ascii only
 813+ 227E                              // push    bc                  // save Instruction Pointer
 814+ 227E 01 08 00                     ld      bc, Emit_Selector_End - Emit_Selector_Start + 1
 815+ 2281 21 76 22                     ld      hl, Emit_Selector_End
 816+ 2284 ED B9                        cpdr                        // search for c1 in Emit_Selector table, backward
 817+ 2286 20 0A                        jr      nz, C_Emit_Not_Found
 818+ 2288                                  // Found then decode it
 819+ 2288 21 5F 22                         ld      hl, Emitc_Vec
 820+ 228B 09                               add     hl, bc
 821+ 228C 09                               add     hl, bc
 822+ 228D 5E                               ld      e, (hl)
 823+ 228E 23                               inc     hl
 824+ 228F 56                               ld      d, (hl)
 825+ 2290 EB                               ex      de, hl
 826+ 2291                                  // pop     bc                  // restore Instruction Pointer
 827+ 2291 E9                               jp      (hl)                // one of the following labels
 828+ 2292              C_Emit_Not_Found:
 829+ 2292                              // pop     bc                  // restore Instruction Pointer
 830+ 2292 FE 20                        cp      BLANK_CHAR          // cp $20 non-printable check
 831+ 2294 30 02                        jr      nc, C_Emit_Printable
 832+ 2296 3E 00                            ld      a, NUL_CHAR         // NUL is never "printed"
 833+ 2298              C_Emit_Printable:
 834+ 2298 6F                           ld      l, a
 835+ 2299 26 00                        ld      h, 0
 836+ 229B E5                           push    hl
 837+ 229C D9                           exx
 838+ 229D                              next
 838+ 229D DD E9       >                jp      (ix)
 839+ 229F
 840+ 229F              C_Emit_Bel:
 841+ 229F D9                            exx
 842+ 22A0 C5                           push    bc                  // save Instruction Pointer
 843+ 22A1 D5                           push    de
 844+ 22A2 11 00 01                     ld      de, $0100
 845+ 22A5 21 00 02                     ld      hl, $0200
 846+ 22A8 DD E5                        push    ix                  // save Next Pointer
 847+ 22AA                              // call    $03B6               // bleep Standard-ROM routine
 848+ 22AA F3                           di
 849+ 22AB DF                           rst     $18
 850+ 22AC B6 03                        defw    $03B6
 851+ 22AE FB                           ei
 852+ 22AF DD E1                        pop     ix                  // restore Next Pointer
 853+ 22B1 D1                           pop     de
 854+ 22B2 C1                           pop     bc                  // restore Instruction Pointer
 855+ 22B3 21 00 00                     ld      hl, NUL_CHAR
 856+ 22B6 E5                           push    hl
 857+ 22B7                              next
 857+ 22B7 DD E9       >                jp      (ix)
 858+ 22B9
 859+ 22B9 3E 06        C_Emit_Tab:     ld      a, COMMA_CHAR
 860+ 22BB 18 DB                        jr      C_Emit_Printable
 861+ 22BD                          //  push    hl
 862+ 22BD                          //  exx
 863+ 22BD                          //  next
 864+ 22BD
 865+ 22BD 3E 0D        C_Emit_NL       ld      a, CR_CHAR           // 0x0A --> 0x0D  à la Spectrum
 866+ 22BF 18 D7                        jr      C_Emit_Printable
 867+ 22C1                          //  push    hl
 868+ 22C1                          //  exx
 869+ 22C1                          //  next
 870+ 22C1
 871+ 22C1              //  ______________________________________________________________________
 872+ 22C1
 873+ 22C1              Key_Table:
 874+ 22C1 E2                           db      $E2                 //  0: STOP  --> SYMBOL+A : ~
 875+ 22C2 C3                           db      $C3                 //  1: NOT   --> SYMBOL+S : |
 876+ 22C3 CD                           db      $CD                 //  2: STEP  --> SYMBOl+D : //
 877+ 22C4 CC                           db      $CC                 //  3: TO    --> SYMBOL+F : {
 878+ 22C5 CB                           db      $CB                 //  4: THEN  --> SYMBOL+G : }
 879+ 22C6 C6                           db      $C6                 //  5: AND   --> SYMBOL+Y : [
 880+ 22C7 C5                           db      $C5                 //  6: OR    --> SYMBOL+U : ]
 881+ 22C8 AC                           db      $AC                 //  7: AT    --> SYMBOL+I : (C) copyright symbol
 882+ 22C9 C7                           db      $C7                 //  8: <=    --> same as SHIFT-1 [EDIT]
 883+ 22CA C8                           db      $C8                 //  9: >=    --> same as SHIFT-0 [BACKSPACE]
 884+ 22CB C9                           db      $C9                 // 10: <>    --> SYMBOL+W is the same as CAPS (toggle) SHIFT+2
 885+ 22CC              Key_MapTo:
 886+ 22CC 18                           db      $18                 // 10: ^X
 887+ 22CD 03                           db      $03                 //  9: ^C
 888+ 22CE 1A                           db      $1A                 //  8: ^Z
 889+ 22CF 7F                           db      $7F                 //  7: SYMBOL+I : (C) copyright symbol
 890+ 22D0 5D                           db      $5D                 //  6: SYMBOL+U : ]
 891+ 22D1 5B                           db      $5B                 //  5: SYMBOL+Y : [
 892+ 22D2 7D                           db      $7D                 //  4: SYMBOL+G : }
 893+ 22D3 7B                           db      $7B                 //  3: SYMBOL+F : {
 894+ 22D4 5C                           db      $5C                 //  2: SYMBOl+D : //
 895+ 22D5 7C                           db      $7C                 //  1: SYMBOL+S : |
 896+ 22D6 7E                           db      $7E                 //  0: SYMBOL+A : ~
 897+ 22D7
 898+ 22D7              //  ______________________________________________________________________
 899+ 22D7              //
 900+ 22D7              // curs         -- c
 901+ 22D7              // wait for a keypress
 902+ 22D7              // This definition need Standard ROM Interrupt to be served
 903+ 22D7
 904+ 22D7                              New_Def CUR, "CURS", is_code, is_normal
 904+ 22D7             >
 904+ 22D7             >Dict_Ptr        defl    $
 904+ 22D7             >
 904+ 22D7             >//              ______________________________________________________________________
 904+ 22D7             >//              Heap part
 904+ 22D7             >
 904+ 22D7             >
 904+ 22D7             >                org     (Heap_Ptr & $1FFF) + $E000
 904+ E156             >
 904+ E156             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 904+ E156             >Latest_Definition defl  Heap_Ptr
 904+ E156             >
 904+ E156             >                // dummy db directives used to calculate length of namec
 904+ E156 43 55 52 53 >                db      "CURS"
 904+ E15A             >len_NFA         defl    $ - temp_NFA
 904+ E15A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 904+ E156             >
 904+ E156 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 904+ E157 43 55 52 53 >                db      "CURS"               // name string in 7-bit ascii, but
 904+ E15B             >                org     $-1                 // alter last byte of Name just above to set
 904+ E15A D3          >                db      {b $} | END_BIT     // msb as name end
 904+ E15B             >
 904+ E15B 4A 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 904+ E15D             >Prev_Ptr        defl    Heap_Ptr
 904+ E15D             >
 904+ E15D             >mirror_Ptr      defl    $
 904+ E15D             >
 904+ E15D D9 22       >                dw      Dict_Ptr + 2        // xt
 904+ E15F             >Heap_Ptr        defl    $ - $E000           // save current HP
 904+ E15F             >
 904+ E15F             >Current_HP      defl  $ - $E000             // used to set HP once!
 904+ E15F             >
 904+ E15F             >//              ______________________________________________________________________
 904+ E15F             >//              Dictionary part
 904+ E15F             >
 904+ E15F             >                org     Dict_Ptr
 904+ 22D7             >
 904+ 22D7 5D 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 904+ 22D9             >
 904+ 22D9             >CUR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 904+ 22D9 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 904+ 22D9 ~           >
 904+ 22D9 ~           >
 904+ 22D9             >                endif           ; ok        // for other definitions it "points" the correct handler
 904+ 22D9             >                // Use of "; ok" to suppress "warning[fwdref]"
 904+ 22D9             >
 904+ 22D9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 905+ 22D9
 906+ 22D9 C5                           push    bc                  // save Instruction Pointer
 907+ 22DA D5                           push    de                  // save Return Stack Pointer
 908+ 22DB DD E5                        push    ix
 909+ 22DD ED 73 2C 20                  ld      (SP_Saved), sp      // be sure to not to be paged out.
 910+ 22E1                          //  ld      sp, Cold_origin - 5 // maybe $8000 in the future...
 911+ 22E1 31 00 5C                     ld      sp, TSTACK           // Carefully balanced from startup
 912+ 22E4 FD CB 01 AE                  res     5, (iy + 1)         // FLAGS (5C3A+1)
 913+ 22E8
 914+ 22E8              Cur_Wait:
 915+ 22E8 76                               halt
 916+ 22E9 3E 02                            ld      a, 2                // selec channel #2 (Upper Video)
 917+ 22EB                              //  call    $1601               // SELECT Standard-ROM Routine
 918+ 22EB DF                               rst     $18
 919+ 22EC 01 16                            dw      $1601
 920+ 22EE
 921+ 22EE                                  // software-flash: flips face every 320 ms
 922+ 22EE 3E 20                            ld      a, $20              // Timing based
 923+ 22F0 FD A6 3E                         and     (iy + $3E)          // FRAMES (5C3A+3E)
 924+ 22F3
 925+ 22F3 3A 28 20                         ld      a, (Block_Face)     // see origin.asm
 926+ 22F6 20 0C                            jr      nz, Cur_Cursor
 927+ 22F8 3A 29 20                             ld      a, (Half_Face)      // see origin.asm
 928+ 22FB FD CB 30 5E                          bit     3, (iy + $30)       // FLAGS2 (5C3A+$30) that is CAPS-LOCK
 929+ 22FF 28 03                                jr      z, Cur_Cursor
 930+ 2301 3A 2A 20                                 ld      a, (Underscore_Face) // see origin
 931+ 2304              Cur_Cursor:
 932+ 2304 D7                               rst     $10
 933+ 2305 3E 08                            ld      a, BACKSPACE_CHAR    // backspace
 934+ 2307 D7                               rst     $10
 935+ 2308 FD CB 01 6E                      bit     5, (iy + 1)         // FLAGS (5C3A+1)
 936+ 230C 28 DA                        jr      z, Cur_Wait
 937+ 230E
 938+ 230E 76                           halt    // this is to sync flashing cursor.
 939+ 230F
 940+ 230F 3E 20                        ld      a, BLANK_CHAR       // space to blank cursor
 941+ 2311 D7                           rst     $10
 942+ 2312 3E 08                        ld      a, BACKSPACE_CHAR   // backspace
 943+ 2314 D7                           rst     $10
 944+ 2315
 945+ 2315 ED 7B 2C 20                  ld      sp, (SP_Saved)
 946+ 2319
 947+ 2319 DD E1                        pop     ix
 948+ 231B D1                           pop     de                  // Restore Return Stack Pointer
 949+ 231C C1                           pop     bc                  // Restore Instruction Pointer
 950+ 231D                              next
 950+ 231D DD E9       >                jp      (ix)
 951+ 231F
 952+ 231F
 953+ 231F              //  ______________________________________________________________________
 954+ 231F              //
 955+ 231F              // key          -- c
 956+ 231F              // This definition need Standard ROM Interrupt to be served
 957+ 231F
 958+ 231F                              New_Def KEY, "KEY", is_code, is_normal
 958+ 231F             >
 958+ 231F             >Dict_Ptr        defl    $
 958+ 231F             >
 958+ 231F             >//              ______________________________________________________________________
 958+ 231F             >//              Heap part
 958+ 231F             >
 958+ 231F             >
 958+ 231F             >                org     (Heap_Ptr & $1FFF) + $E000
 958+ E15F             >
 958+ E15F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 958+ E15F             >Latest_Definition defl  Heap_Ptr
 958+ E15F             >
 958+ E15F             >                // dummy db directives used to calculate length of namec
 958+ E15F 4B 45 59    >                db      "KEY"
 958+ E162             >len_NFA         defl    $ - temp_NFA
 958+ E162             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 958+ E15F             >
 958+ E15F 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 958+ E160 4B 45 59    >                db      "KEY"               // name string in 7-bit ascii, but
 958+ E163             >                org     $-1                 // alter last byte of Name just above to set
 958+ E162 D9          >                db      {b $} | END_BIT     // msb as name end
 958+ E163             >
 958+ E163 56 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 958+ E165             >Prev_Ptr        defl    Heap_Ptr
 958+ E165             >
 958+ E165             >mirror_Ptr      defl    $
 958+ E165             >
 958+ E165 21 23       >                dw      Dict_Ptr + 2        // xt
 958+ E167             >Heap_Ptr        defl    $ - $E000           // save current HP
 958+ E167             >
 958+ E167             >Current_HP      defl  $ - $E000             // used to set HP once!
 958+ E167             >
 958+ E167             >//              ______________________________________________________________________
 958+ E167             >//              Dictionary part
 958+ E167             >
 958+ E167             >                org     Dict_Ptr
 958+ 231F             >
 958+ 231F 65 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 958+ 2321             >
 958+ 2321             >KEY:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 958+ 2321 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 958+ 2321 ~           >
 958+ 2321 ~           >
 958+ 2321             >                endif           ; ok        // for other definitions it "points" the correct handler
 958+ 2321             >                // Use of "; ok" to suppress "warning[fwdref]"
 958+ 2321             >
 958+ 2321             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 959+ 2321
 960+ 2321 C5                           push    bc                  // Save Instruction Pointer
 961+ 2322
 962+ 2322              Key_Wait:
 963+ 2322 FD CB 01 6E                      bit     5, (iy + 1)         // FLAGS (5C3A+1)
 964+ 2326 28 FA                        jr      z, Key_Wait
 965+ 2328
 966+ 2328 3A 08 5C                     ld      a, (LASTK)          // get typed character (5C08)
 967+ 232B
 968+ 232B                              // decode character from above table
 969+ 232B 21 C1 22                     ld      hl, Key_Table
 970+ 232E 01 0B 00                     ld      bc, $000B
 971+ 2331 ED B1                        cpir
 972+ 2333 20 05                        jr      nz, Key_DontMap
 973+ 2335 21 CC 22                         ld      hl, Key_MapTo
 974+ 2338 09                               add     hl, bc
 975+ 2339 7E                               ld      a, (hl)
 976+ 233A FE 06        Key_DontMap:    cp      $06                 // CAPS-LOCK management
 977+ 233C 20 09                        jr      nz, Key_NoCapsLock
 978+ 233E 21 6A 5C                         ld      hl, $5C6A           // FLAGS2
 979+ 2341 7E                               ld      a, (hl)
 980+ 2342 EE 08                            xor     $08
 981+ 2344 77                               ld      (hl), a
 982+ 2345 3E 00                            ld      a, NUL_CHAR
 983+ 2347 6F           Key_NoCapsLock: ld      l, a
 984+ 2348 26 00                        ld      h, 0                // Prepare TOS
 985+ 234A
 986+ 234A FD CB 01 AE                  res     5, (iy + 1)         // FLAGS (5C3A+1)
 987+ 234E
 988+ 234E C1                           pop     bc                  // Restore Instruction Pointer
 989+ 234F
 990+ 234F                              psh1
 990+ 234F E5          >                push    hl
 990+ 2350 DD E9       >                jp      (ix)
 991+ 2352
 992+ 2352
 993+ 2352              //  ______________________________________________________________________
 994+ 2352              //
 995+ 2352              // click        --
 996+ 2352              // This definition need Standard ROM Interrupt to be served
 997+ 2352              //
 998+ 2352              //              New_Def CLICK, "CLICK", is_code, is_normal
 999+ 2352              //
1000+ 2352              //                push    bc
1001+ 2352              //              ld      a, ($5C48)          // BORDCR system variable
1002+ 2352              //              rra
1003+ 2352              //              rra
1004+ 2352              //              rra
1005+ 2352              //              or      $18                 // quick'n'dirty click
1006+ 2352              //              out     ($fe), a
1007+ 2352              //              ld      b, 0
1008+ 2352              //              djnz    $                   // wait loop
1009+ 2352              //              xor     $18
1010+ 2352              //              out     ($fe), a
1011+ 2352              //                pop     bc
1012+ 2352
1013+ 2352              //              next
1014+ 2352
1015+ 2352              //  ______________________________________________________________________
1016+ 2352              //
1017+ 2352              // key?         -- f
1018+ 2352              // key available
1019+ 2352              //
1020+ 2352              //              New_Def KEY_Q, "KEY?", is_code, is_normal
1021+ 2352              //
1022+ 2352              //              ld      hl, 0000
1023+ 2352              //              bit     5, (iy + 1)         // FLAGS (5C3A+1)
1024+ 2352              //              jr      z, Key_Q
1025+ 2352              //                  dec     hl
1026+ 2352              // Key_Q:
1027+ 2352              //                psh1
1028+ 2352              //              next
1029+ 2352
1030+ 2352              //  ______________________________________________________________________
1031+ 2352              //
1032+ 2352              // ?terminal    -- FALSE | TRUE
1033+ 2352              // test for BREAK keypress
1034+ 2352                              New_Def QTERMINAL, "?TERMINAL", is_code, is_normal
1034+ 2352             >
1034+ 2352             >Dict_Ptr        defl    $
1034+ 2352             >
1034+ 2352             >//              ______________________________________________________________________
1034+ 2352             >//              Heap part
1034+ 2352             >
1034+ 2352             >
1034+ 2352             >                org     (Heap_Ptr & $1FFF) + $E000
1034+ E167             >
1034+ E167             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1034+ E167             >Latest_Definition defl  Heap_Ptr
1034+ E167             >
1034+ E167             >                // dummy db directives used to calculate length of namec
1034+ E167 3F 54 45 52 >                db      "?TERMINAL"
1034+ E16B 4D 49 4E 41 >
1034+ E16F 4C          >
1034+ E170             >len_NFA         defl    $ - temp_NFA
1034+ E170             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1034+ E167             >
1034+ E167 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1034+ E168 3F 54 45 52 >                db      "?TERMINAL"               // name string in 7-bit ascii, but
1034+ E16C 4D 49 4E 41 >
1034+ E170 4C          >
1034+ E171             >                org     $-1                 // alter last byte of Name just above to set
1034+ E170 CC          >                db      {b $} | END_BIT     // msb as name end
1034+ E171             >
1034+ E171 5F 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1034+ E173             >Prev_Ptr        defl    Heap_Ptr
1034+ E173             >
1034+ E173             >mirror_Ptr      defl    $
1034+ E173             >
1034+ E173 54 23       >                dw      Dict_Ptr + 2        // xt
1034+ E175             >Heap_Ptr        defl    $ - $E000           // save current HP
1034+ E175             >
1034+ E175             >Current_HP      defl  $ - $E000             // used to set HP once!
1034+ E175             >
1034+ E175             >//              ______________________________________________________________________
1034+ E175             >//              Dictionary part
1034+ E175             >
1034+ E175             >                org     Dict_Ptr
1034+ 2352             >
1034+ 2352 73 01       >                dw      mirror_Ptr - $E000 + Heap_offset
1034+ 2354             >
1034+ 2354             >QTERMINAL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1034+ 2354 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1034+ 2354 ~           >
1034+ 2354 ~           >
1034+ 2354             >                endif           ; ok        // for other definitions it "points" the correct handler
1034+ 2354             >                // Use of "; ok" to suppress "warning[fwdref]"
1034+ 2354             >
1034+ 2354             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1035+ 2354 D9                           exx
1036+ 2355 01 FE 7F                     ld      bc, $7ffe
1037+ 2358 ED 50                        in      d, (c)
1038+ 235A 41                           ld      b, c
1039+ 235B ED 78                        in      a, (c)
1040+ 235D B2                           or       d
1041+ 235E 1F                           rra
1042+ 235F 3F                           ccf
1043+ 2360 ED 62                        sbc     hl, hl
1044+ 2362 E5                           push    hl
1045+ 2363 D9                           exx
1046+ 2364                              next
1046+ 2364 DD E9       >                jp      (ix)
1047+ 2366
1048+ 2366
1049+ 2366              //  ______________________________________________________________________
1050+ 2366              //
1051+ 2366              // inkey        -- c | 0
1052+ 2366              // call ROM inkey$ routine, returns c or "zero".
1053+ 2366              //
1054+ 2366              //              New_Def INKEY, "INKEY", is_code, is_normal
1055+ 2366              //              push    bc
1056+ 2366              //              push    de
1057+ 2366              //              ld      (SP_Saved), sp
1058+ 2366              //              ld      sp, Cold_origin - 5
1059+ 2366              //              ld      sp, TSTACK           // Carefully balanced from startup
1060+ 2366              //              push    ix
1061+ 2366              //              di
1062+ 2366              //              call    $15E6                   // instead of 15E9
1063+ 2366              //              ei
1064+ 2366              //              pop     ix
1065+ 2366              //              ld      sp, (SP_Saved)
1066+ 2366              //              ld      l, a
1067+ 2366              //              ld      h, 0
1068+ 2366              //              pop     de
1069+ 2366              //              pop     bc
1070+ 2366              //              psh1
1071+ 2366
1072+ 2366              //  ______________________________________________________________________
1073+ 2366              //
1074+ 2366              // select      n --
1075+ 2366              // selects the given channel number
1076+ 2366
1077+ 2366                              New_Def SELECT, "SELECT", is_code, is_normal
1077+ 2366             >
1077+ 2366             >Dict_Ptr        defl    $
1077+ 2366             >
1077+ 2366             >//              ______________________________________________________________________
1077+ 2366             >//              Heap part
1077+ 2366             >
1077+ 2366             >
1077+ 2366             >                org     (Heap_Ptr & $1FFF) + $E000
1077+ E175             >
1077+ E175             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1077+ E175             >Latest_Definition defl  Heap_Ptr
1077+ E175             >
1077+ E175             >                // dummy db directives used to calculate length of namec
1077+ E175 53 45 4C 45 >                db      "SELECT"
1077+ E179 43 54       >
1077+ E17B             >len_NFA         defl    $ - temp_NFA
1077+ E17B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1077+ E175             >
1077+ E175 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1077+ E176 53 45 4C 45 >                db      "SELECT"               // name string in 7-bit ascii, but
1077+ E17A 43 54       >
1077+ E17C             >                org     $-1                 // alter last byte of Name just above to set
1077+ E17B D4          >                db      {b $} | END_BIT     // msb as name end
1077+ E17C             >
1077+ E17C 67 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1077+ E17E             >Prev_Ptr        defl    Heap_Ptr
1077+ E17E             >
1077+ E17E             >mirror_Ptr      defl    $
1077+ E17E             >
1077+ E17E 68 23       >                dw      Dict_Ptr + 2        // xt
1077+ E180             >Heap_Ptr        defl    $ - $E000           // save current HP
1077+ E180             >
1077+ E180             >Current_HP      defl  $ - $E000             // used to set HP once!
1077+ E180             >
1077+ E180             >//              ______________________________________________________________________
1077+ E180             >//              Dictionary part
1077+ E180             >
1077+ E180             >                org     Dict_Ptr
1077+ 2366             >
1077+ 2366 7E 01       >                dw      mirror_Ptr - $E000 + Heap_offset
1077+ 2368             >
1077+ 2368             >SELECT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1077+ 2368 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1077+ 2368 ~           >
1077+ 2368 ~           >
1077+ 2368             >                endif           ; ok        // for other definitions it "points" the correct handler
1077+ 2368             >                // Use of "; ok" to suppress "warning[fwdref]"
1077+ 2368             >
1077+ 2368             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1078+ 2368 E1                           pop     hl
1079+ 2369 C5                           push    bc
1080+ 236A D5                           push    de
1081+ 236B 7D                           ld      a, l
1082+ 236C ED 73 2C 20                  ld      (SP_Saved), sp
1083+ 2370                          //  ld      sp, Cold_origin - 5
1084+ 2370 31 00 5C                     ld      sp, TSTACK           // Carefully balanced from startup
1085+ 2373 DD E5                        push    ix
1086+ 2375                          //  call    $1601
1087+ 2375 F3                           di
1088+ 2376 DF                           rst     $18
1089+ 2377 01 16                        dw      $1601
1090+ 2379 FB                           ei
1091+ 237A DD E1                        pop     ix
1092+ 237C ED 7B 2C 20                  ld      sp, (SP_Saved)
1093+ 2380 D1                           pop     de
1094+ 2381 C1                           pop     bc
1095+ 2382                              next
1095+ 2382 DD E9       >                jp      (ix)
1096+ 2384
1097+ 2384              //  ______________________________________________________________________
1098+ 2384              //
1099+ 2384              // ZX Spectrum Next - Low Level disk primitives.
1100+ 2384              // this include is "here" for backward compatibility
1101+ 2384
1102+ 2384                              include "next-opt0.asm"
# file opened: C:\Zx\CSpect\Projects\vForth17_DOT/source/next-opt0.asm
   1++2384              //  ______________________________________________________________________
   2++2384              //
   3++2384              //  next-opt.asm
   4++2384              //
   5++2384              //  ZX Spectrum Next - peculiar definitions
   6++2384              //  ______________________________________________________________________
   7++2384
   8++2384              //  ______________________________________________________________________
   9++2384              //
  10++2384              // f_seek       d u -- f
  11++2384              // Seek to position d in file-handle u.
  12++2384              // Return a false-flag 0 on success, True flag on error
  13++2384                              New_Def F_SEEK, "F_SEEK", is_code, is_normal
  13++2384             >
  13++2384             >Dict_Ptr        defl    $
  13++2384             >
  13++2384             >//              ______________________________________________________________________
  13++2384             >//              Heap part
  13++2384             >
  13++2384             >
  13++2384             >                org     (Heap_Ptr & $1FFF) + $E000
  13++E180             >
  13++E180             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13++E180             >Latest_Definition defl  Heap_Ptr
  13++E180             >
  13++E180             >                // dummy db directives used to calculate length of namec
  13++E180 46 5F 53 45 >                db      "F_SEEK"
  13++E184 45 4B       >
  13++E186             >len_NFA         defl    $ - temp_NFA
  13++E186             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13++E180             >
  13++E180 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  13++E181 46 5F 53 45 >                db      "F_SEEK"               // name string in 7-bit ascii, but
  13++E185 45 4B       >
  13++E187             >                org     $-1                 // alter last byte of Name just above to set
  13++E186 CB          >                db      {b $} | END_BIT     // msb as name end
  13++E187             >
  13++E187 75 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  13++E189             >Prev_Ptr        defl    Heap_Ptr
  13++E189             >
  13++E189             >mirror_Ptr      defl    $
  13++E189             >
  13++E189 86 23       >                dw      Dict_Ptr + 2        // xt
  13++E18B             >Heap_Ptr        defl    $ - $E000           // save current HP
  13++E18B             >
  13++E18B             >Current_HP      defl  $ - $E000             // used to set HP once!
  13++E18B             >
  13++E18B             >//              ______________________________________________________________________
  13++E18B             >//              Dictionary part
  13++E18B             >
  13++E18B             >                org     Dict_Ptr
  13++2384             >
  13++2384 89 01       >                dw      mirror_Ptr - $E000 + Heap_offset
  13++2386             >
  13++2386             >F_SEEK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  13++2386 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  13++2386 ~           >
  13++2386 ~           >
  13++2386             >                endif           ; ok        // for other definitions it "points" the correct handler
  13++2386             >                // Use of "; ok" to suppress "warning[fwdref]"
  13++2386             >
  13++2386             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14++2386 D9                            exx
  15++2387 E1                            pop     hl                  // file-handle
  16++2388 7D                            ld      a, l
  17++2389 C1                            pop     bc                  // bc has high-word of d
  18++238A D1                            pop     de
  19++238B D9                           exx
  20++238C DD E5                        push    ix
  21++238E D5                           push    de
  22++238F C5                           push    bc                  // save Instruction Pointer
  23++2390 D9                            exx
  24++2391 21 00 00                      ld      hl, 0 // ix, 0
  25++2394 F3                            di
  26++2395 CF                            rst     $08
  27++2396 9F                            db      $9F
  28++2397              F_Seek_Exit:
  29++2397 FB                           ei
  30++2398 C1                           pop     bc                  // restore Instruction Pointer
  31++2399 D1                           pop     de
  32++239A DD E1                        pop     ix
  33++239C ED 62                        sbc     hl, hl              // to get 0 or -1
  34++239E                              psh1
  34++239E E5          >                push    hl
  34++239F DD E9       >                jp      (ix)
  35++23A1
  36++23A1              //  ______________________________________________________________________
  37++23A1              //
  38++23A1              // f_close      u -- f
  39++23A1              // Close file-handle u.
  40++23A1              // Return 0 on success, True flag on error
  41++23A1
  42++23A1                              New_Def F_CLOSE, "F_CLOSE", is_code, is_normal
  42++23A1             >
  42++23A1             >Dict_Ptr        defl    $
  42++23A1             >
  42++23A1             >//              ______________________________________________________________________
  42++23A1             >//              Heap part
  42++23A1             >
  42++23A1             >
  42++23A1             >                org     (Heap_Ptr & $1FFF) + $E000
  42++E18B             >
  42++E18B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  42++E18B             >Latest_Definition defl  Heap_Ptr
  42++E18B             >
  42++E18B             >                // dummy db directives used to calculate length of namec
  42++E18B 46 5F 43 4C >                db      "F_CLOSE"
  42++E18F 4F 53 45    >
  42++E192             >len_NFA         defl    $ - temp_NFA
  42++E192             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  42++E18B             >
  42++E18B 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  42++E18C 46 5F 43 4C >                db      "F_CLOSE"               // name string in 7-bit ascii, but
  42++E190 4F 53 45    >
  42++E193             >                org     $-1                 // alter last byte of Name just above to set
  42++E192 C5          >                db      {b $} | END_BIT     // msb as name end
  42++E193             >
  42++E193 80 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  42++E195             >Prev_Ptr        defl    Heap_Ptr
  42++E195             >
  42++E195             >mirror_Ptr      defl    $
  42++E195             >
  42++E195 A3 23       >                dw      Dict_Ptr + 2        // xt
  42++E197             >Heap_Ptr        defl    $ - $E000           // save current HP
  42++E197             >
  42++E197             >Current_HP      defl  $ - $E000             // used to set HP once!
  42++E197             >
  42++E197             >//              ______________________________________________________________________
  42++E197             >//              Dictionary part
  42++E197             >
  42++E197             >                org     Dict_Ptr
  42++23A1             >
  42++23A1 95 01       >                dw      mirror_Ptr - $E000 + Heap_offset
  42++23A3             >
  42++23A3             >F_CLOSE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  42++23A3 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  42++23A3 ~           >
  42++23A3 ~           >
  42++23A3             >                endif           ; ok        // for other definitions it "points" the correct handler
  42++23A3             >                // Use of "; ok" to suppress "warning[fwdref]"
  42++23A3             >
  42++23A3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  43++23A3
  44++23A3 E1                           pop     hl
  45++23A4 7D                           ld      a, l                // file-handle
  46++23A5 DD E5                        push    ix
  47++23A7 D5                           push    de
  48++23A8 C5                           push    bc                  // Save Instruction pointer
  49++23A9 F3                           di
  50++23AA CF                           rst     $08
  51++23AB 9B                           db      $9B
  52++23AC 18 E9                        jr      F_Seek_Exit
  53++23AE              //              ei
  54++23AE              //              pop     de
  55++23AE              //              pop     bc
  56++23AE              //              pop     ix
  57++23AE              //              sbc     hl, hl
  58++23AE              //              psh1
  59++23AE
  60++23AE              //  ______________________________________________________________________
  61++23AE              //
  62++23AE              // f_sync      u -- f
  63++23AE              // Close file-handle u.
  64++23AE              // Return 0 on success, True flag on error
  65++23AE
  66++23AE                              New_Def F_SYNC, "F_SYNC", is_code, is_normal
  66++23AE             >
  66++23AE             >Dict_Ptr        defl    $
  66++23AE             >
  66++23AE             >//              ______________________________________________________________________
  66++23AE             >//              Heap part
  66++23AE             >
  66++23AE             >
  66++23AE             >                org     (Heap_Ptr & $1FFF) + $E000
  66++E197             >
  66++E197             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  66++E197             >Latest_Definition defl  Heap_Ptr
  66++E197             >
  66++E197             >                // dummy db directives used to calculate length of namec
  66++E197 46 5F 53 59 >                db      "F_SYNC"
  66++E19B 4E 43       >
  66++E19D             >len_NFA         defl    $ - temp_NFA
  66++E19D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  66++E197             >
  66++E197 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  66++E198 46 5F 53 59 >                db      "F_SYNC"               // name string in 7-bit ascii, but
  66++E19C 4E 43       >
  66++E19E             >                org     $-1                 // alter last byte of Name just above to set
  66++E19D C3          >                db      {b $} | END_BIT     // msb as name end
  66++E19E             >
  66++E19E 8B 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  66++E1A0             >Prev_Ptr        defl    Heap_Ptr
  66++E1A0             >
  66++E1A0             >mirror_Ptr      defl    $
  66++E1A0             >
  66++E1A0 B0 23       >                dw      Dict_Ptr + 2        // xt
  66++E1A2             >Heap_Ptr        defl    $ - $E000           // save current HP
  66++E1A2             >
  66++E1A2             >Current_HP      defl  $ - $E000             // used to set HP once!
  66++E1A2             >
  66++E1A2             >//              ______________________________________________________________________
  66++E1A2             >//              Dictionary part
  66++E1A2             >
  66++E1A2             >                org     Dict_Ptr
  66++23AE             >
  66++23AE A0 01       >                dw      mirror_Ptr - $E000 + Heap_offset
  66++23B0             >
  66++23B0             >F_SYNC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  66++23B0 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  66++23B0 ~           >
  66++23B0 ~           >
  66++23B0             >                endif           ; ok        // for other definitions it "points" the correct handler
  66++23B0             >                // Use of "; ok" to suppress "warning[fwdref]"
  66++23B0             >
  66++23B0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  67++23B0 E1                           pop     hl
  68++23B1 7D                           ld      a, l                // file-handle
  69++23B2 DD E5                        push    ix
  70++23B4 D5                           push    de
  71++23B5 C5                           push    bc
  72++23B6 F3                           di
  73++23B7 CF                           rst     $08
  74++23B8 9C                           db      $9C
  75++23B9 18 DC                        jr      F_Seek_Exit
  76++23BB              //              ei
  77++23BB              //              pop     de
  78++23BB              //              pop     bc
  79++23BB              //              pop     ix
  80++23BB              //              sbc     hl, hl
  81++23BB              //              psh1
  82++23BB
  83++23BB              //  ______________________________________________________________________
  84++23BB              //
  85++23BB              // f_fgetpos    u -- d f
  86++23BB              // Seek to position d in file-handle u.
  87++23BB              // Return a false-flag 0 on success, True flag on error
  88++23BB                              New_Def F_FGETPOS, "F_FGETPOS", is_code, is_normal
  88++23BB             >
  88++23BB             >Dict_Ptr        defl    $
  88++23BB             >
  88++23BB             >//              ______________________________________________________________________
  88++23BB             >//              Heap part
  88++23BB             >
  88++23BB             >
  88++23BB             >                org     (Heap_Ptr & $1FFF) + $E000
  88++E1A2             >
  88++E1A2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  88++E1A2             >Latest_Definition defl  Heap_Ptr
  88++E1A2             >
  88++E1A2             >                // dummy db directives used to calculate length of namec
  88++E1A2 46 5F 46 47 >                db      "F_FGETPOS"
  88++E1A6 45 54 50 4F >
  88++E1AA 53          >
  88++E1AB             >len_NFA         defl    $ - temp_NFA
  88++E1AB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  88++E1A2             >
  88++E1A2 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  88++E1A3 46 5F 46 47 >                db      "F_FGETPOS"               // name string in 7-bit ascii, but
  88++E1A7 45 54 50 4F >
  88++E1AB 53          >
  88++E1AC             >                org     $-1                 // alter last byte of Name just above to set
  88++E1AB D3          >                db      {b $} | END_BIT     // msb as name end
  88++E1AC             >
  88++E1AC 97 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  88++E1AE             >Prev_Ptr        defl    Heap_Ptr
  88++E1AE             >
  88++E1AE             >mirror_Ptr      defl    $
  88++E1AE             >
  88++E1AE BD 23       >                dw      Dict_Ptr + 2        // xt
  88++E1B0             >Heap_Ptr        defl    $ - $E000           // save current HP
  88++E1B0             >
  88++E1B0             >Current_HP      defl  $ - $E000             // used to set HP once!
  88++E1B0             >
  88++E1B0             >//              ______________________________________________________________________
  88++E1B0             >//              Dictionary part
  88++E1B0             >
  88++E1B0             >                org     Dict_Ptr
  88++23BB             >
  88++23BB AE 01       >                dw      mirror_Ptr - $E000 + Heap_offset
  88++23BD             >
  88++23BD             >F_FGETPOS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  88++23BD ~           >                call    runcode ; ok        // for primitive definitions  actual code
  88++23BD ~           >
  88++23BD ~           >
  88++23BD             >                endif           ; ok        // for other definitions it "points" the correct handler
  88++23BD             >                // Use of "; ok" to suppress "warning[fwdref]"
  88++23BD             >
  88++23BD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  89++23BD E1                            pop     hl
  90++23BE 7D                            ld      a, l                // file-handle
  91++23BF DD E5                         push    ix
  92++23C1 D5                            push    de
  93++23C2 C5                            push    bc
  94++23C3 F3                            di
  95++23C4 CF                            rst     $08
  96++23C5 A0                            db      $A0
  97++23C6 FB                            ei
  98++23C7 D9                           exx
  99++23C8 C1                           pop     bc                  // IP
 100++23C9 D1                           pop     de                  // Return Stack Pointer
 101++23CA DD E1                        pop     ix
 102++23CC D9                            exx
 103++23CD D5                            push    de
 104++23CE C5                            push    bc
 105++23CF ED 62                         sbc     hl, hl
 106++23D1 E5                            push    hl
 107++23D2 D9                           exx
 108++23D3                              next
 108++23D3 DD E9       >                jp      (ix)
 109++23D5
 110++23D5              //  ______________________________________________________________________
 111++23D5              //
 112++23D5              // f_read       a n u -- n f
 113++23D5              // Read b bytes from file-handle u to address a
 114++23D5              // Return the actual number n of bytes read
 115++23D5              // Return 0 on success, True flag on error
 116++23D5                              New_Def F_READ, "F_READ", is_code, is_normal
 116++23D5             >
 116++23D5             >Dict_Ptr        defl    $
 116++23D5             >
 116++23D5             >//              ______________________________________________________________________
 116++23D5             >//              Heap part
 116++23D5             >
 116++23D5             >
 116++23D5             >                org     (Heap_Ptr & $1FFF) + $E000
 116++E1B0             >
 116++E1B0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 116++E1B0             >Latest_Definition defl  Heap_Ptr
 116++E1B0             >
 116++E1B0             >                // dummy db directives used to calculate length of namec
 116++E1B0 46 5F 52 45 >                db      "F_READ"
 116++E1B4 41 44       >
 116++E1B6             >len_NFA         defl    $ - temp_NFA
 116++E1B6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 116++E1B0             >
 116++E1B0 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 116++E1B1 46 5F 52 45 >                db      "F_READ"               // name string in 7-bit ascii, but
 116++E1B5 41 44       >
 116++E1B7             >                org     $-1                 // alter last byte of Name just above to set
 116++E1B6 C4          >                db      {b $} | END_BIT     // msb as name end
 116++E1B7             >
 116++E1B7 A2 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 116++E1B9             >Prev_Ptr        defl    Heap_Ptr
 116++E1B9             >
 116++E1B9             >mirror_Ptr      defl    $
 116++E1B9             >
 116++E1B9 D7 23       >                dw      Dict_Ptr + 2        // xt
 116++E1BB             >Heap_Ptr        defl    $ - $E000           // save current HP
 116++E1BB             >
 116++E1BB             >Current_HP      defl  $ - $E000             // used to set HP once!
 116++E1BB             >
 116++E1BB             >//              ______________________________________________________________________
 116++E1BB             >//              Dictionary part
 116++E1BB             >
 116++E1BB             >                org     Dict_Ptr
 116++23D5             >
 116++23D5 B9 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 116++23D7             >
 116++23D7             >F_READ:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 116++23D7 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 116++23D7 ~           >
 116++23D7 ~           >
 116++23D7             >                endif           ; ok        // for other definitions it "points" the correct handler
 116++23D7             >                // Use of "; ok" to suppress "warning[fwdref]"
 116++23D7             >
 116++23D7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 117++23D7 D9                            exx
 118++23D8 E1                            pop     hl
 119++23D9 7D                            ld      a, l                // file-handle
 120++23DA C1                            pop     bc                  // bc has bytes to read
 121++23DB DD E3                         ex      (sp), ix            // ix has address
 122++23DD DD E5                         push    ix
 123++23DF E1                            pop     hl
 124++23E0 D9                           exx
 125++23E1 D5                           push    de                  // Save Return Stack pointer
 126++23E2 C5                           push    bc                  // Save Instruction pointer
 127++23E3 D9                            exx
 128++23E4 F3                            di
 129++23E5 CF                            rst     $08
 130++23E6 9D                            db      $9D
 131++23E7              F_Read_Exit:
 132++23E7 FB                           ei
 133++23E8 D9                           exx
 134++23E9 C1                           pop     bc                  // Restore Instruction pointer
 135++23EA D1                           pop     de                  // Restore Return Stack pointer
 136++23EB DD E1                        pop     ix                  // Restore ix
 137++23ED D9                            exx
 138++23EE D5                            push    de                  // bytes involved in i/o operation
 139++23EF ED 62                         sbc     hl, hl
 140++23F1 E5                            push    hl
 141++23F2 D9                           exx
 142++23F3                              next
 142++23F3 DD E9       >                jp      (ix)
 143++23F5
 144++23F5              //  ______________________________________________________________________
 145++23F5              //
 146++23F5              // f_write      a n u -- n f
 147++23F5              // Write bytes currently stored at address a to file-handle u.
 148++23F5              // Return the actual n bytes written and 0 on success, True flag on error.
 149++23F5                              New_Def F_WRITE, "F_WRITE", is_code, is_normal
 149++23F5             >
 149++23F5             >Dict_Ptr        defl    $
 149++23F5             >
 149++23F5             >//              ______________________________________________________________________
 149++23F5             >//              Heap part
 149++23F5             >
 149++23F5             >
 149++23F5             >                org     (Heap_Ptr & $1FFF) + $E000
 149++E1BB             >
 149++E1BB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 149++E1BB             >Latest_Definition defl  Heap_Ptr
 149++E1BB             >
 149++E1BB             >                // dummy db directives used to calculate length of namec
 149++E1BB 46 5F 57 52 >                db      "F_WRITE"
 149++E1BF 49 54 45    >
 149++E1C2             >len_NFA         defl    $ - temp_NFA
 149++E1C2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 149++E1BB             >
 149++E1BB 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 149++E1BC 46 5F 57 52 >                db      "F_WRITE"               // name string in 7-bit ascii, but
 149++E1C0 49 54 45    >
 149++E1C3             >                org     $-1                 // alter last byte of Name just above to set
 149++E1C2 C5          >                db      {b $} | END_BIT     // msb as name end
 149++E1C3             >
 149++E1C3 B0 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 149++E1C5             >Prev_Ptr        defl    Heap_Ptr
 149++E1C5             >
 149++E1C5             >mirror_Ptr      defl    $
 149++E1C5             >
 149++E1C5 F7 23       >                dw      Dict_Ptr + 2        // xt
 149++E1C7             >Heap_Ptr        defl    $ - $E000           // save current HP
 149++E1C7             >
 149++E1C7             >Current_HP      defl  $ - $E000             // used to set HP once!
 149++E1C7             >
 149++E1C7             >//              ______________________________________________________________________
 149++E1C7             >//              Dictionary part
 149++E1C7             >
 149++E1C7             >                org     Dict_Ptr
 149++23F5             >
 149++23F5 C5 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 149++23F7             >
 149++23F7             >F_WRITE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 149++23F7 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 149++23F7 ~           >
 149++23F7 ~           >
 149++23F7             >                endif           ; ok        // for other definitions it "points" the correct handler
 149++23F7             >                // Use of "; ok" to suppress "warning[fwdref]"
 149++23F7             >
 149++23F7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 150++23F7 D9                            exx
 151++23F8 E1                            pop     hl
 152++23F9 7D                            ld      a, l                // file-handle
 153++23FA C1                            pop     bc                  // bc has bytes to read
 154++23FB DD E3                         ex      (sp), ix            // ix has address
 155++23FD DD E5                         push    ix
 156++23FF E1                            pop     hl
 157++2400 D9                           exx
 158++2401 D5                           push    de                  // Save Return Stack pointer
 159++2402 C5                           push    bc                  // Save Instruction pointer
 160++2403 D9                            exx
 161++2404 F3                            di
 162++2405 CF                            rst     $08
 163++2406 9E                            db      $9E
 164++2407 18 DE                         jr F_Read_Exit
 165++2409              //                ei
 166++2409              //                exx
 167++2409              //                pop     de                  // Restore Return Stack pointer
 168++2409              //                pop     bc                  // Restore Instruction pointer
 169++2409              //                pop     ix                  // Restore ix
 170++2409              //                 exx
 171++2409              //                 push    de                  // bytes involved in i/o operation
 172++2409              //                 sbc     hl, hl
 173++2409              //                 push    hl
 174++2409              //                exx
 175++2409              //                next
 176++2409
 177++2409              //  ______________________________________________________________________
 178++2409              //
 179++2409              // f_open       a1 a2 b -- u f
 180++2409              // open a file
 181++2409              // a1 (filespec) is a null-terminated string, such as produced by ," definition
 182++2409              // a2 is address to an 8-byte header data used in some cases.
 183++2409              // b is access mode-byte, that is a combination of:
 184++2409              // any/all of:
 185++2409              //   esx_mode_read          $01 request read access
 186++2409              //   esx_mode_write         $02 request write access
 187++2409              //   esx_mode_use_header    $40 read/write +3DOS header
 188++2409              // plus one of:
 189++2409              //   esx_mode_open_exist    $00 only open existing file
 190++2409              //   esx_mode_open_creat    $08 open existing or create file
 191++2409              //   esx_mode_creat_noexist $04 create new file, error if exists
 192++2409              //   esx_mode_creat_trunc   $0c create new file, delete existing
 193++2409              // Return file-handle u and 0 on success, True flag on error
 194++2409                              New_Def F_OPEN, "F_OPEN", is_code, is_normal
 194++2409             >
 194++2409             >Dict_Ptr        defl    $
 194++2409             >
 194++2409             >//              ______________________________________________________________________
 194++2409             >//              Heap part
 194++2409             >
 194++2409             >
 194++2409             >                org     (Heap_Ptr & $1FFF) + $E000
 194++E1C7             >
 194++E1C7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 194++E1C7             >Latest_Definition defl  Heap_Ptr
 194++E1C7             >
 194++E1C7             >                // dummy db directives used to calculate length of namec
 194++E1C7 46 5F 4F 50 >                db      "F_OPEN"
 194++E1CB 45 4E       >
 194++E1CD             >len_NFA         defl    $ - temp_NFA
 194++E1CD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 194++E1C7             >
 194++E1C7 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 194++E1C8 46 5F 4F 50 >                db      "F_OPEN"               // name string in 7-bit ascii, but
 194++E1CC 45 4E       >
 194++E1CE             >                org     $-1                 // alter last byte of Name just above to set
 194++E1CD CE          >                db      {b $} | END_BIT     // msb as name end
 194++E1CE             >
 194++E1CE BB 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 194++E1D0             >Prev_Ptr        defl    Heap_Ptr
 194++E1D0             >
 194++E1D0             >mirror_Ptr      defl    $
 194++E1D0             >
 194++E1D0 0B 24       >                dw      Dict_Ptr + 2        // xt
 194++E1D2             >Heap_Ptr        defl    $ - $E000           // save current HP
 194++E1D2             >
 194++E1D2             >Current_HP      defl  $ - $E000             // used to set HP once!
 194++E1D2             >
 194++E1D2             >//              ______________________________________________________________________
 194++E1D2             >//              Dictionary part
 194++E1D2             >
 194++E1D2             >                org     Dict_Ptr
 194++2409             >
 194++2409 D0 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 194++240B             >
 194++240B             >F_OPEN:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 194++240B ~           >                call    runcode ; ok        // for primitive definitions  actual code
 194++240B ~           >
 194++240B ~           >
 194++240B             >                endif           ; ok        // for other definitions it "points" the correct handler
 194++240B             >                // Use of "; ok" to suppress "warning[fwdref]"
 194++240B             >
 194++240B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 195++240B D9                            exx
 196++240C C1                            pop     bc                  // file-mode
 197++240D 41                            ld      b, c                // file-mode
 198++240E D1                            pop     de                  // 8-bytes buffer if any
 199++240F DD E3                         ex      (sp), ix            // filespec nul-terminated
 200++2411 DD E5                         push    ix
 201++2413 E1                            pop     hl
 202++2414 D9                           exx
 203++2415 D5                           push    de                  // Save Return Stack pointer
 204++2416 C5                           push    bc                  // Save Instruction pointer
 205++2417 D9                            exx
 206++2418 3E 2A                         ld      a, "*"
 207++241A F3                            di
 208++241B CF                            rst     $08
 209++241C 9A                            db      $9A
 210++241D              F_Open_Exit:
 211++241D              //               ei                         // removed because is repeated in f_read_exit
 212++241D 5F                            ld      e, a                // return the handle-number
 213++241E 16 00                         ld      d, 0
 214++2420 18 C5                        jr F_Read_Exit
 215++2422
 216++2422              //   \ CREATE FILENAME ," test.txt"   \ new Counted String
 217++2422              //   \ FILENAME 1+ PAD 1 F_OPEN
 218++2422              //   \ DROP
 219++2422              //   \ F_CLOSE
 220++2422
 221++2422
 222++2422              //  ______________________________________________________________________
 223++2422              //
 224++2422              // f_opendir    a1 -- u f
 225++2422              // open a file
 226++2422                              New_Def F_OPENDIR, "F_OPENDIR", is_code, is_normal
 226++2422             >
 226++2422             >Dict_Ptr        defl    $
 226++2422             >
 226++2422             >//              ______________________________________________________________________
 226++2422             >//              Heap part
 226++2422             >
 226++2422             >
 226++2422             >                org     (Heap_Ptr & $1FFF) + $E000
 226++E1D2             >
 226++E1D2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 226++E1D2             >Latest_Definition defl  Heap_Ptr
 226++E1D2             >
 226++E1D2             >                // dummy db directives used to calculate length of namec
 226++E1D2 46 5F 4F 50 >                db      "F_OPENDIR"
 226++E1D6 45 4E 44 49 >
 226++E1DA 52          >
 226++E1DB             >len_NFA         defl    $ - temp_NFA
 226++E1DB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 226++E1D2             >
 226++E1D2 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 226++E1D3 46 5F 4F 50 >                db      "F_OPENDIR"               // name string in 7-bit ascii, but
 226++E1D7 45 4E 44 49 >
 226++E1DB 52          >
 226++E1DC             >                org     $-1                 // alter last byte of Name just above to set
 226++E1DB D2          >                db      {b $} | END_BIT     // msb as name end
 226++E1DC             >
 226++E1DC C7 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 226++E1DE             >Prev_Ptr        defl    Heap_Ptr
 226++E1DE             >
 226++E1DE             >mirror_Ptr      defl    $
 226++E1DE             >
 226++E1DE 24 24       >                dw      Dict_Ptr + 2        // xt
 226++E1E0             >Heap_Ptr        defl    $ - $E000           // save current HP
 226++E1E0             >
 226++E1E0             >Current_HP      defl  $ - $E000             // used to set HP once!
 226++E1E0             >
 226++E1E0             >//              ______________________________________________________________________
 226++E1E0             >//              Dictionary part
 226++E1E0             >
 226++E1E0             >                org     Dict_Ptr
 226++2422             >
 226++2422 DE 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 226++2424             >
 226++2424             >F_OPENDIR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 226++2424 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 226++2424 ~           >
 226++2424 ~           >
 226++2424             >                endif           ; ok        // for other definitions it "points" the correct handler
 226++2424             >                // Use of "; ok" to suppress "warning[fwdref]"
 226++2424             >
 226++2424             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 227++2424 DD E3                        ex      (sp), ix            // filespec nul-terminated
 228++2426 DD E5                        push    ix
 229++2428 E1                           pop     hl
 230++2429 D5                           push    de                  // Save Return Stack pointer
 231++242A C5                           push    bc                  // Save Instruction pointer
 232++242B 06 10                        ld      b, $10              // file-mode
 233++242D 3E 43                        ld      a, "C"
 234++242F F3                           di
 235++2430 CF                           rst     $08
 236++2431 A3                           db      $A3
 237++2432 18 E9                        jr      F_Open_Exit
 238++2434
 239++2434
 240++2434              //  ______________________________________________________________________
 241++2434              //
 242++2434              // f_readdir    a1 a2 b -- u f
 243++2434              // open a file
 244++2434                              New_Def F_READDIR, "F_READDIR", is_code, is_normal
 244++2434             >
 244++2434             >Dict_Ptr        defl    $
 244++2434             >
 244++2434             >//              ______________________________________________________________________
 244++2434             >//              Heap part
 244++2434             >
 244++2434             >
 244++2434             >                org     (Heap_Ptr & $1FFF) + $E000
 244++E1E0             >
 244++E1E0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 244++E1E0             >Latest_Definition defl  Heap_Ptr
 244++E1E0             >
 244++E1E0             >                // dummy db directives used to calculate length of namec
 244++E1E0 46 5F 52 45 >                db      "F_READDIR"
 244++E1E4 41 44 44 49 >
 244++E1E8 52          >
 244++E1E9             >len_NFA         defl    $ - temp_NFA
 244++E1E9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 244++E1E0             >
 244++E1E0 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 244++E1E1 46 5F 52 45 >                db      "F_READDIR"               // name string in 7-bit ascii, but
 244++E1E5 41 44 44 49 >
 244++E1E9 52          >
 244++E1EA             >                org     $-1                 // alter last byte of Name just above to set
 244++E1E9 D2          >                db      {b $} | END_BIT     // msb as name end
 244++E1EA             >
 244++E1EA D2 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 244++E1EC             >Prev_Ptr        defl    Heap_Ptr
 244++E1EC             >
 244++E1EC             >mirror_Ptr      defl    $
 244++E1EC             >
 244++E1EC 36 24       >                dw      Dict_Ptr + 2        // xt
 244++E1EE             >Heap_Ptr        defl    $ - $E000           // save current HP
 244++E1EE             >
 244++E1EE             >Current_HP      defl  $ - $E000             // used to set HP once!
 244++E1EE             >
 244++E1EE             >//              ______________________________________________________________________
 244++E1EE             >//              Dictionary part
 244++E1EE             >
 244++E1EE             >                org     Dict_Ptr
 244++2434             >
 244++2434 EC 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 244++2436             >
 244++2436             >F_READDIR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 244++2436 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 244++2436 ~           >
 244++2436 ~           >
 244++2436             >                endif           ; ok        // for other definitions it "points" the correct handler
 244++2436             >                // Use of "; ok" to suppress "warning[fwdref]"
 244++2436             >
 244++2436             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 245++2436 D9                            exx
 246++2437 E1                            pop     hl
 247++2438 7D                            ld      a, l
 248++2439 D1                            pop     de
 249++243A DD E3                         ex      (sp), ix            // filespec nul-terminated
 250++243C DD E5                         push    ix
 251++243E E1                            pop     hl
 252++243F D9                           exx
 253++2440 D5                           push    de                  // Save Return Stack pointer
 254++2441 C5                           push    bc                  // Save Instruction pointer
 255++2442 D9                            exx
 256++2443 F3                            di
 257++2444 CF                            rst     $08
 258++2445 A4                            db      $A4
 259++2446 18 D5                         jr      F_Open_Exit
 260++2448
 261++2448
# file closed: C:\Zx\CSpect\Projects\vForth17_DOT/source/next-opt0.asm
1103+ 2448
1104+ 2448
1105+ 2448              //  ______________________________________________________________________
1106+ 2448              //
1107+ 2448              // cmove    a1 a2 u --
1108+ 2448              // If u > 0, moves memory content starting at address a1 for n bytes long
1109+ 2448              // storing then starting at address addr2.
1110+ 2448              // The content of a1 is moved first. See CMOVE> also.
1111+ 2448                              New_Def CMOVE, "CMOVE", is_code, is_normal
1111+ 2448             >
1111+ 2448             >Dict_Ptr        defl    $
1111+ 2448             >
1111+ 2448             >//              ______________________________________________________________________
1111+ 2448             >//              Heap part
1111+ 2448             >
1111+ 2448             >
1111+ 2448             >                org     (Heap_Ptr & $1FFF) + $E000
1111+ E1EE             >
1111+ E1EE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1111+ E1EE             >Latest_Definition defl  Heap_Ptr
1111+ E1EE             >
1111+ E1EE             >                // dummy db directives used to calculate length of namec
1111+ E1EE 43 4D 4F 56 >                db      "CMOVE"
1111+ E1F2 45          >
1111+ E1F3             >len_NFA         defl    $ - temp_NFA
1111+ E1F3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1111+ E1EE             >
1111+ E1EE 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1111+ E1EF 43 4D 4F 56 >                db      "CMOVE"               // name string in 7-bit ascii, but
1111+ E1F3 45          >
1111+ E1F4             >                org     $-1                 // alter last byte of Name just above to set
1111+ E1F3 C5          >                db      {b $} | END_BIT     // msb as name end
1111+ E1F4             >
1111+ E1F4 E0 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1111+ E1F6             >Prev_Ptr        defl    Heap_Ptr
1111+ E1F6             >
1111+ E1F6             >mirror_Ptr      defl    $
1111+ E1F6             >
1111+ E1F6 4A 24       >                dw      Dict_Ptr + 2        // xt
1111+ E1F8             >Heap_Ptr        defl    $ - $E000           // save current HP
1111+ E1F8             >
1111+ E1F8             >Current_HP      defl  $ - $E000             // used to set HP once!
1111+ E1F8             >
1111+ E1F8             >//              ______________________________________________________________________
1111+ E1F8             >//              Dictionary part
1111+ E1F8             >
1111+ E1F8             >                org     Dict_Ptr
1111+ 2448             >
1111+ 2448 F6 01       >                dw      mirror_Ptr - $E000 + Heap_offset
1111+ 244A             >
1111+ 244A             >CMOVE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1111+ 244A ~           >                call    runcode ; ok        // for primitive definitions  actual code
1111+ 244A ~           >
1111+ 244A ~           >
1111+ 244A             >                endif           ; ok        // for other definitions it "points" the correct handler
1111+ 244A             >                // Use of "; ok" to suppress "warning[fwdref]"
1111+ 244A             >
1111+ 244A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1112+ 244A D9                           exx
1113+ 244B
1114+ 244B C1                           pop     bc                  // bc has counter
1115+ 244C D1                           pop     de                  // de now has dest
1116+ 244D E1                           pop     hl                 // hl has source, save Instruction Pointer
1117+ 244E 78                           ld      a, b
1118+ 244F B1                           or      c
1119+ 2450 28 02                        jr      z, Cmove_NoMove
1120+ 2452 ED B0                            ldir
1121+ 2454              Cmove_NoMove:
1122+ 2454 D9                           exx
1123+ 2455
1124+ 2455                              next
1124+ 2455 DD E9       >                jp      (ix)
1125+ 2457
1126+ 2457              //  ______________________________________________________________________
1127+ 2457              //
1128+ 2457              // cmove>    a1 a2 u --
1129+ 2457              // If u > 0, moves memory content starting at address a1 for n bytes long
1130+ 2457              // storing then starting at address addr2.
1131+ 2457              // The content of a1 is moved last. See cmove.
1132+ 2457                              New_Def CMOVE_TO, "CMOVE>", is_code, is_normal
1132+ 2457             >
1132+ 2457             >Dict_Ptr        defl    $
1132+ 2457             >
1132+ 2457             >//              ______________________________________________________________________
1132+ 2457             >//              Heap part
1132+ 2457             >
1132+ 2457             >
1132+ 2457             >                org     (Heap_Ptr & $1FFF) + $E000
1132+ E1F8             >
1132+ E1F8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1132+ E1F8             >Latest_Definition defl  Heap_Ptr
1132+ E1F8             >
1132+ E1F8             >                // dummy db directives used to calculate length of namec
1132+ E1F8 43 4D 4F 56 >                db      "CMOVE>"
1132+ E1FC 45 3E       >
1132+ E1FE             >len_NFA         defl    $ - temp_NFA
1132+ E1FE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1132+ E1F8             >
1132+ E1F8 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1132+ E1F9 43 4D 4F 56 >                db      "CMOVE>"               // name string in 7-bit ascii, but
1132+ E1FD 45 3E       >
1132+ E1FF             >                org     $-1                 // alter last byte of Name just above to set
1132+ E1FE BE          >                db      {b $} | END_BIT     // msb as name end
1132+ E1FF             >
1132+ E1FF EE 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1132+ E201             >Prev_Ptr        defl    Heap_Ptr
1132+ E201             >
1132+ E201             >mirror_Ptr      defl    $
1132+ E201             >
1132+ E201 59 24       >                dw      Dict_Ptr + 2        // xt
1132+ E203             >Heap_Ptr        defl    $ - $E000           // save current HP
1132+ E203             >
1132+ E203             >Current_HP      defl  $ - $E000             // used to set HP once!
1132+ E203             >
1132+ E203             >//              ______________________________________________________________________
1132+ E203             >//              Dictionary part
1132+ E203             >
1132+ E203             >                org     Dict_Ptr
1132+ 2457             >
1132+ 2457 01 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1132+ 2459             >
1132+ 2459             >CMOVE_TO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1132+ 2459 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1132+ 2459 ~           >
1132+ 2459 ~           >
1132+ 2459             >                endif           ; ok        // for other definitions it "points" the correct handler
1132+ 2459             >                // Use of "; ok" to suppress "warning[fwdref]"
1132+ 2459             >
1132+ 2459             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1133+ 2459 D9                           exx
1134+ 245A
1135+ 245A C1                           pop     bc                  // bc has counter
1136+ 245B D1                           pop     de                  // de has dest
1137+ 245C E1                           pop     hl                  // hl has source, save Instruction Pointer
1138+ 245D 78                           ld      a, b
1139+ 245E B1                           or      c
1140+ 245F 28 08                        jr      z, CmoveV_NoMove
1141+ 2461 EB                               ex      de, hl              // compute address to
1142+ 2462 09                               add     hl, bc              // operate backward
1143+ 2463 2B                               dec     hl
1144+ 2464 EB                               ex      de, hl
1145+ 2465 09                               add     hl, bc
1146+ 2466 2B                               dec     hl
1147+ 2467 ED B8                            lddr                        // backward
1148+ 2469              CmoveV_NoMove:
1149+ 2469 D9                           exx
1150+ 246A
1151+ 246A                              next
1151+ 246A DD E9       >                jp      (ix)
1152+ 246C
1153+ 246C              //  ______________________________________________________________________
1154+ 246C              //
1155+ 246C              // um*      u1 u2 -- ud
1156+ 246C              // Unsigned multiplication
1157+ 246C              // A double-integer is kept in CPU registers as DEHL then pushed on stack.
1158+ 246C              // On the stack a double number is treated as two single numbers
1159+ 246C              // where DE is on the top of the stack and HL is the second from top,
1160+ 246C              // Instead, in 2VARIABLE a double number is stored as EDLH.
1161+ 246C              // this definition could use "MUL" Z80N new op-code.
1162+ 246C                              New_Def UM_MUL, "UM*", is_code, is_normal
1162+ 246C             >
1162+ 246C             >Dict_Ptr        defl    $
1162+ 246C             >
1162+ 246C             >//              ______________________________________________________________________
1162+ 246C             >//              Heap part
1162+ 246C             >
1162+ 246C             >
1162+ 246C             >                org     (Heap_Ptr & $1FFF) + $E000
1162+ E203             >
1162+ E203             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1162+ E203             >Latest_Definition defl  Heap_Ptr
1162+ E203             >
1162+ E203             >                // dummy db directives used to calculate length of namec
1162+ E203 55 4D 2A    >                db      "UM*"
1162+ E206             >len_NFA         defl    $ - temp_NFA
1162+ E206             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1162+ E203             >
1162+ E203 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1162+ E204 55 4D 2A    >                db      "UM*"               // name string in 7-bit ascii, but
1162+ E207             >                org     $-1                 // alter last byte of Name just above to set
1162+ E206 AA          >                db      {b $} | END_BIT     // msb as name end
1162+ E207             >
1162+ E207 F8 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1162+ E209             >Prev_Ptr        defl    Heap_Ptr
1162+ E209             >
1162+ E209             >mirror_Ptr      defl    $
1162+ E209             >
1162+ E209 6E 24       >                dw      Dict_Ptr + 2        // xt
1162+ E20B             >Heap_Ptr        defl    $ - $E000           // save current HP
1162+ E20B             >
1162+ E20B             >Current_HP      defl  $ - $E000             // used to set HP once!
1162+ E20B             >
1162+ E20B             >//              ______________________________________________________________________
1162+ E20B             >//              Dictionary part
1162+ E20B             >
1162+ E20B             >                org     Dict_Ptr
1162+ 246C             >
1162+ 246C 09 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1162+ 246E             >
1162+ 246E             >UM_MUL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1162+ 246E ~           >                call    runcode ; ok        // for primitive definitions  actual code
1162+ 246E ~           >
1162+ 246E ~           >
1162+ 246E             >                endif           ; ok        // for other definitions it "points" the correct handler
1162+ 246E             >                // Use of "; ok" to suppress "warning[fwdref]"
1162+ 246E             >
1162+ 246E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1163+ 246E D9                           exx
1164+ 246F D1                           pop     de                    // de has u2 operand
1165+ 2470 E1                           pop     hl                    // hl has u1 operand
1166+ 2471 45                           ld      b, l
1167+ 2472 4B                           ld      c, e
1168+ 2473 5D                           ld      e, l
1169+ 2474 6A                           ld      l, d
1170+ 2475 E5                           push    hl
1171+ 2476 69                           ld      l, c
1172+ 2477 ED 30                        mul
1173+ 2479 EB                           ex      de, hl
1174+ 247A ED 30                        mul
1175+ 247C AF                           xor     a
1176+ 247D 19                           add     hl, de
1177+ 247E 8F                           adc     a
1178+ 247F 59                           ld      e, c
1179+ 2480 50                           ld      d, b
1180+ 2481 ED 30                        mul
1181+ 2483 47                           ld      b, a
1182+ 2484 4C                           ld      c, h
1183+ 2485 7A                           ld      a, d
1184+ 2486 85                           add     l
1185+ 2487 67                           ld      h, a
1186+ 2488 6B                           ld      l, e
1187+ 2489 D1                           pop     de
1188+ 248A ED 30                        mul
1189+ 248C EB                           ex      de, hl
1190+ 248D ED 4A                        adc     hl, bc
1191+ 248F D5                           push    de
1192+ 2490 E5                           push    hl
1193+ 2491 D9                           exx
1194+ 2492                              next
1194+ 2492 DD E9       >                jp      (ix)
1195+ 2494
1196+ 2494              //  ______________________________________________________________________
1197+ 2494              //
1198+ 2494              // um/mod      ud u1 -- q r
1199+ 2494              // divides ud into u1 giving quotient q and remainder r
1200+ 2494              // algorithm takes 16 bit at a time starting from msb
1201+ 2494              // DE grows from lsb upward with quotient result
1202+ 2494              // HL keeps the remainder at each stage of division
1203+ 2494              // each loop 'lowers' the next binary digit to form the current dividend
1204+ 2494                              New_Def UMDIVMOD, "UM/MOD", is_code, is_normal
1204+ 2494             >
1204+ 2494             >Dict_Ptr        defl    $
1204+ 2494             >
1204+ 2494             >//              ______________________________________________________________________
1204+ 2494             >//              Heap part
1204+ 2494             >
1204+ 2494             >
1204+ 2494             >                org     (Heap_Ptr & $1FFF) + $E000
1204+ E20B             >
1204+ E20B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1204+ E20B             >Latest_Definition defl  Heap_Ptr
1204+ E20B             >
1204+ E20B             >                // dummy db directives used to calculate length of namec
1204+ E20B 55 4D 2F 4D >                db      "UM/MOD"
1204+ E20F 4F 44       >
1204+ E211             >len_NFA         defl    $ - temp_NFA
1204+ E211             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1204+ E20B             >
1204+ E20B 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1204+ E20C 55 4D 2F 4D >                db      "UM/MOD"               // name string in 7-bit ascii, but
1204+ E210 4F 44       >
1204+ E212             >                org     $-1                 // alter last byte of Name just above to set
1204+ E211 C4          >                db      {b $} | END_BIT     // msb as name end
1204+ E212             >
1204+ E212 03 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1204+ E214             >Prev_Ptr        defl    Heap_Ptr
1204+ E214             >
1204+ E214             >mirror_Ptr      defl    $
1204+ E214             >
1204+ E214 96 24       >                dw      Dict_Ptr + 2        // xt
1204+ E216             >Heap_Ptr        defl    $ - $E000           // save current HP
1204+ E216             >
1204+ E216             >Current_HP      defl  $ - $E000             // used to set HP once!
1204+ E216             >
1204+ E216             >//              ______________________________________________________________________
1204+ E216             >//              Dictionary part
1204+ E216             >
1204+ E216             >                org     Dict_Ptr
1204+ 2494             >
1204+ 2494 14 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1204+ 2496             >
1204+ 2496             >UMDIVMOD:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1204+ 2496 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1204+ 2496 ~           >
1204+ 2496 ~           >
1204+ 2496             >                endif           ; ok        // for other definitions it "points" the correct handler
1204+ 2496             >                // Use of "; ok" to suppress "warning[fwdref]"
1204+ 2496             >
1204+ 2496             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1205+ 2496 D9                           exx
1206+ 2497 C1                           pop     bc                      // divisor
1207+ 2498
1208+ 2498 E1                           pop     hl                      // < high part
1209+ 2499 D1                           pop     de                      // < low part and
1210+ 249A
1211+ 249A 7D                           ld      a, l                    // check without changing arguments
1212+ 249B 91                           sub     c                       // if divisor is greater than high part
1213+ 249C 7C                           ld      a, h                    // so quotient will be in range
1214+ 249D 98                           sbc     a, b
1215+ 249E 30 20                        jr      nc, Um_DivMod_OutOfRange
1216+ 24A0 3E 10                            ld      a, 16
1217+ 24A2              Um_DivMod_Loop:
1218+ 24A2 CB 23                                sla     e
1219+ 24A4 CB 12                                rl      d
1220+ 24A6 ED 6A                                adc     hl, hl
1221+ 24A8 30 05                                jr      nc, Um_DivMod_Carry
1222+ 24AA A7                                       and     a
1223+ 24AB ED 42                                    sbc     hl, bc
1224+ 24AD 18 07                                jr      Um_DivMod_Endif    // else
1225+ 24AF              Um_DivMod_Carry:
1226+ 24AF A7                                       and     a
1227+ 24B0 ED 42                                    sbc     hl, bc
1228+ 24B2 30 02                                    jr      nc, Um_DivMod_Endif
1229+ 24B4 09                                           add     hl, bc
1230+ 24B5 1B                                           dec     de
1231+ 24B6              Um_DivMod_Endif:                                   // endif
1232+ 24B6 13                                   inc     de
1233+ 24B7 3D                                   dec     a
1234+ 24B8 20 E8                            jr      nz, Um_DivMod_Loop
1235+ 24BA EB                               ex      de, hl
1236+ 24BB              Um_DivMod_Bailout:
1237+ 24BB D5                               push    de                  // de := remanider
1238+ 24BC E5                               push    hl                  // hl := quotient
1239+ 24BD D9                               exx
1240+ 24BE                                  next
1240+ 24BE DD E9       >                jp      (ix)
1241+ 24C0
1242+ 24C0              Um_DivMod_OutOfRange:
1243+ 24C0 21 FF FF                     ld      hl, -1
1244+ 24C3 54                           ld      d, h
1245+ 24C4 5D                           ld      e, l
1246+ 24C5 18 F4                        jr      Um_DivMod_Bailout
1247+ 24C7
1248+ 24C7              //  ______________________________________________________________________
1249+ 24C7              //
1250+ 24C7              // and          n1 n2 -- n3
1251+ 24C7              // bit logical AND. Returns n3 as n1 & n2
1252+ 24C7                              New_Def AND_OP, "AND", is_code, is_normal
1252+ 24C7             >
1252+ 24C7             >Dict_Ptr        defl    $
1252+ 24C7             >
1252+ 24C7             >//              ______________________________________________________________________
1252+ 24C7             >//              Heap part
1252+ 24C7             >
1252+ 24C7             >
1252+ 24C7             >                org     (Heap_Ptr & $1FFF) + $E000
1252+ E216             >
1252+ E216             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1252+ E216             >Latest_Definition defl  Heap_Ptr
1252+ E216             >
1252+ E216             >                // dummy db directives used to calculate length of namec
1252+ E216 41 4E 44    >                db      "AND"
1252+ E219             >len_NFA         defl    $ - temp_NFA
1252+ E219             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1252+ E216             >
1252+ E216 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1252+ E217 41 4E 44    >                db      "AND"               // name string in 7-bit ascii, but
1252+ E21A             >                org     $-1                 // alter last byte of Name just above to set
1252+ E219 C4          >                db      {b $} | END_BIT     // msb as name end
1252+ E21A             >
1252+ E21A 0B 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1252+ E21C             >Prev_Ptr        defl    Heap_Ptr
1252+ E21C             >
1252+ E21C             >mirror_Ptr      defl    $
1252+ E21C             >
1252+ E21C C9 24       >                dw      Dict_Ptr + 2        // xt
1252+ E21E             >Heap_Ptr        defl    $ - $E000           // save current HP
1252+ E21E             >
1252+ E21E             >Current_HP      defl  $ - $E000             // used to set HP once!
1252+ E21E             >
1252+ E21E             >//              ______________________________________________________________________
1252+ E21E             >//              Dictionary part
1252+ E21E             >
1252+ E21E             >                org     Dict_Ptr
1252+ 24C7             >
1252+ 24C7 1C 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1252+ 24C9             >
1252+ 24C9             >AND_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1252+ 24C9 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1252+ 24C9 ~           >
1252+ 24C9 ~           >
1252+ 24C9             >                endif           ; ok        // for other definitions it "points" the correct handler
1252+ 24C9             >                // Use of "; ok" to suppress "warning[fwdref]"
1252+ 24C9             >
1252+ 24C9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1253+ 24C9 D9                           exx
1254+ 24CA D1                           pop     de
1255+ 24CB E1                           pop     hl
1256+ 24CC 7B                           ld      a, e
1257+ 24CD A5                           and     l
1258+ 24CE 6F                           ld      l, a
1259+ 24CF 7A                           ld      a, d
1260+ 24D0 A4                           and     h
1261+ 24D1              Boolean_exit:
1262+ 24D1 67                           ld      h, a
1263+ 24D2 E5                           push    hl
1264+ 24D3 D9                           exx
1265+ 24D4                              next
1265+ 24D4 DD E9       >                jp      (ix)
1266+ 24D6
1267+ 24D6              //  ______________________________________________________________________
1268+ 24D6              //
1269+ 24D6              // or           n1 n2 -- n3
1270+ 24D6              // bit logical OR. Returns n3 as n1 | n2
1271+ 24D6                              New_Def OR_OP, "OR", is_code, is_normal
1271+ 24D6             >
1271+ 24D6             >Dict_Ptr        defl    $
1271+ 24D6             >
1271+ 24D6             >//              ______________________________________________________________________
1271+ 24D6             >//              Heap part
1271+ 24D6             >
1271+ 24D6             >
1271+ 24D6             >                org     (Heap_Ptr & $1FFF) + $E000
1271+ E21E             >
1271+ E21E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1271+ E21E             >Latest_Definition defl  Heap_Ptr
1271+ E21E             >
1271+ E21E             >                // dummy db directives used to calculate length of namec
1271+ E21E 4F 52       >                db      "OR"
1271+ E220             >len_NFA         defl    $ - temp_NFA
1271+ E220             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1271+ E21E             >
1271+ E21E 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1271+ E21F 4F 52       >                db      "OR"               // name string in 7-bit ascii, but
1271+ E221             >                org     $-1                 // alter last byte of Name just above to set
1271+ E220 D2          >                db      {b $} | END_BIT     // msb as name end
1271+ E221             >
1271+ E221 16 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1271+ E223             >Prev_Ptr        defl    Heap_Ptr
1271+ E223             >
1271+ E223             >mirror_Ptr      defl    $
1271+ E223             >
1271+ E223 D8 24       >                dw      Dict_Ptr + 2        // xt
1271+ E225             >Heap_Ptr        defl    $ - $E000           // save current HP
1271+ E225             >
1271+ E225             >Current_HP      defl  $ - $E000             // used to set HP once!
1271+ E225             >
1271+ E225             >//              ______________________________________________________________________
1271+ E225             >//              Dictionary part
1271+ E225             >
1271+ E225             >                org     Dict_Ptr
1271+ 24D6             >
1271+ 24D6 23 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1271+ 24D8             >
1271+ 24D8             >OR_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1271+ 24D8 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1271+ 24D8 ~           >
1271+ 24D8 ~           >
1271+ 24D8             >                endif           ; ok        // for other definitions it "points" the correct handler
1271+ 24D8             >                // Use of "; ok" to suppress "warning[fwdref]"
1271+ 24D8             >
1271+ 24D8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1272+ 24D8 D9                           exx
1273+ 24D9 D1                           pop     de
1274+ 24DA E1                           pop     hl
1275+ 24DB 7B                           ld      a, e
1276+ 24DC B5                           or      l
1277+ 24DD 6F                           ld      l, a
1278+ 24DE 7A                           ld      a, d
1279+ 24DF B4                           or      h
1280+ 24E0 18 EF                        jr      Boolean_exit
1281+ 24E2                        //    ld      h, a
1282+ 24E2                        //    push    hl
1283+ 24E2                        //    exx
1284+ 24E2                        //    next
1285+ 24E2
1286+ 24E2              //  ______________________________________________________________________
1287+ 24E2              //
1288+ 24E2              // xor          n1 n2 -- n3
1289+ 24E2              // bit logical OR. Returns n3 as n1 ^ n2
1290+ 24E2                              New_Def XOR_OP, "XOR", is_code, is_normal
1290+ 24E2             >
1290+ 24E2             >Dict_Ptr        defl    $
1290+ 24E2             >
1290+ 24E2             >//              ______________________________________________________________________
1290+ 24E2             >//              Heap part
1290+ 24E2             >
1290+ 24E2             >
1290+ 24E2             >                org     (Heap_Ptr & $1FFF) + $E000
1290+ E225             >
1290+ E225             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1290+ E225             >Latest_Definition defl  Heap_Ptr
1290+ E225             >
1290+ E225             >                // dummy db directives used to calculate length of namec
1290+ E225 58 4F 52    >                db      "XOR"
1290+ E228             >len_NFA         defl    $ - temp_NFA
1290+ E228             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1290+ E225             >
1290+ E225 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1290+ E226 58 4F 52    >                db      "XOR"               // name string in 7-bit ascii, but
1290+ E229             >                org     $-1                 // alter last byte of Name just above to set
1290+ E228 D2          >                db      {b $} | END_BIT     // msb as name end
1290+ E229             >
1290+ E229 1E 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1290+ E22B             >Prev_Ptr        defl    Heap_Ptr
1290+ E22B             >
1290+ E22B             >mirror_Ptr      defl    $
1290+ E22B             >
1290+ E22B E4 24       >                dw      Dict_Ptr + 2        // xt
1290+ E22D             >Heap_Ptr        defl    $ - $E000           // save current HP
1290+ E22D             >
1290+ E22D             >Current_HP      defl  $ - $E000             // used to set HP once!
1290+ E22D             >
1290+ E22D             >//              ______________________________________________________________________
1290+ E22D             >//              Dictionary part
1290+ E22D             >
1290+ E22D             >                org     Dict_Ptr
1290+ 24E2             >
1290+ 24E2 2B 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1290+ 24E4             >
1290+ 24E4             >XOR_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1290+ 24E4 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1290+ 24E4 ~           >
1290+ 24E4 ~           >
1290+ 24E4             >                endif           ; ok        // for other definitions it "points" the correct handler
1290+ 24E4             >                // Use of "; ok" to suppress "warning[fwdref]"
1290+ 24E4             >
1290+ 24E4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1291+ 24E4 D9                           exx
1292+ 24E5 D1                           pop     de
1293+ 24E6 E1                           pop     hl
1294+ 24E7 7B                           ld      a, e
1295+ 24E8 AD                           xor     l
1296+ 24E9 6F                           ld      l, a
1297+ 24EA 7A                           ld      a, d
1298+ 24EB AC                           xor     h
1299+ 24EC 18 E3                        jr      Boolean_exit
1300+ 24EE                        //    ld      h, a
1301+ 24EE                        //    push    hl
1302+ 24EE                        //    exx
1303+ 24EE                        //    next
1304+ 24EE
1305+ 24EE              //  ______________________________________________________________________
1306+ 24EE              //
1307+ 24EE              // sp@      -- a
1308+ 24EE              // returns on top of stack the value of SP before execution
1309+ 24EE                              New_Def SPFETCH, "SP@", is_code, is_normal
1309+ 24EE             >
1309+ 24EE             >Dict_Ptr        defl    $
1309+ 24EE             >
1309+ 24EE             >//              ______________________________________________________________________
1309+ 24EE             >//              Heap part
1309+ 24EE             >
1309+ 24EE             >
1309+ 24EE             >                org     (Heap_Ptr & $1FFF) + $E000
1309+ E22D             >
1309+ E22D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1309+ E22D             >Latest_Definition defl  Heap_Ptr
1309+ E22D             >
1309+ E22D             >                // dummy db directives used to calculate length of namec
1309+ E22D 53 50 40    >                db      "SP@"
1309+ E230             >len_NFA         defl    $ - temp_NFA
1309+ E230             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1309+ E22D             >
1309+ E22D 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1309+ E22E 53 50 40    >                db      "SP@"               // name string in 7-bit ascii, but
1309+ E231             >                org     $-1                 // alter last byte of Name just above to set
1309+ E230 C0          >                db      {b $} | END_BIT     // msb as name end
1309+ E231             >
1309+ E231 25 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1309+ E233             >Prev_Ptr        defl    Heap_Ptr
1309+ E233             >
1309+ E233             >mirror_Ptr      defl    $
1309+ E233             >
1309+ E233 F0 24       >                dw      Dict_Ptr + 2        // xt
1309+ E235             >Heap_Ptr        defl    $ - $E000           // save current HP
1309+ E235             >
1309+ E235             >Current_HP      defl  $ - $E000             // used to set HP once!
1309+ E235             >
1309+ E235             >//              ______________________________________________________________________
1309+ E235             >//              Dictionary part
1309+ E235             >
1309+ E235             >                org     Dict_Ptr
1309+ 24EE             >
1309+ 24EE 33 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1309+ 24F0             >
1309+ 24F0             >SPFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1309+ 24F0 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1309+ 24F0 ~           >
1309+ 24F0 ~           >
1309+ 24F0             >                endif           ; ok        // for other definitions it "points" the correct handler
1309+ 24F0             >                // Use of "; ok" to suppress "warning[fwdref]"
1309+ 24F0             >
1309+ 24F0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1310+ 24F0
1311+ 24F0 21 00 00                     ld      hl, 0
1312+ 24F3 39                           add     hl, sp
1313+ 24F4
1314+ 24F4                              psh1
1314+ 24F4 E5          >                push    hl
1314+ 24F5 DD E9       >                jp      (ix)
1315+ 24F7
1316+ 24F7              //  ______________________________________________________________________
1317+ 24F7              //
1318+ 24F7              // sp!      a --
1319+ 24F7              // restore SP to the initial value passed
1320+ 24F7              // normally it is S0, i.e. the word at offset 6 and 7 of user variabiles area.
1321+ 24F7                              New_Def SPSTORE, "SP!", is_code, is_normal
1321+ 24F7             >
1321+ 24F7             >Dict_Ptr        defl    $
1321+ 24F7             >
1321+ 24F7             >//              ______________________________________________________________________
1321+ 24F7             >//              Heap part
1321+ 24F7             >
1321+ 24F7             >
1321+ 24F7             >                org     (Heap_Ptr & $1FFF) + $E000
1321+ E235             >
1321+ E235             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1321+ E235             >Latest_Definition defl  Heap_Ptr
1321+ E235             >
1321+ E235             >                // dummy db directives used to calculate length of namec
1321+ E235 53 50 21    >                db      "SP!"
1321+ E238             >len_NFA         defl    $ - temp_NFA
1321+ E238             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1321+ E235             >
1321+ E235 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1321+ E236 53 50 21    >                db      "SP!"               // name string in 7-bit ascii, but
1321+ E239             >                org     $-1                 // alter last byte of Name just above to set
1321+ E238 A1          >                db      {b $} | END_BIT     // msb as name end
1321+ E239             >
1321+ E239 2D 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1321+ E23B             >Prev_Ptr        defl    Heap_Ptr
1321+ E23B             >
1321+ E23B             >mirror_Ptr      defl    $
1321+ E23B             >
1321+ E23B F9 24       >                dw      Dict_Ptr + 2        // xt
1321+ E23D             >Heap_Ptr        defl    $ - $E000           // save current HP
1321+ E23D             >
1321+ E23D             >Current_HP      defl  $ - $E000             // used to set HP once!
1321+ E23D             >
1321+ E23D             >//              ______________________________________________________________________
1321+ E23D             >//              Dictionary part
1321+ E23D             >
1321+ E23D             >                org     Dict_Ptr
1321+ 24F7             >
1321+ 24F7 3B 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1321+ 24F9             >
1321+ 24F9             >SPSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1321+ 24F9 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1321+ 24F9 ~           >
1321+ 24F9 ~           >
1321+ 24F9             >                endif           ; ok        // for other definitions it "points" the correct handler
1321+ 24F9             >                // Use of "; ok" to suppress "warning[fwdref]"
1321+ 24F9             >
1321+ 24F9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1322+ 24F9 E1                           pop     hl
1323+ 24FA F9                           ld      sp, hl
1324+ 24FB
1325+ 24FB                              next
1325+ 24FB DD E9       >                jp      (ix)
1326+ 24FD
1327+ 24FD              //  ______________________________________________________________________
1328+ 24FD              //
1329+ 24FD              // rp@      -- a
1330+ 24FD              // returns on top of stack the value of Return-Pointer
1331+ 24FD                              New_Def RPFETCH, "RP@", is_code, is_normal
1331+ 24FD             >
1331+ 24FD             >Dict_Ptr        defl    $
1331+ 24FD             >
1331+ 24FD             >//              ______________________________________________________________________
1331+ 24FD             >//              Heap part
1331+ 24FD             >
1331+ 24FD             >
1331+ 24FD             >                org     (Heap_Ptr & $1FFF) + $E000
1331+ E23D             >
1331+ E23D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1331+ E23D             >Latest_Definition defl  Heap_Ptr
1331+ E23D             >
1331+ E23D             >                // dummy db directives used to calculate length of namec
1331+ E23D 52 50 40    >                db      "RP@"
1331+ E240             >len_NFA         defl    $ - temp_NFA
1331+ E240             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1331+ E23D             >
1331+ E23D 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1331+ E23E 52 50 40    >                db      "RP@"               // name string in 7-bit ascii, but
1331+ E241             >                org     $-1                 // alter last byte of Name just above to set
1331+ E240 C0          >                db      {b $} | END_BIT     // msb as name end
1331+ E241             >
1331+ E241 35 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1331+ E243             >Prev_Ptr        defl    Heap_Ptr
1331+ E243             >
1331+ E243             >mirror_Ptr      defl    $
1331+ E243             >
1331+ E243 FF 24       >                dw      Dict_Ptr + 2        // xt
1331+ E245             >Heap_Ptr        defl    $ - $E000           // save current HP
1331+ E245             >
1331+ E245             >Current_HP      defl  $ - $E000             // used to set HP once!
1331+ E245             >
1331+ E245             >//              ______________________________________________________________________
1331+ E245             >//              Dictionary part
1331+ E245             >
1331+ E245             >                org     Dict_Ptr
1331+ 24FD             >
1331+ 24FD 43 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1331+ 24FF             >
1331+ 24FF             >RPFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1331+ 24FF ~           >                call    runcode ; ok        // for primitive definitions  actual code
1331+ 24FF ~           >
1331+ 24FF ~           >
1331+ 24FF             >                endif           ; ok        // for other definitions it "points" the correct handler
1331+ 24FF             >                // Use of "; ok" to suppress "warning[fwdref]"
1331+ 24FF             >
1331+ 24FF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1332+ 24FF
1333+ 24FF                              // *** ldhlrp
1334+ 24FF                              // *** ex      de, hl
1335+ 24FF D5                           push de
1336+ 2500
1337+ 2500                              next
1337+ 2500 DD E9       >                jp      (ix)
1338+ 2502
1339+ 2502              //  ______________________________________________________________________
1340+ 2502              //
1341+ 2502              // rp!      a --
1342+ 2502              // restore RP to the initial value passed
1343+ 2502              // normally it is R0 @, i.e. the word at offset 8 of user variabiles area.
1344+ 2502                              New_Def RPSTORE, "RP!", is_code, is_normal
1344+ 2502             >
1344+ 2502             >Dict_Ptr        defl    $
1344+ 2502             >
1344+ 2502             >//              ______________________________________________________________________
1344+ 2502             >//              Heap part
1344+ 2502             >
1344+ 2502             >
1344+ 2502             >                org     (Heap_Ptr & $1FFF) + $E000
1344+ E245             >
1344+ E245             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1344+ E245             >Latest_Definition defl  Heap_Ptr
1344+ E245             >
1344+ E245             >                // dummy db directives used to calculate length of namec
1344+ E245 52 50 21    >                db      "RP!"
1344+ E248             >len_NFA         defl    $ - temp_NFA
1344+ E248             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1344+ E245             >
1344+ E245 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1344+ E246 52 50 21    >                db      "RP!"               // name string in 7-bit ascii, but
1344+ E249             >                org     $-1                 // alter last byte of Name just above to set
1344+ E248 A1          >                db      {b $} | END_BIT     // msb as name end
1344+ E249             >
1344+ E249 3D 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1344+ E24B             >Prev_Ptr        defl    Heap_Ptr
1344+ E24B             >
1344+ E24B             >mirror_Ptr      defl    $
1344+ E24B             >
1344+ E24B 04 25       >                dw      Dict_Ptr + 2        // xt
1344+ E24D             >Heap_Ptr        defl    $ - $E000           // save current HP
1344+ E24D             >
1344+ E24D             >Current_HP      defl  $ - $E000             // used to set HP once!
1344+ E24D             >
1344+ E24D             >//              ______________________________________________________________________
1344+ E24D             >//              Dictionary part
1344+ E24D             >
1344+ E24D             >                org     Dict_Ptr
1344+ 2502             >
1344+ 2502 4B 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1344+ 2504             >
1344+ 2504             >RPSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1344+ 2504 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1344+ 2504 ~           >
1344+ 2504 ~           >
1344+ 2504             >                endif           ; ok        // for other definitions it "points" the correct handler
1344+ 2504             >                // Use of "; ok" to suppress "warning[fwdref]"
1344+ 2504             >
1344+ 2504             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1345+ 2504 D1                           pop     de
1346+ 2505                              // *** ex      de, hl
1347+ 2505                              // *** ldrphl
1348+ 2505
1349+ 2505                              next
1349+ 2505 DD E9       >                jp      (ix)
1350+ 2507
1351+ 2507              //  ______________________________________________________________________
1352+ 2507              //
1353+ 2507              // exit       --
1354+ 2507              // exits back to the caller word
1355+ 2507                              New_Def EXIT, "EXIT", is_code, is_normal
1355+ 2507             >
1355+ 2507             >Dict_Ptr        defl    $
1355+ 2507             >
1355+ 2507             >//              ______________________________________________________________________
1355+ 2507             >//              Heap part
1355+ 2507             >
1355+ 2507             >
1355+ 2507             >                org     (Heap_Ptr & $1FFF) + $E000
1355+ E24D             >
1355+ E24D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1355+ E24D             >Latest_Definition defl  Heap_Ptr
1355+ E24D             >
1355+ E24D             >                // dummy db directives used to calculate length of namec
1355+ E24D 45 58 49 54 >                db      "EXIT"
1355+ E251             >len_NFA         defl    $ - temp_NFA
1355+ E251             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1355+ E24D             >
1355+ E24D 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1355+ E24E 45 58 49 54 >                db      "EXIT"               // name string in 7-bit ascii, but
1355+ E252             >                org     $-1                 // alter last byte of Name just above to set
1355+ E251 D4          >                db      {b $} | END_BIT     // msb as name end
1355+ E252             >
1355+ E252 45 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1355+ E254             >Prev_Ptr        defl    Heap_Ptr
1355+ E254             >
1355+ E254             >mirror_Ptr      defl    $
1355+ E254             >
1355+ E254 09 25       >                dw      Dict_Ptr + 2        // xt
1355+ E256             >Heap_Ptr        defl    $ - $E000           // save current HP
1355+ E256             >
1355+ E256             >Current_HP      defl  $ - $E000             // used to set HP once!
1355+ E256             >
1355+ E256             >//              ______________________________________________________________________
1355+ E256             >//              Dictionary part
1355+ E256             >
1355+ E256             >                org     Dict_Ptr
1355+ 2507             >
1355+ 2507 54 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1355+ 2509             >
1355+ 2509             >EXIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1355+ 2509 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1355+ 2509 ~           >
1355+ 2509 ~           >
1355+ 2509             >                endif           ; ok        // for other definitions it "points" the correct handler
1355+ 2509             >                // Use of "; ok" to suppress "warning[fwdref]"
1355+ 2509             >
1355+ 2509             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1356+ 2509 EB                           ex      de, hl
1357+ 250A                              // *** ldhlrp                      // Get Return Stack Pointer
1358+ 250A 4E                           ld      c, (hl)             // pop Instruction Pointer
1359+ 250B 23                           inc     hl                  // from Return Stack
1360+ 250C 46                           ld      b, (hl)
1361+ 250D 23                           inc     hl
1362+ 250E                              // *** ldrphl                      // Set Return Stack Pointer
1363+ 250E EB                           ex      de, hl
1364+ 250F                              next
1364+ 250F DD E9       >                jp      (ix)
1365+ 2511
1366+ 2511              //  ______________________________________________________________________
1367+ 2511              //
1368+ 2511              // lastl      --
1369+ 2511              // exits back to the caller word
1370+ 2511              //              New_Def EXIT, "LASTL", is_code, is_normal
1371+ 2511              //              push    de
1372+ 2511              //              ex      de, hl //**
1373+ 2511              //              // *** ldhlrp                      // Get Return Stack Pointer
1374+ 2511              //              ld      e, (hl)             // pop Instruction Pointer
1375+ 2511              //              inc     hl                  // from Return Stack
1376+ 2511              //              ld      d, (hl)
1377+ 2511              //              inc     hl
1378+ 2511              //              ld      (hl), e
1379+ 2511              //              inc     hl
1380+ 2511              //              ld      (hl), d
1381+ 2511              //              add     hl, -3
1382+ 2511              //              pop     de
1383+ 2511              //              next
1384+ 2511
1385+ 2511              //  ______________________________________________________________________
1386+ 2511              //
1387+ 2511              // >r      n --
1388+ 2511              // pop from calculator-stack and push into return-stack
1389+ 2511                              New_Def TO_R, ">R", is_code, is_normal
1389+ 2511             >
1389+ 2511             >Dict_Ptr        defl    $
1389+ 2511             >
1389+ 2511             >//              ______________________________________________________________________
1389+ 2511             >//              Heap part
1389+ 2511             >
1389+ 2511             >
1389+ 2511             >                org     (Heap_Ptr & $1FFF) + $E000
1389+ E256             >
1389+ E256             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1389+ E256             >Latest_Definition defl  Heap_Ptr
1389+ E256             >
1389+ E256             >                // dummy db directives used to calculate length of namec
1389+ E256 3E 52       >                db      ">R"
1389+ E258             >len_NFA         defl    $ - temp_NFA
1389+ E258             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1389+ E256             >
1389+ E256 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1389+ E257 3E 52       >                db      ">R"               // name string in 7-bit ascii, but
1389+ E259             >                org     $-1                 // alter last byte of Name just above to set
1389+ E258 D2          >                db      {b $} | END_BIT     // msb as name end
1389+ E259             >
1389+ E259 4D 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1389+ E25B             >Prev_Ptr        defl    Heap_Ptr
1389+ E25B             >
1389+ E25B             >mirror_Ptr      defl    $
1389+ E25B             >
1389+ E25B 13 25       >                dw      Dict_Ptr + 2        // xt
1389+ E25D             >Heap_Ptr        defl    $ - $E000           // save current HP
1389+ E25D             >
1389+ E25D             >Current_HP      defl  $ - $E000             // used to set HP once!
1389+ E25D             >
1389+ E25D             >//              ______________________________________________________________________
1389+ E25D             >//              Dictionary part
1389+ E25D             >
1389+ E25D             >                org     Dict_Ptr
1389+ 2511             >
1389+ 2511 5B 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1389+ 2513             >
1389+ 2513             >TO_R:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1389+ 2513 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1389+ 2513 ~           >
1389+ 2513 ~           >
1389+ 2513             >                endif           ; ok        // for other definitions it "points" the correct handler
1389+ 2513             >                // Use of "; ok" to suppress "warning[fwdref]"
1389+ 2513             >
1389+ 2513             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1390+ 2513 E1                           pop     hl
1391+ 2514 EB                           ex      de, hl //**
1392+ 2515                              // *** ldhlrp
1393+ 2515 2B                           dec     hl
1394+ 2516 72                           ld      (hl), d             // store current TOS
1395+ 2517 2B                           dec     hl                  // to Return Stack
1396+ 2518 73                           ld      (hl), e
1397+ 2519                              // *** ldrphl
1398+ 2519 EB                           ex      de, hl //**
1399+ 251A                              next
1399+ 251A DD E9       >                jp      (ix)
1400+ 251C
1401+ 251C              //  ______________________________________________________________________
1402+ 251C              //
1403+ 251C              // r>      -- n
1404+ 251C              // pop from return-stack and push into calculator-stack
1405+ 251C                              New_Def R_TO, "R>", is_code, is_normal
1405+ 251C             >
1405+ 251C             >Dict_Ptr        defl    $
1405+ 251C             >
1405+ 251C             >//              ______________________________________________________________________
1405+ 251C             >//              Heap part
1405+ 251C             >
1405+ 251C             >
1405+ 251C             >                org     (Heap_Ptr & $1FFF) + $E000
1405+ E25D             >
1405+ E25D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1405+ E25D             >Latest_Definition defl  Heap_Ptr
1405+ E25D             >
1405+ E25D             >                // dummy db directives used to calculate length of namec
1405+ E25D 52 3E       >                db      "R>"
1405+ E25F             >len_NFA         defl    $ - temp_NFA
1405+ E25F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1405+ E25D             >
1405+ E25D 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1405+ E25E 52 3E       >                db      "R>"               // name string in 7-bit ascii, but
1405+ E260             >                org     $-1                 // alter last byte of Name just above to set
1405+ E25F BE          >                db      {b $} | END_BIT     // msb as name end
1405+ E260             >
1405+ E260 56 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1405+ E262             >Prev_Ptr        defl    Heap_Ptr
1405+ E262             >
1405+ E262             >mirror_Ptr      defl    $
1405+ E262             >
1405+ E262 1E 25       >                dw      Dict_Ptr + 2        // xt
1405+ E264             >Heap_Ptr        defl    $ - $E000           // save current HP
1405+ E264             >
1405+ E264             >Current_HP      defl  $ - $E000             // used to set HP once!
1405+ E264             >
1405+ E264             >//              ______________________________________________________________________
1405+ E264             >//              Dictionary part
1405+ E264             >
1405+ E264             >                org     Dict_Ptr
1405+ 251C             >
1405+ 251C 62 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1405+ 251E             >
1405+ 251E             >R_TO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1405+ 251E ~           >                call    runcode ; ok        // for primitive definitions  actual code
1405+ 251E ~           >
1405+ 251E ~           >
1405+ 251E             >                endif           ; ok        // for other definitions it "points" the correct handler
1405+ 251E             >                // Use of "; ok" to suppress "warning[fwdref]"
1405+ 251E             >
1405+ 251E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1406+ 251E
1407+ 251E EB                           ex      de, hl //**
1408+ 251F                              // *** ldhlrp
1409+ 251F 5E                           ld      e, (hl)             // retrieve from Return Stack
1410+ 2520 23                           inc     hl
1411+ 2521 56                           ld      d, (hl)
1412+ 2522 23                           inc     hl
1413+ 2523                              // *** ldrphl
1414+ 2523 EB                           ex      de, hl //**
1415+ 2524 E5                           push    hl
1416+ 2525                              next
1416+ 2525 DD E9       >                jp      (ix)
1417+ 2527
1418+ 2527              //  ______________________________________________________________________
1419+ 2527              //
1420+ 2527              // r@           -- n
1421+ 2527              // return on top of stack the value of top of return-stack
1422+ 2527              // Since this is the same as I, we alter R's CFA to jump there
1423+ 2527                              New_Def R_OP, "R@", is_code, is_normal
1423+ 2527             >
1423+ 2527             >Dict_Ptr        defl    $
1423+ 2527             >
1423+ 2527             >//              ______________________________________________________________________
1423+ 2527             >//              Heap part
1423+ 2527             >
1423+ 2527             >
1423+ 2527             >                org     (Heap_Ptr & $1FFF) + $E000
1423+ E264             >
1423+ E264             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1423+ E264             >Latest_Definition defl  Heap_Ptr
1423+ E264             >
1423+ E264             >                // dummy db directives used to calculate length of namec
1423+ E264 52 40       >                db      "R@"
1423+ E266             >len_NFA         defl    $ - temp_NFA
1423+ E266             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1423+ E264             >
1423+ E264 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1423+ E265 52 40       >                db      "R@"               // name string in 7-bit ascii, but
1423+ E267             >                org     $-1                 // alter last byte of Name just above to set
1423+ E266 C0          >                db      {b $} | END_BIT     // msb as name end
1423+ E267             >
1423+ E267 5D 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1423+ E269             >Prev_Ptr        defl    Heap_Ptr
1423+ E269             >
1423+ E269             >mirror_Ptr      defl    $
1423+ E269             >
1423+ E269 29 25       >                dw      Dict_Ptr + 2        // xt
1423+ E26B             >Heap_Ptr        defl    $ - $E000           // save current HP
1423+ E26B             >
1423+ E26B             >Current_HP      defl  $ - $E000             // used to set HP once!
1423+ E26B             >
1423+ E26B             >//              ______________________________________________________________________
1423+ E26B             >//              Dictionary part
1423+ E26B             >
1423+ E26B             >                org     Dict_Ptr
1423+ 2527             >
1423+ 2527 69 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1423+ 2529             >
1423+ 2529             >R_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1423+ 2529 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1423+ 2529 ~           >
1423+ 2529 ~           >
1423+ 2529             >                endif           ; ok        // for other definitions it "points" the correct handler
1423+ 2529             >                // Use of "; ok" to suppress "warning[fwdref]"
1423+ 2529             >
1423+ 2529             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1424+ 2529                          //  Behave  I_Ptr
1425+ 2529 C3 D2 20                     jp      I_Ptr
1426+ 252C
1427+ 252C              //  ______________________________________________________________________
1428+ 252C              //
1429+ 252C              // r            -- n
1430+ 252C              // return on top of stack the value of top of return-stack
1431+ 252C              // Since this is the same as I, we alter R's CFA to jump there
1432+ 252C              //              New_Def R_OLD, "R", is_code, is_normal
1433+ 252C              //              jp      I_Ptr
1434+ 252C
1435+ 252C              //  ______________________________________________________________________
1436+ 252C              //
1437+ 252C              // 0=           n -- f
1438+ 252C              // true (non zero) if n is zero, false (0) elsewere
1439+ 252C                              New_Def ZEQUAL, "0=", is_code, is_normal
1439+ 252C             >
1439+ 252C             >Dict_Ptr        defl    $
1439+ 252C             >
1439+ 252C             >//              ______________________________________________________________________
1439+ 252C             >//              Heap part
1439+ 252C             >
1439+ 252C             >
1439+ 252C             >                org     (Heap_Ptr & $1FFF) + $E000
1439+ E26B             >
1439+ E26B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1439+ E26B             >Latest_Definition defl  Heap_Ptr
1439+ E26B             >
1439+ E26B             >                // dummy db directives used to calculate length of namec
1439+ E26B 30 3D       >                db      "0="
1439+ E26D             >len_NFA         defl    $ - temp_NFA
1439+ E26D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1439+ E26B             >
1439+ E26B 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1439+ E26C 30 3D       >                db      "0="               // name string in 7-bit ascii, but
1439+ E26E             >                org     $-1                 // alter last byte of Name just above to set
1439+ E26D BD          >                db      {b $} | END_BIT     // msb as name end
1439+ E26E             >
1439+ E26E 64 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1439+ E270             >Prev_Ptr        defl    Heap_Ptr
1439+ E270             >
1439+ E270             >mirror_Ptr      defl    $
1439+ E270             >
1439+ E270 2E 25       >                dw      Dict_Ptr + 2        // xt
1439+ E272             >Heap_Ptr        defl    $ - $E000           // save current HP
1439+ E272             >
1439+ E272             >Current_HP      defl  $ - $E000             // used to set HP once!
1439+ E272             >
1439+ E272             >//              ______________________________________________________________________
1439+ E272             >//              Dictionary part
1439+ E272             >
1439+ E272             >                org     Dict_Ptr
1439+ 252C             >
1439+ 252C 70 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1439+ 252E             >
1439+ 252E             >ZEQUAL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1439+ 252E ~           >                call    runcode ; ok        // for primitive definitions  actual code
1439+ 252E ~           >
1439+ 252E ~           >
1439+ 252E             >                endif           ; ok        // for other definitions it "points" the correct handler
1439+ 252E             >                // Use of "; ok" to suppress "warning[fwdref]"
1439+ 252E             >
1439+ 252E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1440+ 252E              Zero_Equal:
1441+ 252E E1                           pop     hl
1442+ 252F 7D                           ld      a, l
1443+ 2530 B4                           or      h
1444+ 2531 21 00 00                     ld      hl, FALSE_FLAG
1445+ 2534 20 01                        jr      nz, ZEqual_Skip
1446+ 2536 2B                               dec     hl
1447+ 2537              ZEqual_Skip:
1448+ 2537                              psh1
1448+ 2537 E5          >                push    hl
1448+ 2538 DD E9       >                jp      (ix)
1449+ 253A
1450+ 253A              //  ______________________________________________________________________
1451+ 253A              //
1452+ 253A              // not         a1 -- a2
1453+ 253A              // increment by 2 top of stack
1454+ 253A                              New_Def NOT_OP, "NOT", is_code, is_normal
1454+ 253A             >
1454+ 253A             >Dict_Ptr        defl    $
1454+ 253A             >
1454+ 253A             >//              ______________________________________________________________________
1454+ 253A             >//              Heap part
1454+ 253A             >
1454+ 253A             >
1454+ 253A             >                org     (Heap_Ptr & $1FFF) + $E000
1454+ E272             >
1454+ E272             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1454+ E272             >Latest_Definition defl  Heap_Ptr
1454+ E272             >
1454+ E272             >                // dummy db directives used to calculate length of namec
1454+ E272 4E 4F 54    >                db      "NOT"
1454+ E275             >len_NFA         defl    $ - temp_NFA
1454+ E275             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1454+ E272             >
1454+ E272 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1454+ E273 4E 4F 54    >                db      "NOT"               // name string in 7-bit ascii, but
1454+ E276             >                org     $-1                 // alter last byte of Name just above to set
1454+ E275 D4          >                db      {b $} | END_BIT     // msb as name end
1454+ E276             >
1454+ E276 6B 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1454+ E278             >Prev_Ptr        defl    Heap_Ptr
1454+ E278             >
1454+ E278             >mirror_Ptr      defl    $
1454+ E278             >
1454+ E278 3C 25       >                dw      Dict_Ptr + 2        // xt
1454+ E27A             >Heap_Ptr        defl    $ - $E000           // save current HP
1454+ E27A             >
1454+ E27A             >Current_HP      defl  $ - $E000             // used to set HP once!
1454+ E27A             >
1454+ E27A             >//              ______________________________________________________________________
1454+ E27A             >//              Dictionary part
1454+ E27A             >
1454+ E27A             >                org     Dict_Ptr
1454+ 253A             >
1454+ 253A 78 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1454+ 253C             >
1454+ 253C             >NOT_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1454+ 253C ~           >                call    runcode ; ok        // for primitive definitions  actual code
1454+ 253C ~           >
1454+ 253C ~           >
1454+ 253C             >                endif           ; ok        // for other definitions it "points" the correct handler
1454+ 253C             >                // Use of "; ok" to suppress "warning[fwdref]"
1454+ 253C             >
1454+ 253C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1455+ 253C                          //  Behave  Zero_Equal
1456+ 253C 18 F0                        jr      Zero_Equal
1457+ 253E
1458+ 253E              //  ______________________________________________________________________
1459+ 253E              //
1460+ 253E              // 0<           n -- f
1461+ 253E              // true (non zero) if n is less than zero, false (0) elsewere
1462+ 253E                              New_Def ZLESS, "0<", is_code, is_normal
1462+ 253E             >
1462+ 253E             >Dict_Ptr        defl    $
1462+ 253E             >
1462+ 253E             >//              ______________________________________________________________________
1462+ 253E             >//              Heap part
1462+ 253E             >
1462+ 253E             >
1462+ 253E             >                org     (Heap_Ptr & $1FFF) + $E000
1462+ E27A             >
1462+ E27A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1462+ E27A             >Latest_Definition defl  Heap_Ptr
1462+ E27A             >
1462+ E27A             >                // dummy db directives used to calculate length of namec
1462+ E27A 30 3C       >                db      "0<"
1462+ E27C             >len_NFA         defl    $ - temp_NFA
1462+ E27C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1462+ E27A             >
1462+ E27A 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1462+ E27B 30 3C       >                db      "0<"               // name string in 7-bit ascii, but
1462+ E27D             >                org     $-1                 // alter last byte of Name just above to set
1462+ E27C BC          >                db      {b $} | END_BIT     // msb as name end
1462+ E27D             >
1462+ E27D 72 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1462+ E27F             >Prev_Ptr        defl    Heap_Ptr
1462+ E27F             >
1462+ E27F             >mirror_Ptr      defl    $
1462+ E27F             >
1462+ E27F 40 25       >                dw      Dict_Ptr + 2        // xt
1462+ E281             >Heap_Ptr        defl    $ - $E000           // save current HP
1462+ E281             >
1462+ E281             >Current_HP      defl  $ - $E000             // used to set HP once!
1462+ E281             >
1462+ E281             >//              ______________________________________________________________________
1462+ E281             >//              Dictionary part
1462+ E281             >
1462+ E281             >                org     Dict_Ptr
1462+ 253E             >
1462+ 253E 7F 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1462+ 2540             >
1462+ 2540             >ZLESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1462+ 2540 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1462+ 2540 ~           >
1462+ 2540 ~           >
1462+ 2540             >                endif           ; ok        // for other definitions it "points" the correct handler
1462+ 2540             >                // Use of "; ok" to suppress "warning[fwdref]"
1462+ 2540             >
1462+ 2540             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1463+ 2540 E1                           pop     hl
1464+ 2541 29                           add     hl, hl
1465+ 2542 ED 62                        sbc     hl, hl
1466+ 2544                              psh1
1466+ 2544 E5          >                push    hl
1466+ 2545 DD E9       >                jp      (ix)
1467+ 2547
1468+ 2547              //  ______________________________________________________________________
1469+ 2547              //
1470+ 2547              // 0>           n -- f
1471+ 2547              // true (non zero) if n is less than zero, false (0) elsewere
1472+ 2547                              New_Def ZGREATER, "0>", is_code, is_normal
1472+ 2547             >
1472+ 2547             >Dict_Ptr        defl    $
1472+ 2547             >
1472+ 2547             >//              ______________________________________________________________________
1472+ 2547             >//              Heap part
1472+ 2547             >
1472+ 2547             >
1472+ 2547             >                org     (Heap_Ptr & $1FFF) + $E000
1472+ E281             >
1472+ E281             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1472+ E281             >Latest_Definition defl  Heap_Ptr
1472+ E281             >
1472+ E281             >                // dummy db directives used to calculate length of namec
1472+ E281 30 3E       >                db      "0>"
1472+ E283             >len_NFA         defl    $ - temp_NFA
1472+ E283             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1472+ E281             >
1472+ E281 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1472+ E282 30 3E       >                db      "0>"               // name string in 7-bit ascii, but
1472+ E284             >                org     $-1                 // alter last byte of Name just above to set
1472+ E283 BE          >                db      {b $} | END_BIT     // msb as name end
1472+ E284             >
1472+ E284 7A 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1472+ E286             >Prev_Ptr        defl    Heap_Ptr
1472+ E286             >
1472+ E286             >mirror_Ptr      defl    $
1472+ E286             >
1472+ E286 49 25       >                dw      Dict_Ptr + 2        // xt
1472+ E288             >Heap_Ptr        defl    $ - $E000           // save current HP
1472+ E288             >
1472+ E288             >Current_HP      defl  $ - $E000             // used to set HP once!
1472+ E288             >
1472+ E288             >//              ______________________________________________________________________
1472+ E288             >//              Dictionary part
1472+ E288             >
1472+ E288             >                org     Dict_Ptr
1472+ 2547             >
1472+ 2547 86 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1472+ 2549             >
1472+ 2549             >ZGREATER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1472+ 2549 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1472+ 2549 ~           >
1472+ 2549 ~           >
1472+ 2549             >                endif           ; ok        // for other definitions it "points" the correct handler
1472+ 2549             >                // Use of "; ok" to suppress "warning[fwdref]"
1472+ 2549             >
1472+ 2549             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1473+ 2549 E1                           pop     hl
1474+ 254A 7D                           ld      a, l
1475+ 254B B4                           or      h
1476+ 254C 29                           add     hl, hl
1477+ 254D 21 00 00                     ld      hl, FALSE_FLAG
1478+ 2550 38 04                        jr      c, ZGreater_Skip
1479+ 2552 A7                               and     a
1480+ 2553 28 01                            jr      z, ZGreater_Skip
1481+ 2555 2B                                   dec     hl
1482+ 2556              ZGreater_Skip:
1483+ 2556                              psh1
1483+ 2556 E5          >                push    hl
1483+ 2557 DD E9       >                jp      (ix)
1484+ 2559
1485+ 2559              //  ______________________________________________________________________
1486+ 2559              //
1487+ 2559              // +            n1 n2 -- n3
1488+ 2559              // returns the unsigned sum of two top values
1489+ 2559                              New_Def PLUS, "+", is_code, is_normal
1489+ 2559             >
1489+ 2559             >Dict_Ptr        defl    $
1489+ 2559             >
1489+ 2559             >//              ______________________________________________________________________
1489+ 2559             >//              Heap part
1489+ 2559             >
1489+ 2559             >
1489+ 2559             >                org     (Heap_Ptr & $1FFF) + $E000
1489+ E288             >
1489+ E288             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1489+ E288             >Latest_Definition defl  Heap_Ptr
1489+ E288             >
1489+ E288             >                // dummy db directives used to calculate length of namec
1489+ E288 2B          >                db      "+"
1489+ E289             >len_NFA         defl    $ - temp_NFA
1489+ E289             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1489+ E288             >
1489+ E288 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1489+ E289 2B          >                db      "+"               // name string in 7-bit ascii, but
1489+ E28A             >                org     $-1                 // alter last byte of Name just above to set
1489+ E289 AB          >                db      {b $} | END_BIT     // msb as name end
1489+ E28A             >
1489+ E28A 81 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1489+ E28C             >Prev_Ptr        defl    Heap_Ptr
1489+ E28C             >
1489+ E28C             >mirror_Ptr      defl    $
1489+ E28C             >
1489+ E28C 5B 25       >                dw      Dict_Ptr + 2        // xt
1489+ E28E             >Heap_Ptr        defl    $ - $E000           // save current HP
1489+ E28E             >
1489+ E28E             >Current_HP      defl  $ - $E000             // used to set HP once!
1489+ E28E             >
1489+ E28E             >//              ______________________________________________________________________
1489+ E28E             >//              Dictionary part
1489+ E28E             >
1489+ E28E             >                org     Dict_Ptr
1489+ 2559             >
1489+ 2559 8C 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1489+ 255B             >
1489+ 255B             >PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1489+ 255B ~           >                call    runcode ; ok        // for primitive definitions  actual code
1489+ 255B ~           >
1489+ 255B ~           >
1489+ 255B             >                endif           ; ok        // for other definitions it "points" the correct handler
1489+ 255B             >                // Use of "; ok" to suppress "warning[fwdref]"
1489+ 255B             >
1489+ 255B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1490+ 255B D9                           exx
1491+ 255C E1                           pop     hl
1492+ 255D D1                           pop     de
1493+ 255E 19                           add     hl, de
1494+ 255F E5                           push    hl
1495+ 2560 D9                           exx
1496+ 2561                              next
1496+ 2561 DD E9       >                jp      (ix)
1497+ 2563
1498+ 2563
1499+ 2563              //  ______________________________________________________________________
1500+ 2563              //
1501+ 2563              // d+           d1 d2 -- d3
1502+ 2563              // returns the unsigned sum of two top double-numbers
1503+ 2563              //      d2  d1
1504+ 2563              //      h l h l
1505+ 2563              // SP   LHEDLHED
1506+ 2563              // SP  +01234567
1507+ 2563                              New_Def DPLUS, "D+", is_code, is_normal
1507+ 2563             >
1507+ 2563             >Dict_Ptr        defl    $
1507+ 2563             >
1507+ 2563             >//              ______________________________________________________________________
1507+ 2563             >//              Heap part
1507+ 2563             >
1507+ 2563             >
1507+ 2563             >                org     (Heap_Ptr & $1FFF) + $E000
1507+ E28E             >
1507+ E28E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1507+ E28E             >Latest_Definition defl  Heap_Ptr
1507+ E28E             >
1507+ E28E             >                // dummy db directives used to calculate length of namec
1507+ E28E 44 2B       >                db      "D+"
1507+ E290             >len_NFA         defl    $ - temp_NFA
1507+ E290             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1507+ E28E             >
1507+ E28E 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1507+ E28F 44 2B       >                db      "D+"               // name string in 7-bit ascii, but
1507+ E291             >                org     $-1                 // alter last byte of Name just above to set
1507+ E290 AB          >                db      {b $} | END_BIT     // msb as name end
1507+ E291             >
1507+ E291 88 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1507+ E293             >Prev_Ptr        defl    Heap_Ptr
1507+ E293             >
1507+ E293             >mirror_Ptr      defl    $
1507+ E293             >
1507+ E293 65 25       >                dw      Dict_Ptr + 2        // xt
1507+ E295             >Heap_Ptr        defl    $ - $E000           // save current HP
1507+ E295             >
1507+ E295             >Current_HP      defl  $ - $E000             // used to set HP once!
1507+ E295             >
1507+ E295             >//              ______________________________________________________________________
1507+ E295             >//              Dictionary part
1507+ E295             >
1507+ E295             >                org     Dict_Ptr
1507+ 2563             >
1507+ 2563 93 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1507+ 2565             >
1507+ 2565             >DPLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1507+ 2565 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1507+ 2565 ~           >
1507+ 2565 ~           >
1507+ 2565             >                endif           ; ok        // for other definitions it "points" the correct handler
1507+ 2565             >                // Use of "; ok" to suppress "warning[fwdref]"
1507+ 2565             >
1507+ 2565             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1508+ 2565
1509+ 2565 D9                           exx
1510+ 2566 C1                           pop     bc                  // bc := d2.H
1511+ 2567 D1                           pop     de                  // hl := d2.L
1512+ 2568 E1                           pop     hl                  // d1.H
1513+ 2569 E3                           ex      (sp), hl            // d1.L
1514+ 256A 19                           add     hl, de              // hl := d2.L + d1.L
1515+ 256B E3                           ex      (sp), hl            // d1.H
1516+ 256C ED 4A                        adc     hl, bc              // d1.H + d2.H
1517+ 256E E5                           push    hl
1518+ 256F D9                           exx
1519+ 2570                              next
1519+ 2570 DD E9       >                jp      (ix)
1520+ 2572
1521+ 2572              //  ______________________________________________________________________
1522+ 2572              //
1523+ 2572              // 1+           n1 -- n2
1524+ 2572              // increment by 1 top of stack
1525+ 2572                              New_Def ONE_PLUS, "1+", is_code, is_normal
1525+ 2572             >
1525+ 2572             >Dict_Ptr        defl    $
1525+ 2572             >
1525+ 2572             >//              ______________________________________________________________________
1525+ 2572             >//              Heap part
1525+ 2572             >
1525+ 2572             >
1525+ 2572             >                org     (Heap_Ptr & $1FFF) + $E000
1525+ E295             >
1525+ E295             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1525+ E295             >Latest_Definition defl  Heap_Ptr
1525+ E295             >
1525+ E295             >                // dummy db directives used to calculate length of namec
1525+ E295 31 2B       >                db      "1+"
1525+ E297             >len_NFA         defl    $ - temp_NFA
1525+ E297             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1525+ E295             >
1525+ E295 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1525+ E296 31 2B       >                db      "1+"               // name string in 7-bit ascii, but
1525+ E298             >                org     $-1                 // alter last byte of Name just above to set
1525+ E297 AB          >                db      {b $} | END_BIT     // msb as name end
1525+ E298             >
1525+ E298 8E 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1525+ E29A             >Prev_Ptr        defl    Heap_Ptr
1525+ E29A             >
1525+ E29A             >mirror_Ptr      defl    $
1525+ E29A             >
1525+ E29A 74 25       >                dw      Dict_Ptr + 2        // xt
1525+ E29C             >Heap_Ptr        defl    $ - $E000           // save current HP
1525+ E29C             >
1525+ E29C             >Current_HP      defl  $ - $E000             // used to set HP once!
1525+ E29C             >
1525+ E29C             >//              ______________________________________________________________________
1525+ E29C             >//              Dictionary part
1525+ E29C             >
1525+ E29C             >                org     Dict_Ptr
1525+ 2572             >
1525+ 2572 9A 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1525+ 2574             >
1525+ 2574             >ONE_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1525+ 2574 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1525+ 2574 ~           >
1525+ 2574 ~           >
1525+ 2574             >                endif           ; ok        // for other definitions it "points" the correct handler
1525+ 2574             >                // Use of "; ok" to suppress "warning[fwdref]"
1525+ 2574             >
1525+ 2574             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1526+ 2574 E1                           pop     hl
1527+ 2575 23                           inc     hl
1528+ 2576
1529+ 2576                              psh1
1529+ 2576 E5          >                push    hl
1529+ 2577 DD E9       >                jp      (ix)
1530+ 2579
1531+ 2579              //  ______________________________________________________________________
1532+ 2579              //
1533+ 2579              // 1-           n1 -- n2
1534+ 2579              // decrement by 1 top of stack
1535+ 2579                              New_Def ONE_SUBTRACT, "1-", is_code, is_normal
1535+ 2579             >
1535+ 2579             >Dict_Ptr        defl    $
1535+ 2579             >
1535+ 2579             >//              ______________________________________________________________________
1535+ 2579             >//              Heap part
1535+ 2579             >
1535+ 2579             >
1535+ 2579             >                org     (Heap_Ptr & $1FFF) + $E000
1535+ E29C             >
1535+ E29C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1535+ E29C             >Latest_Definition defl  Heap_Ptr
1535+ E29C             >
1535+ E29C             >                // dummy db directives used to calculate length of namec
1535+ E29C 31 2D       >                db      "1-"
1535+ E29E             >len_NFA         defl    $ - temp_NFA
1535+ E29E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1535+ E29C             >
1535+ E29C 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1535+ E29D 31 2D       >                db      "1-"               // name string in 7-bit ascii, but
1535+ E29F             >                org     $-1                 // alter last byte of Name just above to set
1535+ E29E AD          >                db      {b $} | END_BIT     // msb as name end
1535+ E29F             >
1535+ E29F 95 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1535+ E2A1             >Prev_Ptr        defl    Heap_Ptr
1535+ E2A1             >
1535+ E2A1             >mirror_Ptr      defl    $
1535+ E2A1             >
1535+ E2A1 7B 25       >                dw      Dict_Ptr + 2        // xt
1535+ E2A3             >Heap_Ptr        defl    $ - $E000           // save current HP
1535+ E2A3             >
1535+ E2A3             >Current_HP      defl  $ - $E000             // used to set HP once!
1535+ E2A3             >
1535+ E2A3             >//              ______________________________________________________________________
1535+ E2A3             >//              Dictionary part
1535+ E2A3             >
1535+ E2A3             >                org     Dict_Ptr
1535+ 2579             >
1535+ 2579 A1 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1535+ 257B             >
1535+ 257B             >ONE_SUBTRACT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1535+ 257B ~           >                call    runcode ; ok        // for primitive definitions  actual code
1535+ 257B ~           >
1535+ 257B ~           >
1535+ 257B             >                endif           ; ok        // for other definitions it "points" the correct handler
1535+ 257B             >                // Use of "; ok" to suppress "warning[fwdref]"
1535+ 257B             >
1535+ 257B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1536+ 257B E1                           pop     hl
1537+ 257C 2B                           dec     hl
1538+ 257D
1539+ 257D                              psh1
1539+ 257D E5          >                push    hl
1539+ 257E DD E9       >                jp      (ix)
1540+ 2580
1541+ 2580              //  ______________________________________________________________________
1542+ 2580              //
1543+ 2580              // 2+           n1 -- n2
1544+ 2580              // increment by 2 top of stack
1545+ 2580                              New_Def TWO_PLUS, "2+", is_code, is_normal
1545+ 2580             >
1545+ 2580             >Dict_Ptr        defl    $
1545+ 2580             >
1545+ 2580             >//              ______________________________________________________________________
1545+ 2580             >//              Heap part
1545+ 2580             >
1545+ 2580             >
1545+ 2580             >                org     (Heap_Ptr & $1FFF) + $E000
1545+ E2A3             >
1545+ E2A3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1545+ E2A3             >Latest_Definition defl  Heap_Ptr
1545+ E2A3             >
1545+ E2A3             >                // dummy db directives used to calculate length of namec
1545+ E2A3 32 2B       >                db      "2+"
1545+ E2A5             >len_NFA         defl    $ - temp_NFA
1545+ E2A5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1545+ E2A3             >
1545+ E2A3 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1545+ E2A4 32 2B       >                db      "2+"               // name string in 7-bit ascii, but
1545+ E2A6             >                org     $-1                 // alter last byte of Name just above to set
1545+ E2A5 AB          >                db      {b $} | END_BIT     // msb as name end
1545+ E2A6             >
1545+ E2A6 9C 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1545+ E2A8             >Prev_Ptr        defl    Heap_Ptr
1545+ E2A8             >
1545+ E2A8             >mirror_Ptr      defl    $
1545+ E2A8             >
1545+ E2A8 82 25       >                dw      Dict_Ptr + 2        // xt
1545+ E2AA             >Heap_Ptr        defl    $ - $E000           // save current HP
1545+ E2AA             >
1545+ E2AA             >Current_HP      defl  $ - $E000             // used to set HP once!
1545+ E2AA             >
1545+ E2AA             >//              ______________________________________________________________________
1545+ E2AA             >//              Dictionary part
1545+ E2AA             >
1545+ E2AA             >                org     Dict_Ptr
1545+ 2580             >
1545+ 2580 A8 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1545+ 2582             >
1545+ 2582             >TWO_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1545+ 2582 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1545+ 2582 ~           >
1545+ 2582 ~           >
1545+ 2582             >                endif           ; ok        // for other definitions it "points" the correct handler
1545+ 2582             >                // Use of "; ok" to suppress "warning[fwdref]"
1545+ 2582             >
1545+ 2582             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1546+ 2582              Two_Plus:
1547+ 2582 E1                           pop     hl
1548+ 2583 23                           inc     hl
1549+ 2584 23                           inc     hl
1550+ 2585
1551+ 2585                              psh1
1551+ 2585 E5          >                push    hl
1551+ 2586 DD E9       >                jp      (ix)
1552+ 2588
1553+ 2588              //  ______________________________________________________________________
1554+ 2588              //
1555+ 2588              // cell+        a1 -- a2
1556+ 2588              // increment by 2 top of stack
1557+ 2588                              New_Def CELL_PLUS, "CELL+", is_code, is_normal
1557+ 2588             >
1557+ 2588             >Dict_Ptr        defl    $
1557+ 2588             >
1557+ 2588             >//              ______________________________________________________________________
1557+ 2588             >//              Heap part
1557+ 2588             >
1557+ 2588             >
1557+ 2588             >                org     (Heap_Ptr & $1FFF) + $E000
1557+ E2AA             >
1557+ E2AA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1557+ E2AA             >Latest_Definition defl  Heap_Ptr
1557+ E2AA             >
1557+ E2AA             >                // dummy db directives used to calculate length of namec
1557+ E2AA 43 45 4C 4C >                db      "CELL+"
1557+ E2AE 2B          >
1557+ E2AF             >len_NFA         defl    $ - temp_NFA
1557+ E2AF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1557+ E2AA             >
1557+ E2AA 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1557+ E2AB 43 45 4C 4C >                db      "CELL+"               // name string in 7-bit ascii, but
1557+ E2AF 2B          >
1557+ E2B0             >                org     $-1                 // alter last byte of Name just above to set
1557+ E2AF AB          >                db      {b $} | END_BIT     // msb as name end
1557+ E2B0             >
1557+ E2B0 A3 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1557+ E2B2             >Prev_Ptr        defl    Heap_Ptr
1557+ E2B2             >
1557+ E2B2             >mirror_Ptr      defl    $
1557+ E2B2             >
1557+ E2B2 8A 25       >                dw      Dict_Ptr + 2        // xt
1557+ E2B4             >Heap_Ptr        defl    $ - $E000           // save current HP
1557+ E2B4             >
1557+ E2B4             >Current_HP      defl  $ - $E000             // used to set HP once!
1557+ E2B4             >
1557+ E2B4             >//              ______________________________________________________________________
1557+ E2B4             >//              Dictionary part
1557+ E2B4             >
1557+ E2B4             >                org     Dict_Ptr
1557+ 2588             >
1557+ 2588 B2 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1557+ 258A             >
1557+ 258A             >CELL_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1557+ 258A ~           >                call    runcode ; ok        // for primitive definitions  actual code
1557+ 258A ~           >
1557+ 258A ~           >
1557+ 258A             >                endif           ; ok        // for other definitions it "points" the correct handler
1557+ 258A             >                // Use of "; ok" to suppress "warning[fwdref]"
1557+ 258A             >
1557+ 258A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1558+ 258A 18 F6                        jr      Two_Plus
1559+ 258C
1560+ 258C              //  ______________________________________________________________________
1561+ 258C              //
1562+ 258C              // align        a1 -- a2
1563+ 258C              // align memory : not used
1564+ 258C              //              New_Def ALIGN_ADDR, "ALIGN", is_code, is_normal
1565+ 258C              //            next
1566+ 258C
1567+ 258C              //  ______________________________________________________________________
1568+ 258C              //
1569+ 258C              // cell-        a1 -- a2
1570+ 258C              // decrement by 2 top of stack
1571+ 258C                              New_Def CELL_MINUS, "CELL-", is_code, is_normal
1571+ 258C             >
1571+ 258C             >Dict_Ptr        defl    $
1571+ 258C             >
1571+ 258C             >//              ______________________________________________________________________
1571+ 258C             >//              Heap part
1571+ 258C             >
1571+ 258C             >
1571+ 258C             >                org     (Heap_Ptr & $1FFF) + $E000
1571+ E2B4             >
1571+ E2B4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1571+ E2B4             >Latest_Definition defl  Heap_Ptr
1571+ E2B4             >
1571+ E2B4             >                // dummy db directives used to calculate length of namec
1571+ E2B4 43 45 4C 4C >                db      "CELL-"
1571+ E2B8 2D          >
1571+ E2B9             >len_NFA         defl    $ - temp_NFA
1571+ E2B9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1571+ E2B4             >
1571+ E2B4 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1571+ E2B5 43 45 4C 4C >                db      "CELL-"               // name string in 7-bit ascii, but
1571+ E2B9 2D          >
1571+ E2BA             >                org     $-1                 // alter last byte of Name just above to set
1571+ E2B9 AD          >                db      {b $} | END_BIT     // msb as name end
1571+ E2BA             >
1571+ E2BA AA 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1571+ E2BC             >Prev_Ptr        defl    Heap_Ptr
1571+ E2BC             >
1571+ E2BC             >mirror_Ptr      defl    $
1571+ E2BC             >
1571+ E2BC 8E 25       >                dw      Dict_Ptr + 2        // xt
1571+ E2BE             >Heap_Ptr        defl    $ - $E000           // save current HP
1571+ E2BE             >
1571+ E2BE             >Current_HP      defl  $ - $E000             // used to set HP once!
1571+ E2BE             >
1571+ E2BE             >//              ______________________________________________________________________
1571+ E2BE             >//              Dictionary part
1571+ E2BE             >
1571+ E2BE             >                org     Dict_Ptr
1571+ 258C             >
1571+ 258C BC 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1571+ 258E             >
1571+ 258E             >CELL_MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1571+ 258E ~           >                call    runcode ; ok        // for primitive definitions  actual code
1571+ 258E ~           >
1571+ 258E ~           >
1571+ 258E             >                endif           ; ok        // for other definitions it "points" the correct handler
1571+ 258E             >                // Use of "; ok" to suppress "warning[fwdref]"
1571+ 258E             >
1571+ 258E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1572+ 258E              CellMinus:
1573+ 258E E1                           pop     hl
1574+ 258F 2B                           dec     hl
1575+ 2590 2B                           dec     hl
1576+ 2591
1577+ 2591                              psh1
1577+ 2591 E5          >                push    hl
1577+ 2592 DD E9       >                jp      (ix)
1578+ 2594
1579+ 2594              //  ______________________________________________________________________
1580+ 2594              //
1581+ 2594              // 2-           a1 -- a2
1582+ 2594              // decrement by 2 top of stack
1583+ 2594                              New_Def TWO_MINUS, "2-", is_code, is_normal
1583+ 2594             >
1583+ 2594             >Dict_Ptr        defl    $
1583+ 2594             >
1583+ 2594             >//              ______________________________________________________________________
1583+ 2594             >//              Heap part
1583+ 2594             >
1583+ 2594             >
1583+ 2594             >                org     (Heap_Ptr & $1FFF) + $E000
1583+ E2BE             >
1583+ E2BE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1583+ E2BE             >Latest_Definition defl  Heap_Ptr
1583+ E2BE             >
1583+ E2BE             >                // dummy db directives used to calculate length of namec
1583+ E2BE 32 2D       >                db      "2-"
1583+ E2C0             >len_NFA         defl    $ - temp_NFA
1583+ E2C0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1583+ E2BE             >
1583+ E2BE 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1583+ E2BF 32 2D       >                db      "2-"               // name string in 7-bit ascii, but
1583+ E2C1             >                org     $-1                 // alter last byte of Name just above to set
1583+ E2C0 AD          >                db      {b $} | END_BIT     // msb as name end
1583+ E2C1             >
1583+ E2C1 B4 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1583+ E2C3             >Prev_Ptr        defl    Heap_Ptr
1583+ E2C3             >
1583+ E2C3             >mirror_Ptr      defl    $
1583+ E2C3             >
1583+ E2C3 96 25       >                dw      Dict_Ptr + 2        // xt
1583+ E2C5             >Heap_Ptr        defl    $ - $E000           // save current HP
1583+ E2C5             >
1583+ E2C5             >Current_HP      defl  $ - $E000             // used to set HP once!
1583+ E2C5             >
1583+ E2C5             >//              ______________________________________________________________________
1583+ E2C5             >//              Dictionary part
1583+ E2C5             >
1583+ E2C5             >                org     Dict_Ptr
1583+ 2594             >
1583+ 2594 C3 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1583+ 2596             >
1583+ 2596             >TWO_MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1583+ 2596 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1583+ 2596 ~           >
1583+ 2596 ~           >
1583+ 2596             >                endif           ; ok        // for other definitions it "points" the correct handler
1583+ 2596             >                // Use of "; ok" to suppress "warning[fwdref]"
1583+ 2596             >
1583+ 2596             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1584+ 2596 C3 8E 25                     jp      CellMinus
1585+ 2599
1586+ 2599              //  ______________________________________________________________________
1587+ 2599              //
1588+ 2599              // negate       n1 -- n2
1589+ 2599              // change the sign of number
1590+ 2599                              New_Def MINUS, "NEGATE", is_code, is_normal
1590+ 2599             >
1590+ 2599             >Dict_Ptr        defl    $
1590+ 2599             >
1590+ 2599             >//              ______________________________________________________________________
1590+ 2599             >//              Heap part
1590+ 2599             >
1590+ 2599             >
1590+ 2599             >                org     (Heap_Ptr & $1FFF) + $E000
1590+ E2C5             >
1590+ E2C5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1590+ E2C5             >Latest_Definition defl  Heap_Ptr
1590+ E2C5             >
1590+ E2C5             >                // dummy db directives used to calculate length of namec
1590+ E2C5 4E 45 47 41 >                db      "NEGATE"
1590+ E2C9 54 45       >
1590+ E2CB             >len_NFA         defl    $ - temp_NFA
1590+ E2CB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1590+ E2C5             >
1590+ E2C5 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1590+ E2C6 4E 45 47 41 >                db      "NEGATE"               // name string in 7-bit ascii, but
1590+ E2CA 54 45       >
1590+ E2CC             >                org     $-1                 // alter last byte of Name just above to set
1590+ E2CB C5          >                db      {b $} | END_BIT     // msb as name end
1590+ E2CC             >
1590+ E2CC BE 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1590+ E2CE             >Prev_Ptr        defl    Heap_Ptr
1590+ E2CE             >
1590+ E2CE             >mirror_Ptr      defl    $
1590+ E2CE             >
1590+ E2CE 9B 25       >                dw      Dict_Ptr + 2        // xt
1590+ E2D0             >Heap_Ptr        defl    $ - $E000           // save current HP
1590+ E2D0             >
1590+ E2D0             >Current_HP      defl  $ - $E000             // used to set HP once!
1590+ E2D0             >
1590+ E2D0             >//              ______________________________________________________________________
1590+ E2D0             >//              Dictionary part
1590+ E2D0             >
1590+ E2D0             >                org     Dict_Ptr
1590+ 2599             >
1590+ 2599 CE 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1590+ 259B             >
1590+ 259B             >MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1590+ 259B ~           >                call    runcode ; ok        // for primitive definitions  actual code
1590+ 259B ~           >
1590+ 259B ~           >
1590+ 259B             >                endif           ; ok        // for other definitions it "points" the correct handler
1590+ 259B             >                // Use of "; ok" to suppress "warning[fwdref]"
1590+ 259B             >
1590+ 259B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1591+ 259B D9                           exx
1592+ 259C D1                           pop     de
1593+ 259D AF                           xor     a
1594+ 259E 67                           ld      h, a
1595+ 259F 6F                           ld      l, a
1596+ 25A0 ED 52                        sbc     hl, de
1597+ 25A2 E5                           push    hl
1598+ 25A3 D9                           exx
1599+ 25A4                              next
1599+ 25A4 DD E9       >                jp      (ix)
1600+ 25A6
1601+ 25A6              //  ______________________________________________________________________
1602+ 25A6              //
1603+ 25A6              // dnegate      d1 -- d2
1604+ 25A6              // change the sign of a double number
1605+ 25A6                              New_Def DMINUS, "DNEGATE", is_code, is_normal
1605+ 25A6             >
1605+ 25A6             >Dict_Ptr        defl    $
1605+ 25A6             >
1605+ 25A6             >//              ______________________________________________________________________
1605+ 25A6             >//              Heap part
1605+ 25A6             >
1605+ 25A6             >
1605+ 25A6             >                org     (Heap_Ptr & $1FFF) + $E000
1605+ E2D0             >
1605+ E2D0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1605+ E2D0             >Latest_Definition defl  Heap_Ptr
1605+ E2D0             >
1605+ E2D0             >                // dummy db directives used to calculate length of namec
1605+ E2D0 44 4E 45 47 >                db      "DNEGATE"
1605+ E2D4 41 54 45    >
1605+ E2D7             >len_NFA         defl    $ - temp_NFA
1605+ E2D7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1605+ E2D0             >
1605+ E2D0 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1605+ E2D1 44 4E 45 47 >                db      "DNEGATE"               // name string in 7-bit ascii, but
1605+ E2D5 41 54 45    >
1605+ E2D8             >                org     $-1                 // alter last byte of Name just above to set
1605+ E2D7 C5          >                db      {b $} | END_BIT     // msb as name end
1605+ E2D8             >
1605+ E2D8 C5 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1605+ E2DA             >Prev_Ptr        defl    Heap_Ptr
1605+ E2DA             >
1605+ E2DA             >mirror_Ptr      defl    $
1605+ E2DA             >
1605+ E2DA A8 25       >                dw      Dict_Ptr + 2        // xt
1605+ E2DC             >Heap_Ptr        defl    $ - $E000           // save current HP
1605+ E2DC             >
1605+ E2DC             >Current_HP      defl  $ - $E000             // used to set HP once!
1605+ E2DC             >
1605+ E2DC             >//              ______________________________________________________________________
1605+ E2DC             >//              Dictionary part
1605+ E2DC             >
1605+ E2DC             >                org     Dict_Ptr
1605+ 25A6             >
1605+ 25A6 DA 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1605+ 25A8             >
1605+ 25A8             >DMINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1605+ 25A8 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1605+ 25A8 ~           >
1605+ 25A8 ~           >
1605+ 25A8             >                endif           ; ok        // for other definitions it "points" the correct handler
1605+ 25A8             >                // Use of "; ok" to suppress "warning[fwdref]"
1605+ 25A8             >
1605+ 25A8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1606+ 25A8 D9                           exx
1607+ 25A9 C1                           pop     bc                  // d1.H
1608+ 25AA D1                           pop     de                  // d1.L
1609+ 25AB AF                           xor     a
1610+ 25AC 67                           ld      h, a
1611+ 25AD 6F                           ld      l, a
1612+ 25AE ED 52                        sbc     hl, de              // subtact from zero
1613+ 25B0 E5                           push    hl                  // > d2-L
1614+ 25B1 67                           ld      h, a
1615+ 25B2 6F                           ld      l, a
1616+ 25B3 ED 42                        sbc     hl, bc              // subtract from zero with carry
1617+ 25B5                                                          // > d2-H
1618+ 25B5 E5                           push    hl
1619+ 25B6 D9                           exx
1620+ 25B7                              next
1620+ 25B7 DD E9       >                jp      (ix)
1621+ 25B9
1622+ 25B9              //  ______________________________________________________________________
1623+ 25B9              //
1624+ 25B9              // over         n1 n2 -- n1 n2 n1
1625+ 25B9              // copy the second value of stack and put it on top.
1626+ 25B9                              New_Def OVER, "OVER", is_code, is_normal
1626+ 25B9             >
1626+ 25B9             >Dict_Ptr        defl    $
1626+ 25B9             >
1626+ 25B9             >//              ______________________________________________________________________
1626+ 25B9             >//              Heap part
1626+ 25B9             >
1626+ 25B9             >
1626+ 25B9             >                org     (Heap_Ptr & $1FFF) + $E000
1626+ E2DC             >
1626+ E2DC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1626+ E2DC             >Latest_Definition defl  Heap_Ptr
1626+ E2DC             >
1626+ E2DC             >                // dummy db directives used to calculate length of namec
1626+ E2DC 4F 56 45 52 >                db      "OVER"
1626+ E2E0             >len_NFA         defl    $ - temp_NFA
1626+ E2E0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1626+ E2DC             >
1626+ E2DC 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1626+ E2DD 4F 56 45 52 >                db      "OVER"               // name string in 7-bit ascii, but
1626+ E2E1             >                org     $-1                 // alter last byte of Name just above to set
1626+ E2E0 D2          >                db      {b $} | END_BIT     // msb as name end
1626+ E2E1             >
1626+ E2E1 D0 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1626+ E2E3             >Prev_Ptr        defl    Heap_Ptr
1626+ E2E3             >
1626+ E2E3             >mirror_Ptr      defl    $
1626+ E2E3             >
1626+ E2E3 BB 25       >                dw      Dict_Ptr + 2        // xt
1626+ E2E5             >Heap_Ptr        defl    $ - $E000           // save current HP
1626+ E2E5             >
1626+ E2E5             >Current_HP      defl  $ - $E000             // used to set HP once!
1626+ E2E5             >
1626+ E2E5             >//              ______________________________________________________________________
1626+ E2E5             >//              Dictionary part
1626+ E2E5             >
1626+ E2E5             >                org     Dict_Ptr
1626+ 25B9             >
1626+ 25B9 E3 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1626+ 25BB             >
1626+ 25BB             >OVER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1626+ 25BB ~           >                call    runcode ; ok        // for primitive definitions  actual code
1626+ 25BB ~           >
1626+ 25BB ~           >
1626+ 25BB             >                endif           ; ok        // for other definitions it "points" the correct handler
1626+ 25BB             >                // Use of "; ok" to suppress "warning[fwdref]"
1626+ 25BB             >
1626+ 25BB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1627+ 25BB                              // exx     // we can use af instead OPTIMIZATION possible
1628+ 25BB F1                           pop     af                  //   n2
1629+ 25BC E1                           pop     hl                  // < n1
1630+ 25BD E5                           push    hl                  // > n1
1631+ 25BE F5                           push    af                  // > n2
1632+ 25BF E5                           push    hl                  // > n1
1633+ 25C0                              // exx
1634+ 25C0                              next
1634+ 25C0 DD E9       >                jp      (ix)
1635+ 25C2
1636+ 25C2              //  ______________________________________________________________________
1637+ 25C2              //
1638+ 25C2              // drop         n1 --
1639+ 25C2              // drops the top of stack
1640+ 25C2                              New_Def DROP, "DROP", is_code, is_normal
1640+ 25C2             >
1640+ 25C2             >Dict_Ptr        defl    $
1640+ 25C2             >
1640+ 25C2             >//              ______________________________________________________________________
1640+ 25C2             >//              Heap part
1640+ 25C2             >
1640+ 25C2             >
1640+ 25C2             >                org     (Heap_Ptr & $1FFF) + $E000
1640+ E2E5             >
1640+ E2E5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1640+ E2E5             >Latest_Definition defl  Heap_Ptr
1640+ E2E5             >
1640+ E2E5             >                // dummy db directives used to calculate length of namec
1640+ E2E5 44 52 4F 50 >                db      "DROP"
1640+ E2E9             >len_NFA         defl    $ - temp_NFA
1640+ E2E9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1640+ E2E5             >
1640+ E2E5 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1640+ E2E6 44 52 4F 50 >                db      "DROP"               // name string in 7-bit ascii, but
1640+ E2EA             >                org     $-1                 // alter last byte of Name just above to set
1640+ E2E9 D0          >                db      {b $} | END_BIT     // msb as name end
1640+ E2EA             >
1640+ E2EA DC 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1640+ E2EC             >Prev_Ptr        defl    Heap_Ptr
1640+ E2EC             >
1640+ E2EC             >mirror_Ptr      defl    $
1640+ E2EC             >
1640+ E2EC C4 25       >                dw      Dict_Ptr + 2        // xt
1640+ E2EE             >Heap_Ptr        defl    $ - $E000           // save current HP
1640+ E2EE             >
1640+ E2EE             >Current_HP      defl  $ - $E000             // used to set HP once!
1640+ E2EE             >
1640+ E2EE             >//              ______________________________________________________________________
1640+ E2EE             >//              Dictionary part
1640+ E2EE             >
1640+ E2EE             >                org     Dict_Ptr
1640+ 25C2             >
1640+ 25C2 EC 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1640+ 25C4             >
1640+ 25C4             >DROP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1640+ 25C4 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1640+ 25C4 ~           >
1640+ 25C4 ~           >
1640+ 25C4             >                endif           ; ok        // for other definitions it "points" the correct handler
1640+ 25C4             >                // Use of "; ok" to suppress "warning[fwdref]"
1640+ 25C4             >
1640+ 25C4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1641+ 25C4 E1                           pop     hl                  // < n1 and discard previous TOS
1642+ 25C5                              next
1642+ 25C5 DD E9       >                jp      (ix)
1643+ 25C7
1644+ 25C7              //  ______________________________________________________________________
1645+ 25C7              //
1646+ 25C7              // nip          n1 n2 -- n2
1647+ 25C7              // drops the second elemento on the stack
1648+ 25C7                              New_Def NIP, "NIP", is_code, is_normal
1648+ 25C7             >
1648+ 25C7             >Dict_Ptr        defl    $
1648+ 25C7             >
1648+ 25C7             >//              ______________________________________________________________________
1648+ 25C7             >//              Heap part
1648+ 25C7             >
1648+ 25C7             >
1648+ 25C7             >                org     (Heap_Ptr & $1FFF) + $E000
1648+ E2EE             >
1648+ E2EE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1648+ E2EE             >Latest_Definition defl  Heap_Ptr
1648+ E2EE             >
1648+ E2EE             >                // dummy db directives used to calculate length of namec
1648+ E2EE 4E 49 50    >                db      "NIP"
1648+ E2F1             >len_NFA         defl    $ - temp_NFA
1648+ E2F1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1648+ E2EE             >
1648+ E2EE 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1648+ E2EF 4E 49 50    >                db      "NIP"               // name string in 7-bit ascii, but
1648+ E2F2             >                org     $-1                 // alter last byte of Name just above to set
1648+ E2F1 D0          >                db      {b $} | END_BIT     // msb as name end
1648+ E2F2             >
1648+ E2F2 E5 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1648+ E2F4             >Prev_Ptr        defl    Heap_Ptr
1648+ E2F4             >
1648+ E2F4             >mirror_Ptr      defl    $
1648+ E2F4             >
1648+ E2F4 C9 25       >                dw      Dict_Ptr + 2        // xt
1648+ E2F6             >Heap_Ptr        defl    $ - $E000           // save current HP
1648+ E2F6             >
1648+ E2F6             >Current_HP      defl  $ - $E000             // used to set HP once!
1648+ E2F6             >
1648+ E2F6             >//              ______________________________________________________________________
1648+ E2F6             >//              Dictionary part
1648+ E2F6             >
1648+ E2F6             >                org     Dict_Ptr
1648+ 25C7             >
1648+ 25C7 F4 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1648+ 25C9             >
1648+ 25C9             >NIP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1648+ 25C9 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1648+ 25C9 ~           >
1648+ 25C9 ~           >
1648+ 25C9             >                endif           ; ok        // for other definitions it "points" the correct handler
1648+ 25C9             >                // Use of "; ok" to suppress "warning[fwdref]"
1648+ 25C9             >
1648+ 25C9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1649+ 25C9
1650+ 25C9 E1                           pop     hl                  // < n1 discarded
1651+ 25CA E3                           ex      (sp), hl
1652+ 25CB                              next
1652+ 25CB DD E9       >                jp      (ix)
1653+ 25CD
1654+ 25CD              //  ______________________________________________________________________
1655+ 25CD              //
1656+ 25CD              // tuck         n1 n2 -- n2 n1 n2
1657+ 25CD              // copy the top element after the second.
1658+ 25CD                              New_Def TUCK, "TUCK", is_code, is_normal
1658+ 25CD             >
1658+ 25CD             >Dict_Ptr        defl    $
1658+ 25CD             >
1658+ 25CD             >//              ______________________________________________________________________
1658+ 25CD             >//              Heap part
1658+ 25CD             >
1658+ 25CD             >
1658+ 25CD             >                org     (Heap_Ptr & $1FFF) + $E000
1658+ E2F6             >
1658+ E2F6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1658+ E2F6             >Latest_Definition defl  Heap_Ptr
1658+ E2F6             >
1658+ E2F6             >                // dummy db directives used to calculate length of namec
1658+ E2F6 54 55 43 4B >                db      "TUCK"
1658+ E2FA             >len_NFA         defl    $ - temp_NFA
1658+ E2FA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1658+ E2F6             >
1658+ E2F6 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1658+ E2F7 54 55 43 4B >                db      "TUCK"               // name string in 7-bit ascii, but
1658+ E2FB             >                org     $-1                 // alter last byte of Name just above to set
1658+ E2FA CB          >                db      {b $} | END_BIT     // msb as name end
1658+ E2FB             >
1658+ E2FB EE 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1658+ E2FD             >Prev_Ptr        defl    Heap_Ptr
1658+ E2FD             >
1658+ E2FD             >mirror_Ptr      defl    $
1658+ E2FD             >
1658+ E2FD CF 25       >                dw      Dict_Ptr + 2        // xt
1658+ E2FF             >Heap_Ptr        defl    $ - $E000           // save current HP
1658+ E2FF             >
1658+ E2FF             >Current_HP      defl  $ - $E000             // used to set HP once!
1658+ E2FF             >
1658+ E2FF             >//              ______________________________________________________________________
1658+ E2FF             >//              Dictionary part
1658+ E2FF             >
1658+ E2FF             >                org     Dict_Ptr
1658+ 25CD             >
1658+ 25CD FD 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1658+ 25CF             >
1658+ 25CF             >TUCK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1658+ 25CF ~           >                call    runcode ; ok        // for primitive definitions  actual code
1658+ 25CF ~           >
1658+ 25CF ~           >
1658+ 25CF             >                endif           ; ok        // for other definitions it "points" the correct handler
1658+ 25CF             >                // Use of "; ok" to suppress "warning[fwdref]"
1658+ 25CF             >
1658+ 25CF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1659+ 25CF E1                           pop     hl
1660+ 25D0 F1                           pop     af                  // < n1
1661+ 25D1 E5                           push    hl                  // > n2  and TOS
1662+ 25D2 F5                           push    af                  // > n1
1663+ 25D3 E5                           push    hl
1664+ 25D4                              next
1664+ 25D4 DD E9       >                jp      (ix)
1665+ 25D6
1666+ 25D6              //  ______________________________________________________________________
1667+ 25D6              //
1668+ 25D6              // swap         n1 n2 -- n2 n1
1669+ 25D6              // swaps the two values on top of stack
1670+ 25D6                              New_Def SWAP, "SWAP", is_code, is_normal
1670+ 25D6             >
1670+ 25D6             >Dict_Ptr        defl    $
1670+ 25D6             >
1670+ 25D6             >//              ______________________________________________________________________
1670+ 25D6             >//              Heap part
1670+ 25D6             >
1670+ 25D6             >
1670+ 25D6             >                org     (Heap_Ptr & $1FFF) + $E000
1670+ E2FF             >
1670+ E2FF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1670+ E2FF             >Latest_Definition defl  Heap_Ptr
1670+ E2FF             >
1670+ E2FF             >                // dummy db directives used to calculate length of namec
1670+ E2FF 53 57 41 50 >                db      "SWAP"
1670+ E303             >len_NFA         defl    $ - temp_NFA
1670+ E303             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1670+ E2FF             >
1670+ E2FF 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1670+ E300 53 57 41 50 >                db      "SWAP"               // name string in 7-bit ascii, but
1670+ E304             >                org     $-1                 // alter last byte of Name just above to set
1670+ E303 D0          >                db      {b $} | END_BIT     // msb as name end
1670+ E304             >
1670+ E304 F6 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1670+ E306             >Prev_Ptr        defl    Heap_Ptr
1670+ E306             >
1670+ E306             >mirror_Ptr      defl    $
1670+ E306             >
1670+ E306 D8 25       >                dw      Dict_Ptr + 2        // xt
1670+ E308             >Heap_Ptr        defl    $ - $E000           // save current HP
1670+ E308             >
1670+ E308             >Current_HP      defl  $ - $E000             // used to set HP once!
1670+ E308             >
1670+ E308             >//              ______________________________________________________________________
1670+ E308             >//              Dictionary part
1670+ E308             >
1670+ E308             >                org     Dict_Ptr
1670+ 25D6             >
1670+ 25D6 06 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1670+ 25D8             >
1670+ 25D8             >SWAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1670+ 25D8 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1670+ 25D8 ~           >
1670+ 25D8 ~           >
1670+ 25D8             >                endif           ; ok        // for other definitions it "points" the correct handler
1670+ 25D8             >                // Use of "; ok" to suppress "warning[fwdref]"
1670+ 25D8             >
1670+ 25D8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1671+ 25D8 E1                           pop     hl                  // < n1
1672+ 25D9 E3                           ex      (sp),hl             // > n2
1673+ 25DA E5                           push    hl                  // copy n1 to TOS
1674+ 25DB                              next
1674+ 25DB DD E9       >                jp      (ix)
1675+ 25DD
1676+ 25DD              //  ______________________________________________________________________
1677+ 25DD              //
1678+ 25DD              // dup         n -- n n
1679+ 25DD              // duplicates the top value of stack
1680+ 25DD                              New_Def DUP, "DUP", is_code, is_normal
1680+ 25DD             >
1680+ 25DD             >Dict_Ptr        defl    $
1680+ 25DD             >
1680+ 25DD             >//              ______________________________________________________________________
1680+ 25DD             >//              Heap part
1680+ 25DD             >
1680+ 25DD             >
1680+ 25DD             >                org     (Heap_Ptr & $1FFF) + $E000
1680+ E308             >
1680+ E308             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1680+ E308             >Latest_Definition defl  Heap_Ptr
1680+ E308             >
1680+ E308             >                // dummy db directives used to calculate length of namec
1680+ E308 44 55 50    >                db      "DUP"
1680+ E30B             >len_NFA         defl    $ - temp_NFA
1680+ E30B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1680+ E308             >
1680+ E308 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1680+ E309 44 55 50    >                db      "DUP"               // name string in 7-bit ascii, but
1680+ E30C             >                org     $-1                 // alter last byte of Name just above to set
1680+ E30B D0          >                db      {b $} | END_BIT     // msb as name end
1680+ E30C             >
1680+ E30C FF 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1680+ E30E             >Prev_Ptr        defl    Heap_Ptr
1680+ E30E             >
1680+ E30E             >mirror_Ptr      defl    $
1680+ E30E             >
1680+ E30E DF 25       >                dw      Dict_Ptr + 2        // xt
1680+ E310             >Heap_Ptr        defl    $ - $E000           // save current HP
1680+ E310             >
1680+ E310             >Current_HP      defl  $ - $E000             // used to set HP once!
1680+ E310             >
1680+ E310             >//              ______________________________________________________________________
1680+ E310             >//              Dictionary part
1680+ E310             >
1680+ E310             >                org     Dict_Ptr
1680+ 25DD             >
1680+ 25DD 0E 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1680+ 25DF             >
1680+ 25DF             >DUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1680+ 25DF ~           >                call    runcode ; ok        // for primitive definitions  actual code
1680+ 25DF ~           >
1680+ 25DF ~           >
1680+ 25DF             >                endif           ; ok        // for other definitions it "points" the correct handler
1680+ 25DF             >                // Use of "; ok" to suppress "warning[fwdref]"
1680+ 25DF             >
1680+ 25DF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1681+ 25DF E1                           pop     hl
1682+ 25E0 E5                           push    hl                  // > n duplicate TOS
1683+ 25E1 E5                           push    hl
1684+ 25E2                              next
1684+ 25E2 DD E9       >                jp      (ix)
1685+ 25E4
1686+ 25E4              //  ______________________________________________________________________
1687+ 25E4              //
1688+ 25E4              // rot         n1 n2 n3 -- n2 n3 n1
1689+ 25E4              // Rotates the 3 top values of stack by picking the 3rd in access-order
1690+ 25E4              // and putting it on top. The other two are shifted down one place.
1691+ 25E4                              New_Def ROT, "ROT", is_code, is_normal
1691+ 25E4             >
1691+ 25E4             >Dict_Ptr        defl    $
1691+ 25E4             >
1691+ 25E4             >//              ______________________________________________________________________
1691+ 25E4             >//              Heap part
1691+ 25E4             >
1691+ 25E4             >
1691+ 25E4             >                org     (Heap_Ptr & $1FFF) + $E000
1691+ E310             >
1691+ E310             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1691+ E310             >Latest_Definition defl  Heap_Ptr
1691+ E310             >
1691+ E310             >                // dummy db directives used to calculate length of namec
1691+ E310 52 4F 54    >                db      "ROT"
1691+ E313             >len_NFA         defl    $ - temp_NFA
1691+ E313             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1691+ E310             >
1691+ E310 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1691+ E311 52 4F 54    >                db      "ROT"               // name string in 7-bit ascii, but
1691+ E314             >                org     $-1                 // alter last byte of Name just above to set
1691+ E313 D4          >                db      {b $} | END_BIT     // msb as name end
1691+ E314             >
1691+ E314 08 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1691+ E316             >Prev_Ptr        defl    Heap_Ptr
1691+ E316             >
1691+ E316             >mirror_Ptr      defl    $
1691+ E316             >
1691+ E316 E6 25       >                dw      Dict_Ptr + 2        // xt
1691+ E318             >Heap_Ptr        defl    $ - $E000           // save current HP
1691+ E318             >
1691+ E318             >Current_HP      defl  $ - $E000             // used to set HP once!
1691+ E318             >
1691+ E318             >//              ______________________________________________________________________
1691+ E318             >//              Dictionary part
1691+ E318             >
1691+ E318             >                org     Dict_Ptr
1691+ 25E4             >
1691+ 25E4 16 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1691+ 25E6             >
1691+ 25E6             >ROT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1691+ 25E6 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1691+ 25E6 ~           >
1691+ 25E6 ~           >
1691+ 25E6             >                endif           ; ok        // for other definitions it "points" the correct handler
1691+ 25E6             >                // Use of "; ok" to suppress "warning[fwdref]"
1691+ 25E6             >
1691+ 25E6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1692+ 25E6                          //  exx
1693+ 25E6 F1                           pop     af                  // < n3
1694+ 25E7 E1                           pop     hl                  // < n2
1695+ 25E8 E3                           ex      (sp),hl             // > n2 < n1
1696+ 25E9 F5                           push    af                  // > n3
1697+ 25EA E5                           push    hl                  // copy n1 to TOS
1698+ 25EB                          //  exx
1699+ 25EB                              next
1699+ 25EB DD E9       >                jp      (ix)
1700+ 25ED
1701+ 25ED              //  ______________________________________________________________________
1702+ 25ED              //
1703+ 25ED              // -rot         n1 n2 n3 -- n3 n1 n2
1704+ 25ED              // Rotates the 3 top values of stack by picking the 1st in access-order
1705+ 25ED              // and putting back to 3rd place. The other two are shifted down one place.
1706+ 25ED                              New_Def DASH_ROT, "-ROT", is_code, is_normal
1706+ 25ED             >
1706+ 25ED             >Dict_Ptr        defl    $
1706+ 25ED             >
1706+ 25ED             >//              ______________________________________________________________________
1706+ 25ED             >//              Heap part
1706+ 25ED             >
1706+ 25ED             >
1706+ 25ED             >                org     (Heap_Ptr & $1FFF) + $E000
1706+ E318             >
1706+ E318             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1706+ E318             >Latest_Definition defl  Heap_Ptr
1706+ E318             >
1706+ E318             >                // dummy db directives used to calculate length of namec
1706+ E318 2D 52 4F 54 >                db      "-ROT"
1706+ E31C             >len_NFA         defl    $ - temp_NFA
1706+ E31C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1706+ E318             >
1706+ E318 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1706+ E319 2D 52 4F 54 >                db      "-ROT"               // name string in 7-bit ascii, but
1706+ E31D             >                org     $-1                 // alter last byte of Name just above to set
1706+ E31C D4          >                db      {b $} | END_BIT     // msb as name end
1706+ E31D             >
1706+ E31D 10 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1706+ E31F             >Prev_Ptr        defl    Heap_Ptr
1706+ E31F             >
1706+ E31F             >mirror_Ptr      defl    $
1706+ E31F             >
1706+ E31F EF 25       >                dw      Dict_Ptr + 2        // xt
1706+ E321             >Heap_Ptr        defl    $ - $E000           // save current HP
1706+ E321             >
1706+ E321             >Current_HP      defl  $ - $E000             // used to set HP once!
1706+ E321             >
1706+ E321             >//              ______________________________________________________________________
1706+ E321             >//              Dictionary part
1706+ E321             >
1706+ E321             >                org     Dict_Ptr
1706+ 25ED             >
1706+ 25ED 1F 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1706+ 25EF             >
1706+ 25EF             >DASH_ROT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1706+ 25EF ~           >                call    runcode ; ok        // for primitive definitions  actual code
1706+ 25EF ~           >
1706+ 25EF ~           >
1706+ 25EF             >                endif           ; ok        // for other definitions it "points" the correct handler
1706+ 25EF             >                // Use of "; ok" to suppress "warning[fwdref]"
1706+ 25EF             >
1706+ 25EF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1707+ 25EF                          //  exx
1708+ 25EF E1                           pop     hl                  // < n3
1709+ 25F0 F1                           pop     af                  // < n2
1710+ 25F1 E3                           ex      (sp),hl             // > n3 < n1
1711+ 25F2 E5                           push    hl                  // > n1
1712+ 25F3 F5                           push    af                  // copy n3 to TOS
1713+ 25F4                          //  exx
1714+ 25F4                              next
1714+ 25F4 DD E9       >                jp      (ix)
1715+ 25F6
1716+ 25F6              //  ______________________________________________________________________
1717+ 25F6              //
1718+ 25F6              // pick        n1 -- nx
1719+ 25F6              // picks the nth element from TOS
1720+ 25F6                              New_Def PICK, "PICK", is_code, is_normal
1720+ 25F6             >
1720+ 25F6             >Dict_Ptr        defl    $
1720+ 25F6             >
1720+ 25F6             >//              ______________________________________________________________________
1720+ 25F6             >//              Heap part
1720+ 25F6             >
1720+ 25F6             >
1720+ 25F6             >                org     (Heap_Ptr & $1FFF) + $E000
1720+ E321             >
1720+ E321             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1720+ E321             >Latest_Definition defl  Heap_Ptr
1720+ E321             >
1720+ E321             >                // dummy db directives used to calculate length of namec
1720+ E321 50 49 43 4B >                db      "PICK"
1720+ E325             >len_NFA         defl    $ - temp_NFA
1720+ E325             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1720+ E321             >
1720+ E321 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1720+ E322 50 49 43 4B >                db      "PICK"               // name string in 7-bit ascii, but
1720+ E326             >                org     $-1                 // alter last byte of Name just above to set
1720+ E325 CB          >                db      {b $} | END_BIT     // msb as name end
1720+ E326             >
1720+ E326 18 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1720+ E328             >Prev_Ptr        defl    Heap_Ptr
1720+ E328             >
1720+ E328             >mirror_Ptr      defl    $
1720+ E328             >
1720+ E328 F8 25       >                dw      Dict_Ptr + 2        // xt
1720+ E32A             >Heap_Ptr        defl    $ - $E000           // save current HP
1720+ E32A             >
1720+ E32A             >Current_HP      defl  $ - $E000             // used to set HP once!
1720+ E32A             >
1720+ E32A             >//              ______________________________________________________________________
1720+ E32A             >//              Dictionary part
1720+ E32A             >
1720+ E32A             >                org     Dict_Ptr
1720+ 25F6             >
1720+ 25F6 28 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1720+ 25F8             >
1720+ 25F8             >PICK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1720+ 25F8 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1720+ 25F8 ~           >
1720+ 25F8 ~           >
1720+ 25F8             >                endif           ; ok        // for other definitions it "points" the correct handler
1720+ 25F8             >                // Use of "; ok" to suppress "warning[fwdref]"
1720+ 25F8             >
1720+ 25F8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1721+ 25F8 E1                           pop     hl                  // take TOS as index
1722+ 25F9 29                           add     hl, hl              // as cells
1723+ 25FA 39                           add     hl, sp              // from Stack Pointer
1724+ 25FB 7E                           ld      a, (hl)             // replace TOS
1725+ 25FC 23                           inc     hl
1726+ 25FD 66                           ld      h, (hl)
1727+ 25FE 6F                           ld      l, a
1728+ 25FF E5                           push    hl
1729+ 2600                              next
1729+ 2600 DD E9       >                jp      (ix)
1730+ 2602
1731+ 2602
1732+ 2602              //  ______________________________________________________________________
1733+ 2602              //
1734+ 2602              // roll        n1 n2 n3 ... n -- n2 n3 ... n1
1735+ 2602              // picks the nth element from TOS
1736+ 2602              //              New_Def ROLL, "ROLL", is_code, is_normal
1737+ 2602              //              exx                     // we need all registers free
1738+ 2602              //              pop     hl              // number of cells to roll
1739+ 2602              //              ld      a, h
1740+ 2602              //              or       l
1741+ 2602              //              jr      z, Roll_Zero
1742+ 2602              //                  add     hl, hl              // number of bytes to move
1743+ 2602              //                  ld      b, h
1744+ 2602              //                  ld      c, l
1745+ 2602              //                  add     hl, sp          // address of n1
1746+ 2602              //                  ld      a, (hl)         // take n1 into a and a,
1747+ 2602              //                  inc     hl
1748+ 2602              //                  ex      af, af'
1749+ 2602              //                  ld      a, (hl)         // take n1 into a and a,
1750+ 2602              //                  ld      d, h
1751+ 2602              //                  ld      e, l
1752+ 2602              //                  dec     hl
1753+ 2602              //                  dec     hl
1754+ 2602              //                  lddr
1755+ 2602              //                  ex      de, hl
1756+ 2602              //                  ld      (hl), a
1757+ 2602              //                  dec     hl
1758+ 2602              //                  ex      af, af'
1759+ 2602              //                  ld      (hl), a
1760+ 2602              //Roll_Zero:
1761+ 2602              //              exx
1762+ 2602              //              next
1763+ 2602
1764+ 2602
1765+ 2602              //  ______________________________________________________________________
1766+ 2602              //
1767+ 2602              // 2over        d1 d2 -- d1 d2 d1
1768+ 2602              //              n1 n2 n3 n4 -- n1 n2 n3 n4 n1 n2
1769+ 2602              // copy the second double of stack and put on top.
1770+ 2602                              New_Def TWO_OVER, "2OVER", is_code, is_normal
1770+ 2602             >
1770+ 2602             >Dict_Ptr        defl    $
1770+ 2602             >
1770+ 2602             >//              ______________________________________________________________________
1770+ 2602             >//              Heap part
1770+ 2602             >
1770+ 2602             >
1770+ 2602             >                org     (Heap_Ptr & $1FFF) + $E000
1770+ E32A             >
1770+ E32A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1770+ E32A             >Latest_Definition defl  Heap_Ptr
1770+ E32A             >
1770+ E32A             >                // dummy db directives used to calculate length of namec
1770+ E32A 32 4F 56 45 >                db      "2OVER"
1770+ E32E 52          >
1770+ E32F             >len_NFA         defl    $ - temp_NFA
1770+ E32F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1770+ E32A             >
1770+ E32A 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1770+ E32B 32 4F 56 45 >                db      "2OVER"               // name string in 7-bit ascii, but
1770+ E32F 52          >
1770+ E330             >                org     $-1                 // alter last byte of Name just above to set
1770+ E32F D2          >                db      {b $} | END_BIT     // msb as name end
1770+ E330             >
1770+ E330 21 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1770+ E332             >Prev_Ptr        defl    Heap_Ptr
1770+ E332             >
1770+ E332             >mirror_Ptr      defl    $
1770+ E332             >
1770+ E332 04 26       >                dw      Dict_Ptr + 2        // xt
1770+ E334             >Heap_Ptr        defl    $ - $E000           // save current HP
1770+ E334             >
1770+ E334             >Current_HP      defl  $ - $E000             // used to set HP once!
1770+ E334             >
1770+ E334             >//              ______________________________________________________________________
1770+ E334             >//              Dictionary part
1770+ E334             >
1770+ E334             >                org     Dict_Ptr
1770+ 2602             >
1770+ 2602 32 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1770+ 2604             >
1770+ 2604             >TWO_OVER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1770+ 2604 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1770+ 2604 ~           >
1770+ 2604 ~           >
1770+ 2604             >                endif           ; ok        // for other definitions it "points" the correct handler
1770+ 2604             >                // Use of "; ok" to suppress "warning[fwdref]"
1770+ 2604             >
1770+ 2604             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1771+ 2604 D9                           exx
1772+ 2605 E1                           pop     hl      // 10
1773+ 2606 D1                           pop     de      // 10
1774+ 2607 C1                           pop     bc      // 10
1775+ 2608 F1                           pop     af      // 10
1776+ 2609 F5                           push    af      // 11
1777+ 260A C5                           push    bc      // 11
1778+ 260B D5                           push    de      // 11
1779+ 260C E5                           push    hl      // 11
1780+ 260D F5                           push    af      // 11
1781+ 260E C5                           push    bc      // 11
1782+ 260F D9                           exx
1783+ 2610                              next
1783+ 2610 DD E9       >                jp      (ix)
1784+ 2612
1785+ 2612              //  ______________________________________________________________________
1786+ 2612              //
1787+ 2612              // 2drop        d --
1788+ 2612              //              n1 n2 --
1789+ 2612              // drops the top double from stack
1790+ 2612                              New_Def TWO_DROP, "2DROP", is_code, is_normal
1790+ 2612             >
1790+ 2612             >Dict_Ptr        defl    $
1790+ 2612             >
1790+ 2612             >//              ______________________________________________________________________
1790+ 2612             >//              Heap part
1790+ 2612             >
1790+ 2612             >
1790+ 2612             >                org     (Heap_Ptr & $1FFF) + $E000
1790+ E334             >
1790+ E334             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1790+ E334             >Latest_Definition defl  Heap_Ptr
1790+ E334             >
1790+ E334             >                // dummy db directives used to calculate length of namec
1790+ E334 32 44 52 4F >                db      "2DROP"
1790+ E338 50          >
1790+ E339             >len_NFA         defl    $ - temp_NFA
1790+ E339             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1790+ E334             >
1790+ E334 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1790+ E335 32 44 52 4F >                db      "2DROP"               // name string in 7-bit ascii, but
1790+ E339 50          >
1790+ E33A             >                org     $-1                 // alter last byte of Name just above to set
1790+ E339 D0          >                db      {b $} | END_BIT     // msb as name end
1790+ E33A             >
1790+ E33A 2A 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1790+ E33C             >Prev_Ptr        defl    Heap_Ptr
1790+ E33C             >
1790+ E33C             >mirror_Ptr      defl    $
1790+ E33C             >
1790+ E33C 14 26       >                dw      Dict_Ptr + 2        // xt
1790+ E33E             >Heap_Ptr        defl    $ - $E000           // save current HP
1790+ E33E             >
1790+ E33E             >Current_HP      defl  $ - $E000             // used to set HP once!
1790+ E33E             >
1790+ E33E             >//              ______________________________________________________________________
1790+ E33E             >//              Dictionary part
1790+ E33E             >
1790+ E33E             >                org     Dict_Ptr
1790+ 2612             >
1790+ 2612 3C 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1790+ 2614             >
1790+ 2614             >TWO_DROP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1790+ 2614 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1790+ 2614 ~           >
1790+ 2614 ~           >
1790+ 2614             >                endif           ; ok        // for other definitions it "points" the correct handler
1790+ 2614             >                // Use of "; ok" to suppress "warning[fwdref]"
1790+ 2614             >
1790+ 2614             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1791+ 2614 E1                           pop     hl
1792+ 2615 E1                           pop     hl
1793+ 2616                              next
1793+ 2616 DD E9       >                jp      (ix)
1794+ 2618
1795+ 2618              //  ______________________________________________________________________
1796+ 2618              //
1797+ 2618              // 2nip         d1 d2 -- d2
1798+ 2618              //              n1 n2 n3 n4 -- n3 n4
1799+ 2618              // drops the second double on the stack
1800+ 2618              //              New_Def TWO_NIP, 4, "2nip"
1801+ 2618              //              ...
1802+ 2618
1803+ 2618              //  ______________________________________________________________________
1804+ 2618              //
1805+ 2618              // 2tuck         d1 d2 -- d2 d1 d2
1806+ 2618              // copy the top element after the second.
1807+ 2618              //              New_Def TWO_TUCK, 5, "2tuck"
1808+ 2618              //              ...
1809+ 2618
1810+ 2618              //  ______________________________________________________________________
1811+ 2618              //
1812+ 2618              // 2swap         d1 d2 -- d2 d1
1813+ 2618              //               n1 n2 n3 n4 -- n3 n4 n1 n2
1814+ 2618              // swaps the two doubles on top of stack
1815+ 2618                              New_Def TWO_SWAP, "2SWAP", is_code, is_normal
1815+ 2618             >
1815+ 2618             >Dict_Ptr        defl    $
1815+ 2618             >
1815+ 2618             >//              ______________________________________________________________________
1815+ 2618             >//              Heap part
1815+ 2618             >
1815+ 2618             >
1815+ 2618             >                org     (Heap_Ptr & $1FFF) + $E000
1815+ E33E             >
1815+ E33E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1815+ E33E             >Latest_Definition defl  Heap_Ptr
1815+ E33E             >
1815+ E33E             >                // dummy db directives used to calculate length of namec
1815+ E33E 32 53 57 41 >                db      "2SWAP"
1815+ E342 50          >
1815+ E343             >len_NFA         defl    $ - temp_NFA
1815+ E343             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1815+ E33E             >
1815+ E33E 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1815+ E33F 32 53 57 41 >                db      "2SWAP"               // name string in 7-bit ascii, but
1815+ E343 50          >
1815+ E344             >                org     $-1                 // alter last byte of Name just above to set
1815+ E343 D0          >                db      {b $} | END_BIT     // msb as name end
1815+ E344             >
1815+ E344 34 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1815+ E346             >Prev_Ptr        defl    Heap_Ptr
1815+ E346             >
1815+ E346             >mirror_Ptr      defl    $
1815+ E346             >
1815+ E346 1A 26       >                dw      Dict_Ptr + 2        // xt
1815+ E348             >Heap_Ptr        defl    $ - $E000           // save current HP
1815+ E348             >
1815+ E348             >Current_HP      defl  $ - $E000             // used to set HP once!
1815+ E348             >
1815+ E348             >//              ______________________________________________________________________
1815+ E348             >//              Dictionary part
1815+ E348             >
1815+ E348             >                org     Dict_Ptr
1815+ 2618             >
1815+ 2618 46 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1815+ 261A             >
1815+ 261A             >TWO_SWAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1815+ 261A ~           >                call    runcode ; ok        // for primitive definitions  actual code
1815+ 261A ~           >
1815+ 261A ~           >
1815+ 261A             >                endif           ; ok        // for other definitions it "points" the correct handler
1815+ 261A             >                // Use of "; ok" to suppress "warning[fwdref]"
1815+ 261A             >
1815+ 261A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1816+ 261A D9                           exx
1817+ 261B F1                           pop     af                  //   d2-H
1818+ 261C E1                           pop     hl                  // < d2-L
1819+ 261D D1                           pop     de                  // < d1-H
1820+ 261E E3                           ex      (sp), hl            // < d1-L > d2-L
1821+ 261F F5                           push    af                  // > d2-H
1822+ 2620 E5                           push    hl                  // > d1-L
1823+ 2621 D5                           push    de
1824+ 2622 D9                           exx
1825+ 2623                              next
1825+ 2623 DD E9       >                jp      (ix)
1826+ 2625
1827+ 2625              //  ______________________________________________________________________
1828+ 2625              //
1829+ 2625              // 2dup         d -- d d
1830+ 2625              //              n1 n2 -- n1 n2 n1 n2
1831+ 2625              // duplicates the top double of stack
1832+ 2625                              New_Def TWO_DUP, "2DUP", is_code, is_normal
1832+ 2625             >
1832+ 2625             >Dict_Ptr        defl    $
1832+ 2625             >
1832+ 2625             >//              ______________________________________________________________________
1832+ 2625             >//              Heap part
1832+ 2625             >
1832+ 2625             >
1832+ 2625             >                org     (Heap_Ptr & $1FFF) + $E000
1832+ E348             >
1832+ E348             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1832+ E348             >Latest_Definition defl  Heap_Ptr
1832+ E348             >
1832+ E348             >                // dummy db directives used to calculate length of namec
1832+ E348 32 44 55 50 >                db      "2DUP"
1832+ E34C             >len_NFA         defl    $ - temp_NFA
1832+ E34C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1832+ E348             >
1832+ E348 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1832+ E349 32 44 55 50 >                db      "2DUP"               // name string in 7-bit ascii, but
1832+ E34D             >                org     $-1                 // alter last byte of Name just above to set
1832+ E34C D0          >                db      {b $} | END_BIT     // msb as name end
1832+ E34D             >
1832+ E34D 3E 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1832+ E34F             >Prev_Ptr        defl    Heap_Ptr
1832+ E34F             >
1832+ E34F             >mirror_Ptr      defl    $
1832+ E34F             >
1832+ E34F 27 26       >                dw      Dict_Ptr + 2        // xt
1832+ E351             >Heap_Ptr        defl    $ - $E000           // save current HP
1832+ E351             >
1832+ E351             >Current_HP      defl  $ - $E000             // used to set HP once!
1832+ E351             >
1832+ E351             >//              ______________________________________________________________________
1832+ E351             >//              Dictionary part
1832+ E351             >
1832+ E351             >                org     Dict_Ptr
1832+ 2625             >
1832+ 2625 4F 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1832+ 2627             >
1832+ 2627             >TWO_DUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1832+ 2627 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1832+ 2627 ~           >
1832+ 2627 ~           >
1832+ 2627             >                endif           ; ok        // for other definitions it "points" the correct handler
1832+ 2627             >                // Use of "; ok" to suppress "warning[fwdref]"
1832+ 2627             >
1832+ 2627             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1833+ 2627 E1                           pop     hl                  // < d-H
1834+ 2628 F1                           pop     af                  // < d-L
1835+ 2629 F5                           push    af                  // < d-L
1836+ 262A E5                           push    hl                  // > d-H
1837+ 262B F5                           push    af                  // > d-L
1838+ 262C E5                           push    hl                  // > d-H
1839+ 262D                              next
1839+ 262D DD E9       >                jp      (ix)
1840+ 262F
1841+ 262F              //  ______________________________________________________________________
1842+ 262F              //
1843+ 262F              // 2rot         d1 d2 d3 -- d2 d3 d1
1844+ 262F              //              n1 n2 n3 n4 n5 n6 -- n3 n4 n5 n6 n1 n2
1845+ 262F              // Rotates the 3 top doubles of stack by picking the 3rd in access-order
1846+ 262F              // and putting it on top. The other two are shifted down one place.
1847+ 262F              //              New_Def TWO?ROT, 4, "2rot"
1848+ 262F              //              ...
1849+ 262F              //              New_Def TWO_ROT, "2ROT", is_code, is_normal
1850+ 262F              //
1851+ 262F              //      d3  |d2  |d1  |
1852+ 262F              //      h l |h l |h l |
1853+ 262F              // SP   LHED|LHED|LHED|
1854+ 262F              // SP  +0123|4567|89ab|
1855+ 262F              //              ld      hl, $000B
1856+ 262F              //              add     hl, sp
1857+ 262F              //              ld      d, (hl)
1858+ 262F              //              dec     hl
1859+ 262F              //              ld      e, (hl)
1860+ 262F              //              dec     hl
1861+ 262F              //              push    de
1862+ 262F              //              ld      d, (hl)
1863+ 262F              //              dec     hl
1864+ 262F              //              ld      e, (hl)
1865+ 262F              //              dec     hl
1866+ 262F              //              push    de
1867+ 262F
1868+ 262F              //      d1  |d3  |d2  |d1  |
1869+ 262F              //      h l |h l |h l |h l |
1870+ 262F              // SP   LHED|LHED|LHED|LHED|
1871+ 262F              // SP       +0123|4567|89ab|
1872+ 262F
1873+ 262F              //              ld      d, h
1874+ 262F              //              ld      e, l
1875+ 262F              //              inc     de
1876+ 262F              //              inc     de
1877+ 262F              //              inc     de
1878+ 262F              //              inc     de
1879+ 262F              //              push    bc
1880+ 262F              //              ld      bc, $000C
1881+ 262F              //              lddr
1882+ 262F              //              pop     bc
1883+ 262F              //              pop     de
1884+ 262F              //              pop     de
1885+ 262F              //
1886+ 262F              //              next
1887+ 262F
1888+ 262F
1889+ 262F              //  ______________________________________________________________________
1890+ 262F              //
1891+ 262F              // +!           n a --
1892+ 262F              // Sums to the content of address a the number n.
1893+ 262F              // It is the same of  a @ n + a !
1894+ 262F                              New_Def PLUSSTORE, "+!", is_code, is_normal
1894+ 262F             >
1894+ 262F             >Dict_Ptr        defl    $
1894+ 262F             >
1894+ 262F             >//              ______________________________________________________________________
1894+ 262F             >//              Heap part
1894+ 262F             >
1894+ 262F             >
1894+ 262F             >                org     (Heap_Ptr & $1FFF) + $E000
1894+ E351             >
1894+ E351             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1894+ E351             >Latest_Definition defl  Heap_Ptr
1894+ E351             >
1894+ E351             >                // dummy db directives used to calculate length of namec
1894+ E351 2B 21       >                db      "+!"
1894+ E353             >len_NFA         defl    $ - temp_NFA
1894+ E353             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1894+ E351             >
1894+ E351 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1894+ E352 2B 21       >                db      "+!"               // name string in 7-bit ascii, but
1894+ E354             >                org     $-1                 // alter last byte of Name just above to set
1894+ E353 A1          >                db      {b $} | END_BIT     // msb as name end
1894+ E354             >
1894+ E354 48 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1894+ E356             >Prev_Ptr        defl    Heap_Ptr
1894+ E356             >
1894+ E356             >mirror_Ptr      defl    $
1894+ E356             >
1894+ E356 31 26       >                dw      Dict_Ptr + 2        // xt
1894+ E358             >Heap_Ptr        defl    $ - $E000           // save current HP
1894+ E358             >
1894+ E358             >Current_HP      defl  $ - $E000             // used to set HP once!
1894+ E358             >
1894+ E358             >//              ______________________________________________________________________
1894+ E358             >//              Dictionary part
1894+ E358             >
1894+ E358             >                org     Dict_Ptr
1894+ 262F             >
1894+ 262F 56 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1894+ 2631             >
1894+ 2631             >PLUSSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1894+ 2631 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1894+ 2631 ~           >
1894+ 2631 ~           >
1894+ 2631             >                endif           ; ok        // for other definitions it "points" the correct handler
1894+ 2631             >                // Use of "; ok" to suppress "warning[fwdref]"
1894+ 2631             >
1894+ 2631             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1895+ 2631 D9                           exx
1896+ 2632 E1                           pop     hl                  // hl is the address
1897+ 2633 D1                           pop     de                  // de is the number
1898+ 2634 7E                           ld      a, (hl)
1899+ 2635 83                           add     e
1900+ 2636 77                           ld      (hl), a
1901+ 2637 23                           inc     hl
1902+ 2638 7E                           ld      a, (hl)
1903+ 2639 8A                           adc     d
1904+ 263A 77                           ld      (hl), a
1905+ 263B D9                           exx
1906+ 263C                              next
1906+ 263C DD E9       >                jp      (ix)
1907+ 263E
1908+ 263E              //  ______________________________________________________________________
1909+ 263E              //
1910+ 263E              // toggle       a n --
1911+ 263E              // Complements (xor) the byte at addrress  a  with the model n.
1912+ 263E                              New_Def TOGGLE, "TOGGLE", is_code, is_normal
1912+ 263E             >
1912+ 263E             >Dict_Ptr        defl    $
1912+ 263E             >
1912+ 263E             >//              ______________________________________________________________________
1912+ 263E             >//              Heap part
1912+ 263E             >
1912+ 263E             >
1912+ 263E             >                org     (Heap_Ptr & $1FFF) + $E000
1912+ E358             >
1912+ E358             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1912+ E358             >Latest_Definition defl  Heap_Ptr
1912+ E358             >
1912+ E358             >                // dummy db directives used to calculate length of namec
1912+ E358 54 4F 47 47 >                db      "TOGGLE"
1912+ E35C 4C 45       >
1912+ E35E             >len_NFA         defl    $ - temp_NFA
1912+ E35E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1912+ E358             >
1912+ E358 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1912+ E359 54 4F 47 47 >                db      "TOGGLE"               // name string in 7-bit ascii, but
1912+ E35D 4C 45       >
1912+ E35F             >                org     $-1                 // alter last byte of Name just above to set
1912+ E35E C5          >                db      {b $} | END_BIT     // msb as name end
1912+ E35F             >
1912+ E35F 51 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1912+ E361             >Prev_Ptr        defl    Heap_Ptr
1912+ E361             >
1912+ E361             >mirror_Ptr      defl    $
1912+ E361             >
1912+ E361 40 26       >                dw      Dict_Ptr + 2        // xt
1912+ E363             >Heap_Ptr        defl    $ - $E000           // save current HP
1912+ E363             >
1912+ E363             >Current_HP      defl  $ - $E000             // used to set HP once!
1912+ E363             >
1912+ E363             >//              ______________________________________________________________________
1912+ E363             >//              Dictionary part
1912+ E363             >
1912+ E363             >                org     Dict_Ptr
1912+ 263E             >
1912+ 263E 61 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1912+ 2640             >
1912+ 2640             >TOGGLE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1912+ 2640 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1912+ 2640 ~           >
1912+ 2640 ~           >
1912+ 2640             >                endif           ; ok        // for other definitions it "points" the correct handler
1912+ 2640             >                // Use of "; ok" to suppress "warning[fwdref]"
1912+ 2640             >
1912+ 2640             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1913+ 2640 E1                           pop     hl
1914+ 2641 7D                           ld      a, l
1915+ 2642 E1                           pop     hl
1916+ 2643 AE                           xor     (hl)
1917+ 2644 77                           ld      (hl), a
1918+ 2645
1919+ 2645                              next
1919+ 2645 DD E9       >                jp      (ix)
1920+ 2647
1921+ 2647              //  ______________________________________________________________________
1922+ 2647              //
1923+ 2647              // @            a -- n
1924+ 2647              // fetch 16 bit number n from address a. Z80 keeps high byte is in high memory
1925+ 2647                              New_Def FETCH, "@", is_code, is_normal
1925+ 2647             >
1925+ 2647             >Dict_Ptr        defl    $
1925+ 2647             >
1925+ 2647             >//              ______________________________________________________________________
1925+ 2647             >//              Heap part
1925+ 2647             >
1925+ 2647             >
1925+ 2647             >                org     (Heap_Ptr & $1FFF) + $E000
1925+ E363             >
1925+ E363             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1925+ E363             >Latest_Definition defl  Heap_Ptr
1925+ E363             >
1925+ E363             >                // dummy db directives used to calculate length of namec
1925+ E363 40          >                db      "@"
1925+ E364             >len_NFA         defl    $ - temp_NFA
1925+ E364             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1925+ E363             >
1925+ E363 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1925+ E364 40          >                db      "@"               // name string in 7-bit ascii, but
1925+ E365             >                org     $-1                 // alter last byte of Name just above to set
1925+ E364 C0          >                db      {b $} | END_BIT     // msb as name end
1925+ E365             >
1925+ E365 58 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1925+ E367             >Prev_Ptr        defl    Heap_Ptr
1925+ E367             >
1925+ E367             >mirror_Ptr      defl    $
1925+ E367             >
1925+ E367 49 26       >                dw      Dict_Ptr + 2        // xt
1925+ E369             >Heap_Ptr        defl    $ - $E000           // save current HP
1925+ E369             >
1925+ E369             >Current_HP      defl  $ - $E000             // used to set HP once!
1925+ E369             >
1925+ E369             >//              ______________________________________________________________________
1925+ E369             >//              Dictionary part
1925+ E369             >
1925+ E369             >                org     Dict_Ptr
1925+ 2647             >
1925+ 2647 67 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1925+ 2649             >
1925+ 2649             >FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1925+ 2649 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1925+ 2649 ~           >
1925+ 2649 ~           >
1925+ 2649             >                endif           ; ok        // for other definitions it "points" the correct handler
1925+ 2649             >                // Use of "; ok" to suppress "warning[fwdref]"
1925+ 2649             >
1925+ 2649             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1926+ 2649 E1                           pop     hl
1927+ 264A 7E                           ld      a, (hl)             // low-byte
1928+ 264B 23                           inc     hl
1929+ 264C 66                           ld      h, (hl)             // high-byte
1930+ 264D 6F                           ld      l, a
1931+ 264E E5                           push    hl
1932+ 264F                              next
1932+ 264F DD E9       >                jp      (ix)
1933+ 2651
1934+ 2651              //  ______________________________________________________________________
1935+ 2651              //
1936+ 2651              // !            n a --
1937+ 2651              // store 16 bit number n from address a. Z80 keeps high byte is in high memory
1938+ 2651                              New_Def STORE, "!", is_code, is_normal
1938+ 2651             >
1938+ 2651             >Dict_Ptr        defl    $
1938+ 2651             >
1938+ 2651             >//              ______________________________________________________________________
1938+ 2651             >//              Heap part
1938+ 2651             >
1938+ 2651             >
1938+ 2651             >                org     (Heap_Ptr & $1FFF) + $E000
1938+ E369             >
1938+ E369             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1938+ E369             >Latest_Definition defl  Heap_Ptr
1938+ E369             >
1938+ E369             >                // dummy db directives used to calculate length of namec
1938+ E369 21          >                db      "!"
1938+ E36A             >len_NFA         defl    $ - temp_NFA
1938+ E36A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1938+ E369             >
1938+ E369 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1938+ E36A 21          >                db      "!"               // name string in 7-bit ascii, but
1938+ E36B             >                org     $-1                 // alter last byte of Name just above to set
1938+ E36A A1          >                db      {b $} | END_BIT     // msb as name end
1938+ E36B             >
1938+ E36B 63 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1938+ E36D             >Prev_Ptr        defl    Heap_Ptr
1938+ E36D             >
1938+ E36D             >mirror_Ptr      defl    $
1938+ E36D             >
1938+ E36D 53 26       >                dw      Dict_Ptr + 2        // xt
1938+ E36F             >Heap_Ptr        defl    $ - $E000           // save current HP
1938+ E36F             >
1938+ E36F             >Current_HP      defl  $ - $E000             // used to set HP once!
1938+ E36F             >
1938+ E36F             >//              ______________________________________________________________________
1938+ E36F             >//              Dictionary part
1938+ E36F             >
1938+ E36F             >                org     Dict_Ptr
1938+ 2651             >
1938+ 2651 6D 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1938+ 2653             >
1938+ 2653             >STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1938+ 2653 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1938+ 2653 ~           >
1938+ 2653 ~           >
1938+ 2653             >                endif           ; ok        // for other definitions it "points" the correct handler
1938+ 2653             >                // Use of "; ok" to suppress "warning[fwdref]"
1938+ 2653             >
1938+ 2653             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1939+ 2653 D9                           exx
1940+ 2654 E1                           pop     hl                  // address
1941+ 2655 D1                           pop     de                  // < n
1942+ 2656 73                           ld      (hl), e             // low-byte
1943+ 2657 23                           inc     hl
1944+ 2658 72                           ld      (hl), d             // high-byte
1945+ 2659 D9                           exx
1946+ 265A                              next
1946+ 265A DD E9       >                jp      (ix)
1947+ 265C
1948+ 265C              //  ______________________________________________________________________
1949+ 265C              //
1950+ 265C              // c@           a -- c
1951+ 265C              // fetch a character n from address a
1952+ 265C                              New_Def CFETCH, "C@", is_code, is_normal
1952+ 265C             >
1952+ 265C             >Dict_Ptr        defl    $
1952+ 265C             >
1952+ 265C             >//              ______________________________________________________________________
1952+ 265C             >//              Heap part
1952+ 265C             >
1952+ 265C             >
1952+ 265C             >                org     (Heap_Ptr & $1FFF) + $E000
1952+ E36F             >
1952+ E36F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1952+ E36F             >Latest_Definition defl  Heap_Ptr
1952+ E36F             >
1952+ E36F             >                // dummy db directives used to calculate length of namec
1952+ E36F 43 40       >                db      "C@"
1952+ E371             >len_NFA         defl    $ - temp_NFA
1952+ E371             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1952+ E36F             >
1952+ E36F 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1952+ E370 43 40       >                db      "C@"               // name string in 7-bit ascii, but
1952+ E372             >                org     $-1                 // alter last byte of Name just above to set
1952+ E371 C0          >                db      {b $} | END_BIT     // msb as name end
1952+ E372             >
1952+ E372 69 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1952+ E374             >Prev_Ptr        defl    Heap_Ptr
1952+ E374             >
1952+ E374             >mirror_Ptr      defl    $
1952+ E374             >
1952+ E374 5E 26       >                dw      Dict_Ptr + 2        // xt
1952+ E376             >Heap_Ptr        defl    $ - $E000           // save current HP
1952+ E376             >
1952+ E376             >Current_HP      defl  $ - $E000             // used to set HP once!
1952+ E376             >
1952+ E376             >//              ______________________________________________________________________
1952+ E376             >//              Dictionary part
1952+ E376             >
1952+ E376             >                org     Dict_Ptr
1952+ 265C             >
1952+ 265C 74 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1952+ 265E             >
1952+ 265E             >CFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1952+ 265E ~           >                call    runcode ; ok        // for primitive definitions  actual code
1952+ 265E ~           >
1952+ 265E ~           >
1952+ 265E             >                endif           ; ok        // for other definitions it "points" the correct handler
1952+ 265E             >                // Use of "; ok" to suppress "warning[fwdref]"
1952+ 265E             >
1952+ 265E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1953+ 265E E1                           pop     hl
1954+ 265F 6E                           ld      l, (hl)             // low-byte
1955+ 2660 26 00                        ld      h, 0
1956+ 2662
1957+ 2662                              psh1
1957+ 2662 E5          >                push    hl
1957+ 2663 DD E9       >                jp      (ix)
1958+ 2665
1959+ 2665              //  ______________________________________________________________________
1960+ 2665              //
1961+ 2665              // c!           c a --
1962+ 2665              // fetch 16 bit number n from address a. Z80 keeps high byte is in high memory
1963+ 2665                              New_Def CSTORE, "C!", is_code, is_normal
1963+ 2665             >
1963+ 2665             >Dict_Ptr        defl    $
1963+ 2665             >
1963+ 2665             >//              ______________________________________________________________________
1963+ 2665             >//              Heap part
1963+ 2665             >
1963+ 2665             >
1963+ 2665             >                org     (Heap_Ptr & $1FFF) + $E000
1963+ E376             >
1963+ E376             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1963+ E376             >Latest_Definition defl  Heap_Ptr
1963+ E376             >
1963+ E376             >                // dummy db directives used to calculate length of namec
1963+ E376 43 21       >                db      "C!"
1963+ E378             >len_NFA         defl    $ - temp_NFA
1963+ E378             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1963+ E376             >
1963+ E376 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1963+ E377 43 21       >                db      "C!"               // name string in 7-bit ascii, but
1963+ E379             >                org     $-1                 // alter last byte of Name just above to set
1963+ E378 A1          >                db      {b $} | END_BIT     // msb as name end
1963+ E379             >
1963+ E379 6F 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1963+ E37B             >Prev_Ptr        defl    Heap_Ptr
1963+ E37B             >
1963+ E37B             >mirror_Ptr      defl    $
1963+ E37B             >
1963+ E37B 67 26       >                dw      Dict_Ptr + 2        // xt
1963+ E37D             >Heap_Ptr        defl    $ - $E000           // save current HP
1963+ E37D             >
1963+ E37D             >Current_HP      defl  $ - $E000             // used to set HP once!
1963+ E37D             >
1963+ E37D             >//              ______________________________________________________________________
1963+ E37D             >//              Dictionary part
1963+ E37D             >
1963+ E37D             >                org     Dict_Ptr
1963+ 2665             >
1963+ 2665 7B 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1963+ 2667             >
1963+ 2667             >CSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1963+ 2667 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1963+ 2667 ~           >
1963+ 2667 ~           >
1963+ 2667             >                endif           ; ok        // for other definitions it "points" the correct handler
1963+ 2667             >                // Use of "; ok" to suppress "warning[fwdref]"
1963+ 2667             >
1963+ 2667             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1964+ 2667 D9                           exx
1965+ 2668 E1                           pop     hl                  // < address
1966+ 2669 D1                           pop     de
1967+ 266A 73                           ld      (hl), e             // low-byte
1968+ 266B D9                           exx
1969+ 266C                              next
1969+ 266C DD E9       >                jp      (ix)
1970+ 266E
1971+ 266E              //  ______________________________________________________________________
1972+ 266E              //
1973+ 266E              // 2@           a -- d
1974+ 266E              // fetch a 32 bits number d from address a and leaves it on top of the
1975+ 266E              // stack as two single numbers, high part as top of the stack.
1976+ 266E              // A double number is normally kept in CPU registers as HLDE.
1977+ 266E              // On stack a double number is treated as two single numbers
1978+ 266E              // where BC is on the top of the stack and HL is the second from top,
1979+ 266E              // so the sign of the number can be checked on top of stack
1980+ 266E              // and in the stack memory it appears as LHED.
1981+ 266E                              New_Def TWO_FETCH, "2@", is_code, is_normal
1981+ 266E             >
1981+ 266E             >Dict_Ptr        defl    $
1981+ 266E             >
1981+ 266E             >//              ______________________________________________________________________
1981+ 266E             >//              Heap part
1981+ 266E             >
1981+ 266E             >
1981+ 266E             >                org     (Heap_Ptr & $1FFF) + $E000
1981+ E37D             >
1981+ E37D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1981+ E37D             >Latest_Definition defl  Heap_Ptr
1981+ E37D             >
1981+ E37D             >                // dummy db directives used to calculate length of namec
1981+ E37D 32 40       >                db      "2@"
1981+ E37F             >len_NFA         defl    $ - temp_NFA
1981+ E37F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1981+ E37D             >
1981+ E37D 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1981+ E37E 32 40       >                db      "2@"               // name string in 7-bit ascii, but
1981+ E380             >                org     $-1                 // alter last byte of Name just above to set
1981+ E37F C0          >                db      {b $} | END_BIT     // msb as name end
1981+ E380             >
1981+ E380 76 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1981+ E382             >Prev_Ptr        defl    Heap_Ptr
1981+ E382             >
1981+ E382             >mirror_Ptr      defl    $
1981+ E382             >
1981+ E382 70 26       >                dw      Dict_Ptr + 2        // xt
1981+ E384             >Heap_Ptr        defl    $ - $E000           // save current HP
1981+ E384             >
1981+ E384             >Current_HP      defl  $ - $E000             // used to set HP once!
1981+ E384             >
1981+ E384             >//              ______________________________________________________________________
1981+ E384             >//              Dictionary part
1981+ E384             >
1981+ E384             >                org     Dict_Ptr
1981+ 266E             >
1981+ 266E 82 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1981+ 2670             >
1981+ 2670             >TWO_FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1981+ 2670 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1981+ 2670 ~           >
1981+ 2670 ~           >
1981+ 2670             >                endif           ; ok        // for other definitions it "points" the correct handler
1981+ 2670             >                // Use of "; ok" to suppress "warning[fwdref]"
1981+ 2670             >
1981+ 2670             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1982+ 2670 D9                           exx
1983+ 2671 E1                           pop     hl                  // address
1984+ 2672 5E                           ld      e, (hl)             // low-byte
1985+ 2673 23                           inc     hl
1986+ 2674 56                           ld      d, (hl)             // high-byte
1987+ 2675 23                           inc     hl
1988+ 2676 4E                           ld      c, (hl)             // low-byte
1989+ 2677 23                           inc     hl
1990+ 2678 46                           ld      b, (hl)             // high-byte
1991+ 2679 C5                           push    bc
1992+ 267A D5                           push    de
1993+ 267B D9                           exx
1994+ 267C                              next
1994+ 267C DD E9       >                jp      (ix)
1995+ 267E
1996+ 267E              //  ______________________________________________________________________
1997+ 267E              //
1998+ 267E              // 2!           d a --
1999+ 267E              // stores a 32 bits number d from address a and leaves it on top of the
2000+ 267E              // stack as two single numbers, high part as top of the stack.
2001+ 267E              // A double number is normally kept in CPU registers as HLDE.
2002+ 267E              // On stack a double number is treated as two single numbers
2003+ 267E              // where BC is on the top of the stack and HL is the second from top,
2004+ 267E              // so the sign of the number can be checked on top of stack
2005+ 267E              // and in the stack memory it appears as LHED.
2006+ 267E                              New_Def TWO_STORE, "2!", is_code, is_normal
2006+ 267E             >
2006+ 267E             >Dict_Ptr        defl    $
2006+ 267E             >
2006+ 267E             >//              ______________________________________________________________________
2006+ 267E             >//              Heap part
2006+ 267E             >
2006+ 267E             >
2006+ 267E             >                org     (Heap_Ptr & $1FFF) + $E000
2006+ E384             >
2006+ E384             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2006+ E384             >Latest_Definition defl  Heap_Ptr
2006+ E384             >
2006+ E384             >                // dummy db directives used to calculate length of namec
2006+ E384 32 21       >                db      "2!"
2006+ E386             >len_NFA         defl    $ - temp_NFA
2006+ E386             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2006+ E384             >
2006+ E384 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2006+ E385 32 21       >                db      "2!"               // name string in 7-bit ascii, but
2006+ E387             >                org     $-1                 // alter last byte of Name just above to set
2006+ E386 A1          >                db      {b $} | END_BIT     // msb as name end
2006+ E387             >
2006+ E387 7D 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2006+ E389             >Prev_Ptr        defl    Heap_Ptr
2006+ E389             >
2006+ E389             >mirror_Ptr      defl    $
2006+ E389             >
2006+ E389 80 26       >                dw      Dict_Ptr + 2        // xt
2006+ E38B             >Heap_Ptr        defl    $ - $E000           // save current HP
2006+ E38B             >
2006+ E38B             >Current_HP      defl  $ - $E000             // used to set HP once!
2006+ E38B             >
2006+ E38B             >//              ______________________________________________________________________
2006+ E38B             >//              Dictionary part
2006+ E38B             >
2006+ E38B             >                org     Dict_Ptr
2006+ 267E             >
2006+ 267E 89 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2006+ 2680             >
2006+ 2680             >TWO_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2006+ 2680 ~           >                call    runcode ; ok        // for primitive definitions  actual code
2006+ 2680 ~           >
2006+ 2680 ~           >
2006+ 2680             >                endif           ; ok        // for other definitions it "points" the correct handler
2006+ 2680             >                // Use of "; ok" to suppress "warning[fwdref]"
2006+ 2680             >
2006+ 2680             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2007+ 2680 D9                           exx
2008+ 2681 E1                           pop     hl                  // address
2009+ 2682 C1                           pop     bc                  // < high-part
2010+ 2683 D1                           pop     de                  // < low-part > Instruction Pointer
2011+ 2684 71                           ld      (hl), c
2012+ 2685 23                           inc     hl
2013+ 2686 70                           ld      (hl), b
2014+ 2687 23                           inc     hl
2015+ 2688 73                           ld      (hl), e
2016+ 2689 23                           inc     hl
2017+ 268A 72                           ld      (hl), d
2018+ 268B D9                           exx
2019+ 268C                              next
2019+ 268C DD E9       >                jp      (ix)
2020+ 268E
2021+ 268E              //  ______________________________________________________________________
2022+ 268E              //
2023+ 268E              // p@           a -- c
2024+ 268E              // Read one byte from port a and leave the result on top of stack
2025+ 268E                              New_Def PFETCH, "P@", is_code, is_normal
2025+ 268E             >
2025+ 268E             >Dict_Ptr        defl    $
2025+ 268E             >
2025+ 268E             >//              ______________________________________________________________________
2025+ 268E             >//              Heap part
2025+ 268E             >
2025+ 268E             >
2025+ 268E             >                org     (Heap_Ptr & $1FFF) + $E000
2025+ E38B             >
2025+ E38B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2025+ E38B             >Latest_Definition defl  Heap_Ptr
2025+ E38B             >
2025+ E38B             >                // dummy db directives used to calculate length of namec
2025+ E38B 50 40       >                db      "P@"
2025+ E38D             >len_NFA         defl    $ - temp_NFA
2025+ E38D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2025+ E38B             >
2025+ E38B 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2025+ E38C 50 40       >                db      "P@"               // name string in 7-bit ascii, but
2025+ E38E             >                org     $-1                 // alter last byte of Name just above to set
2025+ E38D C0          >                db      {b $} | END_BIT     // msb as name end
2025+ E38E             >
2025+ E38E 84 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2025+ E390             >Prev_Ptr        defl    Heap_Ptr
2025+ E390             >
2025+ E390             >mirror_Ptr      defl    $
2025+ E390             >
2025+ E390 90 26       >                dw      Dict_Ptr + 2        // xt
2025+ E392             >Heap_Ptr        defl    $ - $E000           // save current HP
2025+ E392             >
2025+ E392             >Current_HP      defl  $ - $E000             // used to set HP once!
2025+ E392             >
2025+ E392             >//              ______________________________________________________________________
2025+ E392             >//              Dictionary part
2025+ E392             >
2025+ E392             >                org     Dict_Ptr
2025+ 268E             >
2025+ 268E 90 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2025+ 2690             >
2025+ 2690             >PFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2025+ 2690 ~           >                call    runcode ; ok        // for primitive definitions  actual code
2025+ 2690 ~           >
2025+ 2690 ~           >
2025+ 2690             >                endif           ; ok        // for other definitions it "points" the correct handler
2025+ 2690             >                // Use of "; ok" to suppress "warning[fwdref]"
2025+ 2690             >
2025+ 2690             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2026+ 2690 D9                           exx
2027+ 2691 C1                           pop     bc
2028+ 2692 26 00                        ld      h, 0
2029+ 2694 ED 68                        in      l, (c)
2030+ 2696 E5                           push    hl
2031+ 2697 D9                           exx
2032+ 2698                              next
2032+ 2698 DD E9       >                jp      (ix)
2033+ 269A
2034+ 269A              //  ______________________________________________________________________
2035+ 269A              //
2036+ 269A              // p!           c a --
2037+ 269A              // Send one byte (top of stack) to port a
2038+ 269A                              New_Def PSTORE, "P!", is_code, is_normal
2038+ 269A             >
2038+ 269A             >Dict_Ptr        defl    $
2038+ 269A             >
2038+ 269A             >//              ______________________________________________________________________
2038+ 269A             >//              Heap part
2038+ 269A             >
2038+ 269A             >
2038+ 269A             >                org     (Heap_Ptr & $1FFF) + $E000
2038+ E392             >
2038+ E392             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2038+ E392             >Latest_Definition defl  Heap_Ptr
2038+ E392             >
2038+ E392             >                // dummy db directives used to calculate length of namec
2038+ E392 50 21       >                db      "P!"
2038+ E394             >len_NFA         defl    $ - temp_NFA
2038+ E394             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2038+ E392             >
2038+ E392 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2038+ E393 50 21       >                db      "P!"               // name string in 7-bit ascii, but
2038+ E395             >                org     $-1                 // alter last byte of Name just above to set
2038+ E394 A1          >                db      {b $} | END_BIT     // msb as name end
2038+ E395             >
2038+ E395 8B 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2038+ E397             >Prev_Ptr        defl    Heap_Ptr
2038+ E397             >
2038+ E397             >mirror_Ptr      defl    $
2038+ E397             >
2038+ E397 9C 26       >                dw      Dict_Ptr + 2        // xt
2038+ E399             >Heap_Ptr        defl    $ - $E000           // save current HP
2038+ E399             >
2038+ E399             >Current_HP      defl  $ - $E000             // used to set HP once!
2038+ E399             >
2038+ E399             >//              ______________________________________________________________________
2038+ E399             >//              Dictionary part
2038+ E399             >
2038+ E399             >                org     Dict_Ptr
2038+ 269A             >
2038+ 269A 97 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2038+ 269C             >
2038+ 269C             >PSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2038+ 269C ~           >                call    runcode ; ok        // for primitive definitions  actual code
2038+ 269C ~           >
2038+ 269C ~           >
2038+ 269C             >                endif           ; ok        // for other definitions it "points" the correct handler
2038+ 269C             >                // Use of "; ok" to suppress "warning[fwdref]"
2038+ 269C             >
2038+ 269C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2039+ 269C D9                           exx
2040+ 269D C1                           pop     bc
2041+ 269E E1                           pop     hl                  // < c
2042+ 269F ED 69                        out     (c), l              // low-byte
2043+ 26A1 D9                           exx
2044+ 26A2                              next
2044+ 26A2 DD E9       >                jp      (ix)
2045+ 26A4
2046+ 26A4
2047+ 26A4              //  ______________________________________________________________________
2048+ 26A4              //
2049+ 26A4              // 2*           n1 -- n2
2050+ 26A4              // doubles the number at top of stack
2051+ 26A4                              New_Def TWO_MUL, "2*", is_code, is_normal
2051+ 26A4             >
2051+ 26A4             >Dict_Ptr        defl    $
2051+ 26A4             >
2051+ 26A4             >//              ______________________________________________________________________
2051+ 26A4             >//              Heap part
2051+ 26A4             >
2051+ 26A4             >
2051+ 26A4             >                org     (Heap_Ptr & $1FFF) + $E000
2051+ E399             >
2051+ E399             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2051+ E399             >Latest_Definition defl  Heap_Ptr
2051+ E399             >
2051+ E399             >                // dummy db directives used to calculate length of namec
2051+ E399 32 2A       >                db      "2*"
2051+ E39B             >len_NFA         defl    $ - temp_NFA
2051+ E39B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2051+ E399             >
2051+ E399 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2051+ E39A 32 2A       >                db      "2*"               // name string in 7-bit ascii, but
2051+ E39C             >                org     $-1                 // alter last byte of Name just above to set
2051+ E39B AA          >                db      {b $} | END_BIT     // msb as name end
2051+ E39C             >
2051+ E39C 92 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2051+ E39E             >Prev_Ptr        defl    Heap_Ptr
2051+ E39E             >
2051+ E39E             >mirror_Ptr      defl    $
2051+ E39E             >
2051+ E39E A6 26       >                dw      Dict_Ptr + 2        // xt
2051+ E3A0             >Heap_Ptr        defl    $ - $E000           // save current HP
2051+ E3A0             >
2051+ E3A0             >Current_HP      defl  $ - $E000             // used to set HP once!
2051+ E3A0             >
2051+ E3A0             >//              ______________________________________________________________________
2051+ E3A0             >//              Dictionary part
2051+ E3A0             >
2051+ E3A0             >                org     Dict_Ptr
2051+ 26A4             >
2051+ 26A4 9E 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2051+ 26A6             >
2051+ 26A6             >TWO_MUL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2051+ 26A6 ~           >                call    runcode ; ok        // for primitive definitions  actual code
2051+ 26A6 ~           >
2051+ 26A6 ~           >
2051+ 26A6             >                endif           ; ok        // for other definitions it "points" the correct handler
2051+ 26A6             >                // Use of "; ok" to suppress "warning[fwdref]"
2051+ 26A6             >
2051+ 26A6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2052+ 26A6              Two_Mul_Ptr:
2053+ 26A6 E1                           pop     hl
2054+ 26A7 29                           add     hl, hl
2055+ 26A8
2056+ 26A8                              psh1
2056+ 26A8 E5          >                push    hl
2056+ 26A9 DD E9       >                jp      (ix)
2057+ 26AB
2058+ 26AB              //  ______________________________________________________________________
2059+ 26AB              //
2060+ 26AB              // 2/           n1 -- n2
2061+ 26AB              // halves the top of stack, sign is unchanged
2062+ 26AB                              New_Def TWO_DIV, "2/", is_code, is_normal
2062+ 26AB             >
2062+ 26AB             >Dict_Ptr        defl    $
2062+ 26AB             >
2062+ 26AB             >//              ______________________________________________________________________
2062+ 26AB             >//              Heap part
2062+ 26AB             >
2062+ 26AB             >
2062+ 26AB             >                org     (Heap_Ptr & $1FFF) + $E000
2062+ E3A0             >
2062+ E3A0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2062+ E3A0             >Latest_Definition defl  Heap_Ptr
2062+ E3A0             >
2062+ E3A0             >                // dummy db directives used to calculate length of namec
2062+ E3A0 32 2F       >                db      "2/"
2062+ E3A2             >len_NFA         defl    $ - temp_NFA
2062+ E3A2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2062+ E3A0             >
2062+ E3A0 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2062+ E3A1 32 2F       >                db      "2/"               // name string in 7-bit ascii, but
2062+ E3A3             >                org     $-1                 // alter last byte of Name just above to set
2062+ E3A2 AF          >                db      {b $} | END_BIT     // msb as name end
2062+ E3A3             >
2062+ E3A3 99 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2062+ E3A5             >Prev_Ptr        defl    Heap_Ptr
2062+ E3A5             >
2062+ E3A5             >mirror_Ptr      defl    $
2062+ E3A5             >
2062+ E3A5 AD 26       >                dw      Dict_Ptr + 2        // xt
2062+ E3A7             >Heap_Ptr        defl    $ - $E000           // save current HP
2062+ E3A7             >
2062+ E3A7             >Current_HP      defl  $ - $E000             // used to set HP once!
2062+ E3A7             >
2062+ E3A7             >//              ______________________________________________________________________
2062+ E3A7             >//              Dictionary part
2062+ E3A7             >
2062+ E3A7             >                org     Dict_Ptr
2062+ 26AB             >
2062+ 26AB A5 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2062+ 26AD             >
2062+ 26AD             >TWO_DIV:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2062+ 26AD ~           >                call    runcode ; ok        // for primitive definitions  actual code
2062+ 26AD ~           >
2062+ 26AD ~           >
2062+ 26AD             >                endif           ; ok        // for other definitions it "points" the correct handler
2062+ 26AD             >                // Use of "; ok" to suppress "warning[fwdref]"
2062+ 26AD             >
2062+ 26AD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2063+ 26AD E1                           pop     hl
2064+ 26AE CB 2C                        sra     h
2065+ 26B0 CB 1D                        rr      l
2066+ 26B2
2067+ 26B2                              psh1
2067+ 26B2 E5          >                push    hl
2067+ 26B3 DD E9       >                jp      (ix)
2068+ 26B5
2069+ 26B5              //  ______________________________________________________________________
2070+ 26B5              //
2071+ 26B5              // lshift       n1 u -- n2
2072+ 26B5              // bit left shift of u bits
2073+ 26B5                              New_Def LSHIFT, "LSHIFT", is_code, is_normal
2073+ 26B5             >
2073+ 26B5             >Dict_Ptr        defl    $
2073+ 26B5             >
2073+ 26B5             >//              ______________________________________________________________________
2073+ 26B5             >//              Heap part
2073+ 26B5             >
2073+ 26B5             >
2073+ 26B5             >                org     (Heap_Ptr & $1FFF) + $E000
2073+ E3A7             >
2073+ E3A7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2073+ E3A7             >Latest_Definition defl  Heap_Ptr
2073+ E3A7             >
2073+ E3A7             >                // dummy db directives used to calculate length of namec
2073+ E3A7 4C 53 48 49 >                db      "LSHIFT"
2073+ E3AB 46 54       >
2073+ E3AD             >len_NFA         defl    $ - temp_NFA
2073+ E3AD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2073+ E3A7             >
2073+ E3A7 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2073+ E3A8 4C 53 48 49 >                db      "LSHIFT"               // name string in 7-bit ascii, but
2073+ E3AC 46 54       >
2073+ E3AE             >                org     $-1                 // alter last byte of Name just above to set
2073+ E3AD D4          >                db      {b $} | END_BIT     // msb as name end
2073+ E3AE             >
2073+ E3AE A0 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2073+ E3B0             >Prev_Ptr        defl    Heap_Ptr
2073+ E3B0             >
2073+ E3B0             >mirror_Ptr      defl    $
2073+ E3B0             >
2073+ E3B0 B7 26       >                dw      Dict_Ptr + 2        // xt
2073+ E3B2             >Heap_Ptr        defl    $ - $E000           // save current HP
2073+ E3B2             >
2073+ E3B2             >Current_HP      defl  $ - $E000             // used to set HP once!
2073+ E3B2             >
2073+ E3B2             >//              ______________________________________________________________________
2073+ E3B2             >//              Dictionary part
2073+ E3B2             >
2073+ E3B2             >                org     Dict_Ptr
2073+ 26B5             >
2073+ 26B5 B0 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2073+ 26B7             >
2073+ 26B7             >LSHIFT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2073+ 26B7 ~           >                call    runcode ; ok        // for primitive definitions  actual code
2073+ 26B7 ~           >
2073+ 26B7 ~           >
2073+ 26B7             >                endif           ; ok        // for other definitions it "points" the correct handler
2073+ 26B7             >                // Use of "; ok" to suppress "warning[fwdref]"
2073+ 26B7             >
2073+ 26B7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2074+ 26B7 D9                           exx
2075+ 26B8 C1                           pop     bc
2076+ 26B9 41                           ld      b, c
2077+ 26BA D1                           pop     de
2078+ 26BB ED 28                        bsla    de, b
2079+ 26BD D5                           push    de
2080+ 26BE D9                           exx
2081+ 26BF                              next
2081+ 26BF DD E9       >                jp      (ix)
2082+ 26C1
2083+ 26C1              //  ______________________________________________________________________
2084+ 26C1              //
2085+ 26C1              // rshift       n1 u -- n2
2086+ 26C1              // bit right shift of u bits
2087+ 26C1                              New_Def RSHIFT, "RSHIFT", is_code, is_normal
2087+ 26C1             >
2087+ 26C1             >Dict_Ptr        defl    $
2087+ 26C1             >
2087+ 26C1             >//              ______________________________________________________________________
2087+ 26C1             >//              Heap part
2087+ 26C1             >
2087+ 26C1             >
2087+ 26C1             >                org     (Heap_Ptr & $1FFF) + $E000
2087+ E3B2             >
2087+ E3B2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2087+ E3B2             >Latest_Definition defl  Heap_Ptr
2087+ E3B2             >
2087+ E3B2             >                // dummy db directives used to calculate length of namec
2087+ E3B2 52 53 48 49 >                db      "RSHIFT"
2087+ E3B6 46 54       >
2087+ E3B8             >len_NFA         defl    $ - temp_NFA
2087+ E3B8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2087+ E3B2             >
2087+ E3B2 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2087+ E3B3 52 53 48 49 >                db      "RSHIFT"               // name string in 7-bit ascii, but
2087+ E3B7 46 54       >
2087+ E3B9             >                org     $-1                 // alter last byte of Name just above to set
2087+ E3B8 D4          >                db      {b $} | END_BIT     // msb as name end
2087+ E3B9             >
2087+ E3B9 A7 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2087+ E3BB             >Prev_Ptr        defl    Heap_Ptr
2087+ E3BB             >
2087+ E3BB             >mirror_Ptr      defl    $
2087+ E3BB             >
2087+ E3BB C3 26       >                dw      Dict_Ptr + 2        // xt
2087+ E3BD             >Heap_Ptr        defl    $ - $E000           // save current HP
2087+ E3BD             >
2087+ E3BD             >Current_HP      defl  $ - $E000             // used to set HP once!
2087+ E3BD             >
2087+ E3BD             >//              ______________________________________________________________________
2087+ E3BD             >//              Dictionary part
2087+ E3BD             >
2087+ E3BD             >                org     Dict_Ptr
2087+ 26C1             >
2087+ 26C1 BB 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2087+ 26C3             >
2087+ 26C3             >RSHIFT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2087+ 26C3 ~           >                call    runcode ; ok        // for primitive definitions  actual code
2087+ 26C3 ~           >
2087+ 26C3 ~           >
2087+ 26C3             >                endif           ; ok        // for other definitions it "points" the correct handler
2087+ 26C3             >                // Use of "; ok" to suppress "warning[fwdref]"
2087+ 26C3             >
2087+ 26C3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2088+ 26C3 D9                           exx
2089+ 26C4 C1                           pop     bc
2090+ 26C5 41                           ld      b, c
2091+ 26C6 D1                           pop     de
2092+ 26C7 ED 2A                        bsrl    de, b
2093+ 26C9 D5                           push    de
2094+ 26CA D9                           exx
2095+ 26CB                              next
2095+ 26CB DD E9       >                jp      (ix)
2096+ 26CD
2097+ 26CD              //  ______________________________________________________________________
2098+ 26CD              //
2099+ 26CD              // cells        n1 -- n2
2100+ 26CD              // decrement by 2 top of stack
2101+ 26CD                              New_Def CELLS, "CELLS", is_code, is_normal
2101+ 26CD             >
2101+ 26CD             >Dict_Ptr        defl    $
2101+ 26CD             >
2101+ 26CD             >//              ______________________________________________________________________
2101+ 26CD             >//              Heap part
2101+ 26CD             >
2101+ 26CD             >
2101+ 26CD             >                org     (Heap_Ptr & $1FFF) + $E000
2101+ E3BD             >
2101+ E3BD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2101+ E3BD             >Latest_Definition defl  Heap_Ptr
2101+ E3BD             >
2101+ E3BD             >                // dummy db directives used to calculate length of namec
2101+ E3BD 43 45 4C 4C >                db      "CELLS"
2101+ E3C1 53          >
2101+ E3C2             >len_NFA         defl    $ - temp_NFA
2101+ E3C2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2101+ E3BD             >
2101+ E3BD 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2101+ E3BE 43 45 4C 4C >                db      "CELLS"               // name string in 7-bit ascii, but
2101+ E3C2 53          >
2101+ E3C3             >                org     $-1                 // alter last byte of Name just above to set
2101+ E3C2 D3          >                db      {b $} | END_BIT     // msb as name end
2101+ E3C3             >
2101+ E3C3 B2 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2101+ E3C5             >Prev_Ptr        defl    Heap_Ptr
2101+ E3C5             >
2101+ E3C5             >mirror_Ptr      defl    $
2101+ E3C5             >
2101+ E3C5 CF 26       >                dw      Dict_Ptr + 2        // xt
2101+ E3C7             >Heap_Ptr        defl    $ - $E000           // save current HP
2101+ E3C7             >
2101+ E3C7             >Current_HP      defl  $ - $E000             // used to set HP once!
2101+ E3C7             >
2101+ E3C7             >//              ______________________________________________________________________
2101+ E3C7             >//              Dictionary part
2101+ E3C7             >
2101+ E3C7             >                org     Dict_Ptr
2101+ 26CD             >
2101+ 26CD C5 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2101+ 26CF             >
2101+ 26CF             >CELLS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2101+ 26CF ~           >                call    runcode ; ok        // for primitive definitions  actual code
2101+ 26CF ~           >
2101+ 26CF ~           >
2101+ 26CF             >                endif           ; ok        // for other definitions it "points" the correct handler
2101+ 26CF             >                // Use of "; ok" to suppress "warning[fwdref]"
2101+ 26CF             >
2101+ 26CF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2102+ 26CF 18 D5                        jr      Two_Mul_Ptr
2103+ 26D1
2104+ 26D1
2105+ 26D1              //  ______________________________________________________________________
2106+ 26D1
# file closed: C:\Zx\CSpect\Projects\vForth17_DOT/source/L0.asm
 140  26D1                              include "L1.asm"
# file opened: C:\Zx\CSpect\Projects\vForth17_DOT/source/L1.asm
   1+ 26D1              //  ______________________________________________________________________
   2+ 26D1              //
   3+ 26D1              //  L1.asm
   4+ 26D1              //
   5+ 26D1              //  Level-1 definitions and derivate
   6+ 26D1              //  ______________________________________________________________________
   7+ 26D1
   8+ 26D1              //  ______________________________________________________________________
   9+ 26D1              //
  10+ 26D1              // :            -- cccc     ( compile time )
  11+ 26D1              //              i*x -- j*x  ( run time )
  12+ 26D1              // Colon Definition
  13+ 26D1                              Colon_Def COLON, ":", is_normal      // has forward-ref
  13+ 26D1             >                New_Def  COLON, ":", Enter_Ptr, is_normal ; ok
  13+ 26D1             >
  13+ 26D1             >Dict_Ptr        defl    $
  13+ 26D1             >
  13+ 26D1             >//              ______________________________________________________________________
  13+ 26D1             >//              Heap part
  13+ 26D1             >
  13+ 26D1             >
  13+ 26D1             >                org     (Heap_Ptr & $1FFF) + $E000
  13+ E3C7             >
  13+ E3C7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13+ E3C7             >Latest_Definition defl  Heap_Ptr
  13+ E3C7             >
  13+ E3C7             >                // dummy db directives used to calculate length of namec
  13+ E3C7 3A          >                db      ":"
  13+ E3C8             >len_NFA         defl    $ - temp_NFA
  13+ E3C8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13+ E3C7             >
  13+ E3C7 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  13+ E3C8 3A          >                db      ":"               // name string in 7-bit ascii, but
  13+ E3C9             >                org     $-1                 // alter last byte of Name just above to set
  13+ E3C8 BA          >                db      {b $} | END_BIT     // msb as name end
  13+ E3C9             >
  13+ E3C9 BD 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  13+ E3CB             >Prev_Ptr        defl    Heap_Ptr
  13+ E3CB             >
  13+ E3CB             >mirror_Ptr      defl    $
  13+ E3CB             >
  13+ E3CB D3 26       >                dw      Dict_Ptr + 2        // xt
  13+ E3CD             >Heap_Ptr        defl    $ - $E000           // save current HP
  13+ E3CD             >
  13+ E3CD             >Current_HP      defl  $ - $E000             // used to set HP once!
  13+ E3CD             >
  13+ E3CD             >//              ______________________________________________________________________
  13+ E3CD             >//              Dictionary part
  13+ E3CD             >
  13+ E3CD             >                org     Dict_Ptr
  13+ 26D1             >
  13+ 26D1 CB 03       >                dw      mirror_Ptr - $E000 + Heap_offset
  13+ 26D3             >
  13+ 26D3             >COLON:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  13+ 26D3 CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  13+ 26D6             >
  13+ 26D6             >
  13+ 26D6             >                endif           ; ok        // for other definitions it "points" the correct handler
  13+ 26D6             >                // Use of "; ok" to suppress "warning[fwdref]"
  13+ 26D6             >
  13+ 26D6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14+ 26D6
  15+ 26D6 C0 2A                        dw      QEXEC                   // ?exec
  16+ 26D8 8B 2A                        dw      STORE_CSP               // !csp
  17+ 26DA 04 28 49 26                  dw      CURRENT, FETCH          // current @
  18+ 26DE FE 27 53 26                  dw      CONTEXT, STORE          // context !
  19+ 26E2 AE 30                        dw      CREATE                  // create  ( forward )
  20+ 26E4 42 2B                        dw      SMUDGE                  // dmudge
  21+ 26E6 33 2B                        dw      SQUARED_CLOSE           // ]
  22+ 26E8 7E 2B                        dw      C_SEMICOLON_CODE        // ;code ( change the 3-bytes CFA of defining word to call Enter_Ptr )
  23+ 26EA                                                              // ... immediate
  24+ 26EA              Enter_Ptr:
  25+ 26EA                              // via call coded in CFA
  26+ 26EA EB                           ex      de, hl //**
  27+ 26EB                              // *** ldhlrp
  28+ 26EB 2B                           dec     hl                  // push on Return-Stack current Instruction-Pointer
  29+ 26EC 70                           ld      (hl), b
  30+ 26ED 2B                           dec     hl
  31+ 26EE 71                           ld      (hl), c
  32+ 26EF                              // *** ldrphl
  33+ 26EF EB                           ex      de, hl //**
  34+ 26F0
  35+ 26F0
  36+ 26F0 C1                           pop     bc                  // points to PFA of "this" word
  37+ 26F1                              next
  37+ 26F1 DD E9       >                jp      (ix)
  38+ 26F3
  39+ 26F3              //  ______________________________________________________________________
  40+ 26F3              //
  41+ 26F3              // ;            --
  42+ 26F3              // Semicolon. End of Colon-Definition. Stack must be balanced.
  43+ 26F3                              Colon_Def SEMICOLON, ";", is_immediate   // has forward-ref
  43+ 26F3             >                New_Def  SEMICOLON, ";", Enter_Ptr, is_immediate ; ok
  43+ 26F3             >
  43+ 26F3             >Dict_Ptr        defl    $
  43+ 26F3             >
  43+ 26F3             >//              ______________________________________________________________________
  43+ 26F3             >//              Heap part
  43+ 26F3             >
  43+ 26F3             >
  43+ 26F3             >                org     (Heap_Ptr & $1FFF) + $E000
  43+ E3CD             >
  43+ E3CD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  43+ E3CD             >Latest_Definition defl  Heap_Ptr
  43+ E3CD             >
  43+ E3CD             >                // dummy db directives used to calculate length of namec
  43+ E3CD 3B          >                db      ";"
  43+ E3CE             >len_NFA         defl    $ - temp_NFA
  43+ E3CE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  43+ E3CD             >
  43+ E3CD C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
  43+ E3CE 3B          >                db      ";"               // name string in 7-bit ascii, but
  43+ E3CF             >                org     $-1                 // alter last byte of Name just above to set
  43+ E3CE BB          >                db      {b $} | END_BIT     // msb as name end
  43+ E3CF             >
  43+ E3CF C7 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  43+ E3D1             >Prev_Ptr        defl    Heap_Ptr
  43+ E3D1             >
  43+ E3D1             >mirror_Ptr      defl    $
  43+ E3D1             >
  43+ E3D1 F5 26       >                dw      Dict_Ptr + 2        // xt
  43+ E3D3             >Heap_Ptr        defl    $ - $E000           // save current HP
  43+ E3D3             >
  43+ E3D3             >Current_HP      defl  $ - $E000             // used to set HP once!
  43+ E3D3             >
  43+ E3D3             >//              ______________________________________________________________________
  43+ E3D3             >//              Dictionary part
  43+ E3D3             >
  43+ E3D3             >                org     Dict_Ptr
  43+ 26F3             >
  43+ 26F3 D1 03       >                dw      mirror_Ptr - $E000 + Heap_offset
  43+ 26F5             >
  43+ 26F5             >SEMICOLON:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  43+ 26F5 CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  43+ 26F8             >
  43+ 26F8             >
  43+ 26F8             >                endif           ; ok        // for other definitions it "points" the correct handler
  43+ 26F8             >                // Use of "; ok" to suppress "warning[fwdref]"
  43+ 26F8             >
  43+ 26F8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  44+ 26F8
  45+ 26F8 E0 2A                        dw      QCSP                    // ?csp
  46+ 26FA 08 2B 09 25                  dw      COMPILE, EXIT           // [compile] ;s
  47+ 26FE 42 2B                        dw      SMUDGE                  // smudge
  48+ 2700 26 2B                        dw      SQUARED_OPEN            // [
  49+ 2702 09 25                        dw      EXIT                    // ; immediate
  50+ 2704
  51+ 2704              //  ______________________________________________________________________
  52+ 2704              //
  53+ 2704              // noop         --
  54+ 2704
  55+ 2704                              New_Def NOOP, "NOOP", is_code, is_normal
  55+ 2704             >
  55+ 2704             >Dict_Ptr        defl    $
  55+ 2704             >
  55+ 2704             >//              ______________________________________________________________________
  55+ 2704             >//              Heap part
  55+ 2704             >
  55+ 2704             >
  55+ 2704             >                org     (Heap_Ptr & $1FFF) + $E000
  55+ E3D3             >
  55+ E3D3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  55+ E3D3             >Latest_Definition defl  Heap_Ptr
  55+ E3D3             >
  55+ E3D3             >                // dummy db directives used to calculate length of namec
  55+ E3D3 4E 4F 4F 50 >                db      "NOOP"
  55+ E3D7             >len_NFA         defl    $ - temp_NFA
  55+ E3D7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  55+ E3D3             >
  55+ E3D3 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  55+ E3D4 4E 4F 4F 50 >                db      "NOOP"               // name string in 7-bit ascii, but
  55+ E3D8             >                org     $-1                 // alter last byte of Name just above to set
  55+ E3D7 D0          >                db      {b $} | END_BIT     // msb as name end
  55+ E3D8             >
  55+ E3D8 CD 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  55+ E3DA             >Prev_Ptr        defl    Heap_Ptr
  55+ E3DA             >
  55+ E3DA             >mirror_Ptr      defl    $
  55+ E3DA             >
  55+ E3DA 06 27       >                dw      Dict_Ptr + 2        // xt
  55+ E3DC             >Heap_Ptr        defl    $ - $E000           // save current HP
  55+ E3DC             >
  55+ E3DC             >Current_HP      defl  $ - $E000             // used to set HP once!
  55+ E3DC             >
  55+ E3DC             >//              ______________________________________________________________________
  55+ E3DC             >//              Dictionary part
  55+ E3DC             >
  55+ E3DC             >                org     Dict_Ptr
  55+ 2704             >
  55+ 2704 DA 03       >                dw      mirror_Ptr - $E000 + Heap_offset
  55+ 2706             >
  55+ 2706             >NOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  55+ 2706 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  55+ 2706 ~           >
  55+ 2706 ~           >
  55+ 2706             >                endif           ; ok        // for other definitions it "points" the correct handler
  55+ 2706             >                // Use of "; ok" to suppress "warning[fwdref]"
  55+ 2706             >
  55+ 2706             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  56+ 2706                              next
  56+ 2706 DD E9       >                jp      (ix)
  57+ 2708
  58+ 2708              //  ______________________________________________________________________
  59+ 2708              //
  60+ 2708              // constant     n -- cccc     ( compile time )
  61+ 2708              //              -- n          ( run time )
  62+ 2708              // Constant definition.
  63+ 2708                              Colon_Def CONSTANT, "CONSTANT", is_normal   // has forward-ref
  63+ 2708             >                New_Def  CONSTANT, "CONSTANT", Enter_Ptr, is_normal ; ok
  63+ 2708             >
  63+ 2708             >Dict_Ptr        defl    $
  63+ 2708             >
  63+ 2708             >//              ______________________________________________________________________
  63+ 2708             >//              Heap part
  63+ 2708             >
  63+ 2708             >
  63+ 2708             >                org     (Heap_Ptr & $1FFF) + $E000
  63+ E3DC             >
  63+ E3DC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  63+ E3DC             >Latest_Definition defl  Heap_Ptr
  63+ E3DC             >
  63+ E3DC             >                // dummy db directives used to calculate length of namec
  63+ E3DC 43 4F 4E 53 >                db      "CONSTANT"
  63+ E3E0 54 41 4E 54 >
  63+ E3E4             >len_NFA         defl    $ - temp_NFA
  63+ E3E4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  63+ E3DC             >
  63+ E3DC 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  63+ E3DD 43 4F 4E 53 >                db      "CONSTANT"               // name string in 7-bit ascii, but
  63+ E3E1 54 41 4E 54 >
  63+ E3E5             >                org     $-1                 // alter last byte of Name just above to set
  63+ E3E4 D4          >                db      {b $} | END_BIT     // msb as name end
  63+ E3E5             >
  63+ E3E5 D3 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  63+ E3E7             >Prev_Ptr        defl    Heap_Ptr
  63+ E3E7             >
  63+ E3E7             >mirror_Ptr      defl    $
  63+ E3E7             >
  63+ E3E7 0A 27       >                dw      Dict_Ptr + 2        // xt
  63+ E3E9             >Heap_Ptr        defl    $ - $E000           // save current HP
  63+ E3E9             >
  63+ E3E9             >Current_HP      defl  $ - $E000             // used to set HP once!
  63+ E3E9             >
  63+ E3E9             >//              ______________________________________________________________________
  63+ E3E9             >//              Dictionary part
  63+ E3E9             >
  63+ E3E9             >                org     Dict_Ptr
  63+ 2708             >
  63+ 2708 E7 03       >                dw      mirror_Ptr - $E000 + Heap_offset
  63+ 270A             >
  63+ 270A             >CONSTANT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  63+ 270A CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  63+ 270D             >
  63+ 270D             >
  63+ 270D             >                endif           ; ok        // for other definitions it "points" the correct handler
  63+ 270D             >                // Use of "; ok" to suppress "warning[fwdref]"
  63+ 270D             >
  63+ 270D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  64+ 270D AE 30                        dw      CREATE                  // create
  65+ 270F 7A 28                        dw      COMMA                   // ,    ( at PFA then, store the value )
  66+ 2711 7E 2B                        dw      C_SEMICOLON_CODE        // ;code (  changes the 3-bytes CFA to call Constant_Ptr )
  67+ 2713              Constant_Ptr:
  68+ 2713
  69+ 2713
  70+ 2713 E1                           pop     hl
  71+ 2714
  72+ 2714 7E                           ld      a, (hl)
  73+ 2715 23                           inc     hl
  74+ 2716 66                           ld      h, (hl)
  75+ 2717 6F                           ld      l, a
  76+ 2718 E5                           push    hl
  77+ 2719                              next
  77+ 2719 DD E9       >                jp      (ix)
  78+ 271B
  79+ 271B              //  ______________________________________________________________________
  80+ 271B              //
  81+ 271B              // variable     n -- cccc     ( compile time )
  82+ 271B              //              -- a          ( run time )
  83+ 271B              // Variable definition, n is the initial value.
  84+ 271B                              Colon_Def VARIABLE, "VARIABLE", is_normal   // has forward-ref
  84+ 271B             >                New_Def  VARIABLE, "VARIABLE", Enter_Ptr, is_normal ; ok
  84+ 271B             >
  84+ 271B             >Dict_Ptr        defl    $
  84+ 271B             >
  84+ 271B             >//              ______________________________________________________________________
  84+ 271B             >//              Heap part
  84+ 271B             >
  84+ 271B             >
  84+ 271B             >                org     (Heap_Ptr & $1FFF) + $E000
  84+ E3E9             >
  84+ E3E9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  84+ E3E9             >Latest_Definition defl  Heap_Ptr
  84+ E3E9             >
  84+ E3E9             >                // dummy db directives used to calculate length of namec
  84+ E3E9 56 41 52 49 >                db      "VARIABLE"
  84+ E3ED 41 42 4C 45 >
  84+ E3F1             >len_NFA         defl    $ - temp_NFA
  84+ E3F1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  84+ E3E9             >
  84+ E3E9 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  84+ E3EA 56 41 52 49 >                db      "VARIABLE"               // name string in 7-bit ascii, but
  84+ E3EE 41 42 4C 45 >
  84+ E3F2             >                org     $-1                 // alter last byte of Name just above to set
  84+ E3F1 C5          >                db      {b $} | END_BIT     // msb as name end
  84+ E3F2             >
  84+ E3F2 DC 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  84+ E3F4             >Prev_Ptr        defl    Heap_Ptr
  84+ E3F4             >
  84+ E3F4             >mirror_Ptr      defl    $
  84+ E3F4             >
  84+ E3F4 1D 27       >                dw      Dict_Ptr + 2        // xt
  84+ E3F6             >Heap_Ptr        defl    $ - $E000           // save current HP
  84+ E3F6             >
  84+ E3F6             >Current_HP      defl  $ - $E000             // used to set HP once!
  84+ E3F6             >
  84+ E3F6             >//              ______________________________________________________________________
  84+ E3F6             >//              Dictionary part
  84+ E3F6             >
  84+ E3F6             >                org     Dict_Ptr
  84+ 271B             >
  84+ 271B F4 03       >                dw      mirror_Ptr - $E000 + Heap_offset
  84+ 271D             >
  84+ 271D             >VARIABLE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  84+ 271D CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  84+ 2720             >
  84+ 2720             >
  84+ 2720             >                endif           ; ok        // for other definitions it "points" the correct handler
  84+ 2720             >                // Use of "; ok" to suppress "warning[fwdref]"
  84+ 2720             >
  84+ 2720             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  85+ 2720
  86+ 2720 3F 27                        dw      ZERO
  87+ 2722 0A 27                        dw      CONSTANT                // constant
  88+ 2724 7E 2B                        dw      C_SEMICOLON_CODE        // ;code ( changes the 3-bytes CFA to call Variable_Ptr )
  89+ 2726              Variable_Ptr:
  90+ 2726
  91+ 2726
  92+ 2726
  93+ 2726
  94+ 2726                              next
  94+ 2726 DD E9       >                jp      (ix)
  95+ 2728
  96+ 2728              //  ______________________________________________________________________
  97+ 2728              //
  98+ 2728              // user         b -- cccc     ( compile time )
  99+ 2728              //              -- a          ( run time )
 100+ 2728              // User variable definition
 101+ 2728                              Colon_Def USER, "USER", is_normal
 101+ 2728             >                New_Def  USER, "USER", Enter_Ptr, is_normal ; ok
 101+ 2728             >
 101+ 2728             >Dict_Ptr        defl    $
 101+ 2728             >
 101+ 2728             >//              ______________________________________________________________________
 101+ 2728             >//              Heap part
 101+ 2728             >
 101+ 2728             >
 101+ 2728             >                org     (Heap_Ptr & $1FFF) + $E000
 101+ E3F6             >
 101+ E3F6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 101+ E3F6             >Latest_Definition defl  Heap_Ptr
 101+ E3F6             >
 101+ E3F6             >                // dummy db directives used to calculate length of namec
 101+ E3F6 55 53 45 52 >                db      "USER"
 101+ E3FA             >len_NFA         defl    $ - temp_NFA
 101+ E3FA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 101+ E3F6             >
 101+ E3F6 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 101+ E3F7 55 53 45 52 >                db      "USER"               // name string in 7-bit ascii, but
 101+ E3FB             >                org     $-1                 // alter last byte of Name just above to set
 101+ E3FA D2          >                db      {b $} | END_BIT     // msb as name end
 101+ E3FB             >
 101+ E3FB E9 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 101+ E3FD             >Prev_Ptr        defl    Heap_Ptr
 101+ E3FD             >
 101+ E3FD             >mirror_Ptr      defl    $
 101+ E3FD             >
 101+ E3FD 2A 27       >                dw      Dict_Ptr + 2        // xt
 101+ E3FF             >Heap_Ptr        defl    $ - $E000           // save current HP
 101+ E3FF             >
 101+ E3FF             >Current_HP      defl  $ - $E000             // used to set HP once!
 101+ E3FF             >
 101+ E3FF             >//              ______________________________________________________________________
 101+ E3FF             >//              Dictionary part
 101+ E3FF             >
 101+ E3FF             >                org     Dict_Ptr
 101+ 2728             >
 101+ 2728 FD 03       >                dw      mirror_Ptr - $E000 + Heap_offset
 101+ 272A             >
 101+ 272A             >USER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 101+ 272A CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 101+ 272D             >
 101+ 272D             >
 101+ 272D             >                endif           ; ok        // for other definitions it "points" the correct handler
 101+ 272D             >                // Use of "; ok" to suppress "warning[fwdref]"
 101+ 272D             >
 101+ 272D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 102+ 272D
 103+ 272D AE 30                        dw      CREATE                  // create
 104+ 272F 89 28                        dw      CCOMMA                  // c,
 105+ 2731 7E 2B                        dw      C_SEMICOLON_CODE        // ;code () changes the 3-bytes CFA to call User_Ptr )
 106+ 2733
 107+ 2733
 108+ 2733              User_Ptr:
 109+ 2733                              // via call coded in CFA
 110+ 2733 E1                           pop     hl
 111+ 2734
 112+ 2734 7E                           ld      a, (hl)
 113+ 2735 2A 2E 20                     ld      hl, (USER_Pointer)
 114+ 2738 ED 31                        add     hl, a
 115+ 273A E5                           push    hl
 116+ 273B                              next
 116+ 273B DD E9       >                jp      (ix)
 117+ 273D
 118+ 273D              //  ______________________________________________________________________
 119+ 273D              //
 120+ 273D                              Constant_Def ZERO       ,   "0"     ,   0
 120+ 273D             >                New_Def  ZERO, "0", Constant_Ptr, is_normal
 120+ 273D             >
 120+ 273D             >Dict_Ptr        defl    $
 120+ 273D             >
 120+ 273D             >//              ______________________________________________________________________
 120+ 273D             >//              Heap part
 120+ 273D             >
 120+ 273D             >
 120+ 273D             >                org     (Heap_Ptr & $1FFF) + $E000
 120+ E3FF             >
 120+ E3FF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 120+ E3FF             >Latest_Definition defl  Heap_Ptr
 120+ E3FF             >
 120+ E3FF             >                // dummy db directives used to calculate length of namec
 120+ E3FF 30          >                db      "0"
 120+ E400             >len_NFA         defl    $ - temp_NFA
 120+ E400             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 120+ E3FF             >
 120+ E3FF 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 120+ E400 30          >                db      "0"               // name string in 7-bit ascii, but
 120+ E401             >                org     $-1                 // alter last byte of Name just above to set
 120+ E400 B0          >                db      {b $} | END_BIT     // msb as name end
 120+ E401             >
 120+ E401 F6 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 120+ E403             >Prev_Ptr        defl    Heap_Ptr
 120+ E403             >
 120+ E403             >mirror_Ptr      defl    $
 120+ E403             >
 120+ E403 3F 27       >                dw      Dict_Ptr + 2        // xt
 120+ E405             >Heap_Ptr        defl    $ - $E000           // save current HP
 120+ E405             >
 120+ E405             >Current_HP      defl  $ - $E000             // used to set HP once!
 120+ E405             >
 120+ E405             >//              ______________________________________________________________________
 120+ E405             >//              Dictionary part
 120+ E405             >
 120+ E405             >                org     Dict_Ptr
 120+ 273D             >
 120+ 273D 03 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 120+ 273F             >
 120+ 273F             >ZERO:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 120+ 273F CD 13 27    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 120+ 2742             >
 120+ 2742             >
 120+ 2742             >                endif           ; ok        // for other definitions it "points" the correct handler
 120+ 2742             >                // Use of "; ok" to suppress "warning[fwdref]"
 120+ 2742             >
 120+ 2742             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 120+ 2742 00 00       >                dw      0
 121+ 2744                              Constant_Def ONE        ,   "1"     ,   1
 121+ 2744             >                New_Def  ONE, "1", Constant_Ptr, is_normal
 121+ 2744             >
 121+ 2744             >Dict_Ptr        defl    $
 121+ 2744             >
 121+ 2744             >//              ______________________________________________________________________
 121+ 2744             >//              Heap part
 121+ 2744             >
 121+ 2744             >
 121+ 2744             >                org     (Heap_Ptr & $1FFF) + $E000
 121+ E405             >
 121+ E405             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 121+ E405             >Latest_Definition defl  Heap_Ptr
 121+ E405             >
 121+ E405             >                // dummy db directives used to calculate length of namec
 121+ E405 31          >                db      "1"
 121+ E406             >len_NFA         defl    $ - temp_NFA
 121+ E406             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 121+ E405             >
 121+ E405 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 121+ E406 31          >                db      "1"               // name string in 7-bit ascii, but
 121+ E407             >                org     $-1                 // alter last byte of Name just above to set
 121+ E406 B1          >                db      {b $} | END_BIT     // msb as name end
 121+ E407             >
 121+ E407 FF 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 121+ E409             >Prev_Ptr        defl    Heap_Ptr
 121+ E409             >
 121+ E409             >mirror_Ptr      defl    $
 121+ E409             >
 121+ E409 46 27       >                dw      Dict_Ptr + 2        // xt
 121+ E40B             >Heap_Ptr        defl    $ - $E000           // save current HP
 121+ E40B             >
 121+ E40B             >Current_HP      defl  $ - $E000             // used to set HP once!
 121+ E40B             >
 121+ E40B             >//              ______________________________________________________________________
 121+ E40B             >//              Dictionary part
 121+ E40B             >
 121+ E40B             >                org     Dict_Ptr
 121+ 2744             >
 121+ 2744 09 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 121+ 2746             >
 121+ 2746             >ONE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 121+ 2746 CD 13 27    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 121+ 2749             >
 121+ 2749             >
 121+ 2749             >                endif           ; ok        // for other definitions it "points" the correct handler
 121+ 2749             >                // Use of "; ok" to suppress "warning[fwdref]"
 121+ 2749             >
 121+ 2749             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 121+ 2749 01 00       >                dw      1
 122+ 274B                              Constant_Def TWO        ,   "2"     ,   2
 122+ 274B             >                New_Def  TWO, "2", Constant_Ptr, is_normal
 122+ 274B             >
 122+ 274B             >Dict_Ptr        defl    $
 122+ 274B             >
 122+ 274B             >//              ______________________________________________________________________
 122+ 274B             >//              Heap part
 122+ 274B             >
 122+ 274B             >
 122+ 274B             >                org     (Heap_Ptr & $1FFF) + $E000
 122+ E40B             >
 122+ E40B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 122+ E40B             >Latest_Definition defl  Heap_Ptr
 122+ E40B             >
 122+ E40B             >                // dummy db directives used to calculate length of namec
 122+ E40B 32          >                db      "2"
 122+ E40C             >len_NFA         defl    $ - temp_NFA
 122+ E40C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 122+ E40B             >
 122+ E40B 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 122+ E40C 32          >                db      "2"               // name string in 7-bit ascii, but
 122+ E40D             >                org     $-1                 // alter last byte of Name just above to set
 122+ E40C B2          >                db      {b $} | END_BIT     // msb as name end
 122+ E40D             >
 122+ E40D 05 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 122+ E40F             >Prev_Ptr        defl    Heap_Ptr
 122+ E40F             >
 122+ E40F             >mirror_Ptr      defl    $
 122+ E40F             >
 122+ E40F 4D 27       >                dw      Dict_Ptr + 2        // xt
 122+ E411             >Heap_Ptr        defl    $ - $E000           // save current HP
 122+ E411             >
 122+ E411             >Current_HP      defl  $ - $E000             // used to set HP once!
 122+ E411             >
 122+ E411             >//              ______________________________________________________________________
 122+ E411             >//              Dictionary part
 122+ E411             >
 122+ E411             >                org     Dict_Ptr
 122+ 274B             >
 122+ 274B 0F 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 122+ 274D             >
 122+ 274D             >TWO:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 122+ 274D CD 13 27    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 122+ 2750             >
 122+ 2750             >
 122+ 2750             >                endif           ; ok        // for other definitions it "points" the correct handler
 122+ 2750             >                // Use of "; ok" to suppress "warning[fwdref]"
 122+ 2750             >
 122+ 2750             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 122+ 2750 02 00       >                dw      2
 123+ 2752                              Constant_Def THREE      ,   "3"     ,   3
 123+ 2752             >                New_Def  THREE, "3", Constant_Ptr, is_normal
 123+ 2752             >
 123+ 2752             >Dict_Ptr        defl    $
 123+ 2752             >
 123+ 2752             >//              ______________________________________________________________________
 123+ 2752             >//              Heap part
 123+ 2752             >
 123+ 2752             >
 123+ 2752             >                org     (Heap_Ptr & $1FFF) + $E000
 123+ E411             >
 123+ E411             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 123+ E411             >Latest_Definition defl  Heap_Ptr
 123+ E411             >
 123+ E411             >                // dummy db directives used to calculate length of namec
 123+ E411 33          >                db      "3"
 123+ E412             >len_NFA         defl    $ - temp_NFA
 123+ E412             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 123+ E411             >
 123+ E411 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 123+ E412 33          >                db      "3"               // name string in 7-bit ascii, but
 123+ E413             >                org     $-1                 // alter last byte of Name just above to set
 123+ E412 B3          >                db      {b $} | END_BIT     // msb as name end
 123+ E413             >
 123+ E413 0B 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 123+ E415             >Prev_Ptr        defl    Heap_Ptr
 123+ E415             >
 123+ E415             >mirror_Ptr      defl    $
 123+ E415             >
 123+ E415 54 27       >                dw      Dict_Ptr + 2        // xt
 123+ E417             >Heap_Ptr        defl    $ - $E000           // save current HP
 123+ E417             >
 123+ E417             >Current_HP      defl  $ - $E000             // used to set HP once!
 123+ E417             >
 123+ E417             >//              ______________________________________________________________________
 123+ E417             >//              Dictionary part
 123+ E417             >
 123+ E417             >                org     Dict_Ptr
 123+ 2752             >
 123+ 2752 15 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 123+ 2754             >
 123+ 2754             >THREE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 123+ 2754 CD 13 27    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 123+ 2757             >
 123+ 2757             >
 123+ 2757             >                endif           ; ok        // for other definitions it "points" the correct handler
 123+ 2757             >                // Use of "; ok" to suppress "warning[fwdref]"
 123+ 2757             >
 123+ 2757             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 123+ 2757 03 00       >                dw      3
 124+ 2759                              Constant_Def NEG_ONE    ,   "-1"    ,  -1
 124+ 2759             >                New_Def  NEG_ONE, "-1", Constant_Ptr, is_normal
 124+ 2759             >
 124+ 2759             >Dict_Ptr        defl    $
 124+ 2759             >
 124+ 2759             >//              ______________________________________________________________________
 124+ 2759             >//              Heap part
 124+ 2759             >
 124+ 2759             >
 124+ 2759             >                org     (Heap_Ptr & $1FFF) + $E000
 124+ E417             >
 124+ E417             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 124+ E417             >Latest_Definition defl  Heap_Ptr
 124+ E417             >
 124+ E417             >                // dummy db directives used to calculate length of namec
 124+ E417 2D 31       >                db      "-1"
 124+ E419             >len_NFA         defl    $ - temp_NFA
 124+ E419             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 124+ E417             >
 124+ E417 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 124+ E418 2D 31       >                db      "-1"               // name string in 7-bit ascii, but
 124+ E41A             >                org     $-1                 // alter last byte of Name just above to set
 124+ E419 B1          >                db      {b $} | END_BIT     // msb as name end
 124+ E41A             >
 124+ E41A 11 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 124+ E41C             >Prev_Ptr        defl    Heap_Ptr
 124+ E41C             >
 124+ E41C             >mirror_Ptr      defl    $
 124+ E41C             >
 124+ E41C 5B 27       >                dw      Dict_Ptr + 2        // xt
 124+ E41E             >Heap_Ptr        defl    $ - $E000           // save current HP
 124+ E41E             >
 124+ E41E             >Current_HP      defl  $ - $E000             // used to set HP once!
 124+ E41E             >
 124+ E41E             >//              ______________________________________________________________________
 124+ E41E             >//              Dictionary part
 124+ E41E             >
 124+ E41E             >                org     Dict_Ptr
 124+ 2759             >
 124+ 2759 1C 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 124+ 275B             >
 124+ 275B             >NEG_ONE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 124+ 275B CD 13 27    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 124+ 275E             >
 124+ 275E             >
 124+ 275E             >                endif           ; ok        // for other definitions it "points" the correct handler
 124+ 275E             >                // Use of "; ok" to suppress "warning[fwdref]"
 124+ 275E             >
 124+ 275E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 124+ 275E FF FF       >                dw      -1
 125+ 2760                              Constant_Def BL         ,   "BL"    , $20
 125+ 2760             >                New_Def  BL, "BL", Constant_Ptr, is_normal
 125+ 2760             >
 125+ 2760             >Dict_Ptr        defl    $
 125+ 2760             >
 125+ 2760             >//              ______________________________________________________________________
 125+ 2760             >//              Heap part
 125+ 2760             >
 125+ 2760             >
 125+ 2760             >                org     (Heap_Ptr & $1FFF) + $E000
 125+ E41E             >
 125+ E41E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 125+ E41E             >Latest_Definition defl  Heap_Ptr
 125+ E41E             >
 125+ E41E             >                // dummy db directives used to calculate length of namec
 125+ E41E 42 4C       >                db      "BL"
 125+ E420             >len_NFA         defl    $ - temp_NFA
 125+ E420             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 125+ E41E             >
 125+ E41E 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 125+ E41F 42 4C       >                db      "BL"               // name string in 7-bit ascii, but
 125+ E421             >                org     $-1                 // alter last byte of Name just above to set
 125+ E420 CC          >                db      {b $} | END_BIT     // msb as name end
 125+ E421             >
 125+ E421 17 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 125+ E423             >Prev_Ptr        defl    Heap_Ptr
 125+ E423             >
 125+ E423             >mirror_Ptr      defl    $
 125+ E423             >
 125+ E423 62 27       >                dw      Dict_Ptr + 2        // xt
 125+ E425             >Heap_Ptr        defl    $ - $E000           // save current HP
 125+ E425             >
 125+ E425             >Current_HP      defl  $ - $E000             // used to set HP once!
 125+ E425             >
 125+ E425             >//              ______________________________________________________________________
 125+ E425             >//              Dictionary part
 125+ E425             >
 125+ E425             >                org     Dict_Ptr
 125+ 2760             >
 125+ 2760 23 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 125+ 2762             >
 125+ 2762             >BL:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 125+ 2762 CD 13 27    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 125+ 2765             >
 125+ 2765             >
 125+ 2765             >                endif           ; ok        // for other definitions it "points" the correct handler
 125+ 2765             >                // Use of "; ok" to suppress "warning[fwdref]"
 125+ 2765             >
 125+ 2765             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 125+ 2765 20 00       >                dw      $20
 126+ 2767                              Constant_Def CL         ,   "C/L"   ,  64
 126+ 2767             >                New_Def  CL, "C/L", Constant_Ptr, is_normal
 126+ 2767             >
 126+ 2767             >Dict_Ptr        defl    $
 126+ 2767             >
 126+ 2767             >//              ______________________________________________________________________
 126+ 2767             >//              Heap part
 126+ 2767             >
 126+ 2767             >
 126+ 2767             >                org     (Heap_Ptr & $1FFF) + $E000
 126+ E425             >
 126+ E425             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 126+ E425             >Latest_Definition defl  Heap_Ptr
 126+ E425             >
 126+ E425             >                // dummy db directives used to calculate length of namec
 126+ E425 43 2F 4C    >                db      "C/L"
 126+ E428             >len_NFA         defl    $ - temp_NFA
 126+ E428             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 126+ E425             >
 126+ E425 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 126+ E426 43 2F 4C    >                db      "C/L"               // name string in 7-bit ascii, but
 126+ E429             >                org     $-1                 // alter last byte of Name just above to set
 126+ E428 CC          >                db      {b $} | END_BIT     // msb as name end
 126+ E429             >
 126+ E429 1E 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 126+ E42B             >Prev_Ptr        defl    Heap_Ptr
 126+ E42B             >
 126+ E42B             >mirror_Ptr      defl    $
 126+ E42B             >
 126+ E42B 69 27       >                dw      Dict_Ptr + 2        // xt
 126+ E42D             >Heap_Ptr        defl    $ - $E000           // save current HP
 126+ E42D             >
 126+ E42D             >Current_HP      defl  $ - $E000             // used to set HP once!
 126+ E42D             >
 126+ E42D             >//              ______________________________________________________________________
 126+ E42D             >//              Dictionary part
 126+ E42D             >
 126+ E42D             >                org     Dict_Ptr
 126+ 2767             >
 126+ 2767 2B 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 126+ 2769             >
 126+ 2769             >CL:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 126+ 2769 CD 13 27    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 126+ 276C             >
 126+ 276C             >
 126+ 276C             >                endif           ; ok        // for other definitions it "points" the correct handler
 126+ 276C             >                // Use of "; ok" to suppress "warning[fwdref]"
 126+ 276C             >
 126+ 276C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 126+ 276C 40 00       >                dw      64
 127+ 276E                              Constant_Def BBUF       ,   "B/BUF" , 512
 127+ 276E             >                New_Def  BBUF, "B/BUF", Constant_Ptr, is_normal
 127+ 276E             >
 127+ 276E             >Dict_Ptr        defl    $
 127+ 276E             >
 127+ 276E             >//              ______________________________________________________________________
 127+ 276E             >//              Heap part
 127+ 276E             >
 127+ 276E             >
 127+ 276E             >                org     (Heap_Ptr & $1FFF) + $E000
 127+ E42D             >
 127+ E42D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 127+ E42D             >Latest_Definition defl  Heap_Ptr
 127+ E42D             >
 127+ E42D             >                // dummy db directives used to calculate length of namec
 127+ E42D 42 2F 42 55 >                db      "B/BUF"
 127+ E431 46          >
 127+ E432             >len_NFA         defl    $ - temp_NFA
 127+ E432             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 127+ E42D             >
 127+ E42D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 127+ E42E 42 2F 42 55 >                db      "B/BUF"               // name string in 7-bit ascii, but
 127+ E432 46          >
 127+ E433             >                org     $-1                 // alter last byte of Name just above to set
 127+ E432 C6          >                db      {b $} | END_BIT     // msb as name end
 127+ E433             >
 127+ E433 25 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 127+ E435             >Prev_Ptr        defl    Heap_Ptr
 127+ E435             >
 127+ E435             >mirror_Ptr      defl    $
 127+ E435             >
 127+ E435 70 27       >                dw      Dict_Ptr + 2        // xt
 127+ E437             >Heap_Ptr        defl    $ - $E000           // save current HP
 127+ E437             >
 127+ E437             >Current_HP      defl  $ - $E000             // used to set HP once!
 127+ E437             >
 127+ E437             >//              ______________________________________________________________________
 127+ E437             >//              Dictionary part
 127+ E437             >
 127+ E437             >                org     Dict_Ptr
 127+ 276E             >
 127+ 276E 35 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 127+ 2770             >
 127+ 2770             >BBUF:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 127+ 2770 CD 13 27    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 127+ 2773             >
 127+ 2773             >
 127+ 2773             >                endif           ; ok        // for other definitions it "points" the correct handler
 127+ 2773             >                // Use of "; ok" to suppress "warning[fwdref]"
 127+ 2773             >
 127+ 2773             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 127+ 2773 00 02       >                dw      512
 128+ 2775                              Constant_Def BSCR       ,   "B/SCR" ,   2
 128+ 2775             >                New_Def  BSCR, "B/SCR", Constant_Ptr, is_normal
 128+ 2775             >
 128+ 2775             >Dict_Ptr        defl    $
 128+ 2775             >
 128+ 2775             >//              ______________________________________________________________________
 128+ 2775             >//              Heap part
 128+ 2775             >
 128+ 2775             >
 128+ 2775             >                org     (Heap_Ptr & $1FFF) + $E000
 128+ E437             >
 128+ E437             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 128+ E437             >Latest_Definition defl  Heap_Ptr
 128+ E437             >
 128+ E437             >                // dummy db directives used to calculate length of namec
 128+ E437 42 2F 53 43 >                db      "B/SCR"
 128+ E43B 52          >
 128+ E43C             >len_NFA         defl    $ - temp_NFA
 128+ E43C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 128+ E437             >
 128+ E437 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 128+ E438 42 2F 53 43 >                db      "B/SCR"               // name string in 7-bit ascii, but
 128+ E43C 52          >
 128+ E43D             >                org     $-1                 // alter last byte of Name just above to set
 128+ E43C D2          >                db      {b $} | END_BIT     // msb as name end
 128+ E43D             >
 128+ E43D 2D 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 128+ E43F             >Prev_Ptr        defl    Heap_Ptr
 128+ E43F             >
 128+ E43F             >mirror_Ptr      defl    $
 128+ E43F             >
 128+ E43F 77 27       >                dw      Dict_Ptr + 2        // xt
 128+ E441             >Heap_Ptr        defl    $ - $E000           // save current HP
 128+ E441             >
 128+ E441             >Current_HP      defl  $ - $E000             // used to set HP once!
 128+ E441             >
 128+ E441             >//              ______________________________________________________________________
 128+ E441             >//              Dictionary part
 128+ E441             >
 128+ E441             >                org     Dict_Ptr
 128+ 2775             >
 128+ 2775 3F 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 128+ 2777             >
 128+ 2777             >BSCR:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 128+ 2777 CD 13 27    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 128+ 277A             >
 128+ 277A             >
 128+ 277A             >                endif           ; ok        // for other definitions it "points" the correct handler
 128+ 277A             >                // Use of "; ok" to suppress "warning[fwdref]"
 128+ 277A             >
 128+ 277A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 128+ 277A 02 00       >                dw      2
 129+ 277C                              Constant_Def LSCR       ,   "L/SCR" ,  16
 129+ 277C             >                New_Def  LSCR, "L/SCR", Constant_Ptr, is_normal
 129+ 277C             >
 129+ 277C             >Dict_Ptr        defl    $
 129+ 277C             >
 129+ 277C             >//              ______________________________________________________________________
 129+ 277C             >//              Heap part
 129+ 277C             >
 129+ 277C             >
 129+ 277C             >                org     (Heap_Ptr & $1FFF) + $E000
 129+ E441             >
 129+ E441             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 129+ E441             >Latest_Definition defl  Heap_Ptr
 129+ E441             >
 129+ E441             >                // dummy db directives used to calculate length of namec
 129+ E441 4C 2F 53 43 >                db      "L/SCR"
 129+ E445 52          >
 129+ E446             >len_NFA         defl    $ - temp_NFA
 129+ E446             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 129+ E441             >
 129+ E441 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 129+ E442 4C 2F 53 43 >                db      "L/SCR"               // name string in 7-bit ascii, but
 129+ E446 52          >
 129+ E447             >                org     $-1                 // alter last byte of Name just above to set
 129+ E446 D2          >                db      {b $} | END_BIT     // msb as name end
 129+ E447             >
 129+ E447 37 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 129+ E449             >Prev_Ptr        defl    Heap_Ptr
 129+ E449             >
 129+ E449             >mirror_Ptr      defl    $
 129+ E449             >
 129+ E449 7E 27       >                dw      Dict_Ptr + 2        // xt
 129+ E44B             >Heap_Ptr        defl    $ - $E000           // save current HP
 129+ E44B             >
 129+ E44B             >Current_HP      defl  $ - $E000             // used to set HP once!
 129+ E44B             >
 129+ E44B             >//              ______________________________________________________________________
 129+ E44B             >//              Dictionary part
 129+ E44B             >
 129+ E44B             >                org     Dict_Ptr
 129+ 277C             >
 129+ 277C 49 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 129+ 277E             >
 129+ 277E             >LSCR:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 129+ 277E CD 13 27    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 129+ 2781             >
 129+ 2781             >
 129+ 2781             >                endif           ; ok        // for other definitions it "points" the correct handler
 129+ 2781             >                // Use of "; ok" to suppress "warning[fwdref]"
 129+ 2781             >
 129+ 2781             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 129+ 2781 10 00       >                dw      16
 130+ 2783
 131+ 2783              //  ______________________________________________________________________
 132+ 2783              //
 133+ 2783              // +origin         --
 134+ 2783              //              Colon_Def PLUS_ORIGIN, "+ORIGIN", is_normal
 135+ 2783              //              dw      LIT, Cold_origin        // [ hex 6366 ] literal
 136+ 2783              //              dw      PLUS                    // +
 137+ 2783              //              dw      EXIT                    // ;
 138+ 2783                              New_Def  PLUS_ORIGIN, "+ORIGIN", is_code, is_normal
 138+ 2783             >
 138+ 2783             >Dict_Ptr        defl    $
 138+ 2783             >
 138+ 2783             >//              ______________________________________________________________________
 138+ 2783             >//              Heap part
 138+ 2783             >
 138+ 2783             >
 138+ 2783             >                org     (Heap_Ptr & $1FFF) + $E000
 138+ E44B             >
 138+ E44B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 138+ E44B             >Latest_Definition defl  Heap_Ptr
 138+ E44B             >
 138+ E44B             >                // dummy db directives used to calculate length of namec
 138+ E44B 2B 4F 52 49 >                db      "+ORIGIN"
 138+ E44F 47 49 4E    >
 138+ E452             >len_NFA         defl    $ - temp_NFA
 138+ E452             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 138+ E44B             >
 138+ E44B 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 138+ E44C 2B 4F 52 49 >                db      "+ORIGIN"               // name string in 7-bit ascii, but
 138+ E450 47 49 4E    >
 138+ E453             >                org     $-1                 // alter last byte of Name just above to set
 138+ E452 CE          >                db      {b $} | END_BIT     // msb as name end
 138+ E453             >
 138+ E453 41 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 138+ E455             >Prev_Ptr        defl    Heap_Ptr
 138+ E455             >
 138+ E455             >mirror_Ptr      defl    $
 138+ E455             >
 138+ E455 85 27       >                dw      Dict_Ptr + 2        // xt
 138+ E457             >Heap_Ptr        defl    $ - $E000           // save current HP
 138+ E457             >
 138+ E457             >Current_HP      defl  $ - $E000             // used to set HP once!
 138+ E457             >
 138+ E457             >//              ______________________________________________________________________
 138+ E457             >//              Dictionary part
 138+ E457             >
 138+ E457             >                org     Dict_Ptr
 138+ 2783             >
 138+ 2783 55 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 138+ 2785             >
 138+ 2785             >PLUS_ORIGIN:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 138+ 2785 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 138+ 2785 ~           >
 138+ 2785 ~           >
 138+ 2785             >                endif           ; ok        // for other definitions it "points" the correct handler
 138+ 2785             >                // Use of "; ok" to suppress "warning[fwdref]"
 138+ 2785             >
 138+ 2785             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 139+ 2785 D9                           exx
 140+ 2786 E1                           pop     hl
 141+ 2787 11 00 20                     ld      de, Cold_origin
 142+ 278A 19                           add     hl, de
 143+ 278B E5                           push    hl
 144+ 278C D9                           exx
 145+ 278D                              next
 145+ 278D DD E9       >                jp      (ix)
 146+ 278F
 147+ 278F
 148+ 278F              //  ______________________________________________________________________
 149+ 278F              //
 150+ 278F                              Constant_Def CNEXT      ,   "(NEXT)", Next_Ptr
 150+ 278F             >                New_Def  CNEXT, "(NEXT)", Constant_Ptr, is_normal
 150+ 278F             >
 150+ 278F             >Dict_Ptr        defl    $
 150+ 278F             >
 150+ 278F             >//              ______________________________________________________________________
 150+ 278F             >//              Heap part
 150+ 278F             >
 150+ 278F             >
 150+ 278F             >                org     (Heap_Ptr & $1FFF) + $E000
 150+ E457             >
 150+ E457             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 150+ E457             >Latest_Definition defl  Heap_Ptr
 150+ E457             >
 150+ E457             >                // dummy db directives used to calculate length of namec
 150+ E457 28 4E 45 58 >                db      "(NEXT)"
 150+ E45B 54 29       >
 150+ E45D             >len_NFA         defl    $ - temp_NFA
 150+ E45D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 150+ E457             >
 150+ E457 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 150+ E458 28 4E 45 58 >                db      "(NEXT)"               // name string in 7-bit ascii, but
 150+ E45C 54 29       >
 150+ E45E             >                org     $-1                 // alter last byte of Name just above to set
 150+ E45D A9          >                db      {b $} | END_BIT     // msb as name end
 150+ E45E             >
 150+ E45E 4B 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 150+ E460             >Prev_Ptr        defl    Heap_Ptr
 150+ E460             >
 150+ E460             >mirror_Ptr      defl    $
 150+ E460             >
 150+ E460 91 27       >                dw      Dict_Ptr + 2        // xt
 150+ E462             >Heap_Ptr        defl    $ - $E000           // save current HP
 150+ E462             >
 150+ E462             >Current_HP      defl  $ - $E000             // used to set HP once!
 150+ E462             >
 150+ E462             >//              ______________________________________________________________________
 150+ E462             >//              Dictionary part
 150+ E462             >
 150+ E462             >                org     Dict_Ptr
 150+ 278F             >
 150+ 278F 60 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 150+ 2791             >
 150+ 2791             >CNEXT:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 150+ 2791 CD 13 27    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 150+ 2794             >
 150+ 2794             >
 150+ 2794             >                endif           ; ok        // for other definitions it "points" the correct handler
 150+ 2794             >                // Use of "; ok" to suppress "warning[fwdref]"
 150+ 2794             >
 150+ 2794             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 150+ 2794 34 20       >                dw      Next_Ptr
 151+ 2796
 152+ 2796              //  ______________________________________________________________________
 153+ 2796              //
 154+ 2796
 155+ 2796                              User_Def S0         , "S0"        , 06 // starting value of Stack-Pointer
 155+ 2796             >                New_Def  S0, "S0", User_Ptr, is_normal
 155+ 2796             >
 155+ 2796             >Dict_Ptr        defl    $
 155+ 2796             >
 155+ 2796             >//              ______________________________________________________________________
 155+ 2796             >//              Heap part
 155+ 2796             >
 155+ 2796             >
 155+ 2796             >                org     (Heap_Ptr & $1FFF) + $E000
 155+ E462             >
 155+ E462             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 155+ E462             >Latest_Definition defl  Heap_Ptr
 155+ E462             >
 155+ E462             >                // dummy db directives used to calculate length of namec
 155+ E462 53 30       >                db      "S0"
 155+ E464             >len_NFA         defl    $ - temp_NFA
 155+ E464             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 155+ E462             >
 155+ E462 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 155+ E463 53 30       >                db      "S0"               // name string in 7-bit ascii, but
 155+ E465             >                org     $-1                 // alter last byte of Name just above to set
 155+ E464 B0          >                db      {b $} | END_BIT     // msb as name end
 155+ E465             >
 155+ E465 57 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 155+ E467             >Prev_Ptr        defl    Heap_Ptr
 155+ E467             >
 155+ E467             >mirror_Ptr      defl    $
 155+ E467             >
 155+ E467 98 27       >                dw      Dict_Ptr + 2        // xt
 155+ E469             >Heap_Ptr        defl    $ - $E000           // save current HP
 155+ E469             >
 155+ E469             >Current_HP      defl  $ - $E000             // used to set HP once!
 155+ E469             >
 155+ E469             >//              ______________________________________________________________________
 155+ E469             >//              Dictionary part
 155+ E469             >
 155+ E469             >                org     Dict_Ptr
 155+ 2796             >
 155+ 2796 67 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 155+ 2798             >
 155+ 2798             >S0:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 155+ 2798 CD 33 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 155+ 279B             >
 155+ 279B             >
 155+ 279B             >                endif           ; ok        // for other definitions it "points" the correct handler
 155+ 279B             >                // Use of "; ok" to suppress "warning[fwdref]"
 155+ 279B             >
 155+ 279B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 155+ 279B 06          >                db      06
 156+ 279C                              User_Def R0         , "R0"        , 08 // starting value of Return-Pointer
 156+ 279C             >                New_Def  R0, "R0", User_Ptr, is_normal
 156+ 279C             >
 156+ 279C             >Dict_Ptr        defl    $
 156+ 279C             >
 156+ 279C             >//              ______________________________________________________________________
 156+ 279C             >//              Heap part
 156+ 279C             >
 156+ 279C             >
 156+ 279C             >                org     (Heap_Ptr & $1FFF) + $E000
 156+ E469             >
 156+ E469             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 156+ E469             >Latest_Definition defl  Heap_Ptr
 156+ E469             >
 156+ E469             >                // dummy db directives used to calculate length of namec
 156+ E469 52 30       >                db      "R0"
 156+ E46B             >len_NFA         defl    $ - temp_NFA
 156+ E46B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 156+ E469             >
 156+ E469 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 156+ E46A 52 30       >                db      "R0"               // name string in 7-bit ascii, but
 156+ E46C             >                org     $-1                 // alter last byte of Name just above to set
 156+ E46B B0          >                db      {b $} | END_BIT     // msb as name end
 156+ E46C             >
 156+ E46C 62 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 156+ E46E             >Prev_Ptr        defl    Heap_Ptr
 156+ E46E             >
 156+ E46E             >mirror_Ptr      defl    $
 156+ E46E             >
 156+ E46E 9E 27       >                dw      Dict_Ptr + 2        // xt
 156+ E470             >Heap_Ptr        defl    $ - $E000           // save current HP
 156+ E470             >
 156+ E470             >Current_HP      defl  $ - $E000             // used to set HP once!
 156+ E470             >
 156+ E470             >//              ______________________________________________________________________
 156+ E470             >//              Dictionary part
 156+ E470             >
 156+ E470             >                org     Dict_Ptr
 156+ 279C             >
 156+ 279C 6E 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 156+ 279E             >
 156+ 279E             >R0:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 156+ 279E CD 33 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 156+ 27A1             >
 156+ 27A1             >
 156+ 27A1             >                endif           ; ok        // for other definitions it "points" the correct handler
 156+ 27A1             >                // Use of "; ok" to suppress "warning[fwdref]"
 156+ 27A1             >
 156+ 27A1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 156+ 27A1 08          >                db      08
 157+ 27A2                              User_Def TIB        , "TIB"       , 10 // input terminal buffer address
 157+ 27A2             >                New_Def  TIB, "TIB", User_Ptr, is_normal
 157+ 27A2             >
 157+ 27A2             >Dict_Ptr        defl    $
 157+ 27A2             >
 157+ 27A2             >//              ______________________________________________________________________
 157+ 27A2             >//              Heap part
 157+ 27A2             >
 157+ 27A2             >
 157+ 27A2             >                org     (Heap_Ptr & $1FFF) + $E000
 157+ E470             >
 157+ E470             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 157+ E470             >Latest_Definition defl  Heap_Ptr
 157+ E470             >
 157+ E470             >                // dummy db directives used to calculate length of namec
 157+ E470 54 49 42    >                db      "TIB"
 157+ E473             >len_NFA         defl    $ - temp_NFA
 157+ E473             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 157+ E470             >
 157+ E470 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 157+ E471 54 49 42    >                db      "TIB"               // name string in 7-bit ascii, but
 157+ E474             >                org     $-1                 // alter last byte of Name just above to set
 157+ E473 C2          >                db      {b $} | END_BIT     // msb as name end
 157+ E474             >
 157+ E474 69 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 157+ E476             >Prev_Ptr        defl    Heap_Ptr
 157+ E476             >
 157+ E476             >mirror_Ptr      defl    $
 157+ E476             >
 157+ E476 A4 27       >                dw      Dict_Ptr + 2        // xt
 157+ E478             >Heap_Ptr        defl    $ - $E000           // save current HP
 157+ E478             >
 157+ E478             >Current_HP      defl  $ - $E000             // used to set HP once!
 157+ E478             >
 157+ E478             >//              ______________________________________________________________________
 157+ E478             >//              Dictionary part
 157+ E478             >
 157+ E478             >                org     Dict_Ptr
 157+ 27A2             >
 157+ 27A2 76 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 157+ 27A4             >
 157+ 27A4             >TIB:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 157+ 27A4 CD 33 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 157+ 27A7             >
 157+ 27A7             >
 157+ 27A7             >                endif           ; ok        // for other definitions it "points" the correct handler
 157+ 27A7             >                // Use of "; ok" to suppress "warning[fwdref]"
 157+ 27A7             >
 157+ 27A7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 157+ 27A7 0A          >                db      10
 158+ 27A8                              User_Def WIDTH      , "WIDTH"     , 12 // maximum number of characters for a word name
 158+ 27A8             >                New_Def  WIDTH, "WIDTH", User_Ptr, is_normal
 158+ 27A8             >
 158+ 27A8             >Dict_Ptr        defl    $
 158+ 27A8             >
 158+ 27A8             >//              ______________________________________________________________________
 158+ 27A8             >//              Heap part
 158+ 27A8             >
 158+ 27A8             >
 158+ 27A8             >                org     (Heap_Ptr & $1FFF) + $E000
 158+ E478             >
 158+ E478             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 158+ E478             >Latest_Definition defl  Heap_Ptr
 158+ E478             >
 158+ E478             >                // dummy db directives used to calculate length of namec
 158+ E478 57 49 44 54 >                db      "WIDTH"
 158+ E47C 48          >
 158+ E47D             >len_NFA         defl    $ - temp_NFA
 158+ E47D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 158+ E478             >
 158+ E478 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 158+ E479 57 49 44 54 >                db      "WIDTH"               // name string in 7-bit ascii, but
 158+ E47D 48          >
 158+ E47E             >                org     $-1                 // alter last byte of Name just above to set
 158+ E47D C8          >                db      {b $} | END_BIT     // msb as name end
 158+ E47E             >
 158+ E47E 70 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 158+ E480             >Prev_Ptr        defl    Heap_Ptr
 158+ E480             >
 158+ E480             >mirror_Ptr      defl    $
 158+ E480             >
 158+ E480 AA 27       >                dw      Dict_Ptr + 2        // xt
 158+ E482             >Heap_Ptr        defl    $ - $E000           // save current HP
 158+ E482             >
 158+ E482             >Current_HP      defl  $ - $E000             // used to set HP once!
 158+ E482             >
 158+ E482             >//              ______________________________________________________________________
 158+ E482             >//              Dictionary part
 158+ E482             >
 158+ E482             >                org     Dict_Ptr
 158+ 27A8             >
 158+ 27A8 80 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 158+ 27AA             >
 158+ 27AA             >WIDTH:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 158+ 27AA CD 33 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 158+ 27AD             >
 158+ 27AD             >
 158+ 27AD             >                endif           ; ok        // for other definitions it "points" the correct handler
 158+ 27AD             >                // Use of "; ok" to suppress "warning[fwdref]"
 158+ 27AD             >
 158+ 27AD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 158+ 27AD 0C          >                db      12
 159+ 27AE                              User_Def WARNING    , "WARNING"   , 14 // error reporting method: 0 base, 1 verbose
 159+ 27AE             >                New_Def  WARNING, "WARNING", User_Ptr, is_normal
 159+ 27AE             >
 159+ 27AE             >Dict_Ptr        defl    $
 159+ 27AE             >
 159+ 27AE             >//              ______________________________________________________________________
 159+ 27AE             >//              Heap part
 159+ 27AE             >
 159+ 27AE             >
 159+ 27AE             >                org     (Heap_Ptr & $1FFF) + $E000
 159+ E482             >
 159+ E482             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 159+ E482             >Latest_Definition defl  Heap_Ptr
 159+ E482             >
 159+ E482             >                // dummy db directives used to calculate length of namec
 159+ E482 57 41 52 4E >                db      "WARNING"
 159+ E486 49 4E 47    >
 159+ E489             >len_NFA         defl    $ - temp_NFA
 159+ E489             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 159+ E482             >
 159+ E482 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 159+ E483 57 41 52 4E >                db      "WARNING"               // name string in 7-bit ascii, but
 159+ E487 49 4E 47    >
 159+ E48A             >                org     $-1                 // alter last byte of Name just above to set
 159+ E489 C7          >                db      {b $} | END_BIT     // msb as name end
 159+ E48A             >
 159+ E48A 78 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 159+ E48C             >Prev_Ptr        defl    Heap_Ptr
 159+ E48C             >
 159+ E48C             >mirror_Ptr      defl    $
 159+ E48C             >
 159+ E48C B0 27       >                dw      Dict_Ptr + 2        // xt
 159+ E48E             >Heap_Ptr        defl    $ - $E000           // save current HP
 159+ E48E             >
 159+ E48E             >Current_HP      defl  $ - $E000             // used to set HP once!
 159+ E48E             >
 159+ E48E             >//              ______________________________________________________________________
 159+ E48E             >//              Dictionary part
 159+ E48E             >
 159+ E48E             >                org     Dict_Ptr
 159+ 27AE             >
 159+ 27AE 8C 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 159+ 27B0             >
 159+ 27B0             >WARNING:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 159+ 27B0 CD 33 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 159+ 27B3             >
 159+ 27B3             >
 159+ 27B3             >                endif           ; ok        // for other definitions it "points" the correct handler
 159+ 27B3             >                // Use of "; ok" to suppress "warning[fwdref]"
 159+ 27B3             >
 159+ 27B3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 159+ 27B3 0E          >                db      14
 160+ 27B4                              User_Def FENCE      , "FENCE"     , 16 // minimum address where FORGET can work
 160+ 27B4             >                New_Def  FENCE, "FENCE", User_Ptr, is_normal
 160+ 27B4             >
 160+ 27B4             >Dict_Ptr        defl    $
 160+ 27B4             >
 160+ 27B4             >//              ______________________________________________________________________
 160+ 27B4             >//              Heap part
 160+ 27B4             >
 160+ 27B4             >
 160+ 27B4             >                org     (Heap_Ptr & $1FFF) + $E000
 160+ E48E             >
 160+ E48E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 160+ E48E             >Latest_Definition defl  Heap_Ptr
 160+ E48E             >
 160+ E48E             >                // dummy db directives used to calculate length of namec
 160+ E48E 46 45 4E 43 >                db      "FENCE"
 160+ E492 45          >
 160+ E493             >len_NFA         defl    $ - temp_NFA
 160+ E493             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 160+ E48E             >
 160+ E48E 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 160+ E48F 46 45 4E 43 >                db      "FENCE"               // name string in 7-bit ascii, but
 160+ E493 45          >
 160+ E494             >                org     $-1                 // alter last byte of Name just above to set
 160+ E493 C5          >                db      {b $} | END_BIT     // msb as name end
 160+ E494             >
 160+ E494 82 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 160+ E496             >Prev_Ptr        defl    Heap_Ptr
 160+ E496             >
 160+ E496             >mirror_Ptr      defl    $
 160+ E496             >
 160+ E496 B6 27       >                dw      Dict_Ptr + 2        // xt
 160+ E498             >Heap_Ptr        defl    $ - $E000           // save current HP
 160+ E498             >
 160+ E498             >Current_HP      defl  $ - $E000             // used to set HP once!
 160+ E498             >
 160+ E498             >//              ______________________________________________________________________
 160+ E498             >//              Dictionary part
 160+ E498             >
 160+ E498             >                org     Dict_Ptr
 160+ 27B4             >
 160+ 27B4 96 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 160+ 27B6             >
 160+ 27B6             >FENCE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 160+ 27B6 CD 33 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 160+ 27B9             >
 160+ 27B9             >
 160+ 27B9             >                endif           ; ok        // for other definitions it "points" the correct handler
 160+ 27B9             >                // Use of "; ok" to suppress "warning[fwdref]"
 160+ 27B9             >
 160+ 27B9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 160+ 27B9 10          >                db      16
 161+ 27BA                              User_Def DP         , "DP"        , 18 // Dictionary Pointer
 161+ 27BA             >                New_Def  DP, "DP", User_Ptr, is_normal
 161+ 27BA             >
 161+ 27BA             >Dict_Ptr        defl    $
 161+ 27BA             >
 161+ 27BA             >//              ______________________________________________________________________
 161+ 27BA             >//              Heap part
 161+ 27BA             >
 161+ 27BA             >
 161+ 27BA             >                org     (Heap_Ptr & $1FFF) + $E000
 161+ E498             >
 161+ E498             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 161+ E498             >Latest_Definition defl  Heap_Ptr
 161+ E498             >
 161+ E498             >                // dummy db directives used to calculate length of namec
 161+ E498 44 50       >                db      "DP"
 161+ E49A             >len_NFA         defl    $ - temp_NFA
 161+ E49A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 161+ E498             >
 161+ E498 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 161+ E499 44 50       >                db      "DP"               // name string in 7-bit ascii, but
 161+ E49B             >                org     $-1                 // alter last byte of Name just above to set
 161+ E49A D0          >                db      {b $} | END_BIT     // msb as name end
 161+ E49B             >
 161+ E49B 8E 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 161+ E49D             >Prev_Ptr        defl    Heap_Ptr
 161+ E49D             >
 161+ E49D             >mirror_Ptr      defl    $
 161+ E49D             >
 161+ E49D BC 27       >                dw      Dict_Ptr + 2        // xt
 161+ E49F             >Heap_Ptr        defl    $ - $E000           // save current HP
 161+ E49F             >
 161+ E49F             >Current_HP      defl  $ - $E000             // used to set HP once!
 161+ E49F             >
 161+ E49F             >//              ______________________________________________________________________
 161+ E49F             >//              Dictionary part
 161+ E49F             >
 161+ E49F             >                org     Dict_Ptr
 161+ 27BA             >
 161+ 27BA 9D 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 161+ 27BC             >
 161+ 27BC             >DP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 161+ 27BC CD 33 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 161+ 27BF             >
 161+ 27BF             >
 161+ 27BF             >                endif           ; ok        // for other definitions it "points" the correct handler
 161+ 27BF             >                // Use of "; ok" to suppress "warning[fwdref]"
 161+ 27BF             >
 161+ 27BF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 161+ 27BF 12          >                db      18
 162+ 27C0                              User_Def VOC_LINK   , "VOC-LINK"  , 20 // pointer to the latest vocabulary
 162+ 27C0             >                New_Def  VOC_LINK, "VOC-LINK", User_Ptr, is_normal
 162+ 27C0             >
 162+ 27C0             >Dict_Ptr        defl    $
 162+ 27C0             >
 162+ 27C0             >//              ______________________________________________________________________
 162+ 27C0             >//              Heap part
 162+ 27C0             >
 162+ 27C0             >
 162+ 27C0             >                org     (Heap_Ptr & $1FFF) + $E000
 162+ E49F             >
 162+ E49F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 162+ E49F             >Latest_Definition defl  Heap_Ptr
 162+ E49F             >
 162+ E49F             >                // dummy db directives used to calculate length of namec
 162+ E49F 56 4F 43 2D >                db      "VOC-LINK"
 162+ E4A3 4C 49 4E 4B >
 162+ E4A7             >len_NFA         defl    $ - temp_NFA
 162+ E4A7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 162+ E49F             >
 162+ E49F 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 162+ E4A0 56 4F 43 2D >                db      "VOC-LINK"               // name string in 7-bit ascii, but
 162+ E4A4 4C 49 4E 4B >
 162+ E4A8             >                org     $-1                 // alter last byte of Name just above to set
 162+ E4A7 CB          >                db      {b $} | END_BIT     // msb as name end
 162+ E4A8             >
 162+ E4A8 98 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 162+ E4AA             >Prev_Ptr        defl    Heap_Ptr
 162+ E4AA             >
 162+ E4AA             >mirror_Ptr      defl    $
 162+ E4AA             >
 162+ E4AA C2 27       >                dw      Dict_Ptr + 2        // xt
 162+ E4AC             >Heap_Ptr        defl    $ - $E000           // save current HP
 162+ E4AC             >
 162+ E4AC             >Current_HP      defl  $ - $E000             // used to set HP once!
 162+ E4AC             >
 162+ E4AC             >//              ______________________________________________________________________
 162+ E4AC             >//              Dictionary part
 162+ E4AC             >
 162+ E4AC             >                org     Dict_Ptr
 162+ 27C0             >
 162+ 27C0 AA 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 162+ 27C2             >
 162+ 27C2             >VOC_LINK:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 162+ 27C2 CD 33 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 162+ 27C5             >
 162+ 27C5             >
 162+ 27C5             >                endif           ; ok        // for other definitions it "points" the correct handler
 162+ 27C5             >                // Use of "; ok" to suppress "warning[fwdref]"
 162+ 27C5             >
 162+ 27C5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 162+ 27C5 14          >                db      20
 163+ 27C6                              User_Def FIRST      , "FIRST"     , 22 // address of first buffer
 163+ 27C6             >                New_Def  FIRST, "FIRST", User_Ptr, is_normal
 163+ 27C6             >
 163+ 27C6             >Dict_Ptr        defl    $
 163+ 27C6             >
 163+ 27C6             >//              ______________________________________________________________________
 163+ 27C6             >//              Heap part
 163+ 27C6             >
 163+ 27C6             >
 163+ 27C6             >                org     (Heap_Ptr & $1FFF) + $E000
 163+ E4AC             >
 163+ E4AC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 163+ E4AC             >Latest_Definition defl  Heap_Ptr
 163+ E4AC             >
 163+ E4AC             >                // dummy db directives used to calculate length of namec
 163+ E4AC 46 49 52 53 >                db      "FIRST"
 163+ E4B0 54          >
 163+ E4B1             >len_NFA         defl    $ - temp_NFA
 163+ E4B1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 163+ E4AC             >
 163+ E4AC 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 163+ E4AD 46 49 52 53 >                db      "FIRST"               // name string in 7-bit ascii, but
 163+ E4B1 54          >
 163+ E4B2             >                org     $-1                 // alter last byte of Name just above to set
 163+ E4B1 D4          >                db      {b $} | END_BIT     // msb as name end
 163+ E4B2             >
 163+ E4B2 9F 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 163+ E4B4             >Prev_Ptr        defl    Heap_Ptr
 163+ E4B4             >
 163+ E4B4             >mirror_Ptr      defl    $
 163+ E4B4             >
 163+ E4B4 C8 27       >                dw      Dict_Ptr + 2        // xt
 163+ E4B6             >Heap_Ptr        defl    $ - $E000           // save current HP
 163+ E4B6             >
 163+ E4B6             >Current_HP      defl  $ - $E000             // used to set HP once!
 163+ E4B6             >
 163+ E4B6             >//              ______________________________________________________________________
 163+ E4B6             >//              Dictionary part
 163+ E4B6             >
 163+ E4B6             >                org     Dict_Ptr
 163+ 27C6             >
 163+ 27C6 B4 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 163+ 27C8             >
 163+ 27C8             >FIRST:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 163+ 27C8 CD 33 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 163+ 27CB             >
 163+ 27CB             >
 163+ 27CB             >                endif           ; ok        // for other definitions it "points" the correct handler
 163+ 27CB             >                // Use of "; ok" to suppress "warning[fwdref]"
 163+ 27CB             >
 163+ 27CB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 163+ 27CB 16          >                db      22
 164+ 27CC                              User_Def LIMIT      , "LIMIT"     , 24 // address of last buffer
 164+ 27CC             >                New_Def  LIMIT, "LIMIT", User_Ptr, is_normal
 164+ 27CC             >
 164+ 27CC             >Dict_Ptr        defl    $
 164+ 27CC             >
 164+ 27CC             >//              ______________________________________________________________________
 164+ 27CC             >//              Heap part
 164+ 27CC             >
 164+ 27CC             >
 164+ 27CC             >                org     (Heap_Ptr & $1FFF) + $E000
 164+ E4B6             >
 164+ E4B6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 164+ E4B6             >Latest_Definition defl  Heap_Ptr
 164+ E4B6             >
 164+ E4B6             >                // dummy db directives used to calculate length of namec
 164+ E4B6 4C 49 4D 49 >                db      "LIMIT"
 164+ E4BA 54          >
 164+ E4BB             >len_NFA         defl    $ - temp_NFA
 164+ E4BB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 164+ E4B6             >
 164+ E4B6 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 164+ E4B7 4C 49 4D 49 >                db      "LIMIT"               // name string in 7-bit ascii, but
 164+ E4BB 54          >
 164+ E4BC             >                org     $-1                 // alter last byte of Name just above to set
 164+ E4BB D4          >                db      {b $} | END_BIT     // msb as name end
 164+ E4BC             >
 164+ E4BC AC 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 164+ E4BE             >Prev_Ptr        defl    Heap_Ptr
 164+ E4BE             >
 164+ E4BE             >mirror_Ptr      defl    $
 164+ E4BE             >
 164+ E4BE CE 27       >                dw      Dict_Ptr + 2        // xt
 164+ E4C0             >Heap_Ptr        defl    $ - $E000           // save current HP
 164+ E4C0             >
 164+ E4C0             >Current_HP      defl  $ - $E000             // used to set HP once!
 164+ E4C0             >
 164+ E4C0             >//              ______________________________________________________________________
 164+ E4C0             >//              Dictionary part
 164+ E4C0             >
 164+ E4C0             >                org     Dict_Ptr
 164+ 27CC             >
 164+ 27CC BE 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 164+ 27CE             >
 164+ 27CE             >LIMIT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 164+ 27CE CD 33 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 164+ 27D1             >
 164+ 27D1             >
 164+ 27D1             >                endif           ; ok        // for other definitions it "points" the correct handler
 164+ 27D1             >                // Use of "; ok" to suppress "warning[fwdref]"
 164+ 27D1             >
 164+ 27D1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 164+ 27D1 18          >                db      24
 165+ 27D2                              User_Def HP         , "HP"        , 26 // heap-pointer address
 165+ 27D2             >                New_Def  HP, "HP", User_Ptr, is_normal
 165+ 27D2             >
 165+ 27D2             >Dict_Ptr        defl    $
 165+ 27D2             >
 165+ 27D2             >//              ______________________________________________________________________
 165+ 27D2             >//              Heap part
 165+ 27D2             >
 165+ 27D2             >
 165+ 27D2             >                org     (Heap_Ptr & $1FFF) + $E000
 165+ E4C0             >
 165+ E4C0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 165+ E4C0             >Latest_Definition defl  Heap_Ptr
 165+ E4C0             >
 165+ E4C0             >                // dummy db directives used to calculate length of namec
 165+ E4C0 48 50       >                db      "HP"
 165+ E4C2             >len_NFA         defl    $ - temp_NFA
 165+ E4C2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 165+ E4C0             >
 165+ E4C0 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 165+ E4C1 48 50       >                db      "HP"               // name string in 7-bit ascii, but
 165+ E4C3             >                org     $-1                 // alter last byte of Name just above to set
 165+ E4C2 D0          >                db      {b $} | END_BIT     // msb as name end
 165+ E4C3             >
 165+ E4C3 B6 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 165+ E4C5             >Prev_Ptr        defl    Heap_Ptr
 165+ E4C5             >
 165+ E4C5             >mirror_Ptr      defl    $
 165+ E4C5             >
 165+ E4C5 D4 27       >                dw      Dict_Ptr + 2        // xt
 165+ E4C7             >Heap_Ptr        defl    $ - $E000           // save current HP
 165+ E4C7             >
 165+ E4C7             >Current_HP      defl  $ - $E000             // used to set HP once!
 165+ E4C7             >
 165+ E4C7             >//              ______________________________________________________________________
 165+ E4C7             >//              Dictionary part
 165+ E4C7             >
 165+ E4C7             >                org     Dict_Ptr
 165+ 27D2             >
 165+ 27D2 C5 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 165+ 27D4             >
 165+ 27D4             >HP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 165+ 27D4 CD 33 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 165+ 27D7             >
 165+ 27D7             >
 165+ 27D7             >                endif           ; ok        // for other definitions it "points" the correct handler
 165+ 27D7             >                // Use of "; ok" to suppress "warning[fwdref]"
 165+ 27D7             >
 165+ 27D7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 165+ 27D7 1A          >                db      26
 166+ 27D8                              User_Def NMODE      , "NMODE"     , 28 // number mode: 0 integer, 1 floating point
 166+ 27D8             >                New_Def  NMODE, "NMODE", User_Ptr, is_normal
 166+ 27D8             >
 166+ 27D8             >Dict_Ptr        defl    $
 166+ 27D8             >
 166+ 27D8             >//              ______________________________________________________________________
 166+ 27D8             >//              Heap part
 166+ 27D8             >
 166+ 27D8             >
 166+ 27D8             >                org     (Heap_Ptr & $1FFF) + $E000
 166+ E4C7             >
 166+ E4C7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 166+ E4C7             >Latest_Definition defl  Heap_Ptr
 166+ E4C7             >
 166+ E4C7             >                // dummy db directives used to calculate length of namec
 166+ E4C7 4E 4D 4F 44 >                db      "NMODE"
 166+ E4CB 45          >
 166+ E4CC             >len_NFA         defl    $ - temp_NFA
 166+ E4CC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 166+ E4C7             >
 166+ E4C7 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 166+ E4C8 4E 4D 4F 44 >                db      "NMODE"               // name string in 7-bit ascii, but
 166+ E4CC 45          >
 166+ E4CD             >                org     $-1                 // alter last byte of Name just above to set
 166+ E4CC C5          >                db      {b $} | END_BIT     // msb as name end
 166+ E4CD             >
 166+ E4CD C0 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 166+ E4CF             >Prev_Ptr        defl    Heap_Ptr
 166+ E4CF             >
 166+ E4CF             >mirror_Ptr      defl    $
 166+ E4CF             >
 166+ E4CF DA 27       >                dw      Dict_Ptr + 2        // xt
 166+ E4D1             >Heap_Ptr        defl    $ - $E000           // save current HP
 166+ E4D1             >
 166+ E4D1             >Current_HP      defl  $ - $E000             // used to set HP once!
 166+ E4D1             >
 166+ E4D1             >//              ______________________________________________________________________
 166+ E4D1             >//              Dictionary part
 166+ E4D1             >
 166+ E4D1             >                org     Dict_Ptr
 166+ 27D8             >
 166+ 27D8 CF 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 166+ 27DA             >
 166+ 27DA             >NMODE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 166+ 27DA CD 33 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 166+ 27DD             >
 166+ 27DD             >
 166+ 27DD             >                endif           ; ok        // for other definitions it "points" the correct handler
 166+ 27DD             >                // Use of "; ok" to suppress "warning[fwdref]"
 166+ 27DD             >
 166+ 27DD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 166+ 27DD 1C          >                db      28
 167+ 27DE                              User_Def BLK        , "BLK"       , 30 // block number to be interpreted. 0 for terminal
 167+ 27DE             >                New_Def  BLK, "BLK", User_Ptr, is_normal
 167+ 27DE             >
 167+ 27DE             >Dict_Ptr        defl    $
 167+ 27DE             >
 167+ 27DE             >//              ______________________________________________________________________
 167+ 27DE             >//              Heap part
 167+ 27DE             >
 167+ 27DE             >
 167+ 27DE             >                org     (Heap_Ptr & $1FFF) + $E000
 167+ E4D1             >
 167+ E4D1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 167+ E4D1             >Latest_Definition defl  Heap_Ptr
 167+ E4D1             >
 167+ E4D1             >                // dummy db directives used to calculate length of namec
 167+ E4D1 42 4C 4B    >                db      "BLK"
 167+ E4D4             >len_NFA         defl    $ - temp_NFA
 167+ E4D4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 167+ E4D1             >
 167+ E4D1 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 167+ E4D2 42 4C 4B    >                db      "BLK"               // name string in 7-bit ascii, but
 167+ E4D5             >                org     $-1                 // alter last byte of Name just above to set
 167+ E4D4 CB          >                db      {b $} | END_BIT     // msb as name end
 167+ E4D5             >
 167+ E4D5 C7 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 167+ E4D7             >Prev_Ptr        defl    Heap_Ptr
 167+ E4D7             >
 167+ E4D7             >mirror_Ptr      defl    $
 167+ E4D7             >
 167+ E4D7 E0 27       >                dw      Dict_Ptr + 2        // xt
 167+ E4D9             >Heap_Ptr        defl    $ - $E000           // save current HP
 167+ E4D9             >
 167+ E4D9             >Current_HP      defl  $ - $E000             // used to set HP once!
 167+ E4D9             >
 167+ E4D9             >//              ______________________________________________________________________
 167+ E4D9             >//              Dictionary part
 167+ E4D9             >
 167+ E4D9             >                org     Dict_Ptr
 167+ 27DE             >
 167+ 27DE D7 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 167+ 27E0             >
 167+ 27E0             >BLK:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 167+ 27E0 CD 33 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 167+ 27E3             >
 167+ 27E3             >
 167+ 27E3             >                endif           ; ok        // for other definitions it "points" the correct handler
 167+ 27E3             >                // Use of "; ok" to suppress "warning[fwdref]"
 167+ 27E3             >
 167+ 27E3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 167+ 27E3 1E          >                db      30
 168+ 27E4                              User_Def TO_IN      , ">IN"       , 32 // incremented when consuming input buffer
 168+ 27E4             >                New_Def  TO_IN, ">IN", User_Ptr, is_normal
 168+ 27E4             >
 168+ 27E4             >Dict_Ptr        defl    $
 168+ 27E4             >
 168+ 27E4             >//              ______________________________________________________________________
 168+ 27E4             >//              Heap part
 168+ 27E4             >
 168+ 27E4             >
 168+ 27E4             >                org     (Heap_Ptr & $1FFF) + $E000
 168+ E4D9             >
 168+ E4D9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 168+ E4D9             >Latest_Definition defl  Heap_Ptr
 168+ E4D9             >
 168+ E4D9             >                // dummy db directives used to calculate length of namec
 168+ E4D9 3E 49 4E    >                db      ">IN"
 168+ E4DC             >len_NFA         defl    $ - temp_NFA
 168+ E4DC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 168+ E4D9             >
 168+ E4D9 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 168+ E4DA 3E 49 4E    >                db      ">IN"               // name string in 7-bit ascii, but
 168+ E4DD             >                org     $-1                 // alter last byte of Name just above to set
 168+ E4DC CE          >                db      {b $} | END_BIT     // msb as name end
 168+ E4DD             >
 168+ E4DD D1 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 168+ E4DF             >Prev_Ptr        defl    Heap_Ptr
 168+ E4DF             >
 168+ E4DF             >mirror_Ptr      defl    $
 168+ E4DF             >
 168+ E4DF E6 27       >                dw      Dict_Ptr + 2        // xt
 168+ E4E1             >Heap_Ptr        defl    $ - $E000           // save current HP
 168+ E4E1             >
 168+ E4E1             >Current_HP      defl  $ - $E000             // used to set HP once!
 168+ E4E1             >
 168+ E4E1             >//              ______________________________________________________________________
 168+ E4E1             >//              Dictionary part
 168+ E4E1             >
 168+ E4E1             >                org     Dict_Ptr
 168+ 27E4             >
 168+ 27E4 DF 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 168+ 27E6             >
 168+ 27E6             >TO_IN:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 168+ 27E6 CD 33 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 168+ 27E9             >
 168+ 27E9             >
 168+ 27E9             >                endif           ; ok        // for other definitions it "points" the correct handler
 168+ 27E9             >                // Use of "; ok" to suppress "warning[fwdref]"
 168+ 27E9             >
 168+ 27E9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 168+ 27E9 20          >                db      32
 169+ 27EA                              User_Def OUT        , "OUT"       , 34 // incremented when sending to output
 169+ 27EA             >                New_Def  OUT, "OUT", User_Ptr, is_normal
 169+ 27EA             >
 169+ 27EA             >Dict_Ptr        defl    $
 169+ 27EA             >
 169+ 27EA             >//              ______________________________________________________________________
 169+ 27EA             >//              Heap part
 169+ 27EA             >
 169+ 27EA             >
 169+ 27EA             >                org     (Heap_Ptr & $1FFF) + $E000
 169+ E4E1             >
 169+ E4E1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 169+ E4E1             >Latest_Definition defl  Heap_Ptr
 169+ E4E1             >
 169+ E4E1             >                // dummy db directives used to calculate length of namec
 169+ E4E1 4F 55 54    >                db      "OUT"
 169+ E4E4             >len_NFA         defl    $ - temp_NFA
 169+ E4E4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 169+ E4E1             >
 169+ E4E1 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 169+ E4E2 4F 55 54    >                db      "OUT"               // name string in 7-bit ascii, but
 169+ E4E5             >                org     $-1                 // alter last byte of Name just above to set
 169+ E4E4 D4          >                db      {b $} | END_BIT     // msb as name end
 169+ E4E5             >
 169+ E4E5 D9 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 169+ E4E7             >Prev_Ptr        defl    Heap_Ptr
 169+ E4E7             >
 169+ E4E7             >mirror_Ptr      defl    $
 169+ E4E7             >
 169+ E4E7 EC 27       >                dw      Dict_Ptr + 2        // xt
 169+ E4E9             >Heap_Ptr        defl    $ - $E000           // save current HP
 169+ E4E9             >
 169+ E4E9             >Current_HP      defl  $ - $E000             // used to set HP once!
 169+ E4E9             >
 169+ E4E9             >//              ______________________________________________________________________
 169+ E4E9             >//              Dictionary part
 169+ E4E9             >
 169+ E4E9             >                org     Dict_Ptr
 169+ 27EA             >
 169+ 27EA E7 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 169+ 27EC             >
 169+ 27EC             >OUT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 169+ 27EC CD 33 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 169+ 27EF             >
 169+ 27EF             >
 169+ 27EF             >                endif           ; ok        // for other definitions it "points" the correct handler
 169+ 27EF             >                // Use of "; ok" to suppress "warning[fwdref]"
 169+ 27EF             >
 169+ 27EF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 169+ 27EF 22          >                db      34
 170+ 27F0                              User_Def SCR        , "SCR"       , 36 // latest screen retreieved by LIST
 170+ 27F0             >                New_Def  SCR, "SCR", User_Ptr, is_normal
 170+ 27F0             >
 170+ 27F0             >Dict_Ptr        defl    $
 170+ 27F0             >
 170+ 27F0             >//              ______________________________________________________________________
 170+ 27F0             >//              Heap part
 170+ 27F0             >
 170+ 27F0             >
 170+ 27F0             >                org     (Heap_Ptr & $1FFF) + $E000
 170+ E4E9             >
 170+ E4E9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 170+ E4E9             >Latest_Definition defl  Heap_Ptr
 170+ E4E9             >
 170+ E4E9             >                // dummy db directives used to calculate length of namec
 170+ E4E9 53 43 52    >                db      "SCR"
 170+ E4EC             >len_NFA         defl    $ - temp_NFA
 170+ E4EC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 170+ E4E9             >
 170+ E4E9 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 170+ E4EA 53 43 52    >                db      "SCR"               // name string in 7-bit ascii, but
 170+ E4ED             >                org     $-1                 // alter last byte of Name just above to set
 170+ E4EC D2          >                db      {b $} | END_BIT     // msb as name end
 170+ E4ED             >
 170+ E4ED E1 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 170+ E4EF             >Prev_Ptr        defl    Heap_Ptr
 170+ E4EF             >
 170+ E4EF             >mirror_Ptr      defl    $
 170+ E4EF             >
 170+ E4EF F2 27       >                dw      Dict_Ptr + 2        // xt
 170+ E4F1             >Heap_Ptr        defl    $ - $E000           // save current HP
 170+ E4F1             >
 170+ E4F1             >Current_HP      defl  $ - $E000             // used to set HP once!
 170+ E4F1             >
 170+ E4F1             >//              ______________________________________________________________________
 170+ E4F1             >//              Dictionary part
 170+ E4F1             >
 170+ E4F1             >                org     Dict_Ptr
 170+ 27F0             >
 170+ 27F0 EF 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 170+ 27F2             >
 170+ 27F2             >SCR:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 170+ 27F2 CD 33 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 170+ 27F5             >
 170+ 27F5             >
 170+ 27F5             >                endif           ; ok        // for other definitions it "points" the correct handler
 170+ 27F5             >                // Use of "; ok" to suppress "warning[fwdref]"
 170+ 27F5             >
 170+ 27F5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 170+ 27F5 24          >                db      36
 171+ 27F6                              User_Def OFFSET     , "OFFSET"    , 38 //
 171+ 27F6             >                New_Def  OFFSET, "OFFSET", User_Ptr, is_normal
 171+ 27F6             >
 171+ 27F6             >Dict_Ptr        defl    $
 171+ 27F6             >
 171+ 27F6             >//              ______________________________________________________________________
 171+ 27F6             >//              Heap part
 171+ 27F6             >
 171+ 27F6             >
 171+ 27F6             >                org     (Heap_Ptr & $1FFF) + $E000
 171+ E4F1             >
 171+ E4F1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 171+ E4F1             >Latest_Definition defl  Heap_Ptr
 171+ E4F1             >
 171+ E4F1             >                // dummy db directives used to calculate length of namec
 171+ E4F1 4F 46 46 53 >                db      "OFFSET"
 171+ E4F5 45 54       >
 171+ E4F7             >len_NFA         defl    $ - temp_NFA
 171+ E4F7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 171+ E4F1             >
 171+ E4F1 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 171+ E4F2 4F 46 46 53 >                db      "OFFSET"               // name string in 7-bit ascii, but
 171+ E4F6 45 54       >
 171+ E4F8             >                org     $-1                 // alter last byte of Name just above to set
 171+ E4F7 D4          >                db      {b $} | END_BIT     // msb as name end
 171+ E4F8             >
 171+ E4F8 E9 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 171+ E4FA             >Prev_Ptr        defl    Heap_Ptr
 171+ E4FA             >
 171+ E4FA             >mirror_Ptr      defl    $
 171+ E4FA             >
 171+ E4FA F8 27       >                dw      Dict_Ptr + 2        // xt
 171+ E4FC             >Heap_Ptr        defl    $ - $E000           // save current HP
 171+ E4FC             >
 171+ E4FC             >Current_HP      defl  $ - $E000             // used to set HP once!
 171+ E4FC             >
 171+ E4FC             >//              ______________________________________________________________________
 171+ E4FC             >//              Dictionary part
 171+ E4FC             >
 171+ E4FC             >                org     Dict_Ptr
 171+ 27F6             >
 171+ 27F6 FA 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 171+ 27F8             >
 171+ 27F8             >OFFSET:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 171+ 27F8 CD 33 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 171+ 27FB             >
 171+ 27FB             >
 171+ 27FB             >                endif           ; ok        // for other definitions it "points" the correct handler
 171+ 27FB             >                // Use of "; ok" to suppress "warning[fwdref]"
 171+ 27FB             >
 171+ 27FB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 171+ 27FB 26          >                db      38
 172+ 27FC                              User_Def CONTEXT    , "CONTEXT"   , 40 // pointer to the vocabulary where search begins
 172+ 27FC             >                New_Def  CONTEXT, "CONTEXT", User_Ptr, is_normal
 172+ 27FC             >
 172+ 27FC             >Dict_Ptr        defl    $
 172+ 27FC             >
 172+ 27FC             >//              ______________________________________________________________________
 172+ 27FC             >//              Heap part
 172+ 27FC             >
 172+ 27FC             >
 172+ 27FC             >                org     (Heap_Ptr & $1FFF) + $E000
 172+ E4FC             >
 172+ E4FC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 172+ E4FC             >Latest_Definition defl  Heap_Ptr
 172+ E4FC             >
 172+ E4FC             >                // dummy db directives used to calculate length of namec
 172+ E4FC 43 4F 4E 54 >                db      "CONTEXT"
 172+ E500 45 58 54    >
 172+ E503             >len_NFA         defl    $ - temp_NFA
 172+ E503             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 172+ E4FC             >
 172+ E4FC 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 172+ E4FD 43 4F 4E 54 >                db      "CONTEXT"               // name string in 7-bit ascii, but
 172+ E501 45 58 54    >
 172+ E504             >                org     $-1                 // alter last byte of Name just above to set
 172+ E503 D4          >                db      {b $} | END_BIT     // msb as name end
 172+ E504             >
 172+ E504 F1 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 172+ E506             >Prev_Ptr        defl    Heap_Ptr
 172+ E506             >
 172+ E506             >mirror_Ptr      defl    $
 172+ E506             >
 172+ E506 FE 27       >                dw      Dict_Ptr + 2        // xt
 172+ E508             >Heap_Ptr        defl    $ - $E000           // save current HP
 172+ E508             >
 172+ E508             >Current_HP      defl  $ - $E000             // used to set HP once!
 172+ E508             >
 172+ E508             >//              ______________________________________________________________________
 172+ E508             >//              Dictionary part
 172+ E508             >
 172+ E508             >                org     Dict_Ptr
 172+ 27FC             >
 172+ 27FC 06 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 172+ 27FE             >
 172+ 27FE             >CONTEXT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 172+ 27FE CD 33 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 172+ 2801             >
 172+ 2801             >
 172+ 2801             >                endif           ; ok        // for other definitions it "points" the correct handler
 172+ 2801             >                // Use of "; ok" to suppress "warning[fwdref]"
 172+ 2801             >
 172+ 2801             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 172+ 2801 28          >                db      40
 173+ 2802                              User_Def CURRENT    , "CURRENT"   , 42 // pointer to the vocabulary where search continues
 173+ 2802             >                New_Def  CURRENT, "CURRENT", User_Ptr, is_normal
 173+ 2802             >
 173+ 2802             >Dict_Ptr        defl    $
 173+ 2802             >
 173+ 2802             >//              ______________________________________________________________________
 173+ 2802             >//              Heap part
 173+ 2802             >
 173+ 2802             >
 173+ 2802             >                org     (Heap_Ptr & $1FFF) + $E000
 173+ E508             >
 173+ E508             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 173+ E508             >Latest_Definition defl  Heap_Ptr
 173+ E508             >
 173+ E508             >                // dummy db directives used to calculate length of namec
 173+ E508 43 55 52 52 >                db      "CURRENT"
 173+ E50C 45 4E 54    >
 173+ E50F             >len_NFA         defl    $ - temp_NFA
 173+ E50F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 173+ E508             >
 173+ E508 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 173+ E509 43 55 52 52 >                db      "CURRENT"               // name string in 7-bit ascii, but
 173+ E50D 45 4E 54    >
 173+ E510             >                org     $-1                 // alter last byte of Name just above to set
 173+ E50F D4          >                db      {b $} | END_BIT     // msb as name end
 173+ E510             >
 173+ E510 FC 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 173+ E512             >Prev_Ptr        defl    Heap_Ptr
 173+ E512             >
 173+ E512             >mirror_Ptr      defl    $
 173+ E512             >
 173+ E512 04 28       >                dw      Dict_Ptr + 2        // xt
 173+ E514             >Heap_Ptr        defl    $ - $E000           // save current HP
 173+ E514             >
 173+ E514             >Current_HP      defl  $ - $E000             // used to set HP once!
 173+ E514             >
 173+ E514             >//              ______________________________________________________________________
 173+ E514             >//              Dictionary part
 173+ E514             >
 173+ E514             >                org     Dict_Ptr
 173+ 2802             >
 173+ 2802 12 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 173+ 2804             >
 173+ 2804             >CURRENT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 173+ 2804 CD 33 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 173+ 2807             >
 173+ 2807             >
 173+ 2807             >                endif           ; ok        // for other definitions it "points" the correct handler
 173+ 2807             >                // Use of "; ok" to suppress "warning[fwdref]"
 173+ 2807             >
 173+ 2807             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 173+ 2807 2A          >                db      42
 174+ 2808                              User_Def STATE      , "STATE"     , 44 // compilation status. 0 interpreting.
 174+ 2808             >                New_Def  STATE, "STATE", User_Ptr, is_normal
 174+ 2808             >
 174+ 2808             >Dict_Ptr        defl    $
 174+ 2808             >
 174+ 2808             >//              ______________________________________________________________________
 174+ 2808             >//              Heap part
 174+ 2808             >
 174+ 2808             >
 174+ 2808             >                org     (Heap_Ptr & $1FFF) + $E000
 174+ E514             >
 174+ E514             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 174+ E514             >Latest_Definition defl  Heap_Ptr
 174+ E514             >
 174+ E514             >                // dummy db directives used to calculate length of namec
 174+ E514 53 54 41 54 >                db      "STATE"
 174+ E518 45          >
 174+ E519             >len_NFA         defl    $ - temp_NFA
 174+ E519             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 174+ E514             >
 174+ E514 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 174+ E515 53 54 41 54 >                db      "STATE"               // name string in 7-bit ascii, but
 174+ E519 45          >
 174+ E51A             >                org     $-1                 // alter last byte of Name just above to set
 174+ E519 C5          >                db      {b $} | END_BIT     // msb as name end
 174+ E51A             >
 174+ E51A 08 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 174+ E51C             >Prev_Ptr        defl    Heap_Ptr
 174+ E51C             >
 174+ E51C             >mirror_Ptr      defl    $
 174+ E51C             >
 174+ E51C 0A 28       >                dw      Dict_Ptr + 2        // xt
 174+ E51E             >Heap_Ptr        defl    $ - $E000           // save current HP
 174+ E51E             >
 174+ E51E             >Current_HP      defl  $ - $E000             // used to set HP once!
 174+ E51E             >
 174+ E51E             >//              ______________________________________________________________________
 174+ E51E             >//              Dictionary part
 174+ E51E             >
 174+ E51E             >                org     Dict_Ptr
 174+ 2808             >
 174+ 2808 1C 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 174+ 280A             >
 174+ 280A             >STATE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 174+ 280A CD 33 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 174+ 280D             >
 174+ 280D             >
 174+ 280D             >                endif           ; ok        // for other definitions it "points" the correct handler
 174+ 280D             >                // Use of "; ok" to suppress "warning[fwdref]"
 174+ 280D             >
 174+ 280D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 174+ 280D 2C          >                db      44
 175+ 280E                              User_Def BASE       , "BASE"      , 46 //
 175+ 280E             >                New_Def  BASE, "BASE", User_Ptr, is_normal
 175+ 280E             >
 175+ 280E             >Dict_Ptr        defl    $
 175+ 280E             >
 175+ 280E             >//              ______________________________________________________________________
 175+ 280E             >//              Heap part
 175+ 280E             >
 175+ 280E             >
 175+ 280E             >                org     (Heap_Ptr & $1FFF) + $E000
 175+ E51E             >
 175+ E51E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 175+ E51E             >Latest_Definition defl  Heap_Ptr
 175+ E51E             >
 175+ E51E             >                // dummy db directives used to calculate length of namec
 175+ E51E 42 41 53 45 >                db      "BASE"
 175+ E522             >len_NFA         defl    $ - temp_NFA
 175+ E522             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 175+ E51E             >
 175+ E51E 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 175+ E51F 42 41 53 45 >                db      "BASE"               // name string in 7-bit ascii, but
 175+ E523             >                org     $-1                 // alter last byte of Name just above to set
 175+ E522 C5          >                db      {b $} | END_BIT     // msb as name end
 175+ E523             >
 175+ E523 14 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 175+ E525             >Prev_Ptr        defl    Heap_Ptr
 175+ E525             >
 175+ E525             >mirror_Ptr      defl    $
 175+ E525             >
 175+ E525 10 28       >                dw      Dict_Ptr + 2        // xt
 175+ E527             >Heap_Ptr        defl    $ - $E000           // save current HP
 175+ E527             >
 175+ E527             >Current_HP      defl  $ - $E000             // used to set HP once!
 175+ E527             >
 175+ E527             >//              ______________________________________________________________________
 175+ E527             >//              Dictionary part
 175+ E527             >
 175+ E527             >                org     Dict_Ptr
 175+ 280E             >
 175+ 280E 25 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 175+ 2810             >
 175+ 2810             >BASE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 175+ 2810 CD 33 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 175+ 2813             >
 175+ 2813             >
 175+ 2813             >                endif           ; ok        // for other definitions it "points" the correct handler
 175+ 2813             >                // Use of "; ok" to suppress "warning[fwdref]"
 175+ 2813             >
 175+ 2813             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 175+ 2813 2E          >                db      46
 176+ 2814                              User_Def DPL        , "DPL"       , 48 // number of digits after decimal point in conversion
 176+ 2814             >                New_Def  DPL, "DPL", User_Ptr, is_normal
 176+ 2814             >
 176+ 2814             >Dict_Ptr        defl    $
 176+ 2814             >
 176+ 2814             >//              ______________________________________________________________________
 176+ 2814             >//              Heap part
 176+ 2814             >
 176+ 2814             >
 176+ 2814             >                org     (Heap_Ptr & $1FFF) + $E000
 176+ E527             >
 176+ E527             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 176+ E527             >Latest_Definition defl  Heap_Ptr
 176+ E527             >
 176+ E527             >                // dummy db directives used to calculate length of namec
 176+ E527 44 50 4C    >                db      "DPL"
 176+ E52A             >len_NFA         defl    $ - temp_NFA
 176+ E52A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 176+ E527             >
 176+ E527 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 176+ E528 44 50 4C    >                db      "DPL"               // name string in 7-bit ascii, but
 176+ E52B             >                org     $-1                 // alter last byte of Name just above to set
 176+ E52A CC          >                db      {b $} | END_BIT     // msb as name end
 176+ E52B             >
 176+ E52B 1E 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 176+ E52D             >Prev_Ptr        defl    Heap_Ptr
 176+ E52D             >
 176+ E52D             >mirror_Ptr      defl    $
 176+ E52D             >
 176+ E52D 16 28       >                dw      Dict_Ptr + 2        // xt
 176+ E52F             >Heap_Ptr        defl    $ - $E000           // save current HP
 176+ E52F             >
 176+ E52F             >Current_HP      defl  $ - $E000             // used to set HP once!
 176+ E52F             >
 176+ E52F             >//              ______________________________________________________________________
 176+ E52F             >//              Dictionary part
 176+ E52F             >
 176+ E52F             >                org     Dict_Ptr
 176+ 2814             >
 176+ 2814 2D 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 176+ 2816             >
 176+ 2816             >DPL:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 176+ 2816 CD 33 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 176+ 2819             >
 176+ 2819             >
 176+ 2819             >                endif           ; ok        // for other definitions it "points" the correct handler
 176+ 2819             >                // Use of "; ok" to suppress "warning[fwdref]"
 176+ 2819             >
 176+ 2819             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 176+ 2819 30          >                db      48
 177+ 281A                              User_Def FLD        , "FLD"       , 50 // output field width
 177+ 281A             >                New_Def  FLD, "FLD", User_Ptr, is_normal
 177+ 281A             >
 177+ 281A             >Dict_Ptr        defl    $
 177+ 281A             >
 177+ 281A             >//              ______________________________________________________________________
 177+ 281A             >//              Heap part
 177+ 281A             >
 177+ 281A             >
 177+ 281A             >                org     (Heap_Ptr & $1FFF) + $E000
 177+ E52F             >
 177+ E52F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 177+ E52F             >Latest_Definition defl  Heap_Ptr
 177+ E52F             >
 177+ E52F             >                // dummy db directives used to calculate length of namec
 177+ E52F 46 4C 44    >                db      "FLD"
 177+ E532             >len_NFA         defl    $ - temp_NFA
 177+ E532             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 177+ E52F             >
 177+ E52F 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 177+ E530 46 4C 44    >                db      "FLD"               // name string in 7-bit ascii, but
 177+ E533             >                org     $-1                 // alter last byte of Name just above to set
 177+ E532 C4          >                db      {b $} | END_BIT     // msb as name end
 177+ E533             >
 177+ E533 27 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 177+ E535             >Prev_Ptr        defl    Heap_Ptr
 177+ E535             >
 177+ E535             >mirror_Ptr      defl    $
 177+ E535             >
 177+ E535 1C 28       >                dw      Dict_Ptr + 2        // xt
 177+ E537             >Heap_Ptr        defl    $ - $E000           // save current HP
 177+ E537             >
 177+ E537             >Current_HP      defl  $ - $E000             // used to set HP once!
 177+ E537             >
 177+ E537             >//              ______________________________________________________________________
 177+ E537             >//              Dictionary part
 177+ E537             >
 177+ E537             >                org     Dict_Ptr
 177+ 281A             >
 177+ 281A 35 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 177+ 281C             >
 177+ 281C             >FLD:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 177+ 281C CD 33 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 177+ 281F             >
 177+ 281F             >
 177+ 281F             >                endif           ; ok        // for other definitions it "points" the correct handler
 177+ 281F             >                // Use of "; ok" to suppress "warning[fwdref]"
 177+ 281F             >
 177+ 281F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 177+ 281F 32          >                db      50
 178+ 2820                              User_Def CSP        , "CSP"       , 52 // used to temporary store Stack-Pointer value
 178+ 2820             >                New_Def  CSP, "CSP", User_Ptr, is_normal
 178+ 2820             >
 178+ 2820             >Dict_Ptr        defl    $
 178+ 2820             >
 178+ 2820             >//              ______________________________________________________________________
 178+ 2820             >//              Heap part
 178+ 2820             >
 178+ 2820             >
 178+ 2820             >                org     (Heap_Ptr & $1FFF) + $E000
 178+ E537             >
 178+ E537             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 178+ E537             >Latest_Definition defl  Heap_Ptr
 178+ E537             >
 178+ E537             >                // dummy db directives used to calculate length of namec
 178+ E537 43 53 50    >                db      "CSP"
 178+ E53A             >len_NFA         defl    $ - temp_NFA
 178+ E53A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 178+ E537             >
 178+ E537 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 178+ E538 43 53 50    >                db      "CSP"               // name string in 7-bit ascii, but
 178+ E53B             >                org     $-1                 // alter last byte of Name just above to set
 178+ E53A D0          >                db      {b $} | END_BIT     // msb as name end
 178+ E53B             >
 178+ E53B 2F 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 178+ E53D             >Prev_Ptr        defl    Heap_Ptr
 178+ E53D             >
 178+ E53D             >mirror_Ptr      defl    $
 178+ E53D             >
 178+ E53D 22 28       >                dw      Dict_Ptr + 2        // xt
 178+ E53F             >Heap_Ptr        defl    $ - $E000           // save current HP
 178+ E53F             >
 178+ E53F             >Current_HP      defl  $ - $E000             // used to set HP once!
 178+ E53F             >
 178+ E53F             >//              ______________________________________________________________________
 178+ E53F             >//              Dictionary part
 178+ E53F             >
 178+ E53F             >                org     Dict_Ptr
 178+ 2820             >
 178+ 2820 3D 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 178+ 2822             >
 178+ 2822             >CSP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 178+ 2822 CD 33 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 178+ 2825             >
 178+ 2825             >
 178+ 2825             >                endif           ; ok        // for other definitions it "points" the correct handler
 178+ 2825             >                // Use of "; ok" to suppress "warning[fwdref]"
 178+ 2825             >
 178+ 2825             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 178+ 2825 34          >                db      52
 179+ 2826                              User_Def RSHARP     , "R#"        , 54 // location of editing cursor
 179+ 2826             >                New_Def  RSHARP, "R#", User_Ptr, is_normal
 179+ 2826             >
 179+ 2826             >Dict_Ptr        defl    $
 179+ 2826             >
 179+ 2826             >//              ______________________________________________________________________
 179+ 2826             >//              Heap part
 179+ 2826             >
 179+ 2826             >
 179+ 2826             >                org     (Heap_Ptr & $1FFF) + $E000
 179+ E53F             >
 179+ E53F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 179+ E53F             >Latest_Definition defl  Heap_Ptr
 179+ E53F             >
 179+ E53F             >                // dummy db directives used to calculate length of namec
 179+ E53F 52 23       >                db      "R#"
 179+ E541             >len_NFA         defl    $ - temp_NFA
 179+ E541             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 179+ E53F             >
 179+ E53F 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 179+ E540 52 23       >                db      "R#"               // name string in 7-bit ascii, but
 179+ E542             >                org     $-1                 // alter last byte of Name just above to set
 179+ E541 A3          >                db      {b $} | END_BIT     // msb as name end
 179+ E542             >
 179+ E542 37 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 179+ E544             >Prev_Ptr        defl    Heap_Ptr
 179+ E544             >
 179+ E544             >mirror_Ptr      defl    $
 179+ E544             >
 179+ E544 28 28       >                dw      Dict_Ptr + 2        // xt
 179+ E546             >Heap_Ptr        defl    $ - $E000           // save current HP
 179+ E546             >
 179+ E546             >Current_HP      defl  $ - $E000             // used to set HP once!
 179+ E546             >
 179+ E546             >//              ______________________________________________________________________
 179+ E546             >//              Dictionary part
 179+ E546             >
 179+ E546             >                org     Dict_Ptr
 179+ 2826             >
 179+ 2826 44 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 179+ 2828             >
 179+ 2828             >RSHARP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 179+ 2828 CD 33 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 179+ 282B             >
 179+ 282B             >
 179+ 282B             >                endif           ; ok        // for other definitions it "points" the correct handler
 179+ 282B             >                // Use of "; ok" to suppress "warning[fwdref]"
 179+ 282B             >
 179+ 282B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 179+ 282B 36          >                db      54
 180+ 282C                              User_Def HLD        , "HLD"       , 56 // last character during a number conversion output
 180+ 282C             >                New_Def  HLD, "HLD", User_Ptr, is_normal
 180+ 282C             >
 180+ 282C             >Dict_Ptr        defl    $
 180+ 282C             >
 180+ 282C             >//              ______________________________________________________________________
 180+ 282C             >//              Heap part
 180+ 282C             >
 180+ 282C             >
 180+ 282C             >                org     (Heap_Ptr & $1FFF) + $E000
 180+ E546             >
 180+ E546             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 180+ E546             >Latest_Definition defl  Heap_Ptr
 180+ E546             >
 180+ E546             >                // dummy db directives used to calculate length of namec
 180+ E546 48 4C 44    >                db      "HLD"
 180+ E549             >len_NFA         defl    $ - temp_NFA
 180+ E549             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 180+ E546             >
 180+ E546 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 180+ E547 48 4C 44    >                db      "HLD"               // name string in 7-bit ascii, but
 180+ E54A             >                org     $-1                 // alter last byte of Name just above to set
 180+ E549 C4          >                db      {b $} | END_BIT     // msb as name end
 180+ E54A             >
 180+ E54A 3F 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 180+ E54C             >Prev_Ptr        defl    Heap_Ptr
 180+ E54C             >
 180+ E54C             >mirror_Ptr      defl    $
 180+ E54C             >
 180+ E54C 2E 28       >                dw      Dict_Ptr + 2        // xt
 180+ E54E             >Heap_Ptr        defl    $ - $E000           // save current HP
 180+ E54E             >
 180+ E54E             >Current_HP      defl  $ - $E000             // used to set HP once!
 180+ E54E             >
 180+ E54E             >//              ______________________________________________________________________
 180+ E54E             >//              Dictionary part
 180+ E54E             >
 180+ E54E             >                org     Dict_Ptr
 180+ 282C             >
 180+ 282C 4C 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 180+ 282E             >
 180+ 282E             >HLD:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 180+ 282E CD 33 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 180+ 2831             >
 180+ 2831             >
 180+ 2831             >                endif           ; ok        // for other definitions it "points" the correct handler
 180+ 2831             >                // Use of "; ok" to suppress "warning[fwdref]"
 180+ 2831             >
 180+ 2831             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 180+ 2831 38          >                db      56
 181+ 2832                              User_Def USED       , "USED"      , 58 // address of last used block
 181+ 2832             >                New_Def  USED, "USED", User_Ptr, is_normal
 181+ 2832             >
 181+ 2832             >Dict_Ptr        defl    $
 181+ 2832             >
 181+ 2832             >//              ______________________________________________________________________
 181+ 2832             >//              Heap part
 181+ 2832             >
 181+ 2832             >
 181+ 2832             >                org     (Heap_Ptr & $1FFF) + $E000
 181+ E54E             >
 181+ E54E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 181+ E54E             >Latest_Definition defl  Heap_Ptr
 181+ E54E             >
 181+ E54E             >                // dummy db directives used to calculate length of namec
 181+ E54E 55 53 45 44 >                db      "USED"
 181+ E552             >len_NFA         defl    $ - temp_NFA
 181+ E552             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 181+ E54E             >
 181+ E54E 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 181+ E54F 55 53 45 44 >                db      "USED"               // name string in 7-bit ascii, but
 181+ E553             >                org     $-1                 // alter last byte of Name just above to set
 181+ E552 C4          >                db      {b $} | END_BIT     // msb as name end
 181+ E553             >
 181+ E553 46 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 181+ E555             >Prev_Ptr        defl    Heap_Ptr
 181+ E555             >
 181+ E555             >mirror_Ptr      defl    $
 181+ E555             >
 181+ E555 34 28       >                dw      Dict_Ptr + 2        // xt
 181+ E557             >Heap_Ptr        defl    $ - $E000           // save current HP
 181+ E557             >
 181+ E557             >Current_HP      defl  $ - $E000             // used to set HP once!
 181+ E557             >
 181+ E557             >//              ______________________________________________________________________
 181+ E557             >//              Dictionary part
 181+ E557             >
 181+ E557             >                org     Dict_Ptr
 181+ 2832             >
 181+ 2832 55 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 181+ 2834             >
 181+ 2834             >USED:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 181+ 2834 CD 33 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 181+ 2837             >
 181+ 2837             >
 181+ 2837             >                endif           ; ok        // for other definitions it "points" the correct handler
 181+ 2837             >                // Use of "; ok" to suppress "warning[fwdref]"
 181+ 2837             >
 181+ 2837             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 181+ 2837 3A          >                db      58
 182+ 2838                              User_Def PREV       , "PREV"      , 60 // address of previous used block
 182+ 2838             >                New_Def  PREV, "PREV", User_Ptr, is_normal
 182+ 2838             >
 182+ 2838             >Dict_Ptr        defl    $
 182+ 2838             >
 182+ 2838             >//              ______________________________________________________________________
 182+ 2838             >//              Heap part
 182+ 2838             >
 182+ 2838             >
 182+ 2838             >                org     (Heap_Ptr & $1FFF) + $E000
 182+ E557             >
 182+ E557             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 182+ E557             >Latest_Definition defl  Heap_Ptr
 182+ E557             >
 182+ E557             >                // dummy db directives used to calculate length of namec
 182+ E557 50 52 45 56 >                db      "PREV"
 182+ E55B             >len_NFA         defl    $ - temp_NFA
 182+ E55B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 182+ E557             >
 182+ E557 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 182+ E558 50 52 45 56 >                db      "PREV"               // name string in 7-bit ascii, but
 182+ E55C             >                org     $-1                 // alter last byte of Name just above to set
 182+ E55B D6          >                db      {b $} | END_BIT     // msb as name end
 182+ E55C             >
 182+ E55C 4E 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 182+ E55E             >Prev_Ptr        defl    Heap_Ptr
 182+ E55E             >
 182+ E55E             >mirror_Ptr      defl    $
 182+ E55E             >
 182+ E55E 3A 28       >                dw      Dict_Ptr + 2        // xt
 182+ E560             >Heap_Ptr        defl    $ - $E000           // save current HP
 182+ E560             >
 182+ E560             >Current_HP      defl  $ - $E000             // used to set HP once!
 182+ E560             >
 182+ E560             >//              ______________________________________________________________________
 182+ E560             >//              Dictionary part
 182+ E560             >
 182+ E560             >                org     Dict_Ptr
 182+ 2838             >
 182+ 2838 5E 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 182+ 283A             >
 182+ 283A             >PREV:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 182+ 283A CD 33 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 182+ 283D             >
 182+ 283D             >
 182+ 283D             >                endif           ; ok        // for other definitions it "points" the correct handler
 182+ 283D             >                // Use of "; ok" to suppress "warning[fwdref]"
 182+ 283D             >
 182+ 283D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 182+ 283D 3C          >                db      60
 183+ 283E                              User_Def LP         , "LP"        , 62 // line printer (not used)
 183+ 283E             >                New_Def  LP, "LP", User_Ptr, is_normal
 183+ 283E             >
 183+ 283E             >Dict_Ptr        defl    $
 183+ 283E             >
 183+ 283E             >//              ______________________________________________________________________
 183+ 283E             >//              Heap part
 183+ 283E             >
 183+ 283E             >
 183+ 283E             >                org     (Heap_Ptr & $1FFF) + $E000
 183+ E560             >
 183+ E560             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 183+ E560             >Latest_Definition defl  Heap_Ptr
 183+ E560             >
 183+ E560             >                // dummy db directives used to calculate length of namec
 183+ E560 4C 50       >                db      "LP"
 183+ E562             >len_NFA         defl    $ - temp_NFA
 183+ E562             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 183+ E560             >
 183+ E560 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 183+ E561 4C 50       >                db      "LP"               // name string in 7-bit ascii, but
 183+ E563             >                org     $-1                 // alter last byte of Name just above to set
 183+ E562 D0          >                db      {b $} | END_BIT     // msb as name end
 183+ E563             >
 183+ E563 57 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 183+ E565             >Prev_Ptr        defl    Heap_Ptr
 183+ E565             >
 183+ E565             >mirror_Ptr      defl    $
 183+ E565             >
 183+ E565 40 28       >                dw      Dict_Ptr + 2        // xt
 183+ E567             >Heap_Ptr        defl    $ - $E000           // save current HP
 183+ E567             >
 183+ E567             >Current_HP      defl  $ - $E000             // used to set HP once!
 183+ E567             >
 183+ E567             >//              ______________________________________________________________________
 183+ E567             >//              Dictionary part
 183+ E567             >
 183+ E567             >                org     Dict_Ptr
 183+ 283E             >
 183+ 283E 65 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 183+ 2840             >
 183+ 2840             >LP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 183+ 2840 CD 33 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 183+ 2843             >
 183+ 2843             >
 183+ 2843             >                endif           ; ok        // for other definitions it "points" the correct handler
 183+ 2843             >                // Use of "; ok" to suppress "warning[fwdref]"
 183+ 2843             >
 183+ 2843             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 183+ 2843 3E          >                db      62
 184+ 2844                              User_Def PLACE      , "PLACE"     , 64 // number of digits after decimal point in output
 184+ 2844             >                New_Def  PLACE, "PLACE", User_Ptr, is_normal
 184+ 2844             >
 184+ 2844             >Dict_Ptr        defl    $
 184+ 2844             >
 184+ 2844             >//              ______________________________________________________________________
 184+ 2844             >//              Heap part
 184+ 2844             >
 184+ 2844             >
 184+ 2844             >                org     (Heap_Ptr & $1FFF) + $E000
 184+ E567             >
 184+ E567             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 184+ E567             >Latest_Definition defl  Heap_Ptr
 184+ E567             >
 184+ E567             >                // dummy db directives used to calculate length of namec
 184+ E567 50 4C 41 43 >                db      "PLACE"
 184+ E56B 45          >
 184+ E56C             >len_NFA         defl    $ - temp_NFA
 184+ E56C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 184+ E567             >
 184+ E567 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 184+ E568 50 4C 41 43 >                db      "PLACE"               // name string in 7-bit ascii, but
 184+ E56C 45          >
 184+ E56D             >                org     $-1                 // alter last byte of Name just above to set
 184+ E56C C5          >                db      {b $} | END_BIT     // msb as name end
 184+ E56D             >
 184+ E56D 60 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 184+ E56F             >Prev_Ptr        defl    Heap_Ptr
 184+ E56F             >
 184+ E56F             >mirror_Ptr      defl    $
 184+ E56F             >
 184+ E56F 46 28       >                dw      Dict_Ptr + 2        // xt
 184+ E571             >Heap_Ptr        defl    $ - $E000           // save current HP
 184+ E571             >
 184+ E571             >Current_HP      defl  $ - $E000             // used to set HP once!
 184+ E571             >
 184+ E571             >//              ______________________________________________________________________
 184+ E571             >//              Dictionary part
 184+ E571             >
 184+ E571             >                org     Dict_Ptr
 184+ 2844             >
 184+ 2844 6F 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 184+ 2846             >
 184+ 2846             >PLACE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 184+ 2846 CD 33 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 184+ 2849             >
 184+ 2849             >
 184+ 2849             >                endif           ; ok        // for other definitions it "points" the correct handler
 184+ 2849             >                // Use of "; ok" to suppress "warning[fwdref]"
 184+ 2849             >
 184+ 2849             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 184+ 2849 40          >                db      64
 185+ 284A                              User_Def SOURCE_ID  , "SOURCE-ID" , 66 // data-stream number in INCLUDE and LOAD-
 185+ 284A             >                New_Def  SOURCE_ID, "SOURCE-ID", User_Ptr, is_normal
 185+ 284A             >
 185+ 284A             >Dict_Ptr        defl    $
 185+ 284A             >
 185+ 284A             >//              ______________________________________________________________________
 185+ 284A             >//              Heap part
 185+ 284A             >
 185+ 284A             >
 185+ 284A             >                org     (Heap_Ptr & $1FFF) + $E000
 185+ E571             >
 185+ E571             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 185+ E571             >Latest_Definition defl  Heap_Ptr
 185+ E571             >
 185+ E571             >                // dummy db directives used to calculate length of namec
 185+ E571 53 4F 55 52 >                db      "SOURCE-ID"
 185+ E575 43 45 2D 49 >
 185+ E579 44          >
 185+ E57A             >len_NFA         defl    $ - temp_NFA
 185+ E57A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 185+ E571             >
 185+ E571 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 185+ E572 53 4F 55 52 >                db      "SOURCE-ID"               // name string in 7-bit ascii, but
 185+ E576 43 45 2D 49 >
 185+ E57A 44          >
 185+ E57B             >                org     $-1                 // alter last byte of Name just above to set
 185+ E57A C4          >                db      {b $} | END_BIT     // msb as name end
 185+ E57B             >
 185+ E57B 67 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 185+ E57D             >Prev_Ptr        defl    Heap_Ptr
 185+ E57D             >
 185+ E57D             >mirror_Ptr      defl    $
 185+ E57D             >
 185+ E57D 4C 28       >                dw      Dict_Ptr + 2        // xt
 185+ E57F             >Heap_Ptr        defl    $ - $E000           // save current HP
 185+ E57F             >
 185+ E57F             >Current_HP      defl  $ - $E000             // used to set HP once!
 185+ E57F             >
 185+ E57F             >//              ______________________________________________________________________
 185+ E57F             >//              Dictionary part
 185+ E57F             >
 185+ E57F             >                org     Dict_Ptr
 185+ 284A             >
 185+ 284A 7D 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 185+ 284C             >
 185+ 284C             >SOURCE_ID:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 185+ 284C CD 33 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 185+ 284F             >
 185+ 284F             >
 185+ 284F             >                endif           ; ok        // for other definitions it "points" the correct handler
 185+ 284F             >                // Use of "; ok" to suppress "warning[fwdref]"
 185+ 284F             >
 185+ 284F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 185+ 284F 42          >                db      66
 186+ 2850                              User_Def SPAN       , "SPAN"      , 68 // number of character of last EXPECT
 186+ 2850             >                New_Def  SPAN, "SPAN", User_Ptr, is_normal
 186+ 2850             >
 186+ 2850             >Dict_Ptr        defl    $
 186+ 2850             >
 186+ 2850             >//              ______________________________________________________________________
 186+ 2850             >//              Heap part
 186+ 2850             >
 186+ 2850             >
 186+ 2850             >                org     (Heap_Ptr & $1FFF) + $E000
 186+ E57F             >
 186+ E57F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 186+ E57F             >Latest_Definition defl  Heap_Ptr
 186+ E57F             >
 186+ E57F             >                // dummy db directives used to calculate length of namec
 186+ E57F 53 50 41 4E >                db      "SPAN"
 186+ E583             >len_NFA         defl    $ - temp_NFA
 186+ E583             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 186+ E57F             >
 186+ E57F 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 186+ E580 53 50 41 4E >                db      "SPAN"               // name string in 7-bit ascii, but
 186+ E584             >                org     $-1                 // alter last byte of Name just above to set
 186+ E583 CE          >                db      {b $} | END_BIT     // msb as name end
 186+ E584             >
 186+ E584 71 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 186+ E586             >Prev_Ptr        defl    Heap_Ptr
 186+ E586             >
 186+ E586             >mirror_Ptr      defl    $
 186+ E586             >
 186+ E586 52 28       >                dw      Dict_Ptr + 2        // xt
 186+ E588             >Heap_Ptr        defl    $ - $E000           // save current HP
 186+ E588             >
 186+ E588             >Current_HP      defl  $ - $E000             // used to set HP once!
 186+ E588             >
 186+ E588             >//              ______________________________________________________________________
 186+ E588             >//              Dictionary part
 186+ E588             >
 186+ E588             >                org     Dict_Ptr
 186+ 2850             >
 186+ 2850 86 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 186+ 2852             >
 186+ 2852             >SPAN:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 186+ 2852 CD 33 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 186+ 2855             >
 186+ 2855             >
 186+ 2855             >                endif           ; ok        // for other definitions it "points" the correct handler
 186+ 2855             >                // Use of "; ok" to suppress "warning[fwdref]"
 186+ 2855             >
 186+ 2855             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 186+ 2855 44          >                db      68
 187+ 2856                              User_Def HANDLER    , "HANDLER"   , 70 // Used by THROW-CATCH
 187+ 2856             >                New_Def  HANDLER, "HANDLER", User_Ptr, is_normal
 187+ 2856             >
 187+ 2856             >Dict_Ptr        defl    $
 187+ 2856             >
 187+ 2856             >//              ______________________________________________________________________
 187+ 2856             >//              Heap part
 187+ 2856             >
 187+ 2856             >
 187+ 2856             >                org     (Heap_Ptr & $1FFF) + $E000
 187+ E588             >
 187+ E588             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 187+ E588             >Latest_Definition defl  Heap_Ptr
 187+ E588             >
 187+ E588             >                // dummy db directives used to calculate length of namec
 187+ E588 48 41 4E 44 >                db      "HANDLER"
 187+ E58C 4C 45 52    >
 187+ E58F             >len_NFA         defl    $ - temp_NFA
 187+ E58F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 187+ E588             >
 187+ E588 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 187+ E589 48 41 4E 44 >                db      "HANDLER"               // name string in 7-bit ascii, but
 187+ E58D 4C 45 52    >
 187+ E590             >                org     $-1                 // alter last byte of Name just above to set
 187+ E58F D2          >                db      {b $} | END_BIT     // msb as name end
 187+ E590             >
 187+ E590 7F 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 187+ E592             >Prev_Ptr        defl    Heap_Ptr
 187+ E592             >
 187+ E592             >mirror_Ptr      defl    $
 187+ E592             >
 187+ E592 58 28       >                dw      Dict_Ptr + 2        // xt
 187+ E594             >Heap_Ptr        defl    $ - $E000           // save current HP
 187+ E594             >
 187+ E594             >Current_HP      defl  $ - $E000             // used to set HP once!
 187+ E594             >
 187+ E594             >//              ______________________________________________________________________
 187+ E594             >//              Dictionary part
 187+ E594             >
 187+ E594             >                org     Dict_Ptr
 187+ 2856             >
 187+ 2856 92 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 187+ 2858             >
 187+ 2858             >HANDLER:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 187+ 2858 CD 33 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 187+ 285B             >
 187+ 285B             >
 187+ 285B             >                endif           ; ok        // for other definitions it "points" the correct handler
 187+ 285B             >                // Use of "; ok" to suppress "warning[fwdref]"
 187+ 285B             >
 187+ 285B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 187+ 285B 46          >                db      70
 188+ 285C                              User_Def EXP        , "EXP"       , 72 // keeps the exponent in number conversion
 188+ 285C             >                New_Def  EXP, "EXP", User_Ptr, is_normal
 188+ 285C             >
 188+ 285C             >Dict_Ptr        defl    $
 188+ 285C             >
 188+ 285C             >//              ______________________________________________________________________
 188+ 285C             >//              Heap part
 188+ 285C             >
 188+ 285C             >
 188+ 285C             >                org     (Heap_Ptr & $1FFF) + $E000
 188+ E594             >
 188+ E594             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 188+ E594             >Latest_Definition defl  Heap_Ptr
 188+ E594             >
 188+ E594             >                // dummy db directives used to calculate length of namec
 188+ E594 45 58 50    >                db      "EXP"
 188+ E597             >len_NFA         defl    $ - temp_NFA
 188+ E597             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 188+ E594             >
 188+ E594 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 188+ E595 45 58 50    >                db      "EXP"               // name string in 7-bit ascii, but
 188+ E598             >                org     $-1                 // alter last byte of Name just above to set
 188+ E597 D0          >                db      {b $} | END_BIT     // msb as name end
 188+ E598             >
 188+ E598 88 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 188+ E59A             >Prev_Ptr        defl    Heap_Ptr
 188+ E59A             >
 188+ E59A             >mirror_Ptr      defl    $
 188+ E59A             >
 188+ E59A 5E 28       >                dw      Dict_Ptr + 2        // xt
 188+ E59C             >Heap_Ptr        defl    $ - $E000           // save current HP
 188+ E59C             >
 188+ E59C             >Current_HP      defl  $ - $E000             // used to set HP once!
 188+ E59C             >
 188+ E59C             >//              ______________________________________________________________________
 188+ E59C             >//              Dictionary part
 188+ E59C             >
 188+ E59C             >                org     Dict_Ptr
 188+ 285C             >
 188+ 285C 9A 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 188+ 285E             >
 188+ 285E             >EXP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 188+ 285E CD 33 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 188+ 2861             >
 188+ 2861             >
 188+ 2861             >                endif           ; ok        // for other definitions it "points" the correct handler
 188+ 2861             >                // Use of "; ok" to suppress "warning[fwdref]"
 188+ 2861             >
 188+ 2861             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 188+ 2861 48          >                db      72
 189+ 2862
 190+ 2862              //  ______________________________________________________________________
 191+ 2862              //
 192+ 2862              // here         -- a
 193+ 2862                              Colon_Def HERE, "HERE", is_normal
 193+ 2862             >                New_Def  HERE, "HERE", Enter_Ptr, is_normal ; ok
 193+ 2862             >
 193+ 2862             >Dict_Ptr        defl    $
 193+ 2862             >
 193+ 2862             >//              ______________________________________________________________________
 193+ 2862             >//              Heap part
 193+ 2862             >
 193+ 2862             >
 193+ 2862             >                org     (Heap_Ptr & $1FFF) + $E000
 193+ E59C             >
 193+ E59C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 193+ E59C             >Latest_Definition defl  Heap_Ptr
 193+ E59C             >
 193+ E59C             >                // dummy db directives used to calculate length of namec
 193+ E59C 48 45 52 45 >                db      "HERE"
 193+ E5A0             >len_NFA         defl    $ - temp_NFA
 193+ E5A0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 193+ E59C             >
 193+ E59C 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 193+ E59D 48 45 52 45 >                db      "HERE"               // name string in 7-bit ascii, but
 193+ E5A1             >                org     $-1                 // alter last byte of Name just above to set
 193+ E5A0 C5          >                db      {b $} | END_BIT     // msb as name end
 193+ E5A1             >
 193+ E5A1 94 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 193+ E5A3             >Prev_Ptr        defl    Heap_Ptr
 193+ E5A3             >
 193+ E5A3             >mirror_Ptr      defl    $
 193+ E5A3             >
 193+ E5A3 64 28       >                dw      Dict_Ptr + 2        // xt
 193+ E5A5             >Heap_Ptr        defl    $ - $E000           // save current HP
 193+ E5A5             >
 193+ E5A5             >Current_HP      defl  $ - $E000             // used to set HP once!
 193+ E5A5             >
 193+ E5A5             >//              ______________________________________________________________________
 193+ E5A5             >//              Dictionary part
 193+ E5A5             >
 193+ E5A5             >                org     Dict_Ptr
 193+ 2862             >
 193+ 2862 A3 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 193+ 2864             >
 193+ 2864             >HERE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 193+ 2864 CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 193+ 2867             >
 193+ 2867             >
 193+ 2867             >                endif           ; ok        // for other definitions it "points" the correct handler
 193+ 2867             >                // Use of "; ok" to suppress "warning[fwdref]"
 193+ 2867             >
 193+ 2867             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 194+ 2867 BC 27 49 26                  dw      DP, FETCH               // dp @
 195+ 286B 09 25                        dw      EXIT                    // ;
 196+ 286D
 197+ 286D              //  ______________________________________________________________________
 198+ 286D              //
 199+ 286D              // allot        n --
 200+ 286D                              Colon_Def ALLOT, "ALLOT", is_normal
 200+ 286D             >                New_Def  ALLOT, "ALLOT", Enter_Ptr, is_normal ; ok
 200+ 286D             >
 200+ 286D             >Dict_Ptr        defl    $
 200+ 286D             >
 200+ 286D             >//              ______________________________________________________________________
 200+ 286D             >//              Heap part
 200+ 286D             >
 200+ 286D             >
 200+ 286D             >                org     (Heap_Ptr & $1FFF) + $E000
 200+ E5A5             >
 200+ E5A5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 200+ E5A5             >Latest_Definition defl  Heap_Ptr
 200+ E5A5             >
 200+ E5A5             >                // dummy db directives used to calculate length of namec
 200+ E5A5 41 4C 4C 4F >                db      "ALLOT"
 200+ E5A9 54          >
 200+ E5AA             >len_NFA         defl    $ - temp_NFA
 200+ E5AA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 200+ E5A5             >
 200+ E5A5 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 200+ E5A6 41 4C 4C 4F >                db      "ALLOT"               // name string in 7-bit ascii, but
 200+ E5AA 54          >
 200+ E5AB             >                org     $-1                 // alter last byte of Name just above to set
 200+ E5AA D4          >                db      {b $} | END_BIT     // msb as name end
 200+ E5AB             >
 200+ E5AB 9C 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 200+ E5AD             >Prev_Ptr        defl    Heap_Ptr
 200+ E5AD             >
 200+ E5AD             >mirror_Ptr      defl    $
 200+ E5AD             >
 200+ E5AD 6F 28       >                dw      Dict_Ptr + 2        // xt
 200+ E5AF             >Heap_Ptr        defl    $ - $E000           // save current HP
 200+ E5AF             >
 200+ E5AF             >Current_HP      defl  $ - $E000             // used to set HP once!
 200+ E5AF             >
 200+ E5AF             >//              ______________________________________________________________________
 200+ E5AF             >//              Dictionary part
 200+ E5AF             >
 200+ E5AF             >                org     Dict_Ptr
 200+ 286D             >
 200+ 286D AD 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 200+ 286F             >
 200+ 286F             >ALLOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 200+ 286F CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 200+ 2872             >
 200+ 2872             >
 200+ 2872             >                endif           ; ok        // for other definitions it "points" the correct handler
 200+ 2872             >                // Use of "; ok" to suppress "warning[fwdref]"
 200+ 2872             >
 200+ 2872             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 201+ 2872 BC 27 31 26                  dw      DP,  PLUSSTORE          // dp +!
 202+ 2876 09 25                        dw      EXIT                    // ;
 203+ 2878
 204+ 2878              //  ______________________________________________________________________
 205+ 2878              //
 206+ 2878              // comma        n --
 207+ 2878                              Colon_Def COMMA, ",", is_normal
 207+ 2878             >                New_Def  COMMA, ",", Enter_Ptr, is_normal ; ok
 207+ 2878             >
 207+ 2878             >Dict_Ptr        defl    $
 207+ 2878             >
 207+ 2878             >//              ______________________________________________________________________
 207+ 2878             >//              Heap part
 207+ 2878             >
 207+ 2878             >
 207+ 2878             >                org     (Heap_Ptr & $1FFF) + $E000
 207+ E5AF             >
 207+ E5AF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 207+ E5AF             >Latest_Definition defl  Heap_Ptr
 207+ E5AF             >
 207+ E5AF             >                // dummy db directives used to calculate length of namec
 207+ E5AF 2C          >                db      ","
 207+ E5B0             >len_NFA         defl    $ - temp_NFA
 207+ E5B0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 207+ E5AF             >
 207+ E5AF 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 207+ E5B0 2C          >                db      ","               // name string in 7-bit ascii, but
 207+ E5B1             >                org     $-1                 // alter last byte of Name just above to set
 207+ E5B0 AC          >                db      {b $} | END_BIT     // msb as name end
 207+ E5B1             >
 207+ E5B1 A5 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 207+ E5B3             >Prev_Ptr        defl    Heap_Ptr
 207+ E5B3             >
 207+ E5B3             >mirror_Ptr      defl    $
 207+ E5B3             >
 207+ E5B3 7A 28       >                dw      Dict_Ptr + 2        // xt
 207+ E5B5             >Heap_Ptr        defl    $ - $E000           // save current HP
 207+ E5B5             >
 207+ E5B5             >Current_HP      defl  $ - $E000             // used to set HP once!
 207+ E5B5             >
 207+ E5B5             >//              ______________________________________________________________________
 207+ E5B5             >//              Dictionary part
 207+ E5B5             >
 207+ E5B5             >                org     Dict_Ptr
 207+ 2878             >
 207+ 2878 B3 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 207+ 287A             >
 207+ 287A             >COMMA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 207+ 287A CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 207+ 287D             >
 207+ 287D             >
 207+ 287D             >                endif           ; ok        // for other definitions it "points" the correct handler
 207+ 287D             >                // Use of "; ok" to suppress "warning[fwdref]"
 207+ 287D             >
 207+ 287D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 208+ 287D 64 28 53 26                  dw      HERE, STORE             // here !
 209+ 2881 4D 27 6F 28                  dw      TWO, ALLOT              // 2 allot
 210+ 2885 09 25                        dw      EXIT                    // ;
 211+ 2887
 212+ 2887              //  ______________________________________________________________________
 213+ 2887              //
 214+ 2887              // ccomma       c --
 215+ 2887                              Colon_Def CCOMMA, "C,", is_normal
 215+ 2887             >                New_Def  CCOMMA, "C,", Enter_Ptr, is_normal ; ok
 215+ 2887             >
 215+ 2887             >Dict_Ptr        defl    $
 215+ 2887             >
 215+ 2887             >//              ______________________________________________________________________
 215+ 2887             >//              Heap part
 215+ 2887             >
 215+ 2887             >
 215+ 2887             >                org     (Heap_Ptr & $1FFF) + $E000
 215+ E5B5             >
 215+ E5B5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 215+ E5B5             >Latest_Definition defl  Heap_Ptr
 215+ E5B5             >
 215+ E5B5             >                // dummy db directives used to calculate length of namec
 215+ E5B5 43 2C       >                db      "C,"
 215+ E5B7             >len_NFA         defl    $ - temp_NFA
 215+ E5B7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 215+ E5B5             >
 215+ E5B5 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 215+ E5B6 43 2C       >                db      "C,"               // name string in 7-bit ascii, but
 215+ E5B8             >                org     $-1                 // alter last byte of Name just above to set
 215+ E5B7 AC          >                db      {b $} | END_BIT     // msb as name end
 215+ E5B8             >
 215+ E5B8 AF 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 215+ E5BA             >Prev_Ptr        defl    Heap_Ptr
 215+ E5BA             >
 215+ E5BA             >mirror_Ptr      defl    $
 215+ E5BA             >
 215+ E5BA 89 28       >                dw      Dict_Ptr + 2        // xt
 215+ E5BC             >Heap_Ptr        defl    $ - $E000           // save current HP
 215+ E5BC             >
 215+ E5BC             >Current_HP      defl  $ - $E000             // used to set HP once!
 215+ E5BC             >
 215+ E5BC             >//              ______________________________________________________________________
 215+ E5BC             >//              Dictionary part
 215+ E5BC             >
 215+ E5BC             >                org     Dict_Ptr
 215+ 2887             >
 215+ 2887 BA 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 215+ 2889             >
 215+ 2889             >CCOMMA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 215+ 2889 CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 215+ 288C             >
 215+ 288C             >
 215+ 288C             >                endif           ; ok        // for other definitions it "points" the correct handler
 215+ 288C             >                // Use of "; ok" to suppress "warning[fwdref]"
 215+ 288C             >
 215+ 288C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 216+ 288C 64 28 67 26                  dw      HERE, CSTORE            // here c!
 217+ 2890 46 27 6F 28                  dw      ONE, ALLOT              // 1 allot
 218+ 2894 09 25                        dw      EXIT                    // ;
 219+ 2896
 220+ 2896              //  ______________________________________________________________________
 221+ 2896              //
 222+ 2896              // hpcomma      n --
 223+ 2896              //              Colon_Def HCOMMA, "HP,", is_normal
 224+ 2896              //              dw      HP_FETCH, FAR, STORE    // HP@ FAR !
 225+ 2896              //              dw      TWO, HP, PLUSSTORE      // 2 HP +!
 226+ 2896              //              dw      EXIT                    // ;
 227+ 2896
 228+ 2896              //  ______________________________________________________________________
 229+ 2896              //
 230+ 2896              // s>d          n -- d
 231+ 2896              // converts a single precision integer in a double precision
 232+ 2896                              New_Def S_TO_D, "S>D", is_code, is_normal
 232+ 2896             >
 232+ 2896             >Dict_Ptr        defl    $
 232+ 2896             >
 232+ 2896             >//              ______________________________________________________________________
 232+ 2896             >//              Heap part
 232+ 2896             >
 232+ 2896             >
 232+ 2896             >                org     (Heap_Ptr & $1FFF) + $E000
 232+ E5BC             >
 232+ E5BC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 232+ E5BC             >Latest_Definition defl  Heap_Ptr
 232+ E5BC             >
 232+ E5BC             >                // dummy db directives used to calculate length of namec
 232+ E5BC 53 3E 44    >                db      "S>D"
 232+ E5BF             >len_NFA         defl    $ - temp_NFA
 232+ E5BF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 232+ E5BC             >
 232+ E5BC 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 232+ E5BD 53 3E 44    >                db      "S>D"               // name string in 7-bit ascii, but
 232+ E5C0             >                org     $-1                 // alter last byte of Name just above to set
 232+ E5BF C4          >                db      {b $} | END_BIT     // msb as name end
 232+ E5C0             >
 232+ E5C0 B5 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 232+ E5C2             >Prev_Ptr        defl    Heap_Ptr
 232+ E5C2             >
 232+ E5C2             >mirror_Ptr      defl    $
 232+ E5C2             >
 232+ E5C2 98 28       >                dw      Dict_Ptr + 2        // xt
 232+ E5C4             >Heap_Ptr        defl    $ - $E000           // save current HP
 232+ E5C4             >
 232+ E5C4             >Current_HP      defl  $ - $E000             // used to set HP once!
 232+ E5C4             >
 232+ E5C4             >//              ______________________________________________________________________
 232+ E5C4             >//              Dictionary part
 232+ E5C4             >
 232+ E5C4             >                org     Dict_Ptr
 232+ 2896             >
 232+ 2896 C2 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 232+ 2898             >
 232+ 2898             >S_TO_D:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 232+ 2898 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 232+ 2898 ~           >
 232+ 2898 ~           >
 232+ 2898             >                endif           ; ok        // for other definitions it "points" the correct handler
 232+ 2898             >                // Use of "; ok" to suppress "warning[fwdref]"
 232+ 2898             >
 232+ 2898             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 233+ 2898 E1                           pop     hl
 234+ 2899 7C                           ld      a, h
 235+ 289A E5                           push    hl
 236+ 289B 17                           rla
 237+ 289C ED 62                        sbc     hl, hl
 238+ 289E E5                           push    hl
 239+ 289F                              next
 239+ 289F DD E9       >                jp      (ix)
 240+ 28A1
 241+ 28A1              //  ______________________________________________________________________
 242+ 28A1              //
 243+ 28A1              // -            n1 n2 -- n3
 244+ 28A1              // subtraction
 245+ 28A1                              New_Def SUBTRACT, "-", is_code, is_normal
 245+ 28A1             >
 245+ 28A1             >Dict_Ptr        defl    $
 245+ 28A1             >
 245+ 28A1             >//              ______________________________________________________________________
 245+ 28A1             >//              Heap part
 245+ 28A1             >
 245+ 28A1             >
 245+ 28A1             >                org     (Heap_Ptr & $1FFF) + $E000
 245+ E5C4             >
 245+ E5C4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 245+ E5C4             >Latest_Definition defl  Heap_Ptr
 245+ E5C4             >
 245+ E5C4             >                // dummy db directives used to calculate length of namec
 245+ E5C4 2D          >                db      "-"
 245+ E5C5             >len_NFA         defl    $ - temp_NFA
 245+ E5C5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 245+ E5C4             >
 245+ E5C4 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 245+ E5C5 2D          >                db      "-"               // name string in 7-bit ascii, but
 245+ E5C6             >                org     $-1                 // alter last byte of Name just above to set
 245+ E5C5 AD          >                db      {b $} | END_BIT     // msb as name end
 245+ E5C6             >
 245+ E5C6 BC 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 245+ E5C8             >Prev_Ptr        defl    Heap_Ptr
 245+ E5C8             >
 245+ E5C8             >mirror_Ptr      defl    $
 245+ E5C8             >
 245+ E5C8 A3 28       >                dw      Dict_Ptr + 2        // xt
 245+ E5CA             >Heap_Ptr        defl    $ - $E000           // save current HP
 245+ E5CA             >
 245+ E5CA             >Current_HP      defl  $ - $E000             // used to set HP once!
 245+ E5CA             >
 245+ E5CA             >//              ______________________________________________________________________
 245+ E5CA             >//              Dictionary part
 245+ E5CA             >
 245+ E5CA             >                org     Dict_Ptr
 245+ 28A1             >
 245+ 28A1 C8 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 245+ 28A3             >
 245+ 28A3             >SUBTRACT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 245+ 28A3 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 245+ 28A3 ~           >
 245+ 28A3 ~           >
 245+ 28A3             >                endif           ; ok        // for other definitions it "points" the correct handler
 245+ 28A3             >                // Use of "; ok" to suppress "warning[fwdref]"
 245+ 28A3             >
 245+ 28A3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 246+ 28A3 D9                           exx
 247+ 28A4 D1                           pop     de
 248+ 28A5 E1                           pop     hl
 249+ 28A6 A7                           and     a
 250+ 28A7 ED 52                        sbc     hl, de
 251+ 28A9 E5                           push    hl
 252+ 28AA D9                           exx
 253+ 28AB                              next
 253+ 28AB DD E9       >                jp      (ix)
 254+ 28AD
 255+ 28AD
 256+ 28AD              //  ______________________________________________________________________
 257+ 28AD              //
 258+ 28AD              // =            n1 n2 -- n3
 259+ 28AD              // equals
 260+ 28AD                              Colon_Def EQUALS, "=", is_normal
 260+ 28AD             >                New_Def  EQUALS, "=", Enter_Ptr, is_normal ; ok
 260+ 28AD             >
 260+ 28AD             >Dict_Ptr        defl    $
 260+ 28AD             >
 260+ 28AD             >//              ______________________________________________________________________
 260+ 28AD             >//              Heap part
 260+ 28AD             >
 260+ 28AD             >
 260+ 28AD             >                org     (Heap_Ptr & $1FFF) + $E000
 260+ E5CA             >
 260+ E5CA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 260+ E5CA             >Latest_Definition defl  Heap_Ptr
 260+ E5CA             >
 260+ E5CA             >                // dummy db directives used to calculate length of namec
 260+ E5CA 3D          >                db      "="
 260+ E5CB             >len_NFA         defl    $ - temp_NFA
 260+ E5CB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 260+ E5CA             >
 260+ E5CA 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 260+ E5CB 3D          >                db      "="               // name string in 7-bit ascii, but
 260+ E5CC             >                org     $-1                 // alter last byte of Name just above to set
 260+ E5CB BD          >                db      {b $} | END_BIT     // msb as name end
 260+ E5CC             >
 260+ E5CC C4 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 260+ E5CE             >Prev_Ptr        defl    Heap_Ptr
 260+ E5CE             >
 260+ E5CE             >mirror_Ptr      defl    $
 260+ E5CE             >
 260+ E5CE AF 28       >                dw      Dict_Ptr + 2        // xt
 260+ E5D0             >Heap_Ptr        defl    $ - $E000           // save current HP
 260+ E5D0             >
 260+ E5D0             >Current_HP      defl  $ - $E000             // used to set HP once!
 260+ E5D0             >
 260+ E5D0             >//              ______________________________________________________________________
 260+ E5D0             >//              Dictionary part
 260+ E5D0             >
 260+ E5D0             >                org     Dict_Ptr
 260+ 28AD             >
 260+ 28AD CE 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 260+ 28AF             >
 260+ 28AF             >EQUALS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 260+ 28AF CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 260+ 28B2             >
 260+ 28B2             >
 260+ 28B2             >                endif           ; ok        // for other definitions it "points" the correct handler
 260+ 28B2             >                // Use of "; ok" to suppress "warning[fwdref]"
 260+ 28B2             >
 260+ 28B2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 261+ 28B2 A3 28 2E 25                  dw      SUBTRACT, ZEQUAL        // - 0=
 262+ 28B6 09 25                        dw      EXIT                    // ;
 263+ 28B8
 264+ 28B8              //  ______________________________________________________________________
 265+ 28B8              //
 266+ 28B8              // u<           u1 u2 -- u3
 267+ 28B8              // unsigned less-than
 268+ 28B8                              New_Def ULESS, "U<", is_code, is_normal
 268+ 28B8             >
 268+ 28B8             >Dict_Ptr        defl    $
 268+ 28B8             >
 268+ 28B8             >//              ______________________________________________________________________
 268+ 28B8             >//              Heap part
 268+ 28B8             >
 268+ 28B8             >
 268+ 28B8             >                org     (Heap_Ptr & $1FFF) + $E000
 268+ E5D0             >
 268+ E5D0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 268+ E5D0             >Latest_Definition defl  Heap_Ptr
 268+ E5D0             >
 268+ E5D0             >                // dummy db directives used to calculate length of namec
 268+ E5D0 55 3C       >                db      "U<"
 268+ E5D2             >len_NFA         defl    $ - temp_NFA
 268+ E5D2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 268+ E5D0             >
 268+ E5D0 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 268+ E5D1 55 3C       >                db      "U<"               // name string in 7-bit ascii, but
 268+ E5D3             >                org     $-1                 // alter last byte of Name just above to set
 268+ E5D2 BC          >                db      {b $} | END_BIT     // msb as name end
 268+ E5D3             >
 268+ E5D3 CA 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 268+ E5D5             >Prev_Ptr        defl    Heap_Ptr
 268+ E5D5             >
 268+ E5D5             >mirror_Ptr      defl    $
 268+ E5D5             >
 268+ E5D5 BA 28       >                dw      Dict_Ptr + 2        // xt
 268+ E5D7             >Heap_Ptr        defl    $ - $E000           // save current HP
 268+ E5D7             >
 268+ E5D7             >Current_HP      defl  $ - $E000             // used to set HP once!
 268+ E5D7             >
 268+ E5D7             >//              ______________________________________________________________________
 268+ E5D7             >//              Dictionary part
 268+ E5D7             >
 268+ E5D7             >                org     Dict_Ptr
 268+ 28B8             >
 268+ 28B8 D5 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 268+ 28BA             >
 268+ 28BA             >ULESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 268+ 28BA ~           >                call    runcode ; ok        // for primitive definitions  actual code
 268+ 28BA ~           >
 268+ 28BA ~           >
 268+ 28BA             >                endif           ; ok        // for other definitions it "points" the correct handler
 268+ 28BA             >                // Use of "; ok" to suppress "warning[fwdref]"
 268+ 28BA             >
 268+ 28BA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 269+ 28BA D9                           exx
 270+ 28BB D1                           pop     de
 271+ 28BC E1                           pop     hl
 272+ 28BD              Unsigned_Less_Exit:
 273+ 28BD A7                           and     a
 274+ 28BE ED 52                        sbc     hl, de
 275+ 28C0 ED 62                        sbc     hl, hl
 276+ 28C2 E5                           push    hl
 277+ 28C3 D9                           exx
 278+ 28C4                              next
 278+ 28C4 DD E9       >                jp      (ix)
 279+ 28C6
 280+ 28C6              //  ______________________________________________________________________
 281+ 28C6              //
 282+ 28C6              // <           n1 n2 -- n3
 283+ 28C6              // less-than
 284+ 28C6                              New_Def LESS, "<", is_code, is_normal
 284+ 28C6             >
 284+ 28C6             >Dict_Ptr        defl    $
 284+ 28C6             >
 284+ 28C6             >//              ______________________________________________________________________
 284+ 28C6             >//              Heap part
 284+ 28C6             >
 284+ 28C6             >
 284+ 28C6             >                org     (Heap_Ptr & $1FFF) + $E000
 284+ E5D7             >
 284+ E5D7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 284+ E5D7             >Latest_Definition defl  Heap_Ptr
 284+ E5D7             >
 284+ E5D7             >                // dummy db directives used to calculate length of namec
 284+ E5D7 3C          >                db      "<"
 284+ E5D8             >len_NFA         defl    $ - temp_NFA
 284+ E5D8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 284+ E5D7             >
 284+ E5D7 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 284+ E5D8 3C          >                db      "<"               // name string in 7-bit ascii, but
 284+ E5D9             >                org     $-1                 // alter last byte of Name just above to set
 284+ E5D8 BC          >                db      {b $} | END_BIT     // msb as name end
 284+ E5D9             >
 284+ E5D9 D0 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 284+ E5DB             >Prev_Ptr        defl    Heap_Ptr
 284+ E5DB             >
 284+ E5DB             >mirror_Ptr      defl    $
 284+ E5DB             >
 284+ E5DB C8 28       >                dw      Dict_Ptr + 2        // xt
 284+ E5DD             >Heap_Ptr        defl    $ - $E000           // save current HP
 284+ E5DD             >
 284+ E5DD             >Current_HP      defl  $ - $E000             // used to set HP once!
 284+ E5DD             >
 284+ E5DD             >//              ______________________________________________________________________
 284+ E5DD             >//              Dictionary part
 284+ E5DD             >
 284+ E5DD             >                org     Dict_Ptr
 284+ 28C6             >
 284+ 28C6 DB 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 284+ 28C8             >
 284+ 28C8             >LESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 284+ 28C8 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 284+ 28C8 ~           >
 284+ 28C8 ~           >
 284+ 28C8             >                endif           ; ok        // for other definitions it "points" the correct handler
 284+ 28C8             >                // Use of "; ok" to suppress "warning[fwdref]"
 284+ 28C8             >
 284+ 28C8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 285+ 28C8 D9                           exx
 286+ 28C9 E1                           pop     hl
 287+ 28CA D1                           pop     de
 288+ 28CB 01 00 80                     ld      bc, $8000
 289+ 28CE 09                           add     hl, bc
 290+ 28CF EB                           ex      de, hl
 291+ 28D0 09                           add     hl, bc
 292+ 28D1 18 EA                        jr      Unsigned_Less_Exit
 293+ 28D3              //              and     a
 294+ 28D3              //              sbc     hl, de
 295+ 28D3              //              sbc     hl, hl
 296+ 28D3              //              push    hl
 297+ 28D3              //              exx
 298+ 28D3              //              next
 299+ 28D3
 300+ 28D3              //  ______________________________________________________________________
 301+ 28D3              //
 302+ 28D3              // >            n1 n2 -- n3
 303+ 28D3              // greater than
 304+ 28D3                              Colon_Def GREATER, ">", is_normal
 304+ 28D3             >                New_Def  GREATER, ">", Enter_Ptr, is_normal ; ok
 304+ 28D3             >
 304+ 28D3             >Dict_Ptr        defl    $
 304+ 28D3             >
 304+ 28D3             >//              ______________________________________________________________________
 304+ 28D3             >//              Heap part
 304+ 28D3             >
 304+ 28D3             >
 304+ 28D3             >                org     (Heap_Ptr & $1FFF) + $E000
 304+ E5DD             >
 304+ E5DD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 304+ E5DD             >Latest_Definition defl  Heap_Ptr
 304+ E5DD             >
 304+ E5DD             >                // dummy db directives used to calculate length of namec
 304+ E5DD 3E          >                db      ">"
 304+ E5DE             >len_NFA         defl    $ - temp_NFA
 304+ E5DE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 304+ E5DD             >
 304+ E5DD 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 304+ E5DE 3E          >                db      ">"               // name string in 7-bit ascii, but
 304+ E5DF             >                org     $-1                 // alter last byte of Name just above to set
 304+ E5DE BE          >                db      {b $} | END_BIT     // msb as name end
 304+ E5DF             >
 304+ E5DF D7 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 304+ E5E1             >Prev_Ptr        defl    Heap_Ptr
 304+ E5E1             >
 304+ E5E1             >mirror_Ptr      defl    $
 304+ E5E1             >
 304+ E5E1 D5 28       >                dw      Dict_Ptr + 2        // xt
 304+ E5E3             >Heap_Ptr        defl    $ - $E000           // save current HP
 304+ E5E3             >
 304+ E5E3             >Current_HP      defl  $ - $E000             // used to set HP once!
 304+ E5E3             >
 304+ E5E3             >//              ______________________________________________________________________
 304+ E5E3             >//              Dictionary part
 304+ E5E3             >
 304+ E5E3             >                org     Dict_Ptr
 304+ 28D3             >
 304+ 28D3 E1 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 304+ 28D5             >
 304+ 28D5             >GREATER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 304+ 28D5 CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 304+ 28D8             >
 304+ 28D8             >
 304+ 28D8             >                endif           ; ok        // for other definitions it "points" the correct handler
 304+ 28D8             >                // Use of "; ok" to suppress "warning[fwdref]"
 304+ 28D8             >
 304+ 28D8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 305+ 28D8 D8 25 C8 28                  dw      SWAP, LESS              // swap <
 306+ 28DC 09 25                        dw      EXIT                    // ;
 307+ 28DE              //  ______________________________________________________________________
 308+ 28DE              //
 309+ 28DE              // min          n1 n2 -- n3
 310+ 28DE              // minimum between n1 and n2
 311+ 28DE                              Colon_Def MIN, "MIN" , is_normal
 311+ 28DE             >                New_Def  MIN, "MIN", Enter_Ptr, is_normal ; ok
 311+ 28DE             >
 311+ 28DE             >Dict_Ptr        defl    $
 311+ 28DE             >
 311+ 28DE             >//              ______________________________________________________________________
 311+ 28DE             >//              Heap part
 311+ 28DE             >
 311+ 28DE             >
 311+ 28DE             >                org     (Heap_Ptr & $1FFF) + $E000
 311+ E5E3             >
 311+ E5E3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 311+ E5E3             >Latest_Definition defl  Heap_Ptr
 311+ E5E3             >
 311+ E5E3             >                // dummy db directives used to calculate length of namec
 311+ E5E3 4D 49 4E    >                db      "MIN"
 311+ E5E6             >len_NFA         defl    $ - temp_NFA
 311+ E5E6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 311+ E5E3             >
 311+ E5E3 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 311+ E5E4 4D 49 4E    >                db      "MIN"               // name string in 7-bit ascii, but
 311+ E5E7             >                org     $-1                 // alter last byte of Name just above to set
 311+ E5E6 CE          >                db      {b $} | END_BIT     // msb as name end
 311+ E5E7             >
 311+ E5E7 DD 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 311+ E5E9             >Prev_Ptr        defl    Heap_Ptr
 311+ E5E9             >
 311+ E5E9             >mirror_Ptr      defl    $
 311+ E5E9             >
 311+ E5E9 E0 28       >                dw      Dict_Ptr + 2        // xt
 311+ E5EB             >Heap_Ptr        defl    $ - $E000           // save current HP
 311+ E5EB             >
 311+ E5EB             >Current_HP      defl  $ - $E000             // used to set HP once!
 311+ E5EB             >
 311+ E5EB             >//              ______________________________________________________________________
 311+ E5EB             >//              Dictionary part
 311+ E5EB             >
 311+ E5EB             >                org     Dict_Ptr
 311+ 28DE             >
 311+ 28DE E9 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 311+ 28E0             >
 311+ 28E0             >MIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 311+ 28E0 CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 311+ 28E3             >
 311+ 28E3             >
 311+ 28E3             >                endif           ; ok        // for other definitions it "points" the correct handler
 311+ 28E3             >                // Use of "; ok" to suppress "warning[fwdref]"
 311+ 28E3             >
 311+ 28E3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 312+ 28E3 27 26                        dw      TWO_DUP                 // 2dup
 313+ 28E5 D5 28                        dw      GREATER                 // >
 314+ 28E7 8F 20                        dw      ZBRANCH
 315+ 28E9 04 00                        dw      Min_Skip - $   // if
 316+ 28EB D8 25                        dw          SWAP                //      swap
 317+ 28ED              Min_Skip:                                       // endif
 318+ 28ED C4 25                        dw      DROP                    // drop
 319+ 28EF 09 25                        dw      EXIT                    // ;
 320+ 28F1
 321+ 28F1              //  ______________________________________________________________________
 322+ 28F1              //
 323+ 28F1              // max          n1 n2 -- n3
 324+ 28F1              // maximum between n1 and n2
 325+ 28F1                              Colon_Def MAX, "MAX", is_normal
 325+ 28F1             >                New_Def  MAX, "MAX", Enter_Ptr, is_normal ; ok
 325+ 28F1             >
 325+ 28F1             >Dict_Ptr        defl    $
 325+ 28F1             >
 325+ 28F1             >//              ______________________________________________________________________
 325+ 28F1             >//              Heap part
 325+ 28F1             >
 325+ 28F1             >
 325+ 28F1             >                org     (Heap_Ptr & $1FFF) + $E000
 325+ E5EB             >
 325+ E5EB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 325+ E5EB             >Latest_Definition defl  Heap_Ptr
 325+ E5EB             >
 325+ E5EB             >                // dummy db directives used to calculate length of namec
 325+ E5EB 4D 41 58    >                db      "MAX"
 325+ E5EE             >len_NFA         defl    $ - temp_NFA
 325+ E5EE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 325+ E5EB             >
 325+ E5EB 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 325+ E5EC 4D 41 58    >                db      "MAX"               // name string in 7-bit ascii, but
 325+ E5EF             >                org     $-1                 // alter last byte of Name just above to set
 325+ E5EE D8          >                db      {b $} | END_BIT     // msb as name end
 325+ E5EF             >
 325+ E5EF E3 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 325+ E5F1             >Prev_Ptr        defl    Heap_Ptr
 325+ E5F1             >
 325+ E5F1             >mirror_Ptr      defl    $
 325+ E5F1             >
 325+ E5F1 F3 28       >                dw      Dict_Ptr + 2        // xt
 325+ E5F3             >Heap_Ptr        defl    $ - $E000           // save current HP
 325+ E5F3             >
 325+ E5F3             >Current_HP      defl  $ - $E000             // used to set HP once!
 325+ E5F3             >
 325+ E5F3             >//              ______________________________________________________________________
 325+ E5F3             >//              Dictionary part
 325+ E5F3             >
 325+ E5F3             >                org     Dict_Ptr
 325+ 28F1             >
 325+ 28F1 F1 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 325+ 28F3             >
 325+ 28F3             >MAX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 325+ 28F3 CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 325+ 28F6             >
 325+ 28F6             >
 325+ 28F6             >                endif           ; ok        // for other definitions it "points" the correct handler
 325+ 28F6             >                // Use of "; ok" to suppress "warning[fwdref]"
 325+ 28F6             >
 325+ 28F6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 326+ 28F6 27 26                        dw      TWO_DUP                 // 2dup
 327+ 28F8 C8 28                        dw      LESS                    // <
 328+ 28FA 8F 20                        dw      ZBRANCH
 329+ 28FC 04 00                        dw      Max_Skip - $   // if
 330+ 28FE D8 25                        dw          SWAP                //      swap
 331+ 2900              Max_Skip:                                       // endif
 332+ 2900 C4 25                        dw      DROP                    // drop
 333+ 2902 09 25                        dw      EXIT                    // ;
 334+ 2904
 335+ 2904              //  ______________________________________________________________________
 336+ 2904              //
 337+ 2904              // ?dup         n -- 0 | n n
 338+ 2904              // duplicate if not zero
 339+ 2904                              New_Def QDUP, "?DUP", is_code, is_normal
 339+ 2904             >
 339+ 2904             >Dict_Ptr        defl    $
 339+ 2904             >
 339+ 2904             >//              ______________________________________________________________________
 339+ 2904             >//              Heap part
 339+ 2904             >
 339+ 2904             >
 339+ 2904             >                org     (Heap_Ptr & $1FFF) + $E000
 339+ E5F3             >
 339+ E5F3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 339+ E5F3             >Latest_Definition defl  Heap_Ptr
 339+ E5F3             >
 339+ E5F3             >                // dummy db directives used to calculate length of namec
 339+ E5F3 3F 44 55 50 >                db      "?DUP"
 339+ E5F7             >len_NFA         defl    $ - temp_NFA
 339+ E5F7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 339+ E5F3             >
 339+ E5F3 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 339+ E5F4 3F 44 55 50 >                db      "?DUP"               // name string in 7-bit ascii, but
 339+ E5F8             >                org     $-1                 // alter last byte of Name just above to set
 339+ E5F7 D0          >                db      {b $} | END_BIT     // msb as name end
 339+ E5F8             >
 339+ E5F8 EB 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 339+ E5FA             >Prev_Ptr        defl    Heap_Ptr
 339+ E5FA             >
 339+ E5FA             >mirror_Ptr      defl    $
 339+ E5FA             >
 339+ E5FA 06 29       >                dw      Dict_Ptr + 2        // xt
 339+ E5FC             >Heap_Ptr        defl    $ - $E000           // save current HP
 339+ E5FC             >
 339+ E5FC             >Current_HP      defl  $ - $E000             // used to set HP once!
 339+ E5FC             >
 339+ E5FC             >//              ______________________________________________________________________
 339+ E5FC             >//              Dictionary part
 339+ E5FC             >
 339+ E5FC             >                org     Dict_Ptr
 339+ 2904             >
 339+ 2904 FA 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 339+ 2906             >
 339+ 2906             >QDUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 339+ 2906 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 339+ 2906 ~           >
 339+ 2906 ~           >
 339+ 2906             >                endif           ; ok        // for other definitions it "points" the correct handler
 339+ 2906             >                // Use of "; ok" to suppress "warning[fwdref]"
 339+ 2906             >
 339+ 2906             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 340+ 2906              QDup_Ptr:
 341+ 2906 E1                           pop     hl
 342+ 2907 7C                           ld      a, h
 343+ 2908 B5                           or      l
 344+ 2909 28 01                        jr      z, QDup_Skip
 345+ 290B E5                               push    hl
 346+ 290C              QDup_Skip:
 347+ 290C                              psh1
 347+ 290C E5          >                push    hl
 347+ 290D DD E9       >                jp      (ix)
 348+ 290F
 349+ 290F              //  ______________________________________________________________________
 350+ 290F              //
 351+ 290F              // -dup         n -- 0 | n n
 352+ 290F              // duplicate if not zero
 353+ 290F                              New_Def LDUP, "-DUP", is_code, is_normal
 353+ 290F             >
 353+ 290F             >Dict_Ptr        defl    $
 353+ 290F             >
 353+ 290F             >//              ______________________________________________________________________
 353+ 290F             >//              Heap part
 353+ 290F             >
 353+ 290F             >
 353+ 290F             >                org     (Heap_Ptr & $1FFF) + $E000
 353+ E5FC             >
 353+ E5FC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 353+ E5FC             >Latest_Definition defl  Heap_Ptr
 353+ E5FC             >
 353+ E5FC             >                // dummy db directives used to calculate length of namec
 353+ E5FC 2D 44 55 50 >                db      "-DUP"
 353+ E600             >len_NFA         defl    $ - temp_NFA
 353+ E600             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 353+ E5FC             >
 353+ E5FC 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 353+ E5FD 2D 44 55 50 >                db      "-DUP"               // name string in 7-bit ascii, but
 353+ E601             >                org     $-1                 // alter last byte of Name just above to set
 353+ E600 D0          >                db      {b $} | END_BIT     // msb as name end
 353+ E601             >
 353+ E601 F3 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 353+ E603             >Prev_Ptr        defl    Heap_Ptr
 353+ E603             >
 353+ E603             >mirror_Ptr      defl    $
 353+ E603             >
 353+ E603 11 29       >                dw      Dict_Ptr + 2        // xt
 353+ E605             >Heap_Ptr        defl    $ - $E000           // save current HP
 353+ E605             >
 353+ E605             >Current_HP      defl  $ - $E000             // used to set HP once!
 353+ E605             >
 353+ E605             >//              ______________________________________________________________________
 353+ E605             >//              Dictionary part
 353+ E605             >
 353+ E605             >                org     Dict_Ptr
 353+ 290F             >
 353+ 290F 03 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 353+ 2911             >
 353+ 2911             >LDUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 353+ 2911 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 353+ 2911 ~           >
 353+ 2911 ~           >
 353+ 2911             >                endif           ; ok        // for other definitions it "points" the correct handler
 353+ 2911             >                // Use of "; ok" to suppress "warning[fwdref]"
 353+ 2911             >
 353+ 2911             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 354+ 2911 C3 06 29                     jp      QDup_Ptr
 355+ 2914
 356+ 2914              //  ______________________________________________________________________
 357+ 2914              //
 358+ 2914              // emit         c --
 359+ 2914                              Colon_Def EMIT, "EMIT", is_normal
 359+ 2914             >                New_Def  EMIT, "EMIT", Enter_Ptr, is_normal ; ok
 359+ 2914             >
 359+ 2914             >Dict_Ptr        defl    $
 359+ 2914             >
 359+ 2914             >//              ______________________________________________________________________
 359+ 2914             >//              Heap part
 359+ 2914             >
 359+ 2914             >
 359+ 2914             >                org     (Heap_Ptr & $1FFF) + $E000
 359+ E605             >
 359+ E605             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 359+ E605             >Latest_Definition defl  Heap_Ptr
 359+ E605             >
 359+ E605             >                // dummy db directives used to calculate length of namec
 359+ E605 45 4D 49 54 >                db      "EMIT"
 359+ E609             >len_NFA         defl    $ - temp_NFA
 359+ E609             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 359+ E605             >
 359+ E605 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 359+ E606 45 4D 49 54 >                db      "EMIT"               // name string in 7-bit ascii, but
 359+ E60A             >                org     $-1                 // alter last byte of Name just above to set
 359+ E609 D4          >                db      {b $} | END_BIT     // msb as name end
 359+ E60A             >
 359+ E60A FC 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 359+ E60C             >Prev_Ptr        defl    Heap_Ptr
 359+ E60C             >
 359+ E60C             >mirror_Ptr      defl    $
 359+ E60C             >
 359+ E60C 16 29       >                dw      Dict_Ptr + 2        // xt
 359+ E60E             >Heap_Ptr        defl    $ - $E000           // save current HP
 359+ E60E             >
 359+ E60E             >Current_HP      defl  $ - $E000             // used to set HP once!
 359+ E60E             >
 359+ E60E             >//              ______________________________________________________________________
 359+ E60E             >//              Dictionary part
 359+ E60E             >
 359+ E60E             >                org     Dict_Ptr
 359+ 2914             >
 359+ 2914 0C 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 359+ 2916             >
 359+ 2916             >EMIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 359+ 2916 CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 359+ 2919             >
 359+ 2919             >
 359+ 2919             >                endif           ; ok        // for other definitions it "points" the correct handler
 359+ 2919             >                // Use of "; ok" to suppress "warning[fwdref]"
 359+ 2919             >
 359+ 2919             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 360+ 2919 79 22                        dw      C_EMIT                      // (?emit)
 361+ 291B 06 29                        dw      QDUP                        // ?dup
 362+ 291D                                                                  // if
 363+ 291D 8F 20                        dw      ZBRANCH
 364+ 291F 0A 00                        dw      Emit_Skip - $
 365+ 2921 39 22                        dw          EMITC                   //      emitc
 366+ 2923 46 27                        dw          ONE                     //      1
 367+ 2925 EC 27 31 26                  dw          OUT, PLUSSTORE        //      out +!
 368+ 2929              Emit_Skip:                                          // endif
 369+ 2929 09 25                        dw      EXIT                        // ;
 370+ 292B
 371+ 292B              //  ______________________________________________________________________
 372+ 292B              //
 373+ 292B              // space        --
 374+ 292B                              Colon_Def SPACE, "SPACE", is_normal
 374+ 292B             >                New_Def  SPACE, "SPACE", Enter_Ptr, is_normal ; ok
 374+ 292B             >
 374+ 292B             >Dict_Ptr        defl    $
 374+ 292B             >
 374+ 292B             >//              ______________________________________________________________________
 374+ 292B             >//              Heap part
 374+ 292B             >
 374+ 292B             >
 374+ 292B             >                org     (Heap_Ptr & $1FFF) + $E000
 374+ E60E             >
 374+ E60E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 374+ E60E             >Latest_Definition defl  Heap_Ptr
 374+ E60E             >
 374+ E60E             >                // dummy db directives used to calculate length of namec
 374+ E60E 53 50 41 43 >                db      "SPACE"
 374+ E612 45          >
 374+ E613             >len_NFA         defl    $ - temp_NFA
 374+ E613             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 374+ E60E             >
 374+ E60E 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 374+ E60F 53 50 41 43 >                db      "SPACE"               // name string in 7-bit ascii, but
 374+ E613 45          >
 374+ E614             >                org     $-1                 // alter last byte of Name just above to set
 374+ E613 C5          >                db      {b $} | END_BIT     // msb as name end
 374+ E614             >
 374+ E614 05 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 374+ E616             >Prev_Ptr        defl    Heap_Ptr
 374+ E616             >
 374+ E616             >mirror_Ptr      defl    $
 374+ E616             >
 374+ E616 2D 29       >                dw      Dict_Ptr + 2        // xt
 374+ E618             >Heap_Ptr        defl    $ - $E000           // save current HP
 374+ E618             >
 374+ E618             >Current_HP      defl  $ - $E000             // used to set HP once!
 374+ E618             >
 374+ E618             >//              ______________________________________________________________________
 374+ E618             >//              Dictionary part
 374+ E618             >
 374+ E618             >                org     Dict_Ptr
 374+ 292B             >
 374+ 292B 16 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 374+ 292D             >
 374+ 292D             >SPACE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 374+ 292D CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 374+ 2930             >
 374+ 2930             >
 374+ 2930             >                endif           ; ok        // for other definitions it "points" the correct handler
 374+ 2930             >                // Use of "; ok" to suppress "warning[fwdref]"
 374+ 2930             >
 374+ 2930             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 375+ 2930 62 27 16 29                  dw      BL, EMIT                // bl emit
 376+ 2934 09 25                        dw      EXIT                    // ;
 377+ 2936
 378+ 2936              //  ______________________________________________________________________
 379+ 2936              //
 380+ 2936              // traverse     a n -- a
 381+ 2936              // A dictionary entry is structured as follows
 382+ 2936              // NFA: +0   one byte of word-length (n<32) | some flags (immediate, smudge) | $80
 383+ 2936              //      +1   word name, last character is toggled with $80
 384+ 2936              // LFA: +1+n link to NFA ofprevious  dictionary entry.
 385+ 2936              // CFA: +3+n routine address. Colon definitions here have a CALL aa
 386+ 2936              // PFA: +6+n "is_code", definitions have no PFA. // +5
 387+ 2936              //
 388+ 2936                              Colon_Def TRAVERSE, "TRAVERSE", is_normal
 388+ 2936             >                New_Def  TRAVERSE, "TRAVERSE", Enter_Ptr, is_normal ; ok
 388+ 2936             >
 388+ 2936             >Dict_Ptr        defl    $
 388+ 2936             >
 388+ 2936             >//              ______________________________________________________________________
 388+ 2936             >//              Heap part
 388+ 2936             >
 388+ 2936             >
 388+ 2936             >                org     (Heap_Ptr & $1FFF) + $E000
 388+ E618             >
 388+ E618             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 388+ E618             >Latest_Definition defl  Heap_Ptr
 388+ E618             >
 388+ E618             >                // dummy db directives used to calculate length of namec
 388+ E618 54 52 41 56 >                db      "TRAVERSE"
 388+ E61C 45 52 53 45 >
 388+ E620             >len_NFA         defl    $ - temp_NFA
 388+ E620             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 388+ E618             >
 388+ E618 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 388+ E619 54 52 41 56 >                db      "TRAVERSE"               // name string in 7-bit ascii, but
 388+ E61D 45 52 53 45 >
 388+ E621             >                org     $-1                 // alter last byte of Name just above to set
 388+ E620 C5          >                db      {b $} | END_BIT     // msb as name end
 388+ E621             >
 388+ E621 0E 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 388+ E623             >Prev_Ptr        defl    Heap_Ptr
 388+ E623             >
 388+ E623             >mirror_Ptr      defl    $
 388+ E623             >
 388+ E623 38 29       >                dw      Dict_Ptr + 2        // xt
 388+ E625             >Heap_Ptr        defl    $ - $E000           // save current HP
 388+ E625             >
 388+ E625             >Current_HP      defl  $ - $E000             // used to set HP once!
 388+ E625             >
 388+ E625             >//              ______________________________________________________________________
 388+ E625             >//              Dictionary part
 388+ E625             >
 388+ E625             >                org     Dict_Ptr
 388+ 2936             >
 388+ 2936 23 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 388+ 2938             >
 388+ 2938             >TRAVERSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 388+ 2938 CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 388+ 293B             >
 388+ 293B             >
 388+ 293B             >                endif           ; ok        // for other definitions it "points" the correct handler
 388+ 293B             >                // Use of "; ok" to suppress "warning[fwdref]"
 388+ 293B             >
 388+ 293B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 389+ 293B D8 25                        dw      SWAP                    // swap
 390+ 293D              Traverse_Begin:                                 // begin
 391+ 293D BB 25 5B 25                  dw          OVER, PLUS          //      over +
 392+ 2941 3D 20 7F 00                  dw          LIT, 127            //      127
 393+ 2945 BB 25 5E 26                  dw          OVER, CFETCH        //      over @
 394+ 2949 C8 28                        dw          LESS                //      <
 395+ 294B                                                              // until
 396+ 294B 8F 20                        dw      ZBRANCH
 397+ 294D F0 FF                        dw      Traverse_Begin - $
 398+ 294F C9 25                        dw      NIP                     //  nip
 399+ 2951 09 25                        dw      EXIT                    //  ;
 400+ 2953
 401+ 2953              //  ______________________________________________________________________
 402+ 2953              //
 403+ 2953              // mmu7@        -- n
 404+ 2953              // query current page in MMU7 8K-RAM : 0 and 223
 405+ 2953
 406+ 2953                              New_Def MMU7_FETCH, "MMU7@", is_code, is_normal
 406+ 2953             >
 406+ 2953             >Dict_Ptr        defl    $
 406+ 2953             >
 406+ 2953             >//              ______________________________________________________________________
 406+ 2953             >//              Heap part
 406+ 2953             >
 406+ 2953             >
 406+ 2953             >                org     (Heap_Ptr & $1FFF) + $E000
 406+ E625             >
 406+ E625             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 406+ E625             >Latest_Definition defl  Heap_Ptr
 406+ E625             >
 406+ E625             >                // dummy db directives used to calculate length of namec
 406+ E625 4D 4D 55 37 >                db      "MMU7@"
 406+ E629 40          >
 406+ E62A             >len_NFA         defl    $ - temp_NFA
 406+ E62A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 406+ E625             >
 406+ E625 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 406+ E626 4D 4D 55 37 >                db      "MMU7@"               // name string in 7-bit ascii, but
 406+ E62A 40          >
 406+ E62B             >                org     $-1                 // alter last byte of Name just above to set
 406+ E62A C0          >                db      {b $} | END_BIT     // msb as name end
 406+ E62B             >
 406+ E62B 18 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 406+ E62D             >Prev_Ptr        defl    Heap_Ptr
 406+ E62D             >
 406+ E62D             >mirror_Ptr      defl    $
 406+ E62D             >
 406+ E62D 55 29       >                dw      Dict_Ptr + 2        // xt
 406+ E62F             >Heap_Ptr        defl    $ - $E000           // save current HP
 406+ E62F             >
 406+ E62F             >Current_HP      defl  $ - $E000             // used to set HP once!
 406+ E62F             >
 406+ E62F             >//              ______________________________________________________________________
 406+ E62F             >//              Dictionary part
 406+ E62F             >
 406+ E62F             >                org     Dict_Ptr
 406+ 2953             >
 406+ 2953 2D 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 406+ 2955             >
 406+ 2955             >MMU7_FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 406+ 2955 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 406+ 2955 ~           >
 406+ 2955 ~           >
 406+ 2955             >                endif           ; ok        // for other definitions it "points" the correct handler
 406+ 2955             >                // Use of "; ok" to suppress "warning[fwdref]"
 406+ 2955             >
 406+ 2955             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 407+ 2955 D9                           exx
 408+ 2956 CD 36 21                     call    MMU7_read
 409+ 2959 D9                           exx
 410+ 295A 6F                           ld      l, a
 411+ 295B 26 00                        ld      h, 0
 412+ 295D E5                           push    hl
 413+ 295E                              next
 413+ 295E DD E9       >                jp      (ix)
 414+ 2960
 415+ 2960              //  ______________________________________________________________________
 416+ 2960              //
 417+ 2960              // mmu7!        n --
 418+ 2960              // set MMU7 8K-RAM page to n given between 0 and 223
 419+ 2960              // optimized version that uses NEXTREG n,A Z80n op-code.
 420+ 2960
 421+ 2960                              New_Def MMU7_STORE, "MMU7!", is_code, is_normal
 421+ 2960             >
 421+ 2960             >Dict_Ptr        defl    $
 421+ 2960             >
 421+ 2960             >//              ______________________________________________________________________
 421+ 2960             >//              Heap part
 421+ 2960             >
 421+ 2960             >
 421+ 2960             >                org     (Heap_Ptr & $1FFF) + $E000
 421+ E62F             >
 421+ E62F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 421+ E62F             >Latest_Definition defl  Heap_Ptr
 421+ E62F             >
 421+ E62F             >                // dummy db directives used to calculate length of namec
 421+ E62F 4D 4D 55 37 >                db      "MMU7!"
 421+ E633 21          >
 421+ E634             >len_NFA         defl    $ - temp_NFA
 421+ E634             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 421+ E62F             >
 421+ E62F 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 421+ E630 4D 4D 55 37 >                db      "MMU7!"               // name string in 7-bit ascii, but
 421+ E634 21          >
 421+ E635             >                org     $-1                 // alter last byte of Name just above to set
 421+ E634 A1          >                db      {b $} | END_BIT     // msb as name end
 421+ E635             >
 421+ E635 25 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 421+ E637             >Prev_Ptr        defl    Heap_Ptr
 421+ E637             >
 421+ E637             >mirror_Ptr      defl    $
 421+ E637             >
 421+ E637 62 29       >                dw      Dict_Ptr + 2        // xt
 421+ E639             >Heap_Ptr        defl    $ - $E000           // save current HP
 421+ E639             >
 421+ E639             >Current_HP      defl  $ - $E000             // used to set HP once!
 421+ E639             >
 421+ E639             >//              ______________________________________________________________________
 421+ E639             >//              Dictionary part
 421+ E639             >
 421+ E639             >                org     Dict_Ptr
 421+ 2960             >
 421+ 2960 37 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 421+ 2962             >
 421+ 2962             >MMU7_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 421+ 2962 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 421+ 2962 ~           >
 421+ 2962 ~           >
 421+ 2962             >                endif           ; ok        // for other definitions it "points" the correct handler
 421+ 2962             >                // Use of "; ok" to suppress "warning[fwdref]"
 421+ 2962             >
 421+ 2962             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 422+ 2962 E1                           pop     hl
 423+ 2963 7D                           ld      a, l
 424+ 2964 ED 92 57                     nextreg 87, a
 425+ 2967
 426+ 2967                              next
 426+ 2967 DD E9       >                jp      (ix)
 427+ 2969
 428+ 2969              //  ______________________________________________________________________
 429+ 2969              //
 430+ 2969              // >far         ha -- a n
 431+ 2969              // decode bits 765 of H as one of the 8K-page between 64 and 71 (40h-47h)
 432+ 2969              // take lower bits of H and L as an offset from E000h
 433+ 2969              // then return address  a  between E000h-FFFFh
 434+ 2969              // and page number n  between 64-71 (40h-47h)
 435+ 2969              // For example, in hex:
 436+ 2969              //   0000 >FAR  gives  40.E000
 437+ 2969              //   1FFF >FAR  gives  40.FFFF
 438+ 2969              //   2000 >FAR  gives  41.E000
 439+ 2969              //   3FFF >FAR  gives  41.FFFF
 440+ 2969              //   EFFF >FAR  gives  47.EFFF
 441+ 2969              //   FFFF >FAR  gives  47.FFFF
 442+ 2969                              New_Def TO_FAR, ">FAR", is_code, is_normal
 442+ 2969             >
 442+ 2969             >Dict_Ptr        defl    $
 442+ 2969             >
 442+ 2969             >//              ______________________________________________________________________
 442+ 2969             >//              Heap part
 442+ 2969             >
 442+ 2969             >
 442+ 2969             >                org     (Heap_Ptr & $1FFF) + $E000
 442+ E639             >
 442+ E639             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 442+ E639             >Latest_Definition defl  Heap_Ptr
 442+ E639             >
 442+ E639             >                // dummy db directives used to calculate length of namec
 442+ E639 3E 46 41 52 >                db      ">FAR"
 442+ E63D             >len_NFA         defl    $ - temp_NFA
 442+ E63D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 442+ E639             >
 442+ E639 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 442+ E63A 3E 46 41 52 >                db      ">FAR"               // name string in 7-bit ascii, but
 442+ E63E             >                org     $-1                 // alter last byte of Name just above to set
 442+ E63D D2          >                db      {b $} | END_BIT     // msb as name end
 442+ E63E             >
 442+ E63E 2F 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 442+ E640             >Prev_Ptr        defl    Heap_Ptr
 442+ E640             >
 442+ E640             >mirror_Ptr      defl    $
 442+ E640             >
 442+ E640 6B 29       >                dw      Dict_Ptr + 2        // xt
 442+ E642             >Heap_Ptr        defl    $ - $E000           // save current HP
 442+ E642             >
 442+ E642             >Current_HP      defl  $ - $E000             // used to set HP once!
 442+ E642             >
 442+ E642             >//              ______________________________________________________________________
 442+ E642             >//              Dictionary part
 442+ E642             >
 442+ E642             >                org     Dict_Ptr
 442+ 2969             >
 442+ 2969 40 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 442+ 296B             >
 442+ 296B             >TO_FAR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 442+ 296B ~           >                call    runcode ; ok        // for primitive definitions  actual code
 442+ 296B ~           >
 442+ 296B ~           >
 442+ 296B             >                endif           ; ok        // for other definitions it "points" the correct handler
 442+ 296B             >                // Use of "; ok" to suppress "warning[fwdref]"
 442+ 296B             >
 442+ 296B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 443+ 296B E1                           pop     hl
 444+ 296C CD 41 21                     call    TO_FAR_rout
 445+ 296F E5                           push    hl
 446+ 2970 6F                           ld      l, a
 447+ 2971 26 00                        ld      h, 0
 448+ 2973 E5                           push    hl
 449+ 2974                              next
 449+ 2974 DD E9       >                jp      (ix)
 450+ 2976
 451+ 2976              //  ______________________________________________________________________
 452+ 2976              //
 453+ 2976              // <far         a n  -- ha
 454+ 2976              // given an address E000-FFFF and a page number n (64-71 or 40h-47h)
 455+ 2976              // reverse of >FAR: encodes a FAR address compressing
 456+ 2976              // to bits 765 of H, lower bits of HL address offset from E000h
 457+ 2976                              New_Def FROM_FAR, "<FAR", is_code, is_normal
 457+ 2976             >
 457+ 2976             >Dict_Ptr        defl    $
 457+ 2976             >
 457+ 2976             >//              ______________________________________________________________________
 457+ 2976             >//              Heap part
 457+ 2976             >
 457+ 2976             >
 457+ 2976             >                org     (Heap_Ptr & $1FFF) + $E000
 457+ E642             >
 457+ E642             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 457+ E642             >Latest_Definition defl  Heap_Ptr
 457+ E642             >
 457+ E642             >                // dummy db directives used to calculate length of namec
 457+ E642 3C 46 41 52 >                db      "<FAR"
 457+ E646             >len_NFA         defl    $ - temp_NFA
 457+ E646             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 457+ E642             >
 457+ E642 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 457+ E643 3C 46 41 52 >                db      "<FAR"               // name string in 7-bit ascii, but
 457+ E647             >                org     $-1                 // alter last byte of Name just above to set
 457+ E646 D2          >                db      {b $} | END_BIT     // msb as name end
 457+ E647             >
 457+ E647 39 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 457+ E649             >Prev_Ptr        defl    Heap_Ptr
 457+ E649             >
 457+ E649             >mirror_Ptr      defl    $
 457+ E649             >
 457+ E649 78 29       >                dw      Dict_Ptr + 2        // xt
 457+ E64B             >Heap_Ptr        defl    $ - $E000           // save current HP
 457+ E64B             >
 457+ E64B             >Current_HP      defl  $ - $E000             // used to set HP once!
 457+ E64B             >
 457+ E64B             >//              ______________________________________________________________________
 457+ E64B             >//              Dictionary part
 457+ E64B             >
 457+ E64B             >                org     Dict_Ptr
 457+ 2976             >
 457+ 2976 49 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 457+ 2978             >
 457+ 2978             >FROM_FAR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 457+ 2978 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 457+ 2978 ~           >
 457+ 2978 ~           >
 457+ 2978             >                endif           ; ok        // for other definitions it "points" the correct handler
 457+ 2978             >                // Use of "; ok" to suppress "warning[fwdref]"
 457+ 2978             >
 457+ 2978             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 458+ 2978 E1                           pop     hl                  // page number in l
 459+ 2979 7D                           ld      a, l
 460+ 297A E6 07                        and     07
 461+ 297C 0F                           rrca
 462+ 297D 0F                           rrca
 463+ 297E 0F                           rrca
 464+ 297F 08                           ex      af, af
 465+ 2980 E1                           pop     hl                  // address in hl
 466+ 2981 7C                           ld      a, h
 467+ 2982 E6 1F                        and     $1F
 468+ 2984 67                           ld      h, a
 469+ 2985 08                           ex      af, af
 470+ 2986 B4                           or      h
 471+ 2987 67                           ld      h, a
 472+ 2988                              psh1
 472+ 2988 E5          >                push    hl
 472+ 2989 DD E9       >                jp      (ix)
 473+ 298B
 474+ 298B              //  ______________________________________________________________________
 475+ 298B              //
 476+ 298B              // ?IN_MMU7        a -- f
 477+ 298B              // check if address lies on MMU7
 478+ 298B              // tf is passed address is on MMU7
 479+ 298B                              Colon_Def QMMU7, "?IN_MMU7", is_normal
 479+ 298B             >                New_Def  QMMU7, "?IN_MMU7", Enter_Ptr, is_normal ; ok
 479+ 298B             >
 479+ 298B             >Dict_Ptr        defl    $
 479+ 298B             >
 479+ 298B             >//              ______________________________________________________________________
 479+ 298B             >//              Heap part
 479+ 298B             >
 479+ 298B             >
 479+ 298B             >                org     (Heap_Ptr & $1FFF) + $E000
 479+ E64B             >
 479+ E64B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 479+ E64B             >Latest_Definition defl  Heap_Ptr
 479+ E64B             >
 479+ E64B             >                // dummy db directives used to calculate length of namec
 479+ E64B 3F 49 4E 5F >                db      "?IN_MMU7"
 479+ E64F 4D 4D 55 37 >
 479+ E653             >len_NFA         defl    $ - temp_NFA
 479+ E653             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 479+ E64B             >
 479+ E64B 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 479+ E64C 3F 49 4E 5F >                db      "?IN_MMU7"               // name string in 7-bit ascii, but
 479+ E650 4D 4D 55 37 >
 479+ E654             >                org     $-1                 // alter last byte of Name just above to set
 479+ E653 B7          >                db      {b $} | END_BIT     // msb as name end
 479+ E654             >
 479+ E654 42 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 479+ E656             >Prev_Ptr        defl    Heap_Ptr
 479+ E656             >
 479+ E656             >mirror_Ptr      defl    $
 479+ E656             >
 479+ E656 8D 29       >                dw      Dict_Ptr + 2        // xt
 479+ E658             >Heap_Ptr        defl    $ - $E000           // save current HP
 479+ E658             >
 479+ E658             >Current_HP      defl  $ - $E000             // used to set HP once!
 479+ E658             >
 479+ E658             >//              ______________________________________________________________________
 479+ E658             >//              Dictionary part
 479+ E658             >
 479+ E658             >                org     Dict_Ptr
 479+ 298B             >
 479+ 298B 56 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 479+ 298D             >
 479+ 298D             >QMMU7:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 479+ 298D CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 479+ 2990             >
 479+ 2990             >
 479+ 2990             >                endif           ; ok        // for other definitions it "points" the correct handler
 479+ 2990             >                // Use of "; ok" to suppress "warning[fwdref]"
 479+ 2990             >
 479+ 2990             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 480+ 2990 DF 25                        dw      DUP
 481+ 2992 3D 20 00 E0                  dw      LIT, $E000
 482+ 2996 BA 28                        dw      ULESS
 483+ 2998 3C 25                        dw      NOT_OP
 484+ 299A 09 25                        dw      EXIT
 485+ 299C
 486+ 299C              //  ______________________________________________________________________
 487+ 299C              //
 488+ 299C              // far          hp -- ha
 489+ 299C              // Convert an "heap-pointer address" (ha) into a real address (a)
 490+ 299C              // between E000h and FFFFh and fit the correct 8K page on MMU7
 491+ 299C              // An "ha" uses the 3 msb as page-number and the lower bits as offset at E000.
 492+ 299C                              Colon_Def FAR, "FAR", is_normal
 492+ 299C             >                New_Def  FAR, "FAR", Enter_Ptr, is_normal ; ok
 492+ 299C             >
 492+ 299C             >Dict_Ptr        defl    $
 492+ 299C             >
 492+ 299C             >//              ______________________________________________________________________
 492+ 299C             >//              Heap part
 492+ 299C             >
 492+ 299C             >
 492+ 299C             >                org     (Heap_Ptr & $1FFF) + $E000
 492+ E658             >
 492+ E658             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 492+ E658             >Latest_Definition defl  Heap_Ptr
 492+ E658             >
 492+ E658             >                // dummy db directives used to calculate length of namec
 492+ E658 46 41 52    >                db      "FAR"
 492+ E65B             >len_NFA         defl    $ - temp_NFA
 492+ E65B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 492+ E658             >
 492+ E658 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 492+ E659 46 41 52    >                db      "FAR"               // name string in 7-bit ascii, but
 492+ E65C             >                org     $-1                 // alter last byte of Name just above to set
 492+ E65B D2          >                db      {b $} | END_BIT     // msb as name end
 492+ E65C             >
 492+ E65C 4B 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 492+ E65E             >Prev_Ptr        defl    Heap_Ptr
 492+ E65E             >
 492+ E65E             >mirror_Ptr      defl    $
 492+ E65E             >
 492+ E65E 9E 29       >                dw      Dict_Ptr + 2        // xt
 492+ E660             >Heap_Ptr        defl    $ - $E000           // save current HP
 492+ E660             >
 492+ E660             >Current_HP      defl  $ - $E000             // used to set HP once!
 492+ E660             >
 492+ E660             >//              ______________________________________________________________________
 492+ E660             >//              Dictionary part
 492+ E660             >
 492+ E660             >                org     Dict_Ptr
 492+ 299C             >
 492+ 299C 5E 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 492+ 299E             >
 492+ 299E             >FAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 492+ 299E CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 492+ 29A1             >
 492+ 29A1             >
 492+ 29A1             >                endif           ; ok        // for other definitions it "points" the correct handler
 492+ 29A1             >                // Use of "; ok" to suppress "warning[fwdref]"
 492+ 29A1             >
 492+ 29A1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 493+ 29A1 6B 29                        dw      TO_FAR
 494+ 29A3 62 29                        dw      MMU7_STORE
 495+ 29A5 09 25                        dw      EXIT
 496+ 29A7
 497+ 29A7              //  ______________________________________________________________________
 498+ 29A7              //
 499+ 29A7              // ?HEAP_PTR       n -- n f
 500+ 29A7              // check if it's a non-zero heap-pointer or less than $6300
 501+ 29A7              // tf if passed argument is an hp
 502+ 29A7              // ff if passed argument isn't hp
 503+ 29A7                              Colon_Def QHEAPP, "?HEAP_PTR", is_normal
 503+ 29A7             >                New_Def  QHEAPP, "?HEAP_PTR", Enter_Ptr, is_normal ; ok
 503+ 29A7             >
 503+ 29A7             >Dict_Ptr        defl    $
 503+ 29A7             >
 503+ 29A7             >//              ______________________________________________________________________
 503+ 29A7             >//              Heap part
 503+ 29A7             >
 503+ 29A7             >
 503+ 29A7             >                org     (Heap_Ptr & $1FFF) + $E000
 503+ E660             >
 503+ E660             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 503+ E660             >Latest_Definition defl  Heap_Ptr
 503+ E660             >
 503+ E660             >                // dummy db directives used to calculate length of namec
 503+ E660 3F 48 45 41 >                db      "?HEAP_PTR"
 503+ E664 50 5F 50 54 >
 503+ E668 52          >
 503+ E669             >len_NFA         defl    $ - temp_NFA
 503+ E669             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 503+ E660             >
 503+ E660 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 503+ E661 3F 48 45 41 >                db      "?HEAP_PTR"               // name string in 7-bit ascii, but
 503+ E665 50 5F 50 54 >
 503+ E669 52          >
 503+ E66A             >                org     $-1                 // alter last byte of Name just above to set
 503+ E669 D2          >                db      {b $} | END_BIT     // msb as name end
 503+ E66A             >
 503+ E66A 58 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 503+ E66C             >Prev_Ptr        defl    Heap_Ptr
 503+ E66C             >
 503+ E66C             >mirror_Ptr      defl    $
 503+ E66C             >
 503+ E66C A9 29       >                dw      Dict_Ptr + 2        // xt
 503+ E66E             >Heap_Ptr        defl    $ - $E000           // save current HP
 503+ E66E             >
 503+ E66E             >Current_HP      defl  $ - $E000             // used to set HP once!
 503+ E66E             >
 503+ E66E             >//              ______________________________________________________________________
 503+ E66E             >//              Dictionary part
 503+ E66E             >
 503+ E66E             >                org     Dict_Ptr
 503+ 29A7             >
 503+ 29A7 6C 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 503+ 29A9             >
 503+ 29A9             >QHEAPP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 503+ 29A9 CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 503+ 29AC             >
 503+ 29AC             >
 503+ 29AC             >                endif           ; ok        // for other definitions it "points" the correct handler
 503+ 29AC             >                // Use of "; ok" to suppress "warning[fwdref]"
 503+ 29AC             >
 503+ 29AC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 504+ 29AC DF 25                        dw      DUP
 505+ 29AE 8F 20                        dw      ZBRANCH
 506+ 29B0 08 00                        dw      QHeap_Skip - $
 507+ 29B2 3D 20 00 63                  dw          LIT, $6300
 508+ 29B6 BA 28                        dw          ULESS
 509+ 29B8              QHeap_Skip:                                          // endif
 510+ 29B8 09 25                        dw      EXIT                        // ;
 511+ 29BA
 512+ 29BA              //  ______________________________________________________________________
 513+ 29BA              //
 514+ 29BA              // ?>heap       n1 -- n2
 515+ 29BA              // heap correction: given an LFA check if it's a real address or a heap-pointer
 516+ 29BA              // address <= 6300h -- except 0000h -- are interpreted as heap-pointers
 517+ 29BA              // and converted to heap address updating MMU7 via FAR
 518+ 29BA                              Colon_Def QTOHEAP, "?>HEAP", is_normal
 518+ 29BA             >                New_Def  QTOHEAP, "?>HEAP", Enter_Ptr, is_normal ; ok
 518+ 29BA             >
 518+ 29BA             >Dict_Ptr        defl    $
 518+ 29BA             >
 518+ 29BA             >//              ______________________________________________________________________
 518+ 29BA             >//              Heap part
 518+ 29BA             >
 518+ 29BA             >
 518+ 29BA             >                org     (Heap_Ptr & $1FFF) + $E000
 518+ E66E             >
 518+ E66E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 518+ E66E             >Latest_Definition defl  Heap_Ptr
 518+ E66E             >
 518+ E66E             >                // dummy db directives used to calculate length of namec
 518+ E66E 3F 3E 48 45 >                db      "?>HEAP"
 518+ E672 41 50       >
 518+ E674             >len_NFA         defl    $ - temp_NFA
 518+ E674             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 518+ E66E             >
 518+ E66E 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 518+ E66F 3F 3E 48 45 >                db      "?>HEAP"               // name string in 7-bit ascii, but
 518+ E673 41 50       >
 518+ E675             >                org     $-1                 // alter last byte of Name just above to set
 518+ E674 D0          >                db      {b $} | END_BIT     // msb as name end
 518+ E675             >
 518+ E675 60 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 518+ E677             >Prev_Ptr        defl    Heap_Ptr
 518+ E677             >
 518+ E677             >mirror_Ptr      defl    $
 518+ E677             >
 518+ E677 BC 29       >                dw      Dict_Ptr + 2        // xt
 518+ E679             >Heap_Ptr        defl    $ - $E000           // save current HP
 518+ E679             >
 518+ E679             >Current_HP      defl  $ - $E000             // used to set HP once!
 518+ E679             >
 518+ E679             >//              ______________________________________________________________________
 518+ E679             >//              Dictionary part
 518+ E679             >
 518+ E679             >                org     Dict_Ptr
 518+ 29BA             >
 518+ 29BA 77 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 518+ 29BC             >
 518+ 29BC             >QTOHEAP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 518+ 29BC CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 518+ 29BF             >
 518+ 29BF             >
 518+ 29BF             >                endif           ; ok        // for other definitions it "points" the correct handler
 518+ 29BF             >                // Use of "; ok" to suppress "warning[fwdref]"
 518+ 29BF             >
 518+ 29BF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 519+ 29BF DF 25                        dw      DUP
 520+ 29C1 A9 29                        dw      QHEAPP
 521+ 29C3 8F 20                        dw      ZBRANCH
 522+ 29C5 04 00                        dw      Q2Heap_Skip - $
 523+ 29C7 9E 29                        dw          FAR
 524+ 29C9              Q2Heap_Skip:                                          // endif
 525+ 29C9 09 25                        dw      EXIT                        // ;
 526+ 29CB
 527+ 29CB              //  ______________________________________________________________________
 528+ 29CB              //
 529+ 29CB              // hp_fetch     -- a
 530+ 29CB                              Colon_Def HP_FETCH, "HP@", is_normal
 530+ 29CB             >                New_Def  HP_FETCH, "HP@", Enter_Ptr, is_normal ; ok
 530+ 29CB             >
 530+ 29CB             >Dict_Ptr        defl    $
 530+ 29CB             >
 530+ 29CB             >//              ______________________________________________________________________
 530+ 29CB             >//              Heap part
 530+ 29CB             >
 530+ 29CB             >
 530+ 29CB             >                org     (Heap_Ptr & $1FFF) + $E000
 530+ E679             >
 530+ E679             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 530+ E679             >Latest_Definition defl  Heap_Ptr
 530+ E679             >
 530+ E679             >                // dummy db directives used to calculate length of namec
 530+ E679 48 50 40    >                db      "HP@"
 530+ E67C             >len_NFA         defl    $ - temp_NFA
 530+ E67C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 530+ E679             >
 530+ E679 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 530+ E67A 48 50 40    >                db      "HP@"               // name string in 7-bit ascii, but
 530+ E67D             >                org     $-1                 // alter last byte of Name just above to set
 530+ E67C C0          >                db      {b $} | END_BIT     // msb as name end
 530+ E67D             >
 530+ E67D 6E 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 530+ E67F             >Prev_Ptr        defl    Heap_Ptr
 530+ E67F             >
 530+ E67F             >mirror_Ptr      defl    $
 530+ E67F             >
 530+ E67F CD 29       >                dw      Dict_Ptr + 2        // xt
 530+ E681             >Heap_Ptr        defl    $ - $E000           // save current HP
 530+ E681             >
 530+ E681             >Current_HP      defl  $ - $E000             // used to set HP once!
 530+ E681             >
 530+ E681             >//              ______________________________________________________________________
 530+ E681             >//              Dictionary part
 530+ E681             >
 530+ E681             >                org     Dict_Ptr
 530+ 29CB             >
 530+ 29CB 7F 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 530+ 29CD             >
 530+ 29CD             >HP_FETCH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 530+ 29CD CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 530+ 29D0             >
 530+ 29D0             >
 530+ 29D0             >                endif           ; ok        // for other definitions it "points" the correct handler
 530+ 29D0             >                // Use of "; ok" to suppress "warning[fwdref]"
 530+ 29D0             >
 530+ 29D0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 531+ 29D0 D4 27 49 26                  dw      HP, FETCH               // hp @
 532+ 29D4 09 25                        dw      EXIT                    // ;
 533+ 29D6
 534+ 29D6              //  ______________________________________________________________________
 535+ 29D6              //
 536+ 29D6              // page-watermark   -- n
 537+ 29D6              // how much a 8K page can be filled..
 538+ 29D6                              Constant_Def PAGE_WATERMARK,   "PAGE-WATERMARK", $1F80
 538+ 29D6             >                New_Def  PAGE_WATERMARK, "PAGE-WATERMARK", Constant_Ptr, is_normal
 538+ 29D6             >
 538+ 29D6             >Dict_Ptr        defl    $
 538+ 29D6             >
 538+ 29D6             >//              ______________________________________________________________________
 538+ 29D6             >//              Heap part
 538+ 29D6             >
 538+ 29D6             >
 538+ 29D6             >                org     (Heap_Ptr & $1FFF) + $E000
 538+ E681             >
 538+ E681             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 538+ E681             >Latest_Definition defl  Heap_Ptr
 538+ E681             >
 538+ E681             >                // dummy db directives used to calculate length of namec
 538+ E681 50 41 47 45 >                db      "PAGE-WATERMARK"
 538+ E685 2D 57 41 54 >
 538+ E689 45 52 4D 41 >
 538+ E68D 52 4B       >
 538+ E68F             >len_NFA         defl    $ - temp_NFA
 538+ E68F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 538+ E681             >
 538+ E681 8E          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 538+ E682 50 41 47 45 >                db      "PAGE-WATERMARK"               // name string in 7-bit ascii, but
 538+ E686 2D 57 41 54 >
 538+ E68A 45 52 4D 41 >
 538+ E68E 52 4B       >
 538+ E690             >                org     $-1                 // alter last byte of Name just above to set
 538+ E68F CB          >                db      {b $} | END_BIT     // msb as name end
 538+ E690             >
 538+ E690 79 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 538+ E692             >Prev_Ptr        defl    Heap_Ptr
 538+ E692             >
 538+ E692             >mirror_Ptr      defl    $
 538+ E692             >
 538+ E692 D8 29       >                dw      Dict_Ptr + 2        // xt
 538+ E694             >Heap_Ptr        defl    $ - $E000           // save current HP
 538+ E694             >
 538+ E694             >Current_HP      defl  $ - $E000             // used to set HP once!
 538+ E694             >
 538+ E694             >//              ______________________________________________________________________
 538+ E694             >//              Dictionary part
 538+ E694             >
 538+ E694             >                org     Dict_Ptr
 538+ 29D6             >
 538+ 29D6 92 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 538+ 29D8             >
 538+ 29D8             >PAGE_WATERMARK:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 538+ 29D8 CD 13 27    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 538+ 29DB             >
 538+ 29DB             >
 538+ 29DB             >                endif           ; ok        // for other definitions it "points" the correct handler
 538+ 29DB             >                // Use of "; ok" to suppress "warning[fwdref]"
 538+ 29DB             >
 538+ 29DB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 538+ 29DB 80 1F       >                dw      $1F80
 539+ 29DD
 540+ 29DD              //  ______________________________________________________________________
 541+ 29DD              //
 542+ 29DD              // skip-hp-page ha -- a
 543+ 29DD                              Colon_Def SKIP_HP_PAGE, "SKIP-HP-PAGE", is_normal
 543+ 29DD             >                New_Def  SKIP_HP_PAGE, "SKIP-HP-PAGE", Enter_Ptr, is_normal ; ok
 543+ 29DD             >
 543+ 29DD             >Dict_Ptr        defl    $
 543+ 29DD             >
 543+ 29DD             >//              ______________________________________________________________________
 543+ 29DD             >//              Heap part
 543+ 29DD             >
 543+ 29DD             >
 543+ 29DD             >                org     (Heap_Ptr & $1FFF) + $E000
 543+ E694             >
 543+ E694             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 543+ E694             >Latest_Definition defl  Heap_Ptr
 543+ E694             >
 543+ E694             >                // dummy db directives used to calculate length of namec
 543+ E694 53 4B 49 50 >                db      "SKIP-HP-PAGE"
 543+ E698 2D 48 50 2D >
 543+ E69C 50 41 47 45 >
 543+ E6A0             >len_NFA         defl    $ - temp_NFA
 543+ E6A0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 543+ E694             >
 543+ E694 8C          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 543+ E695 53 4B 49 50 >                db      "SKIP-HP-PAGE"               // name string in 7-bit ascii, but
 543+ E699 2D 48 50 2D >
 543+ E69D 50 41 47 45 >
 543+ E6A1             >                org     $-1                 // alter last byte of Name just above to set
 543+ E6A0 C5          >                db      {b $} | END_BIT     // msb as name end
 543+ E6A1             >
 543+ E6A1 81 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 543+ E6A3             >Prev_Ptr        defl    Heap_Ptr
 543+ E6A3             >
 543+ E6A3             >mirror_Ptr      defl    $
 543+ E6A3             >
 543+ E6A3 DF 29       >                dw      Dict_Ptr + 2        // xt
 543+ E6A5             >Heap_Ptr        defl    $ - $E000           // save current HP
 543+ E6A5             >
 543+ E6A5             >Current_HP      defl  $ - $E000             // used to set HP once!
 543+ E6A5             >
 543+ E6A5             >//              ______________________________________________________________________
 543+ E6A5             >//              Dictionary part
 543+ E6A5             >
 543+ E6A5             >                org     Dict_Ptr
 543+ 29DD             >
 543+ 29DD A3 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 543+ 29DF             >
 543+ 29DF             >SKIP_HP_PAGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 543+ 29DF CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 543+ 29E2             >
 543+ 29E2             >
 543+ 29E2             >                endif           ; ok        // for other definitions it "points" the correct handler
 543+ 29E2             >                // Use of "; ok" to suppress "warning[fwdref]"
 543+ 29E2             >
 543+ 29E2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 544+ 29E2 CD 29                        dw      HP_FETCH                // hp@
 545+ 29E4 3D 20 FF 1F                  dw      LIT, $1FFF, AND_OP      // 1FFF and
 545+ 29E8 C9 24
 546+ 29EA 5B 25                        dw      PLUS
 547+ 29EC D8 29                        dw      PAGE_WATERMARK
 548+ 29EE D5 28                        dw      GREATER
 549+ 29F0 8F 20                        dw      ZBRANCH
 550+ 29F2 12 00                        dw      Skip_Skip - $   // if
 551+ 29F4 CD 29                        dw      HP_FETCH
 552+ 29F6 3D 20 FF 1F                  dw      LIT, $1FFF, OR_OP
 552+ 29FA D8 24
 553+ 29FC 74 25 82 25                  dw      ONE_PLUS, TWO_PLUS
 554+ 2A00 D4 27 53 26                  dw      HP, STORE
 555+ 2A04              Skip_Skip:
 556+ 2A04 09 25                        dw      EXIT                    // ;
 557+ 2A06              //  ______________________________________________________________________
 558+ 2A06              //
 559+ 2A06              // latest       -- nfa
 560+ 2A06                              Colon_Def LATEST, "LATEST", is_normal
 560+ 2A06             >                New_Def  LATEST, "LATEST", Enter_Ptr, is_normal ; ok
 560+ 2A06             >
 560+ 2A06             >Dict_Ptr        defl    $
 560+ 2A06             >
 560+ 2A06             >//              ______________________________________________________________________
 560+ 2A06             >//              Heap part
 560+ 2A06             >
 560+ 2A06             >
 560+ 2A06             >                org     (Heap_Ptr & $1FFF) + $E000
 560+ E6A5             >
 560+ E6A5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 560+ E6A5             >Latest_Definition defl  Heap_Ptr
 560+ E6A5             >
 560+ E6A5             >                // dummy db directives used to calculate length of namec
 560+ E6A5 4C 41 54 45 >                db      "LATEST"
 560+ E6A9 53 54       >
 560+ E6AB             >len_NFA         defl    $ - temp_NFA
 560+ E6AB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 560+ E6A5             >
 560+ E6A5 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 560+ E6A6 4C 41 54 45 >                db      "LATEST"               // name string in 7-bit ascii, but
 560+ E6AA 53 54       >
 560+ E6AC             >                org     $-1                 // alter last byte of Name just above to set
 560+ E6AB D4          >                db      {b $} | END_BIT     // msb as name end
 560+ E6AC             >
 560+ E6AC 94 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 560+ E6AE             >Prev_Ptr        defl    Heap_Ptr
 560+ E6AE             >
 560+ E6AE             >mirror_Ptr      defl    $
 560+ E6AE             >
 560+ E6AE 08 2A       >                dw      Dict_Ptr + 2        // xt
 560+ E6B0             >Heap_Ptr        defl    $ - $E000           // save current HP
 560+ E6B0             >
 560+ E6B0             >Current_HP      defl  $ - $E000             // used to set HP once!
 560+ E6B0             >
 560+ E6B0             >//              ______________________________________________________________________
 560+ E6B0             >//              Dictionary part
 560+ E6B0             >
 560+ E6B0             >                org     Dict_Ptr
 560+ 2A06             >
 560+ 2A06 AE 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 560+ 2A08             >
 560+ 2A08             >LATEST:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 560+ 2A08 CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 560+ 2A0B             >
 560+ 2A0B             >
 560+ 2A0B             >                endif           ; ok        // for other definitions it "points" the correct handler
 560+ 2A0B             >                // Use of "; ok" to suppress "warning[fwdref]"
 560+ 2A0B             >
 560+ 2A0B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 561+ 2A0B 04 28                        dw      CURRENT                 // current
 562+ 2A0D 49 26 49 26                  dw      FETCH, FETCH            // @ @
 563+ 2A11 9E 29                        dw      FAR // Q TO HEAP
 564+ 2A13 09 25                        dw      EXIT                    // ;
 565+ 2A15
 566+ 2A15              //  ______________________________________________________________________
 567+ 2A15              //
 568+ 2A15              // >body        cfa -- pfa
 569+ 2A15                              Colon_Def TO_BODY, ">BODY", is_normal
 569+ 2A15             >                New_Def  TO_BODY, ">BODY", Enter_Ptr, is_normal ; ok
 569+ 2A15             >
 569+ 2A15             >Dict_Ptr        defl    $
 569+ 2A15             >
 569+ 2A15             >//              ______________________________________________________________________
 569+ 2A15             >//              Heap part
 569+ 2A15             >
 569+ 2A15             >
 569+ 2A15             >                org     (Heap_Ptr & $1FFF) + $E000
 569+ E6B0             >
 569+ E6B0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 569+ E6B0             >Latest_Definition defl  Heap_Ptr
 569+ E6B0             >
 569+ E6B0             >                // dummy db directives used to calculate length of namec
 569+ E6B0 3E 42 4F 44 >                db      ">BODY"
 569+ E6B4 59          >
 569+ E6B5             >len_NFA         defl    $ - temp_NFA
 569+ E6B5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 569+ E6B0             >
 569+ E6B0 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 569+ E6B1 3E 42 4F 44 >                db      ">BODY"               // name string in 7-bit ascii, but
 569+ E6B5 59          >
 569+ E6B6             >                org     $-1                 // alter last byte of Name just above to set
 569+ E6B5 D9          >                db      {b $} | END_BIT     // msb as name end
 569+ E6B6             >
 569+ E6B6 A5 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 569+ E6B8             >Prev_Ptr        defl    Heap_Ptr
 569+ E6B8             >
 569+ E6B8             >mirror_Ptr      defl    $
 569+ E6B8             >
 569+ E6B8 17 2A       >                dw      Dict_Ptr + 2        // xt
 569+ E6BA             >Heap_Ptr        defl    $ - $E000           // save current HP
 569+ E6BA             >
 569+ E6BA             >Current_HP      defl  $ - $E000             // used to set HP once!
 569+ E6BA             >
 569+ E6BA             >//              ______________________________________________________________________
 569+ E6BA             >//              Dictionary part
 569+ E6BA             >
 569+ E6BA             >                org     Dict_Ptr
 569+ 2A15             >
 569+ 2A15 B8 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 569+ 2A17             >
 569+ 2A17             >TO_BODY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 569+ 2A17 CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 569+ 2A1A             >
 569+ 2A1A             >
 569+ 2A1A             >                endif           ; ok        // for other definitions it "points" the correct handler
 569+ 2A1A             >                // Use of "; ok" to suppress "warning[fwdref]"
 569+ 2A1A             >
 569+ 2A1A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 570+ 2A1A 54 27 5B 25                  dw      THREE, PLUS             // cell+ --> 3 +
 571+ 2A1E 09 25                        dw      EXIT                    // ;
 572+ 2A20
 573+ 2A20              //  ______________________________________________________________________
 574+ 2A20              //
 575+ 2A20              // <name        cfa -- nfa
 576+ 2A20                              Colon_Def TO_NAME, "<NAME", is_normal
 576+ 2A20             >                New_Def  TO_NAME, "<NAME", Enter_Ptr, is_normal ; ok
 576+ 2A20             >
 576+ 2A20             >Dict_Ptr        defl    $
 576+ 2A20             >
 576+ 2A20             >//              ______________________________________________________________________
 576+ 2A20             >//              Heap part
 576+ 2A20             >
 576+ 2A20             >
 576+ 2A20             >                org     (Heap_Ptr & $1FFF) + $E000
 576+ E6BA             >
 576+ E6BA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 576+ E6BA             >Latest_Definition defl  Heap_Ptr
 576+ E6BA             >
 576+ E6BA             >                // dummy db directives used to calculate length of namec
 576+ E6BA 3C 4E 41 4D >                db      "<NAME"
 576+ E6BE 45          >
 576+ E6BF             >len_NFA         defl    $ - temp_NFA
 576+ E6BF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 576+ E6BA             >
 576+ E6BA 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 576+ E6BB 3C 4E 41 4D >                db      "<NAME"               // name string in 7-bit ascii, but
 576+ E6BF 45          >
 576+ E6C0             >                org     $-1                 // alter last byte of Name just above to set
 576+ E6BF C5          >                db      {b $} | END_BIT     // msb as name end
 576+ E6C0             >
 576+ E6C0 B0 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 576+ E6C2             >Prev_Ptr        defl    Heap_Ptr
 576+ E6C2             >
 576+ E6C2             >mirror_Ptr      defl    $
 576+ E6C2             >
 576+ E6C2 22 2A       >                dw      Dict_Ptr + 2        // xt
 576+ E6C4             >Heap_Ptr        defl    $ - $E000           // save current HP
 576+ E6C4             >
 576+ E6C4             >Current_HP      defl  $ - $E000             // used to set HP once!
 576+ E6C4             >
 576+ E6C4             >//              ______________________________________________________________________
 576+ E6C4             >//              Dictionary part
 576+ E6C4             >
 576+ E6C4             >                org     Dict_Ptr
 576+ 2A20             >
 576+ 2A20 C2 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 576+ 2A22             >
 576+ 2A22             >TO_NAME:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 576+ 2A22 CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 576+ 2A25             >
 576+ 2A25             >
 576+ 2A25             >                endif           ; ok        // for other definitions it "points" the correct handler
 576+ 2A25             >                // Use of "; ok" to suppress "warning[fwdref]"
 576+ 2A25             >
 576+ 2A25             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 577+ 2A25 8E 25                        dw      CELL_MINUS              // cell-
 578+ 2A27 DF 25 49 26                  dw      DUP, FETCH
 579+ 2A2B A9 29                        dw      QHEAPP
 580+ 2A2D 8F 20                        dw      ZBRANCH
 581+ 2A2F 08 00                        dw      ToName_Skip - $
 582+ 2A31 49 26 9E 29                  dw          FETCH, FAR
 583+ 2A35 8E 25                        dw          CELL_MINUS
 584+ 2A37              ToName_Skip:                                    // endif
 585+ 2A37
 586+ 2A37 7B 25                        dw      ONE_SUBTRACT            // 1-
 587+ 2A39 5B 27                        dw      NEG_ONE                 // -1
 588+ 2A3B 38 29                        dw      TRAVERSE                // traverse
 589+ 2A3D 09 25                        dw      EXIT                    // ;
 590+ 2A3F
 591+ 2A3F              //  ______________________________________________________________________
 592+ 2A3F              //
 593+ 2A3F              // cfa          pfa -- cfa
 594+ 2A3F                              Colon_Def CFA, "CFA", is_normal
 594+ 2A3F             >                New_Def  CFA, "CFA", Enter_Ptr, is_normal ; ok
 594+ 2A3F             >
 594+ 2A3F             >Dict_Ptr        defl    $
 594+ 2A3F             >
 594+ 2A3F             >//              ______________________________________________________________________
 594+ 2A3F             >//              Heap part
 594+ 2A3F             >
 594+ 2A3F             >
 594+ 2A3F             >                org     (Heap_Ptr & $1FFF) + $E000
 594+ E6C4             >
 594+ E6C4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 594+ E6C4             >Latest_Definition defl  Heap_Ptr
 594+ E6C4             >
 594+ E6C4             >                // dummy db directives used to calculate length of namec
 594+ E6C4 43 46 41    >                db      "CFA"
 594+ E6C7             >len_NFA         defl    $ - temp_NFA
 594+ E6C7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 594+ E6C4             >
 594+ E6C4 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 594+ E6C5 43 46 41    >                db      "CFA"               // name string in 7-bit ascii, but
 594+ E6C8             >                org     $-1                 // alter last byte of Name just above to set
 594+ E6C7 C1          >                db      {b $} | END_BIT     // msb as name end
 594+ E6C8             >
 594+ E6C8 BA 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 594+ E6CA             >Prev_Ptr        defl    Heap_Ptr
 594+ E6CA             >
 594+ E6CA             >mirror_Ptr      defl    $
 594+ E6CA             >
 594+ E6CA 41 2A       >                dw      Dict_Ptr + 2        // xt
 594+ E6CC             >Heap_Ptr        defl    $ - $E000           // save current HP
 594+ E6CC             >
 594+ E6CC             >Current_HP      defl  $ - $E000             // used to set HP once!
 594+ E6CC             >
 594+ E6CC             >//              ______________________________________________________________________
 594+ E6CC             >//              Dictionary part
 594+ E6CC             >
 594+ E6CC             >                org     Dict_Ptr
 594+ 2A3F             >
 594+ 2A3F CA 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 594+ 2A41             >
 594+ 2A41             >CFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 594+ 2A41 CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 594+ 2A44             >
 594+ 2A44             >
 594+ 2A44             >                endif           ; ok        // for other definitions it "points" the correct handler
 594+ 2A44             >                // Use of "; ok" to suppress "warning[fwdref]"
 594+ 2A44             >
 594+ 2A44             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 595+ 2A44 54 27 A3 28                  dw      THREE, SUBTRACT         // 3 -
 596+ 2A48 09 25                        dw      EXIT                    // ;
 597+ 2A4A
 598+ 2A4A              //  ______________________________________________________________________
 599+ 2A4A              //
 600+ 2A4A              // nfa          pfa -- nfa
 601+ 2A4A                              Colon_Def NFA, "NFA", is_normal
 601+ 2A4A             >                New_Def  NFA, "NFA", Enter_Ptr, is_normal ; ok
 601+ 2A4A             >
 601+ 2A4A             >Dict_Ptr        defl    $
 601+ 2A4A             >
 601+ 2A4A             >//              ______________________________________________________________________
 601+ 2A4A             >//              Heap part
 601+ 2A4A             >
 601+ 2A4A             >
 601+ 2A4A             >                org     (Heap_Ptr & $1FFF) + $E000
 601+ E6CC             >
 601+ E6CC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 601+ E6CC             >Latest_Definition defl  Heap_Ptr
 601+ E6CC             >
 601+ E6CC             >                // dummy db directives used to calculate length of namec
 601+ E6CC 4E 46 41    >                db      "NFA"
 601+ E6CF             >len_NFA         defl    $ - temp_NFA
 601+ E6CF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 601+ E6CC             >
 601+ E6CC 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 601+ E6CD 4E 46 41    >                db      "NFA"               // name string in 7-bit ascii, but
 601+ E6D0             >                org     $-1                 // alter last byte of Name just above to set
 601+ E6CF C1          >                db      {b $} | END_BIT     // msb as name end
 601+ E6D0             >
 601+ E6D0 C4 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 601+ E6D2             >Prev_Ptr        defl    Heap_Ptr
 601+ E6D2             >
 601+ E6D2             >mirror_Ptr      defl    $
 601+ E6D2             >
 601+ E6D2 4C 2A       >                dw      Dict_Ptr + 2        // xt
 601+ E6D4             >Heap_Ptr        defl    $ - $E000           // save current HP
 601+ E6D4             >
 601+ E6D4             >Current_HP      defl  $ - $E000             // used to set HP once!
 601+ E6D4             >
 601+ E6D4             >//              ______________________________________________________________________
 601+ E6D4             >//              Dictionary part
 601+ E6D4             >
 601+ E6D4             >                org     Dict_Ptr
 601+ 2A4A             >
 601+ 2A4A D2 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 601+ 2A4C             >
 601+ 2A4C             >NFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 601+ 2A4C CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 601+ 2A4F             >
 601+ 2A4F             >
 601+ 2A4F             >                endif           ; ok        // for other definitions it "points" the correct handler
 601+ 2A4F             >                // Use of "; ok" to suppress "warning[fwdref]"
 601+ 2A4F             >
 601+ 2A4F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 602+ 2A4F 41 2A                        dw      CFA                     // cfa
 603+ 2A51 22 2A                        dw      TO_NAME                 // traverse
 604+ 2A53 09 25                        dw      EXIT                    // ;
 605+ 2A55
 606+ 2A55              //  ______________________________________________________________________
 607+ 2A55              //
 608+ 2A55              // lfa          pfa -- lfa
 609+ 2A55                              Colon_Def LFA, "LFA", is_normal
 609+ 2A55             >                New_Def  LFA, "LFA", Enter_Ptr, is_normal ; ok
 609+ 2A55             >
 609+ 2A55             >Dict_Ptr        defl    $
 609+ 2A55             >
 609+ 2A55             >//              ______________________________________________________________________
 609+ 2A55             >//              Heap part
 609+ 2A55             >
 609+ 2A55             >
 609+ 2A55             >                org     (Heap_Ptr & $1FFF) + $E000
 609+ E6D4             >
 609+ E6D4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 609+ E6D4             >Latest_Definition defl  Heap_Ptr
 609+ E6D4             >
 609+ E6D4             >                // dummy db directives used to calculate length of namec
 609+ E6D4 4C 46 41    >                db      "LFA"
 609+ E6D7             >len_NFA         defl    $ - temp_NFA
 609+ E6D7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 609+ E6D4             >
 609+ E6D4 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 609+ E6D5 4C 46 41    >                db      "LFA"               // name string in 7-bit ascii, but
 609+ E6D8             >                org     $-1                 // alter last byte of Name just above to set
 609+ E6D7 C1          >                db      {b $} | END_BIT     // msb as name end
 609+ E6D8             >
 609+ E6D8 CC 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 609+ E6DA             >Prev_Ptr        defl    Heap_Ptr
 609+ E6DA             >
 609+ E6DA             >mirror_Ptr      defl    $
 609+ E6DA             >
 609+ E6DA 57 2A       >                dw      Dict_Ptr + 2        // xt
 609+ E6DC             >Heap_Ptr        defl    $ - $E000           // save current HP
 609+ E6DC             >
 609+ E6DC             >Current_HP      defl  $ - $E000             // used to set HP once!
 609+ E6DC             >
 609+ E6DC             >//              ______________________________________________________________________
 609+ E6DC             >//              Dictionary part
 609+ E6DC             >
 609+ E6DC             >                org     Dict_Ptr
 609+ 2A55             >
 609+ 2A55 DA 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 609+ 2A57             >
 609+ 2A57             >LFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 609+ 2A57 CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 609+ 2A5A             >
 609+ 2A5A             >
 609+ 2A5A             >                endif           ; ok        // for other definitions it "points" the correct handler
 609+ 2A5A             >                // Use of "; ok" to suppress "warning[fwdref]"
 609+ 2A5A             >
 609+ 2A5A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 610+ 2A5A 4C 2A                        dw      NFA                     // nfa
 611+ 2A5C 46 27                        dw      ONE                     // 1
 612+ 2A5E 38 29                        dw      TRAVERSE                // traverse
 613+ 2A60 74 25                        dw      ONE_PLUS                // 1+
 614+ 2A62 09 25                        dw      EXIT                    // ;
 615+ 2A64
 616+ 2A64              //  ______________________________________________________________________
 617+ 2A64              //
 618+ 2A64              // pfa          nfa -- pfa
 619+ 2A64                              Colon_Def PFA, "PFA", is_normal
 619+ 2A64             >                New_Def  PFA, "PFA", Enter_Ptr, is_normal ; ok
 619+ 2A64             >
 619+ 2A64             >Dict_Ptr        defl    $
 619+ 2A64             >
 619+ 2A64             >//              ______________________________________________________________________
 619+ 2A64             >//              Heap part
 619+ 2A64             >
 619+ 2A64             >
 619+ 2A64             >                org     (Heap_Ptr & $1FFF) + $E000
 619+ E6DC             >
 619+ E6DC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 619+ E6DC             >Latest_Definition defl  Heap_Ptr
 619+ E6DC             >
 619+ E6DC             >                // dummy db directives used to calculate length of namec
 619+ E6DC 50 46 41    >                db      "PFA"
 619+ E6DF             >len_NFA         defl    $ - temp_NFA
 619+ E6DF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 619+ E6DC             >
 619+ E6DC 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 619+ E6DD 50 46 41    >                db      "PFA"               // name string in 7-bit ascii, but
 619+ E6E0             >                org     $-1                 // alter last byte of Name just above to set
 619+ E6DF C1          >                db      {b $} | END_BIT     // msb as name end
 619+ E6E0             >
 619+ E6E0 D4 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 619+ E6E2             >Prev_Ptr        defl    Heap_Ptr
 619+ E6E2             >
 619+ E6E2             >mirror_Ptr      defl    $
 619+ E6E2             >
 619+ E6E2 66 2A       >                dw      Dict_Ptr + 2        // xt
 619+ E6E4             >Heap_Ptr        defl    $ - $E000           // save current HP
 619+ E6E4             >
 619+ E6E4             >Current_HP      defl  $ - $E000             // used to set HP once!
 619+ E6E4             >
 619+ E6E4             >//              ______________________________________________________________________
 619+ E6E4             >//              Dictionary part
 619+ E6E4             >
 619+ E6E4             >                org     Dict_Ptr
 619+ 2A64             >
 619+ 2A64 E2 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 619+ 2A66             >
 619+ 2A66             >PFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 619+ 2A66 CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 619+ 2A69             >
 619+ 2A69             >
 619+ 2A69             >                endif           ; ok        // for other definitions it "points" the correct handler
 619+ 2A69             >                // Use of "; ok" to suppress "warning[fwdref]"
 619+ 2A69             >
 619+ 2A69             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 620+ 2A69 BC 29                        dw      QTOHEAP
 621+ 2A6B 46 27                        dw      ONE                     // 1
 622+ 2A6D 38 29                        dw      TRAVERSE                // traverse
 623+ 2A6F 74 25                        dw      ONE_PLUS                // 1+
 624+ 2A71 8A 25                        dw      CELL_PLUS               // cell+
 625+ 2A73 8D 29                        dw      QMMU7
 626+ 2A75 8F 20                        dw      ZBRANCH
 627+ 2A77 0E 00                        dw      PFA_Skip - $
 628+ 2A79 55 29                        dw          MMU7_FETCH
 629+ 2A7B 46 27 A3 28                  dw          ONE, SUBTRACT
 630+ 2A7F 8F 20                        dw          ZBRANCH
 631+ 2A81 04 00                        dw          PFA_Skip - $
 632+ 2A83 49 26                        dw              FETCH
 633+ 2A85              PFA_Skip:                                    // endif
 634+ 2A85 17 2A                        dw      TO_BODY                 // >body
 635+ 2A87 09 25                        dw      EXIT                    // ;
 636+ 2A89
 637+ 2A89              //  ______________________________________________________________________
 638+ 2A89              //
 639+ 2A89              // !csp         --
 640+ 2A89              // store in user variable CSP current value of SP. Used at compile-time for syntax checkng
 641+ 2A89                              Colon_Def STORE_CSP, "!CSP", is_normal
 641+ 2A89             >                New_Def  STORE_CSP, "!CSP", Enter_Ptr, is_normal ; ok
 641+ 2A89             >
 641+ 2A89             >Dict_Ptr        defl    $
 641+ 2A89             >
 641+ 2A89             >//              ______________________________________________________________________
 641+ 2A89             >//              Heap part
 641+ 2A89             >
 641+ 2A89             >
 641+ 2A89             >                org     (Heap_Ptr & $1FFF) + $E000
 641+ E6E4             >
 641+ E6E4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 641+ E6E4             >Latest_Definition defl  Heap_Ptr
 641+ E6E4             >
 641+ E6E4             >                // dummy db directives used to calculate length of namec
 641+ E6E4 21 43 53 50 >                db      "!CSP"
 641+ E6E8             >len_NFA         defl    $ - temp_NFA
 641+ E6E8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 641+ E6E4             >
 641+ E6E4 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 641+ E6E5 21 43 53 50 >                db      "!CSP"               // name string in 7-bit ascii, but
 641+ E6E9             >                org     $-1                 // alter last byte of Name just above to set
 641+ E6E8 D0          >                db      {b $} | END_BIT     // msb as name end
 641+ E6E9             >
 641+ E6E9 DC 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 641+ E6EB             >Prev_Ptr        defl    Heap_Ptr
 641+ E6EB             >
 641+ E6EB             >mirror_Ptr      defl    $
 641+ E6EB             >
 641+ E6EB 8B 2A       >                dw      Dict_Ptr + 2        // xt
 641+ E6ED             >Heap_Ptr        defl    $ - $E000           // save current HP
 641+ E6ED             >
 641+ E6ED             >Current_HP      defl  $ - $E000             // used to set HP once!
 641+ E6ED             >
 641+ E6ED             >//              ______________________________________________________________________
 641+ E6ED             >//              Dictionary part
 641+ E6ED             >
 641+ E6ED             >                org     Dict_Ptr
 641+ 2A89             >
 641+ 2A89 EB 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 641+ 2A8B             >
 641+ 2A8B             >STORE_CSP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 641+ 2A8B CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 641+ 2A8E             >
 641+ 2A8E             >
 641+ 2A8E             >                endif           ; ok        // for other definitions it "points" the correct handler
 641+ 2A8E             >                // Use of "; ok" to suppress "warning[fwdref]"
 641+ 2A8E             >
 641+ 2A8E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 642+ 2A8E F0 24                        dw      SPFETCH                 // sp@
 643+ 2A90 22 28 53 26                  dw      CSP, STORE              // csp !
 644+ 2A94 09 25                        dw      EXIT                    // ;
 645+ 2A96
 646+ 2A96              //  ______________________________________________________________________
 647+ 2A96              //
 648+ 2A96              // ?error       f n --
 649+ 2A96              // rase error n if flag f it true
 650+ 2A96                              Colon_Def QERROR, "?ERROR", is_normal
 650+ 2A96             >                New_Def  QERROR, "?ERROR", Enter_Ptr, is_normal ; ok
 650+ 2A96             >
 650+ 2A96             >Dict_Ptr        defl    $
 650+ 2A96             >
 650+ 2A96             >//              ______________________________________________________________________
 650+ 2A96             >//              Heap part
 650+ 2A96             >
 650+ 2A96             >
 650+ 2A96             >                org     (Heap_Ptr & $1FFF) + $E000
 650+ E6ED             >
 650+ E6ED             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 650+ E6ED             >Latest_Definition defl  Heap_Ptr
 650+ E6ED             >
 650+ E6ED             >                // dummy db directives used to calculate length of namec
 650+ E6ED 3F 45 52 52 >                db      "?ERROR"
 650+ E6F1 4F 52       >
 650+ E6F3             >len_NFA         defl    $ - temp_NFA
 650+ E6F3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 650+ E6ED             >
 650+ E6ED 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 650+ E6EE 3F 45 52 52 >                db      "?ERROR"               // name string in 7-bit ascii, but
 650+ E6F2 4F 52       >
 650+ E6F4             >                org     $-1                 // alter last byte of Name just above to set
 650+ E6F3 D2          >                db      {b $} | END_BIT     // msb as name end
 650+ E6F4             >
 650+ E6F4 E4 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 650+ E6F6             >Prev_Ptr        defl    Heap_Ptr
 650+ E6F6             >
 650+ E6F6             >mirror_Ptr      defl    $
 650+ E6F6             >
 650+ E6F6 98 2A       >                dw      Dict_Ptr + 2        // xt
 650+ E6F8             >Heap_Ptr        defl    $ - $E000           // save current HP
 650+ E6F8             >
 650+ E6F8             >Current_HP      defl  $ - $E000             // used to set HP once!
 650+ E6F8             >
 650+ E6F8             >//              ______________________________________________________________________
 650+ E6F8             >//              Dictionary part
 650+ E6F8             >
 650+ E6F8             >                org     Dict_Ptr
 650+ 2A96             >
 650+ 2A96 F6 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 650+ 2A98             >
 650+ 2A98             >QERROR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 650+ 2A98 CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 650+ 2A9B             >
 650+ 2A9B             >
 650+ 2A9B             >                endif           ; ok        // for other definitions it "points" the correct handler
 650+ 2A9B             >                // Use of "; ok" to suppress "warning[fwdref]"
 650+ 2A9B             >
 650+ 2A9B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 651+ 2A9B D8 25                        dw      SWAP                    // swap
 652+ 2A9D                                                              // if
 653+ 2A9D 8F 20                        dw      ZBRANCH
 654+ 2A9F 08 00                        dw      QError_Else - $
 655+ 2AA1 D2 2F                        dw          ERROR               //      error  ( is a forward-ref )
 656+ 2AA3                                                              // else
 657+ 2AA3 82 20                        dw      BRANCH
 658+ 2AA5 04 00                        dw      QError_Endif - $
 659+ 2AA7              QError_Else:
 660+ 2AA7 C4 25                        dw          DROP                //      drop
 661+ 2AA9              QError_Endif:                                   // endif
 662+ 2AA9 09 25                        dw      EXIT                    // ;
 663+ 2AAB
 664+ 2AAB              //  ______________________________________________________________________
 665+ 2AAB              //
 666+ 2AAB              // ?comp       --
 667+ 2AAB              // raise msg #17 if not compiling
 668+ 2AAB                              Colon_Def QCOMP, "?COMP", is_normal
 668+ 2AAB             >                New_Def  QCOMP, "?COMP", Enter_Ptr, is_normal ; ok
 668+ 2AAB             >
 668+ 2AAB             >Dict_Ptr        defl    $
 668+ 2AAB             >
 668+ 2AAB             >//              ______________________________________________________________________
 668+ 2AAB             >//              Heap part
 668+ 2AAB             >
 668+ 2AAB             >
 668+ 2AAB             >                org     (Heap_Ptr & $1FFF) + $E000
 668+ E6F8             >
 668+ E6F8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 668+ E6F8             >Latest_Definition defl  Heap_Ptr
 668+ E6F8             >
 668+ E6F8             >                // dummy db directives used to calculate length of namec
 668+ E6F8 3F 43 4F 4D >                db      "?COMP"
 668+ E6FC 50          >
 668+ E6FD             >len_NFA         defl    $ - temp_NFA
 668+ E6FD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 668+ E6F8             >
 668+ E6F8 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 668+ E6F9 3F 43 4F 4D >                db      "?COMP"               // name string in 7-bit ascii, but
 668+ E6FD 50          >
 668+ E6FE             >                org     $-1                 // alter last byte of Name just above to set
 668+ E6FD D0          >                db      {b $} | END_BIT     // msb as name end
 668+ E6FE             >
 668+ E6FE ED 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 668+ E700             >Prev_Ptr        defl    Heap_Ptr
 668+ E700             >
 668+ E700             >mirror_Ptr      defl    $
 668+ E700             >
 668+ E700 AD 2A       >                dw      Dict_Ptr + 2        // xt
 668+ E702             >Heap_Ptr        defl    $ - $E000           // save current HP
 668+ E702             >
 668+ E702             >Current_HP      defl  $ - $E000             // used to set HP once!
 668+ E702             >
 668+ E702             >//              ______________________________________________________________________
 668+ E702             >//              Dictionary part
 668+ E702             >
 668+ E702             >                org     Dict_Ptr
 668+ 2AAB             >
 668+ 2AAB 00 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 668+ 2AAD             >
 668+ 2AAD             >QCOMP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 668+ 2AAD CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 668+ 2AB0             >
 668+ 2AB0             >
 668+ 2AB0             >                endif           ; ok        // for other definitions it "points" the correct handler
 668+ 2AB0             >                // Use of "; ok" to suppress "warning[fwdref]"
 668+ 2AB0             >
 668+ 2AB0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 669+ 2AB0 0A 28 49 26                  dw      STATE, FETCH            // state @
 670+ 2AB4 2E 25                        dw      ZEQUAL                  // 0=
 671+ 2AB6 3D 20 11 00                  dw      LIT, 17                 // 17  ( can't be executed )
 672+ 2ABA 98 2A                        dw      QERROR                  // ?error
 673+ 2ABC 09 25                        dw      EXIT                    // ;
 674+ 2ABE
 675+ 2ABE              //  ______________________________________________________________________
 676+ 2ABE              //
 677+ 2ABE              // ?exec       --
 678+ 2ABE              // raise msg #18 if compiling
 679+ 2ABE                              Colon_Def QEXEC, "?EXEC", is_normal
 679+ 2ABE             >                New_Def  QEXEC, "?EXEC", Enter_Ptr, is_normal ; ok
 679+ 2ABE             >
 679+ 2ABE             >Dict_Ptr        defl    $
 679+ 2ABE             >
 679+ 2ABE             >//              ______________________________________________________________________
 679+ 2ABE             >//              Heap part
 679+ 2ABE             >
 679+ 2ABE             >
 679+ 2ABE             >                org     (Heap_Ptr & $1FFF) + $E000
 679+ E702             >
 679+ E702             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 679+ E702             >Latest_Definition defl  Heap_Ptr
 679+ E702             >
 679+ E702             >                // dummy db directives used to calculate length of namec
 679+ E702 3F 45 58 45 >                db      "?EXEC"
 679+ E706 43          >
 679+ E707             >len_NFA         defl    $ - temp_NFA
 679+ E707             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 679+ E702             >
 679+ E702 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 679+ E703 3F 45 58 45 >                db      "?EXEC"               // name string in 7-bit ascii, but
 679+ E707 43          >
 679+ E708             >                org     $-1                 // alter last byte of Name just above to set
 679+ E707 C3          >                db      {b $} | END_BIT     // msb as name end
 679+ E708             >
 679+ E708 F8 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 679+ E70A             >Prev_Ptr        defl    Heap_Ptr
 679+ E70A             >
 679+ E70A             >mirror_Ptr      defl    $
 679+ E70A             >
 679+ E70A C0 2A       >                dw      Dict_Ptr + 2        // xt
 679+ E70C             >Heap_Ptr        defl    $ - $E000           // save current HP
 679+ E70C             >
 679+ E70C             >Current_HP      defl  $ - $E000             // used to set HP once!
 679+ E70C             >
 679+ E70C             >//              ______________________________________________________________________
 679+ E70C             >//              Dictionary part
 679+ E70C             >
 679+ E70C             >                org     Dict_Ptr
 679+ 2ABE             >
 679+ 2ABE 0A 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 679+ 2AC0             >
 679+ 2AC0             >QEXEC:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 679+ 2AC0 CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 679+ 2AC3             >
 679+ 2AC3             >
 679+ 2AC3             >                endif           ; ok        // for other definitions it "points" the correct handler
 679+ 2AC3             >                // Use of "; ok" to suppress "warning[fwdref]"
 679+ 2AC3             >
 679+ 2AC3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 680+ 2AC3 0A 28 49 26                  dw      STATE, FETCH            // state @
 681+ 2AC7 3D 20 12 00                  dw      LIT, 18                 // 18  ( can't be compiled )
 682+ 2ACB 98 2A                        dw      QERROR                  // ?error
 683+ 2ACD 09 25                        dw      EXIT                    // ;
 684+ 2ACF
 685+ 2ACF              //  ______________________________________________________________________
 686+ 2ACF              //
 687+ 2ACF              // ?pairs       n1 n2 --
 688+ 2ACF              // raise msg #19 if n1 != n2. Compiler pushes some placeholder to stack for syntax checking
 689+ 2ACF                              Colon_Def QPAIRS, "?PAIRS", is_normal
 689+ 2ACF             >                New_Def  QPAIRS, "?PAIRS", Enter_Ptr, is_normal ; ok
 689+ 2ACF             >
 689+ 2ACF             >Dict_Ptr        defl    $
 689+ 2ACF             >
 689+ 2ACF             >//              ______________________________________________________________________
 689+ 2ACF             >//              Heap part
 689+ 2ACF             >
 689+ 2ACF             >
 689+ 2ACF             >                org     (Heap_Ptr & $1FFF) + $E000
 689+ E70C             >
 689+ E70C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 689+ E70C             >Latest_Definition defl  Heap_Ptr
 689+ E70C             >
 689+ E70C             >                // dummy db directives used to calculate length of namec
 689+ E70C 3F 50 41 49 >                db      "?PAIRS"
 689+ E710 52 53       >
 689+ E712             >len_NFA         defl    $ - temp_NFA
 689+ E712             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 689+ E70C             >
 689+ E70C 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 689+ E70D 3F 50 41 49 >                db      "?PAIRS"               // name string in 7-bit ascii, but
 689+ E711 52 53       >
 689+ E713             >                org     $-1                 // alter last byte of Name just above to set
 689+ E712 D3          >                db      {b $} | END_BIT     // msb as name end
 689+ E713             >
 689+ E713 02 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 689+ E715             >Prev_Ptr        defl    Heap_Ptr
 689+ E715             >
 689+ E715             >mirror_Ptr      defl    $
 689+ E715             >
 689+ E715 D1 2A       >                dw      Dict_Ptr + 2        // xt
 689+ E717             >Heap_Ptr        defl    $ - $E000           // save current HP
 689+ E717             >
 689+ E717             >Current_HP      defl  $ - $E000             // used to set HP once!
 689+ E717             >
 689+ E717             >//              ______________________________________________________________________
 689+ E717             >//              Dictionary part
 689+ E717             >
 689+ E717             >                org     Dict_Ptr
 689+ 2ACF             >
 689+ 2ACF 15 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 689+ 2AD1             >
 689+ 2AD1             >QPAIRS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 689+ 2AD1 CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 689+ 2AD4             >
 689+ 2AD4             >
 689+ 2AD4             >                endif           ; ok        // for other definitions it "points" the correct handler
 689+ 2AD4             >                // Use of "; ok" to suppress "warning[fwdref]"
 689+ 2AD4             >
 689+ 2AD4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 690+ 2AD4 A3 28                        dw      SUBTRACT                // -
 691+ 2AD6 3D 20 13 00                  dw      LIT, 19                 // 18  ( syntax error )
 692+ 2ADA 98 2A                        dw      QERROR                  // ?error
 693+ 2ADC 09 25                        dw      EXIT                    // ;
 694+ 2ADE
 695+ 2ADE              //  ______________________________________________________________________
 696+ 2ADE              //
 697+ 2ADE              // ?csp       --
 698+ 2ADE              // raise msg #20 if surrent SP in not what previously saved in CSP.
 699+ 2ADE              // Compiler relies on that for  syntax checking of structures
 700+ 2ADE                              Colon_Def QCSP, "?CSP", is_normal
 700+ 2ADE             >                New_Def  QCSP, "?CSP", Enter_Ptr, is_normal ; ok
 700+ 2ADE             >
 700+ 2ADE             >Dict_Ptr        defl    $
 700+ 2ADE             >
 700+ 2ADE             >//              ______________________________________________________________________
 700+ 2ADE             >//              Heap part
 700+ 2ADE             >
 700+ 2ADE             >
 700+ 2ADE             >                org     (Heap_Ptr & $1FFF) + $E000
 700+ E717             >
 700+ E717             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 700+ E717             >Latest_Definition defl  Heap_Ptr
 700+ E717             >
 700+ E717             >                // dummy db directives used to calculate length of namec
 700+ E717 3F 43 53 50 >                db      "?CSP"
 700+ E71B             >len_NFA         defl    $ - temp_NFA
 700+ E71B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 700+ E717             >
 700+ E717 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 700+ E718 3F 43 53 50 >                db      "?CSP"               // name string in 7-bit ascii, but
 700+ E71C             >                org     $-1                 // alter last byte of Name just above to set
 700+ E71B D0          >                db      {b $} | END_BIT     // msb as name end
 700+ E71C             >
 700+ E71C 0C 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 700+ E71E             >Prev_Ptr        defl    Heap_Ptr
 700+ E71E             >
 700+ E71E             >mirror_Ptr      defl    $
 700+ E71E             >
 700+ E71E E0 2A       >                dw      Dict_Ptr + 2        // xt
 700+ E720             >Heap_Ptr        defl    $ - $E000           // save current HP
 700+ E720             >
 700+ E720             >Current_HP      defl  $ - $E000             // used to set HP once!
 700+ E720             >
 700+ E720             >//              ______________________________________________________________________
 700+ E720             >//              Dictionary part
 700+ E720             >
 700+ E720             >                org     Dict_Ptr
 700+ 2ADE             >
 700+ 2ADE 1E 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 700+ 2AE0             >
 700+ 2AE0             >QCSP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 700+ 2AE0 CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 700+ 2AE3             >
 700+ 2AE3             >
 700+ 2AE3             >                endif           ; ok        // for other definitions it "points" the correct handler
 700+ 2AE3             >                // Use of "; ok" to suppress "warning[fwdref]"
 700+ 2AE3             >
 700+ 2AE3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 701+ 2AE3 F0 24                        dw      SPFETCH                 // sp@
 702+ 2AE5 22 28 49 26                  dw      CSP, FETCH              // csp @
 703+ 2AE9 A3 28                        dw      SUBTRACT                // -
 704+ 2AEB 3D 20 14 00                  dw      LIT, 20                 // 20  ( bad definition end )
 705+ 2AEF 98 2A                        dw      QERROR                  // ?error
 706+ 2AF1 09 25                        dw      EXIT                    // ;
 707+ 2AF3
 708+ 2AF3              //  ______________________________________________________________________
 709+ 2AF3              //
 710+ 2AF3              // ?loading      --
 711+ 2AF3              // raise msg #22 if not loading
 712+ 2AF3                              Colon_Def QLOADING, "?LOADING", is_normal
 712+ 2AF3             >                New_Def  QLOADING, "?LOADING", Enter_Ptr, is_normal ; ok
 712+ 2AF3             >
 712+ 2AF3             >Dict_Ptr        defl    $
 712+ 2AF3             >
 712+ 2AF3             >//              ______________________________________________________________________
 712+ 2AF3             >//              Heap part
 712+ 2AF3             >
 712+ 2AF3             >
 712+ 2AF3             >                org     (Heap_Ptr & $1FFF) + $E000
 712+ E720             >
 712+ E720             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 712+ E720             >Latest_Definition defl  Heap_Ptr
 712+ E720             >
 712+ E720             >                // dummy db directives used to calculate length of namec
 712+ E720 3F 4C 4F 41 >                db      "?LOADING"
 712+ E724 44 49 4E 47 >
 712+ E728             >len_NFA         defl    $ - temp_NFA
 712+ E728             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 712+ E720             >
 712+ E720 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 712+ E721 3F 4C 4F 41 >                db      "?LOADING"               // name string in 7-bit ascii, but
 712+ E725 44 49 4E 47 >
 712+ E729             >                org     $-1                 // alter last byte of Name just above to set
 712+ E728 C7          >                db      {b $} | END_BIT     // msb as name end
 712+ E729             >
 712+ E729 17 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 712+ E72B             >Prev_Ptr        defl    Heap_Ptr
 712+ E72B             >
 712+ E72B             >mirror_Ptr      defl    $
 712+ E72B             >
 712+ E72B F5 2A       >                dw      Dict_Ptr + 2        // xt
 712+ E72D             >Heap_Ptr        defl    $ - $E000           // save current HP
 712+ E72D             >
 712+ E72D             >Current_HP      defl  $ - $E000             // used to set HP once!
 712+ E72D             >
 712+ E72D             >//              ______________________________________________________________________
 712+ E72D             >//              Dictionary part
 712+ E72D             >
 712+ E72D             >                org     Dict_Ptr
 712+ 2AF3             >
 712+ 2AF3 2B 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 712+ 2AF5             >
 712+ 2AF5             >QLOADING:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 712+ 2AF5 CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 712+ 2AF8             >
 712+ 2AF8             >
 712+ 2AF8             >                endif           ; ok        // for other definitions it "points" the correct handler
 712+ 2AF8             >                // Use of "; ok" to suppress "warning[fwdref]"
 712+ 2AF8             >
 712+ 2AF8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 713+ 2AF8 E0 27 49 26                  dw      BLK, FETCH              // blk @
 714+ 2AFC 2E 25                        dw      ZEQUAL                  // 0=
 715+ 2AFE 3D 20 16 00                  dw      LIT, 22                 // 22  ( aren't loading now )
 716+ 2B02 98 2A                        dw      QERROR                  // ?error
 717+ 2B04 09 25                        dw      EXIT                    // ;
 718+ 2B06
 719+ 2B06              //  ______________________________________________________________________
 720+ 2B06              //
 721+ 2B06              // compile      --
 722+ 2B06              // compiles the following word
 723+ 2B06                              Colon_Def COMPILE, "COMPILE", is_normal
 723+ 2B06             >                New_Def  COMPILE, "COMPILE", Enter_Ptr, is_normal ; ok
 723+ 2B06             >
 723+ 2B06             >Dict_Ptr        defl    $
 723+ 2B06             >
 723+ 2B06             >//              ______________________________________________________________________
 723+ 2B06             >//              Heap part
 723+ 2B06             >
 723+ 2B06             >
 723+ 2B06             >                org     (Heap_Ptr & $1FFF) + $E000
 723+ E72D             >
 723+ E72D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 723+ E72D             >Latest_Definition defl  Heap_Ptr
 723+ E72D             >
 723+ E72D             >                // dummy db directives used to calculate length of namec
 723+ E72D 43 4F 4D 50 >                db      "COMPILE"
 723+ E731 49 4C 45    >
 723+ E734             >len_NFA         defl    $ - temp_NFA
 723+ E734             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 723+ E72D             >
 723+ E72D 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 723+ E72E 43 4F 4D 50 >                db      "COMPILE"               // name string in 7-bit ascii, but
 723+ E732 49 4C 45    >
 723+ E735             >                org     $-1                 // alter last byte of Name just above to set
 723+ E734 C5          >                db      {b $} | END_BIT     // msb as name end
 723+ E735             >
 723+ E735 20 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 723+ E737             >Prev_Ptr        defl    Heap_Ptr
 723+ E737             >
 723+ E737             >mirror_Ptr      defl    $
 723+ E737             >
 723+ E737 08 2B       >                dw      Dict_Ptr + 2        // xt
 723+ E739             >Heap_Ptr        defl    $ - $E000           // save current HP
 723+ E739             >
 723+ E739             >Current_HP      defl  $ - $E000             // used to set HP once!
 723+ E739             >
 723+ E739             >//              ______________________________________________________________________
 723+ E739             >//              Dictionary part
 723+ E739             >
 723+ E739             >                org     Dict_Ptr
 723+ 2B06             >
 723+ 2B06 37 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 723+ 2B08             >
 723+ 2B08             >COMPILE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 723+ 2B08 CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 723+ 2B0B             >
 723+ 2B0B             >
 723+ 2B0B             >                endif           ; ok        // for other definitions it "points" the correct handler
 723+ 2B0B             >                // Use of "; ok" to suppress "warning[fwdref]"
 723+ 2B0B             >
 723+ 2B0B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 724+ 2B0B AD 2A                        dw      QCOMP                   // ?comp
 725+ 2B0D 1E 25                        dw      R_TO                    // r>
 726+ 2B0F DF 25 8A 25                  dw      DUP, CELL_PLUS          // dup, cell+
 727+ 2B13 13 25                        dw      TO_R                    // >r
 728+ 2B15 49 26 7A 28                  dw      FETCH, COMMA            // @ ,
 729+ 2B19 09 25                        dw      EXIT                    // ;
 730+ 2B1B
 731+ 2B1B              //  ______________________________________________________________________
 732+ 2B1B              //
 733+ 2B1B              // compile,     --
 734+ 2B1B              // compiles the following word
 735+ 2B1B                              Colon_Def COMPILE_XT, "COMPILE,", is_normal
 735+ 2B1B             >                New_Def  COMPILE_XT, "COMPILE,", Enter_Ptr, is_normal ; ok
 735+ 2B1B             >
 735+ 2B1B             >Dict_Ptr        defl    $
 735+ 2B1B             >
 735+ 2B1B             >//              ______________________________________________________________________
 735+ 2B1B             >//              Heap part
 735+ 2B1B             >
 735+ 2B1B             >
 735+ 2B1B             >                org     (Heap_Ptr & $1FFF) + $E000
 735+ E739             >
 735+ E739             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 735+ E739             >Latest_Definition defl  Heap_Ptr
 735+ E739             >
 735+ E739             >                // dummy db directives used to calculate length of namec
 735+ E739 43 4F 4D 50 >                db      "COMPILE,"
 735+ E73D 49 4C 45 2C >
 735+ E741             >len_NFA         defl    $ - temp_NFA
 735+ E741             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 735+ E739             >
 735+ E739 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 735+ E73A 43 4F 4D 50 >                db      "COMPILE,"               // name string in 7-bit ascii, but
 735+ E73E 49 4C 45 2C >
 735+ E742             >                org     $-1                 // alter last byte of Name just above to set
 735+ E741 AC          >                db      {b $} | END_BIT     // msb as name end
 735+ E742             >
 735+ E742 2D 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 735+ E744             >Prev_Ptr        defl    Heap_Ptr
 735+ E744             >
 735+ E744             >mirror_Ptr      defl    $
 735+ E744             >
 735+ E744 1D 2B       >                dw      Dict_Ptr + 2        // xt
 735+ E746             >Heap_Ptr        defl    $ - $E000           // save current HP
 735+ E746             >
 735+ E746             >Current_HP      defl  $ - $E000             // used to set HP once!
 735+ E746             >
 735+ E746             >//              ______________________________________________________________________
 735+ E746             >//              Dictionary part
 735+ E746             >
 735+ E746             >                org     Dict_Ptr
 735+ 2B1B             >
 735+ 2B1B 44 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 735+ 2B1D             >
 735+ 2B1D             >COMPILE_XT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 735+ 2B1D CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 735+ 2B20             >
 735+ 2B20             >
 735+ 2B20             >                endif           ; ok        // for other definitions it "points" the correct handler
 735+ 2B20             >                // Use of "; ok" to suppress "warning[fwdref]"
 735+ 2B20             >
 735+ 2B20             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 736+ 2B20              //              dw      QCOMP                   // ?comp
 737+ 2B20 7A 28                        dw      COMMA                   // ,
 738+ 2B22 09 25                        dw      EXIT                    // ;
 739+ 2B24
 740+ 2B24              //  ______________________________________________________________________
 741+ 2B24              //
 742+ 2B24              // [            --
 743+ 2B24              // stop compilation
 744+ 2B24                              Colon_Def SQUARED_OPEN, "[", is_immediate
 744+ 2B24             >                New_Def  SQUARED_OPEN, "[", Enter_Ptr, is_immediate ; ok
 744+ 2B24             >
 744+ 2B24             >Dict_Ptr        defl    $
 744+ 2B24             >
 744+ 2B24             >//              ______________________________________________________________________
 744+ 2B24             >//              Heap part
 744+ 2B24             >
 744+ 2B24             >
 744+ 2B24             >                org     (Heap_Ptr & $1FFF) + $E000
 744+ E746             >
 744+ E746             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 744+ E746             >Latest_Definition defl  Heap_Ptr
 744+ E746             >
 744+ E746             >                // dummy db directives used to calculate length of namec
 744+ E746 5B          >                db      "["
 744+ E747             >len_NFA         defl    $ - temp_NFA
 744+ E747             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 744+ E746             >
 744+ E746 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 744+ E747 5B          >                db      "["               // name string in 7-bit ascii, but
 744+ E748             >                org     $-1                 // alter last byte of Name just above to set
 744+ E747 DB          >                db      {b $} | END_BIT     // msb as name end
 744+ E748             >
 744+ E748 39 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 744+ E74A             >Prev_Ptr        defl    Heap_Ptr
 744+ E74A             >
 744+ E74A             >mirror_Ptr      defl    $
 744+ E74A             >
 744+ E74A 26 2B       >                dw      Dict_Ptr + 2        // xt
 744+ E74C             >Heap_Ptr        defl    $ - $E000           // save current HP
 744+ E74C             >
 744+ E74C             >Current_HP      defl  $ - $E000             // used to set HP once!
 744+ E74C             >
 744+ E74C             >//              ______________________________________________________________________
 744+ E74C             >//              Dictionary part
 744+ E74C             >
 744+ E74C             >                org     Dict_Ptr
 744+ 2B24             >
 744+ 2B24 4A 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 744+ 2B26             >
 744+ 2B26             >SQUARED_OPEN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 744+ 2B26 CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 744+ 2B29             >
 744+ 2B29             >
 744+ 2B29             >                endif           ; ok        // for other definitions it "points" the correct handler
 744+ 2B29             >                // Use of "; ok" to suppress "warning[fwdref]"
 744+ 2B29             >
 744+ 2B29             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 745+ 2B29 3F 27                        dw      ZERO                    // 0
 746+ 2B2B 0A 28 53 26                  dw      STATE, STORE            // state !
 747+ 2B2F 09 25                        dw      EXIT                    // ; immediate
 748+ 2B31
 749+ 2B31              //  ______________________________________________________________________
 750+ 2B31              //
 751+ 2B31              // ]            --
 752+ 2B31              // start compilation
 753+ 2B31                              Colon_Def SQUARED_CLOSE, "]", is_normal
 753+ 2B31             >                New_Def  SQUARED_CLOSE, "]", Enter_Ptr, is_normal ; ok
 753+ 2B31             >
 753+ 2B31             >Dict_Ptr        defl    $
 753+ 2B31             >
 753+ 2B31             >//              ______________________________________________________________________
 753+ 2B31             >//              Heap part
 753+ 2B31             >
 753+ 2B31             >
 753+ 2B31             >                org     (Heap_Ptr & $1FFF) + $E000
 753+ E74C             >
 753+ E74C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 753+ E74C             >Latest_Definition defl  Heap_Ptr
 753+ E74C             >
 753+ E74C             >                // dummy db directives used to calculate length of namec
 753+ E74C 5D          >                db      "]"
 753+ E74D             >len_NFA         defl    $ - temp_NFA
 753+ E74D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 753+ E74C             >
 753+ E74C 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 753+ E74D 5D          >                db      "]"               // name string in 7-bit ascii, but
 753+ E74E             >                org     $-1                 // alter last byte of Name just above to set
 753+ E74D DD          >                db      {b $} | END_BIT     // msb as name end
 753+ E74E             >
 753+ E74E 46 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 753+ E750             >Prev_Ptr        defl    Heap_Ptr
 753+ E750             >
 753+ E750             >mirror_Ptr      defl    $
 753+ E750             >
 753+ E750 33 2B       >                dw      Dict_Ptr + 2        // xt
 753+ E752             >Heap_Ptr        defl    $ - $E000           // save current HP
 753+ E752             >
 753+ E752             >Current_HP      defl  $ - $E000             // used to set HP once!
 753+ E752             >
 753+ E752             >//              ______________________________________________________________________
 753+ E752             >//              Dictionary part
 753+ E752             >
 753+ E752             >                org     Dict_Ptr
 753+ 2B31             >
 753+ 2B31 50 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 753+ 2B33             >
 753+ 2B33             >SQUARED_CLOSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 753+ 2B33 CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 753+ 2B36             >
 753+ 2B36             >
 753+ 2B36             >                endif           ; ok        // for other definitions it "points" the correct handler
 753+ 2B36             >                // Use of "; ok" to suppress "warning[fwdref]"
 753+ 2B36             >
 753+ 2B36             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 754+ 2B36 3D 20 C0 00                  dw      LIT, $C0                // 192
 755+ 2B3A 0A 28 53 26                  dw      STATE, STORE            // state !
 756+ 2B3E 09 25                        dw      EXIT                    // ;
 757+ 2B40
 758+ 2B40              //  ______________________________________________________________________
 759+ 2B40              //
 760+ 2B40              // smudge       --
 761+ 2B40              // toggle smudge bit of latest definition
 762+ 2B40                              Colon_Def SMUDGE, "SMUDGE", is_normal
 762+ 2B40             >                New_Def  SMUDGE, "SMUDGE", Enter_Ptr, is_normal ; ok
 762+ 2B40             >
 762+ 2B40             >Dict_Ptr        defl    $
 762+ 2B40             >
 762+ 2B40             >//              ______________________________________________________________________
 762+ 2B40             >//              Heap part
 762+ 2B40             >
 762+ 2B40             >
 762+ 2B40             >                org     (Heap_Ptr & $1FFF) + $E000
 762+ E752             >
 762+ E752             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 762+ E752             >Latest_Definition defl  Heap_Ptr
 762+ E752             >
 762+ E752             >                // dummy db directives used to calculate length of namec
 762+ E752 53 4D 55 44 >                db      "SMUDGE"
 762+ E756 47 45       >
 762+ E758             >len_NFA         defl    $ - temp_NFA
 762+ E758             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 762+ E752             >
 762+ E752 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 762+ E753 53 4D 55 44 >                db      "SMUDGE"               // name string in 7-bit ascii, but
 762+ E757 47 45       >
 762+ E759             >                org     $-1                 // alter last byte of Name just above to set
 762+ E758 C5          >                db      {b $} | END_BIT     // msb as name end
 762+ E759             >
 762+ E759 4C 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 762+ E75B             >Prev_Ptr        defl    Heap_Ptr
 762+ E75B             >
 762+ E75B             >mirror_Ptr      defl    $
 762+ E75B             >
 762+ E75B 42 2B       >                dw      Dict_Ptr + 2        // xt
 762+ E75D             >Heap_Ptr        defl    $ - $E000           // save current HP
 762+ E75D             >
 762+ E75D             >Current_HP      defl  $ - $E000             // used to set HP once!
 762+ E75D             >
 762+ E75D             >//              ______________________________________________________________________
 762+ E75D             >//              Dictionary part
 762+ E75D             >
 762+ E75D             >                org     Dict_Ptr
 762+ 2B40             >
 762+ 2B40 5B 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 762+ 2B42             >
 762+ 2B42             >SMUDGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 762+ 2B42 CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 762+ 2B45             >
 762+ 2B45             >
 762+ 2B45             >                endif           ; ok        // for other definitions it "points" the correct handler
 762+ 2B45             >                // Use of "; ok" to suppress "warning[fwdref]"
 762+ 2B45             >
 762+ 2B45             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 763+ 2B45 08 2A                        dw      LATEST                  // latest
 764+ 2B47 3D 20 20 00                  dw      LIT, SMUDGE_BIT         // 32
 765+ 2B4B 40 26                        dw      TOGGLE                  // toggle
 766+ 2B4D 09 25                        dw      EXIT                    // ;
 767+ 2B4F
 768+ 2B4F              //  ______________________________________________________________________
 769+ 2B4F              //
 770+ 2B4F              // immediate    --
 771+ 2B4F              // make immediate the latest definition
 772+ 2B4F                              Colon_Def IMMEDIATE, "IMMEDIATE", is_normal
 772+ 2B4F             >                New_Def  IMMEDIATE, "IMMEDIATE", Enter_Ptr, is_normal ; ok
 772+ 2B4F             >
 772+ 2B4F             >Dict_Ptr        defl    $
 772+ 2B4F             >
 772+ 2B4F             >//              ______________________________________________________________________
 772+ 2B4F             >//              Heap part
 772+ 2B4F             >
 772+ 2B4F             >
 772+ 2B4F             >                org     (Heap_Ptr & $1FFF) + $E000
 772+ E75D             >
 772+ E75D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 772+ E75D             >Latest_Definition defl  Heap_Ptr
 772+ E75D             >
 772+ E75D             >                // dummy db directives used to calculate length of namec
 772+ E75D 49 4D 4D 45 >                db      "IMMEDIATE"
 772+ E761 44 49 41 54 >
 772+ E765 45          >
 772+ E766             >len_NFA         defl    $ - temp_NFA
 772+ E766             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 772+ E75D             >
 772+ E75D 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 772+ E75E 49 4D 4D 45 >                db      "IMMEDIATE"               // name string in 7-bit ascii, but
 772+ E762 44 49 41 54 >
 772+ E766 45          >
 772+ E767             >                org     $-1                 // alter last byte of Name just above to set
 772+ E766 C5          >                db      {b $} | END_BIT     // msb as name end
 772+ E767             >
 772+ E767 52 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 772+ E769             >Prev_Ptr        defl    Heap_Ptr
 772+ E769             >
 772+ E769             >mirror_Ptr      defl    $
 772+ E769             >
 772+ E769 51 2B       >                dw      Dict_Ptr + 2        // xt
 772+ E76B             >Heap_Ptr        defl    $ - $E000           // save current HP
 772+ E76B             >
 772+ E76B             >Current_HP      defl  $ - $E000             // used to set HP once!
 772+ E76B             >
 772+ E76B             >//              ______________________________________________________________________
 772+ E76B             >//              Dictionary part
 772+ E76B             >
 772+ E76B             >                org     Dict_Ptr
 772+ 2B4F             >
 772+ 2B4F 69 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 772+ 2B51             >
 772+ 2B51             >IMMEDIATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 772+ 2B51 CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 772+ 2B54             >
 772+ 2B54             >
 772+ 2B54             >                endif           ; ok        // for other definitions it "points" the correct handler
 772+ 2B54             >                // Use of "; ok" to suppress "warning[fwdref]"
 772+ 2B54             >
 772+ 2B54             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 773+ 2B54 08 2A                        dw      LATEST                  // latest
 774+ 2B56 3D 20 40 00                  dw      LIT, $40                // 64
 775+ 2B5A 40 26                        dw      TOGGLE                  // toggle
 776+ 2B5C 09 25                        dw      EXIT                    // ;
 777+ 2B5E
 778+ 2B5E              //  ______________________________________________________________________
 779+ 2B5E              //
 780+ 2B5E              // hex          --
 781+ 2B5E              // change numeration base
 782+ 2B5E                              Colon_Def HEX, "HEX", is_normal
 782+ 2B5E             >                New_Def  HEX, "HEX", Enter_Ptr, is_normal ; ok
 782+ 2B5E             >
 782+ 2B5E             >Dict_Ptr        defl    $
 782+ 2B5E             >
 782+ 2B5E             >//              ______________________________________________________________________
 782+ 2B5E             >//              Heap part
 782+ 2B5E             >
 782+ 2B5E             >
 782+ 2B5E             >                org     (Heap_Ptr & $1FFF) + $E000
 782+ E76B             >
 782+ E76B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 782+ E76B             >Latest_Definition defl  Heap_Ptr
 782+ E76B             >
 782+ E76B             >                // dummy db directives used to calculate length of namec
 782+ E76B 48 45 58    >                db      "HEX"
 782+ E76E             >len_NFA         defl    $ - temp_NFA
 782+ E76E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 782+ E76B             >
 782+ E76B 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 782+ E76C 48 45 58    >                db      "HEX"               // name string in 7-bit ascii, but
 782+ E76F             >                org     $-1                 // alter last byte of Name just above to set
 782+ E76E D8          >                db      {b $} | END_BIT     // msb as name end
 782+ E76F             >
 782+ E76F 5D 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 782+ E771             >Prev_Ptr        defl    Heap_Ptr
 782+ E771             >
 782+ E771             >mirror_Ptr      defl    $
 782+ E771             >
 782+ E771 60 2B       >                dw      Dict_Ptr + 2        // xt
 782+ E773             >Heap_Ptr        defl    $ - $E000           // save current HP
 782+ E773             >
 782+ E773             >Current_HP      defl  $ - $E000             // used to set HP once!
 782+ E773             >
 782+ E773             >//              ______________________________________________________________________
 782+ E773             >//              Dictionary part
 782+ E773             >
 782+ E773             >                org     Dict_Ptr
 782+ 2B5E             >
 782+ 2B5E 71 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 782+ 2B60             >
 782+ 2B60             >HEX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 782+ 2B60 CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 782+ 2B63             >
 782+ 2B63             >
 782+ 2B63             >                endif           ; ok        // for other definitions it "points" the correct handler
 782+ 2B63             >                // Use of "; ok" to suppress "warning[fwdref]"
 782+ 2B63             >
 782+ 2B63             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 783+ 2B63 3D 20 10 00                  dw      LIT, 16                 // 16
 784+ 2B67 10 28 53 26                  dw      BASE, STORE             // base !
 785+ 2B6B 09 25                        dw      EXIT                    // ;
 786+ 2B6D
 787+ 2B6D              //  ______________________________________________________________________
 788+ 2B6D              //
 789+ 2B6D              // decimal      --
 790+ 2B6D              // change numeration base
 791+ 2B6D                              Colon_Def DECIMAL, "DECIMAL", is_normal
 791+ 2B6D             >                New_Def  DECIMAL, "DECIMAL", Enter_Ptr, is_normal ; ok
 791+ 2B6D             >
 791+ 2B6D             >Dict_Ptr        defl    $
 791+ 2B6D             >
 791+ 2B6D             >//              ______________________________________________________________________
 791+ 2B6D             >//              Heap part
 791+ 2B6D             >
 791+ 2B6D             >
 791+ 2B6D             >                org     (Heap_Ptr & $1FFF) + $E000
 791+ E773             >
 791+ E773             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 791+ E773             >Latest_Definition defl  Heap_Ptr
 791+ E773             >
 791+ E773             >                // dummy db directives used to calculate length of namec
 791+ E773 44 45 43 49 >                db      "DECIMAL"
 791+ E777 4D 41 4C    >
 791+ E77A             >len_NFA         defl    $ - temp_NFA
 791+ E77A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 791+ E773             >
 791+ E773 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 791+ E774 44 45 43 49 >                db      "DECIMAL"               // name string in 7-bit ascii, but
 791+ E778 4D 41 4C    >
 791+ E77B             >                org     $-1                 // alter last byte of Name just above to set
 791+ E77A CC          >                db      {b $} | END_BIT     // msb as name end
 791+ E77B             >
 791+ E77B 6B 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 791+ E77D             >Prev_Ptr        defl    Heap_Ptr
 791+ E77D             >
 791+ E77D             >mirror_Ptr      defl    $
 791+ E77D             >
 791+ E77D 6F 2B       >                dw      Dict_Ptr + 2        // xt
 791+ E77F             >Heap_Ptr        defl    $ - $E000           // save current HP
 791+ E77F             >
 791+ E77F             >Current_HP      defl  $ - $E000             // used to set HP once!
 791+ E77F             >
 791+ E77F             >//              ______________________________________________________________________
 791+ E77F             >//              Dictionary part
 791+ E77F             >
 791+ E77F             >                org     Dict_Ptr
 791+ 2B6D             >
 791+ 2B6D 7D 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 791+ 2B6F             >
 791+ 2B6F             >DECIMAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 791+ 2B6F CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 791+ 2B72             >
 791+ 2B72             >
 791+ 2B72             >                endif           ; ok        // for other definitions it "points" the correct handler
 791+ 2B72             >                // Use of "; ok" to suppress "warning[fwdref]"
 791+ 2B72             >
 791+ 2B72             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 792+ 2B72 3D 20 0A 00                  dw      LIT, 10                 // 10
 793+ 2B76 10 28 53 26                  dw      BASE, STORE             // base !
 794+ 2B7A 09 25                        dw      EXIT                    // ;
 795+ 2B7C
 796+ 2B7C              //  ______________________________________________________________________
 797+ 2B7C              //
 798+ 2B7C              // (;code)       --
 799+ 2B7C              // patch to CFA to call/jump to the "following code"
 800+ 2B7C                              Colon_Def C_SEMICOLON_CODE, "(;CODE)", is_normal
 800+ 2B7C             >                New_Def  C_SEMICOLON_CODE, "(;CODE)", Enter_Ptr, is_normal ; ok
 800+ 2B7C             >
 800+ 2B7C             >Dict_Ptr        defl    $
 800+ 2B7C             >
 800+ 2B7C             >//              ______________________________________________________________________
 800+ 2B7C             >//              Heap part
 800+ 2B7C             >
 800+ 2B7C             >
 800+ 2B7C             >                org     (Heap_Ptr & $1FFF) + $E000
 800+ E77F             >
 800+ E77F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 800+ E77F             >Latest_Definition defl  Heap_Ptr
 800+ E77F             >
 800+ E77F             >                // dummy db directives used to calculate length of namec
 800+ E77F 28 3B 43 4F >                db      "(;CODE)"
 800+ E783 44 45 29    >
 800+ E786             >len_NFA         defl    $ - temp_NFA
 800+ E786             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 800+ E77F             >
 800+ E77F 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 800+ E780 28 3B 43 4F >                db      "(;CODE)"               // name string in 7-bit ascii, but
 800+ E784 44 45 29    >
 800+ E787             >                org     $-1                 // alter last byte of Name just above to set
 800+ E786 A9          >                db      {b $} | END_BIT     // msb as name end
 800+ E787             >
 800+ E787 73 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 800+ E789             >Prev_Ptr        defl    Heap_Ptr
 800+ E789             >
 800+ E789             >mirror_Ptr      defl    $
 800+ E789             >
 800+ E789 7E 2B       >                dw      Dict_Ptr + 2        // xt
 800+ E78B             >Heap_Ptr        defl    $ - $E000           // save current HP
 800+ E78B             >
 800+ E78B             >Current_HP      defl  $ - $E000             // used to set HP once!
 800+ E78B             >
 800+ E78B             >//              ______________________________________________________________________
 800+ E78B             >//              Dictionary part
 800+ E78B             >
 800+ E78B             >                org     Dict_Ptr
 800+ 2B7C             >
 800+ 2B7C 89 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 800+ 2B7E             >
 800+ 2B7E             >C_SEMICOLON_CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 800+ 2B7E CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 800+ 2B81             >
 800+ 2B81             >
 800+ 2B81             >                endif           ; ok        // for other definitions it "points" the correct handler
 800+ 2B81             >                // Use of "; ok" to suppress "warning[fwdref]"
 800+ 2B81             >
 800+ 2B81             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 801+ 2B81 1E 25                        dw      R_TO                    // r>       ( Return Stack has IP to caller's next cell )
 802+ 2B83 08 2A                        dw      LATEST                  // latest   ( Word being defined in this moment )
 803+ 2B85 66 2A 41 2A                  dw      PFA, CFA                // pfa cfa  ( cfa of latest word )
 804+ 2B89
 805+ 2B89 3D 20 CD 00                  dw      LIT, $CD                // $CD      ( At Latest CFA put "call" op-code )
 806+ 2B8D BB 25 67 26                  dw      OVER, CSTORE            // over c!  ( why can't use comma? because CFA was already ALLOTted by create? )
 807+ 2B91 74 25                        dw      ONE_PLUS                // 1+       ( At Latest CFA+1 put address for call. )
 808+ 2B93
 809+ 2B93 53 26                        dw      STORE                   // !
 810+ 2B95 09 25                        dw      EXIT                    // ;
 811+ 2B97
 812+ 2B97              //  ______________________________________________________________________
 813+ 2B97              //
 814+ 2B97              // ;code        --
 815+ 2B97                              Colon_Def SEMICOLON_CODE, ";CODE", is_immediate
 815+ 2B97             >                New_Def  SEMICOLON_CODE, ";CODE", Enter_Ptr, is_immediate ; ok
 815+ 2B97             >
 815+ 2B97             >Dict_Ptr        defl    $
 815+ 2B97             >
 815+ 2B97             >//              ______________________________________________________________________
 815+ 2B97             >//              Heap part
 815+ 2B97             >
 815+ 2B97             >
 815+ 2B97             >                org     (Heap_Ptr & $1FFF) + $E000
 815+ E78B             >
 815+ E78B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 815+ E78B             >Latest_Definition defl  Heap_Ptr
 815+ E78B             >
 815+ E78B             >                // dummy db directives used to calculate length of namec
 815+ E78B 3B 43 4F 44 >                db      ";CODE"
 815+ E78F 45          >
 815+ E790             >len_NFA         defl    $ - temp_NFA
 815+ E790             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 815+ E78B             >
 815+ E78B C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 815+ E78C 3B 43 4F 44 >                db      ";CODE"               // name string in 7-bit ascii, but
 815+ E790 45          >
 815+ E791             >                org     $-1                 // alter last byte of Name just above to set
 815+ E790 C5          >                db      {b $} | END_BIT     // msb as name end
 815+ E791             >
 815+ E791 7F 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 815+ E793             >Prev_Ptr        defl    Heap_Ptr
 815+ E793             >
 815+ E793             >mirror_Ptr      defl    $
 815+ E793             >
 815+ E793 99 2B       >                dw      Dict_Ptr + 2        // xt
 815+ E795             >Heap_Ptr        defl    $ - $E000           // save current HP
 815+ E795             >
 815+ E795             >Current_HP      defl  $ - $E000             // used to set HP once!
 815+ E795             >
 815+ E795             >//              ______________________________________________________________________
 815+ E795             >//              Dictionary part
 815+ E795             >
 815+ E795             >                org     Dict_Ptr
 815+ 2B97             >
 815+ 2B97 93 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 815+ 2B99             >
 815+ 2B99             >SEMICOLON_CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 815+ 2B99 CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 815+ 2B9C             >
 815+ 2B9C             >
 815+ 2B9C             >                endif           ; ok        // for other definitions it "points" the correct handler
 815+ 2B9C             >                // Use of "; ok" to suppress "warning[fwdref]"
 815+ 2B9C             >
 815+ 2B9C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 816+ 2B9C E0 2A                        dw      QCSP                    // ?csp
 817+ 2B9E 08 2B                        dw      COMPILE                 // compile
 818+ 2BA0 7E 2B                        dw      C_SEMICOLON_CODE        // (;code)
 819+ 2BA2 26 2B                        dw      SQUARED_OPEN            // [
 820+ 2BA4 06 27                        dw      NOOP                    // noop () can be patched later to ASSEMBLER... )
 821+ 2BA6 09 25                        dw      EXIT                    // ; immediate
 822+ 2BA8
 823+ 2BA8              //  ______________________________________________________________________
 824+ 2BA8              //
 825+ 2BA8              // <builds      --
 826+ 2BA8                              Colon_Def CBUILDS, "<BUILDS", is_normal
 826+ 2BA8             >                New_Def  CBUILDS, "<BUILDS", Enter_Ptr, is_normal ; ok
 826+ 2BA8             >
 826+ 2BA8             >Dict_Ptr        defl    $
 826+ 2BA8             >
 826+ 2BA8             >//              ______________________________________________________________________
 826+ 2BA8             >//              Heap part
 826+ 2BA8             >
 826+ 2BA8             >
 826+ 2BA8             >                org     (Heap_Ptr & $1FFF) + $E000
 826+ E795             >
 826+ E795             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 826+ E795             >Latest_Definition defl  Heap_Ptr
 826+ E795             >
 826+ E795             >                // dummy db directives used to calculate length of namec
 826+ E795 3C 42 55 49 >                db      "<BUILDS"
 826+ E799 4C 44 53    >
 826+ E79C             >len_NFA         defl    $ - temp_NFA
 826+ E79C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 826+ E795             >
 826+ E795 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 826+ E796 3C 42 55 49 >                db      "<BUILDS"               // name string in 7-bit ascii, but
 826+ E79A 4C 44 53    >
 826+ E79D             >                org     $-1                 // alter last byte of Name just above to set
 826+ E79C D3          >                db      {b $} | END_BIT     // msb as name end
 826+ E79D             >
 826+ E79D 8B 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 826+ E79F             >Prev_Ptr        defl    Heap_Ptr
 826+ E79F             >
 826+ E79F             >mirror_Ptr      defl    $
 826+ E79F             >
 826+ E79F AA 2B       >                dw      Dict_Ptr + 2        // xt
 826+ E7A1             >Heap_Ptr        defl    $ - $E000           // save current HP
 826+ E7A1             >
 826+ E7A1             >Current_HP      defl  $ - $E000             // used to set HP once!
 826+ E7A1             >
 826+ E7A1             >//              ______________________________________________________________________
 826+ E7A1             >//              Dictionary part
 826+ E7A1             >
 826+ E7A1             >                org     Dict_Ptr
 826+ 2BA8             >
 826+ 2BA8 9F 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 826+ 2BAA             >
 826+ 2BAA             >CBUILDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 826+ 2BAA CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 826+ 2BAD             >
 826+ 2BAD             >
 826+ 2BAD             >                endif           ; ok        // for other definitions it "points" the correct handler
 826+ 2BAD             >                // Use of "; ok" to suppress "warning[fwdref]"
 826+ 2BAD             >
 826+ 2BAD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 827+ 2BAD 3F 27                        dw      ZERO                    // 0
 828+ 2BAF 0A 27                        dw      CONSTANT                // constant
 829+ 2BB1 09 25                        dw      EXIT                    // ;
 830+ 2BB3
 831+ 2BB3              //  ______________________________________________________________________
 832+ 2BB3              //
 833+ 2BB3              // recurse      --
 834+ 2BB3              //              Colon_Def RECURSE, "RECURSE", is_immediate
 835+ 2BB3              //              dw      QCOMP                   // ?comp
 836+ 2BB3              //              dw      LATEST                  // latest
 837+ 2BB3              //              dw      PFA, CFA                // pfa cfa
 838+ 2BB3              //              dw      COMMA                   // ,
 839+ 2BB3              //              dw      EXIT                    // ; immediate
 840+ 2BB3
 841+ 2BB3              //  ______________________________________________________________________
 842+ 2BB3              //
 843+ 2BB3              // does>     --
 844+ 2BB3                              Colon_Def DOES_TO, "DOES>", is_normal
 844+ 2BB3             >                New_Def  DOES_TO, "DOES>", Enter_Ptr, is_normal ; ok
 844+ 2BB3             >
 844+ 2BB3             >Dict_Ptr        defl    $
 844+ 2BB3             >
 844+ 2BB3             >//              ______________________________________________________________________
 844+ 2BB3             >//              Heap part
 844+ 2BB3             >
 844+ 2BB3             >
 844+ 2BB3             >                org     (Heap_Ptr & $1FFF) + $E000
 844+ E7A1             >
 844+ E7A1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 844+ E7A1             >Latest_Definition defl  Heap_Ptr
 844+ E7A1             >
 844+ E7A1             >                // dummy db directives used to calculate length of namec
 844+ E7A1 44 4F 45 53 >                db      "DOES>"
 844+ E7A5 3E          >
 844+ E7A6             >len_NFA         defl    $ - temp_NFA
 844+ E7A6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 844+ E7A1             >
 844+ E7A1 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 844+ E7A2 44 4F 45 53 >                db      "DOES>"               // name string in 7-bit ascii, but
 844+ E7A6 3E          >
 844+ E7A7             >                org     $-1                 // alter last byte of Name just above to set
 844+ E7A6 BE          >                db      {b $} | END_BIT     // msb as name end
 844+ E7A7             >
 844+ E7A7 95 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 844+ E7A9             >Prev_Ptr        defl    Heap_Ptr
 844+ E7A9             >
 844+ E7A9             >mirror_Ptr      defl    $
 844+ E7A9             >
 844+ E7A9 B5 2B       >                dw      Dict_Ptr + 2        // xt
 844+ E7AB             >Heap_Ptr        defl    $ - $E000           // save current HP
 844+ E7AB             >
 844+ E7AB             >Current_HP      defl  $ - $E000             // used to set HP once!
 844+ E7AB             >
 844+ E7AB             >//              ______________________________________________________________________
 844+ E7AB             >//              Dictionary part
 844+ E7AB             >
 844+ E7AB             >                org     Dict_Ptr
 844+ 2BB3             >
 844+ 2BB3 A9 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 844+ 2BB5             >
 844+ 2BB5             >DOES_TO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 844+ 2BB5 CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 844+ 2BB8             >
 844+ 2BB8             >
 844+ 2BB8             >                endif           ; ok        // for other definitions it "points" the correct handler
 844+ 2BB8             >                // Use of "; ok" to suppress "warning[fwdref]"
 844+ 2BB8             >
 844+ 2BB8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 845+ 2BB8 1E 25                        dw      R_TO                    // r>
 846+ 2BBA 08 2A                        dw      LATEST                  // latest
 847+ 2BBC 66 2A                        dw      PFA                     // pfa
 848+ 2BBE 53 26                        dw      STORE                   // !        \ old use of <BUILDS
 849+ 2BC0              //              dw      COMMA                   // ,        \ new use of CREATE
 850+ 2BC0 7E 2B                        dw      C_SEMICOLON_CODE        // ;code
 851+ 2BC2              Does_Ptr:
 852+ 2BC2                              // via call coded in CFA
 853+ 2BC2 EB                           ex      de, hl //**
 854+ 2BC3                              // *** ldhlrp
 855+ 2BC3 2B                           dec     hl                  // push on Return-Stack current Instruction-Pointer
 856+ 2BC4 70                           ld      (hl), b
 857+ 2BC5 2B                           dec     hl
 858+ 2BC6 71                           ld      (hl), c
 859+ 2BC7                              // *** ldrphl
 860+ 2BC7 EB                           ex      de, hl //**
 861+ 2BC8 E1                           pop     hl                  // CFA has a call to this, so PFA -> IP
 862+ 2BC9
 863+ 2BC9 4E                           ld      c, (hl)
 864+ 2BCA 23                           inc     hl
 865+ 2BCB 46                           ld      b, (hl)
 866+ 2BCC 23                           inc     hl
 867+ 2BCD
 868+ 2BCD                              psh1
 868+ 2BCD E5          >                push    hl
 868+ 2BCE DD E9       >                jp      (ix)
 869+ 2BD0                              // SMUDGE !
 870+ 2BD0
 871+ 2BD0              //  ______________________________________________________________________
 872+ 2BD0              //
 873+ 2BD0              // count        a -- a2 n
 874+ 2BD0              // expects a counted string at address a, returns string address and counter
 875+ 2BD0                              New_Def COUNT, "COUNT", is_code, is_normal
 875+ 2BD0             >
 875+ 2BD0             >Dict_Ptr        defl    $
 875+ 2BD0             >
 875+ 2BD0             >//              ______________________________________________________________________
 875+ 2BD0             >//              Heap part
 875+ 2BD0             >
 875+ 2BD0             >
 875+ 2BD0             >                org     (Heap_Ptr & $1FFF) + $E000
 875+ E7AB             >
 875+ E7AB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 875+ E7AB             >Latest_Definition defl  Heap_Ptr
 875+ E7AB             >
 875+ E7AB             >                // dummy db directives used to calculate length of namec
 875+ E7AB 43 4F 55 4E >                db      "COUNT"
 875+ E7AF 54          >
 875+ E7B0             >len_NFA         defl    $ - temp_NFA
 875+ E7B0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 875+ E7AB             >
 875+ E7AB 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 875+ E7AC 43 4F 55 4E >                db      "COUNT"               // name string in 7-bit ascii, but
 875+ E7B0 54          >
 875+ E7B1             >                org     $-1                 // alter last byte of Name just above to set
 875+ E7B0 D4          >                db      {b $} | END_BIT     // msb as name end
 875+ E7B1             >
 875+ E7B1 A1 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 875+ E7B3             >Prev_Ptr        defl    Heap_Ptr
 875+ E7B3             >
 875+ E7B3             >mirror_Ptr      defl    $
 875+ E7B3             >
 875+ E7B3 D2 2B       >                dw      Dict_Ptr + 2        // xt
 875+ E7B5             >Heap_Ptr        defl    $ - $E000           // save current HP
 875+ E7B5             >
 875+ E7B5             >Current_HP      defl  $ - $E000             // used to set HP once!
 875+ E7B5             >
 875+ E7B5             >//              ______________________________________________________________________
 875+ E7B5             >//              Dictionary part
 875+ E7B5             >
 875+ E7B5             >                org     Dict_Ptr
 875+ 2BD0             >
 875+ 2BD0 B3 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 875+ 2BD2             >
 875+ 2BD2             >COUNT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 875+ 2BD2 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 875+ 2BD2 ~           >
 875+ 2BD2 ~           >
 875+ 2BD2             >                endif           ; ok        // for other definitions it "points" the correct handler
 875+ 2BD2             >                // Use of "; ok" to suppress "warning[fwdref]"
 875+ 2BD2             >
 875+ 2BD2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 876+ 2BD2 D9                           exx
 877+ 2BD3 E1                           pop     hl
 878+ 2BD4 5E                           ld      e, (hl)
 879+ 2BD5 16 00                        ld      d, 0
 880+ 2BD7 23                           inc     hl
 881+ 2BD8              Count_Here:
 882+ 2BD8 E5                           push    hl
 883+ 2BD9 D5                           push    de
 884+ 2BDA D9                           exx
 885+ 2BDB                              next
 885+ 2BDB DD E9       >                jp      (ix)
 886+ 2BDD              //                pop     hl
 887+ 2BDD              //                ld      a, (hl)
 888+ 2BDD              //                inc     hl
 889+ 2BDD              //                push    hl
 890+ 2BDD              //                ld      h, 0
 891+ 2BDD              //                ld      l, a
 892+ 2BDD              //                push    hl
 893+ 2BDD              //                next
 894+ 2BDD
 895+ 2BDD              //  ______________________________________________________________________
 896+ 2BDD              //
 897+ 2BDD              // bounds       a n -- a+n n
 898+ 2BDD              // given an address and a length ( a n ) calculate the bound addresses
 899+ 2BDD              // suitable for DO-LOOP
 900+ 2BDD                              New_Def BOUNDS, "BOUNDS", is_code, is_normal
 900+ 2BDD             >
 900+ 2BDD             >Dict_Ptr        defl    $
 900+ 2BDD             >
 900+ 2BDD             >//              ______________________________________________________________________
 900+ 2BDD             >//              Heap part
 900+ 2BDD             >
 900+ 2BDD             >
 900+ 2BDD             >                org     (Heap_Ptr & $1FFF) + $E000
 900+ E7B5             >
 900+ E7B5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 900+ E7B5             >Latest_Definition defl  Heap_Ptr
 900+ E7B5             >
 900+ E7B5             >                // dummy db directives used to calculate length of namec
 900+ E7B5 42 4F 55 4E >                db      "BOUNDS"
 900+ E7B9 44 53       >
 900+ E7BB             >len_NFA         defl    $ - temp_NFA
 900+ E7BB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 900+ E7B5             >
 900+ E7B5 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 900+ E7B6 42 4F 55 4E >                db      "BOUNDS"               // name string in 7-bit ascii, but
 900+ E7BA 44 53       >
 900+ E7BC             >                org     $-1                 // alter last byte of Name just above to set
 900+ E7BB D3          >                db      {b $} | END_BIT     // msb as name end
 900+ E7BC             >
 900+ E7BC AB 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 900+ E7BE             >Prev_Ptr        defl    Heap_Ptr
 900+ E7BE             >
 900+ E7BE             >mirror_Ptr      defl    $
 900+ E7BE             >
 900+ E7BE DF 2B       >                dw      Dict_Ptr + 2        // xt
 900+ E7C0             >Heap_Ptr        defl    $ - $E000           // save current HP
 900+ E7C0             >
 900+ E7C0             >Current_HP      defl  $ - $E000             // used to set HP once!
 900+ E7C0             >
 900+ E7C0             >//              ______________________________________________________________________
 900+ E7C0             >//              Dictionary part
 900+ E7C0             >
 900+ E7C0             >                org     Dict_Ptr
 900+ 2BDD             >
 900+ 2BDD BE 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 900+ 2BDF             >
 900+ 2BDF             >BOUNDS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 900+ 2BDF ~           >                call    runcode ; ok        // for primitive definitions  actual code
 900+ 2BDF ~           >
 900+ 2BDF ~           >
 900+ 2BDF             >                endif           ; ok        // for other definitions it "points" the correct handler
 900+ 2BDF             >                // Use of "; ok" to suppress "warning[fwdref]"
 900+ 2BDF             >
 900+ 2BDF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 901+ 2BDF D9                           exx
 902+ 2BE0 E1                           pop     hl
 903+ 2BE1 D1                           pop     de
 904+ 2BE2 19                           add     hl, de
 905+ 2BE3 18 F3                        jr      Count_Here
 906+ 2BE5                              // push    hl
 907+ 2BE5                              // push    de
 908+ 2BE5                              // exx
 909+ 2BE5                              // next
 910+ 2BE5
 911+ 2BE5              //  ______________________________________________________________________
 912+ 2BE5              //
 913+ 2BE5              // leave        --
 914+ 2BE5              // Compile (leave) to leave current LOOP and jump just after it
 915+ 2BE5                              Colon_Def LEAVE, "LEAVE", is_immediate
 915+ 2BE5             >                New_Def  LEAVE, "LEAVE", Enter_Ptr, is_immediate ; ok
 915+ 2BE5             >
 915+ 2BE5             >Dict_Ptr        defl    $
 915+ 2BE5             >
 915+ 2BE5             >//              ______________________________________________________________________
 915+ 2BE5             >//              Heap part
 915+ 2BE5             >
 915+ 2BE5             >
 915+ 2BE5             >                org     (Heap_Ptr & $1FFF) + $E000
 915+ E7C0             >
 915+ E7C0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 915+ E7C0             >Latest_Definition defl  Heap_Ptr
 915+ E7C0             >
 915+ E7C0             >                // dummy db directives used to calculate length of namec
 915+ E7C0 4C 45 41 56 >                db      "LEAVE"
 915+ E7C4 45          >
 915+ E7C5             >len_NFA         defl    $ - temp_NFA
 915+ E7C5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 915+ E7C0             >
 915+ E7C0 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 915+ E7C1 4C 45 41 56 >                db      "LEAVE"               // name string in 7-bit ascii, but
 915+ E7C5 45          >
 915+ E7C6             >                org     $-1                 // alter last byte of Name just above to set
 915+ E7C5 C5          >                db      {b $} | END_BIT     // msb as name end
 915+ E7C6             >
 915+ E7C6 B5 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 915+ E7C8             >Prev_Ptr        defl    Heap_Ptr
 915+ E7C8             >
 915+ E7C8             >mirror_Ptr      defl    $
 915+ E7C8             >
 915+ E7C8 E7 2B       >                dw      Dict_Ptr + 2        // xt
 915+ E7CA             >Heap_Ptr        defl    $ - $E000           // save current HP
 915+ E7CA             >
 915+ E7CA             >Current_HP      defl  $ - $E000             // used to set HP once!
 915+ E7CA             >
 915+ E7CA             >//              ______________________________________________________________________
 915+ E7CA             >//              Dictionary part
 915+ E7CA             >
 915+ E7CA             >                org     Dict_Ptr
 915+ 2BE5             >
 915+ 2BE5 C8 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 915+ 2BE7             >
 915+ 2BE7             >LEAVE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 915+ 2BE7 CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 915+ 2BEA             >
 915+ 2BEA             >
 915+ 2BEA             >                endif           ; ok        // for other definitions it "points" the correct handler
 915+ 2BEA             >                // Use of "; ok" to suppress "warning[fwdref]"
 915+ 2BEA             >
 915+ 2BEA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 916+ 2BEA 08 2B 9A 20                  dw      COMPILE, C_LEAVE       // compile (leave)     \ unloop and branch
 917+ 2BEE 64 28 13 25                  dw      HERE, TO_R, ZERO, COMMA // here >r 0 ,
 917+ 2BF2 3F 27 7A 28
 918+ 2BF6 3F 27 3F 27                  dw      ZERO, ZERO
 919+ 2BFA F0 24 DF 25                  dw      SPFETCH, DUP
 920+ 2BFE 8A 25 8A 25                  dw      CELL_PLUS, CELL_PLUS
 921+ 2C02 CF 25                        dw      TUCK
 922+ 2C04 22 28 49 26                  dw      CSP, FETCH
 923+ 2C08 D8 25 A3 28                  dw      SWAP, SUBTRACT
 924+ 2C0C 4A 24                        dw      CMOVE
 925+ 2C0E 22 28 49 26                  dw      CSP, FETCH, CELL_MINUS
 925+ 2C12 8E 25
 926+ 2C14 1E 25 BB 25                  dw      R_TO, OVER, STORE
 926+ 2C18 53 26
 927+ 2C1A 8E 25 3F 27                  dw      CELL_MINUS, ZERO
 928+ 2C1E D8 25 53 26                  dw      SWAP, STORE
 929+ 2C22 09 25                        dw      EXIT                    // ;
 930+ 2C24
 931+ 2C24              //  ______________________________________________________________________
 932+ 2C24              //
 933+ 2C24              // type         a n --
 934+ 2C24              // Sends to current output channel n characters starting at address a.
 935+ 2C24                              Colon_Def TYPE, "TYPE", is_normal
 935+ 2C24             >                New_Def  TYPE, "TYPE", Enter_Ptr, is_normal ; ok
 935+ 2C24             >
 935+ 2C24             >Dict_Ptr        defl    $
 935+ 2C24             >
 935+ 2C24             >//              ______________________________________________________________________
 935+ 2C24             >//              Heap part
 935+ 2C24             >
 935+ 2C24             >
 935+ 2C24             >                org     (Heap_Ptr & $1FFF) + $E000
 935+ E7CA             >
 935+ E7CA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 935+ E7CA             >Latest_Definition defl  Heap_Ptr
 935+ E7CA             >
 935+ E7CA             >                // dummy db directives used to calculate length of namec
 935+ E7CA 54 59 50 45 >                db      "TYPE"
 935+ E7CE             >len_NFA         defl    $ - temp_NFA
 935+ E7CE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 935+ E7CA             >
 935+ E7CA 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 935+ E7CB 54 59 50 45 >                db      "TYPE"               // name string in 7-bit ascii, but
 935+ E7CF             >                org     $-1                 // alter last byte of Name just above to set
 935+ E7CE C5          >                db      {b $} | END_BIT     // msb as name end
 935+ E7CF             >
 935+ E7CF C0 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 935+ E7D1             >Prev_Ptr        defl    Heap_Ptr
 935+ E7D1             >
 935+ E7D1             >mirror_Ptr      defl    $
 935+ E7D1             >
 935+ E7D1 26 2C       >                dw      Dict_Ptr + 2        // xt
 935+ E7D3             >Heap_Ptr        defl    $ - $E000           // save current HP
 935+ E7D3             >
 935+ E7D3             >Current_HP      defl  $ - $E000             // used to set HP once!
 935+ E7D3             >
 935+ E7D3             >//              ______________________________________________________________________
 935+ E7D3             >//              Dictionary part
 935+ E7D3             >
 935+ E7D3             >                org     Dict_Ptr
 935+ 2C24             >
 935+ 2C24 D1 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 935+ 2C26             >
 935+ 2C26             >TYPE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 935+ 2C26 CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 935+ 2C29             >
 935+ 2C29             >
 935+ 2C29             >                endif           ; ok        // for other definitions it "points" the correct handler
 935+ 2C29             >                // Use of "; ok" to suppress "warning[fwdref]"
 935+ 2C29             >
 935+ 2C29             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 936+ 2C29 DF 2B                        dw      BOUNDS                  // bounds
 937+ 2C2B A4 20                        dw      C_Q_DO                  // ?do
 938+ 2C2D 0C 00                        dw      Type_Skip - $
 939+ 2C2F              Type_Loop:
 940+ 2C2F D2 20 5E 26                  dw          I, CFETCH           //      i c@
 941+ 2C33 16 29                        dw          EMIT                //      emit
 942+ 2C35 7A 20                        dw      C_LOOP                  // loop
 943+ 2C37 F8 FF                        dw      Type_Loop - $
 944+ 2C39              Type_Skip:
 945+ 2C39 09 25                        dw      EXIT                    // ;
 946+ 2C3B
 947+ 2C3B              //  ______________________________________________________________________
 948+ 2C3B              //
 949+ 2C3B              // -trailing    a n1 -- a n2
 950+ 2C3B              // Assumes that an n1 bytes-long string is stored at address a
 951+ 2C3B              // and the string contains a space delimited word,
 952+ 2C3B              // Finds n2 as the position of the first character after the word.
 953+ 2C3B                              Colon_Def LTRAILING, "-TRAILING", is_normal
 953+ 2C3B             >                New_Def  LTRAILING, "-TRAILING", Enter_Ptr, is_normal ; ok
 953+ 2C3B             >
 953+ 2C3B             >Dict_Ptr        defl    $
 953+ 2C3B             >
 953+ 2C3B             >//              ______________________________________________________________________
 953+ 2C3B             >//              Heap part
 953+ 2C3B             >
 953+ 2C3B             >
 953+ 2C3B             >                org     (Heap_Ptr & $1FFF) + $E000
 953+ E7D3             >
 953+ E7D3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 953+ E7D3             >Latest_Definition defl  Heap_Ptr
 953+ E7D3             >
 953+ E7D3             >                // dummy db directives used to calculate length of namec
 953+ E7D3 2D 54 52 41 >                db      "-TRAILING"
 953+ E7D7 49 4C 49 4E >
 953+ E7DB 47          >
 953+ E7DC             >len_NFA         defl    $ - temp_NFA
 953+ E7DC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 953+ E7D3             >
 953+ E7D3 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 953+ E7D4 2D 54 52 41 >                db      "-TRAILING"               // name string in 7-bit ascii, but
 953+ E7D8 49 4C 49 4E >
 953+ E7DC 47          >
 953+ E7DD             >                org     $-1                 // alter last byte of Name just above to set
 953+ E7DC C7          >                db      {b $} | END_BIT     // msb as name end
 953+ E7DD             >
 953+ E7DD CA 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 953+ E7DF             >Prev_Ptr        defl    Heap_Ptr
 953+ E7DF             >
 953+ E7DF             >mirror_Ptr      defl    $
 953+ E7DF             >
 953+ E7DF 3D 2C       >                dw      Dict_Ptr + 2        // xt
 953+ E7E1             >Heap_Ptr        defl    $ - $E000           // save current HP
 953+ E7E1             >
 953+ E7E1             >Current_HP      defl  $ - $E000             // used to set HP once!
 953+ E7E1             >
 953+ E7E1             >//              ______________________________________________________________________
 953+ E7E1             >//              Dictionary part
 953+ E7E1             >
 953+ E7E1             >                org     Dict_Ptr
 953+ 2C3B             >
 953+ 2C3B DF 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 953+ 2C3D             >
 953+ 2C3D             >LTRAILING:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 953+ 2C3D CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 953+ 2C40             >
 953+ 2C40             >
 953+ 2C40             >                endif           ; ok        // for other definitions it "points" the correct handler
 953+ 2C40             >                // Use of "; ok" to suppress "warning[fwdref]"
 953+ 2C40             >
 953+ 2C40             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 954+ 2C40 DF 25 3F 27                  dw      DUP, ZERO               // dup 0
 955+ 2C44                                                              // do
 956+ 2C44 A4 20                        dw      C_Q_DO
 957+ 2C46 20 00                        dw      LTrailing_Leave - $
 958+ 2C48              LTrailing_Loop:
 959+ 2C48 27 26 5B 25                  dw          TWO_DUP, PLUS       //      2dup +
 960+ 2C4C 7B 25                        dw          ONE_SUBTRACT        //      1-
 961+ 2C4E 5E 26                        dw          CFETCH              //      c@
 962+ 2C50 62 27 A3 28                  dw          BL, SUBTRACT        //      bl -
 963+ 2C54                                                              //      if
 964+ 2C54 8F 20                        dw          ZBRANCH
 965+ 2C56 0A 00                        dw          LTrailing_Else - $
 966+ 2C58 9A 20                        dw              C_LEAVE         //          leave
 967+ 2C5A 0C 00                        dw              LTrailing_Leave - $
 968+ 2C5C 82 20                        dw          BRANCH              //      else
 969+ 2C5E 04 00                        dw          LTrailing_Endif - $
 970+ 2C60              LTrailing_Else:
 971+ 2C60 7B 25                        dw              ONE_SUBTRACT    //          1-
 972+ 2C62              LTrailing_Endif:                                //      endif
 973+ 2C62                                                              // loop
 974+ 2C62 7A 20                        dw      C_LOOP
 975+ 2C64 E4 FF                        dw      LTrailing_Loop - $
 976+ 2C66              LTrailing_Leave:
 977+ 2C66 09 25                        dw      EXIT                    // ;
 978+ 2C68
 979+ 2C68              //  ______________________________________________________________________
 980+ 2C68              //
 981+ 2C68              // accept       a n1 -- n2
 982+ 2C68              // Accepts at most n1 characters from terminal and stores them at address a
 983+ 2C68              // CR stops input. A 'nul' is added as trailer.
 984+ 2C68              // n2 is the string length. n2 is kept in span user variable also.
 985+ 2C68                              Colon_Def ACCEPT, "ACCEPT", is_normal
 985+ 2C68             >                New_Def  ACCEPT, "ACCEPT", Enter_Ptr, is_normal ; ok
 985+ 2C68             >
 985+ 2C68             >Dict_Ptr        defl    $
 985+ 2C68             >
 985+ 2C68             >//              ______________________________________________________________________
 985+ 2C68             >//              Heap part
 985+ 2C68             >
 985+ 2C68             >
 985+ 2C68             >                org     (Heap_Ptr & $1FFF) + $E000
 985+ E7E1             >
 985+ E7E1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 985+ E7E1             >Latest_Definition defl  Heap_Ptr
 985+ E7E1             >
 985+ E7E1             >                // dummy db directives used to calculate length of namec
 985+ E7E1 41 43 43 45 >                db      "ACCEPT"
 985+ E7E5 50 54       >
 985+ E7E7             >len_NFA         defl    $ - temp_NFA
 985+ E7E7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 985+ E7E1             >
 985+ E7E1 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 985+ E7E2 41 43 43 45 >                db      "ACCEPT"               // name string in 7-bit ascii, but
 985+ E7E6 50 54       >
 985+ E7E8             >                org     $-1                 // alter last byte of Name just above to set
 985+ E7E7 D4          >                db      {b $} | END_BIT     // msb as name end
 985+ E7E8             >
 985+ E7E8 D3 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 985+ E7EA             >Prev_Ptr        defl    Heap_Ptr
 985+ E7EA             >
 985+ E7EA             >mirror_Ptr      defl    $
 985+ E7EA             >
 985+ E7EA 6A 2C       >                dw      Dict_Ptr + 2        // xt
 985+ E7EC             >Heap_Ptr        defl    $ - $E000           // save current HP
 985+ E7EC             >
 985+ E7EC             >Current_HP      defl  $ - $E000             // used to set HP once!
 985+ E7EC             >
 985+ E7EC             >//              ______________________________________________________________________
 985+ E7EC             >//              Dictionary part
 985+ E7EC             >
 985+ E7EC             >                org     Dict_Ptr
 985+ 2C68             >
 985+ 2C68 EA 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 985+ 2C6A             >
 985+ 2C6A             >ACCEPT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 985+ 2C6A CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 985+ 2C6D             >
 985+ 2C6D             >
 985+ 2C6D             >                endif           ; ok        // for other definitions it "points" the correct handler
 985+ 2C6D             >                // Use of "; ok" to suppress "warning[fwdref]"
 985+ 2C6D             >
 985+ 2C6D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 986+ 2C6D BB 25 5B 25                  dw      OVER, PLUS, OVER        //                      ( a  n1+a  a )
 986+ 2C71 BB 25
 987+ 2C73 3F 27 EF 25                  dw      ZERO, DASH_ROT          //                      ( a  0     a+n1  a )
 988+ 2C77                                                              // do
 989+ 2C77 A4 20                        dw      C_Q_DO
 990+ 2C79 8C 00                        dw      Accept_Leave - $
 991+ 2C7B              Accept_Loop:
 992+ 2C7B D9 22                        dw          CUR
 993+ 2C7D C4 25 21 23                  dw          DROP, KEY           //      drop key        ( a  c )
 994+ 2C81 DF 25                        dw          DUP                 //      dup             ( a  c  c )
 995+ 2C83 3D 20 0E 00                  dw          LIT, $0E            //      0E
 996+ 2C87 85 27                        dw          PLUS_ORIGIN         //      +origin
 997+ 2C89 49 26                        dw          FETCH               //      @               ( a  c  c  del )
 998+ 2C8B AF 28                        dw          EQUALS              //      =               ( a  c  c==del )
 999+ 2C8D                                                              //      if
1000+ 2C8D 8F 20                        dw          ZBRANCH
1001+ 2C8F 2C 00                        dw          Accept_Else_0 - $
1002+ 2C91 C4 25                        dw              DROP            //          drop        ( a  )
1003+ 2C93 DF 25 D2 20                  dw              DUP, I, EQUALS  //          dup i =     ( a  a==i )
1003+ 2C97 AF 28
1004+ 2C99 46 27 C9 24                  dw              ONE, AND_OP     //          1 and
1005+ 2C9D DF 25                        dw              DUP             //          dup         ( a  a==i  a==i )
1006+ 2C9F 1E 25                        dw              R_TO            //          r> 2 - + r>
1007+ 2CA1 96 25 5B 25                  dw              TWO_MINUS, PLUS //      ( decrement index by 1 or 2 )
1008+ 2CA5 13 25                        dw              TO_R            //
1009+ 2CA7                                                              //          if
1010+ 2CA7 8F 20                        dw              ZBRANCH
1011+ 2CA9 0A 00                        dw              Accept_Else_1 - $
1012+ 2CAB 3D 20 07 00                  dw                  LIT, 7      //              7       ( a  7 )
1013+ 2CAF                                                              //          else
1014+ 2CAF 82 20                        dw              BRANCH
1015+ 2CB1 06 00                        dw              Accept_Endif_1 - $
1016+ 2CB3              Accept_Else_1:
1017+ 2CB3 3D 20 08 00                  dw                  LIT, 8      //              8       ( a  8 )
1018+ 2CB7              Accept_Endif_1:                                 //          endif
1019+ 2CB7 82 20                        dw          BRANCH
1020+ 2CB9 2E 00                        dw          Accept_Endif_0 - $
1021+ 2CBB              Accept_Else_0:                                  //      else
1022+ 2CBB DF 25                        dw              DUP             //          dup         ( a  c  c )
1023+ 2CBD 3D 20 0D 00                  dw              LIT, 13         //          13
1024+ 2CC1 AF 28                        dw              EQUALS          //          =           ( a  c  c==CR )
1025+ 2CC3                                                              //          if
1026+ 2CC3 8F 20                        dw              ZBRANCH
1027+ 2CC5 0C 00                        dw              Accept_Else_2 - $
1028+ 2CC7 C4 25 62 27                  dw                  DROP, BL    //              drop bl ( a  bl )
1029+ 2CCB 3F 27                        dw                  ZERO        //              0       ( a  c  0 )
1030+ 2CCD                                                              //          else
1031+ 2CCD 82 20                        dw              BRANCH
1032+ 2CCF 04 00                        dw              Accept_Endif_2 - $
1033+ 2CD1              Accept_Else_2:
1034+ 2CD1 DF 25                        dw                  DUP         //              dup     ( a  c  c )
1035+ 2CD3                                                              //          endif
1036+ 2CD3              Accept_Endif_2:
1037+ 2CD3 D2 20 67 26                  dw              I, CSTORE       //          i           ( a  c )
1038+ 2CD7 DF 25 62 27                  dw              DUP, BL, LESS   //          dup bl <    ( a  c  c<BL )
1038+ 2CDB C8 28
1039+ 2CDD                                                              //          if
1040+ 2CDD 8F 20                        dw              ZBRANCH
1041+ 2CDF 08 00                        dw              Accept_Endif_3 - $
1042+ 2CE1 1E 25                        dw                  R_TO        //              r>
1043+ 2CE3 7B 25                        dw                  ONE_SUBTRACT//              1-
1044+ 2CE5 13 25                        dw                  TO_R        //              >r
1045+ 2CE7                                                              //          endif
1046+ 2CE7              Accept_Endif_3:
1047+ 2CE7              Accept_Endif_0:                                 //      endif
1048+ 2CE7 16 29                        dw          EMIT                //      emit
1049+ 2CE9
1050+ 2CE9 3F 27 D2 20                  dw          ZERO, I, ONE_PLUS   //      0 i 1+ !
1050+ 2CED 74 25
1051+ 2CEF 53 26                        dw          STORE               //          ( zero pad )
1052+ 2CF1 D2 20                        dw          I                   //      i
1053+ 2CF3 D2 20 5E 26                  dw          I, CFETCH, ZEQUAL   //      i 0= if
1053+ 2CF7 2E 25
1054+ 2CF9 8F 20                        dw          ZBRANCH             //
1055+ 2CFB 06 00                        dw              Accept_Endif_4 - $
1056+ 2CFD 9A 20                        dw                  C_LEAVE     //              leave
1057+ 2CFF 06 00                        dw                  Accept_Leave - $
1058+ 2D01              Accept_Endif_4:                                 //      endif
1059+ 2D01                                                              // loop
1060+ 2D01 7A 20                        dw      C_LOOP
1061+ 2D03 78 FF                        dw      Accept_Loop - $
1062+ 2D05              Accept_Leave:
1063+ 2D05 D8 25 A3 28                  dw      SWAP, SUBTRACT          // swap -
1064+ 2D09 74 25                        dw      ONE_PLUS                // 1+
1065+ 2D0B DF 25 52 28                  dw      DUP, SPAN, STORE        // dup span !
1065+ 2D0F 53 26
1066+ 2D11 09 25                        dw      EXIT                    // ;
1067+ 2D13
1068+ 2D13              //  ______________________________________________________________________
1069+ 2D13              //
1070+ 2D13              // expect      a n --
1071+ 2D13              // Accepts at most n1 characters from terminal and stores them at address a
1072+ 2D13              // CR stops input. A 'nul' is added as trailer.
1073+ 2D13              // n2 is the string length. n2 is kept in span user variable also.
1074+ 2D13              //              Colon_Def EXPECT, "EXPECT", is_normal
1075+ 2D13              //              dw      ACCEPT, DROP            // accept drop
1076+ 2D13              //              dw      EXIT                    // ;
1077+ 2D13
1078+ 2D13              //  ______________________________________________________________________
1079+ 2D13              //
1080+ 2D13              // query        --
1081+ 2D13              // Accept at most 80 character from console. CR stops.
1082+ 2D13              // Text is stored in TIB. Variable IN is zeroed.
1083+ 2D13                              Colon_Def QUERY, "QUERY", is_normal
1083+ 2D13             >                New_Def  QUERY, "QUERY", Enter_Ptr, is_normal ; ok
1083+ 2D13             >
1083+ 2D13             >Dict_Ptr        defl    $
1083+ 2D13             >
1083+ 2D13             >//              ______________________________________________________________________
1083+ 2D13             >//              Heap part
1083+ 2D13             >
1083+ 2D13             >
1083+ 2D13             >                org     (Heap_Ptr & $1FFF) + $E000
1083+ E7EC             >
1083+ E7EC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1083+ E7EC             >Latest_Definition defl  Heap_Ptr
1083+ E7EC             >
1083+ E7EC             >                // dummy db directives used to calculate length of namec
1083+ E7EC 51 55 45 52 >                db      "QUERY"
1083+ E7F0 59          >
1083+ E7F1             >len_NFA         defl    $ - temp_NFA
1083+ E7F1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1083+ E7EC             >
1083+ E7EC 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1083+ E7ED 51 55 45 52 >                db      "QUERY"               // name string in 7-bit ascii, but
1083+ E7F1 59          >
1083+ E7F2             >                org     $-1                 // alter last byte of Name just above to set
1083+ E7F1 D9          >                db      {b $} | END_BIT     // msb as name end
1083+ E7F2             >
1083+ E7F2 E1 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1083+ E7F4             >Prev_Ptr        defl    Heap_Ptr
1083+ E7F4             >
1083+ E7F4             >mirror_Ptr      defl    $
1083+ E7F4             >
1083+ E7F4 15 2D       >                dw      Dict_Ptr + 2        // xt
1083+ E7F6             >Heap_Ptr        defl    $ - $E000           // save current HP
1083+ E7F6             >
1083+ E7F6             >Current_HP      defl  $ - $E000             // used to set HP once!
1083+ E7F6             >
1083+ E7F6             >//              ______________________________________________________________________
1083+ E7F6             >//              Dictionary part
1083+ E7F6             >
1083+ E7F6             >                org     Dict_Ptr
1083+ 2D13             >
1083+ 2D13 F4 07       >                dw      mirror_Ptr - $E000 + Heap_offset
1083+ 2D15             >
1083+ 2D15             >QUERY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1083+ 2D15 CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1083+ 2D18             >
1083+ 2D18             >
1083+ 2D18             >                endif           ; ok        // for other definitions it "points" the correct handler
1083+ 2D18             >                // Use of "; ok" to suppress "warning[fwdref]"
1083+ 2D18             >
1083+ 2D18             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1084+ 2D18 A4 27 49 26                  dw      TIB, FETCH              // tib @
1085+ 2D1C 3D 20 50 00                  dw      LIT, 80                 // 80
1086+ 2D20 6A 2C C4 25                  dw      ACCEPT, DROP            // accept drop
1087+ 2D24 3F 27 E6 27                  dw      ZERO, TO_IN, STORE      // 0 >in !
1087+ 2D28 53 26
1088+ 2D2A 09 25                        dw      EXIT                    // ;
1089+ 2D2C
1090+ 2D2C              //  ______________________________________________________________________
1091+ 2D2C              //
1092+ 2D2C              // fill        a n c --
1093+ 2D2C              // If n > 0, fills n locations starting from address a with the value c.
1094+ 2D2C                              New_Def FILL, "FILL", is_code, is_normal
1094+ 2D2C             >
1094+ 2D2C             >Dict_Ptr        defl    $
1094+ 2D2C             >
1094+ 2D2C             >//              ______________________________________________________________________
1094+ 2D2C             >//              Heap part
1094+ 2D2C             >
1094+ 2D2C             >
1094+ 2D2C             >                org     (Heap_Ptr & $1FFF) + $E000
1094+ E7F6             >
1094+ E7F6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1094+ E7F6             >Latest_Definition defl  Heap_Ptr
1094+ E7F6             >
1094+ E7F6             >                // dummy db directives used to calculate length of namec
1094+ E7F6 46 49 4C 4C >                db      "FILL"
1094+ E7FA             >len_NFA         defl    $ - temp_NFA
1094+ E7FA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1094+ E7F6             >
1094+ E7F6 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1094+ E7F7 46 49 4C 4C >                db      "FILL"               // name string in 7-bit ascii, but
1094+ E7FB             >                org     $-1                 // alter last byte of Name just above to set
1094+ E7FA CC          >                db      {b $} | END_BIT     // msb as name end
1094+ E7FB             >
1094+ E7FB EC 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1094+ E7FD             >Prev_Ptr        defl    Heap_Ptr
1094+ E7FD             >
1094+ E7FD             >mirror_Ptr      defl    $
1094+ E7FD             >
1094+ E7FD 2E 2D       >                dw      Dict_Ptr + 2        // xt
1094+ E7FF             >Heap_Ptr        defl    $ - $E000           // save current HP
1094+ E7FF             >
1094+ E7FF             >Current_HP      defl  $ - $E000             // used to set HP once!
1094+ E7FF             >
1094+ E7FF             >//              ______________________________________________________________________
1094+ E7FF             >//              Dictionary part
1094+ E7FF             >
1094+ E7FF             >                org     Dict_Ptr
1094+ 2D2C             >
1094+ 2D2C FD 07       >                dw      mirror_Ptr - $E000 + Heap_offset
1094+ 2D2E             >
1094+ 2D2E             >FILL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1094+ 2D2E ~           >                call    runcode ; ok        // for primitive definitions  actual code
1094+ 2D2E ~           >
1094+ 2D2E ~           >
1094+ 2D2E             >                endif           ; ok        // for other definitions it "points" the correct handler
1094+ 2D2E             >                // Use of "; ok" to suppress "warning[fwdref]"
1094+ 2D2E             >
1094+ 2D2E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1095+ 2D2E D9                           exx
1096+ 2D2F D1                           pop     de                  // de has character
1097+ 2D30 C1                           pop     bc                  // bc has counter
1098+ 2D31 E1                           pop     hl                  // hl has address, save Instruction Pointer
1099+ 2D32              Fill_Loop:
1100+ 2D32 78                               ld      a, b
1101+ 2D33 B1                               or      c
1102+ 2D34 28 05                        jr      z, Fill_While_End
1103+ 2D36 73                               ld      (hl), e
1104+ 2D37 0B                               dec     bc
1105+ 2D38 23                               inc     hl
1106+ 2D39 18 F7                        jr      Fill_Loop
1107+ 2D3B              Fill_While_End:
1108+ 2D3B D9                           exx
1109+ 2D3C                              next
1109+ 2D3C DD E9       >                jp      (ix)
1110+ 2D3E
1111+ 2D3E              //  ______________________________________________________________________
1112+ 2D3E              //
1113+ 2D3E              // erase        a n --
1114+ 2D3E              // If n > 0, fills n locations starting from address a with 'nul' characters.
1115+ 2D3E                              Colon_Def ERASE, "ERASE", is_normal
1115+ 2D3E             >                New_Def  ERASE, "ERASE", Enter_Ptr, is_normal ; ok
1115+ 2D3E             >
1115+ 2D3E             >Dict_Ptr        defl    $
1115+ 2D3E             >
1115+ 2D3E             >//              ______________________________________________________________________
1115+ 2D3E             >//              Heap part
1115+ 2D3E             >
1115+ 2D3E             >
1115+ 2D3E             >                org     (Heap_Ptr & $1FFF) + $E000
1115+ E7FF             >
1115+ E7FF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1115+ E7FF             >Latest_Definition defl  Heap_Ptr
1115+ E7FF             >
1115+ E7FF             >                // dummy db directives used to calculate length of namec
1115+ E7FF 45 52 41 53 >                db      "ERASE"
1115+ E803 45          >
1115+ E804             >len_NFA         defl    $ - temp_NFA
1115+ E804             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1115+ E7FF             >
1115+ E7FF 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1115+ E800 45 52 41 53 >                db      "ERASE"               // name string in 7-bit ascii, but
1115+ E804 45          >
1115+ E805             >                org     $-1                 // alter last byte of Name just above to set
1115+ E804 C5          >                db      {b $} | END_BIT     // msb as name end
1115+ E805             >
1115+ E805 F6 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1115+ E807             >Prev_Ptr        defl    Heap_Ptr
1115+ E807             >
1115+ E807             >mirror_Ptr      defl    $
1115+ E807             >
1115+ E807 40 2D       >                dw      Dict_Ptr + 2        // xt
1115+ E809             >Heap_Ptr        defl    $ - $E000           // save current HP
1115+ E809             >
1115+ E809             >Current_HP      defl  $ - $E000             // used to set HP once!
1115+ E809             >
1115+ E809             >//              ______________________________________________________________________
1115+ E809             >//              Dictionary part
1115+ E809             >
1115+ E809             >                org     Dict_Ptr
1115+ 2D3E             >
1115+ 2D3E 07 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1115+ 2D40             >
1115+ 2D40             >ERASE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1115+ 2D40 CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1115+ 2D43             >
1115+ 2D43             >
1115+ 2D43             >                endif           ; ok        // for other definitions it "points" the correct handler
1115+ 2D43             >                // Use of "; ok" to suppress "warning[fwdref]"
1115+ 2D43             >
1115+ 2D43             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1116+ 2D43 3F 27 2E 2D                  dw      ZERO, FILL              // 0 fill
1117+ 2D47 09 25                        dw      EXIT                    // ;
1118+ 2D49
1119+ 2D49              //  ______________________________________________________________________
1120+ 2D49              //
1121+ 2D49              // blank        a n --
1122+ 2D49              // If n > 0, fills n locations starting from address a with 'nul' characters.
1123+ 2D49                              Colon_Def BLANK, "BLANK", is_normal
1123+ 2D49             >                New_Def  BLANK, "BLANK", Enter_Ptr, is_normal ; ok
1123+ 2D49             >
1123+ 2D49             >Dict_Ptr        defl    $
1123+ 2D49             >
1123+ 2D49             >//              ______________________________________________________________________
1123+ 2D49             >//              Heap part
1123+ 2D49             >
1123+ 2D49             >
1123+ 2D49             >                org     (Heap_Ptr & $1FFF) + $E000
1123+ E809             >
1123+ E809             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1123+ E809             >Latest_Definition defl  Heap_Ptr
1123+ E809             >
1123+ E809             >                // dummy db directives used to calculate length of namec
1123+ E809 42 4C 41 4E >                db      "BLANK"
1123+ E80D 4B          >
1123+ E80E             >len_NFA         defl    $ - temp_NFA
1123+ E80E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1123+ E809             >
1123+ E809 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1123+ E80A 42 4C 41 4E >                db      "BLANK"               // name string in 7-bit ascii, but
1123+ E80E 4B          >
1123+ E80F             >                org     $-1                 // alter last byte of Name just above to set
1123+ E80E CB          >                db      {b $} | END_BIT     // msb as name end
1123+ E80F             >
1123+ E80F FF 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1123+ E811             >Prev_Ptr        defl    Heap_Ptr
1123+ E811             >
1123+ E811             >mirror_Ptr      defl    $
1123+ E811             >
1123+ E811 4B 2D       >                dw      Dict_Ptr + 2        // xt
1123+ E813             >Heap_Ptr        defl    $ - $E000           // save current HP
1123+ E813             >
1123+ E813             >Current_HP      defl  $ - $E000             // used to set HP once!
1123+ E813             >
1123+ E813             >//              ______________________________________________________________________
1123+ E813             >//              Dictionary part
1123+ E813             >
1123+ E813             >                org     Dict_Ptr
1123+ 2D49             >
1123+ 2D49 11 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1123+ 2D4B             >
1123+ 2D4B             >BLANK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1123+ 2D4B CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1123+ 2D4E             >
1123+ 2D4E             >
1123+ 2D4E             >                endif           ; ok        // for other definitions it "points" the correct handler
1123+ 2D4E             >                // Use of "; ok" to suppress "warning[fwdref]"
1123+ 2D4E             >
1123+ 2D4E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1124+ 2D4E 62 27 2E 2D                  dw      BL, FILL                // bl fill
1125+ 2D52 09 25                        dw      EXIT                    // ;
1126+ 2D54
1127+ 2D54              //  ______________________________________________________________________
1128+ 2D54              //
1129+ 2D54              // hold         c --
1130+ 2D54              // Used between <# and #> to insert a character c in numeric formatting.
1131+ 2D54                              Colon_Def HOLD, "HOLD", is_normal
1131+ 2D54             >                New_Def  HOLD, "HOLD", Enter_Ptr, is_normal ; ok
1131+ 2D54             >
1131+ 2D54             >Dict_Ptr        defl    $
1131+ 2D54             >
1131+ 2D54             >//              ______________________________________________________________________
1131+ 2D54             >//              Heap part
1131+ 2D54             >
1131+ 2D54             >
1131+ 2D54             >                org     (Heap_Ptr & $1FFF) + $E000
1131+ E813             >
1131+ E813             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1131+ E813             >Latest_Definition defl  Heap_Ptr
1131+ E813             >
1131+ E813             >                // dummy db directives used to calculate length of namec
1131+ E813 48 4F 4C 44 >                db      "HOLD"
1131+ E817             >len_NFA         defl    $ - temp_NFA
1131+ E817             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1131+ E813             >
1131+ E813 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1131+ E814 48 4F 4C 44 >                db      "HOLD"               // name string in 7-bit ascii, but
1131+ E818             >                org     $-1                 // alter last byte of Name just above to set
1131+ E817 C4          >                db      {b $} | END_BIT     // msb as name end
1131+ E818             >
1131+ E818 09 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1131+ E81A             >Prev_Ptr        defl    Heap_Ptr
1131+ E81A             >
1131+ E81A             >mirror_Ptr      defl    $
1131+ E81A             >
1131+ E81A 56 2D       >                dw      Dict_Ptr + 2        // xt
1131+ E81C             >Heap_Ptr        defl    $ - $E000           // save current HP
1131+ E81C             >
1131+ E81C             >Current_HP      defl  $ - $E000             // used to set HP once!
1131+ E81C             >
1131+ E81C             >//              ______________________________________________________________________
1131+ E81C             >//              Dictionary part
1131+ E81C             >
1131+ E81C             >                org     Dict_Ptr
1131+ 2D54             >
1131+ 2D54 1A 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1131+ 2D56             >
1131+ 2D56             >HOLD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1131+ 2D56 CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1131+ 2D59             >
1131+ 2D59             >
1131+ 2D59             >                endif           ; ok        // for other definitions it "points" the correct handler
1131+ 2D59             >                // Use of "; ok" to suppress "warning[fwdref]"
1131+ 2D59             >
1131+ 2D59             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1132+ 2D59 5B 27                        dw      NEG_ONE                 // -1
1133+ 2D5B 2E 28 31 26                  dw      HLD, PLUSSTORE          // hld +!
1134+ 2D5F 2E 28 49 26                  dw      HLD, FETCH, CSTORE      // hld @ c!
1134+ 2D63 67 26
1135+ 2D65 09 25                        dw      EXIT                    // ;
1136+ 2D67
1137+ 2D67              //  ______________________________________________________________________
1138+ 2D67              //
1139+ 2D67              // pad         -- a
1140+ 2D67              // leaves the buffer text address. This is at a fixed distance over HERE.
1141+ 2D67                              Colon_Def PAD, "PAD", is_normal
1141+ 2D67             >                New_Def  PAD, "PAD", Enter_Ptr, is_normal ; ok
1141+ 2D67             >
1141+ 2D67             >Dict_Ptr        defl    $
1141+ 2D67             >
1141+ 2D67             >//              ______________________________________________________________________
1141+ 2D67             >//              Heap part
1141+ 2D67             >
1141+ 2D67             >
1141+ 2D67             >                org     (Heap_Ptr & $1FFF) + $E000
1141+ E81C             >
1141+ E81C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1141+ E81C             >Latest_Definition defl  Heap_Ptr
1141+ E81C             >
1141+ E81C             >                // dummy db directives used to calculate length of namec
1141+ E81C 50 41 44    >                db      "PAD"
1141+ E81F             >len_NFA         defl    $ - temp_NFA
1141+ E81F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1141+ E81C             >
1141+ E81C 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1141+ E81D 50 41 44    >                db      "PAD"               // name string in 7-bit ascii, but
1141+ E820             >                org     $-1                 // alter last byte of Name just above to set
1141+ E81F C4          >                db      {b $} | END_BIT     // msb as name end
1141+ E820             >
1141+ E820 13 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1141+ E822             >Prev_Ptr        defl    Heap_Ptr
1141+ E822             >
1141+ E822             >mirror_Ptr      defl    $
1141+ E822             >
1141+ E822 69 2D       >                dw      Dict_Ptr + 2        // xt
1141+ E824             >Heap_Ptr        defl    $ - $E000           // save current HP
1141+ E824             >
1141+ E824             >Current_HP      defl  $ - $E000             // used to set HP once!
1141+ E824             >
1141+ E824             >//              ______________________________________________________________________
1141+ E824             >//              Dictionary part
1141+ E824             >
1141+ E824             >                org     Dict_Ptr
1141+ 2D67             >
1141+ 2D67 22 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1141+ 2D69             >
1141+ 2D69             >PAD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1141+ 2D69 CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1141+ 2D6C             >
1141+ 2D6C             >
1141+ 2D6C             >                endif           ; ok        // for other definitions it "points" the correct handler
1141+ 2D6C             >                // Use of "; ok" to suppress "warning[fwdref]"
1141+ 2D6C             >
1141+ 2D6C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1142+ 2D6C 64 28                        dw      HERE                    // here
1143+ 2D6E 3D 20 44 00                  dw      LIT, 68                 // 68
1144+ 2D72 5B 25                        dw      PLUS                    // +
1145+ 2D74 09 25                        dw      EXIT                    // ;
1146+ 2D76
1147+ 2D76              //  ______________________________________________________________________
1148+ 2D76              //
1149+ 2D76              // word         c -- a
1150+ 2D76              // reads characters from input streams until it encouners a c delimiter.
1151+ 2D76              // Stores that packet so it starts from HERE
1152+ 2D76              // WORD leaves a counter as first byte and ends the packet with two spaces.
1153+ 2D76              // Other occurrences of c are ignored.
1154+ 2D76              // If BLK is zero, text is taken from terminal buffer TIB.
1155+ 2D76              // Otherwise text is taken from the disk-block given by BLK.
1156+ 2D76              // "in" variable is incremented of the number of character read.
1157+ 2D76              // The number of characters read is given by ENCLOSE.
1158+ 2D76                              Colon_Def WORD, "WORD", is_normal
1158+ 2D76             >                New_Def  WORD, "WORD", Enter_Ptr, is_normal ; ok
1158+ 2D76             >
1158+ 2D76             >Dict_Ptr        defl    $
1158+ 2D76             >
1158+ 2D76             >//              ______________________________________________________________________
1158+ 2D76             >//              Heap part
1158+ 2D76             >
1158+ 2D76             >
1158+ 2D76             >                org     (Heap_Ptr & $1FFF) + $E000
1158+ E824             >
1158+ E824             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1158+ E824             >Latest_Definition defl  Heap_Ptr
1158+ E824             >
1158+ E824             >                // dummy db directives used to calculate length of namec
1158+ E824 57 4F 52 44 >                db      "WORD"
1158+ E828             >len_NFA         defl    $ - temp_NFA
1158+ E828             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1158+ E824             >
1158+ E824 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1158+ E825 57 4F 52 44 >                db      "WORD"               // name string in 7-bit ascii, but
1158+ E829             >                org     $-1                 // alter last byte of Name just above to set
1158+ E828 C4          >                db      {b $} | END_BIT     // msb as name end
1158+ E829             >
1158+ E829 1C 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1158+ E82B             >Prev_Ptr        defl    Heap_Ptr
1158+ E82B             >
1158+ E82B             >mirror_Ptr      defl    $
1158+ E82B             >
1158+ E82B 78 2D       >                dw      Dict_Ptr + 2        // xt
1158+ E82D             >Heap_Ptr        defl    $ - $E000           // save current HP
1158+ E82D             >
1158+ E82D             >Current_HP      defl  $ - $E000             // used to set HP once!
1158+ E82D             >
1158+ E82D             >//              ______________________________________________________________________
1158+ E82D             >//              Dictionary part
1158+ E82D             >
1158+ E82D             >                org     Dict_Ptr
1158+ 2D76             >
1158+ 2D76 2B 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1158+ 2D78             >
1158+ 2D78             >WORD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1158+ 2D78 CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1158+ 2D7B             >
1158+ 2D7B             >
1158+ 2D7B             >                endif           ; ok        // for other definitions it "points" the correct handler
1158+ 2D7B             >                // Use of "; ok" to suppress "warning[fwdref]"
1158+ 2D7B             >
1158+ 2D7B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1159+ 2D7B E0 27 49 26                  dw      BLK, FETCH              // blk @
1160+ 2D7F                                                              // if
1161+ 2D7F 8F 20                        dw      ZBRANCH
1162+ 2D81 0C 00                        dw      Word_Else - $
1163+ 2D83 E0 27 49 26                  dw          BLK, FETCH          //      blk @
1164+ 2D87 44 37                        dw          BLOCK               //      block ( forward )
1165+ 2D89                                                              // else
1166+ 2D89 82 20                        dw      BRANCH
1167+ 2D8B 06 00                        dw      Word_Endif - $
1168+ 2D8D              Word_Else:
1169+ 2D8D A4 27 49 26                  dw         TIB, FETCH           //      tib @
1170+ 2D91              Word_Endif:                                     // endif
1171+ 2D91 E6 27 49 26                  dw      TO_IN, FETCH, PLUS      // >in @ +
1171+ 2D95 5B 25
1172+ 2D97 D8 25 C0 21                  dw      SWAP, ENCLOSE           // swap enclose
1173+ 2D9B 64 28 3D 20                  dw      HERE, LIT, 34, BLANK    // here 34 blank
1173+ 2D9F 22 00 4B 2D
1174+ 2DA3 E6 27 31 26                  dw      TO_IN, PLUSSTORE        // >in @ +
1175+ 2DA7 BB 25 A3 28                  dw      OVER, SUBTRACT, TO_R    // over - >r
1175+ 2DAB 13 25
1176+ 2DAD 29 25 64 28                  dw      R_OP, HERE, CSTORE      // r here c!
1176+ 2DB1 67 26
1177+ 2DB3 5B 25                        dw      PLUS                    // +
1178+ 2DB5 64 28 74 25                  dw      HERE, ONE_PLUS, R_TO    // here 1+ r>
1178+ 2DB9 1E 25
1179+ 2DBB 4A 24                        dw      CMOVE                   // cmove
1180+ 2DBD 64 28                        dw      HERE                    // here
1181+ 2DBF 09 25                        dw      EXIT                    // ;
1182+ 2DC1
1183+ 2DC1              //  ______________________________________________________________________
1184+ 2DC1              //
1185+ 2DC1              // (.")         --
1186+ 2DC1              // Direct procedure compiled by ." and  .(  It executes TYPE.
1187+ 2DC1                              Colon_Def C_DOT_QUOTE, '(.")', is_normal
1187+ 2DC1             >                New_Def  C_DOT_QUOTE, '(.")', Enter_Ptr, is_normal ; ok
1187+ 2DC1             >
1187+ 2DC1             >Dict_Ptr        defl    $
1187+ 2DC1             >
1187+ 2DC1             >//              ______________________________________________________________________
1187+ 2DC1             >//              Heap part
1187+ 2DC1             >
1187+ 2DC1             >
1187+ 2DC1             >                org     (Heap_Ptr & $1FFF) + $E000
1187+ E82D             >
1187+ E82D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1187+ E82D             >Latest_Definition defl  Heap_Ptr
1187+ E82D             >
1187+ E82D             >                // dummy db directives used to calculate length of namec
1187+ E82D 28 2E 22 29 >                db      '(.")'
1187+ E831             >len_NFA         defl    $ - temp_NFA
1187+ E831             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1187+ E82D             >
1187+ E82D 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1187+ E82E 28 2E 22 29 >                db      '(.")'               // name string in 7-bit ascii, but
1187+ E832             >                org     $-1                 // alter last byte of Name just above to set
1187+ E831 A9          >                db      {b $} | END_BIT     // msb as name end
1187+ E832             >
1187+ E832 24 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1187+ E834             >Prev_Ptr        defl    Heap_Ptr
1187+ E834             >
1187+ E834             >mirror_Ptr      defl    $
1187+ E834             >
1187+ E834 C3 2D       >                dw      Dict_Ptr + 2        // xt
1187+ E836             >Heap_Ptr        defl    $ - $E000           // save current HP
1187+ E836             >
1187+ E836             >Current_HP      defl  $ - $E000             // used to set HP once!
1187+ E836             >
1187+ E836             >//              ______________________________________________________________________
1187+ E836             >//              Dictionary part
1187+ E836             >
1187+ E836             >                org     Dict_Ptr
1187+ 2DC1             >
1187+ 2DC1 34 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1187+ 2DC3             >
1187+ 2DC3             >C_DOT_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1187+ 2DC3 CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1187+ 2DC6             >
1187+ 2DC6             >
1187+ 2DC6             >                endif           ; ok        // for other definitions it "points" the correct handler
1187+ 2DC6             >                // Use of "; ok" to suppress "warning[fwdref]"
1187+ 2DC6             >
1187+ 2DC6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1188+ 2DC6 29 25 D2 2B                  dw      R_OP, COUNT             // r count
1189+ 2DCA DF 25 74 25                  dw      DUP, ONE_PLUS           // dup 1+
1190+ 2DCE 1E 25 5B 25                  dw      R_TO, PLUS, TO_R        // r> + >r  ( advance IP )
1190+ 2DD2 13 25
1191+ 2DD4 26 2C                        dw      TYPE                    // type
1192+ 2DD6 09 25                        dw      EXIT                    // ;
1193+ 2DD8
1194+ 2DD8              //  ______________________________________________________________________
1195+ 2DD8              //
1196+ 2DD8              // char         -- c
1197+ 2DD8              // get first character from next input word
1198+ 2DD8                              Colon_Def CHAR,  "CHAR", is_normal
1198+ 2DD8             >                New_Def  CHAR, "CHAR", Enter_Ptr, is_normal ; ok
1198+ 2DD8             >
1198+ 2DD8             >Dict_Ptr        defl    $
1198+ 2DD8             >
1198+ 2DD8             >//              ______________________________________________________________________
1198+ 2DD8             >//              Heap part
1198+ 2DD8             >
1198+ 2DD8             >
1198+ 2DD8             >                org     (Heap_Ptr & $1FFF) + $E000
1198+ E836             >
1198+ E836             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1198+ E836             >Latest_Definition defl  Heap_Ptr
1198+ E836             >
1198+ E836             >                // dummy db directives used to calculate length of namec
1198+ E836 43 48 41 52 >                db      "CHAR"
1198+ E83A             >len_NFA         defl    $ - temp_NFA
1198+ E83A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1198+ E836             >
1198+ E836 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1198+ E837 43 48 41 52 >                db      "CHAR"               // name string in 7-bit ascii, but
1198+ E83B             >                org     $-1                 // alter last byte of Name just above to set
1198+ E83A D2          >                db      {b $} | END_BIT     // msb as name end
1198+ E83B             >
1198+ E83B 2D 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1198+ E83D             >Prev_Ptr        defl    Heap_Ptr
1198+ E83D             >
1198+ E83D             >mirror_Ptr      defl    $
1198+ E83D             >
1198+ E83D DA 2D       >                dw      Dict_Ptr + 2        // xt
1198+ E83F             >Heap_Ptr        defl    $ - $E000           // save current HP
1198+ E83F             >
1198+ E83F             >Current_HP      defl  $ - $E000             // used to set HP once!
1198+ E83F             >
1198+ E83F             >//              ______________________________________________________________________
1198+ E83F             >//              Dictionary part
1198+ E83F             >
1198+ E83F             >                org     Dict_Ptr
1198+ 2DD8             >
1198+ 2DD8 3D 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1198+ 2DDA             >
1198+ 2DDA             >CHAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1198+ 2DDA CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1198+ 2DDD             >
1198+ 2DDD             >
1198+ 2DDD             >                endif           ; ok        // for other definitions it "points" the correct handler
1198+ 2DDD             >                // Use of "; ok" to suppress "warning[fwdref]"
1198+ 2DDD             >
1198+ 2DDD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1199+ 2DDD 62 27 78 2D                  dw      BL, WORD                // bl word
1200+ 2DE1 74 25 5E 26                  dw      ONE_PLUS, CFETCH        // 1+ c@
1201+ 2DE5 09 25                        dw      EXIT                    // ;
1202+ 2DE7
1203+ 2DE7              //  ______________________________________________________________________
1204+ 2DE7              //
1205+ 2DE7              // ,"           --
1206+ 2DE7              // compiles a string terminated by " as a counted string from next input stream
1207+ 2DE7                              Colon_Def COMMA_QUOTE,  ',"', is_normal
1207+ 2DE7             >                New_Def  COMMA_QUOTE, ',"', Enter_Ptr, is_normal ; ok
1207+ 2DE7             >
1207+ 2DE7             >Dict_Ptr        defl    $
1207+ 2DE7             >
1207+ 2DE7             >//              ______________________________________________________________________
1207+ 2DE7             >//              Heap part
1207+ 2DE7             >
1207+ 2DE7             >
1207+ 2DE7             >                org     (Heap_Ptr & $1FFF) + $E000
1207+ E83F             >
1207+ E83F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1207+ E83F             >Latest_Definition defl  Heap_Ptr
1207+ E83F             >
1207+ E83F             >                // dummy db directives used to calculate length of namec
1207+ E83F 2C 22       >                db      ',"'
1207+ E841             >len_NFA         defl    $ - temp_NFA
1207+ E841             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1207+ E83F             >
1207+ E83F 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1207+ E840 2C 22       >                db      ',"'               // name string in 7-bit ascii, but
1207+ E842             >                org     $-1                 // alter last byte of Name just above to set
1207+ E841 A2          >                db      {b $} | END_BIT     // msb as name end
1207+ E842             >
1207+ E842 36 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1207+ E844             >Prev_Ptr        defl    Heap_Ptr
1207+ E844             >
1207+ E844             >mirror_Ptr      defl    $
1207+ E844             >
1207+ E844 E9 2D       >                dw      Dict_Ptr + 2        // xt
1207+ E846             >Heap_Ptr        defl    $ - $E000           // save current HP
1207+ E846             >
1207+ E846             >Current_HP      defl  $ - $E000             // used to set HP once!
1207+ E846             >
1207+ E846             >//              ______________________________________________________________________
1207+ E846             >//              Dictionary part
1207+ E846             >
1207+ E846             >                org     Dict_Ptr
1207+ 2DE7             >
1207+ 2DE7 44 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1207+ 2DE9             >
1207+ 2DE9             >COMMA_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1207+ 2DE9 CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1207+ 2DEC             >
1207+ 2DEC             >
1207+ 2DEC             >                endif           ; ok        // for other definitions it "points" the correct handler
1207+ 2DEC             >                // Use of "; ok" to suppress "warning[fwdref]"
1207+ 2DEC             >
1207+ 2DEC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1208+ 2DEC 3D 20 22 00                  dw      LIT, DQUOTE_CHAR        // [char] "
1209+ 2DF0 78 2D                        dw      WORD                    // word
1210+ 2DF2 5E 26 74 25                  dw      CFETCH, ONE_PLUS        // c@ 1+
1211+ 2DF6 6F 28                        dw      ALLOT                   // allot
1212+ 2DF8 3F 27 89 28                  dw      ZERO, CCOMMA            // 0 c,  ( nul-terminated string - useful anyway )
1213+ 2DFC 09 25                        dw      EXIT
1214+ 2DFE
1215+ 2DFE              //  ______________________________________________________________________
1216+ 2DFE              //
1217+ 2DFE              // .c           c --
1218+ 2DFE              // intermediate general purpose string builder, used by ." and .(
1219+ 2DFE                              Colon_Def DOT_C,  ".C", is_immediate
1219+ 2DFE             >                New_Def  DOT_C, ".C", Enter_Ptr, is_immediate ; ok
1219+ 2DFE             >
1219+ 2DFE             >Dict_Ptr        defl    $
1219+ 2DFE             >
1219+ 2DFE             >//              ______________________________________________________________________
1219+ 2DFE             >//              Heap part
1219+ 2DFE             >
1219+ 2DFE             >
1219+ 2DFE             >                org     (Heap_Ptr & $1FFF) + $E000
1219+ E846             >
1219+ E846             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1219+ E846             >Latest_Definition defl  Heap_Ptr
1219+ E846             >
1219+ E846             >                // dummy db directives used to calculate length of namec
1219+ E846 2E 43       >                db      ".C"
1219+ E848             >len_NFA         defl    $ - temp_NFA
1219+ E848             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1219+ E846             >
1219+ E846 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1219+ E847 2E 43       >                db      ".C"               // name string in 7-bit ascii, but
1219+ E849             >                org     $-1                 // alter last byte of Name just above to set
1219+ E848 C3          >                db      {b $} | END_BIT     // msb as name end
1219+ E849             >
1219+ E849 3F 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1219+ E84B             >Prev_Ptr        defl    Heap_Ptr
1219+ E84B             >
1219+ E84B             >mirror_Ptr      defl    $
1219+ E84B             >
1219+ E84B 00 2E       >                dw      Dict_Ptr + 2        // xt
1219+ E84D             >Heap_Ptr        defl    $ - $E000           // save current HP
1219+ E84D             >
1219+ E84D             >Current_HP      defl  $ - $E000             // used to set HP once!
1219+ E84D             >
1219+ E84D             >//              ______________________________________________________________________
1219+ E84D             >//              Dictionary part
1219+ E84D             >
1219+ E84D             >                org     Dict_Ptr
1219+ 2DFE             >
1219+ 2DFE 4B 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1219+ 2E00             >
1219+ 2E00             >DOT_C:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1219+ 2E00 CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1219+ 2E03             >
1219+ 2E03             >
1219+ 2E03             >                endif           ; ok        // for other definitions it "points" the correct handler
1219+ 2E03             >                // Use of "; ok" to suppress "warning[fwdref]"
1219+ 2E03             >
1219+ 2E03             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1220+ 2E03 0A 28 49 26                  dw      STATE, FETCH            // state @
1221+ 2E07                                                              // if
1222+ 2E07 8F 20                        dw      ZBRANCH
1223+ 2E09 12 00                        dw      Dot_C_Else - $
1224+ 2E0B 08 2B C3 2D                  dw          COMPILE, C_DOT_QUOTE //     compile (.")
1225+ 2E0F 78 2D 5E 26                  dw          WORD, CFETCH        //      word c@
1226+ 2E13 74 25 6F 28                  dw          ONE_PLUS, ALLOT     //      1+ allot
1227+ 2E17                                                              // else
1228+ 2E17 82 20                        dw      BRANCH
1229+ 2E19 08 00                        dw      Dot_C_Endif - $
1230+ 2E1B              Dot_C_Else:
1231+ 2E1B 78 2D D2 2B                  dw          WORD, COUNT, TYPE   //      word count type
1231+ 2E1F 26 2C
1232+ 2E21              Dot_C_Endif:                                    // endif
1233+ 2E21 09 25                        dw      EXIT                    ;
1234+ 2E23
1235+ 2E23              //  ______________________________________________________________________
1236+ 2E23              //
1237+ 2E23              // ."           c --
1238+ 2E23                              Colon_Def DOT_QUOTE,  '."', is_immediate
1238+ 2E23             >                New_Def  DOT_QUOTE, '."', Enter_Ptr, is_immediate ; ok
1238+ 2E23             >
1238+ 2E23             >Dict_Ptr        defl    $
1238+ 2E23             >
1238+ 2E23             >//              ______________________________________________________________________
1238+ 2E23             >//              Heap part
1238+ 2E23             >
1238+ 2E23             >
1238+ 2E23             >                org     (Heap_Ptr & $1FFF) + $E000
1238+ E84D             >
1238+ E84D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1238+ E84D             >Latest_Definition defl  Heap_Ptr
1238+ E84D             >
1238+ E84D             >                // dummy db directives used to calculate length of namec
1238+ E84D 2E 22       >                db      '."'
1238+ E84F             >len_NFA         defl    $ - temp_NFA
1238+ E84F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1238+ E84D             >
1238+ E84D C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1238+ E84E 2E 22       >                db      '."'               // name string in 7-bit ascii, but
1238+ E850             >                org     $-1                 // alter last byte of Name just above to set
1238+ E84F A2          >                db      {b $} | END_BIT     // msb as name end
1238+ E850             >
1238+ E850 46 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1238+ E852             >Prev_Ptr        defl    Heap_Ptr
1238+ E852             >
1238+ E852             >mirror_Ptr      defl    $
1238+ E852             >
1238+ E852 25 2E       >                dw      Dict_Ptr + 2        // xt
1238+ E854             >Heap_Ptr        defl    $ - $E000           // save current HP
1238+ E854             >
1238+ E854             >Current_HP      defl  $ - $E000             // used to set HP once!
1238+ E854             >
1238+ E854             >//              ______________________________________________________________________
1238+ E854             >//              Dictionary part
1238+ E854             >
1238+ E854             >                org     Dict_Ptr
1238+ 2E23             >
1238+ 2E23 52 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1238+ 2E25             >
1238+ 2E25             >DOT_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1238+ 2E25 CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1238+ 2E28             >
1238+ 2E28             >
1238+ 2E28             >                endif           ; ok        // for other definitions it "points" the correct handler
1238+ 2E28             >                // Use of "; ok" to suppress "warning[fwdref]"
1238+ 2E28             >
1238+ 2E28             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1239+ 2E28 3D 20 22 00                  dw      LIT, DQUOTE_CHAR        // [char] "
1240+ 2E2C 00 2E                        dw      DOT_C                   // [compile] .c
1241+ 2E2E 09 25                        dw      EXIT                    // ; immediate
1242+ 2E30
1243+ 2E30              //  ______________________________________________________________________
1244+ 2E30              //
1245+ 2E30              // .(           c --
1246+ 2E30                              Colon_Def DOT_BRACKET,  ".(", is_immediate
1246+ 2E30             >                New_Def  DOT_BRACKET, ".(", Enter_Ptr, is_immediate ; ok
1246+ 2E30             >
1246+ 2E30             >Dict_Ptr        defl    $
1246+ 2E30             >
1246+ 2E30             >//              ______________________________________________________________________
1246+ 2E30             >//              Heap part
1246+ 2E30             >
1246+ 2E30             >
1246+ 2E30             >                org     (Heap_Ptr & $1FFF) + $E000
1246+ E854             >
1246+ E854             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1246+ E854             >Latest_Definition defl  Heap_Ptr
1246+ E854             >
1246+ E854             >                // dummy db directives used to calculate length of namec
1246+ E854 2E 28       >                db      ".("
1246+ E856             >len_NFA         defl    $ - temp_NFA
1246+ E856             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1246+ E854             >
1246+ E854 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1246+ E855 2E 28       >                db      ".("               // name string in 7-bit ascii, but
1246+ E857             >                org     $-1                 // alter last byte of Name just above to set
1246+ E856 A8          >                db      {b $} | END_BIT     // msb as name end
1246+ E857             >
1246+ E857 4D 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1246+ E859             >Prev_Ptr        defl    Heap_Ptr
1246+ E859             >
1246+ E859             >mirror_Ptr      defl    $
1246+ E859             >
1246+ E859 32 2E       >                dw      Dict_Ptr + 2        // xt
1246+ E85B             >Heap_Ptr        defl    $ - $E000           // save current HP
1246+ E85B             >
1246+ E85B             >Current_HP      defl  $ - $E000             // used to set HP once!
1246+ E85B             >
1246+ E85B             >//              ______________________________________________________________________
1246+ E85B             >//              Dictionary part
1246+ E85B             >
1246+ E85B             >                org     Dict_Ptr
1246+ 2E30             >
1246+ 2E30 59 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1246+ 2E32             >
1246+ 2E32             >DOT_BRACKET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1246+ 2E32 CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1246+ 2E35             >
1246+ 2E35             >
1246+ 2E35             >                endif           ; ok        // for other definitions it "points" the correct handler
1246+ 2E35             >                // Use of "; ok" to suppress "warning[fwdref]"
1246+ 2E35             >
1246+ 2E35             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1247+ 2E35 3D 20 29 00                  dw      LIT, ")"                // [char] )
1248+ 2E39 00 2E                        dw      DOT_C                   // [compile] .c
1249+ 2E3B 09 25                        dw      EXIT                    // ; immediate
1250+ 2E3D
1251+ 2E3D              //  ______________________________________________________________________
1252+ 2E3D              //
1253+ 2E3D              // (sgn)        a -- a f
1254+ 2E3D              // determines if char in addr a is a sign (+ or -), and in that case increments
1255+ 2E3D              // a flag. Returns f as the sign, true for negative, false for positive.
1256+ 2E3D              // called by NUMBER and (EXP)
1257+ 2E3D                              Colon_Def CSGN,  "(SGN)", is_normal
1257+ 2E3D             >                New_Def  CSGN, "(SGN)", Enter_Ptr, is_normal ; ok
1257+ 2E3D             >
1257+ 2E3D             >Dict_Ptr        defl    $
1257+ 2E3D             >
1257+ 2E3D             >//              ______________________________________________________________________
1257+ 2E3D             >//              Heap part
1257+ 2E3D             >
1257+ 2E3D             >
1257+ 2E3D             >                org     (Heap_Ptr & $1FFF) + $E000
1257+ E85B             >
1257+ E85B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1257+ E85B             >Latest_Definition defl  Heap_Ptr
1257+ E85B             >
1257+ E85B             >                // dummy db directives used to calculate length of namec
1257+ E85B 28 53 47 4E >                db      "(SGN)"
1257+ E85F 29          >
1257+ E860             >len_NFA         defl    $ - temp_NFA
1257+ E860             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1257+ E85B             >
1257+ E85B 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1257+ E85C 28 53 47 4E >                db      "(SGN)"               // name string in 7-bit ascii, but
1257+ E860 29          >
1257+ E861             >                org     $-1                 // alter last byte of Name just above to set
1257+ E860 A9          >                db      {b $} | END_BIT     // msb as name end
1257+ E861             >
1257+ E861 54 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1257+ E863             >Prev_Ptr        defl    Heap_Ptr
1257+ E863             >
1257+ E863             >mirror_Ptr      defl    $
1257+ E863             >
1257+ E863 3F 2E       >                dw      Dict_Ptr + 2        // xt
1257+ E865             >Heap_Ptr        defl    $ - $E000           // save current HP
1257+ E865             >
1257+ E865             >Current_HP      defl  $ - $E000             // used to set HP once!
1257+ E865             >
1257+ E865             >//              ______________________________________________________________________
1257+ E865             >//              Dictionary part
1257+ E865             >
1257+ E865             >                org     Dict_Ptr
1257+ 2E3D             >
1257+ 2E3D 63 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1257+ 2E3F             >
1257+ 2E3F             >CSGN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1257+ 2E3F CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1257+ 2E42             >
1257+ 2E42             >
1257+ 2E42             >                endif           ; ok        // for other definitions it "points" the correct handler
1257+ 2E42             >                // Use of "; ok" to suppress "warning[fwdref]"
1257+ 2E42             >
1257+ 2E42             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1258+ 2E42 DF 25 74 25                  dw      DUP, ONE_PLUS, CFETCH   // dup 1+ c@
1258+ 2E46 5E 26
1259+ 2E48 DF 25 3D 20                  dw      DUP, LIT, "-", EQUALS   // dup [char] - =
1259+ 2E4C 2D 00 AF 28
1260+ 2E50                                                              // if
1261+ 2E50 8F 20                        dw      ZBRANCH
1262+ 2E52 12 00                        dw      CSgn_Else_0 - $
1263+ 2E54 C4 25                        dw          DROP                //      drop
1264+ 2E56 74 25                        dw          ONE_PLUS            //      1+
1265+ 2E58 46 27 16 28                  dw          ONE, DPL, PLUSSTORE //      1 dpl +!
1265+ 2E5C 31 26
1266+ 2E5E 46 27                        dw          ONE                 //      1
1267+ 2E60                                                              // else
1268+ 2E60 82 20                        dw      BRANCH
1269+ 2E62 16 00                        dw      CSgn_Endif_0 - $
1270+ 2E64              CSgn_Else_0:
1271+ 2E64 3D 20 2B 00                  dw          LIT, "+", EQUALS    //      [char] + =
1271+ 2E68 AF 28
1272+ 2E6A                                                              //      if
1273+ 2E6A 8F 20                        dw          ZBRANCH
1274+ 2E6C 0A 00                        dw          CSgn_Endif_1 - $
1275+ 2E6E 74 25                        dw              ONE_PLUS        //          1+
1276+ 2E70 46 27 16 28                  dw              ONE, DPL        //          1 dpl
1277+ 2E74 31 26                        dw              PLUSSTORE       //          +!
1278+ 2E76              CSgn_Endif_1                                    //      endif
1279+ 2E76 3F 27                        dw          ZERO                //      0
1280+ 2E78              CSgn_Endif_0:                                   // endif
1281+ 2E78 09 25                        dw      EXIT
1282+ 2E7A
1283+ 2E7A              //  ______________________________________________________________________
1284+ 2E7A              //
1285+ 2E7A              // (number)     d a -- d1 a1
1286+ 2E7A              // using the current BASE parse characters stored in address a
1287+ 2E7A              // accumulating a double precision integer d
1288+ 2E7A              // the process stops at the first not-convertible character
1289+ 2E7A              // A double-number is kept in CPU registers as HLDE.
1290+ 2E7A              // On the stack a double number is treated as two single numbers
1291+ 2E7A              // where HL is on the top of the stack and DE is the second from top,
1292+ 2E7A              // so in the stack memory it appears as LHED.
1293+ 2E7A              // Instead, in 2VARIABLE a double number is stored as EDLH.
1294+ 2E7A                              Colon_Def CNUMBER,  "(NUMBER)", is_normal
1294+ 2E7A             >                New_Def  CNUMBER, "(NUMBER)", Enter_Ptr, is_normal ; ok
1294+ 2E7A             >
1294+ 2E7A             >Dict_Ptr        defl    $
1294+ 2E7A             >
1294+ 2E7A             >//              ______________________________________________________________________
1294+ 2E7A             >//              Heap part
1294+ 2E7A             >
1294+ 2E7A             >
1294+ 2E7A             >                org     (Heap_Ptr & $1FFF) + $E000
1294+ E865             >
1294+ E865             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1294+ E865             >Latest_Definition defl  Heap_Ptr
1294+ E865             >
1294+ E865             >                // dummy db directives used to calculate length of namec
1294+ E865 28 4E 55 4D >                db      "(NUMBER)"
1294+ E869 42 45 52 29 >
1294+ E86D             >len_NFA         defl    $ - temp_NFA
1294+ E86D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1294+ E865             >
1294+ E865 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1294+ E866 28 4E 55 4D >                db      "(NUMBER)"               // name string in 7-bit ascii, but
1294+ E86A 42 45 52 29 >
1294+ E86E             >                org     $-1                 // alter last byte of Name just above to set
1294+ E86D A9          >                db      {b $} | END_BIT     // msb as name end
1294+ E86E             >
1294+ E86E 5B 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1294+ E870             >Prev_Ptr        defl    Heap_Ptr
1294+ E870             >
1294+ E870             >mirror_Ptr      defl    $
1294+ E870             >
1294+ E870 7C 2E       >                dw      Dict_Ptr + 2        // xt
1294+ E872             >Heap_Ptr        defl    $ - $E000           // save current HP
1294+ E872             >
1294+ E872             >Current_HP      defl  $ - $E000             // used to set HP once!
1294+ E872             >
1294+ E872             >//              ______________________________________________________________________
1294+ E872             >//              Dictionary part
1294+ E872             >
1294+ E872             >                org     Dict_Ptr
1294+ 2E7A             >
1294+ 2E7A 70 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1294+ 2E7C             >
1294+ 2E7C             >CNUMBER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1294+ 2E7C CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1294+ 2E7F             >
1294+ 2E7F             >
1294+ 2E7F             >                endif           ; ok        // for other definitions it "points" the correct handler
1294+ 2E7F             >                // Use of "; ok" to suppress "warning[fwdref]"
1294+ 2E7F             >
1294+ 2E7F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1295+ 2E7F                                                              // begin
1296+ 2E7F              CNumber_Begin:
1297+ 2E7F 74 25                        dw          ONE_PLUS            //      1+
1298+ 2E81 DF 25 13 25                  dw          DUP, TO_R           //      dup >r
1299+ 2E85 5E 26                        dw          CFETCH              //      @
1300+ 2E87 10 28 49 26                  dw          BASE, FETCH         //      base @
1301+ 2E8B E5 20                        dw          DIGIT               //      digit
1302+ 2E8D                                                              // while
1303+ 2E8D 8F 20                        dw      ZBRANCH
1304+ 2E8F 2C 00                        dw      CNumber_While_end - $
1305+ 2E91 D8 25                        dw          SWAP                //      swap
1306+ 2E93 10 28 49 26                  dw          BASE, FETCH         //      base @
1307+ 2E97 6E 24                        dw          UM_MUL              //      um*
1308+ 2E99 C4 25 E6 25                  dw          DROP, ROT           //      drop rot
1309+ 2E9D 10 28 49 26                  dw          BASE, FETCH         //      base @
1310+ 2EA1 6E 24                        dw          UM_MUL              //      um*
1311+ 2EA3 65 25                        dw          DPLUS               //      d+
1312+ 2EA5 16 28 49 26                  dw          DPL, FETCH          //      dpl @
1313+ 2EA9 74 25                        dw          ONE_PLUS            //      1+
1314+ 2EAB                                                              //      if
1315+ 2EAB 8F 20                        dw          ZBRANCH
1316+ 2EAD 08 00                        dw          CNumber_Endif - $
1317+ 2EAF 46 27 16 28                  dw              ONE, DPL        //          1 dpl
1318+ 2EB3 31 26                        dw              PLUSSTORE       //          +!
1319+ 2EB5              CNumber_Endif:                                  //      endif
1320+ 2EB5 1E 25                        dw             R_TO             //      r>  ( balance rp )
1321+ 2EB7 82 20                        dw      BRANCH
1322+ 2EB9 C6 FF                        dw      CNumber_Begin - $
1323+ 2EBB              CNumber_While_end:                              // repeat
1324+ 2EBB 1E 25                        dw      R_TO                    // r>  ( balance rp on exit while-repeat )
1325+ 2EBD 09 25                        dw      EXIT                    // ;
1326+ 2EBF
1327+ 2EBF              //  ______________________________________________________________________
1328+ 2EBF              //
1329+ 2EBF              // (prefix)
1330+ 2EBF                              Colon_Def CPREFIX,  "(PREFIX)", is_normal
1330+ 2EBF             >                New_Def  CPREFIX, "(PREFIX)", Enter_Ptr, is_normal ; ok
1330+ 2EBF             >
1330+ 2EBF             >Dict_Ptr        defl    $
1330+ 2EBF             >
1330+ 2EBF             >//              ______________________________________________________________________
1330+ 2EBF             >//              Heap part
1330+ 2EBF             >
1330+ 2EBF             >
1330+ 2EBF             >                org     (Heap_Ptr & $1FFF) + $E000
1330+ E872             >
1330+ E872             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1330+ E872             >Latest_Definition defl  Heap_Ptr
1330+ E872             >
1330+ E872             >                // dummy db directives used to calculate length of namec
1330+ E872 28 50 52 45 >                db      "(PREFIX)"
1330+ E876 46 49 58 29 >
1330+ E87A             >len_NFA         defl    $ - temp_NFA
1330+ E87A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1330+ E872             >
1330+ E872 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1330+ E873 28 50 52 45 >                db      "(PREFIX)"               // name string in 7-bit ascii, but
1330+ E877 46 49 58 29 >
1330+ E87B             >                org     $-1                 // alter last byte of Name just above to set
1330+ E87A A9          >                db      {b $} | END_BIT     // msb as name end
1330+ E87B             >
1330+ E87B 65 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1330+ E87D             >Prev_Ptr        defl    Heap_Ptr
1330+ E87D             >
1330+ E87D             >mirror_Ptr      defl    $
1330+ E87D             >
1330+ E87D C1 2E       >                dw      Dict_Ptr + 2        // xt
1330+ E87F             >Heap_Ptr        defl    $ - $E000           // save current HP
1330+ E87F             >
1330+ E87F             >Current_HP      defl  $ - $E000             // used to set HP once!
1330+ E87F             >
1330+ E87F             >//              ______________________________________________________________________
1330+ E87F             >//              Dictionary part
1330+ E87F             >
1330+ E87F             >                org     Dict_Ptr
1330+ 2EBF             >
1330+ 2EBF 7D 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1330+ 2EC1             >
1330+ 2EC1             >CPREFIX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1330+ 2EC1 CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1330+ 2EC4             >
1330+ 2EC4             >
1330+ 2EC4             >                endif           ; ok        // for other definitions it "points" the correct handler
1330+ 2EC4             >                // Use of "; ok" to suppress "warning[fwdref]"
1330+ 2EC4             >
1330+ 2EC4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1331+ 2EC4 DF 25 74 25                  dw      DUP, ONE_PLUS, CFETCH   // dup 1+ c@
1331+ 2EC8 5E 26
1332+ 2ECA DF 25 13 25                  dw      DUP, TO_R               // dup >r
1333+ 2ECE 3D 20 24 00                  dw      LIT, "$", EQUALS        // [char] $ =
1333+ 2ED2 AF 28
1334+ 2ED4                                                              // if
1335+ 2ED4 8F 20                        dw      ZBRANCH
1336+ 2ED6 06 00                        dw      CPrefix_Endif_0 - $
1337+ 2ED8 74 25                        dw          ONE_PLUS            //      1+
1338+ 2EDA 60 2B                        dw          HEX
1339+ 2EDC              CPrefix_Endif_0:                                // endif
1340+ 2EDC 29 25                        dw      R_OP                    // r@
1341+ 2EDE 3D 20 25 00                  dw      LIT, "%", EQUALS        // [char] $ =
1341+ 2EE2 AF 28
1342+ 2EE4                                                              // if
1343+ 2EE4 8F 20                        dw      ZBRANCH
1344+ 2EE6 0A 00                        dw      CPrefix_Endif_1 - $
1345+ 2EE8 74 25                        dw          ONE_PLUS            //      1+
1346+ 2EEA 4D 27                        dw          TWO
1347+ 2EEC 10 28 53 26                  dw          BASE, STORE         //      2 base !
1348+ 2EF0              CPrefix_Endif_1:                                // endif
1349+ 2EF0 1E 25                        dw      R_TO                    // r>
1350+ 2EF2 3D 20 23 00                  dw      LIT, "#", EQUALS        // [char] $ =
1350+ 2EF6 AF 28
1351+ 2EF8                                                              // if
1352+ 2EF8 8F 20                        dw      ZBRANCH
1353+ 2EFA 06 00                        dw      CPrefix_Endif_2 - $
1354+ 2EFC 74 25                        dw          ONE_PLUS            //      1+
1355+ 2EFE 6F 2B                        dw          DECIMAL
1356+ 2F00              CPrefix_Endif_2:                                // endif
1357+ 2F00 09 25                        dw      EXIT
1358+ 2F02
1359+ 2F02              //  ______________________________________________________________________
1360+ 2F02
1361+ 2F02              PDOM_PTR:
1362+ 2F02              //              New_Def PDOM,   "PDOM", Create_Ptr, is_normal
1363+ 2F02 2C 2F 2D 3A                  db ',/-:'
1364+ 2F06              PCDM_PTR:
1365+ 2F06              //              New_Def PCDM,   "PCDM", Create_Ptr, is_normal
1366+ 2F06 2E 2E 2E 2E                  db '....'
1367+ 2F0A
1368+ 2F0A              //  ______________________________________________________________________
1369+ 2F0A              //
1370+ 2F0A              // number       a -- d
1371+ 2F0A                              Colon_Def NUMBER,  "NUMBER", is_normal
1371+ 2F0A             >                New_Def  NUMBER, "NUMBER", Enter_Ptr, is_normal ; ok
1371+ 2F0A             >
1371+ 2F0A             >Dict_Ptr        defl    $
1371+ 2F0A             >
1371+ 2F0A             >//              ______________________________________________________________________
1371+ 2F0A             >//              Heap part
1371+ 2F0A             >
1371+ 2F0A             >
1371+ 2F0A             >                org     (Heap_Ptr & $1FFF) + $E000
1371+ E87F             >
1371+ E87F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1371+ E87F             >Latest_Definition defl  Heap_Ptr
1371+ E87F             >
1371+ E87F             >                // dummy db directives used to calculate length of namec
1371+ E87F 4E 55 4D 42 >                db      "NUMBER"
1371+ E883 45 52       >
1371+ E885             >len_NFA         defl    $ - temp_NFA
1371+ E885             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1371+ E87F             >
1371+ E87F 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1371+ E880 4E 55 4D 42 >                db      "NUMBER"               // name string in 7-bit ascii, but
1371+ E884 45 52       >
1371+ E886             >                org     $-1                 // alter last byte of Name just above to set
1371+ E885 D2          >                db      {b $} | END_BIT     // msb as name end
1371+ E886             >
1371+ E886 72 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1371+ E888             >Prev_Ptr        defl    Heap_Ptr
1371+ E888             >
1371+ E888             >mirror_Ptr      defl    $
1371+ E888             >
1371+ E888 0C 2F       >                dw      Dict_Ptr + 2        // xt
1371+ E88A             >Heap_Ptr        defl    $ - $E000           // save current HP
1371+ E88A             >
1371+ E88A             >Current_HP      defl  $ - $E000             // used to set HP once!
1371+ E88A             >
1371+ E88A             >//              ______________________________________________________________________
1371+ E88A             >//              Dictionary part
1371+ E88A             >
1371+ E88A             >                org     Dict_Ptr
1371+ 2F0A             >
1371+ 2F0A 88 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1371+ 2F0C             >
1371+ 2F0C             >NUMBER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1371+ 2F0C CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1371+ 2F0F             >
1371+ 2F0F             >
1371+ 2F0F             >                endif           ; ok        // for other definitions it "points" the correct handler
1371+ 2F0F             >                // Use of "; ok" to suppress "warning[fwdref]"
1371+ 2F0F             >
1371+ 2F0F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1372+ 2F0F 3F 27 3F 27                  dw      ZERO, ZERO              // 0 0
1373+ 2F13 E6 25                        dw      ROT                     // rot
1374+ 2F15
1375+ 2F15 10 28 49 26                  dw      BASE, FETCH, TO_R       // base @ >r  // ***
1375+ 2F19 13 25
1376+ 2F1B C1 2E                        dw      CPREFIX                 // (prefix)   // ***
1377+ 2F1D
1378+ 2F1D 3F 2E 13 25                  dw      CSGN, TO_R              // (sgn) >r
1379+ 2F21
1380+ 2F21 5B 27 16 28                  dw      NEG_ONE, DPL, STORE     // -1 dpl !
1380+ 2F25 53 26
1381+ 2F27 7C 2E                        dw      CNUMBER                 // (number)
1382+ 2F29              Number_Begin:                                   // begin
1383+ 2F29 DF 25 5E 26                  dw        DUP, CFETCH             // dup c@
1384+ 2F2D 13 25                        dw        TO_R                    // >r
1385+ 2F2F                          //  dw        PCDM, PDOM              //  pcdm pdom
1386+ 2F2F 3D 20 06 2F                  dw        LIT, PCDM_PTR           //
1387+ 2F33 3D 20 02 2F                  dw        LIT, PDOM_PTR           //
1388+ 2F37 3D 20 04 00                  dw        LIT, 4                  //  4
1389+ 2F3B 1E 25                        dw        R_TO                    // r>
1390+ 2F3D F2 21                        dw        C_MAP                   // (map)
1391+ 2F3F 3F 27 D8 25                  dw        ZERO, SWAP              // 0 swap
1392+ 2F43 3D 20 2E 00                  dw        LIT, ".", EQUALS        // [char] . =  ( decimal point )
1392+ 2F47 AF 28
1393+ 2F49
1394+ 2F49 8F 20                        dw        ZBRANCH                 // if
1395+ 2F4B 0A 00                        dw        Number_Endif_1 - $
1396+ 2F4D 3F 27 16 28                  dw          ZERO, DPL, STORE        //      0 dpl !
1396+ 2F51 53 26
1397+ 2F53 74 25                        dw          ONE_PLUS                //      1+
1398+ 2F55              Number_Endif_1:                                   // endif
1399+ 2F55
1400+ 2F55 8F 20                        dw      ZBRANCH                // while
1401+ 2F57 08 00                        dw      Number_While_end - $
1402+ 2F59 7C 2E                        dw        CNUMBER                 // (number)
1403+ 2F5B 82 20                        dw      BRANCH
1404+ 2F5D CC FF                        dw      Number_Begin - $
1405+ 2F5F              Number_While_end:                               // repeat
1406+ 2F5F
1407+ 2F5F 5E 26 62 27                  dw      CFETCH, BL              // c@ bl
1408+ 2F63 A3 28 3F 27                  dw      SUBTRACT, ZERO, QERROR  // - 0 ?error
1408+ 2F67 98 2A
1409+ 2F69 1E 25                        dw      R_TO                    // r>
1410+ 2F6B                                                              // if
1411+ 2F6B 8F 20                        dw      ZBRANCH
1412+ 2F6D 04 00                        dw      Number_Endif_2 - $
1413+ 2F6F A8 25                        dw          DMINUS              //      dminus
1414+ 2F71              Number_Endif_2:                                 // endif
1415+ 2F71 1E 25 10 28                  dw      R_TO, BASE, STORE       // r> base !  // ***
1415+ 2F75 53 26
1416+ 2F77 09 25                        dw      EXIT                    // ;
1417+ 2F79
1418+ 2F79              //  ______________________________________________________________________
1419+ 2F79              //
1420+ 2F79              // twofind      a -- d
1421+ 2F79                              Colon_Def TWOFIND,  "2FIND", is_normal
1421+ 2F79             >                New_Def  TWOFIND, "2FIND", Enter_Ptr, is_normal ; ok
1421+ 2F79             >
1421+ 2F79             >Dict_Ptr        defl    $
1421+ 2F79             >
1421+ 2F79             >//              ______________________________________________________________________
1421+ 2F79             >//              Heap part
1421+ 2F79             >
1421+ 2F79             >
1421+ 2F79             >                org     (Heap_Ptr & $1FFF) + $E000
1421+ E88A             >
1421+ E88A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1421+ E88A             >Latest_Definition defl  Heap_Ptr
1421+ E88A             >
1421+ E88A             >                // dummy db directives used to calculate length of namec
1421+ E88A 32 46 49 4E >                db      "2FIND"
1421+ E88E 44          >
1421+ E88F             >len_NFA         defl    $ - temp_NFA
1421+ E88F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1421+ E88A             >
1421+ E88A 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1421+ E88B 32 46 49 4E >                db      "2FIND"               // name string in 7-bit ascii, but
1421+ E88F 44          >
1421+ E890             >                org     $-1                 // alter last byte of Name just above to set
1421+ E88F C4          >                db      {b $} | END_BIT     // msb as name end
1421+ E890             >
1421+ E890 7F 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1421+ E892             >Prev_Ptr        defl    Heap_Ptr
1421+ E892             >
1421+ E892             >mirror_Ptr      defl    $
1421+ E892             >
1421+ E892 7B 2F       >                dw      Dict_Ptr + 2        // xt
1421+ E894             >Heap_Ptr        defl    $ - $E000           // save current HP
1421+ E894             >
1421+ E894             >Current_HP      defl  $ - $E000             // used to set HP once!
1421+ E894             >
1421+ E894             >//              ______________________________________________________________________
1421+ E894             >//              Dictionary part
1421+ E894             >
1421+ E894             >                org     Dict_Ptr
1421+ 2F79             >
1421+ 2F79 92 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1421+ 2F7B             >
1421+ 2F7B             >TWOFIND:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1421+ 2F7B CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1421+ 2F7E             >
1421+ 2F7E             >
1421+ 2F7E             >                endif           ; ok        // for other definitions it "points" the correct handler
1421+ 2F7E             >                // Use of "; ok" to suppress "warning[fwdref]"
1421+ 2F7E             >
1421+ 2F7E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1422+ 2F7E 13 25 29 25                  dw      TO_R, R_OP              // >r r@
1423+ 2F82 FE 27 49 26                  dw      CONTEXT, FETCH, FETCH   // context @ @
1423+ 2F86 49 26
1424+ 2F88 52 21                        dw      C_FIND                  // (find)
1425+ 2F8A 06 29                        dw      QDUP                    // ?dup
1426+ 2F8C 2E 25                        dw      ZEQUAL                  // 0=
1427+ 2F8E                                                              // if
1428+ 2F8E 8F 20                        dw      ZBRANCH
1429+ 2F90 24 00                        dw      LFind_Endif - $
1430+ 2F92 29 25                        dw          R_OP                //      r@
1431+ 2F94                              // dw          LATEST               //      latest
1432+ 2F94 04 28 49 26                  dw          CURRENT, FETCH, FETCH   // context @ @
1432+ 2F98 49 26
1433+ 2F9A 52 21                        dw          C_FIND              //      (find)
1434+ 2F9C
1435+ 2F9C 06 29                            dw      QDUP                    // ?dup
1436+ 2F9E 2E 25                            dw      ZEQUAL                  // 0=
1437+ 2FA0                                                                  // if
1438+ 2FA0 8F 20                            dw      ZBRANCH
1439+ 2FA2 12 00                            dw      LFind_Endif2 - $
1440+ 2FA4 29 25                            dw          R_OP                //      r@
1441+ 2FA6 3D 20 F5 31                      dw          LIT, FORTH, TO_BODY
1441+ 2FAA 17 2A
1442+ 2FAC 8A 25 8A 25                      dw          CELL_PLUS, CELL_PLUS
1443+ 2FB0 49 26                            dw          FETCH
1444+ 2FB2 52 21                            dw          C_FIND              //      (find)
1445+ 2FB4              LFind_Endif2:                                    // endif
1446+ 2FB4
1447+ 2FB4
1448+ 2FB4              LFind_Endif:                                    // endif
1449+ 2FB4 1E 25 C4 25                  dw      R_TO, DROP              // r> drop
1450+ 2FB8 09 25                        dw      EXIT                    // ;
1451+ 2FBA
1452+ 2FBA              //  ______________________________________________________________________
1453+ 2FBA              //
1454+ 2FBA              // -find        a -- d
1455+ 2FBA                              Colon_Def LFIND,  "-FIND", is_normal
1455+ 2FBA             >                New_Def  LFIND, "-FIND", Enter_Ptr, is_normal ; ok
1455+ 2FBA             >
1455+ 2FBA             >Dict_Ptr        defl    $
1455+ 2FBA             >
1455+ 2FBA             >//              ______________________________________________________________________
1455+ 2FBA             >//              Heap part
1455+ 2FBA             >
1455+ 2FBA             >
1455+ 2FBA             >                org     (Heap_Ptr & $1FFF) + $E000
1455+ E894             >
1455+ E894             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1455+ E894             >Latest_Definition defl  Heap_Ptr
1455+ E894             >
1455+ E894             >                // dummy db directives used to calculate length of namec
1455+ E894 2D 46 49 4E >                db      "-FIND"
1455+ E898 44          >
1455+ E899             >len_NFA         defl    $ - temp_NFA
1455+ E899             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1455+ E894             >
1455+ E894 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1455+ E895 2D 46 49 4E >                db      "-FIND"               // name string in 7-bit ascii, but
1455+ E899 44          >
1455+ E89A             >                org     $-1                 // alter last byte of Name just above to set
1455+ E899 C4          >                db      {b $} | END_BIT     // msb as name end
1455+ E89A             >
1455+ E89A 8A 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1455+ E89C             >Prev_Ptr        defl    Heap_Ptr
1455+ E89C             >
1455+ E89C             >mirror_Ptr      defl    $
1455+ E89C             >
1455+ E89C BC 2F       >                dw      Dict_Ptr + 2        // xt
1455+ E89E             >Heap_Ptr        defl    $ - $E000           // save current HP
1455+ E89E             >
1455+ E89E             >Current_HP      defl  $ - $E000             // used to set HP once!
1455+ E89E             >
1455+ E89E             >//              ______________________________________________________________________
1455+ E89E             >//              Dictionary part
1455+ E89E             >
1455+ E89E             >                org     Dict_Ptr
1455+ 2FBA             >
1455+ 2FBA 9C 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1455+ 2FBC             >
1455+ 2FBC             >LFIND:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1455+ 2FBC CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1455+ 2FBF             >
1455+ 2FBF             >
1455+ 2FBF             >                endif           ; ok        // for other definitions it "points" the correct handler
1455+ 2FBF             >                // Use of "; ok" to suppress "warning[fwdref]"
1455+ 2FBF             >
1455+ 2FBF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1456+ 2FBF 62 27 78 2D                  dw      BL, WORD                // bl word
1457+ 2FC3 7B 2F                        dw      TWOFIND                 // 2find
1458+ 2FC5 09 25                        dw      EXIT                    // ;
1459+ 2FC7
1460+ 2FC7              //  ______________________________________________________________________
1461+ 2FC7              //
1462+ 2FC7              // (abort)      --
1463+ 2FC7                              Colon_Def CABORT,  "(ABORT)", is_normal
1463+ 2FC7             >                New_Def  CABORT, "(ABORT)", Enter_Ptr, is_normal ; ok
1463+ 2FC7             >
1463+ 2FC7             >Dict_Ptr        defl    $
1463+ 2FC7             >
1463+ 2FC7             >//              ______________________________________________________________________
1463+ 2FC7             >//              Heap part
1463+ 2FC7             >
1463+ 2FC7             >
1463+ 2FC7             >                org     (Heap_Ptr & $1FFF) + $E000
1463+ E89E             >
1463+ E89E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1463+ E89E             >Latest_Definition defl  Heap_Ptr
1463+ E89E             >
1463+ E89E             >                // dummy db directives used to calculate length of namec
1463+ E89E 28 41 42 4F >                db      "(ABORT)"
1463+ E8A2 52 54 29    >
1463+ E8A5             >len_NFA         defl    $ - temp_NFA
1463+ E8A5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1463+ E89E             >
1463+ E89E 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1463+ E89F 28 41 42 4F >                db      "(ABORT)"               // name string in 7-bit ascii, but
1463+ E8A3 52 54 29    >
1463+ E8A6             >                org     $-1                 // alter last byte of Name just above to set
1463+ E8A5 A9          >                db      {b $} | END_BIT     // msb as name end
1463+ E8A6             >
1463+ E8A6 94 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1463+ E8A8             >Prev_Ptr        defl    Heap_Ptr
1463+ E8A8             >
1463+ E8A8             >mirror_Ptr      defl    $
1463+ E8A8             >
1463+ E8A8 C9 2F       >                dw      Dict_Ptr + 2        // xt
1463+ E8AA             >Heap_Ptr        defl    $ - $E000           // save current HP
1463+ E8AA             >
1463+ E8AA             >Current_HP      defl  $ - $E000             // used to set HP once!
1463+ E8AA             >
1463+ E8AA             >//              ______________________________________________________________________
1463+ E8AA             >//              Dictionary part
1463+ E8AA             >
1463+ E8AA             >                org     Dict_Ptr
1463+ 2FC7             >
1463+ 2FC7 A8 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1463+ 2FC9             >
1463+ 2FC9             >CABORT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1463+ 2FC9 CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1463+ 2FCC             >
1463+ 2FCC             >
1463+ 2FCC             >                endif           ; ok        // for other definitions it "points" the correct handler
1463+ 2FCC             >                // Use of "; ok" to suppress "warning[fwdref]"
1463+ 2FCC             >
1463+ 2FCC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1464+ 2FCC 5C 32                        dw      ABORT                   // abort
1465+ 2FCE 09 25                        dw      EXIT                    // ;
1466+ 2FD0
1467+ 2FD0              //  ______________________________________________________________________
1468+ 2FD0              //
1469+ 2FD0              // error        n --
1470+ 2FD0              // raise an error
1471+ 2FD0              // if WARNING is 0, prints "MSG#n".
1472+ 2FD0              // if WARNING is 1, prints line n of screen 4.
1473+ 2FD0              // if WARNING is -1 does (ABORT) that normally does ABORT
1474+ 2FD0              // value can be negative or beyond block 4.
1475+ 2FD0                              Colon_Def ERROR,  "ERROR", is_normal
1475+ 2FD0             >                New_Def  ERROR, "ERROR", Enter_Ptr, is_normal ; ok
1475+ 2FD0             >
1475+ 2FD0             >Dict_Ptr        defl    $
1475+ 2FD0             >
1475+ 2FD0             >//              ______________________________________________________________________
1475+ 2FD0             >//              Heap part
1475+ 2FD0             >
1475+ 2FD0             >
1475+ 2FD0             >                org     (Heap_Ptr & $1FFF) + $E000
1475+ E8AA             >
1475+ E8AA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1475+ E8AA             >Latest_Definition defl  Heap_Ptr
1475+ E8AA             >
1475+ E8AA             >                // dummy db directives used to calculate length of namec
1475+ E8AA 45 52 52 4F >                db      "ERROR"
1475+ E8AE 52          >
1475+ E8AF             >len_NFA         defl    $ - temp_NFA
1475+ E8AF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1475+ E8AA             >
1475+ E8AA 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1475+ E8AB 45 52 52 4F >                db      "ERROR"               // name string in 7-bit ascii, but
1475+ E8AF 52          >
1475+ E8B0             >                org     $-1                 // alter last byte of Name just above to set
1475+ E8AF D2          >                db      {b $} | END_BIT     // msb as name end
1475+ E8B0             >
1475+ E8B0 9E 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1475+ E8B2             >Prev_Ptr        defl    Heap_Ptr
1475+ E8B2             >
1475+ E8B2             >mirror_Ptr      defl    $
1475+ E8B2             >
1475+ E8B2 D2 2F       >                dw      Dict_Ptr + 2        // xt
1475+ E8B4             >Heap_Ptr        defl    $ - $E000           // save current HP
1475+ E8B4             >
1475+ E8B4             >Current_HP      defl  $ - $E000             // used to set HP once!
1475+ E8B4             >
1475+ E8B4             >//              ______________________________________________________________________
1475+ E8B4             >//              Dictionary part
1475+ E8B4             >
1475+ E8B4             >                org     Dict_Ptr
1475+ 2FD0             >
1475+ 2FD0 B2 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1475+ 2FD2             >
1475+ 2FD2             >ERROR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1475+ 2FD2 CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1475+ 2FD5             >
1475+ 2FD5             >
1475+ 2FD5             >                endif           ; ok        // for other definitions it "points" the correct handler
1475+ 2FD5             >                // Use of "; ok" to suppress "warning[fwdref]"
1475+ 2FD5             >
1475+ 2FD5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1476+ 2FD5 B0 27 49 26                  dw      WARNING, FETCH, ZLESS   // warning @ 0<
1476+ 2FD9 40 25
1477+ 2FDB                                                              // if
1478+ 2FDB 8F 20                        dw      ZBRANCH
1479+ 2FDD 04 00                        dw      Error_Endif_1 - $
1480+ 2FDF C9 2F                        dw          CABORT              //      (abort)
1481+ 2FE1              Error_Endif_1:                                  // endif
1482+ 2FE1 64 28 D2 2B                  dw      HERE, COUNT, TYPE       // here count type
1482+ 2FE5 26 2C
1483+ 2FE7 C3 2D                        dw      C_DOT_QUOTE             // .( ? )
1484+ 2FE9 02 3F 20                     db      2, "? "
1485+ 2FEC 85 35                        dw      MESSAGE                 // message  ( forward )
1486+ 2FEE 98 27 49 26                  dw      S0, FETCH, SPSTORE      // s0 @ sp!
1486+ 2FF2 F9 24
1487+ 2FF4 E0 27 49 26                  dw      BLK, FETCH, QDUP        // blk @ ?dup
1487+ 2FF8 06 29
1488+ 2FFA                                                              // if
1489+ 2FFA 8F 20                        dw      ZBRANCH
1490+ 2FFC 08 00                        dw      Error_Endif_2 - $
1491+ 2FFE E6 27 49 26                  dw          TO_IN, FETCH, SWAP  //      >in @ swap
1491+ 3002 D8 25
1492+ 3004              Error_Endif_2:                                  // endif
1493+ 3004 20 32                        dw      QUIT                    // quit ( forward )
1494+ 3006 09 25                        dw      EXIT                    // ;
1495+ 3008              //  ______________________________________________________________________
1496+ 3008              //
1497+ 3008              // id.          nfa --
1498+ 3008                              Colon_Def ID_DOT,  "ID.", is_normal
1498+ 3008             >                New_Def  ID_DOT, "ID.", Enter_Ptr, is_normal ; ok
1498+ 3008             >
1498+ 3008             >Dict_Ptr        defl    $
1498+ 3008             >
1498+ 3008             >//              ______________________________________________________________________
1498+ 3008             >//              Heap part
1498+ 3008             >
1498+ 3008             >
1498+ 3008             >                org     (Heap_Ptr & $1FFF) + $E000
1498+ E8B4             >
1498+ E8B4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1498+ E8B4             >Latest_Definition defl  Heap_Ptr
1498+ E8B4             >
1498+ E8B4             >                // dummy db directives used to calculate length of namec
1498+ E8B4 49 44 2E    >                db      "ID."
1498+ E8B7             >len_NFA         defl    $ - temp_NFA
1498+ E8B7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1498+ E8B4             >
1498+ E8B4 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1498+ E8B5 49 44 2E    >                db      "ID."               // name string in 7-bit ascii, but
1498+ E8B8             >                org     $-1                 // alter last byte of Name just above to set
1498+ E8B7 AE          >                db      {b $} | END_BIT     // msb as name end
1498+ E8B8             >
1498+ E8B8 AA 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1498+ E8BA             >Prev_Ptr        defl    Heap_Ptr
1498+ E8BA             >
1498+ E8BA             >mirror_Ptr      defl    $
1498+ E8BA             >
1498+ E8BA 0A 30       >                dw      Dict_Ptr + 2        // xt
1498+ E8BC             >Heap_Ptr        defl    $ - $E000           // save current HP
1498+ E8BC             >
1498+ E8BC             >Current_HP      defl  $ - $E000             // used to set HP once!
1498+ E8BC             >
1498+ E8BC             >//              ______________________________________________________________________
1498+ E8BC             >//              Dictionary part
1498+ E8BC             >
1498+ E8BC             >                org     Dict_Ptr
1498+ 3008             >
1498+ 3008 BA 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1498+ 300A             >
1498+ 300A             >ID_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1498+ 300A CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1498+ 300D             >
1498+ 300D             >
1498+ 300D             >                endif           ; ok        // for other definitions it "points" the correct handler
1498+ 300D             >                // Use of "; ok" to suppress "warning[fwdref]"
1498+ 300D             >
1498+ 300D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1499+ 300D BC 29                        dw      QTOHEAP
1500+ 300F DF 25 46 27                  dw      DUP, ONE, TRAVERSE      // dup 1 traverse
1500+ 3013 38 29
1501+ 3015 74 25                        dw      ONE_PLUS                // 1+
1502+ 3017 BB 25 A3 28                  dw      OVER, SUBTRACT          // over -
1503+ 301B DF 25 13 25                  dw      DUP, TO_R               // >r
1504+ 301F 69 2D D8 25                  dw      PAD, SWAP               // pad swap
1505+ 3023 4A 24                        dw      CMOVE                   // cmove
1506+ 3025 69 2D 74 25                  dw      PAD, ONE_PLUS           // pad 1+
1507+ 3029 1E 25 7B 25                  dw      R_TO, ONE_SUBTRACT      // R> 1-
1508+ 302D 26 2C 2D 29                  dw      TYPE, SPACE             // type
1509+ 3031 09 25                        dw      EXIT                    // ;
1510+ 3033
1511+ 3033              //  ______________________________________________________________________
1512+ 3033              //
1513+ 3033              // code         -- cccc
1514+ 3033                              Colon_Def CODE,  "CODE", is_normal
1514+ 3033             >                New_Def  CODE, "CODE", Enter_Ptr, is_normal ; ok
1514+ 3033             >
1514+ 3033             >Dict_Ptr        defl    $
1514+ 3033             >
1514+ 3033             >//              ______________________________________________________________________
1514+ 3033             >//              Heap part
1514+ 3033             >
1514+ 3033             >
1514+ 3033             >                org     (Heap_Ptr & $1FFF) + $E000
1514+ E8BC             >
1514+ E8BC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1514+ E8BC             >Latest_Definition defl  Heap_Ptr
1514+ E8BC             >
1514+ E8BC             >                // dummy db directives used to calculate length of namec
1514+ E8BC 43 4F 44 45 >                db      "CODE"
1514+ E8C0             >len_NFA         defl    $ - temp_NFA
1514+ E8C0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1514+ E8BC             >
1514+ E8BC 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1514+ E8BD 43 4F 44 45 >                db      "CODE"               // name string in 7-bit ascii, but
1514+ E8C1             >                org     $-1                 // alter last byte of Name just above to set
1514+ E8C0 C5          >                db      {b $} | END_BIT     // msb as name end
1514+ E8C1             >
1514+ E8C1 B4 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1514+ E8C3             >Prev_Ptr        defl    Heap_Ptr
1514+ E8C3             >
1514+ E8C3             >mirror_Ptr      defl    $
1514+ E8C3             >
1514+ E8C3 35 30       >                dw      Dict_Ptr + 2        // xt
1514+ E8C5             >Heap_Ptr        defl    $ - $E000           // save current HP
1514+ E8C5             >
1514+ E8C5             >Current_HP      defl  $ - $E000             // used to set HP once!
1514+ E8C5             >
1514+ E8C5             >//              ______________________________________________________________________
1514+ E8C5             >//              Dictionary part
1514+ E8C5             >
1514+ E8C5             >                org     Dict_Ptr
1514+ 3033             >
1514+ 3033 C3 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1514+ 3035             >
1514+ 3035             >CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1514+ 3035 CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1514+ 3038             >
1514+ 3038             >
1514+ 3038             >                endif           ; ok        // for other definitions it "points" the correct handler
1514+ 3038             >                // Use of "; ok" to suppress "warning[fwdref]"
1514+ 3038             >
1514+ 3038             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1515+ 3038 BC 2F                        dw      LFIND                   // -find
1516+ 303A                                                              // if
1517+ 303A 8F 20                        dw      ZBRANCH
1518+ 303C 10 00                        dw      Code_Endif - $
1519+ 303E C4 25                        dw          DROP                //      drop
1520+ 3040 22 2A 0A 30                  dw          TO_NAME, ID_DOT     //      >name id.
1521+ 3044 3D 20 04 00                  dw          LIT, 4, MESSAGE     //      4 message
1521+ 3048 85 35
1522+ 304A 2D 29                        dw          SPACE               //      space
1523+ 304C              Code_Endif:                                     // endif
1524+ 304C 64 28                        dw      HERE                    // here
1525+ 304E                                                              // ( ---- here begins NFA ---- )
1526+ 304E DF 25 5E 26                  dw      DUP, CFETCH             // dup c@
1527+ 3052 AA 27 49 26                  dw      WIDTH, FETCH, MIN       // width @ min  ( max 31 character length )
1527+ 3056 E0 28
1528+ 3058 74 25                        dw      ONE_PLUS                // 1+
1529+ 305A DF 25 6F 28                  dw      DUP, ALLOT              // dup allot
1530+ 305E 8A 25 8A 25                  dw      CELL_PLUS, CELL_PLUS    // cell+ cell+
1531+ 3062 13 25                        dw      TO_R                    // >r
1532+ 3064 DF 25                        dw      DUP                     // dup
1533+ 3066 3D 20                        dw      LIT
1534+ 3068 A0 00                        dw      SMUDGE_BIT | END_BIT    // 160
1535+ 306A 40 26                        dw      TOGGLE                  // toggle
1536+ 306C 64 28 7B 25                  dw      HERE, ONE_SUBTRACT      // here 1- ( last character )
1537+ 3070 3D 20 80 00                  dw      LIT, END_BIT, TOGGLE    // 128 toggle
1537+ 3074 40 26
1538+ 3076                                                              // ( ---- here is LFA ---- )
1539+ 3076 04 28 49 26                  dw      CURRENT, FETCH, FETCH   // current @ @ , \ latest ,
1539+ 307A 49 26
1540+ 307C 7A 28                        dw      COMMA
1541+ 307E DF 25 8A 25                  dw      DUP, CELL_PLUS, COMMA   // dup cell+ ,
1541+ 3082 7A 28
1542+ 3084 CD 29                        dw      HP_FETCH                // hp@
1543+ 3086 04 28 49 26                  dw      CURRENT, FETCH, STORE   // current @ ! ( save this word as the latest )
1543+ 308A 53 26
1544+ 308C CD 29 9E 29                  dw      HP_FETCH, FAR           // hp@ far R@ cmove
1545+ 3090 29 25 4A 24                  dw      R_OP, CMOVE
1546+ 3094 29 25 9B 25                  dw      R_OP, MINUS, ALLOT      // r@ negate allot
1546+ 3098 6F 28
1547+ 309A 1E 25 D4 27                  dw      R_TO, HP, PLUSSTORE     // r> hp +!
1547+ 309E 31 26
1548+ 30A0 CD 29 8E 25                  dw      HP_FETCH, CELL_MINUS    // hp@ cell- ,
1549+ 30A4 7A 28                        dw      COMMA
1550+ 30A6 3F 27 DF 29                  dw      ZERO, SKIP_HP_PAGE
1551+ 30AA                                                              // ( ---- here is LFA ---- )
1552+ 30AA 09 25                        dw      EXIT                    // ;
1553+ 30AC
1554+ 30AC              //  ______________________________________________________________________
1555+ 30AC              //
1556+ 30AC              // create       -- cccc     ( compile time )
1557+ 30AC              //              -- a        ( run time )
1558+ 30AC                              Colon_Def CREATE,  "CREATE", is_normal
1558+ 30AC             >                New_Def  CREATE, "CREATE", Enter_Ptr, is_normal ; ok
1558+ 30AC             >
1558+ 30AC             >Dict_Ptr        defl    $
1558+ 30AC             >
1558+ 30AC             >//              ______________________________________________________________________
1558+ 30AC             >//              Heap part
1558+ 30AC             >
1558+ 30AC             >
1558+ 30AC             >                org     (Heap_Ptr & $1FFF) + $E000
1558+ E8C5             >
1558+ E8C5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1558+ E8C5             >Latest_Definition defl  Heap_Ptr
1558+ E8C5             >
1558+ E8C5             >                // dummy db directives used to calculate length of namec
1558+ E8C5 43 52 45 41 >                db      "CREATE"
1558+ E8C9 54 45       >
1558+ E8CB             >len_NFA         defl    $ - temp_NFA
1558+ E8CB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1558+ E8C5             >
1558+ E8C5 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1558+ E8C6 43 52 45 41 >                db      "CREATE"               // name string in 7-bit ascii, but
1558+ E8CA 54 45       >
1558+ E8CC             >                org     $-1                 // alter last byte of Name just above to set
1558+ E8CB C5          >                db      {b $} | END_BIT     // msb as name end
1558+ E8CC             >
1558+ E8CC BC 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1558+ E8CE             >Prev_Ptr        defl    Heap_Ptr
1558+ E8CE             >
1558+ E8CE             >mirror_Ptr      defl    $
1558+ E8CE             >
1558+ E8CE AE 30       >                dw      Dict_Ptr + 2        // xt
1558+ E8D0             >Heap_Ptr        defl    $ - $E000           // save current HP
1558+ E8D0             >
1558+ E8D0             >Current_HP      defl  $ - $E000             // used to set HP once!
1558+ E8D0             >
1558+ E8D0             >//              ______________________________________________________________________
1558+ E8D0             >//              Dictionary part
1558+ E8D0             >
1558+ E8D0             >                org     Dict_Ptr
1558+ 30AC             >
1558+ 30AC CE 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1558+ 30AE             >
1558+ 30AE             >CREATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1558+ 30AE CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1558+ 30B1             >
1558+ 30B1             >
1558+ 30B1             >                endif           ; ok        // for other definitions it "points" the correct handler
1558+ 30B1             >                // Use of "; ok" to suppress "warning[fwdref]"
1558+ 30B1             >
1558+ 30B1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1559+ 30B1 35 30 42 2B                  dw      CODE, SMUDGE            // code smudge
1560+ 30B5 3D 20 CD 00                  dw      LIT, $CD, CCOMMA        // 00CD c,
1560+ 30B9 89 28
1561+ 30BB 3D 20 26 27                  dw      LIT, Variable_Ptr, COMMA// Variable_Ptr ,
1561+ 30BF 7A 28
1562+ 30C1 7E 2B                        dw      C_SEMICOLON_CODE
1563+ 30C3                              // this routine is called from the call coded in CFA
1564+ 30C3              Create_Ptr:
1565+ 30C3
1566+ 30C3
1567+ 30C3
1568+ 30C3                              next
1568+ 30C3 DD E9       >                jp      (ix)
1569+ 30C5
1570+ 30C5              //  ______________________________________________________________________
1571+ 30C5              //
1572+ 30C5              // [compile]    -- cccc     ( compile time )
1573+ 30C5                              Colon_Def COMPILE_IMMEDIATE,  "[COMPILE]", is_immediate
1573+ 30C5             >                New_Def  COMPILE_IMMEDIATE, "[COMPILE]", Enter_Ptr, is_immediate ; ok
1573+ 30C5             >
1573+ 30C5             >Dict_Ptr        defl    $
1573+ 30C5             >
1573+ 30C5             >//              ______________________________________________________________________
1573+ 30C5             >//              Heap part
1573+ 30C5             >
1573+ 30C5             >
1573+ 30C5             >                org     (Heap_Ptr & $1FFF) + $E000
1573+ E8D0             >
1573+ E8D0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1573+ E8D0             >Latest_Definition defl  Heap_Ptr
1573+ E8D0             >
1573+ E8D0             >                // dummy db directives used to calculate length of namec
1573+ E8D0 5B 43 4F 4D >                db      "[COMPILE]"
1573+ E8D4 50 49 4C 45 >
1573+ E8D8 5D          >
1573+ E8D9             >len_NFA         defl    $ - temp_NFA
1573+ E8D9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1573+ E8D0             >
1573+ E8D0 C9          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1573+ E8D1 5B 43 4F 4D >                db      "[COMPILE]"               // name string in 7-bit ascii, but
1573+ E8D5 50 49 4C 45 >
1573+ E8D9 5D          >
1573+ E8DA             >                org     $-1                 // alter last byte of Name just above to set
1573+ E8D9 DD          >                db      {b $} | END_BIT     // msb as name end
1573+ E8DA             >
1573+ E8DA C5 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1573+ E8DC             >Prev_Ptr        defl    Heap_Ptr
1573+ E8DC             >
1573+ E8DC             >mirror_Ptr      defl    $
1573+ E8DC             >
1573+ E8DC C7 30       >                dw      Dict_Ptr + 2        // xt
1573+ E8DE             >Heap_Ptr        defl    $ - $E000           // save current HP
1573+ E8DE             >
1573+ E8DE             >Current_HP      defl  $ - $E000             // used to set HP once!
1573+ E8DE             >
1573+ E8DE             >//              ______________________________________________________________________
1573+ E8DE             >//              Dictionary part
1573+ E8DE             >
1573+ E8DE             >                org     Dict_Ptr
1573+ 30C5             >
1573+ 30C5 DC 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1573+ 30C7             >
1573+ 30C7             >COMPILE_IMMEDIATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1573+ 30C7 CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1573+ 30CA             >
1573+ 30CA             >
1573+ 30CA             >                endif           ; ok        // for other definitions it "points" the correct handler
1573+ 30CA             >                // Use of "; ok" to suppress "warning[fwdref]"
1573+ 30CA             >
1573+ 30CA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1574+ 30CA BC 2F                        dw      LFIND                   // -find      (  cfa  b  f  )
1575+ 30CC 2E 25                        dw      ZEQUAL                  // 0=         (  cfa  b  )
1576+ 30CE 3F 27 98 2A                  dw      ZERO, QERROR            // 0 ?error
1577+ 30D2 C4 25                        dw      DROP                    // drop       (  cfa  )
1578+ 30D4 7A 28                        dw      COMMA                   // ,
1579+ 30D6 09 25                        dw      EXIT                    // ; immediate
1580+ 30D8
1581+ 30D8              //  ______________________________________________________________________
1582+ 30D8              //
1583+ 30D8              // literal      n --      ( compile time )
1584+ 30D8                              Colon_Def LITERAL,  "LITERAL", is_immediate
1584+ 30D8             >                New_Def  LITERAL, "LITERAL", Enter_Ptr, is_immediate ; ok
1584+ 30D8             >
1584+ 30D8             >Dict_Ptr        defl    $
1584+ 30D8             >
1584+ 30D8             >//              ______________________________________________________________________
1584+ 30D8             >//              Heap part
1584+ 30D8             >
1584+ 30D8             >
1584+ 30D8             >                org     (Heap_Ptr & $1FFF) + $E000
1584+ E8DE             >
1584+ E8DE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1584+ E8DE             >Latest_Definition defl  Heap_Ptr
1584+ E8DE             >
1584+ E8DE             >                // dummy db directives used to calculate length of namec
1584+ E8DE 4C 49 54 45 >                db      "LITERAL"
1584+ E8E2 52 41 4C    >
1584+ E8E5             >len_NFA         defl    $ - temp_NFA
1584+ E8E5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1584+ E8DE             >
1584+ E8DE C7          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1584+ E8DF 4C 49 54 45 >                db      "LITERAL"               // name string in 7-bit ascii, but
1584+ E8E3 52 41 4C    >
1584+ E8E6             >                org     $-1                 // alter last byte of Name just above to set
1584+ E8E5 CC          >                db      {b $} | END_BIT     // msb as name end
1584+ E8E6             >
1584+ E8E6 D0 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1584+ E8E8             >Prev_Ptr        defl    Heap_Ptr
1584+ E8E8             >
1584+ E8E8             >mirror_Ptr      defl    $
1584+ E8E8             >
1584+ E8E8 DA 30       >                dw      Dict_Ptr + 2        // xt
1584+ E8EA             >Heap_Ptr        defl    $ - $E000           // save current HP
1584+ E8EA             >
1584+ E8EA             >Current_HP      defl  $ - $E000             // used to set HP once!
1584+ E8EA             >
1584+ E8EA             >//              ______________________________________________________________________
1584+ E8EA             >//              Dictionary part
1584+ E8EA             >
1584+ E8EA             >                org     Dict_Ptr
1584+ 30D8             >
1584+ 30D8 E8 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1584+ 30DA             >
1584+ 30DA             >LITERAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1584+ 30DA CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1584+ 30DD             >
1584+ 30DD             >
1584+ 30DD             >                endif           ; ok        // for other definitions it "points" the correct handler
1584+ 30DD             >                // Use of "; ok" to suppress "warning[fwdref]"
1584+ 30DD             >
1584+ 30DD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1585+ 30DD 0A 28 49 26                  dw      STATE, FETCH            // state @
1586+ 30E1                                                              // if
1587+ 30E1 8F 20                        dw      ZBRANCH
1588+ 30E3 08 00                        dw      Literal_Endif - $
1589+ 30E5 08 2B 3D 20                  dw          COMPILE, LIT        //      compile lit
1590+ 30E9 7A 28                        dw          COMMA               //      ,
1591+ 30EB              Literal_Endif:                                  // endif
1592+ 30EB 09 25                        dw      EXIT                    // ; immediate
1593+ 30ED
1594+ 30ED              //  ______________________________________________________________________
1595+ 30ED              //
1596+ 30ED              // dliteral     n --      ( compile time )
1597+ 30ED                              Colon_Def DLITERAL,  "DLITERAL", is_immediate
1597+ 30ED             >                New_Def  DLITERAL, "DLITERAL", Enter_Ptr, is_immediate ; ok
1597+ 30ED             >
1597+ 30ED             >Dict_Ptr        defl    $
1597+ 30ED             >
1597+ 30ED             >//              ______________________________________________________________________
1597+ 30ED             >//              Heap part
1597+ 30ED             >
1597+ 30ED             >
1597+ 30ED             >                org     (Heap_Ptr & $1FFF) + $E000
1597+ E8EA             >
1597+ E8EA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1597+ E8EA             >Latest_Definition defl  Heap_Ptr
1597+ E8EA             >
1597+ E8EA             >                // dummy db directives used to calculate length of namec
1597+ E8EA 44 4C 49 54 >                db      "DLITERAL"
1597+ E8EE 45 52 41 4C >
1597+ E8F2             >len_NFA         defl    $ - temp_NFA
1597+ E8F2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1597+ E8EA             >
1597+ E8EA C8          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1597+ E8EB 44 4C 49 54 >                db      "DLITERAL"               // name string in 7-bit ascii, but
1597+ E8EF 45 52 41 4C >
1597+ E8F3             >                org     $-1                 // alter last byte of Name just above to set
1597+ E8F2 CC          >                db      {b $} | END_BIT     // msb as name end
1597+ E8F3             >
1597+ E8F3 DE 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1597+ E8F5             >Prev_Ptr        defl    Heap_Ptr
1597+ E8F5             >
1597+ E8F5             >mirror_Ptr      defl    $
1597+ E8F5             >
1597+ E8F5 EF 30       >                dw      Dict_Ptr + 2        // xt
1597+ E8F7             >Heap_Ptr        defl    $ - $E000           // save current HP
1597+ E8F7             >
1597+ E8F7             >Current_HP      defl  $ - $E000             // used to set HP once!
1597+ E8F7             >
1597+ E8F7             >//              ______________________________________________________________________
1597+ E8F7             >//              Dictionary part
1597+ E8F7             >
1597+ E8F7             >                org     Dict_Ptr
1597+ 30ED             >
1597+ 30ED F5 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1597+ 30EF             >
1597+ 30EF             >DLITERAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1597+ 30EF CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1597+ 30F2             >
1597+ 30F2             >
1597+ 30F2             >                endif           ; ok        // for other definitions it "points" the correct handler
1597+ 30F2             >                // Use of "; ok" to suppress "warning[fwdref]"
1597+ 30F2             >
1597+ 30F2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1598+ 30F2 0A 28 49 26                  dw      STATE, FETCH            // state @
1599+ 30F6                                                              // if
1600+ 30F6 8F 20                        dw      ZBRANCH
1601+ 30F8 08 00                        dw      DLiteral_Endif - $
1602+ 30FA D8 25                        dw          SWAP                //      swap
1603+ 30FC DA 30 DA 30                  dw          LITERAL,  LITERAL   //      [compile] literal [compile] literal
1604+ 3100              DLiteral_Endif:                                 // endif
1605+ 3100 09 25                        dw      EXIT                    // ; immediate
1606+ 3102
1607+ 3102              //  ______________________________________________________________________
1608+ 3102              //
1609+ 3102              // [char]       n --      ( compile time )
1610+ 3102              // inside colon definition, gets first character from next input word
1611+ 3102              // and compiles it as literal.
1612+ 3102                              Colon_Def COMPILE_CHAR,  "[CHAR]", is_immediate
1612+ 3102             >                New_Def  COMPILE_CHAR, "[CHAR]", Enter_Ptr, is_immediate ; ok
1612+ 3102             >
1612+ 3102             >Dict_Ptr        defl    $
1612+ 3102             >
1612+ 3102             >//              ______________________________________________________________________
1612+ 3102             >//              Heap part
1612+ 3102             >
1612+ 3102             >
1612+ 3102             >                org     (Heap_Ptr & $1FFF) + $E000
1612+ E8F7             >
1612+ E8F7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1612+ E8F7             >Latest_Definition defl  Heap_Ptr
1612+ E8F7             >
1612+ E8F7             >                // dummy db directives used to calculate length of namec
1612+ E8F7 5B 43 48 41 >                db      "[CHAR]"
1612+ E8FB 52 5D       >
1612+ E8FD             >len_NFA         defl    $ - temp_NFA
1612+ E8FD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1612+ E8F7             >
1612+ E8F7 C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1612+ E8F8 5B 43 48 41 >                db      "[CHAR]"               // name string in 7-bit ascii, but
1612+ E8FC 52 5D       >
1612+ E8FE             >                org     $-1                 // alter last byte of Name just above to set
1612+ E8FD DD          >                db      {b $} | END_BIT     // msb as name end
1612+ E8FE             >
1612+ E8FE EA 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1612+ E900             >Prev_Ptr        defl    Heap_Ptr
1612+ E900             >
1612+ E900             >mirror_Ptr      defl    $
1612+ E900             >
1612+ E900 04 31       >                dw      Dict_Ptr + 2        // xt
1612+ E902             >Heap_Ptr        defl    $ - $E000           // save current HP
1612+ E902             >
1612+ E902             >Current_HP      defl  $ - $E000             // used to set HP once!
1612+ E902             >
1612+ E902             >//              ______________________________________________________________________
1612+ E902             >//              Dictionary part
1612+ E902             >
1612+ E902             >                org     Dict_Ptr
1612+ 3102             >
1612+ 3102 00 09       >                dw      mirror_Ptr - $E000 + Heap_offset
1612+ 3104             >
1612+ 3104             >COMPILE_CHAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1612+ 3104 CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1612+ 3107             >
1612+ 3107             >
1612+ 3107             >                endif           ; ok        // for other definitions it "points" the correct handler
1612+ 3107             >                // Use of "; ok" to suppress "warning[fwdref]"
1612+ 3107             >
1612+ 3107             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1613+ 3107 DA 2D DA 30                  dw      CHAR, LITERAL           // char [compile] literal
1614+ 310B 09 25                        dw      EXIT                    // ; immediate
1615+ 310D
1616+ 310D              //  ______________________________________________________________________
1617+ 310D              //
1618+ 310D              // 0x00         n --      ( compile time )
1619+ 310D                              Colon_Def NUL_WORD,  $00, is_immediate
1619+ 310D             >                New_Def  NUL_WORD, $00, Enter_Ptr, is_immediate ; ok
1619+ 310D             >
1619+ 310D             >Dict_Ptr        defl    $
1619+ 310D             >
1619+ 310D             >//              ______________________________________________________________________
1619+ 310D             >//              Heap part
1619+ 310D             >
1619+ 310D             >
1619+ 310D             >                org     (Heap_Ptr & $1FFF) + $E000
1619+ E902             >
1619+ E902             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1619+ E902             >Latest_Definition defl  Heap_Ptr
1619+ E902             >
1619+ E902             >                // dummy db directives used to calculate length of namec
1619+ E902 00          >                db      $00
1619+ E903             >len_NFA         defl    $ - temp_NFA
1619+ E903             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1619+ E902             >
1619+ E902 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1619+ E903 00          >                db      $00               // name string in 7-bit ascii, but
1619+ E904             >                org     $-1                 // alter last byte of Name just above to set
1619+ E903 80          >                db      {b $} | END_BIT     // msb as name end
1619+ E904             >
1619+ E904 F7 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1619+ E906             >Prev_Ptr        defl    Heap_Ptr
1619+ E906             >
1619+ E906             >mirror_Ptr      defl    $
1619+ E906             >
1619+ E906 0F 31       >                dw      Dict_Ptr + 2        // xt
1619+ E908             >Heap_Ptr        defl    $ - $E000           // save current HP
1619+ E908             >
1619+ E908             >Current_HP      defl  $ - $E000             // used to set HP once!
1619+ E908             >
1619+ E908             >//              ______________________________________________________________________
1619+ E908             >//              Dictionary part
1619+ E908             >
1619+ E908             >                org     Dict_Ptr
1619+ 310D             >
1619+ 310D 06 09       >                dw      mirror_Ptr - $E000 + Heap_offset
1619+ 310F             >
1619+ 310F             >NUL_WORD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1619+ 310F CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1619+ 3112             >
1619+ 3112             >
1619+ 3112             >                endif           ; ok        // for other definitions it "points" the correct handler
1619+ 3112             >                // Use of "; ok" to suppress "warning[fwdref]"
1619+ 3112             >
1619+ 3112             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1620+ 3112 E0 27 49 26                  dw      BLK, FETCH, ONE         // blk @ 1
1620+ 3116 46 27
1621+ 3118 D5 28                        dw      GREATER                 // > if
1622+ 311A                                                              // if
1623+ 311A 8F 20                        dw      ZBRANCH
1624+ 311C 28 00                        dw      Nul_Else_1 - $
1625+ 311E 46 27 E0 27                  dw          ONE, BLK, PLUSSTORE //      1 blk +!
1625+ 3122 31 26
1626+ 3124 3F 27 E6 27                  dw          ZERO, TO_IN, STORE  //      0 >in !
1626+ 3128 53 26
1627+ 312A E0 27 49 26                  dw          BLK, FETCH          //      blk @
1628+ 312E 77 27                        dw          BSCR                //      b/scr
1629+ 3130 7B 25                        dw          ONE_SUBTRACT        //      1 -
1630+ 3132 C9 24                        dw          AND_OP              //      and  ( this is tricky )
1631+ 3134 2E 25                        dw          ZEQUAL              //      0=
1632+ 3136                                                              //      if
1633+ 3136 8F 20                        dw          ZBRANCH
1634+ 3138 08 00                        dw          Nul_Endif_2 - $
1635+ 313A C0 2A                        dw              QEXEC           //          ?exec
1636+ 313C 1E 25 C4 25                  dw              R_TO, DROP      //          r> drop
1637+ 3140              Nul_Endif_2:                                    //      endif
1638+ 3140 82 20                        dw      BRANCH
1639+ 3142 06 00                        dw      Nul_Endif_1 - $
1640+ 3144              Nul_Else_1:                                     // else
1641+ 3144 1E 25 C4 25                  dw          R_TO, DROP          //      r> drop
1642+ 3148              Nul_Endif_1:                                    // endif
1643+ 3148 09 25                        dw      EXIT                    // ;
1644+ 314A
1645+ 314A              //  ______________________________________________________________________
1646+ 314A              //
1647+ 314A              // ?stack       --
1648+ 314A              // Raise error #1 if stack is empty and you pop it
1649+ 314A              // Raise error #7 if stack is full.
1650+ 314A              // This means SP must always stay between HERE and FFFF
1651+ 314A              // For 128K BANK paging purpose SP must be <= BFE0 and 50 words room
1652+ 314A              // for Next 8K MMU paging this is $DOE8
1653+ 314A                              Colon_Def QSTACK, "?STACK", is_normal
1653+ 314A             >                New_Def  QSTACK, "?STACK", Enter_Ptr, is_normal ; ok
1653+ 314A             >
1653+ 314A             >Dict_Ptr        defl    $
1653+ 314A             >
1653+ 314A             >//              ______________________________________________________________________
1653+ 314A             >//              Heap part
1653+ 314A             >
1653+ 314A             >
1653+ 314A             >                org     (Heap_Ptr & $1FFF) + $E000
1653+ E908             >
1653+ E908             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1653+ E908             >Latest_Definition defl  Heap_Ptr
1653+ E908             >
1653+ E908             >                // dummy db directives used to calculate length of namec
1653+ E908 3F 53 54 41 >                db      "?STACK"
1653+ E90C 43 4B       >
1653+ E90E             >len_NFA         defl    $ - temp_NFA
1653+ E90E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1653+ E908             >
1653+ E908 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1653+ E909 3F 53 54 41 >                db      "?STACK"               // name string in 7-bit ascii, but
1653+ E90D 43 4B       >
1653+ E90F             >                org     $-1                 // alter last byte of Name just above to set
1653+ E90E CB          >                db      {b $} | END_BIT     // msb as name end
1653+ E90F             >
1653+ E90F 02 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1653+ E911             >Prev_Ptr        defl    Heap_Ptr
1653+ E911             >
1653+ E911             >mirror_Ptr      defl    $
1653+ E911             >
1653+ E911 4C 31       >                dw      Dict_Ptr + 2        // xt
1653+ E913             >Heap_Ptr        defl    $ - $E000           // save current HP
1653+ E913             >
1653+ E913             >Current_HP      defl  $ - $E000             // used to set HP once!
1653+ E913             >
1653+ E913             >//              ______________________________________________________________________
1653+ E913             >//              Dictionary part
1653+ E913             >
1653+ E913             >                org     Dict_Ptr
1653+ 314A             >
1653+ 314A 11 09       >                dw      mirror_Ptr - $E000 + Heap_offset
1653+ 314C             >
1653+ 314C             >QSTACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1653+ 314C CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1653+ 314F             >
1653+ 314F             >
1653+ 314F             >                endif           ; ok        // for other definitions it "points" the correct handler
1653+ 314F             >                // Use of "; ok" to suppress "warning[fwdref]"
1653+ 314F             >
1653+ 314F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1654+ 314F F0 24                        dw      SPFETCH                 // sp@
1655+ 3151 98 27 49 26                  dw      S0, FETCH               // s0 @
1656+ 3155 D8 25 BA 28                  dw      SWAP, ULESS             // swap u<
1657+ 3159 46 27 98 2A                  dw      ONE, QERROR             // 1 ?error
1658+ 315D 64 28                        dw      HERE                    // here
1659+ 315F 98 27 49 26                  dw      S0, FETCH, LESS         // s0 @ <
1659+ 3163 C8 28
1660+ 3165                                                              // if
1661+ 3165 8F 20                        dw      ZBRANCH
1662+ 3167 14 00                        dw      QStack_Endif - $
1663+ 3169 F0 24                        dw          SPFETCH             //      sp@
1664+ 316B 64 28 3D 20                  dw          HERE, LIT, 128      //      here 128
1664+ 316F 80 00
1665+ 3171 5B 25 BA 28                  dw          PLUS, ULESS         //      plus u<
1666+ 3175 3D 20 07 00                  dw          LIT, 7, QERROR      //      7 Cerror
1666+ 3179 98 2A
1667+ 317B              QStack_Endif:                                   // endif
1668+ 317B 09 25                        dw      EXIT                    // ;
1669+ 317D
1670+ 317D
# file closed: C:\Zx\CSpect\Projects\vForth17_DOT/source/L1.asm
 141  317D                              include "L2.asm"
# file opened: C:\Zx\CSpect\Projects\vForth17_DOT/source/L2.asm
   1+ 317D              //  ______________________________________________________________________
   2+ 317D              //
   3+ 317D              //  L2.asm
   4+ 317D              //
   5+ 317D              //  Level-2 3dos
   6+ 317D              //  the Forth interpreter, vocabulary, cold/warm start and quit from Forth.
   7+ 317D              //  ______________________________________________________________________
   8+ 317D
   9+ 317D
  10+ 317D              //  ______________________________________________________________________
  11+ 317D              //
  12+ 317D              // interpret    --
  13+ 317D              // This is the text interpreter.
  14+ 317D              // It executes or compiles, depending on STATE, the text coming from
  15+ 317D              // current input stream.
  16+ 317D              // If the word search fails after parsing CONTEXT and CURRENT vocabulary,
  17+ 317D              // the word is interpreted as numeric and converted, using current BASE,
  18+ 317D              // leaving on top of stack a single or double precision number, depending
  19+ 317D              // on the presence of a decimal point.
  20+ 317D              // If the number conversion fails, the terminal is notified with ? followed
  21+ 317D              // by the offending word.
  22+ 317D                              Colon_Def INTERPRET, "INTERPRET", is_normal
  22+ 317D             >                New_Def  INTERPRET, "INTERPRET", Enter_Ptr, is_normal ; ok
  22+ 317D             >
  22+ 317D             >Dict_Ptr        defl    $
  22+ 317D             >
  22+ 317D             >//              ______________________________________________________________________
  22+ 317D             >//              Heap part
  22+ 317D             >
  22+ 317D             >
  22+ 317D             >                org     (Heap_Ptr & $1FFF) + $E000
  22+ E913             >
  22+ E913             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  22+ E913             >Latest_Definition defl  Heap_Ptr
  22+ E913             >
  22+ E913             >                // dummy db directives used to calculate length of namec
  22+ E913 49 4E 54 45 >                db      "INTERPRET"
  22+ E917 52 50 52 45 >
  22+ E91B 54          >
  22+ E91C             >len_NFA         defl    $ - temp_NFA
  22+ E91C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  22+ E913             >
  22+ E913 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  22+ E914 49 4E 54 45 >                db      "INTERPRET"               // name string in 7-bit ascii, but
  22+ E918 52 50 52 45 >
  22+ E91C 54          >
  22+ E91D             >                org     $-1                 // alter last byte of Name just above to set
  22+ E91C D4          >                db      {b $} | END_BIT     // msb as name end
  22+ E91D             >
  22+ E91D 08 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  22+ E91F             >Prev_Ptr        defl    Heap_Ptr
  22+ E91F             >
  22+ E91F             >mirror_Ptr      defl    $
  22+ E91F             >
  22+ E91F 7F 31       >                dw      Dict_Ptr + 2        // xt
  22+ E921             >Heap_Ptr        defl    $ - $E000           // save current HP
  22+ E921             >
  22+ E921             >Current_HP      defl  $ - $E000             // used to set HP once!
  22+ E921             >
  22+ E921             >//              ______________________________________________________________________
  22+ E921             >//              Dictionary part
  22+ E921             >
  22+ E921             >                org     Dict_Ptr
  22+ 317D             >
  22+ 317D 1F 09       >                dw      mirror_Ptr - $E000 + Heap_offset
  22+ 317F             >
  22+ 317F             >INTERPRET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  22+ 317F CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  22+ 3182             >
  22+ 3182             >
  22+ 3182             >                endif           ; ok        // for other definitions it "points" the correct handler
  22+ 3182             >                // Use of "; ok" to suppress "warning[fwdref]"
  22+ 3182             >
  22+ 3182             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  23+ 3182
  24+ 3182              Interpret_Begin:                                        // begin
  25+ 3182 BC 2F                        dw          LFIND                       //      -find
  26+ 3184                                                                      //      if
  27+ 3184 8F 20                        dw          ZBRANCH
  28+ 3186 1A 00                        dw          Interpret_Else_1 - $
  29+ 3188 0A 28 49 26                  dw              STATE, FETCH, LESS      //          state @ <
  29+ 318C C8 28
  30+ 318E                                                                      //          if
  31+ 318E 8F 20                        dw              ZBRANCH
  32+ 3190 08 00                        dw              Interpret_Else_2 - $
  33+ 3192 1D 2B                        dw                  COMPILE_XT          //              compile,
  34+ 3194                                                                      //          else
  35+ 3194 82 20                        dw              BRANCH
  36+ 3196 06 00                        dw              Interpret_Endif_2 - $
  37+ 3198              Interpret_Else_2:
  38+ 3198 48 20 06 27                  dw                  EXECUTE, NOOP       //              execute nooop
  39+ 319C              Interpret_Endif_2:                                      //          endif
  40+ 319C                                                                      //      else
  41+ 319C 82 20                        dw          BRANCH
  42+ 319E 1A 00                        dw          Interpret_Endif_1 - $
  43+ 31A0              Interpret_Else_1:
  44+ 31A0 64 28 0C 2F                  dw              HERE, NUMBER            //          here number
  45+ 31A4 16 28 49 26                  dw              DPL, FETCH, ONE_PLUS    //          dpl @ 1+
  45+ 31A8 74 25
  46+ 31AA                                                                      //          if
  47+ 31AA 8F 20                        dw              ZBRANCH
  48+ 31AC 08 00                        dw              Interpret_Else_3 - $
  49+ 31AE              //              dw                  NMODE, FETCH        //              nmode @
  50+ 31AE              //                                                      //              if
  51+ 31AE              //              dw                  ZBRANCH
  52+ 31AE              //              dw                  Interpret_Endif_4 - $
  53+ 31AE              //              dw                      ONE, ZERO       //                  1 0
  54+ 31AE              //              dw                      TWO_DROP        //                  2drop
  55+ 31AE              //Interpret_Endif_4:                                      //              endif
  56+ 31AE EF 30                        dw                  DLITERAL            //              [compile] dliteral
  57+ 31B0                                                                      //          else
  58+ 31B0 82 20                        dw              BRANCH
  59+ 31B2 06 00                        dw              Interpret_Endif_3 - $
  60+ 31B4              Interpret_Else_3:
  61+ 31B4 C4 25                        dw                  DROP                //              drop
  62+ 31B6 DA 30                        dw                  LITERAL             //              [compile]  literal
  63+ 31B8              Interpret_Endif_3:                                      //          endif
  64+ 31B8              Interpret_Endif_1:                                      //      endif
  65+ 31B8 4C 31                        dw          QSTACK                      //      ?stack
  66+ 31BA 54 23                        dw          QTERMINAL                   //      ?terminal
  67+ 31BC                                                                      //      if
  68+ 31BC 8F 20                        dw          ZBRANCH
  69+ 31BE 04 00                        dw          Interpret_Endif_5 - $
  70+ 31C0 20 32                        dw              QUIT                    //          quit
  71+ 31C2              Interpret_Endif_5:                                      //      endif
  72+ 31C2 82 20                        dw      BRANCH
  73+ 31C4 BE FF                        dw      Interpret_Begin - $
  74+ 31C6 09 25                        dw      EXIT                            // ;
  75+ 31C8
  76+ 31C8              //  ______________________________________________________________________
  77+ 31C8              //
  78+ 31C8              // vocabulary   -- cccc     ( compile time )
  79+ 31C8              // Defining word used in the form   VOCABULARY cccc
  80+ 31C8              // creates the word  cccc  that gives the name to the vocabulary.
  81+ 31C8              // Giving  cccc  makes the vocabulary CONTEXT so its words are executed first
  82+ 31C8              // Giving  cccc DEFINITIONS makes  the vocabulary  CURRENT
  83+ 31C8              // so new definitions can be inserted in that vocabulary.
  84+ 31C8                              Colon_Def VOCABULARY, "VOCABULARY", is_normal
  84+ 31C8             >                New_Def  VOCABULARY, "VOCABULARY", Enter_Ptr, is_normal ; ok
  84+ 31C8             >
  84+ 31C8             >Dict_Ptr        defl    $
  84+ 31C8             >
  84+ 31C8             >//              ______________________________________________________________________
  84+ 31C8             >//              Heap part
  84+ 31C8             >
  84+ 31C8             >
  84+ 31C8             >                org     (Heap_Ptr & $1FFF) + $E000
  84+ E921             >
  84+ E921             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  84+ E921             >Latest_Definition defl  Heap_Ptr
  84+ E921             >
  84+ E921             >                // dummy db directives used to calculate length of namec
  84+ E921 56 4F 43 41 >                db      "VOCABULARY"
  84+ E925 42 55 4C 41 >
  84+ E929 52 59       >
  84+ E92B             >len_NFA         defl    $ - temp_NFA
  84+ E92B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  84+ E921             >
  84+ E921 8A          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  84+ E922 56 4F 43 41 >                db      "VOCABULARY"               // name string in 7-bit ascii, but
  84+ E926 42 55 4C 41 >
  84+ E92A 52 59       >
  84+ E92C             >                org     $-1                 // alter last byte of Name just above to set
  84+ E92B D9          >                db      {b $} | END_BIT     // msb as name end
  84+ E92C             >
  84+ E92C 13 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  84+ E92E             >Prev_Ptr        defl    Heap_Ptr
  84+ E92E             >
  84+ E92E             >mirror_Ptr      defl    $
  84+ E92E             >
  84+ E92E CA 31       >                dw      Dict_Ptr + 2        // xt
  84+ E930             >Heap_Ptr        defl    $ - $E000           // save current HP
  84+ E930             >
  84+ E930             >Current_HP      defl  $ - $E000             // used to set HP once!
  84+ E930             >
  84+ E930             >//              ______________________________________________________________________
  84+ E930             >//              Dictionary part
  84+ E930             >
  84+ E930             >                org     Dict_Ptr
  84+ 31C8             >
  84+ 31C8 2E 09       >                dw      mirror_Ptr - $E000 + Heap_offset
  84+ 31CA             >
  84+ 31CA             >VOCABULARY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  84+ 31CA CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  84+ 31CD             >
  84+ 31CD             >
  84+ 31CD             >                endif           ; ok        // for other definitions it "points" the correct handler
  84+ 31CD             >                // Use of "; ok" to suppress "warning[fwdref]"
  84+ 31CD             >
  84+ 31CD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  85+ 31CD
  86+ 31CD AA 2B                        dw      CBUILDS
  87+ 31CF
  88+ 31CF                              // dummy word + link part
  89+ 31CF 3D 20 81 A0                  dw      LIT, $A081, COMMA       // $81A0 ,
  89+ 31D3 7A 28
  90+ 31D5 04 28 49 26                  dw      CURRENT, FETCH          // current @
  91+ 31D9 49 26                        dw      FETCH                   // @
  92+ 31DB                          //  dw      CELL_MINUS              // cell-
  93+ 31DB 7A 28                        dw      COMMA                   // ,
  94+ 31DD
  95+ 31DD                              // voc-link part
  96+ 31DD 64 28                        dw      HERE                    // here
  97+ 31DF C2 27 49 26                  dw      VOC_LINK, FETCH         // voc-link @
  98+ 31E3 7A 28                        dw      COMMA                   // ,
  99+ 31E5 C2 27 53 26                  dw      VOC_LINK, STORE         // voc-link !
 100+ 31E9                              // DOES part
 101+ 31E9 B5 2B                        dw      DOES_TO                 // does>
 102+ 31EB              Vocabulary_Does:
 103+ 31EB 8A 25                        dw      CELL_PLUS               // cell+
 104+ 31ED FE 27 53 26                  dw      CONTEXT, STORE          // context !
 105+ 31F1 09 25                        dw      EXIT                    // ;
 106+ 31F3
 107+ 31F3              //  ______________________________________________________________________
 108+ 31F3              //
 109+ 31F3              // forth        --
 110+ 31F3              // Name of the first vocabulary.
 111+ 31F3              // It makes FORTH the CONTEXT vocabulary.
 112+ 31F3              // Until new user vocabulary are defined, new colon-definitions becomes
 113+ 31F3              // part of FORTH. It is immediate, so it will executed during the creation
 114+ 31F3              // of a colon definition to be able to select the vocabulary.
 115+ 31F3
 116+ 31F3                              New_Def FORTH, "FORTH", Does_Ptr, is_immediate
 116+ 31F3             >
 116+ 31F3             >Dict_Ptr        defl    $
 116+ 31F3             >
 116+ 31F3             >//              ______________________________________________________________________
 116+ 31F3             >//              Heap part
 116+ 31F3             >
 116+ 31F3             >
 116+ 31F3             >                org     (Heap_Ptr & $1FFF) + $E000
 116+ E930             >
 116+ E930             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 116+ E930             >Latest_Definition defl  Heap_Ptr
 116+ E930             >
 116+ E930             >                // dummy db directives used to calculate length of namec
 116+ E930 46 4F 52 54 >                db      "FORTH"
 116+ E934 48          >
 116+ E935             >len_NFA         defl    $ - temp_NFA
 116+ E935             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 116+ E930             >
 116+ E930 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 116+ E931 46 4F 52 54 >                db      "FORTH"               // name string in 7-bit ascii, but
 116+ E935 48          >
 116+ E936             >                org     $-1                 // alter last byte of Name just above to set
 116+ E935 C8          >                db      {b $} | END_BIT     // msb as name end
 116+ E936             >
 116+ E936 21 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 116+ E938             >Prev_Ptr        defl    Heap_Ptr
 116+ E938             >
 116+ E938             >mirror_Ptr      defl    $
 116+ E938             >
 116+ E938 F5 31       >                dw      Dict_Ptr + 2        // xt
 116+ E93A             >Heap_Ptr        defl    $ - $E000           // save current HP
 116+ E93A             >
 116+ E93A             >Current_HP      defl  $ - $E000             // used to set HP once!
 116+ E93A             >
 116+ E93A             >//              ______________________________________________________________________
 116+ E93A             >//              Dictionary part
 116+ E93A             >
 116+ E93A             >                org     Dict_Ptr
 116+ 31F3             >
 116+ 31F3 38 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 116+ 31F5             >
 116+ 31F5             >FORTH:          if Does_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 116+ 31F5 CD C2 2B    >                call    Does_Ptr ; ok        // for primitive definitions  actual code
 116+ 31F8             >
 116+ 31F8             >
 116+ 31F8             >                endif           ; ok        // for other definitions it "points" the correct handler
 116+ 31F8             >                // Use of "; ok" to suppress "warning[fwdref]"
 116+ 31F8             >
 116+ 31F8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 117+ 31F8 EB 31                        dw      Vocabulary_Does
 118+ 31FA
 119+ 31FA 81 A0                        db      $81, $A0
 120+ 31FC              Forth_Latest_Ptr:
 121+ 31FC 30 09                        dw      Latest_Definition
 122+ 31FE              Voclink_Ptr:
 123+ 31FE 00 00                        dw      0
 124+ 3200
 125+ 3200              // ____
 126+ 3200              // temp_VOC        defl    $                   // save this address
 127+ 3200              //              org     (Heap_Ptr & $1FFF) + $E000
 128+ 3200              //              db      $81, $A0
 129+ 3200              // Forth_Latest_Ptr_HEAP:
 130+ 3200              //                 dw      Latest_Definition
 131+ 3200              // Voclink_Ptr_HEAP:
 132+ 3200              //                 dw      0
 133+ 3200              // Heap_Ptr        defl    $ - $E000           // save current HP
 134+ 3200              //                 org     temp_VOC
 135+ 3200              // ____
 136+ 3200
 137+ 3200              // Any new vocabulary is structured as follow:
 138+ 3200              // PFA+0 points to DOES> part of VOCABULARY to perform CELL+ CONTEXT !
 139+ 3200              // PFA+2 is 81,A0 i.e. a null-word used as LATEST in the new vocabulary
 140+ 3200              // PFA+4 always contains the LATEST word of this VOCABULARY.
 141+ 3200              //       at creations it points to the null-word of its parent vocabulary
 142+ 3200              //       that is normally FORTH, For example ASSEMBLER points FORTH's null-word
 143+ 3200              // PFA+6 is the pointer that builds up the vocabulary linked list.
 144+ 3200              //       FORTH has 0 here to signal the end of the list and user's variable
 145+ 3200              //       VOC-LINK points to PFA+6 of the newest vocabulary created.
 146+ 3200              //       While FORTH is the only vocabulary, VOC-LINK points to FORTH's PFA+6
 147+ 3200              //       When ASSEMBLER is created, its PFA+6 points to FORTH's PFA+6, and so on
 148+ 3200
 149+ 3200              //  ______________________________________________________________________
 150+ 3200              //
 151+ 3200              // definitions  --
 152+ 3200              // Used in the form  cccc DEFINITIONS
 153+ 3200              // set the CURRENT vocabulary at CONTEXT to insert new definitions in
 154+ 3200              // vocabulary cccc.
 155+ 3200                              Colon_Def DEFINITIONS, "DEFINITIONS", is_normal
 155+ 3200             >                New_Def  DEFINITIONS, "DEFINITIONS", Enter_Ptr, is_normal ; ok
 155+ 3200             >
 155+ 3200             >Dict_Ptr        defl    $
 155+ 3200             >
 155+ 3200             >//              ______________________________________________________________________
 155+ 3200             >//              Heap part
 155+ 3200             >
 155+ 3200             >
 155+ 3200             >                org     (Heap_Ptr & $1FFF) + $E000
 155+ E93A             >
 155+ E93A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 155+ E93A             >Latest_Definition defl  Heap_Ptr
 155+ E93A             >
 155+ E93A             >                // dummy db directives used to calculate length of namec
 155+ E93A 44 45 46 49 >                db      "DEFINITIONS"
 155+ E93E 4E 49 54 49 >
 155+ E942 4F 4E 53    >
 155+ E945             >len_NFA         defl    $ - temp_NFA
 155+ E945             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 155+ E93A             >
 155+ E93A 8B          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 155+ E93B 44 45 46 49 >                db      "DEFINITIONS"               // name string in 7-bit ascii, but
 155+ E93F 4E 49 54 49 >
 155+ E943 4F 4E 53    >
 155+ E946             >                org     $-1                 // alter last byte of Name just above to set
 155+ E945 D3          >                db      {b $} | END_BIT     // msb as name end
 155+ E946             >
 155+ E946 30 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 155+ E948             >Prev_Ptr        defl    Heap_Ptr
 155+ E948             >
 155+ E948             >mirror_Ptr      defl    $
 155+ E948             >
 155+ E948 02 32       >                dw      Dict_Ptr + 2        // xt
 155+ E94A             >Heap_Ptr        defl    $ - $E000           // save current HP
 155+ E94A             >
 155+ E94A             >Current_HP      defl  $ - $E000             // used to set HP once!
 155+ E94A             >
 155+ E94A             >//              ______________________________________________________________________
 155+ E94A             >//              Dictionary part
 155+ E94A             >
 155+ E94A             >                org     Dict_Ptr
 155+ 3200             >
 155+ 3200 48 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 155+ 3202             >
 155+ 3202             >DEFINITIONS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 155+ 3202 CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 155+ 3205             >
 155+ 3205             >
 155+ 3205             >                endif           ; ok        // for other definitions it "points" the correct handler
 155+ 3205             >                // Use of "; ok" to suppress "warning[fwdref]"
 155+ 3205             >
 155+ 3205             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 156+ 3205 FE 27 49 26                  dw      CONTEXT, FETCH          // context @
 157+ 3209 04 28 53 26                  dw      CURRENT, STORE          // current !
 158+ 320D 09 25                        dw      EXIT                    // ;
 159+ 320F
 160+ 320F              //  ______________________________________________________________________
 161+ 320F              //
 162+ 320F              // (            -- cccc )
 163+ 320F              // the following text is interpreted as a comment until a closing )
 164+ 320F                              Colon_Def COMMENT_BRAKET, "(", is_immediate
 164+ 320F             >                New_Def  COMMENT_BRAKET, "(", Enter_Ptr, is_immediate ; ok
 164+ 320F             >
 164+ 320F             >Dict_Ptr        defl    $
 164+ 320F             >
 164+ 320F             >//              ______________________________________________________________________
 164+ 320F             >//              Heap part
 164+ 320F             >
 164+ 320F             >
 164+ 320F             >                org     (Heap_Ptr & $1FFF) + $E000
 164+ E94A             >
 164+ E94A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 164+ E94A             >Latest_Definition defl  Heap_Ptr
 164+ E94A             >
 164+ E94A             >                // dummy db directives used to calculate length of namec
 164+ E94A 28          >                db      "("
 164+ E94B             >len_NFA         defl    $ - temp_NFA
 164+ E94B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 164+ E94A             >
 164+ E94A C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 164+ E94B 28          >                db      "("               // name string in 7-bit ascii, but
 164+ E94C             >                org     $-1                 // alter last byte of Name just above to set
 164+ E94B A8          >                db      {b $} | END_BIT     // msb as name end
 164+ E94C             >
 164+ E94C 3A 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 164+ E94E             >Prev_Ptr        defl    Heap_Ptr
 164+ E94E             >
 164+ E94E             >mirror_Ptr      defl    $
 164+ E94E             >
 164+ E94E 11 32       >                dw      Dict_Ptr + 2        // xt
 164+ E950             >Heap_Ptr        defl    $ - $E000           // save current HP
 164+ E950             >
 164+ E950             >Current_HP      defl  $ - $E000             // used to set HP once!
 164+ E950             >
 164+ E950             >//              ______________________________________________________________________
 164+ E950             >//              Dictionary part
 164+ E950             >
 164+ E950             >                org     Dict_Ptr
 164+ 320F             >
 164+ 320F 4E 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 164+ 3211             >
 164+ 3211             >COMMENT_BRAKET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 164+ 3211 CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 164+ 3214             >
 164+ 3214             >
 164+ 3214             >                endif           ; ok        // for other definitions it "points" the correct handler
 164+ 3214             >                // Use of "; ok" to suppress "warning[fwdref]"
 164+ 3214             >
 164+ 3214             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 165+ 3214 3D 20 29 00                  dw      LIT, ")"                // [char] )
 166+ 3218 78 2D C4 25                  dw      WORD, DROP              // word drop
 167+ 321C 09 25                        dw      EXIT                    // ;
 168+ 321E
 169+ 321E              //  ______________________________________________________________________
 170+ 321E              //
 171+ 321E              // quit         --
 172+ 321E              // \ Erase the return-stack, stop any compilation and give controlo to the console. No message is issued.
 173+ 321E                              Colon_Def QUIT, "QUIT", is_normal
 173+ 321E             >                New_Def  QUIT, "QUIT", Enter_Ptr, is_normal ; ok
 173+ 321E             >
 173+ 321E             >Dict_Ptr        defl    $
 173+ 321E             >
 173+ 321E             >//              ______________________________________________________________________
 173+ 321E             >//              Heap part
 173+ 321E             >
 173+ 321E             >
 173+ 321E             >                org     (Heap_Ptr & $1FFF) + $E000
 173+ E950             >
 173+ E950             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 173+ E950             >Latest_Definition defl  Heap_Ptr
 173+ E950             >
 173+ E950             >                // dummy db directives used to calculate length of namec
 173+ E950 51 55 49 54 >                db      "QUIT"
 173+ E954             >len_NFA         defl    $ - temp_NFA
 173+ E954             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 173+ E950             >
 173+ E950 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 173+ E951 51 55 49 54 >                db      "QUIT"               // name string in 7-bit ascii, but
 173+ E955             >                org     $-1                 // alter last byte of Name just above to set
 173+ E954 D4          >                db      {b $} | END_BIT     // msb as name end
 173+ E955             >
 173+ E955 4A 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 173+ E957             >Prev_Ptr        defl    Heap_Ptr
 173+ E957             >
 173+ E957             >mirror_Ptr      defl    $
 173+ E957             >
 173+ E957 20 32       >                dw      Dict_Ptr + 2        // xt
 173+ E959             >Heap_Ptr        defl    $ - $E000           // save current HP
 173+ E959             >
 173+ E959             >Current_HP      defl  $ - $E000             // used to set HP once!
 173+ E959             >
 173+ E959             >//              ______________________________________________________________________
 173+ E959             >//              Dictionary part
 173+ E959             >
 173+ E959             >                org     Dict_Ptr
 173+ 321E             >
 173+ 321E 57 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 173+ 3220             >
 173+ 3220             >QUIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 173+ 3220 CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 173+ 3223             >
 173+ 3223             >
 173+ 3223             >                endif           ; ok        // for other definitions it "points" the correct handler
 173+ 3223             >                // Use of "; ok" to suppress "warning[fwdref]"
 173+ 3223             >
 173+ 3223             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 174+ 3223
 175+ 3223 4C 28 49 26                  dw      SOURCE_ID, FETCH        // source-id @
 176+ 3227 A3 23 C4 25                  dw      F_CLOSE, DROP           // f_close drop
 177+ 322B 3F 27 4C 28                  dw      ZERO, SOURCE_ID, STORE  // 0 source-id !
 177+ 322F 53 26
 178+ 3231 3F 27 E0 27                  dw      ZERO, BLK, STORE        // 0 blk !
 178+ 3235 53 26
 179+ 3237 26 2B                        dw      SQUARED_OPEN            // [compile] [
 180+ 3239                                                              // begin
 181+ 3239              Quit_Begin:
 182+ 3239 9E 27 49 26                  dw      R0, FETCH, RPSTORE      //      r0 @ rp!
 182+ 323D 04 25
 183+ 323F 4A 22                        dw      CR                      //      cr
 184+ 3241 15 2D                        dw      QUERY                   //      query
 185+ 3243              Next_Breakpoint_1:
 186+ 3243 7F 31                        dw      INTERPRET               //      interpret
 187+ 3245 0A 28 49 26                  dw      STATE, FETCH, ZEQUAL    //      state @ 0=
 187+ 3249 2E 25
 188+ 324B                                                              //      if
 189+ 324B 8F 20                        dw      ZBRANCH
 190+ 324D 07 00                        dw      Quit_Endif - $
 191+ 324F C3 2D                        dw          C_DOT_QUOTE
 192+ 3251 02 6F 6B                     db          2, "ok"             //          .( ok)
 193+ 3254              Quit_Endif:                                     //      else
 194+ 3254                                                              // again
 195+ 3254 82 20                        dw      BRANCH
 196+ 3256 E3 FF                        dw      Quit_Begin - $
 197+ 3258 09 25                        dw      EXIT                    // ;
 198+ 325A
 199+ 325A              //  ______________________________________________________________________
 200+ 325A              //
 201+ 325A              // abort        --
 202+ 325A                              Colon_Def ABORT, "ABORT", is_normal
 202+ 325A             >                New_Def  ABORT, "ABORT", Enter_Ptr, is_normal ; ok
 202+ 325A             >
 202+ 325A             >Dict_Ptr        defl    $
 202+ 325A             >
 202+ 325A             >//              ______________________________________________________________________
 202+ 325A             >//              Heap part
 202+ 325A             >
 202+ 325A             >
 202+ 325A             >                org     (Heap_Ptr & $1FFF) + $E000
 202+ E959             >
 202+ E959             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 202+ E959             >Latest_Definition defl  Heap_Ptr
 202+ E959             >
 202+ E959             >                // dummy db directives used to calculate length of namec
 202+ E959 41 42 4F 52 >                db      "ABORT"
 202+ E95D 54          >
 202+ E95E             >len_NFA         defl    $ - temp_NFA
 202+ E95E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 202+ E959             >
 202+ E959 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 202+ E95A 41 42 4F 52 >                db      "ABORT"               // name string in 7-bit ascii, but
 202+ E95E 54          >
 202+ E95F             >                org     $-1                 // alter last byte of Name just above to set
 202+ E95E D4          >                db      {b $} | END_BIT     // msb as name end
 202+ E95F             >
 202+ E95F 50 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 202+ E961             >Prev_Ptr        defl    Heap_Ptr
 202+ E961             >
 202+ E961             >mirror_Ptr      defl    $
 202+ E961             >
 202+ E961 5C 32       >                dw      Dict_Ptr + 2        // xt
 202+ E963             >Heap_Ptr        defl    $ - $E000           // save current HP
 202+ E963             >
 202+ E963             >Current_HP      defl  $ - $E000             // used to set HP once!
 202+ E963             >
 202+ E963             >//              ______________________________________________________________________
 202+ E963             >//              Dictionary part
 202+ E963             >
 202+ E963             >                org     Dict_Ptr
 202+ 325A             >
 202+ 325A 61 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 202+ 325C             >
 202+ 325C             >ABORT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 202+ 325C CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 202+ 325F             >
 202+ 325F             >
 202+ 325F             >                endif           ; ok        // for other definitions it "points" the correct handler
 202+ 325F             >                // Use of "; ok" to suppress "warning[fwdref]"
 202+ 325F             >
 202+ 325F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 203+ 325F 98 27 49 26                  dw      S0, FETCH               // s0 @
 204+ 3263 62 27                        dw      BL                      // bl
 205+ 3265 BB 25 53 26                  dw      OVER, STORE             // over !
 206+ 3269 F9 24                        dw      SPSTORE                 // sp!
 207+ 326B 6F 2B                        dw      DECIMAL                 // decimal
 208+ 326D F5 31                        dw      FORTH                   // [compile] forth
 209+ 326F 02 32                        dw      DEFINITIONS             // definitions
 210+ 3271
 211+ 3271 26 2B                        dw      SQUARED_OPEN            // [compile] [
 212+ 3273 9E 27 49 26                  dw      R0, FETCH, RPSTORE      //      r0 @ rp!
 212+ 3277 04 25
 213+ 3279
 214+ 3279              Autoexec_Ptr:
 215+ 3279 BD 3D                        dw      AUTOEXEC                // autoexec, patched to noop
 216+ 327B 20 32                        dw      QUIT                   // quit
 217+ 327D 09 25                        dw      EXIT                    // ;
 218+ 327F
 219+ 327F              //  ______________________________________________________________________
 220+ 327F              //
 221+ 327F              // warm         --
 222+ 327F                              Colon_Def WARM, "WARM", is_normal
 222+ 327F             >                New_Def  WARM, "WARM", Enter_Ptr, is_normal ; ok
 222+ 327F             >
 222+ 327F             >Dict_Ptr        defl    $
 222+ 327F             >
 222+ 327F             >//              ______________________________________________________________________
 222+ 327F             >//              Heap part
 222+ 327F             >
 222+ 327F             >
 222+ 327F             >                org     (Heap_Ptr & $1FFF) + $E000
 222+ E963             >
 222+ E963             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 222+ E963             >Latest_Definition defl  Heap_Ptr
 222+ E963             >
 222+ E963             >                // dummy db directives used to calculate length of namec
 222+ E963 57 41 52 4D >                db      "WARM"
 222+ E967             >len_NFA         defl    $ - temp_NFA
 222+ E967             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 222+ E963             >
 222+ E963 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 222+ E964 57 41 52 4D >                db      "WARM"               // name string in 7-bit ascii, but
 222+ E968             >                org     $-1                 // alter last byte of Name just above to set
 222+ E967 CD          >                db      {b $} | END_BIT     // msb as name end
 222+ E968             >
 222+ E968 59 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 222+ E96A             >Prev_Ptr        defl    Heap_Ptr
 222+ E96A             >
 222+ E96A             >mirror_Ptr      defl    $
 222+ E96A             >
 222+ E96A 81 32       >                dw      Dict_Ptr + 2        // xt
 222+ E96C             >Heap_Ptr        defl    $ - $E000           // save current HP
 222+ E96C             >
 222+ E96C             >Current_HP      defl  $ - $E000             // used to set HP once!
 222+ E96C             >
 222+ E96C             >//              ______________________________________________________________________
 222+ E96C             >//              Dictionary part
 222+ E96C             >
 222+ E96C             >                org     Dict_Ptr
 222+ 327F             >
 222+ 327F 6A 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 222+ 3281             >
 222+ 3281             >WARM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 222+ 3281 CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 222+ 3284             >
 222+ 3284             >
 222+ 3284             >                endif           ; ok        // for other definitions it "points" the correct handler
 222+ 3284             >                // Use of "; ok" to suppress "warning[fwdref]"
 222+ 3284             >
 222+ 3284             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 223+ 3284 4B 36                        dw      BLK_INIT                // blk-init
 224+ 3286 06 27                        dw      NOOP                    // splash
 225+ 3288                          //  dw      LIT, 7, EMIT            // 7 emit
 226+ 3288 5C 32                        dw      ABORT                   // abort
 227+ 328A 09 25                        dw      EXIT                    // exit
 228+ 328C
 229+ 328C              //  ______________________________________________________________________
 230+ 328C              //
 231+ 328C              // cold         --
 232+ 328C                              Colon_Def COLD, "COLD", is_normal
 232+ 328C             >                New_Def  COLD, "COLD", Enter_Ptr, is_normal ; ok
 232+ 328C             >
 232+ 328C             >Dict_Ptr        defl    $
 232+ 328C             >
 232+ 328C             >//              ______________________________________________________________________
 232+ 328C             >//              Heap part
 232+ 328C             >
 232+ 328C             >
 232+ 328C             >                org     (Heap_Ptr & $1FFF) + $E000
 232+ E96C             >
 232+ E96C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 232+ E96C             >Latest_Definition defl  Heap_Ptr
 232+ E96C             >
 232+ E96C             >                // dummy db directives used to calculate length of namec
 232+ E96C 43 4F 4C 44 >                db      "COLD"
 232+ E970             >len_NFA         defl    $ - temp_NFA
 232+ E970             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 232+ E96C             >
 232+ E96C 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 232+ E96D 43 4F 4C 44 >                db      "COLD"               // name string in 7-bit ascii, but
 232+ E971             >                org     $-1                 // alter last byte of Name just above to set
 232+ E970 C4          >                db      {b $} | END_BIT     // msb as name end
 232+ E971             >
 232+ E971 63 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 232+ E973             >Prev_Ptr        defl    Heap_Ptr
 232+ E973             >
 232+ E973             >mirror_Ptr      defl    $
 232+ E973             >
 232+ E973 8E 32       >                dw      Dict_Ptr + 2        // xt
 232+ E975             >Heap_Ptr        defl    $ - $E000           // save current HP
 232+ E975             >
 232+ E975             >Current_HP      defl  $ - $E000             // used to set HP once!
 232+ E975             >
 232+ E975             >//              ______________________________________________________________________
 232+ E975             >//              Dictionary part
 232+ E975             >
 232+ E975             >                org     Dict_Ptr
 232+ 328C             >
 232+ 328C 73 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 232+ 328E             >
 232+ 328E             >COLD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 232+ 328E CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 232+ 3291             >
 232+ 3291             >
 232+ 3291             >                endif           ; ok        // for other definitions it "points" the correct handler
 232+ 3291             >                // Use of "; ok" to suppress "warning[fwdref]"
 232+ 3291             >
 232+ 3291             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 233+ 3291 06 27 06 27                  dw      NOOP, NOOP
 234+ 3295 3D 20 12 20                  dw      LIT, S0_origin          // [ hex $12 +origin ] Literal
 235+ 3299 3D 20 2E 20                  dw      LIT, USER_Pointer       // [ hex $3E +origin ] literal
 236+ 329D 49 26                        dw      FETCH                   // @
 237+ 329F 3D 20 06 00                  dw      LIT, 6, PLUS            // 6 +
 237+ 32A3 5B 25
 238+ 32A5 3D 20 16 00                  dw      LIT, 22                 // 22
 239+ 32A9 4A 24                        dw      CMOVE
 240+ 32AB 3D 20 0C 20                  dw      LIT, Latest_origin      // [ hex 0C +origin ] literal
 241+ 32AF 49 26                        dw      FETCH                   // @
 242+ 32B1 3D 20 FC 31                  dw      LIT, Forth_Latest_Ptr   // [ ' forth >body 4 + ] Literal
 243+ 32B5 53 26                        dw      STORE                   // !
 244+ 32B7 3F 27 DA 27                  dw      ZERO, NMODE, STORE      // 0 nmode !
 244+ 32BB 53 26
 245+ 32BD C8 27 49 26                  dw      FIRST, FETCH, DUP       // first @ dup
 245+ 32C1 DF 25
 246+ 32C3 34 28 53 26                  dw      USED, STORE             // used !
 247+ 32C7 3A 28 53 26                  dw      PREV, STORE             // prev !
 248+ 32CB 3D 20 04 00                  dw      LIT, 4, PLACE, STORE    // 4 place !
 248+ 32CF 46 28 53 26
 249+ 32D3              //              dw      LIT, 8
 250+ 32D3              //              dw      LIT, FLAGS2, CSTORE     // 8 5C6A c!
 251+ 32D3 EC 36                        dw      EMPTY_BUFFERS
 252+ 32D5 3F 27 E0 27                  dw      ZERO, BLK, STORE
 252+ 32D9 53 26
 253+ 32DB 3F 27 4C 28                  dw      ZERO, SOURCE_ID, STORE
 253+ 32DF 53 26
 254+ 32E1
 255+ 32E1 81 32        Warm_Start:     dw      WARM
 256+ 32E3 8E 32        Cold_Start:     dw      COLD
 257+ 32E5 09 25                        dw      EXIT
 258+ 32E7
 259+ 32E7
 260+ 32E7              //  ______________________________________________________________________
 261+ 32E7
 262+ 32E7              Tools_vForth_Directory
 263+ 32E7 43 3A 2F 74                  db      "C:/tools/vForth/", $FF
 263+ 32EB 6F 6F 6C 73
 263+ 32EF 2F 76 46 6F
 263+ 32F3 72 74 68 2F
 263+ 32F7 FF
 264+ 32F8 43 3A 2F 64  Filename_Ram7:  db      "C:/dot/vforth.bin",0
 264+ 32FC 6F 74 2F 76
 264+ 3300 66 6F 72 74
 264+ 3304 68 2E 62 69
 264+ 3308 6E 00
 265+ 330A
 266+ 330A              Saved_Speed:
 267+ 330A 00                           db      0
 268+ 330B 02 03 04 05  Saved_MMU       db      2,3,4,5,6,7   // MMU2-MMU7
 268+ 330F 06 07
 269+ 3311
 270+ 3311              Saved_Layer:
 271+ 3311 00                           db      0           // graphics current mode
 272+ 3312
 273+ 3312              //  ______________________________________________________________________
 274+ 3312              WarmRoutine:
 275+ 3312              ColdRoutine:
 276+ 3312              //  ______________________________________________________________________
 277+ 3312              // 0.
 278+ 3312 D1                           pop     de                      // retrieve return to basic address
 279+ 3313 ED 73 08 20                  ld      (SP_Basic), sp
 280+ 3317 31 00 40                     ld      sp, $4000               // safe area
 281+ 331A D5                           push    de                      // save return to basic address
 282+ 331B D9                           exx
 283+ 331C E5                           push    hl                      // save Basic's h'l' return address
 284+ 331D D9                           exx
 285+ 331E
 286+ 331E              //  ______________________________________________________________________
 287+ 331E              // 1.
 288+ 331E              // Accepts one parameter from Basic as the filename to load
 289+ 331E 7C                           ld      a, h
 290+ 331F B5                           or      l
 291+ 3320 28 15                        jr      z, Skip_Parameter
 292+ 3322
 293+ 3322 11 7B 39                     ld      de, Param
 294+ 3325 01 00 00                     ld      bc, 0
 295+ 3328              Parameter_Loop:
 296+ 3328 7E                           ld      a, (hl)
 297+ 3329 FE 3A                        cp      ':'
 298+ 332B 28 08                        jr      z, End_Parameter
 299+ 332D FE 0D                        cp      $0D
 300+ 332F 28 04                        jr      z, End_Parameter
 301+ 3331 ED A0                        ldi
 302+ 3333 18 F3                        jr      Parameter_Loop
 303+ 3335              End_Parameter:
 304+ 3335                              // append 0x00
 305+ 3335 AF                           xor     a
 306+ 3336 12                           ld      (de), a
 307+ 3337              Skip_Parameter:
 308+ 3337
 309+ 3337              //  ______________________________________________________________________
 310+ 3337              // 2. prepare save-area address and hw register port
 311+ 3337 21 0A 33                     ld      hl, Saved_Speed     // save-area
 312+ 333A              //              ld      bc, $243B               // hw-register port
 313+ 333A              //  ______________________________________________________________________
 314+ 333A              // 2.1
 315+ 333A              // ask / read speed and MMU status
 316+ 333A 3E 07                        ld      a ,$07                  // read current speed
 317+ 333C CD FA 33                     call    Get_MMU_status
 318+ 333F 16 03                        ld      d, 3                    // set top speed
 319+ 3341 B2                           or      d                       // reuse data just read
 320+ 3342 ED 92 07                     nextreg 07, a
 321+ 3345
 322+ 3345 1E 06                        ld      e, 6                    // loop limit
 323+ 3347              MMU_read_loop:
 324+ 3347 3E 58                        ld      a, $58                  // MMU2-MMU7 ($52-$57)
 325+ 3349 93                           sub     e
 326+ 334A CD FA 33                     call    Get_MMU_status
 327+ 334D 1D                           dec     e
 328+ 334E 20 F7                        jr      nz, MMU_read_loop
 329+ 3350              //  ______________________________________________________________________
 330+ 3350              // 2.2
 331+ 3350              // save current LAYER status
 332+ 3350
 333+ 3350 11 D5 01                     ld      de, $01D5   // on success set carry-flag
 334+ 3353 0E 07                        ld      c, 7        // necessary to call M_P3DOS
 335+ 3355 3E 00                        ld      a, 0        // query current status
 336+ 3357 CF                           rst     8
 337+ 3358 94                           db      $94 // carry flag set on success
 338+ 3359
 339+ 3359 32 11 33                     ld      (Saved_Layer), a     // store after MMUs
 340+ 335C              //  ______________________________________________________________________
 341+ 335C              // 2.3
 342+ 335C 21 00 60                     ld      hl, $6000
 343+ 335F 11 00 40                     ld      de, $4000
 344+ 3362 CD B4 33                     call    Backup_Restore_MMU
 345+ 3365
 346+ 3365              //  ______________________________________________________________________
 347+ 3365              // 5.
 348+ 3365              // set LAYER 1,2
 349+ 3365 D9                           exx
 350+ 3366 01 02 01                     ld      bc, $0102
 351+ 3369 CD 00 34                     call    Set_Layer
 352+ 336C
 353+ 336C              //  ______________________________________________________________________
 354+ 336C              // 6.
 355+ 336C              // Set current drive/directory
 356+ 336C
 357+ 336C              //              ld      a, $00
 358+ 336C              //              rst     8
 359+ 336C              //              defb    $89     ; m_getsetdrv
 360+ 336C              //              rst     8
 361+ 336C              //              defb    $89     ; m_getsetdrv
 362+ 336C
 363+ 336C CD 9A 33                     call    Set_Cur_Dir
 364+ 336F
 365+ 336F              //  ______________________________________________________________________
 366+ 336F              // 2.2
 367+ 336F              // Reserve pages from OS.
 368+ 336F
 369+ 336F CD D5 33                     call    Restore_Reserve_MMU     // multiple IDE_BANK  !
 370+ 3372 CD C4 33                     call    Set_forth_MMU
 371+ 3375
 372+ 3375              //  ______________________________________________________________________
 373+ 3375              // 7.
 374+ 3375              // Get current handle via M_GETHANDLE and load ram
 375+ 3375 CF                           rst     8
 376+ 3376 8D                           DEFB    $8d             ; M_GETHANDLE
 377+ 3377
 378+ 3377              //  ______________________________________________________________________
 379+ 3377              // 8.
 380+ 3377              // set MMU3-MMU7 to $20-$1C abd load ram7.bin
 381+ 3377
 382+ 3377              //              ld      hl, Filename_Ram7   ; because we are within a dot command
 383+ 3377              //              ld      b, $01          ; $01 request read access
 384+ 3377              //              ld      a, $2A          ; '*'
 385+ 3377              //              rst     8
 386+ 3377              //              DEFB    $9A             ; f_open
 387+ 3377
 388+ 3377 F5                           push    af
 389+ 3378 21 00 E0                     ld      hl, $E000
 390+ 337B 01 FF 1F                     ld      bc, $1FFF
 391+ 337E CF                           rst     8
 392+ 337F 9D                           DEFB    $9D             ; f_read
 393+ 3380 F1                           pop     af
 394+ 3381 CF                           rst     8
 395+ 3382 9B                           DEFB    $9B             ; f_close
 396+ 3383
 397+ 3383              //  ______________________________________________________________________
 398+ 3383              // 9.
 399+ 3383              // pre-set the four main 16-bit registers
 400+ 3383 ED 7B 12 20                  ld      sp, (S0_origin)         // Calculator Stack Pointer
 401+ 3387 DD 21 34 20                  ld      ix, Next_Ptr            // Inner Interpreter Pointer
 402+ 338B ED 5B 14 20                  ld      de, (R0_origin)         // Return Stack Pointer
 403+ 338F 01 E3 32                     ld      bc, Cold_Start          // Instruction Pointer
 404+ 3392
 405+ 3392                              // never stop scrolling: print chr$26;chr$0
 406+ 3392 3E 1A                        ld      a, 26
 407+ 3394 D7                           rst     $10
 408+ 3395 AF                           xor     a
 409+ 3396 D7                           rst     $10
 410+ 3397
 411+ 3397 FB                           ei
 412+ 3398
 413+ 3398                          //  push    ix
 414+ 3398                          //  pop     hl
 415+ 3398                          //  rst     $20
 416+ 3398                              next
 416+ 3398 DD E9       >                jp      (ix)
 417+ 339A
 418+ 339A
 419+ 339A              //  ______________________________________________________________________
 420+ 339A              // Routine
 421+ 339A              // set current directory  /tools/vForth
 422+ 339A              Set_Cur_Dir:
 423+ 339A 21 E7 32                     ld      hl, Tools_vForth_Directory
 424+ 339D 11 00 40                     ld      de, $4000 // use some temporary safe zone
 425+ 33A0 01 11 00                     ld      bc, 17    // length of Tools_vForth_Directory
 426+ 33A3 ED B0                        ldir
 427+ 33A5 D9                           exx
 428+ 33A6 21 00 40                     ld      hl, $4000
 429+ 33A9                          //  ld      hl, Tools_vForth_Directory
 430+ 33A9 D9                           exx
 431+ 33AA 11 B1 01                     ld      de, $01B1
 432+ 33AD 0E 07                        ld      c, 7
 433+ 33AF 3E 00                        ld      a, 0
 434+ 33B1 CF                           rst     8
 435+ 33B2 94                           db      $94 // carry flag set on success !
 436+ 33B3
 437+ 33B3 C9                           ret
 438+ 33B4
 439+ 33B4              //  ______________________________________________________________________
 440+ 33B4              // Routine, safe backup
 441+ 33B4              // INput: hl:$6000, de:$E000 for backup or viceversa for restore.
 442+ 33B4              Backup_Restore_MMU:
 443+ 33B4 ED 91 52 28                  nextreg $52, $28        ;   MMU2  = $6000
 444+ 33B8 01 00 20                     ld      bc, $2000
 445+ 33BB ED B0                        ldir
 446+ 33BD 3A 0B 33                     ld      a, (Saved_MMU)
 447+ 33C0 ED 92 52                     nextreg $52, a
 448+ 33C3 C9                           ret
 449+ 33C4
 450+ 33C4              //  ______________________________________________________________________
 451+ 33C4              // Routine
 452+ 33C4              // set MMU7 to $20 and laod ram7.bin
 453+ 33C4              Set_forth_MMU:
 454+ 33C4                      ////    nextreg $53, $28         ;   MMU3  = 24576
 455+ 33C4 ED 91 54 1D                  nextreg $54, $1D         ;   MMU4  = $8000
 456+ 33C8 ED 91 55 1E                  nextreg $55, $1E         ;   MMU5
 457+ 33CC ED 91 56 1F                  nextreg $56, $1F         ;   MMU6
 458+ 33D0 ED 91 57 20                  nextreg $57, $20         ;   MMU7
 459+ 33D4 C9                           ret
 460+ 33D5
 461+ 33D5              //  ______________________________________________________________________
 462+ 33D5              // Routine:
 463+ 33D5              // reserve MMU pages
 464+ 33D5              Restore_Reserve_MMU:
 465+ 33D5 2E 1D                        ld      l, $1D      // first page
 466+ 33D7 26 0C                        ld      h, 8+3+1    // 8 HEAP, 3 MAIN, 1 BACKUP
 467+ 33D9              Reserve_MMU_Loop:
 468+ 33D9 7D                           ld      a, l            // pass page through a
 469+ 33DA D9                           exx
 470+ 33DB                               // parameters:
 471+ 33DB              Deallocate_MMU:
 472+ 33DB 21 02 00                      ld      hl, $0002      // L=2:reserve E', =3:deallocate, H=0:normal 8k page
 473+ 33DE 5F                            ld      e, a           // E' is bank-id
 474+ 33DF D9                           exx
 475+ 33E0 E5                           push    hl
 476+ 33E1
 477+ 33E1 0E 07                        ld      c, 07           // page 7 for M_P3DOS
 478+ 33E3 3E 01                        ld      a, 1
 479+ 33E5 11 BD 01                     ld      de, $01BD  // IDE_BANK
 480+ 33E8 CF                           rst     8
 481+ 33E9 94                           db      $94     // M_P3DOS
 482+ 33EA
 483+ 33EA E1                           pop     hl
 484+ 33EB 2C                           inc     l       // next page number
 485+ 33EC 25                           dec     h       // decrease counter.
 486+ 33ED 20 EA                        jr      nz, Reserve_MMU_Loop
 487+ 33EF C9                           ret
 488+ 33F0
 489+ 33F0              //  ______________________________________________________________________
 490+ 33F0              // Routine
 491+ 33F0              // Input:  bc=$243B, a=reg, hl=array
 492+ 33F0              // Operation: set  hardware register  a  to value at  (hl)
 493+ 33F0              // Output: bc=$243B, a=a+1, hl=hl+1
 494+ 33F0              Put_MMU_status:
 495+ 33F0 56                           ld      d, (hl)
 496+ 33F1 ED 79                        out     (c), a
 497+ 33F3 04                           inc     b        // 253Bh
 498+ 33F4 ED 51                        out     (c), d
 499+ 33F6 05                           dec     b        // 243Bh
 500+ 33F7 23                           inc     hl
 501+ 33F8 3C                           inc     a
 502+ 33F9 C9                           ret
 503+ 33FA
 504+ 33FA              //  ______________________________________________________________________
 505+ 33FA              // Routine
 506+ 33FA              // Input:  bc=$243B, a=reg, hl=array
 507+ 33FA              // Operation: get current value of hardware register  a  and store at (hl)
 508+ 33FA              // Output: bc=$243B, a=a+1, hl=hl+1
 509+ 33FA              Get_MMU_status:
 510+ 33FA              //              out     (c), a
 511+ 33FA              //              inc     b        // 253Bh
 512+ 33FA              //              in      d ,(c)
 513+ 33FA              //              dec     b        // 243Bh
 514+ 33FA CD 38 21                     call    NEXTREG_read
 515+ 33FD 77                           ld      (hl), a
 516+ 33FE 23                           inc     hl
 517+ 33FF C9                           ret
 518+ 3400
 519+ 3400              //  ______________________________________________________________________
 520+ 3400              // Routine
 521+ 3400              // set LAYER B,C
 522+ 3400              // Input: bc=$0102 for Layer 1,2
 523+ 3400              Set_Layer:
 524+ 3400 D9                           exx
 525+ 3401 11 D5 01                     ld      de, $01D5
 526+ 3404 0E 07                        ld      c, 7
 527+ 3406 3E 01                        ld      a, 1
 528+ 3408 CF                           rst     8
 529+ 3409 94                           db      $94
 530+ 340A C9                           ret
 531+ 340B
 532+ 340B              //  ______________________________________________________________________
 533+ 340B              //
 534+ 340B              // basic        --
 535+ 340B                              New_Def BASIC, "BASIC", is_code, is_normal
 535+ 340B             >
 535+ 340B             >Dict_Ptr        defl    $
 535+ 340B             >
 535+ 340B             >//              ______________________________________________________________________
 535+ 340B             >//              Heap part
 535+ 340B             >
 535+ 340B             >
 535+ 340B             >                org     (Heap_Ptr & $1FFF) + $E000
 535+ E975             >
 535+ E975             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 535+ E975             >Latest_Definition defl  Heap_Ptr
 535+ E975             >
 535+ E975             >                // dummy db directives used to calculate length of namec
 535+ E975 42 41 53 49 >                db      "BASIC"
 535+ E979 43          >
 535+ E97A             >len_NFA         defl    $ - temp_NFA
 535+ E97A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 535+ E975             >
 535+ E975 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 535+ E976 42 41 53 49 >                db      "BASIC"               // name string in 7-bit ascii, but
 535+ E97A 43          >
 535+ E97B             >                org     $-1                 // alter last byte of Name just above to set
 535+ E97A C3          >                db      {b $} | END_BIT     // msb as name end
 535+ E97B             >
 535+ E97B 6C 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 535+ E97D             >Prev_Ptr        defl    Heap_Ptr
 535+ E97D             >
 535+ E97D             >mirror_Ptr      defl    $
 535+ E97D             >
 535+ E97D 0D 34       >                dw      Dict_Ptr + 2        // xt
 535+ E97F             >Heap_Ptr        defl    $ - $E000           // save current HP
 535+ E97F             >
 535+ E97F             >Current_HP      defl  $ - $E000             // used to set HP once!
 535+ E97F             >
 535+ E97F             >//              ______________________________________________________________________
 535+ E97F             >//              Dictionary part
 535+ E97F             >
 535+ E97F             >                org     Dict_Ptr
 535+ 340B             >
 535+ 340B 7D 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 535+ 340D             >
 535+ 340D             >BASIC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 535+ 340D ~           >                call    runcode ; ok        // for primitive definitions  actual code
 535+ 340D ~           >
 535+ 340D ~           >
 535+ 340D             >                endif           ; ok        // for other definitions it "points" the correct handler
 535+ 340D             >                // Use of "; ok" to suppress "warning[fwdref]"
 535+ 340D             >
 535+ 340D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 536+ 340D
 537+ 340D              // using dot-command, no more needs to return bc
 538+ 340D              //              pop     bc                      // return  TOS  value to Basic
 539+ 340D
 540+ 340D F3                           di
 541+ 340E
 542+ 340E 31 FC 3F                     ld      sp, $4000 - 4           // Carefully balanced from startup
 543+ 3411
 544+ 3411                              // address
 545+ 3411 21 0A 33                     ld      hl, Saved_Speed
 546+ 3414 01 3B 24                     ld      bc , $243B
 547+ 3417
 548+ 3417                              // set speed
 549+ 3417 3E 07                        ld      a, $07
 550+ 3419 CD F0 33                     call    Put_MMU_status
 551+ 341C
 552+ 341C                        //    inc     hl
 553+ 341C                        //    inc     hl
 554+ 341C                              // set MMU pages
 555+ 341C 3E 52                        ld      a, $52
 556+ 341E 1E 06                        ld      e, 6
 557+ 3420              MMU_put_loop:
 558+ 3420 CD F0 33                     call    Put_MMU_status
 559+ 3423 1D                           dec     e
 560+ 3424 20 FA                        jr      nz, MMU_put_loop
 561+ 3426              //  ______________________________________________________________________
 562+ 3426                              // restore layer ide mode
 563+ 3426 7E                           ld      a, (hl)
 564+ 3427
 565+ 3427 D9                           exx
 566+ 3428 47                           ld      b, a
 567+ 3429 0F                           rrca
 568+ 342A 0F                           rrca
 569+ 342B E6 03                        and     3
 570+ 342D 4F                           ld      c, a
 571+ 342E 78                           ld      a, b
 572+ 342F E6 03                        and     3
 573+ 3431 47                           ld      b, a
 574+ 3432 CD 00 34                     call    Set_Layer
 575+ 3435
 576+ 3435              //  ______________________________________________________________________
 577+ 3435              //
 578+ 3435 21 00 40                     ld      hl, $4000
 579+ 3438 11 00 60                     ld      de, $6000
 580+ 343B CD B4 33                     call    Backup_Restore_MMU
 581+ 343E              //  ______________________________________________________________________
 582+ 343E              //
 583+ 343E                              // free 8k pages
 584+ 343E 3E 03                        ld      a, 3
 585+ 3440 32 DC 33                     ld      (Deallocate_MMU+1), a
 586+ 3443 CD D5 33                     call    Restore_Reserve_MMU     // multiple IDE_BANK  !
 587+ 3446              //  ______________________________________________________________________
 588+ 3446
 589+ 3446                              // restore basic pointers
 590+ 3446 E1                           pop     hl                      // restore h'l'
 591+ 3447 D9                           exx
 592+ 3448 E1                           pop     hl
 593+ 3449 ED 7B 08 20                  ld      sp, (SP_Basic)          // restore Basic's SP
 594+ 344D E5                           push    hl
 595+ 344E FB                           ei
 596+ 344F              Exit_with_error:
 597+ 344F AF                           xor     a
 598+ 3450 76                           halt
 599+ 3451 C9                           ret                             // to where USR Basic was left
 600+ 3452
 601+ 3452              //  ______________________________________________________________________
 602+ 3452              //
 603+ 3452              // +-           n1 n2 -- n3
 604+ 3452              // leaves n1 with the sign of n2 as n3.
 605+ 3452                              Colon_Def PLUS_MINUS, "+-", is_normal
 605+ 3452             >                New_Def  PLUS_MINUS, "+-", Enter_Ptr, is_normal ; ok
 605+ 3452             >
 605+ 3452             >Dict_Ptr        defl    $
 605+ 3452             >
 605+ 3452             >//              ______________________________________________________________________
 605+ 3452             >//              Heap part
 605+ 3452             >
 605+ 3452             >
 605+ 3452             >                org     (Heap_Ptr & $1FFF) + $E000
 605+ E97F             >
 605+ E97F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 605+ E97F             >Latest_Definition defl  Heap_Ptr
 605+ E97F             >
 605+ E97F             >                // dummy db directives used to calculate length of namec
 605+ E97F 2B 2D       >                db      "+-"
 605+ E981             >len_NFA         defl    $ - temp_NFA
 605+ E981             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 605+ E97F             >
 605+ E97F 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 605+ E980 2B 2D       >                db      "+-"               // name string in 7-bit ascii, but
 605+ E982             >                org     $-1                 // alter last byte of Name just above to set
 605+ E981 AD          >                db      {b $} | END_BIT     // msb as name end
 605+ E982             >
 605+ E982 75 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 605+ E984             >Prev_Ptr        defl    Heap_Ptr
 605+ E984             >
 605+ E984             >mirror_Ptr      defl    $
 605+ E984             >
 605+ E984 54 34       >                dw      Dict_Ptr + 2        // xt
 605+ E986             >Heap_Ptr        defl    $ - $E000           // save current HP
 605+ E986             >
 605+ E986             >Current_HP      defl  $ - $E000             // used to set HP once!
 605+ E986             >
 605+ E986             >//              ______________________________________________________________________
 605+ E986             >//              Dictionary part
 605+ E986             >
 605+ E986             >                org     Dict_Ptr
 605+ 3452             >
 605+ 3452 84 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 605+ 3454             >
 605+ 3454             >PLUS_MINUS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 605+ 3454 CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 605+ 3457             >
 605+ 3457             >
 605+ 3457             >                endif           ; ok        // for other definitions it "points" the correct handler
 605+ 3457             >                // Use of "; ok" to suppress "warning[fwdref]"
 605+ 3457             >
 605+ 3457             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 606+ 3457 40 25                        dw      ZLESS                   // 0<
 607+ 3459                                                              // if
 608+ 3459 8F 20                        dw      ZBRANCH
 609+ 345B 04 00                        dw      Plus_Minus_Endif - $
 610+ 345D 9B 25                        dw          MINUS               //      minus
 611+ 345F              Plus_Minus_Endif:                               // endif
 612+ 345F 09 25                        dw      EXIT                    // ;
 613+ 3461
 614+ 3461              //  ______________________________________________________________________
 615+ 3461              //
 616+ 3461              // d+-          d1 n -- d2
 617+ 3461              // leaves d1 with the sign of n as d2.
 618+ 3461                              Colon_Def DPLUS_MINUS, "D+-", is_normal
 618+ 3461             >                New_Def  DPLUS_MINUS, "D+-", Enter_Ptr, is_normal ; ok
 618+ 3461             >
 618+ 3461             >Dict_Ptr        defl    $
 618+ 3461             >
 618+ 3461             >//              ______________________________________________________________________
 618+ 3461             >//              Heap part
 618+ 3461             >
 618+ 3461             >
 618+ 3461             >                org     (Heap_Ptr & $1FFF) + $E000
 618+ E986             >
 618+ E986             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 618+ E986             >Latest_Definition defl  Heap_Ptr
 618+ E986             >
 618+ E986             >                // dummy db directives used to calculate length of namec
 618+ E986 44 2B 2D    >                db      "D+-"
 618+ E989             >len_NFA         defl    $ - temp_NFA
 618+ E989             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 618+ E986             >
 618+ E986 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 618+ E987 44 2B 2D    >                db      "D+-"               // name string in 7-bit ascii, but
 618+ E98A             >                org     $-1                 // alter last byte of Name just above to set
 618+ E989 AD          >                db      {b $} | END_BIT     // msb as name end
 618+ E98A             >
 618+ E98A 7F 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 618+ E98C             >Prev_Ptr        defl    Heap_Ptr
 618+ E98C             >
 618+ E98C             >mirror_Ptr      defl    $
 618+ E98C             >
 618+ E98C 63 34       >                dw      Dict_Ptr + 2        // xt
 618+ E98E             >Heap_Ptr        defl    $ - $E000           // save current HP
 618+ E98E             >
 618+ E98E             >Current_HP      defl  $ - $E000             // used to set HP once!
 618+ E98E             >
 618+ E98E             >//              ______________________________________________________________________
 618+ E98E             >//              Dictionary part
 618+ E98E             >
 618+ E98E             >                org     Dict_Ptr
 618+ 3461             >
 618+ 3461 8C 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 618+ 3463             >
 618+ 3463             >DPLUS_MINUS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 618+ 3463 CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 618+ 3466             >
 618+ 3466             >
 618+ 3466             >                endif           ; ok        // for other definitions it "points" the correct handler
 618+ 3466             >                // Use of "; ok" to suppress "warning[fwdref]"
 618+ 3466             >
 618+ 3466             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 619+ 3466 40 25                        dw      ZLESS                   // 0<
 620+ 3468                                                              // if
 621+ 3468 8F 20                        dw      ZBRANCH
 622+ 346A 04 00                        dw      DPlus_Minus_Endif - $
 623+ 346C A8 25                        dw          DMINUS              //      dminus
 624+ 346E              DPlus_Minus_Endif:                              // endif
 625+ 346E 09 25                        dw      EXIT                    // ;
 626+ 3470
 627+ 3470              //  ______________________________________________________________________
 628+ 3470              //
 629+ 3470              // abs          n1 -- n2
 630+ 3470                              Colon_Def ABS_OP, "ABS", is_normal
 630+ 3470             >                New_Def  ABS_OP, "ABS", Enter_Ptr, is_normal ; ok
 630+ 3470             >
 630+ 3470             >Dict_Ptr        defl    $
 630+ 3470             >
 630+ 3470             >//              ______________________________________________________________________
 630+ 3470             >//              Heap part
 630+ 3470             >
 630+ 3470             >
 630+ 3470             >                org     (Heap_Ptr & $1FFF) + $E000
 630+ E98E             >
 630+ E98E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 630+ E98E             >Latest_Definition defl  Heap_Ptr
 630+ E98E             >
 630+ E98E             >                // dummy db directives used to calculate length of namec
 630+ E98E 41 42 53    >                db      "ABS"
 630+ E991             >len_NFA         defl    $ - temp_NFA
 630+ E991             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 630+ E98E             >
 630+ E98E 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 630+ E98F 41 42 53    >                db      "ABS"               // name string in 7-bit ascii, but
 630+ E992             >                org     $-1                 // alter last byte of Name just above to set
 630+ E991 D3          >                db      {b $} | END_BIT     // msb as name end
 630+ E992             >
 630+ E992 86 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 630+ E994             >Prev_Ptr        defl    Heap_Ptr
 630+ E994             >
 630+ E994             >mirror_Ptr      defl    $
 630+ E994             >
 630+ E994 72 34       >                dw      Dict_Ptr + 2        // xt
 630+ E996             >Heap_Ptr        defl    $ - $E000           // save current HP
 630+ E996             >
 630+ E996             >Current_HP      defl  $ - $E000             // used to set HP once!
 630+ E996             >
 630+ E996             >//              ______________________________________________________________________
 630+ E996             >//              Dictionary part
 630+ E996             >
 630+ E996             >                org     Dict_Ptr
 630+ 3470             >
 630+ 3470 94 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 630+ 3472             >
 630+ 3472             >ABS_OP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 630+ 3472 CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 630+ 3475             >
 630+ 3475             >
 630+ 3475             >                endif           ; ok        // for other definitions it "points" the correct handler
 630+ 3475             >                // Use of "; ok" to suppress "warning[fwdref]"
 630+ 3475             >
 630+ 3475             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 631+ 3475 DF 25                        dw      DUP                     // dup
 632+ 3477 54 34                        dw      PLUS_MINUS              // +-
 633+ 3479 09 25                        dw      EXIT                    // ;
 634+ 347B
 635+ 347B              //  ______________________________________________________________________
 636+ 347B              //
 637+ 347B              // dabs         d1 -- d2
 638+ 347B                              Colon_Def DABS, "DABS", is_normal
 638+ 347B             >                New_Def  DABS, "DABS", Enter_Ptr, is_normal ; ok
 638+ 347B             >
 638+ 347B             >Dict_Ptr        defl    $
 638+ 347B             >
 638+ 347B             >//              ______________________________________________________________________
 638+ 347B             >//              Heap part
 638+ 347B             >
 638+ 347B             >
 638+ 347B             >                org     (Heap_Ptr & $1FFF) + $E000
 638+ E996             >
 638+ E996             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 638+ E996             >Latest_Definition defl  Heap_Ptr
 638+ E996             >
 638+ E996             >                // dummy db directives used to calculate length of namec
 638+ E996 44 41 42 53 >                db      "DABS"
 638+ E99A             >len_NFA         defl    $ - temp_NFA
 638+ E99A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 638+ E996             >
 638+ E996 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 638+ E997 44 41 42 53 >                db      "DABS"               // name string in 7-bit ascii, but
 638+ E99B             >                org     $-1                 // alter last byte of Name just above to set
 638+ E99A D3          >                db      {b $} | END_BIT     // msb as name end
 638+ E99B             >
 638+ E99B 8E 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 638+ E99D             >Prev_Ptr        defl    Heap_Ptr
 638+ E99D             >
 638+ E99D             >mirror_Ptr      defl    $
 638+ E99D             >
 638+ E99D 7D 34       >                dw      Dict_Ptr + 2        // xt
 638+ E99F             >Heap_Ptr        defl    $ - $E000           // save current HP
 638+ E99F             >
 638+ E99F             >Current_HP      defl  $ - $E000             // used to set HP once!
 638+ E99F             >
 638+ E99F             >//              ______________________________________________________________________
 638+ E99F             >//              Dictionary part
 638+ E99F             >
 638+ E99F             >                org     Dict_Ptr
 638+ 347B             >
 638+ 347B 9D 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 638+ 347D             >
 638+ 347D             >DABS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 638+ 347D CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 638+ 3480             >
 638+ 3480             >
 638+ 3480             >                endif           ; ok        // for other definitions it "points" the correct handler
 638+ 3480             >                // Use of "; ok" to suppress "warning[fwdref]"
 638+ 3480             >
 638+ 3480             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 639+ 3480 DF 25                        dw      DUP                     // dup
 640+ 3482 63 34                        dw      DPLUS_MINUS             // d+-
 641+ 3484 09 25                        dw      EXIT                    // ;
 642+ 3486
 643+ 3486              //  ______________________________________________________________________
 644+ 3486              //
 645+ 3486              // m*           n1 n2 -- d
 646+ 3486              // multiply two integer giving a double
 647+ 3486                              Colon_Def MMUL, "M*", is_normal
 647+ 3486             >                New_Def  MMUL, "M*", Enter_Ptr, is_normal ; ok
 647+ 3486             >
 647+ 3486             >Dict_Ptr        defl    $
 647+ 3486             >
 647+ 3486             >//              ______________________________________________________________________
 647+ 3486             >//              Heap part
 647+ 3486             >
 647+ 3486             >
 647+ 3486             >                org     (Heap_Ptr & $1FFF) + $E000
 647+ E99F             >
 647+ E99F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 647+ E99F             >Latest_Definition defl  Heap_Ptr
 647+ E99F             >
 647+ E99F             >                // dummy db directives used to calculate length of namec
 647+ E99F 4D 2A       >                db      "M*"
 647+ E9A1             >len_NFA         defl    $ - temp_NFA
 647+ E9A1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 647+ E99F             >
 647+ E99F 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 647+ E9A0 4D 2A       >                db      "M*"               // name string in 7-bit ascii, but
 647+ E9A2             >                org     $-1                 // alter last byte of Name just above to set
 647+ E9A1 AA          >                db      {b $} | END_BIT     // msb as name end
 647+ E9A2             >
 647+ E9A2 96 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 647+ E9A4             >Prev_Ptr        defl    Heap_Ptr
 647+ E9A4             >
 647+ E9A4             >mirror_Ptr      defl    $
 647+ E9A4             >
 647+ E9A4 88 34       >                dw      Dict_Ptr + 2        // xt
 647+ E9A6             >Heap_Ptr        defl    $ - $E000           // save current HP
 647+ E9A6             >
 647+ E9A6             >Current_HP      defl  $ - $E000             // used to set HP once!
 647+ E9A6             >
 647+ E9A6             >//              ______________________________________________________________________
 647+ E9A6             >//              Dictionary part
 647+ E9A6             >
 647+ E9A6             >                org     Dict_Ptr
 647+ 3486             >
 647+ 3486 A4 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 647+ 3488             >
 647+ 3488             >MMUL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 647+ 3488 CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 647+ 348B             >
 647+ 348B             >
 647+ 348B             >                endif           ; ok        // for other definitions it "points" the correct handler
 647+ 348B             >                // Use of "; ok" to suppress "warning[fwdref]"
 647+ 348B             >
 647+ 348B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 648+ 348B 27 26 E4 24                  dw      TWO_DUP, XOR_OP, TO_R   // 2dup xor >r
 648+ 348F 13 25
 649+ 3491 72 34 D8 25                  dw      ABS_OP, SWAP            // abs swap
 650+ 3495 72 34 6E 24                  dw      ABS_OP, UM_MUL          // abs um*
 651+ 3499 1E 25 63 34                  dw      R_TO, DPLUS_MINUS       // r> d+-
 652+ 349D 09 25                        dw      EXIT                    // ;
 653+ 349F
 654+ 349F              //  ______________________________________________________________________
 655+ 349F              //
 656+ 349F              // sm/rem       d n -- q r
 657+ 349F              // Symmetric division: divides a double into n giving quotient q and remainder r
 658+ 349F              // the remainder has the sign of d.
 659+ 349F                              Colon_Def SMDIVM, "SM/REM", is_normal
 659+ 349F             >                New_Def  SMDIVM, "SM/REM", Enter_Ptr, is_normal ; ok
 659+ 349F             >
 659+ 349F             >Dict_Ptr        defl    $
 659+ 349F             >
 659+ 349F             >//              ______________________________________________________________________
 659+ 349F             >//              Heap part
 659+ 349F             >
 659+ 349F             >
 659+ 349F             >                org     (Heap_Ptr & $1FFF) + $E000
 659+ E9A6             >
 659+ E9A6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 659+ E9A6             >Latest_Definition defl  Heap_Ptr
 659+ E9A6             >
 659+ E9A6             >                // dummy db directives used to calculate length of namec
 659+ E9A6 53 4D 2F 52 >                db      "SM/REM"
 659+ E9AA 45 4D       >
 659+ E9AC             >len_NFA         defl    $ - temp_NFA
 659+ E9AC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 659+ E9A6             >
 659+ E9A6 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 659+ E9A7 53 4D 2F 52 >                db      "SM/REM"               // name string in 7-bit ascii, but
 659+ E9AB 45 4D       >
 659+ E9AD             >                org     $-1                 // alter last byte of Name just above to set
 659+ E9AC CD          >                db      {b $} | END_BIT     // msb as name end
 659+ E9AD             >
 659+ E9AD 9F 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 659+ E9AF             >Prev_Ptr        defl    Heap_Ptr
 659+ E9AF             >
 659+ E9AF             >mirror_Ptr      defl    $
 659+ E9AF             >
 659+ E9AF A1 34       >                dw      Dict_Ptr + 2        // xt
 659+ E9B1             >Heap_Ptr        defl    $ - $E000           // save current HP
 659+ E9B1             >
 659+ E9B1             >Current_HP      defl  $ - $E000             // used to set HP once!
 659+ E9B1             >
 659+ E9B1             >//              ______________________________________________________________________
 659+ E9B1             >//              Dictionary part
 659+ E9B1             >
 659+ E9B1             >                org     Dict_Ptr
 659+ 349F             >
 659+ 349F AF 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 659+ 34A1             >
 659+ 34A1             >SMDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 659+ 34A1 CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 659+ 34A4             >
 659+ 34A4             >
 659+ 34A4             >                endif           ; ok        // for other definitions it "points" the correct handler
 659+ 34A4             >                // Use of "; ok" to suppress "warning[fwdref]"
 659+ 34A4             >
 659+ 34A4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 660+ 34A4 BB 25 13 25                  dw      OVER, TO_R, TO_R        // over >r >r
 660+ 34A8 13 25
 661+ 34AA 7D 34 29 25                  dw      DABS, R_OP, ABS_OP      // dabs r abs
 661+ 34AE 72 34
 662+ 34B0 96 24                        dw      UMDIVMOD                // um/mod
 663+ 34B2 1E 25                        dw      R_TO                    // r>
 664+ 34B4 29 25 E4 24                  dw      R_OP, XOR_OP            // r xor
 665+ 34B8 54 34 D8 25                  dw      PLUS_MINUS, SWAP        // +- swap
 666+ 34BC 1E 25                        dw      R_TO                    // r>
 667+ 34BE 54 34 D8 25                  dw      PLUS_MINUS, SWAP        // +- swap
 668+ 34C2 09 25                        dw      EXIT                    // ;
 669+ 34C4
 670+ 34C4              //  ______________________________________________________________________
 671+ 34C4              //
 672+ 34C4              // fm/mod       d n -- q r
 673+ 34C4              // Floored division: divides a double into n giving quotient q and remainder r
 674+ 34C4              // the remainder has the sign of d.
 675+ 34C4                              Colon_Def FMDIVM, "FM/MOD", is_normal
 675+ 34C4             >                New_Def  FMDIVM, "FM/MOD", Enter_Ptr, is_normal ; ok
 675+ 34C4             >
 675+ 34C4             >Dict_Ptr        defl    $
 675+ 34C4             >
 675+ 34C4             >//              ______________________________________________________________________
 675+ 34C4             >//              Heap part
 675+ 34C4             >
 675+ 34C4             >
 675+ 34C4             >                org     (Heap_Ptr & $1FFF) + $E000
 675+ E9B1             >
 675+ E9B1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 675+ E9B1             >Latest_Definition defl  Heap_Ptr
 675+ E9B1             >
 675+ E9B1             >                // dummy db directives used to calculate length of namec
 675+ E9B1 46 4D 2F 4D >                db      "FM/MOD"
 675+ E9B5 4F 44       >
 675+ E9B7             >len_NFA         defl    $ - temp_NFA
 675+ E9B7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 675+ E9B1             >
 675+ E9B1 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 675+ E9B2 46 4D 2F 4D >                db      "FM/MOD"               // name string in 7-bit ascii, but
 675+ E9B6 4F 44       >
 675+ E9B8             >                org     $-1                 // alter last byte of Name just above to set
 675+ E9B7 C4          >                db      {b $} | END_BIT     // msb as name end
 675+ E9B8             >
 675+ E9B8 A6 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 675+ E9BA             >Prev_Ptr        defl    Heap_Ptr
 675+ E9BA             >
 675+ E9BA             >mirror_Ptr      defl    $
 675+ E9BA             >
 675+ E9BA C6 34       >                dw      Dict_Ptr + 2        // xt
 675+ E9BC             >Heap_Ptr        defl    $ - $E000           // save current HP
 675+ E9BC             >
 675+ E9BC             >Current_HP      defl  $ - $E000             // used to set HP once!
 675+ E9BC             >
 675+ E9BC             >//              ______________________________________________________________________
 675+ E9BC             >//              Dictionary part
 675+ E9BC             >
 675+ E9BC             >                org     Dict_Ptr
 675+ 34C4             >
 675+ 34C4 BA 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 675+ 34C6             >
 675+ 34C6             >FMDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 675+ 34C6 CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 675+ 34C9             >
 675+ 34C9             >
 675+ 34C9             >                endif           ; ok        // for other definitions it "points" the correct handler
 675+ 34C9             >                // Use of "; ok" to suppress "warning[fwdref]"
 675+ 34C9             >
 675+ 34C9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 676+ 34C9 DF 25 13 25                  dw      DUP, TO_R               // dup >r
 677+ 34CD A1 34                        dw      SMDIVM
 678+ 34CF BB 25 DF 25                  dw      OVER, DUP
 679+ 34D3 2E 25 2E 25                  dw      ZEQUAL, ZEQUAL
 680+ 34D7 D8 25 40 25                  dw      SWAP, ZLESS
 681+ 34DB 29 25 40 25                  dw      R_OP, ZLESS
 682+ 34DF E4 24 C9 24                  dw      XOR_OP, AND_OP
 683+ 34E3 8F 20                        dw      ZBRANCH
 684+ 34E5 10 00                        dw      Fm_Mod_Else - $
 685+ 34E7 7B 25                        dw          ONE_SUBTRACT
 686+ 34E9 D8 25 1E 25                  dw          SWAP, R_TO
 687+ 34ED 5B 25 D8 25                  dw          PLUS, SWAP
 688+ 34F1 82 20                        dw      BRANCH
 689+ 34F3 06 00                        dw      Fm_Mod_Endif - $
 690+ 34F5              Fm_Mod_Else:
 691+ 34F5 1E 25 C4 25                  dw          R_TO, DROP
 692+ 34F9              Fm_Mod_Endif:
 693+ 34F9 09 25                        dw      EXIT
 694+ 34FB              //              dw      TWO_DUP                 // 2dup
 695+ 34FB              //              dw      XOR_OP, TO_R, TO_R      // xor >r >r
 696+ 34FB              //              dw      DABS, R_OP, ABS_OP      // dabs r abs
 697+ 34FB              //              dw      UMDIVMOD                // um/mod
 698+ 34FB              //              dw      SWAP                    // swap
 699+ 34FB              //              dw      II, ZLESS               // i'
 700+ 34FB              //              dw      ONE, AND_OP, PLUS       // 0< 1 and +
 701+ 34FB              //              dw      R_TO                    // r>
 702+ 34FB              //              dw      PLUS_MINUS, SWAP        // +- swap
 703+ 34FB              //              dw      R_OP                    // r@
 704+ 34FB              //              dw      ZLESS                   // i'
 705+ 34FB              //              dw      ONE, AND_OP, PLUS       // 0< 1 and +
 706+ 34FB              //              dw      R_TO                    // r>
 707+ 34FB              //              dw      PLUS_MINUS              // +- swap
 708+ 34FB              //              dw      EXIT                    // ;
 709+ 34FB
 710+ 34FB              //  ______________________________________________________________________
 711+ 34FB              //
 712+ 34FB              // m/mod        d n -- q r
 713+ 34FB              // multiply two integer giving a double
 714+ 34FB                              Colon_Def MDIVM, "M/MOD", is_normal
 714+ 34FB             >                New_Def  MDIVM, "M/MOD", Enter_Ptr, is_normal ; ok
 714+ 34FB             >
 714+ 34FB             >Dict_Ptr        defl    $
 714+ 34FB             >
 714+ 34FB             >//              ______________________________________________________________________
 714+ 34FB             >//              Heap part
 714+ 34FB             >
 714+ 34FB             >
 714+ 34FB             >                org     (Heap_Ptr & $1FFF) + $E000
 714+ E9BC             >
 714+ E9BC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 714+ E9BC             >Latest_Definition defl  Heap_Ptr
 714+ E9BC             >
 714+ E9BC             >                // dummy db directives used to calculate length of namec
 714+ E9BC 4D 2F 4D 4F >                db      "M/MOD"
 714+ E9C0 44          >
 714+ E9C1             >len_NFA         defl    $ - temp_NFA
 714+ E9C1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 714+ E9BC             >
 714+ E9BC 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 714+ E9BD 4D 2F 4D 4F >                db      "M/MOD"               // name string in 7-bit ascii, but
 714+ E9C1 44          >
 714+ E9C2             >                org     $-1                 // alter last byte of Name just above to set
 714+ E9C1 C4          >                db      {b $} | END_BIT     // msb as name end
 714+ E9C2             >
 714+ E9C2 B1 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 714+ E9C4             >Prev_Ptr        defl    Heap_Ptr
 714+ E9C4             >
 714+ E9C4             >mirror_Ptr      defl    $
 714+ E9C4             >
 714+ E9C4 FD 34       >                dw      Dict_Ptr + 2        // xt
 714+ E9C6             >Heap_Ptr        defl    $ - $E000           // save current HP
 714+ E9C6             >
 714+ E9C6             >Current_HP      defl  $ - $E000             // used to set HP once!
 714+ E9C6             >
 714+ E9C6             >//              ______________________________________________________________________
 714+ E9C6             >//              Dictionary part
 714+ E9C6             >
 714+ E9C6             >                org     Dict_Ptr
 714+ 34FB             >
 714+ 34FB C4 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 714+ 34FD             >
 714+ 34FD             >MDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 714+ 34FD CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 714+ 3500             >
 714+ 3500             >
 714+ 3500             >                endif           ; ok        // for other definitions it "points" the correct handler
 714+ 3500             >                // Use of "; ok" to suppress "warning[fwdref]"
 714+ 3500             >
 714+ 3500             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 715+ 3500 A1 34                        dw      SMDIVM
 716+ 3502 09 25                        dw      EXIT                    // ;
 717+ 3504
 718+ 3504              //  ______________________________________________________________________
 719+ 3504              //
 720+ 3504              // m/           d n -- q
 721+ 3504              // multiply two integer giving a double
 722+ 3504                              Colon_Def MDIV, "M/", is_normal
 722+ 3504             >                New_Def  MDIV, "M/", Enter_Ptr, is_normal ; ok
 722+ 3504             >
 722+ 3504             >Dict_Ptr        defl    $
 722+ 3504             >
 722+ 3504             >//              ______________________________________________________________________
 722+ 3504             >//              Heap part
 722+ 3504             >
 722+ 3504             >
 722+ 3504             >                org     (Heap_Ptr & $1FFF) + $E000
 722+ E9C6             >
 722+ E9C6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 722+ E9C6             >Latest_Definition defl  Heap_Ptr
 722+ E9C6             >
 722+ E9C6             >                // dummy db directives used to calculate length of namec
 722+ E9C6 4D 2F       >                db      "M/"
 722+ E9C8             >len_NFA         defl    $ - temp_NFA
 722+ E9C8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 722+ E9C6             >
 722+ E9C6 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 722+ E9C7 4D 2F       >                db      "M/"               // name string in 7-bit ascii, but
 722+ E9C9             >                org     $-1                 // alter last byte of Name just above to set
 722+ E9C8 AF          >                db      {b $} | END_BIT     // msb as name end
 722+ E9C9             >
 722+ E9C9 BC 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 722+ E9CB             >Prev_Ptr        defl    Heap_Ptr
 722+ E9CB             >
 722+ E9CB             >mirror_Ptr      defl    $
 722+ E9CB             >
 722+ E9CB 06 35       >                dw      Dict_Ptr + 2        // xt
 722+ E9CD             >Heap_Ptr        defl    $ - $E000           // save current HP
 722+ E9CD             >
 722+ E9CD             >Current_HP      defl  $ - $E000             // used to set HP once!
 722+ E9CD             >
 722+ E9CD             >//              ______________________________________________________________________
 722+ E9CD             >//              Dictionary part
 722+ E9CD             >
 722+ E9CD             >                org     Dict_Ptr
 722+ 3504             >
 722+ 3504 CB 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 722+ 3506             >
 722+ 3506             >MDIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 722+ 3506 CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 722+ 3509             >
 722+ 3509             >
 722+ 3509             >                endif           ; ok        // for other definitions it "points" the correct handler
 722+ 3509             >                // Use of "; ok" to suppress "warning[fwdref]"
 722+ 3509             >
 722+ 3509             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 723+ 3509 FD 34 C9 25                  dw      MDIVM, NIP
 724+ 350D 09 25                        dw      EXIT                    // ;
 725+ 350F
 726+ 350F              //  ______________________________________________________________________
 727+ 350F              //
 728+ 350F              // *            n1 n2 -- n3
 729+ 350F              // multiply two integer
 730+ 350F                              Colon_Def MUL, "*", is_normal
 730+ 350F             >                New_Def  MUL, "*", Enter_Ptr, is_normal ; ok
 730+ 350F             >
 730+ 350F             >Dict_Ptr        defl    $
 730+ 350F             >
 730+ 350F             >//              ______________________________________________________________________
 730+ 350F             >//              Heap part
 730+ 350F             >
 730+ 350F             >
 730+ 350F             >                org     (Heap_Ptr & $1FFF) + $E000
 730+ E9CD             >
 730+ E9CD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 730+ E9CD             >Latest_Definition defl  Heap_Ptr
 730+ E9CD             >
 730+ E9CD             >                // dummy db directives used to calculate length of namec
 730+ E9CD 2A          >                db      "*"
 730+ E9CE             >len_NFA         defl    $ - temp_NFA
 730+ E9CE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 730+ E9CD             >
 730+ E9CD 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 730+ E9CE 2A          >                db      "*"               // name string in 7-bit ascii, but
 730+ E9CF             >                org     $-1                 // alter last byte of Name just above to set
 730+ E9CE AA          >                db      {b $} | END_BIT     // msb as name end
 730+ E9CF             >
 730+ E9CF C6 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 730+ E9D1             >Prev_Ptr        defl    Heap_Ptr
 730+ E9D1             >
 730+ E9D1             >mirror_Ptr      defl    $
 730+ E9D1             >
 730+ E9D1 11 35       >                dw      Dict_Ptr + 2        // xt
 730+ E9D3             >Heap_Ptr        defl    $ - $E000           // save current HP
 730+ E9D3             >
 730+ E9D3             >Current_HP      defl  $ - $E000             // used to set HP once!
 730+ E9D3             >
 730+ E9D3             >//              ______________________________________________________________________
 730+ E9D3             >//              Dictionary part
 730+ E9D3             >
 730+ E9D3             >                org     Dict_Ptr
 730+ 350F             >
 730+ 350F D1 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 730+ 3511             >
 730+ 3511             >MUL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 730+ 3511 CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 730+ 3514             >
 730+ 3514             >
 730+ 3514             >                endif           ; ok        // for other definitions it "points" the correct handler
 730+ 3514             >                // Use of "; ok" to suppress "warning[fwdref]"
 730+ 3514             >
 730+ 3514             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 731+ 3514 88 34 C4 25                  dw      MMUL, DROP              // m* drop
 732+ 3518 09 25                        dw      EXIT                    // ;
 733+ 351A
 734+ 351A              //  ______________________________________________________________________
 735+ 351A              //
 736+ 351A              // /mod         n1 n2 -- n3 n4
 737+ 351A              // leaves quotient n4 and remainder n3 of the integer division n1 / n2.
 738+ 351A              // The remainder has the sign of n1
 739+ 351A                              Colon_Def DIVMOD, "/MOD", is_normal
 739+ 351A             >                New_Def  DIVMOD, "/MOD", Enter_Ptr, is_normal ; ok
 739+ 351A             >
 739+ 351A             >Dict_Ptr        defl    $
 739+ 351A             >
 739+ 351A             >//              ______________________________________________________________________
 739+ 351A             >//              Heap part
 739+ 351A             >
 739+ 351A             >
 739+ 351A             >                org     (Heap_Ptr & $1FFF) + $E000
 739+ E9D3             >
 739+ E9D3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 739+ E9D3             >Latest_Definition defl  Heap_Ptr
 739+ E9D3             >
 739+ E9D3             >                // dummy db directives used to calculate length of namec
 739+ E9D3 2F 4D 4F 44 >                db      "/MOD"
 739+ E9D7             >len_NFA         defl    $ - temp_NFA
 739+ E9D7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 739+ E9D3             >
 739+ E9D3 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 739+ E9D4 2F 4D 4F 44 >                db      "/MOD"               // name string in 7-bit ascii, but
 739+ E9D8             >                org     $-1                 // alter last byte of Name just above to set
 739+ E9D7 C4          >                db      {b $} | END_BIT     // msb as name end
 739+ E9D8             >
 739+ E9D8 CD 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 739+ E9DA             >Prev_Ptr        defl    Heap_Ptr
 739+ E9DA             >
 739+ E9DA             >mirror_Ptr      defl    $
 739+ E9DA             >
 739+ E9DA 1C 35       >                dw      Dict_Ptr + 2        // xt
 739+ E9DC             >Heap_Ptr        defl    $ - $E000           // save current HP
 739+ E9DC             >
 739+ E9DC             >Current_HP      defl  $ - $E000             // used to set HP once!
 739+ E9DC             >
 739+ E9DC             >//              ______________________________________________________________________
 739+ E9DC             >//              Dictionary part
 739+ E9DC             >
 739+ E9DC             >                org     Dict_Ptr
 739+ 351A             >
 739+ 351A DA 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 739+ 351C             >
 739+ 351C             >DIVMOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 739+ 351C CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 739+ 351F             >
 739+ 351F             >
 739+ 351F             >                endif           ; ok        // for other definitions it "points" the correct handler
 739+ 351F             >                // Use of "; ok" to suppress "warning[fwdref]"
 739+ 351F             >
 739+ 351F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 740+ 351F 13 25 98 28                  dw      TO_R, S_TO_D, R_TO      // >r s->d r>
 740+ 3523 1E 25
 741+ 3525 FD 34                        dw      MDIVM                   // m/mod
 742+ 3527 09 25                        dw      EXIT                    // ;
 743+ 3529
 744+ 3529              //  ______________________________________________________________________
 745+ 3529              //
 746+ 3529              // /            n1 n2 -- n3
 747+ 3529              // division
 748+ 3529                              Colon_Def DIV, "/", is_normal
 748+ 3529             >                New_Def  DIV, "/", Enter_Ptr, is_normal ; ok
 748+ 3529             >
 748+ 3529             >Dict_Ptr        defl    $
 748+ 3529             >
 748+ 3529             >//              ______________________________________________________________________
 748+ 3529             >//              Heap part
 748+ 3529             >
 748+ 3529             >
 748+ 3529             >                org     (Heap_Ptr & $1FFF) + $E000
 748+ E9DC             >
 748+ E9DC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 748+ E9DC             >Latest_Definition defl  Heap_Ptr
 748+ E9DC             >
 748+ E9DC             >                // dummy db directives used to calculate length of namec
 748+ E9DC 2F          >                db      "/"
 748+ E9DD             >len_NFA         defl    $ - temp_NFA
 748+ E9DD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 748+ E9DC             >
 748+ E9DC 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 748+ E9DD 2F          >                db      "/"               // name string in 7-bit ascii, but
 748+ E9DE             >                org     $-1                 // alter last byte of Name just above to set
 748+ E9DD AF          >                db      {b $} | END_BIT     // msb as name end
 748+ E9DE             >
 748+ E9DE D3 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 748+ E9E0             >Prev_Ptr        defl    Heap_Ptr
 748+ E9E0             >
 748+ E9E0             >mirror_Ptr      defl    $
 748+ E9E0             >
 748+ E9E0 2B 35       >                dw      Dict_Ptr + 2        // xt
 748+ E9E2             >Heap_Ptr        defl    $ - $E000           // save current HP
 748+ E9E2             >
 748+ E9E2             >Current_HP      defl  $ - $E000             // used to set HP once!
 748+ E9E2             >
 748+ E9E2             >//              ______________________________________________________________________
 748+ E9E2             >//              Dictionary part
 748+ E9E2             >
 748+ E9E2             >                org     Dict_Ptr
 748+ 3529             >
 748+ 3529 E0 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 748+ 352B             >
 748+ 352B             >DIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 748+ 352B CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 748+ 352E             >
 748+ 352E             >
 748+ 352E             >                endif           ; ok        // for other definitions it "points" the correct handler
 748+ 352E             >                // Use of "; ok" to suppress "warning[fwdref]"
 748+ 352E             >
 748+ 352E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 749+ 352E 1C 35 C9 25                  dw      DIVMOD, NIP             // /mod nip
 750+ 3532 09 25                        dw      EXIT                    // ;
 751+ 3534
 752+ 3534              //  ______________________________________________________________________
 753+ 3534              //
 754+ 3534              // mod          n1 n2 -- n3
 755+ 3534                              Colon_Def MOD, "MOD", is_normal
 755+ 3534             >                New_Def  MOD, "MOD", Enter_Ptr, is_normal ; ok
 755+ 3534             >
 755+ 3534             >Dict_Ptr        defl    $
 755+ 3534             >
 755+ 3534             >//              ______________________________________________________________________
 755+ 3534             >//              Heap part
 755+ 3534             >
 755+ 3534             >
 755+ 3534             >                org     (Heap_Ptr & $1FFF) + $E000
 755+ E9E2             >
 755+ E9E2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 755+ E9E2             >Latest_Definition defl  Heap_Ptr
 755+ E9E2             >
 755+ E9E2             >                // dummy db directives used to calculate length of namec
 755+ E9E2 4D 4F 44    >                db      "MOD"
 755+ E9E5             >len_NFA         defl    $ - temp_NFA
 755+ E9E5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 755+ E9E2             >
 755+ E9E2 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 755+ E9E3 4D 4F 44    >                db      "MOD"               // name string in 7-bit ascii, but
 755+ E9E6             >                org     $-1                 // alter last byte of Name just above to set
 755+ E9E5 C4          >                db      {b $} | END_BIT     // msb as name end
 755+ E9E6             >
 755+ E9E6 DC 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 755+ E9E8             >Prev_Ptr        defl    Heap_Ptr
 755+ E9E8             >
 755+ E9E8             >mirror_Ptr      defl    $
 755+ E9E8             >
 755+ E9E8 36 35       >                dw      Dict_Ptr + 2        // xt
 755+ E9EA             >Heap_Ptr        defl    $ - $E000           // save current HP
 755+ E9EA             >
 755+ E9EA             >Current_HP      defl  $ - $E000             // used to set HP once!
 755+ E9EA             >
 755+ E9EA             >//              ______________________________________________________________________
 755+ E9EA             >//              Dictionary part
 755+ E9EA             >
 755+ E9EA             >                org     Dict_Ptr
 755+ 3534             >
 755+ 3534 E8 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 755+ 3536             >
 755+ 3536             >MOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 755+ 3536 CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 755+ 3539             >
 755+ 3539             >
 755+ 3539             >                endif           ; ok        // for other definitions it "points" the correct handler
 755+ 3539             >                // Use of "; ok" to suppress "warning[fwdref]"
 755+ 3539             >
 755+ 3539             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 756+ 3539 1C 35 C4 25                  dw      DIVMOD, DROP            // /mod drop
 757+ 353D 09 25                        dw      EXIT                    // ;
 758+ 353F
 759+ 353F              //  ______________________________________________________________________
 760+ 353F              //
 761+ 353F              // */mod        n1 n2 n3 -- n4 n5
 762+ 353F              // leaves the quotient n5 and the remainder n4 of the operation
 763+ 353F              // (n1 * n2) / n3. The intermediate passage through a double number
 764+ 353F              // avoids loss of precision
 765+ 353F                              Colon_Def MUL_DIV_MOD, "*/MOD", is_normal
 765+ 353F             >                New_Def  MUL_DIV_MOD, "*/MOD", Enter_Ptr, is_normal ; ok
 765+ 353F             >
 765+ 353F             >Dict_Ptr        defl    $
 765+ 353F             >
 765+ 353F             >//              ______________________________________________________________________
 765+ 353F             >//              Heap part
 765+ 353F             >
 765+ 353F             >
 765+ 353F             >                org     (Heap_Ptr & $1FFF) + $E000
 765+ E9EA             >
 765+ E9EA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 765+ E9EA             >Latest_Definition defl  Heap_Ptr
 765+ E9EA             >
 765+ E9EA             >                // dummy db directives used to calculate length of namec
 765+ E9EA 2A 2F 4D 4F >                db      "*/MOD"
 765+ E9EE 44          >
 765+ E9EF             >len_NFA         defl    $ - temp_NFA
 765+ E9EF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 765+ E9EA             >
 765+ E9EA 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 765+ E9EB 2A 2F 4D 4F >                db      "*/MOD"               // name string in 7-bit ascii, but
 765+ E9EF 44          >
 765+ E9F0             >                org     $-1                 // alter last byte of Name just above to set
 765+ E9EF C4          >                db      {b $} | END_BIT     // msb as name end
 765+ E9F0             >
 765+ E9F0 E2 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 765+ E9F2             >Prev_Ptr        defl    Heap_Ptr
 765+ E9F2             >
 765+ E9F2             >mirror_Ptr      defl    $
 765+ E9F2             >
 765+ E9F2 41 35       >                dw      Dict_Ptr + 2        // xt
 765+ E9F4             >Heap_Ptr        defl    $ - $E000           // save current HP
 765+ E9F4             >
 765+ E9F4             >Current_HP      defl  $ - $E000             // used to set HP once!
 765+ E9F4             >
 765+ E9F4             >//              ______________________________________________________________________
 765+ E9F4             >//              Dictionary part
 765+ E9F4             >
 765+ E9F4             >                org     Dict_Ptr
 765+ 353F             >
 765+ 353F F2 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 765+ 3541             >
 765+ 3541             >MUL_DIV_MOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 765+ 3541 CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 765+ 3544             >
 765+ 3544             >
 765+ 3544             >                endif           ; ok        // for other definitions it "points" the correct handler
 765+ 3544             >                // Use of "; ok" to suppress "warning[fwdref]"
 765+ 3544             >
 765+ 3544             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 766+ 3544 13 25 88 34                  dw      TO_R, MMUL              // >r  m*
 767+ 3548 1E 25 FD 34                  dw      R_TO, MDIVM             // r>  m/mod
 768+ 354C 09 25                        dw      EXIT                    // ;
 769+ 354E
 770+ 354E              //  ______________________________________________________________________
 771+ 354E              //
 772+ 354E              // */          n1 n2 n3 -- n4
 773+ 354E              // (n1 * n2) / n3. The intermediate passage through a double number avoids loss of precision
 774+ 354E                              Colon_Def MUL_DIV, "*/", is_normal
 774+ 354E             >                New_Def  MUL_DIV, "*/", Enter_Ptr, is_normal ; ok
 774+ 354E             >
 774+ 354E             >Dict_Ptr        defl    $
 774+ 354E             >
 774+ 354E             >//              ______________________________________________________________________
 774+ 354E             >//              Heap part
 774+ 354E             >
 774+ 354E             >
 774+ 354E             >                org     (Heap_Ptr & $1FFF) + $E000
 774+ E9F4             >
 774+ E9F4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 774+ E9F4             >Latest_Definition defl  Heap_Ptr
 774+ E9F4             >
 774+ E9F4             >                // dummy db directives used to calculate length of namec
 774+ E9F4 2A 2F       >                db      "*/"
 774+ E9F6             >len_NFA         defl    $ - temp_NFA
 774+ E9F6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 774+ E9F4             >
 774+ E9F4 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 774+ E9F5 2A 2F       >                db      "*/"               // name string in 7-bit ascii, but
 774+ E9F7             >                org     $-1                 // alter last byte of Name just above to set
 774+ E9F6 AF          >                db      {b $} | END_BIT     // msb as name end
 774+ E9F7             >
 774+ E9F7 EA 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 774+ E9F9             >Prev_Ptr        defl    Heap_Ptr
 774+ E9F9             >
 774+ E9F9             >mirror_Ptr      defl    $
 774+ E9F9             >
 774+ E9F9 50 35       >                dw      Dict_Ptr + 2        // xt
 774+ E9FB             >Heap_Ptr        defl    $ - $E000           // save current HP
 774+ E9FB             >
 774+ E9FB             >Current_HP      defl  $ - $E000             // used to set HP once!
 774+ E9FB             >
 774+ E9FB             >//              ______________________________________________________________________
 774+ E9FB             >//              Dictionary part
 774+ E9FB             >
 774+ E9FB             >                org     Dict_Ptr
 774+ 354E             >
 774+ 354E F9 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 774+ 3550             >
 774+ 3550             >MUL_DIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 774+ 3550 CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 774+ 3553             >
 774+ 3553             >
 774+ 3553             >                endif           ; ok        // for other definitions it "points" the correct handler
 774+ 3553             >                // Use of "; ok" to suppress "warning[fwdref]"
 774+ 3553             >
 774+ 3553             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 775+ 3553 41 35                        dw     MUL_DIV_MOD              // */mod
 776+ 3555 C9 25                        dw     NIP                      // nip
 777+ 3557 09 25                        dw     EXIT                     // ;
 778+ 3559
 779+ 3559
 780+ 3559              //  ______________________________________________________________________
 781+ 3559              //
 782+ 3559              // m/mod        ud1 u2 -- u3 ud4
 783+ 3559              // mixed operation: it leaves the remainder u3 and the quotient ud4 of ud1 / u1.
 784+ 3559              // All terms are unsigned.
 785+ 3559              //              Colon_Def MDIV_MOD, "M/MOD", is_normal
 786+ 3559              //              dw      TO_R                    // >r           ( ud1 )
 787+ 3559              //              dw      ZERO, R_OP, UMDIVMOD    // 0 r um/mod   ( l rem1 h/r )
 788+ 3559              //              dw      R_TO, SWAP, TO_R        // r> swap >r   ( l rem )
 789+ 3559              //              dw      UMDIVMOD                // um/mod       ( rem2 l/r )
 790+ 3559              //              dw      R_TO                    // r>           ( rem2 l/r h/r )
 791+ 3559              //              dw      EXIT                    // ;
 792+ 3559
 793+ 3559              //  ______________________________________________________________________
 794+ 3559              //
 795+ 3559              // (line)       n1 n2 -- a b
 796+ 3559              // sends the line n1 of block n2 to the disk buffer.
 797+ 3559              // it returns the address a and ca counter b = C/L meaning a whole line.
 798+ 3559                              Colon_Def CLINE, "(LINE)", is_normal
 798+ 3559             >                New_Def  CLINE, "(LINE)", Enter_Ptr, is_normal ; ok
 798+ 3559             >
 798+ 3559             >Dict_Ptr        defl    $
 798+ 3559             >
 798+ 3559             >//              ______________________________________________________________________
 798+ 3559             >//              Heap part
 798+ 3559             >
 798+ 3559             >
 798+ 3559             >                org     (Heap_Ptr & $1FFF) + $E000
 798+ E9FB             >
 798+ E9FB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 798+ E9FB             >Latest_Definition defl  Heap_Ptr
 798+ E9FB             >
 798+ E9FB             >                // dummy db directives used to calculate length of namec
 798+ E9FB 28 4C 49 4E >                db      "(LINE)"
 798+ E9FF 45 29       >
 798+ EA01             >len_NFA         defl    $ - temp_NFA
 798+ EA01             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 798+ E9FB             >
 798+ E9FB 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 798+ E9FC 28 4C 49 4E >                db      "(LINE)"               // name string in 7-bit ascii, but
 798+ EA00 45 29       >
 798+ EA02             >                org     $-1                 // alter last byte of Name just above to set
 798+ EA01 A9          >                db      {b $} | END_BIT     // msb as name end
 798+ EA02             >
 798+ EA02 F4 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 798+ EA04             >Prev_Ptr        defl    Heap_Ptr
 798+ EA04             >
 798+ EA04             >mirror_Ptr      defl    $
 798+ EA04             >
 798+ EA04 5B 35       >                dw      Dict_Ptr + 2        // xt
 798+ EA06             >Heap_Ptr        defl    $ - $E000           // save current HP
 798+ EA06             >
 798+ EA06             >Current_HP      defl  $ - $E000             // used to set HP once!
 798+ EA06             >
 798+ EA06             >//              ______________________________________________________________________
 798+ EA06             >//              Dictionary part
 798+ EA06             >
 798+ EA06             >                org     Dict_Ptr
 798+ 3559             >
 798+ 3559 04 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 798+ 355B             >
 798+ 355B             >CLINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 798+ 355B CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 798+ 355E             >
 798+ 355E             >
 798+ 355E             >                endif           ; ok        // for other definitions it "points" the correct handler
 798+ 355E             >                // Use of "; ok" to suppress "warning[fwdref]"
 798+ 355E             >
 798+ 355E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 799+ 355E 13 25                        dw      TO_R                    // >r
 800+ 3560 69 27                        dw      CL                      // c/l
 801+ 3562 70 27 41 35                  dw      BBUF, MUL_DIV_MOD       // */mod
 802+ 3566 1E 25                        dw      R_TO                    // r>
 803+ 3568 77 27 11 35                  dw      BSCR, MUL, PLUS         // b/scr * +
 803+ 356C 5B 25
 804+ 356E 44 37                        dw      BLOCK                   // block   ( forward )
 805+ 3570 5B 25                        dw      PLUS                    // +
 806+ 3572 69 27                        dw      CL                      // c/l
 807+ 3574 09 25                        dw      EXIT                    // ;
 808+ 3576
 809+ 3576              //  ______________________________________________________________________
 810+ 3576              //
 811+ 3576              // .line        n1 n2 --
 812+ 3576              // Sends to output line  n1  of screen n2.
 813+ 3576                              Colon_Def DOT_LINE, ".LINE", is_normal
 813+ 3576             >                New_Def  DOT_LINE, ".LINE", Enter_Ptr, is_normal ; ok
 813+ 3576             >
 813+ 3576             >Dict_Ptr        defl    $
 813+ 3576             >
 813+ 3576             >//              ______________________________________________________________________
 813+ 3576             >//              Heap part
 813+ 3576             >
 813+ 3576             >
 813+ 3576             >                org     (Heap_Ptr & $1FFF) + $E000
 813+ EA06             >
 813+ EA06             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 813+ EA06             >Latest_Definition defl  Heap_Ptr
 813+ EA06             >
 813+ EA06             >                // dummy db directives used to calculate length of namec
 813+ EA06 2E 4C 49 4E >                db      ".LINE"
 813+ EA0A 45          >
 813+ EA0B             >len_NFA         defl    $ - temp_NFA
 813+ EA0B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 813+ EA06             >
 813+ EA06 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 813+ EA07 2E 4C 49 4E >                db      ".LINE"               // name string in 7-bit ascii, but
 813+ EA0B 45          >
 813+ EA0C             >                org     $-1                 // alter last byte of Name just above to set
 813+ EA0B C5          >                db      {b $} | END_BIT     // msb as name end
 813+ EA0C             >
 813+ EA0C FB 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 813+ EA0E             >Prev_Ptr        defl    Heap_Ptr
 813+ EA0E             >
 813+ EA0E             >mirror_Ptr      defl    $
 813+ EA0E             >
 813+ EA0E 78 35       >                dw      Dict_Ptr + 2        // xt
 813+ EA10             >Heap_Ptr        defl    $ - $E000           // save current HP
 813+ EA10             >
 813+ EA10             >Current_HP      defl  $ - $E000             // used to set HP once!
 813+ EA10             >
 813+ EA10             >//              ______________________________________________________________________
 813+ EA10             >//              Dictionary part
 813+ EA10             >
 813+ EA10             >                org     Dict_Ptr
 813+ 3576             >
 813+ 3576 0E 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 813+ 3578             >
 813+ 3578             >DOT_LINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 813+ 3578 CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 813+ 357B             >
 813+ 357B             >
 813+ 357B             >                endif           ; ok        // for other definitions it "points" the correct handler
 813+ 357B             >                // Use of "; ok" to suppress "warning[fwdref]"
 813+ 357B             >
 813+ 357B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 814+ 357B 5B 35 3D 2C                  dw      CLINE, LTRAILING, TYPE  // (line) -trailing type
 814+ 357F 26 2C
 815+ 3581 09 25                        dw      EXIT                    // ;
 816+ 3583
 817+ 3583              //  ______________________________________________________________________
 818+ 3583              //
 819+ 3583              // message       n1 n2 --
 820+ 3583              // prints error message to current channel.
 821+ 3583              // if WARNING is 0, prints "MSG#n".
 822+ 3583              // if WARNING is 1, prints line n of screen 4.
 823+ 3583              // if WARNING is -1, see ERROR
 824+ 3583              // value can be negative or beyond block 4.
 825+ 3583                              Colon_Def MESSAGE, "MESSAGE", is_normal
 825+ 3583             >                New_Def  MESSAGE, "MESSAGE", Enter_Ptr, is_normal ; ok
 825+ 3583             >
 825+ 3583             >Dict_Ptr        defl    $
 825+ 3583             >
 825+ 3583             >//              ______________________________________________________________________
 825+ 3583             >//              Heap part
 825+ 3583             >
 825+ 3583             >
 825+ 3583             >                org     (Heap_Ptr & $1FFF) + $E000
 825+ EA10             >
 825+ EA10             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 825+ EA10             >Latest_Definition defl  Heap_Ptr
 825+ EA10             >
 825+ EA10             >                // dummy db directives used to calculate length of namec
 825+ EA10 4D 45 53 53 >                db      "MESSAGE"
 825+ EA14 41 47 45    >
 825+ EA17             >len_NFA         defl    $ - temp_NFA
 825+ EA17             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 825+ EA10             >
 825+ EA10 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 825+ EA11 4D 45 53 53 >                db      "MESSAGE"               // name string in 7-bit ascii, but
 825+ EA15 41 47 45    >
 825+ EA18             >                org     $-1                 // alter last byte of Name just above to set
 825+ EA17 C5          >                db      {b $} | END_BIT     // msb as name end
 825+ EA18             >
 825+ EA18 06 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 825+ EA1A             >Prev_Ptr        defl    Heap_Ptr
 825+ EA1A             >
 825+ EA1A             >mirror_Ptr      defl    $
 825+ EA1A             >
 825+ EA1A 85 35       >                dw      Dict_Ptr + 2        // xt
 825+ EA1C             >Heap_Ptr        defl    $ - $E000           // save current HP
 825+ EA1C             >
 825+ EA1C             >Current_HP      defl  $ - $E000             // used to set HP once!
 825+ EA1C             >
 825+ EA1C             >//              ______________________________________________________________________
 825+ EA1C             >//              Dictionary part
 825+ EA1C             >
 825+ EA1C             >                org     Dict_Ptr
 825+ 3583             >
 825+ 3583 1A 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 825+ 3585             >
 825+ 3585             >MESSAGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 825+ 3585 CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 825+ 3588             >
 825+ 3588             >
 825+ 3588             >                endif           ; ok        // for other definitions it "points" the correct handler
 825+ 3588             >                // Use of "; ok" to suppress "warning[fwdref]"
 825+ 3588             >
 825+ 3588             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 826+ 3588 B0 27 49 26                  dw      WARNING, FETCH          // warning @
 827+ 358C                                                              // if
 828+ 358C 8F 20                        dw      ZBRANCH
 829+ 358E 12 00                        dw      Message_Else - $
 830+ 3590 3D 20 20 00                  dw          LIT, 32, PLUS       //      32 +
 830+ 3594 5B 25
 831+ 3596 4D 27                        dw          TWO                 //      2
 832+ 3598 78 35                        dw          DOT_LINE            //      .line
 833+ 359A 2D 29                        dw          SPACE               //      space
 834+ 359C                                                              // else
 835+ 359C
 836+ 359C 82 20                        dw      BRANCH
 837+ 359E 0B 00                        dw      Message_ENdif - $
 838+ 35A0              Message_Else:
 839+ 35A0 C3 2D                        dw          C_DOT_QUOTE         //      .( msg#)
 840+ 35A2 04 6D 73 67                  db          4, "msg#"
 840+ 35A6 23
 841+ 35A7 A8 3C                        dw          DOT                 //      .  ( forward )
 842+ 35A9              Message_ENdif:                                  // endif
 843+ 35A9 09 25                        dw      EXIT                    // ;
 844+ 35AB
 845+ 35AB
 846+ 35AB              //  ______________________________________________________________________
 847+ 35AB              //
 848+ 35AB              // device
 849+ 35AB                              Variable_Def DEVICE,   "DEVICE",   2
 849+ 35AB             >                New_Def  DEVICE, "DEVICE", Variable_Ptr, is_normal
 849+ 35AB             >
 849+ 35AB             >Dict_Ptr        defl    $
 849+ 35AB             >
 849+ 35AB             >//              ______________________________________________________________________
 849+ 35AB             >//              Heap part
 849+ 35AB             >
 849+ 35AB             >
 849+ 35AB             >                org     (Heap_Ptr & $1FFF) + $E000
 849+ EA1C             >
 849+ EA1C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 849+ EA1C             >Latest_Definition defl  Heap_Ptr
 849+ EA1C             >
 849+ EA1C             >                // dummy db directives used to calculate length of namec
 849+ EA1C 44 45 56 49 >                db      "DEVICE"
 849+ EA20 43 45       >
 849+ EA22             >len_NFA         defl    $ - temp_NFA
 849+ EA22             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 849+ EA1C             >
 849+ EA1C 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 849+ EA1D 44 45 56 49 >                db      "DEVICE"               // name string in 7-bit ascii, but
 849+ EA21 43 45       >
 849+ EA23             >                org     $-1                 // alter last byte of Name just above to set
 849+ EA22 C5          >                db      {b $} | END_BIT     // msb as name end
 849+ EA23             >
 849+ EA23 10 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 849+ EA25             >Prev_Ptr        defl    Heap_Ptr
 849+ EA25             >
 849+ EA25             >mirror_Ptr      defl    $
 849+ EA25             >
 849+ EA25 AD 35       >                dw      Dict_Ptr + 2        // xt
 849+ EA27             >Heap_Ptr        defl    $ - $E000           // save current HP
 849+ EA27             >
 849+ EA27             >Current_HP      defl  $ - $E000             // used to set HP once!
 849+ EA27             >
 849+ EA27             >//              ______________________________________________________________________
 849+ EA27             >//              Dictionary part
 849+ EA27             >
 849+ EA27             >                org     Dict_Ptr
 849+ 35AB             >
 849+ 35AB 25 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 849+ 35AD             >
 849+ 35AD             >DEVICE:          if Variable_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 849+ 35AD CD 26 27    >                call    Variable_Ptr ; ok        // for primitive definitions  actual code
 849+ 35B0             >
 849+ 35B0             >
 849+ 35B0             >                endif           ; ok        // for other definitions it "points" the correct handler
 849+ 35B0             >                // Use of "; ok" to suppress "warning[fwdref]"
 849+ 35B0             >
 849+ 35B0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 849+ 35B0 02 00       >                dw      2
 850+ 35B2
 851+ 35B2              //  ______________________________________________________________________
 852+ 35B2
# file closed: C:\Zx\CSpect\Projects\vForth17_DOT/source/L2.asm
 142  35B2                              include "next-opt1.asm"
# file opened: C:\Zx\CSpect\Projects\vForth17_DOT/source/next-opt1.asm
   1+ 35B2              //  ______________________________________________________________________
   2+ 35B2              //
   3+ 35B2              //  next-opt.asm
   4+ 35B2              //
   5+ 35B2              //  ZX Spectrum Next - peculiar definitions
   6+ 35B2              //  ______________________________________________________________________
   7+ 35B2
   8+ 35B2              //  ______________________________________________________________________
   9+ 35B2              //
  10+ 35B2              // reg@         n -- b
  11+ 35B2              // read Next REGister n giving byte b
  12+ 35B2              //
  13+ 35B2              //              Colon_Def REG_FETCH, "REG@", is_normal
  14+ 35B2              //              dw      LIT, $243B
  15+ 35B2              //              dw      PSTORE
  16+ 35B2              //              dw      LIT, $253B
  17+ 35B2              //              dw      PFETCH
  18+ 35B2              //              dw      EXIT
  19+ 35B2                              New_Def REG_FETCH, "REG@", is_code, is_normal
  19+ 35B2             >
  19+ 35B2             >Dict_Ptr        defl    $
  19+ 35B2             >
  19+ 35B2             >//              ______________________________________________________________________
  19+ 35B2             >//              Heap part
  19+ 35B2             >
  19+ 35B2             >
  19+ 35B2             >                org     (Heap_Ptr & $1FFF) + $E000
  19+ EA27             >
  19+ EA27             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  19+ EA27             >Latest_Definition defl  Heap_Ptr
  19+ EA27             >
  19+ EA27             >                // dummy db directives used to calculate length of namec
  19+ EA27 52 45 47 40 >                db      "REG@"
  19+ EA2B             >len_NFA         defl    $ - temp_NFA
  19+ EA2B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  19+ EA27             >
  19+ EA27 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  19+ EA28 52 45 47 40 >                db      "REG@"               // name string in 7-bit ascii, but
  19+ EA2C             >                org     $-1                 // alter last byte of Name just above to set
  19+ EA2B C0          >                db      {b $} | END_BIT     // msb as name end
  19+ EA2C             >
  19+ EA2C 1C 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  19+ EA2E             >Prev_Ptr        defl    Heap_Ptr
  19+ EA2E             >
  19+ EA2E             >mirror_Ptr      defl    $
  19+ EA2E             >
  19+ EA2E B4 35       >                dw      Dict_Ptr + 2        // xt
  19+ EA30             >Heap_Ptr        defl    $ - $E000           // save current HP
  19+ EA30             >
  19+ EA30             >Current_HP      defl  $ - $E000             // used to set HP once!
  19+ EA30             >
  19+ EA30             >//              ______________________________________________________________________
  19+ EA30             >//              Dictionary part
  19+ EA30             >
  19+ EA30             >                org     Dict_Ptr
  19+ 35B2             >
  19+ 35B2 2E 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  19+ 35B4             >
  19+ 35B4             >REG_FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  19+ 35B4 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  19+ 35B4 ~           >
  19+ 35B4 ~           >
  19+ 35B4             >                endif           ; ok        // for other definitions it "points" the correct handler
  19+ 35B4             >                // Use of "; ok" to suppress "warning[fwdref]"
  19+ 35B4             >
  19+ 35B4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  20+ 35B4 D9                           exx
  21+ 35B5 01 3B 24                     ld      bc, $243B
  22+ 35B8 E1                           pop     hl
  23+ 35B9 ED 69                        out     (c), l
  24+ 35BB 04                           inc     b
  25+ 35BC ED 68                        in      l, (c)
  26+ 35BE E5                           push    hl
  27+ 35BF D9                           exx
  28+ 35C0                              next
  28+ 35C0 DD E9       >                jp      (ix)
  29+ 35C2
  30+ 35C2
  31+ 35C2              //  ______________________________________________________________________
  32+ 35C2              //
  33+ 35C2              // reg!         b n --
  34+ 35C2              // write value b to Next REGister n
  35+ 35C2              //
  36+ 35C2              //              Colon_Def REG_STORE, "REG!", is_normal
  37+ 35C2              //              dw      LIT, $243B
  38+ 35C2              //              dw      PSTORE
  39+ 35C2              //              dw      LIT, $253B
  40+ 35C2              //              dw      PSTORE
  41+ 35C2              //              dw      EXIT
  42+ 35C2                              New_Def REG_STORE, "REG!", is_code, is_normal
  42+ 35C2             >
  42+ 35C2             >Dict_Ptr        defl    $
  42+ 35C2             >
  42+ 35C2             >//              ______________________________________________________________________
  42+ 35C2             >//              Heap part
  42+ 35C2             >
  42+ 35C2             >
  42+ 35C2             >                org     (Heap_Ptr & $1FFF) + $E000
  42+ EA30             >
  42+ EA30             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  42+ EA30             >Latest_Definition defl  Heap_Ptr
  42+ EA30             >
  42+ EA30             >                // dummy db directives used to calculate length of namec
  42+ EA30 52 45 47 21 >                db      "REG!"
  42+ EA34             >len_NFA         defl    $ - temp_NFA
  42+ EA34             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  42+ EA30             >
  42+ EA30 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  42+ EA31 52 45 47 21 >                db      "REG!"               // name string in 7-bit ascii, but
  42+ EA35             >                org     $-1                 // alter last byte of Name just above to set
  42+ EA34 A1          >                db      {b $} | END_BIT     // msb as name end
  42+ EA35             >
  42+ EA35 27 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  42+ EA37             >Prev_Ptr        defl    Heap_Ptr
  42+ EA37             >
  42+ EA37             >mirror_Ptr      defl    $
  42+ EA37             >
  42+ EA37 C4 35       >                dw      Dict_Ptr + 2        // xt
  42+ EA39             >Heap_Ptr        defl    $ - $E000           // save current HP
  42+ EA39             >
  42+ EA39             >Current_HP      defl  $ - $E000             // used to set HP once!
  42+ EA39             >
  42+ EA39             >//              ______________________________________________________________________
  42+ EA39             >//              Dictionary part
  42+ EA39             >
  42+ EA39             >                org     Dict_Ptr
  42+ 35C2             >
  42+ 35C2 37 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  42+ 35C4             >
  42+ 35C4             >REG_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  42+ 35C4 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  42+ 35C4 ~           >
  42+ 35C4 ~           >
  42+ 35C4             >                endif           ; ok        // for other definitions it "points" the correct handler
  42+ 35C4             >                // Use of "; ok" to suppress "warning[fwdref]"
  42+ 35C4             >
  42+ 35C4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  43+ 35C4 D9                           exx
  44+ 35C5 01 3B 24                     ld      bc, $243B
  45+ 35C8 E1                           pop     hl
  46+ 35C9 ED 69                        out     (c), l
  47+ 35CB 04                           inc     b
  48+ 35CC E1                           pop     hl
  49+ 35CD ED 69                        out     (c), l
  50+ 35CF D9                           exx
  51+ 35D0                              next
  51+ 35D0 DD E9       >                jp      (ix)
  52+ 35D2
  53+ 35D2
  54+ 35D2              //  ______________________________________________________________________
  55+ 35D2              //
  56+ 35D2              // m_p3dos      n1 n2 n3 n4 a -- n5 n6 n7 n8  f
  57+ 35D2              // NextZXOS call wrapper.
  58+ 35D2              //  n1 = hl register parameter value
  59+ 35D2              //  n2 = de register parameter value
  60+ 35D2              //  n3 = bc register parameter value
  61+ 35D2              //  n4 =  a register parameter value
  62+ 35D2              //   a = routine address in ROM 3
  63+ 35D2              // ----
  64+ 35D2              //  n5 = hl returned value
  65+ 35D2              //  n6 = de returned value
  66+ 35D2              //  n7 = bc returned value
  67+ 35D2              //  n8 =  a returned value
  68+ 35D2              //   f
  69+ 35D2                              New_Def M_P3DOS, "M_P3DOS", is_code, is_normal
  69+ 35D2             >
  69+ 35D2             >Dict_Ptr        defl    $
  69+ 35D2             >
  69+ 35D2             >//              ______________________________________________________________________
  69+ 35D2             >//              Heap part
  69+ 35D2             >
  69+ 35D2             >
  69+ 35D2             >                org     (Heap_Ptr & $1FFF) + $E000
  69+ EA39             >
  69+ EA39             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  69+ EA39             >Latest_Definition defl  Heap_Ptr
  69+ EA39             >
  69+ EA39             >                // dummy db directives used to calculate length of namec
  69+ EA39 4D 5F 50 33 >                db      "M_P3DOS"
  69+ EA3D 44 4F 53    >
  69+ EA40             >len_NFA         defl    $ - temp_NFA
  69+ EA40             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  69+ EA39             >
  69+ EA39 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  69+ EA3A 4D 5F 50 33 >                db      "M_P3DOS"               // name string in 7-bit ascii, but
  69+ EA3E 44 4F 53    >
  69+ EA41             >                org     $-1                 // alter last byte of Name just above to set
  69+ EA40 D3          >                db      {b $} | END_BIT     // msb as name end
  69+ EA41             >
  69+ EA41 30 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  69+ EA43             >Prev_Ptr        defl    Heap_Ptr
  69+ EA43             >
  69+ EA43             >mirror_Ptr      defl    $
  69+ EA43             >
  69+ EA43 D4 35       >                dw      Dict_Ptr + 2        // xt
  69+ EA45             >Heap_Ptr        defl    $ - $E000           // save current HP
  69+ EA45             >
  69+ EA45             >Current_HP      defl  $ - $E000             // used to set HP once!
  69+ EA45             >
  69+ EA45             >//              ______________________________________________________________________
  69+ EA45             >//              Dictionary part
  69+ EA45             >
  69+ EA45             >                org     Dict_Ptr
  69+ 35D2             >
  69+ 35D2 43 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  69+ 35D4             >
  69+ 35D4             >M_P3DOS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  69+ 35D4 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  69+ 35D4 ~           >
  69+ 35D4 ~           >
  69+ 35D4             >                endif           ; ok        // for other definitions it "points" the correct handler
  69+ 35D4             >                // Use of "; ok" to suppress "warning[fwdref]"
  69+ 35D4             >
  69+ 35D4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  70+ 35D4 D9                            exx
  71+ 35D5 E1                            pop     hl                  // dos call entry address a  //  n1 n2 n3 n4
  72+ 35D6 D1                            pop     de                  // a register argument       //  n1 n2 n3
  73+ 35D7 7B                            ld      a, e
  74+ 35D8 C1                            pop     bc                  // bc' argument              //  n1 n2
  75+ 35D9 D1                            pop     de                  // de' argument              //  n1
  76+ 35DA E3                            ex      (sp), hl            // hl' argument and entry address in TOS
  77+ 35DB D9                           exx
  78+ 35DC E1                           pop     hl                  // entry address a
  79+ 35DD DD E5                        push    ix
  80+ 35DF D5                           push    de
  81+ 35E0 C5                           push    bc
  82+ 35E1 EB                           ex      de, hl              // de is entry address
  83+ 35E2              //              ld      (SP_Saved), sp
  84+ 35E2              //              ld      sp, Cold_origin - 5
  85+ 35E2              //              ld      sp, TSTACK          // Carefully balanced from startup
  86+ 35E2 0E 07                        ld      c, 7                // use 7 RAM Bank
  87+ 35E4 F3                           di
  88+ 35E5 CF                           rst     08
  89+ 35E6 94                           db      $94
  90+ 35E7 FB                           ei
  91+ 35E8                      ////    ld      a, (Saved_MMU + 1)
  92+ 35E8                      ////    nextreg $53, a            // some calls reset MMU3 to $11 !
  93+ 35E8
  94+ 35E8              //              ld      sp, (SP_Saved)
  95+ 35E8              //              push    ix
  96+ 35E8              //              pop     hl
  97+ 35E8              //              ld      (IX_Echo), hl
  98+ 35E8 DD 22 32 20                  ld      (IX_Echo), ix
  99+ 35EC
 100+ 35EC D9                           exx
 101+ 35ED C1                           pop     bc
 102+ 35EE D1                           pop     de
 103+ 35EF DD E1                        pop     ix
 104+ 35F1 D9                            exx
 105+ 35F2 E5                            push    hl
 106+ 35F3 D5                            push    de
 107+ 35F4 C5                            push    bc
 108+ 35F5 26 00                         ld      h, 0
 109+ 35F7 6F                            ld      l, a
 110+ 35F8 E5                            push    hl
 111+ 35F9 D9                           exx
 112+ 35FA ED 62                        sbc     hl, hl              // -1 for OK ; 0 for KO but now...
 113+ 35FC 23                           inc     hl                  //  0 for OK ; 1 for ko
 114+ 35FD E5                           push    hl
 115+ 35FE                              next
 115+ 35FE DD E9       >                jp      (ix)
 116+ 3600
 117+ 3600              //  ______________________________________________________________________
 118+ 3600              //
 119+ 3600              // blk-fh
 120+ 3600              // MOVED AT THE END.
 121+ 3600              //              Variable_Def BLK_FH,   "BLK-FH",   1
 122+ 3600              //
 123+ 3600              //              New_Def BLK_FNAME,   "BLK-FNAME", Create_Ptr, is_normal
 124+ 3600              // Len_Filename:   db      30
 125+ 3600              // Blk_filename:   db      "c:/tools/vforth/!Blocks-64.bin", 0
 126+ 3600              //                 ds      32
 127+ 3600
 128+ 3600              //  ______________________________________________________________________
 129+ 3600              //
 130+ 3600              // blk-seek     n --
 131+ 3600              // seek block n  within blocks!.bin  file
 132+ 3600                              Colon_Def BLK_SEEK, "BLK-SEEK", is_normal
 132+ 3600             >                New_Def  BLK_SEEK, "BLK-SEEK", Enter_Ptr, is_normal ; ok
 132+ 3600             >
 132+ 3600             >Dict_Ptr        defl    $
 132+ 3600             >
 132+ 3600             >//              ______________________________________________________________________
 132+ 3600             >//              Heap part
 132+ 3600             >
 132+ 3600             >
 132+ 3600             >                org     (Heap_Ptr & $1FFF) + $E000
 132+ EA45             >
 132+ EA45             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 132+ EA45             >Latest_Definition defl  Heap_Ptr
 132+ EA45             >
 132+ EA45             >                // dummy db directives used to calculate length of namec
 132+ EA45 42 4C 4B 2D >                db      "BLK-SEEK"
 132+ EA49 53 45 45 4B >
 132+ EA4D             >len_NFA         defl    $ - temp_NFA
 132+ EA4D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 132+ EA45             >
 132+ EA45 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 132+ EA46 42 4C 4B 2D >                db      "BLK-SEEK"               // name string in 7-bit ascii, but
 132+ EA4A 53 45 45 4B >
 132+ EA4E             >                org     $-1                 // alter last byte of Name just above to set
 132+ EA4D CB          >                db      {b $} | END_BIT     // msb as name end
 132+ EA4E             >
 132+ EA4E 39 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 132+ EA50             >Prev_Ptr        defl    Heap_Ptr
 132+ EA50             >
 132+ EA50             >mirror_Ptr      defl    $
 132+ EA50             >
 132+ EA50 02 36       >                dw      Dict_Ptr + 2        // xt
 132+ EA52             >Heap_Ptr        defl    $ - $E000           // save current HP
 132+ EA52             >
 132+ EA52             >Current_HP      defl  $ - $E000             // used to set HP once!
 132+ EA52             >
 132+ EA52             >//              ______________________________________________________________________
 132+ EA52             >//              Dictionary part
 132+ EA52             >
 132+ EA52             >                org     Dict_Ptr
 132+ 3600             >
 132+ 3600 50 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 132+ 3602             >
 132+ 3602             >BLK_SEEK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 132+ 3602 CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 132+ 3605             >
 132+ 3605             >
 132+ 3605             >                endif           ; ok        // for other definitions it "points" the correct handler
 132+ 3605             >                // Use of "; ok" to suppress "warning[fwdref]"
 132+ 3605             >
 132+ 3605             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 133+ 3605 70 27 88 34                  dw  BBUF, MMUL
 134+ 3609 68 3F 49 26                  dw  BLK_FH, FETCH
 135+ 360D 86 23                        dw  F_SEEK
 136+ 360F 3D 20 2D 00                  dw  LIT, $2D, QERROR
 136+ 3613 98 2A
 137+ 3615 09 25                        dw  EXIT
 138+ 3617
 139+ 3617              //  ______________________________________________________________________
 140+ 3617              //
 141+ 3617              // blk-read     n --
 142+ 3617              // seek block n  within blocks!.bin  file
 143+ 3617                              Colon_Def BLK_READ, "BLK-READ", is_normal
 143+ 3617             >                New_Def  BLK_READ, "BLK-READ", Enter_Ptr, is_normal ; ok
 143+ 3617             >
 143+ 3617             >Dict_Ptr        defl    $
 143+ 3617             >
 143+ 3617             >//              ______________________________________________________________________
 143+ 3617             >//              Heap part
 143+ 3617             >
 143+ 3617             >
 143+ 3617             >                org     (Heap_Ptr & $1FFF) + $E000
 143+ EA52             >
 143+ EA52             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 143+ EA52             >Latest_Definition defl  Heap_Ptr
 143+ EA52             >
 143+ EA52             >                // dummy db directives used to calculate length of namec
 143+ EA52 42 4C 4B 2D >                db      "BLK-READ"
 143+ EA56 52 45 41 44 >
 143+ EA5A             >len_NFA         defl    $ - temp_NFA
 143+ EA5A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 143+ EA52             >
 143+ EA52 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 143+ EA53 42 4C 4B 2D >                db      "BLK-READ"               // name string in 7-bit ascii, but
 143+ EA57 52 45 41 44 >
 143+ EA5B             >                org     $-1                 // alter last byte of Name just above to set
 143+ EA5A C4          >                db      {b $} | END_BIT     // msb as name end
 143+ EA5B             >
 143+ EA5B 45 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 143+ EA5D             >Prev_Ptr        defl    Heap_Ptr
 143+ EA5D             >
 143+ EA5D             >mirror_Ptr      defl    $
 143+ EA5D             >
 143+ EA5D 19 36       >                dw      Dict_Ptr + 2        // xt
 143+ EA5F             >Heap_Ptr        defl    $ - $E000           // save current HP
 143+ EA5F             >
 143+ EA5F             >Current_HP      defl  $ - $E000             // used to set HP once!
 143+ EA5F             >
 143+ EA5F             >//              ______________________________________________________________________
 143+ EA5F             >//              Dictionary part
 143+ EA5F             >
 143+ EA5F             >                org     Dict_Ptr
 143+ 3617             >
 143+ 3617 5D 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 143+ 3619             >
 143+ 3619             >BLK_READ:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 143+ 3619 CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 143+ 361C             >
 143+ 361C             >
 143+ 361C             >                endif           ; ok        // for other definitions it "points" the correct handler
 143+ 361C             >                // Use of "; ok" to suppress "warning[fwdref]"
 143+ 361C             >
 143+ 361C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 144+ 361C 02 36                        dw  BLK_SEEK
 145+ 361E 70 27                        dw  BBUF
 146+ 3620 68 3F 49 26                  dw  BLK_FH, FETCH
 147+ 3624 D7 23                        dw  F_READ
 148+ 3626 3D 20 2E 00                  dw  LIT, $2E, QERROR
 148+ 362A 98 2A
 149+ 362C C4 25                        dw  DROP
 150+ 362E 09 25                        dw  EXIT
 151+ 3630
 152+ 3630              //  ______________________________________________________________________
 153+ 3630              //
 154+ 3630              // blk-write     n --
 155+ 3630              // seek block n  within blocks!.bin  file
 156+ 3630                              Colon_Def BLK_WRITE, "BLK-WRITE", is_normal
 156+ 3630             >                New_Def  BLK_WRITE, "BLK-WRITE", Enter_Ptr, is_normal ; ok
 156+ 3630             >
 156+ 3630             >Dict_Ptr        defl    $
 156+ 3630             >
 156+ 3630             >//              ______________________________________________________________________
 156+ 3630             >//              Heap part
 156+ 3630             >
 156+ 3630             >
 156+ 3630             >                org     (Heap_Ptr & $1FFF) + $E000
 156+ EA5F             >
 156+ EA5F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 156+ EA5F             >Latest_Definition defl  Heap_Ptr
 156+ EA5F             >
 156+ EA5F             >                // dummy db directives used to calculate length of namec
 156+ EA5F 42 4C 4B 2D >                db      "BLK-WRITE"
 156+ EA63 57 52 49 54 >
 156+ EA67 45          >
 156+ EA68             >len_NFA         defl    $ - temp_NFA
 156+ EA68             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 156+ EA5F             >
 156+ EA5F 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 156+ EA60 42 4C 4B 2D >                db      "BLK-WRITE"               // name string in 7-bit ascii, but
 156+ EA64 57 52 49 54 >
 156+ EA68 45          >
 156+ EA69             >                org     $-1                 // alter last byte of Name just above to set
 156+ EA68 C5          >                db      {b $} | END_BIT     // msb as name end
 156+ EA69             >
 156+ EA69 52 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 156+ EA6B             >Prev_Ptr        defl    Heap_Ptr
 156+ EA6B             >
 156+ EA6B             >mirror_Ptr      defl    $
 156+ EA6B             >
 156+ EA6B 32 36       >                dw      Dict_Ptr + 2        // xt
 156+ EA6D             >Heap_Ptr        defl    $ - $E000           // save current HP
 156+ EA6D             >
 156+ EA6D             >Current_HP      defl  $ - $E000             // used to set HP once!
 156+ EA6D             >
 156+ EA6D             >//              ______________________________________________________________________
 156+ EA6D             >//              Dictionary part
 156+ EA6D             >
 156+ EA6D             >                org     Dict_Ptr
 156+ 3630             >
 156+ 3630 6B 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 156+ 3632             >
 156+ 3632             >BLK_WRITE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 156+ 3632 CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 156+ 3635             >
 156+ 3635             >
 156+ 3635             >                endif           ; ok        // for other definitions it "points" the correct handler
 156+ 3635             >                // Use of "; ok" to suppress "warning[fwdref]"
 156+ 3635             >
 156+ 3635             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 157+ 3635 02 36                        dw  BLK_SEEK
 158+ 3637 70 27                        dw  BBUF
 159+ 3639 68 3F 49 26                  dw  BLK_FH, FETCH
 160+ 363D F7 23                        dw  F_WRITE
 161+ 363F 3D 20 2F 00                  dw  LIT, $2F, QERROR
 161+ 3643 98 2A
 162+ 3645 C4 25                        dw  DROP
 163+ 3647 09 25                        dw  EXIT
 164+ 3649
 165+ 3649              //  ______________________________________________________________________
 166+ 3649              //
 167+ 3649              // blk-init     n --
 168+ 3649              // seek block n  within blocks!.bin  file
 169+ 3649                              Colon_Def BLK_INIT, "BLK-INIT", is_normal
 169+ 3649             >                New_Def  BLK_INIT, "BLK-INIT", Enter_Ptr, is_normal ; ok
 169+ 3649             >
 169+ 3649             >Dict_Ptr        defl    $
 169+ 3649             >
 169+ 3649             >//              ______________________________________________________________________
 169+ 3649             >//              Heap part
 169+ 3649             >
 169+ 3649             >
 169+ 3649             >                org     (Heap_Ptr & $1FFF) + $E000
 169+ EA6D             >
 169+ EA6D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 169+ EA6D             >Latest_Definition defl  Heap_Ptr
 169+ EA6D             >
 169+ EA6D             >                // dummy db directives used to calculate length of namec
 169+ EA6D 42 4C 4B 2D >                db      "BLK-INIT"
 169+ EA71 49 4E 49 54 >
 169+ EA75             >len_NFA         defl    $ - temp_NFA
 169+ EA75             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 169+ EA6D             >
 169+ EA6D 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 169+ EA6E 42 4C 4B 2D >                db      "BLK-INIT"               // name string in 7-bit ascii, but
 169+ EA72 49 4E 49 54 >
 169+ EA76             >                org     $-1                 // alter last byte of Name just above to set
 169+ EA75 D4          >                db      {b $} | END_BIT     // msb as name end
 169+ EA76             >
 169+ EA76 5F 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 169+ EA78             >Prev_Ptr        defl    Heap_Ptr
 169+ EA78             >
 169+ EA78             >mirror_Ptr      defl    $
 169+ EA78             >
 169+ EA78 4B 36       >                dw      Dict_Ptr + 2        // xt
 169+ EA7A             >Heap_Ptr        defl    $ - $E000           // save current HP
 169+ EA7A             >
 169+ EA7A             >Current_HP      defl  $ - $E000             // used to set HP once!
 169+ EA7A             >
 169+ EA7A             >//              ______________________________________________________________________
 169+ EA7A             >//              Dictionary part
 169+ EA7A             >
 169+ EA7A             >                org     Dict_Ptr
 169+ 3649             >
 169+ 3649 78 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 169+ 364B             >
 169+ 364B             >BLK_INIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 169+ 364B CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 169+ 364E             >
 169+ 364E             >
 169+ 364E             >                endif           ; ok        // for other definitions it "points" the correct handler
 169+ 364E             >                // Use of "; ok" to suppress "warning[fwdref]"
 169+ 364E             >
 169+ 364E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 170+ 364E 68 3F 49 26                  dw  BLK_FH, FETCH, F_CLOSE, DROP
 170+ 3652 A3 23 C4 25
 171+ 3656 6F 3F 74 25                  dw  BLK_FNAME, ONE_PLUS
 172+ 365A 64 28 54 27                  dw  HERE, THREE, F_OPEN         // open for update (read+write)
 172+ 365E 0B 24
 173+ 3660                          //    dw  LIT, $2C, QERROR
 174+ 3660
 175+ 3660 8F 20                        dw  ZBRANCH
 176+ 3662 0E 00                        dw  Blk_Init_Endif - $
 177+ 3664
 178+ 3664 3D 20 CF FF                  dw  LIT, $FFCF                  // PATCH op-code RST $08, $FF
 179+ 3668 3D 20 4F 34                  dw  LIT, Exit_with_error
 180+ 366C 53 26                        dw  STORE
 181+ 366E
 182+ 366E 0D 34                        dw  BASIC
 183+ 3670              Blk_Init_Endif:
 184+ 3670
 185+ 3670 68 3F 53 26                  dw  BLK_FH, STORE
 186+ 3674 09 25                        dw  EXIT
 187+ 3676
 188+ 3676              //  ______________________________________________________________________
 189+ 3676              //
 190+ 3676              // #sec
 191+ 3676              // number of 512-Byte "sectors" available on thie sysstem.
 192+ 3676              // it adds up to 16 MByte of data that can be used as source or pool for almost anything.
 193+ 3676
 194+ 3676                              Constant_Def NSEC , "#SEC", 32767
 194+ 3676             >                New_Def  NSEC, "#SEC", Constant_Ptr, is_normal
 194+ 3676             >
 194+ 3676             >Dict_Ptr        defl    $
 194+ 3676             >
 194+ 3676             >//              ______________________________________________________________________
 194+ 3676             >//              Heap part
 194+ 3676             >
 194+ 3676             >
 194+ 3676             >                org     (Heap_Ptr & $1FFF) + $E000
 194+ EA7A             >
 194+ EA7A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 194+ EA7A             >Latest_Definition defl  Heap_Ptr
 194+ EA7A             >
 194+ EA7A             >                // dummy db directives used to calculate length of namec
 194+ EA7A 23 53 45 43 >                db      "#SEC"
 194+ EA7E             >len_NFA         defl    $ - temp_NFA
 194+ EA7E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 194+ EA7A             >
 194+ EA7A 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 194+ EA7B 23 53 45 43 >                db      "#SEC"               // name string in 7-bit ascii, but
 194+ EA7F             >                org     $-1                 // alter last byte of Name just above to set
 194+ EA7E C3          >                db      {b $} | END_BIT     // msb as name end
 194+ EA7F             >
 194+ EA7F 6D 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 194+ EA81             >Prev_Ptr        defl    Heap_Ptr
 194+ EA81             >
 194+ EA81             >mirror_Ptr      defl    $
 194+ EA81             >
 194+ EA81 78 36       >                dw      Dict_Ptr + 2        // xt
 194+ EA83             >Heap_Ptr        defl    $ - $E000           // save current HP
 194+ EA83             >
 194+ EA83             >Current_HP      defl  $ - $E000             // used to set HP once!
 194+ EA83             >
 194+ EA83             >//              ______________________________________________________________________
 194+ EA83             >//              Dictionary part
 194+ EA83             >
 194+ EA83             >                org     Dict_Ptr
 194+ 3676             >
 194+ 3676 81 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 194+ 3678             >
 194+ 3678             >NSEC:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 194+ 3678 CD 13 27    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 194+ 367B             >
 194+ 367B             >
 194+ 367B             >                endif           ; ok        // for other definitions it "points" the correct handler
 194+ 367B             >                // Use of "; ok" to suppress "warning[fwdref]"
 194+ 367B             >
 194+ 367B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 194+ 367B FF 7F       >                dw      32767
 195+ 367D
 196+ 367D              //  ______________________________________________________________________
 197+ 367D
 198+ 367D
# file closed: C:\Zx\CSpect\Projects\vForth17_DOT/source/next-opt1.asm
 143  367D                              include "L3.asm"
# file opened: C:\Zx\CSpect\Projects\vForth17_DOT/source/L3.asm
   1+ 367D              //  ______________________________________________________________________
   2+ 367D              //
   3+ 367D              //  L3.asm
   4+ 367D              //
   5+ 367D              //  Continuation of L2.asm
   6+ 367D              //  I/O Block definitions
   7+ 367D              //  ______________________________________________________________________
   8+ 367D
   9+ 367D
  10+ 367D              //  ______________________________________________________________________
  11+ 367D              //
  12+ 367D              // r/w          a n f --
  13+ 367D              // read/write block n depending on flag f, true-flag means read, false-flag means write.
  14+ 367D                              Colon_Def READ_WRITE, "R/W", is_normal
  14+ 367D             >                New_Def  READ_WRITE, "R/W", Enter_Ptr, is_normal ; ok
  14+ 367D             >
  14+ 367D             >Dict_Ptr        defl    $
  14+ 367D             >
  14+ 367D             >//              ______________________________________________________________________
  14+ 367D             >//              Heap part
  14+ 367D             >
  14+ 367D             >
  14+ 367D             >                org     (Heap_Ptr & $1FFF) + $E000
  14+ EA83             >
  14+ EA83             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  14+ EA83             >Latest_Definition defl  Heap_Ptr
  14+ EA83             >
  14+ EA83             >                // dummy db directives used to calculate length of namec
  14+ EA83 52 2F 57    >                db      "R/W"
  14+ EA86             >len_NFA         defl    $ - temp_NFA
  14+ EA86             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  14+ EA83             >
  14+ EA83 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  14+ EA84 52 2F 57    >                db      "R/W"               // name string in 7-bit ascii, but
  14+ EA87             >                org     $-1                 // alter last byte of Name just above to set
  14+ EA86 D7          >                db      {b $} | END_BIT     // msb as name end
  14+ EA87             >
  14+ EA87 7A 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  14+ EA89             >Prev_Ptr        defl    Heap_Ptr
  14+ EA89             >
  14+ EA89             >mirror_Ptr      defl    $
  14+ EA89             >
  14+ EA89 7F 36       >                dw      Dict_Ptr + 2        // xt
  14+ EA8B             >Heap_Ptr        defl    $ - $E000           // save current HP
  14+ EA8B             >
  14+ EA8B             >Current_HP      defl  $ - $E000             // used to set HP once!
  14+ EA8B             >
  14+ EA8B             >//              ______________________________________________________________________
  14+ EA8B             >//              Dictionary part
  14+ EA8B             >
  14+ EA8B             >                org     Dict_Ptr
  14+ 367D             >
  14+ 367D 89 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  14+ 367F             >
  14+ 367F             >READ_WRITE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  14+ 367F CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  14+ 3682             >
  14+ 3682             >
  14+ 3682             >                endif           ; ok        // for other definitions it "points" the correct handler
  14+ 3682             >                // Use of "; ok" to suppress "warning[fwdref]"
  14+ 3682             >
  14+ 3682             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  15+ 3682 13 25                        dw      TO_R                    // >r
  16+ 3684 7B 25                        dw      ONE_SUBTRACT            // 1-
  17+ 3686 DF 25 40 25                  dw      DUP, ZLESS              // dup 0<
  18+ 368A BB 25 78 36                  dw      OVER, NSEC              // over #sec
  19+ 368E 7B 25 D5 28                  dw      ONE_SUBTRACT, GREATER   // 1- >
  20+ 3692 D8 24                        dw      OR_OP                   // or
  21+ 3694 3D 20 06 00                  dw      LIT, 6, QERROR          // 6 ?error
  21+ 3698 98 2A
  22+ 369A 1E 25                        dw      R_TO                    // r>
  23+ 369C                                                              // if
  24+ 369C 8F 20                        dw      ZBRANCH
  25+ 369E 08 00                        dw      Read_Write_Else - $
  26+ 36A0 19 36                        dw          BLK_READ            //      blk-read
  27+ 36A2 82 20                        dw      BRANCH
  28+ 36A4 04 00                        dw      Read_Write_Endif - $
  29+ 36A6              Read_Write_Else:                                // else
  30+ 36A6 32 36                        dw          BLK_WRITE           //      blk-write
  31+ 36A8              Read_Write_Endif:                               // endif
  32+ 36A8 09 25                        dw      EXIT                    // ;
  33+ 36AA
  34+ 36AA
  35+ 36AA              //  ______________________________________________________________________
  36+ 36AA              //
  37+ 36AA              // +buf        a1 -- a2 f
  38+ 36AA              // advences to next buffer, cyclically rotating along them
  39+ 36AA                              Colon_Def PBUF, "+BUF", is_normal
  39+ 36AA             >                New_Def  PBUF, "+BUF", Enter_Ptr, is_normal ; ok
  39+ 36AA             >
  39+ 36AA             >Dict_Ptr        defl    $
  39+ 36AA             >
  39+ 36AA             >//              ______________________________________________________________________
  39+ 36AA             >//              Heap part
  39+ 36AA             >
  39+ 36AA             >
  39+ 36AA             >                org     (Heap_Ptr & $1FFF) + $E000
  39+ EA8B             >
  39+ EA8B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  39+ EA8B             >Latest_Definition defl  Heap_Ptr
  39+ EA8B             >
  39+ EA8B             >                // dummy db directives used to calculate length of namec
  39+ EA8B 2B 42 55 46 >                db      "+BUF"
  39+ EA8F             >len_NFA         defl    $ - temp_NFA
  39+ EA8F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  39+ EA8B             >
  39+ EA8B 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  39+ EA8C 2B 42 55 46 >                db      "+BUF"               // name string in 7-bit ascii, but
  39+ EA90             >                org     $-1                 // alter last byte of Name just above to set
  39+ EA8F C6          >                db      {b $} | END_BIT     // msb as name end
  39+ EA90             >
  39+ EA90 83 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  39+ EA92             >Prev_Ptr        defl    Heap_Ptr
  39+ EA92             >
  39+ EA92             >mirror_Ptr      defl    $
  39+ EA92             >
  39+ EA92 AC 36       >                dw      Dict_Ptr + 2        // xt
  39+ EA94             >Heap_Ptr        defl    $ - $E000           // save current HP
  39+ EA94             >
  39+ EA94             >Current_HP      defl  $ - $E000             // used to set HP once!
  39+ EA94             >
  39+ EA94             >//              ______________________________________________________________________
  39+ EA94             >//              Dictionary part
  39+ EA94             >
  39+ EA94             >                org     Dict_Ptr
  39+ 36AA             >
  39+ 36AA 92 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  39+ 36AC             >
  39+ 36AC             >PBUF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  39+ 36AC CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  39+ 36AF             >
  39+ 36AF             >
  39+ 36AF             >                endif           ; ok        // for other definitions it "points" the correct handler
  39+ 36AF             >                // Use of "; ok" to suppress "warning[fwdref]"
  39+ 36AF             >
  39+ 36AF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  40+ 36AF 3D 20 04 02                  dw      LIT, 516, PLUS          // 516 +
  40+ 36B3 5B 25
  41+ 36B5 DF 25 CE 27                  dw      DUP, LIMIT, FETCH       // dup limit @
  41+ 36B9 49 26
  42+ 36BB AF 28                        dw      EQUALS                  // =
  43+ 36BD                                                              // if
  44+ 36BD 8F 20                        dw      ZBRANCH
  45+ 36BF 08 00                        dw      PBuf_Endif - $
  46+ 36C1 C4 25                        dw          DROP                //      drop
  47+ 36C3 C8 27 49 26                  dw          FIRST, FETCH        //      first @
  48+ 36C7              PBuf_Endif:                                     // endif
  49+ 36C7 DF 25 3A 28                  dw      DUP, PREV, FETCH        // dup prev @
  49+ 36CB 49 26
  50+ 36CD A3 28                        dw      SUBTRACT                // -
  51+ 36CF 09 25                        dw      EXIT                    // ;
  52+ 36D1
  53+ 36D1              //  ______________________________________________________________________
  54+ 36D1              //
  55+ 36D1              // update       --
  56+ 36D1              // mark the last used block to be written to disk
  57+ 36D1                              Colon_Def UPDATE, "UPDATE", is_normal
  57+ 36D1             >                New_Def  UPDATE, "UPDATE", Enter_Ptr, is_normal ; ok
  57+ 36D1             >
  57+ 36D1             >Dict_Ptr        defl    $
  57+ 36D1             >
  57+ 36D1             >//              ______________________________________________________________________
  57+ 36D1             >//              Heap part
  57+ 36D1             >
  57+ 36D1             >
  57+ 36D1             >                org     (Heap_Ptr & $1FFF) + $E000
  57+ EA94             >
  57+ EA94             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  57+ EA94             >Latest_Definition defl  Heap_Ptr
  57+ EA94             >
  57+ EA94             >                // dummy db directives used to calculate length of namec
  57+ EA94 55 50 44 41 >                db      "UPDATE"
  57+ EA98 54 45       >
  57+ EA9A             >len_NFA         defl    $ - temp_NFA
  57+ EA9A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  57+ EA94             >
  57+ EA94 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  57+ EA95 55 50 44 41 >                db      "UPDATE"               // name string in 7-bit ascii, but
  57+ EA99 54 45       >
  57+ EA9B             >                org     $-1                 // alter last byte of Name just above to set
  57+ EA9A C5          >                db      {b $} | END_BIT     // msb as name end
  57+ EA9B             >
  57+ EA9B 8B 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  57+ EA9D             >Prev_Ptr        defl    Heap_Ptr
  57+ EA9D             >
  57+ EA9D             >mirror_Ptr      defl    $
  57+ EA9D             >
  57+ EA9D D3 36       >                dw      Dict_Ptr + 2        // xt
  57+ EA9F             >Heap_Ptr        defl    $ - $E000           // save current HP
  57+ EA9F             >
  57+ EA9F             >Current_HP      defl  $ - $E000             // used to set HP once!
  57+ EA9F             >
  57+ EA9F             >//              ______________________________________________________________________
  57+ EA9F             >//              Dictionary part
  57+ EA9F             >
  57+ EA9F             >                org     Dict_Ptr
  57+ 36D1             >
  57+ 36D1 9D 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  57+ 36D3             >
  57+ 36D3             >UPDATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  57+ 36D3 CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  57+ 36D6             >
  57+ 36D6             >
  57+ 36D6             >                endif           ; ok        // for other definitions it "points" the correct handler
  57+ 36D6             >                // Use of "; ok" to suppress "warning[fwdref]"
  57+ 36D6             >
  57+ 36D6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  58+ 36D6 3A 28 49 26                  dw      PREV, FETCH, FETCH      // prev @ @
  58+ 36DA 49 26
  59+ 36DC 3D 20 00 80                  dw      LIT, $8000, OR_OP       // $8000, or
  59+ 36E0 D8 24
  60+ 36E2 3A 28 49 26                  dw      PREV, FETCH, STORE      // prev @ !
  60+ 36E6 53 26
  61+ 36E8 09 25                        dw      EXIT                    // ;
  62+ 36EA
  63+ 36EA
  64+ 36EA              //  ______________________________________________________________________
  65+ 36EA              //
  66+ 36EA              // empty-buffers --
  67+ 36EA                              Colon_Def EMPTY_BUFFERS, "EMPTY-BUFFERS", is_normal
  67+ 36EA             >                New_Def  EMPTY_BUFFERS, "EMPTY-BUFFERS", Enter_Ptr, is_normal ; ok
  67+ 36EA             >
  67+ 36EA             >Dict_Ptr        defl    $
  67+ 36EA             >
  67+ 36EA             >//              ______________________________________________________________________
  67+ 36EA             >//              Heap part
  67+ 36EA             >
  67+ 36EA             >
  67+ 36EA             >                org     (Heap_Ptr & $1FFF) + $E000
  67+ EA9F             >
  67+ EA9F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  67+ EA9F             >Latest_Definition defl  Heap_Ptr
  67+ EA9F             >
  67+ EA9F             >                // dummy db directives used to calculate length of namec
  67+ EA9F 45 4D 50 54 >                db      "EMPTY-BUFFERS"
  67+ EAA3 59 2D 42 55 >
  67+ EAA7 46 46 45 52 >
  67+ EAAB 53          >
  67+ EAAC             >len_NFA         defl    $ - temp_NFA
  67+ EAAC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  67+ EA9F             >
  67+ EA9F 8D          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  67+ EAA0 45 4D 50 54 >                db      "EMPTY-BUFFERS"               // name string in 7-bit ascii, but
  67+ EAA4 59 2D 42 55 >
  67+ EAA8 46 46 45 52 >
  67+ EAAC 53          >
  67+ EAAD             >                org     $-1                 // alter last byte of Name just above to set
  67+ EAAC D3          >                db      {b $} | END_BIT     // msb as name end
  67+ EAAD             >
  67+ EAAD 94 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  67+ EAAF             >Prev_Ptr        defl    Heap_Ptr
  67+ EAAF             >
  67+ EAAF             >mirror_Ptr      defl    $
  67+ EAAF             >
  67+ EAAF EC 36       >                dw      Dict_Ptr + 2        // xt
  67+ EAB1             >Heap_Ptr        defl    $ - $E000           // save current HP
  67+ EAB1             >
  67+ EAB1             >Current_HP      defl  $ - $E000             // used to set HP once!
  67+ EAB1             >
  67+ EAB1             >//              ______________________________________________________________________
  67+ EAB1             >//              Dictionary part
  67+ EAB1             >
  67+ EAB1             >                org     Dict_Ptr
  67+ 36EA             >
  67+ 36EA AF 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  67+ 36EC             >
  67+ 36EC             >EMPTY_BUFFERS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  67+ 36EC CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  67+ 36EF             >
  67+ 36EF             >
  67+ 36EF             >                endif           ; ok        // for other definitions it "points" the correct handler
  67+ 36EF             >                // Use of "; ok" to suppress "warning[fwdref]"
  67+ 36EF             >
  67+ 36EF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  68+ 36EF C8 27 49 26                  dw      FIRST, FETCH            // first @
  69+ 36F3 CE 27 49 26                  dw      LIMIT, FETCH            // limit @
  70+ 36F7 BB 25 A3 28                  dw      OVER, SUBTRACT, ERASE   // over - erase
  70+ 36FB 40 2D
  71+ 36FD 09 25                        dw      EXIT                    // ;
  72+ 36FF
  73+ 36FF              //  ______________________________________________________________________
  74+ 36FF              //
  75+ 36FF              // buffer       n -- a
  76+ 36FF              // read block n and gives the address to a buffer
  77+ 36FF              // any block previously inside the buffer, if modified, is rewritten to
  78+ 36FF              // disk before reading the block n.
  79+ 36FF
  80+ 36FF                              Colon_Def BUFFER, "BUFFER", is_normal
  80+ 36FF             >                New_Def  BUFFER, "BUFFER", Enter_Ptr, is_normal ; ok
  80+ 36FF             >
  80+ 36FF             >Dict_Ptr        defl    $
  80+ 36FF             >
  80+ 36FF             >//              ______________________________________________________________________
  80+ 36FF             >//              Heap part
  80+ 36FF             >
  80+ 36FF             >
  80+ 36FF             >                org     (Heap_Ptr & $1FFF) + $E000
  80+ EAB1             >
  80+ EAB1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  80+ EAB1             >Latest_Definition defl  Heap_Ptr
  80+ EAB1             >
  80+ EAB1             >                // dummy db directives used to calculate length of namec
  80+ EAB1 42 55 46 46 >                db      "BUFFER"
  80+ EAB5 45 52       >
  80+ EAB7             >len_NFA         defl    $ - temp_NFA
  80+ EAB7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  80+ EAB1             >
  80+ EAB1 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  80+ EAB2 42 55 46 46 >                db      "BUFFER"               // name string in 7-bit ascii, but
  80+ EAB6 45 52       >
  80+ EAB8             >                org     $-1                 // alter last byte of Name just above to set
  80+ EAB7 D2          >                db      {b $} | END_BIT     // msb as name end
  80+ EAB8             >
  80+ EAB8 9F 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  80+ EABA             >Prev_Ptr        defl    Heap_Ptr
  80+ EABA             >
  80+ EABA             >mirror_Ptr      defl    $
  80+ EABA             >
  80+ EABA 01 37       >                dw      Dict_Ptr + 2        // xt
  80+ EABC             >Heap_Ptr        defl    $ - $E000           // save current HP
  80+ EABC             >
  80+ EABC             >Current_HP      defl  $ - $E000             // used to set HP once!
  80+ EABC             >
  80+ EABC             >//              ______________________________________________________________________
  80+ EABC             >//              Dictionary part
  80+ EABC             >
  80+ EABC             >                org     Dict_Ptr
  80+ 36FF             >
  80+ 36FF BA 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  80+ 3701             >
  80+ 3701             >BUFFER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  80+ 3701 CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  80+ 3704             >
  80+ 3704             >
  80+ 3704             >                endif           ; ok        // for other definitions it "points" the correct handler
  80+ 3704             >                // Use of "; ok" to suppress "warning[fwdref]"
  80+ 3704             >
  80+ 3704             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  81+ 3704 34 28 49 26                  dw      USED, FETCH             // used @
  82+ 3708 DF 25 13 25                  dw      DUP, TO_R               // dup >r
  83+ 370C                                                              // begin
  84+ 370C              Buffer_Begin:
  85+ 370C AC 36                        dw          PBUF                //      +buf
  86+ 370E                                                              // until
  87+ 370E 8F 20                        dw      ZBRANCH
  88+ 3710 FC FF                        dw      Buffer_Begin - $
  89+ 3712 34 28 53 26                  dw      USED, STORE             // used !
  90+ 3716 29 25 49 26                  dw      R_OP, FETCH, ZLESS      // r @ 0<
  90+ 371A 40 25
  91+ 371C                                                              // if
  92+ 371C 8F 20                        dw      ZBRANCH
  93+ 371E 14 00                        dw      Buffer_Endif - $
  94+ 3720 29 25 8A 25                  dw          R_OP, CELL_PLUS     //      r cell+
  95+ 3724 29 25 49 26                  dw          R_OP, FETCH         //      r fetch
  96+ 3728 3D 20 FF 7F                  dw          LIT, $7FFF          //      7FFF
  97+ 372C C9 24                        dw          AND_OP              //      and
  98+ 372E 3F 27 7F 36                  dw          ZERO, READ_WRITE    //      0 r/w
  99+ 3732              Buffer_Endif:                                   // endif
 100+ 3732 29 25 53 26                  dw      R_OP, STORE             // r !
 101+ 3736 29 25 3A 28                  dw      R_OP, PREV, STORE       // r prev !
 101+ 373A 53 26
 102+ 373C 1E 25 8A 25                  dw      R_TO, CELL_PLUS         // r> cell+
 103+ 3740 09 25                        dw      EXIT                    // ;
 104+ 3742
 105+ 3742              //  ______________________________________________________________________
 106+ 3742              //
 107+ 3742              // block        n -- a
 108+ 3742              // Leaves the buffer address that contains the block n.
 109+ 3742              // If the block is not already present, it will be loaded from disk
 110+ 3742              // The block previously inside the buffer, if modified, is rewritten to
 111+ 3742              // disk before reading the block n.
 112+ 3742              // See also BUFFER, R/W, UPDATE, FLUSH.
 113+ 3742
 114+ 3742                              Colon_Def BLOCK, "BLOCK", is_normal
 114+ 3742             >                New_Def  BLOCK, "BLOCK", Enter_Ptr, is_normal ; ok
 114+ 3742             >
 114+ 3742             >Dict_Ptr        defl    $
 114+ 3742             >
 114+ 3742             >//              ______________________________________________________________________
 114+ 3742             >//              Heap part
 114+ 3742             >
 114+ 3742             >
 114+ 3742             >                org     (Heap_Ptr & $1FFF) + $E000
 114+ EABC             >
 114+ EABC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 114+ EABC             >Latest_Definition defl  Heap_Ptr
 114+ EABC             >
 114+ EABC             >                // dummy db directives used to calculate length of namec
 114+ EABC 42 4C 4F 43 >                db      "BLOCK"
 114+ EAC0 4B          >
 114+ EAC1             >len_NFA         defl    $ - temp_NFA
 114+ EAC1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 114+ EABC             >
 114+ EABC 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 114+ EABD 42 4C 4F 43 >                db      "BLOCK"               // name string in 7-bit ascii, but
 114+ EAC1 4B          >
 114+ EAC2             >                org     $-1                 // alter last byte of Name just above to set
 114+ EAC1 CB          >                db      {b $} | END_BIT     // msb as name end
 114+ EAC2             >
 114+ EAC2 B1 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 114+ EAC4             >Prev_Ptr        defl    Heap_Ptr
 114+ EAC4             >
 114+ EAC4             >mirror_Ptr      defl    $
 114+ EAC4             >
 114+ EAC4 44 37       >                dw      Dict_Ptr + 2        // xt
 114+ EAC6             >Heap_Ptr        defl    $ - $E000           // save current HP
 114+ EAC6             >
 114+ EAC6             >Current_HP      defl  $ - $E000             // used to set HP once!
 114+ EAC6             >
 114+ EAC6             >//              ______________________________________________________________________
 114+ EAC6             >//              Dictionary part
 114+ EAC6             >
 114+ EAC6             >                org     Dict_Ptr
 114+ 3742             >
 114+ 3742 C4 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 114+ 3744             >
 114+ 3744             >BLOCK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 114+ 3744 CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 114+ 3747             >
 114+ 3747             >
 114+ 3747             >                endif           ; ok        // for other definitions it "points" the correct handler
 114+ 3747             >                // Use of "; ok" to suppress "warning[fwdref]"
 114+ 3747             >
 114+ 3747             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 115+ 3747                          //  dw      OFFSET, FETCH           // offset @
 116+ 3747                          //  dw      PLUS
 117+ 3747 13 25                        dw      TO_R                    // + >r
 118+ 3749 3A 28 49 26                  dw      PREV, FETCH             // prev @
 119+ 374D DF 25 49 26                  dw      DUP, FETCH              // dup @
 120+ 3751 29 25 A3 28                  dw      R_OP, SUBTRACT          // r -
 121+ 3755 DF 25 5B 25                  dw      DUP, PLUS               // dup +  ( trick: check equality without most significant bit )
 122+ 3759                                                              // if
 123+ 3759 8F 20                        dw        ZBRANCH
 124+ 375B 32 00                        dw        Block_Endif_1 - $
 125+ 375D              Block_Begin:                                    //      begin
 126+ 375D AC 36 2E 25                  dw          PBUF, ZEQUAL        //          +buf 0
 127+ 3761                                                              //          if
 128+ 3761 8F 20                        dw          ZBRANCH
 129+ 3763 12 00                        dw          Block_Endif_2 - $
 130+ 3765 C4 25                        dw              DROP            //              drop
 131+ 3767 29 25 01 37                  dw              R_OP, BUFFER    //              r buffer
 132+ 376B DF 25                        dw              DUP             //              dup
 133+ 376D 29 25 46 27                  dw              R_OP, ONE       //              r 1
 134+ 3771 7F 36                        dw              READ_WRITE      //              r/w
 135+ 3773 96 25                        dw              TWO_MINUS       //              2-
 136+ 3775              Block_Endif_2:                                  //          endif
 137+ 3775 DF 25 49 26                  dw          DUP, FETCH, R_OP    //          dup @ r
 137+ 3779 29 25
 138+ 377B A3 28 DF 25                  dw          SUBTRACT, DUP       //          - dup
 139+ 377F 5B 25 2E 25                  dw          PLUS, ZEQUAL        //          + 0=
 140+ 3783                                                              //      until
 141+ 3783 8F 20                        dw        ZBRANCH
 142+ 3785 D8 FF                        dw        Block_Begin - $
 143+ 3787 DF 25 3A 28                  dw        DUP, PREV, STORE      //      dup prev !
 143+ 378B 53 26
 144+ 378D              Block_Endif_1:                                  // endif
 145+ 378D 1E 25 C4 25                  dw      R_TO, DROP, CELL_PLUS   // r> drop cell+
 145+ 3791 8A 25
 146+ 3793 09 25                        dw      EXIT                    // ;
 147+ 3795
 148+ 3795              //  ______________________________________________________________________
 149+ 3795              //
 150+ 3795              // #buff        -- n
 151+ 3795              // number of buffers available. must be the difference between LIMIT and FIRST divided by 516
 152+ 3795                              Constant_Def NBUFF,   "#BUFF", 7
 152+ 3795             >                New_Def  NBUFF, "#BUFF", Constant_Ptr, is_normal
 152+ 3795             >
 152+ 3795             >Dict_Ptr        defl    $
 152+ 3795             >
 152+ 3795             >//              ______________________________________________________________________
 152+ 3795             >//              Heap part
 152+ 3795             >
 152+ 3795             >
 152+ 3795             >                org     (Heap_Ptr & $1FFF) + $E000
 152+ EAC6             >
 152+ EAC6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 152+ EAC6             >Latest_Definition defl  Heap_Ptr
 152+ EAC6             >
 152+ EAC6             >                // dummy db directives used to calculate length of namec
 152+ EAC6 23 42 55 46 >                db      "#BUFF"
 152+ EACA 46          >
 152+ EACB             >len_NFA         defl    $ - temp_NFA
 152+ EACB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 152+ EAC6             >
 152+ EAC6 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 152+ EAC7 23 42 55 46 >                db      "#BUFF"               // name string in 7-bit ascii, but
 152+ EACB 46          >
 152+ EACC             >                org     $-1                 // alter last byte of Name just above to set
 152+ EACB C6          >                db      {b $} | END_BIT     // msb as name end
 152+ EACC             >
 152+ EACC BC 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 152+ EACE             >Prev_Ptr        defl    Heap_Ptr
 152+ EACE             >
 152+ EACE             >mirror_Ptr      defl    $
 152+ EACE             >
 152+ EACE 97 37       >                dw      Dict_Ptr + 2        // xt
 152+ EAD0             >Heap_Ptr        defl    $ - $E000           // save current HP
 152+ EAD0             >
 152+ EAD0             >Current_HP      defl  $ - $E000             // used to set HP once!
 152+ EAD0             >
 152+ EAD0             >//              ______________________________________________________________________
 152+ EAD0             >//              Dictionary part
 152+ EAD0             >
 152+ EAD0             >                org     Dict_Ptr
 152+ 3795             >
 152+ 3795 CE 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 152+ 3797             >
 152+ 3797             >NBUFF:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 152+ 3797 CD 13 27    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 152+ 379A             >
 152+ 379A             >
 152+ 379A             >                endif           ; ok        // for other definitions it "points" the correct handler
 152+ 379A             >                // Use of "; ok" to suppress "warning[fwdref]"
 152+ 379A             >
 152+ 379A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 152+ 379A 07 00       >                dw      7
 153+ 379C
 154+ 379C              //  ______________________________________________________________________
 155+ 379C              //
 156+ 379C              // flush        --
 157+ 379C                              Colon_Def FLUSH, "FLUSH", is_normal
 157+ 379C             >                New_Def  FLUSH, "FLUSH", Enter_Ptr, is_normal ; ok
 157+ 379C             >
 157+ 379C             >Dict_Ptr        defl    $
 157+ 379C             >
 157+ 379C             >//              ______________________________________________________________________
 157+ 379C             >//              Heap part
 157+ 379C             >
 157+ 379C             >
 157+ 379C             >                org     (Heap_Ptr & $1FFF) + $E000
 157+ EAD0             >
 157+ EAD0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 157+ EAD0             >Latest_Definition defl  Heap_Ptr
 157+ EAD0             >
 157+ EAD0             >                // dummy db directives used to calculate length of namec
 157+ EAD0 46 4C 55 53 >                db      "FLUSH"
 157+ EAD4 48          >
 157+ EAD5             >len_NFA         defl    $ - temp_NFA
 157+ EAD5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 157+ EAD0             >
 157+ EAD0 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 157+ EAD1 46 4C 55 53 >                db      "FLUSH"               // name string in 7-bit ascii, but
 157+ EAD5 48          >
 157+ EAD6             >                org     $-1                 // alter last byte of Name just above to set
 157+ EAD5 C8          >                db      {b $} | END_BIT     // msb as name end
 157+ EAD6             >
 157+ EAD6 C6 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 157+ EAD8             >Prev_Ptr        defl    Heap_Ptr
 157+ EAD8             >
 157+ EAD8             >mirror_Ptr      defl    $
 157+ EAD8             >
 157+ EAD8 9E 37       >                dw      Dict_Ptr + 2        // xt
 157+ EADA             >Heap_Ptr        defl    $ - $E000           // save current HP
 157+ EADA             >
 157+ EADA             >Current_HP      defl  $ - $E000             // used to set HP once!
 157+ EADA             >
 157+ EADA             >//              ______________________________________________________________________
 157+ EADA             >//              Dictionary part
 157+ EADA             >
 157+ EADA             >                org     Dict_Ptr
 157+ 379C             >
 157+ 379C D8 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 157+ 379E             >
 157+ 379E             >FLUSH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 157+ 379E CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 157+ 37A1             >
 157+ 37A1             >
 157+ 37A1             >                endif           ; ok        // for other definitions it "points" the correct handler
 157+ 37A1             >                // Use of "; ok" to suppress "warning[fwdref]"
 157+ 37A1             >
 157+ 37A1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 158+ 37A1 97 37 74 25                  dw      NBUFF, ONE_PLUS, ZERO   // #buff 1+ 0
 158+ 37A5 3F 27
 159+ 37A7              Flush_Do:                                       // do
 160+ 37A7 CC 20                        dw      C_DO
 161+ 37A9 3F 27 01 37                  dw      ZERO, BUFFER, DROP      //      0 buffer drop
 161+ 37AD C4 25
 162+ 37AF                                                              // loop
 163+ 37AF 7A 20 F8 FF                  dw      C_LOOP, Flush_Do - $
 164+ 37B3 68 3F 49 26                  dw      BLK_FH, FETCH           // blk-fh @     ( ZX-Next dependance )
 165+ 37B7 B0 23 C4 25                  dw      F_SYNC, DROP            // f_sync drop
 166+ 37BB 09 25                        dw      EXIT                    // exit
 167+ 37BD
 168+ 37BD              //  ______________________________________________________________________
 169+ 37BD              //
 170+ 37BD              // f_getline    a m fh -- n
 171+ 37BD              // Given an open filehandle read next line (terminated with $0D or $0A)
 172+ 37BD              // Address a is left for subsequent processing
 173+ 37BD              // and n as the actual number of byte read, that is the length of line
 174+ 37BD                              Colon_Def F_GETLINE, "F_GETLINE", is_normal
 174+ 37BD             >                New_Def  F_GETLINE, "F_GETLINE", Enter_Ptr, is_normal ; ok
 174+ 37BD             >
 174+ 37BD             >Dict_Ptr        defl    $
 174+ 37BD             >
 174+ 37BD             >//              ______________________________________________________________________
 174+ 37BD             >//              Heap part
 174+ 37BD             >
 174+ 37BD             >
 174+ 37BD             >                org     (Heap_Ptr & $1FFF) + $E000
 174+ EADA             >
 174+ EADA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 174+ EADA             >Latest_Definition defl  Heap_Ptr
 174+ EADA             >
 174+ EADA             >                // dummy db directives used to calculate length of namec
 174+ EADA 46 5F 47 45 >                db      "F_GETLINE"
 174+ EADE 54 4C 49 4E >
 174+ EAE2 45          >
 174+ EAE3             >len_NFA         defl    $ - temp_NFA
 174+ EAE3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 174+ EADA             >
 174+ EADA 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 174+ EADB 46 5F 47 45 >                db      "F_GETLINE"               // name string in 7-bit ascii, but
 174+ EADF 54 4C 49 4E >
 174+ EAE3 45          >
 174+ EAE4             >                org     $-1                 // alter last byte of Name just above to set
 174+ EAE3 C5          >                db      {b $} | END_BIT     // msb as name end
 174+ EAE4             >
 174+ EAE4 D0 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 174+ EAE6             >Prev_Ptr        defl    Heap_Ptr
 174+ EAE6             >
 174+ EAE6             >mirror_Ptr      defl    $
 174+ EAE6             >
 174+ EAE6 BF 37       >                dw      Dict_Ptr + 2        // xt
 174+ EAE8             >Heap_Ptr        defl    $ - $E000           // save current HP
 174+ EAE8             >
 174+ EAE8             >Current_HP      defl  $ - $E000             // used to set HP once!
 174+ EAE8             >
 174+ EAE8             >//              ______________________________________________________________________
 174+ EAE8             >//              Dictionary part
 174+ EAE8             >
 174+ EAE8             >                org     Dict_Ptr
 174+ 37BD             >
 174+ 37BD E6 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 174+ 37BF             >
 174+ 37BF             >F_GETLINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 174+ 37BF CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 174+ 37C2             >
 174+ 37C2             >
 174+ 37C2             >                endif           ; ok        // for other definitions it "points" the correct handler
 174+ 37C2             >                // Use of "; ok" to suppress "warning[fwdref]"
 174+ 37C2             >
 174+ 37C2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 175+ 37C2 13 25                        dw      TO_R                    // >r               ( a  m  )     \  fh
 176+ 37C4 CF 25                        dw      TUCK                    // tuck             ( m a m )
 177+ 37C6 29 25 BD 23                  dw      R_OP, F_FGETPOS         // r f_fgetpos      ( m a m d f )
 178+ 37CA 3D 20 23 00                  dw      LIT, 35, QERROR         // 44 ?error        ( m a m d )
 178+ 37CE 98 2A
 179+ 37D0
 180+ 37D0 1A 26 BB 25                  dw      TWO_SWAP, OVER          // 2swap over       ( m d a m )
 181+ 37D4 74 25 D8 25                  dw      ONE_PLUS, SWAP          // 1+ swap          ( m d a a+1 m )
 182+ 37D8
 183+ 37D8 29 25 D7 23                  dw      R_OP, F_READ            // r f_read         ( m d a n f )
 184+ 37DC 3D 20 23 00                  dw      LIT, 35, QERROR         // 46 ?error        ( m d a n )
 184+ 37E0 98 2A
 185+ 37E2                                                              // if ( at least 1 chr was read )  \  fh
 186+ 37E2 8F 20                        dw      ZBRANCH
 187+ 37E4 3C 00                        dw      FGetline_Else - $
 188+ 37E6 3D 20 0A 00                  dw          LIT, 10, ENCLOSE    //      10 enclose       ( m d a x b x )
 188+ 37EA C0 21
 189+ 37EC C4 25 C9 25                  dw          DROP, NIP           //      drop nip         ( m d a b )
 190+ 37F0 D8 25                        dw          SWAP                //      drop swap        ( m d b a )
 191+ 37F2 3D 20 0D 00                  dw          LIT, 13, ENCLOSE    //      13 enclose       ( m d b a x c x )
 191+ 37F6 C0 21
 192+ 37F8 C4 25 C9 25                  dw          DROP, NIP           //      drop nip         ( m d b a c )
 193+ 37FC E6 25 E0 28                  dw          ROT, MIN            //      rot min          ( m d a n )
 194+ 3800 DF 25 52 28                  dw          DUP, SPAN, STORE    //      dup span !       ( m d a n )
 194+ 3804 53 26
 195+ 3806 DF 25 13 25                  dw          DUP, TO_R           //      dup >r           ( m d a n )      \ fh n
 196+ 380A 1A 26 1E 25                  dw          TWO_SWAP, R_TO      //      2swap r>         ( m a n d n )    \ fh
 197+ 380E 3F 27 65 25                  dw          ZERO, DPLUS         //      0 d+             ( m a n d+n )
 198+ 3812 1E 25 86 23                  dw          R_TO, F_SEEK        //      r> f_seek        ( m a n f )
 199+ 3816 3D 20 24 00                  dw          LIT, 36, QERROR     //      45 ?error        ( m a n )
 199+ 381A 98 2A
 200+ 381C                                                              // else
 201+ 381C 82 20                        dw      BRANCH
 202+ 381E 0C 00                        dw      FGetline_Endif - $
 203+ 3820              FGetline_Else:
 204+ 3820 1E 25                        dw          R_TO                //      r>              ( m d a fh )
 205+ 3822 1A 26 14 26                  dw          TWO_SWAP, TWO_DROP  //      2swap 2drop     ( m a fh )
 206+ 3826 C4 25 3F 27                  dw          DROP, ZERO          //      drop, 0         ( m a 0 )
 207+ 382A              FGetline_Endif:                                 // endif
 208+ 382A 13 25 DF 25                  dw      TO_R, DUP, DUP          // >r dup dup           ( m a a a )
 208+ 382E DF 25
 209+ 3830 74 25 D8 25                  dw      ONE_PLUS, SWAP          // 1+ swap              ( m a a+1 a )
 210+ 3834 29 25 4A 24                  dw      R_OP, CMOVE             // r cmove              ( m a )
 211+ 3838 27 26 5B 25                  dw      TWO_DUP, PLUS           // 2dup +               ( m a m+a )
 212+ 383C 3F 27 D8 25                  dw      ZERO, SWAP              // 0 swap
 213+ 3840 8E 25 53 26                  dw      CELL_MINUS,  STORE      // cell-  !             ( m a )
 214+ 3844 29 25 5B 25                  dw      R_OP, PLUS, ONE_SUBTRACT// r + 1-               ( m a+n1 )
 214+ 3848 7B 25
 215+ 384A D8 25 29 25                  dw      SWAP, R_OP, SUBTRACT    // swap r -             ( a+n+1 m-n )
 215+ 384E A3 28
 216+ 3850 4B 2D                        dw      BLANK                   // blank
 217+ 3852 1E 25                        dw      R_TO                    // r>                   ( n )
 218+ 3854 09 25                        dw      EXIT                    // ;
 219+ 3856
 220+ 3856              //  ______________________________________________________________________
 221+ 3856              //
 222+ 3856              // f_include    fh --
 223+ 3856              // Given a filehandle includes the source from file
 224+ 3856                              Colon_Def F_INCLUDE, "F_INCLUDE", is_normal
 224+ 3856             >                New_Def  F_INCLUDE, "F_INCLUDE", Enter_Ptr, is_normal ; ok
 224+ 3856             >
 224+ 3856             >Dict_Ptr        defl    $
 224+ 3856             >
 224+ 3856             >//              ______________________________________________________________________
 224+ 3856             >//              Heap part
 224+ 3856             >
 224+ 3856             >
 224+ 3856             >                org     (Heap_Ptr & $1FFF) + $E000
 224+ EAE8             >
 224+ EAE8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 224+ EAE8             >Latest_Definition defl  Heap_Ptr
 224+ EAE8             >
 224+ EAE8             >                // dummy db directives used to calculate length of namec
 224+ EAE8 46 5F 49 4E >                db      "F_INCLUDE"
 224+ EAEC 43 4C 55 44 >
 224+ EAF0 45          >
 224+ EAF1             >len_NFA         defl    $ - temp_NFA
 224+ EAF1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 224+ EAE8             >
 224+ EAE8 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 224+ EAE9 46 5F 49 4E >                db      "F_INCLUDE"               // name string in 7-bit ascii, but
 224+ EAED 43 4C 55 44 >
 224+ EAF1 45          >
 224+ EAF2             >                org     $-1                 // alter last byte of Name just above to set
 224+ EAF1 C5          >                db      {b $} | END_BIT     // msb as name end
 224+ EAF2             >
 224+ EAF2 DA 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 224+ EAF4             >Prev_Ptr        defl    Heap_Ptr
 224+ EAF4             >
 224+ EAF4             >mirror_Ptr      defl    $
 224+ EAF4             >
 224+ EAF4 58 38       >                dw      Dict_Ptr + 2        // xt
 224+ EAF6             >Heap_Ptr        defl    $ - $E000           // save current HP
 224+ EAF6             >
 224+ EAF6             >Current_HP      defl  $ - $E000             // used to set HP once!
 224+ EAF6             >
 224+ EAF6             >//              ______________________________________________________________________
 224+ EAF6             >//              Dictionary part
 224+ EAF6             >
 224+ EAF6             >                org     Dict_Ptr
 224+ 3856             >
 224+ 3856 F4 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 224+ 3858             >
 224+ 3858             >F_INCLUDE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 224+ 3858 CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 224+ 385B             >
 224+ 385B             >
 224+ 385B             >                endif           ; ok        // for other definitions it "points" the correct handler
 224+ 385B             >                // Use of "; ok" to suppress "warning[fwdref]"
 224+ 385B             >
 224+ 385B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 225+ 385B E0 27 49 26                  dw      BLK, FETCH, TO_R        // blk @ >r
 225+ 385F 13 25
 226+ 3861 E6 27 49 26                  dw      TO_IN, FETCH, TO_R      // >in @ >r
 226+ 3865 13 25
 227+ 3867 4C 28 49 26                  dw      SOURCE_ID, FETCH, TO_R  // source-id @ >r
 227+ 386B 13 25
 228+ 386D 29 25                        dw      R_OP                    // r
 229+ 386F 49 25                        dw      ZGREATER                // 0>  (filehandle)
 230+ 3871                                                              // if
 231+ 3871 8F 20                        dw      ZBRANCH
 232+ 3873 20 00                        dw      FInclude_Else_1 - $
 233+ 3875 29 25 BD 23                  dw          R_OP, F_FGETPOS     //      r f_getpos
 234+ 3879 3D 20 2C 00                  dw          LIT, 44, QERROR     //      44 ?error
 234+ 387D 98 2A
 235+ 387F E6 27 49 26                  dw          TO_IN, FETCH        //      >in @ 2-
 236+ 3883 96 25                        dw          TWO_MINUS
 237+ 3885 52 28 49 26                  dw          SPAN, FETCH         //      span @ -
 238+ 3889 A3 28                        dw          SUBTRACT
 239+ 388B 98 28 65 25                  dw          S_TO_D, DPLUS       //      s>d d+
 240+ 388F                                                              // else
 241+ 388F 82 20                        dw      BRANCH
 242+ 3891 06 00                        dw      FInclude_Endif_1 - $
 243+ 3893              FInclude_Else_1:
 244+ 3893 3F 27 3F 27                  dw          ZERO, ZERO          //      0 0
 245+ 3897                                                              // endif
 246+ 3897              FInclude_Endif_1:
 247+ 3897 13 25 13 25                  dw      TO_R, TO_R              // >r >r
 248+ 389B 4C 28 53 26                  dw      SOURCE_ID, STORE        // source-id !
 249+ 389F              FInclude_Begin:                                 // begin
 250+ 389F 46 27 44 37                  dw          ONE, BLOCK, BBUF    //      1 block b/buf
 250+ 38A3 70 27
 251+ 38A5 27 26 4B 2D                  dw          TWO_DUP, BLANK      //      2dup blank
 252+ 38A9 D8 25 74 25                  dw          SWAP, ONE_PLUS      //      swap 1+
 253+ 38AD D8 25 8E 25                  dw          SWAP, CELL_MINUS    //      swap cell-
 254+ 38B1 4C 28 49 26                  dw          SOURCE_ID, FETCH    //      source-id @
 255+ 38B5 BF 37                        dw          F_GETLINE           //      f_getline
 256+ 38B7                                                              // while
 257+ 38B7 8F 20                        dw      ZBRANCH
 258+ 38B9 14 00                        dw      FInclude_Repeat - $
 259+ 38BB 46 27 E0 27                  dw          ONE, BLK, STORE     //      1 blk !
 259+ 38BF 53 26
 260+ 38C1 3F 27 E6 27                  dw          ZERO, TO_IN, STORE  //      0 >in !
 260+ 38C5 53 26
 261+ 38C7 7F 31                        dw          INTERPRET           //      interpret
 262+ 38C9 82 20                        dw      BRANCH
 263+ 38CB D4 FF                        dw      FInclude_Begin - $
 264+ 38CD              FInclude_Repeat:                                // repeat
 265+ 38CD                              //  close current file
 266+ 38CD 4C 28 49 26                  dw      SOURCE_ID, FETCH        // source-id @
 267+ 38D1 A3 23                        dw      F_CLOSE                 // f_close
 268+ 38D3 3D 20 2A 00                  dw      LIT, 42, QERROR         // 42 ?error
 268+ 38D7 98 2A
 269+ 38D9
 270+ 38D9 1E 25 1E 25                  dw      R_TO, R_TO, R_TO        // r> r> r>
 270+ 38DD 1E 25
 271+ 38DF DF 25 4C 28                  dw      DUP, SOURCE_ID, STORE   // dup source-id !
 271+ 38E3 53 26
 272+ 38E5 49 25                        dw      ZGREATER                // 0>
 273+ 38E7                                                              // if
 274+ 38E7 8F 20                        dw      ZBRANCH
 275+ 38E9 12 00                        dw      FInclude_Else_2 - $
 276+ 38EB 4C 28 49 26                  dw          SOURCE_ID, FETCH    //      source-id @
 277+ 38EF 86 23                        dw          F_SEEK              //      f_seek
 278+ 38F1 3D 20 2B 00                  dw          LIT, 43, QERROR     //      43, ?error
 278+ 38F5 98 2A
 279+ 38F7                                                              // else
 280+ 38F7 82 20                        dw      BRANCH
 281+ 38F9 04 00                        dw      FInclude_Endif_2 - $
 282+ 38FB              FInclude_Else_2:
 283+ 38FB 14 26                        dw          TWO_DROP            //      2drop
 284+ 38FD              FInclude_Endif_2:                               // endif
 285+ 38FD 1E 25 E6 27                  dw      R_TO, TO_IN, STORE      // r> >in !
 285+ 3901 53 26
 286+ 3903 1E 25 E0 27                  dw      R_TO, BLK, STORE        // r> blk !
 286+ 3907 53 26
 287+ 3909 09 25                        dw      EXIT                    // ;
 288+ 390B
 289+ 390B              //  ______________________________________________________________________
 290+ 390B              //
 291+ 390B              // open<         -- fh
 292+ 390B              // Open the following filename and return it file-handle
 293+ 390B              // Used in the form OPEN CCCC
 294+ 390B                              Colon_Def OPEN_FH, "OPEN<", is_normal
 294+ 390B             >                New_Def  OPEN_FH, "OPEN<", Enter_Ptr, is_normal ; ok
 294+ 390B             >
 294+ 390B             >Dict_Ptr        defl    $
 294+ 390B             >
 294+ 390B             >//              ______________________________________________________________________
 294+ 390B             >//              Heap part
 294+ 390B             >
 294+ 390B             >
 294+ 390B             >                org     (Heap_Ptr & $1FFF) + $E000
 294+ EAF6             >
 294+ EAF6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 294+ EAF6             >Latest_Definition defl  Heap_Ptr
 294+ EAF6             >
 294+ EAF6             >                // dummy db directives used to calculate length of namec
 294+ EAF6 4F 50 45 4E >                db      "OPEN<"
 294+ EAFA 3C          >
 294+ EAFB             >len_NFA         defl    $ - temp_NFA
 294+ EAFB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 294+ EAF6             >
 294+ EAF6 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 294+ EAF7 4F 50 45 4E >                db      "OPEN<"               // name string in 7-bit ascii, but
 294+ EAFB 3C          >
 294+ EAFC             >                org     $-1                 // alter last byte of Name just above to set
 294+ EAFB BC          >                db      {b $} | END_BIT     // msb as name end
 294+ EAFC             >
 294+ EAFC E8 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 294+ EAFE             >Prev_Ptr        defl    Heap_Ptr
 294+ EAFE             >
 294+ EAFE             >mirror_Ptr      defl    $
 294+ EAFE             >
 294+ EAFE 0D 39       >                dw      Dict_Ptr + 2        // xt
 294+ EB00             >Heap_Ptr        defl    $ - $E000           // save current HP
 294+ EB00             >
 294+ EB00             >Current_HP      defl  $ - $E000             // used to set HP once!
 294+ EB00             >
 294+ EB00             >//              ______________________________________________________________________
 294+ EB00             >//              Dictionary part
 294+ EB00             >
 294+ EB00             >                org     Dict_Ptr
 294+ 390B             >
 294+ 390B FE 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 294+ 390D             >
 294+ 390D             >OPEN_FH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 294+ 390D CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 294+ 3910             >
 294+ 3910             >
 294+ 3910             >                endif           ; ok        // for other definitions it "points" the correct handler
 294+ 3910             >                // Use of "; ok" to suppress "warning[fwdref]"
 294+ 3910             >
 294+ 3910             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 295+ 3910 62 27                        dw      BL
 296+ 3912 78 2D D2 2B                  dw      WORD, COUNT, OVER       // bl word count over
 296+ 3916 BB 25
 297+ 3918 5B 25 3F 27                  dw      PLUS, ZERO, SWAP, STORE // + 0 swap !
 297+ 391C D8 25 53 26
 298+ 3920 69 2D 46 27                  dw      PAD, ONE, F_OPEN        // pad 1 f_open
 298+ 3924 0B 24
 299+ 3926 3D 20 2B 00                  dw      LIT, 43                 // 43
 300+ 392A 98 2A                        dw      QERROR                  // ?error
 301+ 392C 09 25                        dw      EXIT                    // ;
 302+ 392E
 303+ 392E              //  ______________________________________________________________________
 304+ 392E              //
 305+ 392E              // use          -- cccc
 306+ 392E              // Include the following filename
 307+ 392E                              Colon_Def USE, "USE", is_normal
 307+ 392E             >                New_Def  USE, "USE", Enter_Ptr, is_normal ; ok
 307+ 392E             >
 307+ 392E             >Dict_Ptr        defl    $
 307+ 392E             >
 307+ 392E             >//              ______________________________________________________________________
 307+ 392E             >//              Heap part
 307+ 392E             >
 307+ 392E             >
 307+ 392E             >                org     (Heap_Ptr & $1FFF) + $E000
 307+ EB00             >
 307+ EB00             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 307+ EB00             >Latest_Definition defl  Heap_Ptr
 307+ EB00             >
 307+ EB00             >                // dummy db directives used to calculate length of namec
 307+ EB00 55 53 45    >                db      "USE"
 307+ EB03             >len_NFA         defl    $ - temp_NFA
 307+ EB03             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 307+ EB00             >
 307+ EB00 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 307+ EB01 55 53 45    >                db      "USE"               // name string in 7-bit ascii, but
 307+ EB04             >                org     $-1                 // alter last byte of Name just above to set
 307+ EB03 C5          >                db      {b $} | END_BIT     // msb as name end
 307+ EB04             >
 307+ EB04 F6 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 307+ EB06             >Prev_Ptr        defl    Heap_Ptr
 307+ EB06             >
 307+ EB06             >mirror_Ptr      defl    $
 307+ EB06             >
 307+ EB06 30 39       >                dw      Dict_Ptr + 2        // xt
 307+ EB08             >Heap_Ptr        defl    $ - $E000           // save current HP
 307+ EB08             >
 307+ EB08             >Current_HP      defl  $ - $E000             // used to set HP once!
 307+ EB08             >
 307+ EB08             >//              ______________________________________________________________________
 307+ EB08             >//              Dictionary part
 307+ EB08             >
 307+ EB08             >                org     Dict_Ptr
 307+ 392E             >
 307+ 392E 06 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 307+ 3930             >
 307+ 3930             >USE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 307+ 3930 CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 307+ 3933             >
 307+ 3933             >
 307+ 3933             >                endif           ; ok        // for other definitions it "points" the correct handler
 307+ 3933             >                // Use of "; ok" to suppress "warning[fwdref]"
 307+ 3933             >
 307+ 3933             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 308+ 3933 0D 39                        dw      OPEN_FH                 // open<
 309+ 3935 68 3F 49 26                  dw      BLK_FH, FETCH           // blk-fh @
 310+ 3939 A3 23 C4 25                  dw      F_CLOSE, DROP           // f_close drop
 311+ 393D 68 3F 53 26                  dw      BLK_FH, STORE           // blk-fh !
 312+ 3941 09 25                        dw      EXIT                    // ;
 313+ 3943
 314+ 3943              //  ______________________________________________________________________
 315+ 3943              //
 316+ 3943              // include      -- cccc
 317+ 3943              // Include the following filename
 318+ 3943                              Colon_Def INCLUDE, "INCLUDE", is_normal
 318+ 3943             >                New_Def  INCLUDE, "INCLUDE", Enter_Ptr, is_normal ; ok
 318+ 3943             >
 318+ 3943             >Dict_Ptr        defl    $
 318+ 3943             >
 318+ 3943             >//              ______________________________________________________________________
 318+ 3943             >//              Heap part
 318+ 3943             >
 318+ 3943             >
 318+ 3943             >                org     (Heap_Ptr & $1FFF) + $E000
 318+ EB08             >
 318+ EB08             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 318+ EB08             >Latest_Definition defl  Heap_Ptr
 318+ EB08             >
 318+ EB08             >                // dummy db directives used to calculate length of namec
 318+ EB08 49 4E 43 4C >                db      "INCLUDE"
 318+ EB0C 55 44 45    >
 318+ EB0F             >len_NFA         defl    $ - temp_NFA
 318+ EB0F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 318+ EB08             >
 318+ EB08 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 318+ EB09 49 4E 43 4C >                db      "INCLUDE"               // name string in 7-bit ascii, but
 318+ EB0D 55 44 45    >
 318+ EB10             >                org     $-1                 // alter last byte of Name just above to set
 318+ EB0F C5          >                db      {b $} | END_BIT     // msb as name end
 318+ EB10             >
 318+ EB10 00 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 318+ EB12             >Prev_Ptr        defl    Heap_Ptr
 318+ EB12             >
 318+ EB12             >mirror_Ptr      defl    $
 318+ EB12             >
 318+ EB12 45 39       >                dw      Dict_Ptr + 2        // xt
 318+ EB14             >Heap_Ptr        defl    $ - $E000           // save current HP
 318+ EB14             >
 318+ EB14             >Current_HP      defl  $ - $E000             // used to set HP once!
 318+ EB14             >
 318+ EB14             >//              ______________________________________________________________________
 318+ EB14             >//              Dictionary part
 318+ EB14             >
 318+ EB14             >                org     Dict_Ptr
 318+ 3943             >
 318+ 3943 12 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 318+ 3945             >
 318+ 3945             >INCLUDE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 318+ 3945 CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 318+ 3948             >
 318+ 3948             >
 318+ 3948             >                endif           ; ok        // for other definitions it "points" the correct handler
 318+ 3948             >                // Use of "; ok" to suppress "warning[fwdref]"
 318+ 3948             >
 318+ 3948             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 319+ 3948 0D 39                        dw      OPEN_FH                 // open
 320+ 394A 58 38                        dw      F_INCLUDE               //  f_include
 321+ 394C 09 25                        dw      EXIT                    // ;
 322+ 394E
 323+ 394E              //  ______________________________________________________________________
 324+ 394E              //
 325+ 394E              // needs
 326+ 394E              // check for cccc exists in vocabulary
 327+ 394E              // if it doesn't then  INCLUDE  inc/cccc.F
 328+ 394E
 329+ 394E              // temp filename cccc.f as counted string zero-padded
 330+ 394E                              New_Def NEEDS_W,   "NEEDS-W", Create_Ptr, is_normal
 330+ 394E             >
 330+ 394E             >Dict_Ptr        defl    $
 330+ 394E             >
 330+ 394E             >//              ______________________________________________________________________
 330+ 394E             >//              Heap part
 330+ 394E             >
 330+ 394E             >
 330+ 394E             >                org     (Heap_Ptr & $1FFF) + $E000
 330+ EB14             >
 330+ EB14             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 330+ EB14             >Latest_Definition defl  Heap_Ptr
 330+ EB14             >
 330+ EB14             >                // dummy db directives used to calculate length of namec
 330+ EB14 4E 45 45 44 >                db      "NEEDS-W"
 330+ EB18 53 2D 57    >
 330+ EB1B             >len_NFA         defl    $ - temp_NFA
 330+ EB1B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 330+ EB14             >
 330+ EB14 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 330+ EB15 4E 45 45 44 >                db      "NEEDS-W"               // name string in 7-bit ascii, but
 330+ EB19 53 2D 57    >
 330+ EB1C             >                org     $-1                 // alter last byte of Name just above to set
 330+ EB1B D7          >                db      {b $} | END_BIT     // msb as name end
 330+ EB1C             >
 330+ EB1C 08 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 330+ EB1E             >Prev_Ptr        defl    Heap_Ptr
 330+ EB1E             >
 330+ EB1E             >mirror_Ptr      defl    $
 330+ EB1E             >
 330+ EB1E 50 39       >                dw      Dict_Ptr + 2        // xt
 330+ EB20             >Heap_Ptr        defl    $ - $E000           // save current HP
 330+ EB20             >
 330+ EB20             >Current_HP      defl  $ - $E000             // used to set HP once!
 330+ EB20             >
 330+ EB20             >//              ______________________________________________________________________
 330+ EB20             >//              Dictionary part
 330+ EB20             >
 330+ EB20             >                org     Dict_Ptr
 330+ 394E             >
 330+ 394E 1E 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 330+ 3950             >
 330+ 3950             >NEEDS_W:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 330+ 3950 CD C3 30    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 330+ 3953             >
 330+ 3953             >
 330+ 3953             >                endif           ; ok        // for other definitions it "points" the correct handler
 330+ 3953             >                // Use of "; ok" to suppress "warning[fwdref]"
 330+ 3953             >
 330+ 3953             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 331+ 3953 00 00 00...                  ds      35                      // 32 + .f + 0x00 = len 35
 332+ 3976              // temp complete path+filename
 333+ 3976                              New_Def NEEDS_FN,  "NEEDS-FN", Create_Ptr, is_normal
 333+ 3976             >
 333+ 3976             >Dict_Ptr        defl    $
 333+ 3976             >
 333+ 3976             >//              ______________________________________________________________________
 333+ 3976             >//              Heap part
 333+ 3976             >
 333+ 3976             >
 333+ 3976             >                org     (Heap_Ptr & $1FFF) + $E000
 333+ EB20             >
 333+ EB20             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 333+ EB20             >Latest_Definition defl  Heap_Ptr
 333+ EB20             >
 333+ EB20             >                // dummy db directives used to calculate length of namec
 333+ EB20 4E 45 45 44 >                db      "NEEDS-FN"
 333+ EB24 53 2D 46 4E >
 333+ EB28             >len_NFA         defl    $ - temp_NFA
 333+ EB28             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 333+ EB20             >
 333+ EB20 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 333+ EB21 4E 45 45 44 >                db      "NEEDS-FN"               // name string in 7-bit ascii, but
 333+ EB25 53 2D 46 4E >
 333+ EB29             >                org     $-1                 // alter last byte of Name just above to set
 333+ EB28 CE          >                db      {b $} | END_BIT     // msb as name end
 333+ EB29             >
 333+ EB29 14 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 333+ EB2B             >Prev_Ptr        defl    Heap_Ptr
 333+ EB2B             >
 333+ EB2B             >mirror_Ptr      defl    $
 333+ EB2B             >
 333+ EB2B 78 39       >                dw      Dict_Ptr + 2        // xt
 333+ EB2D             >Heap_Ptr        defl    $ - $E000           // save current HP
 333+ EB2D             >
 333+ EB2D             >Current_HP      defl  $ - $E000             // used to set HP once!
 333+ EB2D             >
 333+ EB2D             >//              ______________________________________________________________________
 333+ EB2D             >//              Dictionary part
 333+ EB2D             >
 333+ EB2D             >                org     Dict_Ptr
 333+ 3976             >
 333+ 3976 2B 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 333+ 3978             >
 333+ 3978             >NEEDS_FN:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 333+ 3978 CD C3 30    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 333+ 397B             >
 333+ 397B             >
 333+ 397B             >                endif           ; ok        // for other definitions it "points" the correct handler
 333+ 397B             >                // Use of "; ok" to suppress "warning[fwdref]"
 333+ 397B             >
 333+ 397B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 334+ 397B 63 3A 2F 74  Param:          db      "c:/tools/vforth/lib/autoexec-dot.f", 0
 334+ 397F 6F 6F 6C 73
 334+ 3983 2F 76 66 6F
 334+ 3987 72 74 68 2F
 334+ 398B 6C 69 62 2F
 334+ 398F 61 75 74 6F
 334+ 3993 65 78 65 63
 334+ 3997 2D 64 6F 74
 334+ 399B 2E 66 00
 335+ 399E 00 00 00...                  ds      30
 336+ 39BC              // constant path
 337+ 39BC                              New_Def NEEDS_INC,  "NEEDS-INC", Create_Ptr, is_normal
 337+ 39BC             >
 337+ 39BC             >Dict_Ptr        defl    $
 337+ 39BC             >
 337+ 39BC             >//              ______________________________________________________________________
 337+ 39BC             >//              Heap part
 337+ 39BC             >
 337+ 39BC             >
 337+ 39BC             >                org     (Heap_Ptr & $1FFF) + $E000
 337+ EB2D             >
 337+ EB2D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 337+ EB2D             >Latest_Definition defl  Heap_Ptr
 337+ EB2D             >
 337+ EB2D             >                // dummy db directives used to calculate length of namec
 337+ EB2D 4E 45 45 44 >                db      "NEEDS-INC"
 337+ EB31 53 2D 49 4E >
 337+ EB35 43          >
 337+ EB36             >len_NFA         defl    $ - temp_NFA
 337+ EB36             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 337+ EB2D             >
 337+ EB2D 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 337+ EB2E 4E 45 45 44 >                db      "NEEDS-INC"               // name string in 7-bit ascii, but
 337+ EB32 53 2D 49 4E >
 337+ EB36 43          >
 337+ EB37             >                org     $-1                 // alter last byte of Name just above to set
 337+ EB36 C3          >                db      {b $} | END_BIT     // msb as name end
 337+ EB37             >
 337+ EB37 20 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 337+ EB39             >Prev_Ptr        defl    Heap_Ptr
 337+ EB39             >
 337+ EB39             >mirror_Ptr      defl    $
 337+ EB39             >
 337+ EB39 BE 39       >                dw      Dict_Ptr + 2        // xt
 337+ EB3B             >Heap_Ptr        defl    $ - $E000           // save current HP
 337+ EB3B             >
 337+ EB3B             >Current_HP      defl  $ - $E000             // used to set HP once!
 337+ EB3B             >
 337+ EB3B             >//              ______________________________________________________________________
 337+ EB3B             >//              Dictionary part
 337+ EB3B             >
 337+ EB3B             >                org     Dict_Ptr
 337+ 39BC             >
 337+ 39BC 39 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 337+ 39BE             >
 337+ 39BE             >NEEDS_INC:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 337+ 39BE CD C3 30    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 337+ 39C1             >
 337+ 39C1             >
 337+ 39C1             >                endif           ; ok        // for other definitions it "points" the correct handler
 337+ 39C1             >                // Use of "; ok" to suppress "warning[fwdref]"
 337+ 39C1             >
 337+ 39C1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 338+ 39C1 04 69 6E 63                  db      4, "inc/", 0
 338+ 39C5 2F 00
 339+ 39C7                              New_Def NEEDS_LIB,  "NEEDS-LIB", Create_Ptr, is_normal
 339+ 39C7             >
 339+ 39C7             >Dict_Ptr        defl    $
 339+ 39C7             >
 339+ 39C7             >//              ______________________________________________________________________
 339+ 39C7             >//              Heap part
 339+ 39C7             >
 339+ 39C7             >
 339+ 39C7             >                org     (Heap_Ptr & $1FFF) + $E000
 339+ EB3B             >
 339+ EB3B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 339+ EB3B             >Latest_Definition defl  Heap_Ptr
 339+ EB3B             >
 339+ EB3B             >                // dummy db directives used to calculate length of namec
 339+ EB3B 4E 45 45 44 >                db      "NEEDS-LIB"
 339+ EB3F 53 2D 4C 49 >
 339+ EB43 42          >
 339+ EB44             >len_NFA         defl    $ - temp_NFA
 339+ EB44             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 339+ EB3B             >
 339+ EB3B 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 339+ EB3C 4E 45 45 44 >                db      "NEEDS-LIB"               // name string in 7-bit ascii, but
 339+ EB40 53 2D 4C 49 >
 339+ EB44 42          >
 339+ EB45             >                org     $-1                 // alter last byte of Name just above to set
 339+ EB44 C2          >                db      {b $} | END_BIT     // msb as name end
 339+ EB45             >
 339+ EB45 2D 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 339+ EB47             >Prev_Ptr        defl    Heap_Ptr
 339+ EB47             >
 339+ EB47             >mirror_Ptr      defl    $
 339+ EB47             >
 339+ EB47 C9 39       >                dw      Dict_Ptr + 2        // xt
 339+ EB49             >Heap_Ptr        defl    $ - $E000           // save current HP
 339+ EB49             >
 339+ EB49             >Current_HP      defl  $ - $E000             // used to set HP once!
 339+ EB49             >
 339+ EB49             >//              ______________________________________________________________________
 339+ EB49             >//              Dictionary part
 339+ EB49             >
 339+ EB49             >                org     Dict_Ptr
 339+ 39C7             >
 339+ 39C7 47 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 339+ 39C9             >
 339+ 39C9             >NEEDS_LIB:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 339+ 39C9 CD C3 30    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 339+ 39CC             >
 339+ 39CC             >
 339+ 39CC             >                endif           ; ok        // for other definitions it "points" the correct handler
 339+ 39CC             >                // Use of "; ok" to suppress "warning[fwdref]"
 339+ 39CC             >
 339+ 39CC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 340+ 39CC 04 6C 69 62                  db      4, "lib/", 0
 340+ 39D0 2F 00
 341+ 39D2
 342+ 39D2              // Concatenate path at a and filename and include it
 343+ 39D2              // No error is issued if filename doesn't exist.
 344+ 39D2                              Colon_Def NEEDS_SLASH, "NEEDS/", is_normal
 344+ 39D2             >                New_Def  NEEDS_SLASH, "NEEDS/", Enter_Ptr, is_normal ; ok
 344+ 39D2             >
 344+ 39D2             >Dict_Ptr        defl    $
 344+ 39D2             >
 344+ 39D2             >//              ______________________________________________________________________
 344+ 39D2             >//              Heap part
 344+ 39D2             >
 344+ 39D2             >
 344+ 39D2             >                org     (Heap_Ptr & $1FFF) + $E000
 344+ EB49             >
 344+ EB49             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 344+ EB49             >Latest_Definition defl  Heap_Ptr
 344+ EB49             >
 344+ EB49             >                // dummy db directives used to calculate length of namec
 344+ EB49 4E 45 45 44 >                db      "NEEDS/"
 344+ EB4D 53 2F       >
 344+ EB4F             >len_NFA         defl    $ - temp_NFA
 344+ EB4F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 344+ EB49             >
 344+ EB49 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 344+ EB4A 4E 45 45 44 >                db      "NEEDS/"               // name string in 7-bit ascii, but
 344+ EB4E 53 2F       >
 344+ EB50             >                org     $-1                 // alter last byte of Name just above to set
 344+ EB4F AF          >                db      {b $} | END_BIT     // msb as name end
 344+ EB50             >
 344+ EB50 3B 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 344+ EB52             >Prev_Ptr        defl    Heap_Ptr
 344+ EB52             >
 344+ EB52             >mirror_Ptr      defl    $
 344+ EB52             >
 344+ EB52 D4 39       >                dw      Dict_Ptr + 2        // xt
 344+ EB54             >Heap_Ptr        defl    $ - $E000           // save current HP
 344+ EB54             >
 344+ EB54             >Current_HP      defl  $ - $E000             // used to set HP once!
 344+ EB54             >
 344+ EB54             >//              ______________________________________________________________________
 344+ EB54             >//              Dictionary part
 344+ EB54             >
 344+ EB54             >                org     Dict_Ptr
 344+ 39D2             >
 344+ 39D2 52 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 344+ 39D4             >
 344+ 39D4             >NEEDS_SLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 344+ 39D4 CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 344+ 39D7             >
 344+ 39D7             >
 344+ 39D7             >                endif           ; ok        // for other definitions it "points" the correct handler
 344+ 39D7             >                // Use of "; ok" to suppress "warning[fwdref]"
 344+ 39D7             >
 344+ 39D7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 345+ 39D7 D2 2B CF 25                  dw      COUNT, TUCK             // n a n
 346+ 39DB 78 39 D8 25                  dw      NEEDS_FN, SWAP, CMOVE   // n        \ Path
 346+ 39DF 4A 24
 347+ 39E1 78 39 5B 25                  dw      NEEDS_FN, PLUS          // a1+n     \ Concat
 348+ 39E5 50 39 74 25                  dw      NEEDS_W, ONE_PLUS, SWAP
 348+ 39E9 D8 25
 349+ 39EB 3D 20 23 00                  dw      LIT, 35
 350+ 39EF 4A 24                        dw      CMOVE
 351+ 39F1 78 39                        dw      NEEDS_FN
 352+ 39F3 69 2D 46 27                  dw      PAD, ONE, F_OPEN
 352+ 39F7 0B 24
 353+ 39F9 2E 25                        dw      ZEQUAL
 354+ 39FB 8F 20                        dw      ZBRANCH
 355+ 39FD 08 00                        dw      Needs_1 - $
 356+ 39FF 58 38                        dw          F_INCLUDE
 357+ 3A01 82 20                        dw      BRANCH
 358+ 3A03 04 00                        dw      Needs_2 - $
 359+ 3A05              Needs_1:
 360+ 3A05              //              dw          NEEDS_W, COUNT, TYPE, SPACE
 361+ 3A05              //              dw          LIT, 43, MESSAGE
 362+ 3A05 C4 25                        dw          DROP
 363+ 3A07              Needs_2:
 364+ 3A07 09 25                        dw      EXIT                    // ;
 365+ 3A09
 366+ 3A09
 367+ 3A09                              New_Def NDOM,   "NDOM", Create_Ptr, is_normal
 367+ 3A09             >
 367+ 3A09             >Dict_Ptr        defl    $
 367+ 3A09             >
 367+ 3A09             >//              ______________________________________________________________________
 367+ 3A09             >//              Heap part
 367+ 3A09             >
 367+ 3A09             >
 367+ 3A09             >                org     (Heap_Ptr & $1FFF) + $E000
 367+ EB54             >
 367+ EB54             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 367+ EB54             >Latest_Definition defl  Heap_Ptr
 367+ EB54             >
 367+ EB54             >                // dummy db directives used to calculate length of namec
 367+ EB54 4E 44 4F 4D >                db      "NDOM"
 367+ EB58             >len_NFA         defl    $ - temp_NFA
 367+ EB58             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 367+ EB54             >
 367+ EB54 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 367+ EB55 4E 44 4F 4D >                db      "NDOM"               // name string in 7-bit ascii, but
 367+ EB59             >                org     $-1                 // alter last byte of Name just above to set
 367+ EB58 CD          >                db      {b $} | END_BIT     // msb as name end
 367+ EB59             >
 367+ EB59 49 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 367+ EB5B             >Prev_Ptr        defl    Heap_Ptr
 367+ EB5B             >
 367+ EB5B             >mirror_Ptr      defl    $
 367+ EB5B             >
 367+ EB5B 0B 3A       >                dw      Dict_Ptr + 2        // xt
 367+ EB5D             >Heap_Ptr        defl    $ - $E000           // save current HP
 367+ EB5D             >
 367+ EB5D             >Current_HP      defl  $ - $E000             // used to set HP once!
 367+ EB5D             >
 367+ EB5D             >//              ______________________________________________________________________
 367+ EB5D             >//              Dictionary part
 367+ EB5D             >
 367+ EB5D             >                org     Dict_Ptr
 367+ 3A09             >
 367+ 3A09 5B 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 367+ 3A0B             >
 367+ 3A0B             >NDOM:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 367+ 3A0B CD C3 30    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 367+ 3A0E             >
 367+ 3A0E             >
 367+ 3A0E             >                endif           ; ok        // for other definitions it "points" the correct handler
 367+ 3A0E             >                // Use of "; ok" to suppress "warning[fwdref]"
 367+ 3A0E             >
 367+ 3A0E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 368+ 3A0E              //              db $3A, $3F, $2F, $2A, $7C, $5C, $3C, $3E, $22
 369+ 3A0E 3A 3F 2F 2A                  db ':?/*|\<>"'
 369+ 3A12 7C 5C 3C 3E
 369+ 3A16 22
 370+ 3A17 00                           db 0
 371+ 3A18
 372+ 3A18                              New_Def NCDM,   "NCDM", Create_Ptr, is_normal
 372+ 3A18             >
 372+ 3A18             >Dict_Ptr        defl    $
 372+ 3A18             >
 372+ 3A18             >//              ______________________________________________________________________
 372+ 3A18             >//              Heap part
 372+ 3A18             >
 372+ 3A18             >
 372+ 3A18             >                org     (Heap_Ptr & $1FFF) + $E000
 372+ EB5D             >
 372+ EB5D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 372+ EB5D             >Latest_Definition defl  Heap_Ptr
 372+ EB5D             >
 372+ EB5D             >                // dummy db directives used to calculate length of namec
 372+ EB5D 4E 43 44 4D >                db      "NCDM"
 372+ EB61             >len_NFA         defl    $ - temp_NFA
 372+ EB61             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 372+ EB5D             >
 372+ EB5D 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 372+ EB5E 4E 43 44 4D >                db      "NCDM"               // name string in 7-bit ascii, but
 372+ EB62             >                org     $-1                 // alter last byte of Name just above to set
 372+ EB61 CD          >                db      {b $} | END_BIT     // msb as name end
 372+ EB62             >
 372+ EB62 54 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 372+ EB64             >Prev_Ptr        defl    Heap_Ptr
 372+ EB64             >
 372+ EB64             >mirror_Ptr      defl    $
 372+ EB64             >
 372+ EB64 1A 3A       >                dw      Dict_Ptr + 2        // xt
 372+ EB66             >Heap_Ptr        defl    $ - $E000           // save current HP
 372+ EB66             >
 372+ EB66             >Current_HP      defl  $ - $E000             // used to set HP once!
 372+ EB66             >
 372+ EB66             >//              ______________________________________________________________________
 372+ EB66             >//              Dictionary part
 372+ EB66             >
 372+ EB66             >                org     Dict_Ptr
 372+ 3A18             >
 372+ 3A18 64 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 372+ 3A1A             >
 372+ 3A1A             >NCDM:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 372+ 3A1A CD C3 30    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 372+ 3A1D             >
 372+ 3A1D             >
 372+ 3A1D             >                endif           ; ok        // for other definitions it "points" the correct handler
 372+ 3A1D             >                // Use of "; ok" to suppress "warning[fwdref]"
 372+ 3A1D             >
 372+ 3A1D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 373+ 3A1D              //              db $5F, $5E, $25, $26, $24, $5F, $7B, $7D, $7E
 374+ 3A1D 5F 5E 25 26                  db '_^%&$_{}~'
 374+ 3A21 24 5F 7B 7D
 374+ 3A25 7E
 375+ 3A26 00                           db 0
 376+ 3A27
 377+ 3A27              // Replace illegal character in filename using the map here above
 378+ 3A27              // at the moment we need only  "
 379+ 3A27                              Colon_Def NEEDS_CHECK, "MAP-FN", is_normal
 379+ 3A27             >                New_Def  NEEDS_CHECK, "MAP-FN", Enter_Ptr, is_normal ; ok
 379+ 3A27             >
 379+ 3A27             >Dict_Ptr        defl    $
 379+ 3A27             >
 379+ 3A27             >//              ______________________________________________________________________
 379+ 3A27             >//              Heap part
 379+ 3A27             >
 379+ 3A27             >
 379+ 3A27             >                org     (Heap_Ptr & $1FFF) + $E000
 379+ EB66             >
 379+ EB66             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 379+ EB66             >Latest_Definition defl  Heap_Ptr
 379+ EB66             >
 379+ EB66             >                // dummy db directives used to calculate length of namec
 379+ EB66 4D 41 50 2D >                db      "MAP-FN"
 379+ EB6A 46 4E       >
 379+ EB6C             >len_NFA         defl    $ - temp_NFA
 379+ EB6C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 379+ EB66             >
 379+ EB66 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 379+ EB67 4D 41 50 2D >                db      "MAP-FN"               // name string in 7-bit ascii, but
 379+ EB6B 46 4E       >
 379+ EB6D             >                org     $-1                 // alter last byte of Name just above to set
 379+ EB6C CE          >                db      {b $} | END_BIT     // msb as name end
 379+ EB6D             >
 379+ EB6D 5D 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 379+ EB6F             >Prev_Ptr        defl    Heap_Ptr
 379+ EB6F             >
 379+ EB6F             >mirror_Ptr      defl    $
 379+ EB6F             >
 379+ EB6F 29 3A       >                dw      Dict_Ptr + 2        // xt
 379+ EB71             >Heap_Ptr        defl    $ - $E000           // save current HP
 379+ EB71             >
 379+ EB71             >Current_HP      defl  $ - $E000             // used to set HP once!
 379+ EB71             >
 379+ EB71             >//              ______________________________________________________________________
 379+ EB71             >//              Dictionary part
 379+ EB71             >
 379+ EB71             >                org     Dict_Ptr
 379+ 3A27             >
 379+ 3A27 6F 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 379+ 3A29             >
 379+ 3A29             >NEEDS_CHECK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 379+ 3A29 CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 379+ 3A2C             >
 379+ 3A2C             >
 379+ 3A2C             >                endif           ; ok        // for other definitions it "points" the correct handler
 379+ 3A2C             >                // Use of "; ok" to suppress "warning[fwdref]"
 379+ 3A2C             >
 379+ 3A2C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 380+ 3A2C D2 2B DF 2B                  dw      COUNT, BOUNDS
 381+ 3A30 CC 20                        dw      C_DO
 382+ 3A32              Needs_3:
 383+ 3A32 1A 3A 0B 3A                  dw          NCDM, NDOM, LIT, 10
 383+ 3A36 3D 20 0A 00
 384+ 3A3A D2 20 5E 26                  dw          I, CFETCH
 385+ 3A3E F2 21                        dw          C_MAP
 386+ 3A40 D2 20 67 26                  dw          I, CSTORE
 387+ 3A44              Needs_4:
 388+ 3A44 7A 20                        dw      C_LOOP
 389+ 3A46 EC FF                        dw      Needs_3 - $
 390+ 3A48 09 25                        dw      EXIT
 391+ 3A4A
 392+ 3A4A
 393+ 3A4A              // include  "path/cccc.f" if cccc is not defined
 394+ 3A4A              // filename cccc.f is temporary stored at NEEDS-W
 395+ 3A4A                              Colon_Def NEEDS_PATH, "NEEDS-F", is_normal
 395+ 3A4A             >                New_Def  NEEDS_PATH, "NEEDS-F", Enter_Ptr, is_normal ; ok
 395+ 3A4A             >
 395+ 3A4A             >Dict_Ptr        defl    $
 395+ 3A4A             >
 395+ 3A4A             >//              ______________________________________________________________________
 395+ 3A4A             >//              Heap part
 395+ 3A4A             >
 395+ 3A4A             >
 395+ 3A4A             >                org     (Heap_Ptr & $1FFF) + $E000
 395+ EB71             >
 395+ EB71             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 395+ EB71             >Latest_Definition defl  Heap_Ptr
 395+ EB71             >
 395+ EB71             >                // dummy db directives used to calculate length of namec
 395+ EB71 4E 45 45 44 >                db      "NEEDS-F"
 395+ EB75 53 2D 46    >
 395+ EB78             >len_NFA         defl    $ - temp_NFA
 395+ EB78             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 395+ EB71             >
 395+ EB71 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 395+ EB72 4E 45 45 44 >                db      "NEEDS-F"               // name string in 7-bit ascii, but
 395+ EB76 53 2D 46    >
 395+ EB79             >                org     $-1                 // alter last byte of Name just above to set
 395+ EB78 C6          >                db      {b $} | END_BIT     // msb as name end
 395+ EB79             >
 395+ EB79 66 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 395+ EB7B             >Prev_Ptr        defl    Heap_Ptr
 395+ EB7B             >
 395+ EB7B             >mirror_Ptr      defl    $
 395+ EB7B             >
 395+ EB7B 4C 3A       >                dw      Dict_Ptr + 2        // xt
 395+ EB7D             >Heap_Ptr        defl    $ - $E000           // save current HP
 395+ EB7D             >
 395+ EB7D             >Current_HP      defl  $ - $E000             // used to set HP once!
 395+ EB7D             >
 395+ EB7D             >//              ______________________________________________________________________
 395+ EB7D             >//              Dictionary part
 395+ EB7D             >
 395+ EB7D             >                org     Dict_Ptr
 395+ 3A4A             >
 395+ 3A4A 7B 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 395+ 3A4C             >
 395+ 3A4C             >NEEDS_PATH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 395+ 3A4C CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 395+ 3A4F             >
 395+ 3A4F             >
 395+ 3A4F             >                endif           ; ok        // for other definitions it "points" the correct handler
 395+ 3A4F             >                // Use of "; ok" to suppress "warning[fwdref]"
 395+ 3A4F             >
 395+ 3A4F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 396+ 3A4F BC 2F                        dw      LFIND
 397+ 3A51 8F 20                        dw      ZBRANCH
 398+ 3A53 0A 00                        dw      Needs_5 - $
 399+ 3A55
 400+ 3A55 C4 25 14 26                  dw          DROP, TWO_DROP
 401+ 3A59 82 20                        dw      BRANCH
 402+ 3A5B 2C 00                        dw      Needs_6 - $
 403+ 3A5D              Needs_5:
 404+ 3A5D 50 39                        dw          NEEDS_W
 405+ 3A5F 3D 20 23 00                  dw          LIT, 35
 406+ 3A63 40 2D                        dw          ERASE                   // a
 407+ 3A65 64 28 5E 26                  dw          HERE, CFETCH, ONE_PLUS  // a n
 407+ 3A69 74 25
 408+ 3A6B 64 28 BB 25                  dw          HERE, OVER              // a n here n
 409+ 3A6F 50 39 D8 25                  dw          NEEDS_W, SWAP, CMOVE    // a n
 409+ 3A73 4A 24
 410+ 3A75 50 39 29 3A                  dw          NEEDS_W, NEEDS_CHECK
 411+ 3A79 50 39 5B 25                  dw          NEEDS_W, PLUS           // a a1+1
 412+ 3A7D 3D 20 2E 66                  dw          LIT, $662E              // a a1+1 ".F"
 413+ 3A81 D8 25 53 26                  dw          SWAP, STORE             // a
 414+ 3A85 D4 39                        dw          NEEDS_SLASH
 415+ 3A87              Needs_6:
 416+ 3A87 09 25                        dw      EXIT
 417+ 3A89
 418+ 3A89
 419+ 3A89              // check for cccc exists in vocabulary
 420+ 3A89              // if it doesn't then  INCLUDE  inc/cccc.F
 421+ 3A89              // search in inc subdirectory
 422+ 3A89                              Colon_Def NEEDS, "NEEDS", is_normal
 422+ 3A89             >                New_Def  NEEDS, "NEEDS", Enter_Ptr, is_normal ; ok
 422+ 3A89             >
 422+ 3A89             >Dict_Ptr        defl    $
 422+ 3A89             >
 422+ 3A89             >//              ______________________________________________________________________
 422+ 3A89             >//              Heap part
 422+ 3A89             >
 422+ 3A89             >
 422+ 3A89             >                org     (Heap_Ptr & $1FFF) + $E000
 422+ EB7D             >
 422+ EB7D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 422+ EB7D             >Latest_Definition defl  Heap_Ptr
 422+ EB7D             >
 422+ EB7D             >                // dummy db directives used to calculate length of namec
 422+ EB7D 4E 45 45 44 >                db      "NEEDS"
 422+ EB81 53          >
 422+ EB82             >len_NFA         defl    $ - temp_NFA
 422+ EB82             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 422+ EB7D             >
 422+ EB7D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 422+ EB7E 4E 45 45 44 >                db      "NEEDS"               // name string in 7-bit ascii, but
 422+ EB82 53          >
 422+ EB83             >                org     $-1                 // alter last byte of Name just above to set
 422+ EB82 D3          >                db      {b $} | END_BIT     // msb as name end
 422+ EB83             >
 422+ EB83 71 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 422+ EB85             >Prev_Ptr        defl    Heap_Ptr
 422+ EB85             >
 422+ EB85             >mirror_Ptr      defl    $
 422+ EB85             >
 422+ EB85 8B 3A       >                dw      Dict_Ptr + 2        // xt
 422+ EB87             >Heap_Ptr        defl    $ - $E000           // save current HP
 422+ EB87             >
 422+ EB87             >Current_HP      defl  $ - $E000             // used to set HP once!
 422+ EB87             >
 422+ EB87             >//              ______________________________________________________________________
 422+ EB87             >//              Dictionary part
 422+ EB87             >
 422+ EB87             >                org     Dict_Ptr
 422+ 3A89             >
 422+ 3A89 85 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 422+ 3A8B             >
 422+ 3A8B             >NEEDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 422+ 3A8B CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 422+ 3A8E             >
 422+ 3A8E             >
 422+ 3A8E             >                endif           ; ok        // for other definitions it "points" the correct handler
 422+ 3A8E             >                // Use of "; ok" to suppress "warning[fwdref]"
 422+ 3A8E             >
 422+ 3A8E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 423+ 3A8E E6 27 49 26                  dw      TO_IN, FETCH
 424+ 3A92 DF 25                        dw      DUP
 425+ 3A94 BE 39 4C 3A                  dw      NEEDS_INC, NEEDS_PATH
 426+ 3A98 E6 27 53 26                  dw      TO_IN, STORE
 427+ 3A9C C9 39 4C 3A                  dw      NEEDS_LIB, NEEDS_PATH
 428+ 3AA0 E6 27 53 26                  dw      TO_IN, STORE
 429+ 3AA4 BC 2F                        dw      LFIND
 430+ 3AA6 8F 20                        dw      ZBRANCH
 431+ 3AA8 08 00                        dw      Needs_10 - $
 432+ 3AAA 14 26                        dw          TWO_DROP
 433+ 3AAC 82 20                        dw      BRANCH
 434+ 3AAE 10 00                        dw      Needs_11 - $
 435+ 3AB0              Needs_10:
 436+ 3AB0 50 39 D2 2B                  dw      NEEDS_W, COUNT, TYPE, SPACE
 436+ 3AB4 26 2C 2D 29
 437+ 3AB8 3D 20 2B 00                  dw      LIT, 43, MESSAGE
 437+ 3ABC 85 35
 438+ 3ABE              Needs_11:
 439+ 3ABE 09 25                        dw      EXIT
 440+ 3AC0
 441+ 3AC0
 442+ 3AC0              //  ______________________________________________________________________
 443+ 3AC0              //
 444+ 3AC0              // load         n --
 445+ 3AC0                              Colon_Def LOAD, "LOAD", is_normal
 445+ 3AC0             >                New_Def  LOAD, "LOAD", Enter_Ptr, is_normal ; ok
 445+ 3AC0             >
 445+ 3AC0             >Dict_Ptr        defl    $
 445+ 3AC0             >
 445+ 3AC0             >//              ______________________________________________________________________
 445+ 3AC0             >//              Heap part
 445+ 3AC0             >
 445+ 3AC0             >
 445+ 3AC0             >                org     (Heap_Ptr & $1FFF) + $E000
 445+ EB87             >
 445+ EB87             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 445+ EB87             >Latest_Definition defl  Heap_Ptr
 445+ EB87             >
 445+ EB87             >                // dummy db directives used to calculate length of namec
 445+ EB87 4C 4F 41 44 >                db      "LOAD"
 445+ EB8B             >len_NFA         defl    $ - temp_NFA
 445+ EB8B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 445+ EB87             >
 445+ EB87 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 445+ EB88 4C 4F 41 44 >                db      "LOAD"               // name string in 7-bit ascii, but
 445+ EB8C             >                org     $-1                 // alter last byte of Name just above to set
 445+ EB8B C4          >                db      {b $} | END_BIT     // msb as name end
 445+ EB8C             >
 445+ EB8C 7D 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 445+ EB8E             >Prev_Ptr        defl    Heap_Ptr
 445+ EB8E             >
 445+ EB8E             >mirror_Ptr      defl    $
 445+ EB8E             >
 445+ EB8E C2 3A       >                dw      Dict_Ptr + 2        // xt
 445+ EB90             >Heap_Ptr        defl    $ - $E000           // save current HP
 445+ EB90             >
 445+ EB90             >Current_HP      defl  $ - $E000             // used to set HP once!
 445+ EB90             >
 445+ EB90             >//              ______________________________________________________________________
 445+ EB90             >//              Dictionary part
 445+ EB90             >
 445+ EB90             >                org     Dict_Ptr
 445+ 3AC0             >
 445+ 3AC0 8E 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 445+ 3AC2             >
 445+ 3AC2             >LOAD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 445+ 3AC2 CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 445+ 3AC5             >
 445+ 3AC5             >
 445+ 3AC5             >                endif           ; ok        // for other definitions it "points" the correct handler
 445+ 3AC5             >                // Use of "; ok" to suppress "warning[fwdref]"
 445+ 3AC5             >
 445+ 3AC5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 446+ 3AC5 E0 27 49 26                  dw      BLK, FETCH, TO_R        // blk @ >r
 446+ 3AC9 13 25
 447+ 3ACB E6 27 49 26                  dw      TO_IN, FETCH, TO_R      // >in @ >r
 447+ 3ACF 13 25
 448+ 3AD1
 449+ 3AD1 3F 27 E6 27                  dw      ZERO, TO_IN, STORE      // 0 >in !
 449+ 3AD5 53 26
 450+ 3AD7 77 27 11 35                  dw      BSCR, MUL, BLK, STORE   // b/scr * blk !
 450+ 3ADB E0 27 53 26
 451+ 3ADF 7F 31                        dw      INTERPRET               // interpret
 452+ 3AE1
 453+ 3AE1 1E 25 E6 27                  dw      R_TO, TO_IN, STORE      // r> >in !
 453+ 3AE5 53 26
 454+ 3AE7 1E 25 E0 27                  dw      R_TO, BLK, STORE        // r> blk !
 454+ 3AEB 53 26
 455+ 3AED 09 25                        dw      EXIT                    // ;
 456+ 3AEF
 457+ 3AEF              //  ______________________________________________________________________
 458+ 3AEF              //
 459+ 3AEF              // -->          --
 460+ 3AEF                              Colon_Def LOAD_NEXT, "-->", is_immediate
 460+ 3AEF             >                New_Def  LOAD_NEXT, "-->", Enter_Ptr, is_immediate ; ok
 460+ 3AEF             >
 460+ 3AEF             >Dict_Ptr        defl    $
 460+ 3AEF             >
 460+ 3AEF             >//              ______________________________________________________________________
 460+ 3AEF             >//              Heap part
 460+ 3AEF             >
 460+ 3AEF             >
 460+ 3AEF             >                org     (Heap_Ptr & $1FFF) + $E000
 460+ EB90             >
 460+ EB90             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 460+ EB90             >Latest_Definition defl  Heap_Ptr
 460+ EB90             >
 460+ EB90             >                // dummy db directives used to calculate length of namec
 460+ EB90 2D 2D 3E    >                db      "-->"
 460+ EB93             >len_NFA         defl    $ - temp_NFA
 460+ EB93             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 460+ EB90             >
 460+ EB90 C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 460+ EB91 2D 2D 3E    >                db      "-->"               // name string in 7-bit ascii, but
 460+ EB94             >                org     $-1                 // alter last byte of Name just above to set
 460+ EB93 BE          >                db      {b $} | END_BIT     // msb as name end
 460+ EB94             >
 460+ EB94 87 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 460+ EB96             >Prev_Ptr        defl    Heap_Ptr
 460+ EB96             >
 460+ EB96             >mirror_Ptr      defl    $
 460+ EB96             >
 460+ EB96 F1 3A       >                dw      Dict_Ptr + 2        // xt
 460+ EB98             >Heap_Ptr        defl    $ - $E000           // save current HP
 460+ EB98             >
 460+ EB98             >Current_HP      defl  $ - $E000             // used to set HP once!
 460+ EB98             >
 460+ EB98             >//              ______________________________________________________________________
 460+ EB98             >//              Dictionary part
 460+ EB98             >
 460+ EB98             >                org     Dict_Ptr
 460+ 3AEF             >
 460+ 3AEF 96 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 460+ 3AF1             >
 460+ 3AF1             >LOAD_NEXT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 460+ 3AF1 CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 460+ 3AF4             >
 460+ 3AF4             >
 460+ 3AF4             >                endif           ; ok        // for other definitions it "points" the correct handler
 460+ 3AF4             >                // Use of "; ok" to suppress "warning[fwdref]"
 460+ 3AF4             >
 460+ 3AF4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 461+ 3AF4 F5 2A                        dw      QLOADING                // ?loading
 462+ 3AF6 3F 27 E6 27                  dw      ZERO, TO_IN, STORE      // 0 >in !
 462+ 3AFA 53 26
 463+ 3AFC 77 27                        dw      BSCR                    // b/scr
 464+ 3AFE E0 27 49 26                  dw      BLK, FETCH              // blk @
 465+ 3B02 BB 25                        dw      OVER                    // over
 466+ 3B04 36 35                        dw      MOD                     // mod
 467+ 3B06 A3 28                        dw      SUBTRACT                // -
 468+ 3B08 E0 27 31 26                  dw      BLK, PLUSSTORE          // +!
 469+ 3B0C 09 25                        dw      EXIT                    // ;
 470+ 3B0E
 471+ 3B0E              //  ______________________________________________________________________
 472+ 3B0E              //
 473+ 3B0E              // '            -- xt
 474+ 3B0E                              Colon_Def TICK, "'", is_normal
 474+ 3B0E             >                New_Def  TICK, "'", Enter_Ptr, is_normal ; ok
 474+ 3B0E             >
 474+ 3B0E             >Dict_Ptr        defl    $
 474+ 3B0E             >
 474+ 3B0E             >//              ______________________________________________________________________
 474+ 3B0E             >//              Heap part
 474+ 3B0E             >
 474+ 3B0E             >
 474+ 3B0E             >                org     (Heap_Ptr & $1FFF) + $E000
 474+ EB98             >
 474+ EB98             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 474+ EB98             >Latest_Definition defl  Heap_Ptr
 474+ EB98             >
 474+ EB98             >                // dummy db directives used to calculate length of namec
 474+ EB98 27          >                db      "'"
 474+ EB99             >len_NFA         defl    $ - temp_NFA
 474+ EB99             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 474+ EB98             >
 474+ EB98 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 474+ EB99 27          >                db      "'"               // name string in 7-bit ascii, but
 474+ EB9A             >                org     $-1                 // alter last byte of Name just above to set
 474+ EB99 A7          >                db      {b $} | END_BIT     // msb as name end
 474+ EB9A             >
 474+ EB9A 90 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 474+ EB9C             >Prev_Ptr        defl    Heap_Ptr
 474+ EB9C             >
 474+ EB9C             >mirror_Ptr      defl    $
 474+ EB9C             >
 474+ EB9C 10 3B       >                dw      Dict_Ptr + 2        // xt
 474+ EB9E             >Heap_Ptr        defl    $ - $E000           // save current HP
 474+ EB9E             >
 474+ EB9E             >Current_HP      defl  $ - $E000             // used to set HP once!
 474+ EB9E             >
 474+ EB9E             >//              ______________________________________________________________________
 474+ EB9E             >//              Dictionary part
 474+ EB9E             >
 474+ EB9E             >                org     Dict_Ptr
 474+ 3B0E             >
 474+ 3B0E 9C 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 474+ 3B10             >
 474+ 3B10             >TICK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 474+ 3B10 CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 474+ 3B13             >
 474+ 3B13             >
 474+ 3B13             >                endif           ; ok        // for other definitions it "points" the correct handler
 474+ 3B13             >                // Use of "; ok" to suppress "warning[fwdref]"
 474+ 3B13             >
 474+ 3B13             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 475+ 3B13 BC 2F                        dw      LFIND                   // -find
 476+ 3B15 2E 25                        dw      ZEQUAL                  // 0=
 477+ 3B17 3F 27 98 2A                  dw      ZERO, QERROR            // 0 ?error
 478+ 3B1B C4 25                        dw      DROP                    // drop
 479+ 3B1D 09 25                        dw      EXIT                    // ;
 480+ 3B1F
 481+ 3B1F              //  ______________________________________________________________________
 482+ 3B1F              //
 483+ 3B1F              // forget       -- cccc
 484+ 3B1F                              Colon_Def FORGET, "FORGET", is_normal
 484+ 3B1F             >                New_Def  FORGET, "FORGET", Enter_Ptr, is_normal ; ok
 484+ 3B1F             >
 484+ 3B1F             >Dict_Ptr        defl    $
 484+ 3B1F             >
 484+ 3B1F             >//              ______________________________________________________________________
 484+ 3B1F             >//              Heap part
 484+ 3B1F             >
 484+ 3B1F             >
 484+ 3B1F             >                org     (Heap_Ptr & $1FFF) + $E000
 484+ EB9E             >
 484+ EB9E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 484+ EB9E             >Latest_Definition defl  Heap_Ptr
 484+ EB9E             >
 484+ EB9E             >                // dummy db directives used to calculate length of namec
 484+ EB9E 46 4F 52 47 >                db      "FORGET"
 484+ EBA2 45 54       >
 484+ EBA4             >len_NFA         defl    $ - temp_NFA
 484+ EBA4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 484+ EB9E             >
 484+ EB9E 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 484+ EB9F 46 4F 52 47 >                db      "FORGET"               // name string in 7-bit ascii, but
 484+ EBA3 45 54       >
 484+ EBA5             >                org     $-1                 // alter last byte of Name just above to set
 484+ EBA4 D4          >                db      {b $} | END_BIT     // msb as name end
 484+ EBA5             >
 484+ EBA5 98 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 484+ EBA7             >Prev_Ptr        defl    Heap_Ptr
 484+ EBA7             >
 484+ EBA7             >mirror_Ptr      defl    $
 484+ EBA7             >
 484+ EBA7 21 3B       >                dw      Dict_Ptr + 2        // xt
 484+ EBA9             >Heap_Ptr        defl    $ - $E000           // save current HP
 484+ EBA9             >
 484+ EBA9             >Current_HP      defl  $ - $E000             // used to set HP once!
 484+ EBA9             >
 484+ EBA9             >//              ______________________________________________________________________
 484+ EBA9             >//              Dictionary part
 484+ EBA9             >
 484+ EBA9             >                org     Dict_Ptr
 484+ 3B1F             >
 484+ 3B1F A7 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 484+ 3B21             >
 484+ 3B21             >FORGET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 484+ 3B21 CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 484+ 3B24             >
 484+ 3B24             >
 484+ 3B24             >                endif           ; ok        // for other definitions it "points" the correct handler
 484+ 3B24             >                // Use of "; ok" to suppress "warning[fwdref]"
 484+ 3B24             >
 484+ 3B24             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 485+ 3B24 04 28 49 26                  dw      CURRENT, FETCH          // current @
 486+ 3B28 FE 27 49 26                  dw      CONTEXT, FETCH          // context @
 487+ 3B2C A3 28 3D 20                  dw      SUBTRACT, LIT, 23, QERROR // - 23 ?error
 487+ 3B30 17 00 98 2A
 488+ 3B34 10 3B 17 2A                  dw      TICK, TO_BODY           // ' >body
 489+ 3B38 DF 25 B6 27                  dw      DUP, FENCE, FETCH       // dup fence @
 489+ 3B3C 49 26
 490+ 3B3E BA 28 3D 20                  dw      ULESS, LIT, 21, QERROR  // u< 21 ?error
 490+ 3B42 15 00 98 2A
 491+ 3B46 DF 25 4C 2A                  dw      DUP, NFA                // dup nfa
 492+ 3B4A
 493+ 3B4A                          //  dw      DUP
 494+ 3B4A                          //  dw      LIT, $E000, LESS
 495+ 3B4A                          //  dw      MMU7_FETCH, ONE, EQUALS
 496+ 3B4A                          //  dw      OR_OP, NOT_OP
 497+ 3B4A                          //  dw      ZBRANCH
 498+ 3B4A                          //  dw      Forget_then - $
 499+ 3B4A
 500+ 3B4A 55 29 78 29                  dw      MMU7_FETCH, FROM_FAR
 501+ 3B4E D4 27 53 26                  dw      HP, STORE
 502+ 3B52 DF 25 41 2A                  dw      DUP, CFA, CELL_MINUS
 502+ 3B56 8E 25
 503+ 3B58              // Forget_then:
 504+ 3B58 BC 27 53 26                  dw      DP, STORE               // dp !
 505+ 3B5C 57 2A 49 26                  dw      LFA, FETCH              // lfa @
 506+ 3B60 FE 27 49 26                  dw      CONTEXT, FETCH, STORE   // context @ !
 506+ 3B64 53 26
 507+ 3B66 09 25                        dw      EXIT                    // ;
 508+ 3B68
 509+ 3B68              //  ______________________________________________________________________
 510+ 3B68              //
 511+ 3B68              // marker       -- cccc
 512+ 3B68                              Colon_Def MARKER, "MARKER", is_immediate
 512+ 3B68             >                New_Def  MARKER, "MARKER", Enter_Ptr, is_immediate ; ok
 512+ 3B68             >
 512+ 3B68             >Dict_Ptr        defl    $
 512+ 3B68             >
 512+ 3B68             >//              ______________________________________________________________________
 512+ 3B68             >//              Heap part
 512+ 3B68             >
 512+ 3B68             >
 512+ 3B68             >                org     (Heap_Ptr & $1FFF) + $E000
 512+ EBA9             >
 512+ EBA9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 512+ EBA9             >Latest_Definition defl  Heap_Ptr
 512+ EBA9             >
 512+ EBA9             >                // dummy db directives used to calculate length of namec
 512+ EBA9 4D 41 52 4B >                db      "MARKER"
 512+ EBAD 45 52       >
 512+ EBAF             >len_NFA         defl    $ - temp_NFA
 512+ EBAF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 512+ EBA9             >
 512+ EBA9 C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 512+ EBAA 4D 41 52 4B >                db      "MARKER"               // name string in 7-bit ascii, but
 512+ EBAE 45 52       >
 512+ EBB0             >                org     $-1                 // alter last byte of Name just above to set
 512+ EBAF D2          >                db      {b $} | END_BIT     // msb as name end
 512+ EBB0             >
 512+ EBB0 9E 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 512+ EBB2             >Prev_Ptr        defl    Heap_Ptr
 512+ EBB2             >
 512+ EBB2             >mirror_Ptr      defl    $
 512+ EBB2             >
 512+ EBB2 6A 3B       >                dw      Dict_Ptr + 2        // xt
 512+ EBB4             >Heap_Ptr        defl    $ - $E000           // save current HP
 512+ EBB4             >
 512+ EBB4             >Current_HP      defl  $ - $E000             // used to set HP once!
 512+ EBB4             >
 512+ EBB4             >//              ______________________________________________________________________
 512+ EBB4             >//              Dictionary part
 512+ EBB4             >
 512+ EBB4             >                org     Dict_Ptr
 512+ 3B68             >
 512+ 3B68 B2 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 512+ 3B6A             >
 512+ 3B6A             >MARKER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 512+ 3B6A CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 512+ 3B6D             >
 512+ 3B6D             >
 512+ 3B6D             >                endif           ; ok        // for other definitions it "points" the correct handler
 512+ 3B6D             >                // Use of "; ok" to suppress "warning[fwdref]"
 512+ 3B6D             >
 512+ 3B6D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 513+ 3B6D AA 2B                        dw      CBUILDS
 514+ 3B6F C2 27 49 26                  dw      VOC_LINK, FETCH, COMMA
 514+ 3B73 7A 28
 515+ 3B75 04 28 49 26                  dw      CURRENT, FETCH, COMMA
 515+ 3B79 7A 28
 516+ 3B7B FE 27 49 26                  dw      CONTEXT, FETCH, COMMA
 516+ 3B7F 7A 28
 517+ 3B81 04 28 49 26                  dw      CURRENT, FETCH, FETCH,  COMMA
 517+ 3B85 49 26 7A 28
 518+ 3B89 08 2A 66 2A                  dw      LATEST, PFA, LFA, FETCH, COMMA
 518+ 3B8D 57 2A 49 26
 518+ 3B91 7A 28
 519+ 3B93 B5 2B                        dw      DOES_TO
 520+ 3B95 DF 25 49 26                  dw      DUP, FETCH, VOC_LINK, STORE, CELL_PLUS
 520+ 3B99 C2 27 53 26
 520+ 3B9D 8A 25
 521+ 3B9F DF 25 49 26                  dw      DUP, FETCH, CURRENT, STORE, CELL_PLUS
 521+ 3BA3 04 28 53 26
 521+ 3BA7 8A 25
 522+ 3BA9 DF 25 49 26                  dw      DUP, FETCH, CONTEXT, STORE, CELL_PLUS
 522+ 3BAD FE 27 53 26
 522+ 3BB1 8A 25
 523+ 3BB3 DF 25 49 26                  dw      DUP, FETCH
 524+ 3BB7                          //  dw      DUP, QHEAPP
 525+ 3BB7                          //  dw      ZBRANCH
 526+ 3BB7                          //  dw      Marker_then - $
 527+ 3BB7 DF 25 D4 27                  dw          DUP, HP, STORE
 527+ 3BBB 53 26
 528+ 3BBD 66 2A 41 2A                  dw          PFA, CFA, CELL_MINUS
 528+ 3BC1 8E 25
 529+ 3BC3              // Marker_then:
 530+ 3BC3 BC 27 53 26                  dw      DP, STORE, CELL_PLUS
 530+ 3BC7 8A 25
 531+ 3BC9 49 26 04 28                  dw      FETCH, CURRENT, FETCH, STORE
 531+ 3BCD 49 26 53 26
 532+ 3BD1 09 25                        dw      EXIT
 533+ 3BD3
 534+ 3BD3              //  ______________________________________________________________________
 535+ 3BD3              //
 536+ 3BD3              // spaces       n --
 537+ 3BD3                              Colon_Def SPACES, "SPACES", is_normal
 537+ 3BD3             >                New_Def  SPACES, "SPACES", Enter_Ptr, is_normal ; ok
 537+ 3BD3             >
 537+ 3BD3             >Dict_Ptr        defl    $
 537+ 3BD3             >
 537+ 3BD3             >//              ______________________________________________________________________
 537+ 3BD3             >//              Heap part
 537+ 3BD3             >
 537+ 3BD3             >
 537+ 3BD3             >                org     (Heap_Ptr & $1FFF) + $E000
 537+ EBB4             >
 537+ EBB4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 537+ EBB4             >Latest_Definition defl  Heap_Ptr
 537+ EBB4             >
 537+ EBB4             >                // dummy db directives used to calculate length of namec
 537+ EBB4 53 50 41 43 >                db      "SPACES"
 537+ EBB8 45 53       >
 537+ EBBA             >len_NFA         defl    $ - temp_NFA
 537+ EBBA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 537+ EBB4             >
 537+ EBB4 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 537+ EBB5 53 50 41 43 >                db      "SPACES"               // name string in 7-bit ascii, but
 537+ EBB9 45 53       >
 537+ EBBB             >                org     $-1                 // alter last byte of Name just above to set
 537+ EBBA D3          >                db      {b $} | END_BIT     // msb as name end
 537+ EBBB             >
 537+ EBBB A9 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 537+ EBBD             >Prev_Ptr        defl    Heap_Ptr
 537+ EBBD             >
 537+ EBBD             >mirror_Ptr      defl    $
 537+ EBBD             >
 537+ EBBD D5 3B       >                dw      Dict_Ptr + 2        // xt
 537+ EBBF             >Heap_Ptr        defl    $ - $E000           // save current HP
 537+ EBBF             >
 537+ EBBF             >Current_HP      defl  $ - $E000             // used to set HP once!
 537+ EBBF             >
 537+ EBBF             >//              ______________________________________________________________________
 537+ EBBF             >//              Dictionary part
 537+ EBBF             >
 537+ EBBF             >                org     Dict_Ptr
 537+ 3BD3             >
 537+ 3BD3 BD 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 537+ 3BD5             >
 537+ 3BD5             >SPACES:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 537+ 3BD5 CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 537+ 3BD8             >
 537+ 3BD8             >
 537+ 3BD8             >                endif           ; ok        // for other definitions it "points" the correct handler
 537+ 3BD8             >                // Use of "; ok" to suppress "warning[fwdref]"
 537+ 3BD8             >
 537+ 3BD8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 538+ 3BD8 3F 27 F3 28                  dw      ZERO, MAX
 539+ 3BDC 3F 27 A4 20                  dw      ZERO, C_Q_DO
 540+ 3BE0 08 00                        dw      Spaces_Leave - $
 541+ 3BE2              Spaces_Loop:
 542+ 3BE2 2D 29                        dw          SPACE
 543+ 3BE4 7A 20                        dw      C_LOOP
 544+ 3BE6 FC FF                        dw      Spaces_Loop - $
 545+ 3BE8              Spaces_Leave:
 546+ 3BE8 09 25                        dw      EXIT                    // ;
 547+ 3BEA
 548+ 3BEA              //  ______________________________________________________________________
 549+ 3BEA              //
 550+ 3BEA              // <#           --
 551+ 3BEA                              Colon_Def BEGIN_DASH, "<#", is_normal
 551+ 3BEA             >                New_Def  BEGIN_DASH, "<#", Enter_Ptr, is_normal ; ok
 551+ 3BEA             >
 551+ 3BEA             >Dict_Ptr        defl    $
 551+ 3BEA             >
 551+ 3BEA             >//              ______________________________________________________________________
 551+ 3BEA             >//              Heap part
 551+ 3BEA             >
 551+ 3BEA             >
 551+ 3BEA             >                org     (Heap_Ptr & $1FFF) + $E000
 551+ EBBF             >
 551+ EBBF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 551+ EBBF             >Latest_Definition defl  Heap_Ptr
 551+ EBBF             >
 551+ EBBF             >                // dummy db directives used to calculate length of namec
 551+ EBBF 3C 23       >                db      "<#"
 551+ EBC1             >len_NFA         defl    $ - temp_NFA
 551+ EBC1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 551+ EBBF             >
 551+ EBBF 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 551+ EBC0 3C 23       >                db      "<#"               // name string in 7-bit ascii, but
 551+ EBC2             >                org     $-1                 // alter last byte of Name just above to set
 551+ EBC1 A3          >                db      {b $} | END_BIT     // msb as name end
 551+ EBC2             >
 551+ EBC2 B4 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 551+ EBC4             >Prev_Ptr        defl    Heap_Ptr
 551+ EBC4             >
 551+ EBC4             >mirror_Ptr      defl    $
 551+ EBC4             >
 551+ EBC4 EC 3B       >                dw      Dict_Ptr + 2        // xt
 551+ EBC6             >Heap_Ptr        defl    $ - $E000           // save current HP
 551+ EBC6             >
 551+ EBC6             >Current_HP      defl  $ - $E000             // used to set HP once!
 551+ EBC6             >
 551+ EBC6             >//              ______________________________________________________________________
 551+ EBC6             >//              Dictionary part
 551+ EBC6             >
 551+ EBC6             >                org     Dict_Ptr
 551+ 3BEA             >
 551+ 3BEA C4 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 551+ 3BEC             >
 551+ 3BEC             >BEGIN_DASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 551+ 3BEC CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 551+ 3BEF             >
 551+ 3BEF             >
 551+ 3BEF             >                endif           ; ok        // for other definitions it "points" the correct handler
 551+ 3BEF             >                // Use of "; ok" to suppress "warning[fwdref]"
 551+ 3BEF             >
 551+ 3BEF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 552+ 3BEF 69 2D 2E 28                  dw      PAD, HLD, STORE
 552+ 3BF3 53 26
 553+ 3BF5 09 25                        dw      EXIT
 554+ 3BF7
 555+ 3BF7              //  ______________________________________________________________________
 556+ 3BF7              //
 557+ 3BF7              // #>           --
 558+ 3BF7                              Colon_Def DASH_END, "#>", is_normal
 558+ 3BF7             >                New_Def  DASH_END, "#>", Enter_Ptr, is_normal ; ok
 558+ 3BF7             >
 558+ 3BF7             >Dict_Ptr        defl    $
 558+ 3BF7             >
 558+ 3BF7             >//              ______________________________________________________________________
 558+ 3BF7             >//              Heap part
 558+ 3BF7             >
 558+ 3BF7             >
 558+ 3BF7             >                org     (Heap_Ptr & $1FFF) + $E000
 558+ EBC6             >
 558+ EBC6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 558+ EBC6             >Latest_Definition defl  Heap_Ptr
 558+ EBC6             >
 558+ EBC6             >                // dummy db directives used to calculate length of namec
 558+ EBC6 23 3E       >                db      "#>"
 558+ EBC8             >len_NFA         defl    $ - temp_NFA
 558+ EBC8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 558+ EBC6             >
 558+ EBC6 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 558+ EBC7 23 3E       >                db      "#>"               // name string in 7-bit ascii, but
 558+ EBC9             >                org     $-1                 // alter last byte of Name just above to set
 558+ EBC8 BE          >                db      {b $} | END_BIT     // msb as name end
 558+ EBC9             >
 558+ EBC9 BF 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 558+ EBCB             >Prev_Ptr        defl    Heap_Ptr
 558+ EBCB             >
 558+ EBCB             >mirror_Ptr      defl    $
 558+ EBCB             >
 558+ EBCB F9 3B       >                dw      Dict_Ptr + 2        // xt
 558+ EBCD             >Heap_Ptr        defl    $ - $E000           // save current HP
 558+ EBCD             >
 558+ EBCD             >Current_HP      defl  $ - $E000             // used to set HP once!
 558+ EBCD             >
 558+ EBCD             >//              ______________________________________________________________________
 558+ EBCD             >//              Dictionary part
 558+ EBCD             >
 558+ EBCD             >                org     Dict_Ptr
 558+ 3BF7             >
 558+ 3BF7 CB 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 558+ 3BF9             >
 558+ 3BF9             >DASH_END:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 558+ 3BF9 CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 558+ 3BFC             >
 558+ 3BFC             >
 558+ 3BFC             >                endif           ; ok        // for other definitions it "points" the correct handler
 558+ 3BFC             >                // Use of "; ok" to suppress "warning[fwdref]"
 558+ 3BFC             >
 558+ 3BFC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 559+ 3BFC 14 26                        dw      TWO_DROP
 560+ 3BFE 2E 28 49 26                  dw      HLD, FETCH, PAD, OVER, SUBTRACT
 560+ 3C02 69 2D BB 25
 560+ 3C06 A3 28
 561+ 3C08 09 25                        dw      EXIT
 562+ 3C0A
 563+ 3C0A              //  ______________________________________________________________________
 564+ 3C0A              //
 565+ 3C0A              // sign         n d -- d
 566+ 3C0A                              Colon_Def SIGN, "SIGN", is_normal
 566+ 3C0A             >                New_Def  SIGN, "SIGN", Enter_Ptr, is_normal ; ok
 566+ 3C0A             >
 566+ 3C0A             >Dict_Ptr        defl    $
 566+ 3C0A             >
 566+ 3C0A             >//              ______________________________________________________________________
 566+ 3C0A             >//              Heap part
 566+ 3C0A             >
 566+ 3C0A             >
 566+ 3C0A             >                org     (Heap_Ptr & $1FFF) + $E000
 566+ EBCD             >
 566+ EBCD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 566+ EBCD             >Latest_Definition defl  Heap_Ptr
 566+ EBCD             >
 566+ EBCD             >                // dummy db directives used to calculate length of namec
 566+ EBCD 53 49 47 4E >                db      "SIGN"
 566+ EBD1             >len_NFA         defl    $ - temp_NFA
 566+ EBD1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 566+ EBCD             >
 566+ EBCD 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 566+ EBCE 53 49 47 4E >                db      "SIGN"               // name string in 7-bit ascii, but
 566+ EBD2             >                org     $-1                 // alter last byte of Name just above to set
 566+ EBD1 CE          >                db      {b $} | END_BIT     // msb as name end
 566+ EBD2             >
 566+ EBD2 C6 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 566+ EBD4             >Prev_Ptr        defl    Heap_Ptr
 566+ EBD4             >
 566+ EBD4             >mirror_Ptr      defl    $
 566+ EBD4             >
 566+ EBD4 0C 3C       >                dw      Dict_Ptr + 2        // xt
 566+ EBD6             >Heap_Ptr        defl    $ - $E000           // save current HP
 566+ EBD6             >
 566+ EBD6             >Current_HP      defl  $ - $E000             // used to set HP once!
 566+ EBD6             >
 566+ EBD6             >//              ______________________________________________________________________
 566+ EBD6             >//              Dictionary part
 566+ EBD6             >
 566+ EBD6             >                org     Dict_Ptr
 566+ 3C0A             >
 566+ 3C0A D4 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 566+ 3C0C             >
 566+ 3C0C             >SIGN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 566+ 3C0C CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 566+ 3C0F             >
 566+ 3C0F             >
 566+ 3C0F             >                endif           ; ok        // for other definitions it "points" the correct handler
 566+ 3C0F             >                // Use of "; ok" to suppress "warning[fwdref]"
 566+ 3C0F             >
 566+ 3C0F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 567+ 3C0F 40 25                        dw      ZLESS
 568+ 3C11 8F 20                        dw      ZBRANCH
 569+ 3C13 08 00                        dw      Sign_Endif - $
 570+ 3C15 3D 20 2D 00                  dw          LIT, 45, HOLD
 570+ 3C19 56 2D
 571+ 3C1B              Sign_Endif:
 572+ 3C1B 09 25                        dw      EXIT
 573+ 3C1D
 574+ 3C1D              //  ______________________________________________________________________
 575+ 3C1D              //
 576+ 3C1D              // #           d1 -- d2
 577+ 3C1D                              Colon_Def DASH, "#", is_normal
 577+ 3C1D             >                New_Def  DASH, "#", Enter_Ptr, is_normal ; ok
 577+ 3C1D             >
 577+ 3C1D             >Dict_Ptr        defl    $
 577+ 3C1D             >
 577+ 3C1D             >//              ______________________________________________________________________
 577+ 3C1D             >//              Heap part
 577+ 3C1D             >
 577+ 3C1D             >
 577+ 3C1D             >                org     (Heap_Ptr & $1FFF) + $E000
 577+ EBD6             >
 577+ EBD6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 577+ EBD6             >Latest_Definition defl  Heap_Ptr
 577+ EBD6             >
 577+ EBD6             >                // dummy db directives used to calculate length of namec
 577+ EBD6 23          >                db      "#"
 577+ EBD7             >len_NFA         defl    $ - temp_NFA
 577+ EBD7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 577+ EBD6             >
 577+ EBD6 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 577+ EBD7 23          >                db      "#"               // name string in 7-bit ascii, but
 577+ EBD8             >                org     $-1                 // alter last byte of Name just above to set
 577+ EBD7 A3          >                db      {b $} | END_BIT     // msb as name end
 577+ EBD8             >
 577+ EBD8 CD 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 577+ EBDA             >Prev_Ptr        defl    Heap_Ptr
 577+ EBDA             >
 577+ EBDA             >mirror_Ptr      defl    $
 577+ EBDA             >
 577+ EBDA 1F 3C       >                dw      Dict_Ptr + 2        // xt
 577+ EBDC             >Heap_Ptr        defl    $ - $E000           // save current HP
 577+ EBDC             >
 577+ EBDC             >Current_HP      defl  $ - $E000             // used to set HP once!
 577+ EBDC             >
 577+ EBDC             >//              ______________________________________________________________________
 577+ EBDC             >//              Dictionary part
 577+ EBDC             >
 577+ EBDC             >                org     Dict_Ptr
 577+ 3C1D             >
 577+ 3C1D DA 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 577+ 3C1F             >
 577+ 3C1F             >DASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 577+ 3C1F CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 577+ 3C22             >
 577+ 3C22             >
 577+ 3C22             >                endif           ; ok        // for other definitions it "points" the correct handler
 577+ 3C22             >                // Use of "; ok" to suppress "warning[fwdref]"
 577+ 3C22             >
 577+ 3C22             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 578+ 3C22 10 28 49 26                  dw      BASE, FETCH
 579+ 3C26
 580+ 3C26 13 25                        dw      TO_R                    // >r           ( ud1 )
 581+ 3C28 3F 27 29 25                  dw      ZERO, R_OP, UMDIVMOD    // 0 r um/mod   ( l rem1 h/r )
 581+ 3C2C 96 24
 582+ 3C2E 1E 25 D8 25                  dw      R_TO, SWAP, TO_R        // r> swap >r   ( l rem )
 582+ 3C32 13 25
 583+ 3C34 96 24                        dw      UMDIVMOD                // um/mod       ( rem2 l/r )
 584+ 3C36 1E 25                        dw      R_TO                    // r>           ( rem2 l/r h/r )
 585+ 3C38
 586+ 3C38 E6 25                        dw      ROT
 587+ 3C3A 3D 20 09 00                  dw      LIT, 9, OVER, LESS
 587+ 3C3E BB 25 C8 28
 588+ 3C42 8F 20                        dw      ZBRANCH
 589+ 3C44 08 00                        dw      Dash_Endif - $
 590+ 3C46 3D 20 07 00                  dw          LIT, 7, PLUS
 590+ 3C4A 5B 25
 591+ 3C4C              Dash_Endif:
 592+ 3C4C
 593+ 3C4C 3D 20 30 00                  dw      LIT, 48, PLUS, HOLD
 593+ 3C50 5B 25 56 2D
 594+ 3C54 09 25                        dw      EXIT
 595+ 3C56
 596+ 3C56              //  ______________________________________________________________________
 597+ 3C56              //
 598+ 3C56              // #s           d1 -- d2
 599+ 3C56                              Colon_Def DASHES, "#S", is_normal
 599+ 3C56             >                New_Def  DASHES, "#S", Enter_Ptr, is_normal ; ok
 599+ 3C56             >
 599+ 3C56             >Dict_Ptr        defl    $
 599+ 3C56             >
 599+ 3C56             >//              ______________________________________________________________________
 599+ 3C56             >//              Heap part
 599+ 3C56             >
 599+ 3C56             >
 599+ 3C56             >                org     (Heap_Ptr & $1FFF) + $E000
 599+ EBDC             >
 599+ EBDC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 599+ EBDC             >Latest_Definition defl  Heap_Ptr
 599+ EBDC             >
 599+ EBDC             >                // dummy db directives used to calculate length of namec
 599+ EBDC 23 53       >                db      "#S"
 599+ EBDE             >len_NFA         defl    $ - temp_NFA
 599+ EBDE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 599+ EBDC             >
 599+ EBDC 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 599+ EBDD 23 53       >                db      "#S"               // name string in 7-bit ascii, but
 599+ EBDF             >                org     $-1                 // alter last byte of Name just above to set
 599+ EBDE D3          >                db      {b $} | END_BIT     // msb as name end
 599+ EBDF             >
 599+ EBDF D6 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 599+ EBE1             >Prev_Ptr        defl    Heap_Ptr
 599+ EBE1             >
 599+ EBE1             >mirror_Ptr      defl    $
 599+ EBE1             >
 599+ EBE1 58 3C       >                dw      Dict_Ptr + 2        // xt
 599+ EBE3             >Heap_Ptr        defl    $ - $E000           // save current HP
 599+ EBE3             >
 599+ EBE3             >Current_HP      defl  $ - $E000             // used to set HP once!
 599+ EBE3             >
 599+ EBE3             >//              ______________________________________________________________________
 599+ EBE3             >//              Dictionary part
 599+ EBE3             >
 599+ EBE3             >                org     Dict_Ptr
 599+ 3C56             >
 599+ 3C56 E1 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 599+ 3C58             >
 599+ 3C58             >DASHES:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 599+ 3C58 CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 599+ 3C5B             >
 599+ 3C5B             >
 599+ 3C5B             >                endif           ; ok        // for other definitions it "points" the correct handler
 599+ 3C5B             >                // Use of "; ok" to suppress "warning[fwdref]"
 599+ 3C5B             >
 599+ 3C5B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 600+ 3C5B              Dashes_Begin:
 601+ 3C5B 1F 3C 27 26                  dw      DASH, TWO_DUP
 602+ 3C5F D8 24 2E 25                  dw          OR_OP, ZEQUAL
 603+ 3C63 8F 20                        dw      ZBRANCH
 604+ 3C65 F6 FF                        dw      Dashes_Begin - $
 605+ 3C67 09 25                        dw      EXIT
 606+ 3C69
 607+ 3C69              //  ______________________________________________________________________
 608+ 3C69              //
 609+ 3C69              // d.r          d n --
 610+ 3C69                              Colon_Def D_DOT_R, "D.R", is_normal
 610+ 3C69             >                New_Def  D_DOT_R, "D.R", Enter_Ptr, is_normal ; ok
 610+ 3C69             >
 610+ 3C69             >Dict_Ptr        defl    $
 610+ 3C69             >
 610+ 3C69             >//              ______________________________________________________________________
 610+ 3C69             >//              Heap part
 610+ 3C69             >
 610+ 3C69             >
 610+ 3C69             >                org     (Heap_Ptr & $1FFF) + $E000
 610+ EBE3             >
 610+ EBE3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 610+ EBE3             >Latest_Definition defl  Heap_Ptr
 610+ EBE3             >
 610+ EBE3             >                // dummy db directives used to calculate length of namec
 610+ EBE3 44 2E 52    >                db      "D.R"
 610+ EBE6             >len_NFA         defl    $ - temp_NFA
 610+ EBE6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 610+ EBE3             >
 610+ EBE3 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 610+ EBE4 44 2E 52    >                db      "D.R"               // name string in 7-bit ascii, but
 610+ EBE7             >                org     $-1                 // alter last byte of Name just above to set
 610+ EBE6 D2          >                db      {b $} | END_BIT     // msb as name end
 610+ EBE7             >
 610+ EBE7 DC 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 610+ EBE9             >Prev_Ptr        defl    Heap_Ptr
 610+ EBE9             >
 610+ EBE9             >mirror_Ptr      defl    $
 610+ EBE9             >
 610+ EBE9 6B 3C       >                dw      Dict_Ptr + 2        // xt
 610+ EBEB             >Heap_Ptr        defl    $ - $E000           // save current HP
 610+ EBEB             >
 610+ EBEB             >Current_HP      defl  $ - $E000             // used to set HP once!
 610+ EBEB             >
 610+ EBEB             >//              ______________________________________________________________________
 610+ EBEB             >//              Dictionary part
 610+ EBEB             >
 610+ EBEB             >                org     Dict_Ptr
 610+ 3C69             >
 610+ 3C69 E9 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 610+ 3C6B             >
 610+ 3C6B             >D_DOT_R:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 610+ 3C6B CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 610+ 3C6E             >
 610+ 3C6E             >
 610+ 3C6E             >                endif           ; ok        // for other definitions it "points" the correct handler
 610+ 3C6E             >                // Use of "; ok" to suppress "warning[fwdref]"
 610+ 3C6E             >
 610+ 3C6E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 611+ 3C6E 13 25                        dw      TO_R
 612+ 3C70 CF 25 7D 34                  dw      TUCK, DABS
 613+ 3C74 EC 3B 58 3C                  dw      BEGIN_DASH, DASHES, ROT, SIGN, DASH_END
 613+ 3C78 E6 25 0C 3C
 613+ 3C7C F9 3B
 614+ 3C7E 1E 25                        dw      R_TO
 615+ 3C80 BB 25 A3 28                  dw      OVER, SUBTRACT, SPACES, TYPE
 615+ 3C84 D5 3B 26 2C
 616+ 3C88 09 25                        dw      EXIT
 617+ 3C8A
 618+ 3C8A              //  ______________________________________________________________________
 619+ 3C8A              //
 620+ 3C8A              // .r           n1 n2 --
 621+ 3C8A                              Colon_Def DOT_R, ".R", is_normal
 621+ 3C8A             >                New_Def  DOT_R, ".R", Enter_Ptr, is_normal ; ok
 621+ 3C8A             >
 621+ 3C8A             >Dict_Ptr        defl    $
 621+ 3C8A             >
 621+ 3C8A             >//              ______________________________________________________________________
 621+ 3C8A             >//              Heap part
 621+ 3C8A             >
 621+ 3C8A             >
 621+ 3C8A             >                org     (Heap_Ptr & $1FFF) + $E000
 621+ EBEB             >
 621+ EBEB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 621+ EBEB             >Latest_Definition defl  Heap_Ptr
 621+ EBEB             >
 621+ EBEB             >                // dummy db directives used to calculate length of namec
 621+ EBEB 2E 52       >                db      ".R"
 621+ EBED             >len_NFA         defl    $ - temp_NFA
 621+ EBED             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 621+ EBEB             >
 621+ EBEB 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 621+ EBEC 2E 52       >                db      ".R"               // name string in 7-bit ascii, but
 621+ EBEE             >                org     $-1                 // alter last byte of Name just above to set
 621+ EBED D2          >                db      {b $} | END_BIT     // msb as name end
 621+ EBEE             >
 621+ EBEE E3 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 621+ EBF0             >Prev_Ptr        defl    Heap_Ptr
 621+ EBF0             >
 621+ EBF0             >mirror_Ptr      defl    $
 621+ EBF0             >
 621+ EBF0 8C 3C       >                dw      Dict_Ptr + 2        // xt
 621+ EBF2             >Heap_Ptr        defl    $ - $E000           // save current HP
 621+ EBF2             >
 621+ EBF2             >Current_HP      defl  $ - $E000             // used to set HP once!
 621+ EBF2             >
 621+ EBF2             >//              ______________________________________________________________________
 621+ EBF2             >//              Dictionary part
 621+ EBF2             >
 621+ EBF2             >                org     Dict_Ptr
 621+ 3C8A             >
 621+ 3C8A F0 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 621+ 3C8C             >
 621+ 3C8C             >DOT_R:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 621+ 3C8C CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 621+ 3C8F             >
 621+ 3C8F             >
 621+ 3C8F             >                endif           ; ok        // for other definitions it "points" the correct handler
 621+ 3C8F             >                // Use of "; ok" to suppress "warning[fwdref]"
 621+ 3C8F             >
 621+ 3C8F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 622+ 3C8F 13 25                        dw      TO_R
 623+ 3C91 98 28 1E 25                  dw      S_TO_D, R_TO
 624+ 3C95 6B 3C                        dw      D_DOT_R
 625+ 3C97 09 25                        dw      EXIT
 626+ 3C99
 627+ 3C99              //  ______________________________________________________________________
 628+ 3C99              //
 629+ 3C99              // d.           d --
 630+ 3C99                              Colon_Def D_DOT, "D.", is_normal
 630+ 3C99             >                New_Def  D_DOT, "D.", Enter_Ptr, is_normal ; ok
 630+ 3C99             >
 630+ 3C99             >Dict_Ptr        defl    $
 630+ 3C99             >
 630+ 3C99             >//              ______________________________________________________________________
 630+ 3C99             >//              Heap part
 630+ 3C99             >
 630+ 3C99             >
 630+ 3C99             >                org     (Heap_Ptr & $1FFF) + $E000
 630+ EBF2             >
 630+ EBF2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 630+ EBF2             >Latest_Definition defl  Heap_Ptr
 630+ EBF2             >
 630+ EBF2             >                // dummy db directives used to calculate length of namec
 630+ EBF2 44 2E       >                db      "D."
 630+ EBF4             >len_NFA         defl    $ - temp_NFA
 630+ EBF4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 630+ EBF2             >
 630+ EBF2 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 630+ EBF3 44 2E       >                db      "D."               // name string in 7-bit ascii, but
 630+ EBF5             >                org     $-1                 // alter last byte of Name just above to set
 630+ EBF4 AE          >                db      {b $} | END_BIT     // msb as name end
 630+ EBF5             >
 630+ EBF5 EB 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 630+ EBF7             >Prev_Ptr        defl    Heap_Ptr
 630+ EBF7             >
 630+ EBF7             >mirror_Ptr      defl    $
 630+ EBF7             >
 630+ EBF7 9B 3C       >                dw      Dict_Ptr + 2        // xt
 630+ EBF9             >Heap_Ptr        defl    $ - $E000           // save current HP
 630+ EBF9             >
 630+ EBF9             >Current_HP      defl  $ - $E000             // used to set HP once!
 630+ EBF9             >
 630+ EBF9             >//              ______________________________________________________________________
 630+ EBF9             >//              Dictionary part
 630+ EBF9             >
 630+ EBF9             >                org     Dict_Ptr
 630+ 3C99             >
 630+ 3C99 F7 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 630+ 3C9B             >
 630+ 3C9B             >D_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 630+ 3C9B CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 630+ 3C9E             >
 630+ 3C9E             >
 630+ 3C9E             >                endif           ; ok        // for other definitions it "points" the correct handler
 630+ 3C9E             >                // Use of "; ok" to suppress "warning[fwdref]"
 630+ 3C9E             >
 630+ 3C9E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 631+ 3C9E 3F 27 6B 3C                  dw      ZERO, D_DOT_R, SPACE
 631+ 3CA2 2D 29
 632+ 3CA4 09 25                        dw      EXIT
 633+ 3CA6
 634+ 3CA6              //  ______________________________________________________________________
 635+ 3CA6              //
 636+ 3CA6              // .            n --
 637+ 3CA6                              Colon_Def DOT, ".", is_normal
 637+ 3CA6             >                New_Def  DOT, ".", Enter_Ptr, is_normal ; ok
 637+ 3CA6             >
 637+ 3CA6             >Dict_Ptr        defl    $
 637+ 3CA6             >
 637+ 3CA6             >//              ______________________________________________________________________
 637+ 3CA6             >//              Heap part
 637+ 3CA6             >
 637+ 3CA6             >
 637+ 3CA6             >                org     (Heap_Ptr & $1FFF) + $E000
 637+ EBF9             >
 637+ EBF9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 637+ EBF9             >Latest_Definition defl  Heap_Ptr
 637+ EBF9             >
 637+ EBF9             >                // dummy db directives used to calculate length of namec
 637+ EBF9 2E          >                db      "."
 637+ EBFA             >len_NFA         defl    $ - temp_NFA
 637+ EBFA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 637+ EBF9             >
 637+ EBF9 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 637+ EBFA 2E          >                db      "."               // name string in 7-bit ascii, but
 637+ EBFB             >                org     $-1                 // alter last byte of Name just above to set
 637+ EBFA AE          >                db      {b $} | END_BIT     // msb as name end
 637+ EBFB             >
 637+ EBFB F2 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 637+ EBFD             >Prev_Ptr        defl    Heap_Ptr
 637+ EBFD             >
 637+ EBFD             >mirror_Ptr      defl    $
 637+ EBFD             >
 637+ EBFD A8 3C       >                dw      Dict_Ptr + 2        // xt
 637+ EBFF             >Heap_Ptr        defl    $ - $E000           // save current HP
 637+ EBFF             >
 637+ EBFF             >Current_HP      defl  $ - $E000             // used to set HP once!
 637+ EBFF             >
 637+ EBFF             >//              ______________________________________________________________________
 637+ EBFF             >//              Dictionary part
 637+ EBFF             >
 637+ EBFF             >                org     Dict_Ptr
 637+ 3CA6             >
 637+ 3CA6 FD 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 637+ 3CA8             >
 637+ 3CA8             >DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 637+ 3CA8 CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 637+ 3CAB             >
 637+ 3CAB             >
 637+ 3CAB             >                endif           ; ok        // for other definitions it "points" the correct handler
 637+ 3CAB             >                // Use of "; ok" to suppress "warning[fwdref]"
 637+ 3CAB             >
 637+ 3CAB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 638+ 3CAB 98 28 9B 3C                  dw      S_TO_D, D_DOT
 639+ 3CAF 09 25                        dw      EXIT
 640+ 3CB1
 641+ 3CB1              //  ______________________________________________________________________
 642+ 3CB1              //
 643+ 3CB1              // ?            n --
 644+ 3CB1                              Colon_Def QUESTION, "?", is_normal
 644+ 3CB1             >                New_Def  QUESTION, "?", Enter_Ptr, is_normal ; ok
 644+ 3CB1             >
 644+ 3CB1             >Dict_Ptr        defl    $
 644+ 3CB1             >
 644+ 3CB1             >//              ______________________________________________________________________
 644+ 3CB1             >//              Heap part
 644+ 3CB1             >
 644+ 3CB1             >
 644+ 3CB1             >                org     (Heap_Ptr & $1FFF) + $E000
 644+ EBFF             >
 644+ EBFF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 644+ EBFF             >Latest_Definition defl  Heap_Ptr
 644+ EBFF             >
 644+ EBFF             >                // dummy db directives used to calculate length of namec
 644+ EBFF 3F          >                db      "?"
 644+ EC00             >len_NFA         defl    $ - temp_NFA
 644+ EC00             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 644+ EBFF             >
 644+ EBFF 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 644+ EC00 3F          >                db      "?"               // name string in 7-bit ascii, but
 644+ EC01             >                org     $-1                 // alter last byte of Name just above to set
 644+ EC00 BF          >                db      {b $} | END_BIT     // msb as name end
 644+ EC01             >
 644+ EC01 F9 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 644+ EC03             >Prev_Ptr        defl    Heap_Ptr
 644+ EC03             >
 644+ EC03             >mirror_Ptr      defl    $
 644+ EC03             >
 644+ EC03 B3 3C       >                dw      Dict_Ptr + 2        // xt
 644+ EC05             >Heap_Ptr        defl    $ - $E000           // save current HP
 644+ EC05             >
 644+ EC05             >Current_HP      defl  $ - $E000             // used to set HP once!
 644+ EC05             >
 644+ EC05             >//              ______________________________________________________________________
 644+ EC05             >//              Dictionary part
 644+ EC05             >
 644+ EC05             >                org     Dict_Ptr
 644+ 3CB1             >
 644+ 3CB1 03 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 644+ 3CB3             >
 644+ 3CB3             >QUESTION:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 644+ 3CB3 CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 644+ 3CB6             >
 644+ 3CB6             >
 644+ 3CB6             >                endif           ; ok        // for other definitions it "points" the correct handler
 644+ 3CB6             >                // Use of "; ok" to suppress "warning[fwdref]"
 644+ 3CB6             >
 644+ 3CB6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 645+ 3CB6 49 26 A8 3C                  dw      FETCH, DOT
 646+ 3CBA 09 25                        dw      EXIT
 647+ 3CBC
 648+ 3CBC              //  ______________________________________________________________________
 649+ 3CBC              //
 650+ 3CBC              // u.           u --
 651+ 3CBC                              Colon_Def U_DOT, "U.", is_normal
 651+ 3CBC             >                New_Def  U_DOT, "U.", Enter_Ptr, is_normal ; ok
 651+ 3CBC             >
 651+ 3CBC             >Dict_Ptr        defl    $
 651+ 3CBC             >
 651+ 3CBC             >//              ______________________________________________________________________
 651+ 3CBC             >//              Heap part
 651+ 3CBC             >
 651+ 3CBC             >
 651+ 3CBC             >                org     (Heap_Ptr & $1FFF) + $E000
 651+ EC05             >
 651+ EC05             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 651+ EC05             >Latest_Definition defl  Heap_Ptr
 651+ EC05             >
 651+ EC05             >                // dummy db directives used to calculate length of namec
 651+ EC05 55 2E       >                db      "U."
 651+ EC07             >len_NFA         defl    $ - temp_NFA
 651+ EC07             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 651+ EC05             >
 651+ EC05 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 651+ EC06 55 2E       >                db      "U."               // name string in 7-bit ascii, but
 651+ EC08             >                org     $-1                 // alter last byte of Name just above to set
 651+ EC07 AE          >                db      {b $} | END_BIT     // msb as name end
 651+ EC08             >
 651+ EC08 FF 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 651+ EC0A             >Prev_Ptr        defl    Heap_Ptr
 651+ EC0A             >
 651+ EC0A             >mirror_Ptr      defl    $
 651+ EC0A             >
 651+ EC0A BE 3C       >                dw      Dict_Ptr + 2        // xt
 651+ EC0C             >Heap_Ptr        defl    $ - $E000           // save current HP
 651+ EC0C             >
 651+ EC0C             >Current_HP      defl  $ - $E000             // used to set HP once!
 651+ EC0C             >
 651+ EC0C             >//              ______________________________________________________________________
 651+ EC0C             >//              Dictionary part
 651+ EC0C             >
 651+ EC0C             >                org     Dict_Ptr
 651+ 3CBC             >
 651+ 3CBC 0A 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 651+ 3CBE             >
 651+ 3CBE             >U_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 651+ 3CBE CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 651+ 3CC1             >
 651+ 3CC1             >
 651+ 3CC1             >                endif           ; ok        // for other definitions it "points" the correct handler
 651+ 3CC1             >                // Use of "; ok" to suppress "warning[fwdref]"
 651+ 3CC1             >
 651+ 3CC1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 652+ 3CC1 3F 27 9B 3C                  dw      ZERO, D_DOT
 653+ 3CC5 09 25                        dw      EXIT
 654+ 3CC7
 655+ 3CC7              //  ______________________________________________________________________
 656+ 3CC7              //
 657+ 3CC7              // words        --
 658+ 3CC7                              Colon_Def WORDS, "WORDS", is_normal
 658+ 3CC7             >                New_Def  WORDS, "WORDS", Enter_Ptr, is_normal ; ok
 658+ 3CC7             >
 658+ 3CC7             >Dict_Ptr        defl    $
 658+ 3CC7             >
 658+ 3CC7             >//              ______________________________________________________________________
 658+ 3CC7             >//              Heap part
 658+ 3CC7             >
 658+ 3CC7             >
 658+ 3CC7             >                org     (Heap_Ptr & $1FFF) + $E000
 658+ EC0C             >
 658+ EC0C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 658+ EC0C             >Latest_Definition defl  Heap_Ptr
 658+ EC0C             >
 658+ EC0C             >                // dummy db directives used to calculate length of namec
 658+ EC0C 57 4F 52 44 >                db      "WORDS"
 658+ EC10 53          >
 658+ EC11             >len_NFA         defl    $ - temp_NFA
 658+ EC11             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 658+ EC0C             >
 658+ EC0C 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 658+ EC0D 57 4F 52 44 >                db      "WORDS"               // name string in 7-bit ascii, but
 658+ EC11 53          >
 658+ EC12             >                org     $-1                 // alter last byte of Name just above to set
 658+ EC11 D3          >                db      {b $} | END_BIT     // msb as name end
 658+ EC12             >
 658+ EC12 05 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 658+ EC14             >Prev_Ptr        defl    Heap_Ptr
 658+ EC14             >
 658+ EC14             >mirror_Ptr      defl    $
 658+ EC14             >
 658+ EC14 C9 3C       >                dw      Dict_Ptr + 2        // xt
 658+ EC16             >Heap_Ptr        defl    $ - $E000           // save current HP
 658+ EC16             >
 658+ EC16             >Current_HP      defl  $ - $E000             // used to set HP once!
 658+ EC16             >
 658+ EC16             >//              ______________________________________________________________________
 658+ EC16             >//              Dictionary part
 658+ EC16             >
 658+ EC16             >                org     Dict_Ptr
 658+ 3CC7             >
 658+ 3CC7 14 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 658+ 3CC9             >
 658+ 3CC9             >WORDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 658+ 3CC9 CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 658+ 3CCC             >
 658+ 3CCC             >
 658+ 3CCC             >                endif           ; ok        // for other definitions it "points" the correct handler
 658+ 3CCC             >                // Use of "; ok" to suppress "warning[fwdref]"
 658+ 3CCC             >
 658+ 3CCC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 659+ 3CCC 3D 20 80 00                  dw      LIT, 128, OUT, STORE
 659+ 3CD0 EC 27 53 26
 660+ 3CD4 FE 27 49 26                  dw      CONTEXT, FETCH, FETCH
 660+ 3CD8 49 26
 661+ 3CDA              Words_Begin:
 662+ 3CDA 9E 29                        dw          FAR // Q TO HEAP
 663+ 3CDC DF 25 5E 26                  dw          DUP, CFETCH, LIT, $1F, AND_OP
 663+ 3CE0 3D 20 1F 00
 663+ 3CE4 C9 24
 664+ 3CE6 EC 27 49 26                  dw          OUT, FETCH, PLUS
 664+ 3CEA 5B 25
 665+ 3CEC 69 27 C8 28                  dw          CL, LESS, ZEQUAL
 665+ 3CF0 2E 25
 666+ 3CF2 8F 20                        dw          ZBRANCH
 667+ 3CF4 0A 00                        dw          Words_Endif - $
 668+ 3CF6 4A 22 3F 27                  dw              CR, ZERO, OUT, STORE
 668+ 3CFA EC 27 53 26
 669+ 3CFE              Words_Endif:
 670+ 3CFE DF 25 0A 30                  dw          DUP, ID_DOT
 671+ 3D02 46 27 38 29                  dw          ONE, TRAVERSE, ONE_PLUS, FETCH
 671+ 3D06 74 25 49 26
 672+ 3D0A DF 25 2E 25                  dw          DUP, ZEQUAL
 673+ 3D0E 54 23 D8 24                  dw          QTERMINAL, OR_OP
 674+ 3D12 8F 20                        dw      ZBRANCH
 675+ 3D14 C6 FF                        dw      Words_Begin - $
 676+ 3D16 C4 25                        dw      DROP
 677+ 3D18 09 25                        dw      EXIT
 678+ 3D1A
 679+ 3D1A              //  ______________________________________________________________________
 680+ 3D1A              //
 681+ 3D1A              // list         n --
 682+ 3D1A                              Colon_Def LIST, "LIST", is_normal
 682+ 3D1A             >                New_Def  LIST, "LIST", Enter_Ptr, is_normal ; ok
 682+ 3D1A             >
 682+ 3D1A             >Dict_Ptr        defl    $
 682+ 3D1A             >
 682+ 3D1A             >//              ______________________________________________________________________
 682+ 3D1A             >//              Heap part
 682+ 3D1A             >
 682+ 3D1A             >
 682+ 3D1A             >                org     (Heap_Ptr & $1FFF) + $E000
 682+ EC16             >
 682+ EC16             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 682+ EC16             >Latest_Definition defl  Heap_Ptr
 682+ EC16             >
 682+ EC16             >                // dummy db directives used to calculate length of namec
 682+ EC16 4C 49 53 54 >                db      "LIST"
 682+ EC1A             >len_NFA         defl    $ - temp_NFA
 682+ EC1A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 682+ EC16             >
 682+ EC16 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 682+ EC17 4C 49 53 54 >                db      "LIST"               // name string in 7-bit ascii, but
 682+ EC1B             >                org     $-1                 // alter last byte of Name just above to set
 682+ EC1A D4          >                db      {b $} | END_BIT     // msb as name end
 682+ EC1B             >
 682+ EC1B 0C 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 682+ EC1D             >Prev_Ptr        defl    Heap_Ptr
 682+ EC1D             >
 682+ EC1D             >mirror_Ptr      defl    $
 682+ EC1D             >
 682+ EC1D 1C 3D       >                dw      Dict_Ptr + 2        // xt
 682+ EC1F             >Heap_Ptr        defl    $ - $E000           // save current HP
 682+ EC1F             >
 682+ EC1F             >Current_HP      defl  $ - $E000             // used to set HP once!
 682+ EC1F             >
 682+ EC1F             >//              ______________________________________________________________________
 682+ EC1F             >//              Dictionary part
 682+ EC1F             >
 682+ EC1F             >                org     Dict_Ptr
 682+ 3D1A             >
 682+ 3D1A 1D 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 682+ 3D1C             >
 682+ 3D1C             >LIST:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 682+ 3D1C CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 682+ 3D1F             >
 682+ 3D1F             >
 682+ 3D1F             >                endif           ; ok        // for other definitions it "points" the correct handler
 682+ 3D1F             >                // Use of "; ok" to suppress "warning[fwdref]"
 682+ 3D1F             >
 682+ 3D1F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 683+ 3D1F 6F 2B 4A 22                  dw      DECIMAL, CR
 684+ 3D23 DF 25 F2 27                  dw      DUP, SCR, STORE
 684+ 3D27 53 26
 685+ 3D29 C3 2D                        dw      C_DOT_QUOTE
 686+ 3D2B 05 53 63 72                  db      5, "Scr# "
 686+ 3D2F 23 20
 687+ 3D31 A8 3C                        dw      DOT
 688+ 3D33 7E 27 3F 27                  dw      LSCR, ZERO, C_DO
 688+ 3D37 CC 20
 689+ 3D39              List_Loop:
 690+ 3D39 4A 22                        dw          CR
 691+ 3D3B D2 20 54 27                  dw          I, THREE
 692+ 3D3F 8C 3C 2D 29                  dw          DOT_R, SPACE
 693+ 3D43 D2 20 F2 27                  dw          I, SCR, FETCH, DOT_LINE
 693+ 3D47 49 26 78 35
 694+ 3D4B 54 23                        dw          QTERMINAL
 695+ 3D4D 8F 20                        dw          ZBRANCH
 696+ 3D4F 06 00                        dw          List_Endif - $
 697+ 3D51 9A 20                        dw              C_LEAVE
 698+ 3D53 06 00                        dw              List_Leave - $
 699+ 3D55              List_Endif:
 700+ 3D55 7A 20                        dw      C_LOOP
 701+ 3D57 E2 FF                        dw      List_Loop - $
 702+ 3D59              List_Leave:
 703+ 3D59 4A 22                        dw      CR
 704+ 3D5B 09 25                        dw      EXIT
 705+ 3D5D
 706+ 3D5D              //  ______________________________________________________________________
 707+ 3D5D              //
 708+ 3D5D              // index        n1 n2 --
 709+ 3D5D                              Colon_Def INDEX, "INDEX", is_normal
 709+ 3D5D             >                New_Def  INDEX, "INDEX", Enter_Ptr, is_normal ; ok
 709+ 3D5D             >
 709+ 3D5D             >Dict_Ptr        defl    $
 709+ 3D5D             >
 709+ 3D5D             >//              ______________________________________________________________________
 709+ 3D5D             >//              Heap part
 709+ 3D5D             >
 709+ 3D5D             >
 709+ 3D5D             >                org     (Heap_Ptr & $1FFF) + $E000
 709+ EC1F             >
 709+ EC1F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 709+ EC1F             >Latest_Definition defl  Heap_Ptr
 709+ EC1F             >
 709+ EC1F             >                // dummy db directives used to calculate length of namec
 709+ EC1F 49 4E 44 45 >                db      "INDEX"
 709+ EC23 58          >
 709+ EC24             >len_NFA         defl    $ - temp_NFA
 709+ EC24             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 709+ EC1F             >
 709+ EC1F 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 709+ EC20 49 4E 44 45 >                db      "INDEX"               // name string in 7-bit ascii, but
 709+ EC24 58          >
 709+ EC25             >                org     $-1                 // alter last byte of Name just above to set
 709+ EC24 D8          >                db      {b $} | END_BIT     // msb as name end
 709+ EC25             >
 709+ EC25 16 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 709+ EC27             >Prev_Ptr        defl    Heap_Ptr
 709+ EC27             >
 709+ EC27             >mirror_Ptr      defl    $
 709+ EC27             >
 709+ EC27 5F 3D       >                dw      Dict_Ptr + 2        // xt
 709+ EC29             >Heap_Ptr        defl    $ - $E000           // save current HP
 709+ EC29             >
 709+ EC29             >Current_HP      defl  $ - $E000             // used to set HP once!
 709+ EC29             >
 709+ EC29             >//              ______________________________________________________________________
 709+ EC29             >//              Dictionary part
 709+ EC29             >
 709+ EC29             >                org     Dict_Ptr
 709+ 3D5D             >
 709+ 3D5D 27 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 709+ 3D5F             >
 709+ 3D5F             >INDEX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 709+ 3D5F CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 709+ 3D62             >
 709+ 3D62             >
 709+ 3D62             >                endif           ; ok        // for other definitions it "points" the correct handler
 709+ 3D62             >                // Use of "; ok" to suppress "warning[fwdref]"
 709+ 3D62             >
 709+ 3D62             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 710+ 3D62 74 25 D8 25                  dw      ONE_PLUS, SWAP, C_DO
 710+ 3D66 CC 20
 711+ 3D68              Index_Loop:
 712+ 3D68 4A 22 D2 20                  dw          CR, I, THREE
 712+ 3D6C 54 27
 713+ 3D6E 8C 3C 2D 29                  dw          DOT_R, SPACE
 714+ 3D72 3F 27 D2 20                  dw          ZERO, I, DOT_LINE
 714+ 3D76 78 35
 715+ 3D78 54 23                        dw          QTERMINAL
 716+ 3D7A 8F 20                        dw          ZBRANCH
 717+ 3D7C 06 00                        dw          Index_Endif - $
 718+ 3D7E 9A 20                        dw              C_LEAVE
 719+ 3D80 06 00                        dw              Index_Leave - $
 720+ 3D82              Index_Endif:
 721+ 3D82 7A 20                        dw      C_LOOP
 722+ 3D84 E4 FF                        dw      Index_Loop - $
 723+ 3D86              Index_Leave:
 724+ 3D86 4A 22                        dw      CR
 725+ 3D88 09 25                        dw      EXIT
 726+ 3D8A
 727+ 3D8A              //  ______________________________________________________________________
 728+ 3D8A              //
 729+ 3D8A              // cls          --
 730+ 3D8A                              Colon_Def CLS, "CLS", is_normal
 730+ 3D8A             >                New_Def  CLS, "CLS", Enter_Ptr, is_normal ; ok
 730+ 3D8A             >
 730+ 3D8A             >Dict_Ptr        defl    $
 730+ 3D8A             >
 730+ 3D8A             >//              ______________________________________________________________________
 730+ 3D8A             >//              Heap part
 730+ 3D8A             >
 730+ 3D8A             >
 730+ 3D8A             >                org     (Heap_Ptr & $1FFF) + $E000
 730+ EC29             >
 730+ EC29             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 730+ EC29             >Latest_Definition defl  Heap_Ptr
 730+ EC29             >
 730+ EC29             >                // dummy db directives used to calculate length of namec
 730+ EC29 43 4C 53    >                db      "CLS"
 730+ EC2C             >len_NFA         defl    $ - temp_NFA
 730+ EC2C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 730+ EC29             >
 730+ EC29 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 730+ EC2A 43 4C 53    >                db      "CLS"               // name string in 7-bit ascii, but
 730+ EC2D             >                org     $-1                 // alter last byte of Name just above to set
 730+ EC2C D3          >                db      {b $} | END_BIT     // msb as name end
 730+ EC2D             >
 730+ EC2D 1F 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 730+ EC2F             >Prev_Ptr        defl    Heap_Ptr
 730+ EC2F             >
 730+ EC2F             >mirror_Ptr      defl    $
 730+ EC2F             >
 730+ EC2F 8C 3D       >                dw      Dict_Ptr + 2        // xt
 730+ EC31             >Heap_Ptr        defl    $ - $E000           // save current HP
 730+ EC31             >
 730+ EC31             >Current_HP      defl  $ - $E000             // used to set HP once!
 730+ EC31             >
 730+ EC31             >//              ______________________________________________________________________
 730+ EC31             >//              Dictionary part
 730+ EC31             >
 730+ EC31             >                org     Dict_Ptr
 730+ 3D8A             >
 730+ 3D8A 2F 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 730+ 3D8C             >
 730+ 3D8C             >CLS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 730+ 3D8C CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 730+ 3D8F             >
 730+ 3D8F             >
 730+ 3D8F             >                endif           ; ok        // for other definitions it "points" the correct handler
 730+ 3D8F             >                // Use of "; ok" to suppress "warning[fwdref]"
 730+ 3D8F             >
 730+ 3D8F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 731+ 3D8F 3D 20 0E 00                  dw      LIT, $0E, EMITC
 731+ 3D93 39 22
 732+ 3D95 09 25                        dw      EXIT
 733+ 3D97
 734+ 3D97              //  ______________________________________________________________________
 735+ 3D97              //
 736+ 3D97              // splash       --
 737+ 3D97              //              Colon_Def SPLASH, "SPLASH", is_normal
 738+ 3D97              //              dw      CLS
 739+ 3D97              //              dw      C_DOT_QUOTE
 740+ 3D97              //              db      87
 741+ 3D97              //              db      "v-Forth 1.7 NextZXOS version", 13    // 29
 742+ 3D97              //              db      "Heap Vocabulary - build 20240420", 13  // 33
 743+ 3D97              //              db      "1990-2024 Matteo Vitturi", 13        // 25
 744+ 3D97              //              dw      EXIT
 745+ 3D97
 746+ 3D97              //  ______________________________________________________________________
 747+ 3D97              //
 748+ 3D97              // splash       --
 749+ 3D97                              Colon_Def SPLASH, "SPLASH", is_normal
 749+ 3D97             >                New_Def  SPLASH, "SPLASH", Enter_Ptr, is_normal ; ok
 749+ 3D97             >
 749+ 3D97             >Dict_Ptr        defl    $
 749+ 3D97             >
 749+ 3D97             >//              ______________________________________________________________________
 749+ 3D97             >//              Heap part
 749+ 3D97             >
 749+ 3D97             >
 749+ 3D97             >                org     (Heap_Ptr & $1FFF) + $E000
 749+ EC31             >
 749+ EC31             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 749+ EC31             >Latest_Definition defl  Heap_Ptr
 749+ EC31             >
 749+ EC31             >                // dummy db directives used to calculate length of namec
 749+ EC31 53 50 4C 41 >                db      "SPLASH"
 749+ EC35 53 48       >
 749+ EC37             >len_NFA         defl    $ - temp_NFA
 749+ EC37             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 749+ EC31             >
 749+ EC31 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 749+ EC32 53 50 4C 41 >                db      "SPLASH"               // name string in 7-bit ascii, but
 749+ EC36 53 48       >
 749+ EC38             >                org     $-1                 // alter last byte of Name just above to set
 749+ EC37 C8          >                db      {b $} | END_BIT     // msb as name end
 749+ EC38             >
 749+ EC38 29 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 749+ EC3A             >Prev_Ptr        defl    Heap_Ptr
 749+ EC3A             >
 749+ EC3A             >mirror_Ptr      defl    $
 749+ EC3A             >
 749+ EC3A 99 3D       >                dw      Dict_Ptr + 2        // xt
 749+ EC3C             >Heap_Ptr        defl    $ - $E000           // save current HP
 749+ EC3C             >
 749+ EC3C             >Current_HP      defl  $ - $E000             // used to set HP once!
 749+ EC3C             >
 749+ EC3C             >//              ______________________________________________________________________
 749+ EC3C             >//              Dictionary part
 749+ EC3C             >
 749+ EC3C             >                org     Dict_Ptr
 749+ 3D97             >
 749+ 3D97 3A 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 749+ 3D99             >
 749+ 3D99             >SPLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 749+ 3D99 CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 749+ 3D9C             >
 749+ 3D9C             >
 749+ 3D9C             >                endif           ; ok        // for other definitions it "points" the correct handler
 749+ 3D9C             >                // Use of "; ok" to suppress "warning[fwdref]"
 749+ 3D9C             >
 749+ 3D9C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 750+ 3D9C 8C 3D                        dw      CLS
 751+ 3D9E 3D 20 02 00                  dw      LIT, Splash_Ptr
 752+ 3DA2 9E 29                        dw      FAR
 753+ 3DA4 D2 2B 26 2C                  dw      COUNT, TYPE
 754+ 3DA8 09 25                        dw      EXIT
 755+ 3DAA
 756+ 3DAA              //  ______________________________________________________________________
 757+ 3DAA              //
 758+ 3DAA              // video        --
 759+ 3DAA                              Colon_Def VIDEO, "VIDEO", is_normal
 759+ 3DAA             >                New_Def  VIDEO, "VIDEO", Enter_Ptr, is_normal ; ok
 759+ 3DAA             >
 759+ 3DAA             >Dict_Ptr        defl    $
 759+ 3DAA             >
 759+ 3DAA             >//              ______________________________________________________________________
 759+ 3DAA             >//              Heap part
 759+ 3DAA             >
 759+ 3DAA             >
 759+ 3DAA             >                org     (Heap_Ptr & $1FFF) + $E000
 759+ EC3C             >
 759+ EC3C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 759+ EC3C             >Latest_Definition defl  Heap_Ptr
 759+ EC3C             >
 759+ EC3C             >                // dummy db directives used to calculate length of namec
 759+ EC3C 56 49 44 45 >                db      "VIDEO"
 759+ EC40 4F          >
 759+ EC41             >len_NFA         defl    $ - temp_NFA
 759+ EC41             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 759+ EC3C             >
 759+ EC3C 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 759+ EC3D 56 49 44 45 >                db      "VIDEO"               // name string in 7-bit ascii, but
 759+ EC41 4F          >
 759+ EC42             >                org     $-1                 // alter last byte of Name just above to set
 759+ EC41 CF          >                db      {b $} | END_BIT     // msb as name end
 759+ EC42             >
 759+ EC42 31 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 759+ EC44             >Prev_Ptr        defl    Heap_Ptr
 759+ EC44             >
 759+ EC44             >mirror_Ptr      defl    $
 759+ EC44             >
 759+ EC44 AC 3D       >                dw      Dict_Ptr + 2        // xt
 759+ EC46             >Heap_Ptr        defl    $ - $E000           // save current HP
 759+ EC46             >
 759+ EC46             >Current_HP      defl  $ - $E000             // used to set HP once!
 759+ EC46             >
 759+ EC46             >//              ______________________________________________________________________
 759+ EC46             >//              Dictionary part
 759+ EC46             >
 759+ EC46             >                org     Dict_Ptr
 759+ 3DAA             >
 759+ 3DAA 44 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 759+ 3DAC             >
 759+ 3DAC             >VIDEO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 759+ 3DAC CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 759+ 3DAF             >
 759+ 3DAF             >
 759+ 3DAF             >                endif           ; ok        // for other definitions it "points" the correct handler
 759+ 3DAF             >                // Use of "; ok" to suppress "warning[fwdref]"
 759+ 3DAF             >
 759+ 3DAF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 760+ 3DAF 4D 27 DF 25                  dw      TWO, DUP, DEVICE, STORE
 760+ 3DB3 AD 35 53 26
 761+ 3DB7 68 23                        dw      SELECT
 762+ 3DB9 09 25                        dw      EXIT
 763+ 3DBB
 764+ 3DBB              //  ______________________________________________________________________
 765+ 3DBB              //
 766+ 3DBB              // autoexec     --
 767+ 3DBB              // this word is called the first time the Forth system boot to
 768+ 3DBB              // load Screen# 1. Once called it patches itself to prevent furhter runs.
 769+ 3DBB                              Colon_Def AUTOEXEC, "AUTOEXEC", is_normal
 769+ 3DBB             >                New_Def  AUTOEXEC, "AUTOEXEC", Enter_Ptr, is_normal ; ok
 769+ 3DBB             >
 769+ 3DBB             >Dict_Ptr        defl    $
 769+ 3DBB             >
 769+ 3DBB             >//              ______________________________________________________________________
 769+ 3DBB             >//              Heap part
 769+ 3DBB             >
 769+ 3DBB             >
 769+ 3DBB             >                org     (Heap_Ptr & $1FFF) + $E000
 769+ EC46             >
 769+ EC46             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 769+ EC46             >Latest_Definition defl  Heap_Ptr
 769+ EC46             >
 769+ EC46             >                // dummy db directives used to calculate length of namec
 769+ EC46 41 55 54 4F >                db      "AUTOEXEC"
 769+ EC4A 45 58 45 43 >
 769+ EC4E             >len_NFA         defl    $ - temp_NFA
 769+ EC4E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 769+ EC46             >
 769+ EC46 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 769+ EC47 41 55 54 4F >                db      "AUTOEXEC"               // name string in 7-bit ascii, but
 769+ EC4B 45 58 45 43 >
 769+ EC4F             >                org     $-1                 // alter last byte of Name just above to set
 769+ EC4E C3          >                db      {b $} | END_BIT     // msb as name end
 769+ EC4F             >
 769+ EC4F 3C 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 769+ EC51             >Prev_Ptr        defl    Heap_Ptr
 769+ EC51             >
 769+ EC51             >mirror_Ptr      defl    $
 769+ EC51             >
 769+ EC51 BD 3D       >                dw      Dict_Ptr + 2        // xt
 769+ EC53             >Heap_Ptr        defl    $ - $E000           // save current HP
 769+ EC53             >
 769+ EC53             >Current_HP      defl  $ - $E000             // used to set HP once!
 769+ EC53             >
 769+ EC53             >//              ______________________________________________________________________
 769+ EC53             >//              Dictionary part
 769+ EC53             >
 769+ EC53             >                org     Dict_Ptr
 769+ 3DBB             >
 769+ 3DBB 51 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 769+ 3DBD             >
 769+ 3DBD             >AUTOEXEC:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 769+ 3DBD CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 769+ 3DC0             >
 769+ 3DC0             >
 769+ 3DC0             >                endif           ; ok        // for other definitions it "points" the correct handler
 769+ 3DC0             >                // Use of "; ok" to suppress "warning[fwdref]"
 769+ 3DC0             >
 769+ 3DC0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 770+ 3DC0              Autoexec_Self:
 771+ 3DC0 3D 20 7B 39                  dw      LIT, Param
 772+ 3DC4 69 2D 46 27                  dw      PAD, ONE
 773+ 3DC8 0B 24                        dw      F_OPEN
 774+ 3DCA C4 25                        dw      DROP
 775+ 3DCC 58 38                        dw      F_INCLUDE
 776+ 3DCE 20 32                        dw      QUIT
 777+ 3DD0 3D 20 20 32                  dw      LIT, QUIT
 778+ 3DD4 3D 20 C0 3D                  dw      LIT, Autoexec_Self
 779+ 3DD8 53 26                        dw      STORE
 780+ 3DDA 09 25                        dw      EXIT
 781+ 3DDC
 782+ 3DDC
 783+ 3DDC              //  ______________________________________________________________________
 784+ 3DDC              //
 785+ 3DDC              // bye     --
 786+ 3DDC              //
 787+ 3DDC                              Colon_Def BYE, "BYE", is_normal
 787+ 3DDC             >                New_Def  BYE, "BYE", Enter_Ptr, is_normal ; ok
 787+ 3DDC             >
 787+ 3DDC             >Dict_Ptr        defl    $
 787+ 3DDC             >
 787+ 3DDC             >//              ______________________________________________________________________
 787+ 3DDC             >//              Heap part
 787+ 3DDC             >
 787+ 3DDC             >
 787+ 3DDC             >                org     (Heap_Ptr & $1FFF) + $E000
 787+ EC53             >
 787+ EC53             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 787+ EC53             >Latest_Definition defl  Heap_Ptr
 787+ EC53             >
 787+ EC53             >                // dummy db directives used to calculate length of namec
 787+ EC53 42 59 45    >                db      "BYE"
 787+ EC56             >len_NFA         defl    $ - temp_NFA
 787+ EC56             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 787+ EC53             >
 787+ EC53 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 787+ EC54 42 59 45    >                db      "BYE"               // name string in 7-bit ascii, but
 787+ EC57             >                org     $-1                 // alter last byte of Name just above to set
 787+ EC56 C5          >                db      {b $} | END_BIT     // msb as name end
 787+ EC57             >
 787+ EC57 46 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 787+ EC59             >Prev_Ptr        defl    Heap_Ptr
 787+ EC59             >
 787+ EC59             >mirror_Ptr      defl    $
 787+ EC59             >
 787+ EC59 DE 3D       >                dw      Dict_Ptr + 2        // xt
 787+ EC5B             >Heap_Ptr        defl    $ - $E000           // save current HP
 787+ EC5B             >
 787+ EC5B             >Current_HP      defl  $ - $E000             // used to set HP once!
 787+ EC5B             >
 787+ EC5B             >//              ______________________________________________________________________
 787+ EC5B             >//              Dictionary part
 787+ EC5B             >
 787+ EC5B             >                org     Dict_Ptr
 787+ 3DDC             >
 787+ 3DDC 59 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 787+ 3DDE             >
 787+ 3DDE             >BYE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 787+ 3DDE CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 787+ 3DE1             >
 787+ 3DE1             >
 787+ 3DE1             >                endif           ; ok        // for other definitions it "points" the correct handler
 787+ 3DE1             >                // Use of "; ok" to suppress "warning[fwdref]"
 787+ 3DE1             >
 787+ 3DE1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 788+ 3DE1 9E 37                        dw      FLUSH
 789+ 3DE3 EC 36                        dw      EMPTY_BUFFERS
 790+ 3DE5 68 3F 49 26                  dw      BLK_FH, FETCH, F_CLOSE, DROP
 790+ 3DE9 A3 23 C4 25
 791+ 3DED 3F 27 85 27                  dw      ZERO, PLUS_ORIGIN
 792+ 3DF1 0D 34                        dw      BASIC
 793+ 3DF3
 794+ 3DF3              //  ______________________________________________________________________
 795+ 3DF3              //
 796+ 3DF3              // invv     --
 797+ 3DF3              //
 798+ 3DF3              //              Colon_Def INVV, "INVV", is_normal
 799+ 3DF3              //              dw      LIT, 20, EMITC, ONE, EMITC
 800+ 3DF3              //              dw      EXIT
 801+ 3DF3
 802+ 3DF3              //  ______________________________________________________________________
 803+ 3DF3              //
 804+ 3DF3              // truv     --
 805+ 3DF3              //
 806+ 3DF3              //              Colon_Def TRUV, "TRUV", is_normal
 807+ 3DF3              //              dw      LIT, 20, EMITC, ZERO, EMITC
 808+ 3DF3              //              dw      EXIT
 809+ 3DF3
 810+ 3DF3              //  ______________________________________________________________________
 811+ 3DF3              //
 812+ 3DF3              // mark     --
 813+ 3DF3              //
 814+ 3DF3              //              Colon_Def MARK, "MARK", is_normal
 815+ 3DF3              //              dw      INVV, TYPE, TRUV
 816+ 3DF3              //              dw      EXIT
 817+ 3DF3
 818+ 3DF3              //  ______________________________________________________________________
 819+ 3DF3              //
 820+ 3DF3              // back     --
 821+ 3DF3              //
 822+ 3DF3                              Colon_Def BACK, "BACK", is_normal
 822+ 3DF3             >                New_Def  BACK, "BACK", Enter_Ptr, is_normal ; ok
 822+ 3DF3             >
 822+ 3DF3             >Dict_Ptr        defl    $
 822+ 3DF3             >
 822+ 3DF3             >//              ______________________________________________________________________
 822+ 3DF3             >//              Heap part
 822+ 3DF3             >
 822+ 3DF3             >
 822+ 3DF3             >                org     (Heap_Ptr & $1FFF) + $E000
 822+ EC5B             >
 822+ EC5B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 822+ EC5B             >Latest_Definition defl  Heap_Ptr
 822+ EC5B             >
 822+ EC5B             >                // dummy db directives used to calculate length of namec
 822+ EC5B 42 41 43 4B >                db      "BACK"
 822+ EC5F             >len_NFA         defl    $ - temp_NFA
 822+ EC5F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 822+ EC5B             >
 822+ EC5B 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 822+ EC5C 42 41 43 4B >                db      "BACK"               // name string in 7-bit ascii, but
 822+ EC60             >                org     $-1                 // alter last byte of Name just above to set
 822+ EC5F CB          >                db      {b $} | END_BIT     // msb as name end
 822+ EC60             >
 822+ EC60 53 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 822+ EC62             >Prev_Ptr        defl    Heap_Ptr
 822+ EC62             >
 822+ EC62             >mirror_Ptr      defl    $
 822+ EC62             >
 822+ EC62 F5 3D       >                dw      Dict_Ptr + 2        // xt
 822+ EC64             >Heap_Ptr        defl    $ - $E000           // save current HP
 822+ EC64             >
 822+ EC64             >Current_HP      defl  $ - $E000             // used to set HP once!
 822+ EC64             >
 822+ EC64             >//              ______________________________________________________________________
 822+ EC64             >//              Dictionary part
 822+ EC64             >
 822+ EC64             >                org     Dict_Ptr
 822+ 3DF3             >
 822+ 3DF3 62 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 822+ 3DF5             >
 822+ 3DF5             >BACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 822+ 3DF5 CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 822+ 3DF8             >
 822+ 3DF8             >
 822+ 3DF8             >                endif           ; ok        // for other definitions it "points" the correct handler
 822+ 3DF8             >                // Use of "; ok" to suppress "warning[fwdref]"
 822+ 3DF8             >
 822+ 3DF8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 823+ 3DF8 64 28 A3 28                  dw      HERE, SUBTRACT, COMMA
 823+ 3DFC 7A 28
 824+ 3DFE 09 25                        dw      EXIT
 825+ 3E00
 826+ 3E00              //  ______________________________________________________________________
 827+ 3E00              //
 828+ 3E00              // if          ( -- a 2 ) \ compile-time
 829+ 3E00              // IF ... THEN
 830+ 3E00              // IF ... ELSE ... ENDIF
 831+ 3E00                              Colon_Def IF, "IF", is_immediate
 831+ 3E00             >                New_Def  IF, "IF", Enter_Ptr, is_immediate ; ok
 831+ 3E00             >
 831+ 3E00             >Dict_Ptr        defl    $
 831+ 3E00             >
 831+ 3E00             >//              ______________________________________________________________________
 831+ 3E00             >//              Heap part
 831+ 3E00             >
 831+ 3E00             >
 831+ 3E00             >                org     (Heap_Ptr & $1FFF) + $E000
 831+ EC64             >
 831+ EC64             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 831+ EC64             >Latest_Definition defl  Heap_Ptr
 831+ EC64             >
 831+ EC64             >                // dummy db directives used to calculate length of namec
 831+ EC64 49 46       >                db      "IF"
 831+ EC66             >len_NFA         defl    $ - temp_NFA
 831+ EC66             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 831+ EC64             >
 831+ EC64 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 831+ EC65 49 46       >                db      "IF"               // name string in 7-bit ascii, but
 831+ EC67             >                org     $-1                 // alter last byte of Name just above to set
 831+ EC66 C6          >                db      {b $} | END_BIT     // msb as name end
 831+ EC67             >
 831+ EC67 5B 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 831+ EC69             >Prev_Ptr        defl    Heap_Ptr
 831+ EC69             >
 831+ EC69             >mirror_Ptr      defl    $
 831+ EC69             >
 831+ EC69 02 3E       >                dw      Dict_Ptr + 2        // xt
 831+ EC6B             >Heap_Ptr        defl    $ - $E000           // save current HP
 831+ EC6B             >
 831+ EC6B             >Current_HP      defl  $ - $E000             // used to set HP once!
 831+ EC6B             >
 831+ EC6B             >//              ______________________________________________________________________
 831+ EC6B             >//              Dictionary part
 831+ EC6B             >
 831+ EC6B             >                org     Dict_Ptr
 831+ 3E00             >
 831+ 3E00 69 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 831+ 3E02             >
 831+ 3E02             >IF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 831+ 3E02 CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 831+ 3E05             >
 831+ 3E05             >
 831+ 3E05             >                endif           ; ok        // for other definitions it "points" the correct handler
 831+ 3E05             >                // Use of "; ok" to suppress "warning[fwdref]"
 831+ 3E05             >
 831+ 3E05             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 832+ 3E05 08 2B 8F 20                  dw      COMPILE, ZBRANCH
 833+ 3E09 64 28 3F 27                  dw      HERE, ZERO, COMMA
 833+ 3E0D 7A 28
 834+ 3E0F 4D 27                        dw      TWO
 835+ 3E11 09 25                        dw      EXIT
 836+ 3E13
 837+ 3E13              //  ______________________________________________________________________
 838+ 3E13              //
 839+ 3E13              // then        ( a 2 -- ) \ compile-time
 840+ 3E13              //
 841+ 3E13                              Colon_Def THEN, "THEN", is_immediate
 841+ 3E13             >                New_Def  THEN, "THEN", Enter_Ptr, is_immediate ; ok
 841+ 3E13             >
 841+ 3E13             >Dict_Ptr        defl    $
 841+ 3E13             >
 841+ 3E13             >//              ______________________________________________________________________
 841+ 3E13             >//              Heap part
 841+ 3E13             >
 841+ 3E13             >
 841+ 3E13             >                org     (Heap_Ptr & $1FFF) + $E000
 841+ EC6B             >
 841+ EC6B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 841+ EC6B             >Latest_Definition defl  Heap_Ptr
 841+ EC6B             >
 841+ EC6B             >                // dummy db directives used to calculate length of namec
 841+ EC6B 54 48 45 4E >                db      "THEN"
 841+ EC6F             >len_NFA         defl    $ - temp_NFA
 841+ EC6F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 841+ EC6B             >
 841+ EC6B C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 841+ EC6C 54 48 45 4E >                db      "THEN"               // name string in 7-bit ascii, but
 841+ EC70             >                org     $-1                 // alter last byte of Name just above to set
 841+ EC6F CE          >                db      {b $} | END_BIT     // msb as name end
 841+ EC70             >
 841+ EC70 64 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 841+ EC72             >Prev_Ptr        defl    Heap_Ptr
 841+ EC72             >
 841+ EC72             >mirror_Ptr      defl    $
 841+ EC72             >
 841+ EC72 15 3E       >                dw      Dict_Ptr + 2        // xt
 841+ EC74             >Heap_Ptr        defl    $ - $E000           // save current HP
 841+ EC74             >
 841+ EC74             >Current_HP      defl  $ - $E000             // used to set HP once!
 841+ EC74             >
 841+ EC74             >//              ______________________________________________________________________
 841+ EC74             >//              Dictionary part
 841+ EC74             >
 841+ EC74             >                org     Dict_Ptr
 841+ 3E13             >
 841+ 3E13 72 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 841+ 3E15             >
 841+ 3E15             >THEN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 841+ 3E15 CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 841+ 3E18             >
 841+ 3E18             >
 841+ 3E18             >                endif           ; ok        // for other definitions it "points" the correct handler
 841+ 3E18             >                // Use of "; ok" to suppress "warning[fwdref]"
 841+ 3E18             >
 841+ 3E18             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 842+ 3E18 AD 2A                        dw      QCOMP
 843+ 3E1A 4D 27 D1 2A                  dw      TWO, QPAIRS
 844+ 3E1E 64 28 BB 25                  dw      HERE, OVER, SUBTRACT, SWAP, STORE
 844+ 3E22 A3 28 D8 25
 844+ 3E26 53 26
 845+ 3E28 09 25                        dw      EXIT
 846+ 3E2A
 847+ 3E2A              //  ______________________________________________________________________
 848+ 3E2A              //
 849+ 3E2A              // endif       ( a 2 -- ) \ compile-time
 850+ 3E2A              //
 851+ 3E2A                              Colon_Def ENDIF, "ENDIF", is_immediate
 851+ 3E2A             >                New_Def  ENDIF, "ENDIF", Enter_Ptr, is_immediate ; ok
 851+ 3E2A             >
 851+ 3E2A             >Dict_Ptr        defl    $
 851+ 3E2A             >
 851+ 3E2A             >//              ______________________________________________________________________
 851+ 3E2A             >//              Heap part
 851+ 3E2A             >
 851+ 3E2A             >
 851+ 3E2A             >                org     (Heap_Ptr & $1FFF) + $E000
 851+ EC74             >
 851+ EC74             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 851+ EC74             >Latest_Definition defl  Heap_Ptr
 851+ EC74             >
 851+ EC74             >                // dummy db directives used to calculate length of namec
 851+ EC74 45 4E 44 49 >                db      "ENDIF"
 851+ EC78 46          >
 851+ EC79             >len_NFA         defl    $ - temp_NFA
 851+ EC79             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 851+ EC74             >
 851+ EC74 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 851+ EC75 45 4E 44 49 >                db      "ENDIF"               // name string in 7-bit ascii, but
 851+ EC79 46          >
 851+ EC7A             >                org     $-1                 // alter last byte of Name just above to set
 851+ EC79 C6          >                db      {b $} | END_BIT     // msb as name end
 851+ EC7A             >
 851+ EC7A 6B 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 851+ EC7C             >Prev_Ptr        defl    Heap_Ptr
 851+ EC7C             >
 851+ EC7C             >mirror_Ptr      defl    $
 851+ EC7C             >
 851+ EC7C 2C 3E       >                dw      Dict_Ptr + 2        // xt
 851+ EC7E             >Heap_Ptr        defl    $ - $E000           // save current HP
 851+ EC7E             >
 851+ EC7E             >Current_HP      defl  $ - $E000             // used to set HP once!
 851+ EC7E             >
 851+ EC7E             >//              ______________________________________________________________________
 851+ EC7E             >//              Dictionary part
 851+ EC7E             >
 851+ EC7E             >                org     Dict_Ptr
 851+ 3E2A             >
 851+ 3E2A 7C 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 851+ 3E2C             >
 851+ 3E2C             >ENDIF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 851+ 3E2C CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 851+ 3E2F             >
 851+ 3E2F             >
 851+ 3E2F             >                endif           ; ok        // for other definitions it "points" the correct handler
 851+ 3E2F             >                // Use of "; ok" to suppress "warning[fwdref]"
 851+ 3E2F             >
 851+ 3E2F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 852+ 3E2F 15 3E                        dw      THEN
 853+ 3E31 09 25                        dw      EXIT
 854+ 3E33
 855+ 3E33              //  ______________________________________________________________________
 856+ 3E33              //
 857+ 3E33              // else        ( a1 2 -- a2 2 ) \ compile-time
 858+ 3E33              //
 859+ 3E33                              Colon_Def ELSE, "ELSE", is_immediate
 859+ 3E33             >                New_Def  ELSE, "ELSE", Enter_Ptr, is_immediate ; ok
 859+ 3E33             >
 859+ 3E33             >Dict_Ptr        defl    $
 859+ 3E33             >
 859+ 3E33             >//              ______________________________________________________________________
 859+ 3E33             >//              Heap part
 859+ 3E33             >
 859+ 3E33             >
 859+ 3E33             >                org     (Heap_Ptr & $1FFF) + $E000
 859+ EC7E             >
 859+ EC7E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 859+ EC7E             >Latest_Definition defl  Heap_Ptr
 859+ EC7E             >
 859+ EC7E             >                // dummy db directives used to calculate length of namec
 859+ EC7E 45 4C 53 45 >                db      "ELSE"
 859+ EC82             >len_NFA         defl    $ - temp_NFA
 859+ EC82             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 859+ EC7E             >
 859+ EC7E C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 859+ EC7F 45 4C 53 45 >                db      "ELSE"               // name string in 7-bit ascii, but
 859+ EC83             >                org     $-1                 // alter last byte of Name just above to set
 859+ EC82 C5          >                db      {b $} | END_BIT     // msb as name end
 859+ EC83             >
 859+ EC83 74 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 859+ EC85             >Prev_Ptr        defl    Heap_Ptr
 859+ EC85             >
 859+ EC85             >mirror_Ptr      defl    $
 859+ EC85             >
 859+ EC85 35 3E       >                dw      Dict_Ptr + 2        // xt
 859+ EC87             >Heap_Ptr        defl    $ - $E000           // save current HP
 859+ EC87             >
 859+ EC87             >Current_HP      defl  $ - $E000             // used to set HP once!
 859+ EC87             >
 859+ EC87             >//              ______________________________________________________________________
 859+ EC87             >//              Dictionary part
 859+ EC87             >
 859+ EC87             >                org     Dict_Ptr
 859+ 3E33             >
 859+ 3E33 85 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 859+ 3E35             >
 859+ 3E35             >ELSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 859+ 3E35 CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 859+ 3E38             >
 859+ 3E38             >
 859+ 3E38             >                endif           ; ok        // for other definitions it "points" the correct handler
 859+ 3E38             >                // Use of "; ok" to suppress "warning[fwdref]"
 859+ 3E38             >
 859+ 3E38             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 860+ 3E38 AD 2A                        dw      QCOMP
 861+ 3E3A 4D 27 D1 2A                  dw      TWO, QPAIRS
 862+ 3E3E 08 2B 82 20                  dw      COMPILE, BRANCH
 863+ 3E42 64 28 3F 27                  dw      HERE, ZERO, COMMA
 863+ 3E46 7A 28
 864+ 3E48 D8 25 4D 27                  dw      SWAP, TWO, THEN
 864+ 3E4C 15 3E
 865+ 3E4E 4D 27                        dw      TWO
 866+ 3E50 09 25                        dw      EXIT
 867+ 3E52
 868+ 3E52              //  ______________________________________________________________________
 869+ 3E52              //
 870+ 3E52              // begin        ( -- a 1 ) \ compile-time
 871+ 3E52              // BEGIN ... AGAIN
 872+ 3E52              // BEGIN ... f UNTIL
 873+ 3E52              // BEGIN ... f WHILE ... REPEAT
 874+ 3E52                              Colon_Def BEGIN, "BEGIN", is_immediate
 874+ 3E52             >                New_Def  BEGIN, "BEGIN", Enter_Ptr, is_immediate ; ok
 874+ 3E52             >
 874+ 3E52             >Dict_Ptr        defl    $
 874+ 3E52             >
 874+ 3E52             >//              ______________________________________________________________________
 874+ 3E52             >//              Heap part
 874+ 3E52             >
 874+ 3E52             >
 874+ 3E52             >                org     (Heap_Ptr & $1FFF) + $E000
 874+ EC87             >
 874+ EC87             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 874+ EC87             >Latest_Definition defl  Heap_Ptr
 874+ EC87             >
 874+ EC87             >                // dummy db directives used to calculate length of namec
 874+ EC87 42 45 47 49 >                db      "BEGIN"
 874+ EC8B 4E          >
 874+ EC8C             >len_NFA         defl    $ - temp_NFA
 874+ EC8C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 874+ EC87             >
 874+ EC87 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 874+ EC88 42 45 47 49 >                db      "BEGIN"               // name string in 7-bit ascii, but
 874+ EC8C 4E          >
 874+ EC8D             >                org     $-1                 // alter last byte of Name just above to set
 874+ EC8C CE          >                db      {b $} | END_BIT     // msb as name end
 874+ EC8D             >
 874+ EC8D 7E 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 874+ EC8F             >Prev_Ptr        defl    Heap_Ptr
 874+ EC8F             >
 874+ EC8F             >mirror_Ptr      defl    $
 874+ EC8F             >
 874+ EC8F 54 3E       >                dw      Dict_Ptr + 2        // xt
 874+ EC91             >Heap_Ptr        defl    $ - $E000           // save current HP
 874+ EC91             >
 874+ EC91             >Current_HP      defl  $ - $E000             // used to set HP once!
 874+ EC91             >
 874+ EC91             >//              ______________________________________________________________________
 874+ EC91             >//              Dictionary part
 874+ EC91             >
 874+ EC91             >                org     Dict_Ptr
 874+ 3E52             >
 874+ 3E52 8F 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 874+ 3E54             >
 874+ 3E54             >BEGIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 874+ 3E54 CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 874+ 3E57             >
 874+ 3E57             >
 874+ 3E57             >                endif           ; ok        // for other definitions it "points" the correct handler
 874+ 3E57             >                // Use of "; ok" to suppress "warning[fwdref]"
 874+ 3E57             >
 874+ 3E57             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 875+ 3E57 AD 2A                        dw      QCOMP
 876+ 3E59 64 28                        dw      HERE
 877+ 3E5B 4D 27                        dw      TWO
 878+ 3E5D 09 25                        dw      EXIT
 879+ 3E5F
 880+ 3E5F              //  ______________________________________________________________________
 881+ 3E5F              //
 882+ 3E5F              // again        ( a 1 -- ) \ compile-time
 883+ 3E5F                              Colon_Def AGAIN, "AGAIN", is_immediate
 883+ 3E5F             >                New_Def  AGAIN, "AGAIN", Enter_Ptr, is_immediate ; ok
 883+ 3E5F             >
 883+ 3E5F             >Dict_Ptr        defl    $
 883+ 3E5F             >
 883+ 3E5F             >//              ______________________________________________________________________
 883+ 3E5F             >//              Heap part
 883+ 3E5F             >
 883+ 3E5F             >
 883+ 3E5F             >                org     (Heap_Ptr & $1FFF) + $E000
 883+ EC91             >
 883+ EC91             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 883+ EC91             >Latest_Definition defl  Heap_Ptr
 883+ EC91             >
 883+ EC91             >                // dummy db directives used to calculate length of namec
 883+ EC91 41 47 41 49 >                db      "AGAIN"
 883+ EC95 4E          >
 883+ EC96             >len_NFA         defl    $ - temp_NFA
 883+ EC96             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 883+ EC91             >
 883+ EC91 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 883+ EC92 41 47 41 49 >                db      "AGAIN"               // name string in 7-bit ascii, but
 883+ EC96 4E          >
 883+ EC97             >                org     $-1                 // alter last byte of Name just above to set
 883+ EC96 CE          >                db      {b $} | END_BIT     // msb as name end
 883+ EC97             >
 883+ EC97 87 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 883+ EC99             >Prev_Ptr        defl    Heap_Ptr
 883+ EC99             >
 883+ EC99             >mirror_Ptr      defl    $
 883+ EC99             >
 883+ EC99 61 3E       >                dw      Dict_Ptr + 2        // xt
 883+ EC9B             >Heap_Ptr        defl    $ - $E000           // save current HP
 883+ EC9B             >
 883+ EC9B             >Current_HP      defl  $ - $E000             // used to set HP once!
 883+ EC9B             >
 883+ EC9B             >//              ______________________________________________________________________
 883+ EC9B             >//              Dictionary part
 883+ EC9B             >
 883+ EC9B             >                org     Dict_Ptr
 883+ 3E5F             >
 883+ 3E5F 99 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 883+ 3E61             >
 883+ 3E61             >AGAIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 883+ 3E61 CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 883+ 3E64             >
 883+ 3E64             >
 883+ 3E64             >                endif           ; ok        // for other definitions it "points" the correct handler
 883+ 3E64             >                // Use of "; ok" to suppress "warning[fwdref]"
 883+ 3E64             >
 883+ 3E64             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 884+ 3E64 AD 2A                        dw      QCOMP
 885+ 3E66 4D 27 D1 2A                  dw      TWO, QPAIRS
 886+ 3E6A 08 2B 82 20                  dw      COMPILE, BRANCH
 887+ 3E6E F5 3D                        dw      BACK
 888+ 3E70 09 25                        dw      EXIT
 889+ 3E72
 890+ 3E72              //  ______________________________________________________________________
 891+ 3E72              //
 892+ 3E72              // until        ( a 1 -- ) \ compile-time
 893+ 3E72                              Colon_Def UNTIL, "UNTIL", is_immediate
 893+ 3E72             >                New_Def  UNTIL, "UNTIL", Enter_Ptr, is_immediate ; ok
 893+ 3E72             >
 893+ 3E72             >Dict_Ptr        defl    $
 893+ 3E72             >
 893+ 3E72             >//              ______________________________________________________________________
 893+ 3E72             >//              Heap part
 893+ 3E72             >
 893+ 3E72             >
 893+ 3E72             >                org     (Heap_Ptr & $1FFF) + $E000
 893+ EC9B             >
 893+ EC9B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 893+ EC9B             >Latest_Definition defl  Heap_Ptr
 893+ EC9B             >
 893+ EC9B             >                // dummy db directives used to calculate length of namec
 893+ EC9B 55 4E 54 49 >                db      "UNTIL"
 893+ EC9F 4C          >
 893+ ECA0             >len_NFA         defl    $ - temp_NFA
 893+ ECA0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 893+ EC9B             >
 893+ EC9B C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 893+ EC9C 55 4E 54 49 >                db      "UNTIL"               // name string in 7-bit ascii, but
 893+ ECA0 4C          >
 893+ ECA1             >                org     $-1                 // alter last byte of Name just above to set
 893+ ECA0 CC          >                db      {b $} | END_BIT     // msb as name end
 893+ ECA1             >
 893+ ECA1 91 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 893+ ECA3             >Prev_Ptr        defl    Heap_Ptr
 893+ ECA3             >
 893+ ECA3             >mirror_Ptr      defl    $
 893+ ECA3             >
 893+ ECA3 74 3E       >                dw      Dict_Ptr + 2        // xt
 893+ ECA5             >Heap_Ptr        defl    $ - $E000           // save current HP
 893+ ECA5             >
 893+ ECA5             >Current_HP      defl  $ - $E000             // used to set HP once!
 893+ ECA5             >
 893+ ECA5             >//              ______________________________________________________________________
 893+ ECA5             >//              Dictionary part
 893+ ECA5             >
 893+ ECA5             >                org     Dict_Ptr
 893+ 3E72             >
 893+ 3E72 A3 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 893+ 3E74             >
 893+ 3E74             >UNTIL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 893+ 3E74 CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 893+ 3E77             >
 893+ 3E77             >
 893+ 3E77             >                endif           ; ok        // for other definitions it "points" the correct handler
 893+ 3E77             >                // Use of "; ok" to suppress "warning[fwdref]"
 893+ 3E77             >
 893+ 3E77             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 894+ 3E77 AD 2A                        dw      QCOMP
 895+ 3E79 4D 27 D1 2A                  dw      TWO, QPAIRS
 896+ 3E7D 08 2B 8F 20                  dw      COMPILE, ZBRANCH
 897+ 3E81 F5 3D                        dw      BACK
 898+ 3E83 09 25                        dw      EXIT
 899+ 3E85
 900+ 3E85              //  ______________________________________________________________________
 901+ 3E85              //
 902+ 3E85              // end          ( a 1 -- ) \ compile-time
 903+ 3E85                              Colon_Def END, "END", is_immediate
 903+ 3E85             >                New_Def  END, "END", Enter_Ptr, is_immediate ; ok
 903+ 3E85             >
 903+ 3E85             >Dict_Ptr        defl    $
 903+ 3E85             >
 903+ 3E85             >//              ______________________________________________________________________
 903+ 3E85             >//              Heap part
 903+ 3E85             >
 903+ 3E85             >
 903+ 3E85             >                org     (Heap_Ptr & $1FFF) + $E000
 903+ ECA5             >
 903+ ECA5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 903+ ECA5             >Latest_Definition defl  Heap_Ptr
 903+ ECA5             >
 903+ ECA5             >                // dummy db directives used to calculate length of namec
 903+ ECA5 45 4E 44    >                db      "END"
 903+ ECA8             >len_NFA         defl    $ - temp_NFA
 903+ ECA8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 903+ ECA5             >
 903+ ECA5 C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 903+ ECA6 45 4E 44    >                db      "END"               // name string in 7-bit ascii, but
 903+ ECA9             >                org     $-1                 // alter last byte of Name just above to set
 903+ ECA8 C4          >                db      {b $} | END_BIT     // msb as name end
 903+ ECA9             >
 903+ ECA9 9B 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 903+ ECAB             >Prev_Ptr        defl    Heap_Ptr
 903+ ECAB             >
 903+ ECAB             >mirror_Ptr      defl    $
 903+ ECAB             >
 903+ ECAB 87 3E       >                dw      Dict_Ptr + 2        // xt
 903+ ECAD             >Heap_Ptr        defl    $ - $E000           // save current HP
 903+ ECAD             >
 903+ ECAD             >Current_HP      defl  $ - $E000             // used to set HP once!
 903+ ECAD             >
 903+ ECAD             >//              ______________________________________________________________________
 903+ ECAD             >//              Dictionary part
 903+ ECAD             >
 903+ ECAD             >                org     Dict_Ptr
 903+ 3E85             >
 903+ 3E85 AB 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 903+ 3E87             >
 903+ 3E87             >END:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 903+ 3E87 CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 903+ 3E8A             >
 903+ 3E8A             >
 903+ 3E8A             >                endif           ; ok        // for other definitions it "points" the correct handler
 903+ 3E8A             >                // Use of "; ok" to suppress "warning[fwdref]"
 903+ 3E8A             >
 903+ 3E8A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 904+ 3E8A 74 3E                        dw      UNTIL
 905+ 3E8C 09 25                        dw      EXIT
 906+ 3E8E
 907+ 3E8E              //  ______________________________________________________________________
 908+ 3E8E              //
 909+ 3E8E              // while        ( a1 1 -- a1 1 a2 4 ) \ compile-time
 910+ 3E8E                              Colon_Def WHILE, "WHILE", is_immediate
 910+ 3E8E             >                New_Def  WHILE, "WHILE", Enter_Ptr, is_immediate ; ok
 910+ 3E8E             >
 910+ 3E8E             >Dict_Ptr        defl    $
 910+ 3E8E             >
 910+ 3E8E             >//              ______________________________________________________________________
 910+ 3E8E             >//              Heap part
 910+ 3E8E             >
 910+ 3E8E             >
 910+ 3E8E             >                org     (Heap_Ptr & $1FFF) + $E000
 910+ ECAD             >
 910+ ECAD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 910+ ECAD             >Latest_Definition defl  Heap_Ptr
 910+ ECAD             >
 910+ ECAD             >                // dummy db directives used to calculate length of namec
 910+ ECAD 57 48 49 4C >                db      "WHILE"
 910+ ECB1 45          >
 910+ ECB2             >len_NFA         defl    $ - temp_NFA
 910+ ECB2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 910+ ECAD             >
 910+ ECAD C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 910+ ECAE 57 48 49 4C >                db      "WHILE"               // name string in 7-bit ascii, but
 910+ ECB2 45          >
 910+ ECB3             >                org     $-1                 // alter last byte of Name just above to set
 910+ ECB2 C5          >                db      {b $} | END_BIT     // msb as name end
 910+ ECB3             >
 910+ ECB3 A5 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 910+ ECB5             >Prev_Ptr        defl    Heap_Ptr
 910+ ECB5             >
 910+ ECB5             >mirror_Ptr      defl    $
 910+ ECB5             >
 910+ ECB5 90 3E       >                dw      Dict_Ptr + 2        // xt
 910+ ECB7             >Heap_Ptr        defl    $ - $E000           // save current HP
 910+ ECB7             >
 910+ ECB7             >Current_HP      defl  $ - $E000             // used to set HP once!
 910+ ECB7             >
 910+ ECB7             >//              ______________________________________________________________________
 910+ ECB7             >//              Dictionary part
 910+ ECB7             >
 910+ ECB7             >                org     Dict_Ptr
 910+ 3E8E             >
 910+ 3E8E B5 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 910+ 3E90             >
 910+ 3E90             >WHILE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 910+ 3E90 CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 910+ 3E93             >
 910+ 3E93             >
 910+ 3E93             >                endif           ; ok        // for other definitions it "points" the correct handler
 910+ 3E93             >                // Use of "; ok" to suppress "warning[fwdref]"
 910+ 3E93             >
 910+ 3E93             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 911+ 3E93 02 3E                        dw      IF
 912+ 3E95              //              dw      TWO_PLUS // ( that is 4 )
 913+ 3E95 1A 26                        dw      TWO_SWAP
 914+ 3E97 09 25                        dw      EXIT
 915+ 3E99
 916+ 3E99              //  ______________________________________________________________________
 917+ 3E99              //
 918+ 3E99              // repeat       ( a1 1 a2 4 -- ) \ compile-time
 919+ 3E99                              Colon_Def REPEAT, "REPEAT", is_immediate
 919+ 3E99             >                New_Def  REPEAT, "REPEAT", Enter_Ptr, is_immediate ; ok
 919+ 3E99             >
 919+ 3E99             >Dict_Ptr        defl    $
 919+ 3E99             >
 919+ 3E99             >//              ______________________________________________________________________
 919+ 3E99             >//              Heap part
 919+ 3E99             >
 919+ 3E99             >
 919+ 3E99             >                org     (Heap_Ptr & $1FFF) + $E000
 919+ ECB7             >
 919+ ECB7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 919+ ECB7             >Latest_Definition defl  Heap_Ptr
 919+ ECB7             >
 919+ ECB7             >                // dummy db directives used to calculate length of namec
 919+ ECB7 52 45 50 45 >                db      "REPEAT"
 919+ ECBB 41 54       >
 919+ ECBD             >len_NFA         defl    $ - temp_NFA
 919+ ECBD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 919+ ECB7             >
 919+ ECB7 C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 919+ ECB8 52 45 50 45 >                db      "REPEAT"               // name string in 7-bit ascii, but
 919+ ECBC 41 54       >
 919+ ECBE             >                org     $-1                 // alter last byte of Name just above to set
 919+ ECBD D4          >                db      {b $} | END_BIT     // msb as name end
 919+ ECBE             >
 919+ ECBE AD 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 919+ ECC0             >Prev_Ptr        defl    Heap_Ptr
 919+ ECC0             >
 919+ ECC0             >mirror_Ptr      defl    $
 919+ ECC0             >
 919+ ECC0 9B 3E       >                dw      Dict_Ptr + 2        // xt
 919+ ECC2             >Heap_Ptr        defl    $ - $E000           // save current HP
 919+ ECC2             >
 919+ ECC2             >Current_HP      defl  $ - $E000             // used to set HP once!
 919+ ECC2             >
 919+ ECC2             >//              ______________________________________________________________________
 919+ ECC2             >//              Dictionary part
 919+ ECC2             >
 919+ ECC2             >                org     Dict_Ptr
 919+ 3E99             >
 919+ 3E99 C0 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 919+ 3E9B             >
 919+ 3E9B             >REPEAT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 919+ 3E9B CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 919+ 3E9E             >
 919+ 3E9E             >
 919+ 3E9E             >                endif           ; ok        // for other definitions it "points" the correct handler
 919+ 3E9E             >                // Use of "; ok" to suppress "warning[fwdref]"
 919+ 3E9E             >
 919+ 3E9E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 920+ 3E9E 61 3E                        dw      AGAIN
 921+ 3EA0              //              dw      TWO_MINUS
 922+ 3EA0 15 3E                        dw      THEN
 923+ 3EA2 09 25                        dw      EXIT
 924+ 3EA4
 925+ 3EA4              //  ______________________________________________________________________
 926+ 3EA4              //
 927+ 3EA4              // ?do-
 928+ 3EA4              // special version of "BACK" used by ?DO and LOOP
 929+ 3EA4                              Colon_Def C_DO_BACK, "?DO-", is_normal
 929+ 3EA4             >                New_Def  C_DO_BACK, "?DO-", Enter_Ptr, is_normal ; ok
 929+ 3EA4             >
 929+ 3EA4             >Dict_Ptr        defl    $
 929+ 3EA4             >
 929+ 3EA4             >//              ______________________________________________________________________
 929+ 3EA4             >//              Heap part
 929+ 3EA4             >
 929+ 3EA4             >
 929+ 3EA4             >                org     (Heap_Ptr & $1FFF) + $E000
 929+ ECC2             >
 929+ ECC2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 929+ ECC2             >Latest_Definition defl  Heap_Ptr
 929+ ECC2             >
 929+ ECC2             >                // dummy db directives used to calculate length of namec
 929+ ECC2 3F 44 4F 2D >                db      "?DO-"
 929+ ECC6             >len_NFA         defl    $ - temp_NFA
 929+ ECC6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 929+ ECC2             >
 929+ ECC2 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 929+ ECC3 3F 44 4F 2D >                db      "?DO-"               // name string in 7-bit ascii, but
 929+ ECC7             >                org     $-1                 // alter last byte of Name just above to set
 929+ ECC6 AD          >                db      {b $} | END_BIT     // msb as name end
 929+ ECC7             >
 929+ ECC7 B7 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 929+ ECC9             >Prev_Ptr        defl    Heap_Ptr
 929+ ECC9             >
 929+ ECC9             >mirror_Ptr      defl    $
 929+ ECC9             >
 929+ ECC9 A6 3E       >                dw      Dict_Ptr + 2        // xt
 929+ ECCB             >Heap_Ptr        defl    $ - $E000           // save current HP
 929+ ECCB             >
 929+ ECCB             >Current_HP      defl  $ - $E000             // used to set HP once!
 929+ ECCB             >
 929+ ECCB             >//              ______________________________________________________________________
 929+ ECCB             >//              Dictionary part
 929+ ECCB             >
 929+ ECCB             >                org     Dict_Ptr
 929+ 3EA4             >
 929+ 3EA4 C9 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 929+ 3EA6             >
 929+ 3EA6             >C_DO_BACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 929+ 3EA6 CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 929+ 3EA9             >
 929+ 3EA9             >
 929+ 3EA9             >                endif           ; ok        // for other definitions it "points" the correct handler
 929+ 3EA9             >                // Use of "; ok" to suppress "warning[fwdref]"
 929+ 3EA9             >
 929+ 3EA9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 930+ 3EA9 F5 3D                        dw      BACK
 931+ 3EAB              CDoBack_Begin:
 932+ 3EAB F0 24 22 28                  dw      SPFETCH, CSP, FETCH, SUBTRACT
 932+ 3EAF 49 26 A3 28
 933+ 3EB3 8F 20                        dw      ZBRANCH
 934+ 3EB5 0A 00                        dw      CDoBack_While - $
 935+ 3EB7 82 25 15 3E                  dw          TWO_PLUS, THEN
 936+ 3EBB 82 20                        dw      BRANCH
 937+ 3EBD EE FF                        dw      CDoBack_Begin - $
 938+ 3EBF              CDoBack_While:
 939+ 3EBF E0 2A 22 28                  dw      QCSP, CSP, STORE
 939+ 3EC3 53 26
 940+ 3EC5 09 25                        dw      EXIT
 941+ 3EC7
 942+ 3EC7              //  ______________________________________________________________________
 943+ 3EC7              //
 944+ 3EC7              // do
 945+ 3EC7              // DO  ... LOOP
 946+ 3EC7              // DO  ... n +LOOP
 947+ 3EC7              // ?DO ... LOOP
 948+ 3EC7              // ?DO ... n +LOOP
 949+ 3EC7                              Colon_Def DO, "DO", is_immediate
 949+ 3EC7             >                New_Def  DO, "DO", Enter_Ptr, is_immediate ; ok
 949+ 3EC7             >
 949+ 3EC7             >Dict_Ptr        defl    $
 949+ 3EC7             >
 949+ 3EC7             >//              ______________________________________________________________________
 949+ 3EC7             >//              Heap part
 949+ 3EC7             >
 949+ 3EC7             >
 949+ 3EC7             >                org     (Heap_Ptr & $1FFF) + $E000
 949+ ECCB             >
 949+ ECCB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 949+ ECCB             >Latest_Definition defl  Heap_Ptr
 949+ ECCB             >
 949+ ECCB             >                // dummy db directives used to calculate length of namec
 949+ ECCB 44 4F       >                db      "DO"
 949+ ECCD             >len_NFA         defl    $ - temp_NFA
 949+ ECCD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 949+ ECCB             >
 949+ ECCB C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 949+ ECCC 44 4F       >                db      "DO"               // name string in 7-bit ascii, but
 949+ ECCE             >                org     $-1                 // alter last byte of Name just above to set
 949+ ECCD CF          >                db      {b $} | END_BIT     // msb as name end
 949+ ECCE             >
 949+ ECCE C2 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 949+ ECD0             >Prev_Ptr        defl    Heap_Ptr
 949+ ECD0             >
 949+ ECD0             >mirror_Ptr      defl    $
 949+ ECD0             >
 949+ ECD0 C9 3E       >                dw      Dict_Ptr + 2        // xt
 949+ ECD2             >Heap_Ptr        defl    $ - $E000           // save current HP
 949+ ECD2             >
 949+ ECD2             >Current_HP      defl  $ - $E000             // used to set HP once!
 949+ ECD2             >
 949+ ECD2             >//              ______________________________________________________________________
 949+ ECD2             >//              Dictionary part
 949+ ECD2             >
 949+ ECD2             >                org     Dict_Ptr
 949+ 3EC7             >
 949+ 3EC7 D0 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 949+ 3EC9             >
 949+ 3EC9             >DO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 949+ 3EC9 CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 949+ 3ECC             >
 949+ 3ECC             >
 949+ 3ECC             >                endif           ; ok        // for other definitions it "points" the correct handler
 949+ 3ECC             >                // Use of "; ok" to suppress "warning[fwdref]"
 949+ 3ECC             >
 949+ 3ECC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 950+ 3ECC 08 2B CC 20                  dw      COMPILE, C_DO
 951+ 3ED0 22 28 49 26                  dw      CSP, FETCH, STORE_CSP
 951+ 3ED4 8B 2A
 952+ 3ED6 64 28 54 27                  dw      HERE, THREE
 953+ 3EDA 09 25                        dw      EXIT
 954+ 3EDC
 955+ 3EDC              //  ______________________________________________________________________
 956+ 3EDC              //
 957+ 3EDC              // loop
 958+ 3EDC                              Colon_Def LOOP, "LOOP", is_immediate
 958+ 3EDC             >                New_Def  LOOP, "LOOP", Enter_Ptr, is_immediate ; ok
 958+ 3EDC             >
 958+ 3EDC             >Dict_Ptr        defl    $
 958+ 3EDC             >
 958+ 3EDC             >//              ______________________________________________________________________
 958+ 3EDC             >//              Heap part
 958+ 3EDC             >
 958+ 3EDC             >
 958+ 3EDC             >                org     (Heap_Ptr & $1FFF) + $E000
 958+ ECD2             >
 958+ ECD2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 958+ ECD2             >Latest_Definition defl  Heap_Ptr
 958+ ECD2             >
 958+ ECD2             >                // dummy db directives used to calculate length of namec
 958+ ECD2 4C 4F 4F 50 >                db      "LOOP"
 958+ ECD6             >len_NFA         defl    $ - temp_NFA
 958+ ECD6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 958+ ECD2             >
 958+ ECD2 C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 958+ ECD3 4C 4F 4F 50 >                db      "LOOP"               // name string in 7-bit ascii, but
 958+ ECD7             >                org     $-1                 // alter last byte of Name just above to set
 958+ ECD6 D0          >                db      {b $} | END_BIT     // msb as name end
 958+ ECD7             >
 958+ ECD7 CB 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 958+ ECD9             >Prev_Ptr        defl    Heap_Ptr
 958+ ECD9             >
 958+ ECD9             >mirror_Ptr      defl    $
 958+ ECD9             >
 958+ ECD9 DE 3E       >                dw      Dict_Ptr + 2        // xt
 958+ ECDB             >Heap_Ptr        defl    $ - $E000           // save current HP
 958+ ECDB             >
 958+ ECDB             >Current_HP      defl  $ - $E000             // used to set HP once!
 958+ ECDB             >
 958+ ECDB             >//              ______________________________________________________________________
 958+ ECDB             >//              Dictionary part
 958+ ECDB             >
 958+ ECDB             >                org     Dict_Ptr
 958+ 3EDC             >
 958+ 3EDC D9 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 958+ 3EDE             >
 958+ 3EDE             >LOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 958+ 3EDE CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 958+ 3EE1             >
 958+ 3EE1             >
 958+ 3EE1             >                endif           ; ok        // for other definitions it "points" the correct handler
 958+ 3EE1             >                // Use of "; ok" to suppress "warning[fwdref]"
 958+ 3EE1             >
 958+ 3EE1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 959+ 3EE1 54 27 D1 2A                  dw      THREE, QPAIRS
 960+ 3EE5 08 2B 7A 20                  dw      COMPILE, C_LOOP
 961+ 3EE9 A6 3E                        dw      C_DO_BACK
 962+ 3EEB 09 25                        dw      EXIT
 963+ 3EED
 964+ 3EED              //  ______________________________________________________________________
 965+ 3EED              //
 966+ 3EED              // +loop
 967+ 3EED                              Colon_Def PLOOP, "+LOOP", is_immediate
 967+ 3EED             >                New_Def  PLOOP, "+LOOP", Enter_Ptr, is_immediate ; ok
 967+ 3EED             >
 967+ 3EED             >Dict_Ptr        defl    $
 967+ 3EED             >
 967+ 3EED             >//              ______________________________________________________________________
 967+ 3EED             >//              Heap part
 967+ 3EED             >
 967+ 3EED             >
 967+ 3EED             >                org     (Heap_Ptr & $1FFF) + $E000
 967+ ECDB             >
 967+ ECDB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 967+ ECDB             >Latest_Definition defl  Heap_Ptr
 967+ ECDB             >
 967+ ECDB             >                // dummy db directives used to calculate length of namec
 967+ ECDB 2B 4C 4F 4F >                db      "+LOOP"
 967+ ECDF 50          >
 967+ ECE0             >len_NFA         defl    $ - temp_NFA
 967+ ECE0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 967+ ECDB             >
 967+ ECDB C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 967+ ECDC 2B 4C 4F 4F >                db      "+LOOP"               // name string in 7-bit ascii, but
 967+ ECE0 50          >
 967+ ECE1             >                org     $-1                 // alter last byte of Name just above to set
 967+ ECE0 D0          >                db      {b $} | END_BIT     // msb as name end
 967+ ECE1             >
 967+ ECE1 D2 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 967+ ECE3             >Prev_Ptr        defl    Heap_Ptr
 967+ ECE3             >
 967+ ECE3             >mirror_Ptr      defl    $
 967+ ECE3             >
 967+ ECE3 EF 3E       >                dw      Dict_Ptr + 2        // xt
 967+ ECE5             >Heap_Ptr        defl    $ - $E000           // save current HP
 967+ ECE5             >
 967+ ECE5             >Current_HP      defl  $ - $E000             // used to set HP once!
 967+ ECE5             >
 967+ ECE5             >//              ______________________________________________________________________
 967+ ECE5             >//              Dictionary part
 967+ ECE5             >
 967+ ECE5             >                org     Dict_Ptr
 967+ 3EED             >
 967+ 3EED E3 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 967+ 3EEF             >
 967+ 3EEF             >PLOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 967+ 3EEF CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 967+ 3EF2             >
 967+ 3EF2             >
 967+ 3EF2             >                endif           ; ok        // for other definitions it "points" the correct handler
 967+ 3EF2             >                // Use of "; ok" to suppress "warning[fwdref]"
 967+ 3EF2             >
 967+ 3EF2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 968+ 3EF2 54 27 D1 2A                  dw      THREE, QPAIRS
 969+ 3EF6 08 2B 4B 20                  dw      COMPILE, C_PLOOP
 970+ 3EFA A6 3E                        dw      C_DO_BACK
 971+ 3EFC 09 25                        dw      EXIT
 972+ 3EFE
 973+ 3EFE              //  ______________________________________________________________________
 974+ 3EFE              //
 975+ 3EFE              // ?do
 976+ 3EFE                              Colon_Def QDO, "?DO", is_immediate
 976+ 3EFE             >                New_Def  QDO, "?DO", Enter_Ptr, is_immediate ; ok
 976+ 3EFE             >
 976+ 3EFE             >Dict_Ptr        defl    $
 976+ 3EFE             >
 976+ 3EFE             >//              ______________________________________________________________________
 976+ 3EFE             >//              Heap part
 976+ 3EFE             >
 976+ 3EFE             >
 976+ 3EFE             >                org     (Heap_Ptr & $1FFF) + $E000
 976+ ECE5             >
 976+ ECE5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 976+ ECE5             >Latest_Definition defl  Heap_Ptr
 976+ ECE5             >
 976+ ECE5             >                // dummy db directives used to calculate length of namec
 976+ ECE5 3F 44 4F    >                db      "?DO"
 976+ ECE8             >len_NFA         defl    $ - temp_NFA
 976+ ECE8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 976+ ECE5             >
 976+ ECE5 C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 976+ ECE6 3F 44 4F    >                db      "?DO"               // name string in 7-bit ascii, but
 976+ ECE9             >                org     $-1                 // alter last byte of Name just above to set
 976+ ECE8 CF          >                db      {b $} | END_BIT     // msb as name end
 976+ ECE9             >
 976+ ECE9 DB 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 976+ ECEB             >Prev_Ptr        defl    Heap_Ptr
 976+ ECEB             >
 976+ ECEB             >mirror_Ptr      defl    $
 976+ ECEB             >
 976+ ECEB 00 3F       >                dw      Dict_Ptr + 2        // xt
 976+ ECED             >Heap_Ptr        defl    $ - $E000           // save current HP
 976+ ECED             >
 976+ ECED             >Current_HP      defl  $ - $E000             // used to set HP once!
 976+ ECED             >
 976+ ECED             >//              ______________________________________________________________________
 976+ ECED             >//              Dictionary part
 976+ ECED             >
 976+ ECED             >                org     Dict_Ptr
 976+ 3EFE             >
 976+ 3EFE EB 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 976+ 3F00             >
 976+ 3F00             >QDO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 976+ 3F00 CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 976+ 3F03             >
 976+ 3F03             >
 976+ 3F03             >                endif           ; ok        // for other definitions it "points" the correct handler
 976+ 3F03             >                // Use of "; ok" to suppress "warning[fwdref]"
 976+ 3F03             >
 976+ 3F03             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 977+ 3F03 08 2B A4 20                  dw      COMPILE, C_Q_DO
 978+ 3F07 22 28 49 26                  dw      CSP, FETCH, STORE_CSP
 978+ 3F0B 8B 2A
 979+ 3F0D 64 28 3F 27                  dw      HERE, ZERO, COMMA, ZERO
 979+ 3F11 7A 28 3F 27
 980+ 3F15 64 28 54 27                  dw      HERE, THREE
 981+ 3F19 09 25                        dw      EXIT
 982+ 3F1B
 983+ 3F1B              //  ______________________________________________________________________
 984+ 3F1B              //
 985+ 3F1B              // \
 986+ 3F1B                              Colon_Def BACKSLASH, "\\", is_immediate  // this is a single back-slash
 986+ 3F1B             >                New_Def  BACKSLASH, "\\", Enter_Ptr, is_immediate ; ok
 986+ 3F1B             >
 986+ 3F1B             >Dict_Ptr        defl    $
 986+ 3F1B             >
 986+ 3F1B             >//              ______________________________________________________________________
 986+ 3F1B             >//              Heap part
 986+ 3F1B             >
 986+ 3F1B             >
 986+ 3F1B             >                org     (Heap_Ptr & $1FFF) + $E000
 986+ ECED             >
 986+ ECED             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 986+ ECED             >Latest_Definition defl  Heap_Ptr
 986+ ECED             >
 986+ ECED             >                // dummy db directives used to calculate length of namec
 986+ ECED 5C          >                db      "\\"
 986+ ECEE             >len_NFA         defl    $ - temp_NFA
 986+ ECEE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 986+ ECED             >
 986+ ECED C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 986+ ECEE 5C          >                db      "\\"               // name string in 7-bit ascii, but
 986+ ECEF             >                org     $-1                 // alter last byte of Name just above to set
 986+ ECEE DC          >                db      {b $} | END_BIT     // msb as name end
 986+ ECEF             >
 986+ ECEF E5 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 986+ ECF1             >Prev_Ptr        defl    Heap_Ptr
 986+ ECF1             >
 986+ ECF1             >mirror_Ptr      defl    $
 986+ ECF1             >
 986+ ECF1 1D 3F       >                dw      Dict_Ptr + 2        // xt
 986+ ECF3             >Heap_Ptr        defl    $ - $E000           // save current HP
 986+ ECF3             >
 986+ ECF3             >Current_HP      defl  $ - $E000             // used to set HP once!
 986+ ECF3             >
 986+ ECF3             >//              ______________________________________________________________________
 986+ ECF3             >//              Dictionary part
 986+ ECF3             >
 986+ ECF3             >                org     Dict_Ptr
 986+ 3F1B             >
 986+ 3F1B F1 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 986+ 3F1D             >
 986+ 3F1D             >BACKSLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 986+ 3F1D CD EA 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 986+ 3F20             >
 986+ 3F20             >
 986+ 3F20             >                endif           ; ok        // for other definitions it "points" the correct handler
 986+ 3F20             >                // Use of "; ok" to suppress "warning[fwdref]"
 986+ 3F20             >
 986+ 3F20             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 987+ 3F20 E0 27 49 26                  dw      BLK, FETCH
 988+ 3F24 8F 20                        dw      ZBRANCH
 989+ 3F26 30 00                        dw      Backslash_Else_1 - $
 990+ 3F28 E0 27 49 26                  dw          BLK, FETCH, ONE, GREATER  // BLOCK 1 is used as temp-line in INCLUDE file
 990+ 3F2C 46 27 D5 28
 991+ 3F30 8F 20                        dw          ZBRANCH
 992+ 3F32 18 00                        dw          Backslash_Else_2 - $
 993+ 3F34 E6 27 49 26                  dw              TO_IN, FETCH, CL, MOD, CL
 993+ 3F38 69 27 36 35
 993+ 3F3C 69 27
 994+ 3F3E D8 25 A3 28                  dw              SWAP, SUBTRACT, TO_IN, PLUSSTORE
 994+ 3F42 E6 27 31 26
 995+ 3F46 82 20                        dw          BRANCH
 996+ 3F48 0A 00                        dw          Backslash_Endif_2 - $
 997+ 3F4A              Backslash_Else_2:
 998+ 3F4A 70 27 8E 25                  dw              BBUF, CELL_MINUS, TO_IN, STORE
 998+ 3F4E E6 27 53 26
 999+ 3F52              Backslash_Endif_2:
1000+ 3F52 82 20                        dw      BRANCH
1001+ 3F54 10 00                        dw      Backslash_Endif_1 - $
1002+ 3F56              Backslash_Else_1:
1003+ 3F56 3F 27 A4 27                  dw          ZERO, TIB, FETCH, TO_IN, FETCH, PLUS, STORE
1003+ 3F5A 49 26 E6 27
1003+ 3F5E 49 26 5B 25
1003+ 3F62 53 26
1004+ 3F64              Backslash_Endif_1:
1005+ 3F64 09 25                        dw      EXIT
1006+ 3F66
1007+ 3F66              //  ______________________________________________________________________
1008+ 3F66              //
1009+ 3F66              // blk-fh
1010+ 3F66                              Variable_Def BLK_FH,   "BLK-FH",   1
1010+ 3F66             >                New_Def  BLK_FH, "BLK-FH", Variable_Ptr, is_normal
1010+ 3F66             >
1010+ 3F66             >Dict_Ptr        defl    $
1010+ 3F66             >
1010+ 3F66             >//              ______________________________________________________________________
1010+ 3F66             >//              Heap part
1010+ 3F66             >
1010+ 3F66             >
1010+ 3F66             >                org     (Heap_Ptr & $1FFF) + $E000
1010+ ECF3             >
1010+ ECF3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1010+ ECF3             >Latest_Definition defl  Heap_Ptr
1010+ ECF3             >
1010+ ECF3             >                // dummy db directives used to calculate length of namec
1010+ ECF3 42 4C 4B 2D >                db      "BLK-FH"
1010+ ECF7 46 48       >
1010+ ECF9             >len_NFA         defl    $ - temp_NFA
1010+ ECF9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1010+ ECF3             >
1010+ ECF3 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1010+ ECF4 42 4C 4B 2D >                db      "BLK-FH"               // name string in 7-bit ascii, but
1010+ ECF8 46 48       >
1010+ ECFA             >                org     $-1                 // alter last byte of Name just above to set
1010+ ECF9 C8          >                db      {b $} | END_BIT     // msb as name end
1010+ ECFA             >
1010+ ECFA ED 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1010+ ECFC             >Prev_Ptr        defl    Heap_Ptr
1010+ ECFC             >
1010+ ECFC             >mirror_Ptr      defl    $
1010+ ECFC             >
1010+ ECFC 68 3F       >                dw      Dict_Ptr + 2        // xt
1010+ ECFE             >Heap_Ptr        defl    $ - $E000           // save current HP
1010+ ECFE             >
1010+ ECFE             >Current_HP      defl  $ - $E000             // used to set HP once!
1010+ ECFE             >
1010+ ECFE             >//              ______________________________________________________________________
1010+ ECFE             >//              Dictionary part
1010+ ECFE             >
1010+ ECFE             >                org     Dict_Ptr
1010+ 3F66             >
1010+ 3F66 FC 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
1010+ 3F68             >
1010+ 3F68             >BLK_FH:          if Variable_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1010+ 3F68 CD 26 27    >                call    Variable_Ptr ; ok        // for primitive definitions  actual code
1010+ 3F6B             >
1010+ 3F6B             >
1010+ 3F6B             >                endif           ; ok        // for other definitions it "points" the correct handler
1010+ 3F6B             >                // Use of "; ok" to suppress "warning[fwdref]"
1010+ 3F6B             >
1010+ 3F6B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1010+ 3F6B 01 00       >                dw      1
1011+ 3F6D
1012+ 3F6D                              New_Def BLK_FNAME,   "BLK-FNAME", Create_Ptr, is_normal
1012+ 3F6D             >
1012+ 3F6D             >Dict_Ptr        defl    $
1012+ 3F6D             >
1012+ 3F6D             >//              ______________________________________________________________________
1012+ 3F6D             >//              Heap part
1012+ 3F6D             >
1012+ 3F6D             >
1012+ 3F6D             >                org     (Heap_Ptr & $1FFF) + $E000
1012+ ECFE             >
1012+ ECFE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1012+ ECFE             >Latest_Definition defl  Heap_Ptr
1012+ ECFE             >
1012+ ECFE             >                // dummy db directives used to calculate length of namec
1012+ ECFE 42 4C 4B 2D >                db      "BLK-FNAME"
1012+ ED02 46 4E 41 4D >
1012+ ED06 45          >
1012+ ED07             >len_NFA         defl    $ - temp_NFA
1012+ ED07             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1012+ ECFE             >
1012+ ECFE 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1012+ ECFF 42 4C 4B 2D >                db      "BLK-FNAME"               // name string in 7-bit ascii, but
1012+ ED03 46 4E 41 4D >
1012+ ED07 45          >
1012+ ED08             >                org     $-1                 // alter last byte of Name just above to set
1012+ ED07 C5          >                db      {b $} | END_BIT     // msb as name end
1012+ ED08             >
1012+ ED08 F3 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1012+ ED0A             >Prev_Ptr        defl    Heap_Ptr
1012+ ED0A             >
1012+ ED0A             >mirror_Ptr      defl    $
1012+ ED0A             >
1012+ ED0A 6F 3F       >                dw      Dict_Ptr + 2        // xt
1012+ ED0C             >Heap_Ptr        defl    $ - $E000           // save current HP
1012+ ED0C             >
1012+ ED0C             >Current_HP      defl  $ - $E000             // used to set HP once!
1012+ ED0C             >
1012+ ED0C             >//              ______________________________________________________________________
1012+ ED0C             >//              Dictionary part
1012+ ED0C             >
1012+ ED0C             >                org     Dict_Ptr
1012+ 3F6D             >
1012+ 3F6D 0A 0D       >                dw      mirror_Ptr - $E000 + Heap_offset
1012+ 3F6F             >
1012+ 3F6F             >BLK_FNAME:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1012+ 3F6F CD C3 30    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
1012+ 3F72             >
1012+ 3F72             >
1012+ 3F72             >                endif           ; ok        // for other definitions it "points" the correct handler
1012+ 3F72             >                // Use of "; ok" to suppress "warning[fwdref]"
1012+ 3F72             >
1012+ 3F72             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1013+ 3F72 1E           Len_Filename:   db      30
1014+ 3F73 63 3A 2F 74  Blk_filename:   db      "c:/tools/vforth/!Blocks-64.bin", 0
1014+ 3F77 6F 6F 6C 73
1014+ 3F7B 2F 76 66 6F
1014+ 3F7F 72 74 68 2F
1014+ 3F83 21 42 6C 6F
1014+ 3F87 63 6B 73 2D
1014+ 3F8B 36 34 2E 62
1014+ 3F8F 69 6E 00
1015+ 3F92
1016+ 3F92              Fence_Word:
1017+ 3F92              //  ______________________________________________________________________
1018+ 3F92              //
1019+ 3F92
1020+ 3F92 00           Here_Dictionary db      0
1021+ 3F93
# file closed: C:\Zx\CSpect\Projects\vForth17_DOT/source/L3.asm
 144  3F93
 145  3F93              // now we save the compiled file so we can either run it or debug it
 146  3F93                              SAVENEX OPEN "output/main.nex", ORIGIN
 147  3F93                              SAVENEX CORE 3, 0, 0                                // Next core 3.0.0 required as minimum
 148  3F93                              SAVENEX CFG  0
 149  3F93                              SAVENEX BANK 2, 0
 150  3F93                              SAVENEX AUTO
 151  3F93                              SAVENEX CLOSE
 152  3F93
 153  3F93              //              PAGE 7 ;set 7 page to current slot
 154  3F93              //              SAVEBIN "ram7.bin",$C000,$4000 ;- save 4000h begin from C000h of RAM to file
 155  3F93              //              SAVEBIN "output/ram2.bin", $8000, 9800 ;- save 3000h begin from 8000h of RAM to file
 156  3F93
 157  3F93                      ////    SAVETAP "output/F16d.tap", CODE, "forth17d", ORIGIN, $2000
 158  3F93                      ////    SAVETAP "output/F16e.tap", CODE, "forth17e", $E000, $2000
 159  3F93
 160  3F93                      ////    SAVEBIN "output/vforth", ORIGIN, $2000
 161  3F93                      ////    SAVEBIN "output/vforth.bin", $E000, $2000 ;- save 2000h begin from E000h of RAM to file
 162  3F93
 163  3F93                              SAVEBIN "output/vforth.1", ORIGIN, $2000
 164  3F93                              SAVEBIN "output/vforth.2", $E000, $2000 ;- save 2000h begin from E000h of RAM to file
 165  3F93
 166  3F93                              // To run must copy vforth and vforth.bin to /dot directory
 167  3F93                              // then start with
 168  3F93                              //      .vforth
 169  3F93
 170  3F93                              END
# file closed: C:\Zx\CSpect\Projects\vForth17_DOT/source/main.asm
