# file opened: C:\Zx\CSpect\Projects\vForth17_DOT/source/main.asm
   1  0000              //  ______________________________________________________________________
   2  0000              //
   3  0000              //  main.asm
   4  0000              //  ______________________________________________________________________
   5  0000              //
   6  0000              //  v-Forth 1.7 NextZXOS version
   7  0000              //  DOT-command version
   8  0000              //  build 20231004
   9  0000              //
  10  0000              //  Direct-Threaded version.
  11  0000              //
  12  0000              //  NextZXOS version
  13  0000              //  ______________________________________________________________________
  14  0000              //
  15  0000              //  This work is available as-is with no whatsoever warranty.
  16  0000              //  Copying, modifying and distributing this software is allowed
  17  0000              //  provided that the copyright notice is kept.
  18  0000              //  ______________________________________________________________________
  19  0000              //
  20  0000              //  by Matteo Vitturi, 1990-2023
  21  0000              //
  22  0000              //  https://sites.google.com/view/vforth/vforth15-next
  23  0000              //  https://www.oocities.org/matteo_vitturi/english/index.htm
  24  0000              //
  25  0000              //  This is the complete compiler for v.Forth for SINCLAIR ZX Spectrum Next.
  26  0000              //  Each line of this source list mustn't exceed 80 bytes.
  27  0000              //  Z80N (ZX Spectrum Next) extension is available.
  28  0000              //
  29  0000              //  This list has been tested using the following configuration:
  30  0000              //      - CSpect emulator V.2.12.30
  31  0000              //  ______________________________________________________________________
  32  0000              //
  33  0000              //  Z80 Registers usage map
  34  0000              //
  35  0000              //  AF
  36  0000              //  BC - Instruction Pointer: should be preserved during ROM/OS calls
  37  0000              //  DE - Return Stack Pointer: should be preserved during ROM/OS calls
  38  0000              //  HL - Working
  39  0000              //
  40  0000              //  AF'- Sometime used for backup purpose
  41  0000              //  BC'- Not used
  42  0000              //  DE'- Not used
  43  0000              //  HL'- Not used
  44  0000              //
  45  0000              //  SP - Calculator Stack Pointer
  46  0000              //  IX - Inner interpreter "next" address pointer. This way jp (ix) is 2T-state faster than JP next
  47  0000              //  IY - (ZX System: must be preserved to interact with standard ROM)
  48  0000              //
  49  0000              //  ______________________________________________________________________
  50  0000              //
  51  0000              //  _________________
  52  0000              //
  53  0000              //  FORTH DEFINITIONS
  54  0000              //  _________________
  55  0000
  56  0000                              OPT     --zxnext
  57  0000              //  ______________________________________________________________________
  58  0000              //
  59  0000              // this controls some debugging code in L0.asm
  60  0000              //  0 for final binary release.
  61  0000              //  1 for debugging with Visual Studio Code and DeZog
  62  0000              // -1 for for binary comparison with Forth generated code.
  63  0000              DEBUGGING       equ     1   // .dot
  64  0000              //
  65  0000              //  ______________________________________________________________________
  66  0000
  67  0000                              if ( -1 == DEBUGGING )
  68  0000 ~            // ORIGIN          equ     $6366 - $80                 // for binary comparison with double compilation
  69  0000 ~            ORIGIN          equ     $9B21   -$80             // for binary comparison with single compilation
  70  0000 ~            Heap_Ptr        defl    $1F80                       // HP before compilation
  71  0000 ~            Heap_offset     defl    $2000
  72  0000 ~
  73  0000                              endif
  74  0000              //  ______________________________________________________________________
  75  0000
  76  0000                              if (  0 == DEBUGGING )
  77  0000 ~            ORIGIN          equ     $6366                   // binary and Tape
  78  0000 ~            // ORIGIN          equ     $9A93                // binary and Tape
  79  0000 ~            Heap_Ptr        defl    $0002
  80  0000 ~            Heap_offset     defl     0
  81  0000 ~
  82  0000                              endif
  83  0000              //  ______________________________________________________________________
  84  0000
  85  0000                              if (  1 == DEBUGGING )
  86  0000              ORIGIN          equ     $2000                   // for .dot
  87  0000              Heap_Ptr        defl    $0002
  88  0000              Heap_offset     defl     0
  89  0000
  90  0000                              endif
  91  0000              //  ______________________________________________________________________
  92  0000
  93  0000                              DEVICE  ZXSPECTRUMNEXT
  94  0000
  95  0000                              ORG     ORIGIN
  96  2000
  97  2000                              if ( -1 == DEBUGGING )
  98  2000 ~                            ds 128                            // for binary comparison
  99  2000                              endif
 100  2000
 101  2000              //  ______________________________________________________________________
 102  2000              //
 103  2000              //  Naming convention for Label vs Forth correspondance
 104  2000              //  Forth words are named as they are named for real with some exception to avoid assembler syntax errors.
 105  2000              //    - Leading "0" is converted into "Z_"
 106  2000              //    - Leading "(" is converted into "C_", closing bracket is omitted
 107  2000              //    - Leading numbers are converted in letters: ONE_  TWO_ etc.
 108  2000              //    - Question mark "?" is converted into "Q" or omitted if needed / useful.
 109  2000              //    - Plus sign "+" is converted in _PLUS or ADD_ depending.
 110  2000              //    - Minus sign "-" in L (for Line), MINUS or SUBTRACT depending
 111  2000              //    - Greater-Than sign ">" in _GREATER or TO_ depending
 112  2000              //    - Equal sign "=" is converted in EQUAL
 113  2000              //    - Less-Than sign "<" in _LESS or FROM_ (or TO_ again) depending
 114  2000              //    - Asterisk sign "*" is converted in _MUL or STAR
 115  2000              //    - Slash "/" is converted in _DIV or omitted if it is clear what it means
 116  2000              //    - Exclamation mark "!" is converted in STORE
 117  2000              //    - At-Sign "@" is converted in FETCH
 118  2000              //    - Words that collide with Assembler are normally suffixed with "_OP"
 119  2000
 120  2000                              include "system.asm"
# file opened: C:\Zx\CSpect\Projects\vForth17_DOT/source/system.asm
   1+ 2000              //  ______________________________________________________________________
   2+ 2000              //
   3+ 2000              //  system.asm
   4+ 2000              //  ______________________________________________________________________
   5+ 2000
   6+ 2000              // Registers:
   7+ 2000              //
   8+ 2000              //      BC: Instruction Pointer
   9+ 2000              //      DE:
  10+ 2000              //      HL: W register
  11+ 2000              //      SP: Calc stack Pointer
  12+ 2000              //      IX: Inner-Interpreter Address
  13+ 2000
  14+ 2000              //  ______________________________________________________________________
  15+ 2000              //
  16+ 2000              // ZX-Spectrum standard system variables
  17+ 2000              SCR_CT          equ     $5C8C                   // SCR-CT system variable
  18+ 2000              LASTK           equ     $5C08                   // LASTK system variable
  19+ 2000              BORDCR          equ     $5C48                   // BORDCR system variable
  20+ 2000              FLAGS2          equ     $5C6A                   // for caps-lock
  21+ 2000
  22+ 2000              TSTACK          equ     $5C00                   // TSTACK
  23+ 2000              //  ______________________________________________________________________
  24+ 2000              //
  25+ 2000              // Flag constants
  26+ 2000              TRUE_FLAG       equ     $FFFF
  27+ 2000              FALSE_FLAG      equ     $0000
  28+ 2000
  29+ 2000              //  ______________________________________________________________________
  30+ 2000              //
  31+ 2000              // Ascii char constants
  32+ 2000              NUL_CHAR        equ     $00
  33+ 2000              COMMA_CHAR      equ     $06
  34+ 2000              BACKSPACE_CHAR  equ     $08
  35+ 2000              CR_CHAR         equ     $0D
  36+ 2000              BLANK_CHAR      equ     $20
  37+ 2000              QUOTE_CHAR      equ     "'"
  38+ 2000              DQUOTE_CHAR     equ     '"'
  39+ 2000              UNDERSCORE_CHAR equ     $5F
  40+ 2000              SOLIDBLOCK_CHAR equ     $8F
  41+ 2000              HALFBLOCK_CHAR  equ     $8C
  42+ 2000              LC_A_CHAR       equ     $61                 // lower-case "a"
  43+ 2000              LC_Z_CHAR       equ     $7A                 // lower-case "z"
  44+ 2000
  45+ 2000
  46+ 2000              //  ______________________________________________________________________
  47+ 2000              //
  48+ 2000
  49+ 2000                              // emulate something like:  ld hl,rp
  50+ 2000              ldhlrp          macro
  51+ 2000 ~                            ld      hl,(RP_Pointer)
  52+ 2000                              endm
  53+ 2000
  54+ 2000                              // emulate something like:  ld rp,hl
  55+ 2000              ldrphl          macro
  56+ 2000 ~                            ld      (RP_Pointer),hl
  57+ 2000                              endm
  58+ 2000
  59+ 2000              //  ______________________________________________________________________
  60+ 2000              //
  61+ 2000              //  Inner interpreter next-address pointer. This is 2T-state faster than "jp address"
  62+ 2000              next            macro
  63+ 2000 ~                            jp      (ix)
  64+ 2000                              endm
  65+ 2000
  66+ 2000              psh1            macro
  67+ 2000 ~                            push    hl
  68+ 2000 ~                            jp      (ix)
  69+ 2000                              endm
  70+ 2000
  71+ 2000              psh2            macro
  72+ 2000 ~                            push    de
  73+ 2000 ~                            push    hl
  74+ 2000 ~                            jp      (ix)
  75+ 2000                              endm
  76+ 2000
  77+ 2000              //  ______________________________________________________________________
  78+ 2000              //
  79+ 2000              // Bit constants in length-byte
  80+ 2000
  81+ 2000              SMUDGE_BIT      equ     %00100000               // $20
  82+ 2000              IMMEDIATE_BIT   equ     %01000000               // $40
  83+ 2000              END_BIT         equ     %10000000               // $80
  84+ 2000
  85+ 2000
  86+ 2000              //  ______________________________________________________________________
  87+ 2000              //
  88+ 2000              //  To create Forth words using this (nice) Assembler, we have to use the two following
  89+ 2000              //  pointers
  90+ 2000              temp_NFA        defl    0
  91+ 2000              last_NFA        defl    0
  92+ 2000              len_NFA         defl    0
  93+ 2000
  94+ 2000              Dict_Ptr        defl    0
  95+ 2000              // Heap_Ptr        defl    $0002
  96+ 2000              Prev_Ptr        defl    0
  97+ 2000              mirror_Ptr      defl    0
  98+ 2000
  99+ 2000              is_code         equ     0                   // so the direct machine-code starts at CFA
 100+ 2000              is_normal       equ     0                   // so the direct machine-code starts at CFA
 101+ 2000              is_immediate    equ     IMMEDIATE_BIT       // $40 - the definition is IMMEDIATE.
 102+ 2000
 103+ 2000
 104+ 2000              Behave          macro   xp
 105+ 2000 ~            temp_PTR        defl    $                   // save this org
 106+ 2000 ~                            org     (Heap_Ptr & $1FFF) + $E000 -2
 107+ 2000 ~                            dw      xp
 108+ 2000 ~                            org     temp_PTR
 109+ 2000                              endm
 110+ 2000
 111+ 2000              //  ______________________________________________________________________
 112+ 2000              //
 113+ 2000              //  Create a new "low-level" definition
 114+ 2000              //  This macro is used in the form  Create FORTH_NAME,n,"forth_name"
 115+ 2000              //  to create a new Forth Dictionary entry the same way Forth itself would do.
 116+ 2000              //  A word begins with a Length-Byte in range 1-31. Top 3 msb are used as flags
 117+ 2000              //  see SMUDGE_BIT and IMMEDIATE_BIT constant above.
 118+ 2000              //  It is followed by the Name of the word, i.e. a string expressed in 7-bit Ascii.
 119+ 2000              //  The last character of the Name must have the msb set to signal the end of it (END_BIT)
 120+ 2000              //  This macro acts much like the standard Forth definition CREATE
 121+ 2000
 122+ 2000              New_Def         macro   label, namec, runcode, bits
 123+ 2000 ~
 124+ 2000 ~            Dict_Ptr        defl    $
 125+ 2000 ~
 126+ 2000 ~            //              ______________________________________________________________________
 127+ 2000 ~            //              Heap part
 128+ 2000 ~
 129+ 2000 ~
 130+ 2000 ~                            org     (Heap_Ptr & $1FFF) + $E000
 131+ 2000 ~
 132+ 2000 ~            temp_NFA        defl    $                   // save this NFA address to temp_NFA
 133+ 2000 ~            Latest_Definition defl  Heap_Ptr
 134+ 2000 ~
 135+ 2000 ~                            // dummy db directives used to calculate length of namec
 136+ 2000 ~                            db      namec
 137+ 2000 ~            len_NFA         defl    $ - temp_NFA
 138+ 2000 ~                            org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 139+ 2000 ~
 140+ 2000 ~                            db      len_NFA | END_BIT | bits  // The start of NFA must have msb set to signal the beginning of the sounted string
 141+ 2000 ~                            db      namec               // name string in 7-bit ascii, but
 142+ 2000 ~                            org     $-1                 // alter last byte of Name just above to set
 143+ 2000 ~                            db      {b $} | END_BIT     // msb as name end
 144+ 2000 ~
 145+ 2000 ~                            dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 146+ 2000 ~            Prev_Ptr        defl    Heap_Ptr
 147+ 2000 ~
 148+ 2000 ~            mirror_Ptr      defl    $
 149+ 2000 ~
 150+ 2000 ~                            dw      Dict_Ptr + 2        // xt
 151+ 2000 ~            Heap_Ptr        defl    $ - $E000           // save current HP
 152+ 2000 ~
 153+ 2000 ~            Current_HP      defl  $ - $E000             // used to set HP once!
 154+ 2000 ~
 155+ 2000 ~            //              ______________________________________________________________________
 156+ 2000 ~            //              Dictionary part
 157+ 2000 ~
 158+ 2000 ~                            org     Dict_Ptr
 159+ 2000 ~
 160+ 2000 ~                            dw      mirror_Ptr - $E000 + Heap_offset
 161+ 2000 ~
 162+ 2000 ~            label:          if runcode != 0 ; ok        // This is the start address of the direct jp(hl)
 163+ 2000 ~                            call    runcode ; ok        // for primitive definitions  actual code
 164+ 2000 ~
 165+ 2000 ~
 166+ 2000 ~                            endif           ; ok        // for other definitions it "points" the correct handler
 167+ 2000 ~                            // Use of "; ok" to suppress "warning[fwdref]"
 168+ 2000 ~
 169+ 2000 ~            last_NFA        defl    temp_NFA            // keep track of NFA saved above
 170+ 2000                              endm
 171+ 2000
 172+ 2000              //  ______________________________________________________________________
 173+ 2000              //
 174+ 2000              // Create a "constant"
 175+ 2000              // The constant value is compiled in first PFA cell
 176+ 2000              Constant_Def    macro   label, namec, constant_value
 177+ 2000 ~                            New_Def  label, namec, Constant_Ptr, is_normal
 178+ 2000 ~                            dw      constant_value
 179+ 2000                              endm
 180+ 2000
 181+ 2000              //  ______________________________________________________________________
 182+ 2000              //
 183+ 2000              // Create a "variable"
 184+ 2000              // The when invoked, a variable returns a pointer, the address of first PFA cell
 185+ 2000              // this allow creation of "variables" which content is  of any length
 186+ 2000              Variable_Def    macro   label, namec, initial_value
 187+ 2000 ~                            New_Def  label, namec, Variable_Ptr, is_normal
 188+ 2000 ~                            dw      initial_value
 189+ 2000                              endm
 190+ 2000
 191+ 2000              //  ______________________________________________________________________
 192+ 2000              //
 193+ 2000              // Create a "user"
 194+ 2000              // It uses a single byte as offset to calculate the address of the variable
 195+ 2000              User_Def        macro   label, namec, offset_value
 196+ 2000 ~                            New_Def  label, namec, User_Ptr, is_normal
 197+ 2000 ~                            db      offset_value
 198+ 2000                              endm
 199+ 2000
 200+ 2000              //  ______________________________________________________________________
 201+ 2000              //
 202+ 2000              // Create a "colon-definition"
 203+ 2000              // The CFA contains a small routine i.e. "call Enter_Ptr".
 204+ 2000              // The PFA, three bytes later, contains the actual Forth definition
 205+ 2000              Colon_Def       macro   label, namec, bits
 206+ 2000 ~                            New_Def  label, namec, Enter_Ptr, bits ; ok
 207+ 2000                              endm
 208+ 2000
 209+ 2000              //  ______________________________________________________________________
 210+ 2000              //
 211+ 2000              // Create a "heap-string"
 212+ 2000              Start_Heap      macro
 213+ 2000 ~            temp_ORG        defl    $                   // save this ORG
 214+ 2000 ~                            org     (Heap_Ptr & $1FFF) + $E000
 215+ 2000 ~
 216+ 2000                              endm
 217+ 2000
 218+ 2000              End_Heap        macro
 219+ 2000 ~            Heap_Ptr        defl    $ - $E000
 220+ 2000 ~                            org     temp_ORG
 221+ 2000 ~
 222+ 2000                              endm
 223+ 2000
 224+ 2000
 225+ 2000              //  ______________________________________________________________________
 226+ 2000              //
 227+ 2000
 228+ 2000
 229+ 2000
 230+ 2000              S0_system:      equ     $D0E8               // Address of top of Calc Stack
 231+ 2000              TIB_system      equ     $D0E8               // TIB grows upwards, Return-Stack downward.
 232+ 2000              R0_system:      equ     $D188               // Address of top of Return Stack. This is S0 + $00A0
 233+ 2000              USER_system:    equ     $D188               // User variables zone.
 234+ 2000              FIRST_system:   equ     $D1E4               // Address of first BUFFER
 235+ 2000              LIMIT_system:   equ     $E000               // Address of first byte beyond last BUFFER
 236+ 2000
# file closed: C:\Zx\CSpect\Projects\vForth17_DOT/source/system.asm
 121  2000                              include "L0.asm"
# file opened: C:\Zx\CSpect\Projects\vForth17_DOT/source/L0.asm
   1+ 2000              //  ______________________________________________________________________
   2+ 2000              //
   3+ 2000              //  L0.asm
   4+ 2000              //
   5+ 2000              //  Origin-Area and Level-0 definitions
   6+ 2000              //  ______________________________________________________________________
   7+ 2000
   8+ 2000              Cold_origin:
   9+ 2000 F3                           di      // and     a
  10+ 2001 C3 11 33                     jp      ColdRoutine
  11+ 2004              Warm_origin:
  12+ 2004 37                           scf
  13+ 2005 C3 11 33                     jp      WarmRoutine
  14+ 2008
  15+ 2008              // +008
  16+ 2008 E6 D0        SP_Basic:       dw      $D0E6               // These are bits with some "standard" meaning... 0101
  17+ 200A
  18+ 200A              // +00A
  19+ 200A 00 0E                        dw      $0E00
  20+ 200C
  21+ 200C              // +00C
  22+ 200C 12 0D        Latest_origin:  dw      Latest_Definition   // Latest word (used in Cold_Start)
  23+ 200E
  24+ 200E              // +00E
  25+ 200E 0C 00        DEL_Char_Ptr:   dw      $000C               // This is the characther used as "Back-Space"
  26+ 2010
  27+ 2010              // +010
  28+ 2010 50 B2        CPU_Id          dw      $B250               // Z80 expressed in base 36
  29+ 2012
  30+ 2012              // +012
  31+ 2012 E8 D0        S0_origin:      dw      S0_system
  32+ 2014 88 D1        R0_origin:      dw      R0_system
  33+ 2016 E8 D0        TIB_origin:     dw      TIB_system
  34+ 2018 1F 00        WIDTH_origin:   dw      31
  35+ 201A 01 00        WARNING_origin: dw      1
  36+ 201C 00 80        FENCE_origin:   dw      $8000 // $8184 // 25446 // $6000 // **** Fence_Word
  37+ 201E 00 80        DP_origin       dw      $8000 // $8184 // 25446 // $6000 // ****Fence_Word
  38+ 2020 FB 31        VOCLINK_origin: dw      Voclink_Ptr
  39+ 2022 E4 D1                        dw      FIRST_system
  40+ 2024 00 E0                        dw      LIMIT_system
  41+ 2026 20 0D        HP_origin:      dw      Current_HP
  42+ 2028
  43+ 2028              // +028
  44+ 2028 8F           Block_Face:     db      SOLIDBLOCK_CHAR     // Caps-Lock   Cursor face
  45+ 2029 8C           Half_Face:      db      HALFBLOCK_CHAR      // Caps-unlock Cursor face
  46+ 202A 5F           Underscore_Face:db      UNDERSCORE_CHAR     // Underscore  Cursor face
  47+ 202B 00                           db      0
  48+ 202C
  49+ 202C              // +02C
  50+ 202C 00 00        SP_Saved:       dw      $0000               // Saved SP during NextOS call
  51+ 202E
  52+ 202E              // +02E
  53+ 202E 88 D1        USER_Pointer:   dw      USER_system
  54+ 2030
  55+ 2030              // +030
  56+ 2030 88 D1        RP_Pointer:     dw      $d188 // R0_system
  57+ 2032
  58+ 2032              // +32
  59+ 2032 00 00        IX_Echo:        dw      $0000               // Echo IX after NextOS call
  60+ 2034
  61+ 2034
  62+ 2034                              Start_Heap
  62+ 2034             >temp_ORG        defl    $                   // save this ORG
  62+ 2034             >                org     (Heap_Ptr & $1FFF) + $E000
  62+ E002             >
  63+ E002              Splash_Ptr      defl    $ - $E000           // save current HP
  64+ E002 6F                           db      120 - 9
  65+ E003 20 76 2D 46                  db      " v-Forth 1.7 - NextZXOS version ", $0D      // 36
  65+ E007 6F 72 74 68
  65+ E00B 20 31 2E 37
  65+ E00F 20 2D 20 4E
  65+ E013 65 78 74 5A
  65+ E017 58 4F 53 20
  65+ E01B 76 65 72 73
  65+ E01F 69 6F 6E 20
  65+ E023 0D
  66+ E024 20 48 65 61                  db      " Heap Vocabulary - build 2023-10-04 ", $0D  // 40
  66+ E028 70 20 56 6F
  66+ E02C 63 61 62 75
  66+ E030 6C 61 72 79
  66+ E034 20 2D 20 62
  66+ E038 75 69 6C 64
  66+ E03C 20 32 30 32
  66+ E040 33 2D 31 30
  66+ E044 2D 30 34 20
  66+ E048 0D
  67+ E049 20 4D 49 54                  db      " MIT License ", 127                         // 17
  67+ E04D 20 4C 69 63
  67+ E051 65 6E 73 65
  67+ E055 20 7F
  68+ E057 20 31 39 39                  db      " 1990-2023 Matteo Vitturi ", $0D               // 27
  68+ E05B 30 2D 32 30
  68+ E05F 32 33 20 4D
  68+ E063 61 74 74 65
  68+ E067 6F 20 56 69
  68+ E06B 74 74 75 72
  68+ E06F 69 20 0D
  69+ E072 20                           db      " "
  70+ E073                              End_Heap
  70+ E073             >Heap_Ptr        defl    $ - $E000
  70+ E073             >                org     temp_ORG
  70+ 2034             >
  71+ 2034
  72+ 2034              //  ______________________________________________________________________
  73+ 2034
  74+ 2034              // from this point we can use LDHLRP and LDRPHL Assembler macros
  75+ 2034              // instead of their equivalent long sequences.
  76+ 2034
  77+ 2034              //  ______________________________________________________________________
  78+ 2034
  79+ 2034              // address for "next" - inner interpreter
  80+ 2034              // This address must always be pointed by IX
  81+ 2034              // "next" macro simply does a  jp(ix)  instruction
  82+ 2034
  83+ 2034              // Psh2_Ptr:       push    de
  84+ 2034              // Psh1_Ptr:       push    hl
  85+ 2034
  86+ 2034              Next_Ptr:       // This address must always be kept in IX: "next" relies on that
  87+ 2034
  88+ 2034              //              if ( 1 == DEBUGGING )
  89+ 2034              //              ld      hl, Next_Breakpoint_1
  90+ 2034              //              and     a
  91+ 2034              //              sbc     hl, bc
  92+ 2034              //              jr      nz, Next_Continue
  93+ 2034              //              nop // This is where you have to put a real breakpoint to intercept BC values...
  94+ 2034              //              endif
  95+ 2034
  96+ 2034              Next_Continue:
  97+ 2034 0A                           ld      a, (bc)
  98+ 2035 03                           inc     bc
  99+ 2036 6F                           ld      l, a
 100+ 2037 0A                           ld      a, (bc)
 101+ 2038 03                           inc     bc
 102+ 2039 67                           ld      h, a                // hl contains a CFA (xt) of word being executed
 103+ 203A
 104+ 203A              // Execute xt i.e. CFA held in HL
 105+ 203A              Exec_Ptr:
 106+ 203A
 107+ 203A
 108+ 203A
 109+ 203A
 110+ 203A E9                           jp      (hl)                // and jump to it
 111+ 203B                                                          // there you'll find the real code or a CALL to a ;code part
 112+ 203B
 113+ 203B              // temp_NULL       defl    Heap_Ptr & $1FFF
 114+ 203B              // 0x00         n --      ( compile time )
 115+ 203B              //              New_Def NUL_DUMMY,  $00, is_code, is_immediate
 116+ 203B              //              next
 117+ 203B
 118+ 203B              //  ______________________________________________________________________
 119+ 203B              //
 120+ 203B              // lit          -- x
 121+ 203B              // puts on top of stack the value of the following word.
 122+ 203B              // it is compiled in colon definition before a literal number
 123+ 203B
 124+ 203B                              New_Def  LIT, "LIT", is_code, is_normal
 124+ 203B             >
 124+ 203B             >Dict_Ptr        defl    $
 124+ 203B             >
 124+ 203B             >//              ______________________________________________________________________
 124+ 203B             >//              Heap part
 124+ 203B             >
 124+ 203B             >
 124+ 203B             >                org     (Heap_Ptr & $1FFF) + $E000
 124+ E073             >
 124+ E073             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 124+ E073             >Latest_Definition defl  Heap_Ptr
 124+ E073             >
 124+ E073             >                // dummy db directives used to calculate length of namec
 124+ E073 4C 49 54    >                db      "LIT"
 124+ E076             >len_NFA         defl    $ - temp_NFA
 124+ E076             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 124+ E073             >
 124+ E073 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 124+ E074 4C 49 54    >                db      "LIT"               // name string in 7-bit ascii, but
 124+ E077             >                org     $-1                 // alter last byte of Name just above to set
 124+ E076 D4          >                db      {b $} | END_BIT     // msb as name end
 124+ E077             >
 124+ E077 00 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 124+ E079             >Prev_Ptr        defl    Heap_Ptr
 124+ E079             >
 124+ E079             >mirror_Ptr      defl    $
 124+ E079             >
 124+ E079 3D 20       >                dw      Dict_Ptr + 2        // xt
 124+ E07B             >Heap_Ptr        defl    $ - $E000           // save current HP
 124+ E07B             >
 124+ E07B             >Current_HP      defl  $ - $E000             // used to set HP once!
 124+ E07B             >
 124+ E07B             >//              ______________________________________________________________________
 124+ E07B             >//              Dictionary part
 124+ E07B             >
 124+ E07B             >                org     Dict_Ptr
 124+ 203B             >
 124+ 203B 79 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 124+ 203D             >
 124+ 203D             >LIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 124+ 203D ~           >                call    runcode ; ok        // for primitive definitions  actual code
 124+ 203D ~           >
 124+ 203D ~           >
 124+ 203D             >                endif           ; ok        // for other definitions it "points" the correct handler
 124+ 203D             >                // Use of "; ok" to suppress "warning[fwdref]"
 124+ 203D             >
 124+ 203D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 125+ 203D
 126+ 203D 0A                           ld      a, (bc)
 127+ 203E 03                           inc     bc
 128+ 203F 6F                           ld      l, a
 129+ 2040 0A                           ld      a, (bc)
 130+ 2041 03                           inc     bc
 131+ 2042 67                           ld      h, a
 132+ 2043 E5                           push    hl
 133+ 2044                              next
 133+ 2044 DD E9       >                jp      (ix)
 134+ 2046
 135+ 2046              //  ______________________________________________________________________
 136+ 2046              //
 137+ 2046              // execute      i*x xt -- j*x
 138+ 2046              // execution token. usually xt is given by CFA
 139+ 2046
 140+ 2046                              New_Def  EXECUTE, "EXECUTE", is_code, is_normal
 140+ 2046             >
 140+ 2046             >Dict_Ptr        defl    $
 140+ 2046             >
 140+ 2046             >//              ______________________________________________________________________
 140+ 2046             >//              Heap part
 140+ 2046             >
 140+ 2046             >
 140+ 2046             >                org     (Heap_Ptr & $1FFF) + $E000
 140+ E07B             >
 140+ E07B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 140+ E07B             >Latest_Definition defl  Heap_Ptr
 140+ E07B             >
 140+ E07B             >                // dummy db directives used to calculate length of namec
 140+ E07B 45 58 45 43 >                db      "EXECUTE"
 140+ E07F 55 54 45    >
 140+ E082             >len_NFA         defl    $ - temp_NFA
 140+ E082             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 140+ E07B             >
 140+ E07B 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 140+ E07C 45 58 45 43 >                db      "EXECUTE"               // name string in 7-bit ascii, but
 140+ E080 55 54 45    >
 140+ E083             >                org     $-1                 // alter last byte of Name just above to set
 140+ E082 C5          >                db      {b $} | END_BIT     // msb as name end
 140+ E083             >
 140+ E083 73 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 140+ E085             >Prev_Ptr        defl    Heap_Ptr
 140+ E085             >
 140+ E085             >mirror_Ptr      defl    $
 140+ E085             >
 140+ E085 48 20       >                dw      Dict_Ptr + 2        // xt
 140+ E087             >Heap_Ptr        defl    $ - $E000           // save current HP
 140+ E087             >
 140+ E087             >Current_HP      defl  $ - $E000             // used to set HP once!
 140+ E087             >
 140+ E087             >//              ______________________________________________________________________
 140+ E087             >//              Dictionary part
 140+ E087             >
 140+ E087             >                org     Dict_Ptr
 140+ 2046             >
 140+ 2046 85 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 140+ 2048             >
 140+ 2048             >EXECUTE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 140+ 2048 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 140+ 2048 ~           >
 140+ 2048 ~           >
 140+ 2048             >                endif           ; ok        // for other definitions it "points" the correct handler
 140+ 2048             >                // Use of "; ok" to suppress "warning[fwdref]"
 140+ 2048             >
 140+ 2048             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 141+ 2048 C9                           ret
 142+ 2049
 143+ 2049              //  ______________________________________________________________________
 144+ 2049              //
 145+ 2049              // brk
 146+ 2049              //              New_Def  BRK, "BRK", is_code, is_normal
 147+ 2049              //              next
 148+ 2049
 149+ 2049
 150+ 2049
 151+ 2049              //  ______________________________________________________________________
 152+ 2049              //
 153+ 2049              // (+loop)      n --
 154+ 2049              // compiled by +LOOP. it uses the top two values of return-stack to
 155+ 2049              // keep track of index and limit, they are accessed via I and I'
 156+ 2049              // Add n to the loop index. If the loop index did not cross the boundary
 157+ 2049              // between the loop limit minus one and the loop limit, continue execution
 158+ 2049              // at the beginning of the loop. Otherwise, discard the current loop control
 159+ 2049              // parameters and continue execution immediately following the loop.
 160+ 2049                              New_Def C_PLOOP, "(+LOOP)", is_code, is_normal
 160+ 2049             >
 160+ 2049             >Dict_Ptr        defl    $
 160+ 2049             >
 160+ 2049             >//              ______________________________________________________________________
 160+ 2049             >//              Heap part
 160+ 2049             >
 160+ 2049             >
 160+ 2049             >                org     (Heap_Ptr & $1FFF) + $E000
 160+ E087             >
 160+ E087             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 160+ E087             >Latest_Definition defl  Heap_Ptr
 160+ E087             >
 160+ E087             >                // dummy db directives used to calculate length of namec
 160+ E087 28 2B 4C 4F >                db      "(+LOOP)"
 160+ E08B 4F 50 29    >
 160+ E08E             >len_NFA         defl    $ - temp_NFA
 160+ E08E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 160+ E087             >
 160+ E087 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 160+ E088 28 2B 4C 4F >                db      "(+LOOP)"               // name string in 7-bit ascii, but
 160+ E08C 4F 50 29    >
 160+ E08F             >                org     $-1                 // alter last byte of Name just above to set
 160+ E08E A9          >                db      {b $} | END_BIT     // msb as name end
 160+ E08F             >
 160+ E08F 7B 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 160+ E091             >Prev_Ptr        defl    Heap_Ptr
 160+ E091             >
 160+ E091             >mirror_Ptr      defl    $
 160+ E091             >
 160+ E091 4B 20       >                dw      Dict_Ptr + 2        // xt
 160+ E093             >Heap_Ptr        defl    $ - $E000           // save current HP
 160+ E093             >
 160+ E093             >Current_HP      defl  $ - $E000             // used to set HP once!
 160+ E093             >
 160+ E093             >//              ______________________________________________________________________
 160+ E093             >//              Dictionary part
 160+ E093             >
 160+ E093             >                org     Dict_Ptr
 160+ 2049             >
 160+ 2049 91 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 160+ 204B             >
 160+ 204B             >C_PLOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 160+ 204B ~           >                call    runcode ; ok        // for primitive definitions  actual code
 160+ 204B ~           >
 160+ 204B ~           >
 160+ 204B             >                endif           ; ok        // for other definitions it "points" the correct handler
 160+ 204B             >                // Use of "; ok" to suppress "warning[fwdref]"
 160+ 204B             >
 160+ 204B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 161+ 204B
 162+ 204B              Loop_Ptr:
 163+ 204B E1                           pop     hl                  // get increment
 164+ 204C EB                           ex      de, hl
 165+ 204D                              // *** ldhlrp
 166+ 204D C5                           push    bc                  // Save IP
 167+ 204E 42                           ld      b, d                // bc is increment
 168+ 204F 4B                           ld      c, e
 169+ 2050 E5                           push    hl
 170+ 2051 5E                           ld      e, (hl)             // hl points to loop-index, add increment to it.
 171+ 2052 7B                           ld      a, e                // de keeps index before increment.
 172+ 2053 81                           add     c
 173+ 2054 77                           ld      (hl), a
 174+ 2055 23                           inc     hl
 175+ 2056 56                           ld      d, (hl)
 176+ 2057 7A                           ld      a, d
 177+ 2058 88                           adc     b
 178+ 2059 77                           ld      (hl),a
 179+ 205A 23                           inc     hl
 180+ 205B
 181+ 205B 7B                           ld      a, e
 182+ 205C 96                           sub     (hl)
 183+ 205D 5F                           ld      e, a
 184+ 205E 23                           inc     hl
 185+ 205F 7A                           ld      a, d
 186+ 2060 9E                           sbc     (hl)
 187+ 2061 57                           ld      d, a                // DE is index - limit : limit is the "new zero"
 188+ 2062
 189+ 2062 EB                           ex      de, hl              // swap HL and DE, so restore DE:=RP+3
 190+ 2063 09                           add     hl, bc
 191+ 2064 CB 78                        bit     7, b                // keep increment-sign just before overwriting d
 192+ 2066 28 01                        jr      z, Loop_NegativeIncrement
 193+ 2068 3F                               ccf                     // carry-flag tracks bonudary limit crossing.
 194+ 2069              Loop_NegativeIncrement:
 195+ 2069 38 04                        jr      c, Loop_Endif
 196+ 206B D1                               pop     de              // Discard RP+3, retrieve original RP
 197+ 206C C1                               pop     bc                  // Retrieve IP
 198+ 206D 18 13                            jr      Branch_Ptr      // perform branch consuming following cell
 199+ 206F              Loop_Endif:
 200+ 206F C1                           pop     bc                  // discard original RP
 201+ 2070 EB                           ex      de, hl
 202+ 2071 23                           inc     hl                  // keep    RP+4 (exit from loop)
 203+ 2072                              // *** ldrphl                      // ld rp,hl macro 30h +Origin
 204+ 2072 EB                           ex      de, hl
 205+ 2073 C1                           pop     bc                  // Retrieve IP
 206+ 2074 03                           inc     bc                  // skip branch-style offset
 207+ 2075 03                           inc     bc
 208+ 2076                              next
 208+ 2076 DD E9       >                jp      (ix)
 209+ 2078
 210+ 2078              //  ______________________________________________________________________
 211+ 2078              //
 212+ 2078              // (loop)       n --
 213+ 2078              // same as (LOOP) but index is incremented by 1
 214+ 2078              // compiled by LOOP.
 215+ 2078                              New_Def C_LOOP, "(LOOP)", is_code, is_normal
 215+ 2078             >
 215+ 2078             >Dict_Ptr        defl    $
 215+ 2078             >
 215+ 2078             >//              ______________________________________________________________________
 215+ 2078             >//              Heap part
 215+ 2078             >
 215+ 2078             >
 215+ 2078             >                org     (Heap_Ptr & $1FFF) + $E000
 215+ E093             >
 215+ E093             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 215+ E093             >Latest_Definition defl  Heap_Ptr
 215+ E093             >
 215+ E093             >                // dummy db directives used to calculate length of namec
 215+ E093 28 4C 4F 4F >                db      "(LOOP)"
 215+ E097 50 29       >
 215+ E099             >len_NFA         defl    $ - temp_NFA
 215+ E099             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 215+ E093             >
 215+ E093 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 215+ E094 28 4C 4F 4F >                db      "(LOOP)"               // name string in 7-bit ascii, but
 215+ E098 50 29       >
 215+ E09A             >                org     $-1                 // alter last byte of Name just above to set
 215+ E099 A9          >                db      {b $} | END_BIT     // msb as name end
 215+ E09A             >
 215+ E09A 87 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 215+ E09C             >Prev_Ptr        defl    Heap_Ptr
 215+ E09C             >
 215+ E09C             >mirror_Ptr      defl    $
 215+ E09C             >
 215+ E09C 7A 20       >                dw      Dict_Ptr + 2        // xt
 215+ E09E             >Heap_Ptr        defl    $ - $E000           // save current HP
 215+ E09E             >
 215+ E09E             >Current_HP      defl  $ - $E000             // used to set HP once!
 215+ E09E             >
 215+ E09E             >//              ______________________________________________________________________
 215+ E09E             >//              Dictionary part
 215+ E09E             >
 215+ E09E             >                org     Dict_Ptr
 215+ 2078             >
 215+ 2078 9C 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 215+ 207A             >
 215+ 207A             >C_LOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 215+ 207A ~           >                call    runcode ; ok        // for primitive definitions  actual code
 215+ 207A ~           >
 215+ 207A ~           >
 215+ 207A             >                endif           ; ok        // for other definitions it "points" the correct handler
 215+ 207A             >                // Use of "; ok" to suppress "warning[fwdref]"
 215+ 207A             >
 215+ 207A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 216+ 207A ED 8A 00 01                  push    1
 217+ 207E 18 CB                        jr      Loop_Ptr
 218+ 2080
 219+ 2080              //  ______________________________________________________________________
 220+ 2080              //
 221+ 2080              // branch       --
 222+ 2080              // unconditional branch in colon definition using the following cell as an offset from current IP value
 223+ 2080              // compiled by ELSE, AGAIN and some other immediate words
 224+ 2080
 225+ 2080                              New_Def BRANCH, "BRANCH", is_code, is_normal
 225+ 2080             >
 225+ 2080             >Dict_Ptr        defl    $
 225+ 2080             >
 225+ 2080             >//              ______________________________________________________________________
 225+ 2080             >//              Heap part
 225+ 2080             >
 225+ 2080             >
 225+ 2080             >                org     (Heap_Ptr & $1FFF) + $E000
 225+ E09E             >
 225+ E09E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 225+ E09E             >Latest_Definition defl  Heap_Ptr
 225+ E09E             >
 225+ E09E             >                // dummy db directives used to calculate length of namec
 225+ E09E 42 52 41 4E >                db      "BRANCH"
 225+ E0A2 43 48       >
 225+ E0A4             >len_NFA         defl    $ - temp_NFA
 225+ E0A4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 225+ E09E             >
 225+ E09E 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 225+ E09F 42 52 41 4E >                db      "BRANCH"               // name string in 7-bit ascii, but
 225+ E0A3 43 48       >
 225+ E0A5             >                org     $-1                 // alter last byte of Name just above to set
 225+ E0A4 C8          >                db      {b $} | END_BIT     // msb as name end
 225+ E0A5             >
 225+ E0A5 93 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 225+ E0A7             >Prev_Ptr        defl    Heap_Ptr
 225+ E0A7             >
 225+ E0A7             >mirror_Ptr      defl    $
 225+ E0A7             >
 225+ E0A7 82 20       >                dw      Dict_Ptr + 2        // xt
 225+ E0A9             >Heap_Ptr        defl    $ - $E000           // save current HP
 225+ E0A9             >
 225+ E0A9             >Current_HP      defl  $ - $E000             // used to set HP once!
 225+ E0A9             >
 225+ E0A9             >//              ______________________________________________________________________
 225+ E0A9             >//              Dictionary part
 225+ E0A9             >
 225+ E0A9             >                org     Dict_Ptr
 225+ 2080             >
 225+ 2080 A7 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 225+ 2082             >
 225+ 2082             >BRANCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 225+ 2082 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 225+ 2082 ~           >
 225+ 2082 ~           >
 225+ 2082             >                endif           ; ok        // for other definitions it "points" the correct handler
 225+ 2082             >                // Use of "; ok" to suppress "warning[fwdref]"
 225+ 2082             >
 225+ 2082             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 226+ 2082              Branch_Ptr:
 227+ 2082 0A                           ld      a, (bc)
 228+ 2083 6F                           ld      l, a
 229+ 2084 03                           inc     bc
 230+ 2085 0A                           ld      a, (bc)
 231+ 2086 67                           ld      h, a
 232+ 2087 0B                           dec     bc
 233+ 2088 09                           add     hl, bc
 234+ 2089 4D                           ld      c, l
 235+ 208A 44                           ld      b, h
 236+ 208B                              next
 236+ 208B DD E9       >                jp      (ix)
 237+ 208D
 238+ 208D
 239+ 208D              //  ______________________________________________________________________
 240+ 208D              //
 241+ 208D              // 0branch      f --
 242+ 208D              // conditional branch if the top-of-stack is ZERO or FALSE.
 243+ 208D              // compiled by IF, UNTIL and some other immediate words
 244+ 208D
 245+ 208D                              New_Def ZBRANCH, "0BRANCH", is_code, is_normal
 245+ 208D             >
 245+ 208D             >Dict_Ptr        defl    $
 245+ 208D             >
 245+ 208D             >//              ______________________________________________________________________
 245+ 208D             >//              Heap part
 245+ 208D             >
 245+ 208D             >
 245+ 208D             >                org     (Heap_Ptr & $1FFF) + $E000
 245+ E0A9             >
 245+ E0A9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 245+ E0A9             >Latest_Definition defl  Heap_Ptr
 245+ E0A9             >
 245+ E0A9             >                // dummy db directives used to calculate length of namec
 245+ E0A9 30 42 52 41 >                db      "0BRANCH"
 245+ E0AD 4E 43 48    >
 245+ E0B0             >len_NFA         defl    $ - temp_NFA
 245+ E0B0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 245+ E0A9             >
 245+ E0A9 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 245+ E0AA 30 42 52 41 >                db      "0BRANCH"               // name string in 7-bit ascii, but
 245+ E0AE 4E 43 48    >
 245+ E0B1             >                org     $-1                 // alter last byte of Name just above to set
 245+ E0B0 C8          >                db      {b $} | END_BIT     // msb as name end
 245+ E0B1             >
 245+ E0B1 9E 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 245+ E0B3             >Prev_Ptr        defl    Heap_Ptr
 245+ E0B3             >
 245+ E0B3             >mirror_Ptr      defl    $
 245+ E0B3             >
 245+ E0B3 8F 20       >                dw      Dict_Ptr + 2        // xt
 245+ E0B5             >Heap_Ptr        defl    $ - $E000           // save current HP
 245+ E0B5             >
 245+ E0B5             >Current_HP      defl  $ - $E000             // used to set HP once!
 245+ E0B5             >
 245+ E0B5             >//              ______________________________________________________________________
 245+ E0B5             >//              Dictionary part
 245+ E0B5             >
 245+ E0B5             >                org     Dict_Ptr
 245+ 208D             >
 245+ 208D B3 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 245+ 208F             >
 245+ 208F             >ZBRANCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 245+ 208F ~           >                call    runcode ; ok        // for primitive definitions  actual code
 245+ 208F ~           >
 245+ 208F ~           >
 245+ 208F             >                endif           ; ok        // for other definitions it "points" the correct handler
 245+ 208F             >                // Use of "; ok" to suppress "warning[fwdref]"
 245+ 208F             >
 245+ 208F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 246+ 208F              ZBranch_Ptr:
 247+ 208F E1                           pop     hl
 248+ 2090 7D                           ld      a, l
 249+ 2091 B4                           or      h
 250+ 2092 28 EE                        jr      z, Branch_Ptr
 251+ 2094 03                           inc     bc                  // if not branch, skip offset cell.
 252+ 2095 03                           inc     bc
 253+ 2096                              next
 253+ 2096 DD E9       >                jp      (ix)
 254+ 2098
 255+ 2098              //  ______________________________________________________________________
 256+ 2098              //
 257+ 2098              // (leave)        --
 258+ 2098              // compiled by LEAVE
 259+ 2098              // this forces to exit from loop and jump past
 260+ 2098                              New_Def C_LEAVE, "(LEAVE)", is_code, is_normal
 260+ 2098             >
 260+ 2098             >Dict_Ptr        defl    $
 260+ 2098             >
 260+ 2098             >//              ______________________________________________________________________
 260+ 2098             >//              Heap part
 260+ 2098             >
 260+ 2098             >
 260+ 2098             >                org     (Heap_Ptr & $1FFF) + $E000
 260+ E0B5             >
 260+ E0B5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 260+ E0B5             >Latest_Definition defl  Heap_Ptr
 260+ E0B5             >
 260+ E0B5             >                // dummy db directives used to calculate length of namec
 260+ E0B5 28 4C 45 41 >                db      "(LEAVE)"
 260+ E0B9 56 45 29    >
 260+ E0BC             >len_NFA         defl    $ - temp_NFA
 260+ E0BC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 260+ E0B5             >
 260+ E0B5 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 260+ E0B6 28 4C 45 41 >                db      "(LEAVE)"               // name string in 7-bit ascii, but
 260+ E0BA 56 45 29    >
 260+ E0BD             >                org     $-1                 // alter last byte of Name just above to set
 260+ E0BC A9          >                db      {b $} | END_BIT     // msb as name end
 260+ E0BD             >
 260+ E0BD A9 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 260+ E0BF             >Prev_Ptr        defl    Heap_Ptr
 260+ E0BF             >
 260+ E0BF             >mirror_Ptr      defl    $
 260+ E0BF             >
 260+ E0BF 9A 20       >                dw      Dict_Ptr + 2        // xt
 260+ E0C1             >Heap_Ptr        defl    $ - $E000           // save current HP
 260+ E0C1             >
 260+ E0C1             >Current_HP      defl  $ - $E000             // used to set HP once!
 260+ E0C1             >
 260+ E0C1             >//              ______________________________________________________________________
 260+ E0C1             >//              Dictionary part
 260+ E0C1             >
 260+ E0C1             >                org     Dict_Ptr
 260+ 2098             >
 260+ 2098 BF 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 260+ 209A             >
 260+ 209A             >C_LEAVE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 260+ 209A ~           >                call    runcode ; ok        // for primitive definitions  actual code
 260+ 209A ~           >
 260+ 209A ~           >
 260+ 209A             >                endif           ; ok        // for other definitions it "points" the correct handler
 260+ 209A             >                // Use of "; ok" to suppress "warning[fwdref]"
 260+ 209A             >
 260+ 209A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 261+ 209A EB                           ex      de, hl
 262+ 209B                              // *** ldhlrp
 263+ 209B 3E 04                        ld      a, 4
 264+ 209D ED 31                        add     hl, a
 265+ 209F                              // *** ldrphl
 266+ 209F EB                           ex      de, hl
 267+ 20A0 18 E0                        jr      Branch_Ptr       // perform branch consuming following cell
 268+ 20A2                              next
 268+ 20A2 DD E9       >                jp      (ix)
 269+ 20A4
 270+ 20A4              //  ______________________________________________________________________
 271+ 20A4              //
 272+ 20A4              // (?do)        lim ind --
 273+ 20A4              // compiled by ?DO to make a loop checking for lim == ind first
 274+ 20A4              // at run-time (?DO) must be followed by a BRANCH offset
 275+ 20A4              // used to skip the loop if lim == ind
 276+ 20A4                              New_Def C_Q_DO, "(?DO)", is_code, is_normal
 276+ 20A4             >
 276+ 20A4             >Dict_Ptr        defl    $
 276+ 20A4             >
 276+ 20A4             >//              ______________________________________________________________________
 276+ 20A4             >//              Heap part
 276+ 20A4             >
 276+ 20A4             >
 276+ 20A4             >                org     (Heap_Ptr & $1FFF) + $E000
 276+ E0C1             >
 276+ E0C1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 276+ E0C1             >Latest_Definition defl  Heap_Ptr
 276+ E0C1             >
 276+ E0C1             >                // dummy db directives used to calculate length of namec
 276+ E0C1 28 3F 44 4F >                db      "(?DO)"
 276+ E0C5 29          >
 276+ E0C6             >len_NFA         defl    $ - temp_NFA
 276+ E0C6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 276+ E0C1             >
 276+ E0C1 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 276+ E0C2 28 3F 44 4F >                db      "(?DO)"               // name string in 7-bit ascii, but
 276+ E0C6 29          >
 276+ E0C7             >                org     $-1                 // alter last byte of Name just above to set
 276+ E0C6 A9          >                db      {b $} | END_BIT     // msb as name end
 276+ E0C7             >
 276+ E0C7 B5 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 276+ E0C9             >Prev_Ptr        defl    Heap_Ptr
 276+ E0C9             >
 276+ E0C9             >mirror_Ptr      defl    $
 276+ E0C9             >
 276+ E0C9 A6 20       >                dw      Dict_Ptr + 2        // xt
 276+ E0CB             >Heap_Ptr        defl    $ - $E000           // save current HP
 276+ E0CB             >
 276+ E0CB             >Current_HP      defl  $ - $E000             // used to set HP once!
 276+ E0CB             >
 276+ E0CB             >//              ______________________________________________________________________
 276+ E0CB             >//              Dictionary part
 276+ E0CB             >
 276+ E0CB             >                org     Dict_Ptr
 276+ 20A4             >
 276+ 20A4 C9 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 276+ 20A6             >
 276+ 20A6             >C_Q_DO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 276+ 20A6 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 276+ 20A6 ~           >
 276+ 20A6 ~           >
 276+ 20A6             >                endif           ; ok        // for other definitions it "points" the correct handler
 276+ 20A6             >                // Use of "; ok" to suppress "warning[fwdref]"
 276+ 20A6             >
 276+ 20A6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 277+ 20A6 D9                           exx
 278+ 20A7 D1                            pop     de                  // de has the index
 279+ 20A8 E1                            pop     hl                  // hl has the limit
 280+ 20A9 44                            ld      b, h
 281+ 20AA 4D                            ld      c, l
 282+ 20AB E5                            push    hl                  // put them back to stack for later
 283+ 20AC D5                            push    de
 284+ 20AD A7                            and     a                   // reset carry flag
 285+ 20AE ED 52                         sbc     hl, de              // compute limit - index
 286+ 20B0 D9                           exx
 287+ 20B1 20 04                        jr      nz, Do_Ptr          // if zero then don't even begin loop
 288+ 20B3 E1                               pop     hl
 289+ 20B4 E1                               pop     hl
 290+ 20B5 18 CB                            jr      Branch_Ptr          // perform branch consuming following cell
 291+ 20B7              Do_Ptr:
 292+ 20B7                              // *** ldhlrp                 // prepare RP
 293+ 20B7                              // *** ex      de, hl
 294+ 20B7                              // dec     de
 295+ 20B7                              // dec     de
 296+ 20B7                              // dec     de
 297+ 20B7                              // dec     de
 298+ 20B7 ED 35 FC FF                  add     de, -4
 299+ 20BB D5                           push    de                  // pass it to h'l'
 300+ 20BC                              // *** ex      de, hl
 301+ 20BC                              // *** ldrphl
 302+ 20BC D9                           exx
 303+ 20BD E1                            pop     hl
 304+ 20BE
 305+ 20BE                               // store index as top RP
 306+ 20BE D1                            pop     de
 307+ 20BF 73                            ld      (hl), e
 308+ 20C0 23                            inc     hl
 309+ 20C1 72                            ld      (hl), d
 310+ 20C2 23                            inc     hl
 311+ 20C3                               // stores lim as second from top RP
 312+ 20C3 D1                            pop     de
 313+ 20C4 73                            ld      (hl), e
 314+ 20C5 23                            inc     hl
 315+ 20C6 72                            ld      (hl), d
 316+ 20C7 D9                           exx
 317+ 20C8                              // skip branch-style offseet
 318+ 20C8 03                           inc     bc
 319+ 20C9 03                           inc     bc
 320+ 20CA                              next
 320+ 20CA DD E9       >                jp      (ix)
 321+ 20CC
 322+ 20CC              //  ______________________________________________________________________
 323+ 20CC              //
 324+ 20CC              // (do)        lim ind --
 325+ 20CC              // compiled by DO to make a loop checking for lim == ind first
 326+ 20CC              // this is a simpler version of (?DO)
 327+ 20CC                              New_Def C_DO, "(DO)", is_code, is_normal
 327+ 20CC             >
 327+ 20CC             >Dict_Ptr        defl    $
 327+ 20CC             >
 327+ 20CC             >//              ______________________________________________________________________
 327+ 20CC             >//              Heap part
 327+ 20CC             >
 327+ 20CC             >
 327+ 20CC             >                org     (Heap_Ptr & $1FFF) + $E000
 327+ E0CB             >
 327+ E0CB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 327+ E0CB             >Latest_Definition defl  Heap_Ptr
 327+ E0CB             >
 327+ E0CB             >                // dummy db directives used to calculate length of namec
 327+ E0CB 28 44 4F 29 >                db      "(DO)"
 327+ E0CF             >len_NFA         defl    $ - temp_NFA
 327+ E0CF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 327+ E0CB             >
 327+ E0CB 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 327+ E0CC 28 44 4F 29 >                db      "(DO)"               // name string in 7-bit ascii, but
 327+ E0D0             >                org     $-1                 // alter last byte of Name just above to set
 327+ E0CF A9          >                db      {b $} | END_BIT     // msb as name end
 327+ E0D0             >
 327+ E0D0 C1 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 327+ E0D2             >Prev_Ptr        defl    Heap_Ptr
 327+ E0D2             >
 327+ E0D2             >mirror_Ptr      defl    $
 327+ E0D2             >
 327+ E0D2 CE 20       >                dw      Dict_Ptr + 2        // xt
 327+ E0D4             >Heap_Ptr        defl    $ - $E000           // save current HP
 327+ E0D4             >
 327+ E0D4             >Current_HP      defl  $ - $E000             // used to set HP once!
 327+ E0D4             >
 327+ E0D4             >//              ______________________________________________________________________
 327+ E0D4             >//              Dictionary part
 327+ E0D4             >
 327+ E0D4             >                org     Dict_Ptr
 327+ 20CC             >
 327+ 20CC D2 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 327+ 20CE             >
 327+ 20CE             >C_DO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 327+ 20CE ~           >                call    runcode ; ok        // for primitive definitions  actual code
 327+ 20CE ~           >
 327+ 20CE ~           >
 327+ 20CE             >                endif           ; ok        // for other definitions it "points" the correct handler
 327+ 20CE             >                // Use of "; ok" to suppress "warning[fwdref]"
 327+ 20CE             >
 327+ 20CE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 328+ 20CE 0B                           dec     bc                  // prepare IP beforehand
 329+ 20CF 0B                           dec     bc                  // to balance the two final inc bc in (?do)
 330+ 20D0 18 E5                        jr      Do_Ptr
 331+ 20D2
 332+ 20D2              //  ______________________________________________________________________
 333+ 20D2              //
 334+ 20D2              // i            -- n
 335+ 20D2              // used between DO and LOOP or between DO e +LOOP to copy on top of stack
 336+ 20D2              // the current value of the index-loop
 337+ 20D2                              New_Def I, "I", is_code, is_normal
 337+ 20D2             >
 337+ 20D2             >Dict_Ptr        defl    $
 337+ 20D2             >
 337+ 20D2             >//              ______________________________________________________________________
 337+ 20D2             >//              Heap part
 337+ 20D2             >
 337+ 20D2             >
 337+ 20D2             >                org     (Heap_Ptr & $1FFF) + $E000
 337+ E0D4             >
 337+ E0D4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 337+ E0D4             >Latest_Definition defl  Heap_Ptr
 337+ E0D4             >
 337+ E0D4             >                // dummy db directives used to calculate length of namec
 337+ E0D4 49          >                db      "I"
 337+ E0D5             >len_NFA         defl    $ - temp_NFA
 337+ E0D5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 337+ E0D4             >
 337+ E0D4 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 337+ E0D5 49          >                db      "I"               // name string in 7-bit ascii, but
 337+ E0D6             >                org     $-1                 // alter last byte of Name just above to set
 337+ E0D5 C9          >                db      {b $} | END_BIT     // msb as name end
 337+ E0D6             >
 337+ E0D6 CB 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 337+ E0D8             >Prev_Ptr        defl    Heap_Ptr
 337+ E0D8             >
 337+ E0D8             >mirror_Ptr      defl    $
 337+ E0D8             >
 337+ E0D8 D4 20       >                dw      Dict_Ptr + 2        // xt
 337+ E0DA             >Heap_Ptr        defl    $ - $E000           // save current HP
 337+ E0DA             >
 337+ E0DA             >Current_HP      defl  $ - $E000             // used to set HP once!
 337+ E0DA             >
 337+ E0DA             >//              ______________________________________________________________________
 337+ E0DA             >//              Dictionary part
 337+ E0DA             >
 337+ E0DA             >                org     Dict_Ptr
 337+ 20D2             >
 337+ 20D2 D8 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 337+ 20D4             >
 337+ 20D4             >I:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 337+ 20D4 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 337+ 20D4 ~           >
 337+ 20D4 ~           >
 337+ 20D4             >                endif           ; ok        // for other definitions it "points" the correct handler
 337+ 20D4             >                // Use of "; ok" to suppress "warning[fwdref]"
 337+ 20D4             >
 337+ 20D4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 338+ 20D4              I_Ptr:
 339+ 20D4 62                           ld      h, d
 340+ 20D5 6B                           ld      l, e
 341+ 20D6                              // *** ldhlrp
 342+ 20D6              I_Ptr_prime:
 343+ 20D6 7E                           ld      a, (hl)
 344+ 20D7 23                           inc     hl
 345+ 20D8 66                           ld      h, (hl)
 346+ 20D9 6F                           ld      l, a
 347+ 20DA E5                           push    hl
 348+ 20DB                              next
 348+ 20DB DD E9       >                jp      (ix)
 349+ 20DD
 350+ 20DD
 351+ 20DD              //  ______________________________________________________________________
 352+ 20DD              //
 353+ 20DD              // i'            -- n
 354+ 20DD              // used between DO and LOOP or between DO e +LOOP to copy on top of stack
 355+ 20DD              // the limit of the index-loop
 356+ 20DD
 357+ 20DD                              New_Def II, "I'", is_code, is_normal
 357+ 20DD             >
 357+ 20DD             >Dict_Ptr        defl    $
 357+ 20DD             >
 357+ 20DD             >//              ______________________________________________________________________
 357+ 20DD             >//              Heap part
 357+ 20DD             >
 357+ 20DD             >
 357+ 20DD             >                org     (Heap_Ptr & $1FFF) + $E000
 357+ E0DA             >
 357+ E0DA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 357+ E0DA             >Latest_Definition defl  Heap_Ptr
 357+ E0DA             >
 357+ E0DA             >                // dummy db directives used to calculate length of namec
 357+ E0DA 49 27       >                db      "I'"
 357+ E0DC             >len_NFA         defl    $ - temp_NFA
 357+ E0DC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 357+ E0DA             >
 357+ E0DA 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 357+ E0DB 49 27       >                db      "I'"               // name string in 7-bit ascii, but
 357+ E0DD             >                org     $-1                 // alter last byte of Name just above to set
 357+ E0DC A7          >                db      {b $} | END_BIT     // msb as name end
 357+ E0DD             >
 357+ E0DD D4 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 357+ E0DF             >Prev_Ptr        defl    Heap_Ptr
 357+ E0DF             >
 357+ E0DF             >mirror_Ptr      defl    $
 357+ E0DF             >
 357+ E0DF DF 20       >                dw      Dict_Ptr + 2        // xt
 357+ E0E1             >Heap_Ptr        defl    $ - $E000           // save current HP
 357+ E0E1             >
 357+ E0E1             >Current_HP      defl  $ - $E000             // used to set HP once!
 357+ E0E1             >
 357+ E0E1             >//              ______________________________________________________________________
 357+ E0E1             >//              Dictionary part
 357+ E0E1             >
 357+ E0E1             >                org     Dict_Ptr
 357+ 20DD             >
 357+ 20DD DF 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 357+ 20DF             >
 357+ 20DF             >II:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 357+ 20DF ~           >                call    runcode ; ok        // for primitive definitions  actual code
 357+ 20DF ~           >
 357+ 20DF ~           >
 357+ 20DF             >                endif           ; ok        // for other definitions it "points" the correct handler
 357+ 20DF             >                // Use of "; ok" to suppress "warning[fwdref]"
 357+ 20DF             >
 357+ 20DF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 358+ 20DF 62                           ld      h, d
 359+ 20E0 6B                           ld      l, e
 360+ 20E1                              // *** ldhlrp
 361+ 20E1 23                           inc     hl
 362+ 20E2 23                           inc     hl
 363+ 20E3 18 F1                        jr      I_Ptr_prime
 364+ 20E5
 365+ 20E5
 366+ 20E5              //  ______________________________________________________________________
 367+ 20E5              //
 368+ 20E5              // digit        c n -- u tf  |  ff
 369+ 20E5              // convert a character c using base n
 370+ 20E5              // returns a unsigned number and a true flag
 371+ 20E5              // or just a false flag if the conversion fails
 372+ 20E5                              New_Def DIGIT, "DIGIT", is_code, is_normal
 372+ 20E5             >
 372+ 20E5             >Dict_Ptr        defl    $
 372+ 20E5             >
 372+ 20E5             >//              ______________________________________________________________________
 372+ 20E5             >//              Heap part
 372+ 20E5             >
 372+ 20E5             >
 372+ 20E5             >                org     (Heap_Ptr & $1FFF) + $E000
 372+ E0E1             >
 372+ E0E1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 372+ E0E1             >Latest_Definition defl  Heap_Ptr
 372+ E0E1             >
 372+ E0E1             >                // dummy db directives used to calculate length of namec
 372+ E0E1 44 49 47 49 >                db      "DIGIT"
 372+ E0E5 54          >
 372+ E0E6             >len_NFA         defl    $ - temp_NFA
 372+ E0E6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 372+ E0E1             >
 372+ E0E1 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 372+ E0E2 44 49 47 49 >                db      "DIGIT"               // name string in 7-bit ascii, but
 372+ E0E6 54          >
 372+ E0E7             >                org     $-1                 // alter last byte of Name just above to set
 372+ E0E6 D4          >                db      {b $} | END_BIT     // msb as name end
 372+ E0E7             >
 372+ E0E7 DA 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 372+ E0E9             >Prev_Ptr        defl    Heap_Ptr
 372+ E0E9             >
 372+ E0E9             >mirror_Ptr      defl    $
 372+ E0E9             >
 372+ E0E9 E7 20       >                dw      Dict_Ptr + 2        // xt
 372+ E0EB             >Heap_Ptr        defl    $ - $E000           // save current HP
 372+ E0EB             >
 372+ E0EB             >Current_HP      defl  $ - $E000             // used to set HP once!
 372+ E0EB             >
 372+ E0EB             >//              ______________________________________________________________________
 372+ E0EB             >//              Dictionary part
 372+ E0EB             >
 372+ E0EB             >                org     Dict_Ptr
 372+ 20E5             >
 372+ 20E5 E9 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 372+ 20E7             >
 372+ 20E7             >DIGIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 372+ 20E7 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 372+ 20E7 ~           >
 372+ 20E7 ~           >
 372+ 20E7             >                endif           ; ok        // for other definitions it "points" the correct handler
 372+ 20E7             >                // Use of "; ok" to suppress "warning[fwdref]"
 372+ 20E7             >
 372+ 20E7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 373+ 20E7 D9                           exx
 374+ 20E8 E1                           pop     hl                  // l has the base
 375+ 20E9 D1                           pop     de                  // e has the digit
 376+ 20EA 7B                           ld      a, e
 377+ 20EB FE 60                        cp      $60                 // check if lowercase
 378+ 20ED 38 02                        jr      c, Digit_Uppercase
 379+ 20EF D6 20                            sub     $20                 // quick'n'dirty uppercase
 380+ 20F1              Digit_Uppercase:
 381+ 20F1 D6 30                        sub     $30
 382+ 20F3 38 16                        jr      c, Digit_Fail       // fail when character < "0"
 383+ 20F5 FE 0A                            cp      $0A
 384+ 20F7 38 06                            jr      c, Digit_Decimal    // perhaps is not decimal
 385+ 20F9 D6 07                                sub     7                   // try hex and subtract 7
 386+ 20FB FE 0A                                cp      $0A
 387+ 20FD 38 0C                                jr      c,  Digit_Fail      // it is not hex !
 388+ 20FF
 389+ 20FF              Digit_Decimal:
 390+ 20FF                              // compare digit
 391+ 20FF BD                           cp      l                   // compare with base
 392+ 2100 30 09                        jr      nc, Digit_Fail      // fail when greater than base
 393+ 2102 5F                               ld      e, a                // digit is returned as second from TOS
 394+ 2103 21 01 00                         ld      hl, 1
 395+ 2106 D5                               push    de
 396+ 2107 E5                               push    hl
 397+ 2108 D9                               exx
 398+ 2109                                  next
 398+ 2109 DD E9       >                jp      (ix)
 399+ 210B              Digit_Fail:
 400+ 210B 21 00 00                     ld      hl, 0
 401+ 210E E5                           push    hl
 402+ 210F D9                           exx
 403+ 2110                              next
 403+ 2110 DD E9       >                jp      (ix)
 404+ 2112
 405+ 2112              //  ______________________________________________________________________
 406+ 2112              //
 407+ 2112              //  parametric uppercase routine
 408+ 2112              //  depending on the following op-code the routine can be by-passed
 409+ 2112              //  changing the behaviour of some callers.
 410+ 2112              //  If it is "ret" then the system is Case-Sensitive
 411+ 2112              //  If it is "Nop" then the system is Case-Insensitive
 412+ 2112              //  Only A register is touched.
 413+ 2112 00           Case_Sensitive: nop                         // Default is case-insensitive.
 414+ 2113              Case_Upper:
 415+ 2113 FE 61                        cp      LC_A_CHAR           // lower-case "a"
 416+ 2115 D8                           ret     c                   // no change if A < "a"
 417+ 2116 FE 7B                        cp      LC_Z_CHAR + 1       // lower-case "z" + 1
 418+ 2118 D0                           ret     nc                  // no change if A > "z"
 419+ 2119 D6 20                        sub     $20                 // Make uppercase if A in ["a".."z"]
 420+ 211B C9                           ret
 421+ 211C
 422+ 211C              //  ______________________________________________________________________
 423+ 211C              //
 424+ 211C              //  caseon      --
 425+ 211C              // set system case-sensitivity on
 426+ 211C              // it patches a RET/NOP at the beginning of the uppercase-routine
 427+ 211C                              New_Def CASEON, "CASEON", is_code, is_normal
 427+ 211C             >
 427+ 211C             >Dict_Ptr        defl    $
 427+ 211C             >
 427+ 211C             >//              ______________________________________________________________________
 427+ 211C             >//              Heap part
 427+ 211C             >
 427+ 211C             >
 427+ 211C             >                org     (Heap_Ptr & $1FFF) + $E000
 427+ E0EB             >
 427+ E0EB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 427+ E0EB             >Latest_Definition defl  Heap_Ptr
 427+ E0EB             >
 427+ E0EB             >                // dummy db directives used to calculate length of namec
 427+ E0EB 43 41 53 45 >                db      "CASEON"
 427+ E0EF 4F 4E       >
 427+ E0F1             >len_NFA         defl    $ - temp_NFA
 427+ E0F1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 427+ E0EB             >
 427+ E0EB 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 427+ E0EC 43 41 53 45 >                db      "CASEON"               // name string in 7-bit ascii, but
 427+ E0F0 4F 4E       >
 427+ E0F2             >                org     $-1                 // alter last byte of Name just above to set
 427+ E0F1 CE          >                db      {b $} | END_BIT     // msb as name end
 427+ E0F2             >
 427+ E0F2 E1 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 427+ E0F4             >Prev_Ptr        defl    Heap_Ptr
 427+ E0F4             >
 427+ E0F4             >mirror_Ptr      defl    $
 427+ E0F4             >
 427+ E0F4 1E 21       >                dw      Dict_Ptr + 2        // xt
 427+ E0F6             >Heap_Ptr        defl    $ - $E000           // save current HP
 427+ E0F6             >
 427+ E0F6             >Current_HP      defl  $ - $E000             // used to set HP once!
 427+ E0F6             >
 427+ E0F6             >//              ______________________________________________________________________
 427+ E0F6             >//              Dictionary part
 427+ E0F6             >
 427+ E0F6             >                org     Dict_Ptr
 427+ 211C             >
 427+ 211C F4 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 427+ 211E             >
 427+ 211E             >CASEON:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 427+ 211E ~           >                call    runcode ; ok        // for primitive definitions  actual code
 427+ 211E ~           >
 427+ 211E ~           >
 427+ 211E             >                endif           ; ok        // for other definitions it "points" the correct handler
 427+ 211E             >                // Use of "; ok" to suppress "warning[fwdref]"
 427+ 211E             >
 427+ 211E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 428+ 211E 3E C9                        ld      a, $C9              // "ret"
 429+ 2120 32 12 21                     ld      (Case_Sensitive), a
 430+ 2123                              next
 430+ 2123 DD E9       >                jp      (ix)
 431+ 2125
 432+ 2125              //  ______________________________________________________________________
 433+ 2125              //
 434+ 2125              //  caseoff     --
 435+ 2125              // set system case-sensitivity on
 436+ 2125              // it patches a RET/NOP at the beginning of the uppercase-routine
 437+ 2125                              New_Def CASEOFF, "CASEOFF", is_code, is_normal
 437+ 2125             >
 437+ 2125             >Dict_Ptr        defl    $
 437+ 2125             >
 437+ 2125             >//              ______________________________________________________________________
 437+ 2125             >//              Heap part
 437+ 2125             >
 437+ 2125             >
 437+ 2125             >                org     (Heap_Ptr & $1FFF) + $E000
 437+ E0F6             >
 437+ E0F6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 437+ E0F6             >Latest_Definition defl  Heap_Ptr
 437+ E0F6             >
 437+ E0F6             >                // dummy db directives used to calculate length of namec
 437+ E0F6 43 41 53 45 >                db      "CASEOFF"
 437+ E0FA 4F 46 46    >
 437+ E0FD             >len_NFA         defl    $ - temp_NFA
 437+ E0FD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 437+ E0F6             >
 437+ E0F6 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 437+ E0F7 43 41 53 45 >                db      "CASEOFF"               // name string in 7-bit ascii, but
 437+ E0FB 4F 46 46    >
 437+ E0FE             >                org     $-1                 // alter last byte of Name just above to set
 437+ E0FD C6          >                db      {b $} | END_BIT     // msb as name end
 437+ E0FE             >
 437+ E0FE EB 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 437+ E100             >Prev_Ptr        defl    Heap_Ptr
 437+ E100             >
 437+ E100             >mirror_Ptr      defl    $
 437+ E100             >
 437+ E100 27 21       >                dw      Dict_Ptr + 2        // xt
 437+ E102             >Heap_Ptr        defl    $ - $E000           // save current HP
 437+ E102             >
 437+ E102             >Current_HP      defl  $ - $E000             // used to set HP once!
 437+ E102             >
 437+ E102             >//              ______________________________________________________________________
 437+ E102             >//              Dictionary part
 437+ E102             >
 437+ E102             >                org     Dict_Ptr
 437+ 2125             >
 437+ 2125 00 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 437+ 2127             >
 437+ 2127             >CASEOFF:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 437+ 2127 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 437+ 2127 ~           >
 437+ 2127 ~           >
 437+ 2127             >                endif           ; ok        // for other definitions it "points" the correct handler
 437+ 2127             >                // Use of "; ok" to suppress "warning[fwdref]"
 437+ 2127             >
 437+ 2127             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 438+ 2127 3E 00                        ld      a, $00              // "nop"
 439+ 2129 32 12 21                     ld      (Case_Sensitive), a
 440+ 212C                              next
 440+ 212C DD E9       >                jp      (ix)
 441+ 212E
 442+ 212E              //  ______________________________________________________________________
 443+ 212E              //
 444+ 212E              //  upper       c1 -- c1 | c2
 445+ 212E              // character on top of stack is forced to Uppercase.
 446+ 212E                              New_Def UPPER, "UPPER", is_code, is_normal
 446+ 212E             >
 446+ 212E             >Dict_Ptr        defl    $
 446+ 212E             >
 446+ 212E             >//              ______________________________________________________________________
 446+ 212E             >//              Heap part
 446+ 212E             >
 446+ 212E             >
 446+ 212E             >                org     (Heap_Ptr & $1FFF) + $E000
 446+ E102             >
 446+ E102             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 446+ E102             >Latest_Definition defl  Heap_Ptr
 446+ E102             >
 446+ E102             >                // dummy db directives used to calculate length of namec
 446+ E102 55 50 50 45 >                db      "UPPER"
 446+ E106 52          >
 446+ E107             >len_NFA         defl    $ - temp_NFA
 446+ E107             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 446+ E102             >
 446+ E102 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 446+ E103 55 50 50 45 >                db      "UPPER"               // name string in 7-bit ascii, but
 446+ E107 52          >
 446+ E108             >                org     $-1                 // alter last byte of Name just above to set
 446+ E107 D2          >                db      {b $} | END_BIT     // msb as name end
 446+ E108             >
 446+ E108 F6 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 446+ E10A             >Prev_Ptr        defl    Heap_Ptr
 446+ E10A             >
 446+ E10A             >mirror_Ptr      defl    $
 446+ E10A             >
 446+ E10A 30 21       >                dw      Dict_Ptr + 2        // xt
 446+ E10C             >Heap_Ptr        defl    $ - $E000           // save current HP
 446+ E10C             >
 446+ E10C             >Current_HP      defl  $ - $E000             // used to set HP once!
 446+ E10C             >
 446+ E10C             >//              ______________________________________________________________________
 446+ E10C             >//              Dictionary part
 446+ E10C             >
 446+ E10C             >                org     Dict_Ptr
 446+ 212E             >
 446+ 212E 0A 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 446+ 2130             >
 446+ 2130             >UPPER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 446+ 2130 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 446+ 2130 ~           >
 446+ 2130 ~           >
 446+ 2130             >                endif           ; ok        // for other definitions it "points" the correct handler
 446+ 2130             >                // Use of "; ok" to suppress "warning[fwdref]"
 446+ 2130             >
 446+ 2130             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 447+ 2130 E1                           pop     hl
 448+ 2131 7D                           ld      a, l
 449+ 2132 CD 13 21                     call    Case_Upper
 450+ 2135 6F                           ld      l, a
 451+ 2136
 452+ 2136                              psh1
 452+ 2136 E5          >                push    hl
 452+ 2137 DD E9       >                jp      (ix)
 453+ 2139
 454+ 2139              //  ______________________________________________________________________
 455+ 2139
 456+ 2139              MMU7_read:
 457+ 2139 01 3B 24                     ld      bc, $243B
 458+ 213C 3E 57                        ld      a, 87
 459+ 213E ED 79                        out     (c), a
 460+ 2140 04                           inc     b
 461+ 2141 ED 78                        in      a, (c)
 462+ 2143 C9                           ret
 463+ 2144
 464+ 2144              //  ______________________________________________________________________
 465+ 2144
 466+ 2144              TO_FAR_rout:
 467+ 2144 7C                           ld      a, h
 468+ 2145 08                           ex      af, af
 469+ 2146 7C                           ld      a, h
 470+ 2147 F6 E0                        or      $E0
 471+ 2149 67                           ld      h, a
 472+ 214A 08                           ex      af, af
 473+ 214B 07                           rlca
 474+ 214C 07                           rlca
 475+ 214D 07                           rlca
 476+ 214E E6 07                        and     $07
 477+ 2150 C6 20                        add     $20
 478+ 2152 C9                           ret
 479+ 2153
 480+ 2153
 481+ 2153              //  ______________________________________________________________________
 482+ 2153              //
 483+ 2153              // (find)       addr voc -- 0 | cfa b 1
 484+ 2153              // vocabulary search,
 485+ 2153              // - voc is starting word's NFA
 486+ 2153              // - addr is the string to be searched for
 487+ 2153              // On success, it returns the CFA of found word, the first NFA byte
 488+ 2153              // (which contains length and some flags) and a true flag.
 489+ 2153              // On fail, a false flag  (no more: leaves addr unchanged)
 490+ 2153                              New_Def C_FIND, "(FIND)", is_code, is_normal
 490+ 2153             >
 490+ 2153             >Dict_Ptr        defl    $
 490+ 2153             >
 490+ 2153             >//              ______________________________________________________________________
 490+ 2153             >//              Heap part
 490+ 2153             >
 490+ 2153             >
 490+ 2153             >                org     (Heap_Ptr & $1FFF) + $E000
 490+ E10C             >
 490+ E10C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 490+ E10C             >Latest_Definition defl  Heap_Ptr
 490+ E10C             >
 490+ E10C             >                // dummy db directives used to calculate length of namec
 490+ E10C 28 46 49 4E >                db      "(FIND)"
 490+ E110 44 29       >
 490+ E112             >len_NFA         defl    $ - temp_NFA
 490+ E112             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 490+ E10C             >
 490+ E10C 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 490+ E10D 28 46 49 4E >                db      "(FIND)"               // name string in 7-bit ascii, but
 490+ E111 44 29       >
 490+ E113             >                org     $-1                 // alter last byte of Name just above to set
 490+ E112 A9          >                db      {b $} | END_BIT     // msb as name end
 490+ E113             >
 490+ E113 02 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 490+ E115             >Prev_Ptr        defl    Heap_Ptr
 490+ E115             >
 490+ E115             >mirror_Ptr      defl    $
 490+ E115             >
 490+ E115 55 21       >                dw      Dict_Ptr + 2        // xt
 490+ E117             >Heap_Ptr        defl    $ - $E000           // save current HP
 490+ E117             >
 490+ E117             >Current_HP      defl  $ - $E000             // used to set HP once!
 490+ E117             >
 490+ E117             >//              ______________________________________________________________________
 490+ E117             >//              Dictionary part
 490+ E117             >
 490+ E117             >                org     Dict_Ptr
 490+ 2153             >
 490+ 2153 15 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 490+ 2155             >
 490+ 2155             >C_FIND:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 490+ 2155 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 490+ 2155 ~           >
 490+ 2155 ~           >
 490+ 2155             >                endif           ; ok        // for other definitions it "points" the correct handler
 490+ 2155             >                // Use of "; ok" to suppress "warning[fwdref]"
 490+ 2155             >
 490+ 2155             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 491+ 2155 D9                           exx
 492+ 2156 CD 39 21                     call    MMU7_read
 493+ 2159 D9                           exx
 494+ 215A 6F                           ld      l, a
 495+ 215B D9                           exx
 496+ 215C
 497+ 215C D1                           pop     de                      // de has dictionary pointer
 498+ 215D              Find_VocabularyLoop:
 499+ 215D 7A                               ld      a, d
 500+ 215E D6 60                            sub     $60
 501+ 2160 30 08                            jr      nc, Find_far_endif
 502+ 2162 EB                                   ex      de, hl
 503+ 2163 CD 44 21                             call    TO_FAR_rout
 504+ 2166 EB                                   ex      de, hl
 505+ 2167 ED 92 57                             nextreg 87, a
 506+ 216A              Find_far_endif:
 507+ 216A E1                               pop     hl                  // string pointer to search for
 508+ 216B E5                               push    hl                  // keep it on stack too for the end.
 509+ 216C 1A                               ld      a, (de)             // save NFA length byte
 510+ 216D 08                               ex      af,af'              // for later use (!)
 511+ 216E 1A                               ld      a, (de)             // reload NFA length byte
 512+ 216F AE                               xor     (hl)                // check if same length
 513+ 2170 E6 3F                            and     $3F                 // by resetting 3 high bits (flags)
 514+ 2172                                  // word and text haven't the same length, skip to next vocabulary entry
 515+ 2172 20 33                            jr      nz, Find_DifferentLenght
 516+ 2174
 517+ 2174              Find_ThisWord:      // begin loop
 518+ 2174 23                                   inc     hl
 519+ 2175 13                                   inc     de
 520+ 2176 1A                                   ld      a, (de)
 521+ 2177                                      // case insensitive option - begin
 522+ 2177                                      // push    bc
 523+ 2177 E6 80                                and     $80                 // split A in msb and the rest
 524+ 2179 47                                   ld      b, a
 525+ 217A 1A                                   ld      a, (de)
 526+ 217B E6 7F                                and     $7F                 // ... the rest (lower 7 bits)
 527+ 217D CD 12 21                             call    Case_Sensitive      // uppercase routine
 528+ 2180 4F                                   ld      c, a
 529+ 2181 7E                                   ld      a, (hl)
 530+ 2182 CD 12 21                             call    Case_Sensitive      // uppercase routine
 531+ 2185 A9                                   xor     c
 532+ 2186 A8                                   xor     b
 533+ 2187                                      // pop     bc
 534+ 2187                                      // case insensitive option - end
 535+ 2187 87                                   add     a                   // ignore msb during compare
 536+ 2188 20 1B                                jr      nz, Find_DidntMatch  // jump if doesn't match (*)
 537+ 218A
 538+ 218A                                  // loop back until last byte msb is found set
 539+ 218A                                  // that bit marks the ending char of this word
 540+ 218A 30 E8                            jr      nc, Find_ThisWord
 541+ 218C
 542+ 218C                                  // match found !
 543+ 218C 21 03 00                         ld      hl, 3               // 3 bytes for CFA offset to skip LFA
 544+ 218F 19                               add     hl, de
 545+ 2190
 546+ 2190                              //  ld      a, h
 547+ 2190                              //  and     $E0
 548+ 2190                              //  xor     h
 549+ 2190                              //  jr      nz, Non_MMU7
 550+ 2190                                  //  call    MMU7_read
 551+ 2190                                  //  dec     a
 552+ 2190                                  //  jr      z, Non_MMU7
 553+ 2190 5E                                       ld      e, (hl)
 554+ 2191 23                                       inc     hl
 555+ 2192 56                                       ld      d, (hl)
 556+ 2193 EB                                       ex      de, hl
 557+ 2194              //Non_MMU7:
 558+ 2194 E3                               ex      (sp), hl            // CFA on stack and drop addr
 559+ 2195 08                               ex      af, af'             // retrieve NFA byte (!)
 560+ 2196 5F                               ld      e, a
 561+ 2197 16 00                            ld      d, 0
 562+ 2199 21 FF FF                         ld      hl, -1
 563+ 219C D5                               push    de
 564+ 219D E5                               push    hl
 565+ 219E D9                               exx
 566+ 219F 7D                               ld      a, l
 567+ 21A0 ED 92 57                         nextreg 87, a
 568+ 21A3                                  next
 568+ 21A3 DD E9       >                jp      (ix)
 569+ 21A5
 570+ 21A5              Find_DidntMatch: // didn't match (*)
 571+ 21A5 38 05                            jr      c,  Find_WordEnd   // jump if not end of word (**)
 572+ 21A7
 573+ 21A7              Find_DifferentLenght:
 574+ 21A7                                  // consume chars until the end of the word
 575+ 21A7                                  // that is last byte msb is found set
 576+ 21A7 13                                   inc     de
 577+ 21A8 1A                                   ld      a, (de)
 578+ 21A9 87                                   add     a, a
 579+ 21AA 30 FB                            jr      nc, Find_DifferentLenght
 580+ 21AC
 581+ 21AC              Find_WordEnd:   // word-end  found (**)
 582+ 21AC                                  // take LFA and use it
 583+ 21AC 13                               inc     de
 584+ 21AD EB                               ex      de, hl
 585+ 21AE 5E                               ld      e, (hl)
 586+ 21AF 23                               inc     hl
 587+ 21B0 56                               ld      d, (hl)
 588+ 21B1 7A                               ld      a, d
 589+ 21B2 B3                               or      e
 590+ 21B3
 591+ 21B3                              // loop until end of vocabulary
 592+ 21B3 20 A8                        jr      nz, Find_VocabularyLoop
 593+ 21B5
 594+ 21B5 E1                           pop     hl              // without this, leaves addr unchanged
 595+ 21B6 21 00 00                     ld      hl, 0
 596+ 21B9 E5                           push    hl
 597+ 21BA D9                           exx
 598+ 21BB 7D                           ld      a, l
 599+ 21BC ED 92 57                     nextreg 87, a
 600+ 21BF                              next
 600+ 21BF DD E9       >                jp      (ix)
 601+ 21C1
 602+ 21C1              //  ______________________________________________________________________
 603+ 21C1              //
 604+ 21C1              // enclose      a c -- a  n1 n2 n3
 605+ 21C1              // starting from a, using delimiter c, determines the offsets:
 606+ 21C1              //   n1   the first character non-delimiter
 607+ 21C1              //   n2   the first delimiter after the text
 608+ 21C1              //   n3   the first character non enclosed.
 609+ 21C1              // This procedure does not go beyond a 'nul' ASCII (0x00) that represents
 610+ 21C1              // an uncoditional delimiter.
 611+ 21C1              // Examples:
 612+ 21C1              //   i:	c  c  x  x  x  c  x	 -- 2  5  6
 613+ 21C1              //  ii:	c  c  x  x  x  'nul' -- 2  5  5
 614+ 21C1              // iii:	c  c  'nul'          -- 2  3  2
 615+ 21C1                              New_Def ENCLOSE, "ENCLOSE", is_code, is_normal
 615+ 21C1             >
 615+ 21C1             >Dict_Ptr        defl    $
 615+ 21C1             >
 615+ 21C1             >//              ______________________________________________________________________
 615+ 21C1             >//              Heap part
 615+ 21C1             >
 615+ 21C1             >
 615+ 21C1             >                org     (Heap_Ptr & $1FFF) + $E000
 615+ E117             >
 615+ E117             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 615+ E117             >Latest_Definition defl  Heap_Ptr
 615+ E117             >
 615+ E117             >                // dummy db directives used to calculate length of namec
 615+ E117 45 4E 43 4C >                db      "ENCLOSE"
 615+ E11B 4F 53 45    >
 615+ E11E             >len_NFA         defl    $ - temp_NFA
 615+ E11E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 615+ E117             >
 615+ E117 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 615+ E118 45 4E 43 4C >                db      "ENCLOSE"               // name string in 7-bit ascii, but
 615+ E11C 4F 53 45    >
 615+ E11F             >                org     $-1                 // alter last byte of Name just above to set
 615+ E11E C5          >                db      {b $} | END_BIT     // msb as name end
 615+ E11F             >
 615+ E11F 0C 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 615+ E121             >Prev_Ptr        defl    Heap_Ptr
 615+ E121             >
 615+ E121             >mirror_Ptr      defl    $
 615+ E121             >
 615+ E121 C3 21       >                dw      Dict_Ptr + 2        // xt
 615+ E123             >Heap_Ptr        defl    $ - $E000           // save current HP
 615+ E123             >
 615+ E123             >Current_HP      defl  $ - $E000             // used to set HP once!
 615+ E123             >
 615+ E123             >//              ______________________________________________________________________
 615+ E123             >//              Dictionary part
 615+ E123             >
 615+ E123             >                org     Dict_Ptr
 615+ 21C1             >
 615+ 21C1 21 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 615+ 21C3             >
 615+ 21C3             >ENCLOSE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 615+ 21C3 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 615+ 21C3 ~           >
 615+ 21C3 ~           >
 615+ 21C3             >                endif           ; ok        // for other definitions it "points" the correct handler
 615+ 21C3             >                // Use of "; ok" to suppress "warning[fwdref]"
 615+ 21C3             >
 615+ 21C3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 616+ 21C3 D9                           exx
 617+ 21C4 D1                           pop     de                  //  e has the character
 618+ 21C5 E1                           pop     hl                  // hl has the string address
 619+ 21C6 E5                           push    hl
 620+ 21C7 7B                           ld      a, e
 621+ 21C8 11 FF FF                     ld      de, -1              // let's start from -1
 622+ 21CB 2B                           dec     hl
 623+ 21CC              Enclose_NonDelimiter:
 624+ 21CC                              // find first non delimiter
 625+ 21CC 23                               inc     hl
 626+ 21CD 13                               inc     de
 627+ 21CE BE                               cp      (hl)
 628+ 21CF 28 FB                        jr      z, Enclose_NonDelimiter
 629+ 21D1 D5                           push    de
 630+ 21D2
 631+ 21D2                              // push    bc                  // save Instruction Pointer
 632+ 21D2
 633+ 21D2 4F                           ld      c, a                // save char
 634+ 21D3 7E                           ld      a, (hl)
 635+ 21D4 A7                           and     a                   // stop if 0x00
 636+ 21D5 20 07                        jr      nz, Enclose_NextChar
 637+ 21D7                              /// case iii. no more character in string
 638+ 21D7                                  // pop     bc                  // restore Instruction Pointer
 639+ 21D7 13                               inc     de
 640+ 21D8 D5                               push    de
 641+ 21D9 1B                               dec     de
 642+ 21DA D5                               push    de
 643+ 21DB D9                               exx
 644+ 21DC                                  next
 644+ 21DC DD E9       >                jp      (ix)
 645+ 21DE              Enclose_NextChar:
 646+ 21DE 79                               ld      a, c
 647+ 21DF 23                               inc     hl
 648+ 21E0 13                               inc     de
 649+ 21E1 BE                               cp      (hl)
 650+ 21E2 20 06                            jr      nz, Enclose_NonSeparator
 651+ 21E4                                      // case i. first non enclosed
 652+ 21E4                                      // pop     bc                  // restore Instruction Pointer
 653+ 21E4 D5                                   push    de
 654+ 21E5 13                                   inc     de
 655+ 21E6 D5                                   push    de
 656+ 21E7 D9                                   exx
 657+ 21E8                                      next
 657+ 21E8 DD E9       >                jp      (ix)
 658+ 21EA              Enclose_NonSeparator:
 659+ 21EA 7E                               ld      a, (hl)
 660+ 21EB A7                               and     a
 661+ 21EC 20 F0                        jr      nz, Enclose_NextChar
 662+ 21EE
 663+ 21EE                              // case ii. separator & terminator
 664+ 21EE                              // pop     bc                  // restore Instruction Pointer
 665+ 21EE D5                           push    de
 666+ 21EF D5                           push    de
 667+ 21F0 D9                           exx
 668+ 21F1                              next
 668+ 21F1 DD E9       >                jp      (ix)
 669+ 21F3
 670+ 21F3              //  ______________________________________________________________________
 671+ 21F3              //
 672+ 21F3              // (map)        a2 a1 n c1 -- c2
 673+ 21F3              // translate character c1 using mapping string a2 and a2
 674+ 21F3              // if c1 is not present within string a1 then
 675+ 21F3              // c2 = c2 if it is not translated. n is the length of both a1 and a2.
 676+ 21F3                              New_Def C_MAP, "(MAP)", is_code, is_normal
 676+ 21F3             >
 676+ 21F3             >Dict_Ptr        defl    $
 676+ 21F3             >
 676+ 21F3             >//              ______________________________________________________________________
 676+ 21F3             >//              Heap part
 676+ 21F3             >
 676+ 21F3             >
 676+ 21F3             >                org     (Heap_Ptr & $1FFF) + $E000
 676+ E123             >
 676+ E123             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 676+ E123             >Latest_Definition defl  Heap_Ptr
 676+ E123             >
 676+ E123             >                // dummy db directives used to calculate length of namec
 676+ E123 28 4D 41 50 >                db      "(MAP)"
 676+ E127 29          >
 676+ E128             >len_NFA         defl    $ - temp_NFA
 676+ E128             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 676+ E123             >
 676+ E123 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 676+ E124 28 4D 41 50 >                db      "(MAP)"               // name string in 7-bit ascii, but
 676+ E128 29          >
 676+ E129             >                org     $-1                 // alter last byte of Name just above to set
 676+ E128 A9          >                db      {b $} | END_BIT     // msb as name end
 676+ E129             >
 676+ E129 17 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 676+ E12B             >Prev_Ptr        defl    Heap_Ptr
 676+ E12B             >
 676+ E12B             >mirror_Ptr      defl    $
 676+ E12B             >
 676+ E12B F5 21       >                dw      Dict_Ptr + 2        // xt
 676+ E12D             >Heap_Ptr        defl    $ - $E000           // save current HP
 676+ E12D             >
 676+ E12D             >Current_HP      defl  $ - $E000             // used to set HP once!
 676+ E12D             >
 676+ E12D             >//              ______________________________________________________________________
 676+ E12D             >//              Dictionary part
 676+ E12D             >
 676+ E12D             >                org     Dict_Ptr
 676+ 21F3             >
 676+ 21F3 2B 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 676+ 21F5             >
 676+ 21F5             >C_MAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 676+ 21F5 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 676+ 21F5 ~           >
 676+ 21F5 ~           >
 676+ 21F5             >                endif           ; ok        // for other definitions it "points" the correct handler
 676+ 21F5             >                // Use of "; ok" to suppress "warning[fwdref]"
 676+ 21F5             >
 676+ 21F5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 677+ 21F5 D9                           exx
 678+ 21F6 E1                           pop     hl
 679+ 21F7 7D                           ld      a, l
 680+ 21F8 C1                           pop     bc
 681+ 21F9 E1                           pop     hl
 682+ 21FA 50                           ld      d, b
 683+ 21FB 59                           ld      e, c
 684+ 21FC ED B1                        cpir
 685+ 21FE E1                           pop     hl
 686+ 21FF 20 05                        jr      nz, C_Map_Then
 686+ 2201
 687+ 2201 19                               add     hl, de
 688+ 2202 2B                               dec     hl
 689+ 2203 ED 42                            sbc     hl, bc
 690+ 2205 7E                               ld      a, (hl)
 691+ 2206              C_Map_Then:
 692+ 2206 6F                           ld      l, a
 693+ 2207 26 00                        ld      h, 0
 694+ 2209 E5                           push    hl
 695+ 220A D9                           exx
 696+ 220B                              next
 696+ 220B DD E9       >                jp      (ix)
 697+ 220D
 698+ 220D              //  ______________________________________________________________________
 699+ 220D              //
 700+ 220D              // (compare)    a1 a2 n -- b
 701+ 220D              // this word performs a lexicographic compare of n bytes of text at address a1
 702+ 220D              // with n bytes of text at address a2. It returns numeric a value:
 703+ 220D              //  0 : if strings are equal
 704+ 220D              // +1 : if string at a1 greater than string at a2
 705+ 220D              // -1 : if string at a1 less than string at a2
 706+ 220D              // strings can be 256 bytes in length at most.
 707+ 220D                              New_Def C_COMPARE, "(COMPARE)", is_code, is_normal
 707+ 220D             >
 707+ 220D             >Dict_Ptr        defl    $
 707+ 220D             >
 707+ 220D             >//              ______________________________________________________________________
 707+ 220D             >//              Heap part
 707+ 220D             >
 707+ 220D             >
 707+ 220D             >                org     (Heap_Ptr & $1FFF) + $E000
 707+ E12D             >
 707+ E12D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 707+ E12D             >Latest_Definition defl  Heap_Ptr
 707+ E12D             >
 707+ E12D             >                // dummy db directives used to calculate length of namec
 707+ E12D 28 43 4F 4D >                db      "(COMPARE)"
 707+ E131 50 41 52 45 >
 707+ E135 29          >
 707+ E136             >len_NFA         defl    $ - temp_NFA
 707+ E136             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 707+ E12D             >
 707+ E12D 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 707+ E12E 28 43 4F 4D >                db      "(COMPARE)"               // name string in 7-bit ascii, but
 707+ E132 50 41 52 45 >
 707+ E136 29          >
 707+ E137             >                org     $-1                 // alter last byte of Name just above to set
 707+ E136 A9          >                db      {b $} | END_BIT     // msb as name end
 707+ E137             >
 707+ E137 23 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 707+ E139             >Prev_Ptr        defl    Heap_Ptr
 707+ E139             >
 707+ E139             >mirror_Ptr      defl    $
 707+ E139             >
 707+ E139 0F 22       >                dw      Dict_Ptr + 2        // xt
 707+ E13B             >Heap_Ptr        defl    $ - $E000           // save current HP
 707+ E13B             >
 707+ E13B             >Current_HP      defl  $ - $E000             // used to set HP once!
 707+ E13B             >
 707+ E13B             >//              ______________________________________________________________________
 707+ E13B             >//              Dictionary part
 707+ E13B             >
 707+ E13B             >                org     Dict_Ptr
 707+ 220D             >
 707+ 220D 39 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 707+ 220F             >
 707+ 220F             >C_COMPARE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 707+ 220F ~           >                call    runcode ; ok        // for primitive definitions  actual code
 707+ 220F ~           >
 707+ 220F ~           >
 707+ 220F             >                endif           ; ok        // for other definitions it "points" the correct handler
 707+ 220F             >                // Use of "; ok" to suppress "warning[fwdref]"
 707+ 220F             >
 707+ 220F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 708+ 220F D9                           exx
 709+ 2210 E1                           pop     hl                  // Number of bytes
 710+ 2211 7D                           ld      a, l
 711+ 2212 E1                           pop     hl                  // hl points string a2
 712+ 2213 D1                           pop     de                  // hl points string a1
 713+ 2214              //              push    bc                  // Instruction pointer on stack
 714+ 2214 47                           ld      b, a
 715+ 2215              C_Compare_Loop:
 716+ 2215 7E                               ld      a, (hl)
 717+ 2216 CD 12 21                         call    Case_Sensitive
 718+ 2219 4F                               ld      c, a
 719+ 221A 1A                               ld      a, (de)
 720+ 221B CD 12 21                         call    Case_Sensitive
 721+ 221E B9                               cp      c
 722+ 221F 13                               inc     de
 723+ 2220 23                               inc     hl
 724+ 2221 28 0E                            jr      z, C_Compare_Equal
 725+ 2223 38 05                                jr      c, C_Compare_NotLessThan  // If LessThan
 726+ 2225 21 01 00                                 ld      hl, 1               // a1 gt a2
 727+ 2228 18 03                                jr      C_Compare_Then      // Else
 728+ 222A              C_Compare_NotLessThan:
 729+ 222A 21 FF FF                                 ld      hl, -1              // a1 lt a2
 730+ 222D              C_Compare_Then:                                 // Endif
 731+ 222D              //                      pop     bc              // restore Instruction Pointer
 732+ 222D E5                                   push    hl
 733+ 222E D9                                   exx
 734+ 222F
 735+ 222F                                      next
 735+ 222F DD E9       >                jp      (ix)
 736+ 2231
 737+ 2231              C_Compare_Equal:
 738+ 2231 10 E2                        djnz    C_Compare_Loop
 739+ 2233 21 00 00                     ld      hl, 0               // a1 eq a2
 740+ 2236              //              pop     bc                  // restore Instruction Pointer
 741+ 2236 E5                           push    hl
 742+ 2237 D9                           exx
 743+ 2238
 744+ 2238                              next
 744+ 2238 DD E9       >                jp      (ix)
 745+ 223A
 746+ 223A              //  ______________________________________________________________________
 747+ 223A              //
 748+ 223A              // emitc        c --
 749+ 223A              // low level emit, calls ROM routine at #10 to send a character to
 750+ 223A              // the the current channel (see SELECT to change stream-channel)
 751+ 223A                              New_Def EMITC, "EMITC", is_code, is_normal
 751+ 223A             >
 751+ 223A             >Dict_Ptr        defl    $
 751+ 223A             >
 751+ 223A             >//              ______________________________________________________________________
 751+ 223A             >//              Heap part
 751+ 223A             >
 751+ 223A             >
 751+ 223A             >                org     (Heap_Ptr & $1FFF) + $E000
 751+ E13B             >
 751+ E13B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 751+ E13B             >Latest_Definition defl  Heap_Ptr
 751+ E13B             >
 751+ E13B             >                // dummy db directives used to calculate length of namec
 751+ E13B 45 4D 49 54 >                db      "EMITC"
 751+ E13F 43          >
 751+ E140             >len_NFA         defl    $ - temp_NFA
 751+ E140             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 751+ E13B             >
 751+ E13B 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 751+ E13C 45 4D 49 54 >                db      "EMITC"               // name string in 7-bit ascii, but
 751+ E140 43          >
 751+ E141             >                org     $-1                 // alter last byte of Name just above to set
 751+ E140 C3          >                db      {b $} | END_BIT     // msb as name end
 751+ E141             >
 751+ E141 2D 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 751+ E143             >Prev_Ptr        defl    Heap_Ptr
 751+ E143             >
 751+ E143             >mirror_Ptr      defl    $
 751+ E143             >
 751+ E143 3C 22       >                dw      Dict_Ptr + 2        // xt
 751+ E145             >Heap_Ptr        defl    $ - $E000           // save current HP
 751+ E145             >
 751+ E145             >Current_HP      defl  $ - $E000             // used to set HP once!
 751+ E145             >
 751+ E145             >//              ______________________________________________________________________
 751+ E145             >//              Dictionary part
 751+ E145             >
 751+ E145             >                org     Dict_Ptr
 751+ 223A             >
 751+ 223A 43 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 751+ 223C             >
 751+ 223C             >EMITC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 751+ 223C ~           >                call    runcode ; ok        // for primitive definitions  actual code
 751+ 223C ~           >
 751+ 223C ~           >
 751+ 223C             >                endif           ; ok        // for other definitions it "points" the correct handler
 751+ 223C             >                // Use of "; ok" to suppress "warning[fwdref]"
 751+ 223C             >
 751+ 223C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 752+ 223C E1                           pop     hl
 753+ 223D 7D                           ld      a, l
 754+ 223E              Emitc_Ptr:
 755+ 223E C5                           push    bc
 756+ 223F D5                           push    de
 757+ 2240 DD E5                        push    ix
 758+ 2242 D7                           rst     $10
 759+ 2243 DD E1                        pop     ix
 760+ 2245 D1                           pop     de
 761+ 2246 C1                           pop     bc
 762+ 2247 3E FF                        ld      a, 255            // max possible
 763+ 2249 32 8C 5C                     ld      (SCR_CT), a
 764+ 224C                              next
 764+ 224C DD E9       >                jp      (ix)
 765+ 224E
 766+ 224E              //  ______________________________________________________________________
 767+ 224E              //
 768+ 224E              // cr           --
 769+ 224E              // send a CR via EMITC
 770+ 224E                              New_Def CR, "CR", is_code, is_normal
 770+ 224E             >
 770+ 224E             >Dict_Ptr        defl    $
 770+ 224E             >
 770+ 224E             >//              ______________________________________________________________________
 770+ 224E             >//              Heap part
 770+ 224E             >
 770+ 224E             >
 770+ 224E             >                org     (Heap_Ptr & $1FFF) + $E000
 770+ E145             >
 770+ E145             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 770+ E145             >Latest_Definition defl  Heap_Ptr
 770+ E145             >
 770+ E145             >                // dummy db directives used to calculate length of namec
 770+ E145 43 52       >                db      "CR"
 770+ E147             >len_NFA         defl    $ - temp_NFA
 770+ E147             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 770+ E145             >
 770+ E145 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 770+ E146 43 52       >                db      "CR"               // name string in 7-bit ascii, but
 770+ E148             >                org     $-1                 // alter last byte of Name just above to set
 770+ E147 D2          >                db      {b $} | END_BIT     // msb as name end
 770+ E148             >
 770+ E148 3B 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 770+ E14A             >Prev_Ptr        defl    Heap_Ptr
 770+ E14A             >
 770+ E14A             >mirror_Ptr      defl    $
 770+ E14A             >
 770+ E14A 50 22       >                dw      Dict_Ptr + 2        // xt
 770+ E14C             >Heap_Ptr        defl    $ - $E000           // save current HP
 770+ E14C             >
 770+ E14C             >Current_HP      defl  $ - $E000             // used to set HP once!
 770+ E14C             >
 770+ E14C             >//              ______________________________________________________________________
 770+ E14C             >//              Dictionary part
 770+ E14C             >
 770+ E14C             >                org     Dict_Ptr
 770+ 224E             >
 770+ 224E 4A 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 770+ 2250             >
 770+ 2250             >CR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 770+ 2250 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 770+ 2250 ~           >
 770+ 2250 ~           >
 770+ 2250             >                endif           ; ok        // for other definitions it "points" the correct handler
 770+ 2250             >                // Use of "; ok" to suppress "warning[fwdref]"
 770+ 2250             >
 770+ 2250             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 771+ 2250
 772+ 2250 3E 0D                        ld      a, CR_CHAR
 773+ 2252 18 EA                        jr      Emitc_Ptr
 774+ 2254
 775+ 2254              Emitc_Vec:
 776+ 2254 8D 22                        dw      C_Emit_Printable  // comma
 777+ 2256 94 22                        dw      C_Emit_Bel        // bel
 778+ 2258 8D 22                        dw      C_Emit_Printable  // bs
 779+ 225A AC 22                        dw      C_Emit_Tab        // tab
 780+ 225C 8D 22                        dw      C_Emit_Printable  // cr
 781+ 225E B3 22                        dw      C_Emit_NL         // lf (unix newline)
 782+ 2260 8D 22                        dw      C_Emit_Printable  // blank
 783+ 2262 8D 22                        dw      C_Emit_Printable  // blank
 784+ 2264
 785+ 2264              Emit_Selector_Start:
 786+ 2264 06                           db      $06                 // comma
 787+ 2265 07                           db      $07                 // bel
 788+ 2266 08                           db      $08                 // bs
 789+ 2267 09                           db      $09                 // tab
 790+ 2268 0D                           db      $0D                 // cr
 791+ 2269 0A                           db      $0A                 // lf (unix newline)
 792+ 226A 20                           db      $20
 793+ 226B              Emit_Selector_End:
 794+ 226B 20                           db      $20
 795+ 226C
 796+ 226C              //  ______________________________________________________________________
 797+ 226C              //
 798+ 226C              // (?emit)      c1 -- c2 | c1
 799+ 226C              // decode a character to be sent via EMIT
 800+ 226C              // search first the Emit_Selector table, if found jump to the corresponding routine in Emit_Vector
 801+ 226C              // the routine should resolve anything and convert the character anyway.
 802+ 226C                              New_Def C_EMIT, "(?EMIT)", is_code, is_normal
 802+ 226C             >
 802+ 226C             >Dict_Ptr        defl    $
 802+ 226C             >
 802+ 226C             >//              ______________________________________________________________________
 802+ 226C             >//              Heap part
 802+ 226C             >
 802+ 226C             >
 802+ 226C             >                org     (Heap_Ptr & $1FFF) + $E000
 802+ E14C             >
 802+ E14C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 802+ E14C             >Latest_Definition defl  Heap_Ptr
 802+ E14C             >
 802+ E14C             >                // dummy db directives used to calculate length of namec
 802+ E14C 28 3F 45 4D >                db      "(?EMIT)"
 802+ E150 49 54 29    >
 802+ E153             >len_NFA         defl    $ - temp_NFA
 802+ E153             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 802+ E14C             >
 802+ E14C 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 802+ E14D 28 3F 45 4D >                db      "(?EMIT)"               // name string in 7-bit ascii, but
 802+ E151 49 54 29    >
 802+ E154             >                org     $-1                 // alter last byte of Name just above to set
 802+ E153 A9          >                db      {b $} | END_BIT     // msb as name end
 802+ E154             >
 802+ E154 45 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 802+ E156             >Prev_Ptr        defl    Heap_Ptr
 802+ E156             >
 802+ E156             >mirror_Ptr      defl    $
 802+ E156             >
 802+ E156 6E 22       >                dw      Dict_Ptr + 2        // xt
 802+ E158             >Heap_Ptr        defl    $ - $E000           // save current HP
 802+ E158             >
 802+ E158             >Current_HP      defl  $ - $E000             // used to set HP once!
 802+ E158             >
 802+ E158             >//              ______________________________________________________________________
 802+ E158             >//              Dictionary part
 802+ E158             >
 802+ E158             >                org     Dict_Ptr
 802+ 226C             >
 802+ 226C 56 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 802+ 226E             >
 802+ 226E             >C_EMIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 802+ 226E ~           >                call    runcode ; ok        // for primitive definitions  actual code
 802+ 226E ~           >
 802+ 226E ~           >
 802+ 226E             >                endif           ; ok        // for other definitions it "points" the correct handler
 802+ 226E             >                // Use of "; ok" to suppress "warning[fwdref]"
 802+ 226E             >
 802+ 226E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 803+ 226E D9                           exx
 804+ 226F D1                           pop     de
 805+ 2270 7B                           ld      a, e                //  de has c1
 806+ 2271 E6 7F                        and     $7F                 // 7-bit ascii only
 807+ 2273                              // push    bc                  // save Instruction Pointer
 808+ 2273 01 08 00                     ld      bc, Emit_Selector_End - Emit_Selector_Start + 1
 809+ 2276 21 6B 22                     ld      hl, Emit_Selector_End
 810+ 2279 ED B9                        cpdr                        // search for c1 in Emit_Selector table, backward
 811+ 227B 20 0A                        jr      nz, C_Emit_Not_Found
 812+ 227D                                  // Found then decode it
 813+ 227D 21 54 22                         ld      hl, Emitc_Vec
 814+ 2280 09                               add     hl, bc
 815+ 2281 09                               add     hl, bc
 816+ 2282 5E                               ld      e, (hl)
 817+ 2283 23                               inc     hl
 818+ 2284 56                               ld      d, (hl)
 819+ 2285 EB                               ex      de, hl
 820+ 2286                                  // pop     bc                  // restore Instruction Pointer
 821+ 2286 E9                               jp      (hl)                // one of the following labels
 822+ 2287              C_Emit_Not_Found:
 823+ 2287                              // pop     bc                  // restore Instruction Pointer
 824+ 2287 FE 20                        cp      BLANK_CHAR          // cp $20 non-printable check
 825+ 2289 30 02                        jr      nc, C_Emit_Printable
 826+ 228B 3E 00                            ld      a, NUL_CHAR         // NUL is never "printed"
 827+ 228D              C_Emit_Printable:
 828+ 228D 6F                           ld      l, a
 829+ 228E 26 00                        ld      h, 0
 830+ 2290 E5                           push    hl
 831+ 2291 D9                           exx
 832+ 2292                              next
 832+ 2292 DD E9       >                jp      (ix)
 833+ 2294
 834+ 2294              C_Emit_Bel:
 835+ 2294 D9                            exx
 836+ 2295 C5                           push    bc                  // save Instruction Pointer
 837+ 2296 D5                           push    de
 838+ 2297 11 00 01                     ld      de, $0100
 839+ 229A 21 00 02                     ld      hl, $0200
 840+ 229D DD E5                        push    ix                  // save Next Pointer
 841+ 229F                              // call    $03B6               // bleep Standard-ROM routine
 842+ 229F DF                           rst     $18
 843+ 22A0 B6 03                        defw    $03B6
 844+ 22A2 DD E1                        pop     ix                  // restore Next Pointer
 845+ 22A4 D1                           pop     de
 846+ 22A5 C1                           pop     bc                  // restore Instruction Pointer
 847+ 22A6 21 00 00                     ld      hl, NUL_CHAR
 848+ 22A9 E5                           push    hl
 849+ 22AA                              next
 849+ 22AA DD E9       >                jp      (ix)
 850+ 22AC
 851+ 22AC 21 06 00     C_Emit_Tab:     ld      hl, COMMA_CHAR
 852+ 22AF E5                           push    hl
 853+ 22B0 D9                           exx
 854+ 22B1                              next
 854+ 22B1 DD E9       >                jp      (ix)
 855+ 22B3
 856+ 22B3 21 0D 00     C_Emit_NL       ld      hl, CR_CHAR           // 0x0A --> 0x0D  à la Spectrum
 857+ 22B6 E5                           push    hl
 858+ 22B7 D9                           exx
 859+ 22B8                              next
 859+ 22B8 DD E9       >                jp      (ix)
 860+ 22BA
 861+ 22BA              //  ______________________________________________________________________
 862+ 22BA
 863+ 22BA              Key_Table:
 864+ 22BA E2                           db      $E2                 //  0: STOP  --> SYMBOL+A : ~
 865+ 22BB C3                           db      $C3                 //  1: NOT   --> SYMBOL+S : |
 866+ 22BC CD                           db      $CD                 //  2: STEP  --> SYMBOl+D : //
 867+ 22BD CC                           db      $CC                 //  3: TO    --> SYMBOL+F : {
 868+ 22BE CB                           db      $CB                 //  4: THEN  --> SYMBOL+G : }
 869+ 22BF C6                           db      $C6                 //  5: AND   --> SYMBOL+Y : [
 870+ 22C0 C5                           db      $C5                 //  6: OR    --> SYMBOL+U : ]
 871+ 22C1 AC                           db      $AC                 //  7: AT    --> SYMBOL+I : (C) copyright symbol
 872+ 22C2 C7                           db      $C7                 //  8: <=    --> same as SHIFT-1 [EDIT]
 873+ 22C3 C8                           db      $C8                 //  9: >=    --> same as SHIFT-0 [BACKSPACE]
 874+ 22C4 C9                           db      $C9                 // 10: <>    --> SYMBOL+W is the same as CAPS (toggle) SHIFT+2
 875+ 22C5              Key_MapTo:
 876+ 22C5 06                           db      $06                 // 10: SYMBOL+W is the same as CAPS (toggle) SHIFT+2
 877+ 22C6 0C                           db      $0C                 //  9: same as SHIFT-0 [BACKSPACE]
 878+ 22C7 07                           db      $07                 //  8: same as SHIFT-1 [EDIT]
 879+ 22C8 7F                           db      $7F                 //  7: SYMBOL+I : (C) copyright symbol
 880+ 22C9 5D                           db      $5D                 //  6: SYMBOL+U : ]
 881+ 22CA 5B                           db      $5B                 //  5: SYMBOL+Y : [
 882+ 22CB 7D                           db      $7D                 //  4: SYMBOL+G : }
 883+ 22CC 7B                           db      $7B                 //  3: SYMBOL+F : {
 884+ 22CD 5C                           db      $5C                 //  2: SYMBOl+D : //
 885+ 22CE 7C                           db      $7C                 //  1: SYMBOL+S : |
 886+ 22CF 7E                           db      $7E                 //  0: SYMBOL+A : ~
 887+ 22D0
 888+ 22D0              //  ______________________________________________________________________
 889+ 22D0              //
 890+ 22D0              // curs         -- c
 891+ 22D0              // wait for a keypress
 892+ 22D0              // This definition need Standard ROM Interrupt to be served
 893+ 22D0
 894+ 22D0                              New_Def CUR, "CURS", is_code, is_normal
 894+ 22D0             >
 894+ 22D0             >Dict_Ptr        defl    $
 894+ 22D0             >
 894+ 22D0             >//              ______________________________________________________________________
 894+ 22D0             >//              Heap part
 894+ 22D0             >
 894+ 22D0             >
 894+ 22D0             >                org     (Heap_Ptr & $1FFF) + $E000
 894+ E158             >
 894+ E158             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 894+ E158             >Latest_Definition defl  Heap_Ptr
 894+ E158             >
 894+ E158             >                // dummy db directives used to calculate length of namec
 894+ E158 43 55 52 53 >                db      "CURS"
 894+ E15C             >len_NFA         defl    $ - temp_NFA
 894+ E15C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 894+ E158             >
 894+ E158 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 894+ E159 43 55 52 53 >                db      "CURS"               // name string in 7-bit ascii, but
 894+ E15D             >                org     $-1                 // alter last byte of Name just above to set
 894+ E15C D3          >                db      {b $} | END_BIT     // msb as name end
 894+ E15D             >
 894+ E15D 4C 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 894+ E15F             >Prev_Ptr        defl    Heap_Ptr
 894+ E15F             >
 894+ E15F             >mirror_Ptr      defl    $
 894+ E15F             >
 894+ E15F D2 22       >                dw      Dict_Ptr + 2        // xt
 894+ E161             >Heap_Ptr        defl    $ - $E000           // save current HP
 894+ E161             >
 894+ E161             >Current_HP      defl  $ - $E000             // used to set HP once!
 894+ E161             >
 894+ E161             >//              ______________________________________________________________________
 894+ E161             >//              Dictionary part
 894+ E161             >
 894+ E161             >                org     Dict_Ptr
 894+ 22D0             >
 894+ 22D0 5F 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 894+ 22D2             >
 894+ 22D2             >CUR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 894+ 22D2 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 894+ 22D2 ~           >
 894+ 22D2 ~           >
 894+ 22D2             >                endif           ; ok        // for other definitions it "points" the correct handler
 894+ 22D2             >                // Use of "; ok" to suppress "warning[fwdref]"
 894+ 22D2             >
 894+ 22D2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 895+ 22D2
 896+ 22D2 C5                           push    bc                  // save Instruction Pointer
 897+ 22D3 D5                           push    de                  // save Return Stack Pointer
 898+ 22D4 DD E5                        push    ix
 899+ 22D6 ED 73 2C 20                  ld      (SP_Saved), sp      // be sure to not to be paged out.
 900+ 22DA                          //  ld      sp, Cold_origin - 5 // maybe $8000 in the future...
 901+ 22DA 31 00 5C                     ld      sp,TSTACK            ; dont use TSTACK system-variable
 902+ 22DD FD CB 01 AE                  res     5, (iy + 1)         // FLAGS (5C3A+1)
 903+ 22E1
 904+ 22E1              Cur_Wait:
 905+ 22E1 76                               halt
 906+ 22E2 3E 02                            ld      a, 2                // selec channel #2 (Upper Video)
 907+ 22E4                              //  call    $1601               // SELECT Standard-ROM Routine
 908+ 22E4 DF                               rst     $18
 909+ 22E5 01 16                            dw      $1601
 910+ 22E7
 911+ 22E7                                  // software-flash: flips face every 320 ms
 912+ 22E7 3E 20                            ld      a, $20              // Timing based
 913+ 22E9 FD A6 3E                         and     (iy + $3E)          // FRAMES (5C3A+3E)
 914+ 22EC
 915+ 22EC 3A 28 20                         ld      a, (Block_Face)     // see origin.asm
 916+ 22EF 20 0C                            jr      nz, Cur_Cursor
 917+ 22F1 3A 29 20                             ld      a, (Half_Face)      // see origin.asm
 918+ 22F4 FD CB 30 5E                          bit     3, (iy + $30)       // FLAGS2 (5C3A+$30) that is CAPS-LOCK
 919+ 22F8 28 03                                jr      z, Cur_Cursor
 920+ 22FA 3A 2A 20                                 ld      a, (Underscore_Face) // see origin
 921+ 22FD              Cur_Cursor:
 922+ 22FD D7                               rst     $10
 923+ 22FE 3E 08                            ld      a, BACKSPACE_CHAR    // backspace
 924+ 2300 D7                               rst     $10
 925+ 2301
 926+ 2301 FD CB 01 6E                      bit     5, (iy + 1)         // FLAGS (5C3A+1)
 927+ 2305 28 DA                        jr      z, Cur_Wait
 928+ 2307
 929+ 2307 76                           halt    // this is to sync flashing cursor.
 930+ 2308
 931+ 2308 3E 20                        ld      a, BLANK_CHAR       // space to blank cursor
 932+ 230A D7                           rst     $10
 933+ 230B 3E 08                        ld      a, BACKSPACE_CHAR   // backspace
 934+ 230D D7                           rst     $10
 935+ 230E
 936+ 230E ED 7B 2C 20                  ld      sp, (SP_Saved)
 937+ 2312
 938+ 2312 DD E1                        pop     ix
 939+ 2314 D1                           pop     de                  // Restore Return Stack Pointer
 940+ 2315 C1                           pop     bc                  // Restore Instruction Pointer
 941+ 2316                              next
 941+ 2316 DD E9       >                jp      (ix)
 942+ 2318
 943+ 2318
 944+ 2318              //  ______________________________________________________________________
 945+ 2318              //
 946+ 2318              // key          -- c
 947+ 2318              // This definition need Standard ROM Interrupt to be served
 948+ 2318
 949+ 2318                              New_Def KEY, "KEY", is_code, is_normal
 949+ 2318             >
 949+ 2318             >Dict_Ptr        defl    $
 949+ 2318             >
 949+ 2318             >//              ______________________________________________________________________
 949+ 2318             >//              Heap part
 949+ 2318             >
 949+ 2318             >
 949+ 2318             >                org     (Heap_Ptr & $1FFF) + $E000
 949+ E161             >
 949+ E161             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 949+ E161             >Latest_Definition defl  Heap_Ptr
 949+ E161             >
 949+ E161             >                // dummy db directives used to calculate length of namec
 949+ E161 4B 45 59    >                db      "KEY"
 949+ E164             >len_NFA         defl    $ - temp_NFA
 949+ E164             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 949+ E161             >
 949+ E161 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 949+ E162 4B 45 59    >                db      "KEY"               // name string in 7-bit ascii, but
 949+ E165             >                org     $-1                 // alter last byte of Name just above to set
 949+ E164 D9          >                db      {b $} | END_BIT     // msb as name end
 949+ E165             >
 949+ E165 58 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 949+ E167             >Prev_Ptr        defl    Heap_Ptr
 949+ E167             >
 949+ E167             >mirror_Ptr      defl    $
 949+ E167             >
 949+ E167 1A 23       >                dw      Dict_Ptr + 2        // xt
 949+ E169             >Heap_Ptr        defl    $ - $E000           // save current HP
 949+ E169             >
 949+ E169             >Current_HP      defl  $ - $E000             // used to set HP once!
 949+ E169             >
 949+ E169             >//              ______________________________________________________________________
 949+ E169             >//              Dictionary part
 949+ E169             >
 949+ E169             >                org     Dict_Ptr
 949+ 2318             >
 949+ 2318 67 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 949+ 231A             >
 949+ 231A             >KEY:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 949+ 231A ~           >                call    runcode ; ok        // for primitive definitions  actual code
 949+ 231A ~           >
 949+ 231A ~           >
 949+ 231A             >                endif           ; ok        // for other definitions it "points" the correct handler
 949+ 231A             >                // Use of "; ok" to suppress "warning[fwdref]"
 949+ 231A             >
 949+ 231A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 950+ 231A
 951+ 231A C5                           push    bc                  // Save Instruction Pointer
 952+ 231B
 953+ 231B              Key_Wait:
 954+ 231B FD CB 01 6E                      bit     5, (iy + 1)         // FLAGS (5C3A+1)
 955+ 231F 28 FA                        jr      z, Key_Wait
 956+ 2321
 957+ 2321 3A 08 5C                     ld      a, (LASTK)          // get typed character (5C08)
 958+ 2324
 959+ 2324                              // decode character from above table
 960+ 2324 21 BA 22                     ld      hl, Key_Table
 961+ 2327 01 0B 00                     ld      bc, $000B
 962+ 232A ED B1                        cpir
 963+ 232C 20 05                        jr      nz, Key_DontMap
 964+ 232E 21 C5 22                         ld      hl, Key_MapTo
 965+ 2331 09                               add     hl, bc
 966+ 2332 7E                               ld      a, (hl)
 967+ 2333 FE 06        Key_DontMap:    cp      $06                 // CAPS-LOCK management
 968+ 2335 20 09                        jr      nz, Key_NoCapsLock
 969+ 2337 21 6A 5C                         ld      hl, $5C6A           // FLAGS2
 970+ 233A 7E                               ld      a, (hl)
 971+ 233B EE 08                            xor     $08
 972+ 233D 77                               ld      (hl), a
 973+ 233E 3E 00                            ld      a, NUL_CHAR
 974+ 2340 6F           Key_NoCapsLock: ld      l, a
 975+ 2341 26 00                        ld      h, 0                // Prepare TOS
 976+ 2343
 977+ 2343 FD CB 01 AE                  res     5, (iy + 1)         // FLAGS (5C3A+1)
 978+ 2347
 979+ 2347 C1                           pop     bc                  // Restore Instruction Pointer
 980+ 2348
 981+ 2348                              psh1
 981+ 2348 E5          >                push    hl
 981+ 2349 DD E9       >                jp      (ix)
 982+ 234B
 983+ 234B
 984+ 234B              //  ______________________________________________________________________
 985+ 234B              //
 986+ 234B              // click        --
 987+ 234B              // This definition need Standard ROM Interrupt to be served
 988+ 234B              //
 989+ 234B              //              New_Def CLICK, "CLICK", is_code, is_normal
 990+ 234B              //
 991+ 234B              //                push    bc
 992+ 234B              //              ld      a, ($5C48)          // BORDCR system variable
 993+ 234B              //              rra
 994+ 234B              //              rra
 995+ 234B              //              rra
 996+ 234B              //              or      $18                 // quick'n'dirty click
 997+ 234B              //              out     ($fe), a
 998+ 234B              //              ld      b, 0
 999+ 234B              //              djnz    $                   // wait loop
1000+ 234B              //              xor     $18
1001+ 234B              //              out     ($fe), a
1002+ 234B              //                pop     bc
1003+ 234B
1004+ 234B              //              next
1005+ 234B
1006+ 234B              //  ______________________________________________________________________
1007+ 234B              //
1008+ 234B              // key?         -- f
1009+ 234B              // key available
1010+ 234B              //
1011+ 234B              //              New_Def KEY_Q, "KEY?", is_code, is_normal
1012+ 234B              //
1013+ 234B              //              ld      hl, 0000
1014+ 234B              //              bit     5, (iy + 1)         // FLAGS (5C3A+1)
1015+ 234B              //              jr      z, Key_Q
1016+ 234B              //                  dec     hl
1017+ 234B              // Key_Q:
1018+ 234B              //                psh1
1019+ 234B              //              next
1020+ 234B
1021+ 234B              //  ______________________________________________________________________
1022+ 234B              //
1023+ 234B              // ?terminal    -- FALSE | TRUE
1024+ 234B              // test for BREAK keypress
1025+ 234B                              New_Def QTERMINAL, "?TERMINAL", is_code, is_normal
1025+ 234B             >
1025+ 234B             >Dict_Ptr        defl    $
1025+ 234B             >
1025+ 234B             >//              ______________________________________________________________________
1025+ 234B             >//              Heap part
1025+ 234B             >
1025+ 234B             >
1025+ 234B             >                org     (Heap_Ptr & $1FFF) + $E000
1025+ E169             >
1025+ E169             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1025+ E169             >Latest_Definition defl  Heap_Ptr
1025+ E169             >
1025+ E169             >                // dummy db directives used to calculate length of namec
1025+ E169 3F 54 45 52 >                db      "?TERMINAL"
1025+ E16D 4D 49 4E 41 >
1025+ E171 4C          >
1025+ E172             >len_NFA         defl    $ - temp_NFA
1025+ E172             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1025+ E169             >
1025+ E169 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1025+ E16A 3F 54 45 52 >                db      "?TERMINAL"               // name string in 7-bit ascii, but
1025+ E16E 4D 49 4E 41 >
1025+ E172 4C          >
1025+ E173             >                org     $-1                 // alter last byte of Name just above to set
1025+ E172 CC          >                db      {b $} | END_BIT     // msb as name end
1025+ E173             >
1025+ E173 61 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1025+ E175             >Prev_Ptr        defl    Heap_Ptr
1025+ E175             >
1025+ E175             >mirror_Ptr      defl    $
1025+ E175             >
1025+ E175 4D 23       >                dw      Dict_Ptr + 2        // xt
1025+ E177             >Heap_Ptr        defl    $ - $E000           // save current HP
1025+ E177             >
1025+ E177             >Current_HP      defl  $ - $E000             // used to set HP once!
1025+ E177             >
1025+ E177             >//              ______________________________________________________________________
1025+ E177             >//              Dictionary part
1025+ E177             >
1025+ E177             >                org     Dict_Ptr
1025+ 234B             >
1025+ 234B 75 01       >                dw      mirror_Ptr - $E000 + Heap_offset
1025+ 234D             >
1025+ 234D             >QTERMINAL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1025+ 234D ~           >                call    runcode ; ok        // for primitive definitions  actual code
1025+ 234D ~           >
1025+ 234D ~           >
1025+ 234D             >                endif           ; ok        // for other definitions it "points" the correct handler
1025+ 234D             >                // Use of "; ok" to suppress "warning[fwdref]"
1025+ 234D             >
1025+ 234D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1026+ 234D D9                           exx
1027+ 234E 01 FE 7F                     ld      bc, $7ffe
1028+ 2351 ED 50                        in      d, (c)
1029+ 2353 41                           ld      b, c
1030+ 2354 ED 78                        in      a, (c)
1031+ 2356 B2                           or       d
1032+ 2357 1F                           rra
1033+ 2358 3F                           ccf
1034+ 2359 ED 62                        sbc     hl, hl
1035+ 235B E5                           push    hl
1036+ 235C D9                           exx
1037+ 235D                              next
1037+ 235D DD E9       >                jp      (ix)
1038+ 235F
1039+ 235F
1040+ 235F              //  ______________________________________________________________________
1041+ 235F              //
1042+ 235F              // inkey        -- c | 0
1043+ 235F              // call ROM inkey$ routine, returns c or "zero".
1044+ 235F              //
1045+ 235F              //              New_Def INKEY, "INKEY", is_code, is_normal
1046+ 235F              //              push    bc
1047+ 235F              //              push    de
1048+ 235F              //              ld      (SP_Saved), sp
1049+ 235F              //              ld      sp, Cold_origin - 5
1050+ 235F              //              ld      sp,TSTACK             ; dont use TSTACK system-variable
1051+ 235F              //              push    ix
1052+ 235F              //              call    $15E6                   // instead of 15E9
1053+ 235F              //              pop     ix
1054+ 235F              //              ld      sp, (SP_Saved)
1055+ 235F              //              ld      l, a
1056+ 235F              //              ld      h, 0
1057+ 235F              //              pop     de
1058+ 235F              //              pop     bc
1059+ 235F              //              psh1
1060+ 235F
1061+ 235F              //  ______________________________________________________________________
1062+ 235F              //
1063+ 235F              // select      n --
1064+ 235F              // selects the given channel number
1065+ 235F
1066+ 235F                              New_Def SELECT, "SELECT", is_code, is_normal
1066+ 235F             >
1066+ 235F             >Dict_Ptr        defl    $
1066+ 235F             >
1066+ 235F             >//              ______________________________________________________________________
1066+ 235F             >//              Heap part
1066+ 235F             >
1066+ 235F             >
1066+ 235F             >                org     (Heap_Ptr & $1FFF) + $E000
1066+ E177             >
1066+ E177             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1066+ E177             >Latest_Definition defl  Heap_Ptr
1066+ E177             >
1066+ E177             >                // dummy db directives used to calculate length of namec
1066+ E177 53 45 4C 45 >                db      "SELECT"
1066+ E17B 43 54       >
1066+ E17D             >len_NFA         defl    $ - temp_NFA
1066+ E17D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1066+ E177             >
1066+ E177 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1066+ E178 53 45 4C 45 >                db      "SELECT"               // name string in 7-bit ascii, but
1066+ E17C 43 54       >
1066+ E17E             >                org     $-1                 // alter last byte of Name just above to set
1066+ E17D D4          >                db      {b $} | END_BIT     // msb as name end
1066+ E17E             >
1066+ E17E 69 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1066+ E180             >Prev_Ptr        defl    Heap_Ptr
1066+ E180             >
1066+ E180             >mirror_Ptr      defl    $
1066+ E180             >
1066+ E180 61 23       >                dw      Dict_Ptr + 2        // xt
1066+ E182             >Heap_Ptr        defl    $ - $E000           // save current HP
1066+ E182             >
1066+ E182             >Current_HP      defl  $ - $E000             // used to set HP once!
1066+ E182             >
1066+ E182             >//              ______________________________________________________________________
1066+ E182             >//              Dictionary part
1066+ E182             >
1066+ E182             >                org     Dict_Ptr
1066+ 235F             >
1066+ 235F 80 01       >                dw      mirror_Ptr - $E000 + Heap_offset
1066+ 2361             >
1066+ 2361             >SELECT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1066+ 2361 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1066+ 2361 ~           >
1066+ 2361 ~           >
1066+ 2361             >                endif           ; ok        // for other definitions it "points" the correct handler
1066+ 2361             >                // Use of "; ok" to suppress "warning[fwdref]"
1066+ 2361             >
1066+ 2361             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1067+ 2361 E1                           pop     hl
1068+ 2362 C5                           push    bc
1069+ 2363 D5                           push    de
1070+ 2364 7D                           ld      a, l
1071+ 2365 ED 73 2C 20                  ld      (SP_Saved), sp
1072+ 2369                          //  ld      sp, Cold_origin - 5
1073+ 2369 31 00 5C                     ld      sp,TSTACK            ; dont use TSTACK system-variable
1074+ 236C DD E5                        push    ix
1075+ 236E                              //  call    $1601
1076+ 236E DF                           rst     $18
1077+ 236F 01 16                        dw      $1601
1078+ 2371 DD E1                        pop     ix
1079+ 2373 ED 7B 2C 20                  ld      sp, (SP_Saved)
1080+ 2377 D1                           pop     de
1081+ 2378 C1                           pop     bc
1082+ 2379                              next
1082+ 2379 DD E9       >                jp      (ix)
1083+ 237B
1084+ 237B              //  ______________________________________________________________________
1085+ 237B              //
1086+ 237B              // ZX Spectrum Next - Low Level disk primitives.
1087+ 237B              // this include is "here" for backward compatibility
1088+ 237B
1089+ 237B                              include "next-opt0.asm"
# file opened: C:\Zx\CSpect\Projects\vForth17_DOT/source/next-opt0.asm
   1++237B              //  ______________________________________________________________________
   2++237B              //
   3++237B              //  next-opt.asm
   4++237B              //
   5++237B              //  ZX Spectrum Next - peculiar definitions
   6++237B              //  ______________________________________________________________________
   7++237B
   8++237B              //  ______________________________________________________________________
   9++237B              //
  10++237B              // f_seek       d u -- f
  11++237B              // Seek to position d in file-handle u.
  12++237B              // Return a false-flag 0 on success, True flag on error
  13++237B                              New_Def F_SEEK, "F_SEEK", is_code, is_normal
  13++237B             >
  13++237B             >Dict_Ptr        defl    $
  13++237B             >
  13++237B             >//              ______________________________________________________________________
  13++237B             >//              Heap part
  13++237B             >
  13++237B             >
  13++237B             >                org     (Heap_Ptr & $1FFF) + $E000
  13++E182             >
  13++E182             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13++E182             >Latest_Definition defl  Heap_Ptr
  13++E182             >
  13++E182             >                // dummy db directives used to calculate length of namec
  13++E182 46 5F 53 45 >                db      "F_SEEK"
  13++E186 45 4B       >
  13++E188             >len_NFA         defl    $ - temp_NFA
  13++E188             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13++E182             >
  13++E182 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  13++E183 46 5F 53 45 >                db      "F_SEEK"               // name string in 7-bit ascii, but
  13++E187 45 4B       >
  13++E189             >                org     $-1                 // alter last byte of Name just above to set
  13++E188 CB          >                db      {b $} | END_BIT     // msb as name end
  13++E189             >
  13++E189 77 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  13++E18B             >Prev_Ptr        defl    Heap_Ptr
  13++E18B             >
  13++E18B             >mirror_Ptr      defl    $
  13++E18B             >
  13++E18B 7D 23       >                dw      Dict_Ptr + 2        // xt
  13++E18D             >Heap_Ptr        defl    $ - $E000           // save current HP
  13++E18D             >
  13++E18D             >Current_HP      defl  $ - $E000             // used to set HP once!
  13++E18D             >
  13++E18D             >//              ______________________________________________________________________
  13++E18D             >//              Dictionary part
  13++E18D             >
  13++E18D             >                org     Dict_Ptr
  13++237B             >
  13++237B 8B 01       >                dw      mirror_Ptr - $E000 + Heap_offset
  13++237D             >
  13++237D             >F_SEEK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  13++237D ~           >                call    runcode ; ok        // for primitive definitions  actual code
  13++237D ~           >
  13++237D ~           >
  13++237D             >                endif           ; ok        // for other definitions it "points" the correct handler
  13++237D             >                // Use of "; ok" to suppress "warning[fwdref]"
  13++237D             >
  13++237D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14++237D D9                            exx
  15++237E E1                            pop     hl                  // file-handle
  16++237F 7D                            ld      a, l
  17++2380 C1                            pop     bc                  // bc has high-word of d
  18++2381 D1                            pop     de
  19++2382 D9                           exx
  20++2383 DD E5                        push    ix
  21++2385 D5                           push    de
  22++2386 C5                           push    bc                  // save Instruction Pointer
  23++2387 D9                            exx
  24++2388 21 00 00                      ld      hl, 0 // ix, 0
  25++238B CF                            rst     $08
  26++238C 9F                            db      $9F
  27++238D              F_Seek_Exit:
  28++238D C1                           pop     bc                  // restore Instruction Pointer
  29++238E D1                           pop     de
  30++238F DD E1                        pop     ix
  31++2391 ED 62                        sbc     hl, hl              // to get 0 or -1
  32++2393
  33++2393                              psh1
  33++2393 E5          >                push    hl
  33++2394 DD E9       >                jp      (ix)
  34++2396
  35++2396              //  ______________________________________________________________________
  36++2396              //
  37++2396              // f_close      u -- f
  38++2396              // Close file-handle u.
  39++2396              // Return 0 on success, True flag on error
  40++2396
  41++2396                              New_Def F_CLOSE, "F_CLOSE", is_code, is_normal
  41++2396             >
  41++2396             >Dict_Ptr        defl    $
  41++2396             >
  41++2396             >//              ______________________________________________________________________
  41++2396             >//              Heap part
  41++2396             >
  41++2396             >
  41++2396             >                org     (Heap_Ptr & $1FFF) + $E000
  41++E18D             >
  41++E18D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  41++E18D             >Latest_Definition defl  Heap_Ptr
  41++E18D             >
  41++E18D             >                // dummy db directives used to calculate length of namec
  41++E18D 46 5F 43 4C >                db      "F_CLOSE"
  41++E191 4F 53 45    >
  41++E194             >len_NFA         defl    $ - temp_NFA
  41++E194             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  41++E18D             >
  41++E18D 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  41++E18E 46 5F 43 4C >                db      "F_CLOSE"               // name string in 7-bit ascii, but
  41++E192 4F 53 45    >
  41++E195             >                org     $-1                 // alter last byte of Name just above to set
  41++E194 C5          >                db      {b $} | END_BIT     // msb as name end
  41++E195             >
  41++E195 82 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  41++E197             >Prev_Ptr        defl    Heap_Ptr
  41++E197             >
  41++E197             >mirror_Ptr      defl    $
  41++E197             >
  41++E197 98 23       >                dw      Dict_Ptr + 2        // xt
  41++E199             >Heap_Ptr        defl    $ - $E000           // save current HP
  41++E199             >
  41++E199             >Current_HP      defl  $ - $E000             // used to set HP once!
  41++E199             >
  41++E199             >//              ______________________________________________________________________
  41++E199             >//              Dictionary part
  41++E199             >
  41++E199             >                org     Dict_Ptr
  41++2396             >
  41++2396 97 01       >                dw      mirror_Ptr - $E000 + Heap_offset
  41++2398             >
  41++2398             >F_CLOSE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  41++2398 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  41++2398 ~           >
  41++2398 ~           >
  41++2398             >                endif           ; ok        // for other definitions it "points" the correct handler
  41++2398             >                // Use of "; ok" to suppress "warning[fwdref]"
  41++2398             >
  41++2398             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  42++2398
  43++2398 E1                           pop     hl
  44++2399 7D                           ld      a, l                // file-handle
  45++239A DD E5                        push    ix
  46++239C D5                           push    de
  47++239D C5                           push    bc                  // Save Instruction pointer
  48++239E CF                           rst     $08
  49++239F 9B                           db      $9B
  50++23A0 18 EB                        jr      F_Seek_Exit
  51++23A2              //              pop     de
  52++23A2              //              pop     bc
  53++23A2              //              pop     ix
  54++23A2              //              sbc     hl, hl
  55++23A2              //              psh1
  56++23A2
  57++23A2              //  ______________________________________________________________________
  58++23A2              //
  59++23A2              // f_sync      u -- f
  60++23A2              // Close file-handle u.
  61++23A2              // Return 0 on success, True flag on error
  62++23A2
  63++23A2                              New_Def F_SYNC, "F_SYNC", is_code, is_normal
  63++23A2             >
  63++23A2             >Dict_Ptr        defl    $
  63++23A2             >
  63++23A2             >//              ______________________________________________________________________
  63++23A2             >//              Heap part
  63++23A2             >
  63++23A2             >
  63++23A2             >                org     (Heap_Ptr & $1FFF) + $E000
  63++E199             >
  63++E199             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  63++E199             >Latest_Definition defl  Heap_Ptr
  63++E199             >
  63++E199             >                // dummy db directives used to calculate length of namec
  63++E199 46 5F 53 59 >                db      "F_SYNC"
  63++E19D 4E 43       >
  63++E19F             >len_NFA         defl    $ - temp_NFA
  63++E19F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  63++E199             >
  63++E199 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  63++E19A 46 5F 53 59 >                db      "F_SYNC"               // name string in 7-bit ascii, but
  63++E19E 4E 43       >
  63++E1A0             >                org     $-1                 // alter last byte of Name just above to set
  63++E19F C3          >                db      {b $} | END_BIT     // msb as name end
  63++E1A0             >
  63++E1A0 8D 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  63++E1A2             >Prev_Ptr        defl    Heap_Ptr
  63++E1A2             >
  63++E1A2             >mirror_Ptr      defl    $
  63++E1A2             >
  63++E1A2 A4 23       >                dw      Dict_Ptr + 2        // xt
  63++E1A4             >Heap_Ptr        defl    $ - $E000           // save current HP
  63++E1A4             >
  63++E1A4             >Current_HP      defl  $ - $E000             // used to set HP once!
  63++E1A4             >
  63++E1A4             >//              ______________________________________________________________________
  63++E1A4             >//              Dictionary part
  63++E1A4             >
  63++E1A4             >                org     Dict_Ptr
  63++23A2             >
  63++23A2 A2 01       >                dw      mirror_Ptr - $E000 + Heap_offset
  63++23A4             >
  63++23A4             >F_SYNC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  63++23A4 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  63++23A4 ~           >
  63++23A4 ~           >
  63++23A4             >                endif           ; ok        // for other definitions it "points" the correct handler
  63++23A4             >                // Use of "; ok" to suppress "warning[fwdref]"
  63++23A4             >
  63++23A4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  64++23A4 E1                           pop     hl
  65++23A5 7D                           ld      a, l                // file-handle
  66++23A6 DD E5                        push    ix
  67++23A8 D5                           push    de
  68++23A9 C5                           push    bc
  69++23AA CF                           rst     $08
  70++23AB 9C                           db      $9C
  71++23AC 18 DF                        jr      F_Seek_Exit
  72++23AE              //              pop     de
  73++23AE              //              pop     bc
  74++23AE              //              pop     ix
  75++23AE              //              sbc     hl, hl
  76++23AE              //              psh1
  77++23AE
  78++23AE              //  ______________________________________________________________________
  79++23AE              //
  80++23AE              // f_fgetpos    u -- d f
  81++23AE              // Seek to position d in file-handle u.
  82++23AE              // Return a false-flag 0 on success, True flag on error
  83++23AE                              New_Def F_FGETPOS, "F_FGETPOS", is_code, is_normal
  83++23AE             >
  83++23AE             >Dict_Ptr        defl    $
  83++23AE             >
  83++23AE             >//              ______________________________________________________________________
  83++23AE             >//              Heap part
  83++23AE             >
  83++23AE             >
  83++23AE             >                org     (Heap_Ptr & $1FFF) + $E000
  83++E1A4             >
  83++E1A4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  83++E1A4             >Latest_Definition defl  Heap_Ptr
  83++E1A4             >
  83++E1A4             >                // dummy db directives used to calculate length of namec
  83++E1A4 46 5F 46 47 >                db      "F_FGETPOS"
  83++E1A8 45 54 50 4F >
  83++E1AC 53          >
  83++E1AD             >len_NFA         defl    $ - temp_NFA
  83++E1AD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  83++E1A4             >
  83++E1A4 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  83++E1A5 46 5F 46 47 >                db      "F_FGETPOS"               // name string in 7-bit ascii, but
  83++E1A9 45 54 50 4F >
  83++E1AD 53          >
  83++E1AE             >                org     $-1                 // alter last byte of Name just above to set
  83++E1AD D3          >                db      {b $} | END_BIT     // msb as name end
  83++E1AE             >
  83++E1AE 99 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  83++E1B0             >Prev_Ptr        defl    Heap_Ptr
  83++E1B0             >
  83++E1B0             >mirror_Ptr      defl    $
  83++E1B0             >
  83++E1B0 B0 23       >                dw      Dict_Ptr + 2        // xt
  83++E1B2             >Heap_Ptr        defl    $ - $E000           // save current HP
  83++E1B2             >
  83++E1B2             >Current_HP      defl  $ - $E000             // used to set HP once!
  83++E1B2             >
  83++E1B2             >//              ______________________________________________________________________
  83++E1B2             >//              Dictionary part
  83++E1B2             >
  83++E1B2             >                org     Dict_Ptr
  83++23AE             >
  83++23AE B0 01       >                dw      mirror_Ptr - $E000 + Heap_offset
  83++23B0             >
  83++23B0             >F_FGETPOS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  83++23B0 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  83++23B0 ~           >
  83++23B0 ~           >
  83++23B0             >                endif           ; ok        // for other definitions it "points" the correct handler
  83++23B0             >                // Use of "; ok" to suppress "warning[fwdref]"
  83++23B0             >
  83++23B0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  84++23B0 E1                            pop     hl
  85++23B1 7D                            ld      a, l                // file-handle
  86++23B2 DD E5                         push    ix
  87++23B4 D5                            push    de
  88++23B5 C5                            push    bc
  89++23B6 CF                            rst     $08
  90++23B7 A0                            db      $A0
  91++23B8 D9                           exx
  92++23B9 C1                           pop     bc                  // IP
  93++23BA D1                           pop     de                  // Return Stack Pointer
  94++23BB DD E1                        pop     ix
  95++23BD D9                            exx
  96++23BE D5                            push    de
  97++23BF C5                            push    bc
  98++23C0 ED 62                         sbc     hl, hl
  99++23C2 E5                            push    hl
 100++23C3 D9                           exx
 101++23C4                              next
 101++23C4 DD E9       >                jp      (ix)
 102++23C6
 103++23C6              //  ______________________________________________________________________
 104++23C6              //
 105++23C6              // f_read       a b u -- n f
 106++23C6              // Read b bytes from file-handle u to address a
 107++23C6              // Return the actual number n of bytes read
 108++23C6              // Return 0 on success, True flag on error
 109++23C6                              New_Def F_READ, "F_READ", is_code, is_normal
 109++23C6             >
 109++23C6             >Dict_Ptr        defl    $
 109++23C6             >
 109++23C6             >//              ______________________________________________________________________
 109++23C6             >//              Heap part
 109++23C6             >
 109++23C6             >
 109++23C6             >                org     (Heap_Ptr & $1FFF) + $E000
 109++E1B2             >
 109++E1B2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 109++E1B2             >Latest_Definition defl  Heap_Ptr
 109++E1B2             >
 109++E1B2             >                // dummy db directives used to calculate length of namec
 109++E1B2 46 5F 52 45 >                db      "F_READ"
 109++E1B6 41 44       >
 109++E1B8             >len_NFA         defl    $ - temp_NFA
 109++E1B8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 109++E1B2             >
 109++E1B2 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 109++E1B3 46 5F 52 45 >                db      "F_READ"               // name string in 7-bit ascii, but
 109++E1B7 41 44       >
 109++E1B9             >                org     $-1                 // alter last byte of Name just above to set
 109++E1B8 C4          >                db      {b $} | END_BIT     // msb as name end
 109++E1B9             >
 109++E1B9 A4 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 109++E1BB             >Prev_Ptr        defl    Heap_Ptr
 109++E1BB             >
 109++E1BB             >mirror_Ptr      defl    $
 109++E1BB             >
 109++E1BB C8 23       >                dw      Dict_Ptr + 2        // xt
 109++E1BD             >Heap_Ptr        defl    $ - $E000           // save current HP
 109++E1BD             >
 109++E1BD             >Current_HP      defl  $ - $E000             // used to set HP once!
 109++E1BD             >
 109++E1BD             >//              ______________________________________________________________________
 109++E1BD             >//              Dictionary part
 109++E1BD             >
 109++E1BD             >                org     Dict_Ptr
 109++23C6             >
 109++23C6 BB 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 109++23C8             >
 109++23C8             >F_READ:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 109++23C8 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 109++23C8 ~           >
 109++23C8 ~           >
 109++23C8             >                endif           ; ok        // for other definitions it "points" the correct handler
 109++23C8             >                // Use of "; ok" to suppress "warning[fwdref]"
 109++23C8             >
 109++23C8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 110++23C8 D9                            exx
 111++23C9 E1                            pop     hl
 112++23CA 7D                            ld      a, l                // file-handle
 113++23CB C1                            pop     bc                  // bc has bytes to read
 114++23CC DD E3                         ex      (sp), ix            // ix has address
 115++23CE DD E5                         push    ix
 116++23D0 E1                            pop     hl
 117++23D1 D9                           exx
 118++23D2 D5                           push    de                  // Save Return Stack pointer
 119++23D3 C5                           push    bc                  // Save Instruction pointer
 120++23D4 D9                            exx
 121++23D5 CF                            rst     $08
 122++23D6 9D                            db      $9D
 123++23D7              F_Read_Exit:
 124++23D7 D9                           exx
 125++23D8 C1                           pop     bc                  // Restore Instruction pointer
 126++23D9 D1                           pop     de                  // Restore Return Stack pointer
 127++23DA DD E1                        pop     ix                  // Restore ix
 128++23DC D9                            exx
 129++23DD D5                            push    de                  // bytes involved in i/o operation
 130++23DE ED 62                         sbc     hl, hl
 131++23E0 E5                            push    hl
 132++23E1 D9                           exx
 133++23E2                              next
 133++23E2 DD E9       >                jp      (ix)
 134++23E4
 135++23E4              //  ______________________________________________________________________
 136++23E4              //
 137++23E4              // f_write      a b u -- n f
 138++23E4              // Write bytes currently stored at address a to file-handle u.
 139++23E4              // Return the actual n bytes written and 0 on success, True flag on error.
 140++23E4                              New_Def F_WRITE, "F_WRITE", is_code, is_normal
 140++23E4             >
 140++23E4             >Dict_Ptr        defl    $
 140++23E4             >
 140++23E4             >//              ______________________________________________________________________
 140++23E4             >//              Heap part
 140++23E4             >
 140++23E4             >
 140++23E4             >                org     (Heap_Ptr & $1FFF) + $E000
 140++E1BD             >
 140++E1BD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 140++E1BD             >Latest_Definition defl  Heap_Ptr
 140++E1BD             >
 140++E1BD             >                // dummy db directives used to calculate length of namec
 140++E1BD 46 5F 57 52 >                db      "F_WRITE"
 140++E1C1 49 54 45    >
 140++E1C4             >len_NFA         defl    $ - temp_NFA
 140++E1C4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 140++E1BD             >
 140++E1BD 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 140++E1BE 46 5F 57 52 >                db      "F_WRITE"               // name string in 7-bit ascii, but
 140++E1C2 49 54 45    >
 140++E1C5             >                org     $-1                 // alter last byte of Name just above to set
 140++E1C4 C5          >                db      {b $} | END_BIT     // msb as name end
 140++E1C5             >
 140++E1C5 B2 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 140++E1C7             >Prev_Ptr        defl    Heap_Ptr
 140++E1C7             >
 140++E1C7             >mirror_Ptr      defl    $
 140++E1C7             >
 140++E1C7 E6 23       >                dw      Dict_Ptr + 2        // xt
 140++E1C9             >Heap_Ptr        defl    $ - $E000           // save current HP
 140++E1C9             >
 140++E1C9             >Current_HP      defl  $ - $E000             // used to set HP once!
 140++E1C9             >
 140++E1C9             >//              ______________________________________________________________________
 140++E1C9             >//              Dictionary part
 140++E1C9             >
 140++E1C9             >                org     Dict_Ptr
 140++23E4             >
 140++23E4 C7 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 140++23E6             >
 140++23E6             >F_WRITE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 140++23E6 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 140++23E6 ~           >
 140++23E6 ~           >
 140++23E6             >                endif           ; ok        // for other definitions it "points" the correct handler
 140++23E6             >                // Use of "; ok" to suppress "warning[fwdref]"
 140++23E6             >
 140++23E6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 141++23E6 D9                            exx
 142++23E7 E1                            pop     hl
 143++23E8 7D                            ld      a, l                // file-handle
 144++23E9 C1                            pop     bc                  // bc has bytes to read
 145++23EA DD E3                         ex      (sp), ix            // ix has address
 146++23EC DD E5                         push    ix
 147++23EE E1                            pop     hl
 148++23EF D9                           exx
 149++23F0 D5                           push    de                  // Save Return Stack pointer
 150++23F1 C5                           push    bc                  // Save Instruction pointer
 151++23F2 D9                            exx
 152++23F3 CF                            rst     $08
 153++23F4 9E                            db      $9E
 154++23F5 18 E0                         jr F_Read_Exit
 155++23F7              //                exx
 156++23F7              //                pop     de                  // Restore Return Stack pointer
 157++23F7              //                pop     bc                  // Restore Instruction pointer
 158++23F7              //                pop     ix                  // Restore ix
 159++23F7              //                 exx
 160++23F7              //                 push    de                  // bytes involved in i/o operation
 161++23F7              //                 sbc     hl, hl
 162++23F7              //                 push    hl
 163++23F7              //                exx
 164++23F7              //                next
 165++23F7
 166++23F7              //  ______________________________________________________________________
 167++23F7              //
 168++23F7              // f_open       a1 a2 b -- u f
 169++23F7              // open a file
 170++23F7              // a1 (filespec) is a null-terminated string, such as produced by ," definition
 171++23F7              // a2 is address to an 8-byte header data used in some cases.
 172++23F7              // b is access mode-byte, that is a combination of:
 173++23F7              // any/all of:
 174++23F7              //   esx_mode_read          $01 request read access
 175++23F7              //   esx_mode_write         $02 request write access
 176++23F7              //   esx_mode_use_header    $40 read/write +3DOS header
 177++23F7              // plus one of:
 178++23F7              //   esx_mode_open_exist    $00 only open existing file
 179++23F7              //   esx_mode_open_creat    $08 open existing or create file
 180++23F7              //   esx_mode_creat_noexist $04 create new file, error if exists
 181++23F7              //   esx_mode_creat_trunc   $0c create new file, delete existing
 182++23F7              // Return file-handle u and 0 on success, True flag on error
 183++23F7                              New_Def F_OPEN, "F_OPEN", is_code, is_normal
 183++23F7             >
 183++23F7             >Dict_Ptr        defl    $
 183++23F7             >
 183++23F7             >//              ______________________________________________________________________
 183++23F7             >//              Heap part
 183++23F7             >
 183++23F7             >
 183++23F7             >                org     (Heap_Ptr & $1FFF) + $E000
 183++E1C9             >
 183++E1C9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 183++E1C9             >Latest_Definition defl  Heap_Ptr
 183++E1C9             >
 183++E1C9             >                // dummy db directives used to calculate length of namec
 183++E1C9 46 5F 4F 50 >                db      "F_OPEN"
 183++E1CD 45 4E       >
 183++E1CF             >len_NFA         defl    $ - temp_NFA
 183++E1CF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 183++E1C9             >
 183++E1C9 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 183++E1CA 46 5F 4F 50 >                db      "F_OPEN"               // name string in 7-bit ascii, but
 183++E1CE 45 4E       >
 183++E1D0             >                org     $-1                 // alter last byte of Name just above to set
 183++E1CF CE          >                db      {b $} | END_BIT     // msb as name end
 183++E1D0             >
 183++E1D0 BD 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 183++E1D2             >Prev_Ptr        defl    Heap_Ptr
 183++E1D2             >
 183++E1D2             >mirror_Ptr      defl    $
 183++E1D2             >
 183++E1D2 F9 23       >                dw      Dict_Ptr + 2        // xt
 183++E1D4             >Heap_Ptr        defl    $ - $E000           // save current HP
 183++E1D4             >
 183++E1D4             >Current_HP      defl  $ - $E000             // used to set HP once!
 183++E1D4             >
 183++E1D4             >//              ______________________________________________________________________
 183++E1D4             >//              Dictionary part
 183++E1D4             >
 183++E1D4             >                org     Dict_Ptr
 183++23F7             >
 183++23F7 D2 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 183++23F9             >
 183++23F9             >F_OPEN:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 183++23F9 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 183++23F9 ~           >
 183++23F9 ~           >
 183++23F9             >                endif           ; ok        // for other definitions it "points" the correct handler
 183++23F9             >                // Use of "; ok" to suppress "warning[fwdref]"
 183++23F9             >
 183++23F9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 184++23F9 D9                            exx
 185++23FA C1                            pop     bc                  // file-mode
 186++23FB 41                            ld      b, c                // file-mode
 187++23FC D1                            pop     de                  // 8-bytes buffer if any
 188++23FD DD E3                         ex      (sp), ix            // filespec nul-terminated
 189++23FF DD E5                         push    ix
 190++2401 E1                            pop     hl
 191++2402 D9                           exx
 192++2403 D5                           push    de                  // Save Return Stack pointer
 193++2404 C5                           push    bc                  // Save Instruction pointer
 194++2405 D9                            exx
 195++2406 3E 2A                         ld      a, "*"
 196++2408 CF                            rst     $08
 197++2409 9A                            db      $9A
 198++240A              F_Open_Exit:
 199++240A 5F                            ld      e, a                // return the handle-number
 200++240B 16 00                         ld      d, 0
 201++240D 18 C8                        jr F_Read_Exit
 202++240F
 203++240F              //   \ CREATE FILENAME ," test.txt"   \ new Counted String
 204++240F              //   \ FILENAME 1+ PAD 1 F_OPEN
 205++240F              //   \ DROP
 206++240F              //   \ F_CLOSE
 207++240F
 208++240F
 209++240F              //  ______________________________________________________________________
 210++240F              //
 211++240F              // f_opendir    a1 -- u f
 212++240F              // open a file
 213++240F                              New_Def F_OPENDIR, "F_OPENDIR", is_code, is_normal
 213++240F             >
 213++240F             >Dict_Ptr        defl    $
 213++240F             >
 213++240F             >//              ______________________________________________________________________
 213++240F             >//              Heap part
 213++240F             >
 213++240F             >
 213++240F             >                org     (Heap_Ptr & $1FFF) + $E000
 213++E1D4             >
 213++E1D4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 213++E1D4             >Latest_Definition defl  Heap_Ptr
 213++E1D4             >
 213++E1D4             >                // dummy db directives used to calculate length of namec
 213++E1D4 46 5F 4F 50 >                db      "F_OPENDIR"
 213++E1D8 45 4E 44 49 >
 213++E1DC 52          >
 213++E1DD             >len_NFA         defl    $ - temp_NFA
 213++E1DD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 213++E1D4             >
 213++E1D4 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 213++E1D5 46 5F 4F 50 >                db      "F_OPENDIR"               // name string in 7-bit ascii, but
 213++E1D9 45 4E 44 49 >
 213++E1DD 52          >
 213++E1DE             >                org     $-1                 // alter last byte of Name just above to set
 213++E1DD D2          >                db      {b $} | END_BIT     // msb as name end
 213++E1DE             >
 213++E1DE C9 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 213++E1E0             >Prev_Ptr        defl    Heap_Ptr
 213++E1E0             >
 213++E1E0             >mirror_Ptr      defl    $
 213++E1E0             >
 213++E1E0 11 24       >                dw      Dict_Ptr + 2        // xt
 213++E1E2             >Heap_Ptr        defl    $ - $E000           // save current HP
 213++E1E2             >
 213++E1E2             >Current_HP      defl  $ - $E000             // used to set HP once!
 213++E1E2             >
 213++E1E2             >//              ______________________________________________________________________
 213++E1E2             >//              Dictionary part
 213++E1E2             >
 213++E1E2             >                org     Dict_Ptr
 213++240F             >
 213++240F E0 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 213++2411             >
 213++2411             >F_OPENDIR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 213++2411 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 213++2411 ~           >
 213++2411 ~           >
 213++2411             >                endif           ; ok        // for other definitions it "points" the correct handler
 213++2411             >                // Use of "; ok" to suppress "warning[fwdref]"
 213++2411             >
 213++2411             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 214++2411 DD E3                        ex      (sp), ix            // filespec nul-terminated
 215++2413 DD E5                        push    ix
 216++2415 E1                           pop     hl
 217++2416 D5                           push    de                  // Save Return Stack pointer
 218++2417 C5                           push    bc                  // Save Instruction pointer
 219++2418 06 10                        ld      b, $10              // file-mode
 220++241A 3E 43                        ld      a, "C"
 221++241C CF                           rst     $08
 222++241D A3                           db      $A3
 223++241E 18 EA                        jr      F_Open_Exit
 224++2420
 225++2420
 226++2420              //  ______________________________________________________________________
 227++2420              //
 228++2420              // f_readdir    a1 a2 b -- u f
 229++2420              // open a file
 230++2420                              New_Def F_READDIR, "F_READDIR", is_code, is_normal
 230++2420             >
 230++2420             >Dict_Ptr        defl    $
 230++2420             >
 230++2420             >//              ______________________________________________________________________
 230++2420             >//              Heap part
 230++2420             >
 230++2420             >
 230++2420             >                org     (Heap_Ptr & $1FFF) + $E000
 230++E1E2             >
 230++E1E2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 230++E1E2             >Latest_Definition defl  Heap_Ptr
 230++E1E2             >
 230++E1E2             >                // dummy db directives used to calculate length of namec
 230++E1E2 46 5F 52 45 >                db      "F_READDIR"
 230++E1E6 41 44 44 49 >
 230++E1EA 52          >
 230++E1EB             >len_NFA         defl    $ - temp_NFA
 230++E1EB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 230++E1E2             >
 230++E1E2 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 230++E1E3 46 5F 52 45 >                db      "F_READDIR"               // name string in 7-bit ascii, but
 230++E1E7 41 44 44 49 >
 230++E1EB 52          >
 230++E1EC             >                org     $-1                 // alter last byte of Name just above to set
 230++E1EB D2          >                db      {b $} | END_BIT     // msb as name end
 230++E1EC             >
 230++E1EC D4 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 230++E1EE             >Prev_Ptr        defl    Heap_Ptr
 230++E1EE             >
 230++E1EE             >mirror_Ptr      defl    $
 230++E1EE             >
 230++E1EE 22 24       >                dw      Dict_Ptr + 2        // xt
 230++E1F0             >Heap_Ptr        defl    $ - $E000           // save current HP
 230++E1F0             >
 230++E1F0             >Current_HP      defl  $ - $E000             // used to set HP once!
 230++E1F0             >
 230++E1F0             >//              ______________________________________________________________________
 230++E1F0             >//              Dictionary part
 230++E1F0             >
 230++E1F0             >                org     Dict_Ptr
 230++2420             >
 230++2420 EE 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 230++2422             >
 230++2422             >F_READDIR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 230++2422 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 230++2422 ~           >
 230++2422 ~           >
 230++2422             >                endif           ; ok        // for other definitions it "points" the correct handler
 230++2422             >                // Use of "; ok" to suppress "warning[fwdref]"
 230++2422             >
 230++2422             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 231++2422 D9                            exx
 232++2423 E1                            pop     hl
 233++2424 7D                            ld      a, l
 234++2425 D1                            pop     de
 235++2426 DD E3                         ex      (sp), ix            // filespec nul-terminated
 236++2428 DD E5                         push    ix
 237++242A E1                            pop     hl
 238++242B D9                           exx
 239++242C D5                           push    de                  // Save Return Stack pointer
 240++242D C5                           push    bc                  // Save Instruction pointer
 241++242E D9                            exx
 242++242F CF                            rst     $08
 243++2430 A4                            db      $A4
 244++2431 18 D7                         jr      F_Open_Exit
 245++2433
# file closed: C:\Zx\CSpect\Projects\vForth17_DOT/source/next-opt0.asm
1090+ 2433
1091+ 2433
1092+ 2433              //  ______________________________________________________________________
1093+ 2433              //
1094+ 2433              // cmove    a1 a2 u --
1095+ 2433              // If u > 0, moves memory content starting at address a1 for n bytes long
1096+ 2433              // storing then starting at address addr2.
1097+ 2433              // The content of a1 is moved first. See CMOVE> also.
1098+ 2433                              New_Def CMOVE, "CMOVE", is_code, is_normal
1098+ 2433             >
1098+ 2433             >Dict_Ptr        defl    $
1098+ 2433             >
1098+ 2433             >//              ______________________________________________________________________
1098+ 2433             >//              Heap part
1098+ 2433             >
1098+ 2433             >
1098+ 2433             >                org     (Heap_Ptr & $1FFF) + $E000
1098+ E1F0             >
1098+ E1F0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1098+ E1F0             >Latest_Definition defl  Heap_Ptr
1098+ E1F0             >
1098+ E1F0             >                // dummy db directives used to calculate length of namec
1098+ E1F0 43 4D 4F 56 >                db      "CMOVE"
1098+ E1F4 45          >
1098+ E1F5             >len_NFA         defl    $ - temp_NFA
1098+ E1F5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1098+ E1F0             >
1098+ E1F0 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1098+ E1F1 43 4D 4F 56 >                db      "CMOVE"               // name string in 7-bit ascii, but
1098+ E1F5 45          >
1098+ E1F6             >                org     $-1                 // alter last byte of Name just above to set
1098+ E1F5 C5          >                db      {b $} | END_BIT     // msb as name end
1098+ E1F6             >
1098+ E1F6 E2 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1098+ E1F8             >Prev_Ptr        defl    Heap_Ptr
1098+ E1F8             >
1098+ E1F8             >mirror_Ptr      defl    $
1098+ E1F8             >
1098+ E1F8 35 24       >                dw      Dict_Ptr + 2        // xt
1098+ E1FA             >Heap_Ptr        defl    $ - $E000           // save current HP
1098+ E1FA             >
1098+ E1FA             >Current_HP      defl  $ - $E000             // used to set HP once!
1098+ E1FA             >
1098+ E1FA             >//              ______________________________________________________________________
1098+ E1FA             >//              Dictionary part
1098+ E1FA             >
1098+ E1FA             >                org     Dict_Ptr
1098+ 2433             >
1098+ 2433 F8 01       >                dw      mirror_Ptr - $E000 + Heap_offset
1098+ 2435             >
1098+ 2435             >CMOVE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1098+ 2435 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1098+ 2435 ~           >
1098+ 2435 ~           >
1098+ 2435             >                endif           ; ok        // for other definitions it "points" the correct handler
1098+ 2435             >                // Use of "; ok" to suppress "warning[fwdref]"
1098+ 2435             >
1098+ 2435             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1099+ 2435 D9                           exx
1100+ 2436
1101+ 2436 C1                           pop     bc                  // bc has counter
1102+ 2437 D1                           pop     de                  // de now has dest
1103+ 2438 E1                           pop     hl                 // hl has source, save Instruction Pointer
1104+ 2439 78                           ld      a, b
1105+ 243A B1                           or      c
1106+ 243B 28 02                        jr      z, Cmove_NoMove
1107+ 243D ED B0                            ldir
1108+ 243F              Cmove_NoMove:
1109+ 243F D9                           exx
1110+ 2440
1111+ 2440                              next
1111+ 2440 DD E9       >                jp      (ix)
1112+ 2442
1113+ 2442              //  ______________________________________________________________________
1114+ 2442              //
1115+ 2442              // cmove>    a1 a2 u --
1116+ 2442              // If u > 0, moves memory content starting at address a1 for n bytes long
1117+ 2442              // storing then starting at address addr2.
1118+ 2442              // The content of a1 is moved last. See cmove.
1119+ 2442                              New_Def CMOVE_TO, "CMOVE>", is_code, is_normal
1119+ 2442             >
1119+ 2442             >Dict_Ptr        defl    $
1119+ 2442             >
1119+ 2442             >//              ______________________________________________________________________
1119+ 2442             >//              Heap part
1119+ 2442             >
1119+ 2442             >
1119+ 2442             >                org     (Heap_Ptr & $1FFF) + $E000
1119+ E1FA             >
1119+ E1FA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1119+ E1FA             >Latest_Definition defl  Heap_Ptr
1119+ E1FA             >
1119+ E1FA             >                // dummy db directives used to calculate length of namec
1119+ E1FA 43 4D 4F 56 >                db      "CMOVE>"
1119+ E1FE 45 3E       >
1119+ E200             >len_NFA         defl    $ - temp_NFA
1119+ E200             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1119+ E1FA             >
1119+ E1FA 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1119+ E1FB 43 4D 4F 56 >                db      "CMOVE>"               // name string in 7-bit ascii, but
1119+ E1FF 45 3E       >
1119+ E201             >                org     $-1                 // alter last byte of Name just above to set
1119+ E200 BE          >                db      {b $} | END_BIT     // msb as name end
1119+ E201             >
1119+ E201 F0 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1119+ E203             >Prev_Ptr        defl    Heap_Ptr
1119+ E203             >
1119+ E203             >mirror_Ptr      defl    $
1119+ E203             >
1119+ E203 44 24       >                dw      Dict_Ptr + 2        // xt
1119+ E205             >Heap_Ptr        defl    $ - $E000           // save current HP
1119+ E205             >
1119+ E205             >Current_HP      defl  $ - $E000             // used to set HP once!
1119+ E205             >
1119+ E205             >//              ______________________________________________________________________
1119+ E205             >//              Dictionary part
1119+ E205             >
1119+ E205             >                org     Dict_Ptr
1119+ 2442             >
1119+ 2442 03 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1119+ 2444             >
1119+ 2444             >CMOVE_TO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1119+ 2444 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1119+ 2444 ~           >
1119+ 2444 ~           >
1119+ 2444             >                endif           ; ok        // for other definitions it "points" the correct handler
1119+ 2444             >                // Use of "; ok" to suppress "warning[fwdref]"
1119+ 2444             >
1119+ 2444             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1120+ 2444 D9                           exx
1121+ 2445
1122+ 2445 C1                           pop     bc                  // bc has counter
1123+ 2446 D1                           pop     de                  // de has dest
1124+ 2447 E1                           pop     hl                  // hl has source, save Instruction Pointer
1125+ 2448 78                           ld      a, b
1126+ 2449 B1                           or      c
1127+ 244A 28 08                        jr      z, CmoveV_NoMove
1128+ 244C EB                               ex      de, hl              // compute address to
1129+ 244D 09                               add     hl, bc              // operate backward
1130+ 244E 2B                               dec     hl
1131+ 244F EB                               ex      de, hl
1132+ 2450 09                               add     hl, bc
1133+ 2451 2B                               dec     hl
1134+ 2452 ED B8                            lddr                        // backward
1135+ 2454              CmoveV_NoMove:
1136+ 2454 D9                           exx
1137+ 2455
1138+ 2455                              next
1138+ 2455 DD E9       >                jp      (ix)
1139+ 2457
1140+ 2457              //  ______________________________________________________________________
1141+ 2457              //
1142+ 2457              // um*      u1 u2 -- ud
1143+ 2457              // Unsigned multiplication
1144+ 2457              // A double-integer is kept in CPU registers as DEHL then pushed on stack.
1145+ 2457              // On the stack a double number is treated as two single numbers
1146+ 2457              // where DE is on the top of the stack and HL is the second from top,
1147+ 2457              // Instead, in 2VARIABLE a double number is stored as EDLH.
1148+ 2457              // this definition could use "MUL" Z80N new op-code.
1149+ 2457                              New_Def UM_MUL, "UM*", is_code, is_normal
1149+ 2457             >
1149+ 2457             >Dict_Ptr        defl    $
1149+ 2457             >
1149+ 2457             >//              ______________________________________________________________________
1149+ 2457             >//              Heap part
1149+ 2457             >
1149+ 2457             >
1149+ 2457             >                org     (Heap_Ptr & $1FFF) + $E000
1149+ E205             >
1149+ E205             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1149+ E205             >Latest_Definition defl  Heap_Ptr
1149+ E205             >
1149+ E205             >                // dummy db directives used to calculate length of namec
1149+ E205 55 4D 2A    >                db      "UM*"
1149+ E208             >len_NFA         defl    $ - temp_NFA
1149+ E208             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1149+ E205             >
1149+ E205 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1149+ E206 55 4D 2A    >                db      "UM*"               // name string in 7-bit ascii, but
1149+ E209             >                org     $-1                 // alter last byte of Name just above to set
1149+ E208 AA          >                db      {b $} | END_BIT     // msb as name end
1149+ E209             >
1149+ E209 FA 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1149+ E20B             >Prev_Ptr        defl    Heap_Ptr
1149+ E20B             >
1149+ E20B             >mirror_Ptr      defl    $
1149+ E20B             >
1149+ E20B 59 24       >                dw      Dict_Ptr + 2        // xt
1149+ E20D             >Heap_Ptr        defl    $ - $E000           // save current HP
1149+ E20D             >
1149+ E20D             >Current_HP      defl  $ - $E000             // used to set HP once!
1149+ E20D             >
1149+ E20D             >//              ______________________________________________________________________
1149+ E20D             >//              Dictionary part
1149+ E20D             >
1149+ E20D             >                org     Dict_Ptr
1149+ 2457             >
1149+ 2457 0B 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1149+ 2459             >
1149+ 2459             >UM_MUL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1149+ 2459 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1149+ 2459 ~           >
1149+ 2459 ~           >
1149+ 2459             >                endif           ; ok        // for other definitions it "points" the correct handler
1149+ 2459             >                // Use of "; ok" to suppress "warning[fwdref]"
1149+ 2459             >
1149+ 2459             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1150+ 2459 D9                           exx
1151+ 245A D1                           pop     de                    // de has u2 operand
1152+ 245B E1                           pop     hl                    // hl has u1 operand
1153+ 245C 45                           ld      b, l
1154+ 245D 4B                           ld      c, e
1155+ 245E 5D                           ld      e, l
1156+ 245F 6A                           ld      l, d
1157+ 2460 E5                           push    hl
1158+ 2461 69                           ld      l, c
1159+ 2462 ED 30                        mul
1160+ 2464 EB                           ex      de, hl
1161+ 2465 ED 30                        mul
1162+ 2467 AF                           xor     a
1163+ 2468 19                           add     hl, de
1164+ 2469 8F                           adc     a
1165+ 246A 59                           ld      e, c
1166+ 246B 50                           ld      d, b
1167+ 246C ED 30                        mul
1168+ 246E 47                           ld      b, a
1169+ 246F 4C                           ld      c, h
1170+ 2470 7A                           ld      a, d
1171+ 2471 85                           add     l
1172+ 2472 67                           ld      h, a
1173+ 2473 6B                           ld      l, e
1174+ 2474 D1                           pop     de
1175+ 2475 ED 30                        mul
1176+ 2477 EB                           ex      de, hl
1177+ 2478 ED 4A                        adc     hl, bc
1178+ 247A D5                           push    de
1179+ 247B E5                           push    hl
1180+ 247C D9                           exx
1181+ 247D                              next
1181+ 247D DD E9       >                jp      (ix)
1182+ 247F
1183+ 247F              //  ______________________________________________________________________
1184+ 247F              //
1185+ 247F              // um/mod      ud u1 -- q r
1186+ 247F              // divides ud into u1 giving quotient q and remainder r
1187+ 247F              // algorithm takes 16 bit at a time starting from msb
1188+ 247F              // DE grows from lsb upward with quotient result
1189+ 247F              // HL keeps the remainder at each stage of division
1190+ 247F              // each loop 'lowers' the next binary digit to form the current dividend
1191+ 247F                              New_Def UMDIVMOD, "UM/MOD", is_code, is_normal
1191+ 247F             >
1191+ 247F             >Dict_Ptr        defl    $
1191+ 247F             >
1191+ 247F             >//              ______________________________________________________________________
1191+ 247F             >//              Heap part
1191+ 247F             >
1191+ 247F             >
1191+ 247F             >                org     (Heap_Ptr & $1FFF) + $E000
1191+ E20D             >
1191+ E20D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1191+ E20D             >Latest_Definition defl  Heap_Ptr
1191+ E20D             >
1191+ E20D             >                // dummy db directives used to calculate length of namec
1191+ E20D 55 4D 2F 4D >                db      "UM/MOD"
1191+ E211 4F 44       >
1191+ E213             >len_NFA         defl    $ - temp_NFA
1191+ E213             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1191+ E20D             >
1191+ E20D 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1191+ E20E 55 4D 2F 4D >                db      "UM/MOD"               // name string in 7-bit ascii, but
1191+ E212 4F 44       >
1191+ E214             >                org     $-1                 // alter last byte of Name just above to set
1191+ E213 C4          >                db      {b $} | END_BIT     // msb as name end
1191+ E214             >
1191+ E214 05 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1191+ E216             >Prev_Ptr        defl    Heap_Ptr
1191+ E216             >
1191+ E216             >mirror_Ptr      defl    $
1191+ E216             >
1191+ E216 81 24       >                dw      Dict_Ptr + 2        // xt
1191+ E218             >Heap_Ptr        defl    $ - $E000           // save current HP
1191+ E218             >
1191+ E218             >Current_HP      defl  $ - $E000             // used to set HP once!
1191+ E218             >
1191+ E218             >//              ______________________________________________________________________
1191+ E218             >//              Dictionary part
1191+ E218             >
1191+ E218             >                org     Dict_Ptr
1191+ 247F             >
1191+ 247F 16 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1191+ 2481             >
1191+ 2481             >UMDIVMOD:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1191+ 2481 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1191+ 2481 ~           >
1191+ 2481 ~           >
1191+ 2481             >                endif           ; ok        // for other definitions it "points" the correct handler
1191+ 2481             >                // Use of "; ok" to suppress "warning[fwdref]"
1191+ 2481             >
1191+ 2481             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1192+ 2481 D9                           exx
1193+ 2482 C1                           pop     bc                      // divisor
1194+ 2483
1195+ 2483 E1                           pop     hl                      // < high part
1196+ 2484 D1                           pop     de                      // < low part and
1197+ 2485
1198+ 2485 7D                           ld      a, l                    // check without changing arguments
1199+ 2486 91                           sub     c                       // if divisor is greater than high part
1200+ 2487 7C                           ld      a, h                    // so quotient will be in range
1201+ 2488 98                           sbc     a, b
1202+ 2489 30 20                        jr      nc, Um_DivMod_OutOfRange
1203+ 248B 3E 10                            ld      a, 16
1204+ 248D              Um_DivMod_Loop:
1205+ 248D CB 23                                sla     e
1206+ 248F CB 12                                rl      d
1207+ 2491 ED 6A                                adc     hl, hl
1208+ 2493 30 05                                jr      nc, Um_DivMod_Carry
1209+ 2495 A7                                       and     a
1210+ 2496 ED 42                                    sbc     hl, bc
1211+ 2498 18 07                                jr      Um_DivMod_Endif    // else
1212+ 249A              Um_DivMod_Carry:
1213+ 249A A7                                       and     a
1214+ 249B ED 42                                    sbc     hl, bc
1215+ 249D 30 02                                    jr      nc, Um_DivMod_Endif
1216+ 249F 09                                           add     hl, bc
1217+ 24A0 1B                                           dec     de
1218+ 24A1              Um_DivMod_Endif:                                   // endif
1219+ 24A1 13                                   inc     de
1220+ 24A2 3D                                   dec     a
1221+ 24A3 20 E8                            jr      nz, Um_DivMod_Loop
1222+ 24A5 EB                               ex      de, hl
1223+ 24A6              Um_DivMod_Bailout:
1224+ 24A6 D5                               push    de                  // de := remanider
1225+ 24A7 E5                               push    hl                  // hl := quotient
1226+ 24A8 D9                               exx
1227+ 24A9                                  next
1227+ 24A9 DD E9       >                jp      (ix)
1228+ 24AB
1229+ 24AB              Um_DivMod_OutOfRange:
1230+ 24AB 21 FF FF                     ld      hl, -1
1231+ 24AE 54                           ld      d, h
1232+ 24AF 5D                           ld      e, l
1233+ 24B0 18 F4                        jr      Um_DivMod_Bailout
1234+ 24B2
1235+ 24B2              //  ______________________________________________________________________
1236+ 24B2              //
1237+ 24B2              // and          n1 n2 -- n3
1238+ 24B2              // bit logical AND. Returns n3 as n1 & n2
1239+ 24B2                              New_Def AND_OP, "AND", is_code, is_normal
1239+ 24B2             >
1239+ 24B2             >Dict_Ptr        defl    $
1239+ 24B2             >
1239+ 24B2             >//              ______________________________________________________________________
1239+ 24B2             >//              Heap part
1239+ 24B2             >
1239+ 24B2             >
1239+ 24B2             >                org     (Heap_Ptr & $1FFF) + $E000
1239+ E218             >
1239+ E218             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1239+ E218             >Latest_Definition defl  Heap_Ptr
1239+ E218             >
1239+ E218             >                // dummy db directives used to calculate length of namec
1239+ E218 41 4E 44    >                db      "AND"
1239+ E21B             >len_NFA         defl    $ - temp_NFA
1239+ E21B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1239+ E218             >
1239+ E218 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1239+ E219 41 4E 44    >                db      "AND"               // name string in 7-bit ascii, but
1239+ E21C             >                org     $-1                 // alter last byte of Name just above to set
1239+ E21B C4          >                db      {b $} | END_BIT     // msb as name end
1239+ E21C             >
1239+ E21C 0D 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1239+ E21E             >Prev_Ptr        defl    Heap_Ptr
1239+ E21E             >
1239+ E21E             >mirror_Ptr      defl    $
1239+ E21E             >
1239+ E21E B4 24       >                dw      Dict_Ptr + 2        // xt
1239+ E220             >Heap_Ptr        defl    $ - $E000           // save current HP
1239+ E220             >
1239+ E220             >Current_HP      defl  $ - $E000             // used to set HP once!
1239+ E220             >
1239+ E220             >//              ______________________________________________________________________
1239+ E220             >//              Dictionary part
1239+ E220             >
1239+ E220             >                org     Dict_Ptr
1239+ 24B2             >
1239+ 24B2 1E 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1239+ 24B4             >
1239+ 24B4             >AND_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1239+ 24B4 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1239+ 24B4 ~           >
1239+ 24B4 ~           >
1239+ 24B4             >                endif           ; ok        // for other definitions it "points" the correct handler
1239+ 24B4             >                // Use of "; ok" to suppress "warning[fwdref]"
1239+ 24B4             >
1239+ 24B4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1240+ 24B4 D9                           exx
1241+ 24B5 D1                           pop     de
1242+ 24B6 E1                           pop     hl
1243+ 24B7 7B                           ld      a, e
1244+ 24B8 A5                           and     l
1245+ 24B9 6F                           ld      l, a
1246+ 24BA 7A                           ld      a, d
1247+ 24BB A4                           and     h
1248+ 24BC              Boolean_exit:
1249+ 24BC 67                           ld      h, a
1250+ 24BD E5                           push    hl
1251+ 24BE D9                           exx
1252+ 24BF                              next
1252+ 24BF DD E9       >                jp      (ix)
1253+ 24C1
1254+ 24C1              //  ______________________________________________________________________
1255+ 24C1              //
1256+ 24C1              // or           n1 n2 -- n3
1257+ 24C1              // bit logical OR. Returns n3 as n1 | n2
1258+ 24C1                              New_Def OR_OP, "OR", is_code, is_normal
1258+ 24C1             >
1258+ 24C1             >Dict_Ptr        defl    $
1258+ 24C1             >
1258+ 24C1             >//              ______________________________________________________________________
1258+ 24C1             >//              Heap part
1258+ 24C1             >
1258+ 24C1             >
1258+ 24C1             >                org     (Heap_Ptr & $1FFF) + $E000
1258+ E220             >
1258+ E220             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1258+ E220             >Latest_Definition defl  Heap_Ptr
1258+ E220             >
1258+ E220             >                // dummy db directives used to calculate length of namec
1258+ E220 4F 52       >                db      "OR"
1258+ E222             >len_NFA         defl    $ - temp_NFA
1258+ E222             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1258+ E220             >
1258+ E220 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1258+ E221 4F 52       >                db      "OR"               // name string in 7-bit ascii, but
1258+ E223             >                org     $-1                 // alter last byte of Name just above to set
1258+ E222 D2          >                db      {b $} | END_BIT     // msb as name end
1258+ E223             >
1258+ E223 18 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1258+ E225             >Prev_Ptr        defl    Heap_Ptr
1258+ E225             >
1258+ E225             >mirror_Ptr      defl    $
1258+ E225             >
1258+ E225 C3 24       >                dw      Dict_Ptr + 2        // xt
1258+ E227             >Heap_Ptr        defl    $ - $E000           // save current HP
1258+ E227             >
1258+ E227             >Current_HP      defl  $ - $E000             // used to set HP once!
1258+ E227             >
1258+ E227             >//              ______________________________________________________________________
1258+ E227             >//              Dictionary part
1258+ E227             >
1258+ E227             >                org     Dict_Ptr
1258+ 24C1             >
1258+ 24C1 25 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1258+ 24C3             >
1258+ 24C3             >OR_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1258+ 24C3 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1258+ 24C3 ~           >
1258+ 24C3 ~           >
1258+ 24C3             >                endif           ; ok        // for other definitions it "points" the correct handler
1258+ 24C3             >                // Use of "; ok" to suppress "warning[fwdref]"
1258+ 24C3             >
1258+ 24C3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1259+ 24C3 D9                           exx
1260+ 24C4 D1                           pop     de
1261+ 24C5 E1                           pop     hl
1262+ 24C6 7B                           ld      a, e
1263+ 24C7 B5                           or      l
1264+ 24C8 6F                           ld      l, a
1265+ 24C9 7A                           ld      a, d
1266+ 24CA B4                           or      h
1267+ 24CB 18 EF                        jr      Boolean_exit
1268+ 24CD                        //    ld      h, a
1269+ 24CD                        //    push    hl
1270+ 24CD                        //    exx
1271+ 24CD                        //    next
1272+ 24CD
1273+ 24CD              //  ______________________________________________________________________
1274+ 24CD              //
1275+ 24CD              // xor          n1 n2 -- n3
1276+ 24CD              // bit logical OR. Returns n3 as n1 ^ n2
1277+ 24CD                              New_Def XOR_OP, "XOR", is_code, is_normal
1277+ 24CD             >
1277+ 24CD             >Dict_Ptr        defl    $
1277+ 24CD             >
1277+ 24CD             >//              ______________________________________________________________________
1277+ 24CD             >//              Heap part
1277+ 24CD             >
1277+ 24CD             >
1277+ 24CD             >                org     (Heap_Ptr & $1FFF) + $E000
1277+ E227             >
1277+ E227             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1277+ E227             >Latest_Definition defl  Heap_Ptr
1277+ E227             >
1277+ E227             >                // dummy db directives used to calculate length of namec
1277+ E227 58 4F 52    >                db      "XOR"
1277+ E22A             >len_NFA         defl    $ - temp_NFA
1277+ E22A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1277+ E227             >
1277+ E227 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1277+ E228 58 4F 52    >                db      "XOR"               // name string in 7-bit ascii, but
1277+ E22B             >                org     $-1                 // alter last byte of Name just above to set
1277+ E22A D2          >                db      {b $} | END_BIT     // msb as name end
1277+ E22B             >
1277+ E22B 20 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1277+ E22D             >Prev_Ptr        defl    Heap_Ptr
1277+ E22D             >
1277+ E22D             >mirror_Ptr      defl    $
1277+ E22D             >
1277+ E22D CF 24       >                dw      Dict_Ptr + 2        // xt
1277+ E22F             >Heap_Ptr        defl    $ - $E000           // save current HP
1277+ E22F             >
1277+ E22F             >Current_HP      defl  $ - $E000             // used to set HP once!
1277+ E22F             >
1277+ E22F             >//              ______________________________________________________________________
1277+ E22F             >//              Dictionary part
1277+ E22F             >
1277+ E22F             >                org     Dict_Ptr
1277+ 24CD             >
1277+ 24CD 2D 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1277+ 24CF             >
1277+ 24CF             >XOR_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1277+ 24CF ~           >                call    runcode ; ok        // for primitive definitions  actual code
1277+ 24CF ~           >
1277+ 24CF ~           >
1277+ 24CF             >                endif           ; ok        // for other definitions it "points" the correct handler
1277+ 24CF             >                // Use of "; ok" to suppress "warning[fwdref]"
1277+ 24CF             >
1277+ 24CF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1278+ 24CF D9                           exx
1279+ 24D0 D1                           pop     de
1280+ 24D1 E1                           pop     hl
1281+ 24D2 7B                           ld      a, e
1282+ 24D3 AD                           xor     l
1283+ 24D4 6F                           ld      l, a
1284+ 24D5 7A                           ld      a, d
1285+ 24D6 AC                           xor     h
1286+ 24D7 18 E3                        jr      Boolean_exit
1287+ 24D9                        //    ld      h, a
1288+ 24D9                        //    push    hl
1289+ 24D9                        //    exx
1290+ 24D9                        //    next
1291+ 24D9
1292+ 24D9              //  ______________________________________________________________________
1293+ 24D9              //
1294+ 24D9              // sp@      -- a
1295+ 24D9              // returns on top of stack the value of SP before execution
1296+ 24D9                              New_Def SPFETCH, "SP@", is_code, is_normal
1296+ 24D9             >
1296+ 24D9             >Dict_Ptr        defl    $
1296+ 24D9             >
1296+ 24D9             >//              ______________________________________________________________________
1296+ 24D9             >//              Heap part
1296+ 24D9             >
1296+ 24D9             >
1296+ 24D9             >                org     (Heap_Ptr & $1FFF) + $E000
1296+ E22F             >
1296+ E22F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1296+ E22F             >Latest_Definition defl  Heap_Ptr
1296+ E22F             >
1296+ E22F             >                // dummy db directives used to calculate length of namec
1296+ E22F 53 50 40    >                db      "SP@"
1296+ E232             >len_NFA         defl    $ - temp_NFA
1296+ E232             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1296+ E22F             >
1296+ E22F 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1296+ E230 53 50 40    >                db      "SP@"               // name string in 7-bit ascii, but
1296+ E233             >                org     $-1                 // alter last byte of Name just above to set
1296+ E232 C0          >                db      {b $} | END_BIT     // msb as name end
1296+ E233             >
1296+ E233 27 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1296+ E235             >Prev_Ptr        defl    Heap_Ptr
1296+ E235             >
1296+ E235             >mirror_Ptr      defl    $
1296+ E235             >
1296+ E235 DB 24       >                dw      Dict_Ptr + 2        // xt
1296+ E237             >Heap_Ptr        defl    $ - $E000           // save current HP
1296+ E237             >
1296+ E237             >Current_HP      defl  $ - $E000             // used to set HP once!
1296+ E237             >
1296+ E237             >//              ______________________________________________________________________
1296+ E237             >//              Dictionary part
1296+ E237             >
1296+ E237             >                org     Dict_Ptr
1296+ 24D9             >
1296+ 24D9 35 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1296+ 24DB             >
1296+ 24DB             >SPFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1296+ 24DB ~           >                call    runcode ; ok        // for primitive definitions  actual code
1296+ 24DB ~           >
1296+ 24DB ~           >
1296+ 24DB             >                endif           ; ok        // for other definitions it "points" the correct handler
1296+ 24DB             >                // Use of "; ok" to suppress "warning[fwdref]"
1296+ 24DB             >
1296+ 24DB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1297+ 24DB
1298+ 24DB 21 00 00                     ld      hl, 0
1299+ 24DE 39                           add     hl, sp
1300+ 24DF
1301+ 24DF                              psh1
1301+ 24DF E5          >                push    hl
1301+ 24E0 DD E9       >                jp      (ix)
1302+ 24E2
1303+ 24E2              //  ______________________________________________________________________
1304+ 24E2              //
1305+ 24E2              // sp!      a --
1306+ 24E2              // restore SP to the initial value passed
1307+ 24E2              // normally it is S0, i.e. the word at offset 6 and 7 of user variabiles area.
1308+ 24E2                              New_Def SPSTORE, "SP!", is_code, is_normal
1308+ 24E2             >
1308+ 24E2             >Dict_Ptr        defl    $
1308+ 24E2             >
1308+ 24E2             >//              ______________________________________________________________________
1308+ 24E2             >//              Heap part
1308+ 24E2             >
1308+ 24E2             >
1308+ 24E2             >                org     (Heap_Ptr & $1FFF) + $E000
1308+ E237             >
1308+ E237             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1308+ E237             >Latest_Definition defl  Heap_Ptr
1308+ E237             >
1308+ E237             >                // dummy db directives used to calculate length of namec
1308+ E237 53 50 21    >                db      "SP!"
1308+ E23A             >len_NFA         defl    $ - temp_NFA
1308+ E23A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1308+ E237             >
1308+ E237 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1308+ E238 53 50 21    >                db      "SP!"               // name string in 7-bit ascii, but
1308+ E23B             >                org     $-1                 // alter last byte of Name just above to set
1308+ E23A A1          >                db      {b $} | END_BIT     // msb as name end
1308+ E23B             >
1308+ E23B 2F 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1308+ E23D             >Prev_Ptr        defl    Heap_Ptr
1308+ E23D             >
1308+ E23D             >mirror_Ptr      defl    $
1308+ E23D             >
1308+ E23D E4 24       >                dw      Dict_Ptr + 2        // xt
1308+ E23F             >Heap_Ptr        defl    $ - $E000           // save current HP
1308+ E23F             >
1308+ E23F             >Current_HP      defl  $ - $E000             // used to set HP once!
1308+ E23F             >
1308+ E23F             >//              ______________________________________________________________________
1308+ E23F             >//              Dictionary part
1308+ E23F             >
1308+ E23F             >                org     Dict_Ptr
1308+ 24E2             >
1308+ 24E2 3D 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1308+ 24E4             >
1308+ 24E4             >SPSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1308+ 24E4 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1308+ 24E4 ~           >
1308+ 24E4 ~           >
1308+ 24E4             >                endif           ; ok        // for other definitions it "points" the correct handler
1308+ 24E4             >                // Use of "; ok" to suppress "warning[fwdref]"
1308+ 24E4             >
1308+ 24E4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1309+ 24E4 E1                           pop     hl
1310+ 24E5 F9                           ld      sp, hl
1311+ 24E6
1312+ 24E6                              next
1312+ 24E6 DD E9       >                jp      (ix)
1313+ 24E8
1314+ 24E8              //  ______________________________________________________________________
1315+ 24E8              //
1316+ 24E8              // rp@      -- a
1317+ 24E8              // returns on top of stack the value of Return-Pointer
1318+ 24E8                              New_Def RPFETCH, "RP@", is_code, is_normal
1318+ 24E8             >
1318+ 24E8             >Dict_Ptr        defl    $
1318+ 24E8             >
1318+ 24E8             >//              ______________________________________________________________________
1318+ 24E8             >//              Heap part
1318+ 24E8             >
1318+ 24E8             >
1318+ 24E8             >                org     (Heap_Ptr & $1FFF) + $E000
1318+ E23F             >
1318+ E23F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1318+ E23F             >Latest_Definition defl  Heap_Ptr
1318+ E23F             >
1318+ E23F             >                // dummy db directives used to calculate length of namec
1318+ E23F 52 50 40    >                db      "RP@"
1318+ E242             >len_NFA         defl    $ - temp_NFA
1318+ E242             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1318+ E23F             >
1318+ E23F 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1318+ E240 52 50 40    >                db      "RP@"               // name string in 7-bit ascii, but
1318+ E243             >                org     $-1                 // alter last byte of Name just above to set
1318+ E242 C0          >                db      {b $} | END_BIT     // msb as name end
1318+ E243             >
1318+ E243 37 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1318+ E245             >Prev_Ptr        defl    Heap_Ptr
1318+ E245             >
1318+ E245             >mirror_Ptr      defl    $
1318+ E245             >
1318+ E245 EA 24       >                dw      Dict_Ptr + 2        // xt
1318+ E247             >Heap_Ptr        defl    $ - $E000           // save current HP
1318+ E247             >
1318+ E247             >Current_HP      defl  $ - $E000             // used to set HP once!
1318+ E247             >
1318+ E247             >//              ______________________________________________________________________
1318+ E247             >//              Dictionary part
1318+ E247             >
1318+ E247             >                org     Dict_Ptr
1318+ 24E8             >
1318+ 24E8 45 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1318+ 24EA             >
1318+ 24EA             >RPFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1318+ 24EA ~           >                call    runcode ; ok        // for primitive definitions  actual code
1318+ 24EA ~           >
1318+ 24EA ~           >
1318+ 24EA             >                endif           ; ok        // for other definitions it "points" the correct handler
1318+ 24EA             >                // Use of "; ok" to suppress "warning[fwdref]"
1318+ 24EA             >
1318+ 24EA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1319+ 24EA
1320+ 24EA                              // *** ldhlrp
1321+ 24EA                              // *** ex      de, hl
1322+ 24EA D5                           push de
1323+ 24EB
1324+ 24EB                              next
1324+ 24EB DD E9       >                jp      (ix)
1325+ 24ED
1326+ 24ED              //  ______________________________________________________________________
1327+ 24ED              //
1328+ 24ED              // rp!      a --
1329+ 24ED              // restore RP to the initial value passed
1330+ 24ED              // normally it is R0 @, i.e. the word at offset 8 of user variabiles area.
1331+ 24ED                              New_Def RPSTORE, "RP!", is_code, is_normal
1331+ 24ED             >
1331+ 24ED             >Dict_Ptr        defl    $
1331+ 24ED             >
1331+ 24ED             >//              ______________________________________________________________________
1331+ 24ED             >//              Heap part
1331+ 24ED             >
1331+ 24ED             >
1331+ 24ED             >                org     (Heap_Ptr & $1FFF) + $E000
1331+ E247             >
1331+ E247             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1331+ E247             >Latest_Definition defl  Heap_Ptr
1331+ E247             >
1331+ E247             >                // dummy db directives used to calculate length of namec
1331+ E247 52 50 21    >                db      "RP!"
1331+ E24A             >len_NFA         defl    $ - temp_NFA
1331+ E24A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1331+ E247             >
1331+ E247 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1331+ E248 52 50 21    >                db      "RP!"               // name string in 7-bit ascii, but
1331+ E24B             >                org     $-1                 // alter last byte of Name just above to set
1331+ E24A A1          >                db      {b $} | END_BIT     // msb as name end
1331+ E24B             >
1331+ E24B 3F 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1331+ E24D             >Prev_Ptr        defl    Heap_Ptr
1331+ E24D             >
1331+ E24D             >mirror_Ptr      defl    $
1331+ E24D             >
1331+ E24D EF 24       >                dw      Dict_Ptr + 2        // xt
1331+ E24F             >Heap_Ptr        defl    $ - $E000           // save current HP
1331+ E24F             >
1331+ E24F             >Current_HP      defl  $ - $E000             // used to set HP once!
1331+ E24F             >
1331+ E24F             >//              ______________________________________________________________________
1331+ E24F             >//              Dictionary part
1331+ E24F             >
1331+ E24F             >                org     Dict_Ptr
1331+ 24ED             >
1331+ 24ED 4D 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1331+ 24EF             >
1331+ 24EF             >RPSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1331+ 24EF ~           >                call    runcode ; ok        // for primitive definitions  actual code
1331+ 24EF ~           >
1331+ 24EF ~           >
1331+ 24EF             >                endif           ; ok        // for other definitions it "points" the correct handler
1331+ 24EF             >                // Use of "; ok" to suppress "warning[fwdref]"
1331+ 24EF             >
1331+ 24EF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1332+ 24EF D1                           pop     de
1333+ 24F0                              // *** ex      de, hl
1334+ 24F0                              // *** ldrphl
1335+ 24F0
1336+ 24F0                              next
1336+ 24F0 DD E9       >                jp      (ix)
1337+ 24F2
1338+ 24F2              //  ______________________________________________________________________
1339+ 24F2              //
1340+ 24F2              // exit       --
1341+ 24F2              // exits back to the caller word
1342+ 24F2                              New_Def EXIT, "EXIT", is_code, is_normal
1342+ 24F2             >
1342+ 24F2             >Dict_Ptr        defl    $
1342+ 24F2             >
1342+ 24F2             >//              ______________________________________________________________________
1342+ 24F2             >//              Heap part
1342+ 24F2             >
1342+ 24F2             >
1342+ 24F2             >                org     (Heap_Ptr & $1FFF) + $E000
1342+ E24F             >
1342+ E24F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1342+ E24F             >Latest_Definition defl  Heap_Ptr
1342+ E24F             >
1342+ E24F             >                // dummy db directives used to calculate length of namec
1342+ E24F 45 58 49 54 >                db      "EXIT"
1342+ E253             >len_NFA         defl    $ - temp_NFA
1342+ E253             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1342+ E24F             >
1342+ E24F 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1342+ E250 45 58 49 54 >                db      "EXIT"               // name string in 7-bit ascii, but
1342+ E254             >                org     $-1                 // alter last byte of Name just above to set
1342+ E253 D4          >                db      {b $} | END_BIT     // msb as name end
1342+ E254             >
1342+ E254 47 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1342+ E256             >Prev_Ptr        defl    Heap_Ptr
1342+ E256             >
1342+ E256             >mirror_Ptr      defl    $
1342+ E256             >
1342+ E256 F4 24       >                dw      Dict_Ptr + 2        // xt
1342+ E258             >Heap_Ptr        defl    $ - $E000           // save current HP
1342+ E258             >
1342+ E258             >Current_HP      defl  $ - $E000             // used to set HP once!
1342+ E258             >
1342+ E258             >//              ______________________________________________________________________
1342+ E258             >//              Dictionary part
1342+ E258             >
1342+ E258             >                org     Dict_Ptr
1342+ 24F2             >
1342+ 24F2 56 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1342+ 24F4             >
1342+ 24F4             >EXIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1342+ 24F4 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1342+ 24F4 ~           >
1342+ 24F4 ~           >
1342+ 24F4             >                endif           ; ok        // for other definitions it "points" the correct handler
1342+ 24F4             >                // Use of "; ok" to suppress "warning[fwdref]"
1342+ 24F4             >
1342+ 24F4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1343+ 24F4 EB                           ex      de, hl
1344+ 24F5                              // *** ldhlrp                      // Get Return Stack Pointer
1345+ 24F5 4E                           ld      c, (hl)             // pop Instruction Pointer
1346+ 24F6 23                           inc     hl                  // from Return Stack
1347+ 24F7 46                           ld      b, (hl)
1348+ 24F8 23                           inc     hl
1349+ 24F9                              // *** ldrphl                      // Set Return Stack Pointer
1350+ 24F9 EB                           ex      de, hl
1351+ 24FA                              next
1351+ 24FA DD E9       >                jp      (ix)
1352+ 24FC
1353+ 24FC              //  ______________________________________________________________________
1354+ 24FC              //
1355+ 24FC              // lastl      --
1356+ 24FC              // exits back to the caller word
1357+ 24FC              //              New_Def EXIT, "LASTL", is_code, is_normal
1358+ 24FC              //              push    de
1359+ 24FC              //              ex      de, hl //**
1360+ 24FC              //              // *** ldhlrp                      // Get Return Stack Pointer
1361+ 24FC              //              ld      e, (hl)             // pop Instruction Pointer
1362+ 24FC              //              inc     hl                  // from Return Stack
1363+ 24FC              //              ld      d, (hl)
1364+ 24FC              //              inc     hl
1365+ 24FC              //              ld      (hl), e
1366+ 24FC              //              inc     hl
1367+ 24FC              //              ld      (hl), d
1368+ 24FC              //              add     hl, -3
1369+ 24FC              //              pop     de
1370+ 24FC              //              next
1371+ 24FC
1372+ 24FC              //  ______________________________________________________________________
1373+ 24FC              //
1374+ 24FC              // >r      n --
1375+ 24FC              // pop from calculator-stack and push into return-stack
1376+ 24FC                              New_Def TO_R, ">R", is_code, is_normal
1376+ 24FC             >
1376+ 24FC             >Dict_Ptr        defl    $
1376+ 24FC             >
1376+ 24FC             >//              ______________________________________________________________________
1376+ 24FC             >//              Heap part
1376+ 24FC             >
1376+ 24FC             >
1376+ 24FC             >                org     (Heap_Ptr & $1FFF) + $E000
1376+ E258             >
1376+ E258             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1376+ E258             >Latest_Definition defl  Heap_Ptr
1376+ E258             >
1376+ E258             >                // dummy db directives used to calculate length of namec
1376+ E258 3E 52       >                db      ">R"
1376+ E25A             >len_NFA         defl    $ - temp_NFA
1376+ E25A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1376+ E258             >
1376+ E258 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1376+ E259 3E 52       >                db      ">R"               // name string in 7-bit ascii, but
1376+ E25B             >                org     $-1                 // alter last byte of Name just above to set
1376+ E25A D2          >                db      {b $} | END_BIT     // msb as name end
1376+ E25B             >
1376+ E25B 4F 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1376+ E25D             >Prev_Ptr        defl    Heap_Ptr
1376+ E25D             >
1376+ E25D             >mirror_Ptr      defl    $
1376+ E25D             >
1376+ E25D FE 24       >                dw      Dict_Ptr + 2        // xt
1376+ E25F             >Heap_Ptr        defl    $ - $E000           // save current HP
1376+ E25F             >
1376+ E25F             >Current_HP      defl  $ - $E000             // used to set HP once!
1376+ E25F             >
1376+ E25F             >//              ______________________________________________________________________
1376+ E25F             >//              Dictionary part
1376+ E25F             >
1376+ E25F             >                org     Dict_Ptr
1376+ 24FC             >
1376+ 24FC 5D 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1376+ 24FE             >
1376+ 24FE             >TO_R:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1376+ 24FE ~           >                call    runcode ; ok        // for primitive definitions  actual code
1376+ 24FE ~           >
1376+ 24FE ~           >
1376+ 24FE             >                endif           ; ok        // for other definitions it "points" the correct handler
1376+ 24FE             >                // Use of "; ok" to suppress "warning[fwdref]"
1376+ 24FE             >
1376+ 24FE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1377+ 24FE E1                           pop     hl
1378+ 24FF EB                           ex      de, hl //**
1379+ 2500                              // *** ldhlrp
1380+ 2500 2B                           dec     hl
1381+ 2501 72                           ld      (hl), d             // store current TOS
1382+ 2502 2B                           dec     hl                  // to Return Stack
1383+ 2503 73                           ld      (hl), e
1384+ 2504                              // *** ldrphl
1385+ 2504 EB                           ex      de, hl //**
1386+ 2505                              next
1386+ 2505 DD E9       >                jp      (ix)
1387+ 2507
1388+ 2507              //  ______________________________________________________________________
1389+ 2507              //
1390+ 2507              // r>      -- n
1391+ 2507              // pop from return-stack and push into calculator-stack
1392+ 2507                              New_Def R_TO, "R>", is_code, is_normal
1392+ 2507             >
1392+ 2507             >Dict_Ptr        defl    $
1392+ 2507             >
1392+ 2507             >//              ______________________________________________________________________
1392+ 2507             >//              Heap part
1392+ 2507             >
1392+ 2507             >
1392+ 2507             >                org     (Heap_Ptr & $1FFF) + $E000
1392+ E25F             >
1392+ E25F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1392+ E25F             >Latest_Definition defl  Heap_Ptr
1392+ E25F             >
1392+ E25F             >                // dummy db directives used to calculate length of namec
1392+ E25F 52 3E       >                db      "R>"
1392+ E261             >len_NFA         defl    $ - temp_NFA
1392+ E261             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1392+ E25F             >
1392+ E25F 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1392+ E260 52 3E       >                db      "R>"               // name string in 7-bit ascii, but
1392+ E262             >                org     $-1                 // alter last byte of Name just above to set
1392+ E261 BE          >                db      {b $} | END_BIT     // msb as name end
1392+ E262             >
1392+ E262 58 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1392+ E264             >Prev_Ptr        defl    Heap_Ptr
1392+ E264             >
1392+ E264             >mirror_Ptr      defl    $
1392+ E264             >
1392+ E264 09 25       >                dw      Dict_Ptr + 2        // xt
1392+ E266             >Heap_Ptr        defl    $ - $E000           // save current HP
1392+ E266             >
1392+ E266             >Current_HP      defl  $ - $E000             // used to set HP once!
1392+ E266             >
1392+ E266             >//              ______________________________________________________________________
1392+ E266             >//              Dictionary part
1392+ E266             >
1392+ E266             >                org     Dict_Ptr
1392+ 2507             >
1392+ 2507 64 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1392+ 2509             >
1392+ 2509             >R_TO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1392+ 2509 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1392+ 2509 ~           >
1392+ 2509 ~           >
1392+ 2509             >                endif           ; ok        // for other definitions it "points" the correct handler
1392+ 2509             >                // Use of "; ok" to suppress "warning[fwdref]"
1392+ 2509             >
1392+ 2509             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1393+ 2509
1394+ 2509 EB                           ex      de, hl //**
1395+ 250A                              // *** ldhlrp
1396+ 250A 5E                           ld      e, (hl)             // retrieve from Return Stack
1397+ 250B 23                           inc     hl
1398+ 250C 56                           ld      d, (hl)
1399+ 250D 23                           inc     hl
1400+ 250E                              // *** ldrphl
1401+ 250E EB                           ex      de, hl //**
1402+ 250F E5                           push    hl
1403+ 2510                              next
1403+ 2510 DD E9       >                jp      (ix)
1404+ 2512
1405+ 2512              //  ______________________________________________________________________
1406+ 2512              //
1407+ 2512              // r@           -- n
1408+ 2512              // return on top of stack the value of top of return-stack
1409+ 2512              // Since this is the same as I, we alter R's CFA to jump there
1410+ 2512                              New_Def R_OP, "R@", is_code, is_normal
1410+ 2512             >
1410+ 2512             >Dict_Ptr        defl    $
1410+ 2512             >
1410+ 2512             >//              ______________________________________________________________________
1410+ 2512             >//              Heap part
1410+ 2512             >
1410+ 2512             >
1410+ 2512             >                org     (Heap_Ptr & $1FFF) + $E000
1410+ E266             >
1410+ E266             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1410+ E266             >Latest_Definition defl  Heap_Ptr
1410+ E266             >
1410+ E266             >                // dummy db directives used to calculate length of namec
1410+ E266 52 40       >                db      "R@"
1410+ E268             >len_NFA         defl    $ - temp_NFA
1410+ E268             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1410+ E266             >
1410+ E266 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1410+ E267 52 40       >                db      "R@"               // name string in 7-bit ascii, but
1410+ E269             >                org     $-1                 // alter last byte of Name just above to set
1410+ E268 C0          >                db      {b $} | END_BIT     // msb as name end
1410+ E269             >
1410+ E269 5F 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1410+ E26B             >Prev_Ptr        defl    Heap_Ptr
1410+ E26B             >
1410+ E26B             >mirror_Ptr      defl    $
1410+ E26B             >
1410+ E26B 14 25       >                dw      Dict_Ptr + 2        // xt
1410+ E26D             >Heap_Ptr        defl    $ - $E000           // save current HP
1410+ E26D             >
1410+ E26D             >Current_HP      defl  $ - $E000             // used to set HP once!
1410+ E26D             >
1410+ E26D             >//              ______________________________________________________________________
1410+ E26D             >//              Dictionary part
1410+ E26D             >
1410+ E26D             >                org     Dict_Ptr
1410+ 2512             >
1410+ 2512 6B 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1410+ 2514             >
1410+ 2514             >R_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1410+ 2514 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1410+ 2514 ~           >
1410+ 2514 ~           >
1410+ 2514             >                endif           ; ok        // for other definitions it "points" the correct handler
1410+ 2514             >                // Use of "; ok" to suppress "warning[fwdref]"
1410+ 2514             >
1410+ 2514             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1411+ 2514                          //  Behave  I_Ptr
1412+ 2514 C3 D4 20                     jp      I_Ptr
1413+ 2517
1414+ 2517              //  ______________________________________________________________________
1415+ 2517              //
1416+ 2517              // r            -- n
1417+ 2517              // return on top of stack the value of top of return-stack
1418+ 2517              // Since this is the same as I, we alter R's CFA to jump there
1419+ 2517              //              New_Def R_OLD, "R", is_code, is_normal
1420+ 2517              //              jp      I_Ptr
1421+ 2517
1422+ 2517              //  ______________________________________________________________________
1423+ 2517              //
1424+ 2517              // 0=           n -- f
1425+ 2517              // true (non zero) if n is zero, false (0) elsewere
1426+ 2517                              New_Def ZEQUAL, "0=", is_code, is_normal
1426+ 2517             >
1426+ 2517             >Dict_Ptr        defl    $
1426+ 2517             >
1426+ 2517             >//              ______________________________________________________________________
1426+ 2517             >//              Heap part
1426+ 2517             >
1426+ 2517             >
1426+ 2517             >                org     (Heap_Ptr & $1FFF) + $E000
1426+ E26D             >
1426+ E26D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1426+ E26D             >Latest_Definition defl  Heap_Ptr
1426+ E26D             >
1426+ E26D             >                // dummy db directives used to calculate length of namec
1426+ E26D 30 3D       >                db      "0="
1426+ E26F             >len_NFA         defl    $ - temp_NFA
1426+ E26F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1426+ E26D             >
1426+ E26D 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1426+ E26E 30 3D       >                db      "0="               // name string in 7-bit ascii, but
1426+ E270             >                org     $-1                 // alter last byte of Name just above to set
1426+ E26F BD          >                db      {b $} | END_BIT     // msb as name end
1426+ E270             >
1426+ E270 66 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1426+ E272             >Prev_Ptr        defl    Heap_Ptr
1426+ E272             >
1426+ E272             >mirror_Ptr      defl    $
1426+ E272             >
1426+ E272 19 25       >                dw      Dict_Ptr + 2        // xt
1426+ E274             >Heap_Ptr        defl    $ - $E000           // save current HP
1426+ E274             >
1426+ E274             >Current_HP      defl  $ - $E000             // used to set HP once!
1426+ E274             >
1426+ E274             >//              ______________________________________________________________________
1426+ E274             >//              Dictionary part
1426+ E274             >
1426+ E274             >                org     Dict_Ptr
1426+ 2517             >
1426+ 2517 72 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1426+ 2519             >
1426+ 2519             >ZEQUAL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1426+ 2519 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1426+ 2519 ~           >
1426+ 2519 ~           >
1426+ 2519             >                endif           ; ok        // for other definitions it "points" the correct handler
1426+ 2519             >                // Use of "; ok" to suppress "warning[fwdref]"
1426+ 2519             >
1426+ 2519             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1427+ 2519              Zero_Equal:
1428+ 2519 E1                           pop     hl
1429+ 251A 7D                           ld      a, l
1430+ 251B B4                           or      h
1431+ 251C 21 00 00                     ld      hl, FALSE_FLAG
1432+ 251F 20 01                        jr      nz, ZEqual_Skip
1433+ 2521 2B                               dec     hl
1434+ 2522              ZEqual_Skip:
1435+ 2522                              psh1
1435+ 2522 E5          >                push    hl
1435+ 2523 DD E9       >                jp      (ix)
1436+ 2525
1437+ 2525              //  ______________________________________________________________________
1438+ 2525              //
1439+ 2525              // not         a1 -- a2
1440+ 2525              // increment by 2 top of stack
1441+ 2525                              New_Def NOT_OP, "NOT", is_code, is_normal
1441+ 2525             >
1441+ 2525             >Dict_Ptr        defl    $
1441+ 2525             >
1441+ 2525             >//              ______________________________________________________________________
1441+ 2525             >//              Heap part
1441+ 2525             >
1441+ 2525             >
1441+ 2525             >                org     (Heap_Ptr & $1FFF) + $E000
1441+ E274             >
1441+ E274             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1441+ E274             >Latest_Definition defl  Heap_Ptr
1441+ E274             >
1441+ E274             >                // dummy db directives used to calculate length of namec
1441+ E274 4E 4F 54    >                db      "NOT"
1441+ E277             >len_NFA         defl    $ - temp_NFA
1441+ E277             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1441+ E274             >
1441+ E274 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1441+ E275 4E 4F 54    >                db      "NOT"               // name string in 7-bit ascii, but
1441+ E278             >                org     $-1                 // alter last byte of Name just above to set
1441+ E277 D4          >                db      {b $} | END_BIT     // msb as name end
1441+ E278             >
1441+ E278 6D 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1441+ E27A             >Prev_Ptr        defl    Heap_Ptr
1441+ E27A             >
1441+ E27A             >mirror_Ptr      defl    $
1441+ E27A             >
1441+ E27A 27 25       >                dw      Dict_Ptr + 2        // xt
1441+ E27C             >Heap_Ptr        defl    $ - $E000           // save current HP
1441+ E27C             >
1441+ E27C             >Current_HP      defl  $ - $E000             // used to set HP once!
1441+ E27C             >
1441+ E27C             >//              ______________________________________________________________________
1441+ E27C             >//              Dictionary part
1441+ E27C             >
1441+ E27C             >                org     Dict_Ptr
1441+ 2525             >
1441+ 2525 7A 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1441+ 2527             >
1441+ 2527             >NOT_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1441+ 2527 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1441+ 2527 ~           >
1441+ 2527 ~           >
1441+ 2527             >                endif           ; ok        // for other definitions it "points" the correct handler
1441+ 2527             >                // Use of "; ok" to suppress "warning[fwdref]"
1441+ 2527             >
1441+ 2527             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1442+ 2527                          //  Behave  Zero_Equal
1443+ 2527 C3 19 25                     jp      Zero_Equal
1444+ 252A
1445+ 252A              //  ______________________________________________________________________
1446+ 252A              //
1447+ 252A              // 0<           n -- f
1448+ 252A              // true (non zero) if n is less than zero, false (0) elsewere
1449+ 252A                              New_Def ZLESS, "0<", is_code, is_normal
1449+ 252A             >
1449+ 252A             >Dict_Ptr        defl    $
1449+ 252A             >
1449+ 252A             >//              ______________________________________________________________________
1449+ 252A             >//              Heap part
1449+ 252A             >
1449+ 252A             >
1449+ 252A             >                org     (Heap_Ptr & $1FFF) + $E000
1449+ E27C             >
1449+ E27C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1449+ E27C             >Latest_Definition defl  Heap_Ptr
1449+ E27C             >
1449+ E27C             >                // dummy db directives used to calculate length of namec
1449+ E27C 30 3C       >                db      "0<"
1449+ E27E             >len_NFA         defl    $ - temp_NFA
1449+ E27E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1449+ E27C             >
1449+ E27C 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1449+ E27D 30 3C       >                db      "0<"               // name string in 7-bit ascii, but
1449+ E27F             >                org     $-1                 // alter last byte of Name just above to set
1449+ E27E BC          >                db      {b $} | END_BIT     // msb as name end
1449+ E27F             >
1449+ E27F 74 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1449+ E281             >Prev_Ptr        defl    Heap_Ptr
1449+ E281             >
1449+ E281             >mirror_Ptr      defl    $
1449+ E281             >
1449+ E281 2C 25       >                dw      Dict_Ptr + 2        // xt
1449+ E283             >Heap_Ptr        defl    $ - $E000           // save current HP
1449+ E283             >
1449+ E283             >Current_HP      defl  $ - $E000             // used to set HP once!
1449+ E283             >
1449+ E283             >//              ______________________________________________________________________
1449+ E283             >//              Dictionary part
1449+ E283             >
1449+ E283             >                org     Dict_Ptr
1449+ 252A             >
1449+ 252A 81 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1449+ 252C             >
1449+ 252C             >ZLESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1449+ 252C ~           >                call    runcode ; ok        // for primitive definitions  actual code
1449+ 252C ~           >
1449+ 252C ~           >
1449+ 252C             >                endif           ; ok        // for other definitions it "points" the correct handler
1449+ 252C             >                // Use of "; ok" to suppress "warning[fwdref]"
1449+ 252C             >
1449+ 252C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1450+ 252C E1                           pop     hl
1451+ 252D 29                           add     hl, hl
1452+ 252E ED 62                        sbc     hl, hl
1453+ 2530                              psh1
1453+ 2530 E5          >                push    hl
1453+ 2531 DD E9       >                jp      (ix)
1454+ 2533
1455+ 2533              //  ______________________________________________________________________
1456+ 2533              //
1457+ 2533              // 0>           n -- f
1458+ 2533              // true (non zero) if n is less than zero, false (0) elsewere
1459+ 2533                              New_Def ZGREATER, "0>", is_code, is_normal
1459+ 2533             >
1459+ 2533             >Dict_Ptr        defl    $
1459+ 2533             >
1459+ 2533             >//              ______________________________________________________________________
1459+ 2533             >//              Heap part
1459+ 2533             >
1459+ 2533             >
1459+ 2533             >                org     (Heap_Ptr & $1FFF) + $E000
1459+ E283             >
1459+ E283             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1459+ E283             >Latest_Definition defl  Heap_Ptr
1459+ E283             >
1459+ E283             >                // dummy db directives used to calculate length of namec
1459+ E283 30 3E       >                db      "0>"
1459+ E285             >len_NFA         defl    $ - temp_NFA
1459+ E285             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1459+ E283             >
1459+ E283 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1459+ E284 30 3E       >                db      "0>"               // name string in 7-bit ascii, but
1459+ E286             >                org     $-1                 // alter last byte of Name just above to set
1459+ E285 BE          >                db      {b $} | END_BIT     // msb as name end
1459+ E286             >
1459+ E286 7C 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1459+ E288             >Prev_Ptr        defl    Heap_Ptr
1459+ E288             >
1459+ E288             >mirror_Ptr      defl    $
1459+ E288             >
1459+ E288 35 25       >                dw      Dict_Ptr + 2        // xt
1459+ E28A             >Heap_Ptr        defl    $ - $E000           // save current HP
1459+ E28A             >
1459+ E28A             >Current_HP      defl  $ - $E000             // used to set HP once!
1459+ E28A             >
1459+ E28A             >//              ______________________________________________________________________
1459+ E28A             >//              Dictionary part
1459+ E28A             >
1459+ E28A             >                org     Dict_Ptr
1459+ 2533             >
1459+ 2533 88 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1459+ 2535             >
1459+ 2535             >ZGREATER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1459+ 2535 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1459+ 2535 ~           >
1459+ 2535 ~           >
1459+ 2535             >                endif           ; ok        // for other definitions it "points" the correct handler
1459+ 2535             >                // Use of "; ok" to suppress "warning[fwdref]"
1459+ 2535             >
1459+ 2535             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1460+ 2535 E1                           pop     hl
1461+ 2536 7D                           ld      a, l
1462+ 2537 B4                           or      h
1463+ 2538 29                           add     hl, hl
1464+ 2539 21 00 00                     ld      hl, FALSE_FLAG
1465+ 253C 38 04                        jr      c, ZGreater_Skip
1466+ 253E A7                               and     a
1467+ 253F 28 01                            jr      z, ZGreater_Skip
1468+ 2541 2B                                   dec     hl
1469+ 2542              ZGreater_Skip:
1470+ 2542                              psh1
1470+ 2542 E5          >                push    hl
1470+ 2543 DD E9       >                jp      (ix)
1471+ 2545
1472+ 2545              //  ______________________________________________________________________
1473+ 2545              //
1474+ 2545              // +            n1 n2 -- n3
1475+ 2545              // returns the unsigned sum of two top values
1476+ 2545                              New_Def PLUS, "+", is_code, is_normal
1476+ 2545             >
1476+ 2545             >Dict_Ptr        defl    $
1476+ 2545             >
1476+ 2545             >//              ______________________________________________________________________
1476+ 2545             >//              Heap part
1476+ 2545             >
1476+ 2545             >
1476+ 2545             >                org     (Heap_Ptr & $1FFF) + $E000
1476+ E28A             >
1476+ E28A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1476+ E28A             >Latest_Definition defl  Heap_Ptr
1476+ E28A             >
1476+ E28A             >                // dummy db directives used to calculate length of namec
1476+ E28A 2B          >                db      "+"
1476+ E28B             >len_NFA         defl    $ - temp_NFA
1476+ E28B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1476+ E28A             >
1476+ E28A 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1476+ E28B 2B          >                db      "+"               // name string in 7-bit ascii, but
1476+ E28C             >                org     $-1                 // alter last byte of Name just above to set
1476+ E28B AB          >                db      {b $} | END_BIT     // msb as name end
1476+ E28C             >
1476+ E28C 83 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1476+ E28E             >Prev_Ptr        defl    Heap_Ptr
1476+ E28E             >
1476+ E28E             >mirror_Ptr      defl    $
1476+ E28E             >
1476+ E28E 47 25       >                dw      Dict_Ptr + 2        // xt
1476+ E290             >Heap_Ptr        defl    $ - $E000           // save current HP
1476+ E290             >
1476+ E290             >Current_HP      defl  $ - $E000             // used to set HP once!
1476+ E290             >
1476+ E290             >//              ______________________________________________________________________
1476+ E290             >//              Dictionary part
1476+ E290             >
1476+ E290             >                org     Dict_Ptr
1476+ 2545             >
1476+ 2545 8E 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1476+ 2547             >
1476+ 2547             >PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1476+ 2547 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1476+ 2547 ~           >
1476+ 2547 ~           >
1476+ 2547             >                endif           ; ok        // for other definitions it "points" the correct handler
1476+ 2547             >                // Use of "; ok" to suppress "warning[fwdref]"
1476+ 2547             >
1476+ 2547             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1477+ 2547 D9                           exx
1478+ 2548 E1                           pop     hl
1479+ 2549 D1                           pop     de
1480+ 254A 19                           add     hl, de
1481+ 254B E5                           push    hl
1482+ 254C D9                           exx
1483+ 254D                              next
1483+ 254D DD E9       >                jp      (ix)
1484+ 254F
1485+ 254F
1486+ 254F              //  ______________________________________________________________________
1487+ 254F              //
1488+ 254F              // d+           d1 d2 -- d3
1489+ 254F              // returns the unsigned sum of two top double-numbers
1490+ 254F              //      d2  d1
1491+ 254F              //      h l h l
1492+ 254F              // SP   LHEDLHED
1493+ 254F              // SP  +01234567
1494+ 254F                              New_Def DPLUS, "D+", is_code, is_normal
1494+ 254F             >
1494+ 254F             >Dict_Ptr        defl    $
1494+ 254F             >
1494+ 254F             >//              ______________________________________________________________________
1494+ 254F             >//              Heap part
1494+ 254F             >
1494+ 254F             >
1494+ 254F             >                org     (Heap_Ptr & $1FFF) + $E000
1494+ E290             >
1494+ E290             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1494+ E290             >Latest_Definition defl  Heap_Ptr
1494+ E290             >
1494+ E290             >                // dummy db directives used to calculate length of namec
1494+ E290 44 2B       >                db      "D+"
1494+ E292             >len_NFA         defl    $ - temp_NFA
1494+ E292             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1494+ E290             >
1494+ E290 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1494+ E291 44 2B       >                db      "D+"               // name string in 7-bit ascii, but
1494+ E293             >                org     $-1                 // alter last byte of Name just above to set
1494+ E292 AB          >                db      {b $} | END_BIT     // msb as name end
1494+ E293             >
1494+ E293 8A 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1494+ E295             >Prev_Ptr        defl    Heap_Ptr
1494+ E295             >
1494+ E295             >mirror_Ptr      defl    $
1494+ E295             >
1494+ E295 51 25       >                dw      Dict_Ptr + 2        // xt
1494+ E297             >Heap_Ptr        defl    $ - $E000           // save current HP
1494+ E297             >
1494+ E297             >Current_HP      defl  $ - $E000             // used to set HP once!
1494+ E297             >
1494+ E297             >//              ______________________________________________________________________
1494+ E297             >//              Dictionary part
1494+ E297             >
1494+ E297             >                org     Dict_Ptr
1494+ 254F             >
1494+ 254F 95 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1494+ 2551             >
1494+ 2551             >DPLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1494+ 2551 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1494+ 2551 ~           >
1494+ 2551 ~           >
1494+ 2551             >                endif           ; ok        // for other definitions it "points" the correct handler
1494+ 2551             >                // Use of "; ok" to suppress "warning[fwdref]"
1494+ 2551             >
1494+ 2551             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1495+ 2551
1496+ 2551 D9                           exx
1497+ 2552 C1                           pop     bc                  // bc := d2.H
1498+ 2553 D1                           pop     de                  // hl := d2.L
1499+ 2554 E1                           pop     hl                  // d1.H
1500+ 2555 E3                           ex      (sp), hl            // d1.L
1501+ 2556 19                           add     hl, de              // hl := d2.L + d1.L
1502+ 2557 E3                           ex      (sp), hl            // d1.H
1503+ 2558 ED 4A                        adc     hl, bc              // d1.H + d2.H
1504+ 255A E5                           push    hl
1505+ 255B D9                           exx
1506+ 255C                              next
1506+ 255C DD E9       >                jp      (ix)
1507+ 255E
1508+ 255E              //  ______________________________________________________________________
1509+ 255E              //
1510+ 255E              // 1+           n1 -- n2
1511+ 255E              // increment by 1 top of stack
1512+ 255E                              New_Def ONE_PLUS, "1+", is_code, is_normal
1512+ 255E             >
1512+ 255E             >Dict_Ptr        defl    $
1512+ 255E             >
1512+ 255E             >//              ______________________________________________________________________
1512+ 255E             >//              Heap part
1512+ 255E             >
1512+ 255E             >
1512+ 255E             >                org     (Heap_Ptr & $1FFF) + $E000
1512+ E297             >
1512+ E297             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1512+ E297             >Latest_Definition defl  Heap_Ptr
1512+ E297             >
1512+ E297             >                // dummy db directives used to calculate length of namec
1512+ E297 31 2B       >                db      "1+"
1512+ E299             >len_NFA         defl    $ - temp_NFA
1512+ E299             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1512+ E297             >
1512+ E297 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1512+ E298 31 2B       >                db      "1+"               // name string in 7-bit ascii, but
1512+ E29A             >                org     $-1                 // alter last byte of Name just above to set
1512+ E299 AB          >                db      {b $} | END_BIT     // msb as name end
1512+ E29A             >
1512+ E29A 90 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1512+ E29C             >Prev_Ptr        defl    Heap_Ptr
1512+ E29C             >
1512+ E29C             >mirror_Ptr      defl    $
1512+ E29C             >
1512+ E29C 60 25       >                dw      Dict_Ptr + 2        // xt
1512+ E29E             >Heap_Ptr        defl    $ - $E000           // save current HP
1512+ E29E             >
1512+ E29E             >Current_HP      defl  $ - $E000             // used to set HP once!
1512+ E29E             >
1512+ E29E             >//              ______________________________________________________________________
1512+ E29E             >//              Dictionary part
1512+ E29E             >
1512+ E29E             >                org     Dict_Ptr
1512+ 255E             >
1512+ 255E 9C 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1512+ 2560             >
1512+ 2560             >ONE_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1512+ 2560 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1512+ 2560 ~           >
1512+ 2560 ~           >
1512+ 2560             >                endif           ; ok        // for other definitions it "points" the correct handler
1512+ 2560             >                // Use of "; ok" to suppress "warning[fwdref]"
1512+ 2560             >
1512+ 2560             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1513+ 2560 E1                           pop     hl
1514+ 2561 23                           inc     hl
1515+ 2562
1516+ 2562                              psh1
1516+ 2562 E5          >                push    hl
1516+ 2563 DD E9       >                jp      (ix)
1517+ 2565
1518+ 2565              //  ______________________________________________________________________
1519+ 2565              //
1520+ 2565              // 1-           n1 -- n2
1521+ 2565              // decrement by 1 top of stack
1522+ 2565                              New_Def ONE_SUBTRACT, "1-", is_code, is_normal
1522+ 2565             >
1522+ 2565             >Dict_Ptr        defl    $
1522+ 2565             >
1522+ 2565             >//              ______________________________________________________________________
1522+ 2565             >//              Heap part
1522+ 2565             >
1522+ 2565             >
1522+ 2565             >                org     (Heap_Ptr & $1FFF) + $E000
1522+ E29E             >
1522+ E29E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1522+ E29E             >Latest_Definition defl  Heap_Ptr
1522+ E29E             >
1522+ E29E             >                // dummy db directives used to calculate length of namec
1522+ E29E 31 2D       >                db      "1-"
1522+ E2A0             >len_NFA         defl    $ - temp_NFA
1522+ E2A0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1522+ E29E             >
1522+ E29E 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1522+ E29F 31 2D       >                db      "1-"               // name string in 7-bit ascii, but
1522+ E2A1             >                org     $-1                 // alter last byte of Name just above to set
1522+ E2A0 AD          >                db      {b $} | END_BIT     // msb as name end
1522+ E2A1             >
1522+ E2A1 97 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1522+ E2A3             >Prev_Ptr        defl    Heap_Ptr
1522+ E2A3             >
1522+ E2A3             >mirror_Ptr      defl    $
1522+ E2A3             >
1522+ E2A3 67 25       >                dw      Dict_Ptr + 2        // xt
1522+ E2A5             >Heap_Ptr        defl    $ - $E000           // save current HP
1522+ E2A5             >
1522+ E2A5             >Current_HP      defl  $ - $E000             // used to set HP once!
1522+ E2A5             >
1522+ E2A5             >//              ______________________________________________________________________
1522+ E2A5             >//              Dictionary part
1522+ E2A5             >
1522+ E2A5             >                org     Dict_Ptr
1522+ 2565             >
1522+ 2565 A3 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1522+ 2567             >
1522+ 2567             >ONE_SUBTRACT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1522+ 2567 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1522+ 2567 ~           >
1522+ 2567 ~           >
1522+ 2567             >                endif           ; ok        // for other definitions it "points" the correct handler
1522+ 2567             >                // Use of "; ok" to suppress "warning[fwdref]"
1522+ 2567             >
1522+ 2567             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1523+ 2567 E1                           pop     hl
1524+ 2568 2B                           dec     hl
1525+ 2569
1526+ 2569                              psh1
1526+ 2569 E5          >                push    hl
1526+ 256A DD E9       >                jp      (ix)
1527+ 256C
1528+ 256C              //  ______________________________________________________________________
1529+ 256C              //
1530+ 256C              // 2+           n1 -- n2
1531+ 256C              // increment by 2 top of stack
1532+ 256C                              New_Def TWO_PLUS, "2+", is_code, is_normal
1532+ 256C             >
1532+ 256C             >Dict_Ptr        defl    $
1532+ 256C             >
1532+ 256C             >//              ______________________________________________________________________
1532+ 256C             >//              Heap part
1532+ 256C             >
1532+ 256C             >
1532+ 256C             >                org     (Heap_Ptr & $1FFF) + $E000
1532+ E2A5             >
1532+ E2A5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1532+ E2A5             >Latest_Definition defl  Heap_Ptr
1532+ E2A5             >
1532+ E2A5             >                // dummy db directives used to calculate length of namec
1532+ E2A5 32 2B       >                db      "2+"
1532+ E2A7             >len_NFA         defl    $ - temp_NFA
1532+ E2A7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1532+ E2A5             >
1532+ E2A5 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1532+ E2A6 32 2B       >                db      "2+"               // name string in 7-bit ascii, but
1532+ E2A8             >                org     $-1                 // alter last byte of Name just above to set
1532+ E2A7 AB          >                db      {b $} | END_BIT     // msb as name end
1532+ E2A8             >
1532+ E2A8 9E 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1532+ E2AA             >Prev_Ptr        defl    Heap_Ptr
1532+ E2AA             >
1532+ E2AA             >mirror_Ptr      defl    $
1532+ E2AA             >
1532+ E2AA 6E 25       >                dw      Dict_Ptr + 2        // xt
1532+ E2AC             >Heap_Ptr        defl    $ - $E000           // save current HP
1532+ E2AC             >
1532+ E2AC             >Current_HP      defl  $ - $E000             // used to set HP once!
1532+ E2AC             >
1532+ E2AC             >//              ______________________________________________________________________
1532+ E2AC             >//              Dictionary part
1532+ E2AC             >
1532+ E2AC             >                org     Dict_Ptr
1532+ 256C             >
1532+ 256C AA 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1532+ 256E             >
1532+ 256E             >TWO_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1532+ 256E ~           >                call    runcode ; ok        // for primitive definitions  actual code
1532+ 256E ~           >
1532+ 256E ~           >
1532+ 256E             >                endif           ; ok        // for other definitions it "points" the correct handler
1532+ 256E             >                // Use of "; ok" to suppress "warning[fwdref]"
1532+ 256E             >
1532+ 256E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1533+ 256E              Two_Plus:
1534+ 256E E1                           pop     hl
1535+ 256F 23                           inc     hl
1536+ 2570 23                           inc     hl
1537+ 2571
1538+ 2571                              psh1
1538+ 2571 E5          >                push    hl
1538+ 2572 DD E9       >                jp      (ix)
1539+ 2574
1540+ 2574              //  ______________________________________________________________________
1541+ 2574              //
1542+ 2574              // cell+        a1 -- a2
1543+ 2574              // increment by 2 top of stack
1544+ 2574                              New_Def CELL_PLUS, "CELL+", is_code, is_normal
1544+ 2574             >
1544+ 2574             >Dict_Ptr        defl    $
1544+ 2574             >
1544+ 2574             >//              ______________________________________________________________________
1544+ 2574             >//              Heap part
1544+ 2574             >
1544+ 2574             >
1544+ 2574             >                org     (Heap_Ptr & $1FFF) + $E000
1544+ E2AC             >
1544+ E2AC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1544+ E2AC             >Latest_Definition defl  Heap_Ptr
1544+ E2AC             >
1544+ E2AC             >                // dummy db directives used to calculate length of namec
1544+ E2AC 43 45 4C 4C >                db      "CELL+"
1544+ E2B0 2B          >
1544+ E2B1             >len_NFA         defl    $ - temp_NFA
1544+ E2B1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1544+ E2AC             >
1544+ E2AC 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1544+ E2AD 43 45 4C 4C >                db      "CELL+"               // name string in 7-bit ascii, but
1544+ E2B1 2B          >
1544+ E2B2             >                org     $-1                 // alter last byte of Name just above to set
1544+ E2B1 AB          >                db      {b $} | END_BIT     // msb as name end
1544+ E2B2             >
1544+ E2B2 A5 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1544+ E2B4             >Prev_Ptr        defl    Heap_Ptr
1544+ E2B4             >
1544+ E2B4             >mirror_Ptr      defl    $
1544+ E2B4             >
1544+ E2B4 76 25       >                dw      Dict_Ptr + 2        // xt
1544+ E2B6             >Heap_Ptr        defl    $ - $E000           // save current HP
1544+ E2B6             >
1544+ E2B6             >Current_HP      defl  $ - $E000             // used to set HP once!
1544+ E2B6             >
1544+ E2B6             >//              ______________________________________________________________________
1544+ E2B6             >//              Dictionary part
1544+ E2B6             >
1544+ E2B6             >                org     Dict_Ptr
1544+ 2574             >
1544+ 2574 B4 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1544+ 2576             >
1544+ 2576             >CELL_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1544+ 2576 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1544+ 2576 ~           >
1544+ 2576 ~           >
1544+ 2576             >                endif           ; ok        // for other definitions it "points" the correct handler
1544+ 2576             >                // Use of "; ok" to suppress "warning[fwdref]"
1544+ 2576             >
1544+ 2576             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1545+ 2576 C3 6E 25                     jp      Two_Plus
1546+ 2579
1547+ 2579              //  ______________________________________________________________________
1548+ 2579              //
1549+ 2579              // align        a1 -- a2
1550+ 2579              // align memory : not used
1551+ 2579              //              New_Def ALIGN_ADDR, "ALIGN", is_code, is_normal
1552+ 2579              //            next
1553+ 2579
1554+ 2579              //  ______________________________________________________________________
1555+ 2579              //
1556+ 2579              // cell-        a1 -- a2
1557+ 2579              // decrement by 2 top of stack
1558+ 2579                              New_Def CELL_MINUS, "CELL-", is_code, is_normal
1558+ 2579             >
1558+ 2579             >Dict_Ptr        defl    $
1558+ 2579             >
1558+ 2579             >//              ______________________________________________________________________
1558+ 2579             >//              Heap part
1558+ 2579             >
1558+ 2579             >
1558+ 2579             >                org     (Heap_Ptr & $1FFF) + $E000
1558+ E2B6             >
1558+ E2B6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1558+ E2B6             >Latest_Definition defl  Heap_Ptr
1558+ E2B6             >
1558+ E2B6             >                // dummy db directives used to calculate length of namec
1558+ E2B6 43 45 4C 4C >                db      "CELL-"
1558+ E2BA 2D          >
1558+ E2BB             >len_NFA         defl    $ - temp_NFA
1558+ E2BB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1558+ E2B6             >
1558+ E2B6 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1558+ E2B7 43 45 4C 4C >                db      "CELL-"               // name string in 7-bit ascii, but
1558+ E2BB 2D          >
1558+ E2BC             >                org     $-1                 // alter last byte of Name just above to set
1558+ E2BB AD          >                db      {b $} | END_BIT     // msb as name end
1558+ E2BC             >
1558+ E2BC AC 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1558+ E2BE             >Prev_Ptr        defl    Heap_Ptr
1558+ E2BE             >
1558+ E2BE             >mirror_Ptr      defl    $
1558+ E2BE             >
1558+ E2BE 7B 25       >                dw      Dict_Ptr + 2        // xt
1558+ E2C0             >Heap_Ptr        defl    $ - $E000           // save current HP
1558+ E2C0             >
1558+ E2C0             >Current_HP      defl  $ - $E000             // used to set HP once!
1558+ E2C0             >
1558+ E2C0             >//              ______________________________________________________________________
1558+ E2C0             >//              Dictionary part
1558+ E2C0             >
1558+ E2C0             >                org     Dict_Ptr
1558+ 2579             >
1558+ 2579 BE 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1558+ 257B             >
1558+ 257B             >CELL_MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1558+ 257B ~           >                call    runcode ; ok        // for primitive definitions  actual code
1558+ 257B ~           >
1558+ 257B ~           >
1558+ 257B             >                endif           ; ok        // for other definitions it "points" the correct handler
1558+ 257B             >                // Use of "; ok" to suppress "warning[fwdref]"
1558+ 257B             >
1558+ 257B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1559+ 257B              CellMinus:
1560+ 257B E1                           pop     hl
1561+ 257C 2B                           dec     hl
1562+ 257D 2B                           dec     hl
1563+ 257E
1564+ 257E                              psh1
1564+ 257E E5          >                push    hl
1564+ 257F DD E9       >                jp      (ix)
1565+ 2581
1566+ 2581              //  ______________________________________________________________________
1567+ 2581              //
1568+ 2581              // 2-           a1 -- a2
1569+ 2581              // decrement by 2 top of stack
1570+ 2581                              New_Def TWO_MINUS, "2-", is_code, is_normal
1570+ 2581             >
1570+ 2581             >Dict_Ptr        defl    $
1570+ 2581             >
1570+ 2581             >//              ______________________________________________________________________
1570+ 2581             >//              Heap part
1570+ 2581             >
1570+ 2581             >
1570+ 2581             >                org     (Heap_Ptr & $1FFF) + $E000
1570+ E2C0             >
1570+ E2C0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1570+ E2C0             >Latest_Definition defl  Heap_Ptr
1570+ E2C0             >
1570+ E2C0             >                // dummy db directives used to calculate length of namec
1570+ E2C0 32 2D       >                db      "2-"
1570+ E2C2             >len_NFA         defl    $ - temp_NFA
1570+ E2C2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1570+ E2C0             >
1570+ E2C0 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1570+ E2C1 32 2D       >                db      "2-"               // name string in 7-bit ascii, but
1570+ E2C3             >                org     $-1                 // alter last byte of Name just above to set
1570+ E2C2 AD          >                db      {b $} | END_BIT     // msb as name end
1570+ E2C3             >
1570+ E2C3 B6 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1570+ E2C5             >Prev_Ptr        defl    Heap_Ptr
1570+ E2C5             >
1570+ E2C5             >mirror_Ptr      defl    $
1570+ E2C5             >
1570+ E2C5 83 25       >                dw      Dict_Ptr + 2        // xt
1570+ E2C7             >Heap_Ptr        defl    $ - $E000           // save current HP
1570+ E2C7             >
1570+ E2C7             >Current_HP      defl  $ - $E000             // used to set HP once!
1570+ E2C7             >
1570+ E2C7             >//              ______________________________________________________________________
1570+ E2C7             >//              Dictionary part
1570+ E2C7             >
1570+ E2C7             >                org     Dict_Ptr
1570+ 2581             >
1570+ 2581 C5 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1570+ 2583             >
1570+ 2583             >TWO_MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1570+ 2583 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1570+ 2583 ~           >
1570+ 2583 ~           >
1570+ 2583             >                endif           ; ok        // for other definitions it "points" the correct handler
1570+ 2583             >                // Use of "; ok" to suppress "warning[fwdref]"
1570+ 2583             >
1570+ 2583             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1571+ 2583 C3 7B 25                     jp      CellMinus
1572+ 2586
1573+ 2586              //  ______________________________________________________________________
1574+ 2586              //
1575+ 2586              // negate       n1 -- n2
1576+ 2586              // change the sign of number
1577+ 2586                              New_Def MINUS, "NEGATE", is_code, is_normal
1577+ 2586             >
1577+ 2586             >Dict_Ptr        defl    $
1577+ 2586             >
1577+ 2586             >//              ______________________________________________________________________
1577+ 2586             >//              Heap part
1577+ 2586             >
1577+ 2586             >
1577+ 2586             >                org     (Heap_Ptr & $1FFF) + $E000
1577+ E2C7             >
1577+ E2C7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1577+ E2C7             >Latest_Definition defl  Heap_Ptr
1577+ E2C7             >
1577+ E2C7             >                // dummy db directives used to calculate length of namec
1577+ E2C7 4E 45 47 41 >                db      "NEGATE"
1577+ E2CB 54 45       >
1577+ E2CD             >len_NFA         defl    $ - temp_NFA
1577+ E2CD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1577+ E2C7             >
1577+ E2C7 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1577+ E2C8 4E 45 47 41 >                db      "NEGATE"               // name string in 7-bit ascii, but
1577+ E2CC 54 45       >
1577+ E2CE             >                org     $-1                 // alter last byte of Name just above to set
1577+ E2CD C5          >                db      {b $} | END_BIT     // msb as name end
1577+ E2CE             >
1577+ E2CE C0 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1577+ E2D0             >Prev_Ptr        defl    Heap_Ptr
1577+ E2D0             >
1577+ E2D0             >mirror_Ptr      defl    $
1577+ E2D0             >
1577+ E2D0 88 25       >                dw      Dict_Ptr + 2        // xt
1577+ E2D2             >Heap_Ptr        defl    $ - $E000           // save current HP
1577+ E2D2             >
1577+ E2D2             >Current_HP      defl  $ - $E000             // used to set HP once!
1577+ E2D2             >
1577+ E2D2             >//              ______________________________________________________________________
1577+ E2D2             >//              Dictionary part
1577+ E2D2             >
1577+ E2D2             >                org     Dict_Ptr
1577+ 2586             >
1577+ 2586 D0 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1577+ 2588             >
1577+ 2588             >MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1577+ 2588 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1577+ 2588 ~           >
1577+ 2588 ~           >
1577+ 2588             >                endif           ; ok        // for other definitions it "points" the correct handler
1577+ 2588             >                // Use of "; ok" to suppress "warning[fwdref]"
1577+ 2588             >
1577+ 2588             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1578+ 2588 D9                           exx
1579+ 2589 21 00 00                     ld      hl, 0               // subtract from 0
1580+ 258C D1                           pop     de
1581+ 258D B7                           or      a
1582+ 258E ED 52                        sbc     hl, de
1583+ 2590 E5                           push    hl
1584+ 2591 D9                           exx
1585+ 2592                              next
1585+ 2592 DD E9       >                jp      (ix)
1586+ 2594
1587+ 2594              //  ______________________________________________________________________
1588+ 2594              //
1589+ 2594              // dnegate      d1 -- d2
1590+ 2594              // change the sign of a double number
1591+ 2594                              New_Def DMINUS, "DNEGATE", is_code, is_normal
1591+ 2594             >
1591+ 2594             >Dict_Ptr        defl    $
1591+ 2594             >
1591+ 2594             >//              ______________________________________________________________________
1591+ 2594             >//              Heap part
1591+ 2594             >
1591+ 2594             >
1591+ 2594             >                org     (Heap_Ptr & $1FFF) + $E000
1591+ E2D2             >
1591+ E2D2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1591+ E2D2             >Latest_Definition defl  Heap_Ptr
1591+ E2D2             >
1591+ E2D2             >                // dummy db directives used to calculate length of namec
1591+ E2D2 44 4E 45 47 >                db      "DNEGATE"
1591+ E2D6 41 54 45    >
1591+ E2D9             >len_NFA         defl    $ - temp_NFA
1591+ E2D9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1591+ E2D2             >
1591+ E2D2 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1591+ E2D3 44 4E 45 47 >                db      "DNEGATE"               // name string in 7-bit ascii, but
1591+ E2D7 41 54 45    >
1591+ E2DA             >                org     $-1                 // alter last byte of Name just above to set
1591+ E2D9 C5          >                db      {b $} | END_BIT     // msb as name end
1591+ E2DA             >
1591+ E2DA C7 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1591+ E2DC             >Prev_Ptr        defl    Heap_Ptr
1591+ E2DC             >
1591+ E2DC             >mirror_Ptr      defl    $
1591+ E2DC             >
1591+ E2DC 96 25       >                dw      Dict_Ptr + 2        // xt
1591+ E2DE             >Heap_Ptr        defl    $ - $E000           // save current HP
1591+ E2DE             >
1591+ E2DE             >Current_HP      defl  $ - $E000             // used to set HP once!
1591+ E2DE             >
1591+ E2DE             >//              ______________________________________________________________________
1591+ E2DE             >//              Dictionary part
1591+ E2DE             >
1591+ E2DE             >                org     Dict_Ptr
1591+ 2594             >
1591+ 2594 DC 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1591+ 2596             >
1591+ 2596             >DMINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1591+ 2596 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1591+ 2596 ~           >
1591+ 2596 ~           >
1591+ 2596             >                endif           ; ok        // for other definitions it "points" the correct handler
1591+ 2596             >                // Use of "; ok" to suppress "warning[fwdref]"
1591+ 2596             >
1591+ 2596             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1592+ 2596 D9                           exx
1593+ 2597 C1                           pop     bc                  // d1.H
1594+ 2598 D1                           pop     de                  // d1.L
1595+ 2599 AF                           xor     a
1596+ 259A 67                           ld      h, a
1597+ 259B 6F                           ld      l, a
1598+ 259C ED 52                        sbc     hl, de              // subtact from zero
1599+ 259E E5                           push    hl                  // > d2-L
1600+ 259F 67                           ld      h, a
1601+ 25A0 6F                           ld      l, a
1602+ 25A1 ED 42                        sbc     hl, bc              // subtract from zero with carry
1603+ 25A3                                                          // > d2-H
1604+ 25A3 E5                           push    hl
1605+ 25A4 D9                           exx
1606+ 25A5                              next
1606+ 25A5 DD E9       >                jp      (ix)
1607+ 25A7
1608+ 25A7              //  ______________________________________________________________________
1609+ 25A7              //
1610+ 25A7              // over         n1 n2 -- n1 n2 n1
1611+ 25A7              // copy the second value of stack and put it on top.
1612+ 25A7                              New_Def OVER, "OVER", is_code, is_normal
1612+ 25A7             >
1612+ 25A7             >Dict_Ptr        defl    $
1612+ 25A7             >
1612+ 25A7             >//              ______________________________________________________________________
1612+ 25A7             >//              Heap part
1612+ 25A7             >
1612+ 25A7             >
1612+ 25A7             >                org     (Heap_Ptr & $1FFF) + $E000
1612+ E2DE             >
1612+ E2DE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1612+ E2DE             >Latest_Definition defl  Heap_Ptr
1612+ E2DE             >
1612+ E2DE             >                // dummy db directives used to calculate length of namec
1612+ E2DE 4F 56 45 52 >                db      "OVER"
1612+ E2E2             >len_NFA         defl    $ - temp_NFA
1612+ E2E2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1612+ E2DE             >
1612+ E2DE 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1612+ E2DF 4F 56 45 52 >                db      "OVER"               // name string in 7-bit ascii, but
1612+ E2E3             >                org     $-1                 // alter last byte of Name just above to set
1612+ E2E2 D2          >                db      {b $} | END_BIT     // msb as name end
1612+ E2E3             >
1612+ E2E3 D2 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1612+ E2E5             >Prev_Ptr        defl    Heap_Ptr
1612+ E2E5             >
1612+ E2E5             >mirror_Ptr      defl    $
1612+ E2E5             >
1612+ E2E5 A9 25       >                dw      Dict_Ptr + 2        // xt
1612+ E2E7             >Heap_Ptr        defl    $ - $E000           // save current HP
1612+ E2E7             >
1612+ E2E7             >Current_HP      defl  $ - $E000             // used to set HP once!
1612+ E2E7             >
1612+ E2E7             >//              ______________________________________________________________________
1612+ E2E7             >//              Dictionary part
1612+ E2E7             >
1612+ E2E7             >                org     Dict_Ptr
1612+ 25A7             >
1612+ 25A7 E5 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1612+ 25A9             >
1612+ 25A9             >OVER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1612+ 25A9 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1612+ 25A9 ~           >
1612+ 25A9 ~           >
1612+ 25A9             >                endif           ; ok        // for other definitions it "points" the correct handler
1612+ 25A9             >                // Use of "; ok" to suppress "warning[fwdref]"
1612+ 25A9             >
1612+ 25A9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1613+ 25A9                              // exx     // we can use af instead OPTIMIZATION possible
1614+ 25A9 F1                           pop     af                  //   n2
1615+ 25AA E1                           pop     hl                  // < n1
1616+ 25AB E5                           push    hl                  // > n1
1617+ 25AC F5                           push    af                  // > n2
1618+ 25AD E5                           push    hl                  // > n1
1619+ 25AE                              // exx
1620+ 25AE                              next
1620+ 25AE DD E9       >                jp      (ix)
1621+ 25B0
1622+ 25B0              //  ______________________________________________________________________
1623+ 25B0              //
1624+ 25B0              // drop         n1 --
1625+ 25B0              // drops the top of stack
1626+ 25B0                              New_Def DROP, "DROP", is_code, is_normal
1626+ 25B0             >
1626+ 25B0             >Dict_Ptr        defl    $
1626+ 25B0             >
1626+ 25B0             >//              ______________________________________________________________________
1626+ 25B0             >//              Heap part
1626+ 25B0             >
1626+ 25B0             >
1626+ 25B0             >                org     (Heap_Ptr & $1FFF) + $E000
1626+ E2E7             >
1626+ E2E7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1626+ E2E7             >Latest_Definition defl  Heap_Ptr
1626+ E2E7             >
1626+ E2E7             >                // dummy db directives used to calculate length of namec
1626+ E2E7 44 52 4F 50 >                db      "DROP"
1626+ E2EB             >len_NFA         defl    $ - temp_NFA
1626+ E2EB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1626+ E2E7             >
1626+ E2E7 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1626+ E2E8 44 52 4F 50 >                db      "DROP"               // name string in 7-bit ascii, but
1626+ E2EC             >                org     $-1                 // alter last byte of Name just above to set
1626+ E2EB D0          >                db      {b $} | END_BIT     // msb as name end
1626+ E2EC             >
1626+ E2EC DE 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1626+ E2EE             >Prev_Ptr        defl    Heap_Ptr
1626+ E2EE             >
1626+ E2EE             >mirror_Ptr      defl    $
1626+ E2EE             >
1626+ E2EE B2 25       >                dw      Dict_Ptr + 2        // xt
1626+ E2F0             >Heap_Ptr        defl    $ - $E000           // save current HP
1626+ E2F0             >
1626+ E2F0             >Current_HP      defl  $ - $E000             // used to set HP once!
1626+ E2F0             >
1626+ E2F0             >//              ______________________________________________________________________
1626+ E2F0             >//              Dictionary part
1626+ E2F0             >
1626+ E2F0             >                org     Dict_Ptr
1626+ 25B0             >
1626+ 25B0 EE 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1626+ 25B2             >
1626+ 25B2             >DROP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1626+ 25B2 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1626+ 25B2 ~           >
1626+ 25B2 ~           >
1626+ 25B2             >                endif           ; ok        // for other definitions it "points" the correct handler
1626+ 25B2             >                // Use of "; ok" to suppress "warning[fwdref]"
1626+ 25B2             >
1626+ 25B2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1627+ 25B2 E1                           pop     hl                  // < n1 and discard previous TOS
1628+ 25B3                              next
1628+ 25B3 DD E9       >                jp      (ix)
1629+ 25B5
1630+ 25B5              //  ______________________________________________________________________
1631+ 25B5              //
1632+ 25B5              // nip          n1 n2 -- n2
1633+ 25B5              // drops the second elemento on the stack
1634+ 25B5                              New_Def NIP, "NIP", is_code, is_normal
1634+ 25B5             >
1634+ 25B5             >Dict_Ptr        defl    $
1634+ 25B5             >
1634+ 25B5             >//              ______________________________________________________________________
1634+ 25B5             >//              Heap part
1634+ 25B5             >
1634+ 25B5             >
1634+ 25B5             >                org     (Heap_Ptr & $1FFF) + $E000
1634+ E2F0             >
1634+ E2F0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1634+ E2F0             >Latest_Definition defl  Heap_Ptr
1634+ E2F0             >
1634+ E2F0             >                // dummy db directives used to calculate length of namec
1634+ E2F0 4E 49 50    >                db      "NIP"
1634+ E2F3             >len_NFA         defl    $ - temp_NFA
1634+ E2F3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1634+ E2F0             >
1634+ E2F0 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1634+ E2F1 4E 49 50    >                db      "NIP"               // name string in 7-bit ascii, but
1634+ E2F4             >                org     $-1                 // alter last byte of Name just above to set
1634+ E2F3 D0          >                db      {b $} | END_BIT     // msb as name end
1634+ E2F4             >
1634+ E2F4 E7 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1634+ E2F6             >Prev_Ptr        defl    Heap_Ptr
1634+ E2F6             >
1634+ E2F6             >mirror_Ptr      defl    $
1634+ E2F6             >
1634+ E2F6 B7 25       >                dw      Dict_Ptr + 2        // xt
1634+ E2F8             >Heap_Ptr        defl    $ - $E000           // save current HP
1634+ E2F8             >
1634+ E2F8             >Current_HP      defl  $ - $E000             // used to set HP once!
1634+ E2F8             >
1634+ E2F8             >//              ______________________________________________________________________
1634+ E2F8             >//              Dictionary part
1634+ E2F8             >
1634+ E2F8             >                org     Dict_Ptr
1634+ 25B5             >
1634+ 25B5 F6 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1634+ 25B7             >
1634+ 25B7             >NIP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1634+ 25B7 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1634+ 25B7 ~           >
1634+ 25B7 ~           >
1634+ 25B7             >                endif           ; ok        // for other definitions it "points" the correct handler
1634+ 25B7             >                // Use of "; ok" to suppress "warning[fwdref]"
1634+ 25B7             >
1634+ 25B7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1635+ 25B7
1636+ 25B7 E1                           pop     hl                  // < n1 discarded
1637+ 25B8 E3                           ex      (sp), hl
1638+ 25B9                              next
1638+ 25B9 DD E9       >                jp      (ix)
1639+ 25BB
1640+ 25BB              //  ______________________________________________________________________
1641+ 25BB              //
1642+ 25BB              // tuck         n1 n2 -- n2 n1 n2
1643+ 25BB              // copy the top element after the second.
1644+ 25BB                              New_Def TUCK, "TUCK", is_code, is_normal
1644+ 25BB             >
1644+ 25BB             >Dict_Ptr        defl    $
1644+ 25BB             >
1644+ 25BB             >//              ______________________________________________________________________
1644+ 25BB             >//              Heap part
1644+ 25BB             >
1644+ 25BB             >
1644+ 25BB             >                org     (Heap_Ptr & $1FFF) + $E000
1644+ E2F8             >
1644+ E2F8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1644+ E2F8             >Latest_Definition defl  Heap_Ptr
1644+ E2F8             >
1644+ E2F8             >                // dummy db directives used to calculate length of namec
1644+ E2F8 54 55 43 4B >                db      "TUCK"
1644+ E2FC             >len_NFA         defl    $ - temp_NFA
1644+ E2FC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1644+ E2F8             >
1644+ E2F8 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1644+ E2F9 54 55 43 4B >                db      "TUCK"               // name string in 7-bit ascii, but
1644+ E2FD             >                org     $-1                 // alter last byte of Name just above to set
1644+ E2FC CB          >                db      {b $} | END_BIT     // msb as name end
1644+ E2FD             >
1644+ E2FD F0 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1644+ E2FF             >Prev_Ptr        defl    Heap_Ptr
1644+ E2FF             >
1644+ E2FF             >mirror_Ptr      defl    $
1644+ E2FF             >
1644+ E2FF BD 25       >                dw      Dict_Ptr + 2        // xt
1644+ E301             >Heap_Ptr        defl    $ - $E000           // save current HP
1644+ E301             >
1644+ E301             >Current_HP      defl  $ - $E000             // used to set HP once!
1644+ E301             >
1644+ E301             >//              ______________________________________________________________________
1644+ E301             >//              Dictionary part
1644+ E301             >
1644+ E301             >                org     Dict_Ptr
1644+ 25BB             >
1644+ 25BB FF 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1644+ 25BD             >
1644+ 25BD             >TUCK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1644+ 25BD ~           >                call    runcode ; ok        // for primitive definitions  actual code
1644+ 25BD ~           >
1644+ 25BD ~           >
1644+ 25BD             >                endif           ; ok        // for other definitions it "points" the correct handler
1644+ 25BD             >                // Use of "; ok" to suppress "warning[fwdref]"
1644+ 25BD             >
1644+ 25BD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1645+ 25BD E1                           pop     hl
1646+ 25BE F1                           pop     af                  // < n1
1647+ 25BF E5                           push    hl                  // > n2  and TOS
1648+ 25C0 F5                           push    af                  // > n1
1649+ 25C1 E5                           push    hl
1650+ 25C2                              next
1650+ 25C2 DD E9       >                jp      (ix)
1651+ 25C4
1652+ 25C4              //  ______________________________________________________________________
1653+ 25C4              //
1654+ 25C4              // swap         n1 n2 -- n2 n1
1655+ 25C4              // swaps the two values on top of stack
1656+ 25C4                              New_Def SWAP, "SWAP", is_code, is_normal
1656+ 25C4             >
1656+ 25C4             >Dict_Ptr        defl    $
1656+ 25C4             >
1656+ 25C4             >//              ______________________________________________________________________
1656+ 25C4             >//              Heap part
1656+ 25C4             >
1656+ 25C4             >
1656+ 25C4             >                org     (Heap_Ptr & $1FFF) + $E000
1656+ E301             >
1656+ E301             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1656+ E301             >Latest_Definition defl  Heap_Ptr
1656+ E301             >
1656+ E301             >                // dummy db directives used to calculate length of namec
1656+ E301 53 57 41 50 >                db      "SWAP"
1656+ E305             >len_NFA         defl    $ - temp_NFA
1656+ E305             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1656+ E301             >
1656+ E301 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1656+ E302 53 57 41 50 >                db      "SWAP"               // name string in 7-bit ascii, but
1656+ E306             >                org     $-1                 // alter last byte of Name just above to set
1656+ E305 D0          >                db      {b $} | END_BIT     // msb as name end
1656+ E306             >
1656+ E306 F8 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1656+ E308             >Prev_Ptr        defl    Heap_Ptr
1656+ E308             >
1656+ E308             >mirror_Ptr      defl    $
1656+ E308             >
1656+ E308 C6 25       >                dw      Dict_Ptr + 2        // xt
1656+ E30A             >Heap_Ptr        defl    $ - $E000           // save current HP
1656+ E30A             >
1656+ E30A             >Current_HP      defl  $ - $E000             // used to set HP once!
1656+ E30A             >
1656+ E30A             >//              ______________________________________________________________________
1656+ E30A             >//              Dictionary part
1656+ E30A             >
1656+ E30A             >                org     Dict_Ptr
1656+ 25C4             >
1656+ 25C4 08 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1656+ 25C6             >
1656+ 25C6             >SWAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1656+ 25C6 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1656+ 25C6 ~           >
1656+ 25C6 ~           >
1656+ 25C6             >                endif           ; ok        // for other definitions it "points" the correct handler
1656+ 25C6             >                // Use of "; ok" to suppress "warning[fwdref]"
1656+ 25C6             >
1656+ 25C6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1657+ 25C6 E1                           pop     hl                  // < n1
1658+ 25C7 E3                           ex      (sp),hl             // > n2
1659+ 25C8 E5                           push    hl                  // copy n1 to TOS
1660+ 25C9                              next
1660+ 25C9 DD E9       >                jp      (ix)
1661+ 25CB
1662+ 25CB              //  ______________________________________________________________________
1663+ 25CB              //
1664+ 25CB              // dup         n -- n n
1665+ 25CB              // duplicates the top value of stack
1666+ 25CB                              New_Def DUP, "DUP", is_code, is_normal
1666+ 25CB             >
1666+ 25CB             >Dict_Ptr        defl    $
1666+ 25CB             >
1666+ 25CB             >//              ______________________________________________________________________
1666+ 25CB             >//              Heap part
1666+ 25CB             >
1666+ 25CB             >
1666+ 25CB             >                org     (Heap_Ptr & $1FFF) + $E000
1666+ E30A             >
1666+ E30A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1666+ E30A             >Latest_Definition defl  Heap_Ptr
1666+ E30A             >
1666+ E30A             >                // dummy db directives used to calculate length of namec
1666+ E30A 44 55 50    >                db      "DUP"
1666+ E30D             >len_NFA         defl    $ - temp_NFA
1666+ E30D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1666+ E30A             >
1666+ E30A 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1666+ E30B 44 55 50    >                db      "DUP"               // name string in 7-bit ascii, but
1666+ E30E             >                org     $-1                 // alter last byte of Name just above to set
1666+ E30D D0          >                db      {b $} | END_BIT     // msb as name end
1666+ E30E             >
1666+ E30E 01 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1666+ E310             >Prev_Ptr        defl    Heap_Ptr
1666+ E310             >
1666+ E310             >mirror_Ptr      defl    $
1666+ E310             >
1666+ E310 CD 25       >                dw      Dict_Ptr + 2        // xt
1666+ E312             >Heap_Ptr        defl    $ - $E000           // save current HP
1666+ E312             >
1666+ E312             >Current_HP      defl  $ - $E000             // used to set HP once!
1666+ E312             >
1666+ E312             >//              ______________________________________________________________________
1666+ E312             >//              Dictionary part
1666+ E312             >
1666+ E312             >                org     Dict_Ptr
1666+ 25CB             >
1666+ 25CB 10 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1666+ 25CD             >
1666+ 25CD             >DUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1666+ 25CD ~           >                call    runcode ; ok        // for primitive definitions  actual code
1666+ 25CD ~           >
1666+ 25CD ~           >
1666+ 25CD             >                endif           ; ok        // for other definitions it "points" the correct handler
1666+ 25CD             >                // Use of "; ok" to suppress "warning[fwdref]"
1666+ 25CD             >
1666+ 25CD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1667+ 25CD E1                           pop     hl
1668+ 25CE E5                           push    hl                  // > n duplicate TOS
1669+ 25CF E5                           push    hl
1670+ 25D0                              next
1670+ 25D0 DD E9       >                jp      (ix)
1671+ 25D2
1672+ 25D2              //  ______________________________________________________________________
1673+ 25D2              //
1674+ 25D2              // rot         n1 n2 n3 -- n2 n3 n1
1675+ 25D2              // Rotates the 3 top values of stack by picking the 3rd in access-order
1676+ 25D2              // and putting it on top. The other two are shifted down one place.
1677+ 25D2                              New_Def ROT, "ROT", is_code, is_normal
1677+ 25D2             >
1677+ 25D2             >Dict_Ptr        defl    $
1677+ 25D2             >
1677+ 25D2             >//              ______________________________________________________________________
1677+ 25D2             >//              Heap part
1677+ 25D2             >
1677+ 25D2             >
1677+ 25D2             >                org     (Heap_Ptr & $1FFF) + $E000
1677+ E312             >
1677+ E312             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1677+ E312             >Latest_Definition defl  Heap_Ptr
1677+ E312             >
1677+ E312             >                // dummy db directives used to calculate length of namec
1677+ E312 52 4F 54    >                db      "ROT"
1677+ E315             >len_NFA         defl    $ - temp_NFA
1677+ E315             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1677+ E312             >
1677+ E312 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1677+ E313 52 4F 54    >                db      "ROT"               // name string in 7-bit ascii, but
1677+ E316             >                org     $-1                 // alter last byte of Name just above to set
1677+ E315 D4          >                db      {b $} | END_BIT     // msb as name end
1677+ E316             >
1677+ E316 0A 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1677+ E318             >Prev_Ptr        defl    Heap_Ptr
1677+ E318             >
1677+ E318             >mirror_Ptr      defl    $
1677+ E318             >
1677+ E318 D4 25       >                dw      Dict_Ptr + 2        // xt
1677+ E31A             >Heap_Ptr        defl    $ - $E000           // save current HP
1677+ E31A             >
1677+ E31A             >Current_HP      defl  $ - $E000             // used to set HP once!
1677+ E31A             >
1677+ E31A             >//              ______________________________________________________________________
1677+ E31A             >//              Dictionary part
1677+ E31A             >
1677+ E31A             >                org     Dict_Ptr
1677+ 25D2             >
1677+ 25D2 18 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1677+ 25D4             >
1677+ 25D4             >ROT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1677+ 25D4 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1677+ 25D4 ~           >
1677+ 25D4 ~           >
1677+ 25D4             >                endif           ; ok        // for other definitions it "points" the correct handler
1677+ 25D4             >                // Use of "; ok" to suppress "warning[fwdref]"
1677+ 25D4             >
1677+ 25D4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1678+ 25D4 D9                           exx
1679+ 25D5 D1                           pop     de                  // < n3
1680+ 25D6 E1                           pop     hl                  // < n2
1681+ 25D7 E3                           ex      (sp),hl             // > n2 < n1
1682+ 25D8 D5                           push    de                  // > n3
1683+ 25D9 E5                           push    hl                  // copy n1 to TOS
1684+ 25DA D9                           exx
1685+ 25DB                              next
1685+ 25DB DD E9       >                jp      (ix)
1686+ 25DD
1687+ 25DD              //  ______________________________________________________________________
1688+ 25DD              //
1689+ 25DD              // -rot         n1 n2 n3 -- n3 n1 n2
1690+ 25DD              // Rotates the 3 top values of stack by picking the 1st in access-order
1691+ 25DD              // and putting back to 3rd place. The other two are shifted down one place.
1692+ 25DD                              New_Def DASH_ROT, "-ROT", is_code, is_normal
1692+ 25DD             >
1692+ 25DD             >Dict_Ptr        defl    $
1692+ 25DD             >
1692+ 25DD             >//              ______________________________________________________________________
1692+ 25DD             >//              Heap part
1692+ 25DD             >
1692+ 25DD             >
1692+ 25DD             >                org     (Heap_Ptr & $1FFF) + $E000
1692+ E31A             >
1692+ E31A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1692+ E31A             >Latest_Definition defl  Heap_Ptr
1692+ E31A             >
1692+ E31A             >                // dummy db directives used to calculate length of namec
1692+ E31A 2D 52 4F 54 >                db      "-ROT"
1692+ E31E             >len_NFA         defl    $ - temp_NFA
1692+ E31E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1692+ E31A             >
1692+ E31A 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1692+ E31B 2D 52 4F 54 >                db      "-ROT"               // name string in 7-bit ascii, but
1692+ E31F             >                org     $-1                 // alter last byte of Name just above to set
1692+ E31E D4          >                db      {b $} | END_BIT     // msb as name end
1692+ E31F             >
1692+ E31F 12 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1692+ E321             >Prev_Ptr        defl    Heap_Ptr
1692+ E321             >
1692+ E321             >mirror_Ptr      defl    $
1692+ E321             >
1692+ E321 DF 25       >                dw      Dict_Ptr + 2        // xt
1692+ E323             >Heap_Ptr        defl    $ - $E000           // save current HP
1692+ E323             >
1692+ E323             >Current_HP      defl  $ - $E000             // used to set HP once!
1692+ E323             >
1692+ E323             >//              ______________________________________________________________________
1692+ E323             >//              Dictionary part
1692+ E323             >
1692+ E323             >                org     Dict_Ptr
1692+ 25DD             >
1692+ 25DD 21 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1692+ 25DF             >
1692+ 25DF             >DASH_ROT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1692+ 25DF ~           >                call    runcode ; ok        // for primitive definitions  actual code
1692+ 25DF ~           >
1692+ 25DF ~           >
1692+ 25DF             >                endif           ; ok        // for other definitions it "points" the correct handler
1692+ 25DF             >                // Use of "; ok" to suppress "warning[fwdref]"
1692+ 25DF             >
1692+ 25DF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1693+ 25DF D9                           exx
1694+ 25E0 E1                           pop     hl                  // < n3
1695+ 25E1 D1                           pop     de                  // < n2
1696+ 25E2 E3                           ex      (sp),hl             // > n3 < n1
1697+ 25E3 E5                           push    hl                  // > n1
1698+ 25E4 D5                           push    de                  // copy n3 to TOS
1699+ 25E5 D9                           exx
1700+ 25E6                              next
1700+ 25E6 DD E9       >                jp      (ix)
1701+ 25E8
1702+ 25E8              //  ______________________________________________________________________
1703+ 25E8              //
1704+ 25E8              // pick        n1 -- nx
1705+ 25E8              // picks the nth element from TOS
1706+ 25E8                              New_Def PICK, "PICK", is_code, is_normal
1706+ 25E8             >
1706+ 25E8             >Dict_Ptr        defl    $
1706+ 25E8             >
1706+ 25E8             >//              ______________________________________________________________________
1706+ 25E8             >//              Heap part
1706+ 25E8             >
1706+ 25E8             >
1706+ 25E8             >                org     (Heap_Ptr & $1FFF) + $E000
1706+ E323             >
1706+ E323             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1706+ E323             >Latest_Definition defl  Heap_Ptr
1706+ E323             >
1706+ E323             >                // dummy db directives used to calculate length of namec
1706+ E323 50 49 43 4B >                db      "PICK"
1706+ E327             >len_NFA         defl    $ - temp_NFA
1706+ E327             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1706+ E323             >
1706+ E323 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1706+ E324 50 49 43 4B >                db      "PICK"               // name string in 7-bit ascii, but
1706+ E328             >                org     $-1                 // alter last byte of Name just above to set
1706+ E327 CB          >                db      {b $} | END_BIT     // msb as name end
1706+ E328             >
1706+ E328 1A 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1706+ E32A             >Prev_Ptr        defl    Heap_Ptr
1706+ E32A             >
1706+ E32A             >mirror_Ptr      defl    $
1706+ E32A             >
1706+ E32A EA 25       >                dw      Dict_Ptr + 2        // xt
1706+ E32C             >Heap_Ptr        defl    $ - $E000           // save current HP
1706+ E32C             >
1706+ E32C             >Current_HP      defl  $ - $E000             // used to set HP once!
1706+ E32C             >
1706+ E32C             >//              ______________________________________________________________________
1706+ E32C             >//              Dictionary part
1706+ E32C             >
1706+ E32C             >                org     Dict_Ptr
1706+ 25E8             >
1706+ 25E8 2A 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1706+ 25EA             >
1706+ 25EA             >PICK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1706+ 25EA ~           >                call    runcode ; ok        // for primitive definitions  actual code
1706+ 25EA ~           >
1706+ 25EA ~           >
1706+ 25EA             >                endif           ; ok        // for other definitions it "points" the correct handler
1706+ 25EA             >                // Use of "; ok" to suppress "warning[fwdref]"
1706+ 25EA             >
1706+ 25EA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1707+ 25EA E1                           pop     hl                  // take TOS as index
1708+ 25EB 29                           add     hl, hl              // as cells
1709+ 25EC 39                           add     hl, sp              // from Stack Pointer
1710+ 25ED 7E                           ld      a, (hl)             // replace TOS
1711+ 25EE 23                           inc     hl
1712+ 25EF 66                           ld      h, (hl)
1713+ 25F0 6F                           ld      l, a
1714+ 25F1 E5                           push    hl
1715+ 25F2                              next
1715+ 25F2 DD E9       >                jp      (ix)
1716+ 25F4
1717+ 25F4
1718+ 25F4              //  ______________________________________________________________________
1719+ 25F4              //
1720+ 25F4              // roll        n1 n2 n3 ... n -- n2 n3 ... n1
1721+ 25F4              // picks the nth element from TOS
1722+ 25F4              //              New_Def ROLL, "ROLL", is_code, is_normal
1723+ 25F4              //              exx                     // we need all registers free
1724+ 25F4              //              pop     hl              // number of cells to roll
1725+ 25F4              //              ld      a, h
1726+ 25F4              //              or       l
1727+ 25F4              //              jr      z, Roll_Zero
1728+ 25F4              //                  add     hl, hl              // number of bytes to move
1729+ 25F4              //                  ld      b, h
1730+ 25F4              //                  ld      c, l
1731+ 25F4              //                  add     hl, sp          // address of n1
1732+ 25F4              //                  ld      a, (hl)         // take n1 into a and a,
1733+ 25F4              //                  inc     hl
1734+ 25F4              //                  ex      af, af'
1735+ 25F4              //                  ld      a, (hl)         // take n1 into a and a,
1736+ 25F4              //                  ld      d, h
1737+ 25F4              //                  ld      e, l
1738+ 25F4              //                  dec     hl
1739+ 25F4              //                  dec     hl
1740+ 25F4              //                  lddr
1741+ 25F4              //                  ex      de, hl
1742+ 25F4              //                  ld      (hl), a
1743+ 25F4              //                  dec     hl
1744+ 25F4              //                  ex      af, af'
1745+ 25F4              //                  ld      (hl), a
1746+ 25F4              //Roll_Zero:
1747+ 25F4              //              exx
1748+ 25F4              //              next
1749+ 25F4
1750+ 25F4
1751+ 25F4              //  ______________________________________________________________________
1752+ 25F4              //
1753+ 25F4              // 2over        d1 d2 -- d1 d2 d1
1754+ 25F4              //              n1 n2 n3 n4 -- n1 n2 n3 n4 n1 n2
1755+ 25F4              // copy the second double of stack and put on top.
1756+ 25F4                              New_Def TWO_OVER, "2OVER", is_code, is_normal
1756+ 25F4             >
1756+ 25F4             >Dict_Ptr        defl    $
1756+ 25F4             >
1756+ 25F4             >//              ______________________________________________________________________
1756+ 25F4             >//              Heap part
1756+ 25F4             >
1756+ 25F4             >
1756+ 25F4             >                org     (Heap_Ptr & $1FFF) + $E000
1756+ E32C             >
1756+ E32C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1756+ E32C             >Latest_Definition defl  Heap_Ptr
1756+ E32C             >
1756+ E32C             >                // dummy db directives used to calculate length of namec
1756+ E32C 32 4F 56 45 >                db      "2OVER"
1756+ E330 52          >
1756+ E331             >len_NFA         defl    $ - temp_NFA
1756+ E331             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1756+ E32C             >
1756+ E32C 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1756+ E32D 32 4F 56 45 >                db      "2OVER"               // name string in 7-bit ascii, but
1756+ E331 52          >
1756+ E332             >                org     $-1                 // alter last byte of Name just above to set
1756+ E331 D2          >                db      {b $} | END_BIT     // msb as name end
1756+ E332             >
1756+ E332 23 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1756+ E334             >Prev_Ptr        defl    Heap_Ptr
1756+ E334             >
1756+ E334             >mirror_Ptr      defl    $
1756+ E334             >
1756+ E334 F6 25       >                dw      Dict_Ptr + 2        // xt
1756+ E336             >Heap_Ptr        defl    $ - $E000           // save current HP
1756+ E336             >
1756+ E336             >Current_HP      defl  $ - $E000             // used to set HP once!
1756+ E336             >
1756+ E336             >//              ______________________________________________________________________
1756+ E336             >//              Dictionary part
1756+ E336             >
1756+ E336             >                org     Dict_Ptr
1756+ 25F4             >
1756+ 25F4 34 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1756+ 25F6             >
1756+ 25F6             >TWO_OVER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1756+ 25F6 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1756+ 25F6 ~           >
1756+ 25F6 ~           >
1756+ 25F6             >                endif           ; ok        // for other definitions it "points" the correct handler
1756+ 25F6             >                // Use of "; ok" to suppress "warning[fwdref]"
1756+ 25F6             >
1756+ 25F6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1757+ 25F6 D9                           exx
1758+ 25F7 21 07 00                     ld      hl, 7
1759+ 25FA 39                           add     hl, sp
1760+ 25FB 56                           ld      d, (hl)
1761+ 25FC 2B                           dec     hl
1762+ 25FD 5E                           ld      e, (hl)             // d1-L
1763+ 25FE D5                           push    de
1764+ 25FF 2B                           dec     hl
1765+ 2600 56                           ld      d, (hl)
1766+ 2601 2B                           dec     hl
1767+ 2602 5E                           ld      e, (hl)             // d1-H
1768+ 2603 D5                           push    de
1769+ 2604 D9                           exx
1770+ 2605                              next
1770+ 2605 DD E9       >                jp      (ix)
1771+ 2607
1772+ 2607              //  ______________________________________________________________________
1773+ 2607              //
1774+ 2607              // 2drop        d --
1775+ 2607              //              n1 n2 --
1776+ 2607              // drops the top double from stack
1777+ 2607                              New_Def TWO_DROP, "2DROP", is_code, is_normal
1777+ 2607             >
1777+ 2607             >Dict_Ptr        defl    $
1777+ 2607             >
1777+ 2607             >//              ______________________________________________________________________
1777+ 2607             >//              Heap part
1777+ 2607             >
1777+ 2607             >
1777+ 2607             >                org     (Heap_Ptr & $1FFF) + $E000
1777+ E336             >
1777+ E336             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1777+ E336             >Latest_Definition defl  Heap_Ptr
1777+ E336             >
1777+ E336             >                // dummy db directives used to calculate length of namec
1777+ E336 32 44 52 4F >                db      "2DROP"
1777+ E33A 50          >
1777+ E33B             >len_NFA         defl    $ - temp_NFA
1777+ E33B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1777+ E336             >
1777+ E336 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1777+ E337 32 44 52 4F >                db      "2DROP"               // name string in 7-bit ascii, but
1777+ E33B 50          >
1777+ E33C             >                org     $-1                 // alter last byte of Name just above to set
1777+ E33B D0          >                db      {b $} | END_BIT     // msb as name end
1777+ E33C             >
1777+ E33C 2C 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1777+ E33E             >Prev_Ptr        defl    Heap_Ptr
1777+ E33E             >
1777+ E33E             >mirror_Ptr      defl    $
1777+ E33E             >
1777+ E33E 09 26       >                dw      Dict_Ptr + 2        // xt
1777+ E340             >Heap_Ptr        defl    $ - $E000           // save current HP
1777+ E340             >
1777+ E340             >Current_HP      defl  $ - $E000             // used to set HP once!
1777+ E340             >
1777+ E340             >//              ______________________________________________________________________
1777+ E340             >//              Dictionary part
1777+ E340             >
1777+ E340             >                org     Dict_Ptr
1777+ 2607             >
1777+ 2607 3E 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1777+ 2609             >
1777+ 2609             >TWO_DROP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1777+ 2609 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1777+ 2609 ~           >
1777+ 2609 ~           >
1777+ 2609             >                endif           ; ok        // for other definitions it "points" the correct handler
1777+ 2609             >                // Use of "; ok" to suppress "warning[fwdref]"
1777+ 2609             >
1777+ 2609             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1778+ 2609 E1                           pop     hl
1779+ 260A E1                           pop     hl
1780+ 260B                              next
1780+ 260B DD E9       >                jp      (ix)
1781+ 260D
1782+ 260D              //  ______________________________________________________________________
1783+ 260D              //
1784+ 260D              // 2nip         d1 d2 -- d2
1785+ 260D              //              n1 n2 n3 n4 -- n3 n4
1786+ 260D              // drops the second double on the stack
1787+ 260D              //              New_Def TWO_NIP, 4, "2nip"
1788+ 260D              //              ...
1789+ 260D
1790+ 260D              //  ______________________________________________________________________
1791+ 260D              //
1792+ 260D              // 2tuck         d1 d2 -- d2 d1 d2
1793+ 260D              // copy the top element after the second.
1794+ 260D              //              New_Def TWO_TUCK, 5, "2tuck"
1795+ 260D              //              ...
1796+ 260D
1797+ 260D              //  ______________________________________________________________________
1798+ 260D              //
1799+ 260D              // 2swap         d1 d2 -- d2 d1
1800+ 260D              //               n1 n2 n3 n4 -- n3 n4 n1 n2
1801+ 260D              // swaps the two doubles on top of stack
1802+ 260D                              New_Def TWO_SWAP, "2SWAP", is_code, is_normal
1802+ 260D             >
1802+ 260D             >Dict_Ptr        defl    $
1802+ 260D             >
1802+ 260D             >//              ______________________________________________________________________
1802+ 260D             >//              Heap part
1802+ 260D             >
1802+ 260D             >
1802+ 260D             >                org     (Heap_Ptr & $1FFF) + $E000
1802+ E340             >
1802+ E340             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1802+ E340             >Latest_Definition defl  Heap_Ptr
1802+ E340             >
1802+ E340             >                // dummy db directives used to calculate length of namec
1802+ E340 32 53 57 41 >                db      "2SWAP"
1802+ E344 50          >
1802+ E345             >len_NFA         defl    $ - temp_NFA
1802+ E345             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1802+ E340             >
1802+ E340 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1802+ E341 32 53 57 41 >                db      "2SWAP"               // name string in 7-bit ascii, but
1802+ E345 50          >
1802+ E346             >                org     $-1                 // alter last byte of Name just above to set
1802+ E345 D0          >                db      {b $} | END_BIT     // msb as name end
1802+ E346             >
1802+ E346 36 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1802+ E348             >Prev_Ptr        defl    Heap_Ptr
1802+ E348             >
1802+ E348             >mirror_Ptr      defl    $
1802+ E348             >
1802+ E348 0F 26       >                dw      Dict_Ptr + 2        // xt
1802+ E34A             >Heap_Ptr        defl    $ - $E000           // save current HP
1802+ E34A             >
1802+ E34A             >Current_HP      defl  $ - $E000             // used to set HP once!
1802+ E34A             >
1802+ E34A             >//              ______________________________________________________________________
1802+ E34A             >//              Dictionary part
1802+ E34A             >
1802+ E34A             >                org     Dict_Ptr
1802+ 260D             >
1802+ 260D 48 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1802+ 260F             >
1802+ 260F             >TWO_SWAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1802+ 260F ~           >                call    runcode ; ok        // for primitive definitions  actual code
1802+ 260F ~           >
1802+ 260F ~           >
1802+ 260F             >                endif           ; ok        // for other definitions it "points" the correct handler
1802+ 260F             >                // Use of "; ok" to suppress "warning[fwdref]"
1802+ 260F             >
1802+ 260F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1803+ 260F D9                           exx
1804+ 2610 F1                           pop     af                  //   d2-H
1805+ 2611 E1                           pop     hl                  // < d2-L
1806+ 2612 D1                           pop     de                  // < d1-H
1807+ 2613 E3                           ex      (sp), hl            // < d1-L > d2-L
1808+ 2614 F5                           push    af                  // > d2-H
1809+ 2615 E5                           push    hl                  // > d1-L
1810+ 2616 D5                           push    de
1811+ 2617 D9                           exx
1812+ 2618                              next
1812+ 2618 DD E9       >                jp      (ix)
1813+ 261A
1814+ 261A              //  ______________________________________________________________________
1815+ 261A              //
1816+ 261A              // 2dup         d -- d d
1817+ 261A              //              n1 n2 -- n1 n2 n1 n2
1818+ 261A              // duplicates the top double of stack
1819+ 261A                              New_Def TWO_DUP, "2DUP", is_code, is_normal
1819+ 261A             >
1819+ 261A             >Dict_Ptr        defl    $
1819+ 261A             >
1819+ 261A             >//              ______________________________________________________________________
1819+ 261A             >//              Heap part
1819+ 261A             >
1819+ 261A             >
1819+ 261A             >                org     (Heap_Ptr & $1FFF) + $E000
1819+ E34A             >
1819+ E34A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1819+ E34A             >Latest_Definition defl  Heap_Ptr
1819+ E34A             >
1819+ E34A             >                // dummy db directives used to calculate length of namec
1819+ E34A 32 44 55 50 >                db      "2DUP"
1819+ E34E             >len_NFA         defl    $ - temp_NFA
1819+ E34E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1819+ E34A             >
1819+ E34A 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1819+ E34B 32 44 55 50 >                db      "2DUP"               // name string in 7-bit ascii, but
1819+ E34F             >                org     $-1                 // alter last byte of Name just above to set
1819+ E34E D0          >                db      {b $} | END_BIT     // msb as name end
1819+ E34F             >
1819+ E34F 40 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1819+ E351             >Prev_Ptr        defl    Heap_Ptr
1819+ E351             >
1819+ E351             >mirror_Ptr      defl    $
1819+ E351             >
1819+ E351 1C 26       >                dw      Dict_Ptr + 2        // xt
1819+ E353             >Heap_Ptr        defl    $ - $E000           // save current HP
1819+ E353             >
1819+ E353             >Current_HP      defl  $ - $E000             // used to set HP once!
1819+ E353             >
1819+ E353             >//              ______________________________________________________________________
1819+ E353             >//              Dictionary part
1819+ E353             >
1819+ E353             >                org     Dict_Ptr
1819+ 261A             >
1819+ 261A 51 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1819+ 261C             >
1819+ 261C             >TWO_DUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1819+ 261C ~           >                call    runcode ; ok        // for primitive definitions  actual code
1819+ 261C ~           >
1819+ 261C ~           >
1819+ 261C             >                endif           ; ok        // for other definitions it "points" the correct handler
1819+ 261C             >                // Use of "; ok" to suppress "warning[fwdref]"
1819+ 261C             >
1819+ 261C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1820+ 261C E1                           pop     hl                  // < d-H
1821+ 261D F1                           pop     af                  // < d-L
1822+ 261E F5                           push    af                  // < d-L
1823+ 261F E5                           push    hl                  // > d-H
1824+ 2620 F5                           push    af                  // > d-L
1825+ 2621 E5                           push    hl                  // > d-H
1826+ 2622                              next
1826+ 2622 DD E9       >                jp      (ix)
1827+ 2624
1828+ 2624              //  ______________________________________________________________________
1829+ 2624              //
1830+ 2624              // 2rot         d1 d2 d3 -- d2 d3 d1
1831+ 2624              //              n1 n2 n3 n4 n5 n6 -- n3 n4 n5 n6 n1 n2
1832+ 2624              // Rotates the 3 top doubles of stack by picking the 3rd in access-order
1833+ 2624              // and putting it on top. The other two are shifted down one place.
1834+ 2624              //              New_Def TWO?ROT, 4, "2rot"
1835+ 2624              //              ...
1836+ 2624              //              New_Def TWO_ROT, "2ROT", is_code, is_normal
1837+ 2624              //
1838+ 2624              //      d3  |d2  |d1  |
1839+ 2624              //      h l |h l |h l |
1840+ 2624              // SP   LHED|LHED|LHED|
1841+ 2624              // SP  +0123|4567|89ab|
1842+ 2624              //              ld      hl, $000B
1843+ 2624              //              add     hl, sp
1844+ 2624              //              ld      d, (hl)
1845+ 2624              //              dec     hl
1846+ 2624              //              ld      e, (hl)
1847+ 2624              //              dec     hl
1848+ 2624              //              push    de
1849+ 2624              //              ld      d, (hl)
1850+ 2624              //              dec     hl
1851+ 2624              //              ld      e, (hl)
1852+ 2624              //              dec     hl
1853+ 2624              //              push    de
1854+ 2624
1855+ 2624              //      d1  |d3  |d2  |d1  |
1856+ 2624              //      h l |h l |h l |h l |
1857+ 2624              // SP   LHED|LHED|LHED|LHED|
1858+ 2624              // SP       +0123|4567|89ab|
1859+ 2624
1860+ 2624              //              ld      d, h
1861+ 2624              //              ld      e, l
1862+ 2624              //              inc     de
1863+ 2624              //              inc     de
1864+ 2624              //              inc     de
1865+ 2624              //              inc     de
1866+ 2624              //              push    bc
1867+ 2624              //              ld      bc, $000C
1868+ 2624              //              lddr
1869+ 2624              //              pop     bc
1870+ 2624              //              pop     de
1871+ 2624              //              pop     de
1872+ 2624              //
1873+ 2624              //              next
1874+ 2624
1875+ 2624
1876+ 2624              //  ______________________________________________________________________
1877+ 2624              //
1878+ 2624              // +!           n a --
1879+ 2624              // Sums to the content of address a the number n.
1880+ 2624              // It is the same of  a @ n + a !
1881+ 2624                              New_Def PLUSSTORE, "+!", is_code, is_normal
1881+ 2624             >
1881+ 2624             >Dict_Ptr        defl    $
1881+ 2624             >
1881+ 2624             >//              ______________________________________________________________________
1881+ 2624             >//              Heap part
1881+ 2624             >
1881+ 2624             >
1881+ 2624             >                org     (Heap_Ptr & $1FFF) + $E000
1881+ E353             >
1881+ E353             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1881+ E353             >Latest_Definition defl  Heap_Ptr
1881+ E353             >
1881+ E353             >                // dummy db directives used to calculate length of namec
1881+ E353 2B 21       >                db      "+!"
1881+ E355             >len_NFA         defl    $ - temp_NFA
1881+ E355             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1881+ E353             >
1881+ E353 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1881+ E354 2B 21       >                db      "+!"               // name string in 7-bit ascii, but
1881+ E356             >                org     $-1                 // alter last byte of Name just above to set
1881+ E355 A1          >                db      {b $} | END_BIT     // msb as name end
1881+ E356             >
1881+ E356 4A 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1881+ E358             >Prev_Ptr        defl    Heap_Ptr
1881+ E358             >
1881+ E358             >mirror_Ptr      defl    $
1881+ E358             >
1881+ E358 26 26       >                dw      Dict_Ptr + 2        // xt
1881+ E35A             >Heap_Ptr        defl    $ - $E000           // save current HP
1881+ E35A             >
1881+ E35A             >Current_HP      defl  $ - $E000             // used to set HP once!
1881+ E35A             >
1881+ E35A             >//              ______________________________________________________________________
1881+ E35A             >//              Dictionary part
1881+ E35A             >
1881+ E35A             >                org     Dict_Ptr
1881+ 2624             >
1881+ 2624 58 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1881+ 2626             >
1881+ 2626             >PLUSSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1881+ 2626 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1881+ 2626 ~           >
1881+ 2626 ~           >
1881+ 2626             >                endif           ; ok        // for other definitions it "points" the correct handler
1881+ 2626             >                // Use of "; ok" to suppress "warning[fwdref]"
1881+ 2626             >
1881+ 2626             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1882+ 2626 D9                           exx
1883+ 2627 E1                           pop     hl                  // hl is the address
1884+ 2628 D1                           pop     de                  // de is the number
1885+ 2629 7E                           ld      a, (hl)
1886+ 262A 83                           add     e
1887+ 262B 77                           ld      (hl), a
1888+ 262C 23                           inc     hl
1889+ 262D 7E                           ld      a, (hl)
1890+ 262E 8A                           adc     d
1891+ 262F 77                           ld      (hl), a
1892+ 2630 D9                           exx
1893+ 2631                              next
1893+ 2631 DD E9       >                jp      (ix)
1894+ 2633
1895+ 2633              //  ______________________________________________________________________
1896+ 2633              //
1897+ 2633              // toggle       a n --
1898+ 2633              // Complements (xor) the byte at addrress  a  with the model n.
1899+ 2633                              New_Def TOGGLE, "TOGGLE", is_code, is_normal
1899+ 2633             >
1899+ 2633             >Dict_Ptr        defl    $
1899+ 2633             >
1899+ 2633             >//              ______________________________________________________________________
1899+ 2633             >//              Heap part
1899+ 2633             >
1899+ 2633             >
1899+ 2633             >                org     (Heap_Ptr & $1FFF) + $E000
1899+ E35A             >
1899+ E35A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1899+ E35A             >Latest_Definition defl  Heap_Ptr
1899+ E35A             >
1899+ E35A             >                // dummy db directives used to calculate length of namec
1899+ E35A 54 4F 47 47 >                db      "TOGGLE"
1899+ E35E 4C 45       >
1899+ E360             >len_NFA         defl    $ - temp_NFA
1899+ E360             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1899+ E35A             >
1899+ E35A 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1899+ E35B 54 4F 47 47 >                db      "TOGGLE"               // name string in 7-bit ascii, but
1899+ E35F 4C 45       >
1899+ E361             >                org     $-1                 // alter last byte of Name just above to set
1899+ E360 C5          >                db      {b $} | END_BIT     // msb as name end
1899+ E361             >
1899+ E361 53 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1899+ E363             >Prev_Ptr        defl    Heap_Ptr
1899+ E363             >
1899+ E363             >mirror_Ptr      defl    $
1899+ E363             >
1899+ E363 35 26       >                dw      Dict_Ptr + 2        // xt
1899+ E365             >Heap_Ptr        defl    $ - $E000           // save current HP
1899+ E365             >
1899+ E365             >Current_HP      defl  $ - $E000             // used to set HP once!
1899+ E365             >
1899+ E365             >//              ______________________________________________________________________
1899+ E365             >//              Dictionary part
1899+ E365             >
1899+ E365             >                org     Dict_Ptr
1899+ 2633             >
1899+ 2633 63 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1899+ 2635             >
1899+ 2635             >TOGGLE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1899+ 2635 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1899+ 2635 ~           >
1899+ 2635 ~           >
1899+ 2635             >                endif           ; ok        // for other definitions it "points" the correct handler
1899+ 2635             >                // Use of "; ok" to suppress "warning[fwdref]"
1899+ 2635             >
1899+ 2635             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1900+ 2635 E1                           pop     hl
1901+ 2636 7D                           ld      a, l
1902+ 2637 E1                           pop     hl
1903+ 2638 AE                           xor     (hl)
1904+ 2639 77                           ld      (hl), a
1905+ 263A
1906+ 263A                              next
1906+ 263A DD E9       >                jp      (ix)
1907+ 263C
1908+ 263C              //  ______________________________________________________________________
1909+ 263C              //
1910+ 263C              // @            a -- n
1911+ 263C              // fetch 16 bit number n from address a. Z80 keeps high byte is in high memory
1912+ 263C                              New_Def FETCH, "@", is_code, is_normal
1912+ 263C             >
1912+ 263C             >Dict_Ptr        defl    $
1912+ 263C             >
1912+ 263C             >//              ______________________________________________________________________
1912+ 263C             >//              Heap part
1912+ 263C             >
1912+ 263C             >
1912+ 263C             >                org     (Heap_Ptr & $1FFF) + $E000
1912+ E365             >
1912+ E365             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1912+ E365             >Latest_Definition defl  Heap_Ptr
1912+ E365             >
1912+ E365             >                // dummy db directives used to calculate length of namec
1912+ E365 40          >                db      "@"
1912+ E366             >len_NFA         defl    $ - temp_NFA
1912+ E366             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1912+ E365             >
1912+ E365 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1912+ E366 40          >                db      "@"               // name string in 7-bit ascii, but
1912+ E367             >                org     $-1                 // alter last byte of Name just above to set
1912+ E366 C0          >                db      {b $} | END_BIT     // msb as name end
1912+ E367             >
1912+ E367 5A 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1912+ E369             >Prev_Ptr        defl    Heap_Ptr
1912+ E369             >
1912+ E369             >mirror_Ptr      defl    $
1912+ E369             >
1912+ E369 3E 26       >                dw      Dict_Ptr + 2        // xt
1912+ E36B             >Heap_Ptr        defl    $ - $E000           // save current HP
1912+ E36B             >
1912+ E36B             >Current_HP      defl  $ - $E000             // used to set HP once!
1912+ E36B             >
1912+ E36B             >//              ______________________________________________________________________
1912+ E36B             >//              Dictionary part
1912+ E36B             >
1912+ E36B             >                org     Dict_Ptr
1912+ 263C             >
1912+ 263C 69 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1912+ 263E             >
1912+ 263E             >FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1912+ 263E ~           >                call    runcode ; ok        // for primitive definitions  actual code
1912+ 263E ~           >
1912+ 263E ~           >
1912+ 263E             >                endif           ; ok        // for other definitions it "points" the correct handler
1912+ 263E             >                // Use of "; ok" to suppress "warning[fwdref]"
1912+ 263E             >
1912+ 263E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1913+ 263E E1                           pop     hl
1914+ 263F 7E                           ld      a, (hl)             // low-byte
1915+ 2640 23                           inc     hl
1916+ 2641 66                           ld      h, (hl)             // high-byte
1917+ 2642 6F                           ld      l, a
1918+ 2643 E5                           push    hl
1919+ 2644                              next
1919+ 2644 DD E9       >                jp      (ix)
1920+ 2646
1921+ 2646              //  ______________________________________________________________________
1922+ 2646              //
1923+ 2646              // !            n a --
1924+ 2646              // store 16 bit number n from address a. Z80 keeps high byte is in high memory
1925+ 2646                              New_Def STORE, "!", is_code, is_normal
1925+ 2646             >
1925+ 2646             >Dict_Ptr        defl    $
1925+ 2646             >
1925+ 2646             >//              ______________________________________________________________________
1925+ 2646             >//              Heap part
1925+ 2646             >
1925+ 2646             >
1925+ 2646             >                org     (Heap_Ptr & $1FFF) + $E000
1925+ E36B             >
1925+ E36B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1925+ E36B             >Latest_Definition defl  Heap_Ptr
1925+ E36B             >
1925+ E36B             >                // dummy db directives used to calculate length of namec
1925+ E36B 21          >                db      "!"
1925+ E36C             >len_NFA         defl    $ - temp_NFA
1925+ E36C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1925+ E36B             >
1925+ E36B 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1925+ E36C 21          >                db      "!"               // name string in 7-bit ascii, but
1925+ E36D             >                org     $-1                 // alter last byte of Name just above to set
1925+ E36C A1          >                db      {b $} | END_BIT     // msb as name end
1925+ E36D             >
1925+ E36D 65 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1925+ E36F             >Prev_Ptr        defl    Heap_Ptr
1925+ E36F             >
1925+ E36F             >mirror_Ptr      defl    $
1925+ E36F             >
1925+ E36F 48 26       >                dw      Dict_Ptr + 2        // xt
1925+ E371             >Heap_Ptr        defl    $ - $E000           // save current HP
1925+ E371             >
1925+ E371             >Current_HP      defl  $ - $E000             // used to set HP once!
1925+ E371             >
1925+ E371             >//              ______________________________________________________________________
1925+ E371             >//              Dictionary part
1925+ E371             >
1925+ E371             >                org     Dict_Ptr
1925+ 2646             >
1925+ 2646 6F 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1925+ 2648             >
1925+ 2648             >STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1925+ 2648 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1925+ 2648 ~           >
1925+ 2648 ~           >
1925+ 2648             >                endif           ; ok        // for other definitions it "points" the correct handler
1925+ 2648             >                // Use of "; ok" to suppress "warning[fwdref]"
1925+ 2648             >
1925+ 2648             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1926+ 2648 D9                           exx
1927+ 2649 E1                           pop     hl                  // address
1928+ 264A D1                           pop     de                  // < n
1929+ 264B 73                           ld      (hl), e             // low-byte
1930+ 264C 23                           inc     hl
1931+ 264D 72                           ld      (hl), d             // high-byte
1932+ 264E D9                           exx
1933+ 264F                              next
1933+ 264F DD E9       >                jp      (ix)
1934+ 2651
1935+ 2651              //  ______________________________________________________________________
1936+ 2651              //
1937+ 2651              // c@           a -- c
1938+ 2651              // fetch a character n from address a
1939+ 2651                              New_Def CFETCH, "C@", is_code, is_normal
1939+ 2651             >
1939+ 2651             >Dict_Ptr        defl    $
1939+ 2651             >
1939+ 2651             >//              ______________________________________________________________________
1939+ 2651             >//              Heap part
1939+ 2651             >
1939+ 2651             >
1939+ 2651             >                org     (Heap_Ptr & $1FFF) + $E000
1939+ E371             >
1939+ E371             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1939+ E371             >Latest_Definition defl  Heap_Ptr
1939+ E371             >
1939+ E371             >                // dummy db directives used to calculate length of namec
1939+ E371 43 40       >                db      "C@"
1939+ E373             >len_NFA         defl    $ - temp_NFA
1939+ E373             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1939+ E371             >
1939+ E371 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1939+ E372 43 40       >                db      "C@"               // name string in 7-bit ascii, but
1939+ E374             >                org     $-1                 // alter last byte of Name just above to set
1939+ E373 C0          >                db      {b $} | END_BIT     // msb as name end
1939+ E374             >
1939+ E374 6B 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1939+ E376             >Prev_Ptr        defl    Heap_Ptr
1939+ E376             >
1939+ E376             >mirror_Ptr      defl    $
1939+ E376             >
1939+ E376 53 26       >                dw      Dict_Ptr + 2        // xt
1939+ E378             >Heap_Ptr        defl    $ - $E000           // save current HP
1939+ E378             >
1939+ E378             >Current_HP      defl  $ - $E000             // used to set HP once!
1939+ E378             >
1939+ E378             >//              ______________________________________________________________________
1939+ E378             >//              Dictionary part
1939+ E378             >
1939+ E378             >                org     Dict_Ptr
1939+ 2651             >
1939+ 2651 76 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1939+ 2653             >
1939+ 2653             >CFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1939+ 2653 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1939+ 2653 ~           >
1939+ 2653 ~           >
1939+ 2653             >                endif           ; ok        // for other definitions it "points" the correct handler
1939+ 2653             >                // Use of "; ok" to suppress "warning[fwdref]"
1939+ 2653             >
1939+ 2653             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1940+ 2653 E1                           pop     hl
1941+ 2654 6E                           ld      l, (hl)             // low-byte
1942+ 2655 26 00                        ld      h, 0
1943+ 2657
1944+ 2657                              psh1
1944+ 2657 E5          >                push    hl
1944+ 2658 DD E9       >                jp      (ix)
1945+ 265A
1946+ 265A              //  ______________________________________________________________________
1947+ 265A              //
1948+ 265A              // c!           c a --
1949+ 265A              // fetch 16 bit number n from address a. Z80 keeps high byte is in high memory
1950+ 265A                              New_Def CSTORE, "C!", is_code, is_normal
1950+ 265A             >
1950+ 265A             >Dict_Ptr        defl    $
1950+ 265A             >
1950+ 265A             >//              ______________________________________________________________________
1950+ 265A             >//              Heap part
1950+ 265A             >
1950+ 265A             >
1950+ 265A             >                org     (Heap_Ptr & $1FFF) + $E000
1950+ E378             >
1950+ E378             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1950+ E378             >Latest_Definition defl  Heap_Ptr
1950+ E378             >
1950+ E378             >                // dummy db directives used to calculate length of namec
1950+ E378 43 21       >                db      "C!"
1950+ E37A             >len_NFA         defl    $ - temp_NFA
1950+ E37A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1950+ E378             >
1950+ E378 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1950+ E379 43 21       >                db      "C!"               // name string in 7-bit ascii, but
1950+ E37B             >                org     $-1                 // alter last byte of Name just above to set
1950+ E37A A1          >                db      {b $} | END_BIT     // msb as name end
1950+ E37B             >
1950+ E37B 71 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1950+ E37D             >Prev_Ptr        defl    Heap_Ptr
1950+ E37D             >
1950+ E37D             >mirror_Ptr      defl    $
1950+ E37D             >
1950+ E37D 5C 26       >                dw      Dict_Ptr + 2        // xt
1950+ E37F             >Heap_Ptr        defl    $ - $E000           // save current HP
1950+ E37F             >
1950+ E37F             >Current_HP      defl  $ - $E000             // used to set HP once!
1950+ E37F             >
1950+ E37F             >//              ______________________________________________________________________
1950+ E37F             >//              Dictionary part
1950+ E37F             >
1950+ E37F             >                org     Dict_Ptr
1950+ 265A             >
1950+ 265A 7D 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1950+ 265C             >
1950+ 265C             >CSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1950+ 265C ~           >                call    runcode ; ok        // for primitive definitions  actual code
1950+ 265C ~           >
1950+ 265C ~           >
1950+ 265C             >                endif           ; ok        // for other definitions it "points" the correct handler
1950+ 265C             >                // Use of "; ok" to suppress "warning[fwdref]"
1950+ 265C             >
1950+ 265C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1951+ 265C D9                           exx
1952+ 265D E1                           pop     hl                  // < address
1953+ 265E D1                           pop     de
1954+ 265F 73                           ld      (hl), e             // low-byte
1955+ 2660 D9                           exx
1956+ 2661                              next
1956+ 2661 DD E9       >                jp      (ix)
1957+ 2663
1958+ 2663              //  ______________________________________________________________________
1959+ 2663              //
1960+ 2663              // 2@           a -- d
1961+ 2663              // fetch a 32 bits number d from address a and leaves it on top of the
1962+ 2663              // stack as two single numbers, high part as top of the stack.
1963+ 2663              // A double number is normally kept in CPU registers as HLDE.
1964+ 2663              // On stack a double number is treated as two single numbers
1965+ 2663              // where BC is on the top of the stack and HL is the second from top,
1966+ 2663              // so the sign of the number can be checked on top of stack
1967+ 2663              // and in the stack memory it appears as LHED.
1968+ 2663                              New_Def TWO_FETCH, "2@", is_code, is_normal
1968+ 2663             >
1968+ 2663             >Dict_Ptr        defl    $
1968+ 2663             >
1968+ 2663             >//              ______________________________________________________________________
1968+ 2663             >//              Heap part
1968+ 2663             >
1968+ 2663             >
1968+ 2663             >                org     (Heap_Ptr & $1FFF) + $E000
1968+ E37F             >
1968+ E37F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1968+ E37F             >Latest_Definition defl  Heap_Ptr
1968+ E37F             >
1968+ E37F             >                // dummy db directives used to calculate length of namec
1968+ E37F 32 40       >                db      "2@"
1968+ E381             >len_NFA         defl    $ - temp_NFA
1968+ E381             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1968+ E37F             >
1968+ E37F 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1968+ E380 32 40       >                db      "2@"               // name string in 7-bit ascii, but
1968+ E382             >                org     $-1                 // alter last byte of Name just above to set
1968+ E381 C0          >                db      {b $} | END_BIT     // msb as name end
1968+ E382             >
1968+ E382 78 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1968+ E384             >Prev_Ptr        defl    Heap_Ptr
1968+ E384             >
1968+ E384             >mirror_Ptr      defl    $
1968+ E384             >
1968+ E384 65 26       >                dw      Dict_Ptr + 2        // xt
1968+ E386             >Heap_Ptr        defl    $ - $E000           // save current HP
1968+ E386             >
1968+ E386             >Current_HP      defl  $ - $E000             // used to set HP once!
1968+ E386             >
1968+ E386             >//              ______________________________________________________________________
1968+ E386             >//              Dictionary part
1968+ E386             >
1968+ E386             >                org     Dict_Ptr
1968+ 2663             >
1968+ 2663 84 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1968+ 2665             >
1968+ 2665             >TWO_FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1968+ 2665 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1968+ 2665 ~           >
1968+ 2665 ~           >
1968+ 2665             >                endif           ; ok        // for other definitions it "points" the correct handler
1968+ 2665             >                // Use of "; ok" to suppress "warning[fwdref]"
1968+ 2665             >
1968+ 2665             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1969+ 2665 D9                           exx
1970+ 2666 E1                           pop     hl                  // address
1971+ 2667 5E                           ld      e, (hl)             // low-byte
1972+ 2668 23                           inc     hl
1973+ 2669 56                           ld      d, (hl)             // high-byte
1974+ 266A 23                           inc     hl
1975+ 266B 7E                           ld      a, (hl)             // low-byte
1976+ 266C 23                           inc     hl
1977+ 266D 66                           ld      h, (hl)             // high-byte
1978+ 266E 6F                           ld      l, a
1979+ 266F E5                           push    hl
1980+ 2670 D5                           push    de
1981+ 2671 D9                           exx
1982+ 2672                              next
1982+ 2672 DD E9       >                jp      (ix)
1983+ 2674
1984+ 2674              //  ______________________________________________________________________
1985+ 2674              //
1986+ 2674              // 2!           d a --
1987+ 2674              // stores a 32 bits number d from address a and leaves it on top of the
1988+ 2674              // stack as two single numbers, high part as top of the stack.
1989+ 2674              // A double number is normally kept in CPU registers as HLDE.
1990+ 2674              // On stack a double number is treated as two single numbers
1991+ 2674              // where BC is on the top of the stack and HL is the second from top,
1992+ 2674              // so the sign of the number can be checked on top of stack
1993+ 2674              // and in the stack memory it appears as LHED.
1994+ 2674                              New_Def TWO_STORE, "2!", is_code, is_normal
1994+ 2674             >
1994+ 2674             >Dict_Ptr        defl    $
1994+ 2674             >
1994+ 2674             >//              ______________________________________________________________________
1994+ 2674             >//              Heap part
1994+ 2674             >
1994+ 2674             >
1994+ 2674             >                org     (Heap_Ptr & $1FFF) + $E000
1994+ E386             >
1994+ E386             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1994+ E386             >Latest_Definition defl  Heap_Ptr
1994+ E386             >
1994+ E386             >                // dummy db directives used to calculate length of namec
1994+ E386 32 21       >                db      "2!"
1994+ E388             >len_NFA         defl    $ - temp_NFA
1994+ E388             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1994+ E386             >
1994+ E386 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1994+ E387 32 21       >                db      "2!"               // name string in 7-bit ascii, but
1994+ E389             >                org     $-1                 // alter last byte of Name just above to set
1994+ E388 A1          >                db      {b $} | END_BIT     // msb as name end
1994+ E389             >
1994+ E389 7F 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1994+ E38B             >Prev_Ptr        defl    Heap_Ptr
1994+ E38B             >
1994+ E38B             >mirror_Ptr      defl    $
1994+ E38B             >
1994+ E38B 76 26       >                dw      Dict_Ptr + 2        // xt
1994+ E38D             >Heap_Ptr        defl    $ - $E000           // save current HP
1994+ E38D             >
1994+ E38D             >Current_HP      defl  $ - $E000             // used to set HP once!
1994+ E38D             >
1994+ E38D             >//              ______________________________________________________________________
1994+ E38D             >//              Dictionary part
1994+ E38D             >
1994+ E38D             >                org     Dict_Ptr
1994+ 2674             >
1994+ 2674 8B 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1994+ 2676             >
1994+ 2676             >TWO_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1994+ 2676 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1994+ 2676 ~           >
1994+ 2676 ~           >
1994+ 2676             >                endif           ; ok        // for other definitions it "points" the correct handler
1994+ 2676             >                // Use of "; ok" to suppress "warning[fwdref]"
1994+ 2676             >
1994+ 2676             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1995+ 2676 D9                           exx
1996+ 2677 E1                           pop     hl                  // address
1997+ 2678 C1                           pop     bc                  // < high-part
1998+ 2679 D1                           pop     de                  // < low-part > Instruction Pointer
1999+ 267A 71                           ld      (hl), c
2000+ 267B 23                           inc     hl
2001+ 267C 70                           ld      (hl), b
2002+ 267D 23                           inc     hl
2003+ 267E 73                           ld      (hl), e
2004+ 267F 23                           inc     hl
2005+ 2680 72                           ld      (hl), d
2006+ 2681 D9                           exx
2007+ 2682                              next
2007+ 2682 DD E9       >                jp      (ix)
2008+ 2684
2009+ 2684              //  ______________________________________________________________________
2010+ 2684              //
2011+ 2684              // p@           a -- c
2012+ 2684              // Read one byte from port a and leave the result on top of stack
2013+ 2684                              New_Def PFETCH, "P@", is_code, is_normal
2013+ 2684             >
2013+ 2684             >Dict_Ptr        defl    $
2013+ 2684             >
2013+ 2684             >//              ______________________________________________________________________
2013+ 2684             >//              Heap part
2013+ 2684             >
2013+ 2684             >
2013+ 2684             >                org     (Heap_Ptr & $1FFF) + $E000
2013+ E38D             >
2013+ E38D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2013+ E38D             >Latest_Definition defl  Heap_Ptr
2013+ E38D             >
2013+ E38D             >                // dummy db directives used to calculate length of namec
2013+ E38D 50 40       >                db      "P@"
2013+ E38F             >len_NFA         defl    $ - temp_NFA
2013+ E38F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2013+ E38D             >
2013+ E38D 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2013+ E38E 50 40       >                db      "P@"               // name string in 7-bit ascii, but
2013+ E390             >                org     $-1                 // alter last byte of Name just above to set
2013+ E38F C0          >                db      {b $} | END_BIT     // msb as name end
2013+ E390             >
2013+ E390 86 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2013+ E392             >Prev_Ptr        defl    Heap_Ptr
2013+ E392             >
2013+ E392             >mirror_Ptr      defl    $
2013+ E392             >
2013+ E392 86 26       >                dw      Dict_Ptr + 2        // xt
2013+ E394             >Heap_Ptr        defl    $ - $E000           // save current HP
2013+ E394             >
2013+ E394             >Current_HP      defl  $ - $E000             // used to set HP once!
2013+ E394             >
2013+ E394             >//              ______________________________________________________________________
2013+ E394             >//              Dictionary part
2013+ E394             >
2013+ E394             >                org     Dict_Ptr
2013+ 2684             >
2013+ 2684 92 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2013+ 2686             >
2013+ 2686             >PFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2013+ 2686 ~           >                call    runcode ; ok        // for primitive definitions  actual code
2013+ 2686 ~           >
2013+ 2686 ~           >
2013+ 2686             >                endif           ; ok        // for other definitions it "points" the correct handler
2013+ 2686             >                // Use of "; ok" to suppress "warning[fwdref]"
2013+ 2686             >
2013+ 2686             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2014+ 2686 D9                           exx
2015+ 2687 C1                           pop     bc
2016+ 2688 26 00                        ld      h, 0
2017+ 268A ED 68                        in      l, (c)
2018+ 268C E5                           push    hl
2019+ 268D D9                           exx
2020+ 268E                              next
2020+ 268E DD E9       >                jp      (ix)
2021+ 2690
2022+ 2690              //  ______________________________________________________________________
2023+ 2690              //
2024+ 2690              // p!           c a --
2025+ 2690              // Send one byte (top of stack) to port a
2026+ 2690                              New_Def PSTORE, "P!", is_code, is_normal
2026+ 2690             >
2026+ 2690             >Dict_Ptr        defl    $
2026+ 2690             >
2026+ 2690             >//              ______________________________________________________________________
2026+ 2690             >//              Heap part
2026+ 2690             >
2026+ 2690             >
2026+ 2690             >                org     (Heap_Ptr & $1FFF) + $E000
2026+ E394             >
2026+ E394             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2026+ E394             >Latest_Definition defl  Heap_Ptr
2026+ E394             >
2026+ E394             >                // dummy db directives used to calculate length of namec
2026+ E394 50 21       >                db      "P!"
2026+ E396             >len_NFA         defl    $ - temp_NFA
2026+ E396             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2026+ E394             >
2026+ E394 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2026+ E395 50 21       >                db      "P!"               // name string in 7-bit ascii, but
2026+ E397             >                org     $-1                 // alter last byte of Name just above to set
2026+ E396 A1          >                db      {b $} | END_BIT     // msb as name end
2026+ E397             >
2026+ E397 8D 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2026+ E399             >Prev_Ptr        defl    Heap_Ptr
2026+ E399             >
2026+ E399             >mirror_Ptr      defl    $
2026+ E399             >
2026+ E399 92 26       >                dw      Dict_Ptr + 2        // xt
2026+ E39B             >Heap_Ptr        defl    $ - $E000           // save current HP
2026+ E39B             >
2026+ E39B             >Current_HP      defl  $ - $E000             // used to set HP once!
2026+ E39B             >
2026+ E39B             >//              ______________________________________________________________________
2026+ E39B             >//              Dictionary part
2026+ E39B             >
2026+ E39B             >                org     Dict_Ptr
2026+ 2690             >
2026+ 2690 99 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2026+ 2692             >
2026+ 2692             >PSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2026+ 2692 ~           >                call    runcode ; ok        // for primitive definitions  actual code
2026+ 2692 ~           >
2026+ 2692 ~           >
2026+ 2692             >                endif           ; ok        // for other definitions it "points" the correct handler
2026+ 2692             >                // Use of "; ok" to suppress "warning[fwdref]"
2026+ 2692             >
2026+ 2692             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2027+ 2692 D9                           exx
2028+ 2693 C1                           pop     bc
2029+ 2694 E1                           pop     hl                  // < c
2030+ 2695 ED 69                        out     (c), l              // low-byte
2031+ 2697 D9                           exx
2032+ 2698                              next
2032+ 2698 DD E9       >                jp      (ix)
2033+ 269A
2034+ 269A
2035+ 269A              //  ______________________________________________________________________
2036+ 269A              //
2037+ 269A              // 2*           n1 -- n2
2038+ 269A              // doubles the number at top of stack
2039+ 269A                              New_Def TWO_MUL, "2*", is_code, is_normal
2039+ 269A             >
2039+ 269A             >Dict_Ptr        defl    $
2039+ 269A             >
2039+ 269A             >//              ______________________________________________________________________
2039+ 269A             >//              Heap part
2039+ 269A             >
2039+ 269A             >
2039+ 269A             >                org     (Heap_Ptr & $1FFF) + $E000
2039+ E39B             >
2039+ E39B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2039+ E39B             >Latest_Definition defl  Heap_Ptr
2039+ E39B             >
2039+ E39B             >                // dummy db directives used to calculate length of namec
2039+ E39B 32 2A       >                db      "2*"
2039+ E39D             >len_NFA         defl    $ - temp_NFA
2039+ E39D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2039+ E39B             >
2039+ E39B 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2039+ E39C 32 2A       >                db      "2*"               // name string in 7-bit ascii, but
2039+ E39E             >                org     $-1                 // alter last byte of Name just above to set
2039+ E39D AA          >                db      {b $} | END_BIT     // msb as name end
2039+ E39E             >
2039+ E39E 94 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2039+ E3A0             >Prev_Ptr        defl    Heap_Ptr
2039+ E3A0             >
2039+ E3A0             >mirror_Ptr      defl    $
2039+ E3A0             >
2039+ E3A0 9C 26       >                dw      Dict_Ptr + 2        // xt
2039+ E3A2             >Heap_Ptr        defl    $ - $E000           // save current HP
2039+ E3A2             >
2039+ E3A2             >Current_HP      defl  $ - $E000             // used to set HP once!
2039+ E3A2             >
2039+ E3A2             >//              ______________________________________________________________________
2039+ E3A2             >//              Dictionary part
2039+ E3A2             >
2039+ E3A2             >                org     Dict_Ptr
2039+ 269A             >
2039+ 269A A0 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2039+ 269C             >
2039+ 269C             >TWO_MUL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2039+ 269C ~           >                call    runcode ; ok        // for primitive definitions  actual code
2039+ 269C ~           >
2039+ 269C ~           >
2039+ 269C             >                endif           ; ok        // for other definitions it "points" the correct handler
2039+ 269C             >                // Use of "; ok" to suppress "warning[fwdref]"
2039+ 269C             >
2039+ 269C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2040+ 269C              Two_Mul_Ptr:
2041+ 269C E1                           pop     hl
2042+ 269D 29                           add     hl, hl
2043+ 269E
2044+ 269E                              psh1
2044+ 269E E5          >                push    hl
2044+ 269F DD E9       >                jp      (ix)
2045+ 26A1
2046+ 26A1              //  ______________________________________________________________________
2047+ 26A1              //
2048+ 26A1              // 2/           n1 -- n2
2049+ 26A1              // halves the top of stack, sign is unchanged
2050+ 26A1                              New_Def TWO_DIV, "2/", is_code, is_normal
2050+ 26A1             >
2050+ 26A1             >Dict_Ptr        defl    $
2050+ 26A1             >
2050+ 26A1             >//              ______________________________________________________________________
2050+ 26A1             >//              Heap part
2050+ 26A1             >
2050+ 26A1             >
2050+ 26A1             >                org     (Heap_Ptr & $1FFF) + $E000
2050+ E3A2             >
2050+ E3A2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2050+ E3A2             >Latest_Definition defl  Heap_Ptr
2050+ E3A2             >
2050+ E3A2             >                // dummy db directives used to calculate length of namec
2050+ E3A2 32 2F       >                db      "2/"
2050+ E3A4             >len_NFA         defl    $ - temp_NFA
2050+ E3A4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2050+ E3A2             >
2050+ E3A2 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2050+ E3A3 32 2F       >                db      "2/"               // name string in 7-bit ascii, but
2050+ E3A5             >                org     $-1                 // alter last byte of Name just above to set
2050+ E3A4 AF          >                db      {b $} | END_BIT     // msb as name end
2050+ E3A5             >
2050+ E3A5 9B 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2050+ E3A7             >Prev_Ptr        defl    Heap_Ptr
2050+ E3A7             >
2050+ E3A7             >mirror_Ptr      defl    $
2050+ E3A7             >
2050+ E3A7 A3 26       >                dw      Dict_Ptr + 2        // xt
2050+ E3A9             >Heap_Ptr        defl    $ - $E000           // save current HP
2050+ E3A9             >
2050+ E3A9             >Current_HP      defl  $ - $E000             // used to set HP once!
2050+ E3A9             >
2050+ E3A9             >//              ______________________________________________________________________
2050+ E3A9             >//              Dictionary part
2050+ E3A9             >
2050+ E3A9             >                org     Dict_Ptr
2050+ 26A1             >
2050+ 26A1 A7 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2050+ 26A3             >
2050+ 26A3             >TWO_DIV:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2050+ 26A3 ~           >                call    runcode ; ok        // for primitive definitions  actual code
2050+ 26A3 ~           >
2050+ 26A3 ~           >
2050+ 26A3             >                endif           ; ok        // for other definitions it "points" the correct handler
2050+ 26A3             >                // Use of "; ok" to suppress "warning[fwdref]"
2050+ 26A3             >
2050+ 26A3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2051+ 26A3 E1                           pop     hl
2052+ 26A4 CB 2C                        sra     h
2053+ 26A6 CB 1D                        rr      l
2054+ 26A8
2055+ 26A8                              psh1
2055+ 26A8 E5          >                push    hl
2055+ 26A9 DD E9       >                jp      (ix)
2056+ 26AB
2057+ 26AB              //  ______________________________________________________________________
2058+ 26AB              //
2059+ 26AB              // lshift       n1 u -- n2
2060+ 26AB              // bit left shift of u bits
2061+ 26AB                              New_Def LSHIFT, "LSHIFT", is_code, is_normal
2061+ 26AB             >
2061+ 26AB             >Dict_Ptr        defl    $
2061+ 26AB             >
2061+ 26AB             >//              ______________________________________________________________________
2061+ 26AB             >//              Heap part
2061+ 26AB             >
2061+ 26AB             >
2061+ 26AB             >                org     (Heap_Ptr & $1FFF) + $E000
2061+ E3A9             >
2061+ E3A9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2061+ E3A9             >Latest_Definition defl  Heap_Ptr
2061+ E3A9             >
2061+ E3A9             >                // dummy db directives used to calculate length of namec
2061+ E3A9 4C 53 48 49 >                db      "LSHIFT"
2061+ E3AD 46 54       >
2061+ E3AF             >len_NFA         defl    $ - temp_NFA
2061+ E3AF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2061+ E3A9             >
2061+ E3A9 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2061+ E3AA 4C 53 48 49 >                db      "LSHIFT"               // name string in 7-bit ascii, but
2061+ E3AE 46 54       >
2061+ E3B0             >                org     $-1                 // alter last byte of Name just above to set
2061+ E3AF D4          >                db      {b $} | END_BIT     // msb as name end
2061+ E3B0             >
2061+ E3B0 A2 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2061+ E3B2             >Prev_Ptr        defl    Heap_Ptr
2061+ E3B2             >
2061+ E3B2             >mirror_Ptr      defl    $
2061+ E3B2             >
2061+ E3B2 AD 26       >                dw      Dict_Ptr + 2        // xt
2061+ E3B4             >Heap_Ptr        defl    $ - $E000           // save current HP
2061+ E3B4             >
2061+ E3B4             >Current_HP      defl  $ - $E000             // used to set HP once!
2061+ E3B4             >
2061+ E3B4             >//              ______________________________________________________________________
2061+ E3B4             >//              Dictionary part
2061+ E3B4             >
2061+ E3B4             >                org     Dict_Ptr
2061+ 26AB             >
2061+ 26AB B2 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2061+ 26AD             >
2061+ 26AD             >LSHIFT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2061+ 26AD ~           >                call    runcode ; ok        // for primitive definitions  actual code
2061+ 26AD ~           >
2061+ 26AD ~           >
2061+ 26AD             >                endif           ; ok        // for other definitions it "points" the correct handler
2061+ 26AD             >                // Use of "; ok" to suppress "warning[fwdref]"
2061+ 26AD             >
2061+ 26AD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2062+ 26AD D9                           exx
2063+ 26AE C1                           pop     bc
2064+ 26AF 41                           ld      b, c
2065+ 26B0 D1                           pop     de
2066+ 26B1 ED 28                        bsla    de, b
2067+ 26B3 D5                           push    de
2068+ 26B4 D9                           exx
2069+ 26B5                              next
2069+ 26B5 DD E9       >                jp      (ix)
2070+ 26B7
2071+ 26B7              //  ______________________________________________________________________
2072+ 26B7              //
2073+ 26B7              // rshift       n1 u -- n2
2074+ 26B7              // bit right shift of u bits
2075+ 26B7                              New_Def RSHIFT, "RSHIFT", is_code, is_normal
2075+ 26B7             >
2075+ 26B7             >Dict_Ptr        defl    $
2075+ 26B7             >
2075+ 26B7             >//              ______________________________________________________________________
2075+ 26B7             >//              Heap part
2075+ 26B7             >
2075+ 26B7             >
2075+ 26B7             >                org     (Heap_Ptr & $1FFF) + $E000
2075+ E3B4             >
2075+ E3B4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2075+ E3B4             >Latest_Definition defl  Heap_Ptr
2075+ E3B4             >
2075+ E3B4             >                // dummy db directives used to calculate length of namec
2075+ E3B4 52 53 48 49 >                db      "RSHIFT"
2075+ E3B8 46 54       >
2075+ E3BA             >len_NFA         defl    $ - temp_NFA
2075+ E3BA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2075+ E3B4             >
2075+ E3B4 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2075+ E3B5 52 53 48 49 >                db      "RSHIFT"               // name string in 7-bit ascii, but
2075+ E3B9 46 54       >
2075+ E3BB             >                org     $-1                 // alter last byte of Name just above to set
2075+ E3BA D4          >                db      {b $} | END_BIT     // msb as name end
2075+ E3BB             >
2075+ E3BB A9 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2075+ E3BD             >Prev_Ptr        defl    Heap_Ptr
2075+ E3BD             >
2075+ E3BD             >mirror_Ptr      defl    $
2075+ E3BD             >
2075+ E3BD B9 26       >                dw      Dict_Ptr + 2        // xt
2075+ E3BF             >Heap_Ptr        defl    $ - $E000           // save current HP
2075+ E3BF             >
2075+ E3BF             >Current_HP      defl  $ - $E000             // used to set HP once!
2075+ E3BF             >
2075+ E3BF             >//              ______________________________________________________________________
2075+ E3BF             >//              Dictionary part
2075+ E3BF             >
2075+ E3BF             >                org     Dict_Ptr
2075+ 26B7             >
2075+ 26B7 BD 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2075+ 26B9             >
2075+ 26B9             >RSHIFT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2075+ 26B9 ~           >                call    runcode ; ok        // for primitive definitions  actual code
2075+ 26B9 ~           >
2075+ 26B9 ~           >
2075+ 26B9             >                endif           ; ok        // for other definitions it "points" the correct handler
2075+ 26B9             >                // Use of "; ok" to suppress "warning[fwdref]"
2075+ 26B9             >
2075+ 26B9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2076+ 26B9 D9                           exx
2077+ 26BA C1                           pop     bc
2078+ 26BB 41                           ld      b, c
2079+ 26BC D1                           pop     de
2080+ 26BD ED 2A                        bsrl    de, b
2081+ 26BF D5                           push    de
2082+ 26C0 D9                           exx
2083+ 26C1                              next
2083+ 26C1 DD E9       >                jp      (ix)
2084+ 26C3
2085+ 26C3              //  ______________________________________________________________________
2086+ 26C3              //
2087+ 26C3              // cells        n1 -- n2
2088+ 26C3              // decrement by 2 top of stack
2089+ 26C3                              New_Def CELLS, "CELLS", is_code, is_normal
2089+ 26C3             >
2089+ 26C3             >Dict_Ptr        defl    $
2089+ 26C3             >
2089+ 26C3             >//              ______________________________________________________________________
2089+ 26C3             >//              Heap part
2089+ 26C3             >
2089+ 26C3             >
2089+ 26C3             >                org     (Heap_Ptr & $1FFF) + $E000
2089+ E3BF             >
2089+ E3BF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2089+ E3BF             >Latest_Definition defl  Heap_Ptr
2089+ E3BF             >
2089+ E3BF             >                // dummy db directives used to calculate length of namec
2089+ E3BF 43 45 4C 4C >                db      "CELLS"
2089+ E3C3 53          >
2089+ E3C4             >len_NFA         defl    $ - temp_NFA
2089+ E3C4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2089+ E3BF             >
2089+ E3BF 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2089+ E3C0 43 45 4C 4C >                db      "CELLS"               // name string in 7-bit ascii, but
2089+ E3C4 53          >
2089+ E3C5             >                org     $-1                 // alter last byte of Name just above to set
2089+ E3C4 D3          >                db      {b $} | END_BIT     // msb as name end
2089+ E3C5             >
2089+ E3C5 B4 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2089+ E3C7             >Prev_Ptr        defl    Heap_Ptr
2089+ E3C7             >
2089+ E3C7             >mirror_Ptr      defl    $
2089+ E3C7             >
2089+ E3C7 C5 26       >                dw      Dict_Ptr + 2        // xt
2089+ E3C9             >Heap_Ptr        defl    $ - $E000           // save current HP
2089+ E3C9             >
2089+ E3C9             >Current_HP      defl  $ - $E000             // used to set HP once!
2089+ E3C9             >
2089+ E3C9             >//              ______________________________________________________________________
2089+ E3C9             >//              Dictionary part
2089+ E3C9             >
2089+ E3C9             >                org     Dict_Ptr
2089+ 26C3             >
2089+ 26C3 C7 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2089+ 26C5             >
2089+ 26C5             >CELLS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2089+ 26C5 ~           >                call    runcode ; ok        // for primitive definitions  actual code
2089+ 26C5 ~           >
2089+ 26C5 ~           >
2089+ 26C5             >                endif           ; ok        // for other definitions it "points" the correct handler
2089+ 26C5             >                // Use of "; ok" to suppress "warning[fwdref]"
2089+ 26C5             >
2089+ 26C5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2090+ 26C5 C3 9C 26                     jp      Two_Mul_Ptr
2091+ 26C8
2092+ 26C8
2093+ 26C8              //  ______________________________________________________________________
2094+ 26C8
# file closed: C:\Zx\CSpect\Projects\vForth17_DOT/source/L0.asm
 122  26C8                              include "L1.asm"
# file opened: C:\Zx\CSpect\Projects\vForth17_DOT/source/L1.asm
   1+ 26C8              //  ______________________________________________________________________
   2+ 26C8              //
   3+ 26C8              //  L1.asm
   4+ 26C8              //
   5+ 26C8              //  Level-1 definitions and derivate
   6+ 26C8              //  ______________________________________________________________________
   7+ 26C8
   8+ 26C8              //  ______________________________________________________________________
   9+ 26C8              //
  10+ 26C8              // :            -- cccc     ( compile time )
  11+ 26C8              //              i*x -- j*x  ( run time )
  12+ 26C8              // Colon Definition
  13+ 26C8                              Colon_Def COLON, ":", is_normal      // has forward-ref
  13+ 26C8             >                New_Def  COLON, ":", Enter_Ptr, is_normal ; ok
  13+ 26C8             >
  13+ 26C8             >Dict_Ptr        defl    $
  13+ 26C8             >
  13+ 26C8             >//              ______________________________________________________________________
  13+ 26C8             >//              Heap part
  13+ 26C8             >
  13+ 26C8             >
  13+ 26C8             >                org     (Heap_Ptr & $1FFF) + $E000
  13+ E3C9             >
  13+ E3C9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13+ E3C9             >Latest_Definition defl  Heap_Ptr
  13+ E3C9             >
  13+ E3C9             >                // dummy db directives used to calculate length of namec
  13+ E3C9 3A          >                db      ":"
  13+ E3CA             >len_NFA         defl    $ - temp_NFA
  13+ E3CA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13+ E3C9             >
  13+ E3C9 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  13+ E3CA 3A          >                db      ":"               // name string in 7-bit ascii, but
  13+ E3CB             >                org     $-1                 // alter last byte of Name just above to set
  13+ E3CA BA          >                db      {b $} | END_BIT     // msb as name end
  13+ E3CB             >
  13+ E3CB BF 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  13+ E3CD             >Prev_Ptr        defl    Heap_Ptr
  13+ E3CD             >
  13+ E3CD             >mirror_Ptr      defl    $
  13+ E3CD             >
  13+ E3CD CA 26       >                dw      Dict_Ptr + 2        // xt
  13+ E3CF             >Heap_Ptr        defl    $ - $E000           // save current HP
  13+ E3CF             >
  13+ E3CF             >Current_HP      defl  $ - $E000             // used to set HP once!
  13+ E3CF             >
  13+ E3CF             >//              ______________________________________________________________________
  13+ E3CF             >//              Dictionary part
  13+ E3CF             >
  13+ E3CF             >                org     Dict_Ptr
  13+ 26C8             >
  13+ 26C8 CD 03       >                dw      mirror_Ptr - $E000 + Heap_offset
  13+ 26CA             >
  13+ 26CA             >COLON:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  13+ 26CA CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  13+ 26CD             >
  13+ 26CD             >
  13+ 26CD             >                endif           ; ok        // for other definitions it "points" the correct handler
  13+ 26CD             >                // Use of "; ok" to suppress "warning[fwdref]"
  13+ 26CD             >
  13+ 26CD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14+ 26CD
  15+ 26CD BF 2A                        dw      QEXEC                   // ?exec
  16+ 26CF 8A 2A                        dw      STORE_CSP               // !csp
  17+ 26D1 FB 27 3E 26                  dw      CURRENT, FETCH          // current @
  18+ 26D5 F5 27 48 26                  dw      CONTEXT, STORE          // context !
  19+ 26D9 AB 30                        dw      CREATE                  // create  ( forward )
  20+ 26DB 43 2B                        dw      SMUDGE                  // dmudge
  21+ 26DD 34 2B                        dw      SQUARED_CLOSE           // ]
  22+ 26DF 7F 2B                        dw      C_SEMICOLON_CODE        // ;code ( change the 3-bytes CFA of defining word to call Enter_Ptr )
  23+ 26E1                                                              // ... immediate
  24+ 26E1              Enter_Ptr:
  25+ 26E1                              // via call coded in CFA
  26+ 26E1 EB                           ex      de, hl //**
  27+ 26E2                              // *** ldhlrp
  28+ 26E2 2B                           dec     hl                  // push on Return-Stack current Instruction-Pointer
  29+ 26E3 70                           ld      (hl), b
  30+ 26E4 2B                           dec     hl
  31+ 26E5 71                           ld      (hl), c
  32+ 26E6                              // *** ldrphl
  33+ 26E6 EB                           ex      de, hl //**
  34+ 26E7
  35+ 26E7
  36+ 26E7 C1                           pop     bc                  // points to PFA of "this" word
  37+ 26E8                              next
  37+ 26E8 DD E9       >                jp      (ix)
  38+ 26EA
  39+ 26EA              //  ______________________________________________________________________
  40+ 26EA              //
  41+ 26EA              // ;            --
  42+ 26EA              // Semicolon. End of Colon-Definition. Stack must be balanced.
  43+ 26EA                              Colon_Def SEMICOLON, ";", is_immediate   // has forward-ref
  43+ 26EA             >                New_Def  SEMICOLON, ";", Enter_Ptr, is_immediate ; ok
  43+ 26EA             >
  43+ 26EA             >Dict_Ptr        defl    $
  43+ 26EA             >
  43+ 26EA             >//              ______________________________________________________________________
  43+ 26EA             >//              Heap part
  43+ 26EA             >
  43+ 26EA             >
  43+ 26EA             >                org     (Heap_Ptr & $1FFF) + $E000
  43+ E3CF             >
  43+ E3CF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  43+ E3CF             >Latest_Definition defl  Heap_Ptr
  43+ E3CF             >
  43+ E3CF             >                // dummy db directives used to calculate length of namec
  43+ E3CF 3B          >                db      ";"
  43+ E3D0             >len_NFA         defl    $ - temp_NFA
  43+ E3D0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  43+ E3CF             >
  43+ E3CF C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
  43+ E3D0 3B          >                db      ";"               // name string in 7-bit ascii, but
  43+ E3D1             >                org     $-1                 // alter last byte of Name just above to set
  43+ E3D0 BB          >                db      {b $} | END_BIT     // msb as name end
  43+ E3D1             >
  43+ E3D1 C9 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  43+ E3D3             >Prev_Ptr        defl    Heap_Ptr
  43+ E3D3             >
  43+ E3D3             >mirror_Ptr      defl    $
  43+ E3D3             >
  43+ E3D3 EC 26       >                dw      Dict_Ptr + 2        // xt
  43+ E3D5             >Heap_Ptr        defl    $ - $E000           // save current HP
  43+ E3D5             >
  43+ E3D5             >Current_HP      defl  $ - $E000             // used to set HP once!
  43+ E3D5             >
  43+ E3D5             >//              ______________________________________________________________________
  43+ E3D5             >//              Dictionary part
  43+ E3D5             >
  43+ E3D5             >                org     Dict_Ptr
  43+ 26EA             >
  43+ 26EA D3 03       >                dw      mirror_Ptr - $E000 + Heap_offset
  43+ 26EC             >
  43+ 26EC             >SEMICOLON:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  43+ 26EC CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  43+ 26EF             >
  43+ 26EF             >
  43+ 26EF             >                endif           ; ok        // for other definitions it "points" the correct handler
  43+ 26EF             >                // Use of "; ok" to suppress "warning[fwdref]"
  43+ 26EF             >
  43+ 26EF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  44+ 26EF
  45+ 26EF DF 2A                        dw      QCSP                    // ?csp
  46+ 26F1 07 2B F4 24                  dw      COMPILE, EXIT           // [compile] ;s
  47+ 26F5 43 2B                        dw      SMUDGE                  // smudge
  48+ 26F7 27 2B                        dw      SQUARED_OPEN            // [
  49+ 26F9 F4 24                        dw      EXIT                    // ; immediate
  50+ 26FB
  51+ 26FB              //  ______________________________________________________________________
  52+ 26FB              //
  53+ 26FB              // noop         --
  54+ 26FB
  55+ 26FB                              New_Def NOOP, "NOOP", is_code, is_normal
  55+ 26FB             >
  55+ 26FB             >Dict_Ptr        defl    $
  55+ 26FB             >
  55+ 26FB             >//              ______________________________________________________________________
  55+ 26FB             >//              Heap part
  55+ 26FB             >
  55+ 26FB             >
  55+ 26FB             >                org     (Heap_Ptr & $1FFF) + $E000
  55+ E3D5             >
  55+ E3D5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  55+ E3D5             >Latest_Definition defl  Heap_Ptr
  55+ E3D5             >
  55+ E3D5             >                // dummy db directives used to calculate length of namec
  55+ E3D5 4E 4F 4F 50 >                db      "NOOP"
  55+ E3D9             >len_NFA         defl    $ - temp_NFA
  55+ E3D9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  55+ E3D5             >
  55+ E3D5 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  55+ E3D6 4E 4F 4F 50 >                db      "NOOP"               // name string in 7-bit ascii, but
  55+ E3DA             >                org     $-1                 // alter last byte of Name just above to set
  55+ E3D9 D0          >                db      {b $} | END_BIT     // msb as name end
  55+ E3DA             >
  55+ E3DA CF 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  55+ E3DC             >Prev_Ptr        defl    Heap_Ptr
  55+ E3DC             >
  55+ E3DC             >mirror_Ptr      defl    $
  55+ E3DC             >
  55+ E3DC FD 26       >                dw      Dict_Ptr + 2        // xt
  55+ E3DE             >Heap_Ptr        defl    $ - $E000           // save current HP
  55+ E3DE             >
  55+ E3DE             >Current_HP      defl  $ - $E000             // used to set HP once!
  55+ E3DE             >
  55+ E3DE             >//              ______________________________________________________________________
  55+ E3DE             >//              Dictionary part
  55+ E3DE             >
  55+ E3DE             >                org     Dict_Ptr
  55+ 26FB             >
  55+ 26FB DC 03       >                dw      mirror_Ptr - $E000 + Heap_offset
  55+ 26FD             >
  55+ 26FD             >NOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  55+ 26FD ~           >                call    runcode ; ok        // for primitive definitions  actual code
  55+ 26FD ~           >
  55+ 26FD ~           >
  55+ 26FD             >                endif           ; ok        // for other definitions it "points" the correct handler
  55+ 26FD             >                // Use of "; ok" to suppress "warning[fwdref]"
  55+ 26FD             >
  55+ 26FD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  56+ 26FD                              next
  56+ 26FD DD E9       >                jp      (ix)
  57+ 26FF
  58+ 26FF              //  ______________________________________________________________________
  59+ 26FF              //
  60+ 26FF              // constant     n -- cccc     ( compile time )
  61+ 26FF              //              -- n          ( run time )
  62+ 26FF              // Constant definition.
  63+ 26FF                              Colon_Def CONSTANT, "CONSTANT", is_normal   // has forward-ref
  63+ 26FF             >                New_Def  CONSTANT, "CONSTANT", Enter_Ptr, is_normal ; ok
  63+ 26FF             >
  63+ 26FF             >Dict_Ptr        defl    $
  63+ 26FF             >
  63+ 26FF             >//              ______________________________________________________________________
  63+ 26FF             >//              Heap part
  63+ 26FF             >
  63+ 26FF             >
  63+ 26FF             >                org     (Heap_Ptr & $1FFF) + $E000
  63+ E3DE             >
  63+ E3DE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  63+ E3DE             >Latest_Definition defl  Heap_Ptr
  63+ E3DE             >
  63+ E3DE             >                // dummy db directives used to calculate length of namec
  63+ E3DE 43 4F 4E 53 >                db      "CONSTANT"
  63+ E3E2 54 41 4E 54 >
  63+ E3E6             >len_NFA         defl    $ - temp_NFA
  63+ E3E6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  63+ E3DE             >
  63+ E3DE 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  63+ E3DF 43 4F 4E 53 >                db      "CONSTANT"               // name string in 7-bit ascii, but
  63+ E3E3 54 41 4E 54 >
  63+ E3E7             >                org     $-1                 // alter last byte of Name just above to set
  63+ E3E6 D4          >                db      {b $} | END_BIT     // msb as name end
  63+ E3E7             >
  63+ E3E7 D5 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  63+ E3E9             >Prev_Ptr        defl    Heap_Ptr
  63+ E3E9             >
  63+ E3E9             >mirror_Ptr      defl    $
  63+ E3E9             >
  63+ E3E9 01 27       >                dw      Dict_Ptr + 2        // xt
  63+ E3EB             >Heap_Ptr        defl    $ - $E000           // save current HP
  63+ E3EB             >
  63+ E3EB             >Current_HP      defl  $ - $E000             // used to set HP once!
  63+ E3EB             >
  63+ E3EB             >//              ______________________________________________________________________
  63+ E3EB             >//              Dictionary part
  63+ E3EB             >
  63+ E3EB             >                org     Dict_Ptr
  63+ 26FF             >
  63+ 26FF E9 03       >                dw      mirror_Ptr - $E000 + Heap_offset
  63+ 2701             >
  63+ 2701             >CONSTANT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  63+ 2701 CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  63+ 2704             >
  63+ 2704             >
  63+ 2704             >                endif           ; ok        // for other definitions it "points" the correct handler
  63+ 2704             >                // Use of "; ok" to suppress "warning[fwdref]"
  63+ 2704             >
  63+ 2704             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  64+ 2704 AB 30                        dw      CREATE                  // create
  65+ 2706 71 28                        dw      COMMA                   // ,    ( at PFA then, store the value )
  66+ 2708 7F 2B                        dw      C_SEMICOLON_CODE        // ;code (  changes the 3-bytes CFA to call Constant_Ptr )
  67+ 270A              Constant_Ptr:
  68+ 270A
  69+ 270A
  70+ 270A E1                           pop     hl
  71+ 270B
  72+ 270B 7E                           ld      a, (hl)
  73+ 270C 23                           inc     hl
  74+ 270D 66                           ld      h, (hl)
  75+ 270E 6F                           ld      l, a
  76+ 270F E5                           push    hl
  77+ 2710                              next
  77+ 2710 DD E9       >                jp      (ix)
  78+ 2712
  79+ 2712              //  ______________________________________________________________________
  80+ 2712              //
  81+ 2712              // variable     n -- cccc     ( compile time )
  82+ 2712              //              -- a          ( run time )
  83+ 2712              // Variable definition, n is the initial value.
  84+ 2712                              Colon_Def VARIABLE, "VARIABLE", is_normal   // has forward-ref
  84+ 2712             >                New_Def  VARIABLE, "VARIABLE", Enter_Ptr, is_normal ; ok
  84+ 2712             >
  84+ 2712             >Dict_Ptr        defl    $
  84+ 2712             >
  84+ 2712             >//              ______________________________________________________________________
  84+ 2712             >//              Heap part
  84+ 2712             >
  84+ 2712             >
  84+ 2712             >                org     (Heap_Ptr & $1FFF) + $E000
  84+ E3EB             >
  84+ E3EB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  84+ E3EB             >Latest_Definition defl  Heap_Ptr
  84+ E3EB             >
  84+ E3EB             >                // dummy db directives used to calculate length of namec
  84+ E3EB 56 41 52 49 >                db      "VARIABLE"
  84+ E3EF 41 42 4C 45 >
  84+ E3F3             >len_NFA         defl    $ - temp_NFA
  84+ E3F3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  84+ E3EB             >
  84+ E3EB 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  84+ E3EC 56 41 52 49 >                db      "VARIABLE"               // name string in 7-bit ascii, but
  84+ E3F0 41 42 4C 45 >
  84+ E3F4             >                org     $-1                 // alter last byte of Name just above to set
  84+ E3F3 C5          >                db      {b $} | END_BIT     // msb as name end
  84+ E3F4             >
  84+ E3F4 DE 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  84+ E3F6             >Prev_Ptr        defl    Heap_Ptr
  84+ E3F6             >
  84+ E3F6             >mirror_Ptr      defl    $
  84+ E3F6             >
  84+ E3F6 14 27       >                dw      Dict_Ptr + 2        // xt
  84+ E3F8             >Heap_Ptr        defl    $ - $E000           // save current HP
  84+ E3F8             >
  84+ E3F8             >Current_HP      defl  $ - $E000             // used to set HP once!
  84+ E3F8             >
  84+ E3F8             >//              ______________________________________________________________________
  84+ E3F8             >//              Dictionary part
  84+ E3F8             >
  84+ E3F8             >                org     Dict_Ptr
  84+ 2712             >
  84+ 2712 F6 03       >                dw      mirror_Ptr - $E000 + Heap_offset
  84+ 2714             >
  84+ 2714             >VARIABLE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  84+ 2714 CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  84+ 2717             >
  84+ 2717             >
  84+ 2717             >                endif           ; ok        // for other definitions it "points" the correct handler
  84+ 2717             >                // Use of "; ok" to suppress "warning[fwdref]"
  84+ 2717             >
  84+ 2717             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  85+ 2717
  86+ 2717 36 27                        dw      ZERO
  87+ 2719 01 27                        dw      CONSTANT                // constant
  88+ 271B 7F 2B                        dw      C_SEMICOLON_CODE        // ;code ( changes the 3-bytes CFA to call Variable_Ptr )
  89+ 271D              Variable_Ptr:
  90+ 271D
  91+ 271D
  92+ 271D
  93+ 271D
  94+ 271D                              next
  94+ 271D DD E9       >                jp      (ix)
  95+ 271F
  96+ 271F              //  ______________________________________________________________________
  97+ 271F              //
  98+ 271F              // user         b -- cccc     ( compile time )
  99+ 271F              //              -- a          ( run time )
 100+ 271F              // User variable definition
 101+ 271F                              Colon_Def USER, "USER", is_normal
 101+ 271F             >                New_Def  USER, "USER", Enter_Ptr, is_normal ; ok
 101+ 271F             >
 101+ 271F             >Dict_Ptr        defl    $
 101+ 271F             >
 101+ 271F             >//              ______________________________________________________________________
 101+ 271F             >//              Heap part
 101+ 271F             >
 101+ 271F             >
 101+ 271F             >                org     (Heap_Ptr & $1FFF) + $E000
 101+ E3F8             >
 101+ E3F8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 101+ E3F8             >Latest_Definition defl  Heap_Ptr
 101+ E3F8             >
 101+ E3F8             >                // dummy db directives used to calculate length of namec
 101+ E3F8 55 53 45 52 >                db      "USER"
 101+ E3FC             >len_NFA         defl    $ - temp_NFA
 101+ E3FC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 101+ E3F8             >
 101+ E3F8 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 101+ E3F9 55 53 45 52 >                db      "USER"               // name string in 7-bit ascii, but
 101+ E3FD             >                org     $-1                 // alter last byte of Name just above to set
 101+ E3FC D2          >                db      {b $} | END_BIT     // msb as name end
 101+ E3FD             >
 101+ E3FD EB 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 101+ E3FF             >Prev_Ptr        defl    Heap_Ptr
 101+ E3FF             >
 101+ E3FF             >mirror_Ptr      defl    $
 101+ E3FF             >
 101+ E3FF 21 27       >                dw      Dict_Ptr + 2        // xt
 101+ E401             >Heap_Ptr        defl    $ - $E000           // save current HP
 101+ E401             >
 101+ E401             >Current_HP      defl  $ - $E000             // used to set HP once!
 101+ E401             >
 101+ E401             >//              ______________________________________________________________________
 101+ E401             >//              Dictionary part
 101+ E401             >
 101+ E401             >                org     Dict_Ptr
 101+ 271F             >
 101+ 271F FF 03       >                dw      mirror_Ptr - $E000 + Heap_offset
 101+ 2721             >
 101+ 2721             >USER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 101+ 2721 CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 101+ 2724             >
 101+ 2724             >
 101+ 2724             >                endif           ; ok        // for other definitions it "points" the correct handler
 101+ 2724             >                // Use of "; ok" to suppress "warning[fwdref]"
 101+ 2724             >
 101+ 2724             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 102+ 2724
 103+ 2724 AB 30                        dw      CREATE                  // create
 104+ 2726 80 28                        dw      CCOMMA                  // c,
 105+ 2728 7F 2B                        dw      C_SEMICOLON_CODE        // ;code () changes the 3-bytes CFA to call User_Ptr )
 106+ 272A
 107+ 272A
 108+ 272A              User_Ptr:
 109+ 272A                              // via call coded in CFA
 110+ 272A E1                           pop     hl
 111+ 272B
 112+ 272B 7E                           ld      a, (hl)
 113+ 272C 2A 2E 20                     ld      hl, (USER_Pointer)
 114+ 272F ED 31                        add     hl, a
 115+ 2731 E5                           push    hl
 116+ 2732                              next
 116+ 2732 DD E9       >                jp      (ix)
 117+ 2734
 118+ 2734              //  ______________________________________________________________________
 119+ 2734              //
 120+ 2734                              Constant_Def ZERO       ,   "0"     ,   0
 120+ 2734             >                New_Def  ZERO, "0", Constant_Ptr, is_normal
 120+ 2734             >
 120+ 2734             >Dict_Ptr        defl    $
 120+ 2734             >
 120+ 2734             >//              ______________________________________________________________________
 120+ 2734             >//              Heap part
 120+ 2734             >
 120+ 2734             >
 120+ 2734             >                org     (Heap_Ptr & $1FFF) + $E000
 120+ E401             >
 120+ E401             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 120+ E401             >Latest_Definition defl  Heap_Ptr
 120+ E401             >
 120+ E401             >                // dummy db directives used to calculate length of namec
 120+ E401 30          >                db      "0"
 120+ E402             >len_NFA         defl    $ - temp_NFA
 120+ E402             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 120+ E401             >
 120+ E401 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 120+ E402 30          >                db      "0"               // name string in 7-bit ascii, but
 120+ E403             >                org     $-1                 // alter last byte of Name just above to set
 120+ E402 B0          >                db      {b $} | END_BIT     // msb as name end
 120+ E403             >
 120+ E403 F8 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 120+ E405             >Prev_Ptr        defl    Heap_Ptr
 120+ E405             >
 120+ E405             >mirror_Ptr      defl    $
 120+ E405             >
 120+ E405 36 27       >                dw      Dict_Ptr + 2        // xt
 120+ E407             >Heap_Ptr        defl    $ - $E000           // save current HP
 120+ E407             >
 120+ E407             >Current_HP      defl  $ - $E000             // used to set HP once!
 120+ E407             >
 120+ E407             >//              ______________________________________________________________________
 120+ E407             >//              Dictionary part
 120+ E407             >
 120+ E407             >                org     Dict_Ptr
 120+ 2734             >
 120+ 2734 05 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 120+ 2736             >
 120+ 2736             >ZERO:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 120+ 2736 CD 0A 27    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 120+ 2739             >
 120+ 2739             >
 120+ 2739             >                endif           ; ok        // for other definitions it "points" the correct handler
 120+ 2739             >                // Use of "; ok" to suppress "warning[fwdref]"
 120+ 2739             >
 120+ 2739             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 120+ 2739 00 00       >                dw      0
 121+ 273B                              Constant_Def ONE        ,   "1"     ,   1
 121+ 273B             >                New_Def  ONE, "1", Constant_Ptr, is_normal
 121+ 273B             >
 121+ 273B             >Dict_Ptr        defl    $
 121+ 273B             >
 121+ 273B             >//              ______________________________________________________________________
 121+ 273B             >//              Heap part
 121+ 273B             >
 121+ 273B             >
 121+ 273B             >                org     (Heap_Ptr & $1FFF) + $E000
 121+ E407             >
 121+ E407             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 121+ E407             >Latest_Definition defl  Heap_Ptr
 121+ E407             >
 121+ E407             >                // dummy db directives used to calculate length of namec
 121+ E407 31          >                db      "1"
 121+ E408             >len_NFA         defl    $ - temp_NFA
 121+ E408             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 121+ E407             >
 121+ E407 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 121+ E408 31          >                db      "1"               // name string in 7-bit ascii, but
 121+ E409             >                org     $-1                 // alter last byte of Name just above to set
 121+ E408 B1          >                db      {b $} | END_BIT     // msb as name end
 121+ E409             >
 121+ E409 01 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 121+ E40B             >Prev_Ptr        defl    Heap_Ptr
 121+ E40B             >
 121+ E40B             >mirror_Ptr      defl    $
 121+ E40B             >
 121+ E40B 3D 27       >                dw      Dict_Ptr + 2        // xt
 121+ E40D             >Heap_Ptr        defl    $ - $E000           // save current HP
 121+ E40D             >
 121+ E40D             >Current_HP      defl  $ - $E000             // used to set HP once!
 121+ E40D             >
 121+ E40D             >//              ______________________________________________________________________
 121+ E40D             >//              Dictionary part
 121+ E40D             >
 121+ E40D             >                org     Dict_Ptr
 121+ 273B             >
 121+ 273B 0B 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 121+ 273D             >
 121+ 273D             >ONE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 121+ 273D CD 0A 27    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 121+ 2740             >
 121+ 2740             >
 121+ 2740             >                endif           ; ok        // for other definitions it "points" the correct handler
 121+ 2740             >                // Use of "; ok" to suppress "warning[fwdref]"
 121+ 2740             >
 121+ 2740             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 121+ 2740 01 00       >                dw      1
 122+ 2742                              Constant_Def TWO        ,   "2"     ,   2
 122+ 2742             >                New_Def  TWO, "2", Constant_Ptr, is_normal
 122+ 2742             >
 122+ 2742             >Dict_Ptr        defl    $
 122+ 2742             >
 122+ 2742             >//              ______________________________________________________________________
 122+ 2742             >//              Heap part
 122+ 2742             >
 122+ 2742             >
 122+ 2742             >                org     (Heap_Ptr & $1FFF) + $E000
 122+ E40D             >
 122+ E40D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 122+ E40D             >Latest_Definition defl  Heap_Ptr
 122+ E40D             >
 122+ E40D             >                // dummy db directives used to calculate length of namec
 122+ E40D 32          >                db      "2"
 122+ E40E             >len_NFA         defl    $ - temp_NFA
 122+ E40E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 122+ E40D             >
 122+ E40D 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 122+ E40E 32          >                db      "2"               // name string in 7-bit ascii, but
 122+ E40F             >                org     $-1                 // alter last byte of Name just above to set
 122+ E40E B2          >                db      {b $} | END_BIT     // msb as name end
 122+ E40F             >
 122+ E40F 07 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 122+ E411             >Prev_Ptr        defl    Heap_Ptr
 122+ E411             >
 122+ E411             >mirror_Ptr      defl    $
 122+ E411             >
 122+ E411 44 27       >                dw      Dict_Ptr + 2        // xt
 122+ E413             >Heap_Ptr        defl    $ - $E000           // save current HP
 122+ E413             >
 122+ E413             >Current_HP      defl  $ - $E000             // used to set HP once!
 122+ E413             >
 122+ E413             >//              ______________________________________________________________________
 122+ E413             >//              Dictionary part
 122+ E413             >
 122+ E413             >                org     Dict_Ptr
 122+ 2742             >
 122+ 2742 11 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 122+ 2744             >
 122+ 2744             >TWO:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 122+ 2744 CD 0A 27    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 122+ 2747             >
 122+ 2747             >
 122+ 2747             >                endif           ; ok        // for other definitions it "points" the correct handler
 122+ 2747             >                // Use of "; ok" to suppress "warning[fwdref]"
 122+ 2747             >
 122+ 2747             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 122+ 2747 02 00       >                dw      2
 123+ 2749                              Constant_Def THREE      ,   "3"     ,   3
 123+ 2749             >                New_Def  THREE, "3", Constant_Ptr, is_normal
 123+ 2749             >
 123+ 2749             >Dict_Ptr        defl    $
 123+ 2749             >
 123+ 2749             >//              ______________________________________________________________________
 123+ 2749             >//              Heap part
 123+ 2749             >
 123+ 2749             >
 123+ 2749             >                org     (Heap_Ptr & $1FFF) + $E000
 123+ E413             >
 123+ E413             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 123+ E413             >Latest_Definition defl  Heap_Ptr
 123+ E413             >
 123+ E413             >                // dummy db directives used to calculate length of namec
 123+ E413 33          >                db      "3"
 123+ E414             >len_NFA         defl    $ - temp_NFA
 123+ E414             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 123+ E413             >
 123+ E413 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 123+ E414 33          >                db      "3"               // name string in 7-bit ascii, but
 123+ E415             >                org     $-1                 // alter last byte of Name just above to set
 123+ E414 B3          >                db      {b $} | END_BIT     // msb as name end
 123+ E415             >
 123+ E415 0D 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 123+ E417             >Prev_Ptr        defl    Heap_Ptr
 123+ E417             >
 123+ E417             >mirror_Ptr      defl    $
 123+ E417             >
 123+ E417 4B 27       >                dw      Dict_Ptr + 2        // xt
 123+ E419             >Heap_Ptr        defl    $ - $E000           // save current HP
 123+ E419             >
 123+ E419             >Current_HP      defl  $ - $E000             // used to set HP once!
 123+ E419             >
 123+ E419             >//              ______________________________________________________________________
 123+ E419             >//              Dictionary part
 123+ E419             >
 123+ E419             >                org     Dict_Ptr
 123+ 2749             >
 123+ 2749 17 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 123+ 274B             >
 123+ 274B             >THREE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 123+ 274B CD 0A 27    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 123+ 274E             >
 123+ 274E             >
 123+ 274E             >                endif           ; ok        // for other definitions it "points" the correct handler
 123+ 274E             >                // Use of "; ok" to suppress "warning[fwdref]"
 123+ 274E             >
 123+ 274E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 123+ 274E 03 00       >                dw      3
 124+ 2750                              Constant_Def NEG_ONE    ,   "-1"    ,  -1
 124+ 2750             >                New_Def  NEG_ONE, "-1", Constant_Ptr, is_normal
 124+ 2750             >
 124+ 2750             >Dict_Ptr        defl    $
 124+ 2750             >
 124+ 2750             >//              ______________________________________________________________________
 124+ 2750             >//              Heap part
 124+ 2750             >
 124+ 2750             >
 124+ 2750             >                org     (Heap_Ptr & $1FFF) + $E000
 124+ E419             >
 124+ E419             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 124+ E419             >Latest_Definition defl  Heap_Ptr
 124+ E419             >
 124+ E419             >                // dummy db directives used to calculate length of namec
 124+ E419 2D 31       >                db      "-1"
 124+ E41B             >len_NFA         defl    $ - temp_NFA
 124+ E41B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 124+ E419             >
 124+ E419 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 124+ E41A 2D 31       >                db      "-1"               // name string in 7-bit ascii, but
 124+ E41C             >                org     $-1                 // alter last byte of Name just above to set
 124+ E41B B1          >                db      {b $} | END_BIT     // msb as name end
 124+ E41C             >
 124+ E41C 13 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 124+ E41E             >Prev_Ptr        defl    Heap_Ptr
 124+ E41E             >
 124+ E41E             >mirror_Ptr      defl    $
 124+ E41E             >
 124+ E41E 52 27       >                dw      Dict_Ptr + 2        // xt
 124+ E420             >Heap_Ptr        defl    $ - $E000           // save current HP
 124+ E420             >
 124+ E420             >Current_HP      defl  $ - $E000             // used to set HP once!
 124+ E420             >
 124+ E420             >//              ______________________________________________________________________
 124+ E420             >//              Dictionary part
 124+ E420             >
 124+ E420             >                org     Dict_Ptr
 124+ 2750             >
 124+ 2750 1E 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 124+ 2752             >
 124+ 2752             >NEG_ONE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 124+ 2752 CD 0A 27    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 124+ 2755             >
 124+ 2755             >
 124+ 2755             >                endif           ; ok        // for other definitions it "points" the correct handler
 124+ 2755             >                // Use of "; ok" to suppress "warning[fwdref]"
 124+ 2755             >
 124+ 2755             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 124+ 2755 FF FF       >                dw      -1
 125+ 2757                              Constant_Def BL         ,   "BL"    , $20
 125+ 2757             >                New_Def  BL, "BL", Constant_Ptr, is_normal
 125+ 2757             >
 125+ 2757             >Dict_Ptr        defl    $
 125+ 2757             >
 125+ 2757             >//              ______________________________________________________________________
 125+ 2757             >//              Heap part
 125+ 2757             >
 125+ 2757             >
 125+ 2757             >                org     (Heap_Ptr & $1FFF) + $E000
 125+ E420             >
 125+ E420             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 125+ E420             >Latest_Definition defl  Heap_Ptr
 125+ E420             >
 125+ E420             >                // dummy db directives used to calculate length of namec
 125+ E420 42 4C       >                db      "BL"
 125+ E422             >len_NFA         defl    $ - temp_NFA
 125+ E422             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 125+ E420             >
 125+ E420 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 125+ E421 42 4C       >                db      "BL"               // name string in 7-bit ascii, but
 125+ E423             >                org     $-1                 // alter last byte of Name just above to set
 125+ E422 CC          >                db      {b $} | END_BIT     // msb as name end
 125+ E423             >
 125+ E423 19 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 125+ E425             >Prev_Ptr        defl    Heap_Ptr
 125+ E425             >
 125+ E425             >mirror_Ptr      defl    $
 125+ E425             >
 125+ E425 59 27       >                dw      Dict_Ptr + 2        // xt
 125+ E427             >Heap_Ptr        defl    $ - $E000           // save current HP
 125+ E427             >
 125+ E427             >Current_HP      defl  $ - $E000             // used to set HP once!
 125+ E427             >
 125+ E427             >//              ______________________________________________________________________
 125+ E427             >//              Dictionary part
 125+ E427             >
 125+ E427             >                org     Dict_Ptr
 125+ 2757             >
 125+ 2757 25 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 125+ 2759             >
 125+ 2759             >BL:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 125+ 2759 CD 0A 27    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 125+ 275C             >
 125+ 275C             >
 125+ 275C             >                endif           ; ok        // for other definitions it "points" the correct handler
 125+ 275C             >                // Use of "; ok" to suppress "warning[fwdref]"
 125+ 275C             >
 125+ 275C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 125+ 275C 20 00       >                dw      $20
 126+ 275E                              Constant_Def CL         ,   "C/L"   ,  64
 126+ 275E             >                New_Def  CL, "C/L", Constant_Ptr, is_normal
 126+ 275E             >
 126+ 275E             >Dict_Ptr        defl    $
 126+ 275E             >
 126+ 275E             >//              ______________________________________________________________________
 126+ 275E             >//              Heap part
 126+ 275E             >
 126+ 275E             >
 126+ 275E             >                org     (Heap_Ptr & $1FFF) + $E000
 126+ E427             >
 126+ E427             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 126+ E427             >Latest_Definition defl  Heap_Ptr
 126+ E427             >
 126+ E427             >                // dummy db directives used to calculate length of namec
 126+ E427 43 2F 4C    >                db      "C/L"
 126+ E42A             >len_NFA         defl    $ - temp_NFA
 126+ E42A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 126+ E427             >
 126+ E427 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 126+ E428 43 2F 4C    >                db      "C/L"               // name string in 7-bit ascii, but
 126+ E42B             >                org     $-1                 // alter last byte of Name just above to set
 126+ E42A CC          >                db      {b $} | END_BIT     // msb as name end
 126+ E42B             >
 126+ E42B 20 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 126+ E42D             >Prev_Ptr        defl    Heap_Ptr
 126+ E42D             >
 126+ E42D             >mirror_Ptr      defl    $
 126+ E42D             >
 126+ E42D 60 27       >                dw      Dict_Ptr + 2        // xt
 126+ E42F             >Heap_Ptr        defl    $ - $E000           // save current HP
 126+ E42F             >
 126+ E42F             >Current_HP      defl  $ - $E000             // used to set HP once!
 126+ E42F             >
 126+ E42F             >//              ______________________________________________________________________
 126+ E42F             >//              Dictionary part
 126+ E42F             >
 126+ E42F             >                org     Dict_Ptr
 126+ 275E             >
 126+ 275E 2D 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 126+ 2760             >
 126+ 2760             >CL:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 126+ 2760 CD 0A 27    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 126+ 2763             >
 126+ 2763             >
 126+ 2763             >                endif           ; ok        // for other definitions it "points" the correct handler
 126+ 2763             >                // Use of "; ok" to suppress "warning[fwdref]"
 126+ 2763             >
 126+ 2763             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 126+ 2763 40 00       >                dw      64
 127+ 2765                              Constant_Def BBUF       ,   "B/BUF" , 512
 127+ 2765             >                New_Def  BBUF, "B/BUF", Constant_Ptr, is_normal
 127+ 2765             >
 127+ 2765             >Dict_Ptr        defl    $
 127+ 2765             >
 127+ 2765             >//              ______________________________________________________________________
 127+ 2765             >//              Heap part
 127+ 2765             >
 127+ 2765             >
 127+ 2765             >                org     (Heap_Ptr & $1FFF) + $E000
 127+ E42F             >
 127+ E42F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 127+ E42F             >Latest_Definition defl  Heap_Ptr
 127+ E42F             >
 127+ E42F             >                // dummy db directives used to calculate length of namec
 127+ E42F 42 2F 42 55 >                db      "B/BUF"
 127+ E433 46          >
 127+ E434             >len_NFA         defl    $ - temp_NFA
 127+ E434             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 127+ E42F             >
 127+ E42F 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 127+ E430 42 2F 42 55 >                db      "B/BUF"               // name string in 7-bit ascii, but
 127+ E434 46          >
 127+ E435             >                org     $-1                 // alter last byte of Name just above to set
 127+ E434 C6          >                db      {b $} | END_BIT     // msb as name end
 127+ E435             >
 127+ E435 27 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 127+ E437             >Prev_Ptr        defl    Heap_Ptr
 127+ E437             >
 127+ E437             >mirror_Ptr      defl    $
 127+ E437             >
 127+ E437 67 27       >                dw      Dict_Ptr + 2        // xt
 127+ E439             >Heap_Ptr        defl    $ - $E000           // save current HP
 127+ E439             >
 127+ E439             >Current_HP      defl  $ - $E000             // used to set HP once!
 127+ E439             >
 127+ E439             >//              ______________________________________________________________________
 127+ E439             >//              Dictionary part
 127+ E439             >
 127+ E439             >                org     Dict_Ptr
 127+ 2765             >
 127+ 2765 37 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 127+ 2767             >
 127+ 2767             >BBUF:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 127+ 2767 CD 0A 27    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 127+ 276A             >
 127+ 276A             >
 127+ 276A             >                endif           ; ok        // for other definitions it "points" the correct handler
 127+ 276A             >                // Use of "; ok" to suppress "warning[fwdref]"
 127+ 276A             >
 127+ 276A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 127+ 276A 00 02       >                dw      512
 128+ 276C                              Constant_Def BSCR       ,   "B/SCR" ,   2
 128+ 276C             >                New_Def  BSCR, "B/SCR", Constant_Ptr, is_normal
 128+ 276C             >
 128+ 276C             >Dict_Ptr        defl    $
 128+ 276C             >
 128+ 276C             >//              ______________________________________________________________________
 128+ 276C             >//              Heap part
 128+ 276C             >
 128+ 276C             >
 128+ 276C             >                org     (Heap_Ptr & $1FFF) + $E000
 128+ E439             >
 128+ E439             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 128+ E439             >Latest_Definition defl  Heap_Ptr
 128+ E439             >
 128+ E439             >                // dummy db directives used to calculate length of namec
 128+ E439 42 2F 53 43 >                db      "B/SCR"
 128+ E43D 52          >
 128+ E43E             >len_NFA         defl    $ - temp_NFA
 128+ E43E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 128+ E439             >
 128+ E439 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 128+ E43A 42 2F 53 43 >                db      "B/SCR"               // name string in 7-bit ascii, but
 128+ E43E 52          >
 128+ E43F             >                org     $-1                 // alter last byte of Name just above to set
 128+ E43E D2          >                db      {b $} | END_BIT     // msb as name end
 128+ E43F             >
 128+ E43F 2F 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 128+ E441             >Prev_Ptr        defl    Heap_Ptr
 128+ E441             >
 128+ E441             >mirror_Ptr      defl    $
 128+ E441             >
 128+ E441 6E 27       >                dw      Dict_Ptr + 2        // xt
 128+ E443             >Heap_Ptr        defl    $ - $E000           // save current HP
 128+ E443             >
 128+ E443             >Current_HP      defl  $ - $E000             // used to set HP once!
 128+ E443             >
 128+ E443             >//              ______________________________________________________________________
 128+ E443             >//              Dictionary part
 128+ E443             >
 128+ E443             >                org     Dict_Ptr
 128+ 276C             >
 128+ 276C 41 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 128+ 276E             >
 128+ 276E             >BSCR:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 128+ 276E CD 0A 27    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 128+ 2771             >
 128+ 2771             >
 128+ 2771             >                endif           ; ok        // for other definitions it "points" the correct handler
 128+ 2771             >                // Use of "; ok" to suppress "warning[fwdref]"
 128+ 2771             >
 128+ 2771             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 128+ 2771 02 00       >                dw      2
 129+ 2773                              Constant_Def LSCR       ,   "L/SCR" ,  16
 129+ 2773             >                New_Def  LSCR, "L/SCR", Constant_Ptr, is_normal
 129+ 2773             >
 129+ 2773             >Dict_Ptr        defl    $
 129+ 2773             >
 129+ 2773             >//              ______________________________________________________________________
 129+ 2773             >//              Heap part
 129+ 2773             >
 129+ 2773             >
 129+ 2773             >                org     (Heap_Ptr & $1FFF) + $E000
 129+ E443             >
 129+ E443             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 129+ E443             >Latest_Definition defl  Heap_Ptr
 129+ E443             >
 129+ E443             >                // dummy db directives used to calculate length of namec
 129+ E443 4C 2F 53 43 >                db      "L/SCR"
 129+ E447 52          >
 129+ E448             >len_NFA         defl    $ - temp_NFA
 129+ E448             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 129+ E443             >
 129+ E443 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 129+ E444 4C 2F 53 43 >                db      "L/SCR"               // name string in 7-bit ascii, but
 129+ E448 52          >
 129+ E449             >                org     $-1                 // alter last byte of Name just above to set
 129+ E448 D2          >                db      {b $} | END_BIT     // msb as name end
 129+ E449             >
 129+ E449 39 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 129+ E44B             >Prev_Ptr        defl    Heap_Ptr
 129+ E44B             >
 129+ E44B             >mirror_Ptr      defl    $
 129+ E44B             >
 129+ E44B 75 27       >                dw      Dict_Ptr + 2        // xt
 129+ E44D             >Heap_Ptr        defl    $ - $E000           // save current HP
 129+ E44D             >
 129+ E44D             >Current_HP      defl  $ - $E000             // used to set HP once!
 129+ E44D             >
 129+ E44D             >//              ______________________________________________________________________
 129+ E44D             >//              Dictionary part
 129+ E44D             >
 129+ E44D             >                org     Dict_Ptr
 129+ 2773             >
 129+ 2773 4B 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 129+ 2775             >
 129+ 2775             >LSCR:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 129+ 2775 CD 0A 27    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 129+ 2778             >
 129+ 2778             >
 129+ 2778             >                endif           ; ok        // for other definitions it "points" the correct handler
 129+ 2778             >                // Use of "; ok" to suppress "warning[fwdref]"
 129+ 2778             >
 129+ 2778             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 129+ 2778 10 00       >                dw      16
 130+ 277A
 131+ 277A              //  ______________________________________________________________________
 132+ 277A              //
 133+ 277A              // +origin         --
 134+ 277A              //              Colon_Def PLUS_ORIGIN, "+ORIGIN", is_normal
 135+ 277A              //              dw      LIT, Cold_origin        // [ hex 6366 ] literal
 136+ 277A              //              dw      PLUS                    // +
 137+ 277A              //              dw      EXIT                    // ;
 138+ 277A                              New_Def  PLUS_ORIGIN, "+ORIGIN", is_code, is_normal
 138+ 277A             >
 138+ 277A             >Dict_Ptr        defl    $
 138+ 277A             >
 138+ 277A             >//              ______________________________________________________________________
 138+ 277A             >//              Heap part
 138+ 277A             >
 138+ 277A             >
 138+ 277A             >                org     (Heap_Ptr & $1FFF) + $E000
 138+ E44D             >
 138+ E44D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 138+ E44D             >Latest_Definition defl  Heap_Ptr
 138+ E44D             >
 138+ E44D             >                // dummy db directives used to calculate length of namec
 138+ E44D 2B 4F 52 49 >                db      "+ORIGIN"
 138+ E451 47 49 4E    >
 138+ E454             >len_NFA         defl    $ - temp_NFA
 138+ E454             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 138+ E44D             >
 138+ E44D 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 138+ E44E 2B 4F 52 49 >                db      "+ORIGIN"               // name string in 7-bit ascii, but
 138+ E452 47 49 4E    >
 138+ E455             >                org     $-1                 // alter last byte of Name just above to set
 138+ E454 CE          >                db      {b $} | END_BIT     // msb as name end
 138+ E455             >
 138+ E455 43 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 138+ E457             >Prev_Ptr        defl    Heap_Ptr
 138+ E457             >
 138+ E457             >mirror_Ptr      defl    $
 138+ E457             >
 138+ E457 7C 27       >                dw      Dict_Ptr + 2        // xt
 138+ E459             >Heap_Ptr        defl    $ - $E000           // save current HP
 138+ E459             >
 138+ E459             >Current_HP      defl  $ - $E000             // used to set HP once!
 138+ E459             >
 138+ E459             >//              ______________________________________________________________________
 138+ E459             >//              Dictionary part
 138+ E459             >
 138+ E459             >                org     Dict_Ptr
 138+ 277A             >
 138+ 277A 57 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 138+ 277C             >
 138+ 277C             >PLUS_ORIGIN:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 138+ 277C ~           >                call    runcode ; ok        // for primitive definitions  actual code
 138+ 277C ~           >
 138+ 277C ~           >
 138+ 277C             >                endif           ; ok        // for other definitions it "points" the correct handler
 138+ 277C             >                // Use of "; ok" to suppress "warning[fwdref]"
 138+ 277C             >
 138+ 277C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 139+ 277C D9                           exx
 140+ 277D E1                           pop     hl
 141+ 277E 11 00 20                     ld      de, Cold_origin
 142+ 2781 19                           add     hl, de
 143+ 2782 E5                           push    hl
 144+ 2783 D9                           exx
 145+ 2784                              next
 145+ 2784 DD E9       >                jp      (ix)
 146+ 2786
 147+ 2786
 148+ 2786              //  ______________________________________________________________________
 149+ 2786              //
 150+ 2786                              Constant_Def CNEXT      ,   "(NEXT)", Next_Ptr
 150+ 2786             >                New_Def  CNEXT, "(NEXT)", Constant_Ptr, is_normal
 150+ 2786             >
 150+ 2786             >Dict_Ptr        defl    $
 150+ 2786             >
 150+ 2786             >//              ______________________________________________________________________
 150+ 2786             >//              Heap part
 150+ 2786             >
 150+ 2786             >
 150+ 2786             >                org     (Heap_Ptr & $1FFF) + $E000
 150+ E459             >
 150+ E459             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 150+ E459             >Latest_Definition defl  Heap_Ptr
 150+ E459             >
 150+ E459             >                // dummy db directives used to calculate length of namec
 150+ E459 28 4E 45 58 >                db      "(NEXT)"
 150+ E45D 54 29       >
 150+ E45F             >len_NFA         defl    $ - temp_NFA
 150+ E45F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 150+ E459             >
 150+ E459 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 150+ E45A 28 4E 45 58 >                db      "(NEXT)"               // name string in 7-bit ascii, but
 150+ E45E 54 29       >
 150+ E460             >                org     $-1                 // alter last byte of Name just above to set
 150+ E45F A9          >                db      {b $} | END_BIT     // msb as name end
 150+ E460             >
 150+ E460 4D 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 150+ E462             >Prev_Ptr        defl    Heap_Ptr
 150+ E462             >
 150+ E462             >mirror_Ptr      defl    $
 150+ E462             >
 150+ E462 88 27       >                dw      Dict_Ptr + 2        // xt
 150+ E464             >Heap_Ptr        defl    $ - $E000           // save current HP
 150+ E464             >
 150+ E464             >Current_HP      defl  $ - $E000             // used to set HP once!
 150+ E464             >
 150+ E464             >//              ______________________________________________________________________
 150+ E464             >//              Dictionary part
 150+ E464             >
 150+ E464             >                org     Dict_Ptr
 150+ 2786             >
 150+ 2786 62 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 150+ 2788             >
 150+ 2788             >CNEXT:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 150+ 2788 CD 0A 27    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 150+ 278B             >
 150+ 278B             >
 150+ 278B             >                endif           ; ok        // for other definitions it "points" the correct handler
 150+ 278B             >                // Use of "; ok" to suppress "warning[fwdref]"
 150+ 278B             >
 150+ 278B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 150+ 278B 34 20       >                dw      Next_Ptr
 151+ 278D
 152+ 278D              //  ______________________________________________________________________
 153+ 278D              //
 154+ 278D
 155+ 278D                              User_Def S0         , "S0"        , 06 // starting value of Stack-Pointer
 155+ 278D             >                New_Def  S0, "S0", User_Ptr, is_normal
 155+ 278D             >
 155+ 278D             >Dict_Ptr        defl    $
 155+ 278D             >
 155+ 278D             >//              ______________________________________________________________________
 155+ 278D             >//              Heap part
 155+ 278D             >
 155+ 278D             >
 155+ 278D             >                org     (Heap_Ptr & $1FFF) + $E000
 155+ E464             >
 155+ E464             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 155+ E464             >Latest_Definition defl  Heap_Ptr
 155+ E464             >
 155+ E464             >                // dummy db directives used to calculate length of namec
 155+ E464 53 30       >                db      "S0"
 155+ E466             >len_NFA         defl    $ - temp_NFA
 155+ E466             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 155+ E464             >
 155+ E464 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 155+ E465 53 30       >                db      "S0"               // name string in 7-bit ascii, but
 155+ E467             >                org     $-1                 // alter last byte of Name just above to set
 155+ E466 B0          >                db      {b $} | END_BIT     // msb as name end
 155+ E467             >
 155+ E467 59 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 155+ E469             >Prev_Ptr        defl    Heap_Ptr
 155+ E469             >
 155+ E469             >mirror_Ptr      defl    $
 155+ E469             >
 155+ E469 8F 27       >                dw      Dict_Ptr + 2        // xt
 155+ E46B             >Heap_Ptr        defl    $ - $E000           // save current HP
 155+ E46B             >
 155+ E46B             >Current_HP      defl  $ - $E000             // used to set HP once!
 155+ E46B             >
 155+ E46B             >//              ______________________________________________________________________
 155+ E46B             >//              Dictionary part
 155+ E46B             >
 155+ E46B             >                org     Dict_Ptr
 155+ 278D             >
 155+ 278D 69 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 155+ 278F             >
 155+ 278F             >S0:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 155+ 278F CD 2A 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 155+ 2792             >
 155+ 2792             >
 155+ 2792             >                endif           ; ok        // for other definitions it "points" the correct handler
 155+ 2792             >                // Use of "; ok" to suppress "warning[fwdref]"
 155+ 2792             >
 155+ 2792             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 155+ 2792 06          >                db      06
 156+ 2793                              User_Def R0         , "R0"        , 08 // starting value of Return-Pointer
 156+ 2793             >                New_Def  R0, "R0", User_Ptr, is_normal
 156+ 2793             >
 156+ 2793             >Dict_Ptr        defl    $
 156+ 2793             >
 156+ 2793             >//              ______________________________________________________________________
 156+ 2793             >//              Heap part
 156+ 2793             >
 156+ 2793             >
 156+ 2793             >                org     (Heap_Ptr & $1FFF) + $E000
 156+ E46B             >
 156+ E46B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 156+ E46B             >Latest_Definition defl  Heap_Ptr
 156+ E46B             >
 156+ E46B             >                // dummy db directives used to calculate length of namec
 156+ E46B 52 30       >                db      "R0"
 156+ E46D             >len_NFA         defl    $ - temp_NFA
 156+ E46D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 156+ E46B             >
 156+ E46B 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 156+ E46C 52 30       >                db      "R0"               // name string in 7-bit ascii, but
 156+ E46E             >                org     $-1                 // alter last byte of Name just above to set
 156+ E46D B0          >                db      {b $} | END_BIT     // msb as name end
 156+ E46E             >
 156+ E46E 64 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 156+ E470             >Prev_Ptr        defl    Heap_Ptr
 156+ E470             >
 156+ E470             >mirror_Ptr      defl    $
 156+ E470             >
 156+ E470 95 27       >                dw      Dict_Ptr + 2        // xt
 156+ E472             >Heap_Ptr        defl    $ - $E000           // save current HP
 156+ E472             >
 156+ E472             >Current_HP      defl  $ - $E000             // used to set HP once!
 156+ E472             >
 156+ E472             >//              ______________________________________________________________________
 156+ E472             >//              Dictionary part
 156+ E472             >
 156+ E472             >                org     Dict_Ptr
 156+ 2793             >
 156+ 2793 70 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 156+ 2795             >
 156+ 2795             >R0:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 156+ 2795 CD 2A 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 156+ 2798             >
 156+ 2798             >
 156+ 2798             >                endif           ; ok        // for other definitions it "points" the correct handler
 156+ 2798             >                // Use of "; ok" to suppress "warning[fwdref]"
 156+ 2798             >
 156+ 2798             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 156+ 2798 08          >                db      08
 157+ 2799                              User_Def TIB        , "TIB"       , 10 // input terminal buffer address
 157+ 2799             >                New_Def  TIB, "TIB", User_Ptr, is_normal
 157+ 2799             >
 157+ 2799             >Dict_Ptr        defl    $
 157+ 2799             >
 157+ 2799             >//              ______________________________________________________________________
 157+ 2799             >//              Heap part
 157+ 2799             >
 157+ 2799             >
 157+ 2799             >                org     (Heap_Ptr & $1FFF) + $E000
 157+ E472             >
 157+ E472             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 157+ E472             >Latest_Definition defl  Heap_Ptr
 157+ E472             >
 157+ E472             >                // dummy db directives used to calculate length of namec
 157+ E472 54 49 42    >                db      "TIB"
 157+ E475             >len_NFA         defl    $ - temp_NFA
 157+ E475             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 157+ E472             >
 157+ E472 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 157+ E473 54 49 42    >                db      "TIB"               // name string in 7-bit ascii, but
 157+ E476             >                org     $-1                 // alter last byte of Name just above to set
 157+ E475 C2          >                db      {b $} | END_BIT     // msb as name end
 157+ E476             >
 157+ E476 6B 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 157+ E478             >Prev_Ptr        defl    Heap_Ptr
 157+ E478             >
 157+ E478             >mirror_Ptr      defl    $
 157+ E478             >
 157+ E478 9B 27       >                dw      Dict_Ptr + 2        // xt
 157+ E47A             >Heap_Ptr        defl    $ - $E000           // save current HP
 157+ E47A             >
 157+ E47A             >Current_HP      defl  $ - $E000             // used to set HP once!
 157+ E47A             >
 157+ E47A             >//              ______________________________________________________________________
 157+ E47A             >//              Dictionary part
 157+ E47A             >
 157+ E47A             >                org     Dict_Ptr
 157+ 2799             >
 157+ 2799 78 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 157+ 279B             >
 157+ 279B             >TIB:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 157+ 279B CD 2A 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 157+ 279E             >
 157+ 279E             >
 157+ 279E             >                endif           ; ok        // for other definitions it "points" the correct handler
 157+ 279E             >                // Use of "; ok" to suppress "warning[fwdref]"
 157+ 279E             >
 157+ 279E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 157+ 279E 0A          >                db      10
 158+ 279F                              User_Def WIDTH      , "WIDTH"     , 12 // maximum number of characters for a word name
 158+ 279F             >                New_Def  WIDTH, "WIDTH", User_Ptr, is_normal
 158+ 279F             >
 158+ 279F             >Dict_Ptr        defl    $
 158+ 279F             >
 158+ 279F             >//              ______________________________________________________________________
 158+ 279F             >//              Heap part
 158+ 279F             >
 158+ 279F             >
 158+ 279F             >                org     (Heap_Ptr & $1FFF) + $E000
 158+ E47A             >
 158+ E47A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 158+ E47A             >Latest_Definition defl  Heap_Ptr
 158+ E47A             >
 158+ E47A             >                // dummy db directives used to calculate length of namec
 158+ E47A 57 49 44 54 >                db      "WIDTH"
 158+ E47E 48          >
 158+ E47F             >len_NFA         defl    $ - temp_NFA
 158+ E47F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 158+ E47A             >
 158+ E47A 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 158+ E47B 57 49 44 54 >                db      "WIDTH"               // name string in 7-bit ascii, but
 158+ E47F 48          >
 158+ E480             >                org     $-1                 // alter last byte of Name just above to set
 158+ E47F C8          >                db      {b $} | END_BIT     // msb as name end
 158+ E480             >
 158+ E480 72 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 158+ E482             >Prev_Ptr        defl    Heap_Ptr
 158+ E482             >
 158+ E482             >mirror_Ptr      defl    $
 158+ E482             >
 158+ E482 A1 27       >                dw      Dict_Ptr + 2        // xt
 158+ E484             >Heap_Ptr        defl    $ - $E000           // save current HP
 158+ E484             >
 158+ E484             >Current_HP      defl  $ - $E000             // used to set HP once!
 158+ E484             >
 158+ E484             >//              ______________________________________________________________________
 158+ E484             >//              Dictionary part
 158+ E484             >
 158+ E484             >                org     Dict_Ptr
 158+ 279F             >
 158+ 279F 82 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 158+ 27A1             >
 158+ 27A1             >WIDTH:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 158+ 27A1 CD 2A 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 158+ 27A4             >
 158+ 27A4             >
 158+ 27A4             >                endif           ; ok        // for other definitions it "points" the correct handler
 158+ 27A4             >                // Use of "; ok" to suppress "warning[fwdref]"
 158+ 27A4             >
 158+ 27A4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 158+ 27A4 0C          >                db      12
 159+ 27A5                              User_Def WARNING    , "WARNING"   , 14 // error reporting method: 0 base, 1 verbose
 159+ 27A5             >                New_Def  WARNING, "WARNING", User_Ptr, is_normal
 159+ 27A5             >
 159+ 27A5             >Dict_Ptr        defl    $
 159+ 27A5             >
 159+ 27A5             >//              ______________________________________________________________________
 159+ 27A5             >//              Heap part
 159+ 27A5             >
 159+ 27A5             >
 159+ 27A5             >                org     (Heap_Ptr & $1FFF) + $E000
 159+ E484             >
 159+ E484             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 159+ E484             >Latest_Definition defl  Heap_Ptr
 159+ E484             >
 159+ E484             >                // dummy db directives used to calculate length of namec
 159+ E484 57 41 52 4E >                db      "WARNING"
 159+ E488 49 4E 47    >
 159+ E48B             >len_NFA         defl    $ - temp_NFA
 159+ E48B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 159+ E484             >
 159+ E484 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 159+ E485 57 41 52 4E >                db      "WARNING"               // name string in 7-bit ascii, but
 159+ E489 49 4E 47    >
 159+ E48C             >                org     $-1                 // alter last byte of Name just above to set
 159+ E48B C7          >                db      {b $} | END_BIT     // msb as name end
 159+ E48C             >
 159+ E48C 7A 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 159+ E48E             >Prev_Ptr        defl    Heap_Ptr
 159+ E48E             >
 159+ E48E             >mirror_Ptr      defl    $
 159+ E48E             >
 159+ E48E A7 27       >                dw      Dict_Ptr + 2        // xt
 159+ E490             >Heap_Ptr        defl    $ - $E000           // save current HP
 159+ E490             >
 159+ E490             >Current_HP      defl  $ - $E000             // used to set HP once!
 159+ E490             >
 159+ E490             >//              ______________________________________________________________________
 159+ E490             >//              Dictionary part
 159+ E490             >
 159+ E490             >                org     Dict_Ptr
 159+ 27A5             >
 159+ 27A5 8E 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 159+ 27A7             >
 159+ 27A7             >WARNING:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 159+ 27A7 CD 2A 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 159+ 27AA             >
 159+ 27AA             >
 159+ 27AA             >                endif           ; ok        // for other definitions it "points" the correct handler
 159+ 27AA             >                // Use of "; ok" to suppress "warning[fwdref]"
 159+ 27AA             >
 159+ 27AA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 159+ 27AA 0E          >                db      14
 160+ 27AB                              User_Def FENCE      , "FENCE"     , 16 // minimum address where FORGET can work
 160+ 27AB             >                New_Def  FENCE, "FENCE", User_Ptr, is_normal
 160+ 27AB             >
 160+ 27AB             >Dict_Ptr        defl    $
 160+ 27AB             >
 160+ 27AB             >//              ______________________________________________________________________
 160+ 27AB             >//              Heap part
 160+ 27AB             >
 160+ 27AB             >
 160+ 27AB             >                org     (Heap_Ptr & $1FFF) + $E000
 160+ E490             >
 160+ E490             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 160+ E490             >Latest_Definition defl  Heap_Ptr
 160+ E490             >
 160+ E490             >                // dummy db directives used to calculate length of namec
 160+ E490 46 45 4E 43 >                db      "FENCE"
 160+ E494 45          >
 160+ E495             >len_NFA         defl    $ - temp_NFA
 160+ E495             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 160+ E490             >
 160+ E490 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 160+ E491 46 45 4E 43 >                db      "FENCE"               // name string in 7-bit ascii, but
 160+ E495 45          >
 160+ E496             >                org     $-1                 // alter last byte of Name just above to set
 160+ E495 C5          >                db      {b $} | END_BIT     // msb as name end
 160+ E496             >
 160+ E496 84 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 160+ E498             >Prev_Ptr        defl    Heap_Ptr
 160+ E498             >
 160+ E498             >mirror_Ptr      defl    $
 160+ E498             >
 160+ E498 AD 27       >                dw      Dict_Ptr + 2        // xt
 160+ E49A             >Heap_Ptr        defl    $ - $E000           // save current HP
 160+ E49A             >
 160+ E49A             >Current_HP      defl  $ - $E000             // used to set HP once!
 160+ E49A             >
 160+ E49A             >//              ______________________________________________________________________
 160+ E49A             >//              Dictionary part
 160+ E49A             >
 160+ E49A             >                org     Dict_Ptr
 160+ 27AB             >
 160+ 27AB 98 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 160+ 27AD             >
 160+ 27AD             >FENCE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 160+ 27AD CD 2A 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 160+ 27B0             >
 160+ 27B0             >
 160+ 27B0             >                endif           ; ok        // for other definitions it "points" the correct handler
 160+ 27B0             >                // Use of "; ok" to suppress "warning[fwdref]"
 160+ 27B0             >
 160+ 27B0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 160+ 27B0 10          >                db      16
 161+ 27B1                              User_Def DP         , "DP"        , 18 // Dictionary Pointer
 161+ 27B1             >                New_Def  DP, "DP", User_Ptr, is_normal
 161+ 27B1             >
 161+ 27B1             >Dict_Ptr        defl    $
 161+ 27B1             >
 161+ 27B1             >//              ______________________________________________________________________
 161+ 27B1             >//              Heap part
 161+ 27B1             >
 161+ 27B1             >
 161+ 27B1             >                org     (Heap_Ptr & $1FFF) + $E000
 161+ E49A             >
 161+ E49A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 161+ E49A             >Latest_Definition defl  Heap_Ptr
 161+ E49A             >
 161+ E49A             >                // dummy db directives used to calculate length of namec
 161+ E49A 44 50       >                db      "DP"
 161+ E49C             >len_NFA         defl    $ - temp_NFA
 161+ E49C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 161+ E49A             >
 161+ E49A 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 161+ E49B 44 50       >                db      "DP"               // name string in 7-bit ascii, but
 161+ E49D             >                org     $-1                 // alter last byte of Name just above to set
 161+ E49C D0          >                db      {b $} | END_BIT     // msb as name end
 161+ E49D             >
 161+ E49D 90 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 161+ E49F             >Prev_Ptr        defl    Heap_Ptr
 161+ E49F             >
 161+ E49F             >mirror_Ptr      defl    $
 161+ E49F             >
 161+ E49F B3 27       >                dw      Dict_Ptr + 2        // xt
 161+ E4A1             >Heap_Ptr        defl    $ - $E000           // save current HP
 161+ E4A1             >
 161+ E4A1             >Current_HP      defl  $ - $E000             // used to set HP once!
 161+ E4A1             >
 161+ E4A1             >//              ______________________________________________________________________
 161+ E4A1             >//              Dictionary part
 161+ E4A1             >
 161+ E4A1             >                org     Dict_Ptr
 161+ 27B1             >
 161+ 27B1 9F 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 161+ 27B3             >
 161+ 27B3             >DP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 161+ 27B3 CD 2A 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 161+ 27B6             >
 161+ 27B6             >
 161+ 27B6             >                endif           ; ok        // for other definitions it "points" the correct handler
 161+ 27B6             >                // Use of "; ok" to suppress "warning[fwdref]"
 161+ 27B6             >
 161+ 27B6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 161+ 27B6 12          >                db      18
 162+ 27B7                              User_Def VOC_LINK   , "VOC-LINK"  , 20 // pointer to the latest vocabulary
 162+ 27B7             >                New_Def  VOC_LINK, "VOC-LINK", User_Ptr, is_normal
 162+ 27B7             >
 162+ 27B7             >Dict_Ptr        defl    $
 162+ 27B7             >
 162+ 27B7             >//              ______________________________________________________________________
 162+ 27B7             >//              Heap part
 162+ 27B7             >
 162+ 27B7             >
 162+ 27B7             >                org     (Heap_Ptr & $1FFF) + $E000
 162+ E4A1             >
 162+ E4A1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 162+ E4A1             >Latest_Definition defl  Heap_Ptr
 162+ E4A1             >
 162+ E4A1             >                // dummy db directives used to calculate length of namec
 162+ E4A1 56 4F 43 2D >                db      "VOC-LINK"
 162+ E4A5 4C 49 4E 4B >
 162+ E4A9             >len_NFA         defl    $ - temp_NFA
 162+ E4A9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 162+ E4A1             >
 162+ E4A1 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 162+ E4A2 56 4F 43 2D >                db      "VOC-LINK"               // name string in 7-bit ascii, but
 162+ E4A6 4C 49 4E 4B >
 162+ E4AA             >                org     $-1                 // alter last byte of Name just above to set
 162+ E4A9 CB          >                db      {b $} | END_BIT     // msb as name end
 162+ E4AA             >
 162+ E4AA 9A 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 162+ E4AC             >Prev_Ptr        defl    Heap_Ptr
 162+ E4AC             >
 162+ E4AC             >mirror_Ptr      defl    $
 162+ E4AC             >
 162+ E4AC B9 27       >                dw      Dict_Ptr + 2        // xt
 162+ E4AE             >Heap_Ptr        defl    $ - $E000           // save current HP
 162+ E4AE             >
 162+ E4AE             >Current_HP      defl  $ - $E000             // used to set HP once!
 162+ E4AE             >
 162+ E4AE             >//              ______________________________________________________________________
 162+ E4AE             >//              Dictionary part
 162+ E4AE             >
 162+ E4AE             >                org     Dict_Ptr
 162+ 27B7             >
 162+ 27B7 AC 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 162+ 27B9             >
 162+ 27B9             >VOC_LINK:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 162+ 27B9 CD 2A 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 162+ 27BC             >
 162+ 27BC             >
 162+ 27BC             >                endif           ; ok        // for other definitions it "points" the correct handler
 162+ 27BC             >                // Use of "; ok" to suppress "warning[fwdref]"
 162+ 27BC             >
 162+ 27BC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 162+ 27BC 14          >                db      20
 163+ 27BD                              User_Def FIRST      , "FIRST"     , 22 // address of first buffer
 163+ 27BD             >                New_Def  FIRST, "FIRST", User_Ptr, is_normal
 163+ 27BD             >
 163+ 27BD             >Dict_Ptr        defl    $
 163+ 27BD             >
 163+ 27BD             >//              ______________________________________________________________________
 163+ 27BD             >//              Heap part
 163+ 27BD             >
 163+ 27BD             >
 163+ 27BD             >                org     (Heap_Ptr & $1FFF) + $E000
 163+ E4AE             >
 163+ E4AE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 163+ E4AE             >Latest_Definition defl  Heap_Ptr
 163+ E4AE             >
 163+ E4AE             >                // dummy db directives used to calculate length of namec
 163+ E4AE 46 49 52 53 >                db      "FIRST"
 163+ E4B2 54          >
 163+ E4B3             >len_NFA         defl    $ - temp_NFA
 163+ E4B3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 163+ E4AE             >
 163+ E4AE 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 163+ E4AF 46 49 52 53 >                db      "FIRST"               // name string in 7-bit ascii, but
 163+ E4B3 54          >
 163+ E4B4             >                org     $-1                 // alter last byte of Name just above to set
 163+ E4B3 D4          >                db      {b $} | END_BIT     // msb as name end
 163+ E4B4             >
 163+ E4B4 A1 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 163+ E4B6             >Prev_Ptr        defl    Heap_Ptr
 163+ E4B6             >
 163+ E4B6             >mirror_Ptr      defl    $
 163+ E4B6             >
 163+ E4B6 BF 27       >                dw      Dict_Ptr + 2        // xt
 163+ E4B8             >Heap_Ptr        defl    $ - $E000           // save current HP
 163+ E4B8             >
 163+ E4B8             >Current_HP      defl  $ - $E000             // used to set HP once!
 163+ E4B8             >
 163+ E4B8             >//              ______________________________________________________________________
 163+ E4B8             >//              Dictionary part
 163+ E4B8             >
 163+ E4B8             >                org     Dict_Ptr
 163+ 27BD             >
 163+ 27BD B6 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 163+ 27BF             >
 163+ 27BF             >FIRST:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 163+ 27BF CD 2A 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 163+ 27C2             >
 163+ 27C2             >
 163+ 27C2             >                endif           ; ok        // for other definitions it "points" the correct handler
 163+ 27C2             >                // Use of "; ok" to suppress "warning[fwdref]"
 163+ 27C2             >
 163+ 27C2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 163+ 27C2 16          >                db      22
 164+ 27C3                              User_Def LIMIT      , "LIMIT"     , 24 // address of last buffer
 164+ 27C3             >                New_Def  LIMIT, "LIMIT", User_Ptr, is_normal
 164+ 27C3             >
 164+ 27C3             >Dict_Ptr        defl    $
 164+ 27C3             >
 164+ 27C3             >//              ______________________________________________________________________
 164+ 27C3             >//              Heap part
 164+ 27C3             >
 164+ 27C3             >
 164+ 27C3             >                org     (Heap_Ptr & $1FFF) + $E000
 164+ E4B8             >
 164+ E4B8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 164+ E4B8             >Latest_Definition defl  Heap_Ptr
 164+ E4B8             >
 164+ E4B8             >                // dummy db directives used to calculate length of namec
 164+ E4B8 4C 49 4D 49 >                db      "LIMIT"
 164+ E4BC 54          >
 164+ E4BD             >len_NFA         defl    $ - temp_NFA
 164+ E4BD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 164+ E4B8             >
 164+ E4B8 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 164+ E4B9 4C 49 4D 49 >                db      "LIMIT"               // name string in 7-bit ascii, but
 164+ E4BD 54          >
 164+ E4BE             >                org     $-1                 // alter last byte of Name just above to set
 164+ E4BD D4          >                db      {b $} | END_BIT     // msb as name end
 164+ E4BE             >
 164+ E4BE AE 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 164+ E4C0             >Prev_Ptr        defl    Heap_Ptr
 164+ E4C0             >
 164+ E4C0             >mirror_Ptr      defl    $
 164+ E4C0             >
 164+ E4C0 C5 27       >                dw      Dict_Ptr + 2        // xt
 164+ E4C2             >Heap_Ptr        defl    $ - $E000           // save current HP
 164+ E4C2             >
 164+ E4C2             >Current_HP      defl  $ - $E000             // used to set HP once!
 164+ E4C2             >
 164+ E4C2             >//              ______________________________________________________________________
 164+ E4C2             >//              Dictionary part
 164+ E4C2             >
 164+ E4C2             >                org     Dict_Ptr
 164+ 27C3             >
 164+ 27C3 C0 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 164+ 27C5             >
 164+ 27C5             >LIMIT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 164+ 27C5 CD 2A 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 164+ 27C8             >
 164+ 27C8             >
 164+ 27C8             >                endif           ; ok        // for other definitions it "points" the correct handler
 164+ 27C8             >                // Use of "; ok" to suppress "warning[fwdref]"
 164+ 27C8             >
 164+ 27C8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 164+ 27C8 18          >                db      24
 165+ 27C9                              User_Def HP         , "HP"        , 26 // heap-pointer address
 165+ 27C9             >                New_Def  HP, "HP", User_Ptr, is_normal
 165+ 27C9             >
 165+ 27C9             >Dict_Ptr        defl    $
 165+ 27C9             >
 165+ 27C9             >//              ______________________________________________________________________
 165+ 27C9             >//              Heap part
 165+ 27C9             >
 165+ 27C9             >
 165+ 27C9             >                org     (Heap_Ptr & $1FFF) + $E000
 165+ E4C2             >
 165+ E4C2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 165+ E4C2             >Latest_Definition defl  Heap_Ptr
 165+ E4C2             >
 165+ E4C2             >                // dummy db directives used to calculate length of namec
 165+ E4C2 48 50       >                db      "HP"
 165+ E4C4             >len_NFA         defl    $ - temp_NFA
 165+ E4C4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 165+ E4C2             >
 165+ E4C2 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 165+ E4C3 48 50       >                db      "HP"               // name string in 7-bit ascii, but
 165+ E4C5             >                org     $-1                 // alter last byte of Name just above to set
 165+ E4C4 D0          >                db      {b $} | END_BIT     // msb as name end
 165+ E4C5             >
 165+ E4C5 B8 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 165+ E4C7             >Prev_Ptr        defl    Heap_Ptr
 165+ E4C7             >
 165+ E4C7             >mirror_Ptr      defl    $
 165+ E4C7             >
 165+ E4C7 CB 27       >                dw      Dict_Ptr + 2        // xt
 165+ E4C9             >Heap_Ptr        defl    $ - $E000           // save current HP
 165+ E4C9             >
 165+ E4C9             >Current_HP      defl  $ - $E000             // used to set HP once!
 165+ E4C9             >
 165+ E4C9             >//              ______________________________________________________________________
 165+ E4C9             >//              Dictionary part
 165+ E4C9             >
 165+ E4C9             >                org     Dict_Ptr
 165+ 27C9             >
 165+ 27C9 C7 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 165+ 27CB             >
 165+ 27CB             >HP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 165+ 27CB CD 2A 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 165+ 27CE             >
 165+ 27CE             >
 165+ 27CE             >                endif           ; ok        // for other definitions it "points" the correct handler
 165+ 27CE             >                // Use of "; ok" to suppress "warning[fwdref]"
 165+ 27CE             >
 165+ 27CE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 165+ 27CE 1A          >                db      26
 166+ 27CF                              User_Def NMODE      , "NMODE"     , 28 // number mode: 0 integer, 1 floating point
 166+ 27CF             >                New_Def  NMODE, "NMODE", User_Ptr, is_normal
 166+ 27CF             >
 166+ 27CF             >Dict_Ptr        defl    $
 166+ 27CF             >
 166+ 27CF             >//              ______________________________________________________________________
 166+ 27CF             >//              Heap part
 166+ 27CF             >
 166+ 27CF             >
 166+ 27CF             >                org     (Heap_Ptr & $1FFF) + $E000
 166+ E4C9             >
 166+ E4C9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 166+ E4C9             >Latest_Definition defl  Heap_Ptr
 166+ E4C9             >
 166+ E4C9             >                // dummy db directives used to calculate length of namec
 166+ E4C9 4E 4D 4F 44 >                db      "NMODE"
 166+ E4CD 45          >
 166+ E4CE             >len_NFA         defl    $ - temp_NFA
 166+ E4CE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 166+ E4C9             >
 166+ E4C9 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 166+ E4CA 4E 4D 4F 44 >                db      "NMODE"               // name string in 7-bit ascii, but
 166+ E4CE 45          >
 166+ E4CF             >                org     $-1                 // alter last byte of Name just above to set
 166+ E4CE C5          >                db      {b $} | END_BIT     // msb as name end
 166+ E4CF             >
 166+ E4CF C2 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 166+ E4D1             >Prev_Ptr        defl    Heap_Ptr
 166+ E4D1             >
 166+ E4D1             >mirror_Ptr      defl    $
 166+ E4D1             >
 166+ E4D1 D1 27       >                dw      Dict_Ptr + 2        // xt
 166+ E4D3             >Heap_Ptr        defl    $ - $E000           // save current HP
 166+ E4D3             >
 166+ E4D3             >Current_HP      defl  $ - $E000             // used to set HP once!
 166+ E4D3             >
 166+ E4D3             >//              ______________________________________________________________________
 166+ E4D3             >//              Dictionary part
 166+ E4D3             >
 166+ E4D3             >                org     Dict_Ptr
 166+ 27CF             >
 166+ 27CF D1 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 166+ 27D1             >
 166+ 27D1             >NMODE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 166+ 27D1 CD 2A 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 166+ 27D4             >
 166+ 27D4             >
 166+ 27D4             >                endif           ; ok        // for other definitions it "points" the correct handler
 166+ 27D4             >                // Use of "; ok" to suppress "warning[fwdref]"
 166+ 27D4             >
 166+ 27D4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 166+ 27D4 1C          >                db      28
 167+ 27D5                              User_Def BLK        , "BLK"       , 30 // block number to be interpreted. 0 for terminal
 167+ 27D5             >                New_Def  BLK, "BLK", User_Ptr, is_normal
 167+ 27D5             >
 167+ 27D5             >Dict_Ptr        defl    $
 167+ 27D5             >
 167+ 27D5             >//              ______________________________________________________________________
 167+ 27D5             >//              Heap part
 167+ 27D5             >
 167+ 27D5             >
 167+ 27D5             >                org     (Heap_Ptr & $1FFF) + $E000
 167+ E4D3             >
 167+ E4D3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 167+ E4D3             >Latest_Definition defl  Heap_Ptr
 167+ E4D3             >
 167+ E4D3             >                // dummy db directives used to calculate length of namec
 167+ E4D3 42 4C 4B    >                db      "BLK"
 167+ E4D6             >len_NFA         defl    $ - temp_NFA
 167+ E4D6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 167+ E4D3             >
 167+ E4D3 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 167+ E4D4 42 4C 4B    >                db      "BLK"               // name string in 7-bit ascii, but
 167+ E4D7             >                org     $-1                 // alter last byte of Name just above to set
 167+ E4D6 CB          >                db      {b $} | END_BIT     // msb as name end
 167+ E4D7             >
 167+ E4D7 C9 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 167+ E4D9             >Prev_Ptr        defl    Heap_Ptr
 167+ E4D9             >
 167+ E4D9             >mirror_Ptr      defl    $
 167+ E4D9             >
 167+ E4D9 D7 27       >                dw      Dict_Ptr + 2        // xt
 167+ E4DB             >Heap_Ptr        defl    $ - $E000           // save current HP
 167+ E4DB             >
 167+ E4DB             >Current_HP      defl  $ - $E000             // used to set HP once!
 167+ E4DB             >
 167+ E4DB             >//              ______________________________________________________________________
 167+ E4DB             >//              Dictionary part
 167+ E4DB             >
 167+ E4DB             >                org     Dict_Ptr
 167+ 27D5             >
 167+ 27D5 D9 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 167+ 27D7             >
 167+ 27D7             >BLK:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 167+ 27D7 CD 2A 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 167+ 27DA             >
 167+ 27DA             >
 167+ 27DA             >                endif           ; ok        // for other definitions it "points" the correct handler
 167+ 27DA             >                // Use of "; ok" to suppress "warning[fwdref]"
 167+ 27DA             >
 167+ 27DA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 167+ 27DA 1E          >                db      30
 168+ 27DB                              User_Def TO_IN      , ">IN"       , 32 // incremented when consuming input buffer
 168+ 27DB             >                New_Def  TO_IN, ">IN", User_Ptr, is_normal
 168+ 27DB             >
 168+ 27DB             >Dict_Ptr        defl    $
 168+ 27DB             >
 168+ 27DB             >//              ______________________________________________________________________
 168+ 27DB             >//              Heap part
 168+ 27DB             >
 168+ 27DB             >
 168+ 27DB             >                org     (Heap_Ptr & $1FFF) + $E000
 168+ E4DB             >
 168+ E4DB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 168+ E4DB             >Latest_Definition defl  Heap_Ptr
 168+ E4DB             >
 168+ E4DB             >                // dummy db directives used to calculate length of namec
 168+ E4DB 3E 49 4E    >                db      ">IN"
 168+ E4DE             >len_NFA         defl    $ - temp_NFA
 168+ E4DE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 168+ E4DB             >
 168+ E4DB 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 168+ E4DC 3E 49 4E    >                db      ">IN"               // name string in 7-bit ascii, but
 168+ E4DF             >                org     $-1                 // alter last byte of Name just above to set
 168+ E4DE CE          >                db      {b $} | END_BIT     // msb as name end
 168+ E4DF             >
 168+ E4DF D3 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 168+ E4E1             >Prev_Ptr        defl    Heap_Ptr
 168+ E4E1             >
 168+ E4E1             >mirror_Ptr      defl    $
 168+ E4E1             >
 168+ E4E1 DD 27       >                dw      Dict_Ptr + 2        // xt
 168+ E4E3             >Heap_Ptr        defl    $ - $E000           // save current HP
 168+ E4E3             >
 168+ E4E3             >Current_HP      defl  $ - $E000             // used to set HP once!
 168+ E4E3             >
 168+ E4E3             >//              ______________________________________________________________________
 168+ E4E3             >//              Dictionary part
 168+ E4E3             >
 168+ E4E3             >                org     Dict_Ptr
 168+ 27DB             >
 168+ 27DB E1 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 168+ 27DD             >
 168+ 27DD             >TO_IN:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 168+ 27DD CD 2A 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 168+ 27E0             >
 168+ 27E0             >
 168+ 27E0             >                endif           ; ok        // for other definitions it "points" the correct handler
 168+ 27E0             >                // Use of "; ok" to suppress "warning[fwdref]"
 168+ 27E0             >
 168+ 27E0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 168+ 27E0 20          >                db      32
 169+ 27E1                              User_Def OUT        , "OUT"       , 34 // incremented when sending to output
 169+ 27E1             >                New_Def  OUT, "OUT", User_Ptr, is_normal
 169+ 27E1             >
 169+ 27E1             >Dict_Ptr        defl    $
 169+ 27E1             >
 169+ 27E1             >//              ______________________________________________________________________
 169+ 27E1             >//              Heap part
 169+ 27E1             >
 169+ 27E1             >
 169+ 27E1             >                org     (Heap_Ptr & $1FFF) + $E000
 169+ E4E3             >
 169+ E4E3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 169+ E4E3             >Latest_Definition defl  Heap_Ptr
 169+ E4E3             >
 169+ E4E3             >                // dummy db directives used to calculate length of namec
 169+ E4E3 4F 55 54    >                db      "OUT"
 169+ E4E6             >len_NFA         defl    $ - temp_NFA
 169+ E4E6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 169+ E4E3             >
 169+ E4E3 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 169+ E4E4 4F 55 54    >                db      "OUT"               // name string in 7-bit ascii, but
 169+ E4E7             >                org     $-1                 // alter last byte of Name just above to set
 169+ E4E6 D4          >                db      {b $} | END_BIT     // msb as name end
 169+ E4E7             >
 169+ E4E7 DB 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 169+ E4E9             >Prev_Ptr        defl    Heap_Ptr
 169+ E4E9             >
 169+ E4E9             >mirror_Ptr      defl    $
 169+ E4E9             >
 169+ E4E9 E3 27       >                dw      Dict_Ptr + 2        // xt
 169+ E4EB             >Heap_Ptr        defl    $ - $E000           // save current HP
 169+ E4EB             >
 169+ E4EB             >Current_HP      defl  $ - $E000             // used to set HP once!
 169+ E4EB             >
 169+ E4EB             >//              ______________________________________________________________________
 169+ E4EB             >//              Dictionary part
 169+ E4EB             >
 169+ E4EB             >                org     Dict_Ptr
 169+ 27E1             >
 169+ 27E1 E9 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 169+ 27E3             >
 169+ 27E3             >OUT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 169+ 27E3 CD 2A 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 169+ 27E6             >
 169+ 27E6             >
 169+ 27E6             >                endif           ; ok        // for other definitions it "points" the correct handler
 169+ 27E6             >                // Use of "; ok" to suppress "warning[fwdref]"
 169+ 27E6             >
 169+ 27E6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 169+ 27E6 22          >                db      34
 170+ 27E7                              User_Def SCR        , "SCR"       , 36 // latest screen retreieved by LIST
 170+ 27E7             >                New_Def  SCR, "SCR", User_Ptr, is_normal
 170+ 27E7             >
 170+ 27E7             >Dict_Ptr        defl    $
 170+ 27E7             >
 170+ 27E7             >//              ______________________________________________________________________
 170+ 27E7             >//              Heap part
 170+ 27E7             >
 170+ 27E7             >
 170+ 27E7             >                org     (Heap_Ptr & $1FFF) + $E000
 170+ E4EB             >
 170+ E4EB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 170+ E4EB             >Latest_Definition defl  Heap_Ptr
 170+ E4EB             >
 170+ E4EB             >                // dummy db directives used to calculate length of namec
 170+ E4EB 53 43 52    >                db      "SCR"
 170+ E4EE             >len_NFA         defl    $ - temp_NFA
 170+ E4EE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 170+ E4EB             >
 170+ E4EB 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 170+ E4EC 53 43 52    >                db      "SCR"               // name string in 7-bit ascii, but
 170+ E4EF             >                org     $-1                 // alter last byte of Name just above to set
 170+ E4EE D2          >                db      {b $} | END_BIT     // msb as name end
 170+ E4EF             >
 170+ E4EF E3 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 170+ E4F1             >Prev_Ptr        defl    Heap_Ptr
 170+ E4F1             >
 170+ E4F1             >mirror_Ptr      defl    $
 170+ E4F1             >
 170+ E4F1 E9 27       >                dw      Dict_Ptr + 2        // xt
 170+ E4F3             >Heap_Ptr        defl    $ - $E000           // save current HP
 170+ E4F3             >
 170+ E4F3             >Current_HP      defl  $ - $E000             // used to set HP once!
 170+ E4F3             >
 170+ E4F3             >//              ______________________________________________________________________
 170+ E4F3             >//              Dictionary part
 170+ E4F3             >
 170+ E4F3             >                org     Dict_Ptr
 170+ 27E7             >
 170+ 27E7 F1 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 170+ 27E9             >
 170+ 27E9             >SCR:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 170+ 27E9 CD 2A 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 170+ 27EC             >
 170+ 27EC             >
 170+ 27EC             >                endif           ; ok        // for other definitions it "points" the correct handler
 170+ 27EC             >                // Use of "; ok" to suppress "warning[fwdref]"
 170+ 27EC             >
 170+ 27EC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 170+ 27EC 24          >                db      36
 171+ 27ED                              User_Def OFFSET     , "OFFSET"    , 38 //
 171+ 27ED             >                New_Def  OFFSET, "OFFSET", User_Ptr, is_normal
 171+ 27ED             >
 171+ 27ED             >Dict_Ptr        defl    $
 171+ 27ED             >
 171+ 27ED             >//              ______________________________________________________________________
 171+ 27ED             >//              Heap part
 171+ 27ED             >
 171+ 27ED             >
 171+ 27ED             >                org     (Heap_Ptr & $1FFF) + $E000
 171+ E4F3             >
 171+ E4F3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 171+ E4F3             >Latest_Definition defl  Heap_Ptr
 171+ E4F3             >
 171+ E4F3             >                // dummy db directives used to calculate length of namec
 171+ E4F3 4F 46 46 53 >                db      "OFFSET"
 171+ E4F7 45 54       >
 171+ E4F9             >len_NFA         defl    $ - temp_NFA
 171+ E4F9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 171+ E4F3             >
 171+ E4F3 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 171+ E4F4 4F 46 46 53 >                db      "OFFSET"               // name string in 7-bit ascii, but
 171+ E4F8 45 54       >
 171+ E4FA             >                org     $-1                 // alter last byte of Name just above to set
 171+ E4F9 D4          >                db      {b $} | END_BIT     // msb as name end
 171+ E4FA             >
 171+ E4FA EB 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 171+ E4FC             >Prev_Ptr        defl    Heap_Ptr
 171+ E4FC             >
 171+ E4FC             >mirror_Ptr      defl    $
 171+ E4FC             >
 171+ E4FC EF 27       >                dw      Dict_Ptr + 2        // xt
 171+ E4FE             >Heap_Ptr        defl    $ - $E000           // save current HP
 171+ E4FE             >
 171+ E4FE             >Current_HP      defl  $ - $E000             // used to set HP once!
 171+ E4FE             >
 171+ E4FE             >//              ______________________________________________________________________
 171+ E4FE             >//              Dictionary part
 171+ E4FE             >
 171+ E4FE             >                org     Dict_Ptr
 171+ 27ED             >
 171+ 27ED FC 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 171+ 27EF             >
 171+ 27EF             >OFFSET:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 171+ 27EF CD 2A 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 171+ 27F2             >
 171+ 27F2             >
 171+ 27F2             >                endif           ; ok        // for other definitions it "points" the correct handler
 171+ 27F2             >                // Use of "; ok" to suppress "warning[fwdref]"
 171+ 27F2             >
 171+ 27F2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 171+ 27F2 26          >                db      38
 172+ 27F3                              User_Def CONTEXT    , "CONTEXT"   , 40 // pointer to the vocabulary where search begins
 172+ 27F3             >                New_Def  CONTEXT, "CONTEXT", User_Ptr, is_normal
 172+ 27F3             >
 172+ 27F3             >Dict_Ptr        defl    $
 172+ 27F3             >
 172+ 27F3             >//              ______________________________________________________________________
 172+ 27F3             >//              Heap part
 172+ 27F3             >
 172+ 27F3             >
 172+ 27F3             >                org     (Heap_Ptr & $1FFF) + $E000
 172+ E4FE             >
 172+ E4FE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 172+ E4FE             >Latest_Definition defl  Heap_Ptr
 172+ E4FE             >
 172+ E4FE             >                // dummy db directives used to calculate length of namec
 172+ E4FE 43 4F 4E 54 >                db      "CONTEXT"
 172+ E502 45 58 54    >
 172+ E505             >len_NFA         defl    $ - temp_NFA
 172+ E505             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 172+ E4FE             >
 172+ E4FE 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 172+ E4FF 43 4F 4E 54 >                db      "CONTEXT"               // name string in 7-bit ascii, but
 172+ E503 45 58 54    >
 172+ E506             >                org     $-1                 // alter last byte of Name just above to set
 172+ E505 D4          >                db      {b $} | END_BIT     // msb as name end
 172+ E506             >
 172+ E506 F3 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 172+ E508             >Prev_Ptr        defl    Heap_Ptr
 172+ E508             >
 172+ E508             >mirror_Ptr      defl    $
 172+ E508             >
 172+ E508 F5 27       >                dw      Dict_Ptr + 2        // xt
 172+ E50A             >Heap_Ptr        defl    $ - $E000           // save current HP
 172+ E50A             >
 172+ E50A             >Current_HP      defl  $ - $E000             // used to set HP once!
 172+ E50A             >
 172+ E50A             >//              ______________________________________________________________________
 172+ E50A             >//              Dictionary part
 172+ E50A             >
 172+ E50A             >                org     Dict_Ptr
 172+ 27F3             >
 172+ 27F3 08 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 172+ 27F5             >
 172+ 27F5             >CONTEXT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 172+ 27F5 CD 2A 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 172+ 27F8             >
 172+ 27F8             >
 172+ 27F8             >                endif           ; ok        // for other definitions it "points" the correct handler
 172+ 27F8             >                // Use of "; ok" to suppress "warning[fwdref]"
 172+ 27F8             >
 172+ 27F8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 172+ 27F8 28          >                db      40
 173+ 27F9                              User_Def CURRENT    , "CURRENT"   , 42 // pointer to the vocabulary where search continues
 173+ 27F9             >                New_Def  CURRENT, "CURRENT", User_Ptr, is_normal
 173+ 27F9             >
 173+ 27F9             >Dict_Ptr        defl    $
 173+ 27F9             >
 173+ 27F9             >//              ______________________________________________________________________
 173+ 27F9             >//              Heap part
 173+ 27F9             >
 173+ 27F9             >
 173+ 27F9             >                org     (Heap_Ptr & $1FFF) + $E000
 173+ E50A             >
 173+ E50A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 173+ E50A             >Latest_Definition defl  Heap_Ptr
 173+ E50A             >
 173+ E50A             >                // dummy db directives used to calculate length of namec
 173+ E50A 43 55 52 52 >                db      "CURRENT"
 173+ E50E 45 4E 54    >
 173+ E511             >len_NFA         defl    $ - temp_NFA
 173+ E511             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 173+ E50A             >
 173+ E50A 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 173+ E50B 43 55 52 52 >                db      "CURRENT"               // name string in 7-bit ascii, but
 173+ E50F 45 4E 54    >
 173+ E512             >                org     $-1                 // alter last byte of Name just above to set
 173+ E511 D4          >                db      {b $} | END_BIT     // msb as name end
 173+ E512             >
 173+ E512 FE 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 173+ E514             >Prev_Ptr        defl    Heap_Ptr
 173+ E514             >
 173+ E514             >mirror_Ptr      defl    $
 173+ E514             >
 173+ E514 FB 27       >                dw      Dict_Ptr + 2        // xt
 173+ E516             >Heap_Ptr        defl    $ - $E000           // save current HP
 173+ E516             >
 173+ E516             >Current_HP      defl  $ - $E000             // used to set HP once!
 173+ E516             >
 173+ E516             >//              ______________________________________________________________________
 173+ E516             >//              Dictionary part
 173+ E516             >
 173+ E516             >                org     Dict_Ptr
 173+ 27F9             >
 173+ 27F9 14 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 173+ 27FB             >
 173+ 27FB             >CURRENT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 173+ 27FB CD 2A 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 173+ 27FE             >
 173+ 27FE             >
 173+ 27FE             >                endif           ; ok        // for other definitions it "points" the correct handler
 173+ 27FE             >                // Use of "; ok" to suppress "warning[fwdref]"
 173+ 27FE             >
 173+ 27FE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 173+ 27FE 2A          >                db      42
 174+ 27FF                              User_Def STATE      , "STATE"     , 44 // compilation status. 0 interpreting.
 174+ 27FF             >                New_Def  STATE, "STATE", User_Ptr, is_normal
 174+ 27FF             >
 174+ 27FF             >Dict_Ptr        defl    $
 174+ 27FF             >
 174+ 27FF             >//              ______________________________________________________________________
 174+ 27FF             >//              Heap part
 174+ 27FF             >
 174+ 27FF             >
 174+ 27FF             >                org     (Heap_Ptr & $1FFF) + $E000
 174+ E516             >
 174+ E516             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 174+ E516             >Latest_Definition defl  Heap_Ptr
 174+ E516             >
 174+ E516             >                // dummy db directives used to calculate length of namec
 174+ E516 53 54 41 54 >                db      "STATE"
 174+ E51A 45          >
 174+ E51B             >len_NFA         defl    $ - temp_NFA
 174+ E51B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 174+ E516             >
 174+ E516 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 174+ E517 53 54 41 54 >                db      "STATE"               // name string in 7-bit ascii, but
 174+ E51B 45          >
 174+ E51C             >                org     $-1                 // alter last byte of Name just above to set
 174+ E51B C5          >                db      {b $} | END_BIT     // msb as name end
 174+ E51C             >
 174+ E51C 0A 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 174+ E51E             >Prev_Ptr        defl    Heap_Ptr
 174+ E51E             >
 174+ E51E             >mirror_Ptr      defl    $
 174+ E51E             >
 174+ E51E 01 28       >                dw      Dict_Ptr + 2        // xt
 174+ E520             >Heap_Ptr        defl    $ - $E000           // save current HP
 174+ E520             >
 174+ E520             >Current_HP      defl  $ - $E000             // used to set HP once!
 174+ E520             >
 174+ E520             >//              ______________________________________________________________________
 174+ E520             >//              Dictionary part
 174+ E520             >
 174+ E520             >                org     Dict_Ptr
 174+ 27FF             >
 174+ 27FF 1E 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 174+ 2801             >
 174+ 2801             >STATE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 174+ 2801 CD 2A 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 174+ 2804             >
 174+ 2804             >
 174+ 2804             >                endif           ; ok        // for other definitions it "points" the correct handler
 174+ 2804             >                // Use of "; ok" to suppress "warning[fwdref]"
 174+ 2804             >
 174+ 2804             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 174+ 2804 2C          >                db      44
 175+ 2805                              User_Def BASE       , "BASE"      , 46 //
 175+ 2805             >                New_Def  BASE, "BASE", User_Ptr, is_normal
 175+ 2805             >
 175+ 2805             >Dict_Ptr        defl    $
 175+ 2805             >
 175+ 2805             >//              ______________________________________________________________________
 175+ 2805             >//              Heap part
 175+ 2805             >
 175+ 2805             >
 175+ 2805             >                org     (Heap_Ptr & $1FFF) + $E000
 175+ E520             >
 175+ E520             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 175+ E520             >Latest_Definition defl  Heap_Ptr
 175+ E520             >
 175+ E520             >                // dummy db directives used to calculate length of namec
 175+ E520 42 41 53 45 >                db      "BASE"
 175+ E524             >len_NFA         defl    $ - temp_NFA
 175+ E524             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 175+ E520             >
 175+ E520 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 175+ E521 42 41 53 45 >                db      "BASE"               // name string in 7-bit ascii, but
 175+ E525             >                org     $-1                 // alter last byte of Name just above to set
 175+ E524 C5          >                db      {b $} | END_BIT     // msb as name end
 175+ E525             >
 175+ E525 16 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 175+ E527             >Prev_Ptr        defl    Heap_Ptr
 175+ E527             >
 175+ E527             >mirror_Ptr      defl    $
 175+ E527             >
 175+ E527 07 28       >                dw      Dict_Ptr + 2        // xt
 175+ E529             >Heap_Ptr        defl    $ - $E000           // save current HP
 175+ E529             >
 175+ E529             >Current_HP      defl  $ - $E000             // used to set HP once!
 175+ E529             >
 175+ E529             >//              ______________________________________________________________________
 175+ E529             >//              Dictionary part
 175+ E529             >
 175+ E529             >                org     Dict_Ptr
 175+ 2805             >
 175+ 2805 27 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 175+ 2807             >
 175+ 2807             >BASE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 175+ 2807 CD 2A 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 175+ 280A             >
 175+ 280A             >
 175+ 280A             >                endif           ; ok        // for other definitions it "points" the correct handler
 175+ 280A             >                // Use of "; ok" to suppress "warning[fwdref]"
 175+ 280A             >
 175+ 280A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 175+ 280A 2E          >                db      46
 176+ 280B                              User_Def DPL        , "DPL"       , 48 // number of digits after decimal point in conversion
 176+ 280B             >                New_Def  DPL, "DPL", User_Ptr, is_normal
 176+ 280B             >
 176+ 280B             >Dict_Ptr        defl    $
 176+ 280B             >
 176+ 280B             >//              ______________________________________________________________________
 176+ 280B             >//              Heap part
 176+ 280B             >
 176+ 280B             >
 176+ 280B             >                org     (Heap_Ptr & $1FFF) + $E000
 176+ E529             >
 176+ E529             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 176+ E529             >Latest_Definition defl  Heap_Ptr
 176+ E529             >
 176+ E529             >                // dummy db directives used to calculate length of namec
 176+ E529 44 50 4C    >                db      "DPL"
 176+ E52C             >len_NFA         defl    $ - temp_NFA
 176+ E52C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 176+ E529             >
 176+ E529 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 176+ E52A 44 50 4C    >                db      "DPL"               // name string in 7-bit ascii, but
 176+ E52D             >                org     $-1                 // alter last byte of Name just above to set
 176+ E52C CC          >                db      {b $} | END_BIT     // msb as name end
 176+ E52D             >
 176+ E52D 20 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 176+ E52F             >Prev_Ptr        defl    Heap_Ptr
 176+ E52F             >
 176+ E52F             >mirror_Ptr      defl    $
 176+ E52F             >
 176+ E52F 0D 28       >                dw      Dict_Ptr + 2        // xt
 176+ E531             >Heap_Ptr        defl    $ - $E000           // save current HP
 176+ E531             >
 176+ E531             >Current_HP      defl  $ - $E000             // used to set HP once!
 176+ E531             >
 176+ E531             >//              ______________________________________________________________________
 176+ E531             >//              Dictionary part
 176+ E531             >
 176+ E531             >                org     Dict_Ptr
 176+ 280B             >
 176+ 280B 2F 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 176+ 280D             >
 176+ 280D             >DPL:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 176+ 280D CD 2A 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 176+ 2810             >
 176+ 2810             >
 176+ 2810             >                endif           ; ok        // for other definitions it "points" the correct handler
 176+ 2810             >                // Use of "; ok" to suppress "warning[fwdref]"
 176+ 2810             >
 176+ 2810             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 176+ 2810 30          >                db      48
 177+ 2811                              User_Def FLD        , "FLD"       , 50 // output field width
 177+ 2811             >                New_Def  FLD, "FLD", User_Ptr, is_normal
 177+ 2811             >
 177+ 2811             >Dict_Ptr        defl    $
 177+ 2811             >
 177+ 2811             >//              ______________________________________________________________________
 177+ 2811             >//              Heap part
 177+ 2811             >
 177+ 2811             >
 177+ 2811             >                org     (Heap_Ptr & $1FFF) + $E000
 177+ E531             >
 177+ E531             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 177+ E531             >Latest_Definition defl  Heap_Ptr
 177+ E531             >
 177+ E531             >                // dummy db directives used to calculate length of namec
 177+ E531 46 4C 44    >                db      "FLD"
 177+ E534             >len_NFA         defl    $ - temp_NFA
 177+ E534             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 177+ E531             >
 177+ E531 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 177+ E532 46 4C 44    >                db      "FLD"               // name string in 7-bit ascii, but
 177+ E535             >                org     $-1                 // alter last byte of Name just above to set
 177+ E534 C4          >                db      {b $} | END_BIT     // msb as name end
 177+ E535             >
 177+ E535 29 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 177+ E537             >Prev_Ptr        defl    Heap_Ptr
 177+ E537             >
 177+ E537             >mirror_Ptr      defl    $
 177+ E537             >
 177+ E537 13 28       >                dw      Dict_Ptr + 2        // xt
 177+ E539             >Heap_Ptr        defl    $ - $E000           // save current HP
 177+ E539             >
 177+ E539             >Current_HP      defl  $ - $E000             // used to set HP once!
 177+ E539             >
 177+ E539             >//              ______________________________________________________________________
 177+ E539             >//              Dictionary part
 177+ E539             >
 177+ E539             >                org     Dict_Ptr
 177+ 2811             >
 177+ 2811 37 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 177+ 2813             >
 177+ 2813             >FLD:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 177+ 2813 CD 2A 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 177+ 2816             >
 177+ 2816             >
 177+ 2816             >                endif           ; ok        // for other definitions it "points" the correct handler
 177+ 2816             >                // Use of "; ok" to suppress "warning[fwdref]"
 177+ 2816             >
 177+ 2816             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 177+ 2816 32          >                db      50
 178+ 2817                              User_Def CSP        , "CSP"       , 52 // used to temporary store Stack-Pointer value
 178+ 2817             >                New_Def  CSP, "CSP", User_Ptr, is_normal
 178+ 2817             >
 178+ 2817             >Dict_Ptr        defl    $
 178+ 2817             >
 178+ 2817             >//              ______________________________________________________________________
 178+ 2817             >//              Heap part
 178+ 2817             >
 178+ 2817             >
 178+ 2817             >                org     (Heap_Ptr & $1FFF) + $E000
 178+ E539             >
 178+ E539             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 178+ E539             >Latest_Definition defl  Heap_Ptr
 178+ E539             >
 178+ E539             >                // dummy db directives used to calculate length of namec
 178+ E539 43 53 50    >                db      "CSP"
 178+ E53C             >len_NFA         defl    $ - temp_NFA
 178+ E53C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 178+ E539             >
 178+ E539 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 178+ E53A 43 53 50    >                db      "CSP"               // name string in 7-bit ascii, but
 178+ E53D             >                org     $-1                 // alter last byte of Name just above to set
 178+ E53C D0          >                db      {b $} | END_BIT     // msb as name end
 178+ E53D             >
 178+ E53D 31 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 178+ E53F             >Prev_Ptr        defl    Heap_Ptr
 178+ E53F             >
 178+ E53F             >mirror_Ptr      defl    $
 178+ E53F             >
 178+ E53F 19 28       >                dw      Dict_Ptr + 2        // xt
 178+ E541             >Heap_Ptr        defl    $ - $E000           // save current HP
 178+ E541             >
 178+ E541             >Current_HP      defl  $ - $E000             // used to set HP once!
 178+ E541             >
 178+ E541             >//              ______________________________________________________________________
 178+ E541             >//              Dictionary part
 178+ E541             >
 178+ E541             >                org     Dict_Ptr
 178+ 2817             >
 178+ 2817 3F 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 178+ 2819             >
 178+ 2819             >CSP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 178+ 2819 CD 2A 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 178+ 281C             >
 178+ 281C             >
 178+ 281C             >                endif           ; ok        // for other definitions it "points" the correct handler
 178+ 281C             >                // Use of "; ok" to suppress "warning[fwdref]"
 178+ 281C             >
 178+ 281C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 178+ 281C 34          >                db      52
 179+ 281D                              User_Def RSHARP     , "R#"        , 54 // location of editing cursor
 179+ 281D             >                New_Def  RSHARP, "R#", User_Ptr, is_normal
 179+ 281D             >
 179+ 281D             >Dict_Ptr        defl    $
 179+ 281D             >
 179+ 281D             >//              ______________________________________________________________________
 179+ 281D             >//              Heap part
 179+ 281D             >
 179+ 281D             >
 179+ 281D             >                org     (Heap_Ptr & $1FFF) + $E000
 179+ E541             >
 179+ E541             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 179+ E541             >Latest_Definition defl  Heap_Ptr
 179+ E541             >
 179+ E541             >                // dummy db directives used to calculate length of namec
 179+ E541 52 23       >                db      "R#"
 179+ E543             >len_NFA         defl    $ - temp_NFA
 179+ E543             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 179+ E541             >
 179+ E541 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 179+ E542 52 23       >                db      "R#"               // name string in 7-bit ascii, but
 179+ E544             >                org     $-1                 // alter last byte of Name just above to set
 179+ E543 A3          >                db      {b $} | END_BIT     // msb as name end
 179+ E544             >
 179+ E544 39 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 179+ E546             >Prev_Ptr        defl    Heap_Ptr
 179+ E546             >
 179+ E546             >mirror_Ptr      defl    $
 179+ E546             >
 179+ E546 1F 28       >                dw      Dict_Ptr + 2        // xt
 179+ E548             >Heap_Ptr        defl    $ - $E000           // save current HP
 179+ E548             >
 179+ E548             >Current_HP      defl  $ - $E000             // used to set HP once!
 179+ E548             >
 179+ E548             >//              ______________________________________________________________________
 179+ E548             >//              Dictionary part
 179+ E548             >
 179+ E548             >                org     Dict_Ptr
 179+ 281D             >
 179+ 281D 46 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 179+ 281F             >
 179+ 281F             >RSHARP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 179+ 281F CD 2A 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 179+ 2822             >
 179+ 2822             >
 179+ 2822             >                endif           ; ok        // for other definitions it "points" the correct handler
 179+ 2822             >                // Use of "; ok" to suppress "warning[fwdref]"
 179+ 2822             >
 179+ 2822             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 179+ 2822 36          >                db      54
 180+ 2823                              User_Def HLD        , "HLD"       , 56 // last character during a number conversion output
 180+ 2823             >                New_Def  HLD, "HLD", User_Ptr, is_normal
 180+ 2823             >
 180+ 2823             >Dict_Ptr        defl    $
 180+ 2823             >
 180+ 2823             >//              ______________________________________________________________________
 180+ 2823             >//              Heap part
 180+ 2823             >
 180+ 2823             >
 180+ 2823             >                org     (Heap_Ptr & $1FFF) + $E000
 180+ E548             >
 180+ E548             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 180+ E548             >Latest_Definition defl  Heap_Ptr
 180+ E548             >
 180+ E548             >                // dummy db directives used to calculate length of namec
 180+ E548 48 4C 44    >                db      "HLD"
 180+ E54B             >len_NFA         defl    $ - temp_NFA
 180+ E54B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 180+ E548             >
 180+ E548 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 180+ E549 48 4C 44    >                db      "HLD"               // name string in 7-bit ascii, but
 180+ E54C             >                org     $-1                 // alter last byte of Name just above to set
 180+ E54B C4          >                db      {b $} | END_BIT     // msb as name end
 180+ E54C             >
 180+ E54C 41 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 180+ E54E             >Prev_Ptr        defl    Heap_Ptr
 180+ E54E             >
 180+ E54E             >mirror_Ptr      defl    $
 180+ E54E             >
 180+ E54E 25 28       >                dw      Dict_Ptr + 2        // xt
 180+ E550             >Heap_Ptr        defl    $ - $E000           // save current HP
 180+ E550             >
 180+ E550             >Current_HP      defl  $ - $E000             // used to set HP once!
 180+ E550             >
 180+ E550             >//              ______________________________________________________________________
 180+ E550             >//              Dictionary part
 180+ E550             >
 180+ E550             >                org     Dict_Ptr
 180+ 2823             >
 180+ 2823 4E 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 180+ 2825             >
 180+ 2825             >HLD:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 180+ 2825 CD 2A 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 180+ 2828             >
 180+ 2828             >
 180+ 2828             >                endif           ; ok        // for other definitions it "points" the correct handler
 180+ 2828             >                // Use of "; ok" to suppress "warning[fwdref]"
 180+ 2828             >
 180+ 2828             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 180+ 2828 38          >                db      56
 181+ 2829                              User_Def USED       , "USED"      , 58 // address of last used block
 181+ 2829             >                New_Def  USED, "USED", User_Ptr, is_normal
 181+ 2829             >
 181+ 2829             >Dict_Ptr        defl    $
 181+ 2829             >
 181+ 2829             >//              ______________________________________________________________________
 181+ 2829             >//              Heap part
 181+ 2829             >
 181+ 2829             >
 181+ 2829             >                org     (Heap_Ptr & $1FFF) + $E000
 181+ E550             >
 181+ E550             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 181+ E550             >Latest_Definition defl  Heap_Ptr
 181+ E550             >
 181+ E550             >                // dummy db directives used to calculate length of namec
 181+ E550 55 53 45 44 >                db      "USED"
 181+ E554             >len_NFA         defl    $ - temp_NFA
 181+ E554             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 181+ E550             >
 181+ E550 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 181+ E551 55 53 45 44 >                db      "USED"               // name string in 7-bit ascii, but
 181+ E555             >                org     $-1                 // alter last byte of Name just above to set
 181+ E554 C4          >                db      {b $} | END_BIT     // msb as name end
 181+ E555             >
 181+ E555 48 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 181+ E557             >Prev_Ptr        defl    Heap_Ptr
 181+ E557             >
 181+ E557             >mirror_Ptr      defl    $
 181+ E557             >
 181+ E557 2B 28       >                dw      Dict_Ptr + 2        // xt
 181+ E559             >Heap_Ptr        defl    $ - $E000           // save current HP
 181+ E559             >
 181+ E559             >Current_HP      defl  $ - $E000             // used to set HP once!
 181+ E559             >
 181+ E559             >//              ______________________________________________________________________
 181+ E559             >//              Dictionary part
 181+ E559             >
 181+ E559             >                org     Dict_Ptr
 181+ 2829             >
 181+ 2829 57 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 181+ 282B             >
 181+ 282B             >USED:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 181+ 282B CD 2A 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 181+ 282E             >
 181+ 282E             >
 181+ 282E             >                endif           ; ok        // for other definitions it "points" the correct handler
 181+ 282E             >                // Use of "; ok" to suppress "warning[fwdref]"
 181+ 282E             >
 181+ 282E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 181+ 282E 3A          >                db      58
 182+ 282F                              User_Def PREV       , "PREV"      , 60 // address of previous used block
 182+ 282F             >                New_Def  PREV, "PREV", User_Ptr, is_normal
 182+ 282F             >
 182+ 282F             >Dict_Ptr        defl    $
 182+ 282F             >
 182+ 282F             >//              ______________________________________________________________________
 182+ 282F             >//              Heap part
 182+ 282F             >
 182+ 282F             >
 182+ 282F             >                org     (Heap_Ptr & $1FFF) + $E000
 182+ E559             >
 182+ E559             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 182+ E559             >Latest_Definition defl  Heap_Ptr
 182+ E559             >
 182+ E559             >                // dummy db directives used to calculate length of namec
 182+ E559 50 52 45 56 >                db      "PREV"
 182+ E55D             >len_NFA         defl    $ - temp_NFA
 182+ E55D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 182+ E559             >
 182+ E559 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 182+ E55A 50 52 45 56 >                db      "PREV"               // name string in 7-bit ascii, but
 182+ E55E             >                org     $-1                 // alter last byte of Name just above to set
 182+ E55D D6          >                db      {b $} | END_BIT     // msb as name end
 182+ E55E             >
 182+ E55E 50 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 182+ E560             >Prev_Ptr        defl    Heap_Ptr
 182+ E560             >
 182+ E560             >mirror_Ptr      defl    $
 182+ E560             >
 182+ E560 31 28       >                dw      Dict_Ptr + 2        // xt
 182+ E562             >Heap_Ptr        defl    $ - $E000           // save current HP
 182+ E562             >
 182+ E562             >Current_HP      defl  $ - $E000             // used to set HP once!
 182+ E562             >
 182+ E562             >//              ______________________________________________________________________
 182+ E562             >//              Dictionary part
 182+ E562             >
 182+ E562             >                org     Dict_Ptr
 182+ 282F             >
 182+ 282F 60 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 182+ 2831             >
 182+ 2831             >PREV:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 182+ 2831 CD 2A 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 182+ 2834             >
 182+ 2834             >
 182+ 2834             >                endif           ; ok        // for other definitions it "points" the correct handler
 182+ 2834             >                // Use of "; ok" to suppress "warning[fwdref]"
 182+ 2834             >
 182+ 2834             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 182+ 2834 3C          >                db      60
 183+ 2835                              User_Def LP         , "LP"        , 62 // line printer (not used)
 183+ 2835             >                New_Def  LP, "LP", User_Ptr, is_normal
 183+ 2835             >
 183+ 2835             >Dict_Ptr        defl    $
 183+ 2835             >
 183+ 2835             >//              ______________________________________________________________________
 183+ 2835             >//              Heap part
 183+ 2835             >
 183+ 2835             >
 183+ 2835             >                org     (Heap_Ptr & $1FFF) + $E000
 183+ E562             >
 183+ E562             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 183+ E562             >Latest_Definition defl  Heap_Ptr
 183+ E562             >
 183+ E562             >                // dummy db directives used to calculate length of namec
 183+ E562 4C 50       >                db      "LP"
 183+ E564             >len_NFA         defl    $ - temp_NFA
 183+ E564             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 183+ E562             >
 183+ E562 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 183+ E563 4C 50       >                db      "LP"               // name string in 7-bit ascii, but
 183+ E565             >                org     $-1                 // alter last byte of Name just above to set
 183+ E564 D0          >                db      {b $} | END_BIT     // msb as name end
 183+ E565             >
 183+ E565 59 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 183+ E567             >Prev_Ptr        defl    Heap_Ptr
 183+ E567             >
 183+ E567             >mirror_Ptr      defl    $
 183+ E567             >
 183+ E567 37 28       >                dw      Dict_Ptr + 2        // xt
 183+ E569             >Heap_Ptr        defl    $ - $E000           // save current HP
 183+ E569             >
 183+ E569             >Current_HP      defl  $ - $E000             // used to set HP once!
 183+ E569             >
 183+ E569             >//              ______________________________________________________________________
 183+ E569             >//              Dictionary part
 183+ E569             >
 183+ E569             >                org     Dict_Ptr
 183+ 2835             >
 183+ 2835 67 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 183+ 2837             >
 183+ 2837             >LP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 183+ 2837 CD 2A 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 183+ 283A             >
 183+ 283A             >
 183+ 283A             >                endif           ; ok        // for other definitions it "points" the correct handler
 183+ 283A             >                // Use of "; ok" to suppress "warning[fwdref]"
 183+ 283A             >
 183+ 283A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 183+ 283A 3E          >                db      62
 184+ 283B                              User_Def PLACE      , "PLACE"     , 64 // number of digits after decimal point in output
 184+ 283B             >                New_Def  PLACE, "PLACE", User_Ptr, is_normal
 184+ 283B             >
 184+ 283B             >Dict_Ptr        defl    $
 184+ 283B             >
 184+ 283B             >//              ______________________________________________________________________
 184+ 283B             >//              Heap part
 184+ 283B             >
 184+ 283B             >
 184+ 283B             >                org     (Heap_Ptr & $1FFF) + $E000
 184+ E569             >
 184+ E569             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 184+ E569             >Latest_Definition defl  Heap_Ptr
 184+ E569             >
 184+ E569             >                // dummy db directives used to calculate length of namec
 184+ E569 50 4C 41 43 >                db      "PLACE"
 184+ E56D 45          >
 184+ E56E             >len_NFA         defl    $ - temp_NFA
 184+ E56E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 184+ E569             >
 184+ E569 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 184+ E56A 50 4C 41 43 >                db      "PLACE"               // name string in 7-bit ascii, but
 184+ E56E 45          >
 184+ E56F             >                org     $-1                 // alter last byte of Name just above to set
 184+ E56E C5          >                db      {b $} | END_BIT     // msb as name end
 184+ E56F             >
 184+ E56F 62 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 184+ E571             >Prev_Ptr        defl    Heap_Ptr
 184+ E571             >
 184+ E571             >mirror_Ptr      defl    $
 184+ E571             >
 184+ E571 3D 28       >                dw      Dict_Ptr + 2        // xt
 184+ E573             >Heap_Ptr        defl    $ - $E000           // save current HP
 184+ E573             >
 184+ E573             >Current_HP      defl  $ - $E000             // used to set HP once!
 184+ E573             >
 184+ E573             >//              ______________________________________________________________________
 184+ E573             >//              Dictionary part
 184+ E573             >
 184+ E573             >                org     Dict_Ptr
 184+ 283B             >
 184+ 283B 71 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 184+ 283D             >
 184+ 283D             >PLACE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 184+ 283D CD 2A 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 184+ 2840             >
 184+ 2840             >
 184+ 2840             >                endif           ; ok        // for other definitions it "points" the correct handler
 184+ 2840             >                // Use of "; ok" to suppress "warning[fwdref]"
 184+ 2840             >
 184+ 2840             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 184+ 2840 40          >                db      64
 185+ 2841                              User_Def SOURCE_ID  , "SOURCE-ID" , 66 // data-stream number in INCLUDE and LOAD-
 185+ 2841             >                New_Def  SOURCE_ID, "SOURCE-ID", User_Ptr, is_normal
 185+ 2841             >
 185+ 2841             >Dict_Ptr        defl    $
 185+ 2841             >
 185+ 2841             >//              ______________________________________________________________________
 185+ 2841             >//              Heap part
 185+ 2841             >
 185+ 2841             >
 185+ 2841             >                org     (Heap_Ptr & $1FFF) + $E000
 185+ E573             >
 185+ E573             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 185+ E573             >Latest_Definition defl  Heap_Ptr
 185+ E573             >
 185+ E573             >                // dummy db directives used to calculate length of namec
 185+ E573 53 4F 55 52 >                db      "SOURCE-ID"
 185+ E577 43 45 2D 49 >
 185+ E57B 44          >
 185+ E57C             >len_NFA         defl    $ - temp_NFA
 185+ E57C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 185+ E573             >
 185+ E573 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 185+ E574 53 4F 55 52 >                db      "SOURCE-ID"               // name string in 7-bit ascii, but
 185+ E578 43 45 2D 49 >
 185+ E57C 44          >
 185+ E57D             >                org     $-1                 // alter last byte of Name just above to set
 185+ E57C C4          >                db      {b $} | END_BIT     // msb as name end
 185+ E57D             >
 185+ E57D 69 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 185+ E57F             >Prev_Ptr        defl    Heap_Ptr
 185+ E57F             >
 185+ E57F             >mirror_Ptr      defl    $
 185+ E57F             >
 185+ E57F 43 28       >                dw      Dict_Ptr + 2        // xt
 185+ E581             >Heap_Ptr        defl    $ - $E000           // save current HP
 185+ E581             >
 185+ E581             >Current_HP      defl  $ - $E000             // used to set HP once!
 185+ E581             >
 185+ E581             >//              ______________________________________________________________________
 185+ E581             >//              Dictionary part
 185+ E581             >
 185+ E581             >                org     Dict_Ptr
 185+ 2841             >
 185+ 2841 7F 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 185+ 2843             >
 185+ 2843             >SOURCE_ID:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 185+ 2843 CD 2A 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 185+ 2846             >
 185+ 2846             >
 185+ 2846             >                endif           ; ok        // for other definitions it "points" the correct handler
 185+ 2846             >                // Use of "; ok" to suppress "warning[fwdref]"
 185+ 2846             >
 185+ 2846             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 185+ 2846 42          >                db      66
 186+ 2847                              User_Def SPAN       , "SPAN"      , 68 // number of character of last EXPECT
 186+ 2847             >                New_Def  SPAN, "SPAN", User_Ptr, is_normal
 186+ 2847             >
 186+ 2847             >Dict_Ptr        defl    $
 186+ 2847             >
 186+ 2847             >//              ______________________________________________________________________
 186+ 2847             >//              Heap part
 186+ 2847             >
 186+ 2847             >
 186+ 2847             >                org     (Heap_Ptr & $1FFF) + $E000
 186+ E581             >
 186+ E581             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 186+ E581             >Latest_Definition defl  Heap_Ptr
 186+ E581             >
 186+ E581             >                // dummy db directives used to calculate length of namec
 186+ E581 53 50 41 4E >                db      "SPAN"
 186+ E585             >len_NFA         defl    $ - temp_NFA
 186+ E585             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 186+ E581             >
 186+ E581 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 186+ E582 53 50 41 4E >                db      "SPAN"               // name string in 7-bit ascii, but
 186+ E586             >                org     $-1                 // alter last byte of Name just above to set
 186+ E585 CE          >                db      {b $} | END_BIT     // msb as name end
 186+ E586             >
 186+ E586 73 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 186+ E588             >Prev_Ptr        defl    Heap_Ptr
 186+ E588             >
 186+ E588             >mirror_Ptr      defl    $
 186+ E588             >
 186+ E588 49 28       >                dw      Dict_Ptr + 2        // xt
 186+ E58A             >Heap_Ptr        defl    $ - $E000           // save current HP
 186+ E58A             >
 186+ E58A             >Current_HP      defl  $ - $E000             // used to set HP once!
 186+ E58A             >
 186+ E58A             >//              ______________________________________________________________________
 186+ E58A             >//              Dictionary part
 186+ E58A             >
 186+ E58A             >                org     Dict_Ptr
 186+ 2847             >
 186+ 2847 88 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 186+ 2849             >
 186+ 2849             >SPAN:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 186+ 2849 CD 2A 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 186+ 284C             >
 186+ 284C             >
 186+ 284C             >                endif           ; ok        // for other definitions it "points" the correct handler
 186+ 284C             >                // Use of "; ok" to suppress "warning[fwdref]"
 186+ 284C             >
 186+ 284C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 186+ 284C 44          >                db      68
 187+ 284D                              User_Def HANDLER    , "HANDLER"   , 70 // Used by THROW-CATCH
 187+ 284D             >                New_Def  HANDLER, "HANDLER", User_Ptr, is_normal
 187+ 284D             >
 187+ 284D             >Dict_Ptr        defl    $
 187+ 284D             >
 187+ 284D             >//              ______________________________________________________________________
 187+ 284D             >//              Heap part
 187+ 284D             >
 187+ 284D             >
 187+ 284D             >                org     (Heap_Ptr & $1FFF) + $E000
 187+ E58A             >
 187+ E58A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 187+ E58A             >Latest_Definition defl  Heap_Ptr
 187+ E58A             >
 187+ E58A             >                // dummy db directives used to calculate length of namec
 187+ E58A 48 41 4E 44 >                db      "HANDLER"
 187+ E58E 4C 45 52    >
 187+ E591             >len_NFA         defl    $ - temp_NFA
 187+ E591             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 187+ E58A             >
 187+ E58A 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 187+ E58B 48 41 4E 44 >                db      "HANDLER"               // name string in 7-bit ascii, but
 187+ E58F 4C 45 52    >
 187+ E592             >                org     $-1                 // alter last byte of Name just above to set
 187+ E591 D2          >                db      {b $} | END_BIT     // msb as name end
 187+ E592             >
 187+ E592 81 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 187+ E594             >Prev_Ptr        defl    Heap_Ptr
 187+ E594             >
 187+ E594             >mirror_Ptr      defl    $
 187+ E594             >
 187+ E594 4F 28       >                dw      Dict_Ptr + 2        // xt
 187+ E596             >Heap_Ptr        defl    $ - $E000           // save current HP
 187+ E596             >
 187+ E596             >Current_HP      defl  $ - $E000             // used to set HP once!
 187+ E596             >
 187+ E596             >//              ______________________________________________________________________
 187+ E596             >//              Dictionary part
 187+ E596             >
 187+ E596             >                org     Dict_Ptr
 187+ 284D             >
 187+ 284D 94 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 187+ 284F             >
 187+ 284F             >HANDLER:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 187+ 284F CD 2A 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 187+ 2852             >
 187+ 2852             >
 187+ 2852             >                endif           ; ok        // for other definitions it "points" the correct handler
 187+ 2852             >                // Use of "; ok" to suppress "warning[fwdref]"
 187+ 2852             >
 187+ 2852             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 187+ 2852 46          >                db      70
 188+ 2853                              User_Def EXP        , "EXP"       , 72 // keeps the exponent in number conversion
 188+ 2853             >                New_Def  EXP, "EXP", User_Ptr, is_normal
 188+ 2853             >
 188+ 2853             >Dict_Ptr        defl    $
 188+ 2853             >
 188+ 2853             >//              ______________________________________________________________________
 188+ 2853             >//              Heap part
 188+ 2853             >
 188+ 2853             >
 188+ 2853             >                org     (Heap_Ptr & $1FFF) + $E000
 188+ E596             >
 188+ E596             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 188+ E596             >Latest_Definition defl  Heap_Ptr
 188+ E596             >
 188+ E596             >                // dummy db directives used to calculate length of namec
 188+ E596 45 58 50    >                db      "EXP"
 188+ E599             >len_NFA         defl    $ - temp_NFA
 188+ E599             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 188+ E596             >
 188+ E596 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 188+ E597 45 58 50    >                db      "EXP"               // name string in 7-bit ascii, but
 188+ E59A             >                org     $-1                 // alter last byte of Name just above to set
 188+ E599 D0          >                db      {b $} | END_BIT     // msb as name end
 188+ E59A             >
 188+ E59A 8A 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 188+ E59C             >Prev_Ptr        defl    Heap_Ptr
 188+ E59C             >
 188+ E59C             >mirror_Ptr      defl    $
 188+ E59C             >
 188+ E59C 55 28       >                dw      Dict_Ptr + 2        // xt
 188+ E59E             >Heap_Ptr        defl    $ - $E000           // save current HP
 188+ E59E             >
 188+ E59E             >Current_HP      defl  $ - $E000             // used to set HP once!
 188+ E59E             >
 188+ E59E             >//              ______________________________________________________________________
 188+ E59E             >//              Dictionary part
 188+ E59E             >
 188+ E59E             >                org     Dict_Ptr
 188+ 2853             >
 188+ 2853 9C 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 188+ 2855             >
 188+ 2855             >EXP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 188+ 2855 CD 2A 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 188+ 2858             >
 188+ 2858             >
 188+ 2858             >                endif           ; ok        // for other definitions it "points" the correct handler
 188+ 2858             >                // Use of "; ok" to suppress "warning[fwdref]"
 188+ 2858             >
 188+ 2858             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 188+ 2858 48          >                db      72
 189+ 2859
 190+ 2859              //  ______________________________________________________________________
 191+ 2859              //
 192+ 2859              // here         -- a
 193+ 2859                              Colon_Def HERE, "HERE", is_normal
 193+ 2859             >                New_Def  HERE, "HERE", Enter_Ptr, is_normal ; ok
 193+ 2859             >
 193+ 2859             >Dict_Ptr        defl    $
 193+ 2859             >
 193+ 2859             >//              ______________________________________________________________________
 193+ 2859             >//              Heap part
 193+ 2859             >
 193+ 2859             >
 193+ 2859             >                org     (Heap_Ptr & $1FFF) + $E000
 193+ E59E             >
 193+ E59E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 193+ E59E             >Latest_Definition defl  Heap_Ptr
 193+ E59E             >
 193+ E59E             >                // dummy db directives used to calculate length of namec
 193+ E59E 48 45 52 45 >                db      "HERE"
 193+ E5A2             >len_NFA         defl    $ - temp_NFA
 193+ E5A2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 193+ E59E             >
 193+ E59E 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 193+ E59F 48 45 52 45 >                db      "HERE"               // name string in 7-bit ascii, but
 193+ E5A3             >                org     $-1                 // alter last byte of Name just above to set
 193+ E5A2 C5          >                db      {b $} | END_BIT     // msb as name end
 193+ E5A3             >
 193+ E5A3 96 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 193+ E5A5             >Prev_Ptr        defl    Heap_Ptr
 193+ E5A5             >
 193+ E5A5             >mirror_Ptr      defl    $
 193+ E5A5             >
 193+ E5A5 5B 28       >                dw      Dict_Ptr + 2        // xt
 193+ E5A7             >Heap_Ptr        defl    $ - $E000           // save current HP
 193+ E5A7             >
 193+ E5A7             >Current_HP      defl  $ - $E000             // used to set HP once!
 193+ E5A7             >
 193+ E5A7             >//              ______________________________________________________________________
 193+ E5A7             >//              Dictionary part
 193+ E5A7             >
 193+ E5A7             >                org     Dict_Ptr
 193+ 2859             >
 193+ 2859 A5 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 193+ 285B             >
 193+ 285B             >HERE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 193+ 285B CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 193+ 285E             >
 193+ 285E             >
 193+ 285E             >                endif           ; ok        // for other definitions it "points" the correct handler
 193+ 285E             >                // Use of "; ok" to suppress "warning[fwdref]"
 193+ 285E             >
 193+ 285E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 194+ 285E B3 27 3E 26                  dw      DP, FETCH               // dp @
 195+ 2862 F4 24                        dw      EXIT                    // ;
 196+ 2864
 197+ 2864              //  ______________________________________________________________________
 198+ 2864              //
 199+ 2864              // allot        n --
 200+ 2864                              Colon_Def ALLOT, "ALLOT", is_normal
 200+ 2864             >                New_Def  ALLOT, "ALLOT", Enter_Ptr, is_normal ; ok
 200+ 2864             >
 200+ 2864             >Dict_Ptr        defl    $
 200+ 2864             >
 200+ 2864             >//              ______________________________________________________________________
 200+ 2864             >//              Heap part
 200+ 2864             >
 200+ 2864             >
 200+ 2864             >                org     (Heap_Ptr & $1FFF) + $E000
 200+ E5A7             >
 200+ E5A7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 200+ E5A7             >Latest_Definition defl  Heap_Ptr
 200+ E5A7             >
 200+ E5A7             >                // dummy db directives used to calculate length of namec
 200+ E5A7 41 4C 4C 4F >                db      "ALLOT"
 200+ E5AB 54          >
 200+ E5AC             >len_NFA         defl    $ - temp_NFA
 200+ E5AC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 200+ E5A7             >
 200+ E5A7 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 200+ E5A8 41 4C 4C 4F >                db      "ALLOT"               // name string in 7-bit ascii, but
 200+ E5AC 54          >
 200+ E5AD             >                org     $-1                 // alter last byte of Name just above to set
 200+ E5AC D4          >                db      {b $} | END_BIT     // msb as name end
 200+ E5AD             >
 200+ E5AD 9E 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 200+ E5AF             >Prev_Ptr        defl    Heap_Ptr
 200+ E5AF             >
 200+ E5AF             >mirror_Ptr      defl    $
 200+ E5AF             >
 200+ E5AF 66 28       >                dw      Dict_Ptr + 2        // xt
 200+ E5B1             >Heap_Ptr        defl    $ - $E000           // save current HP
 200+ E5B1             >
 200+ E5B1             >Current_HP      defl  $ - $E000             // used to set HP once!
 200+ E5B1             >
 200+ E5B1             >//              ______________________________________________________________________
 200+ E5B1             >//              Dictionary part
 200+ E5B1             >
 200+ E5B1             >                org     Dict_Ptr
 200+ 2864             >
 200+ 2864 AF 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 200+ 2866             >
 200+ 2866             >ALLOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 200+ 2866 CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 200+ 2869             >
 200+ 2869             >
 200+ 2869             >                endif           ; ok        // for other definitions it "points" the correct handler
 200+ 2869             >                // Use of "; ok" to suppress "warning[fwdref]"
 200+ 2869             >
 200+ 2869             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 201+ 2869 B3 27 26 26                  dw      DP,  PLUSSTORE          // dp +!
 202+ 286D F4 24                        dw      EXIT                    // ;
 203+ 286F
 204+ 286F              //  ______________________________________________________________________
 205+ 286F              //
 206+ 286F              // comma        n --
 207+ 286F                              Colon_Def COMMA, ",", is_normal
 207+ 286F             >                New_Def  COMMA, ",", Enter_Ptr, is_normal ; ok
 207+ 286F             >
 207+ 286F             >Dict_Ptr        defl    $
 207+ 286F             >
 207+ 286F             >//              ______________________________________________________________________
 207+ 286F             >//              Heap part
 207+ 286F             >
 207+ 286F             >
 207+ 286F             >                org     (Heap_Ptr & $1FFF) + $E000
 207+ E5B1             >
 207+ E5B1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 207+ E5B1             >Latest_Definition defl  Heap_Ptr
 207+ E5B1             >
 207+ E5B1             >                // dummy db directives used to calculate length of namec
 207+ E5B1 2C          >                db      ","
 207+ E5B2             >len_NFA         defl    $ - temp_NFA
 207+ E5B2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 207+ E5B1             >
 207+ E5B1 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 207+ E5B2 2C          >                db      ","               // name string in 7-bit ascii, but
 207+ E5B3             >                org     $-1                 // alter last byte of Name just above to set
 207+ E5B2 AC          >                db      {b $} | END_BIT     // msb as name end
 207+ E5B3             >
 207+ E5B3 A7 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 207+ E5B5             >Prev_Ptr        defl    Heap_Ptr
 207+ E5B5             >
 207+ E5B5             >mirror_Ptr      defl    $
 207+ E5B5             >
 207+ E5B5 71 28       >                dw      Dict_Ptr + 2        // xt
 207+ E5B7             >Heap_Ptr        defl    $ - $E000           // save current HP
 207+ E5B7             >
 207+ E5B7             >Current_HP      defl  $ - $E000             // used to set HP once!
 207+ E5B7             >
 207+ E5B7             >//              ______________________________________________________________________
 207+ E5B7             >//              Dictionary part
 207+ E5B7             >
 207+ E5B7             >                org     Dict_Ptr
 207+ 286F             >
 207+ 286F B5 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 207+ 2871             >
 207+ 2871             >COMMA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 207+ 2871 CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 207+ 2874             >
 207+ 2874             >
 207+ 2874             >                endif           ; ok        // for other definitions it "points" the correct handler
 207+ 2874             >                // Use of "; ok" to suppress "warning[fwdref]"
 207+ 2874             >
 207+ 2874             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 208+ 2874 5B 28 48 26                  dw      HERE, STORE             // here !
 209+ 2878 44 27 66 28                  dw      TWO, ALLOT              // 2 allot
 210+ 287C F4 24                        dw      EXIT                    // ;
 211+ 287E
 212+ 287E              //  ______________________________________________________________________
 213+ 287E              //
 214+ 287E              // ccomma       c --
 215+ 287E                              Colon_Def CCOMMA, "C,", is_normal
 215+ 287E             >                New_Def  CCOMMA, "C,", Enter_Ptr, is_normal ; ok
 215+ 287E             >
 215+ 287E             >Dict_Ptr        defl    $
 215+ 287E             >
 215+ 287E             >//              ______________________________________________________________________
 215+ 287E             >//              Heap part
 215+ 287E             >
 215+ 287E             >
 215+ 287E             >                org     (Heap_Ptr & $1FFF) + $E000
 215+ E5B7             >
 215+ E5B7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 215+ E5B7             >Latest_Definition defl  Heap_Ptr
 215+ E5B7             >
 215+ E5B7             >                // dummy db directives used to calculate length of namec
 215+ E5B7 43 2C       >                db      "C,"
 215+ E5B9             >len_NFA         defl    $ - temp_NFA
 215+ E5B9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 215+ E5B7             >
 215+ E5B7 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 215+ E5B8 43 2C       >                db      "C,"               // name string in 7-bit ascii, but
 215+ E5BA             >                org     $-1                 // alter last byte of Name just above to set
 215+ E5B9 AC          >                db      {b $} | END_BIT     // msb as name end
 215+ E5BA             >
 215+ E5BA B1 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 215+ E5BC             >Prev_Ptr        defl    Heap_Ptr
 215+ E5BC             >
 215+ E5BC             >mirror_Ptr      defl    $
 215+ E5BC             >
 215+ E5BC 80 28       >                dw      Dict_Ptr + 2        // xt
 215+ E5BE             >Heap_Ptr        defl    $ - $E000           // save current HP
 215+ E5BE             >
 215+ E5BE             >Current_HP      defl  $ - $E000             // used to set HP once!
 215+ E5BE             >
 215+ E5BE             >//              ______________________________________________________________________
 215+ E5BE             >//              Dictionary part
 215+ E5BE             >
 215+ E5BE             >                org     Dict_Ptr
 215+ 287E             >
 215+ 287E BC 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 215+ 2880             >
 215+ 2880             >CCOMMA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 215+ 2880 CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 215+ 2883             >
 215+ 2883             >
 215+ 2883             >                endif           ; ok        // for other definitions it "points" the correct handler
 215+ 2883             >                // Use of "; ok" to suppress "warning[fwdref]"
 215+ 2883             >
 215+ 2883             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 216+ 2883 5B 28 5C 26                  dw      HERE, CSTORE            // here c!
 217+ 2887 3D 27 66 28                  dw      ONE, ALLOT              // 1 allot
 218+ 288B F4 24                        dw      EXIT                    // ;
 219+ 288D
 220+ 288D              //  ______________________________________________________________________
 221+ 288D              //
 222+ 288D              // hpcomma      n --
 223+ 288D              //              Colon_Def HCOMMA, "HP,", is_normal
 224+ 288D              //              dw      HP_FETCH, FAR, STORE    // HP@ FAR !
 225+ 288D              //              dw      TWO, HP, PLUSSTORE      // 2 HP +!
 226+ 288D              //              dw      EXIT                    // ;
 227+ 288D
 228+ 288D              //  ______________________________________________________________________
 229+ 288D              //
 230+ 288D              // s>d          n -- d
 231+ 288D              // converts a single precision integer in a double precision
 232+ 288D                              New_Def S_TO_D, "S>D", is_code, is_normal
 232+ 288D             >
 232+ 288D             >Dict_Ptr        defl    $
 232+ 288D             >
 232+ 288D             >//              ______________________________________________________________________
 232+ 288D             >//              Heap part
 232+ 288D             >
 232+ 288D             >
 232+ 288D             >                org     (Heap_Ptr & $1FFF) + $E000
 232+ E5BE             >
 232+ E5BE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 232+ E5BE             >Latest_Definition defl  Heap_Ptr
 232+ E5BE             >
 232+ E5BE             >                // dummy db directives used to calculate length of namec
 232+ E5BE 53 3E 44    >                db      "S>D"
 232+ E5C1             >len_NFA         defl    $ - temp_NFA
 232+ E5C1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 232+ E5BE             >
 232+ E5BE 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 232+ E5BF 53 3E 44    >                db      "S>D"               // name string in 7-bit ascii, but
 232+ E5C2             >                org     $-1                 // alter last byte of Name just above to set
 232+ E5C1 C4          >                db      {b $} | END_BIT     // msb as name end
 232+ E5C2             >
 232+ E5C2 B7 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 232+ E5C4             >Prev_Ptr        defl    Heap_Ptr
 232+ E5C4             >
 232+ E5C4             >mirror_Ptr      defl    $
 232+ E5C4             >
 232+ E5C4 8F 28       >                dw      Dict_Ptr + 2        // xt
 232+ E5C6             >Heap_Ptr        defl    $ - $E000           // save current HP
 232+ E5C6             >
 232+ E5C6             >Current_HP      defl  $ - $E000             // used to set HP once!
 232+ E5C6             >
 232+ E5C6             >//              ______________________________________________________________________
 232+ E5C6             >//              Dictionary part
 232+ E5C6             >
 232+ E5C6             >                org     Dict_Ptr
 232+ 288D             >
 232+ 288D C4 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 232+ 288F             >
 232+ 288F             >S_TO_D:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 232+ 288F ~           >                call    runcode ; ok        // for primitive definitions  actual code
 232+ 288F ~           >
 232+ 288F ~           >
 232+ 288F             >                endif           ; ok        // for other definitions it "points" the correct handler
 232+ 288F             >                // Use of "; ok" to suppress "warning[fwdref]"
 232+ 288F             >
 232+ 288F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 233+ 288F E1                           pop     hl
 234+ 2890 7C                           ld      a, h
 235+ 2891 E5                           push    hl
 236+ 2892 17                           rla
 237+ 2893 ED 62                        sbc     hl, hl
 238+ 2895 E5                           push    hl
 239+ 2896                              next
 239+ 2896 DD E9       >                jp      (ix)
 240+ 2898
 241+ 2898              //  ______________________________________________________________________
 242+ 2898              //
 243+ 2898              // -            n1 n2 -- n3
 244+ 2898              // subtraction
 245+ 2898                              New_Def SUBTRACT, "-", is_code, is_normal
 245+ 2898             >
 245+ 2898             >Dict_Ptr        defl    $
 245+ 2898             >
 245+ 2898             >//              ______________________________________________________________________
 245+ 2898             >//              Heap part
 245+ 2898             >
 245+ 2898             >
 245+ 2898             >                org     (Heap_Ptr & $1FFF) + $E000
 245+ E5C6             >
 245+ E5C6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 245+ E5C6             >Latest_Definition defl  Heap_Ptr
 245+ E5C6             >
 245+ E5C6             >                // dummy db directives used to calculate length of namec
 245+ E5C6 2D          >                db      "-"
 245+ E5C7             >len_NFA         defl    $ - temp_NFA
 245+ E5C7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 245+ E5C6             >
 245+ E5C6 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 245+ E5C7 2D          >                db      "-"               // name string in 7-bit ascii, but
 245+ E5C8             >                org     $-1                 // alter last byte of Name just above to set
 245+ E5C7 AD          >                db      {b $} | END_BIT     // msb as name end
 245+ E5C8             >
 245+ E5C8 BE 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 245+ E5CA             >Prev_Ptr        defl    Heap_Ptr
 245+ E5CA             >
 245+ E5CA             >mirror_Ptr      defl    $
 245+ E5CA             >
 245+ E5CA 9A 28       >                dw      Dict_Ptr + 2        // xt
 245+ E5CC             >Heap_Ptr        defl    $ - $E000           // save current HP
 245+ E5CC             >
 245+ E5CC             >Current_HP      defl  $ - $E000             // used to set HP once!
 245+ E5CC             >
 245+ E5CC             >//              ______________________________________________________________________
 245+ E5CC             >//              Dictionary part
 245+ E5CC             >
 245+ E5CC             >                org     Dict_Ptr
 245+ 2898             >
 245+ 2898 CA 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 245+ 289A             >
 245+ 289A             >SUBTRACT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 245+ 289A ~           >                call    runcode ; ok        // for primitive definitions  actual code
 245+ 289A ~           >
 245+ 289A ~           >
 245+ 289A             >                endif           ; ok        // for other definitions it "points" the correct handler
 245+ 289A             >                // Use of "; ok" to suppress "warning[fwdref]"
 245+ 289A             >
 245+ 289A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 246+ 289A D9                           exx
 247+ 289B D1                           pop     de
 248+ 289C E1                           pop     hl
 249+ 289D A7                           and     a
 250+ 289E ED 52                        sbc     hl, de
 251+ 28A0 E5                           push    hl
 252+ 28A1 D9                           exx
 253+ 28A2                              next
 253+ 28A2 DD E9       >                jp      (ix)
 254+ 28A4
 255+ 28A4
 256+ 28A4              //  ______________________________________________________________________
 257+ 28A4              //
 258+ 28A4              // =            n1 n2 -- n3
 259+ 28A4              // equals
 260+ 28A4                              Colon_Def EQUALS, "=", is_normal
 260+ 28A4             >                New_Def  EQUALS, "=", Enter_Ptr, is_normal ; ok
 260+ 28A4             >
 260+ 28A4             >Dict_Ptr        defl    $
 260+ 28A4             >
 260+ 28A4             >//              ______________________________________________________________________
 260+ 28A4             >//              Heap part
 260+ 28A4             >
 260+ 28A4             >
 260+ 28A4             >                org     (Heap_Ptr & $1FFF) + $E000
 260+ E5CC             >
 260+ E5CC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 260+ E5CC             >Latest_Definition defl  Heap_Ptr
 260+ E5CC             >
 260+ E5CC             >                // dummy db directives used to calculate length of namec
 260+ E5CC 3D          >                db      "="
 260+ E5CD             >len_NFA         defl    $ - temp_NFA
 260+ E5CD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 260+ E5CC             >
 260+ E5CC 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 260+ E5CD 3D          >                db      "="               // name string in 7-bit ascii, but
 260+ E5CE             >                org     $-1                 // alter last byte of Name just above to set
 260+ E5CD BD          >                db      {b $} | END_BIT     // msb as name end
 260+ E5CE             >
 260+ E5CE C6 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 260+ E5D0             >Prev_Ptr        defl    Heap_Ptr
 260+ E5D0             >
 260+ E5D0             >mirror_Ptr      defl    $
 260+ E5D0             >
 260+ E5D0 A6 28       >                dw      Dict_Ptr + 2        // xt
 260+ E5D2             >Heap_Ptr        defl    $ - $E000           // save current HP
 260+ E5D2             >
 260+ E5D2             >Current_HP      defl  $ - $E000             // used to set HP once!
 260+ E5D2             >
 260+ E5D2             >//              ______________________________________________________________________
 260+ E5D2             >//              Dictionary part
 260+ E5D2             >
 260+ E5D2             >                org     Dict_Ptr
 260+ 28A4             >
 260+ 28A4 D0 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 260+ 28A6             >
 260+ 28A6             >EQUALS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 260+ 28A6 CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 260+ 28A9             >
 260+ 28A9             >
 260+ 28A9             >                endif           ; ok        // for other definitions it "points" the correct handler
 260+ 28A9             >                // Use of "; ok" to suppress "warning[fwdref]"
 260+ 28A9             >
 260+ 28A9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 261+ 28A9 9A 28 19 25                  dw      SUBTRACT, ZEQUAL        // - 0=
 262+ 28AD F4 24                        dw      EXIT                    // ;
 263+ 28AF
 264+ 28AF              //  ______________________________________________________________________
 265+ 28AF              //
 266+ 28AF              // u<           u1 u2 -- u3
 267+ 28AF              // unsigned less-than
 268+ 28AF                              New_Def ULESS, "U<", is_code, is_normal
 268+ 28AF             >
 268+ 28AF             >Dict_Ptr        defl    $
 268+ 28AF             >
 268+ 28AF             >//              ______________________________________________________________________
 268+ 28AF             >//              Heap part
 268+ 28AF             >
 268+ 28AF             >
 268+ 28AF             >                org     (Heap_Ptr & $1FFF) + $E000
 268+ E5D2             >
 268+ E5D2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 268+ E5D2             >Latest_Definition defl  Heap_Ptr
 268+ E5D2             >
 268+ E5D2             >                // dummy db directives used to calculate length of namec
 268+ E5D2 55 3C       >                db      "U<"
 268+ E5D4             >len_NFA         defl    $ - temp_NFA
 268+ E5D4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 268+ E5D2             >
 268+ E5D2 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 268+ E5D3 55 3C       >                db      "U<"               // name string in 7-bit ascii, but
 268+ E5D5             >                org     $-1                 // alter last byte of Name just above to set
 268+ E5D4 BC          >                db      {b $} | END_BIT     // msb as name end
 268+ E5D5             >
 268+ E5D5 CC 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 268+ E5D7             >Prev_Ptr        defl    Heap_Ptr
 268+ E5D7             >
 268+ E5D7             >mirror_Ptr      defl    $
 268+ E5D7             >
 268+ E5D7 B1 28       >                dw      Dict_Ptr + 2        // xt
 268+ E5D9             >Heap_Ptr        defl    $ - $E000           // save current HP
 268+ E5D9             >
 268+ E5D9             >Current_HP      defl  $ - $E000             // used to set HP once!
 268+ E5D9             >
 268+ E5D9             >//              ______________________________________________________________________
 268+ E5D9             >//              Dictionary part
 268+ E5D9             >
 268+ E5D9             >                org     Dict_Ptr
 268+ 28AF             >
 268+ 28AF D7 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 268+ 28B1             >
 268+ 28B1             >ULESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 268+ 28B1 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 268+ 28B1 ~           >
 268+ 28B1 ~           >
 268+ 28B1             >                endif           ; ok        // for other definitions it "points" the correct handler
 268+ 28B1             >                // Use of "; ok" to suppress "warning[fwdref]"
 268+ 28B1             >
 268+ 28B1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 269+ 28B1 D9                           exx
 270+ 28B2 D1                           pop     de
 271+ 28B3 E1                           pop     hl
 272+ 28B4 A7                           and     a
 273+ 28B5 ED 52                        sbc     hl, de
 274+ 28B7 ED 62                        sbc     hl, hl
 275+ 28B9 E5                           push    hl
 276+ 28BA D9                           exx
 277+ 28BB                              next
 277+ 28BB DD E9       >                jp      (ix)
 278+ 28BD
 279+ 28BD              //  ______________________________________________________________________
 280+ 28BD              //
 281+ 28BD              // <           n1 n2 -- n3
 282+ 28BD              // less-than
 283+ 28BD                              New_Def LESS, "<", is_code, is_normal
 283+ 28BD             >
 283+ 28BD             >Dict_Ptr        defl    $
 283+ 28BD             >
 283+ 28BD             >//              ______________________________________________________________________
 283+ 28BD             >//              Heap part
 283+ 28BD             >
 283+ 28BD             >
 283+ 28BD             >                org     (Heap_Ptr & $1FFF) + $E000
 283+ E5D9             >
 283+ E5D9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 283+ E5D9             >Latest_Definition defl  Heap_Ptr
 283+ E5D9             >
 283+ E5D9             >                // dummy db directives used to calculate length of namec
 283+ E5D9 3C          >                db      "<"
 283+ E5DA             >len_NFA         defl    $ - temp_NFA
 283+ E5DA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 283+ E5D9             >
 283+ E5D9 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 283+ E5DA 3C          >                db      "<"               // name string in 7-bit ascii, but
 283+ E5DB             >                org     $-1                 // alter last byte of Name just above to set
 283+ E5DA BC          >                db      {b $} | END_BIT     // msb as name end
 283+ E5DB             >
 283+ E5DB D2 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 283+ E5DD             >Prev_Ptr        defl    Heap_Ptr
 283+ E5DD             >
 283+ E5DD             >mirror_Ptr      defl    $
 283+ E5DD             >
 283+ E5DD BF 28       >                dw      Dict_Ptr + 2        // xt
 283+ E5DF             >Heap_Ptr        defl    $ - $E000           // save current HP
 283+ E5DF             >
 283+ E5DF             >Current_HP      defl  $ - $E000             // used to set HP once!
 283+ E5DF             >
 283+ E5DF             >//              ______________________________________________________________________
 283+ E5DF             >//              Dictionary part
 283+ E5DF             >
 283+ E5DF             >                org     Dict_Ptr
 283+ 28BD             >
 283+ 28BD DD 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 283+ 28BF             >
 283+ 28BF             >LESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 283+ 28BF ~           >                call    runcode ; ok        // for primitive definitions  actual code
 283+ 28BF ~           >
 283+ 28BF ~           >
 283+ 28BF             >                endif           ; ok        // for other definitions it "points" the correct handler
 283+ 28BF             >                // Use of "; ok" to suppress "warning[fwdref]"
 283+ 28BF             >
 283+ 28BF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 284+ 28BF D9                           exx
 285+ 28C0 D1                           pop     de
 286+ 28C1 E1                           pop     hl
 287+ 28C2 7C                           ld      a, h
 288+ 28C3 EE 80                        xor     $80
 289+ 28C5 67                           ld      h, a
 290+ 28C6 7A                           ld      a, d
 291+ 28C7 EE 80                        xor     $80
 292+ 28C9 57                           ld      d, a
 293+ 28CA              //              and     a
 294+ 28CA ED 52                        sbc     hl, de
 295+ 28CC ED 62                        sbc     hl, hl
 296+ 28CE E5                           push    hl
 297+ 28CF D9                           exx
 298+ 28D0                              next
 298+ 28D0 DD E9       >                jp      (ix)
 299+ 28D2
 300+ 28D2              //  ______________________________________________________________________
 301+ 28D2              //
 302+ 28D2              // >            n1 n2 -- n3
 303+ 28D2              // greater than
 304+ 28D2                              Colon_Def GREATER, ">", is_normal
 304+ 28D2             >                New_Def  GREATER, ">", Enter_Ptr, is_normal ; ok
 304+ 28D2             >
 304+ 28D2             >Dict_Ptr        defl    $
 304+ 28D2             >
 304+ 28D2             >//              ______________________________________________________________________
 304+ 28D2             >//              Heap part
 304+ 28D2             >
 304+ 28D2             >
 304+ 28D2             >                org     (Heap_Ptr & $1FFF) + $E000
 304+ E5DF             >
 304+ E5DF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 304+ E5DF             >Latest_Definition defl  Heap_Ptr
 304+ E5DF             >
 304+ E5DF             >                // dummy db directives used to calculate length of namec
 304+ E5DF 3E          >                db      ">"
 304+ E5E0             >len_NFA         defl    $ - temp_NFA
 304+ E5E0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 304+ E5DF             >
 304+ E5DF 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 304+ E5E0 3E          >                db      ">"               // name string in 7-bit ascii, but
 304+ E5E1             >                org     $-1                 // alter last byte of Name just above to set
 304+ E5E0 BE          >                db      {b $} | END_BIT     // msb as name end
 304+ E5E1             >
 304+ E5E1 D9 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 304+ E5E3             >Prev_Ptr        defl    Heap_Ptr
 304+ E5E3             >
 304+ E5E3             >mirror_Ptr      defl    $
 304+ E5E3             >
 304+ E5E3 D4 28       >                dw      Dict_Ptr + 2        // xt
 304+ E5E5             >Heap_Ptr        defl    $ - $E000           // save current HP
 304+ E5E5             >
 304+ E5E5             >Current_HP      defl  $ - $E000             // used to set HP once!
 304+ E5E5             >
 304+ E5E5             >//              ______________________________________________________________________
 304+ E5E5             >//              Dictionary part
 304+ E5E5             >
 304+ E5E5             >                org     Dict_Ptr
 304+ 28D2             >
 304+ 28D2 E3 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 304+ 28D4             >
 304+ 28D4             >GREATER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 304+ 28D4 CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 304+ 28D7             >
 304+ 28D7             >
 304+ 28D7             >                endif           ; ok        // for other definitions it "points" the correct handler
 304+ 28D7             >                // Use of "; ok" to suppress "warning[fwdref]"
 304+ 28D7             >
 304+ 28D7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 305+ 28D7 C6 25 BF 28                  dw      SWAP, LESS              // swap <
 306+ 28DB F4 24                        dw      EXIT                    // ;
 307+ 28DD              //  ______________________________________________________________________
 308+ 28DD              //
 309+ 28DD              // min          n1 n2 -- n3
 310+ 28DD              // minimum between n1 and n2
 311+ 28DD                              Colon_Def MIN, "MIN" , is_normal
 311+ 28DD             >                New_Def  MIN, "MIN", Enter_Ptr, is_normal ; ok
 311+ 28DD             >
 311+ 28DD             >Dict_Ptr        defl    $
 311+ 28DD             >
 311+ 28DD             >//              ______________________________________________________________________
 311+ 28DD             >//              Heap part
 311+ 28DD             >
 311+ 28DD             >
 311+ 28DD             >                org     (Heap_Ptr & $1FFF) + $E000
 311+ E5E5             >
 311+ E5E5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 311+ E5E5             >Latest_Definition defl  Heap_Ptr
 311+ E5E5             >
 311+ E5E5             >                // dummy db directives used to calculate length of namec
 311+ E5E5 4D 49 4E    >                db      "MIN"
 311+ E5E8             >len_NFA         defl    $ - temp_NFA
 311+ E5E8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 311+ E5E5             >
 311+ E5E5 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 311+ E5E6 4D 49 4E    >                db      "MIN"               // name string in 7-bit ascii, but
 311+ E5E9             >                org     $-1                 // alter last byte of Name just above to set
 311+ E5E8 CE          >                db      {b $} | END_BIT     // msb as name end
 311+ E5E9             >
 311+ E5E9 DF 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 311+ E5EB             >Prev_Ptr        defl    Heap_Ptr
 311+ E5EB             >
 311+ E5EB             >mirror_Ptr      defl    $
 311+ E5EB             >
 311+ E5EB DF 28       >                dw      Dict_Ptr + 2        // xt
 311+ E5ED             >Heap_Ptr        defl    $ - $E000           // save current HP
 311+ E5ED             >
 311+ E5ED             >Current_HP      defl  $ - $E000             // used to set HP once!
 311+ E5ED             >
 311+ E5ED             >//              ______________________________________________________________________
 311+ E5ED             >//              Dictionary part
 311+ E5ED             >
 311+ E5ED             >                org     Dict_Ptr
 311+ 28DD             >
 311+ 28DD EB 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 311+ 28DF             >
 311+ 28DF             >MIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 311+ 28DF CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 311+ 28E2             >
 311+ 28E2             >
 311+ 28E2             >                endif           ; ok        // for other definitions it "points" the correct handler
 311+ 28E2             >                // Use of "; ok" to suppress "warning[fwdref]"
 311+ 28E2             >
 311+ 28E2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 312+ 28E2 1C 26                        dw      TWO_DUP                 // 2dup
 313+ 28E4 D4 28                        dw      GREATER                 // >
 314+ 28E6 8F 20                        dw      ZBRANCH
 315+ 28E8 04 00                        dw      Min_Skip - $   // if
 316+ 28EA C6 25                        dw          SWAP                //      swap
 317+ 28EC              Min_Skip:                                       // endif
 318+ 28EC B2 25                        dw      DROP                    // drop
 319+ 28EE F4 24                        dw      EXIT                    // ;
 320+ 28F0
 321+ 28F0              //  ______________________________________________________________________
 322+ 28F0              //
 323+ 28F0              // max          n1 n2 -- n3
 324+ 28F0              // maximum between n1 and n2
 325+ 28F0                              Colon_Def MAX, "MAX", is_normal
 325+ 28F0             >                New_Def  MAX, "MAX", Enter_Ptr, is_normal ; ok
 325+ 28F0             >
 325+ 28F0             >Dict_Ptr        defl    $
 325+ 28F0             >
 325+ 28F0             >//              ______________________________________________________________________
 325+ 28F0             >//              Heap part
 325+ 28F0             >
 325+ 28F0             >
 325+ 28F0             >                org     (Heap_Ptr & $1FFF) + $E000
 325+ E5ED             >
 325+ E5ED             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 325+ E5ED             >Latest_Definition defl  Heap_Ptr
 325+ E5ED             >
 325+ E5ED             >                // dummy db directives used to calculate length of namec
 325+ E5ED 4D 41 58    >                db      "MAX"
 325+ E5F0             >len_NFA         defl    $ - temp_NFA
 325+ E5F0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 325+ E5ED             >
 325+ E5ED 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 325+ E5EE 4D 41 58    >                db      "MAX"               // name string in 7-bit ascii, but
 325+ E5F1             >                org     $-1                 // alter last byte of Name just above to set
 325+ E5F0 D8          >                db      {b $} | END_BIT     // msb as name end
 325+ E5F1             >
 325+ E5F1 E5 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 325+ E5F3             >Prev_Ptr        defl    Heap_Ptr
 325+ E5F3             >
 325+ E5F3             >mirror_Ptr      defl    $
 325+ E5F3             >
 325+ E5F3 F2 28       >                dw      Dict_Ptr + 2        // xt
 325+ E5F5             >Heap_Ptr        defl    $ - $E000           // save current HP
 325+ E5F5             >
 325+ E5F5             >Current_HP      defl  $ - $E000             // used to set HP once!
 325+ E5F5             >
 325+ E5F5             >//              ______________________________________________________________________
 325+ E5F5             >//              Dictionary part
 325+ E5F5             >
 325+ E5F5             >                org     Dict_Ptr
 325+ 28F0             >
 325+ 28F0 F3 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 325+ 28F2             >
 325+ 28F2             >MAX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 325+ 28F2 CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 325+ 28F5             >
 325+ 28F5             >
 325+ 28F5             >                endif           ; ok        // for other definitions it "points" the correct handler
 325+ 28F5             >                // Use of "; ok" to suppress "warning[fwdref]"
 325+ 28F5             >
 325+ 28F5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 326+ 28F5 1C 26                        dw      TWO_DUP                 // 2dup
 327+ 28F7 BF 28                        dw      LESS                    // <
 328+ 28F9 8F 20                        dw      ZBRANCH
 329+ 28FB 04 00                        dw      Max_Skip - $   // if
 330+ 28FD C6 25                        dw          SWAP                //      swap
 331+ 28FF              Max_Skip:                                       // endif
 332+ 28FF B2 25                        dw      DROP                    // drop
 333+ 2901 F4 24                        dw      EXIT                    // ;
 334+ 2903
 335+ 2903              //  ______________________________________________________________________
 336+ 2903              //
 337+ 2903              // ?dup         n -- 0 | n n
 338+ 2903              // duplicate if not zero
 339+ 2903                              New_Def QDUP, "?DUP", is_code, is_normal
 339+ 2903             >
 339+ 2903             >Dict_Ptr        defl    $
 339+ 2903             >
 339+ 2903             >//              ______________________________________________________________________
 339+ 2903             >//              Heap part
 339+ 2903             >
 339+ 2903             >
 339+ 2903             >                org     (Heap_Ptr & $1FFF) + $E000
 339+ E5F5             >
 339+ E5F5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 339+ E5F5             >Latest_Definition defl  Heap_Ptr
 339+ E5F5             >
 339+ E5F5             >                // dummy db directives used to calculate length of namec
 339+ E5F5 3F 44 55 50 >                db      "?DUP"
 339+ E5F9             >len_NFA         defl    $ - temp_NFA
 339+ E5F9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 339+ E5F5             >
 339+ E5F5 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 339+ E5F6 3F 44 55 50 >                db      "?DUP"               // name string in 7-bit ascii, but
 339+ E5FA             >                org     $-1                 // alter last byte of Name just above to set
 339+ E5F9 D0          >                db      {b $} | END_BIT     // msb as name end
 339+ E5FA             >
 339+ E5FA ED 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 339+ E5FC             >Prev_Ptr        defl    Heap_Ptr
 339+ E5FC             >
 339+ E5FC             >mirror_Ptr      defl    $
 339+ E5FC             >
 339+ E5FC 05 29       >                dw      Dict_Ptr + 2        // xt
 339+ E5FE             >Heap_Ptr        defl    $ - $E000           // save current HP
 339+ E5FE             >
 339+ E5FE             >Current_HP      defl  $ - $E000             // used to set HP once!
 339+ E5FE             >
 339+ E5FE             >//              ______________________________________________________________________
 339+ E5FE             >//              Dictionary part
 339+ E5FE             >
 339+ E5FE             >                org     Dict_Ptr
 339+ 2903             >
 339+ 2903 FC 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 339+ 2905             >
 339+ 2905             >QDUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 339+ 2905 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 339+ 2905 ~           >
 339+ 2905 ~           >
 339+ 2905             >                endif           ; ok        // for other definitions it "points" the correct handler
 339+ 2905             >                // Use of "; ok" to suppress "warning[fwdref]"
 339+ 2905             >
 339+ 2905             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 340+ 2905              QDup_Ptr:
 341+ 2905 E1                           pop     hl
 342+ 2906 7C                           ld      a, h
 343+ 2907 B5                           or      l
 344+ 2908 28 01                        jr      z, QDup_Skip
 345+ 290A E5                               push    hl
 346+ 290B              QDup_Skip:
 347+ 290B                              psh1
 347+ 290B E5          >                push    hl
 347+ 290C DD E9       >                jp      (ix)
 348+ 290E
 349+ 290E              //  ______________________________________________________________________
 350+ 290E              //
 351+ 290E              // -dup         n -- 0 | n n
 352+ 290E              // duplicate if not zero
 353+ 290E                              New_Def LDUP, "-DUP", is_code, is_normal
 353+ 290E             >
 353+ 290E             >Dict_Ptr        defl    $
 353+ 290E             >
 353+ 290E             >//              ______________________________________________________________________
 353+ 290E             >//              Heap part
 353+ 290E             >
 353+ 290E             >
 353+ 290E             >                org     (Heap_Ptr & $1FFF) + $E000
 353+ E5FE             >
 353+ E5FE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 353+ E5FE             >Latest_Definition defl  Heap_Ptr
 353+ E5FE             >
 353+ E5FE             >                // dummy db directives used to calculate length of namec
 353+ E5FE 2D 44 55 50 >                db      "-DUP"
 353+ E602             >len_NFA         defl    $ - temp_NFA
 353+ E602             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 353+ E5FE             >
 353+ E5FE 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 353+ E5FF 2D 44 55 50 >                db      "-DUP"               // name string in 7-bit ascii, but
 353+ E603             >                org     $-1                 // alter last byte of Name just above to set
 353+ E602 D0          >                db      {b $} | END_BIT     // msb as name end
 353+ E603             >
 353+ E603 F5 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 353+ E605             >Prev_Ptr        defl    Heap_Ptr
 353+ E605             >
 353+ E605             >mirror_Ptr      defl    $
 353+ E605             >
 353+ E605 10 29       >                dw      Dict_Ptr + 2        // xt
 353+ E607             >Heap_Ptr        defl    $ - $E000           // save current HP
 353+ E607             >
 353+ E607             >Current_HP      defl  $ - $E000             // used to set HP once!
 353+ E607             >
 353+ E607             >//              ______________________________________________________________________
 353+ E607             >//              Dictionary part
 353+ E607             >
 353+ E607             >                org     Dict_Ptr
 353+ 290E             >
 353+ 290E 05 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 353+ 2910             >
 353+ 2910             >LDUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 353+ 2910 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 353+ 2910 ~           >
 353+ 2910 ~           >
 353+ 2910             >                endif           ; ok        // for other definitions it "points" the correct handler
 353+ 2910             >                // Use of "; ok" to suppress "warning[fwdref]"
 353+ 2910             >
 353+ 2910             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 354+ 2910 C3 05 29                     jp      QDup_Ptr
 355+ 2913
 356+ 2913              //  ______________________________________________________________________
 357+ 2913              //
 358+ 2913              // emit         c --
 359+ 2913                              Colon_Def EMIT, "EMIT", is_normal
 359+ 2913             >                New_Def  EMIT, "EMIT", Enter_Ptr, is_normal ; ok
 359+ 2913             >
 359+ 2913             >Dict_Ptr        defl    $
 359+ 2913             >
 359+ 2913             >//              ______________________________________________________________________
 359+ 2913             >//              Heap part
 359+ 2913             >
 359+ 2913             >
 359+ 2913             >                org     (Heap_Ptr & $1FFF) + $E000
 359+ E607             >
 359+ E607             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 359+ E607             >Latest_Definition defl  Heap_Ptr
 359+ E607             >
 359+ E607             >                // dummy db directives used to calculate length of namec
 359+ E607 45 4D 49 54 >                db      "EMIT"
 359+ E60B             >len_NFA         defl    $ - temp_NFA
 359+ E60B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 359+ E607             >
 359+ E607 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 359+ E608 45 4D 49 54 >                db      "EMIT"               // name string in 7-bit ascii, but
 359+ E60C             >                org     $-1                 // alter last byte of Name just above to set
 359+ E60B D4          >                db      {b $} | END_BIT     // msb as name end
 359+ E60C             >
 359+ E60C FE 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 359+ E60E             >Prev_Ptr        defl    Heap_Ptr
 359+ E60E             >
 359+ E60E             >mirror_Ptr      defl    $
 359+ E60E             >
 359+ E60E 15 29       >                dw      Dict_Ptr + 2        // xt
 359+ E610             >Heap_Ptr        defl    $ - $E000           // save current HP
 359+ E610             >
 359+ E610             >Current_HP      defl  $ - $E000             // used to set HP once!
 359+ E610             >
 359+ E610             >//              ______________________________________________________________________
 359+ E610             >//              Dictionary part
 359+ E610             >
 359+ E610             >                org     Dict_Ptr
 359+ 2913             >
 359+ 2913 0E 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 359+ 2915             >
 359+ 2915             >EMIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 359+ 2915 CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 359+ 2918             >
 359+ 2918             >
 359+ 2918             >                endif           ; ok        // for other definitions it "points" the correct handler
 359+ 2918             >                // Use of "; ok" to suppress "warning[fwdref]"
 359+ 2918             >
 359+ 2918             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 360+ 2918 6E 22                        dw      C_EMIT                      // (?emit)
 361+ 291A 05 29                        dw      QDUP                        // ?dup
 362+ 291C                                                                  // if
 363+ 291C 8F 20                        dw      ZBRANCH
 364+ 291E 0A 00                        dw      Emit_Skip - $
 365+ 2920 3C 22                        dw          EMITC                   //      emitc
 366+ 2922 3D 27                        dw          ONE                     //      1
 367+ 2924 E3 27 26 26                  dw          OUT, PLUSSTORE        //      out +!
 368+ 2928              Emit_Skip:                                          // endif
 369+ 2928 F4 24                        dw      EXIT                        // ;
 370+ 292A
 371+ 292A              //  ______________________________________________________________________
 372+ 292A              //
 373+ 292A              // space        --
 374+ 292A                              Colon_Def SPACE, "SPACE", is_normal
 374+ 292A             >                New_Def  SPACE, "SPACE", Enter_Ptr, is_normal ; ok
 374+ 292A             >
 374+ 292A             >Dict_Ptr        defl    $
 374+ 292A             >
 374+ 292A             >//              ______________________________________________________________________
 374+ 292A             >//              Heap part
 374+ 292A             >
 374+ 292A             >
 374+ 292A             >                org     (Heap_Ptr & $1FFF) + $E000
 374+ E610             >
 374+ E610             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 374+ E610             >Latest_Definition defl  Heap_Ptr
 374+ E610             >
 374+ E610             >                // dummy db directives used to calculate length of namec
 374+ E610 53 50 41 43 >                db      "SPACE"
 374+ E614 45          >
 374+ E615             >len_NFA         defl    $ - temp_NFA
 374+ E615             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 374+ E610             >
 374+ E610 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 374+ E611 53 50 41 43 >                db      "SPACE"               // name string in 7-bit ascii, but
 374+ E615 45          >
 374+ E616             >                org     $-1                 // alter last byte of Name just above to set
 374+ E615 C5          >                db      {b $} | END_BIT     // msb as name end
 374+ E616             >
 374+ E616 07 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 374+ E618             >Prev_Ptr        defl    Heap_Ptr
 374+ E618             >
 374+ E618             >mirror_Ptr      defl    $
 374+ E618             >
 374+ E618 2C 29       >                dw      Dict_Ptr + 2        // xt
 374+ E61A             >Heap_Ptr        defl    $ - $E000           // save current HP
 374+ E61A             >
 374+ E61A             >Current_HP      defl  $ - $E000             // used to set HP once!
 374+ E61A             >
 374+ E61A             >//              ______________________________________________________________________
 374+ E61A             >//              Dictionary part
 374+ E61A             >
 374+ E61A             >                org     Dict_Ptr
 374+ 292A             >
 374+ 292A 18 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 374+ 292C             >
 374+ 292C             >SPACE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 374+ 292C CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 374+ 292F             >
 374+ 292F             >
 374+ 292F             >                endif           ; ok        // for other definitions it "points" the correct handler
 374+ 292F             >                // Use of "; ok" to suppress "warning[fwdref]"
 374+ 292F             >
 374+ 292F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 375+ 292F 59 27 15 29                  dw      BL, EMIT                // bl emit
 376+ 2933 F4 24                        dw      EXIT                    // ;
 377+ 2935
 378+ 2935              //  ______________________________________________________________________
 379+ 2935              //
 380+ 2935              // traverse     a n -- a
 381+ 2935              // A dictionary entry is structured as follows
 382+ 2935              // NFA: +0   one byte of word-length (n<32) | some flags (immediate, smudge) | $80
 383+ 2935              //      +1   word name, last character is toggled with $80
 384+ 2935              // LFA: +1+n link to NFA ofprevious  dictionary entry.
 385+ 2935              // CFA: +3+n routine address. Colon definitions here have a CALL aa
 386+ 2935              // PFA: +6+n "is_code", definitions have no PFA. // +5
 387+ 2935              //
 388+ 2935                              Colon_Def TRAVERSE, "TRAVERSE", is_normal
 388+ 2935             >                New_Def  TRAVERSE, "TRAVERSE", Enter_Ptr, is_normal ; ok
 388+ 2935             >
 388+ 2935             >Dict_Ptr        defl    $
 388+ 2935             >
 388+ 2935             >//              ______________________________________________________________________
 388+ 2935             >//              Heap part
 388+ 2935             >
 388+ 2935             >
 388+ 2935             >                org     (Heap_Ptr & $1FFF) + $E000
 388+ E61A             >
 388+ E61A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 388+ E61A             >Latest_Definition defl  Heap_Ptr
 388+ E61A             >
 388+ E61A             >                // dummy db directives used to calculate length of namec
 388+ E61A 54 52 41 56 >                db      "TRAVERSE"
 388+ E61E 45 52 53 45 >
 388+ E622             >len_NFA         defl    $ - temp_NFA
 388+ E622             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 388+ E61A             >
 388+ E61A 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 388+ E61B 54 52 41 56 >                db      "TRAVERSE"               // name string in 7-bit ascii, but
 388+ E61F 45 52 53 45 >
 388+ E623             >                org     $-1                 // alter last byte of Name just above to set
 388+ E622 C5          >                db      {b $} | END_BIT     // msb as name end
 388+ E623             >
 388+ E623 10 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 388+ E625             >Prev_Ptr        defl    Heap_Ptr
 388+ E625             >
 388+ E625             >mirror_Ptr      defl    $
 388+ E625             >
 388+ E625 37 29       >                dw      Dict_Ptr + 2        // xt
 388+ E627             >Heap_Ptr        defl    $ - $E000           // save current HP
 388+ E627             >
 388+ E627             >Current_HP      defl  $ - $E000             // used to set HP once!
 388+ E627             >
 388+ E627             >//              ______________________________________________________________________
 388+ E627             >//              Dictionary part
 388+ E627             >
 388+ E627             >                org     Dict_Ptr
 388+ 2935             >
 388+ 2935 25 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 388+ 2937             >
 388+ 2937             >TRAVERSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 388+ 2937 CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 388+ 293A             >
 388+ 293A             >
 388+ 293A             >                endif           ; ok        // for other definitions it "points" the correct handler
 388+ 293A             >                // Use of "; ok" to suppress "warning[fwdref]"
 388+ 293A             >
 388+ 293A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 389+ 293A C6 25                        dw      SWAP                    // swap
 390+ 293C              Traverse_Begin:                                 // begin
 391+ 293C A9 25 47 25                  dw          OVER, PLUS          //      over +
 392+ 2940 3D 20 7F 00                  dw          LIT, 127            //      127
 393+ 2944 A9 25 53 26                  dw          OVER, CFETCH        //      over @
 394+ 2948 BF 28                        dw          LESS                //      <
 395+ 294A                                                              // until
 396+ 294A 8F 20                        dw      ZBRANCH
 397+ 294C F0 FF                        dw      Traverse_Begin - $
 398+ 294E B7 25                        dw      NIP                     //  nip
 399+ 2950 F4 24                        dw      EXIT                    //  ;
 400+ 2952
 401+ 2952              //  ______________________________________________________________________
 402+ 2952              //
 403+ 2952              // mmu7@        -- n
 404+ 2952              // query current page in MMU7 8K-RAM : 0 and 223
 405+ 2952
 406+ 2952                              New_Def MMU7_FETCH, "MMU7@", is_code, is_normal
 406+ 2952             >
 406+ 2952             >Dict_Ptr        defl    $
 406+ 2952             >
 406+ 2952             >//              ______________________________________________________________________
 406+ 2952             >//              Heap part
 406+ 2952             >
 406+ 2952             >
 406+ 2952             >                org     (Heap_Ptr & $1FFF) + $E000
 406+ E627             >
 406+ E627             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 406+ E627             >Latest_Definition defl  Heap_Ptr
 406+ E627             >
 406+ E627             >                // dummy db directives used to calculate length of namec
 406+ E627 4D 4D 55 37 >                db      "MMU7@"
 406+ E62B 40          >
 406+ E62C             >len_NFA         defl    $ - temp_NFA
 406+ E62C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 406+ E627             >
 406+ E627 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 406+ E628 4D 4D 55 37 >                db      "MMU7@"               // name string in 7-bit ascii, but
 406+ E62C 40          >
 406+ E62D             >                org     $-1                 // alter last byte of Name just above to set
 406+ E62C C0          >                db      {b $} | END_BIT     // msb as name end
 406+ E62D             >
 406+ E62D 1A 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 406+ E62F             >Prev_Ptr        defl    Heap_Ptr
 406+ E62F             >
 406+ E62F             >mirror_Ptr      defl    $
 406+ E62F             >
 406+ E62F 54 29       >                dw      Dict_Ptr + 2        // xt
 406+ E631             >Heap_Ptr        defl    $ - $E000           // save current HP
 406+ E631             >
 406+ E631             >Current_HP      defl  $ - $E000             // used to set HP once!
 406+ E631             >
 406+ E631             >//              ______________________________________________________________________
 406+ E631             >//              Dictionary part
 406+ E631             >
 406+ E631             >                org     Dict_Ptr
 406+ 2952             >
 406+ 2952 2F 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 406+ 2954             >
 406+ 2954             >MMU7_FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 406+ 2954 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 406+ 2954 ~           >
 406+ 2954 ~           >
 406+ 2954             >                endif           ; ok        // for other definitions it "points" the correct handler
 406+ 2954             >                // Use of "; ok" to suppress "warning[fwdref]"
 406+ 2954             >
 406+ 2954             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 407+ 2954 D9                           exx
 408+ 2955 CD 39 21                     call    MMU7_read
 409+ 2958 D9                           exx
 410+ 2959 6F                           ld      l, a
 411+ 295A 26 00                        ld      h, 0
 412+ 295C E5                           push    hl
 413+ 295D                              next
 413+ 295D DD E9       >                jp      (ix)
 414+ 295F
 415+ 295F              //  ______________________________________________________________________
 416+ 295F              //
 417+ 295F              // mmu7!        n --
 418+ 295F              // set MMU7 8K-RAM page to n given between 0 and 223
 419+ 295F              // optimized version that uses NEXTREG n,A Z80n op-code.
 420+ 295F
 421+ 295F                              New_Def MMU7_STORE, "MMU7!", is_code, is_normal
 421+ 295F             >
 421+ 295F             >Dict_Ptr        defl    $
 421+ 295F             >
 421+ 295F             >//              ______________________________________________________________________
 421+ 295F             >//              Heap part
 421+ 295F             >
 421+ 295F             >
 421+ 295F             >                org     (Heap_Ptr & $1FFF) + $E000
 421+ E631             >
 421+ E631             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 421+ E631             >Latest_Definition defl  Heap_Ptr
 421+ E631             >
 421+ E631             >                // dummy db directives used to calculate length of namec
 421+ E631 4D 4D 55 37 >                db      "MMU7!"
 421+ E635 21          >
 421+ E636             >len_NFA         defl    $ - temp_NFA
 421+ E636             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 421+ E631             >
 421+ E631 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 421+ E632 4D 4D 55 37 >                db      "MMU7!"               // name string in 7-bit ascii, but
 421+ E636 21          >
 421+ E637             >                org     $-1                 // alter last byte of Name just above to set
 421+ E636 A1          >                db      {b $} | END_BIT     // msb as name end
 421+ E637             >
 421+ E637 27 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 421+ E639             >Prev_Ptr        defl    Heap_Ptr
 421+ E639             >
 421+ E639             >mirror_Ptr      defl    $
 421+ E639             >
 421+ E639 61 29       >                dw      Dict_Ptr + 2        // xt
 421+ E63B             >Heap_Ptr        defl    $ - $E000           // save current HP
 421+ E63B             >
 421+ E63B             >Current_HP      defl  $ - $E000             // used to set HP once!
 421+ E63B             >
 421+ E63B             >//              ______________________________________________________________________
 421+ E63B             >//              Dictionary part
 421+ E63B             >
 421+ E63B             >                org     Dict_Ptr
 421+ 295F             >
 421+ 295F 39 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 421+ 2961             >
 421+ 2961             >MMU7_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 421+ 2961 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 421+ 2961 ~           >
 421+ 2961 ~           >
 421+ 2961             >                endif           ; ok        // for other definitions it "points" the correct handler
 421+ 2961             >                // Use of "; ok" to suppress "warning[fwdref]"
 421+ 2961             >
 421+ 2961             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 422+ 2961 E1                           pop     hl
 423+ 2962 7D                           ld      a, l
 424+ 2963 ED 92 57                     nextreg 87, a
 425+ 2966
 426+ 2966                              next
 426+ 2966 DD E9       >                jp      (ix)
 427+ 2968
 428+ 2968              //  ______________________________________________________________________
 429+ 2968              //
 430+ 2968              // >far         ha -- a n
 431+ 2968              // decode bits 765 of H as one of the 8K-page between 64 and 71 (40h-47h)
 432+ 2968              // take lower bits of H and L as an offset from E000h
 433+ 2968              // then return address  a  between E000h-FFFFh
 434+ 2968              // and page number n  between 64-71 (40h-47h)
 435+ 2968              // For example, in hex:
 436+ 2968              //   0000 >FAR  gives  40.E000
 437+ 2968              //   1FFF >FAR  gives  40.FFFF
 438+ 2968              //   2000 >FAR  gives  41.E000
 439+ 2968              //   3FFF >FAR  gives  41.FFFF
 440+ 2968              //   EFFF >FAR  gives  47.EFFF
 441+ 2968              //   FFFF >FAR  gives  47.FFFF
 442+ 2968                              New_Def TO_FAR, ">FAR", is_code, is_normal
 442+ 2968             >
 442+ 2968             >Dict_Ptr        defl    $
 442+ 2968             >
 442+ 2968             >//              ______________________________________________________________________
 442+ 2968             >//              Heap part
 442+ 2968             >
 442+ 2968             >
 442+ 2968             >                org     (Heap_Ptr & $1FFF) + $E000
 442+ E63B             >
 442+ E63B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 442+ E63B             >Latest_Definition defl  Heap_Ptr
 442+ E63B             >
 442+ E63B             >                // dummy db directives used to calculate length of namec
 442+ E63B 3E 46 41 52 >                db      ">FAR"
 442+ E63F             >len_NFA         defl    $ - temp_NFA
 442+ E63F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 442+ E63B             >
 442+ E63B 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 442+ E63C 3E 46 41 52 >                db      ">FAR"               // name string in 7-bit ascii, but
 442+ E640             >                org     $-1                 // alter last byte of Name just above to set
 442+ E63F D2          >                db      {b $} | END_BIT     // msb as name end
 442+ E640             >
 442+ E640 31 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 442+ E642             >Prev_Ptr        defl    Heap_Ptr
 442+ E642             >
 442+ E642             >mirror_Ptr      defl    $
 442+ E642             >
 442+ E642 6A 29       >                dw      Dict_Ptr + 2        // xt
 442+ E644             >Heap_Ptr        defl    $ - $E000           // save current HP
 442+ E644             >
 442+ E644             >Current_HP      defl  $ - $E000             // used to set HP once!
 442+ E644             >
 442+ E644             >//              ______________________________________________________________________
 442+ E644             >//              Dictionary part
 442+ E644             >
 442+ E644             >                org     Dict_Ptr
 442+ 2968             >
 442+ 2968 42 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 442+ 296A             >
 442+ 296A             >TO_FAR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 442+ 296A ~           >                call    runcode ; ok        // for primitive definitions  actual code
 442+ 296A ~           >
 442+ 296A ~           >
 442+ 296A             >                endif           ; ok        // for other definitions it "points" the correct handler
 442+ 296A             >                // Use of "; ok" to suppress "warning[fwdref]"
 442+ 296A             >
 442+ 296A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 443+ 296A E1                           pop     hl
 444+ 296B CD 44 21                     call    TO_FAR_rout
 445+ 296E E5                           push    hl
 446+ 296F 6F                           ld      l, a
 447+ 2970 26 00                        ld      h, 0
 448+ 2972 E5                           push    hl
 449+ 2973                              next
 449+ 2973 DD E9       >                jp      (ix)
 450+ 2975
 451+ 2975              //  ______________________________________________________________________
 452+ 2975              //
 453+ 2975              // <far         a n  -- ha
 454+ 2975              // given an address E000-FFFF and a page number n (64-71 or 40h-47h)
 455+ 2975              // reverse of >FAR: encodes a FAR address compressing
 456+ 2975              // to bits 765 of H, lower bits of HL address offset from E000h
 457+ 2975                              New_Def FROM_FAR, "<FAR", is_code, is_normal
 457+ 2975             >
 457+ 2975             >Dict_Ptr        defl    $
 457+ 2975             >
 457+ 2975             >//              ______________________________________________________________________
 457+ 2975             >//              Heap part
 457+ 2975             >
 457+ 2975             >
 457+ 2975             >                org     (Heap_Ptr & $1FFF) + $E000
 457+ E644             >
 457+ E644             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 457+ E644             >Latest_Definition defl  Heap_Ptr
 457+ E644             >
 457+ E644             >                // dummy db directives used to calculate length of namec
 457+ E644 3C 46 41 52 >                db      "<FAR"
 457+ E648             >len_NFA         defl    $ - temp_NFA
 457+ E648             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 457+ E644             >
 457+ E644 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 457+ E645 3C 46 41 52 >                db      "<FAR"               // name string in 7-bit ascii, but
 457+ E649             >                org     $-1                 // alter last byte of Name just above to set
 457+ E648 D2          >                db      {b $} | END_BIT     // msb as name end
 457+ E649             >
 457+ E649 3B 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 457+ E64B             >Prev_Ptr        defl    Heap_Ptr
 457+ E64B             >
 457+ E64B             >mirror_Ptr      defl    $
 457+ E64B             >
 457+ E64B 77 29       >                dw      Dict_Ptr + 2        // xt
 457+ E64D             >Heap_Ptr        defl    $ - $E000           // save current HP
 457+ E64D             >
 457+ E64D             >Current_HP      defl  $ - $E000             // used to set HP once!
 457+ E64D             >
 457+ E64D             >//              ______________________________________________________________________
 457+ E64D             >//              Dictionary part
 457+ E64D             >
 457+ E64D             >                org     Dict_Ptr
 457+ 2975             >
 457+ 2975 4B 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 457+ 2977             >
 457+ 2977             >FROM_FAR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 457+ 2977 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 457+ 2977 ~           >
 457+ 2977 ~           >
 457+ 2977             >                endif           ; ok        // for other definitions it "points" the correct handler
 457+ 2977             >                // Use of "; ok" to suppress "warning[fwdref]"
 457+ 2977             >
 457+ 2977             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 458+ 2977 E1                           pop     hl                  // page number in e
 459+ 2978 7D                           ld      a, l
 460+ 2979 E6 07                        and     07
 461+ 297B 0F                           rrca
 462+ 297C 0F                           rrca
 463+ 297D 0F                           rrca
 464+ 297E 08                           ex      af, af
 465+ 297F E1                           pop     hl                  // address in hl
 466+ 2980 7C                           ld      a, h
 467+ 2981 E6 1F                        and     $1F
 468+ 2983 67                           ld      h, a
 469+ 2984 08                           ex      af, af
 470+ 2985 B4                           or      h
 471+ 2986 67                           ld      h, a
 472+ 2987                              psh1
 472+ 2987 E5          >                push    hl
 472+ 2988 DD E9       >                jp      (ix)
 473+ 298A
 474+ 298A              //  ______________________________________________________________________
 475+ 298A              //
 476+ 298A              // ?IN_MMU7        a -- f
 477+ 298A              // query current page in MMU7 8K-RAM : 0 and 223
 478+ 298A                              Colon_Def QMMU7, "?IN_MMU7", is_normal
 478+ 298A             >                New_Def  QMMU7, "?IN_MMU7", Enter_Ptr, is_normal ; ok
 478+ 298A             >
 478+ 298A             >Dict_Ptr        defl    $
 478+ 298A             >
 478+ 298A             >//              ______________________________________________________________________
 478+ 298A             >//              Heap part
 478+ 298A             >
 478+ 298A             >
 478+ 298A             >                org     (Heap_Ptr & $1FFF) + $E000
 478+ E64D             >
 478+ E64D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 478+ E64D             >Latest_Definition defl  Heap_Ptr
 478+ E64D             >
 478+ E64D             >                // dummy db directives used to calculate length of namec
 478+ E64D 3F 49 4E 5F >                db      "?IN_MMU7"
 478+ E651 4D 4D 55 37 >
 478+ E655             >len_NFA         defl    $ - temp_NFA
 478+ E655             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 478+ E64D             >
 478+ E64D 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 478+ E64E 3F 49 4E 5F >                db      "?IN_MMU7"               // name string in 7-bit ascii, but
 478+ E652 4D 4D 55 37 >
 478+ E656             >                org     $-1                 // alter last byte of Name just above to set
 478+ E655 B7          >                db      {b $} | END_BIT     // msb as name end
 478+ E656             >
 478+ E656 44 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 478+ E658             >Prev_Ptr        defl    Heap_Ptr
 478+ E658             >
 478+ E658             >mirror_Ptr      defl    $
 478+ E658             >
 478+ E658 8C 29       >                dw      Dict_Ptr + 2        // xt
 478+ E65A             >Heap_Ptr        defl    $ - $E000           // save current HP
 478+ E65A             >
 478+ E65A             >Current_HP      defl  $ - $E000             // used to set HP once!
 478+ E65A             >
 478+ E65A             >//              ______________________________________________________________________
 478+ E65A             >//              Dictionary part
 478+ E65A             >
 478+ E65A             >                org     Dict_Ptr
 478+ 298A             >
 478+ 298A 58 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 478+ 298C             >
 478+ 298C             >QMMU7:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 478+ 298C CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 478+ 298F             >
 478+ 298F             >
 478+ 298F             >                endif           ; ok        // for other definitions it "points" the correct handler
 478+ 298F             >                // Use of "; ok" to suppress "warning[fwdref]"
 478+ 298F             >
 478+ 298F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 479+ 298F CD 25                        dw      DUP
 480+ 2991 3D 20 00 E0                  dw      LIT, $E000
 481+ 2995 B1 28                        dw      ULESS
 482+ 2997 27 25                        dw      NOT_OP
 483+ 2999 F4 24                        dw      EXIT
 484+ 299B
 485+ 299B              //  ______________________________________________________________________
 486+ 299B              //
 487+ 299B              // far          hp -- ha
 488+ 299B              // query current page in MMU7 8K-RAM : 0 and 223
 489+ 299B                              Colon_Def FAR, "FAR", is_normal
 489+ 299B             >                New_Def  FAR, "FAR", Enter_Ptr, is_normal ; ok
 489+ 299B             >
 489+ 299B             >Dict_Ptr        defl    $
 489+ 299B             >
 489+ 299B             >//              ______________________________________________________________________
 489+ 299B             >//              Heap part
 489+ 299B             >
 489+ 299B             >
 489+ 299B             >                org     (Heap_Ptr & $1FFF) + $E000
 489+ E65A             >
 489+ E65A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 489+ E65A             >Latest_Definition defl  Heap_Ptr
 489+ E65A             >
 489+ E65A             >                // dummy db directives used to calculate length of namec
 489+ E65A 46 41 52    >                db      "FAR"
 489+ E65D             >len_NFA         defl    $ - temp_NFA
 489+ E65D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 489+ E65A             >
 489+ E65A 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 489+ E65B 46 41 52    >                db      "FAR"               // name string in 7-bit ascii, but
 489+ E65E             >                org     $-1                 // alter last byte of Name just above to set
 489+ E65D D2          >                db      {b $} | END_BIT     // msb as name end
 489+ E65E             >
 489+ E65E 4D 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 489+ E660             >Prev_Ptr        defl    Heap_Ptr
 489+ E660             >
 489+ E660             >mirror_Ptr      defl    $
 489+ E660             >
 489+ E660 9D 29       >                dw      Dict_Ptr + 2        // xt
 489+ E662             >Heap_Ptr        defl    $ - $E000           // save current HP
 489+ E662             >
 489+ E662             >Current_HP      defl  $ - $E000             // used to set HP once!
 489+ E662             >
 489+ E662             >//              ______________________________________________________________________
 489+ E662             >//              Dictionary part
 489+ E662             >
 489+ E662             >                org     Dict_Ptr
 489+ 299B             >
 489+ 299B 60 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 489+ 299D             >
 489+ 299D             >FAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 489+ 299D CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 489+ 29A0             >
 489+ 29A0             >
 489+ 29A0             >                endif           ; ok        // for other definitions it "points" the correct handler
 489+ 29A0             >                // Use of "; ok" to suppress "warning[fwdref]"
 489+ 29A0             >
 489+ 29A0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 490+ 29A0 6A 29                        dw      TO_FAR
 491+ 29A2 61 29                        dw      MMU7_STORE
 492+ 29A4 F4 24                        dw      EXIT
 493+ 29A6
 494+ 29A6              //  ______________________________________________________________________
 495+ 29A6              //
 496+ 29A6              // ?HEAP_PTR       n -- n f
 497+ 29A6              // query current page in MMU7 8K-RAM : 0 and 223
 498+ 29A6                              Colon_Def QHEAPP, "?HEAP_PTR", is_normal
 498+ 29A6             >                New_Def  QHEAPP, "?HEAP_PTR", Enter_Ptr, is_normal ; ok
 498+ 29A6             >
 498+ 29A6             >Dict_Ptr        defl    $
 498+ 29A6             >
 498+ 29A6             >//              ______________________________________________________________________
 498+ 29A6             >//              Heap part
 498+ 29A6             >
 498+ 29A6             >
 498+ 29A6             >                org     (Heap_Ptr & $1FFF) + $E000
 498+ E662             >
 498+ E662             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 498+ E662             >Latest_Definition defl  Heap_Ptr
 498+ E662             >
 498+ E662             >                // dummy db directives used to calculate length of namec
 498+ E662 3F 48 45 41 >                db      "?HEAP_PTR"
 498+ E666 50 5F 50 54 >
 498+ E66A 52          >
 498+ E66B             >len_NFA         defl    $ - temp_NFA
 498+ E66B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 498+ E662             >
 498+ E662 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 498+ E663 3F 48 45 41 >                db      "?HEAP_PTR"               // name string in 7-bit ascii, but
 498+ E667 50 5F 50 54 >
 498+ E66B 52          >
 498+ E66C             >                org     $-1                 // alter last byte of Name just above to set
 498+ E66B D2          >                db      {b $} | END_BIT     // msb as name end
 498+ E66C             >
 498+ E66C 5A 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 498+ E66E             >Prev_Ptr        defl    Heap_Ptr
 498+ E66E             >
 498+ E66E             >mirror_Ptr      defl    $
 498+ E66E             >
 498+ E66E A8 29       >                dw      Dict_Ptr + 2        // xt
 498+ E670             >Heap_Ptr        defl    $ - $E000           // save current HP
 498+ E670             >
 498+ E670             >Current_HP      defl  $ - $E000             // used to set HP once!
 498+ E670             >
 498+ E670             >//              ______________________________________________________________________
 498+ E670             >//              Dictionary part
 498+ E670             >
 498+ E670             >                org     Dict_Ptr
 498+ 29A6             >
 498+ 29A6 6E 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 498+ 29A8             >
 498+ 29A8             >QHEAPP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 498+ 29A8 CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 498+ 29AB             >
 498+ 29AB             >
 498+ 29AB             >                endif           ; ok        // for other definitions it "points" the correct handler
 498+ 29AB             >                // Use of "; ok" to suppress "warning[fwdref]"
 498+ 29AB             >
 498+ 29AB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 499+ 29AB CD 25                        dw      DUP
 500+ 29AD 8F 20                        dw      ZBRANCH
 501+ 29AF 08 00                        dw      QHeap_Skip - $
 502+ 29B1 3D 20 00 60                  dw          LIT, $6000
 503+ 29B5 B1 28                        dw          ULESS
 504+ 29B7              QHeap_Skip:                                          // endif
 505+ 29B7 F4 24                        dw      EXIT                        // ;
 506+ 29B9
 507+ 29B9              //  ______________________________________________________________________
 508+ 29B9              //
 509+ 29B9              // ?>heap       n1 -- n2
 510+ 29B9              // query current page in MMU7 8K-RAM : 0 and 223
 511+ 29B9                              Colon_Def QTOHEAP, "?>HEAP", is_normal
 511+ 29B9             >                New_Def  QTOHEAP, "?>HEAP", Enter_Ptr, is_normal ; ok
 511+ 29B9             >
 511+ 29B9             >Dict_Ptr        defl    $
 511+ 29B9             >
 511+ 29B9             >//              ______________________________________________________________________
 511+ 29B9             >//              Heap part
 511+ 29B9             >
 511+ 29B9             >
 511+ 29B9             >                org     (Heap_Ptr & $1FFF) + $E000
 511+ E670             >
 511+ E670             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 511+ E670             >Latest_Definition defl  Heap_Ptr
 511+ E670             >
 511+ E670             >                // dummy db directives used to calculate length of namec
 511+ E670 3F 3E 48 45 >                db      "?>HEAP"
 511+ E674 41 50       >
 511+ E676             >len_NFA         defl    $ - temp_NFA
 511+ E676             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 511+ E670             >
 511+ E670 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 511+ E671 3F 3E 48 45 >                db      "?>HEAP"               // name string in 7-bit ascii, but
 511+ E675 41 50       >
 511+ E677             >                org     $-1                 // alter last byte of Name just above to set
 511+ E676 D0          >                db      {b $} | END_BIT     // msb as name end
 511+ E677             >
 511+ E677 62 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 511+ E679             >Prev_Ptr        defl    Heap_Ptr
 511+ E679             >
 511+ E679             >mirror_Ptr      defl    $
 511+ E679             >
 511+ E679 BB 29       >                dw      Dict_Ptr + 2        // xt
 511+ E67B             >Heap_Ptr        defl    $ - $E000           // save current HP
 511+ E67B             >
 511+ E67B             >Current_HP      defl  $ - $E000             // used to set HP once!
 511+ E67B             >
 511+ E67B             >//              ______________________________________________________________________
 511+ E67B             >//              Dictionary part
 511+ E67B             >
 511+ E67B             >                org     Dict_Ptr
 511+ 29B9             >
 511+ 29B9 79 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 511+ 29BB             >
 511+ 29BB             >QTOHEAP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 511+ 29BB CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 511+ 29BE             >
 511+ 29BE             >
 511+ 29BE             >                endif           ; ok        // for other definitions it "points" the correct handler
 511+ 29BE             >                // Use of "; ok" to suppress "warning[fwdref]"
 511+ 29BE             >
 511+ 29BE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 512+ 29BE CD 25                        dw      DUP
 513+ 29C0 A8 29                        dw      QHEAPP
 514+ 29C2 8F 20                        dw      ZBRANCH
 515+ 29C4 04 00                        dw      Q2Heap_Skip - $
 516+ 29C6 9D 29                        dw          FAR
 517+ 29C8              Q2Heap_Skip:                                          // endif
 518+ 29C8 F4 24                        dw      EXIT                        // ;
 519+ 29CA
 520+ 29CA              //  ______________________________________________________________________
 521+ 29CA              //
 522+ 29CA              // hp_fetch     -- a
 523+ 29CA                              Colon_Def HP_FETCH, "HP@", is_normal
 523+ 29CA             >                New_Def  HP_FETCH, "HP@", Enter_Ptr, is_normal ; ok
 523+ 29CA             >
 523+ 29CA             >Dict_Ptr        defl    $
 523+ 29CA             >
 523+ 29CA             >//              ______________________________________________________________________
 523+ 29CA             >//              Heap part
 523+ 29CA             >
 523+ 29CA             >
 523+ 29CA             >                org     (Heap_Ptr & $1FFF) + $E000
 523+ E67B             >
 523+ E67B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 523+ E67B             >Latest_Definition defl  Heap_Ptr
 523+ E67B             >
 523+ E67B             >                // dummy db directives used to calculate length of namec
 523+ E67B 48 50 40    >                db      "HP@"
 523+ E67E             >len_NFA         defl    $ - temp_NFA
 523+ E67E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 523+ E67B             >
 523+ E67B 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 523+ E67C 48 50 40    >                db      "HP@"               // name string in 7-bit ascii, but
 523+ E67F             >                org     $-1                 // alter last byte of Name just above to set
 523+ E67E C0          >                db      {b $} | END_BIT     // msb as name end
 523+ E67F             >
 523+ E67F 70 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 523+ E681             >Prev_Ptr        defl    Heap_Ptr
 523+ E681             >
 523+ E681             >mirror_Ptr      defl    $
 523+ E681             >
 523+ E681 CC 29       >                dw      Dict_Ptr + 2        // xt
 523+ E683             >Heap_Ptr        defl    $ - $E000           // save current HP
 523+ E683             >
 523+ E683             >Current_HP      defl  $ - $E000             // used to set HP once!
 523+ E683             >
 523+ E683             >//              ______________________________________________________________________
 523+ E683             >//              Dictionary part
 523+ E683             >
 523+ E683             >                org     Dict_Ptr
 523+ 29CA             >
 523+ 29CA 81 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 523+ 29CC             >
 523+ 29CC             >HP_FETCH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 523+ 29CC CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 523+ 29CF             >
 523+ 29CF             >
 523+ 29CF             >                endif           ; ok        // for other definitions it "points" the correct handler
 523+ 29CF             >                // Use of "; ok" to suppress "warning[fwdref]"
 523+ 29CF             >
 523+ 29CF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 524+ 29CF CB 27 3E 26                  dw      HP, FETCH               // hp @
 525+ 29D3 F4 24                        dw      EXIT                    // ;
 526+ 29D5
 527+ 29D5              //  ______________________________________________________________________
 528+ 29D5              //
 529+ 29D5              // page-watermark   -- n
 530+ 29D5              // number of buffers available. must be the difference between LIMIT and FIRST divided by 516
 531+ 29D5                              Constant_Def PAGE_WATERMARK,   "PAGE-WATERMARK", $1F80
 531+ 29D5             >                New_Def  PAGE_WATERMARK, "PAGE-WATERMARK", Constant_Ptr, is_normal
 531+ 29D5             >
 531+ 29D5             >Dict_Ptr        defl    $
 531+ 29D5             >
 531+ 29D5             >//              ______________________________________________________________________
 531+ 29D5             >//              Heap part
 531+ 29D5             >
 531+ 29D5             >
 531+ 29D5             >                org     (Heap_Ptr & $1FFF) + $E000
 531+ E683             >
 531+ E683             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 531+ E683             >Latest_Definition defl  Heap_Ptr
 531+ E683             >
 531+ E683             >                // dummy db directives used to calculate length of namec
 531+ E683 50 41 47 45 >                db      "PAGE-WATERMARK"
 531+ E687 2D 57 41 54 >
 531+ E68B 45 52 4D 41 >
 531+ E68F 52 4B       >
 531+ E691             >len_NFA         defl    $ - temp_NFA
 531+ E691             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 531+ E683             >
 531+ E683 8E          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 531+ E684 50 41 47 45 >                db      "PAGE-WATERMARK"               // name string in 7-bit ascii, but
 531+ E688 2D 57 41 54 >
 531+ E68C 45 52 4D 41 >
 531+ E690 52 4B       >
 531+ E692             >                org     $-1                 // alter last byte of Name just above to set
 531+ E691 CB          >                db      {b $} | END_BIT     // msb as name end
 531+ E692             >
 531+ E692 7B 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 531+ E694             >Prev_Ptr        defl    Heap_Ptr
 531+ E694             >
 531+ E694             >mirror_Ptr      defl    $
 531+ E694             >
 531+ E694 D7 29       >                dw      Dict_Ptr + 2        // xt
 531+ E696             >Heap_Ptr        defl    $ - $E000           // save current HP
 531+ E696             >
 531+ E696             >Current_HP      defl  $ - $E000             // used to set HP once!
 531+ E696             >
 531+ E696             >//              ______________________________________________________________________
 531+ E696             >//              Dictionary part
 531+ E696             >
 531+ E696             >                org     Dict_Ptr
 531+ 29D5             >
 531+ 29D5 94 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 531+ 29D7             >
 531+ 29D7             >PAGE_WATERMARK:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 531+ 29D7 CD 0A 27    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 531+ 29DA             >
 531+ 29DA             >
 531+ 29DA             >                endif           ; ok        // for other definitions it "points" the correct handler
 531+ 29DA             >                // Use of "; ok" to suppress "warning[fwdref]"
 531+ 29DA             >
 531+ 29DA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 531+ 29DA 80 1F       >                dw      $1F80
 532+ 29DC
 533+ 29DC              //  ______________________________________________________________________
 534+ 29DC              //
 535+ 29DC              // skip-hp-page ha -- a
 536+ 29DC                              Colon_Def SKIP_HP_PAGE, "SKIP-HP-PAGE", is_normal
 536+ 29DC             >                New_Def  SKIP_HP_PAGE, "SKIP-HP-PAGE", Enter_Ptr, is_normal ; ok
 536+ 29DC             >
 536+ 29DC             >Dict_Ptr        defl    $
 536+ 29DC             >
 536+ 29DC             >//              ______________________________________________________________________
 536+ 29DC             >//              Heap part
 536+ 29DC             >
 536+ 29DC             >
 536+ 29DC             >                org     (Heap_Ptr & $1FFF) + $E000
 536+ E696             >
 536+ E696             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 536+ E696             >Latest_Definition defl  Heap_Ptr
 536+ E696             >
 536+ E696             >                // dummy db directives used to calculate length of namec
 536+ E696 53 4B 49 50 >                db      "SKIP-HP-PAGE"
 536+ E69A 2D 48 50 2D >
 536+ E69E 50 41 47 45 >
 536+ E6A2             >len_NFA         defl    $ - temp_NFA
 536+ E6A2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 536+ E696             >
 536+ E696 8C          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 536+ E697 53 4B 49 50 >                db      "SKIP-HP-PAGE"               // name string in 7-bit ascii, but
 536+ E69B 2D 48 50 2D >
 536+ E69F 50 41 47 45 >
 536+ E6A3             >                org     $-1                 // alter last byte of Name just above to set
 536+ E6A2 C5          >                db      {b $} | END_BIT     // msb as name end
 536+ E6A3             >
 536+ E6A3 83 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 536+ E6A5             >Prev_Ptr        defl    Heap_Ptr
 536+ E6A5             >
 536+ E6A5             >mirror_Ptr      defl    $
 536+ E6A5             >
 536+ E6A5 DE 29       >                dw      Dict_Ptr + 2        // xt
 536+ E6A7             >Heap_Ptr        defl    $ - $E000           // save current HP
 536+ E6A7             >
 536+ E6A7             >Current_HP      defl  $ - $E000             // used to set HP once!
 536+ E6A7             >
 536+ E6A7             >//              ______________________________________________________________________
 536+ E6A7             >//              Dictionary part
 536+ E6A7             >
 536+ E6A7             >                org     Dict_Ptr
 536+ 29DC             >
 536+ 29DC A5 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 536+ 29DE             >
 536+ 29DE             >SKIP_HP_PAGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 536+ 29DE CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 536+ 29E1             >
 536+ 29E1             >
 536+ 29E1             >                endif           ; ok        // for other definitions it "points" the correct handler
 536+ 29E1             >                // Use of "; ok" to suppress "warning[fwdref]"
 536+ 29E1             >
 536+ 29E1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 537+ 29E1 CC 29                        dw      HP_FETCH                // hp@
 538+ 29E3 3D 20 FF 1F                  dw      LIT, $1FFF, AND_OP      // 1FFF and
 538+ 29E7 B4 24
 539+ 29E9 47 25                        dw      PLUS
 540+ 29EB D7 29                        dw      PAGE_WATERMARK
 541+ 29ED D4 28                        dw      GREATER
 542+ 29EF 8F 20                        dw      ZBRANCH
 543+ 29F1 12 00                        dw      Skip_Skip - $   // if
 544+ 29F3 CC 29                        dw      HP_FETCH
 545+ 29F5 3D 20 FF 1F                  dw      LIT, $1FFF, OR_OP
 545+ 29F9 C3 24
 546+ 29FB 60 25 6E 25                  dw      ONE_PLUS, TWO_PLUS
 547+ 29FF CB 27 48 26                  dw      HP, STORE
 548+ 2A03              Skip_Skip:
 549+ 2A03 F4 24                        dw      EXIT                    // ;
 550+ 2A05              //  ______________________________________________________________________
 551+ 2A05              //
 552+ 2A05              // latest       -- nfa
 553+ 2A05                              Colon_Def LATEST, "LATEST", is_normal
 553+ 2A05             >                New_Def  LATEST, "LATEST", Enter_Ptr, is_normal ; ok
 553+ 2A05             >
 553+ 2A05             >Dict_Ptr        defl    $
 553+ 2A05             >
 553+ 2A05             >//              ______________________________________________________________________
 553+ 2A05             >//              Heap part
 553+ 2A05             >
 553+ 2A05             >
 553+ 2A05             >                org     (Heap_Ptr & $1FFF) + $E000
 553+ E6A7             >
 553+ E6A7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 553+ E6A7             >Latest_Definition defl  Heap_Ptr
 553+ E6A7             >
 553+ E6A7             >                // dummy db directives used to calculate length of namec
 553+ E6A7 4C 41 54 45 >                db      "LATEST"
 553+ E6AB 53 54       >
 553+ E6AD             >len_NFA         defl    $ - temp_NFA
 553+ E6AD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 553+ E6A7             >
 553+ E6A7 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 553+ E6A8 4C 41 54 45 >                db      "LATEST"               // name string in 7-bit ascii, but
 553+ E6AC 53 54       >
 553+ E6AE             >                org     $-1                 // alter last byte of Name just above to set
 553+ E6AD D4          >                db      {b $} | END_BIT     // msb as name end
 553+ E6AE             >
 553+ E6AE 96 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 553+ E6B0             >Prev_Ptr        defl    Heap_Ptr
 553+ E6B0             >
 553+ E6B0             >mirror_Ptr      defl    $
 553+ E6B0             >
 553+ E6B0 07 2A       >                dw      Dict_Ptr + 2        // xt
 553+ E6B2             >Heap_Ptr        defl    $ - $E000           // save current HP
 553+ E6B2             >
 553+ E6B2             >Current_HP      defl  $ - $E000             // used to set HP once!
 553+ E6B2             >
 553+ E6B2             >//              ______________________________________________________________________
 553+ E6B2             >//              Dictionary part
 553+ E6B2             >
 553+ E6B2             >                org     Dict_Ptr
 553+ 2A05             >
 553+ 2A05 B0 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 553+ 2A07             >
 553+ 2A07             >LATEST:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 553+ 2A07 CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 553+ 2A0A             >
 553+ 2A0A             >
 553+ 2A0A             >                endif           ; ok        // for other definitions it "points" the correct handler
 553+ 2A0A             >                // Use of "; ok" to suppress "warning[fwdref]"
 553+ 2A0A             >
 553+ 2A0A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 554+ 2A0A FB 27                        dw      CURRENT                 // current
 555+ 2A0C 3E 26 3E 26                  dw      FETCH, FETCH            // @ @
 556+ 2A10 9D 29                        dw      FAR // Q TO HEAP
 557+ 2A12 F4 24                        dw      EXIT                    // ;
 558+ 2A14
 559+ 2A14              //  ______________________________________________________________________
 560+ 2A14              //
 561+ 2A14              // >body        cfa -- pfa
 562+ 2A14                              Colon_Def TO_BODY, ">BODY", is_normal
 562+ 2A14             >                New_Def  TO_BODY, ">BODY", Enter_Ptr, is_normal ; ok
 562+ 2A14             >
 562+ 2A14             >Dict_Ptr        defl    $
 562+ 2A14             >
 562+ 2A14             >//              ______________________________________________________________________
 562+ 2A14             >//              Heap part
 562+ 2A14             >
 562+ 2A14             >
 562+ 2A14             >                org     (Heap_Ptr & $1FFF) + $E000
 562+ E6B2             >
 562+ E6B2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 562+ E6B2             >Latest_Definition defl  Heap_Ptr
 562+ E6B2             >
 562+ E6B2             >                // dummy db directives used to calculate length of namec
 562+ E6B2 3E 42 4F 44 >                db      ">BODY"
 562+ E6B6 59          >
 562+ E6B7             >len_NFA         defl    $ - temp_NFA
 562+ E6B7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 562+ E6B2             >
 562+ E6B2 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 562+ E6B3 3E 42 4F 44 >                db      ">BODY"               // name string in 7-bit ascii, but
 562+ E6B7 59          >
 562+ E6B8             >                org     $-1                 // alter last byte of Name just above to set
 562+ E6B7 D9          >                db      {b $} | END_BIT     // msb as name end
 562+ E6B8             >
 562+ E6B8 A7 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 562+ E6BA             >Prev_Ptr        defl    Heap_Ptr
 562+ E6BA             >
 562+ E6BA             >mirror_Ptr      defl    $
 562+ E6BA             >
 562+ E6BA 16 2A       >                dw      Dict_Ptr + 2        // xt
 562+ E6BC             >Heap_Ptr        defl    $ - $E000           // save current HP
 562+ E6BC             >
 562+ E6BC             >Current_HP      defl  $ - $E000             // used to set HP once!
 562+ E6BC             >
 562+ E6BC             >//              ______________________________________________________________________
 562+ E6BC             >//              Dictionary part
 562+ E6BC             >
 562+ E6BC             >                org     Dict_Ptr
 562+ 2A14             >
 562+ 2A14 BA 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 562+ 2A16             >
 562+ 2A16             >TO_BODY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 562+ 2A16 CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 562+ 2A19             >
 562+ 2A19             >
 562+ 2A19             >                endif           ; ok        // for other definitions it "points" the correct handler
 562+ 2A19             >                // Use of "; ok" to suppress "warning[fwdref]"
 562+ 2A19             >
 562+ 2A19             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 563+ 2A19 4B 27 47 25                  dw      THREE, PLUS             // cell+ --> 3 +
 564+ 2A1D F4 24                        dw      EXIT                    // ;
 565+ 2A1F
 566+ 2A1F              //  ______________________________________________________________________
 567+ 2A1F              //
 568+ 2A1F              // <name        cfa -- nfa
 569+ 2A1F                              Colon_Def TO_NAME, "<NAME", is_normal
 569+ 2A1F             >                New_Def  TO_NAME, "<NAME", Enter_Ptr, is_normal ; ok
 569+ 2A1F             >
 569+ 2A1F             >Dict_Ptr        defl    $
 569+ 2A1F             >
 569+ 2A1F             >//              ______________________________________________________________________
 569+ 2A1F             >//              Heap part
 569+ 2A1F             >
 569+ 2A1F             >
 569+ 2A1F             >                org     (Heap_Ptr & $1FFF) + $E000
 569+ E6BC             >
 569+ E6BC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 569+ E6BC             >Latest_Definition defl  Heap_Ptr
 569+ E6BC             >
 569+ E6BC             >                // dummy db directives used to calculate length of namec
 569+ E6BC 3C 4E 41 4D >                db      "<NAME"
 569+ E6C0 45          >
 569+ E6C1             >len_NFA         defl    $ - temp_NFA
 569+ E6C1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 569+ E6BC             >
 569+ E6BC 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 569+ E6BD 3C 4E 41 4D >                db      "<NAME"               // name string in 7-bit ascii, but
 569+ E6C1 45          >
 569+ E6C2             >                org     $-1                 // alter last byte of Name just above to set
 569+ E6C1 C5          >                db      {b $} | END_BIT     // msb as name end
 569+ E6C2             >
 569+ E6C2 B2 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 569+ E6C4             >Prev_Ptr        defl    Heap_Ptr
 569+ E6C4             >
 569+ E6C4             >mirror_Ptr      defl    $
 569+ E6C4             >
 569+ E6C4 21 2A       >                dw      Dict_Ptr + 2        // xt
 569+ E6C6             >Heap_Ptr        defl    $ - $E000           // save current HP
 569+ E6C6             >
 569+ E6C6             >Current_HP      defl  $ - $E000             // used to set HP once!
 569+ E6C6             >
 569+ E6C6             >//              ______________________________________________________________________
 569+ E6C6             >//              Dictionary part
 569+ E6C6             >
 569+ E6C6             >                org     Dict_Ptr
 569+ 2A1F             >
 569+ 2A1F C4 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 569+ 2A21             >
 569+ 2A21             >TO_NAME:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 569+ 2A21 CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 569+ 2A24             >
 569+ 2A24             >
 569+ 2A24             >                endif           ; ok        // for other definitions it "points" the correct handler
 569+ 2A24             >                // Use of "; ok" to suppress "warning[fwdref]"
 569+ 2A24             >
 569+ 2A24             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 570+ 2A24 7B 25                        dw      CELL_MINUS              // cell-
 571+ 2A26 CD 25 3E 26                  dw      DUP, FETCH
 572+ 2A2A A8 29                        dw      QHEAPP
 573+ 2A2C 8F 20                        dw      ZBRANCH
 574+ 2A2E 08 00                        dw      ToName_Skip - $
 575+ 2A30 3E 26 9D 29                  dw          FETCH, FAR
 576+ 2A34 7B 25                        dw          CELL_MINUS
 577+ 2A36              ToName_Skip:                                    // endif
 578+ 2A36
 579+ 2A36 67 25                        dw      ONE_SUBTRACT            // 1-
 580+ 2A38 52 27                        dw      NEG_ONE                 // -1
 581+ 2A3A 37 29                        dw      TRAVERSE                // traverse
 582+ 2A3C F4 24                        dw      EXIT                    // ;
 583+ 2A3E
 584+ 2A3E              //  ______________________________________________________________________
 585+ 2A3E              //
 586+ 2A3E              // cfa          pfa -- cfa
 587+ 2A3E                              Colon_Def CFA, "CFA", is_normal
 587+ 2A3E             >                New_Def  CFA, "CFA", Enter_Ptr, is_normal ; ok
 587+ 2A3E             >
 587+ 2A3E             >Dict_Ptr        defl    $
 587+ 2A3E             >
 587+ 2A3E             >//              ______________________________________________________________________
 587+ 2A3E             >//              Heap part
 587+ 2A3E             >
 587+ 2A3E             >
 587+ 2A3E             >                org     (Heap_Ptr & $1FFF) + $E000
 587+ E6C6             >
 587+ E6C6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 587+ E6C6             >Latest_Definition defl  Heap_Ptr
 587+ E6C6             >
 587+ E6C6             >                // dummy db directives used to calculate length of namec
 587+ E6C6 43 46 41    >                db      "CFA"
 587+ E6C9             >len_NFA         defl    $ - temp_NFA
 587+ E6C9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 587+ E6C6             >
 587+ E6C6 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 587+ E6C7 43 46 41    >                db      "CFA"               // name string in 7-bit ascii, but
 587+ E6CA             >                org     $-1                 // alter last byte of Name just above to set
 587+ E6C9 C1          >                db      {b $} | END_BIT     // msb as name end
 587+ E6CA             >
 587+ E6CA BC 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 587+ E6CC             >Prev_Ptr        defl    Heap_Ptr
 587+ E6CC             >
 587+ E6CC             >mirror_Ptr      defl    $
 587+ E6CC             >
 587+ E6CC 40 2A       >                dw      Dict_Ptr + 2        // xt
 587+ E6CE             >Heap_Ptr        defl    $ - $E000           // save current HP
 587+ E6CE             >
 587+ E6CE             >Current_HP      defl  $ - $E000             // used to set HP once!
 587+ E6CE             >
 587+ E6CE             >//              ______________________________________________________________________
 587+ E6CE             >//              Dictionary part
 587+ E6CE             >
 587+ E6CE             >                org     Dict_Ptr
 587+ 2A3E             >
 587+ 2A3E CC 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 587+ 2A40             >
 587+ 2A40             >CFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 587+ 2A40 CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 587+ 2A43             >
 587+ 2A43             >
 587+ 2A43             >                endif           ; ok        // for other definitions it "points" the correct handler
 587+ 2A43             >                // Use of "; ok" to suppress "warning[fwdref]"
 587+ 2A43             >
 587+ 2A43             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 588+ 2A43 4B 27 9A 28                  dw      THREE, SUBTRACT         // 3 -
 589+ 2A47 F4 24                        dw      EXIT                    // ;
 590+ 2A49
 591+ 2A49              //  ______________________________________________________________________
 592+ 2A49              //
 593+ 2A49              // nfa          pfa -- nfa
 594+ 2A49                              Colon_Def NFA, "NFA", is_normal
 594+ 2A49             >                New_Def  NFA, "NFA", Enter_Ptr, is_normal ; ok
 594+ 2A49             >
 594+ 2A49             >Dict_Ptr        defl    $
 594+ 2A49             >
 594+ 2A49             >//              ______________________________________________________________________
 594+ 2A49             >//              Heap part
 594+ 2A49             >
 594+ 2A49             >
 594+ 2A49             >                org     (Heap_Ptr & $1FFF) + $E000
 594+ E6CE             >
 594+ E6CE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 594+ E6CE             >Latest_Definition defl  Heap_Ptr
 594+ E6CE             >
 594+ E6CE             >                // dummy db directives used to calculate length of namec
 594+ E6CE 4E 46 41    >                db      "NFA"
 594+ E6D1             >len_NFA         defl    $ - temp_NFA
 594+ E6D1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 594+ E6CE             >
 594+ E6CE 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 594+ E6CF 4E 46 41    >                db      "NFA"               // name string in 7-bit ascii, but
 594+ E6D2             >                org     $-1                 // alter last byte of Name just above to set
 594+ E6D1 C1          >                db      {b $} | END_BIT     // msb as name end
 594+ E6D2             >
 594+ E6D2 C6 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 594+ E6D4             >Prev_Ptr        defl    Heap_Ptr
 594+ E6D4             >
 594+ E6D4             >mirror_Ptr      defl    $
 594+ E6D4             >
 594+ E6D4 4B 2A       >                dw      Dict_Ptr + 2        // xt
 594+ E6D6             >Heap_Ptr        defl    $ - $E000           // save current HP
 594+ E6D6             >
 594+ E6D6             >Current_HP      defl  $ - $E000             // used to set HP once!
 594+ E6D6             >
 594+ E6D6             >//              ______________________________________________________________________
 594+ E6D6             >//              Dictionary part
 594+ E6D6             >
 594+ E6D6             >                org     Dict_Ptr
 594+ 2A49             >
 594+ 2A49 D4 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 594+ 2A4B             >
 594+ 2A4B             >NFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 594+ 2A4B CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 594+ 2A4E             >
 594+ 2A4E             >
 594+ 2A4E             >                endif           ; ok        // for other definitions it "points" the correct handler
 594+ 2A4E             >                // Use of "; ok" to suppress "warning[fwdref]"
 594+ 2A4E             >
 594+ 2A4E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 595+ 2A4E 40 2A                        dw      CFA                     // cfa
 596+ 2A50 21 2A                        dw      TO_NAME                 // traverse
 597+ 2A52 F4 24                        dw      EXIT                    // ;
 598+ 2A54
 599+ 2A54              //  ______________________________________________________________________
 600+ 2A54              //
 601+ 2A54              // lfa          pfa -- lfa
 602+ 2A54                              Colon_Def LFA, "LFA", is_normal
 602+ 2A54             >                New_Def  LFA, "LFA", Enter_Ptr, is_normal ; ok
 602+ 2A54             >
 602+ 2A54             >Dict_Ptr        defl    $
 602+ 2A54             >
 602+ 2A54             >//              ______________________________________________________________________
 602+ 2A54             >//              Heap part
 602+ 2A54             >
 602+ 2A54             >
 602+ 2A54             >                org     (Heap_Ptr & $1FFF) + $E000
 602+ E6D6             >
 602+ E6D6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 602+ E6D6             >Latest_Definition defl  Heap_Ptr
 602+ E6D6             >
 602+ E6D6             >                // dummy db directives used to calculate length of namec
 602+ E6D6 4C 46 41    >                db      "LFA"
 602+ E6D9             >len_NFA         defl    $ - temp_NFA
 602+ E6D9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 602+ E6D6             >
 602+ E6D6 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 602+ E6D7 4C 46 41    >                db      "LFA"               // name string in 7-bit ascii, but
 602+ E6DA             >                org     $-1                 // alter last byte of Name just above to set
 602+ E6D9 C1          >                db      {b $} | END_BIT     // msb as name end
 602+ E6DA             >
 602+ E6DA CE 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 602+ E6DC             >Prev_Ptr        defl    Heap_Ptr
 602+ E6DC             >
 602+ E6DC             >mirror_Ptr      defl    $
 602+ E6DC             >
 602+ E6DC 56 2A       >                dw      Dict_Ptr + 2        // xt
 602+ E6DE             >Heap_Ptr        defl    $ - $E000           // save current HP
 602+ E6DE             >
 602+ E6DE             >Current_HP      defl  $ - $E000             // used to set HP once!
 602+ E6DE             >
 602+ E6DE             >//              ______________________________________________________________________
 602+ E6DE             >//              Dictionary part
 602+ E6DE             >
 602+ E6DE             >                org     Dict_Ptr
 602+ 2A54             >
 602+ 2A54 DC 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 602+ 2A56             >
 602+ 2A56             >LFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 602+ 2A56 CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 602+ 2A59             >
 602+ 2A59             >
 602+ 2A59             >                endif           ; ok        // for other definitions it "points" the correct handler
 602+ 2A59             >                // Use of "; ok" to suppress "warning[fwdref]"
 602+ 2A59             >
 602+ 2A59             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 603+ 2A59 4B 2A                        dw      NFA                     // nfa
 604+ 2A5B 3D 27                        dw      ONE                     // 1
 605+ 2A5D 37 29                        dw      TRAVERSE                // traverse
 606+ 2A5F 60 25                        dw      ONE_PLUS                // 1+
 607+ 2A61 F4 24                        dw      EXIT                    // ;
 608+ 2A63
 609+ 2A63              //  ______________________________________________________________________
 610+ 2A63              //
 611+ 2A63              // pfa          nfa -- pfa
 612+ 2A63                              Colon_Def PFA, "PFA", is_normal
 612+ 2A63             >                New_Def  PFA, "PFA", Enter_Ptr, is_normal ; ok
 612+ 2A63             >
 612+ 2A63             >Dict_Ptr        defl    $
 612+ 2A63             >
 612+ 2A63             >//              ______________________________________________________________________
 612+ 2A63             >//              Heap part
 612+ 2A63             >
 612+ 2A63             >
 612+ 2A63             >                org     (Heap_Ptr & $1FFF) + $E000
 612+ E6DE             >
 612+ E6DE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 612+ E6DE             >Latest_Definition defl  Heap_Ptr
 612+ E6DE             >
 612+ E6DE             >                // dummy db directives used to calculate length of namec
 612+ E6DE 50 46 41    >                db      "PFA"
 612+ E6E1             >len_NFA         defl    $ - temp_NFA
 612+ E6E1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 612+ E6DE             >
 612+ E6DE 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 612+ E6DF 50 46 41    >                db      "PFA"               // name string in 7-bit ascii, but
 612+ E6E2             >                org     $-1                 // alter last byte of Name just above to set
 612+ E6E1 C1          >                db      {b $} | END_BIT     // msb as name end
 612+ E6E2             >
 612+ E6E2 D6 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 612+ E6E4             >Prev_Ptr        defl    Heap_Ptr
 612+ E6E4             >
 612+ E6E4             >mirror_Ptr      defl    $
 612+ E6E4             >
 612+ E6E4 65 2A       >                dw      Dict_Ptr + 2        // xt
 612+ E6E6             >Heap_Ptr        defl    $ - $E000           // save current HP
 612+ E6E6             >
 612+ E6E6             >Current_HP      defl  $ - $E000             // used to set HP once!
 612+ E6E6             >
 612+ E6E6             >//              ______________________________________________________________________
 612+ E6E6             >//              Dictionary part
 612+ E6E6             >
 612+ E6E6             >                org     Dict_Ptr
 612+ 2A63             >
 612+ 2A63 E4 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 612+ 2A65             >
 612+ 2A65             >PFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 612+ 2A65 CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 612+ 2A68             >
 612+ 2A68             >
 612+ 2A68             >                endif           ; ok        // for other definitions it "points" the correct handler
 612+ 2A68             >                // Use of "; ok" to suppress "warning[fwdref]"
 612+ 2A68             >
 612+ 2A68             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 613+ 2A68 BB 29                        dw      QTOHEAP
 614+ 2A6A 3D 27                        dw      ONE                     // 1
 615+ 2A6C 37 29                        dw      TRAVERSE                // traverse
 616+ 2A6E 60 25                        dw      ONE_PLUS                // 1+
 617+ 2A70 76 25                        dw      CELL_PLUS               // cell+
 618+ 2A72 8C 29                        dw      QMMU7
 619+ 2A74 8F 20                        dw      ZBRANCH
 620+ 2A76 0E 00                        dw      PFA_Skip - $
 621+ 2A78 54 29                        dw          MMU7_FETCH
 622+ 2A7A 3D 27 9A 28                  dw          ONE, SUBTRACT
 623+ 2A7E 8F 20                        dw          ZBRANCH
 624+ 2A80 04 00                        dw          PFA_Skip - $
 625+ 2A82 3E 26                        dw              FETCH
 626+ 2A84              PFA_Skip:                                    // endif
 627+ 2A84 16 2A                        dw      TO_BODY                 // >body
 628+ 2A86 F4 24                        dw      EXIT                    // ;
 629+ 2A88
 630+ 2A88              //  ______________________________________________________________________
 631+ 2A88              //
 632+ 2A88              // !csp         --
 633+ 2A88              // store in user variable CSP current value of SP. Used at compile-time for syntax checkng
 634+ 2A88                              Colon_Def STORE_CSP, "!CSP", is_normal
 634+ 2A88             >                New_Def  STORE_CSP, "!CSP", Enter_Ptr, is_normal ; ok
 634+ 2A88             >
 634+ 2A88             >Dict_Ptr        defl    $
 634+ 2A88             >
 634+ 2A88             >//              ______________________________________________________________________
 634+ 2A88             >//              Heap part
 634+ 2A88             >
 634+ 2A88             >
 634+ 2A88             >                org     (Heap_Ptr & $1FFF) + $E000
 634+ E6E6             >
 634+ E6E6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 634+ E6E6             >Latest_Definition defl  Heap_Ptr
 634+ E6E6             >
 634+ E6E6             >                // dummy db directives used to calculate length of namec
 634+ E6E6 21 43 53 50 >                db      "!CSP"
 634+ E6EA             >len_NFA         defl    $ - temp_NFA
 634+ E6EA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 634+ E6E6             >
 634+ E6E6 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 634+ E6E7 21 43 53 50 >                db      "!CSP"               // name string in 7-bit ascii, but
 634+ E6EB             >                org     $-1                 // alter last byte of Name just above to set
 634+ E6EA D0          >                db      {b $} | END_BIT     // msb as name end
 634+ E6EB             >
 634+ E6EB DE 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 634+ E6ED             >Prev_Ptr        defl    Heap_Ptr
 634+ E6ED             >
 634+ E6ED             >mirror_Ptr      defl    $
 634+ E6ED             >
 634+ E6ED 8A 2A       >                dw      Dict_Ptr + 2        // xt
 634+ E6EF             >Heap_Ptr        defl    $ - $E000           // save current HP
 634+ E6EF             >
 634+ E6EF             >Current_HP      defl  $ - $E000             // used to set HP once!
 634+ E6EF             >
 634+ E6EF             >//              ______________________________________________________________________
 634+ E6EF             >//              Dictionary part
 634+ E6EF             >
 634+ E6EF             >                org     Dict_Ptr
 634+ 2A88             >
 634+ 2A88 ED 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 634+ 2A8A             >
 634+ 2A8A             >STORE_CSP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 634+ 2A8A CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 634+ 2A8D             >
 634+ 2A8D             >
 634+ 2A8D             >                endif           ; ok        // for other definitions it "points" the correct handler
 634+ 2A8D             >                // Use of "; ok" to suppress "warning[fwdref]"
 634+ 2A8D             >
 634+ 2A8D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 635+ 2A8D DB 24                        dw      SPFETCH                 // sp@
 636+ 2A8F 19 28 48 26                  dw      CSP, STORE              // csp !
 637+ 2A93 F4 24                        dw      EXIT                    // ;
 638+ 2A95
 639+ 2A95              //  ______________________________________________________________________
 640+ 2A95              //
 641+ 2A95              // ?error       f n --
 642+ 2A95              // rase error n if flag f it true
 643+ 2A95                              Colon_Def QERROR, "?ERROR", is_normal
 643+ 2A95             >                New_Def  QERROR, "?ERROR", Enter_Ptr, is_normal ; ok
 643+ 2A95             >
 643+ 2A95             >Dict_Ptr        defl    $
 643+ 2A95             >
 643+ 2A95             >//              ______________________________________________________________________
 643+ 2A95             >//              Heap part
 643+ 2A95             >
 643+ 2A95             >
 643+ 2A95             >                org     (Heap_Ptr & $1FFF) + $E000
 643+ E6EF             >
 643+ E6EF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 643+ E6EF             >Latest_Definition defl  Heap_Ptr
 643+ E6EF             >
 643+ E6EF             >                // dummy db directives used to calculate length of namec
 643+ E6EF 3F 45 52 52 >                db      "?ERROR"
 643+ E6F3 4F 52       >
 643+ E6F5             >len_NFA         defl    $ - temp_NFA
 643+ E6F5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 643+ E6EF             >
 643+ E6EF 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 643+ E6F0 3F 45 52 52 >                db      "?ERROR"               // name string in 7-bit ascii, but
 643+ E6F4 4F 52       >
 643+ E6F6             >                org     $-1                 // alter last byte of Name just above to set
 643+ E6F5 D2          >                db      {b $} | END_BIT     // msb as name end
 643+ E6F6             >
 643+ E6F6 E6 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 643+ E6F8             >Prev_Ptr        defl    Heap_Ptr
 643+ E6F8             >
 643+ E6F8             >mirror_Ptr      defl    $
 643+ E6F8             >
 643+ E6F8 97 2A       >                dw      Dict_Ptr + 2        // xt
 643+ E6FA             >Heap_Ptr        defl    $ - $E000           // save current HP
 643+ E6FA             >
 643+ E6FA             >Current_HP      defl  $ - $E000             // used to set HP once!
 643+ E6FA             >
 643+ E6FA             >//              ______________________________________________________________________
 643+ E6FA             >//              Dictionary part
 643+ E6FA             >
 643+ E6FA             >                org     Dict_Ptr
 643+ 2A95             >
 643+ 2A95 F8 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 643+ 2A97             >
 643+ 2A97             >QERROR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 643+ 2A97 CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 643+ 2A9A             >
 643+ 2A9A             >
 643+ 2A9A             >                endif           ; ok        // for other definitions it "points" the correct handler
 643+ 2A9A             >                // Use of "; ok" to suppress "warning[fwdref]"
 643+ 2A9A             >
 643+ 2A9A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 644+ 2A9A C6 25                        dw      SWAP                    // swap
 645+ 2A9C                                                              // if
 646+ 2A9C 8F 20                        dw      ZBRANCH
 647+ 2A9E 08 00                        dw      QError_Else - $
 648+ 2AA0 CF 2F                        dw          ERROR               //      error  ( is a forward-ref )
 649+ 2AA2                                                              // else
 650+ 2AA2 82 20                        dw      BRANCH
 651+ 2AA4 04 00                        dw      QError_Endif - $
 652+ 2AA6              QError_Else:
 653+ 2AA6 B2 25                        dw          DROP                //      drop
 654+ 2AA8              QError_Endif:                                   // endif
 655+ 2AA8 F4 24                        dw      EXIT                    // ;
 656+ 2AAA
 657+ 2AAA              //  ______________________________________________________________________
 658+ 2AAA              //
 659+ 2AAA              // ?comp       --
 660+ 2AAA              // raise msg #17 if not compiling
 661+ 2AAA                              Colon_Def QCOMP, "?COMP", is_normal
 661+ 2AAA             >                New_Def  QCOMP, "?COMP", Enter_Ptr, is_normal ; ok
 661+ 2AAA             >
 661+ 2AAA             >Dict_Ptr        defl    $
 661+ 2AAA             >
 661+ 2AAA             >//              ______________________________________________________________________
 661+ 2AAA             >//              Heap part
 661+ 2AAA             >
 661+ 2AAA             >
 661+ 2AAA             >                org     (Heap_Ptr & $1FFF) + $E000
 661+ E6FA             >
 661+ E6FA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 661+ E6FA             >Latest_Definition defl  Heap_Ptr
 661+ E6FA             >
 661+ E6FA             >                // dummy db directives used to calculate length of namec
 661+ E6FA 3F 43 4F 4D >                db      "?COMP"
 661+ E6FE 50          >
 661+ E6FF             >len_NFA         defl    $ - temp_NFA
 661+ E6FF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 661+ E6FA             >
 661+ E6FA 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 661+ E6FB 3F 43 4F 4D >                db      "?COMP"               // name string in 7-bit ascii, but
 661+ E6FF 50          >
 661+ E700             >                org     $-1                 // alter last byte of Name just above to set
 661+ E6FF D0          >                db      {b $} | END_BIT     // msb as name end
 661+ E700             >
 661+ E700 EF 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 661+ E702             >Prev_Ptr        defl    Heap_Ptr
 661+ E702             >
 661+ E702             >mirror_Ptr      defl    $
 661+ E702             >
 661+ E702 AC 2A       >                dw      Dict_Ptr + 2        // xt
 661+ E704             >Heap_Ptr        defl    $ - $E000           // save current HP
 661+ E704             >
 661+ E704             >Current_HP      defl  $ - $E000             // used to set HP once!
 661+ E704             >
 661+ E704             >//              ______________________________________________________________________
 661+ E704             >//              Dictionary part
 661+ E704             >
 661+ E704             >                org     Dict_Ptr
 661+ 2AAA             >
 661+ 2AAA 02 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 661+ 2AAC             >
 661+ 2AAC             >QCOMP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 661+ 2AAC CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 661+ 2AAF             >
 661+ 2AAF             >
 661+ 2AAF             >                endif           ; ok        // for other definitions it "points" the correct handler
 661+ 2AAF             >                // Use of "; ok" to suppress "warning[fwdref]"
 661+ 2AAF             >
 661+ 2AAF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 662+ 2AAF 01 28 3E 26                  dw      STATE, FETCH            // state @
 663+ 2AB3 19 25                        dw      ZEQUAL                  // 0=
 664+ 2AB5 3D 20 11 00                  dw      LIT, 17                 // 17  ( can't be executed )
 665+ 2AB9 97 2A                        dw      QERROR                  // ?error
 666+ 2ABB F4 24                        dw      EXIT                    // ;
 667+ 2ABD
 668+ 2ABD              //  ______________________________________________________________________
 669+ 2ABD              //
 670+ 2ABD              // ?exec       --
 671+ 2ABD              // raise msg #18 if compiling
 672+ 2ABD                              Colon_Def QEXEC, "?EXEC", is_normal
 672+ 2ABD             >                New_Def  QEXEC, "?EXEC", Enter_Ptr, is_normal ; ok
 672+ 2ABD             >
 672+ 2ABD             >Dict_Ptr        defl    $
 672+ 2ABD             >
 672+ 2ABD             >//              ______________________________________________________________________
 672+ 2ABD             >//              Heap part
 672+ 2ABD             >
 672+ 2ABD             >
 672+ 2ABD             >                org     (Heap_Ptr & $1FFF) + $E000
 672+ E704             >
 672+ E704             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 672+ E704             >Latest_Definition defl  Heap_Ptr
 672+ E704             >
 672+ E704             >                // dummy db directives used to calculate length of namec
 672+ E704 3F 45 58 45 >                db      "?EXEC"
 672+ E708 43          >
 672+ E709             >len_NFA         defl    $ - temp_NFA
 672+ E709             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 672+ E704             >
 672+ E704 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 672+ E705 3F 45 58 45 >                db      "?EXEC"               // name string in 7-bit ascii, but
 672+ E709 43          >
 672+ E70A             >                org     $-1                 // alter last byte of Name just above to set
 672+ E709 C3          >                db      {b $} | END_BIT     // msb as name end
 672+ E70A             >
 672+ E70A FA 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 672+ E70C             >Prev_Ptr        defl    Heap_Ptr
 672+ E70C             >
 672+ E70C             >mirror_Ptr      defl    $
 672+ E70C             >
 672+ E70C BF 2A       >                dw      Dict_Ptr + 2        // xt
 672+ E70E             >Heap_Ptr        defl    $ - $E000           // save current HP
 672+ E70E             >
 672+ E70E             >Current_HP      defl  $ - $E000             // used to set HP once!
 672+ E70E             >
 672+ E70E             >//              ______________________________________________________________________
 672+ E70E             >//              Dictionary part
 672+ E70E             >
 672+ E70E             >                org     Dict_Ptr
 672+ 2ABD             >
 672+ 2ABD 0C 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 672+ 2ABF             >
 672+ 2ABF             >QEXEC:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 672+ 2ABF CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 672+ 2AC2             >
 672+ 2AC2             >
 672+ 2AC2             >                endif           ; ok        // for other definitions it "points" the correct handler
 672+ 2AC2             >                // Use of "; ok" to suppress "warning[fwdref]"
 672+ 2AC2             >
 672+ 2AC2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 673+ 2AC2 01 28 3E 26                  dw      STATE, FETCH            // state @
 674+ 2AC6 3D 20 12 00                  dw      LIT, 18                 // 18  ( can't be compiled )
 675+ 2ACA 97 2A                        dw      QERROR                  // ?error
 676+ 2ACC F4 24                        dw      EXIT                    // ;
 677+ 2ACE
 678+ 2ACE              //  ______________________________________________________________________
 679+ 2ACE              //
 680+ 2ACE              // ?pairs       n1 n2 --
 681+ 2ACE              // raise msg #19 if n1 != n2. Compiler pushes some placeholder to stack for syntax checking
 682+ 2ACE                              Colon_Def QPAIRS, "?PAIRS", is_normal
 682+ 2ACE             >                New_Def  QPAIRS, "?PAIRS", Enter_Ptr, is_normal ; ok
 682+ 2ACE             >
 682+ 2ACE             >Dict_Ptr        defl    $
 682+ 2ACE             >
 682+ 2ACE             >//              ______________________________________________________________________
 682+ 2ACE             >//              Heap part
 682+ 2ACE             >
 682+ 2ACE             >
 682+ 2ACE             >                org     (Heap_Ptr & $1FFF) + $E000
 682+ E70E             >
 682+ E70E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 682+ E70E             >Latest_Definition defl  Heap_Ptr
 682+ E70E             >
 682+ E70E             >                // dummy db directives used to calculate length of namec
 682+ E70E 3F 50 41 49 >                db      "?PAIRS"
 682+ E712 52 53       >
 682+ E714             >len_NFA         defl    $ - temp_NFA
 682+ E714             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 682+ E70E             >
 682+ E70E 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 682+ E70F 3F 50 41 49 >                db      "?PAIRS"               // name string in 7-bit ascii, but
 682+ E713 52 53       >
 682+ E715             >                org     $-1                 // alter last byte of Name just above to set
 682+ E714 D3          >                db      {b $} | END_BIT     // msb as name end
 682+ E715             >
 682+ E715 04 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 682+ E717             >Prev_Ptr        defl    Heap_Ptr
 682+ E717             >
 682+ E717             >mirror_Ptr      defl    $
 682+ E717             >
 682+ E717 D0 2A       >                dw      Dict_Ptr + 2        // xt
 682+ E719             >Heap_Ptr        defl    $ - $E000           // save current HP
 682+ E719             >
 682+ E719             >Current_HP      defl  $ - $E000             // used to set HP once!
 682+ E719             >
 682+ E719             >//              ______________________________________________________________________
 682+ E719             >//              Dictionary part
 682+ E719             >
 682+ E719             >                org     Dict_Ptr
 682+ 2ACE             >
 682+ 2ACE 17 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 682+ 2AD0             >
 682+ 2AD0             >QPAIRS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 682+ 2AD0 CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 682+ 2AD3             >
 682+ 2AD3             >
 682+ 2AD3             >                endif           ; ok        // for other definitions it "points" the correct handler
 682+ 2AD3             >                // Use of "; ok" to suppress "warning[fwdref]"
 682+ 2AD3             >
 682+ 2AD3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 683+ 2AD3 9A 28                        dw      SUBTRACT                // -
 684+ 2AD5 3D 20 13 00                  dw      LIT, 19                 // 18  ( syntax error )
 685+ 2AD9 97 2A                        dw      QERROR                  // ?error
 686+ 2ADB F4 24                        dw      EXIT                    // ;
 687+ 2ADD
 688+ 2ADD              //  ______________________________________________________________________
 689+ 2ADD              //
 690+ 2ADD              // ?csp       --
 691+ 2ADD              // raise msg #20 if surrent SP in not what previously saved in CSP.
 692+ 2ADD              // Compiler relies on that for  syntax checking of structures
 693+ 2ADD                              Colon_Def QCSP, "?CSP", is_normal
 693+ 2ADD             >                New_Def  QCSP, "?CSP", Enter_Ptr, is_normal ; ok
 693+ 2ADD             >
 693+ 2ADD             >Dict_Ptr        defl    $
 693+ 2ADD             >
 693+ 2ADD             >//              ______________________________________________________________________
 693+ 2ADD             >//              Heap part
 693+ 2ADD             >
 693+ 2ADD             >
 693+ 2ADD             >                org     (Heap_Ptr & $1FFF) + $E000
 693+ E719             >
 693+ E719             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 693+ E719             >Latest_Definition defl  Heap_Ptr
 693+ E719             >
 693+ E719             >                // dummy db directives used to calculate length of namec
 693+ E719 3F 43 53 50 >                db      "?CSP"
 693+ E71D             >len_NFA         defl    $ - temp_NFA
 693+ E71D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 693+ E719             >
 693+ E719 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 693+ E71A 3F 43 53 50 >                db      "?CSP"               // name string in 7-bit ascii, but
 693+ E71E             >                org     $-1                 // alter last byte of Name just above to set
 693+ E71D D0          >                db      {b $} | END_BIT     // msb as name end
 693+ E71E             >
 693+ E71E 0E 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 693+ E720             >Prev_Ptr        defl    Heap_Ptr
 693+ E720             >
 693+ E720             >mirror_Ptr      defl    $
 693+ E720             >
 693+ E720 DF 2A       >                dw      Dict_Ptr + 2        // xt
 693+ E722             >Heap_Ptr        defl    $ - $E000           // save current HP
 693+ E722             >
 693+ E722             >Current_HP      defl  $ - $E000             // used to set HP once!
 693+ E722             >
 693+ E722             >//              ______________________________________________________________________
 693+ E722             >//              Dictionary part
 693+ E722             >
 693+ E722             >                org     Dict_Ptr
 693+ 2ADD             >
 693+ 2ADD 20 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 693+ 2ADF             >
 693+ 2ADF             >QCSP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 693+ 2ADF CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 693+ 2AE2             >
 693+ 2AE2             >
 693+ 2AE2             >                endif           ; ok        // for other definitions it "points" the correct handler
 693+ 2AE2             >                // Use of "; ok" to suppress "warning[fwdref]"
 693+ 2AE2             >
 693+ 2AE2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 694+ 2AE2 DB 24                        dw      SPFETCH                 // sp@
 695+ 2AE4 19 28 3E 26                  dw      CSP, FETCH              // csp @
 696+ 2AE8 9A 28                        dw      SUBTRACT                // -
 697+ 2AEA 3D 20 14 00                  dw      LIT, 20                 // 20  ( bad definition end )
 698+ 2AEE 97 2A                        dw      QERROR                  // ?error
 699+ 2AF0 F4 24                        dw      EXIT                    // ;
 700+ 2AF2
 701+ 2AF2              //  ______________________________________________________________________
 702+ 2AF2              //
 703+ 2AF2              // ?loading      --
 704+ 2AF2              // raise msg #22 if not loading
 705+ 2AF2                              Colon_Def QLOADING, "?LOADING", is_normal
 705+ 2AF2             >                New_Def  QLOADING, "?LOADING", Enter_Ptr, is_normal ; ok
 705+ 2AF2             >
 705+ 2AF2             >Dict_Ptr        defl    $
 705+ 2AF2             >
 705+ 2AF2             >//              ______________________________________________________________________
 705+ 2AF2             >//              Heap part
 705+ 2AF2             >
 705+ 2AF2             >
 705+ 2AF2             >                org     (Heap_Ptr & $1FFF) + $E000
 705+ E722             >
 705+ E722             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 705+ E722             >Latest_Definition defl  Heap_Ptr
 705+ E722             >
 705+ E722             >                // dummy db directives used to calculate length of namec
 705+ E722 3F 4C 4F 41 >                db      "?LOADING"
 705+ E726 44 49 4E 47 >
 705+ E72A             >len_NFA         defl    $ - temp_NFA
 705+ E72A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 705+ E722             >
 705+ E722 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 705+ E723 3F 4C 4F 41 >                db      "?LOADING"               // name string in 7-bit ascii, but
 705+ E727 44 49 4E 47 >
 705+ E72B             >                org     $-1                 // alter last byte of Name just above to set
 705+ E72A C7          >                db      {b $} | END_BIT     // msb as name end
 705+ E72B             >
 705+ E72B 19 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 705+ E72D             >Prev_Ptr        defl    Heap_Ptr
 705+ E72D             >
 705+ E72D             >mirror_Ptr      defl    $
 705+ E72D             >
 705+ E72D F4 2A       >                dw      Dict_Ptr + 2        // xt
 705+ E72F             >Heap_Ptr        defl    $ - $E000           // save current HP
 705+ E72F             >
 705+ E72F             >Current_HP      defl  $ - $E000             // used to set HP once!
 705+ E72F             >
 705+ E72F             >//              ______________________________________________________________________
 705+ E72F             >//              Dictionary part
 705+ E72F             >
 705+ E72F             >                org     Dict_Ptr
 705+ 2AF2             >
 705+ 2AF2 2D 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 705+ 2AF4             >
 705+ 2AF4             >QLOADING:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 705+ 2AF4 CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 705+ 2AF7             >
 705+ 2AF7             >
 705+ 2AF7             >                endif           ; ok        // for other definitions it "points" the correct handler
 705+ 2AF7             >                // Use of "; ok" to suppress "warning[fwdref]"
 705+ 2AF7             >
 705+ 2AF7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 706+ 2AF7 D7 27 3E 26                  dw      BLK, FETCH              // blk @
 707+ 2AFB 19 25                        dw      ZEQUAL                  // 0=
 708+ 2AFD 3D 20 16 00                  dw      LIT, 22                 // 22  ( aren't loading now )
 709+ 2B01 97 2A                        dw      QERROR                  // ?error
 710+ 2B03 F4 24                        dw      EXIT                    // ;
 711+ 2B05
 712+ 2B05              //  ______________________________________________________________________
 713+ 2B05              //
 714+ 2B05              // compile      --
 715+ 2B05              // compiles the following word
 716+ 2B05                              Colon_Def COMPILE, "COMPILE", is_normal
 716+ 2B05             >                New_Def  COMPILE, "COMPILE", Enter_Ptr, is_normal ; ok
 716+ 2B05             >
 716+ 2B05             >Dict_Ptr        defl    $
 716+ 2B05             >
 716+ 2B05             >//              ______________________________________________________________________
 716+ 2B05             >//              Heap part
 716+ 2B05             >
 716+ 2B05             >
 716+ 2B05             >                org     (Heap_Ptr & $1FFF) + $E000
 716+ E72F             >
 716+ E72F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 716+ E72F             >Latest_Definition defl  Heap_Ptr
 716+ E72F             >
 716+ E72F             >                // dummy db directives used to calculate length of namec
 716+ E72F 43 4F 4D 50 >                db      "COMPILE"
 716+ E733 49 4C 45    >
 716+ E736             >len_NFA         defl    $ - temp_NFA
 716+ E736             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 716+ E72F             >
 716+ E72F 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 716+ E730 43 4F 4D 50 >                db      "COMPILE"               // name string in 7-bit ascii, but
 716+ E734 49 4C 45    >
 716+ E737             >                org     $-1                 // alter last byte of Name just above to set
 716+ E736 C5          >                db      {b $} | END_BIT     // msb as name end
 716+ E737             >
 716+ E737 22 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 716+ E739             >Prev_Ptr        defl    Heap_Ptr
 716+ E739             >
 716+ E739             >mirror_Ptr      defl    $
 716+ E739             >
 716+ E739 07 2B       >                dw      Dict_Ptr + 2        // xt
 716+ E73B             >Heap_Ptr        defl    $ - $E000           // save current HP
 716+ E73B             >
 716+ E73B             >Current_HP      defl  $ - $E000             // used to set HP once!
 716+ E73B             >
 716+ E73B             >//              ______________________________________________________________________
 716+ E73B             >//              Dictionary part
 716+ E73B             >
 716+ E73B             >                org     Dict_Ptr
 716+ 2B05             >
 716+ 2B05 39 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 716+ 2B07             >
 716+ 2B07             >COMPILE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 716+ 2B07 CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 716+ 2B0A             >
 716+ 2B0A             >
 716+ 2B0A             >                endif           ; ok        // for other definitions it "points" the correct handler
 716+ 2B0A             >                // Use of "; ok" to suppress "warning[fwdref]"
 716+ 2B0A             >
 716+ 2B0A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 717+ 2B0A AC 2A                        dw      QCOMP                   // ?comp
 718+ 2B0C 09 25                        dw      R_TO                    // r>
 719+ 2B0E CD 25 76 25                  dw      DUP, CELL_PLUS          // dup, cell+
 720+ 2B12 FE 24                        dw      TO_R                    // >r
 721+ 2B14 3E 26 71 28                  dw      FETCH, COMMA            // @ ,
 722+ 2B18 F4 24                        dw      EXIT                    // ;
 723+ 2B1A
 724+ 2B1A              //  ______________________________________________________________________
 725+ 2B1A              //
 726+ 2B1A              // compile,     --
 727+ 2B1A              // compiles the following word
 728+ 2B1A                              Colon_Def COMPILE_XT, "COMPILE,", is_normal
 728+ 2B1A             >                New_Def  COMPILE_XT, "COMPILE,", Enter_Ptr, is_normal ; ok
 728+ 2B1A             >
 728+ 2B1A             >Dict_Ptr        defl    $
 728+ 2B1A             >
 728+ 2B1A             >//              ______________________________________________________________________
 728+ 2B1A             >//              Heap part
 728+ 2B1A             >
 728+ 2B1A             >
 728+ 2B1A             >                org     (Heap_Ptr & $1FFF) + $E000
 728+ E73B             >
 728+ E73B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 728+ E73B             >Latest_Definition defl  Heap_Ptr
 728+ E73B             >
 728+ E73B             >                // dummy db directives used to calculate length of namec
 728+ E73B 43 4F 4D 50 >                db      "COMPILE,"
 728+ E73F 49 4C 45 2C >
 728+ E743             >len_NFA         defl    $ - temp_NFA
 728+ E743             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 728+ E73B             >
 728+ E73B 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 728+ E73C 43 4F 4D 50 >                db      "COMPILE,"               // name string in 7-bit ascii, but
 728+ E740 49 4C 45 2C >
 728+ E744             >                org     $-1                 // alter last byte of Name just above to set
 728+ E743 AC          >                db      {b $} | END_BIT     // msb as name end
 728+ E744             >
 728+ E744 2F 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 728+ E746             >Prev_Ptr        defl    Heap_Ptr
 728+ E746             >
 728+ E746             >mirror_Ptr      defl    $
 728+ E746             >
 728+ E746 1C 2B       >                dw      Dict_Ptr + 2        // xt
 728+ E748             >Heap_Ptr        defl    $ - $E000           // save current HP
 728+ E748             >
 728+ E748             >Current_HP      defl  $ - $E000             // used to set HP once!
 728+ E748             >
 728+ E748             >//              ______________________________________________________________________
 728+ E748             >//              Dictionary part
 728+ E748             >
 728+ E748             >                org     Dict_Ptr
 728+ 2B1A             >
 728+ 2B1A 46 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 728+ 2B1C             >
 728+ 2B1C             >COMPILE_XT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 728+ 2B1C CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 728+ 2B1F             >
 728+ 2B1F             >
 728+ 2B1F             >                endif           ; ok        // for other definitions it "points" the correct handler
 728+ 2B1F             >                // Use of "; ok" to suppress "warning[fwdref]"
 728+ 2B1F             >
 728+ 2B1F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 729+ 2B1F AC 2A                        dw      QCOMP                   // ?comp
 730+ 2B21 71 28                        dw      COMMA                   // ,
 731+ 2B23 F4 24                        dw      EXIT                    // ;
 732+ 2B25
 733+ 2B25              //  ______________________________________________________________________
 734+ 2B25              //
 735+ 2B25              // [            --
 736+ 2B25              // stop compilation
 737+ 2B25                              Colon_Def SQUARED_OPEN, "[", is_immediate
 737+ 2B25             >                New_Def  SQUARED_OPEN, "[", Enter_Ptr, is_immediate ; ok
 737+ 2B25             >
 737+ 2B25             >Dict_Ptr        defl    $
 737+ 2B25             >
 737+ 2B25             >//              ______________________________________________________________________
 737+ 2B25             >//              Heap part
 737+ 2B25             >
 737+ 2B25             >
 737+ 2B25             >                org     (Heap_Ptr & $1FFF) + $E000
 737+ E748             >
 737+ E748             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 737+ E748             >Latest_Definition defl  Heap_Ptr
 737+ E748             >
 737+ E748             >                // dummy db directives used to calculate length of namec
 737+ E748 5B          >                db      "["
 737+ E749             >len_NFA         defl    $ - temp_NFA
 737+ E749             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 737+ E748             >
 737+ E748 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 737+ E749 5B          >                db      "["               // name string in 7-bit ascii, but
 737+ E74A             >                org     $-1                 // alter last byte of Name just above to set
 737+ E749 DB          >                db      {b $} | END_BIT     // msb as name end
 737+ E74A             >
 737+ E74A 3B 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 737+ E74C             >Prev_Ptr        defl    Heap_Ptr
 737+ E74C             >
 737+ E74C             >mirror_Ptr      defl    $
 737+ E74C             >
 737+ E74C 27 2B       >                dw      Dict_Ptr + 2        // xt
 737+ E74E             >Heap_Ptr        defl    $ - $E000           // save current HP
 737+ E74E             >
 737+ E74E             >Current_HP      defl  $ - $E000             // used to set HP once!
 737+ E74E             >
 737+ E74E             >//              ______________________________________________________________________
 737+ E74E             >//              Dictionary part
 737+ E74E             >
 737+ E74E             >                org     Dict_Ptr
 737+ 2B25             >
 737+ 2B25 4C 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 737+ 2B27             >
 737+ 2B27             >SQUARED_OPEN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 737+ 2B27 CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 737+ 2B2A             >
 737+ 2B2A             >
 737+ 2B2A             >                endif           ; ok        // for other definitions it "points" the correct handler
 737+ 2B2A             >                // Use of "; ok" to suppress "warning[fwdref]"
 737+ 2B2A             >
 737+ 2B2A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 738+ 2B2A 36 27                        dw      ZERO                    // 0
 739+ 2B2C 01 28 48 26                  dw      STATE, STORE            // state !
 740+ 2B30 F4 24                        dw      EXIT                    // ; immediate
 741+ 2B32
 742+ 2B32              //  ______________________________________________________________________
 743+ 2B32              //
 744+ 2B32              // ]            --
 745+ 2B32              // start compilation
 746+ 2B32                              Colon_Def SQUARED_CLOSE, "]", is_normal
 746+ 2B32             >                New_Def  SQUARED_CLOSE, "]", Enter_Ptr, is_normal ; ok
 746+ 2B32             >
 746+ 2B32             >Dict_Ptr        defl    $
 746+ 2B32             >
 746+ 2B32             >//              ______________________________________________________________________
 746+ 2B32             >//              Heap part
 746+ 2B32             >
 746+ 2B32             >
 746+ 2B32             >                org     (Heap_Ptr & $1FFF) + $E000
 746+ E74E             >
 746+ E74E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 746+ E74E             >Latest_Definition defl  Heap_Ptr
 746+ E74E             >
 746+ E74E             >                // dummy db directives used to calculate length of namec
 746+ E74E 5D          >                db      "]"
 746+ E74F             >len_NFA         defl    $ - temp_NFA
 746+ E74F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 746+ E74E             >
 746+ E74E 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 746+ E74F 5D          >                db      "]"               // name string in 7-bit ascii, but
 746+ E750             >                org     $-1                 // alter last byte of Name just above to set
 746+ E74F DD          >                db      {b $} | END_BIT     // msb as name end
 746+ E750             >
 746+ E750 48 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 746+ E752             >Prev_Ptr        defl    Heap_Ptr
 746+ E752             >
 746+ E752             >mirror_Ptr      defl    $
 746+ E752             >
 746+ E752 34 2B       >                dw      Dict_Ptr + 2        // xt
 746+ E754             >Heap_Ptr        defl    $ - $E000           // save current HP
 746+ E754             >
 746+ E754             >Current_HP      defl  $ - $E000             // used to set HP once!
 746+ E754             >
 746+ E754             >//              ______________________________________________________________________
 746+ E754             >//              Dictionary part
 746+ E754             >
 746+ E754             >                org     Dict_Ptr
 746+ 2B32             >
 746+ 2B32 52 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 746+ 2B34             >
 746+ 2B34             >SQUARED_CLOSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 746+ 2B34 CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 746+ 2B37             >
 746+ 2B37             >
 746+ 2B37             >                endif           ; ok        // for other definitions it "points" the correct handler
 746+ 2B37             >                // Use of "; ok" to suppress "warning[fwdref]"
 746+ 2B37             >
 746+ 2B37             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 747+ 2B37 3D 20 C0 00                  dw      LIT, $C0                // 192
 748+ 2B3B 01 28 48 26                  dw      STATE, STORE            // state !
 749+ 2B3F F4 24                        dw      EXIT                    // ;
 750+ 2B41
 751+ 2B41              //  ______________________________________________________________________
 752+ 2B41              //
 753+ 2B41              // smudge       --
 754+ 2B41              // toggle smudge bit of latest definition
 755+ 2B41                              Colon_Def SMUDGE, "SMUDGE", is_normal
 755+ 2B41             >                New_Def  SMUDGE, "SMUDGE", Enter_Ptr, is_normal ; ok
 755+ 2B41             >
 755+ 2B41             >Dict_Ptr        defl    $
 755+ 2B41             >
 755+ 2B41             >//              ______________________________________________________________________
 755+ 2B41             >//              Heap part
 755+ 2B41             >
 755+ 2B41             >
 755+ 2B41             >                org     (Heap_Ptr & $1FFF) + $E000
 755+ E754             >
 755+ E754             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 755+ E754             >Latest_Definition defl  Heap_Ptr
 755+ E754             >
 755+ E754             >                // dummy db directives used to calculate length of namec
 755+ E754 53 4D 55 44 >                db      "SMUDGE"
 755+ E758 47 45       >
 755+ E75A             >len_NFA         defl    $ - temp_NFA
 755+ E75A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 755+ E754             >
 755+ E754 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 755+ E755 53 4D 55 44 >                db      "SMUDGE"               // name string in 7-bit ascii, but
 755+ E759 47 45       >
 755+ E75B             >                org     $-1                 // alter last byte of Name just above to set
 755+ E75A C5          >                db      {b $} | END_BIT     // msb as name end
 755+ E75B             >
 755+ E75B 4E 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 755+ E75D             >Prev_Ptr        defl    Heap_Ptr
 755+ E75D             >
 755+ E75D             >mirror_Ptr      defl    $
 755+ E75D             >
 755+ E75D 43 2B       >                dw      Dict_Ptr + 2        // xt
 755+ E75F             >Heap_Ptr        defl    $ - $E000           // save current HP
 755+ E75F             >
 755+ E75F             >Current_HP      defl  $ - $E000             // used to set HP once!
 755+ E75F             >
 755+ E75F             >//              ______________________________________________________________________
 755+ E75F             >//              Dictionary part
 755+ E75F             >
 755+ E75F             >                org     Dict_Ptr
 755+ 2B41             >
 755+ 2B41 5D 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 755+ 2B43             >
 755+ 2B43             >SMUDGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 755+ 2B43 CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 755+ 2B46             >
 755+ 2B46             >
 755+ 2B46             >                endif           ; ok        // for other definitions it "points" the correct handler
 755+ 2B46             >                // Use of "; ok" to suppress "warning[fwdref]"
 755+ 2B46             >
 755+ 2B46             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 756+ 2B46 07 2A                        dw      LATEST                  // latest
 757+ 2B48 3D 20 20 00                  dw      LIT, SMUDGE_BIT         // 32
 758+ 2B4C 35 26                        dw      TOGGLE                  // toggle
 759+ 2B4E F4 24                        dw      EXIT                    // ;
 760+ 2B50
 761+ 2B50              //  ______________________________________________________________________
 762+ 2B50              //
 763+ 2B50              // immediate    --
 764+ 2B50              // make immediate the latest definition
 765+ 2B50                              Colon_Def IMMEDIATE, "IMMEDIATE", is_normal
 765+ 2B50             >                New_Def  IMMEDIATE, "IMMEDIATE", Enter_Ptr, is_normal ; ok
 765+ 2B50             >
 765+ 2B50             >Dict_Ptr        defl    $
 765+ 2B50             >
 765+ 2B50             >//              ______________________________________________________________________
 765+ 2B50             >//              Heap part
 765+ 2B50             >
 765+ 2B50             >
 765+ 2B50             >                org     (Heap_Ptr & $1FFF) + $E000
 765+ E75F             >
 765+ E75F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 765+ E75F             >Latest_Definition defl  Heap_Ptr
 765+ E75F             >
 765+ E75F             >                // dummy db directives used to calculate length of namec
 765+ E75F 49 4D 4D 45 >                db      "IMMEDIATE"
 765+ E763 44 49 41 54 >
 765+ E767 45          >
 765+ E768             >len_NFA         defl    $ - temp_NFA
 765+ E768             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 765+ E75F             >
 765+ E75F 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 765+ E760 49 4D 4D 45 >                db      "IMMEDIATE"               // name string in 7-bit ascii, but
 765+ E764 44 49 41 54 >
 765+ E768 45          >
 765+ E769             >                org     $-1                 // alter last byte of Name just above to set
 765+ E768 C5          >                db      {b $} | END_BIT     // msb as name end
 765+ E769             >
 765+ E769 54 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 765+ E76B             >Prev_Ptr        defl    Heap_Ptr
 765+ E76B             >
 765+ E76B             >mirror_Ptr      defl    $
 765+ E76B             >
 765+ E76B 52 2B       >                dw      Dict_Ptr + 2        // xt
 765+ E76D             >Heap_Ptr        defl    $ - $E000           // save current HP
 765+ E76D             >
 765+ E76D             >Current_HP      defl  $ - $E000             // used to set HP once!
 765+ E76D             >
 765+ E76D             >//              ______________________________________________________________________
 765+ E76D             >//              Dictionary part
 765+ E76D             >
 765+ E76D             >                org     Dict_Ptr
 765+ 2B50             >
 765+ 2B50 6B 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 765+ 2B52             >
 765+ 2B52             >IMMEDIATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 765+ 2B52 CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 765+ 2B55             >
 765+ 2B55             >
 765+ 2B55             >                endif           ; ok        // for other definitions it "points" the correct handler
 765+ 2B55             >                // Use of "; ok" to suppress "warning[fwdref]"
 765+ 2B55             >
 765+ 2B55             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 766+ 2B55 07 2A                        dw      LATEST                  // latest
 767+ 2B57 3D 20 40 00                  dw      LIT, $40                // 64
 768+ 2B5B 35 26                        dw      TOGGLE                  // toggle
 769+ 2B5D F4 24                        dw      EXIT                    // ;
 770+ 2B5F
 771+ 2B5F              //  ______________________________________________________________________
 772+ 2B5F              //
 773+ 2B5F              // hex          --
 774+ 2B5F              // change numeration base
 775+ 2B5F                              Colon_Def HEX, "HEX", is_normal
 775+ 2B5F             >                New_Def  HEX, "HEX", Enter_Ptr, is_normal ; ok
 775+ 2B5F             >
 775+ 2B5F             >Dict_Ptr        defl    $
 775+ 2B5F             >
 775+ 2B5F             >//              ______________________________________________________________________
 775+ 2B5F             >//              Heap part
 775+ 2B5F             >
 775+ 2B5F             >
 775+ 2B5F             >                org     (Heap_Ptr & $1FFF) + $E000
 775+ E76D             >
 775+ E76D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 775+ E76D             >Latest_Definition defl  Heap_Ptr
 775+ E76D             >
 775+ E76D             >                // dummy db directives used to calculate length of namec
 775+ E76D 48 45 58    >                db      "HEX"
 775+ E770             >len_NFA         defl    $ - temp_NFA
 775+ E770             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 775+ E76D             >
 775+ E76D 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 775+ E76E 48 45 58    >                db      "HEX"               // name string in 7-bit ascii, but
 775+ E771             >                org     $-1                 // alter last byte of Name just above to set
 775+ E770 D8          >                db      {b $} | END_BIT     // msb as name end
 775+ E771             >
 775+ E771 5F 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 775+ E773             >Prev_Ptr        defl    Heap_Ptr
 775+ E773             >
 775+ E773             >mirror_Ptr      defl    $
 775+ E773             >
 775+ E773 61 2B       >                dw      Dict_Ptr + 2        // xt
 775+ E775             >Heap_Ptr        defl    $ - $E000           // save current HP
 775+ E775             >
 775+ E775             >Current_HP      defl  $ - $E000             // used to set HP once!
 775+ E775             >
 775+ E775             >//              ______________________________________________________________________
 775+ E775             >//              Dictionary part
 775+ E775             >
 775+ E775             >                org     Dict_Ptr
 775+ 2B5F             >
 775+ 2B5F 73 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 775+ 2B61             >
 775+ 2B61             >HEX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 775+ 2B61 CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 775+ 2B64             >
 775+ 2B64             >
 775+ 2B64             >                endif           ; ok        // for other definitions it "points" the correct handler
 775+ 2B64             >                // Use of "; ok" to suppress "warning[fwdref]"
 775+ 2B64             >
 775+ 2B64             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 776+ 2B64 3D 20 10 00                  dw      LIT, 16                 // 16
 777+ 2B68 07 28 48 26                  dw      BASE, STORE             // base !
 778+ 2B6C F4 24                        dw      EXIT                    // ;
 779+ 2B6E
 780+ 2B6E              //  ______________________________________________________________________
 781+ 2B6E              //
 782+ 2B6E              // decimal      --
 783+ 2B6E              // change numeration base
 784+ 2B6E                              Colon_Def DECIMAL, "DECIMAL", is_normal
 784+ 2B6E             >                New_Def  DECIMAL, "DECIMAL", Enter_Ptr, is_normal ; ok
 784+ 2B6E             >
 784+ 2B6E             >Dict_Ptr        defl    $
 784+ 2B6E             >
 784+ 2B6E             >//              ______________________________________________________________________
 784+ 2B6E             >//              Heap part
 784+ 2B6E             >
 784+ 2B6E             >
 784+ 2B6E             >                org     (Heap_Ptr & $1FFF) + $E000
 784+ E775             >
 784+ E775             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 784+ E775             >Latest_Definition defl  Heap_Ptr
 784+ E775             >
 784+ E775             >                // dummy db directives used to calculate length of namec
 784+ E775 44 45 43 49 >                db      "DECIMAL"
 784+ E779 4D 41 4C    >
 784+ E77C             >len_NFA         defl    $ - temp_NFA
 784+ E77C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 784+ E775             >
 784+ E775 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 784+ E776 44 45 43 49 >                db      "DECIMAL"               // name string in 7-bit ascii, but
 784+ E77A 4D 41 4C    >
 784+ E77D             >                org     $-1                 // alter last byte of Name just above to set
 784+ E77C CC          >                db      {b $} | END_BIT     // msb as name end
 784+ E77D             >
 784+ E77D 6D 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 784+ E77F             >Prev_Ptr        defl    Heap_Ptr
 784+ E77F             >
 784+ E77F             >mirror_Ptr      defl    $
 784+ E77F             >
 784+ E77F 70 2B       >                dw      Dict_Ptr + 2        // xt
 784+ E781             >Heap_Ptr        defl    $ - $E000           // save current HP
 784+ E781             >
 784+ E781             >Current_HP      defl  $ - $E000             // used to set HP once!
 784+ E781             >
 784+ E781             >//              ______________________________________________________________________
 784+ E781             >//              Dictionary part
 784+ E781             >
 784+ E781             >                org     Dict_Ptr
 784+ 2B6E             >
 784+ 2B6E 7F 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 784+ 2B70             >
 784+ 2B70             >DECIMAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 784+ 2B70 CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 784+ 2B73             >
 784+ 2B73             >
 784+ 2B73             >                endif           ; ok        // for other definitions it "points" the correct handler
 784+ 2B73             >                // Use of "; ok" to suppress "warning[fwdref]"
 784+ 2B73             >
 784+ 2B73             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 785+ 2B73 3D 20 0A 00                  dw      LIT, 10                 // 10
 786+ 2B77 07 28 48 26                  dw      BASE, STORE             // base !
 787+ 2B7B F4 24                        dw      EXIT                    // ;
 788+ 2B7D
 789+ 2B7D              //  ______________________________________________________________________
 790+ 2B7D              //
 791+ 2B7D              // (;code)       --
 792+ 2B7D              // patch to CFA to call/jump to the "following code"
 793+ 2B7D                              Colon_Def C_SEMICOLON_CODE, "(;CODE)", is_normal
 793+ 2B7D             >                New_Def  C_SEMICOLON_CODE, "(;CODE)", Enter_Ptr, is_normal ; ok
 793+ 2B7D             >
 793+ 2B7D             >Dict_Ptr        defl    $
 793+ 2B7D             >
 793+ 2B7D             >//              ______________________________________________________________________
 793+ 2B7D             >//              Heap part
 793+ 2B7D             >
 793+ 2B7D             >
 793+ 2B7D             >                org     (Heap_Ptr & $1FFF) + $E000
 793+ E781             >
 793+ E781             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 793+ E781             >Latest_Definition defl  Heap_Ptr
 793+ E781             >
 793+ E781             >                // dummy db directives used to calculate length of namec
 793+ E781 28 3B 43 4F >                db      "(;CODE)"
 793+ E785 44 45 29    >
 793+ E788             >len_NFA         defl    $ - temp_NFA
 793+ E788             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 793+ E781             >
 793+ E781 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 793+ E782 28 3B 43 4F >                db      "(;CODE)"               // name string in 7-bit ascii, but
 793+ E786 44 45 29    >
 793+ E789             >                org     $-1                 // alter last byte of Name just above to set
 793+ E788 A9          >                db      {b $} | END_BIT     // msb as name end
 793+ E789             >
 793+ E789 75 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 793+ E78B             >Prev_Ptr        defl    Heap_Ptr
 793+ E78B             >
 793+ E78B             >mirror_Ptr      defl    $
 793+ E78B             >
 793+ E78B 7F 2B       >                dw      Dict_Ptr + 2        // xt
 793+ E78D             >Heap_Ptr        defl    $ - $E000           // save current HP
 793+ E78D             >
 793+ E78D             >Current_HP      defl  $ - $E000             // used to set HP once!
 793+ E78D             >
 793+ E78D             >//              ______________________________________________________________________
 793+ E78D             >//              Dictionary part
 793+ E78D             >
 793+ E78D             >                org     Dict_Ptr
 793+ 2B7D             >
 793+ 2B7D 8B 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 793+ 2B7F             >
 793+ 2B7F             >C_SEMICOLON_CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 793+ 2B7F CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 793+ 2B82             >
 793+ 2B82             >
 793+ 2B82             >                endif           ; ok        // for other definitions it "points" the correct handler
 793+ 2B82             >                // Use of "; ok" to suppress "warning[fwdref]"
 793+ 2B82             >
 793+ 2B82             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 794+ 2B82 09 25                        dw      R_TO                    // r>       ( Return Stack has IP to caller's next cell )
 795+ 2B84 07 2A                        dw      LATEST                  // latest   ( Word being defined in this moment )
 796+ 2B86 65 2A 40 2A                  dw      PFA, CFA                // pfa cfa  ( cfa of latest word )
 797+ 2B8A
 798+ 2B8A 3D 20 CD 00                  dw      LIT, $CD                // $CD      ( At Latest CFA put "call" op-code )
 799+ 2B8E A9 25 5C 26                  dw      OVER, CSTORE            // over c!  ( why can't use comma? because CFA was already ALLOTted by create? )
 800+ 2B92 60 25                        dw      ONE_PLUS                // 1+       ( At Latest CFA+1 put address for call. )
 801+ 2B94
 802+ 2B94 48 26                        dw      STORE                   // !
 803+ 2B96 F4 24                        dw      EXIT                    // ;
 804+ 2B98
 805+ 2B98              //  ______________________________________________________________________
 806+ 2B98              //
 807+ 2B98              // ;code        --
 808+ 2B98                              Colon_Def SEMICOLON_CODE, ";CODE", is_immediate
 808+ 2B98             >                New_Def  SEMICOLON_CODE, ";CODE", Enter_Ptr, is_immediate ; ok
 808+ 2B98             >
 808+ 2B98             >Dict_Ptr        defl    $
 808+ 2B98             >
 808+ 2B98             >//              ______________________________________________________________________
 808+ 2B98             >//              Heap part
 808+ 2B98             >
 808+ 2B98             >
 808+ 2B98             >                org     (Heap_Ptr & $1FFF) + $E000
 808+ E78D             >
 808+ E78D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 808+ E78D             >Latest_Definition defl  Heap_Ptr
 808+ E78D             >
 808+ E78D             >                // dummy db directives used to calculate length of namec
 808+ E78D 3B 43 4F 44 >                db      ";CODE"
 808+ E791 45          >
 808+ E792             >len_NFA         defl    $ - temp_NFA
 808+ E792             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 808+ E78D             >
 808+ E78D C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 808+ E78E 3B 43 4F 44 >                db      ";CODE"               // name string in 7-bit ascii, but
 808+ E792 45          >
 808+ E793             >                org     $-1                 // alter last byte of Name just above to set
 808+ E792 C5          >                db      {b $} | END_BIT     // msb as name end
 808+ E793             >
 808+ E793 81 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 808+ E795             >Prev_Ptr        defl    Heap_Ptr
 808+ E795             >
 808+ E795             >mirror_Ptr      defl    $
 808+ E795             >
 808+ E795 9A 2B       >                dw      Dict_Ptr + 2        // xt
 808+ E797             >Heap_Ptr        defl    $ - $E000           // save current HP
 808+ E797             >
 808+ E797             >Current_HP      defl  $ - $E000             // used to set HP once!
 808+ E797             >
 808+ E797             >//              ______________________________________________________________________
 808+ E797             >//              Dictionary part
 808+ E797             >
 808+ E797             >                org     Dict_Ptr
 808+ 2B98             >
 808+ 2B98 95 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 808+ 2B9A             >
 808+ 2B9A             >SEMICOLON_CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 808+ 2B9A CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 808+ 2B9D             >
 808+ 2B9D             >
 808+ 2B9D             >                endif           ; ok        // for other definitions it "points" the correct handler
 808+ 2B9D             >                // Use of "; ok" to suppress "warning[fwdref]"
 808+ 2B9D             >
 808+ 2B9D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 809+ 2B9D DF 2A                        dw      QCSP                    // ?csp
 810+ 2B9F 07 2B                        dw      COMPILE                 // compile
 811+ 2BA1 7F 2B                        dw      C_SEMICOLON_CODE        // (;code)
 812+ 2BA3 27 2B                        dw      SQUARED_OPEN            // [
 813+ 2BA5 FD 26                        dw      NOOP                    // noop () can be patched later to ASSEMBLER... )
 814+ 2BA7 F4 24                        dw      EXIT                    // ; immediate
 815+ 2BA9
 816+ 2BA9              //  ______________________________________________________________________
 817+ 2BA9              //
 818+ 2BA9              // <builds      --
 819+ 2BA9                              Colon_Def CBUILDS, "<BUILDS", is_normal
 819+ 2BA9             >                New_Def  CBUILDS, "<BUILDS", Enter_Ptr, is_normal ; ok
 819+ 2BA9             >
 819+ 2BA9             >Dict_Ptr        defl    $
 819+ 2BA9             >
 819+ 2BA9             >//              ______________________________________________________________________
 819+ 2BA9             >//              Heap part
 819+ 2BA9             >
 819+ 2BA9             >
 819+ 2BA9             >                org     (Heap_Ptr & $1FFF) + $E000
 819+ E797             >
 819+ E797             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 819+ E797             >Latest_Definition defl  Heap_Ptr
 819+ E797             >
 819+ E797             >                // dummy db directives used to calculate length of namec
 819+ E797 3C 42 55 49 >                db      "<BUILDS"
 819+ E79B 4C 44 53    >
 819+ E79E             >len_NFA         defl    $ - temp_NFA
 819+ E79E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 819+ E797             >
 819+ E797 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 819+ E798 3C 42 55 49 >                db      "<BUILDS"               // name string in 7-bit ascii, but
 819+ E79C 4C 44 53    >
 819+ E79F             >                org     $-1                 // alter last byte of Name just above to set
 819+ E79E D3          >                db      {b $} | END_BIT     // msb as name end
 819+ E79F             >
 819+ E79F 8D 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 819+ E7A1             >Prev_Ptr        defl    Heap_Ptr
 819+ E7A1             >
 819+ E7A1             >mirror_Ptr      defl    $
 819+ E7A1             >
 819+ E7A1 AB 2B       >                dw      Dict_Ptr + 2        // xt
 819+ E7A3             >Heap_Ptr        defl    $ - $E000           // save current HP
 819+ E7A3             >
 819+ E7A3             >Current_HP      defl  $ - $E000             // used to set HP once!
 819+ E7A3             >
 819+ E7A3             >//              ______________________________________________________________________
 819+ E7A3             >//              Dictionary part
 819+ E7A3             >
 819+ E7A3             >                org     Dict_Ptr
 819+ 2BA9             >
 819+ 2BA9 A1 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 819+ 2BAB             >
 819+ 2BAB             >CBUILDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 819+ 2BAB CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 819+ 2BAE             >
 819+ 2BAE             >
 819+ 2BAE             >                endif           ; ok        // for other definitions it "points" the correct handler
 819+ 2BAE             >                // Use of "; ok" to suppress "warning[fwdref]"
 819+ 2BAE             >
 819+ 2BAE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 820+ 2BAE 36 27                        dw      ZERO                    // 0
 821+ 2BB0 01 27                        dw      CONSTANT                // constant
 822+ 2BB2 F4 24                        dw      EXIT                    // ;
 823+ 2BB4
 824+ 2BB4              //  ______________________________________________________________________
 825+ 2BB4              //
 826+ 2BB4              // recurse      --
 827+ 2BB4              //              Colon_Def RECURSE, "RECURSE", is_immediate
 828+ 2BB4              //              dw      QCOMP                   // ?comp
 829+ 2BB4              //              dw      LATEST                  // latest
 830+ 2BB4              //              dw      PFA, CFA                // pfa cfa
 831+ 2BB4              //              dw      COMMA                   // ,
 832+ 2BB4              //              dw      EXIT                    // ; immediate
 833+ 2BB4
 834+ 2BB4              //  ______________________________________________________________________
 835+ 2BB4              //
 836+ 2BB4              // does>     --
 837+ 2BB4                              Colon_Def DOES_TO, "DOES>", is_normal
 837+ 2BB4             >                New_Def  DOES_TO, "DOES>", Enter_Ptr, is_normal ; ok
 837+ 2BB4             >
 837+ 2BB4             >Dict_Ptr        defl    $
 837+ 2BB4             >
 837+ 2BB4             >//              ______________________________________________________________________
 837+ 2BB4             >//              Heap part
 837+ 2BB4             >
 837+ 2BB4             >
 837+ 2BB4             >                org     (Heap_Ptr & $1FFF) + $E000
 837+ E7A3             >
 837+ E7A3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 837+ E7A3             >Latest_Definition defl  Heap_Ptr
 837+ E7A3             >
 837+ E7A3             >                // dummy db directives used to calculate length of namec
 837+ E7A3 44 4F 45 53 >                db      "DOES>"
 837+ E7A7 3E          >
 837+ E7A8             >len_NFA         defl    $ - temp_NFA
 837+ E7A8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 837+ E7A3             >
 837+ E7A3 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 837+ E7A4 44 4F 45 53 >                db      "DOES>"               // name string in 7-bit ascii, but
 837+ E7A8 3E          >
 837+ E7A9             >                org     $-1                 // alter last byte of Name just above to set
 837+ E7A8 BE          >                db      {b $} | END_BIT     // msb as name end
 837+ E7A9             >
 837+ E7A9 97 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 837+ E7AB             >Prev_Ptr        defl    Heap_Ptr
 837+ E7AB             >
 837+ E7AB             >mirror_Ptr      defl    $
 837+ E7AB             >
 837+ E7AB B6 2B       >                dw      Dict_Ptr + 2        // xt
 837+ E7AD             >Heap_Ptr        defl    $ - $E000           // save current HP
 837+ E7AD             >
 837+ E7AD             >Current_HP      defl  $ - $E000             // used to set HP once!
 837+ E7AD             >
 837+ E7AD             >//              ______________________________________________________________________
 837+ E7AD             >//              Dictionary part
 837+ E7AD             >
 837+ E7AD             >                org     Dict_Ptr
 837+ 2BB4             >
 837+ 2BB4 AB 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 837+ 2BB6             >
 837+ 2BB6             >DOES_TO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 837+ 2BB6 CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 837+ 2BB9             >
 837+ 2BB9             >
 837+ 2BB9             >                endif           ; ok        // for other definitions it "points" the correct handler
 837+ 2BB9             >                // Use of "; ok" to suppress "warning[fwdref]"
 837+ 2BB9             >
 837+ 2BB9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 838+ 2BB9 09 25                        dw      R_TO                    // r>
 839+ 2BBB 07 2A                        dw      LATEST                  // latest
 840+ 2BBD 65 2A                        dw      PFA                     // pfa
 841+ 2BBF 48 26                        dw      STORE                   // !        \ old use of <BUILDS
 842+ 2BC1              //              dw      COMMA                   // ,        \ new use of CREATE
 843+ 2BC1 7F 2B                        dw      C_SEMICOLON_CODE        // ;code
 844+ 2BC3              Does_Ptr:
 845+ 2BC3                              // via call coded in CFA
 846+ 2BC3 EB                           ex      de, hl //**
 847+ 2BC4                              // *** ldhlrp
 848+ 2BC4 2B                           dec     hl                  // push on Return-Stack current Instruction-Pointer
 849+ 2BC5 70                           ld      (hl), b
 850+ 2BC6 2B                           dec     hl
 851+ 2BC7 71                           ld      (hl), c
 852+ 2BC8                              // *** ldrphl
 853+ 2BC8 EB                           ex      de, hl //**
 854+ 2BC9 E1                           pop     hl                  // CFA has a call to this, so PFA -> IP
 855+ 2BCA
 856+ 2BCA 4E                           ld      c, (hl)
 857+ 2BCB 23                           inc     hl
 858+ 2BCC 46                           ld      b, (hl)
 859+ 2BCD 23                           inc     hl
 860+ 2BCE
 861+ 2BCE                              psh1
 861+ 2BCE E5          >                push    hl
 861+ 2BCF DD E9       >                jp      (ix)
 862+ 2BD1                              // SMUDGE !
 863+ 2BD1
 864+ 2BD1              //  ______________________________________________________________________
 865+ 2BD1              //
 866+ 2BD1              // count        a -- a2 n
 867+ 2BD1              // expects a counted string at address a, returns string address and counter
 868+ 2BD1                              New_Def COUNT, "COUNT", is_code, is_normal
 868+ 2BD1             >
 868+ 2BD1             >Dict_Ptr        defl    $
 868+ 2BD1             >
 868+ 2BD1             >//              ______________________________________________________________________
 868+ 2BD1             >//              Heap part
 868+ 2BD1             >
 868+ 2BD1             >
 868+ 2BD1             >                org     (Heap_Ptr & $1FFF) + $E000
 868+ E7AD             >
 868+ E7AD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 868+ E7AD             >Latest_Definition defl  Heap_Ptr
 868+ E7AD             >
 868+ E7AD             >                // dummy db directives used to calculate length of namec
 868+ E7AD 43 4F 55 4E >                db      "COUNT"
 868+ E7B1 54          >
 868+ E7B2             >len_NFA         defl    $ - temp_NFA
 868+ E7B2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 868+ E7AD             >
 868+ E7AD 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 868+ E7AE 43 4F 55 4E >                db      "COUNT"               // name string in 7-bit ascii, but
 868+ E7B2 54          >
 868+ E7B3             >                org     $-1                 // alter last byte of Name just above to set
 868+ E7B2 D4          >                db      {b $} | END_BIT     // msb as name end
 868+ E7B3             >
 868+ E7B3 A3 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 868+ E7B5             >Prev_Ptr        defl    Heap_Ptr
 868+ E7B5             >
 868+ E7B5             >mirror_Ptr      defl    $
 868+ E7B5             >
 868+ E7B5 D3 2B       >                dw      Dict_Ptr + 2        // xt
 868+ E7B7             >Heap_Ptr        defl    $ - $E000           // save current HP
 868+ E7B7             >
 868+ E7B7             >Current_HP      defl  $ - $E000             // used to set HP once!
 868+ E7B7             >
 868+ E7B7             >//              ______________________________________________________________________
 868+ E7B7             >//              Dictionary part
 868+ E7B7             >
 868+ E7B7             >                org     Dict_Ptr
 868+ 2BD1             >
 868+ 2BD1 B5 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 868+ 2BD3             >
 868+ 2BD3             >COUNT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 868+ 2BD3 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 868+ 2BD3 ~           >
 868+ 2BD3 ~           >
 868+ 2BD3             >                endif           ; ok        // for other definitions it "points" the correct handler
 868+ 2BD3             >                // Use of "; ok" to suppress "warning[fwdref]"
 868+ 2BD3             >
 868+ 2BD3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 869+ 2BD3 D9                           exx
 870+ 2BD4 E1                           pop     hl
 871+ 2BD5 5E                           ld      e, (hl)
 872+ 2BD6 16 00                        ld      d, 0
 873+ 2BD8 23                           inc     hl
 874+ 2BD9              Count_Here:
 875+ 2BD9 E5                           push    hl
 876+ 2BDA D5                           push    de
 877+ 2BDB D9                           exx
 878+ 2BDC                              next
 878+ 2BDC DD E9       >                jp      (ix)
 879+ 2BDE              //                pop     hl
 880+ 2BDE              //                ld      a, (hl)
 881+ 2BDE              //                inc     hl
 882+ 2BDE              //                push    hl
 883+ 2BDE              //                ld      h, 0
 884+ 2BDE              //                ld      l, a
 885+ 2BDE              //                push    hl
 886+ 2BDE              //                next
 887+ 2BDE
 888+ 2BDE              //  ______________________________________________________________________
 889+ 2BDE              //
 890+ 2BDE              // bounds       a n -- a+n n
 891+ 2BDE              // given an address and a length ( a n ) calculate the bound addresses
 892+ 2BDE              // suitable for DO-LOOP
 893+ 2BDE                              New_Def BOUNDS, "BOUNDS", is_code, is_normal
 893+ 2BDE             >
 893+ 2BDE             >Dict_Ptr        defl    $
 893+ 2BDE             >
 893+ 2BDE             >//              ______________________________________________________________________
 893+ 2BDE             >//              Heap part
 893+ 2BDE             >
 893+ 2BDE             >
 893+ 2BDE             >                org     (Heap_Ptr & $1FFF) + $E000
 893+ E7B7             >
 893+ E7B7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 893+ E7B7             >Latest_Definition defl  Heap_Ptr
 893+ E7B7             >
 893+ E7B7             >                // dummy db directives used to calculate length of namec
 893+ E7B7 42 4F 55 4E >                db      "BOUNDS"
 893+ E7BB 44 53       >
 893+ E7BD             >len_NFA         defl    $ - temp_NFA
 893+ E7BD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 893+ E7B7             >
 893+ E7B7 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 893+ E7B8 42 4F 55 4E >                db      "BOUNDS"               // name string in 7-bit ascii, but
 893+ E7BC 44 53       >
 893+ E7BE             >                org     $-1                 // alter last byte of Name just above to set
 893+ E7BD D3          >                db      {b $} | END_BIT     // msb as name end
 893+ E7BE             >
 893+ E7BE AD 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 893+ E7C0             >Prev_Ptr        defl    Heap_Ptr
 893+ E7C0             >
 893+ E7C0             >mirror_Ptr      defl    $
 893+ E7C0             >
 893+ E7C0 E0 2B       >                dw      Dict_Ptr + 2        // xt
 893+ E7C2             >Heap_Ptr        defl    $ - $E000           // save current HP
 893+ E7C2             >
 893+ E7C2             >Current_HP      defl  $ - $E000             // used to set HP once!
 893+ E7C2             >
 893+ E7C2             >//              ______________________________________________________________________
 893+ E7C2             >//              Dictionary part
 893+ E7C2             >
 893+ E7C2             >                org     Dict_Ptr
 893+ 2BDE             >
 893+ 2BDE C0 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 893+ 2BE0             >
 893+ 2BE0             >BOUNDS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 893+ 2BE0 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 893+ 2BE0 ~           >
 893+ 2BE0 ~           >
 893+ 2BE0             >                endif           ; ok        // for other definitions it "points" the correct handler
 893+ 2BE0             >                // Use of "; ok" to suppress "warning[fwdref]"
 893+ 2BE0             >
 893+ 2BE0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 894+ 2BE0 D9                           exx
 895+ 2BE1 E1                           pop     hl
 896+ 2BE2 D1                           pop     de
 897+ 2BE3 19                           add     hl, de
 898+ 2BE4 18 F3                        jr      Count_Here
 899+ 2BE6                              // push    hl
 900+ 2BE6                              // push    de
 901+ 2BE6                              // exx
 902+ 2BE6                              // next
 903+ 2BE6
 904+ 2BE6              //  ______________________________________________________________________
 905+ 2BE6              //
 906+ 2BE6              // leave        --
 907+ 2BE6              // Compile (leave) to leave current LOOP and jump just after it
 908+ 2BE6                              Colon_Def LEAVE, "LEAVE", is_immediate
 908+ 2BE6             >                New_Def  LEAVE, "LEAVE", Enter_Ptr, is_immediate ; ok
 908+ 2BE6             >
 908+ 2BE6             >Dict_Ptr        defl    $
 908+ 2BE6             >
 908+ 2BE6             >//              ______________________________________________________________________
 908+ 2BE6             >//              Heap part
 908+ 2BE6             >
 908+ 2BE6             >
 908+ 2BE6             >                org     (Heap_Ptr & $1FFF) + $E000
 908+ E7C2             >
 908+ E7C2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 908+ E7C2             >Latest_Definition defl  Heap_Ptr
 908+ E7C2             >
 908+ E7C2             >                // dummy db directives used to calculate length of namec
 908+ E7C2 4C 45 41 56 >                db      "LEAVE"
 908+ E7C6 45          >
 908+ E7C7             >len_NFA         defl    $ - temp_NFA
 908+ E7C7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 908+ E7C2             >
 908+ E7C2 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 908+ E7C3 4C 45 41 56 >                db      "LEAVE"               // name string in 7-bit ascii, but
 908+ E7C7 45          >
 908+ E7C8             >                org     $-1                 // alter last byte of Name just above to set
 908+ E7C7 C5          >                db      {b $} | END_BIT     // msb as name end
 908+ E7C8             >
 908+ E7C8 B7 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 908+ E7CA             >Prev_Ptr        defl    Heap_Ptr
 908+ E7CA             >
 908+ E7CA             >mirror_Ptr      defl    $
 908+ E7CA             >
 908+ E7CA E8 2B       >                dw      Dict_Ptr + 2        // xt
 908+ E7CC             >Heap_Ptr        defl    $ - $E000           // save current HP
 908+ E7CC             >
 908+ E7CC             >Current_HP      defl  $ - $E000             // used to set HP once!
 908+ E7CC             >
 908+ E7CC             >//              ______________________________________________________________________
 908+ E7CC             >//              Dictionary part
 908+ E7CC             >
 908+ E7CC             >                org     Dict_Ptr
 908+ 2BE6             >
 908+ 2BE6 CA 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 908+ 2BE8             >
 908+ 2BE8             >LEAVE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 908+ 2BE8 CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 908+ 2BEB             >
 908+ 2BEB             >
 908+ 2BEB             >                endif           ; ok        // for other definitions it "points" the correct handler
 908+ 2BEB             >                // Use of "; ok" to suppress "warning[fwdref]"
 908+ 2BEB             >
 908+ 2BEB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 909+ 2BEB 07 2B 9A 20                  dw      COMPILE, C_LEAVE       // compile (leave)     \ unloop and branch
 910+ 2BEF 5B 28 FE 24                  dw      HERE, TO_R, ZERO, COMMA // here >r 0 ,
 910+ 2BF3 36 27 71 28
 911+ 2BF7 36 27 36 27                  dw      ZERO, ZERO
 912+ 2BFB DB 24 CD 25                  dw      SPFETCH, DUP
 913+ 2BFF 76 25 76 25                  dw      CELL_PLUS, CELL_PLUS
 914+ 2C03 BD 25                        dw      TUCK
 915+ 2C05 19 28 3E 26                  dw      CSP, FETCH
 916+ 2C09 C6 25 9A 28                  dw      SWAP, SUBTRACT
 917+ 2C0D 35 24                        dw      CMOVE
 918+ 2C0F 19 28 3E 26                  dw      CSP, FETCH, CELL_MINUS
 918+ 2C13 7B 25
 919+ 2C15 09 25 A9 25                  dw      R_TO, OVER, STORE
 919+ 2C19 48 26
 920+ 2C1B 7B 25 36 27                  dw      CELL_MINUS, ZERO
 921+ 2C1F C6 25 48 26                  dw      SWAP, STORE
 922+ 2C23 F4 24                        dw      EXIT                    // ;
 923+ 2C25
 924+ 2C25              //  ______________________________________________________________________
 925+ 2C25              //
 926+ 2C25              // type         a n --
 927+ 2C25              // Sends to current output channel n characters starting at address a.
 928+ 2C25                              Colon_Def TYPE, "TYPE", is_normal
 928+ 2C25             >                New_Def  TYPE, "TYPE", Enter_Ptr, is_normal ; ok
 928+ 2C25             >
 928+ 2C25             >Dict_Ptr        defl    $
 928+ 2C25             >
 928+ 2C25             >//              ______________________________________________________________________
 928+ 2C25             >//              Heap part
 928+ 2C25             >
 928+ 2C25             >
 928+ 2C25             >                org     (Heap_Ptr & $1FFF) + $E000
 928+ E7CC             >
 928+ E7CC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 928+ E7CC             >Latest_Definition defl  Heap_Ptr
 928+ E7CC             >
 928+ E7CC             >                // dummy db directives used to calculate length of namec
 928+ E7CC 54 59 50 45 >                db      "TYPE"
 928+ E7D0             >len_NFA         defl    $ - temp_NFA
 928+ E7D0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 928+ E7CC             >
 928+ E7CC 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 928+ E7CD 54 59 50 45 >                db      "TYPE"               // name string in 7-bit ascii, but
 928+ E7D1             >                org     $-1                 // alter last byte of Name just above to set
 928+ E7D0 C5          >                db      {b $} | END_BIT     // msb as name end
 928+ E7D1             >
 928+ E7D1 C2 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 928+ E7D3             >Prev_Ptr        defl    Heap_Ptr
 928+ E7D3             >
 928+ E7D3             >mirror_Ptr      defl    $
 928+ E7D3             >
 928+ E7D3 27 2C       >                dw      Dict_Ptr + 2        // xt
 928+ E7D5             >Heap_Ptr        defl    $ - $E000           // save current HP
 928+ E7D5             >
 928+ E7D5             >Current_HP      defl  $ - $E000             // used to set HP once!
 928+ E7D5             >
 928+ E7D5             >//              ______________________________________________________________________
 928+ E7D5             >//              Dictionary part
 928+ E7D5             >
 928+ E7D5             >                org     Dict_Ptr
 928+ 2C25             >
 928+ 2C25 D3 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 928+ 2C27             >
 928+ 2C27             >TYPE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 928+ 2C27 CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 928+ 2C2A             >
 928+ 2C2A             >
 928+ 2C2A             >                endif           ; ok        // for other definitions it "points" the correct handler
 928+ 2C2A             >                // Use of "; ok" to suppress "warning[fwdref]"
 928+ 2C2A             >
 928+ 2C2A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 929+ 2C2A E0 2B                        dw      BOUNDS                  // bounds
 930+ 2C2C A6 20                        dw      C_Q_DO                  // ?do
 931+ 2C2E 0C 00                        dw      Type_Skip - $
 932+ 2C30              Type_Loop:
 933+ 2C30 D4 20 53 26                  dw          I, CFETCH           //      i c@
 934+ 2C34 15 29                        dw          EMIT                //      emit
 935+ 2C36 7A 20                        dw      C_LOOP                  // loop
 936+ 2C38 F8 FF                        dw      Type_Loop - $
 937+ 2C3A              Type_Skip:
 938+ 2C3A F4 24                        dw      EXIT                    // ;
 939+ 2C3C
 940+ 2C3C              //  ______________________________________________________________________
 941+ 2C3C              //
 942+ 2C3C              // -trailing    a n1 -- a n2
 943+ 2C3C              // Assumes that an n1 bytes-long string is stored at address a
 944+ 2C3C              // and the string contains a space delimited word,
 945+ 2C3C              // Finds n2 as the position of the first character after the word.
 946+ 2C3C                              Colon_Def LTRAILING, "-TRAILING", is_normal
 946+ 2C3C             >                New_Def  LTRAILING, "-TRAILING", Enter_Ptr, is_normal ; ok
 946+ 2C3C             >
 946+ 2C3C             >Dict_Ptr        defl    $
 946+ 2C3C             >
 946+ 2C3C             >//              ______________________________________________________________________
 946+ 2C3C             >//              Heap part
 946+ 2C3C             >
 946+ 2C3C             >
 946+ 2C3C             >                org     (Heap_Ptr & $1FFF) + $E000
 946+ E7D5             >
 946+ E7D5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 946+ E7D5             >Latest_Definition defl  Heap_Ptr
 946+ E7D5             >
 946+ E7D5             >                // dummy db directives used to calculate length of namec
 946+ E7D5 2D 54 52 41 >                db      "-TRAILING"
 946+ E7D9 49 4C 49 4E >
 946+ E7DD 47          >
 946+ E7DE             >len_NFA         defl    $ - temp_NFA
 946+ E7DE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 946+ E7D5             >
 946+ E7D5 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 946+ E7D6 2D 54 52 41 >                db      "-TRAILING"               // name string in 7-bit ascii, but
 946+ E7DA 49 4C 49 4E >
 946+ E7DE 47          >
 946+ E7DF             >                org     $-1                 // alter last byte of Name just above to set
 946+ E7DE C7          >                db      {b $} | END_BIT     // msb as name end
 946+ E7DF             >
 946+ E7DF CC 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 946+ E7E1             >Prev_Ptr        defl    Heap_Ptr
 946+ E7E1             >
 946+ E7E1             >mirror_Ptr      defl    $
 946+ E7E1             >
 946+ E7E1 3E 2C       >                dw      Dict_Ptr + 2        // xt
 946+ E7E3             >Heap_Ptr        defl    $ - $E000           // save current HP
 946+ E7E3             >
 946+ E7E3             >Current_HP      defl  $ - $E000             // used to set HP once!
 946+ E7E3             >
 946+ E7E3             >//              ______________________________________________________________________
 946+ E7E3             >//              Dictionary part
 946+ E7E3             >
 946+ E7E3             >                org     Dict_Ptr
 946+ 2C3C             >
 946+ 2C3C E1 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 946+ 2C3E             >
 946+ 2C3E             >LTRAILING:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 946+ 2C3E CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 946+ 2C41             >
 946+ 2C41             >
 946+ 2C41             >                endif           ; ok        // for other definitions it "points" the correct handler
 946+ 2C41             >                // Use of "; ok" to suppress "warning[fwdref]"
 946+ 2C41             >
 946+ 2C41             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 947+ 2C41 CD 25 36 27                  dw      DUP, ZERO               // dup 0
 948+ 2C45                                                              // do
 949+ 2C45 A6 20                        dw      C_Q_DO
 950+ 2C47 20 00                        dw      LTrailing_Leave - $
 951+ 2C49              LTrailing_Loop:
 952+ 2C49 1C 26 47 25                  dw          TWO_DUP, PLUS       //      2dup +
 953+ 2C4D 67 25                        dw          ONE_SUBTRACT        //      1-
 954+ 2C4F 53 26                        dw          CFETCH              //      c@
 955+ 2C51 59 27 9A 28                  dw          BL, SUBTRACT        //      bl -
 956+ 2C55                                                              //      if
 957+ 2C55 8F 20                        dw          ZBRANCH
 958+ 2C57 0A 00                        dw          LTrailing_Else - $
 959+ 2C59 9A 20                        dw              C_LEAVE         //          leave
 960+ 2C5B 0C 00                        dw              LTrailing_Leave - $
 961+ 2C5D 82 20                        dw          BRANCH              //      else
 962+ 2C5F 04 00                        dw          LTrailing_Endif - $
 963+ 2C61              LTrailing_Else:
 964+ 2C61 67 25                        dw              ONE_SUBTRACT    //          1-
 965+ 2C63              LTrailing_Endif:                                //      endif
 966+ 2C63                                                              // loop
 967+ 2C63 7A 20                        dw      C_LOOP
 968+ 2C65 E4 FF                        dw      LTrailing_Loop - $
 969+ 2C67              LTrailing_Leave:
 970+ 2C67 F4 24                        dw      EXIT                    // ;
 971+ 2C69
 972+ 2C69              //  ______________________________________________________________________
 973+ 2C69              //
 974+ 2C69              // accept       a n1 -- n2
 975+ 2C69              // Accepts at most n1 characters from terminal and stores them at address a
 976+ 2C69              // CR stops input. A 'nul' is added as trailer.
 977+ 2C69              // n2 is the string length. n2 is kept in span user variable also.
 978+ 2C69                              Colon_Def ACCEPT, "ACCEPT", is_normal
 978+ 2C69             >                New_Def  ACCEPT, "ACCEPT", Enter_Ptr, is_normal ; ok
 978+ 2C69             >
 978+ 2C69             >Dict_Ptr        defl    $
 978+ 2C69             >
 978+ 2C69             >//              ______________________________________________________________________
 978+ 2C69             >//              Heap part
 978+ 2C69             >
 978+ 2C69             >
 978+ 2C69             >                org     (Heap_Ptr & $1FFF) + $E000
 978+ E7E3             >
 978+ E7E3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 978+ E7E3             >Latest_Definition defl  Heap_Ptr
 978+ E7E3             >
 978+ E7E3             >                // dummy db directives used to calculate length of namec
 978+ E7E3 41 43 43 45 >                db      "ACCEPT"
 978+ E7E7 50 54       >
 978+ E7E9             >len_NFA         defl    $ - temp_NFA
 978+ E7E9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 978+ E7E3             >
 978+ E7E3 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 978+ E7E4 41 43 43 45 >                db      "ACCEPT"               // name string in 7-bit ascii, but
 978+ E7E8 50 54       >
 978+ E7EA             >                org     $-1                 // alter last byte of Name just above to set
 978+ E7E9 D4          >                db      {b $} | END_BIT     // msb as name end
 978+ E7EA             >
 978+ E7EA D5 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 978+ E7EC             >Prev_Ptr        defl    Heap_Ptr
 978+ E7EC             >
 978+ E7EC             >mirror_Ptr      defl    $
 978+ E7EC             >
 978+ E7EC 6B 2C       >                dw      Dict_Ptr + 2        // xt
 978+ E7EE             >Heap_Ptr        defl    $ - $E000           // save current HP
 978+ E7EE             >
 978+ E7EE             >Current_HP      defl  $ - $E000             // used to set HP once!
 978+ E7EE             >
 978+ E7EE             >//              ______________________________________________________________________
 978+ E7EE             >//              Dictionary part
 978+ E7EE             >
 978+ E7EE             >                org     Dict_Ptr
 978+ 2C69             >
 978+ 2C69 EC 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 978+ 2C6B             >
 978+ 2C6B             >ACCEPT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 978+ 2C6B CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 978+ 2C6E             >
 978+ 2C6E             >
 978+ 2C6E             >                endif           ; ok        // for other definitions it "points" the correct handler
 978+ 2C6E             >                // Use of "; ok" to suppress "warning[fwdref]"
 978+ 2C6E             >
 978+ 2C6E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 979+ 2C6E A9 25 47 25                  dw      OVER, PLUS, OVER        //                      ( a  n1+a  a )
 979+ 2C72 A9 25
 980+ 2C74 36 27 DF 25                  dw      ZERO, DASH_ROT          //                      ( a  0     a+n1  a )
 981+ 2C78                                                              // do
 982+ 2C78 A6 20                        dw      C_Q_DO
 983+ 2C7A 8C 00                        dw      Accept_Leave - $
 984+ 2C7C              Accept_Loop:
 985+ 2C7C D2 22                        dw          CUR
 986+ 2C7E B2 25 1A 23                  dw          DROP, KEY           //      drop key        ( a  c )
 987+ 2C82 CD 25                        dw          DUP                 //      dup             ( a  c  c )
 988+ 2C84 3D 20 0E 00                  dw          LIT, $0E            //      0E
 989+ 2C88 7C 27                        dw          PLUS_ORIGIN         //      +origin
 990+ 2C8A 3E 26                        dw          FETCH               //      @               ( a  c  c  del )
 991+ 2C8C A6 28                        dw          EQUALS              //      =               ( a  c  c==del )
 992+ 2C8E                                                              //      if
 993+ 2C8E 8F 20                        dw          ZBRANCH
 994+ 2C90 2C 00                        dw          Accept_Else_0 - $
 995+ 2C92 B2 25                        dw              DROP            //          drop        ( a  )
 996+ 2C94 CD 25 D4 20                  dw              DUP, I, EQUALS  //          dup i =     ( a  a==i )
 996+ 2C98 A6 28
 997+ 2C9A 3D 27 B4 24                  dw              ONE, AND_OP     //          1 and
 998+ 2C9E CD 25                        dw              DUP             //          dup         ( a  a==i  a==i )
 999+ 2CA0 09 25                        dw              R_TO            //          r> 2 - + r>
1000+ 2CA2 83 25 47 25                  dw              TWO_MINUS, PLUS //      ( decrement index by 1 or 2 )
1001+ 2CA6 FE 24                        dw              TO_R            //
1002+ 2CA8                                                              //          if
1003+ 2CA8 8F 20                        dw              ZBRANCH
1004+ 2CAA 0A 00                        dw              Accept_Else_1 - $
1005+ 2CAC 3D 20 07 00                  dw                  LIT, 7      //              7       ( a  7 )
1006+ 2CB0                                                              //          else
1007+ 2CB0 82 20                        dw              BRANCH
1008+ 2CB2 06 00                        dw              Accept_Endif_1 - $
1009+ 2CB4              Accept_Else_1:
1010+ 2CB4 3D 20 08 00                  dw                  LIT, 8      //              8       ( a  8 )
1011+ 2CB8              Accept_Endif_1:                                 //          endif
1012+ 2CB8 82 20                        dw          BRANCH
1013+ 2CBA 2E 00                        dw          Accept_Endif_0 - $
1014+ 2CBC              Accept_Else_0:                                  //      else
1015+ 2CBC CD 25                        dw              DUP             //          dup         ( a  c  c )
1016+ 2CBE 3D 20 0D 00                  dw              LIT, 13         //          13
1017+ 2CC2 A6 28                        dw              EQUALS          //          =           ( a  c  c==CR )
1018+ 2CC4                                                              //          if
1019+ 2CC4 8F 20                        dw              ZBRANCH
1020+ 2CC6 0C 00                        dw              Accept_Else_2 - $
1021+ 2CC8 B2 25 59 27                  dw                  DROP, BL    //              drop bl ( a  bl )
1022+ 2CCC 36 27                        dw                  ZERO        //              0       ( a  c  0 )
1023+ 2CCE                                                              //          else
1024+ 2CCE 82 20                        dw              BRANCH
1025+ 2CD0 04 00                        dw              Accept_Endif_2 - $
1026+ 2CD2              Accept_Else_2:
1027+ 2CD2 CD 25                        dw                  DUP         //              dup     ( a  c  c )
1028+ 2CD4                                                              //          endif
1029+ 2CD4              Accept_Endif_2:
1030+ 2CD4 D4 20 5C 26                  dw              I, CSTORE       //          i           ( a  c )
1031+ 2CD8 CD 25 59 27                  dw              DUP, BL, LESS   //          dup bl <    ( a  c  c<BL )
1031+ 2CDC BF 28
1032+ 2CDE                                                              //          if
1033+ 2CDE 8F 20                        dw              ZBRANCH
1034+ 2CE0 08 00                        dw              Accept_Endif_3 - $
1035+ 2CE2 09 25                        dw                  R_TO        //              r>
1036+ 2CE4 67 25                        dw                  ONE_SUBTRACT//              1-
1037+ 2CE6 FE 24                        dw                  TO_R        //              >r
1038+ 2CE8                                                              //          endif
1039+ 2CE8              Accept_Endif_3:
1040+ 2CE8              Accept_Endif_0:                                 //      endif
1041+ 2CE8 15 29                        dw          EMIT                //      emit
1042+ 2CEA
1043+ 2CEA 36 27 D4 20                  dw          ZERO, I, ONE_PLUS   //      0 i 1+ !
1043+ 2CEE 60 25
1044+ 2CF0 48 26                        dw          STORE               //          ( zero pad )
1045+ 2CF2 D4 20                        dw          I                   //      i
1046+ 2CF4 D4 20 53 26                  dw          I, CFETCH, ZEQUAL   //      i 0= if
1046+ 2CF8 19 25
1047+ 2CFA 8F 20                        dw          ZBRANCH             //
1048+ 2CFC 06 00                        dw              Accept_Endif_4 - $
1049+ 2CFE 9A 20                        dw                  C_LEAVE     //              leave
1050+ 2D00 06 00                        dw                  Accept_Leave - $
1051+ 2D02              Accept_Endif_4:                                 //      endif
1052+ 2D02                                                              // loop
1053+ 2D02 7A 20                        dw      C_LOOP
1054+ 2D04 78 FF                        dw      Accept_Loop - $
1055+ 2D06              Accept_Leave:
1056+ 2D06 C6 25 9A 28                  dw      SWAP, SUBTRACT          // swap -
1057+ 2D0A 60 25                        dw      ONE_PLUS                // 1+
1058+ 2D0C CD 25 49 28                  dw      DUP, SPAN, STORE        // dup span !
1058+ 2D10 48 26
1059+ 2D12 F4 24                        dw      EXIT                    // ;
1060+ 2D14
1061+ 2D14              //  ______________________________________________________________________
1062+ 2D14              //
1063+ 2D14              // expect      a n --
1064+ 2D14              // Accepts at most n1 characters from terminal and stores them at address a
1065+ 2D14              // CR stops input. A 'nul' is added as trailer.
1066+ 2D14              // n2 is the string length. n2 is kept in span user variable also.
1067+ 2D14              //              Colon_Def EXPECT, "EXPECT", is_normal
1068+ 2D14              //              dw      ACCEPT, DROP            // accept drop
1069+ 2D14              //              dw      EXIT                    // ;
1070+ 2D14
1071+ 2D14              //  ______________________________________________________________________
1072+ 2D14              //
1073+ 2D14              // query        --
1074+ 2D14              // Accept at most 80 character from console. CR stops.
1075+ 2D14              // Text is stored in TIB. Variable IN is zeroed.
1076+ 2D14                              Colon_Def QUERY, "QUERY", is_normal
1076+ 2D14             >                New_Def  QUERY, "QUERY", Enter_Ptr, is_normal ; ok
1076+ 2D14             >
1076+ 2D14             >Dict_Ptr        defl    $
1076+ 2D14             >
1076+ 2D14             >//              ______________________________________________________________________
1076+ 2D14             >//              Heap part
1076+ 2D14             >
1076+ 2D14             >
1076+ 2D14             >                org     (Heap_Ptr & $1FFF) + $E000
1076+ E7EE             >
1076+ E7EE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1076+ E7EE             >Latest_Definition defl  Heap_Ptr
1076+ E7EE             >
1076+ E7EE             >                // dummy db directives used to calculate length of namec
1076+ E7EE 51 55 45 52 >                db      "QUERY"
1076+ E7F2 59          >
1076+ E7F3             >len_NFA         defl    $ - temp_NFA
1076+ E7F3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1076+ E7EE             >
1076+ E7EE 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1076+ E7EF 51 55 45 52 >                db      "QUERY"               // name string in 7-bit ascii, but
1076+ E7F3 59          >
1076+ E7F4             >                org     $-1                 // alter last byte of Name just above to set
1076+ E7F3 D9          >                db      {b $} | END_BIT     // msb as name end
1076+ E7F4             >
1076+ E7F4 E3 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1076+ E7F6             >Prev_Ptr        defl    Heap_Ptr
1076+ E7F6             >
1076+ E7F6             >mirror_Ptr      defl    $
1076+ E7F6             >
1076+ E7F6 16 2D       >                dw      Dict_Ptr + 2        // xt
1076+ E7F8             >Heap_Ptr        defl    $ - $E000           // save current HP
1076+ E7F8             >
1076+ E7F8             >Current_HP      defl  $ - $E000             // used to set HP once!
1076+ E7F8             >
1076+ E7F8             >//              ______________________________________________________________________
1076+ E7F8             >//              Dictionary part
1076+ E7F8             >
1076+ E7F8             >                org     Dict_Ptr
1076+ 2D14             >
1076+ 2D14 F6 07       >                dw      mirror_Ptr - $E000 + Heap_offset
1076+ 2D16             >
1076+ 2D16             >QUERY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1076+ 2D16 CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1076+ 2D19             >
1076+ 2D19             >
1076+ 2D19             >                endif           ; ok        // for other definitions it "points" the correct handler
1076+ 2D19             >                // Use of "; ok" to suppress "warning[fwdref]"
1076+ 2D19             >
1076+ 2D19             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1077+ 2D19 9B 27 3E 26                  dw      TIB, FETCH              // tib @
1078+ 2D1D 3D 20 50 00                  dw      LIT, 80                 // 80
1079+ 2D21 6B 2C B2 25                  dw      ACCEPT, DROP            // accept drop
1080+ 2D25 36 27 DD 27                  dw      ZERO, TO_IN, STORE      // 0 >in !
1080+ 2D29 48 26
1081+ 2D2B F4 24                        dw      EXIT                    // ;
1082+ 2D2D
1083+ 2D2D              //  ______________________________________________________________________
1084+ 2D2D              //
1085+ 2D2D              // fill        a n c --
1086+ 2D2D              // If n > 0, fills n locations starting from address a with the value c.
1087+ 2D2D                              New_Def FILL, "FILL", is_code, is_normal
1087+ 2D2D             >
1087+ 2D2D             >Dict_Ptr        defl    $
1087+ 2D2D             >
1087+ 2D2D             >//              ______________________________________________________________________
1087+ 2D2D             >//              Heap part
1087+ 2D2D             >
1087+ 2D2D             >
1087+ 2D2D             >                org     (Heap_Ptr & $1FFF) + $E000
1087+ E7F8             >
1087+ E7F8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1087+ E7F8             >Latest_Definition defl  Heap_Ptr
1087+ E7F8             >
1087+ E7F8             >                // dummy db directives used to calculate length of namec
1087+ E7F8 46 49 4C 4C >                db      "FILL"
1087+ E7FC             >len_NFA         defl    $ - temp_NFA
1087+ E7FC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1087+ E7F8             >
1087+ E7F8 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1087+ E7F9 46 49 4C 4C >                db      "FILL"               // name string in 7-bit ascii, but
1087+ E7FD             >                org     $-1                 // alter last byte of Name just above to set
1087+ E7FC CC          >                db      {b $} | END_BIT     // msb as name end
1087+ E7FD             >
1087+ E7FD EE 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1087+ E7FF             >Prev_Ptr        defl    Heap_Ptr
1087+ E7FF             >
1087+ E7FF             >mirror_Ptr      defl    $
1087+ E7FF             >
1087+ E7FF 2F 2D       >                dw      Dict_Ptr + 2        // xt
1087+ E801             >Heap_Ptr        defl    $ - $E000           // save current HP
1087+ E801             >
1087+ E801             >Current_HP      defl  $ - $E000             // used to set HP once!
1087+ E801             >
1087+ E801             >//              ______________________________________________________________________
1087+ E801             >//              Dictionary part
1087+ E801             >
1087+ E801             >                org     Dict_Ptr
1087+ 2D2D             >
1087+ 2D2D FF 07       >                dw      mirror_Ptr - $E000 + Heap_offset
1087+ 2D2F             >
1087+ 2D2F             >FILL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1087+ 2D2F ~           >                call    runcode ; ok        // for primitive definitions  actual code
1087+ 2D2F ~           >
1087+ 2D2F ~           >
1087+ 2D2F             >                endif           ; ok        // for other definitions it "points" the correct handler
1087+ 2D2F             >                // Use of "; ok" to suppress "warning[fwdref]"
1087+ 2D2F             >
1087+ 2D2F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1088+ 2D2F D9                           exx
1089+ 2D30 D1                           pop     de                  // de has character
1090+ 2D31 C1                           pop     bc                  // bc has counter
1091+ 2D32 E1                           pop     hl                  // hl has address, save Instruction Pointer
1092+ 2D33              Fill_Loop:
1093+ 2D33 78                               ld      a, b
1094+ 2D34 B1                               or      c
1095+ 2D35 28 05                        jr      z, Fill_While_End
1096+ 2D37 73                               ld      (hl), e
1097+ 2D38 0B                               dec     bc
1098+ 2D39 23                               inc     hl
1099+ 2D3A 18 F7                        jr      Fill_Loop
1100+ 2D3C              Fill_While_End:
1101+ 2D3C D9                           exx
1102+ 2D3D                              next
1102+ 2D3D DD E9       >                jp      (ix)
1103+ 2D3F
1104+ 2D3F              //  ______________________________________________________________________
1105+ 2D3F              //
1106+ 2D3F              // erase        a n --
1107+ 2D3F              // If n > 0, fills n locations starting from address a with 'nul' characters.
1108+ 2D3F                              Colon_Def ERASE, "ERASE", is_normal
1108+ 2D3F             >                New_Def  ERASE, "ERASE", Enter_Ptr, is_normal ; ok
1108+ 2D3F             >
1108+ 2D3F             >Dict_Ptr        defl    $
1108+ 2D3F             >
1108+ 2D3F             >//              ______________________________________________________________________
1108+ 2D3F             >//              Heap part
1108+ 2D3F             >
1108+ 2D3F             >
1108+ 2D3F             >                org     (Heap_Ptr & $1FFF) + $E000
1108+ E801             >
1108+ E801             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1108+ E801             >Latest_Definition defl  Heap_Ptr
1108+ E801             >
1108+ E801             >                // dummy db directives used to calculate length of namec
1108+ E801 45 52 41 53 >                db      "ERASE"
1108+ E805 45          >
1108+ E806             >len_NFA         defl    $ - temp_NFA
1108+ E806             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1108+ E801             >
1108+ E801 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1108+ E802 45 52 41 53 >                db      "ERASE"               // name string in 7-bit ascii, but
1108+ E806 45          >
1108+ E807             >                org     $-1                 // alter last byte of Name just above to set
1108+ E806 C5          >                db      {b $} | END_BIT     // msb as name end
1108+ E807             >
1108+ E807 F8 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1108+ E809             >Prev_Ptr        defl    Heap_Ptr
1108+ E809             >
1108+ E809             >mirror_Ptr      defl    $
1108+ E809             >
1108+ E809 41 2D       >                dw      Dict_Ptr + 2        // xt
1108+ E80B             >Heap_Ptr        defl    $ - $E000           // save current HP
1108+ E80B             >
1108+ E80B             >Current_HP      defl  $ - $E000             // used to set HP once!
1108+ E80B             >
1108+ E80B             >//              ______________________________________________________________________
1108+ E80B             >//              Dictionary part
1108+ E80B             >
1108+ E80B             >                org     Dict_Ptr
1108+ 2D3F             >
1108+ 2D3F 09 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1108+ 2D41             >
1108+ 2D41             >ERASE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1108+ 2D41 CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1108+ 2D44             >
1108+ 2D44             >
1108+ 2D44             >                endif           ; ok        // for other definitions it "points" the correct handler
1108+ 2D44             >                // Use of "; ok" to suppress "warning[fwdref]"
1108+ 2D44             >
1108+ 2D44             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1109+ 2D44 36 27 2F 2D                  dw      ZERO, FILL              // 0 fill
1110+ 2D48 F4 24                        dw      EXIT                    // ;
1111+ 2D4A
1112+ 2D4A              //  ______________________________________________________________________
1113+ 2D4A              //
1114+ 2D4A              // blank        a n --
1115+ 2D4A              // If n > 0, fills n locations starting from address a with 'nul' characters.
1116+ 2D4A                              Colon_Def BLANK, "BLANK", is_normal
1116+ 2D4A             >                New_Def  BLANK, "BLANK", Enter_Ptr, is_normal ; ok
1116+ 2D4A             >
1116+ 2D4A             >Dict_Ptr        defl    $
1116+ 2D4A             >
1116+ 2D4A             >//              ______________________________________________________________________
1116+ 2D4A             >//              Heap part
1116+ 2D4A             >
1116+ 2D4A             >
1116+ 2D4A             >                org     (Heap_Ptr & $1FFF) + $E000
1116+ E80B             >
1116+ E80B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1116+ E80B             >Latest_Definition defl  Heap_Ptr
1116+ E80B             >
1116+ E80B             >                // dummy db directives used to calculate length of namec
1116+ E80B 42 4C 41 4E >                db      "BLANK"
1116+ E80F 4B          >
1116+ E810             >len_NFA         defl    $ - temp_NFA
1116+ E810             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1116+ E80B             >
1116+ E80B 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1116+ E80C 42 4C 41 4E >                db      "BLANK"               // name string in 7-bit ascii, but
1116+ E810 4B          >
1116+ E811             >                org     $-1                 // alter last byte of Name just above to set
1116+ E810 CB          >                db      {b $} | END_BIT     // msb as name end
1116+ E811             >
1116+ E811 01 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1116+ E813             >Prev_Ptr        defl    Heap_Ptr
1116+ E813             >
1116+ E813             >mirror_Ptr      defl    $
1116+ E813             >
1116+ E813 4C 2D       >                dw      Dict_Ptr + 2        // xt
1116+ E815             >Heap_Ptr        defl    $ - $E000           // save current HP
1116+ E815             >
1116+ E815             >Current_HP      defl  $ - $E000             // used to set HP once!
1116+ E815             >
1116+ E815             >//              ______________________________________________________________________
1116+ E815             >//              Dictionary part
1116+ E815             >
1116+ E815             >                org     Dict_Ptr
1116+ 2D4A             >
1116+ 2D4A 13 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1116+ 2D4C             >
1116+ 2D4C             >BLANK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1116+ 2D4C CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1116+ 2D4F             >
1116+ 2D4F             >
1116+ 2D4F             >                endif           ; ok        // for other definitions it "points" the correct handler
1116+ 2D4F             >                // Use of "; ok" to suppress "warning[fwdref]"
1116+ 2D4F             >
1116+ 2D4F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1117+ 2D4F 59 27 2F 2D                  dw      BL, FILL                // bl fill
1118+ 2D53 F4 24                        dw      EXIT                    // ;
1119+ 2D55
1120+ 2D55              //  ______________________________________________________________________
1121+ 2D55              //
1122+ 2D55              // hold         c --
1123+ 2D55              // Used between <# and #> to insert a character c in numeric formatting.
1124+ 2D55                              Colon_Def HOLD, "HOLD", is_normal
1124+ 2D55             >                New_Def  HOLD, "HOLD", Enter_Ptr, is_normal ; ok
1124+ 2D55             >
1124+ 2D55             >Dict_Ptr        defl    $
1124+ 2D55             >
1124+ 2D55             >//              ______________________________________________________________________
1124+ 2D55             >//              Heap part
1124+ 2D55             >
1124+ 2D55             >
1124+ 2D55             >                org     (Heap_Ptr & $1FFF) + $E000
1124+ E815             >
1124+ E815             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1124+ E815             >Latest_Definition defl  Heap_Ptr
1124+ E815             >
1124+ E815             >                // dummy db directives used to calculate length of namec
1124+ E815 48 4F 4C 44 >                db      "HOLD"
1124+ E819             >len_NFA         defl    $ - temp_NFA
1124+ E819             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1124+ E815             >
1124+ E815 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1124+ E816 48 4F 4C 44 >                db      "HOLD"               // name string in 7-bit ascii, but
1124+ E81A             >                org     $-1                 // alter last byte of Name just above to set
1124+ E819 C4          >                db      {b $} | END_BIT     // msb as name end
1124+ E81A             >
1124+ E81A 0B 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1124+ E81C             >Prev_Ptr        defl    Heap_Ptr
1124+ E81C             >
1124+ E81C             >mirror_Ptr      defl    $
1124+ E81C             >
1124+ E81C 57 2D       >                dw      Dict_Ptr + 2        // xt
1124+ E81E             >Heap_Ptr        defl    $ - $E000           // save current HP
1124+ E81E             >
1124+ E81E             >Current_HP      defl  $ - $E000             // used to set HP once!
1124+ E81E             >
1124+ E81E             >//              ______________________________________________________________________
1124+ E81E             >//              Dictionary part
1124+ E81E             >
1124+ E81E             >                org     Dict_Ptr
1124+ 2D55             >
1124+ 2D55 1C 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1124+ 2D57             >
1124+ 2D57             >HOLD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1124+ 2D57 CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1124+ 2D5A             >
1124+ 2D5A             >
1124+ 2D5A             >                endif           ; ok        // for other definitions it "points" the correct handler
1124+ 2D5A             >                // Use of "; ok" to suppress "warning[fwdref]"
1124+ 2D5A             >
1124+ 2D5A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1125+ 2D5A 52 27                        dw      NEG_ONE                 // -1
1126+ 2D5C 25 28 26 26                  dw      HLD, PLUSSTORE          // hld +!
1127+ 2D60 25 28 3E 26                  dw      HLD, FETCH, CSTORE      // hld @ c!
1127+ 2D64 5C 26
1128+ 2D66 F4 24                        dw      EXIT                    // ;
1129+ 2D68
1130+ 2D68              //  ______________________________________________________________________
1131+ 2D68              //
1132+ 2D68              // pad         -- a
1133+ 2D68              // leaves the buffer text address. This is at a fixed distance over HERE.
1134+ 2D68                              Colon_Def PAD, "PAD", is_normal
1134+ 2D68             >                New_Def  PAD, "PAD", Enter_Ptr, is_normal ; ok
1134+ 2D68             >
1134+ 2D68             >Dict_Ptr        defl    $
1134+ 2D68             >
1134+ 2D68             >//              ______________________________________________________________________
1134+ 2D68             >//              Heap part
1134+ 2D68             >
1134+ 2D68             >
1134+ 2D68             >                org     (Heap_Ptr & $1FFF) + $E000
1134+ E81E             >
1134+ E81E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1134+ E81E             >Latest_Definition defl  Heap_Ptr
1134+ E81E             >
1134+ E81E             >                // dummy db directives used to calculate length of namec
1134+ E81E 50 41 44    >                db      "PAD"
1134+ E821             >len_NFA         defl    $ - temp_NFA
1134+ E821             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1134+ E81E             >
1134+ E81E 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1134+ E81F 50 41 44    >                db      "PAD"               // name string in 7-bit ascii, but
1134+ E822             >                org     $-1                 // alter last byte of Name just above to set
1134+ E821 C4          >                db      {b $} | END_BIT     // msb as name end
1134+ E822             >
1134+ E822 15 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1134+ E824             >Prev_Ptr        defl    Heap_Ptr
1134+ E824             >
1134+ E824             >mirror_Ptr      defl    $
1134+ E824             >
1134+ E824 6A 2D       >                dw      Dict_Ptr + 2        // xt
1134+ E826             >Heap_Ptr        defl    $ - $E000           // save current HP
1134+ E826             >
1134+ E826             >Current_HP      defl  $ - $E000             // used to set HP once!
1134+ E826             >
1134+ E826             >//              ______________________________________________________________________
1134+ E826             >//              Dictionary part
1134+ E826             >
1134+ E826             >                org     Dict_Ptr
1134+ 2D68             >
1134+ 2D68 24 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1134+ 2D6A             >
1134+ 2D6A             >PAD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1134+ 2D6A CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1134+ 2D6D             >
1134+ 2D6D             >
1134+ 2D6D             >                endif           ; ok        // for other definitions it "points" the correct handler
1134+ 2D6D             >                // Use of "; ok" to suppress "warning[fwdref]"
1134+ 2D6D             >
1134+ 2D6D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1135+ 2D6D 5B 28                        dw      HERE                    // here
1136+ 2D6F 3D 20 44 00                  dw      LIT, 68                 // 68
1137+ 2D73 47 25                        dw      PLUS                    // +
1138+ 2D75 F4 24                        dw      EXIT                    // ;
1139+ 2D77
1140+ 2D77              //  ______________________________________________________________________
1141+ 2D77              //
1142+ 2D77              // word         c -- a
1143+ 2D77              // reads characters from input streams until it encouners a c delimiter.
1144+ 2D77              // Stores that packet so it starts from HERE
1145+ 2D77              // WORD leaves a counter as first byte and ends the packet with two spaces.
1146+ 2D77              // Other occurrences of c are ignored.
1147+ 2D77              // If BLK is zero, text is taken from terminal buffer TIB.
1148+ 2D77              // Otherwise text is taken from the disk-block given by BLK.
1149+ 2D77              // "in" variable is incremented of the number of character read.
1150+ 2D77              // The number of characters read is given by ENCLOSE.
1151+ 2D77                              Colon_Def WORD, "WORD", is_normal
1151+ 2D77             >                New_Def  WORD, "WORD", Enter_Ptr, is_normal ; ok
1151+ 2D77             >
1151+ 2D77             >Dict_Ptr        defl    $
1151+ 2D77             >
1151+ 2D77             >//              ______________________________________________________________________
1151+ 2D77             >//              Heap part
1151+ 2D77             >
1151+ 2D77             >
1151+ 2D77             >                org     (Heap_Ptr & $1FFF) + $E000
1151+ E826             >
1151+ E826             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1151+ E826             >Latest_Definition defl  Heap_Ptr
1151+ E826             >
1151+ E826             >                // dummy db directives used to calculate length of namec
1151+ E826 57 4F 52 44 >                db      "WORD"
1151+ E82A             >len_NFA         defl    $ - temp_NFA
1151+ E82A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1151+ E826             >
1151+ E826 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1151+ E827 57 4F 52 44 >                db      "WORD"               // name string in 7-bit ascii, but
1151+ E82B             >                org     $-1                 // alter last byte of Name just above to set
1151+ E82A C4          >                db      {b $} | END_BIT     // msb as name end
1151+ E82B             >
1151+ E82B 1E 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1151+ E82D             >Prev_Ptr        defl    Heap_Ptr
1151+ E82D             >
1151+ E82D             >mirror_Ptr      defl    $
1151+ E82D             >
1151+ E82D 79 2D       >                dw      Dict_Ptr + 2        // xt
1151+ E82F             >Heap_Ptr        defl    $ - $E000           // save current HP
1151+ E82F             >
1151+ E82F             >Current_HP      defl  $ - $E000             // used to set HP once!
1151+ E82F             >
1151+ E82F             >//              ______________________________________________________________________
1151+ E82F             >//              Dictionary part
1151+ E82F             >
1151+ E82F             >                org     Dict_Ptr
1151+ 2D77             >
1151+ 2D77 2D 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1151+ 2D79             >
1151+ 2D79             >WORD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1151+ 2D79 CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1151+ 2D7C             >
1151+ 2D7C             >
1151+ 2D7C             >                endif           ; ok        // for other definitions it "points" the correct handler
1151+ 2D7C             >                // Use of "; ok" to suppress "warning[fwdref]"
1151+ 2D7C             >
1151+ 2D7C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1152+ 2D7C D7 27 3E 26                  dw      BLK, FETCH              // blk @
1153+ 2D80                                                              // if
1154+ 2D80 8F 20                        dw      ZBRANCH
1155+ 2D82 0C 00                        dw      Word_Else - $
1156+ 2D84 D7 27 3E 26                  dw          BLK, FETCH          //      blk @
1157+ 2D88 4B 37                        dw          BLOCK               //      block ( forward )
1158+ 2D8A                                                              // else
1159+ 2D8A 82 20                        dw      BRANCH
1160+ 2D8C 06 00                        dw      Word_Endif - $
1161+ 2D8E              Word_Else:
1162+ 2D8E 9B 27 3E 26                  dw         TIB, FETCH           //      tib @
1163+ 2D92              Word_Endif:                                     // endif
1164+ 2D92 DD 27 3E 26                  dw      TO_IN, FETCH, PLUS      // >in @ +
1164+ 2D96 47 25
1165+ 2D98 C6 25 C3 21                  dw      SWAP, ENCLOSE           // swap enclose
1166+ 2D9C 5B 28 3D 20                  dw      HERE, LIT, 34, BLANK    // here 34 blank
1166+ 2DA0 22 00 4C 2D
1167+ 2DA4 DD 27 26 26                  dw      TO_IN, PLUSSTORE        // >in @ +
1168+ 2DA8 A9 25 9A 28                  dw      OVER, SUBTRACT, TO_R    // over - >r
1168+ 2DAC FE 24
1169+ 2DAE 14 25 5B 28                  dw      R_OP, HERE, CSTORE      // r here c!
1169+ 2DB2 5C 26
1170+ 2DB4 47 25                        dw      PLUS                    // +
1171+ 2DB6 5B 28 60 25                  dw      HERE, ONE_PLUS, R_TO    // here 1+ r>
1171+ 2DBA 09 25
1172+ 2DBC 35 24                        dw      CMOVE                   // cmove
1173+ 2DBE 5B 28                        dw      HERE                    // here
1174+ 2DC0 F4 24                        dw      EXIT                    // ;
1175+ 2DC2
1176+ 2DC2              //  ______________________________________________________________________
1177+ 2DC2              //
1178+ 2DC2              // (.")         --
1179+ 2DC2              // Direct procedure compiled by ." and  .(  It executes TYPE.
1180+ 2DC2                              Colon_Def C_DOT_QUOTE, '(.")', is_normal
1180+ 2DC2             >                New_Def  C_DOT_QUOTE, '(.")', Enter_Ptr, is_normal ; ok
1180+ 2DC2             >
1180+ 2DC2             >Dict_Ptr        defl    $
1180+ 2DC2             >
1180+ 2DC2             >//              ______________________________________________________________________
1180+ 2DC2             >//              Heap part
1180+ 2DC2             >
1180+ 2DC2             >
1180+ 2DC2             >                org     (Heap_Ptr & $1FFF) + $E000
1180+ E82F             >
1180+ E82F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1180+ E82F             >Latest_Definition defl  Heap_Ptr
1180+ E82F             >
1180+ E82F             >                // dummy db directives used to calculate length of namec
1180+ E82F 28 2E 22 29 >                db      '(.")'
1180+ E833             >len_NFA         defl    $ - temp_NFA
1180+ E833             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1180+ E82F             >
1180+ E82F 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1180+ E830 28 2E 22 29 >                db      '(.")'               // name string in 7-bit ascii, but
1180+ E834             >                org     $-1                 // alter last byte of Name just above to set
1180+ E833 A9          >                db      {b $} | END_BIT     // msb as name end
1180+ E834             >
1180+ E834 26 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1180+ E836             >Prev_Ptr        defl    Heap_Ptr
1180+ E836             >
1180+ E836             >mirror_Ptr      defl    $
1180+ E836             >
1180+ E836 C4 2D       >                dw      Dict_Ptr + 2        // xt
1180+ E838             >Heap_Ptr        defl    $ - $E000           // save current HP
1180+ E838             >
1180+ E838             >Current_HP      defl  $ - $E000             // used to set HP once!
1180+ E838             >
1180+ E838             >//              ______________________________________________________________________
1180+ E838             >//              Dictionary part
1180+ E838             >
1180+ E838             >                org     Dict_Ptr
1180+ 2DC2             >
1180+ 2DC2 36 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1180+ 2DC4             >
1180+ 2DC4             >C_DOT_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1180+ 2DC4 CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1180+ 2DC7             >
1180+ 2DC7             >
1180+ 2DC7             >                endif           ; ok        // for other definitions it "points" the correct handler
1180+ 2DC7             >                // Use of "; ok" to suppress "warning[fwdref]"
1180+ 2DC7             >
1180+ 2DC7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1181+ 2DC7 14 25 D3 2B                  dw      R_OP, COUNT             // r count
1182+ 2DCB CD 25 60 25                  dw      DUP, ONE_PLUS           // dup 1+
1183+ 2DCF 09 25 47 25                  dw      R_TO, PLUS, TO_R        // r> + >r  ( advance IP )
1183+ 2DD3 FE 24
1184+ 2DD5 27 2C                        dw      TYPE                    // type
1185+ 2DD7 F4 24                        dw      EXIT                    // ;
1186+ 2DD9
1187+ 2DD9              //  ______________________________________________________________________
1188+ 2DD9              //
1189+ 2DD9              // char         -- c
1190+ 2DD9              // get first character from next input word
1191+ 2DD9                              Colon_Def CHAR,  "CHAR", is_normal
1191+ 2DD9             >                New_Def  CHAR, "CHAR", Enter_Ptr, is_normal ; ok
1191+ 2DD9             >
1191+ 2DD9             >Dict_Ptr        defl    $
1191+ 2DD9             >
1191+ 2DD9             >//              ______________________________________________________________________
1191+ 2DD9             >//              Heap part
1191+ 2DD9             >
1191+ 2DD9             >
1191+ 2DD9             >                org     (Heap_Ptr & $1FFF) + $E000
1191+ E838             >
1191+ E838             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1191+ E838             >Latest_Definition defl  Heap_Ptr
1191+ E838             >
1191+ E838             >                // dummy db directives used to calculate length of namec
1191+ E838 43 48 41 52 >                db      "CHAR"
1191+ E83C             >len_NFA         defl    $ - temp_NFA
1191+ E83C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1191+ E838             >
1191+ E838 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1191+ E839 43 48 41 52 >                db      "CHAR"               // name string in 7-bit ascii, but
1191+ E83D             >                org     $-1                 // alter last byte of Name just above to set
1191+ E83C D2          >                db      {b $} | END_BIT     // msb as name end
1191+ E83D             >
1191+ E83D 2F 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1191+ E83F             >Prev_Ptr        defl    Heap_Ptr
1191+ E83F             >
1191+ E83F             >mirror_Ptr      defl    $
1191+ E83F             >
1191+ E83F DB 2D       >                dw      Dict_Ptr + 2        // xt
1191+ E841             >Heap_Ptr        defl    $ - $E000           // save current HP
1191+ E841             >
1191+ E841             >Current_HP      defl  $ - $E000             // used to set HP once!
1191+ E841             >
1191+ E841             >//              ______________________________________________________________________
1191+ E841             >//              Dictionary part
1191+ E841             >
1191+ E841             >                org     Dict_Ptr
1191+ 2DD9             >
1191+ 2DD9 3F 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1191+ 2DDB             >
1191+ 2DDB             >CHAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1191+ 2DDB CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1191+ 2DDE             >
1191+ 2DDE             >
1191+ 2DDE             >                endif           ; ok        // for other definitions it "points" the correct handler
1191+ 2DDE             >                // Use of "; ok" to suppress "warning[fwdref]"
1191+ 2DDE             >
1191+ 2DDE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1192+ 2DDE 59 27 79 2D                  dw      BL, WORD                // bl word
1193+ 2DE2 60 25 53 26                  dw      ONE_PLUS, CFETCH        // 1+ c@
1194+ 2DE6 F4 24                        dw      EXIT                    // ;
1195+ 2DE8
1196+ 2DE8              //  ______________________________________________________________________
1197+ 2DE8              //
1198+ 2DE8              // ,"           --
1199+ 2DE8              // compiles a string terminated by " as a counted string from next input stream
1200+ 2DE8                              Colon_Def COMMA_QUOTE,  ',"', is_normal
1200+ 2DE8             >                New_Def  COMMA_QUOTE, ',"', Enter_Ptr, is_normal ; ok
1200+ 2DE8             >
1200+ 2DE8             >Dict_Ptr        defl    $
1200+ 2DE8             >
1200+ 2DE8             >//              ______________________________________________________________________
1200+ 2DE8             >//              Heap part
1200+ 2DE8             >
1200+ 2DE8             >
1200+ 2DE8             >                org     (Heap_Ptr & $1FFF) + $E000
1200+ E841             >
1200+ E841             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1200+ E841             >Latest_Definition defl  Heap_Ptr
1200+ E841             >
1200+ E841             >                // dummy db directives used to calculate length of namec
1200+ E841 2C 22       >                db      ',"'
1200+ E843             >len_NFA         defl    $ - temp_NFA
1200+ E843             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1200+ E841             >
1200+ E841 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1200+ E842 2C 22       >                db      ',"'               // name string in 7-bit ascii, but
1200+ E844             >                org     $-1                 // alter last byte of Name just above to set
1200+ E843 A2          >                db      {b $} | END_BIT     // msb as name end
1200+ E844             >
1200+ E844 38 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1200+ E846             >Prev_Ptr        defl    Heap_Ptr
1200+ E846             >
1200+ E846             >mirror_Ptr      defl    $
1200+ E846             >
1200+ E846 EA 2D       >                dw      Dict_Ptr + 2        // xt
1200+ E848             >Heap_Ptr        defl    $ - $E000           // save current HP
1200+ E848             >
1200+ E848             >Current_HP      defl  $ - $E000             // used to set HP once!
1200+ E848             >
1200+ E848             >//              ______________________________________________________________________
1200+ E848             >//              Dictionary part
1200+ E848             >
1200+ E848             >                org     Dict_Ptr
1200+ 2DE8             >
1200+ 2DE8 46 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1200+ 2DEA             >
1200+ 2DEA             >COMMA_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1200+ 2DEA CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1200+ 2DED             >
1200+ 2DED             >
1200+ 2DED             >                endif           ; ok        // for other definitions it "points" the correct handler
1200+ 2DED             >                // Use of "; ok" to suppress "warning[fwdref]"
1200+ 2DED             >
1200+ 2DED             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1201+ 2DED 3D 20 22 00                  dw      LIT, DQUOTE_CHAR        // [char] "
1202+ 2DF1 79 2D                        dw      WORD                    // word
1203+ 2DF3 53 26 60 25                  dw      CFETCH, ONE_PLUS        // c@ 1+
1204+ 2DF7 66 28                        dw      ALLOT                   // allot
1205+ 2DF9 36 27 80 28                  dw      ZERO, CCOMMA            // 0 c,  ( nul-terminated string - useful anyway )
1206+ 2DFD F4 24                        dw      EXIT
1207+ 2DFF
1208+ 2DFF              //  ______________________________________________________________________
1209+ 2DFF              //
1210+ 2DFF              // .c           c --
1211+ 2DFF              // intermediate general purpose string builder, used by ." and .(
1212+ 2DFF                              Colon_Def DOT_C,  ".C", is_immediate
1212+ 2DFF             >                New_Def  DOT_C, ".C", Enter_Ptr, is_immediate ; ok
1212+ 2DFF             >
1212+ 2DFF             >Dict_Ptr        defl    $
1212+ 2DFF             >
1212+ 2DFF             >//              ______________________________________________________________________
1212+ 2DFF             >//              Heap part
1212+ 2DFF             >
1212+ 2DFF             >
1212+ 2DFF             >                org     (Heap_Ptr & $1FFF) + $E000
1212+ E848             >
1212+ E848             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1212+ E848             >Latest_Definition defl  Heap_Ptr
1212+ E848             >
1212+ E848             >                // dummy db directives used to calculate length of namec
1212+ E848 2E 43       >                db      ".C"
1212+ E84A             >len_NFA         defl    $ - temp_NFA
1212+ E84A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1212+ E848             >
1212+ E848 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1212+ E849 2E 43       >                db      ".C"               // name string in 7-bit ascii, but
1212+ E84B             >                org     $-1                 // alter last byte of Name just above to set
1212+ E84A C3          >                db      {b $} | END_BIT     // msb as name end
1212+ E84B             >
1212+ E84B 41 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1212+ E84D             >Prev_Ptr        defl    Heap_Ptr
1212+ E84D             >
1212+ E84D             >mirror_Ptr      defl    $
1212+ E84D             >
1212+ E84D 01 2E       >                dw      Dict_Ptr + 2        // xt
1212+ E84F             >Heap_Ptr        defl    $ - $E000           // save current HP
1212+ E84F             >
1212+ E84F             >Current_HP      defl  $ - $E000             // used to set HP once!
1212+ E84F             >
1212+ E84F             >//              ______________________________________________________________________
1212+ E84F             >//              Dictionary part
1212+ E84F             >
1212+ E84F             >                org     Dict_Ptr
1212+ 2DFF             >
1212+ 2DFF 4D 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1212+ 2E01             >
1212+ 2E01             >DOT_C:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1212+ 2E01 CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1212+ 2E04             >
1212+ 2E04             >
1212+ 2E04             >                endif           ; ok        // for other definitions it "points" the correct handler
1212+ 2E04             >                // Use of "; ok" to suppress "warning[fwdref]"
1212+ 2E04             >
1212+ 2E04             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1213+ 2E04 01 28 3E 26                  dw      STATE, FETCH            // state @
1214+ 2E08                                                              // if
1215+ 2E08 8F 20                        dw      ZBRANCH
1216+ 2E0A 12 00                        dw      Dot_C_Else - $
1217+ 2E0C 07 2B C4 2D                  dw          COMPILE, C_DOT_QUOTE //     compile (.")
1218+ 2E10 79 2D 53 26                  dw          WORD, CFETCH        //      word c@
1219+ 2E14 60 25 66 28                  dw          ONE_PLUS, ALLOT     //      1+ allot
1220+ 2E18                                                              // else
1221+ 2E18 82 20                        dw      BRANCH
1222+ 2E1A 08 00                        dw      Dot_C_Endif - $
1223+ 2E1C              Dot_C_Else:
1224+ 2E1C 79 2D D3 2B                  dw          WORD, COUNT, TYPE   //      word count type
1224+ 2E20 27 2C
1225+ 2E22              Dot_C_Endif:                                    // endif
1226+ 2E22 F4 24                        dw      EXIT                    ;
1227+ 2E24
1228+ 2E24              //  ______________________________________________________________________
1229+ 2E24              //
1230+ 2E24              // ."           c --
1231+ 2E24                              Colon_Def DOT_QUOTE,  '."', is_immediate
1231+ 2E24             >                New_Def  DOT_QUOTE, '."', Enter_Ptr, is_immediate ; ok
1231+ 2E24             >
1231+ 2E24             >Dict_Ptr        defl    $
1231+ 2E24             >
1231+ 2E24             >//              ______________________________________________________________________
1231+ 2E24             >//              Heap part
1231+ 2E24             >
1231+ 2E24             >
1231+ 2E24             >                org     (Heap_Ptr & $1FFF) + $E000
1231+ E84F             >
1231+ E84F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1231+ E84F             >Latest_Definition defl  Heap_Ptr
1231+ E84F             >
1231+ E84F             >                // dummy db directives used to calculate length of namec
1231+ E84F 2E 22       >                db      '."'
1231+ E851             >len_NFA         defl    $ - temp_NFA
1231+ E851             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1231+ E84F             >
1231+ E84F C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1231+ E850 2E 22       >                db      '."'               // name string in 7-bit ascii, but
1231+ E852             >                org     $-1                 // alter last byte of Name just above to set
1231+ E851 A2          >                db      {b $} | END_BIT     // msb as name end
1231+ E852             >
1231+ E852 48 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1231+ E854             >Prev_Ptr        defl    Heap_Ptr
1231+ E854             >
1231+ E854             >mirror_Ptr      defl    $
1231+ E854             >
1231+ E854 26 2E       >                dw      Dict_Ptr + 2        // xt
1231+ E856             >Heap_Ptr        defl    $ - $E000           // save current HP
1231+ E856             >
1231+ E856             >Current_HP      defl  $ - $E000             // used to set HP once!
1231+ E856             >
1231+ E856             >//              ______________________________________________________________________
1231+ E856             >//              Dictionary part
1231+ E856             >
1231+ E856             >                org     Dict_Ptr
1231+ 2E24             >
1231+ 2E24 54 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1231+ 2E26             >
1231+ 2E26             >DOT_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1231+ 2E26 CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1231+ 2E29             >
1231+ 2E29             >
1231+ 2E29             >                endif           ; ok        // for other definitions it "points" the correct handler
1231+ 2E29             >                // Use of "; ok" to suppress "warning[fwdref]"
1231+ 2E29             >
1231+ 2E29             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1232+ 2E29 3D 20 22 00                  dw      LIT, DQUOTE_CHAR        // [char] "
1233+ 2E2D 01 2E                        dw      DOT_C                   // [compile] .c
1234+ 2E2F F4 24                        dw      EXIT                    // ; immediate
1235+ 2E31
1236+ 2E31              //  ______________________________________________________________________
1237+ 2E31              //
1238+ 2E31              // .(           c --
1239+ 2E31                              Colon_Def DOT_BRACKET,  ".(", is_immediate
1239+ 2E31             >                New_Def  DOT_BRACKET, ".(", Enter_Ptr, is_immediate ; ok
1239+ 2E31             >
1239+ 2E31             >Dict_Ptr        defl    $
1239+ 2E31             >
1239+ 2E31             >//              ______________________________________________________________________
1239+ 2E31             >//              Heap part
1239+ 2E31             >
1239+ 2E31             >
1239+ 2E31             >                org     (Heap_Ptr & $1FFF) + $E000
1239+ E856             >
1239+ E856             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1239+ E856             >Latest_Definition defl  Heap_Ptr
1239+ E856             >
1239+ E856             >                // dummy db directives used to calculate length of namec
1239+ E856 2E 28       >                db      ".("
1239+ E858             >len_NFA         defl    $ - temp_NFA
1239+ E858             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1239+ E856             >
1239+ E856 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1239+ E857 2E 28       >                db      ".("               // name string in 7-bit ascii, but
1239+ E859             >                org     $-1                 // alter last byte of Name just above to set
1239+ E858 A8          >                db      {b $} | END_BIT     // msb as name end
1239+ E859             >
1239+ E859 4F 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1239+ E85B             >Prev_Ptr        defl    Heap_Ptr
1239+ E85B             >
1239+ E85B             >mirror_Ptr      defl    $
1239+ E85B             >
1239+ E85B 33 2E       >                dw      Dict_Ptr + 2        // xt
1239+ E85D             >Heap_Ptr        defl    $ - $E000           // save current HP
1239+ E85D             >
1239+ E85D             >Current_HP      defl  $ - $E000             // used to set HP once!
1239+ E85D             >
1239+ E85D             >//              ______________________________________________________________________
1239+ E85D             >//              Dictionary part
1239+ E85D             >
1239+ E85D             >                org     Dict_Ptr
1239+ 2E31             >
1239+ 2E31 5B 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1239+ 2E33             >
1239+ 2E33             >DOT_BRACKET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1239+ 2E33 CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1239+ 2E36             >
1239+ 2E36             >
1239+ 2E36             >                endif           ; ok        // for other definitions it "points" the correct handler
1239+ 2E36             >                // Use of "; ok" to suppress "warning[fwdref]"
1239+ 2E36             >
1239+ 2E36             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1240+ 2E36 3D 20 29 00                  dw      LIT, ")"                // [char] )
1241+ 2E3A 01 2E                        dw      DOT_C                   // [compile] .c
1242+ 2E3C F4 24                        dw      EXIT                    // ; immediate
1243+ 2E3E
1244+ 2E3E              //  ______________________________________________________________________
1245+ 2E3E              //
1246+ 2E3E              // (sgn)        a -- a f
1247+ 2E3E              // determines if char in addr a is a sign (+ or -), and in that case increments
1248+ 2E3E              // a flag. Returns f as the sign, true for negative, false for positive.
1249+ 2E3E              // called by NUMBER and (EXP)
1250+ 2E3E                              Colon_Def CSGN,  "(SGN)", is_normal
1250+ 2E3E             >                New_Def  CSGN, "(SGN)", Enter_Ptr, is_normal ; ok
1250+ 2E3E             >
1250+ 2E3E             >Dict_Ptr        defl    $
1250+ 2E3E             >
1250+ 2E3E             >//              ______________________________________________________________________
1250+ 2E3E             >//              Heap part
1250+ 2E3E             >
1250+ 2E3E             >
1250+ 2E3E             >                org     (Heap_Ptr & $1FFF) + $E000
1250+ E85D             >
1250+ E85D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1250+ E85D             >Latest_Definition defl  Heap_Ptr
1250+ E85D             >
1250+ E85D             >                // dummy db directives used to calculate length of namec
1250+ E85D 28 53 47 4E >                db      "(SGN)"
1250+ E861 29          >
1250+ E862             >len_NFA         defl    $ - temp_NFA
1250+ E862             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1250+ E85D             >
1250+ E85D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1250+ E85E 28 53 47 4E >                db      "(SGN)"               // name string in 7-bit ascii, but
1250+ E862 29          >
1250+ E863             >                org     $-1                 // alter last byte of Name just above to set
1250+ E862 A9          >                db      {b $} | END_BIT     // msb as name end
1250+ E863             >
1250+ E863 56 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1250+ E865             >Prev_Ptr        defl    Heap_Ptr
1250+ E865             >
1250+ E865             >mirror_Ptr      defl    $
1250+ E865             >
1250+ E865 40 2E       >                dw      Dict_Ptr + 2        // xt
1250+ E867             >Heap_Ptr        defl    $ - $E000           // save current HP
1250+ E867             >
1250+ E867             >Current_HP      defl  $ - $E000             // used to set HP once!
1250+ E867             >
1250+ E867             >//              ______________________________________________________________________
1250+ E867             >//              Dictionary part
1250+ E867             >
1250+ E867             >                org     Dict_Ptr
1250+ 2E3E             >
1250+ 2E3E 65 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1250+ 2E40             >
1250+ 2E40             >CSGN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1250+ 2E40 CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1250+ 2E43             >
1250+ 2E43             >
1250+ 2E43             >                endif           ; ok        // for other definitions it "points" the correct handler
1250+ 2E43             >                // Use of "; ok" to suppress "warning[fwdref]"
1250+ 2E43             >
1250+ 2E43             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1251+ 2E43 CD 25 60 25                  dw      DUP, ONE_PLUS, CFETCH   // dup 1+ c@
1251+ 2E47 53 26
1252+ 2E49 CD 25 3D 20                  dw      DUP, LIT, "-", EQUALS   // dup [char] - =
1252+ 2E4D 2D 00 A6 28
1253+ 2E51                                                              // if
1254+ 2E51 8F 20                        dw      ZBRANCH
1255+ 2E53 12 00                        dw      CSgn_Else_0 - $
1256+ 2E55 B2 25                        dw          DROP                //      drop
1257+ 2E57 60 25                        dw          ONE_PLUS            //      1+
1258+ 2E59 3D 27 0D 28                  dw          ONE, DPL, PLUSSTORE //      1 dpl +!
1258+ 2E5D 26 26
1259+ 2E5F 3D 27                        dw          ONE                 //      1
1260+ 2E61                                                              // else
1261+ 2E61 82 20                        dw      BRANCH
1262+ 2E63 16 00                        dw      CSgn_Endif_0 - $
1263+ 2E65              CSgn_Else_0:
1264+ 2E65 3D 20 2B 00                  dw          LIT, "+", EQUALS    //      [char] + =
1264+ 2E69 A6 28
1265+ 2E6B                                                              //      if
1266+ 2E6B 8F 20                        dw          ZBRANCH
1267+ 2E6D 0A 00                        dw          CSgn_Endif_1 - $
1268+ 2E6F 60 25                        dw              ONE_PLUS        //          1+
1269+ 2E71 3D 27 0D 28                  dw              ONE, DPL        //          1 dpl
1270+ 2E75 26 26                        dw              PLUSSTORE       //          +!
1271+ 2E77              CSgn_Endif_1                                    //      endif
1272+ 2E77 36 27                        dw          ZERO                //      0
1273+ 2E79              CSgn_Endif_0:                                   // endif
1274+ 2E79 F4 24                        dw      EXIT
1275+ 2E7B
1276+ 2E7B              //  ______________________________________________________________________
1277+ 2E7B              //
1278+ 2E7B              // (number)     d a -- d1 a1
1279+ 2E7B              // using the current BASE parse characters stored in address a
1280+ 2E7B              // accumulating a double precision integer d
1281+ 2E7B              // the process stops at the first not-convertible character
1282+ 2E7B              // A double-number is kept in CPU registers as HLDE.
1283+ 2E7B              // On the stack a double number is treated as two single numbers
1284+ 2E7B              // where HL is on the top of the stack and DE is the second from top,
1285+ 2E7B              // so in the stack memory it appears as LHED.
1286+ 2E7B              // Instead, in 2VARIABLE a double number is stored as EDLH.
1287+ 2E7B                              Colon_Def CNUMBER,  "(NUMBER)", is_normal
1287+ 2E7B             >                New_Def  CNUMBER, "(NUMBER)", Enter_Ptr, is_normal ; ok
1287+ 2E7B             >
1287+ 2E7B             >Dict_Ptr        defl    $
1287+ 2E7B             >
1287+ 2E7B             >//              ______________________________________________________________________
1287+ 2E7B             >//              Heap part
1287+ 2E7B             >
1287+ 2E7B             >
1287+ 2E7B             >                org     (Heap_Ptr & $1FFF) + $E000
1287+ E867             >
1287+ E867             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1287+ E867             >Latest_Definition defl  Heap_Ptr
1287+ E867             >
1287+ E867             >                // dummy db directives used to calculate length of namec
1287+ E867 28 4E 55 4D >                db      "(NUMBER)"
1287+ E86B 42 45 52 29 >
1287+ E86F             >len_NFA         defl    $ - temp_NFA
1287+ E86F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1287+ E867             >
1287+ E867 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1287+ E868 28 4E 55 4D >                db      "(NUMBER)"               // name string in 7-bit ascii, but
1287+ E86C 42 45 52 29 >
1287+ E870             >                org     $-1                 // alter last byte of Name just above to set
1287+ E86F A9          >                db      {b $} | END_BIT     // msb as name end
1287+ E870             >
1287+ E870 5D 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1287+ E872             >Prev_Ptr        defl    Heap_Ptr
1287+ E872             >
1287+ E872             >mirror_Ptr      defl    $
1287+ E872             >
1287+ E872 7D 2E       >                dw      Dict_Ptr + 2        // xt
1287+ E874             >Heap_Ptr        defl    $ - $E000           // save current HP
1287+ E874             >
1287+ E874             >Current_HP      defl  $ - $E000             // used to set HP once!
1287+ E874             >
1287+ E874             >//              ______________________________________________________________________
1287+ E874             >//              Dictionary part
1287+ E874             >
1287+ E874             >                org     Dict_Ptr
1287+ 2E7B             >
1287+ 2E7B 72 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1287+ 2E7D             >
1287+ 2E7D             >CNUMBER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1287+ 2E7D CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1287+ 2E80             >
1287+ 2E80             >
1287+ 2E80             >                endif           ; ok        // for other definitions it "points" the correct handler
1287+ 2E80             >                // Use of "; ok" to suppress "warning[fwdref]"
1287+ 2E80             >
1287+ 2E80             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1288+ 2E80                                                              // begin
1289+ 2E80              CNumber_Begin:
1290+ 2E80 60 25                        dw          ONE_PLUS            //      1+
1291+ 2E82 CD 25 FE 24                  dw          DUP, TO_R           //      dup >r
1292+ 2E86 53 26                        dw          CFETCH              //      @
1293+ 2E88 07 28 3E 26                  dw          BASE, FETCH         //      base @
1294+ 2E8C E7 20                        dw          DIGIT               //      digit
1295+ 2E8E                                                              // while
1296+ 2E8E 8F 20                        dw      ZBRANCH
1297+ 2E90 2C 00                        dw      CNumber_While_end - $
1298+ 2E92 C6 25                        dw          SWAP                //      swap
1299+ 2E94 07 28 3E 26                  dw          BASE, FETCH         //      base @
1300+ 2E98 59 24                        dw          UM_MUL              //      um*
1301+ 2E9A B2 25 D4 25                  dw          DROP, ROT           //      drop rot
1302+ 2E9E 07 28 3E 26                  dw          BASE, FETCH         //      base @
1303+ 2EA2 59 24                        dw          UM_MUL              //      um*
1304+ 2EA4 51 25                        dw          DPLUS               //      d+
1305+ 2EA6 0D 28 3E 26                  dw          DPL, FETCH          //      dpl @
1306+ 2EAA 60 25                        dw          ONE_PLUS            //      1+
1307+ 2EAC                                                              //      if
1308+ 2EAC 8F 20                        dw          ZBRANCH
1309+ 2EAE 08 00                        dw          CNumber_Endif - $
1310+ 2EB0 3D 27 0D 28                  dw              ONE, DPL        //          1 dpl
1311+ 2EB4 26 26                        dw              PLUSSTORE       //          +!
1312+ 2EB6              CNumber_Endif:                                  //      endif
1313+ 2EB6 09 25                        dw             R_TO             //      r>  ( balance rp )
1314+ 2EB8 82 20                        dw      BRANCH
1315+ 2EBA C6 FF                        dw      CNumber_Begin - $
1316+ 2EBC              CNumber_While_end:                              // repeat
1317+ 2EBC 09 25                        dw      R_TO                    // r>  ( balance rp on exit while-repeat )
1318+ 2EBE F4 24                        dw      EXIT                    // ;
1319+ 2EC0
1320+ 2EC0              //  ______________________________________________________________________
1321+ 2EC0              //
1322+ 2EC0              // (prefix)
1323+ 2EC0                              Colon_Def CPREFIX,  "(PREFIX)", is_normal
1323+ 2EC0             >                New_Def  CPREFIX, "(PREFIX)", Enter_Ptr, is_normal ; ok
1323+ 2EC0             >
1323+ 2EC0             >Dict_Ptr        defl    $
1323+ 2EC0             >
1323+ 2EC0             >//              ______________________________________________________________________
1323+ 2EC0             >//              Heap part
1323+ 2EC0             >
1323+ 2EC0             >
1323+ 2EC0             >                org     (Heap_Ptr & $1FFF) + $E000
1323+ E874             >
1323+ E874             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1323+ E874             >Latest_Definition defl  Heap_Ptr
1323+ E874             >
1323+ E874             >                // dummy db directives used to calculate length of namec
1323+ E874 28 50 52 45 >                db      "(PREFIX)"
1323+ E878 46 49 58 29 >
1323+ E87C             >len_NFA         defl    $ - temp_NFA
1323+ E87C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1323+ E874             >
1323+ E874 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1323+ E875 28 50 52 45 >                db      "(PREFIX)"               // name string in 7-bit ascii, but
1323+ E879 46 49 58 29 >
1323+ E87D             >                org     $-1                 // alter last byte of Name just above to set
1323+ E87C A9          >                db      {b $} | END_BIT     // msb as name end
1323+ E87D             >
1323+ E87D 67 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1323+ E87F             >Prev_Ptr        defl    Heap_Ptr
1323+ E87F             >
1323+ E87F             >mirror_Ptr      defl    $
1323+ E87F             >
1323+ E87F C2 2E       >                dw      Dict_Ptr + 2        // xt
1323+ E881             >Heap_Ptr        defl    $ - $E000           // save current HP
1323+ E881             >
1323+ E881             >Current_HP      defl  $ - $E000             // used to set HP once!
1323+ E881             >
1323+ E881             >//              ______________________________________________________________________
1323+ E881             >//              Dictionary part
1323+ E881             >
1323+ E881             >                org     Dict_Ptr
1323+ 2EC0             >
1323+ 2EC0 7F 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1323+ 2EC2             >
1323+ 2EC2             >CPREFIX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1323+ 2EC2 CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1323+ 2EC5             >
1323+ 2EC5             >
1323+ 2EC5             >                endif           ; ok        // for other definitions it "points" the correct handler
1323+ 2EC5             >                // Use of "; ok" to suppress "warning[fwdref]"
1323+ 2EC5             >
1323+ 2EC5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1324+ 2EC5 CD 25 60 25                  dw      DUP, ONE_PLUS, CFETCH   // dup 1+ c@
1324+ 2EC9 53 26
1325+ 2ECB CD 25 FE 24                  dw      DUP, TO_R               // dup >r
1326+ 2ECF 3D 20 24 00                  dw      LIT, "$", EQUALS        // [char] $ =
1326+ 2ED3 A6 28
1327+ 2ED5                                                              // if
1328+ 2ED5 8F 20                        dw      ZBRANCH
1329+ 2ED7 0C 00                        dw      CPrefix_Endif_0 - $
1330+ 2ED9 60 25                        dw          ONE_PLUS            //      1+
1331+ 2EDB 3D 20 10 00                  dw          LIT, 16
1332+ 2EDF 07 28 48 26                  dw          BASE, STORE         //      16 base !
1333+ 2EE3              CPrefix_Endif_0:                                // endif
1334+ 2EE3 09 25                        dw      R_TO                    // r>
1335+ 2EE5 3D 20 25 00                  dw      LIT, "%", EQUALS        // [char] $ =
1335+ 2EE9 A6 28
1336+ 2EEB                                                              // if
1337+ 2EEB 8F 20                        dw      ZBRANCH
1338+ 2EED 0A 00                        dw      CPrefix_Endif_1 - $
1339+ 2EEF 60 25                        dw          ONE_PLUS            //      1+
1340+ 2EF1 44 27                        dw          TWO
1341+ 2EF3 07 28 48 26                  dw          BASE, STORE         //      2 base !
1342+ 2EF7              CPrefix_Endif_1:                                // endif
1343+ 2EF7 F4 24                        dw      EXIT
1344+ 2EF9
1345+ 2EF9              //  ______________________________________________________________________
1346+ 2EF9
1347+ 2EF9                              New_Def PDOM,   "PDOM", Create_Ptr, is_normal
1347+ 2EF9             >
1347+ 2EF9             >Dict_Ptr        defl    $
1347+ 2EF9             >
1347+ 2EF9             >//              ______________________________________________________________________
1347+ 2EF9             >//              Heap part
1347+ 2EF9             >
1347+ 2EF9             >
1347+ 2EF9             >                org     (Heap_Ptr & $1FFF) + $E000
1347+ E881             >
1347+ E881             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1347+ E881             >Latest_Definition defl  Heap_Ptr
1347+ E881             >
1347+ E881             >                // dummy db directives used to calculate length of namec
1347+ E881 50 44 4F 4D >                db      "PDOM"
1347+ E885             >len_NFA         defl    $ - temp_NFA
1347+ E885             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1347+ E881             >
1347+ E881 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1347+ E882 50 44 4F 4D >                db      "PDOM"               // name string in 7-bit ascii, but
1347+ E886             >                org     $-1                 // alter last byte of Name just above to set
1347+ E885 CD          >                db      {b $} | END_BIT     // msb as name end
1347+ E886             >
1347+ E886 74 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1347+ E888             >Prev_Ptr        defl    Heap_Ptr
1347+ E888             >
1347+ E888             >mirror_Ptr      defl    $
1347+ E888             >
1347+ E888 FB 2E       >                dw      Dict_Ptr + 2        // xt
1347+ E88A             >Heap_Ptr        defl    $ - $E000           // save current HP
1347+ E88A             >
1347+ E88A             >Current_HP      defl  $ - $E000             // used to set HP once!
1347+ E88A             >
1347+ E88A             >//              ______________________________________________________________________
1347+ E88A             >//              Dictionary part
1347+ E88A             >
1347+ E88A             >                org     Dict_Ptr
1347+ 2EF9             >
1347+ 2EF9 88 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1347+ 2EFB             >
1347+ 2EFB             >PDOM:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1347+ 2EFB CD C0 30    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
1347+ 2EFE             >
1347+ 2EFE             >
1347+ 2EFE             >                endif           ; ok        // for other definitions it "points" the correct handler
1347+ 2EFE             >                // Use of "; ok" to suppress "warning[fwdref]"
1347+ 2EFE             >
1347+ 2EFE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1348+ 2EFE 2C 2F 2D 3A                  db ',/-:'
1349+ 2F02
1350+ 2F02                              New_Def PCDM,   "PCDM", Create_Ptr, is_normal
1350+ 2F02             >
1350+ 2F02             >Dict_Ptr        defl    $
1350+ 2F02             >
1350+ 2F02             >//              ______________________________________________________________________
1350+ 2F02             >//              Heap part
1350+ 2F02             >
1350+ 2F02             >
1350+ 2F02             >                org     (Heap_Ptr & $1FFF) + $E000
1350+ E88A             >
1350+ E88A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1350+ E88A             >Latest_Definition defl  Heap_Ptr
1350+ E88A             >
1350+ E88A             >                // dummy db directives used to calculate length of namec
1350+ E88A 50 43 44 4D >                db      "PCDM"
1350+ E88E             >len_NFA         defl    $ - temp_NFA
1350+ E88E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1350+ E88A             >
1350+ E88A 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1350+ E88B 50 43 44 4D >                db      "PCDM"               // name string in 7-bit ascii, but
1350+ E88F             >                org     $-1                 // alter last byte of Name just above to set
1350+ E88E CD          >                db      {b $} | END_BIT     // msb as name end
1350+ E88F             >
1350+ E88F 81 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1350+ E891             >Prev_Ptr        defl    Heap_Ptr
1350+ E891             >
1350+ E891             >mirror_Ptr      defl    $
1350+ E891             >
1350+ E891 04 2F       >                dw      Dict_Ptr + 2        // xt
1350+ E893             >Heap_Ptr        defl    $ - $E000           // save current HP
1350+ E893             >
1350+ E893             >Current_HP      defl  $ - $E000             // used to set HP once!
1350+ E893             >
1350+ E893             >//              ______________________________________________________________________
1350+ E893             >//              Dictionary part
1350+ E893             >
1350+ E893             >                org     Dict_Ptr
1350+ 2F02             >
1350+ 2F02 91 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1350+ 2F04             >
1350+ 2F04             >PCDM:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1350+ 2F04 CD C0 30    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
1350+ 2F07             >
1350+ 2F07             >
1350+ 2F07             >                endif           ; ok        // for other definitions it "points" the correct handler
1350+ 2F07             >                // Use of "; ok" to suppress "warning[fwdref]"
1350+ 2F07             >
1350+ 2F07             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1351+ 2F07 2E 2E 2E 2E                  db '....'
1352+ 2F0B
1353+ 2F0B              //  ______________________________________________________________________
1354+ 2F0B              //
1355+ 2F0B              // number       a -- d
1356+ 2F0B                              Colon_Def NUMBER,  "NUMBER", is_normal
1356+ 2F0B             >                New_Def  NUMBER, "NUMBER", Enter_Ptr, is_normal ; ok
1356+ 2F0B             >
1356+ 2F0B             >Dict_Ptr        defl    $
1356+ 2F0B             >
1356+ 2F0B             >//              ______________________________________________________________________
1356+ 2F0B             >//              Heap part
1356+ 2F0B             >
1356+ 2F0B             >
1356+ 2F0B             >                org     (Heap_Ptr & $1FFF) + $E000
1356+ E893             >
1356+ E893             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1356+ E893             >Latest_Definition defl  Heap_Ptr
1356+ E893             >
1356+ E893             >                // dummy db directives used to calculate length of namec
1356+ E893 4E 55 4D 42 >                db      "NUMBER"
1356+ E897 45 52       >
1356+ E899             >len_NFA         defl    $ - temp_NFA
1356+ E899             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1356+ E893             >
1356+ E893 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1356+ E894 4E 55 4D 42 >                db      "NUMBER"               // name string in 7-bit ascii, but
1356+ E898 45 52       >
1356+ E89A             >                org     $-1                 // alter last byte of Name just above to set
1356+ E899 D2          >                db      {b $} | END_BIT     // msb as name end
1356+ E89A             >
1356+ E89A 8A 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1356+ E89C             >Prev_Ptr        defl    Heap_Ptr
1356+ E89C             >
1356+ E89C             >mirror_Ptr      defl    $
1356+ E89C             >
1356+ E89C 0D 2F       >                dw      Dict_Ptr + 2        // xt
1356+ E89E             >Heap_Ptr        defl    $ - $E000           // save current HP
1356+ E89E             >
1356+ E89E             >Current_HP      defl  $ - $E000             // used to set HP once!
1356+ E89E             >
1356+ E89E             >//              ______________________________________________________________________
1356+ E89E             >//              Dictionary part
1356+ E89E             >
1356+ E89E             >                org     Dict_Ptr
1356+ 2F0B             >
1356+ 2F0B 9C 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1356+ 2F0D             >
1356+ 2F0D             >NUMBER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1356+ 2F0D CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1356+ 2F10             >
1356+ 2F10             >
1356+ 2F10             >                endif           ; ok        // for other definitions it "points" the correct handler
1356+ 2F10             >                // Use of "; ok" to suppress "warning[fwdref]"
1356+ 2F10             >
1356+ 2F10             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1357+ 2F10 36 27 36 27                  dw      ZERO, ZERO              // 0 0
1358+ 2F14 D4 25                        dw      ROT                     // rot
1359+ 2F16 40 2E FE 24                  dw      CSGN, TO_R              // (sgn) >r
1360+ 2F1A 07 28 3E 26                  dw      BASE, FETCH, TO_R       // base @ >r  // ***
1360+ 2F1E FE 24
1361+ 2F20 C2 2E                        dw      CPREFIX                 // (prefix)   // ***
1362+ 2F22 52 27 0D 28                  dw      NEG_ONE, DPL, STORE     // -1 dpl !
1362+ 2F26 48 26
1363+ 2F28 7D 2E                        dw      CNUMBER                 // (number)
1364+ 2F2A              Number_Begin:                                   // begin
1365+ 2F2A CD 25 53 26                  dw        DUP, CFETCH             // dup c@
1366+ 2F2E FE 24                        dw        TO_R                    // >r
1367+ 2F30 04 2F FB 2E                  dw        PCDM, PDOM, LIT, 4      // pcdm pdom 4
1367+ 2F34 3D 20 04 00
1368+ 2F38 09 25                        dw        R_TO                    // r>
1369+ 2F3A F5 21                        dw        C_MAP                   // (map)
1370+ 2F3C 36 27 C6 25                  dw        ZERO, SWAP              // 0 swap
1371+ 2F40 3D 20 2E 00                  dw        LIT, ".", EQUALS        // [char] . =  ( decimal point )
1371+ 2F44 A6 28
1372+ 2F46
1373+ 2F46 8F 20                        dw        ZBRANCH                 // if
1374+ 2F48 0A 00                        dw        Number_Endif_1 - $
1375+ 2F4A 36 27 0D 28                  dw          ZERO, DPL, STORE        //      0 dpl !
1375+ 2F4E 48 26
1376+ 2F50 60 25                        dw          ONE_PLUS                //      1+
1377+ 2F52              Number_Endif_1:                                   // endif
1378+ 2F52
1379+ 2F52 8F 20                        dw      ZBRANCH                // while
1380+ 2F54 08 00                        dw      Number_While_end - $
1381+ 2F56 7D 2E                        dw        CNUMBER                 // (number)
1382+ 2F58 82 20                        dw      BRANCH
1383+ 2F5A D0 FF                        dw      Number_Begin - $
1384+ 2F5C              Number_While_end:                               // repeat
1385+ 2F5C
1386+ 2F5C 53 26 59 27                  dw      CFETCH, BL              // c@ bl
1387+ 2F60 9A 28 36 27                  dw      SUBTRACT, ZERO, QERROR  // - 0 ?error
1387+ 2F64 97 2A
1388+ 2F66 09 25 07 28                  dw      R_TO, BASE, STORE       // r> base !  // ***
1388+ 2F6A 48 26
1389+ 2F6C 09 25                        dw      R_TO                    // r>
1390+ 2F6E                                                              // if
1391+ 2F6E 8F 20                        dw      ZBRANCH
1392+ 2F70 04 00                        dw      Number_Endif_2 - $
1393+ 2F72 96 25                        dw          DMINUS              //      dminus
1394+ 2F74              Number_Endif_2:                                 // endif
1395+ 2F74 F4 24                        dw      EXIT                    // ;
1396+ 2F76
1397+ 2F76              //  ______________________________________________________________________
1398+ 2F76              //
1399+ 2F76              // twofind      a -- d
1400+ 2F76                              Colon_Def TWOFIND,  "2FIND", is_normal
1400+ 2F76             >                New_Def  TWOFIND, "2FIND", Enter_Ptr, is_normal ; ok
1400+ 2F76             >
1400+ 2F76             >Dict_Ptr        defl    $
1400+ 2F76             >
1400+ 2F76             >//              ______________________________________________________________________
1400+ 2F76             >//              Heap part
1400+ 2F76             >
1400+ 2F76             >
1400+ 2F76             >                org     (Heap_Ptr & $1FFF) + $E000
1400+ E89E             >
1400+ E89E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1400+ E89E             >Latest_Definition defl  Heap_Ptr
1400+ E89E             >
1400+ E89E             >                // dummy db directives used to calculate length of namec
1400+ E89E 32 46 49 4E >                db      "2FIND"
1400+ E8A2 44          >
1400+ E8A3             >len_NFA         defl    $ - temp_NFA
1400+ E8A3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1400+ E89E             >
1400+ E89E 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1400+ E89F 32 46 49 4E >                db      "2FIND"               // name string in 7-bit ascii, but
1400+ E8A3 44          >
1400+ E8A4             >                org     $-1                 // alter last byte of Name just above to set
1400+ E8A3 C4          >                db      {b $} | END_BIT     // msb as name end
1400+ E8A4             >
1400+ E8A4 93 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1400+ E8A6             >Prev_Ptr        defl    Heap_Ptr
1400+ E8A6             >
1400+ E8A6             >mirror_Ptr      defl    $
1400+ E8A6             >
1400+ E8A6 78 2F       >                dw      Dict_Ptr + 2        // xt
1400+ E8A8             >Heap_Ptr        defl    $ - $E000           // save current HP
1400+ E8A8             >
1400+ E8A8             >Current_HP      defl  $ - $E000             // used to set HP once!
1400+ E8A8             >
1400+ E8A8             >//              ______________________________________________________________________
1400+ E8A8             >//              Dictionary part
1400+ E8A8             >
1400+ E8A8             >                org     Dict_Ptr
1400+ 2F76             >
1400+ 2F76 A6 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1400+ 2F78             >
1400+ 2F78             >TWOFIND:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1400+ 2F78 CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1400+ 2F7B             >
1400+ 2F7B             >
1400+ 2F7B             >                endif           ; ok        // for other definitions it "points" the correct handler
1400+ 2F7B             >                // Use of "; ok" to suppress "warning[fwdref]"
1400+ 2F7B             >
1400+ 2F7B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1401+ 2F7B FE 24 14 25                  dw      TO_R, R_OP              // >r r@
1402+ 2F7F F5 27 3E 26                  dw      CONTEXT, FETCH, FETCH   // context @ @
1402+ 2F83 3E 26
1403+ 2F85 55 21                        dw      C_FIND                  // (find)
1404+ 2F87 05 29                        dw      QDUP                    // ?dup
1405+ 2F89 19 25                        dw      ZEQUAL                  // 0=
1406+ 2F8B                                                              // if
1407+ 2F8B 8F 20                        dw      ZBRANCH
1408+ 2F8D 24 00                        dw      LFind_Endif - $
1409+ 2F8F 14 25                        dw          R_OP                //      r@
1410+ 2F91                              // dw          LATEST               //      latest
1411+ 2F91 FB 27 3E 26                  dw          CURRENT, FETCH, FETCH   // context @ @
1411+ 2F95 3E 26
1412+ 2F97 55 21                        dw          C_FIND              //      (find)
1413+ 2F99
1414+ 2F99 05 29                            dw      QDUP                    // ?dup
1415+ 2F9B 19 25                            dw      ZEQUAL                  // 0=
1416+ 2F9D                                                                  // if
1417+ 2F9D 8F 20                            dw      ZBRANCH
1418+ 2F9F 12 00                            dw      LFind_Endif2 - $
1419+ 2FA1 14 25                            dw          R_OP                //      r@
1420+ 2FA3 3D 20 F2 31                      dw          LIT, FORTH, TO_BODY
1420+ 2FA7 16 2A
1421+ 2FA9 76 25 76 25                      dw          CELL_PLUS, CELL_PLUS
1422+ 2FAD 3E 26                            dw          FETCH
1423+ 2FAF 55 21                            dw          C_FIND              //      (find)
1424+ 2FB1              LFind_Endif2:                                    // endif
1425+ 2FB1
1426+ 2FB1
1427+ 2FB1              LFind_Endif:                                    // endif
1428+ 2FB1 09 25 B2 25                  dw      R_TO, DROP              // r> drop
1429+ 2FB5 F4 24                        dw      EXIT                    // ;
1430+ 2FB7
1431+ 2FB7              //  ______________________________________________________________________
1432+ 2FB7              //
1433+ 2FB7              // -find        a -- d
1434+ 2FB7                              Colon_Def LFIND,  "-FIND", is_normal
1434+ 2FB7             >                New_Def  LFIND, "-FIND", Enter_Ptr, is_normal ; ok
1434+ 2FB7             >
1434+ 2FB7             >Dict_Ptr        defl    $
1434+ 2FB7             >
1434+ 2FB7             >//              ______________________________________________________________________
1434+ 2FB7             >//              Heap part
1434+ 2FB7             >
1434+ 2FB7             >
1434+ 2FB7             >                org     (Heap_Ptr & $1FFF) + $E000
1434+ E8A8             >
1434+ E8A8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1434+ E8A8             >Latest_Definition defl  Heap_Ptr
1434+ E8A8             >
1434+ E8A8             >                // dummy db directives used to calculate length of namec
1434+ E8A8 2D 46 49 4E >                db      "-FIND"
1434+ E8AC 44          >
1434+ E8AD             >len_NFA         defl    $ - temp_NFA
1434+ E8AD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1434+ E8A8             >
1434+ E8A8 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1434+ E8A9 2D 46 49 4E >                db      "-FIND"               // name string in 7-bit ascii, but
1434+ E8AD 44          >
1434+ E8AE             >                org     $-1                 // alter last byte of Name just above to set
1434+ E8AD C4          >                db      {b $} | END_BIT     // msb as name end
1434+ E8AE             >
1434+ E8AE 9E 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1434+ E8B0             >Prev_Ptr        defl    Heap_Ptr
1434+ E8B0             >
1434+ E8B0             >mirror_Ptr      defl    $
1434+ E8B0             >
1434+ E8B0 B9 2F       >                dw      Dict_Ptr + 2        // xt
1434+ E8B2             >Heap_Ptr        defl    $ - $E000           // save current HP
1434+ E8B2             >
1434+ E8B2             >Current_HP      defl  $ - $E000             // used to set HP once!
1434+ E8B2             >
1434+ E8B2             >//              ______________________________________________________________________
1434+ E8B2             >//              Dictionary part
1434+ E8B2             >
1434+ E8B2             >                org     Dict_Ptr
1434+ 2FB7             >
1434+ 2FB7 B0 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1434+ 2FB9             >
1434+ 2FB9             >LFIND:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1434+ 2FB9 CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1434+ 2FBC             >
1434+ 2FBC             >
1434+ 2FBC             >                endif           ; ok        // for other definitions it "points" the correct handler
1434+ 2FBC             >                // Use of "; ok" to suppress "warning[fwdref]"
1434+ 2FBC             >
1434+ 2FBC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1435+ 2FBC 59 27 79 2D                  dw      BL, WORD                // bl word
1436+ 2FC0 78 2F                        dw      TWOFIND                 // 2find
1437+ 2FC2 F4 24                        dw      EXIT                    // ;
1438+ 2FC4
1439+ 2FC4              //  ______________________________________________________________________
1440+ 2FC4              //
1441+ 2FC4              // (abort)      --
1442+ 2FC4                              Colon_Def CABORT,  "(ABORT)", is_normal
1442+ 2FC4             >                New_Def  CABORT, "(ABORT)", Enter_Ptr, is_normal ; ok
1442+ 2FC4             >
1442+ 2FC4             >Dict_Ptr        defl    $
1442+ 2FC4             >
1442+ 2FC4             >//              ______________________________________________________________________
1442+ 2FC4             >//              Heap part
1442+ 2FC4             >
1442+ 2FC4             >
1442+ 2FC4             >                org     (Heap_Ptr & $1FFF) + $E000
1442+ E8B2             >
1442+ E8B2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1442+ E8B2             >Latest_Definition defl  Heap_Ptr
1442+ E8B2             >
1442+ E8B2             >                // dummy db directives used to calculate length of namec
1442+ E8B2 28 41 42 4F >                db      "(ABORT)"
1442+ E8B6 52 54 29    >
1442+ E8B9             >len_NFA         defl    $ - temp_NFA
1442+ E8B9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1442+ E8B2             >
1442+ E8B2 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1442+ E8B3 28 41 42 4F >                db      "(ABORT)"               // name string in 7-bit ascii, but
1442+ E8B7 52 54 29    >
1442+ E8BA             >                org     $-1                 // alter last byte of Name just above to set
1442+ E8B9 A9          >                db      {b $} | END_BIT     // msb as name end
1442+ E8BA             >
1442+ E8BA A8 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1442+ E8BC             >Prev_Ptr        defl    Heap_Ptr
1442+ E8BC             >
1442+ E8BC             >mirror_Ptr      defl    $
1442+ E8BC             >
1442+ E8BC C6 2F       >                dw      Dict_Ptr + 2        // xt
1442+ E8BE             >Heap_Ptr        defl    $ - $E000           // save current HP
1442+ E8BE             >
1442+ E8BE             >Current_HP      defl  $ - $E000             // used to set HP once!
1442+ E8BE             >
1442+ E8BE             >//              ______________________________________________________________________
1442+ E8BE             >//              Dictionary part
1442+ E8BE             >
1442+ E8BE             >                org     Dict_Ptr
1442+ 2FC4             >
1442+ 2FC4 BC 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1442+ 2FC6             >
1442+ 2FC6             >CABORT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1442+ 2FC6 CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1442+ 2FC9             >
1442+ 2FC9             >
1442+ 2FC9             >                endif           ; ok        // for other definitions it "points" the correct handler
1442+ 2FC9             >                // Use of "; ok" to suppress "warning[fwdref]"
1442+ 2FC9             >
1442+ 2FC9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1443+ 2FC9 59 32                        dw      ABORT                   // abort
1444+ 2FCB F4 24                        dw      EXIT                    // ;
1445+ 2FCD
1446+ 2FCD              //  ______________________________________________________________________
1447+ 2FCD              //
1448+ 2FCD              // error        n --
1449+ 2FCD              // raise an error
1450+ 2FCD              // if WARNING is 0, prints "MSG#n".
1451+ 2FCD              // if WARNING is 1, prints line n of screen 4.
1452+ 2FCD              // if WARNING is -1 does (ABORT) that normally does ABORT
1453+ 2FCD              // value can be negative or beyond block 4.
1454+ 2FCD                              Colon_Def ERROR,  "ERROR", is_normal
1454+ 2FCD             >                New_Def  ERROR, "ERROR", Enter_Ptr, is_normal ; ok
1454+ 2FCD             >
1454+ 2FCD             >Dict_Ptr        defl    $
1454+ 2FCD             >
1454+ 2FCD             >//              ______________________________________________________________________
1454+ 2FCD             >//              Heap part
1454+ 2FCD             >
1454+ 2FCD             >
1454+ 2FCD             >                org     (Heap_Ptr & $1FFF) + $E000
1454+ E8BE             >
1454+ E8BE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1454+ E8BE             >Latest_Definition defl  Heap_Ptr
1454+ E8BE             >
1454+ E8BE             >                // dummy db directives used to calculate length of namec
1454+ E8BE 45 52 52 4F >                db      "ERROR"
1454+ E8C2 52          >
1454+ E8C3             >len_NFA         defl    $ - temp_NFA
1454+ E8C3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1454+ E8BE             >
1454+ E8BE 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1454+ E8BF 45 52 52 4F >                db      "ERROR"               // name string in 7-bit ascii, but
1454+ E8C3 52          >
1454+ E8C4             >                org     $-1                 // alter last byte of Name just above to set
1454+ E8C3 D2          >                db      {b $} | END_BIT     // msb as name end
1454+ E8C4             >
1454+ E8C4 B2 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1454+ E8C6             >Prev_Ptr        defl    Heap_Ptr
1454+ E8C6             >
1454+ E8C6             >mirror_Ptr      defl    $
1454+ E8C6             >
1454+ E8C6 CF 2F       >                dw      Dict_Ptr + 2        // xt
1454+ E8C8             >Heap_Ptr        defl    $ - $E000           // save current HP
1454+ E8C8             >
1454+ E8C8             >Current_HP      defl  $ - $E000             // used to set HP once!
1454+ E8C8             >
1454+ E8C8             >//              ______________________________________________________________________
1454+ E8C8             >//              Dictionary part
1454+ E8C8             >
1454+ E8C8             >                org     Dict_Ptr
1454+ 2FCD             >
1454+ 2FCD C6 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1454+ 2FCF             >
1454+ 2FCF             >ERROR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1454+ 2FCF CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1454+ 2FD2             >
1454+ 2FD2             >
1454+ 2FD2             >                endif           ; ok        // for other definitions it "points" the correct handler
1454+ 2FD2             >                // Use of "; ok" to suppress "warning[fwdref]"
1454+ 2FD2             >
1454+ 2FD2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1455+ 2FD2 A7 27 3E 26                  dw      WARNING, FETCH, ZLESS   // warning @ 0<
1455+ 2FD6 2C 25
1456+ 2FD8                                                              // if
1457+ 2FD8 8F 20                        dw      ZBRANCH
1458+ 2FDA 04 00                        dw      Error_Endif_1 - $
1459+ 2FDC C6 2F                        dw          CABORT              //      (abort)
1460+ 2FDE              Error_Endif_1:                                  // endif
1461+ 2FDE 5B 28 D3 2B                  dw      HERE, COUNT, TYPE       // here count type
1461+ 2FE2 27 2C
1462+ 2FE4 C4 2D                        dw      C_DOT_QUOTE             // .( ? )
1463+ 2FE6 02 3F 20                     db      2, "? "
1464+ 2FE9 8E 35                        dw      MESSAGE                 // message  ( forward )
1465+ 2FEB 8F 27 3E 26                  dw      S0, FETCH, SPSTORE      // s0 @ sp!
1465+ 2FEF E4 24
1466+ 2FF1 D7 27 3E 26                  dw      BLK, FETCH, QDUP        // blk @ ?dup
1466+ 2FF5 05 29
1467+ 2FF7                                                              // if
1468+ 2FF7 8F 20                        dw      ZBRANCH
1469+ 2FF9 08 00                        dw      Error_Endif_2 - $
1470+ 2FFB DD 27 3E 26                  dw          TO_IN, FETCH, SWAP  //      >in @ swap
1470+ 2FFF C6 25
1471+ 3001              Error_Endif_2:                                  // endif
1472+ 3001 1D 32                        dw      QUIT                    // quit ( forward )
1473+ 3003 F4 24                        dw      EXIT                    // ;
1474+ 3005              //  ______________________________________________________________________
1475+ 3005              //
1476+ 3005              // id.          nfa --
1477+ 3005                              Colon_Def ID_DOT,  "ID.", is_normal
1477+ 3005             >                New_Def  ID_DOT, "ID.", Enter_Ptr, is_normal ; ok
1477+ 3005             >
1477+ 3005             >Dict_Ptr        defl    $
1477+ 3005             >
1477+ 3005             >//              ______________________________________________________________________
1477+ 3005             >//              Heap part
1477+ 3005             >
1477+ 3005             >
1477+ 3005             >                org     (Heap_Ptr & $1FFF) + $E000
1477+ E8C8             >
1477+ E8C8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1477+ E8C8             >Latest_Definition defl  Heap_Ptr
1477+ E8C8             >
1477+ E8C8             >                // dummy db directives used to calculate length of namec
1477+ E8C8 49 44 2E    >                db      "ID."
1477+ E8CB             >len_NFA         defl    $ - temp_NFA
1477+ E8CB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1477+ E8C8             >
1477+ E8C8 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1477+ E8C9 49 44 2E    >                db      "ID."               // name string in 7-bit ascii, but
1477+ E8CC             >                org     $-1                 // alter last byte of Name just above to set
1477+ E8CB AE          >                db      {b $} | END_BIT     // msb as name end
1477+ E8CC             >
1477+ E8CC BE 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1477+ E8CE             >Prev_Ptr        defl    Heap_Ptr
1477+ E8CE             >
1477+ E8CE             >mirror_Ptr      defl    $
1477+ E8CE             >
1477+ E8CE 07 30       >                dw      Dict_Ptr + 2        // xt
1477+ E8D0             >Heap_Ptr        defl    $ - $E000           // save current HP
1477+ E8D0             >
1477+ E8D0             >Current_HP      defl  $ - $E000             // used to set HP once!
1477+ E8D0             >
1477+ E8D0             >//              ______________________________________________________________________
1477+ E8D0             >//              Dictionary part
1477+ E8D0             >
1477+ E8D0             >                org     Dict_Ptr
1477+ 3005             >
1477+ 3005 CE 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1477+ 3007             >
1477+ 3007             >ID_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1477+ 3007 CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1477+ 300A             >
1477+ 300A             >
1477+ 300A             >                endif           ; ok        // for other definitions it "points" the correct handler
1477+ 300A             >                // Use of "; ok" to suppress "warning[fwdref]"
1477+ 300A             >
1477+ 300A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1478+ 300A BB 29                        dw      QTOHEAP
1479+ 300C CD 25 3D 27                  dw      DUP, ONE, TRAVERSE      // dup 1 traverse
1479+ 3010 37 29
1480+ 3012 60 25                        dw      ONE_PLUS                // 1+
1481+ 3014 A9 25 9A 28                  dw      OVER, SUBTRACT          // over -
1482+ 3018 CD 25 FE 24                  dw      DUP, TO_R               // >r
1483+ 301C 6A 2D C6 25                  dw      PAD, SWAP               // pad swap
1484+ 3020 35 24                        dw      CMOVE                   // cmove
1485+ 3022 6A 2D 60 25                  dw      PAD, ONE_PLUS           // pad 1+
1486+ 3026 09 25 67 25                  dw      R_TO, ONE_SUBTRACT      // R> 1-
1487+ 302A 27 2C 2C 29                  dw      TYPE, SPACE             // type
1488+ 302E F4 24                        dw      EXIT                    // ;
1489+ 3030
1490+ 3030              //  ______________________________________________________________________
1491+ 3030              //
1492+ 3030              // code         -- cccc
1493+ 3030                              Colon_Def CODE,  "CODE", is_normal
1493+ 3030             >                New_Def  CODE, "CODE", Enter_Ptr, is_normal ; ok
1493+ 3030             >
1493+ 3030             >Dict_Ptr        defl    $
1493+ 3030             >
1493+ 3030             >//              ______________________________________________________________________
1493+ 3030             >//              Heap part
1493+ 3030             >
1493+ 3030             >
1493+ 3030             >                org     (Heap_Ptr & $1FFF) + $E000
1493+ E8D0             >
1493+ E8D0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1493+ E8D0             >Latest_Definition defl  Heap_Ptr
1493+ E8D0             >
1493+ E8D0             >                // dummy db directives used to calculate length of namec
1493+ E8D0 43 4F 44 45 >                db      "CODE"
1493+ E8D4             >len_NFA         defl    $ - temp_NFA
1493+ E8D4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1493+ E8D0             >
1493+ E8D0 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1493+ E8D1 43 4F 44 45 >                db      "CODE"               // name string in 7-bit ascii, but
1493+ E8D5             >                org     $-1                 // alter last byte of Name just above to set
1493+ E8D4 C5          >                db      {b $} | END_BIT     // msb as name end
1493+ E8D5             >
1493+ E8D5 C8 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1493+ E8D7             >Prev_Ptr        defl    Heap_Ptr
1493+ E8D7             >
1493+ E8D7             >mirror_Ptr      defl    $
1493+ E8D7             >
1493+ E8D7 32 30       >                dw      Dict_Ptr + 2        // xt
1493+ E8D9             >Heap_Ptr        defl    $ - $E000           // save current HP
1493+ E8D9             >
1493+ E8D9             >Current_HP      defl  $ - $E000             // used to set HP once!
1493+ E8D9             >
1493+ E8D9             >//              ______________________________________________________________________
1493+ E8D9             >//              Dictionary part
1493+ E8D9             >
1493+ E8D9             >                org     Dict_Ptr
1493+ 3030             >
1493+ 3030 D7 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1493+ 3032             >
1493+ 3032             >CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1493+ 3032 CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1493+ 3035             >
1493+ 3035             >
1493+ 3035             >                endif           ; ok        // for other definitions it "points" the correct handler
1493+ 3035             >                // Use of "; ok" to suppress "warning[fwdref]"
1493+ 3035             >
1493+ 3035             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1494+ 3035 B9 2F                        dw      LFIND                   // -find
1495+ 3037                                                              // if
1496+ 3037 8F 20                        dw      ZBRANCH
1497+ 3039 10 00                        dw      Code_Endif - $
1498+ 303B B2 25                        dw          DROP                //      drop
1499+ 303D 21 2A 07 30                  dw          TO_NAME, ID_DOT     //      >name id.
1500+ 3041 3D 20 04 00                  dw          LIT, 4, MESSAGE     //      4 message
1500+ 3045 8E 35
1501+ 3047 2C 29                        dw          SPACE               //      space
1502+ 3049              Code_Endif:                                     // endif
1503+ 3049 5B 28                        dw      HERE                    // here
1504+ 304B                                                              // ( ---- here begins NFA ---- )
1505+ 304B CD 25 53 26                  dw      DUP, CFETCH             // dup c@
1506+ 304F A1 27 3E 26                  dw      WIDTH, FETCH, MIN       // width @ min  ( max 31 character length )
1506+ 3053 DF 28
1507+ 3055 60 25                        dw      ONE_PLUS                // 1+
1508+ 3057 CD 25 66 28                  dw      DUP, ALLOT              // dup allot
1509+ 305B 76 25 76 25                  dw      CELL_PLUS, CELL_PLUS    // cell+ cell+
1510+ 305F FE 24                        dw      TO_R                    // >r
1511+ 3061 CD 25                        dw      DUP                     // dup
1512+ 3063 3D 20                        dw      LIT
1513+ 3065 A0 00                        dw      SMUDGE_BIT | END_BIT    // 160
1514+ 3067 35 26                        dw      TOGGLE                  // toggle
1515+ 3069 5B 28 67 25                  dw      HERE, ONE_SUBTRACT      // here 1- ( last character )
1516+ 306D 3D 20 80 00                  dw      LIT, END_BIT, TOGGLE    // 128 toggle
1516+ 3071 35 26
1517+ 3073                                                              // ( ---- here is LFA ---- )
1518+ 3073 FB 27 3E 26                  dw      CURRENT, FETCH, FETCH   // current @ @ , \ latest ,
1518+ 3077 3E 26
1519+ 3079 71 28                        dw      COMMA
1520+ 307B CD 25 76 25                  dw      DUP, CELL_PLUS, COMMA   // dup cell+ ,
1520+ 307F 71 28
1521+ 3081 CC 29                        dw      HP_FETCH                // hp@
1522+ 3083 FB 27 3E 26                  dw      CURRENT, FETCH, STORE   // current @ ! ( save this word as the latest )
1522+ 3087 48 26
1523+ 3089 CC 29 9D 29                  dw      HP_FETCH, FAR           // hp@ far R@ cmove
1524+ 308D 14 25 35 24                  dw      R_OP, CMOVE
1525+ 3091 14 25 88 25                  dw      R_OP, MINUS, ALLOT      // r@ negate allot
1525+ 3095 66 28
1526+ 3097 09 25 CB 27                  dw      R_TO, HP, PLUSSTORE     // r> hp +!
1526+ 309B 26 26
1527+ 309D CC 29 7B 25                  dw      HP_FETCH, CELL_MINUS    // hp@ cell- ,
1528+ 30A1 71 28                        dw      COMMA
1529+ 30A3 36 27 DE 29                  dw      ZERO, SKIP_HP_PAGE
1530+ 30A7                                                              // ( ---- here is LFA ---- )
1531+ 30A7 F4 24                        dw      EXIT                    // ;
1532+ 30A9
1533+ 30A9              //  ______________________________________________________________________
1534+ 30A9              //
1535+ 30A9              // create       -- cccc     ( compile time )
1536+ 30A9              //              -- a        ( run time )
1537+ 30A9                              Colon_Def CREATE,  "CREATE", is_normal
1537+ 30A9             >                New_Def  CREATE, "CREATE", Enter_Ptr, is_normal ; ok
1537+ 30A9             >
1537+ 30A9             >Dict_Ptr        defl    $
1537+ 30A9             >
1537+ 30A9             >//              ______________________________________________________________________
1537+ 30A9             >//              Heap part
1537+ 30A9             >
1537+ 30A9             >
1537+ 30A9             >                org     (Heap_Ptr & $1FFF) + $E000
1537+ E8D9             >
1537+ E8D9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1537+ E8D9             >Latest_Definition defl  Heap_Ptr
1537+ E8D9             >
1537+ E8D9             >                // dummy db directives used to calculate length of namec
1537+ E8D9 43 52 45 41 >                db      "CREATE"
1537+ E8DD 54 45       >
1537+ E8DF             >len_NFA         defl    $ - temp_NFA
1537+ E8DF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1537+ E8D9             >
1537+ E8D9 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1537+ E8DA 43 52 45 41 >                db      "CREATE"               // name string in 7-bit ascii, but
1537+ E8DE 54 45       >
1537+ E8E0             >                org     $-1                 // alter last byte of Name just above to set
1537+ E8DF C5          >                db      {b $} | END_BIT     // msb as name end
1537+ E8E0             >
1537+ E8E0 D0 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1537+ E8E2             >Prev_Ptr        defl    Heap_Ptr
1537+ E8E2             >
1537+ E8E2             >mirror_Ptr      defl    $
1537+ E8E2             >
1537+ E8E2 AB 30       >                dw      Dict_Ptr + 2        // xt
1537+ E8E4             >Heap_Ptr        defl    $ - $E000           // save current HP
1537+ E8E4             >
1537+ E8E4             >Current_HP      defl  $ - $E000             // used to set HP once!
1537+ E8E4             >
1537+ E8E4             >//              ______________________________________________________________________
1537+ E8E4             >//              Dictionary part
1537+ E8E4             >
1537+ E8E4             >                org     Dict_Ptr
1537+ 30A9             >
1537+ 30A9 E2 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1537+ 30AB             >
1537+ 30AB             >CREATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1537+ 30AB CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1537+ 30AE             >
1537+ 30AE             >
1537+ 30AE             >                endif           ; ok        // for other definitions it "points" the correct handler
1537+ 30AE             >                // Use of "; ok" to suppress "warning[fwdref]"
1537+ 30AE             >
1537+ 30AE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1538+ 30AE 32 30 43 2B                  dw      CODE, SMUDGE            // code smudge
1539+ 30B2 3D 20 CD 00                  dw      LIT, $CD, CCOMMA        // 00CD c,
1539+ 30B6 80 28
1540+ 30B8 3D 20 1D 27                  dw      LIT, Variable_Ptr, COMMA// Variable_Ptr ,
1540+ 30BC 71 28
1541+ 30BE 7F 2B                        dw      C_SEMICOLON_CODE
1542+ 30C0                              // this routine is called from the call coded in CFA
1543+ 30C0              Create_Ptr:
1544+ 30C0
1545+ 30C0
1546+ 30C0
1547+ 30C0                              next
1547+ 30C0 DD E9       >                jp      (ix)
1548+ 30C2
1549+ 30C2              //  ______________________________________________________________________
1550+ 30C2              //
1551+ 30C2              // [compile]    -- cccc     ( compile time )
1552+ 30C2                              Colon_Def COMPILE_IMMEDIATE,  "[COMPILE]", is_immediate
1552+ 30C2             >                New_Def  COMPILE_IMMEDIATE, "[COMPILE]", Enter_Ptr, is_immediate ; ok
1552+ 30C2             >
1552+ 30C2             >Dict_Ptr        defl    $
1552+ 30C2             >
1552+ 30C2             >//              ______________________________________________________________________
1552+ 30C2             >//              Heap part
1552+ 30C2             >
1552+ 30C2             >
1552+ 30C2             >                org     (Heap_Ptr & $1FFF) + $E000
1552+ E8E4             >
1552+ E8E4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1552+ E8E4             >Latest_Definition defl  Heap_Ptr
1552+ E8E4             >
1552+ E8E4             >                // dummy db directives used to calculate length of namec
1552+ E8E4 5B 43 4F 4D >                db      "[COMPILE]"
1552+ E8E8 50 49 4C 45 >
1552+ E8EC 5D          >
1552+ E8ED             >len_NFA         defl    $ - temp_NFA
1552+ E8ED             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1552+ E8E4             >
1552+ E8E4 C9          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1552+ E8E5 5B 43 4F 4D >                db      "[COMPILE]"               // name string in 7-bit ascii, but
1552+ E8E9 50 49 4C 45 >
1552+ E8ED 5D          >
1552+ E8EE             >                org     $-1                 // alter last byte of Name just above to set
1552+ E8ED DD          >                db      {b $} | END_BIT     // msb as name end
1552+ E8EE             >
1552+ E8EE D9 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1552+ E8F0             >Prev_Ptr        defl    Heap_Ptr
1552+ E8F0             >
1552+ E8F0             >mirror_Ptr      defl    $
1552+ E8F0             >
1552+ E8F0 C4 30       >                dw      Dict_Ptr + 2        // xt
1552+ E8F2             >Heap_Ptr        defl    $ - $E000           // save current HP
1552+ E8F2             >
1552+ E8F2             >Current_HP      defl  $ - $E000             // used to set HP once!
1552+ E8F2             >
1552+ E8F2             >//              ______________________________________________________________________
1552+ E8F2             >//              Dictionary part
1552+ E8F2             >
1552+ E8F2             >                org     Dict_Ptr
1552+ 30C2             >
1552+ 30C2 F0 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1552+ 30C4             >
1552+ 30C4             >COMPILE_IMMEDIATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1552+ 30C4 CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1552+ 30C7             >
1552+ 30C7             >
1552+ 30C7             >                endif           ; ok        // for other definitions it "points" the correct handler
1552+ 30C7             >                // Use of "; ok" to suppress "warning[fwdref]"
1552+ 30C7             >
1552+ 30C7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1553+ 30C7 B9 2F                        dw      LFIND                   // -find      (  cfa  b  f  )
1554+ 30C9 19 25                        dw      ZEQUAL                  // 0=         (  cfa  b  )
1555+ 30CB 36 27 97 2A                  dw      ZERO, QERROR            // 0 ?error
1556+ 30CF B2 25                        dw      DROP                    // drop       (  cfa  )
1557+ 30D1 71 28                        dw      COMMA                   // ,
1558+ 30D3 F4 24                        dw      EXIT                    // ; immediate
1559+ 30D5
1560+ 30D5              //  ______________________________________________________________________
1561+ 30D5              //
1562+ 30D5              // literal      n --      ( compile time )
1563+ 30D5                              Colon_Def LITERAL,  "LITERAL", is_immediate
1563+ 30D5             >                New_Def  LITERAL, "LITERAL", Enter_Ptr, is_immediate ; ok
1563+ 30D5             >
1563+ 30D5             >Dict_Ptr        defl    $
1563+ 30D5             >
1563+ 30D5             >//              ______________________________________________________________________
1563+ 30D5             >//              Heap part
1563+ 30D5             >
1563+ 30D5             >
1563+ 30D5             >                org     (Heap_Ptr & $1FFF) + $E000
1563+ E8F2             >
1563+ E8F2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1563+ E8F2             >Latest_Definition defl  Heap_Ptr
1563+ E8F2             >
1563+ E8F2             >                // dummy db directives used to calculate length of namec
1563+ E8F2 4C 49 54 45 >                db      "LITERAL"
1563+ E8F6 52 41 4C    >
1563+ E8F9             >len_NFA         defl    $ - temp_NFA
1563+ E8F9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1563+ E8F2             >
1563+ E8F2 C7          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1563+ E8F3 4C 49 54 45 >                db      "LITERAL"               // name string in 7-bit ascii, but
1563+ E8F7 52 41 4C    >
1563+ E8FA             >                org     $-1                 // alter last byte of Name just above to set
1563+ E8F9 CC          >                db      {b $} | END_BIT     // msb as name end
1563+ E8FA             >
1563+ E8FA E4 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1563+ E8FC             >Prev_Ptr        defl    Heap_Ptr
1563+ E8FC             >
1563+ E8FC             >mirror_Ptr      defl    $
1563+ E8FC             >
1563+ E8FC D7 30       >                dw      Dict_Ptr + 2        // xt
1563+ E8FE             >Heap_Ptr        defl    $ - $E000           // save current HP
1563+ E8FE             >
1563+ E8FE             >Current_HP      defl  $ - $E000             // used to set HP once!
1563+ E8FE             >
1563+ E8FE             >//              ______________________________________________________________________
1563+ E8FE             >//              Dictionary part
1563+ E8FE             >
1563+ E8FE             >                org     Dict_Ptr
1563+ 30D5             >
1563+ 30D5 FC 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1563+ 30D7             >
1563+ 30D7             >LITERAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1563+ 30D7 CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1563+ 30DA             >
1563+ 30DA             >
1563+ 30DA             >                endif           ; ok        // for other definitions it "points" the correct handler
1563+ 30DA             >                // Use of "; ok" to suppress "warning[fwdref]"
1563+ 30DA             >
1563+ 30DA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1564+ 30DA 01 28 3E 26                  dw      STATE, FETCH            // state @
1565+ 30DE                                                              // if
1566+ 30DE 8F 20                        dw      ZBRANCH
1567+ 30E0 08 00                        dw      Literal_Endif - $
1568+ 30E2 07 2B 3D 20                  dw          COMPILE, LIT        //      compile lit
1569+ 30E6 71 28                        dw          COMMA               //      ,
1570+ 30E8              Literal_Endif:                                  // endif
1571+ 30E8 F4 24                        dw      EXIT                    // ; immediate
1572+ 30EA
1573+ 30EA              //  ______________________________________________________________________
1574+ 30EA              //
1575+ 30EA              // dliteral     n --      ( compile time )
1576+ 30EA                              Colon_Def DLITERAL,  "DLITERAL", is_immediate
1576+ 30EA             >                New_Def  DLITERAL, "DLITERAL", Enter_Ptr, is_immediate ; ok
1576+ 30EA             >
1576+ 30EA             >Dict_Ptr        defl    $
1576+ 30EA             >
1576+ 30EA             >//              ______________________________________________________________________
1576+ 30EA             >//              Heap part
1576+ 30EA             >
1576+ 30EA             >
1576+ 30EA             >                org     (Heap_Ptr & $1FFF) + $E000
1576+ E8FE             >
1576+ E8FE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1576+ E8FE             >Latest_Definition defl  Heap_Ptr
1576+ E8FE             >
1576+ E8FE             >                // dummy db directives used to calculate length of namec
1576+ E8FE 44 4C 49 54 >                db      "DLITERAL"
1576+ E902 45 52 41 4C >
1576+ E906             >len_NFA         defl    $ - temp_NFA
1576+ E906             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1576+ E8FE             >
1576+ E8FE C8          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1576+ E8FF 44 4C 49 54 >                db      "DLITERAL"               // name string in 7-bit ascii, but
1576+ E903 45 52 41 4C >
1576+ E907             >                org     $-1                 // alter last byte of Name just above to set
1576+ E906 CC          >                db      {b $} | END_BIT     // msb as name end
1576+ E907             >
1576+ E907 F2 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1576+ E909             >Prev_Ptr        defl    Heap_Ptr
1576+ E909             >
1576+ E909             >mirror_Ptr      defl    $
1576+ E909             >
1576+ E909 EC 30       >                dw      Dict_Ptr + 2        // xt
1576+ E90B             >Heap_Ptr        defl    $ - $E000           // save current HP
1576+ E90B             >
1576+ E90B             >Current_HP      defl  $ - $E000             // used to set HP once!
1576+ E90B             >
1576+ E90B             >//              ______________________________________________________________________
1576+ E90B             >//              Dictionary part
1576+ E90B             >
1576+ E90B             >                org     Dict_Ptr
1576+ 30EA             >
1576+ 30EA 09 09       >                dw      mirror_Ptr - $E000 + Heap_offset
1576+ 30EC             >
1576+ 30EC             >DLITERAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1576+ 30EC CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1576+ 30EF             >
1576+ 30EF             >
1576+ 30EF             >                endif           ; ok        // for other definitions it "points" the correct handler
1576+ 30EF             >                // Use of "; ok" to suppress "warning[fwdref]"
1576+ 30EF             >
1576+ 30EF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1577+ 30EF 01 28 3E 26                  dw      STATE, FETCH            // state @
1578+ 30F3                                                              // if
1579+ 30F3 8F 20                        dw      ZBRANCH
1580+ 30F5 08 00                        dw      DLiteral_Endif - $
1581+ 30F7 C6 25                        dw          SWAP                //      swap
1582+ 30F9 D7 30 D7 30                  dw          LITERAL,  LITERAL   //      [compile] literal [compile] literal
1583+ 30FD              DLiteral_Endif:                                 // endif
1584+ 30FD F4 24                        dw      EXIT                    // ; immediate
1585+ 30FF
1586+ 30FF              //  ______________________________________________________________________
1587+ 30FF              //
1588+ 30FF              // [char]       n --      ( compile time )
1589+ 30FF              // inside colon definition, gets first character from next input word
1590+ 30FF              // and compiles it as literal.
1591+ 30FF                              Colon_Def COMPILE_CHAR,  "[CHAR]", is_immediate
1591+ 30FF             >                New_Def  COMPILE_CHAR, "[CHAR]", Enter_Ptr, is_immediate ; ok
1591+ 30FF             >
1591+ 30FF             >Dict_Ptr        defl    $
1591+ 30FF             >
1591+ 30FF             >//              ______________________________________________________________________
1591+ 30FF             >//              Heap part
1591+ 30FF             >
1591+ 30FF             >
1591+ 30FF             >                org     (Heap_Ptr & $1FFF) + $E000
1591+ E90B             >
1591+ E90B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1591+ E90B             >Latest_Definition defl  Heap_Ptr
1591+ E90B             >
1591+ E90B             >                // dummy db directives used to calculate length of namec
1591+ E90B 5B 43 48 41 >                db      "[CHAR]"
1591+ E90F 52 5D       >
1591+ E911             >len_NFA         defl    $ - temp_NFA
1591+ E911             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1591+ E90B             >
1591+ E90B C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1591+ E90C 5B 43 48 41 >                db      "[CHAR]"               // name string in 7-bit ascii, but
1591+ E910 52 5D       >
1591+ E912             >                org     $-1                 // alter last byte of Name just above to set
1591+ E911 DD          >                db      {b $} | END_BIT     // msb as name end
1591+ E912             >
1591+ E912 FE 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1591+ E914             >Prev_Ptr        defl    Heap_Ptr
1591+ E914             >
1591+ E914             >mirror_Ptr      defl    $
1591+ E914             >
1591+ E914 01 31       >                dw      Dict_Ptr + 2        // xt
1591+ E916             >Heap_Ptr        defl    $ - $E000           // save current HP
1591+ E916             >
1591+ E916             >Current_HP      defl  $ - $E000             // used to set HP once!
1591+ E916             >
1591+ E916             >//              ______________________________________________________________________
1591+ E916             >//              Dictionary part
1591+ E916             >
1591+ E916             >                org     Dict_Ptr
1591+ 30FF             >
1591+ 30FF 14 09       >                dw      mirror_Ptr - $E000 + Heap_offset
1591+ 3101             >
1591+ 3101             >COMPILE_CHAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1591+ 3101 CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1591+ 3104             >
1591+ 3104             >
1591+ 3104             >                endif           ; ok        // for other definitions it "points" the correct handler
1591+ 3104             >                // Use of "; ok" to suppress "warning[fwdref]"
1591+ 3104             >
1591+ 3104             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1592+ 3104 DB 2D D7 30                  dw      CHAR, LITERAL           // char [compile] literal
1593+ 3108 F4 24                        dw      EXIT                    // ; immediate
1594+ 310A
1595+ 310A              //  ______________________________________________________________________
1596+ 310A              //
1597+ 310A              // 0x00         n --      ( compile time )
1598+ 310A                              Colon_Def NUL_WORD,  $00, is_immediate
1598+ 310A             >                New_Def  NUL_WORD, $00, Enter_Ptr, is_immediate ; ok
1598+ 310A             >
1598+ 310A             >Dict_Ptr        defl    $
1598+ 310A             >
1598+ 310A             >//              ______________________________________________________________________
1598+ 310A             >//              Heap part
1598+ 310A             >
1598+ 310A             >
1598+ 310A             >                org     (Heap_Ptr & $1FFF) + $E000
1598+ E916             >
1598+ E916             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1598+ E916             >Latest_Definition defl  Heap_Ptr
1598+ E916             >
1598+ E916             >                // dummy db directives used to calculate length of namec
1598+ E916 00          >                db      $00
1598+ E917             >len_NFA         defl    $ - temp_NFA
1598+ E917             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1598+ E916             >
1598+ E916 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1598+ E917 00          >                db      $00               // name string in 7-bit ascii, but
1598+ E918             >                org     $-1                 // alter last byte of Name just above to set
1598+ E917 80          >                db      {b $} | END_BIT     // msb as name end
1598+ E918             >
1598+ E918 0B 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1598+ E91A             >Prev_Ptr        defl    Heap_Ptr
1598+ E91A             >
1598+ E91A             >mirror_Ptr      defl    $
1598+ E91A             >
1598+ E91A 0C 31       >                dw      Dict_Ptr + 2        // xt
1598+ E91C             >Heap_Ptr        defl    $ - $E000           // save current HP
1598+ E91C             >
1598+ E91C             >Current_HP      defl  $ - $E000             // used to set HP once!
1598+ E91C             >
1598+ E91C             >//              ______________________________________________________________________
1598+ E91C             >//              Dictionary part
1598+ E91C             >
1598+ E91C             >                org     Dict_Ptr
1598+ 310A             >
1598+ 310A 1A 09       >                dw      mirror_Ptr - $E000 + Heap_offset
1598+ 310C             >
1598+ 310C             >NUL_WORD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1598+ 310C CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1598+ 310F             >
1598+ 310F             >
1598+ 310F             >                endif           ; ok        // for other definitions it "points" the correct handler
1598+ 310F             >                // Use of "; ok" to suppress "warning[fwdref]"
1598+ 310F             >
1598+ 310F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1599+ 310F D7 27 3E 26                  dw      BLK, FETCH, ONE         // blk @ 1
1599+ 3113 3D 27
1600+ 3115 D4 28                        dw      GREATER                 // > if
1601+ 3117                                                              // if
1602+ 3117 8F 20                        dw      ZBRANCH
1603+ 3119 28 00                        dw      Nul_Else_1 - $
1604+ 311B 3D 27 D7 27                  dw          ONE, BLK, PLUSSTORE //      1 blk +!
1604+ 311F 26 26
1605+ 3121 36 27 DD 27                  dw          ZERO, TO_IN, STORE  //      0 >in !
1605+ 3125 48 26
1606+ 3127 D7 27 3E 26                  dw          BLK, FETCH          //      blk @
1607+ 312B 6E 27                        dw          BSCR                //      b/scr
1608+ 312D 67 25                        dw          ONE_SUBTRACT        //      1 -
1609+ 312F B4 24                        dw          AND_OP              //      and  ( this is tricky )
1610+ 3131 19 25                        dw          ZEQUAL              //      0=
1611+ 3133                                                              //      if
1612+ 3133 8F 20                        dw          ZBRANCH
1613+ 3135 08 00                        dw          Nul_Endif_2 - $
1614+ 3137 BF 2A                        dw              QEXEC           //          ?exec
1615+ 3139 09 25 B2 25                  dw              R_TO, DROP      //          r> drop
1616+ 313D              Nul_Endif_2:                                    //      endif
1617+ 313D 82 20                        dw      BRANCH
1618+ 313F 06 00                        dw      Nul_Endif_1 - $
1619+ 3141              Nul_Else_1:                                     // else
1620+ 3141 09 25 B2 25                  dw          R_TO, DROP          //      r> drop
1621+ 3145              Nul_Endif_1:                                    // endif
1622+ 3145 F4 24                        dw      EXIT                    // ;
1623+ 3147
1624+ 3147              //  ______________________________________________________________________
1625+ 3147              //
1626+ 3147              // ?stack       --
1627+ 3147              // Raise error #1 if stack is empty and you pop it
1628+ 3147              // Raise error #7 if stack is full.
1629+ 3147              // This means SP must always stay between HERE and FFFF
1630+ 3147              // For 128K BANK paging purpose SP must be <= BFE0 and 50 words room
1631+ 3147              // for Next 8K MMU paging this is $DOE8
1632+ 3147                              Colon_Def QSTACK, "?STACK", is_normal
1632+ 3147             >                New_Def  QSTACK, "?STACK", Enter_Ptr, is_normal ; ok
1632+ 3147             >
1632+ 3147             >Dict_Ptr        defl    $
1632+ 3147             >
1632+ 3147             >//              ______________________________________________________________________
1632+ 3147             >//              Heap part
1632+ 3147             >
1632+ 3147             >
1632+ 3147             >                org     (Heap_Ptr & $1FFF) + $E000
1632+ E91C             >
1632+ E91C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1632+ E91C             >Latest_Definition defl  Heap_Ptr
1632+ E91C             >
1632+ E91C             >                // dummy db directives used to calculate length of namec
1632+ E91C 3F 53 54 41 >                db      "?STACK"
1632+ E920 43 4B       >
1632+ E922             >len_NFA         defl    $ - temp_NFA
1632+ E922             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1632+ E91C             >
1632+ E91C 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1632+ E91D 3F 53 54 41 >                db      "?STACK"               // name string in 7-bit ascii, but
1632+ E921 43 4B       >
1632+ E923             >                org     $-1                 // alter last byte of Name just above to set
1632+ E922 CB          >                db      {b $} | END_BIT     // msb as name end
1632+ E923             >
1632+ E923 16 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1632+ E925             >Prev_Ptr        defl    Heap_Ptr
1632+ E925             >
1632+ E925             >mirror_Ptr      defl    $
1632+ E925             >
1632+ E925 49 31       >                dw      Dict_Ptr + 2        // xt
1632+ E927             >Heap_Ptr        defl    $ - $E000           // save current HP
1632+ E927             >
1632+ E927             >Current_HP      defl  $ - $E000             // used to set HP once!
1632+ E927             >
1632+ E927             >//              ______________________________________________________________________
1632+ E927             >//              Dictionary part
1632+ E927             >
1632+ E927             >                org     Dict_Ptr
1632+ 3147             >
1632+ 3147 25 09       >                dw      mirror_Ptr - $E000 + Heap_offset
1632+ 3149             >
1632+ 3149             >QSTACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1632+ 3149 CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1632+ 314C             >
1632+ 314C             >
1632+ 314C             >                endif           ; ok        // for other definitions it "points" the correct handler
1632+ 314C             >                // Use of "; ok" to suppress "warning[fwdref]"
1632+ 314C             >
1632+ 314C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1633+ 314C DB 24                        dw      SPFETCH                 // sp@
1634+ 314E 8F 27 3E 26                  dw      S0, FETCH               // s0 @
1635+ 3152 C6 25 B1 28                  dw      SWAP, ULESS             // swap u<
1636+ 3156 3D 27 97 2A                  dw      ONE, QERROR             // 1 ?error
1637+ 315A 5B 28                        dw      HERE                    // here
1638+ 315C 8F 27 3E 26                  dw      S0, FETCH, LESS         // s0 @ <
1638+ 3160 BF 28
1639+ 3162                                                              // if
1640+ 3162 8F 20                        dw      ZBRANCH
1641+ 3164 14 00                        dw      QStack_Endif - $
1642+ 3166 DB 24                        dw          SPFETCH             //      sp@
1643+ 3168 5B 28 3D 20                  dw          HERE, LIT, 128      //      here 128
1643+ 316C 80 00
1644+ 316E 47 25 B1 28                  dw          PLUS, ULESS         //      plus u<
1645+ 3172 3D 20 07 00                  dw          LIT, 7, QERROR      //      7 Cerror
1645+ 3176 97 2A
1646+ 3178              QStack_Endif:                                   // endif
1647+ 3178 F4 24                        dw      EXIT                    // ;
1648+ 317A
1649+ 317A
# file closed: C:\Zx\CSpect\Projects\vForth17_DOT/source/L1.asm
 123  317A                              include "L2.asm"
# file opened: C:\Zx\CSpect\Projects\vForth17_DOT/source/L2.asm
   1+ 317A              //  ______________________________________________________________________
   2+ 317A              //
   3+ 317A              //  L2.asm
   4+ 317A              //
   5+ 317A              //  Level-2 3dos
   6+ 317A              //  the Forth interpreter, vocabulary, cold/warm start and quit from Forth.
   7+ 317A              //  ______________________________________________________________________
   8+ 317A
   9+ 317A
  10+ 317A              //  ______________________________________________________________________
  11+ 317A              //
  12+ 317A              // interpret    --
  13+ 317A              // This is the text interpreter.
  14+ 317A              // It executes or compiles, depending on STATE, the text coming from
  15+ 317A              // current input stream.
  16+ 317A              // If the word search fails after parsing CONTEXT and CURRENT vocabulary,
  17+ 317A              // the word is interpreted as numeric and converted, using current BASE,
  18+ 317A              // leaving on top of stack a single or double precision number, depending
  19+ 317A              // on the presence of a decimal point.
  20+ 317A              // If the number conversion fails, the terminal is notified with ? followed
  21+ 317A              // by the offending word.
  22+ 317A                              Colon_Def INTERPRET, "INTERPRET", is_normal
  22+ 317A             >                New_Def  INTERPRET, "INTERPRET", Enter_Ptr, is_normal ; ok
  22+ 317A             >
  22+ 317A             >Dict_Ptr        defl    $
  22+ 317A             >
  22+ 317A             >//              ______________________________________________________________________
  22+ 317A             >//              Heap part
  22+ 317A             >
  22+ 317A             >
  22+ 317A             >                org     (Heap_Ptr & $1FFF) + $E000
  22+ E927             >
  22+ E927             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  22+ E927             >Latest_Definition defl  Heap_Ptr
  22+ E927             >
  22+ E927             >                // dummy db directives used to calculate length of namec
  22+ E927 49 4E 54 45 >                db      "INTERPRET"
  22+ E92B 52 50 52 45 >
  22+ E92F 54          >
  22+ E930             >len_NFA         defl    $ - temp_NFA
  22+ E930             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  22+ E927             >
  22+ E927 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  22+ E928 49 4E 54 45 >                db      "INTERPRET"               // name string in 7-bit ascii, but
  22+ E92C 52 50 52 45 >
  22+ E930 54          >
  22+ E931             >                org     $-1                 // alter last byte of Name just above to set
  22+ E930 D4          >                db      {b $} | END_BIT     // msb as name end
  22+ E931             >
  22+ E931 1C 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  22+ E933             >Prev_Ptr        defl    Heap_Ptr
  22+ E933             >
  22+ E933             >mirror_Ptr      defl    $
  22+ E933             >
  22+ E933 7C 31       >                dw      Dict_Ptr + 2        // xt
  22+ E935             >Heap_Ptr        defl    $ - $E000           // save current HP
  22+ E935             >
  22+ E935             >Current_HP      defl  $ - $E000             // used to set HP once!
  22+ E935             >
  22+ E935             >//              ______________________________________________________________________
  22+ E935             >//              Dictionary part
  22+ E935             >
  22+ E935             >                org     Dict_Ptr
  22+ 317A             >
  22+ 317A 33 09       >                dw      mirror_Ptr - $E000 + Heap_offset
  22+ 317C             >
  22+ 317C             >INTERPRET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  22+ 317C CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  22+ 317F             >
  22+ 317F             >
  22+ 317F             >                endif           ; ok        // for other definitions it "points" the correct handler
  22+ 317F             >                // Use of "; ok" to suppress "warning[fwdref]"
  22+ 317F             >
  22+ 317F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  23+ 317F
  24+ 317F              Interpret_Begin:                                        // begin
  25+ 317F B9 2F                        dw          LFIND                       //      -find
  26+ 3181                                                                      //      if
  27+ 3181 8F 20                        dw          ZBRANCH
  28+ 3183 1A 00                        dw          Interpret_Else_1 - $
  29+ 3185 01 28 3E 26                  dw              STATE, FETCH, LESS      //          state @ <
  29+ 3189 BF 28
  30+ 318B                                                                      //          if
  31+ 318B 8F 20                        dw              ZBRANCH
  32+ 318D 08 00                        dw              Interpret_Else_2 - $
  33+ 318F 1C 2B                        dw                  COMPILE_XT          //              compile,
  34+ 3191                                                                      //          else
  35+ 3191 82 20                        dw              BRANCH
  36+ 3193 06 00                        dw              Interpret_Endif_2 - $
  37+ 3195              Interpret_Else_2:
  38+ 3195 48 20 FD 26                  dw                  EXECUTE, NOOP       //              execute nooop
  39+ 3199              Interpret_Endif_2:                                      //          endif
  40+ 3199                                                                      //      else
  41+ 3199 82 20                        dw          BRANCH
  42+ 319B 1A 00                        dw          Interpret_Endif_1 - $
  43+ 319D              Interpret_Else_1:
  44+ 319D 5B 28 0D 2F                  dw              HERE, NUMBER            //          here number
  45+ 31A1 0D 28 3E 26                  dw              DPL, FETCH, ONE_PLUS    //          dpl @ 1+
  45+ 31A5 60 25
  46+ 31A7                                                                      //          if
  47+ 31A7 8F 20                        dw              ZBRANCH
  48+ 31A9 08 00                        dw              Interpret_Else_3 - $
  49+ 31AB              //              dw                  NMODE, FETCH        //              nmode @
  50+ 31AB              //                                                      //              if
  51+ 31AB              //              dw                  ZBRANCH
  52+ 31AB              //              dw                  Interpret_Endif_4 - $
  53+ 31AB              //              dw                      ONE, ZERO       //                  1 0
  54+ 31AB              //              dw                      TWO_DROP        //                  2drop
  55+ 31AB              //Interpret_Endif_4:                                      //              endif
  56+ 31AB EC 30                        dw                  DLITERAL            //              [compile] dliteral
  57+ 31AD                                                                      //          else
  58+ 31AD 82 20                        dw              BRANCH
  59+ 31AF 06 00                        dw              Interpret_Endif_3 - $
  60+ 31B1              Interpret_Else_3:
  61+ 31B1 B2 25                        dw                  DROP                //              drop
  62+ 31B3 D7 30                        dw                  LITERAL             //              [compile]  literal
  63+ 31B5              Interpret_Endif_3:                                      //          endif
  64+ 31B5              Interpret_Endif_1:                                      //      endif
  65+ 31B5 49 31                        dw          QSTACK                      //      ?stack
  66+ 31B7 4D 23                        dw          QTERMINAL                   //      ?terminal
  67+ 31B9                                                                      //      if
  68+ 31B9 8F 20                        dw          ZBRANCH
  69+ 31BB 04 00                        dw          Interpret_Endif_5 - $
  70+ 31BD 1D 32                        dw              QUIT                    //          quit
  71+ 31BF              Interpret_Endif_5:                                      //      endif
  72+ 31BF 82 20                        dw      BRANCH
  73+ 31C1 BE FF                        dw      Interpret_Begin - $
  74+ 31C3 F4 24                        dw      EXIT                            // ;
  75+ 31C5
  76+ 31C5              //  ______________________________________________________________________
  77+ 31C5              //
  78+ 31C5              // vocabulary   -- cccc     ( compile time )
  79+ 31C5              // Defining word used in the form   VOCABULARY cccc
  80+ 31C5              // creates the word  cccc  that gives the name to the vocabulary.
  81+ 31C5              // Giving  cccc  makes the vocabulary CONTEXT so its words are executed first
  82+ 31C5              // Giving  cccc DEFINITIONS makes  the vocabulary  CURRENT
  83+ 31C5              // so new definitions can be inserted in that vocabulary.
  84+ 31C5                              Colon_Def VOCABULARY, "VOCABULARY", is_normal
  84+ 31C5             >                New_Def  VOCABULARY, "VOCABULARY", Enter_Ptr, is_normal ; ok
  84+ 31C5             >
  84+ 31C5             >Dict_Ptr        defl    $
  84+ 31C5             >
  84+ 31C5             >//              ______________________________________________________________________
  84+ 31C5             >//              Heap part
  84+ 31C5             >
  84+ 31C5             >
  84+ 31C5             >                org     (Heap_Ptr & $1FFF) + $E000
  84+ E935             >
  84+ E935             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  84+ E935             >Latest_Definition defl  Heap_Ptr
  84+ E935             >
  84+ E935             >                // dummy db directives used to calculate length of namec
  84+ E935 56 4F 43 41 >                db      "VOCABULARY"
  84+ E939 42 55 4C 41 >
  84+ E93D 52 59       >
  84+ E93F             >len_NFA         defl    $ - temp_NFA
  84+ E93F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  84+ E935             >
  84+ E935 8A          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  84+ E936 56 4F 43 41 >                db      "VOCABULARY"               // name string in 7-bit ascii, but
  84+ E93A 42 55 4C 41 >
  84+ E93E 52 59       >
  84+ E940             >                org     $-1                 // alter last byte of Name just above to set
  84+ E93F D9          >                db      {b $} | END_BIT     // msb as name end
  84+ E940             >
  84+ E940 27 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  84+ E942             >Prev_Ptr        defl    Heap_Ptr
  84+ E942             >
  84+ E942             >mirror_Ptr      defl    $
  84+ E942             >
  84+ E942 C7 31       >                dw      Dict_Ptr + 2        // xt
  84+ E944             >Heap_Ptr        defl    $ - $E000           // save current HP
  84+ E944             >
  84+ E944             >Current_HP      defl  $ - $E000             // used to set HP once!
  84+ E944             >
  84+ E944             >//              ______________________________________________________________________
  84+ E944             >//              Dictionary part
  84+ E944             >
  84+ E944             >                org     Dict_Ptr
  84+ 31C5             >
  84+ 31C5 42 09       >                dw      mirror_Ptr - $E000 + Heap_offset
  84+ 31C7             >
  84+ 31C7             >VOCABULARY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  84+ 31C7 CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  84+ 31CA             >
  84+ 31CA             >
  84+ 31CA             >                endif           ; ok        // for other definitions it "points" the correct handler
  84+ 31CA             >                // Use of "; ok" to suppress "warning[fwdref]"
  84+ 31CA             >
  84+ 31CA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  85+ 31CA
  86+ 31CA AB 2B                        dw      CBUILDS
  87+ 31CC
  88+ 31CC                              // dummy word + link part
  89+ 31CC 3D 20 81 A0                  dw      LIT, $A081, COMMA       // $81A0 ,
  89+ 31D0 71 28
  90+ 31D2 FB 27 3E 26                  dw      CURRENT, FETCH          // current @
  91+ 31D6 3E 26                        dw      FETCH                   // @
  92+ 31D8                          //  dw      CELL_MINUS              // cell-
  93+ 31D8 71 28                        dw      COMMA                   // ,
  94+ 31DA
  95+ 31DA                              // voc-link part
  96+ 31DA 5B 28                        dw      HERE                    // here
  97+ 31DC B9 27 3E 26                  dw      VOC_LINK, FETCH         // voc-link @
  98+ 31E0 71 28                        dw      COMMA                   // ,
  99+ 31E2 B9 27 48 26                  dw      VOC_LINK, STORE         // voc-link !
 100+ 31E6                              // DOES part
 101+ 31E6 B6 2B                        dw      DOES_TO                 // does>
 102+ 31E8              Vocabulary_Does:
 103+ 31E8 76 25                        dw      CELL_PLUS               // cell+
 104+ 31EA F5 27 48 26                  dw      CONTEXT, STORE          // context !
 105+ 31EE F4 24                        dw      EXIT                    // ;
 106+ 31F0
 107+ 31F0              //  ______________________________________________________________________
 108+ 31F0              //
 109+ 31F0              // forth        --
 110+ 31F0              // Name of the first vocabulary.
 111+ 31F0              // It makes FORTH the CONTEXT vocabulary.
 112+ 31F0              // Until new user vocabulary are defined, new colon-definitions becomes
 113+ 31F0              // part of FORTH. It is immediate, so it will executed during the creation
 114+ 31F0              // of a colon definition to be able to select the vocabulary.
 115+ 31F0
 116+ 31F0                              New_Def FORTH, "FORTH", Does_Ptr, is_immediate
 116+ 31F0             >
 116+ 31F0             >Dict_Ptr        defl    $
 116+ 31F0             >
 116+ 31F0             >//              ______________________________________________________________________
 116+ 31F0             >//              Heap part
 116+ 31F0             >
 116+ 31F0             >
 116+ 31F0             >                org     (Heap_Ptr & $1FFF) + $E000
 116+ E944             >
 116+ E944             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 116+ E944             >Latest_Definition defl  Heap_Ptr
 116+ E944             >
 116+ E944             >                // dummy db directives used to calculate length of namec
 116+ E944 46 4F 52 54 >                db      "FORTH"
 116+ E948 48          >
 116+ E949             >len_NFA         defl    $ - temp_NFA
 116+ E949             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 116+ E944             >
 116+ E944 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 116+ E945 46 4F 52 54 >                db      "FORTH"               // name string in 7-bit ascii, but
 116+ E949 48          >
 116+ E94A             >                org     $-1                 // alter last byte of Name just above to set
 116+ E949 C8          >                db      {b $} | END_BIT     // msb as name end
 116+ E94A             >
 116+ E94A 35 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 116+ E94C             >Prev_Ptr        defl    Heap_Ptr
 116+ E94C             >
 116+ E94C             >mirror_Ptr      defl    $
 116+ E94C             >
 116+ E94C F2 31       >                dw      Dict_Ptr + 2        // xt
 116+ E94E             >Heap_Ptr        defl    $ - $E000           // save current HP
 116+ E94E             >
 116+ E94E             >Current_HP      defl  $ - $E000             // used to set HP once!
 116+ E94E             >
 116+ E94E             >//              ______________________________________________________________________
 116+ E94E             >//              Dictionary part
 116+ E94E             >
 116+ E94E             >                org     Dict_Ptr
 116+ 31F0             >
 116+ 31F0 4C 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 116+ 31F2             >
 116+ 31F2             >FORTH:          if Does_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 116+ 31F2 CD C3 2B    >                call    Does_Ptr ; ok        // for primitive definitions  actual code
 116+ 31F5             >
 116+ 31F5             >
 116+ 31F5             >                endif           ; ok        // for other definitions it "points" the correct handler
 116+ 31F5             >                // Use of "; ok" to suppress "warning[fwdref]"
 116+ 31F5             >
 116+ 31F5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 117+ 31F5 E8 31                        dw      Vocabulary_Does
 118+ 31F7
 119+ 31F7 81 A0                        db      $81, $A0
 120+ 31F9              Forth_Latest_Ptr:
 121+ 31F9 44 09                        dw      Latest_Definition
 122+ 31FB              Voclink_Ptr:
 123+ 31FB 00 00                        dw      0
 124+ 31FD
 125+ 31FD              // ____
 126+ 31FD              // temp_VOC        defl    $                   // save this address
 127+ 31FD              //              org     (Heap_Ptr & $1FFF) + $E000
 128+ 31FD              //              db      $81, $A0
 129+ 31FD              // Forth_Latest_Ptr_HEAP:
 130+ 31FD              //                 dw      Latest_Definition
 131+ 31FD              // Voclink_Ptr_HEAP:
 132+ 31FD              //                 dw      0
 133+ 31FD              // Heap_Ptr        defl    $ - $E000           // save current HP
 134+ 31FD              //                 org     temp_VOC
 135+ 31FD              // ____
 136+ 31FD
 137+ 31FD              // Any new vocabulary is structured as follow:
 138+ 31FD              // PFA+0 points to DOES> part of VOCABULARY to perform CELL+ CONTEXT !
 139+ 31FD              // PFA+2 is 81,A0 i.e. a null-word used as LATEST in the new vocabulary
 140+ 31FD              // PFA+4 always contains the LATEST word of this VOCABULARY.
 141+ 31FD              //       at creations it points to the null-word of its parent vocabulary
 142+ 31FD              //       that is normally FORTH, For example ASSEMBLER points FORTH's null-word
 143+ 31FD              // PFA+6 is the pointer that builds up the vocabulary linked list.
 144+ 31FD              //       FORTH has 0 here to signal the end of the list and user's variable
 145+ 31FD              //       VOC-LINK points to PFA+6 of the newest vocabulary created.
 146+ 31FD              //       While FORTH is the only vocabulary, VOC-LINK points to FORTH's PFA+6
 147+ 31FD              //       When ASSEMBLER is created, its PFA+6 points to FORTH's PFA+6, and so on
 148+ 31FD
 149+ 31FD              //  ______________________________________________________________________
 150+ 31FD              //
 151+ 31FD              // definitions  --
 152+ 31FD              // Used in the form  cccc DEFINITIONS
 153+ 31FD              // set the CURRENT vocabulary at CONTEXT to insert new definitions in
 154+ 31FD              // vocabulary cccc.
 155+ 31FD                              Colon_Def DEFINITIONS, "DEFINITIONS", is_normal
 155+ 31FD             >                New_Def  DEFINITIONS, "DEFINITIONS", Enter_Ptr, is_normal ; ok
 155+ 31FD             >
 155+ 31FD             >Dict_Ptr        defl    $
 155+ 31FD             >
 155+ 31FD             >//              ______________________________________________________________________
 155+ 31FD             >//              Heap part
 155+ 31FD             >
 155+ 31FD             >
 155+ 31FD             >                org     (Heap_Ptr & $1FFF) + $E000
 155+ E94E             >
 155+ E94E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 155+ E94E             >Latest_Definition defl  Heap_Ptr
 155+ E94E             >
 155+ E94E             >                // dummy db directives used to calculate length of namec
 155+ E94E 44 45 46 49 >                db      "DEFINITIONS"
 155+ E952 4E 49 54 49 >
 155+ E956 4F 4E 53    >
 155+ E959             >len_NFA         defl    $ - temp_NFA
 155+ E959             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 155+ E94E             >
 155+ E94E 8B          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 155+ E94F 44 45 46 49 >                db      "DEFINITIONS"               // name string in 7-bit ascii, but
 155+ E953 4E 49 54 49 >
 155+ E957 4F 4E 53    >
 155+ E95A             >                org     $-1                 // alter last byte of Name just above to set
 155+ E959 D3          >                db      {b $} | END_BIT     // msb as name end
 155+ E95A             >
 155+ E95A 44 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 155+ E95C             >Prev_Ptr        defl    Heap_Ptr
 155+ E95C             >
 155+ E95C             >mirror_Ptr      defl    $
 155+ E95C             >
 155+ E95C FF 31       >                dw      Dict_Ptr + 2        // xt
 155+ E95E             >Heap_Ptr        defl    $ - $E000           // save current HP
 155+ E95E             >
 155+ E95E             >Current_HP      defl  $ - $E000             // used to set HP once!
 155+ E95E             >
 155+ E95E             >//              ______________________________________________________________________
 155+ E95E             >//              Dictionary part
 155+ E95E             >
 155+ E95E             >                org     Dict_Ptr
 155+ 31FD             >
 155+ 31FD 5C 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 155+ 31FF             >
 155+ 31FF             >DEFINITIONS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 155+ 31FF CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 155+ 3202             >
 155+ 3202             >
 155+ 3202             >                endif           ; ok        // for other definitions it "points" the correct handler
 155+ 3202             >                // Use of "; ok" to suppress "warning[fwdref]"
 155+ 3202             >
 155+ 3202             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 156+ 3202 F5 27 3E 26                  dw      CONTEXT, FETCH          // context @
 157+ 3206 FB 27 48 26                  dw      CURRENT, STORE          // current !
 158+ 320A F4 24                        dw      EXIT                    // ;
 159+ 320C
 160+ 320C              //  ______________________________________________________________________
 161+ 320C              //
 162+ 320C              // (            -- cccc )
 163+ 320C              // the following text is interpreted as a comment until a closing )
 164+ 320C                              Colon_Def COMMENT_BRAKET, "(", is_immediate
 164+ 320C             >                New_Def  COMMENT_BRAKET, "(", Enter_Ptr, is_immediate ; ok
 164+ 320C             >
 164+ 320C             >Dict_Ptr        defl    $
 164+ 320C             >
 164+ 320C             >//              ______________________________________________________________________
 164+ 320C             >//              Heap part
 164+ 320C             >
 164+ 320C             >
 164+ 320C             >                org     (Heap_Ptr & $1FFF) + $E000
 164+ E95E             >
 164+ E95E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 164+ E95E             >Latest_Definition defl  Heap_Ptr
 164+ E95E             >
 164+ E95E             >                // dummy db directives used to calculate length of namec
 164+ E95E 28          >                db      "("
 164+ E95F             >len_NFA         defl    $ - temp_NFA
 164+ E95F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 164+ E95E             >
 164+ E95E C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 164+ E95F 28          >                db      "("               // name string in 7-bit ascii, but
 164+ E960             >                org     $-1                 // alter last byte of Name just above to set
 164+ E95F A8          >                db      {b $} | END_BIT     // msb as name end
 164+ E960             >
 164+ E960 4E 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 164+ E962             >Prev_Ptr        defl    Heap_Ptr
 164+ E962             >
 164+ E962             >mirror_Ptr      defl    $
 164+ E962             >
 164+ E962 0E 32       >                dw      Dict_Ptr + 2        // xt
 164+ E964             >Heap_Ptr        defl    $ - $E000           // save current HP
 164+ E964             >
 164+ E964             >Current_HP      defl  $ - $E000             // used to set HP once!
 164+ E964             >
 164+ E964             >//              ______________________________________________________________________
 164+ E964             >//              Dictionary part
 164+ E964             >
 164+ E964             >                org     Dict_Ptr
 164+ 320C             >
 164+ 320C 62 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 164+ 320E             >
 164+ 320E             >COMMENT_BRAKET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 164+ 320E CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 164+ 3211             >
 164+ 3211             >
 164+ 3211             >                endif           ; ok        // for other definitions it "points" the correct handler
 164+ 3211             >                // Use of "; ok" to suppress "warning[fwdref]"
 164+ 3211             >
 164+ 3211             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 165+ 3211 3D 20 29 00                  dw      LIT, ")"                // [char] )
 166+ 3215 79 2D B2 25                  dw      WORD, DROP              // word drop
 167+ 3219 F4 24                        dw      EXIT                    // ;
 168+ 321B
 169+ 321B              //  ______________________________________________________________________
 170+ 321B              //
 171+ 321B              // quit         --
 172+ 321B              // \ Erase the return-stack, stop any compilation and give controlo to the console. No message is issued.
 173+ 321B                              Colon_Def QUIT, "QUIT", is_normal
 173+ 321B             >                New_Def  QUIT, "QUIT", Enter_Ptr, is_normal ; ok
 173+ 321B             >
 173+ 321B             >Dict_Ptr        defl    $
 173+ 321B             >
 173+ 321B             >//              ______________________________________________________________________
 173+ 321B             >//              Heap part
 173+ 321B             >
 173+ 321B             >
 173+ 321B             >                org     (Heap_Ptr & $1FFF) + $E000
 173+ E964             >
 173+ E964             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 173+ E964             >Latest_Definition defl  Heap_Ptr
 173+ E964             >
 173+ E964             >                // dummy db directives used to calculate length of namec
 173+ E964 51 55 49 54 >                db      "QUIT"
 173+ E968             >len_NFA         defl    $ - temp_NFA
 173+ E968             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 173+ E964             >
 173+ E964 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 173+ E965 51 55 49 54 >                db      "QUIT"               // name string in 7-bit ascii, but
 173+ E969             >                org     $-1                 // alter last byte of Name just above to set
 173+ E968 D4          >                db      {b $} | END_BIT     // msb as name end
 173+ E969             >
 173+ E969 5E 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 173+ E96B             >Prev_Ptr        defl    Heap_Ptr
 173+ E96B             >
 173+ E96B             >mirror_Ptr      defl    $
 173+ E96B             >
 173+ E96B 1D 32       >                dw      Dict_Ptr + 2        // xt
 173+ E96D             >Heap_Ptr        defl    $ - $E000           // save current HP
 173+ E96D             >
 173+ E96D             >Current_HP      defl  $ - $E000             // used to set HP once!
 173+ E96D             >
 173+ E96D             >//              ______________________________________________________________________
 173+ E96D             >//              Dictionary part
 173+ E96D             >
 173+ E96D             >                org     Dict_Ptr
 173+ 321B             >
 173+ 321B 6B 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 173+ 321D             >
 173+ 321D             >QUIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 173+ 321D CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 173+ 3220             >
 173+ 3220             >
 173+ 3220             >                endif           ; ok        // for other definitions it "points" the correct handler
 173+ 3220             >                // Use of "; ok" to suppress "warning[fwdref]"
 173+ 3220             >
 173+ 3220             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 174+ 3220
 175+ 3220 43 28 3E 26                  dw      SOURCE_ID, FETCH        // source-id @
 176+ 3224 98 23 B2 25                  dw      F_CLOSE, DROP           // f_close drop
 177+ 3228 36 27 43 28                  dw      ZERO, SOURCE_ID, STORE  // 0 source-id !
 177+ 322C 48 26
 178+ 322E 36 27 D7 27                  dw      ZERO, BLK, STORE        // 0 blk !
 178+ 3232 48 26
 179+ 3234 27 2B                        dw      SQUARED_OPEN            // [compile] [
 180+ 3236                                                              // begin
 181+ 3236              Quit_Begin:
 182+ 3236 95 27 3E 26                  dw      R0, FETCH, RPSTORE      //      r0 @ rp!
 182+ 323A EF 24
 183+ 323C 50 22                        dw      CR                      //      cr
 184+ 323E 16 2D                        dw      QUERY                   //      query
 185+ 3240              Next_Breakpoint_1:
 186+ 3240 7C 31                        dw      INTERPRET               //      interpret
 187+ 3242 01 28 3E 26                  dw      STATE, FETCH, ZEQUAL    //      state @ 0=
 187+ 3246 19 25
 188+ 3248                                                              //      if
 189+ 3248 8F 20                        dw      ZBRANCH
 190+ 324A 07 00                        dw      Quit_Endif - $
 191+ 324C C4 2D                        dw          C_DOT_QUOTE
 192+ 324E 02 6F 6B                     db          2, "ok"             //          .( ok)
 193+ 3251              Quit_Endif:                                     //      else
 194+ 3251                                                              // again
 195+ 3251 82 20                        dw      BRANCH
 196+ 3253 E3 FF                        dw      Quit_Begin - $
 197+ 3255 F4 24                        dw      EXIT                    // ;
 198+ 3257
 199+ 3257              //  ______________________________________________________________________
 200+ 3257              //
 201+ 3257              // abort        --
 202+ 3257                              Colon_Def ABORT, "ABORT", is_normal
 202+ 3257             >                New_Def  ABORT, "ABORT", Enter_Ptr, is_normal ; ok
 202+ 3257             >
 202+ 3257             >Dict_Ptr        defl    $
 202+ 3257             >
 202+ 3257             >//              ______________________________________________________________________
 202+ 3257             >//              Heap part
 202+ 3257             >
 202+ 3257             >
 202+ 3257             >                org     (Heap_Ptr & $1FFF) + $E000
 202+ E96D             >
 202+ E96D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 202+ E96D             >Latest_Definition defl  Heap_Ptr
 202+ E96D             >
 202+ E96D             >                // dummy db directives used to calculate length of namec
 202+ E96D 41 42 4F 52 >                db      "ABORT"
 202+ E971 54          >
 202+ E972             >len_NFA         defl    $ - temp_NFA
 202+ E972             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 202+ E96D             >
 202+ E96D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 202+ E96E 41 42 4F 52 >                db      "ABORT"               // name string in 7-bit ascii, but
 202+ E972 54          >
 202+ E973             >                org     $-1                 // alter last byte of Name just above to set
 202+ E972 D4          >                db      {b $} | END_BIT     // msb as name end
 202+ E973             >
 202+ E973 64 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 202+ E975             >Prev_Ptr        defl    Heap_Ptr
 202+ E975             >
 202+ E975             >mirror_Ptr      defl    $
 202+ E975             >
 202+ E975 59 32       >                dw      Dict_Ptr + 2        // xt
 202+ E977             >Heap_Ptr        defl    $ - $E000           // save current HP
 202+ E977             >
 202+ E977             >Current_HP      defl  $ - $E000             // used to set HP once!
 202+ E977             >
 202+ E977             >//              ______________________________________________________________________
 202+ E977             >//              Dictionary part
 202+ E977             >
 202+ E977             >                org     Dict_Ptr
 202+ 3257             >
 202+ 3257 75 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 202+ 3259             >
 202+ 3259             >ABORT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 202+ 3259 CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 202+ 325C             >
 202+ 325C             >
 202+ 325C             >                endif           ; ok        // for other definitions it "points" the correct handler
 202+ 325C             >                // Use of "; ok" to suppress "warning[fwdref]"
 202+ 325C             >
 202+ 325C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 203+ 325C 8F 27 3E 26                  dw      S0, FETCH               // s0 @
 204+ 3260 59 27                        dw      BL                      // bl
 205+ 3262 A9 25 48 26                  dw      OVER, STORE             // over !
 206+ 3266 E4 24                        dw      SPSTORE                 // sp!
 207+ 3268 70 2B                        dw      DECIMAL                 // decimal
 208+ 326A F2 31                        dw      FORTH                   // [compile] forth
 209+ 326C FF 31                        dw      DEFINITIONS             // definitions
 210+ 326E
 211+ 326E 27 2B                        dw      SQUARED_OPEN            // [compile] [
 212+ 3270 95 27 3E 26                  dw      R0, FETCH, RPSTORE      //      r0 @ rp!
 212+ 3274 EF 24
 213+ 3276
 214+ 3276              Autoexec_Ptr:
 215+ 3276 B3 3D                        dw      AUTOEXEC                // autoexec, patched to noop
 216+ 3278                          //  dw      NOOP
 217+ 3278 1D 32                        dw      QUIT                   // quit
 218+ 327A F4 24                        dw      EXIT                    // ;
 219+ 327C
 220+ 327C              //  ______________________________________________________________________
 221+ 327C              //
 222+ 327C              // warm         --
 223+ 327C                              Colon_Def WARM, "WARM", is_normal
 223+ 327C             >                New_Def  WARM, "WARM", Enter_Ptr, is_normal ; ok
 223+ 327C             >
 223+ 327C             >Dict_Ptr        defl    $
 223+ 327C             >
 223+ 327C             >//              ______________________________________________________________________
 223+ 327C             >//              Heap part
 223+ 327C             >
 223+ 327C             >
 223+ 327C             >                org     (Heap_Ptr & $1FFF) + $E000
 223+ E977             >
 223+ E977             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 223+ E977             >Latest_Definition defl  Heap_Ptr
 223+ E977             >
 223+ E977             >                // dummy db directives used to calculate length of namec
 223+ E977 57 41 52 4D >                db      "WARM"
 223+ E97B             >len_NFA         defl    $ - temp_NFA
 223+ E97B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 223+ E977             >
 223+ E977 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 223+ E978 57 41 52 4D >                db      "WARM"               // name string in 7-bit ascii, but
 223+ E97C             >                org     $-1                 // alter last byte of Name just above to set
 223+ E97B CD          >                db      {b $} | END_BIT     // msb as name end
 223+ E97C             >
 223+ E97C 6D 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 223+ E97E             >Prev_Ptr        defl    Heap_Ptr
 223+ E97E             >
 223+ E97E             >mirror_Ptr      defl    $
 223+ E97E             >
 223+ E97E 7E 32       >                dw      Dict_Ptr + 2        // xt
 223+ E980             >Heap_Ptr        defl    $ - $E000           // save current HP
 223+ E980             >
 223+ E980             >Current_HP      defl  $ - $E000             // used to set HP once!
 223+ E980             >
 223+ E980             >//              ______________________________________________________________________
 223+ E980             >//              Dictionary part
 223+ E980             >
 223+ E980             >                org     Dict_Ptr
 223+ 327C             >
 223+ 327C 7E 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 223+ 327E             >
 223+ 327E             >WARM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 223+ 327E CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 223+ 3281             >
 223+ 3281             >
 223+ 3281             >                endif           ; ok        // for other definitions it "points" the correct handler
 223+ 3281             >                // Use of "; ok" to suppress "warning[fwdref]"
 223+ 3281             >
 223+ 3281             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 224+ 3281 52 36                        dw      BLK_INIT                // blk-init
 225+ 3283 8F 3D                        dw      SPLASH                  // splash
 226+ 3285 3D 20 07 00                  dw      LIT, 7, EMIT            // 7 emit
 226+ 3289 15 29
 227+ 328B 59 32                        dw      ABORT                   // abort
 228+ 328D F4 24                        dw      EXIT                    // exit
 229+ 328F
 230+ 328F              //  ______________________________________________________________________
 231+ 328F              //
 232+ 328F              // cold         --
 233+ 328F                              Colon_Def COLD, "COLD", is_normal
 233+ 328F             >                New_Def  COLD, "COLD", Enter_Ptr, is_normal ; ok
 233+ 328F             >
 233+ 328F             >Dict_Ptr        defl    $
 233+ 328F             >
 233+ 328F             >//              ______________________________________________________________________
 233+ 328F             >//              Heap part
 233+ 328F             >
 233+ 328F             >
 233+ 328F             >                org     (Heap_Ptr & $1FFF) + $E000
 233+ E980             >
 233+ E980             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 233+ E980             >Latest_Definition defl  Heap_Ptr
 233+ E980             >
 233+ E980             >                // dummy db directives used to calculate length of namec
 233+ E980 43 4F 4C 44 >                db      "COLD"
 233+ E984             >len_NFA         defl    $ - temp_NFA
 233+ E984             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 233+ E980             >
 233+ E980 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 233+ E981 43 4F 4C 44 >                db      "COLD"               // name string in 7-bit ascii, but
 233+ E985             >                org     $-1                 // alter last byte of Name just above to set
 233+ E984 C4          >                db      {b $} | END_BIT     // msb as name end
 233+ E985             >
 233+ E985 77 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 233+ E987             >Prev_Ptr        defl    Heap_Ptr
 233+ E987             >
 233+ E987             >mirror_Ptr      defl    $
 233+ E987             >
 233+ E987 91 32       >                dw      Dict_Ptr + 2        // xt
 233+ E989             >Heap_Ptr        defl    $ - $E000           // save current HP
 233+ E989             >
 233+ E989             >Current_HP      defl  $ - $E000             // used to set HP once!
 233+ E989             >
 233+ E989             >//              ______________________________________________________________________
 233+ E989             >//              Dictionary part
 233+ E989             >
 233+ E989             >                org     Dict_Ptr
 233+ 328F             >
 233+ 328F 87 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 233+ 3291             >
 233+ 3291             >COLD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 233+ 3291 CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 233+ 3294             >
 233+ 3294             >
 233+ 3294             >                endif           ; ok        // for other definitions it "points" the correct handler
 233+ 3294             >                // Use of "; ok" to suppress "warning[fwdref]"
 233+ 3294             >
 233+ 3294             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 234+ 3294 3D 20 12 20                  dw      LIT, S0_origin          // [ hex $12 +origin ] Literal
 235+ 3298 3D 20 2E 20                  dw      LIT, USER_Pointer       // [ hex $3E +origin ] literal
 236+ 329C 3E 26                        dw      FETCH                   // @
 237+ 329E 3D 20 06 00                  dw      LIT, 6, PLUS            // 6 +
 237+ 32A2 47 25
 238+ 32A4 3D 20 16 00                  dw      LIT, 22                 // 22
 239+ 32A8 35 24                        dw      CMOVE
 240+ 32AA 3D 20 0C 20                  dw      LIT, Latest_origin      // [ hex 0C +origin ] literal
 241+ 32AE 3E 26                        dw      FETCH                   // @
 242+ 32B0 3D 20 F9 31                  dw      LIT, Forth_Latest_Ptr   // [ ' forth >body 4 + ] Literal
 243+ 32B4 48 26                        dw      STORE                   // !
 244+ 32B6 36 27 D1 27                  dw      ZERO, NMODE, STORE      // 0 nmode !
 244+ 32BA 48 26
 245+ 32BC BF 27 3E 26                  dw      FIRST, FETCH, DUP       // first @ dup
 245+ 32C0 CD 25
 246+ 32C2 2B 28 48 26                  dw      USED, STORE             // used !
 247+ 32C6 31 28 48 26                  dw      PREV, STORE             // prev !
 248+ 32CA 3D 20 04 00                  dw      LIT, 4, PLACE, STORE    // 4 place !
 248+ 32CE 3D 28 48 26
 249+ 32D2              //              dw      LIT, 8
 250+ 32D2              //              dw      LIT, FLAGS2, CSTORE     // 8 5C6A c!
 251+ 32D2 F3 36                        dw      EMPTY_BUFFERS
 252+ 32D4 36 27 D7 27                  dw      ZERO, BLK, STORE
 252+ 32D8 48 26
 253+ 32DA 36 27 43 28                  dw      ZERO, SOURCE_ID, STORE
 253+ 32DE 48 26
 254+ 32E0
 255+ 32E0 7E 32        Warm_Start:     dw      WARM
 256+ 32E2 91 32        Cold_Start:     dw      COLD
 257+ 32E4 F4 24                        dw      EXIT
 258+ 32E6
 259+ 32E6
 260+ 32E6              //  ______________________________________________________________________
 261+ 32E6
 262+ 32E6              Tools_vForth_Directory
 263+ 32E6 43 3A 2F 74                  db      "C:/tools/vForth/", $FF
 263+ 32EA 6F 6F 6C 73
 263+ 32EE 2F 76 46 6F
 263+ 32F2 72 74 68 2F
 263+ 32F6 FF
 264+ 32F7 43 3A 2F 64  Filename_Ram7:  db      "C:/dot/vforth.bin",0
 264+ 32FB 6F 74 2F 76
 264+ 32FF 66 6F 72 74
 264+ 3303 68 2E 62 69
 264+ 3307 6E 00
 265+ 3309
 266+ 3309              Saved_Speed:
 267+ 3309 00                           db      0
 268+ 330A 02 03 04 05  Saved_MMU       db      2,3,4,5,6,7   // MMU2-MMU7
 268+ 330E 06 07
 269+ 3310
 270+ 3310              Saved_Layer:
 271+ 3310 00                           db      0           // graphics current mode
 272+ 3311
 273+ 3311              //  ______________________________________________________________________
 274+ 3311              WarmRoutine:
 275+ 3311              ColdRoutine:
 276+ 3311              //  ______________________________________________________________________
 277+ 3311              // 0.
 278+ 3311 D1                           pop     de                      // retrieve return to basic address
 279+ 3312 ED 73 08 20                  ld      (SP_Basic), sp
 280+ 3316 31 00 40                     ld      sp, $4000               // safe area
 281+ 3319 D5                           push    de                      // save return to basic address
 282+ 331A D9                           exx
 283+ 331B E5                           push    hl                      // save Basic's h'l' return address
 284+ 331C D9                           exx
 285+ 331D
 286+ 331D              //  ______________________________________________________________________
 287+ 331D              // 1.
 288+ 331D              // Accepts one parameter from Basic as the filename to USE for blocks.
 289+ 331D 7C                           ld      a, h
 290+ 331E B5                           or      l
 291+ 331F 28 1E                        jr      z, Skip_Parameter
 292+ 3321
 293+ 3321 11 61 3F                     ld      de, Blk_filename
 294+ 3324 01 00 00                     ld      bc, 0
 295+ 3327              Parameter_Loop:
 296+ 3327 7E                           ld      a, (hl)
 297+ 3328 FE 3A                        cp      ':'
 298+ 332A 28 08                        jr      z, End_Parameter
 299+ 332C FE 0D                        cp      $0D
 300+ 332E 28 04                        jr      z, End_Parameter
 301+ 3330 ED A0                        ldi
 302+ 3332 18 F3                        jr      Parameter_Loop
 303+ 3334              End_Parameter:
 304+ 3334 AF                           xor     a
 305+ 3335 12                           ld      (de), a
 306+ 3336 21 00 00                     ld      hl, 0
 307+ 3339 ED 42                        sbc     hl, bc
 308+ 333B 7D                           ld      a, l
 309+ 333C 32 60 3F                     ld      (Len_Filename), a
 310+ 333F              Skip_Parameter:
 311+ 333F              //  ______________________________________________________________________
 312+ 333F              // 2. prepare save-area address and hw register port
 313+ 333F 21 09 33                     ld      hl, Saved_Speed     // save-area
 314+ 3342 01 3B 24                     ld      bc, $243B               // hw-register port
 315+ 3345              //  ______________________________________________________________________
 316+ 3345              // 2.1
 317+ 3345              // ask / read speed and MMU status
 318+ 3345 3E 07                        ld      a ,$07                  // read current speed
 319+ 3347 CD FF 33                     call    Get_MMU_status
 320+ 334A 3E 03                        ld      a, 3                    // set top speed
 321+ 334C B2                           or      d                       // reuse data just read
 322+ 334D ED 92 07                     nextreg 07, a
 323+ 3350 3E 52                        ld      a, $52                  // MMU2-MMU7 ($52-$57)
 324+ 3352 1E 06                        ld      e, 6                    // loop limit
 325+ 3354              MMU_read_loop:
 326+ 3354 CD FF 33                     call    Get_MMU_status
 327+ 3357 1D                           dec     e
 328+ 3358 20 FA                        jr      nz, MMU_read_loop
 329+ 335A              //  ______________________________________________________________________
 330+ 335A              // 2.2
 331+ 335A              // save current LAYER status
 332+ 335A
 333+ 335A 11 D5 01                     ld      de, $01D5   // on success set carry-flag
 334+ 335D 0E 07                        ld      c, 7        // necessary to call M_P3DOS
 335+ 335F 3E 00                        ld      a, 0        // query current status
 336+ 3361 CF                           rst     8
 337+ 3362 94                           db      $94 // carry flag set on success
 338+ 3363
 339+ 3363 32 10 33                     ld      (Saved_Layer), a     // store after MMUs
 340+ 3366              //  ______________________________________________________________________
 341+ 3366              // 2.3
 342+ 3366 21 00 60                     ld      hl, $6000
 343+ 3369 11 00 40                     ld      de, $4000
 344+ 336C CD B9 33                     call    Backup_Restore_MMU
 345+ 336F
 346+ 336F              //  ______________________________________________________________________
 347+ 336F              // 5.
 348+ 336F              // set LAYER 1,2
 349+ 336F D9                           exx
 350+ 3370 01 02 01                     ld      bc, $0102
 351+ 3373 CD 09 34                     call    Set_Layer
 352+ 3376
 353+ 3376              //  ______________________________________________________________________
 354+ 3376              // 6.
 355+ 3376              // Set current drive/directory
 356+ 3376
 357+ 3376              //              ld      a, $00
 358+ 3376              //              rst     8
 359+ 3376              //              defb    $89     ; m_getsetdrv
 360+ 3376              //              rst     8
 361+ 3376              //              defb    $89     ; m_getsetdrv
 362+ 3376
 363+ 3376 CD 9F 33                     call    Set_Cur_Dir
 364+ 3379
 365+ 3379              //  ______________________________________________________________________
 366+ 3379              // 2.2
 367+ 3379              // Reserve pages from OS.
 368+ 3379
 369+ 3379 CD DA 33                     call    Restore_Reserve_MMU     // multiple IDE_BANK  !
 370+ 337C CD C9 33                     call    Set_forth_MMU
 371+ 337F
 372+ 337F              //  ______________________________________________________________________
 373+ 337F              // 7.
 374+ 337F              // Get current handle via M_GETHANDLE and load ram
 375+ 337F CF                           rst     8
 376+ 3380 8D                           DEFB    $8d             ; M_GETHANDLE
 377+ 3381
 378+ 3381              //  ______________________________________________________________________
 379+ 3381              // 8.
 380+ 3381              // set MMU3-MMU7 to $20-$1C abd load ram7.bin
 381+ 3381
 382+ 3381              //              ld      hl, Filename_Ram7   ; because we are within a dot command
 383+ 3381              //              ld      b, $01          ; $01 request read access
 384+ 3381              //              ld      a, $2A          ; '*'
 385+ 3381              //              rst     8
 386+ 3381              //              DEFB    $9A             ; f_open
 387+ 3381
 388+ 3381 F5                           push    af
 389+ 3382 21 00 E0                     ld      hl, $E000
 390+ 3385 01 FF 1F                     ld      bc, $1FFF
 391+ 3388 CF                           rst     8
 392+ 3389 9D                           DEFB    $9D             ; f_read
 393+ 338A F1                           pop     af
 394+ 338B CF                           rst     8
 395+ 338C 9B                           DEFB    $9B             ; f_close
 396+ 338D
 397+ 338D              //  ______________________________________________________________________
 398+ 338D              // 9.
 399+ 338D              // pre-set the four main 16-bit registers
 400+ 338D ED 7B 12 20                  ld      sp, (S0_origin)         // Calculator Stack Pointer
 401+ 3391 DD 21 34 20                  ld      ix, Next_Ptr            // Inner Interpreter Pointer
 402+ 3395 ED 5B 14 20                  ld      de, (R0_origin)         // Return Stack Pointer
 403+ 3399 01 E2 32                     ld      bc, Cold_Start          // Instruction Pointer
 404+ 339C FB                           ei
 405+ 339D
 406+ 339D                          //  push    ix
 407+ 339D                          //  pop     hl
 408+ 339D                          //  rst     $20
 409+ 339D                              next
 409+ 339D DD E9       >                jp      (ix)
 410+ 339F
 411+ 339F
 412+ 339F              //  ______________________________________________________________________
 413+ 339F              // Routine
 414+ 339F              // set current directory  /tools/vForth
 415+ 339F              Set_Cur_Dir:
 416+ 339F 21 E6 32                     ld      hl, Tools_vForth_Directory
 417+ 33A2 11 00 40                     ld      de, $4000 // use some temporary safe zone
 418+ 33A5 01 11 00                     ld      bc, 17    // length of Tools_vForth_Directory
 419+ 33A8 ED B0                        ldir
 420+ 33AA D9                           exx
 421+ 33AB 21 00 40                     ld      hl, $4000
 422+ 33AE                          //  ld      hl, Tools_vForth_Directory
 423+ 33AE D9                           exx
 424+ 33AF 11 B1 01                     ld      de, $01B1
 425+ 33B2 0E 07                        ld      c, 7
 426+ 33B4 3E 00                        ld      a, 0
 427+ 33B6 CF                           rst     8
 428+ 33B7 94                           db      $94 // carry flag set on success !
 429+ 33B8
 430+ 33B8 C9                           ret
 431+ 33B9
 432+ 33B9              //  ______________________________________________________________________
 433+ 33B9              // Routine, safe backup
 434+ 33B9              // INput: hl:$6000, de:$E000 for backup or viceversa for restore.
 435+ 33B9              Backup_Restore_MMU:
 436+ 33B9 ED 91 52 28                  nextreg $52, $28        ;   MMU2  = $8000
 437+ 33BD 01 00 20                     ld      bc, $2000
 438+ 33C0 ED B0                        ldir
 439+ 33C2 3A 0A 33                     ld      a, (Saved_MMU)
 440+ 33C5 ED 92 52                     nextreg $52, a
 441+ 33C8 C9                           ret
 442+ 33C9
 443+ 33C9              //  ______________________________________________________________________
 444+ 33C9              // Routine
 445+ 33C9              // set MMU7 to $20 and laod ram7.bin
 446+ 33C9              Set_forth_MMU:
 447+ 33C9                      ////    nextreg $53, $28         ;   MMU3  = 24576
 448+ 33C9 ED 91 54 1D                  nextreg $54, $1D         ;   MMU4  = $8000
 449+ 33CD ED 91 55 1E                  nextreg $55, $1E         ;   MMU5
 450+ 33D1 ED 91 56 1F                  nextreg $56, $1F         ;   MMU6
 451+ 33D5 ED 91 57 20                  nextreg $57, $20         ;   MMU7
 452+ 33D9 C9                           ret
 453+ 33DA
 454+ 33DA              //  ______________________________________________________________________
 455+ 33DA              // Routine:
 456+ 33DA              // reserve MMU pages
 457+ 33DA              Restore_Reserve_MMU:
 458+ 33DA 2E 1D                        ld      l, $1D      // first page
 459+ 33DC 26 0C                        ld      h, 8+3+1    // 8 HEAP, 3 MAIN, 1 BACKUP
 460+ 33DE              Reserve_MMU_Loop:
 461+ 33DE 7D                           ld      a, l            // pass page through a
 462+ 33DF D9                           exx
 463+ 33E0                               // parameters:
 464+ 33E0              Deallocate_MMU:
 465+ 33E0 21 02 00                      ld      hl, $0002      // L=2:reserve E', =3:deallocate, H=0:normal 8k page
 466+ 33E3 5F                            ld      e, a           // E' is bank-id
 467+ 33E4 D9                           exx
 468+ 33E5 E5                           push    hl
 469+ 33E6
 470+ 33E6 0E 07                        ld      c, 07           // page 7 for M_P3DOS
 471+ 33E8 3E 01                        ld      a, 1
 472+ 33EA 11 BD 01                     ld      de, $01BD  // IDE_BANK
 473+ 33ED CF                           rst     8
 474+ 33EE 94                           db      $94     // M_P3DOS
 475+ 33EF
 476+ 33EF E1                           pop     hl
 477+ 33F0 2C                           inc     l       // next page number
 478+ 33F1 25                           dec     h       // decrease counter.
 479+ 33F2 20 EA                        jr      nz, Reserve_MMU_Loop
 480+ 33F4 C9                           ret
 481+ 33F5
 482+ 33F5              //  ______________________________________________________________________
 483+ 33F5              // Routine
 484+ 33F5              // Input:  bc=$243B, a=reg, hl=array
 485+ 33F5              // Operation: set  hardware register  a  to value at  (hl)
 486+ 33F5              // Output: bc=$243B, a=a+1, hl=hl+1
 487+ 33F5              Put_MMU_status:
 488+ 33F5 56                           ld      d, (hl)
 489+ 33F6 ED 79                        out     (c), a
 490+ 33F8 04                           inc     b        // 253Bh
 491+ 33F9 ED 51                        out     (c), d
 492+ 33FB 05                           dec     b        // 243Bh
 493+ 33FC 23                           inc     hl
 494+ 33FD 3C                           inc     a
 495+ 33FE C9                           ret
 496+ 33FF
 497+ 33FF              //  ______________________________________________________________________
 498+ 33FF              // Routine
 499+ 33FF              // Input:  bc=$243B, a=reg, hl=array
 500+ 33FF              // Operation: get current value of hardware register  a  and store at (hl)
 501+ 33FF              // Output: bc=$243B, a=a+1, hl=hl+1
 502+ 33FF              Get_MMU_status:
 503+ 33FF ED 79                        out     (c), a
 504+ 3401 04                           inc     b        // 253Bh
 505+ 3402 ED 50                        in      d ,(c)
 506+ 3404 05                           dec     b        // 243Bh
 507+ 3405 72                           ld      (hl), d
 508+ 3406 23                           inc     hl
 509+ 3407 3C                           inc     a
 510+ 3408 C9                           ret
 511+ 3409
 512+ 3409              //  ______________________________________________________________________
 513+ 3409              // Routine
 514+ 3409              // set LAYER B,C
 515+ 3409              // Input: bc=$0102 for Layer 1,2
 516+ 3409              Set_Layer:
 517+ 3409 D9                           exx
 518+ 340A 11 D5 01                     ld      de, $01D5
 519+ 340D 0E 07                        ld      c, 7
 520+ 340F 3E 01                        ld      a, 1
 521+ 3411 CF                           rst     8
 522+ 3412 94                           db      $94
 523+ 3413 C9                           ret
 524+ 3414
 525+ 3414              //  ______________________________________________________________________
 526+ 3414              //
 527+ 3414              // basic        --
 528+ 3414                              New_Def BASIC, "BASIC", is_code, is_normal
 528+ 3414             >
 528+ 3414             >Dict_Ptr        defl    $
 528+ 3414             >
 528+ 3414             >//              ______________________________________________________________________
 528+ 3414             >//              Heap part
 528+ 3414             >
 528+ 3414             >
 528+ 3414             >                org     (Heap_Ptr & $1FFF) + $E000
 528+ E989             >
 528+ E989             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 528+ E989             >Latest_Definition defl  Heap_Ptr
 528+ E989             >
 528+ E989             >                // dummy db directives used to calculate length of namec
 528+ E989 42 41 53 49 >                db      "BASIC"
 528+ E98D 43          >
 528+ E98E             >len_NFA         defl    $ - temp_NFA
 528+ E98E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 528+ E989             >
 528+ E989 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 528+ E98A 42 41 53 49 >                db      "BASIC"               // name string in 7-bit ascii, but
 528+ E98E 43          >
 528+ E98F             >                org     $-1                 // alter last byte of Name just above to set
 528+ E98E C3          >                db      {b $} | END_BIT     // msb as name end
 528+ E98F             >
 528+ E98F 80 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 528+ E991             >Prev_Ptr        defl    Heap_Ptr
 528+ E991             >
 528+ E991             >mirror_Ptr      defl    $
 528+ E991             >
 528+ E991 16 34       >                dw      Dict_Ptr + 2        // xt
 528+ E993             >Heap_Ptr        defl    $ - $E000           // save current HP
 528+ E993             >
 528+ E993             >Current_HP      defl  $ - $E000             // used to set HP once!
 528+ E993             >
 528+ E993             >//              ______________________________________________________________________
 528+ E993             >//              Dictionary part
 528+ E993             >
 528+ E993             >                org     Dict_Ptr
 528+ 3414             >
 528+ 3414 91 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 528+ 3416             >
 528+ 3416             >BASIC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 528+ 3416 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 528+ 3416 ~           >
 528+ 3416 ~           >
 528+ 3416             >                endif           ; ok        // for other definitions it "points" the correct handler
 528+ 3416             >                // Use of "; ok" to suppress "warning[fwdref]"
 528+ 3416             >
 528+ 3416             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 529+ 3416
 530+ 3416              // using dot-command, no more needs to return bc
 531+ 3416              //              pop     bc                      // return  TOS  value to Basic
 532+ 3416
 533+ 3416 F3                           di
 534+ 3417
 535+ 3417 31 FC 3F                     ld      sp, $4000 - 4           // Carefully balanced from startup
 536+ 341A
 537+ 341A                              // address
 538+ 341A 21 09 33                     ld      hl, Saved_Speed
 539+ 341D 01 3B 24                     ld      bc , $243B
 540+ 3420
 541+ 3420                              // set speed
 542+ 3420 3E 07                        ld      a, $07
 543+ 3422 CD F5 33                     call    Put_MMU_status
 544+ 3425
 545+ 3425                        //    inc     hl
 546+ 3425                        //    inc     hl
 547+ 3425                              // set MMU pages
 548+ 3425 3E 52                        ld      a, $52
 549+ 3427 1E 06                        ld      e, 6
 550+ 3429              MMU_put_loop:
 551+ 3429 CD F5 33                     call    Put_MMU_status
 552+ 342C 1D                           dec     e
 553+ 342D 20 FA                        jr      nz, MMU_put_loop
 554+ 342F              //  ______________________________________________________________________
 555+ 342F                              // restore layer ide mode
 556+ 342F 7E                           ld      a, (hl)
 557+ 3430
 558+ 3430 D9                           exx
 559+ 3431 47                           ld      b, a
 560+ 3432 0F                           rrca
 561+ 3433 0F                           rrca
 562+ 3434 E6 03                        and     3
 563+ 3436 4F                           ld      c, a
 564+ 3437 78                           ld      a, b
 565+ 3438 E6 03                        and     3
 566+ 343A 47                           ld      b, a
 567+ 343B CD 09 34                     call    Set_Layer
 568+ 343E
 569+ 343E              //  ______________________________________________________________________
 570+ 343E              //
 571+ 343E 21 00 40                     ld      hl, $4000
 572+ 3441 11 00 60                     ld      de, $6000
 573+ 3444 CD B9 33                     call    Backup_Restore_MMU
 574+ 3447              //  ______________________________________________________________________
 575+ 3447              //
 576+ 3447                              // free 8k pages
 577+ 3447 3E 03                        ld      a, 3
 578+ 3449 32 E1 33                     ld      (Deallocate_MMU+1), a
 579+ 344C CD DA 33                     call    Restore_Reserve_MMU     // multiple IDE_BANK  !
 580+ 344F              //  ______________________________________________________________________
 581+ 344F
 582+ 344F                              // restore basic pointers
 583+ 344F E1                           pop     hl                      // restore h'l'
 584+ 3450 D9                           exx
 585+ 3451 E1                           pop     hl
 586+ 3452 ED 7B 08 20                  ld      sp, (SP_Basic)          // restore Basic's SP
 587+ 3456 E5                           push    hl
 588+ 3457 FB                           ei
 589+ 3458              Exit_with_error:
 590+ 3458 AF                           xor     a
 591+ 3459 76                           halt
 592+ 345A C9                           ret                             // to where USR Basic was left
 593+ 345B
 594+ 345B              //  ______________________________________________________________________
 595+ 345B              //
 596+ 345B              // +-           n1 n2 -- n3
 597+ 345B              // leaves n1 with the sign of n2 as n3.
 598+ 345B                              Colon_Def PLUS_MINUS, "+-", is_normal
 598+ 345B             >                New_Def  PLUS_MINUS, "+-", Enter_Ptr, is_normal ; ok
 598+ 345B             >
 598+ 345B             >Dict_Ptr        defl    $
 598+ 345B             >
 598+ 345B             >//              ______________________________________________________________________
 598+ 345B             >//              Heap part
 598+ 345B             >
 598+ 345B             >
 598+ 345B             >                org     (Heap_Ptr & $1FFF) + $E000
 598+ E993             >
 598+ E993             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 598+ E993             >Latest_Definition defl  Heap_Ptr
 598+ E993             >
 598+ E993             >                // dummy db directives used to calculate length of namec
 598+ E993 2B 2D       >                db      "+-"
 598+ E995             >len_NFA         defl    $ - temp_NFA
 598+ E995             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 598+ E993             >
 598+ E993 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 598+ E994 2B 2D       >                db      "+-"               // name string in 7-bit ascii, but
 598+ E996             >                org     $-1                 // alter last byte of Name just above to set
 598+ E995 AD          >                db      {b $} | END_BIT     // msb as name end
 598+ E996             >
 598+ E996 89 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 598+ E998             >Prev_Ptr        defl    Heap_Ptr
 598+ E998             >
 598+ E998             >mirror_Ptr      defl    $
 598+ E998             >
 598+ E998 5D 34       >                dw      Dict_Ptr + 2        // xt
 598+ E99A             >Heap_Ptr        defl    $ - $E000           // save current HP
 598+ E99A             >
 598+ E99A             >Current_HP      defl  $ - $E000             // used to set HP once!
 598+ E99A             >
 598+ E99A             >//              ______________________________________________________________________
 598+ E99A             >//              Dictionary part
 598+ E99A             >
 598+ E99A             >                org     Dict_Ptr
 598+ 345B             >
 598+ 345B 98 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 598+ 345D             >
 598+ 345D             >PLUS_MINUS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 598+ 345D CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 598+ 3460             >
 598+ 3460             >
 598+ 3460             >                endif           ; ok        // for other definitions it "points" the correct handler
 598+ 3460             >                // Use of "; ok" to suppress "warning[fwdref]"
 598+ 3460             >
 598+ 3460             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 599+ 3460 2C 25                        dw      ZLESS                   // 0<
 600+ 3462                                                              // if
 601+ 3462 8F 20                        dw      ZBRANCH
 602+ 3464 04 00                        dw      Plus_Minus_Endif - $
 603+ 3466 88 25                        dw          MINUS               //      minus
 604+ 3468              Plus_Minus_Endif:                               // endif
 605+ 3468 F4 24                        dw      EXIT                    // ;
 606+ 346A
 607+ 346A              //  ______________________________________________________________________
 608+ 346A              //
 609+ 346A              // d+-          d1 n -- d2
 610+ 346A              // leaves d1 with the sign of n as d2.
 611+ 346A                              Colon_Def DPLUS_MINUS, "D+-", is_normal
 611+ 346A             >                New_Def  DPLUS_MINUS, "D+-", Enter_Ptr, is_normal ; ok
 611+ 346A             >
 611+ 346A             >Dict_Ptr        defl    $
 611+ 346A             >
 611+ 346A             >//              ______________________________________________________________________
 611+ 346A             >//              Heap part
 611+ 346A             >
 611+ 346A             >
 611+ 346A             >                org     (Heap_Ptr & $1FFF) + $E000
 611+ E99A             >
 611+ E99A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 611+ E99A             >Latest_Definition defl  Heap_Ptr
 611+ E99A             >
 611+ E99A             >                // dummy db directives used to calculate length of namec
 611+ E99A 44 2B 2D    >                db      "D+-"
 611+ E99D             >len_NFA         defl    $ - temp_NFA
 611+ E99D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 611+ E99A             >
 611+ E99A 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 611+ E99B 44 2B 2D    >                db      "D+-"               // name string in 7-bit ascii, but
 611+ E99E             >                org     $-1                 // alter last byte of Name just above to set
 611+ E99D AD          >                db      {b $} | END_BIT     // msb as name end
 611+ E99E             >
 611+ E99E 93 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 611+ E9A0             >Prev_Ptr        defl    Heap_Ptr
 611+ E9A0             >
 611+ E9A0             >mirror_Ptr      defl    $
 611+ E9A0             >
 611+ E9A0 6C 34       >                dw      Dict_Ptr + 2        // xt
 611+ E9A2             >Heap_Ptr        defl    $ - $E000           // save current HP
 611+ E9A2             >
 611+ E9A2             >Current_HP      defl  $ - $E000             // used to set HP once!
 611+ E9A2             >
 611+ E9A2             >//              ______________________________________________________________________
 611+ E9A2             >//              Dictionary part
 611+ E9A2             >
 611+ E9A2             >                org     Dict_Ptr
 611+ 346A             >
 611+ 346A A0 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 611+ 346C             >
 611+ 346C             >DPLUS_MINUS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 611+ 346C CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 611+ 346F             >
 611+ 346F             >
 611+ 346F             >                endif           ; ok        // for other definitions it "points" the correct handler
 611+ 346F             >                // Use of "; ok" to suppress "warning[fwdref]"
 611+ 346F             >
 611+ 346F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 612+ 346F 2C 25                        dw      ZLESS                   // 0<
 613+ 3471                                                              // if
 614+ 3471 8F 20                        dw      ZBRANCH
 615+ 3473 04 00                        dw      DPlus_Minus_Endif - $
 616+ 3475 96 25                        dw          DMINUS              //      dminus
 617+ 3477              DPlus_Minus_Endif:                              // endif
 618+ 3477 F4 24                        dw      EXIT                    // ;
 619+ 3479
 620+ 3479              //  ______________________________________________________________________
 621+ 3479              //
 622+ 3479              // abs          n1 -- n2
 623+ 3479                              Colon_Def ABS_OP, "ABS", is_normal
 623+ 3479             >                New_Def  ABS_OP, "ABS", Enter_Ptr, is_normal ; ok
 623+ 3479             >
 623+ 3479             >Dict_Ptr        defl    $
 623+ 3479             >
 623+ 3479             >//              ______________________________________________________________________
 623+ 3479             >//              Heap part
 623+ 3479             >
 623+ 3479             >
 623+ 3479             >                org     (Heap_Ptr & $1FFF) + $E000
 623+ E9A2             >
 623+ E9A2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 623+ E9A2             >Latest_Definition defl  Heap_Ptr
 623+ E9A2             >
 623+ E9A2             >                // dummy db directives used to calculate length of namec
 623+ E9A2 41 42 53    >                db      "ABS"
 623+ E9A5             >len_NFA         defl    $ - temp_NFA
 623+ E9A5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 623+ E9A2             >
 623+ E9A2 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 623+ E9A3 41 42 53    >                db      "ABS"               // name string in 7-bit ascii, but
 623+ E9A6             >                org     $-1                 // alter last byte of Name just above to set
 623+ E9A5 D3          >                db      {b $} | END_BIT     // msb as name end
 623+ E9A6             >
 623+ E9A6 9A 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 623+ E9A8             >Prev_Ptr        defl    Heap_Ptr
 623+ E9A8             >
 623+ E9A8             >mirror_Ptr      defl    $
 623+ E9A8             >
 623+ E9A8 7B 34       >                dw      Dict_Ptr + 2        // xt
 623+ E9AA             >Heap_Ptr        defl    $ - $E000           // save current HP
 623+ E9AA             >
 623+ E9AA             >Current_HP      defl  $ - $E000             // used to set HP once!
 623+ E9AA             >
 623+ E9AA             >//              ______________________________________________________________________
 623+ E9AA             >//              Dictionary part
 623+ E9AA             >
 623+ E9AA             >                org     Dict_Ptr
 623+ 3479             >
 623+ 3479 A8 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 623+ 347B             >
 623+ 347B             >ABS_OP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 623+ 347B CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 623+ 347E             >
 623+ 347E             >
 623+ 347E             >                endif           ; ok        // for other definitions it "points" the correct handler
 623+ 347E             >                // Use of "; ok" to suppress "warning[fwdref]"
 623+ 347E             >
 623+ 347E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 624+ 347E CD 25                        dw      DUP                     // dup
 625+ 3480 5D 34                        dw      PLUS_MINUS              // +-
 626+ 3482 F4 24                        dw      EXIT                    // ;
 627+ 3484
 628+ 3484              //  ______________________________________________________________________
 629+ 3484              //
 630+ 3484              // dabs         d1 -- d2
 631+ 3484                              Colon_Def DABS, "DABS", is_normal
 631+ 3484             >                New_Def  DABS, "DABS", Enter_Ptr, is_normal ; ok
 631+ 3484             >
 631+ 3484             >Dict_Ptr        defl    $
 631+ 3484             >
 631+ 3484             >//              ______________________________________________________________________
 631+ 3484             >//              Heap part
 631+ 3484             >
 631+ 3484             >
 631+ 3484             >                org     (Heap_Ptr & $1FFF) + $E000
 631+ E9AA             >
 631+ E9AA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 631+ E9AA             >Latest_Definition defl  Heap_Ptr
 631+ E9AA             >
 631+ E9AA             >                // dummy db directives used to calculate length of namec
 631+ E9AA 44 41 42 53 >                db      "DABS"
 631+ E9AE             >len_NFA         defl    $ - temp_NFA
 631+ E9AE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 631+ E9AA             >
 631+ E9AA 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 631+ E9AB 44 41 42 53 >                db      "DABS"               // name string in 7-bit ascii, but
 631+ E9AF             >                org     $-1                 // alter last byte of Name just above to set
 631+ E9AE D3          >                db      {b $} | END_BIT     // msb as name end
 631+ E9AF             >
 631+ E9AF A2 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 631+ E9B1             >Prev_Ptr        defl    Heap_Ptr
 631+ E9B1             >
 631+ E9B1             >mirror_Ptr      defl    $
 631+ E9B1             >
 631+ E9B1 86 34       >                dw      Dict_Ptr + 2        // xt
 631+ E9B3             >Heap_Ptr        defl    $ - $E000           // save current HP
 631+ E9B3             >
 631+ E9B3             >Current_HP      defl  $ - $E000             // used to set HP once!
 631+ E9B3             >
 631+ E9B3             >//              ______________________________________________________________________
 631+ E9B3             >//              Dictionary part
 631+ E9B3             >
 631+ E9B3             >                org     Dict_Ptr
 631+ 3484             >
 631+ 3484 B1 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 631+ 3486             >
 631+ 3486             >DABS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 631+ 3486 CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 631+ 3489             >
 631+ 3489             >
 631+ 3489             >                endif           ; ok        // for other definitions it "points" the correct handler
 631+ 3489             >                // Use of "; ok" to suppress "warning[fwdref]"
 631+ 3489             >
 631+ 3489             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 632+ 3489 CD 25                        dw      DUP                     // dup
 633+ 348B 6C 34                        dw      DPLUS_MINUS             // d+-
 634+ 348D F4 24                        dw      EXIT                    // ;
 635+ 348F
 636+ 348F              //  ______________________________________________________________________
 637+ 348F              //
 638+ 348F              // m*           n1 n2 -- d
 639+ 348F              // multiply two integer giving a double
 640+ 348F                              Colon_Def MMUL, "M*", is_normal
 640+ 348F             >                New_Def  MMUL, "M*", Enter_Ptr, is_normal ; ok
 640+ 348F             >
 640+ 348F             >Dict_Ptr        defl    $
 640+ 348F             >
 640+ 348F             >//              ______________________________________________________________________
 640+ 348F             >//              Heap part
 640+ 348F             >
 640+ 348F             >
 640+ 348F             >                org     (Heap_Ptr & $1FFF) + $E000
 640+ E9B3             >
 640+ E9B3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 640+ E9B3             >Latest_Definition defl  Heap_Ptr
 640+ E9B3             >
 640+ E9B3             >                // dummy db directives used to calculate length of namec
 640+ E9B3 4D 2A       >                db      "M*"
 640+ E9B5             >len_NFA         defl    $ - temp_NFA
 640+ E9B5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 640+ E9B3             >
 640+ E9B3 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 640+ E9B4 4D 2A       >                db      "M*"               // name string in 7-bit ascii, but
 640+ E9B6             >                org     $-1                 // alter last byte of Name just above to set
 640+ E9B5 AA          >                db      {b $} | END_BIT     // msb as name end
 640+ E9B6             >
 640+ E9B6 AA 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 640+ E9B8             >Prev_Ptr        defl    Heap_Ptr
 640+ E9B8             >
 640+ E9B8             >mirror_Ptr      defl    $
 640+ E9B8             >
 640+ E9B8 91 34       >                dw      Dict_Ptr + 2        // xt
 640+ E9BA             >Heap_Ptr        defl    $ - $E000           // save current HP
 640+ E9BA             >
 640+ E9BA             >Current_HP      defl  $ - $E000             // used to set HP once!
 640+ E9BA             >
 640+ E9BA             >//              ______________________________________________________________________
 640+ E9BA             >//              Dictionary part
 640+ E9BA             >
 640+ E9BA             >                org     Dict_Ptr
 640+ 348F             >
 640+ 348F B8 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 640+ 3491             >
 640+ 3491             >MMUL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 640+ 3491 CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 640+ 3494             >
 640+ 3494             >
 640+ 3494             >                endif           ; ok        // for other definitions it "points" the correct handler
 640+ 3494             >                // Use of "; ok" to suppress "warning[fwdref]"
 640+ 3494             >
 640+ 3494             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 641+ 3494 1C 26 CF 24                  dw      TWO_DUP, XOR_OP, TO_R   // 2dup xor >r
 641+ 3498 FE 24
 642+ 349A 7B 34 C6 25                  dw      ABS_OP, SWAP            // abs swap
 643+ 349E 7B 34 59 24                  dw      ABS_OP, UM_MUL          // abs um*
 644+ 34A2 09 25 6C 34                  dw      R_TO, DPLUS_MINUS       // r> d+-
 645+ 34A6 F4 24                        dw      EXIT                    // ;
 646+ 34A8
 647+ 34A8              //  ______________________________________________________________________
 648+ 34A8              //
 649+ 34A8              // sm/rem       d n -- q r
 650+ 34A8              // Symmetric division: divides a double into n giving quotient q and remainder r
 651+ 34A8              // the remainder has the sign of d.
 652+ 34A8                              Colon_Def SMDIVM, "SM/REM", is_normal
 652+ 34A8             >                New_Def  SMDIVM, "SM/REM", Enter_Ptr, is_normal ; ok
 652+ 34A8             >
 652+ 34A8             >Dict_Ptr        defl    $
 652+ 34A8             >
 652+ 34A8             >//              ______________________________________________________________________
 652+ 34A8             >//              Heap part
 652+ 34A8             >
 652+ 34A8             >
 652+ 34A8             >                org     (Heap_Ptr & $1FFF) + $E000
 652+ E9BA             >
 652+ E9BA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 652+ E9BA             >Latest_Definition defl  Heap_Ptr
 652+ E9BA             >
 652+ E9BA             >                // dummy db directives used to calculate length of namec
 652+ E9BA 53 4D 2F 52 >                db      "SM/REM"
 652+ E9BE 45 4D       >
 652+ E9C0             >len_NFA         defl    $ - temp_NFA
 652+ E9C0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 652+ E9BA             >
 652+ E9BA 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 652+ E9BB 53 4D 2F 52 >                db      "SM/REM"               // name string in 7-bit ascii, but
 652+ E9BF 45 4D       >
 652+ E9C1             >                org     $-1                 // alter last byte of Name just above to set
 652+ E9C0 CD          >                db      {b $} | END_BIT     // msb as name end
 652+ E9C1             >
 652+ E9C1 B3 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 652+ E9C3             >Prev_Ptr        defl    Heap_Ptr
 652+ E9C3             >
 652+ E9C3             >mirror_Ptr      defl    $
 652+ E9C3             >
 652+ E9C3 AA 34       >                dw      Dict_Ptr + 2        // xt
 652+ E9C5             >Heap_Ptr        defl    $ - $E000           // save current HP
 652+ E9C5             >
 652+ E9C5             >Current_HP      defl  $ - $E000             // used to set HP once!
 652+ E9C5             >
 652+ E9C5             >//              ______________________________________________________________________
 652+ E9C5             >//              Dictionary part
 652+ E9C5             >
 652+ E9C5             >                org     Dict_Ptr
 652+ 34A8             >
 652+ 34A8 C3 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 652+ 34AA             >
 652+ 34AA             >SMDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 652+ 34AA CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 652+ 34AD             >
 652+ 34AD             >
 652+ 34AD             >                endif           ; ok        // for other definitions it "points" the correct handler
 652+ 34AD             >                // Use of "; ok" to suppress "warning[fwdref]"
 652+ 34AD             >
 652+ 34AD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 653+ 34AD A9 25 FE 24                  dw      OVER, TO_R, TO_R        // over >r >r
 653+ 34B1 FE 24
 654+ 34B3 86 34 14 25                  dw      DABS, R_OP, ABS_OP      // dabs r abs
 654+ 34B7 7B 34
 655+ 34B9 81 24                        dw      UMDIVMOD                // um/mod
 656+ 34BB 09 25                        dw      R_TO                    // r>
 657+ 34BD 14 25 CF 24                  dw      R_OP, XOR_OP            // r xor
 658+ 34C1 5D 34 C6 25                  dw      PLUS_MINUS, SWAP        // +- swap
 659+ 34C5 09 25                        dw      R_TO                    // r>
 660+ 34C7 5D 34 C6 25                  dw      PLUS_MINUS, SWAP        // +- swap
 661+ 34CB F4 24                        dw      EXIT                    // ;
 662+ 34CD
 663+ 34CD              //  ______________________________________________________________________
 664+ 34CD              //
 665+ 34CD              // fm/mod       d n -- q r
 666+ 34CD              // Floored division: divides a double into n giving quotient q and remainder r
 667+ 34CD              // the remainder has the sign of d.
 668+ 34CD                              Colon_Def FMDIVM, "FM/MOD", is_normal
 668+ 34CD             >                New_Def  FMDIVM, "FM/MOD", Enter_Ptr, is_normal ; ok
 668+ 34CD             >
 668+ 34CD             >Dict_Ptr        defl    $
 668+ 34CD             >
 668+ 34CD             >//              ______________________________________________________________________
 668+ 34CD             >//              Heap part
 668+ 34CD             >
 668+ 34CD             >
 668+ 34CD             >                org     (Heap_Ptr & $1FFF) + $E000
 668+ E9C5             >
 668+ E9C5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 668+ E9C5             >Latest_Definition defl  Heap_Ptr
 668+ E9C5             >
 668+ E9C5             >                // dummy db directives used to calculate length of namec
 668+ E9C5 46 4D 2F 4D >                db      "FM/MOD"
 668+ E9C9 4F 44       >
 668+ E9CB             >len_NFA         defl    $ - temp_NFA
 668+ E9CB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 668+ E9C5             >
 668+ E9C5 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 668+ E9C6 46 4D 2F 4D >                db      "FM/MOD"               // name string in 7-bit ascii, but
 668+ E9CA 4F 44       >
 668+ E9CC             >                org     $-1                 // alter last byte of Name just above to set
 668+ E9CB C4          >                db      {b $} | END_BIT     // msb as name end
 668+ E9CC             >
 668+ E9CC BA 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 668+ E9CE             >Prev_Ptr        defl    Heap_Ptr
 668+ E9CE             >
 668+ E9CE             >mirror_Ptr      defl    $
 668+ E9CE             >
 668+ E9CE CF 34       >                dw      Dict_Ptr + 2        // xt
 668+ E9D0             >Heap_Ptr        defl    $ - $E000           // save current HP
 668+ E9D0             >
 668+ E9D0             >Current_HP      defl  $ - $E000             // used to set HP once!
 668+ E9D0             >
 668+ E9D0             >//              ______________________________________________________________________
 668+ E9D0             >//              Dictionary part
 668+ E9D0             >
 668+ E9D0             >                org     Dict_Ptr
 668+ 34CD             >
 668+ 34CD CE 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 668+ 34CF             >
 668+ 34CF             >FMDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 668+ 34CF CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 668+ 34D2             >
 668+ 34D2             >
 668+ 34D2             >                endif           ; ok        // for other definitions it "points" the correct handler
 668+ 34D2             >                // Use of "; ok" to suppress "warning[fwdref]"
 668+ 34D2             >
 668+ 34D2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 669+ 34D2 CD 25 FE 24                  dw      DUP, TO_R               // dup >r
 670+ 34D6 AA 34                        dw      SMDIVM
 671+ 34D8 A9 25 CD 25                  dw      OVER, DUP
 672+ 34DC 19 25 19 25                  dw      ZEQUAL, ZEQUAL
 673+ 34E0 C6 25 2C 25                  dw      SWAP, ZLESS
 674+ 34E4 14 25 2C 25                  dw      R_OP, ZLESS
 675+ 34E8 CF 24 B4 24                  dw      XOR_OP, AND_OP
 676+ 34EC 8F 20                        dw      ZBRANCH
 677+ 34EE 10 00                        dw      Fm_Mod_Else - $
 678+ 34F0 67 25                        dw          ONE_SUBTRACT
 679+ 34F2 C6 25 09 25                  dw          SWAP, R_TO
 680+ 34F6 47 25 C6 25                  dw          PLUS, SWAP
 681+ 34FA 82 20                        dw      BRANCH
 682+ 34FC 06 00                        dw      Fm_Mod_Endif - $
 683+ 34FE              Fm_Mod_Else:
 684+ 34FE 09 25 B2 25                  dw          R_TO, DROP
 685+ 3502              Fm_Mod_Endif:
 686+ 3502 F4 24                        dw      EXIT
 687+ 3504              //              dw      TWO_DUP                 // 2dup
 688+ 3504              //              dw      XOR_OP, TO_R, TO_R      // xor >r >r
 689+ 3504              //              dw      DABS, R_OP, ABS_OP      // dabs r abs
 690+ 3504              //              dw      UMDIVMOD                // um/mod
 691+ 3504              //              dw      SWAP                    // swap
 692+ 3504              //              dw      II, ZLESS               // i'
 693+ 3504              //              dw      ONE, AND_OP, PLUS       // 0< 1 and +
 694+ 3504              //              dw      R_TO                    // r>
 695+ 3504              //              dw      PLUS_MINUS, SWAP        // +- swap
 696+ 3504              //              dw      R_OP                    // r@
 697+ 3504              //              dw      ZLESS                   // i'
 698+ 3504              //              dw      ONE, AND_OP, PLUS       // 0< 1 and +
 699+ 3504              //              dw      R_TO                    // r>
 700+ 3504              //              dw      PLUS_MINUS              // +- swap
 701+ 3504              //              dw      EXIT                    // ;
 702+ 3504
 703+ 3504              //  ______________________________________________________________________
 704+ 3504              //
 705+ 3504              // m/mod        d n -- q r
 706+ 3504              // multiply two integer giving a double
 707+ 3504                              Colon_Def MDIVM, "M/MOD", is_normal
 707+ 3504             >                New_Def  MDIVM, "M/MOD", Enter_Ptr, is_normal ; ok
 707+ 3504             >
 707+ 3504             >Dict_Ptr        defl    $
 707+ 3504             >
 707+ 3504             >//              ______________________________________________________________________
 707+ 3504             >//              Heap part
 707+ 3504             >
 707+ 3504             >
 707+ 3504             >                org     (Heap_Ptr & $1FFF) + $E000
 707+ E9D0             >
 707+ E9D0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 707+ E9D0             >Latest_Definition defl  Heap_Ptr
 707+ E9D0             >
 707+ E9D0             >                // dummy db directives used to calculate length of namec
 707+ E9D0 4D 2F 4D 4F >                db      "M/MOD"
 707+ E9D4 44          >
 707+ E9D5             >len_NFA         defl    $ - temp_NFA
 707+ E9D5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 707+ E9D0             >
 707+ E9D0 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 707+ E9D1 4D 2F 4D 4F >                db      "M/MOD"               // name string in 7-bit ascii, but
 707+ E9D5 44          >
 707+ E9D6             >                org     $-1                 // alter last byte of Name just above to set
 707+ E9D5 C4          >                db      {b $} | END_BIT     // msb as name end
 707+ E9D6             >
 707+ E9D6 C5 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 707+ E9D8             >Prev_Ptr        defl    Heap_Ptr
 707+ E9D8             >
 707+ E9D8             >mirror_Ptr      defl    $
 707+ E9D8             >
 707+ E9D8 06 35       >                dw      Dict_Ptr + 2        // xt
 707+ E9DA             >Heap_Ptr        defl    $ - $E000           // save current HP
 707+ E9DA             >
 707+ E9DA             >Current_HP      defl  $ - $E000             // used to set HP once!
 707+ E9DA             >
 707+ E9DA             >//              ______________________________________________________________________
 707+ E9DA             >//              Dictionary part
 707+ E9DA             >
 707+ E9DA             >                org     Dict_Ptr
 707+ 3504             >
 707+ 3504 D8 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 707+ 3506             >
 707+ 3506             >MDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 707+ 3506 CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 707+ 3509             >
 707+ 3509             >
 707+ 3509             >                endif           ; ok        // for other definitions it "points" the correct handler
 707+ 3509             >                // Use of "; ok" to suppress "warning[fwdref]"
 707+ 3509             >
 707+ 3509             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 708+ 3509 AA 34                        dw      SMDIVM
 709+ 350B F4 24                        dw      EXIT                    // ;
 710+ 350D
 711+ 350D              //  ______________________________________________________________________
 712+ 350D              //
 713+ 350D              // m/           d n -- q
 714+ 350D              // multiply two integer giving a double
 715+ 350D                              Colon_Def MDIV, "M/", is_normal
 715+ 350D             >                New_Def  MDIV, "M/", Enter_Ptr, is_normal ; ok
 715+ 350D             >
 715+ 350D             >Dict_Ptr        defl    $
 715+ 350D             >
 715+ 350D             >//              ______________________________________________________________________
 715+ 350D             >//              Heap part
 715+ 350D             >
 715+ 350D             >
 715+ 350D             >                org     (Heap_Ptr & $1FFF) + $E000
 715+ E9DA             >
 715+ E9DA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 715+ E9DA             >Latest_Definition defl  Heap_Ptr
 715+ E9DA             >
 715+ E9DA             >                // dummy db directives used to calculate length of namec
 715+ E9DA 4D 2F       >                db      "M/"
 715+ E9DC             >len_NFA         defl    $ - temp_NFA
 715+ E9DC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 715+ E9DA             >
 715+ E9DA 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 715+ E9DB 4D 2F       >                db      "M/"               // name string in 7-bit ascii, but
 715+ E9DD             >                org     $-1                 // alter last byte of Name just above to set
 715+ E9DC AF          >                db      {b $} | END_BIT     // msb as name end
 715+ E9DD             >
 715+ E9DD D0 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 715+ E9DF             >Prev_Ptr        defl    Heap_Ptr
 715+ E9DF             >
 715+ E9DF             >mirror_Ptr      defl    $
 715+ E9DF             >
 715+ E9DF 0F 35       >                dw      Dict_Ptr + 2        // xt
 715+ E9E1             >Heap_Ptr        defl    $ - $E000           // save current HP
 715+ E9E1             >
 715+ E9E1             >Current_HP      defl  $ - $E000             // used to set HP once!
 715+ E9E1             >
 715+ E9E1             >//              ______________________________________________________________________
 715+ E9E1             >//              Dictionary part
 715+ E9E1             >
 715+ E9E1             >                org     Dict_Ptr
 715+ 350D             >
 715+ 350D DF 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 715+ 350F             >
 715+ 350F             >MDIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 715+ 350F CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 715+ 3512             >
 715+ 3512             >
 715+ 3512             >                endif           ; ok        // for other definitions it "points" the correct handler
 715+ 3512             >                // Use of "; ok" to suppress "warning[fwdref]"
 715+ 3512             >
 715+ 3512             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 716+ 3512 06 35 B7 25                  dw      MDIVM, NIP
 717+ 3516 F4 24                        dw      EXIT                    // ;
 718+ 3518
 719+ 3518              //  ______________________________________________________________________
 720+ 3518              //
 721+ 3518              // *            n1 n2 -- n3
 722+ 3518              // multiply two integer
 723+ 3518                              Colon_Def MUL, "*", is_normal
 723+ 3518             >                New_Def  MUL, "*", Enter_Ptr, is_normal ; ok
 723+ 3518             >
 723+ 3518             >Dict_Ptr        defl    $
 723+ 3518             >
 723+ 3518             >//              ______________________________________________________________________
 723+ 3518             >//              Heap part
 723+ 3518             >
 723+ 3518             >
 723+ 3518             >                org     (Heap_Ptr & $1FFF) + $E000
 723+ E9E1             >
 723+ E9E1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 723+ E9E1             >Latest_Definition defl  Heap_Ptr
 723+ E9E1             >
 723+ E9E1             >                // dummy db directives used to calculate length of namec
 723+ E9E1 2A          >                db      "*"
 723+ E9E2             >len_NFA         defl    $ - temp_NFA
 723+ E9E2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 723+ E9E1             >
 723+ E9E1 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 723+ E9E2 2A          >                db      "*"               // name string in 7-bit ascii, but
 723+ E9E3             >                org     $-1                 // alter last byte of Name just above to set
 723+ E9E2 AA          >                db      {b $} | END_BIT     // msb as name end
 723+ E9E3             >
 723+ E9E3 DA 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 723+ E9E5             >Prev_Ptr        defl    Heap_Ptr
 723+ E9E5             >
 723+ E9E5             >mirror_Ptr      defl    $
 723+ E9E5             >
 723+ E9E5 1A 35       >                dw      Dict_Ptr + 2        // xt
 723+ E9E7             >Heap_Ptr        defl    $ - $E000           // save current HP
 723+ E9E7             >
 723+ E9E7             >Current_HP      defl  $ - $E000             // used to set HP once!
 723+ E9E7             >
 723+ E9E7             >//              ______________________________________________________________________
 723+ E9E7             >//              Dictionary part
 723+ E9E7             >
 723+ E9E7             >                org     Dict_Ptr
 723+ 3518             >
 723+ 3518 E5 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 723+ 351A             >
 723+ 351A             >MUL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 723+ 351A CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 723+ 351D             >
 723+ 351D             >
 723+ 351D             >                endif           ; ok        // for other definitions it "points" the correct handler
 723+ 351D             >                // Use of "; ok" to suppress "warning[fwdref]"
 723+ 351D             >
 723+ 351D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 724+ 351D 91 34 B2 25                  dw      MMUL, DROP              // m* drop
 725+ 3521 F4 24                        dw      EXIT                    // ;
 726+ 3523
 727+ 3523              //  ______________________________________________________________________
 728+ 3523              //
 729+ 3523              // /mod         n1 n2 -- n3 n4
 730+ 3523              // leaves quotient n4 and remainder n3 of the integer division n1 / n2.
 731+ 3523              // The remainder has the sign of n1
 732+ 3523                              Colon_Def DIVMOD, "/MOD", is_normal
 732+ 3523             >                New_Def  DIVMOD, "/MOD", Enter_Ptr, is_normal ; ok
 732+ 3523             >
 732+ 3523             >Dict_Ptr        defl    $
 732+ 3523             >
 732+ 3523             >//              ______________________________________________________________________
 732+ 3523             >//              Heap part
 732+ 3523             >
 732+ 3523             >
 732+ 3523             >                org     (Heap_Ptr & $1FFF) + $E000
 732+ E9E7             >
 732+ E9E7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 732+ E9E7             >Latest_Definition defl  Heap_Ptr
 732+ E9E7             >
 732+ E9E7             >                // dummy db directives used to calculate length of namec
 732+ E9E7 2F 4D 4F 44 >                db      "/MOD"
 732+ E9EB             >len_NFA         defl    $ - temp_NFA
 732+ E9EB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 732+ E9E7             >
 732+ E9E7 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 732+ E9E8 2F 4D 4F 44 >                db      "/MOD"               // name string in 7-bit ascii, but
 732+ E9EC             >                org     $-1                 // alter last byte of Name just above to set
 732+ E9EB C4          >                db      {b $} | END_BIT     // msb as name end
 732+ E9EC             >
 732+ E9EC E1 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 732+ E9EE             >Prev_Ptr        defl    Heap_Ptr
 732+ E9EE             >
 732+ E9EE             >mirror_Ptr      defl    $
 732+ E9EE             >
 732+ E9EE 25 35       >                dw      Dict_Ptr + 2        // xt
 732+ E9F0             >Heap_Ptr        defl    $ - $E000           // save current HP
 732+ E9F0             >
 732+ E9F0             >Current_HP      defl  $ - $E000             // used to set HP once!
 732+ E9F0             >
 732+ E9F0             >//              ______________________________________________________________________
 732+ E9F0             >//              Dictionary part
 732+ E9F0             >
 732+ E9F0             >                org     Dict_Ptr
 732+ 3523             >
 732+ 3523 EE 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 732+ 3525             >
 732+ 3525             >DIVMOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 732+ 3525 CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 732+ 3528             >
 732+ 3528             >
 732+ 3528             >                endif           ; ok        // for other definitions it "points" the correct handler
 732+ 3528             >                // Use of "; ok" to suppress "warning[fwdref]"
 732+ 3528             >
 732+ 3528             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 733+ 3528 FE 24 8F 28                  dw      TO_R, S_TO_D, R_TO      // >r s->d r>
 733+ 352C 09 25
 734+ 352E 06 35                        dw      MDIVM                   // m/mod
 735+ 3530 F4 24                        dw      EXIT                    // ;
 736+ 3532
 737+ 3532              //  ______________________________________________________________________
 738+ 3532              //
 739+ 3532              // /            n1 n2 -- n3
 740+ 3532              // division
 741+ 3532                              Colon_Def DIV, "/", is_normal
 741+ 3532             >                New_Def  DIV, "/", Enter_Ptr, is_normal ; ok
 741+ 3532             >
 741+ 3532             >Dict_Ptr        defl    $
 741+ 3532             >
 741+ 3532             >//              ______________________________________________________________________
 741+ 3532             >//              Heap part
 741+ 3532             >
 741+ 3532             >
 741+ 3532             >                org     (Heap_Ptr & $1FFF) + $E000
 741+ E9F0             >
 741+ E9F0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 741+ E9F0             >Latest_Definition defl  Heap_Ptr
 741+ E9F0             >
 741+ E9F0             >                // dummy db directives used to calculate length of namec
 741+ E9F0 2F          >                db      "/"
 741+ E9F1             >len_NFA         defl    $ - temp_NFA
 741+ E9F1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 741+ E9F0             >
 741+ E9F0 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 741+ E9F1 2F          >                db      "/"               // name string in 7-bit ascii, but
 741+ E9F2             >                org     $-1                 // alter last byte of Name just above to set
 741+ E9F1 AF          >                db      {b $} | END_BIT     // msb as name end
 741+ E9F2             >
 741+ E9F2 E7 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 741+ E9F4             >Prev_Ptr        defl    Heap_Ptr
 741+ E9F4             >
 741+ E9F4             >mirror_Ptr      defl    $
 741+ E9F4             >
 741+ E9F4 34 35       >                dw      Dict_Ptr + 2        // xt
 741+ E9F6             >Heap_Ptr        defl    $ - $E000           // save current HP
 741+ E9F6             >
 741+ E9F6             >Current_HP      defl  $ - $E000             // used to set HP once!
 741+ E9F6             >
 741+ E9F6             >//              ______________________________________________________________________
 741+ E9F6             >//              Dictionary part
 741+ E9F6             >
 741+ E9F6             >                org     Dict_Ptr
 741+ 3532             >
 741+ 3532 F4 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 741+ 3534             >
 741+ 3534             >DIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 741+ 3534 CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 741+ 3537             >
 741+ 3537             >
 741+ 3537             >                endif           ; ok        // for other definitions it "points" the correct handler
 741+ 3537             >                // Use of "; ok" to suppress "warning[fwdref]"
 741+ 3537             >
 741+ 3537             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 742+ 3537 25 35 B7 25                  dw      DIVMOD, NIP             // /mod nip
 743+ 353B F4 24                        dw      EXIT                    // ;
 744+ 353D
 745+ 353D              //  ______________________________________________________________________
 746+ 353D              //
 747+ 353D              // mod          n1 n2 -- n3
 748+ 353D                              Colon_Def MOD, "MOD", is_normal
 748+ 353D             >                New_Def  MOD, "MOD", Enter_Ptr, is_normal ; ok
 748+ 353D             >
 748+ 353D             >Dict_Ptr        defl    $
 748+ 353D             >
 748+ 353D             >//              ______________________________________________________________________
 748+ 353D             >//              Heap part
 748+ 353D             >
 748+ 353D             >
 748+ 353D             >                org     (Heap_Ptr & $1FFF) + $E000
 748+ E9F6             >
 748+ E9F6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 748+ E9F6             >Latest_Definition defl  Heap_Ptr
 748+ E9F6             >
 748+ E9F6             >                // dummy db directives used to calculate length of namec
 748+ E9F6 4D 4F 44    >                db      "MOD"
 748+ E9F9             >len_NFA         defl    $ - temp_NFA
 748+ E9F9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 748+ E9F6             >
 748+ E9F6 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 748+ E9F7 4D 4F 44    >                db      "MOD"               // name string in 7-bit ascii, but
 748+ E9FA             >                org     $-1                 // alter last byte of Name just above to set
 748+ E9F9 C4          >                db      {b $} | END_BIT     // msb as name end
 748+ E9FA             >
 748+ E9FA F0 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 748+ E9FC             >Prev_Ptr        defl    Heap_Ptr
 748+ E9FC             >
 748+ E9FC             >mirror_Ptr      defl    $
 748+ E9FC             >
 748+ E9FC 3F 35       >                dw      Dict_Ptr + 2        // xt
 748+ E9FE             >Heap_Ptr        defl    $ - $E000           // save current HP
 748+ E9FE             >
 748+ E9FE             >Current_HP      defl  $ - $E000             // used to set HP once!
 748+ E9FE             >
 748+ E9FE             >//              ______________________________________________________________________
 748+ E9FE             >//              Dictionary part
 748+ E9FE             >
 748+ E9FE             >                org     Dict_Ptr
 748+ 353D             >
 748+ 353D FC 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 748+ 353F             >
 748+ 353F             >MOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 748+ 353F CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 748+ 3542             >
 748+ 3542             >
 748+ 3542             >                endif           ; ok        // for other definitions it "points" the correct handler
 748+ 3542             >                // Use of "; ok" to suppress "warning[fwdref]"
 748+ 3542             >
 748+ 3542             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 749+ 3542 25 35 B2 25                  dw      DIVMOD, DROP            // /mod drop
 750+ 3546 F4 24                        dw      EXIT                    // ;
 751+ 3548
 752+ 3548              //  ______________________________________________________________________
 753+ 3548              //
 754+ 3548              // */mod        n1 n2 n3 -- n4 n5
 755+ 3548              // leaves the quotient n5 and the remainder n4 of the operation
 756+ 3548              // (n1 * n2) / n3. The intermediate passage through a double number
 757+ 3548              // avoids loss of precision
 758+ 3548                              Colon_Def MUL_DIV_MOD, "*/MOD", is_normal
 758+ 3548             >                New_Def  MUL_DIV_MOD, "*/MOD", Enter_Ptr, is_normal ; ok
 758+ 3548             >
 758+ 3548             >Dict_Ptr        defl    $
 758+ 3548             >
 758+ 3548             >//              ______________________________________________________________________
 758+ 3548             >//              Heap part
 758+ 3548             >
 758+ 3548             >
 758+ 3548             >                org     (Heap_Ptr & $1FFF) + $E000
 758+ E9FE             >
 758+ E9FE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 758+ E9FE             >Latest_Definition defl  Heap_Ptr
 758+ E9FE             >
 758+ E9FE             >                // dummy db directives used to calculate length of namec
 758+ E9FE 2A 2F 4D 4F >                db      "*/MOD"
 758+ EA02 44          >
 758+ EA03             >len_NFA         defl    $ - temp_NFA
 758+ EA03             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 758+ E9FE             >
 758+ E9FE 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 758+ E9FF 2A 2F 4D 4F >                db      "*/MOD"               // name string in 7-bit ascii, but
 758+ EA03 44          >
 758+ EA04             >                org     $-1                 // alter last byte of Name just above to set
 758+ EA03 C4          >                db      {b $} | END_BIT     // msb as name end
 758+ EA04             >
 758+ EA04 F6 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 758+ EA06             >Prev_Ptr        defl    Heap_Ptr
 758+ EA06             >
 758+ EA06             >mirror_Ptr      defl    $
 758+ EA06             >
 758+ EA06 4A 35       >                dw      Dict_Ptr + 2        // xt
 758+ EA08             >Heap_Ptr        defl    $ - $E000           // save current HP
 758+ EA08             >
 758+ EA08             >Current_HP      defl  $ - $E000             // used to set HP once!
 758+ EA08             >
 758+ EA08             >//              ______________________________________________________________________
 758+ EA08             >//              Dictionary part
 758+ EA08             >
 758+ EA08             >                org     Dict_Ptr
 758+ 3548             >
 758+ 3548 06 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 758+ 354A             >
 758+ 354A             >MUL_DIV_MOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 758+ 354A CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 758+ 354D             >
 758+ 354D             >
 758+ 354D             >                endif           ; ok        // for other definitions it "points" the correct handler
 758+ 354D             >                // Use of "; ok" to suppress "warning[fwdref]"
 758+ 354D             >
 758+ 354D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 759+ 354D FE 24 91 34                  dw      TO_R, MMUL              // >r  m*
 760+ 3551 09 25 06 35                  dw      R_TO, MDIVM             // r>  m/mod
 761+ 3555 F4 24                        dw      EXIT                    // ;
 762+ 3557
 763+ 3557              //  ______________________________________________________________________
 764+ 3557              //
 765+ 3557              // */          n1 n2 n3 -- n4
 766+ 3557              // (n1 * n2) / n3. The intermediate passage through a double number avoids loss of precision
 767+ 3557                              Colon_Def MUL_DIV, "*/", is_normal
 767+ 3557             >                New_Def  MUL_DIV, "*/", Enter_Ptr, is_normal ; ok
 767+ 3557             >
 767+ 3557             >Dict_Ptr        defl    $
 767+ 3557             >
 767+ 3557             >//              ______________________________________________________________________
 767+ 3557             >//              Heap part
 767+ 3557             >
 767+ 3557             >
 767+ 3557             >                org     (Heap_Ptr & $1FFF) + $E000
 767+ EA08             >
 767+ EA08             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 767+ EA08             >Latest_Definition defl  Heap_Ptr
 767+ EA08             >
 767+ EA08             >                // dummy db directives used to calculate length of namec
 767+ EA08 2A 2F       >                db      "*/"
 767+ EA0A             >len_NFA         defl    $ - temp_NFA
 767+ EA0A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 767+ EA08             >
 767+ EA08 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 767+ EA09 2A 2F       >                db      "*/"               // name string in 7-bit ascii, but
 767+ EA0B             >                org     $-1                 // alter last byte of Name just above to set
 767+ EA0A AF          >                db      {b $} | END_BIT     // msb as name end
 767+ EA0B             >
 767+ EA0B FE 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 767+ EA0D             >Prev_Ptr        defl    Heap_Ptr
 767+ EA0D             >
 767+ EA0D             >mirror_Ptr      defl    $
 767+ EA0D             >
 767+ EA0D 59 35       >                dw      Dict_Ptr + 2        // xt
 767+ EA0F             >Heap_Ptr        defl    $ - $E000           // save current HP
 767+ EA0F             >
 767+ EA0F             >Current_HP      defl  $ - $E000             // used to set HP once!
 767+ EA0F             >
 767+ EA0F             >//              ______________________________________________________________________
 767+ EA0F             >//              Dictionary part
 767+ EA0F             >
 767+ EA0F             >                org     Dict_Ptr
 767+ 3557             >
 767+ 3557 0D 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 767+ 3559             >
 767+ 3559             >MUL_DIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 767+ 3559 CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 767+ 355C             >
 767+ 355C             >
 767+ 355C             >                endif           ; ok        // for other definitions it "points" the correct handler
 767+ 355C             >                // Use of "; ok" to suppress "warning[fwdref]"
 767+ 355C             >
 767+ 355C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 768+ 355C 4A 35                        dw     MUL_DIV_MOD              // */mod
 769+ 355E B7 25                        dw     NIP                      // nip
 770+ 3560 F4 24                        dw     EXIT                     // ;
 771+ 3562
 772+ 3562
 773+ 3562              //  ______________________________________________________________________
 774+ 3562              //
 775+ 3562              // m/mod        ud1 u2 -- u3 ud4
 776+ 3562              // mixed operation: it leaves the remainder u3 and the quotient ud4 of ud1 / u1.
 777+ 3562              // All terms are unsigned.
 778+ 3562              //              Colon_Def MDIV_MOD, "M/MOD", is_normal
 779+ 3562              //              dw      TO_R                    // >r           ( ud1 )
 780+ 3562              //              dw      ZERO, R_OP, UMDIVMOD    // 0 r um/mod   ( l rem1 h/r )
 781+ 3562              //              dw      R_TO, SWAP, TO_R        // r> swap >r   ( l rem )
 782+ 3562              //              dw      UMDIVMOD                // um/mod       ( rem2 l/r )
 783+ 3562              //              dw      R_TO                    // r>           ( rem2 l/r h/r )
 784+ 3562              //              dw      EXIT                    // ;
 785+ 3562
 786+ 3562              //  ______________________________________________________________________
 787+ 3562              //
 788+ 3562              // (line)       n1 n2 -- a b
 789+ 3562              // sends the line n1 of block n2 to the disk buffer.
 790+ 3562              // it returns the address a and ca counter b = C/L meaning a whole line.
 791+ 3562                              Colon_Def CLINE, "(LINE)", is_normal
 791+ 3562             >                New_Def  CLINE, "(LINE)", Enter_Ptr, is_normal ; ok
 791+ 3562             >
 791+ 3562             >Dict_Ptr        defl    $
 791+ 3562             >
 791+ 3562             >//              ______________________________________________________________________
 791+ 3562             >//              Heap part
 791+ 3562             >
 791+ 3562             >
 791+ 3562             >                org     (Heap_Ptr & $1FFF) + $E000
 791+ EA0F             >
 791+ EA0F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 791+ EA0F             >Latest_Definition defl  Heap_Ptr
 791+ EA0F             >
 791+ EA0F             >                // dummy db directives used to calculate length of namec
 791+ EA0F 28 4C 49 4E >                db      "(LINE)"
 791+ EA13 45 29       >
 791+ EA15             >len_NFA         defl    $ - temp_NFA
 791+ EA15             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 791+ EA0F             >
 791+ EA0F 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 791+ EA10 28 4C 49 4E >                db      "(LINE)"               // name string in 7-bit ascii, but
 791+ EA14 45 29       >
 791+ EA16             >                org     $-1                 // alter last byte of Name just above to set
 791+ EA15 A9          >                db      {b $} | END_BIT     // msb as name end
 791+ EA16             >
 791+ EA16 08 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 791+ EA18             >Prev_Ptr        defl    Heap_Ptr
 791+ EA18             >
 791+ EA18             >mirror_Ptr      defl    $
 791+ EA18             >
 791+ EA18 64 35       >                dw      Dict_Ptr + 2        // xt
 791+ EA1A             >Heap_Ptr        defl    $ - $E000           // save current HP
 791+ EA1A             >
 791+ EA1A             >Current_HP      defl  $ - $E000             // used to set HP once!
 791+ EA1A             >
 791+ EA1A             >//              ______________________________________________________________________
 791+ EA1A             >//              Dictionary part
 791+ EA1A             >
 791+ EA1A             >                org     Dict_Ptr
 791+ 3562             >
 791+ 3562 18 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 791+ 3564             >
 791+ 3564             >CLINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 791+ 3564 CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 791+ 3567             >
 791+ 3567             >
 791+ 3567             >                endif           ; ok        // for other definitions it "points" the correct handler
 791+ 3567             >                // Use of "; ok" to suppress "warning[fwdref]"
 791+ 3567             >
 791+ 3567             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 792+ 3567 FE 24                        dw      TO_R                    // >r
 793+ 3569 60 27                        dw      CL                      // c/l
 794+ 356B 67 27 4A 35                  dw      BBUF, MUL_DIV_MOD       // */mod
 795+ 356F 09 25                        dw      R_TO                    // r>
 796+ 3571 6E 27 1A 35                  dw      BSCR, MUL, PLUS         // b/scr * +
 796+ 3575 47 25
 797+ 3577 4B 37                        dw      BLOCK                   // block   ( forward )
 798+ 3579 47 25                        dw      PLUS                    // +
 799+ 357B 60 27                        dw      CL                      // c/l
 800+ 357D F4 24                        dw      EXIT                    // ;
 801+ 357F
 802+ 357F              //  ______________________________________________________________________
 803+ 357F              //
 804+ 357F              // .line        n1 n2 --
 805+ 357F              // Sends to output line  n1  of screen n2.
 806+ 357F                              Colon_Def DOT_LINE, ".LINE", is_normal
 806+ 357F             >                New_Def  DOT_LINE, ".LINE", Enter_Ptr, is_normal ; ok
 806+ 357F             >
 806+ 357F             >Dict_Ptr        defl    $
 806+ 357F             >
 806+ 357F             >//              ______________________________________________________________________
 806+ 357F             >//              Heap part
 806+ 357F             >
 806+ 357F             >
 806+ 357F             >                org     (Heap_Ptr & $1FFF) + $E000
 806+ EA1A             >
 806+ EA1A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 806+ EA1A             >Latest_Definition defl  Heap_Ptr
 806+ EA1A             >
 806+ EA1A             >                // dummy db directives used to calculate length of namec
 806+ EA1A 2E 4C 49 4E >                db      ".LINE"
 806+ EA1E 45          >
 806+ EA1F             >len_NFA         defl    $ - temp_NFA
 806+ EA1F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 806+ EA1A             >
 806+ EA1A 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 806+ EA1B 2E 4C 49 4E >                db      ".LINE"               // name string in 7-bit ascii, but
 806+ EA1F 45          >
 806+ EA20             >                org     $-1                 // alter last byte of Name just above to set
 806+ EA1F C5          >                db      {b $} | END_BIT     // msb as name end
 806+ EA20             >
 806+ EA20 0F 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 806+ EA22             >Prev_Ptr        defl    Heap_Ptr
 806+ EA22             >
 806+ EA22             >mirror_Ptr      defl    $
 806+ EA22             >
 806+ EA22 81 35       >                dw      Dict_Ptr + 2        // xt
 806+ EA24             >Heap_Ptr        defl    $ - $E000           // save current HP
 806+ EA24             >
 806+ EA24             >Current_HP      defl  $ - $E000             // used to set HP once!
 806+ EA24             >
 806+ EA24             >//              ______________________________________________________________________
 806+ EA24             >//              Dictionary part
 806+ EA24             >
 806+ EA24             >                org     Dict_Ptr
 806+ 357F             >
 806+ 357F 22 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 806+ 3581             >
 806+ 3581             >DOT_LINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 806+ 3581 CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 806+ 3584             >
 806+ 3584             >
 806+ 3584             >                endif           ; ok        // for other definitions it "points" the correct handler
 806+ 3584             >                // Use of "; ok" to suppress "warning[fwdref]"
 806+ 3584             >
 806+ 3584             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 807+ 3584 64 35 3E 2C                  dw      CLINE, LTRAILING, TYPE  // (line) -trailing type
 807+ 3588 27 2C
 808+ 358A F4 24                        dw      EXIT                    // ;
 809+ 358C
 810+ 358C              //  ______________________________________________________________________
 811+ 358C              //
 812+ 358C              // message       n1 n2 --
 813+ 358C              // prints error message to current channel.
 814+ 358C              // if WARNING is 0, prints "MSG#n".
 815+ 358C              // if WARNING is 1, prints line n of screen 4.
 816+ 358C              // if WARNING is -1, see ERROR
 817+ 358C              // value can be negative or beyond block 4.
 818+ 358C                              Colon_Def MESSAGE, "MESSAGE", is_normal
 818+ 358C             >                New_Def  MESSAGE, "MESSAGE", Enter_Ptr, is_normal ; ok
 818+ 358C             >
 818+ 358C             >Dict_Ptr        defl    $
 818+ 358C             >
 818+ 358C             >//              ______________________________________________________________________
 818+ 358C             >//              Heap part
 818+ 358C             >
 818+ 358C             >
 818+ 358C             >                org     (Heap_Ptr & $1FFF) + $E000
 818+ EA24             >
 818+ EA24             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 818+ EA24             >Latest_Definition defl  Heap_Ptr
 818+ EA24             >
 818+ EA24             >                // dummy db directives used to calculate length of namec
 818+ EA24 4D 45 53 53 >                db      "MESSAGE"
 818+ EA28 41 47 45    >
 818+ EA2B             >len_NFA         defl    $ - temp_NFA
 818+ EA2B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 818+ EA24             >
 818+ EA24 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 818+ EA25 4D 45 53 53 >                db      "MESSAGE"               // name string in 7-bit ascii, but
 818+ EA29 41 47 45    >
 818+ EA2C             >                org     $-1                 // alter last byte of Name just above to set
 818+ EA2B C5          >                db      {b $} | END_BIT     // msb as name end
 818+ EA2C             >
 818+ EA2C 1A 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 818+ EA2E             >Prev_Ptr        defl    Heap_Ptr
 818+ EA2E             >
 818+ EA2E             >mirror_Ptr      defl    $
 818+ EA2E             >
 818+ EA2E 8E 35       >                dw      Dict_Ptr + 2        // xt
 818+ EA30             >Heap_Ptr        defl    $ - $E000           // save current HP
 818+ EA30             >
 818+ EA30             >Current_HP      defl  $ - $E000             // used to set HP once!
 818+ EA30             >
 818+ EA30             >//              ______________________________________________________________________
 818+ EA30             >//              Dictionary part
 818+ EA30             >
 818+ EA30             >                org     Dict_Ptr
 818+ 358C             >
 818+ 358C 2E 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 818+ 358E             >
 818+ 358E             >MESSAGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 818+ 358E CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 818+ 3591             >
 818+ 3591             >
 818+ 3591             >                endif           ; ok        // for other definitions it "points" the correct handler
 818+ 3591             >                // Use of "; ok" to suppress "warning[fwdref]"
 818+ 3591             >
 818+ 3591             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 819+ 3591 A7 27 3E 26                  dw      WARNING, FETCH          // warning @
 820+ 3595                                                              // if
 821+ 3595 8F 20                        dw      ZBRANCH
 822+ 3597 12 00                        dw      Message_Else - $
 823+ 3599 3D 20 20 00                  dw          LIT, 32, PLUS       //      32 +
 823+ 359D 47 25
 824+ 359F 44 27                        dw          TWO                 //      2
 825+ 35A1 81 35                        dw          DOT_LINE            //      .line
 826+ 35A3 2C 29                        dw          SPACE               //      space
 827+ 35A5                                                              // else
 828+ 35A5
 829+ 35A5 82 20                        dw      BRANCH
 830+ 35A7 0B 00                        dw      Message_ENdif - $
 831+ 35A9              Message_Else:
 832+ 35A9 C4 2D                        dw          C_DOT_QUOTE         //      .( msg#)
 833+ 35AB 04 6D 73 67                  db          4, "msg#"
 833+ 35AF 23
 834+ 35B0 9E 3C                        dw          DOT                 //      .  ( forward )
 835+ 35B2              Message_ENdif:                                  // endif
 836+ 35B2 F4 24                        dw      EXIT                    // ;
 837+ 35B4
 838+ 35B4
 839+ 35B4              //  ______________________________________________________________________
 840+ 35B4              //
 841+ 35B4              // device
 842+ 35B4                              Variable_Def DEVICE,   "DEVICE",   2
 842+ 35B4             >                New_Def  DEVICE, "DEVICE", Variable_Ptr, is_normal
 842+ 35B4             >
 842+ 35B4             >Dict_Ptr        defl    $
 842+ 35B4             >
 842+ 35B4             >//              ______________________________________________________________________
 842+ 35B4             >//              Heap part
 842+ 35B4             >
 842+ 35B4             >
 842+ 35B4             >                org     (Heap_Ptr & $1FFF) + $E000
 842+ EA30             >
 842+ EA30             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 842+ EA30             >Latest_Definition defl  Heap_Ptr
 842+ EA30             >
 842+ EA30             >                // dummy db directives used to calculate length of namec
 842+ EA30 44 45 56 49 >                db      "DEVICE"
 842+ EA34 43 45       >
 842+ EA36             >len_NFA         defl    $ - temp_NFA
 842+ EA36             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 842+ EA30             >
 842+ EA30 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 842+ EA31 44 45 56 49 >                db      "DEVICE"               // name string in 7-bit ascii, but
 842+ EA35 43 45       >
 842+ EA37             >                org     $-1                 // alter last byte of Name just above to set
 842+ EA36 C5          >                db      {b $} | END_BIT     // msb as name end
 842+ EA37             >
 842+ EA37 24 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 842+ EA39             >Prev_Ptr        defl    Heap_Ptr
 842+ EA39             >
 842+ EA39             >mirror_Ptr      defl    $
 842+ EA39             >
 842+ EA39 B6 35       >                dw      Dict_Ptr + 2        // xt
 842+ EA3B             >Heap_Ptr        defl    $ - $E000           // save current HP
 842+ EA3B             >
 842+ EA3B             >Current_HP      defl  $ - $E000             // used to set HP once!
 842+ EA3B             >
 842+ EA3B             >//              ______________________________________________________________________
 842+ EA3B             >//              Dictionary part
 842+ EA3B             >
 842+ EA3B             >                org     Dict_Ptr
 842+ 35B4             >
 842+ 35B4 39 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 842+ 35B6             >
 842+ 35B6             >DEVICE:          if Variable_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 842+ 35B6 CD 1D 27    >                call    Variable_Ptr ; ok        // for primitive definitions  actual code
 842+ 35B9             >
 842+ 35B9             >
 842+ 35B9             >                endif           ; ok        // for other definitions it "points" the correct handler
 842+ 35B9             >                // Use of "; ok" to suppress "warning[fwdref]"
 842+ 35B9             >
 842+ 35B9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 842+ 35B9 02 00       >                dw      2
 843+ 35BB
 844+ 35BB              //  ______________________________________________________________________
 845+ 35BB
# file closed: C:\Zx\CSpect\Projects\vForth17_DOT/source/L2.asm
 124  35BB                              include "next-opt1.asm"
# file opened: C:\Zx\CSpect\Projects\vForth17_DOT/source/next-opt1.asm
   1+ 35BB              //  ______________________________________________________________________
   2+ 35BB              //
   3+ 35BB              //  next-opt.asm
   4+ 35BB              //
   5+ 35BB              //  ZX Spectrum Next - peculiar definitions
   6+ 35BB              //  ______________________________________________________________________
   7+ 35BB
   8+ 35BB              //  ______________________________________________________________________
   9+ 35BB              //
  10+ 35BB              // reg@         n -- b
  11+ 35BB              // read Next REGister n giving byte b
  12+ 35BB              //
  13+ 35BB              //              Colon_Def REG_FETCH, "REG@", is_normal
  14+ 35BB              //              dw      LIT, $243B
  15+ 35BB              //              dw      PSTORE
  16+ 35BB              //              dw      LIT, $253B
  17+ 35BB              //              dw      PFETCH
  18+ 35BB              //              dw      EXIT
  19+ 35BB                              New_Def REG_FETCH, "REG@", is_code, is_normal
  19+ 35BB             >
  19+ 35BB             >Dict_Ptr        defl    $
  19+ 35BB             >
  19+ 35BB             >//              ______________________________________________________________________
  19+ 35BB             >//              Heap part
  19+ 35BB             >
  19+ 35BB             >
  19+ 35BB             >                org     (Heap_Ptr & $1FFF) + $E000
  19+ EA3B             >
  19+ EA3B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  19+ EA3B             >Latest_Definition defl  Heap_Ptr
  19+ EA3B             >
  19+ EA3B             >                // dummy db directives used to calculate length of namec
  19+ EA3B 52 45 47 40 >                db      "REG@"
  19+ EA3F             >len_NFA         defl    $ - temp_NFA
  19+ EA3F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  19+ EA3B             >
  19+ EA3B 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  19+ EA3C 52 45 47 40 >                db      "REG@"               // name string in 7-bit ascii, but
  19+ EA40             >                org     $-1                 // alter last byte of Name just above to set
  19+ EA3F C0          >                db      {b $} | END_BIT     // msb as name end
  19+ EA40             >
  19+ EA40 30 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  19+ EA42             >Prev_Ptr        defl    Heap_Ptr
  19+ EA42             >
  19+ EA42             >mirror_Ptr      defl    $
  19+ EA42             >
  19+ EA42 BD 35       >                dw      Dict_Ptr + 2        // xt
  19+ EA44             >Heap_Ptr        defl    $ - $E000           // save current HP
  19+ EA44             >
  19+ EA44             >Current_HP      defl  $ - $E000             // used to set HP once!
  19+ EA44             >
  19+ EA44             >//              ______________________________________________________________________
  19+ EA44             >//              Dictionary part
  19+ EA44             >
  19+ EA44             >                org     Dict_Ptr
  19+ 35BB             >
  19+ 35BB 42 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  19+ 35BD             >
  19+ 35BD             >REG_FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  19+ 35BD ~           >                call    runcode ; ok        // for primitive definitions  actual code
  19+ 35BD ~           >
  19+ 35BD ~           >
  19+ 35BD             >                endif           ; ok        // for other definitions it "points" the correct handler
  19+ 35BD             >                // Use of "; ok" to suppress "warning[fwdref]"
  19+ 35BD             >
  19+ 35BD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  20+ 35BD D9                           exx
  21+ 35BE 01 3B 24                     ld      bc, $243B
  22+ 35C1 E1                           pop     hl
  23+ 35C2 ED 69                        out     (c), l
  24+ 35C4 04                           inc     b
  25+ 35C5 ED 68                        in      l, (c)
  26+ 35C7 E5                           push    hl
  27+ 35C8 D9                           exx
  28+ 35C9                              next
  28+ 35C9 DD E9       >                jp      (ix)
  29+ 35CB
  30+ 35CB
  31+ 35CB              //  ______________________________________________________________________
  32+ 35CB              //
  33+ 35CB              // reg!         b n --
  34+ 35CB              // write value b to Next REGister n
  35+ 35CB              //
  36+ 35CB              //              Colon_Def REG_STORE, "REG!", is_normal
  37+ 35CB              //              dw      LIT, $243B
  38+ 35CB              //              dw      PSTORE
  39+ 35CB              //              dw      LIT, $253B
  40+ 35CB              //              dw      PSTORE
  41+ 35CB              //              dw      EXIT
  42+ 35CB                              New_Def REG_STORE, "REG!", is_code, is_normal
  42+ 35CB             >
  42+ 35CB             >Dict_Ptr        defl    $
  42+ 35CB             >
  42+ 35CB             >//              ______________________________________________________________________
  42+ 35CB             >//              Heap part
  42+ 35CB             >
  42+ 35CB             >
  42+ 35CB             >                org     (Heap_Ptr & $1FFF) + $E000
  42+ EA44             >
  42+ EA44             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  42+ EA44             >Latest_Definition defl  Heap_Ptr
  42+ EA44             >
  42+ EA44             >                // dummy db directives used to calculate length of namec
  42+ EA44 52 45 47 21 >                db      "REG!"
  42+ EA48             >len_NFA         defl    $ - temp_NFA
  42+ EA48             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  42+ EA44             >
  42+ EA44 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  42+ EA45 52 45 47 21 >                db      "REG!"               // name string in 7-bit ascii, but
  42+ EA49             >                org     $-1                 // alter last byte of Name just above to set
  42+ EA48 A1          >                db      {b $} | END_BIT     // msb as name end
  42+ EA49             >
  42+ EA49 3B 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  42+ EA4B             >Prev_Ptr        defl    Heap_Ptr
  42+ EA4B             >
  42+ EA4B             >mirror_Ptr      defl    $
  42+ EA4B             >
  42+ EA4B CD 35       >                dw      Dict_Ptr + 2        // xt
  42+ EA4D             >Heap_Ptr        defl    $ - $E000           // save current HP
  42+ EA4D             >
  42+ EA4D             >Current_HP      defl  $ - $E000             // used to set HP once!
  42+ EA4D             >
  42+ EA4D             >//              ______________________________________________________________________
  42+ EA4D             >//              Dictionary part
  42+ EA4D             >
  42+ EA4D             >                org     Dict_Ptr
  42+ 35CB             >
  42+ 35CB 4B 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  42+ 35CD             >
  42+ 35CD             >REG_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  42+ 35CD ~           >                call    runcode ; ok        // for primitive definitions  actual code
  42+ 35CD ~           >
  42+ 35CD ~           >
  42+ 35CD             >                endif           ; ok        // for other definitions it "points" the correct handler
  42+ 35CD             >                // Use of "; ok" to suppress "warning[fwdref]"
  42+ 35CD             >
  42+ 35CD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  43+ 35CD D9                           exx
  44+ 35CE 01 3B 24                     ld      bc, $243B
  45+ 35D1 E1                           pop     hl
  46+ 35D2 ED 69                        out     (c), l
  47+ 35D4 04                           inc     b
  48+ 35D5 E1                           pop     hl
  49+ 35D6 ED 69                        out     (c), l
  50+ 35D8 D9                           exx
  51+ 35D9                              next
  51+ 35D9 DD E9       >                jp      (ix)
  52+ 35DB
  53+ 35DB
  54+ 35DB              //  ______________________________________________________________________
  55+ 35DB              //
  56+ 35DB              // m_p3dos      n1 n2 n3 n4 a -- n5 n6 n7 n8  f
  57+ 35DB              // NextZXOS call wrapper.
  58+ 35DB              //  n1 = hl register parameter value
  59+ 35DB              //  n2 = de register parameter value
  60+ 35DB              //  n3 = bc register parameter value
  61+ 35DB              //  n4 =  a register parameter value
  62+ 35DB              //   a = routine address in ROM 3
  63+ 35DB              // ----
  64+ 35DB              //  n5 = hl returned value
  65+ 35DB              //  n6 = de returned value
  66+ 35DB              //  n7 = bc returned value
  67+ 35DB              //  n8 =  a returned value
  68+ 35DB              //   f
  69+ 35DB                              New_Def M_P3DOS, "M_P3DOS", is_code, is_normal
  69+ 35DB             >
  69+ 35DB             >Dict_Ptr        defl    $
  69+ 35DB             >
  69+ 35DB             >//              ______________________________________________________________________
  69+ 35DB             >//              Heap part
  69+ 35DB             >
  69+ 35DB             >
  69+ 35DB             >                org     (Heap_Ptr & $1FFF) + $E000
  69+ EA4D             >
  69+ EA4D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  69+ EA4D             >Latest_Definition defl  Heap_Ptr
  69+ EA4D             >
  69+ EA4D             >                // dummy db directives used to calculate length of namec
  69+ EA4D 4D 5F 50 33 >                db      "M_P3DOS"
  69+ EA51 44 4F 53    >
  69+ EA54             >len_NFA         defl    $ - temp_NFA
  69+ EA54             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  69+ EA4D             >
  69+ EA4D 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  69+ EA4E 4D 5F 50 33 >                db      "M_P3DOS"               // name string in 7-bit ascii, but
  69+ EA52 44 4F 53    >
  69+ EA55             >                org     $-1                 // alter last byte of Name just above to set
  69+ EA54 D3          >                db      {b $} | END_BIT     // msb as name end
  69+ EA55             >
  69+ EA55 44 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  69+ EA57             >Prev_Ptr        defl    Heap_Ptr
  69+ EA57             >
  69+ EA57             >mirror_Ptr      defl    $
  69+ EA57             >
  69+ EA57 DD 35       >                dw      Dict_Ptr + 2        // xt
  69+ EA59             >Heap_Ptr        defl    $ - $E000           // save current HP
  69+ EA59             >
  69+ EA59             >Current_HP      defl  $ - $E000             // used to set HP once!
  69+ EA59             >
  69+ EA59             >//              ______________________________________________________________________
  69+ EA59             >//              Dictionary part
  69+ EA59             >
  69+ EA59             >                org     Dict_Ptr
  69+ 35DB             >
  69+ 35DB 57 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  69+ 35DD             >
  69+ 35DD             >M_P3DOS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  69+ 35DD ~           >                call    runcode ; ok        // for primitive definitions  actual code
  69+ 35DD ~           >
  69+ 35DD ~           >
  69+ 35DD             >                endif           ; ok        // for other definitions it "points" the correct handler
  69+ 35DD             >                // Use of "; ok" to suppress "warning[fwdref]"
  69+ 35DD             >
  69+ 35DD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  70+ 35DD D9                            exx
  71+ 35DE E1                            pop     hl                  // dos call entry address a  //  n1 n2 n3 n4
  72+ 35DF D1                            pop     de                  // a register argument       //  n1 n2 n3
  73+ 35E0 7B                            ld      a, e
  74+ 35E1 C1                            pop     bc                  // bc' argument              //  n1 n2
  75+ 35E2 D1                            pop     de                  // de' argument              //  n1
  76+ 35E3 E3                            ex      (sp), hl            // hl' argument and entry address in TOS
  77+ 35E4 D9                           exx
  78+ 35E5 E1                           pop     hl                  // entry address a
  79+ 35E6 DD E5                        push    ix
  80+ 35E8 D5                           push    de
  81+ 35E9 C5                           push    bc
  82+ 35EA EB                           ex      de, hl              // de is entry address
  83+ 35EB              //              ld      (SP_Saved), sp
  84+ 35EB              //              ld      sp, Cold_origin - 5
  85+ 35EB              //              ld      sp,5BFFh            ; Use TSTACK system-variable
  86+ 35EB 0E 07                        ld      c, 7                // use 7 RAM Bank
  87+ 35ED CF                           rst     08
  88+ 35EE 94                           db      $94
  89+ 35EF
  90+ 35EF                      ////    ld      a, (Saved_MMU + 1)
  91+ 35EF                      ////    nextreg $53, a            // some calls reset MMU3 to $11 !
  92+ 35EF
  93+ 35EF              //              ld      sp, (SP_Saved)
  94+ 35EF              //              push    ix
  95+ 35EF              //              pop     hl
  96+ 35EF              //              ld      (IX_Echo), hl
  97+ 35EF DD 22 32 20                  ld      (IX_Echo), ix
  98+ 35F3
  99+ 35F3 D9                           exx
 100+ 35F4 C1                           pop     bc
 101+ 35F5 D1                           pop     de
 102+ 35F6 DD E1                        pop     ix
 103+ 35F8 D9                            exx
 104+ 35F9 E5                            push    hl
 105+ 35FA D5                            push    de
 106+ 35FB C5                            push    bc
 107+ 35FC 26 00                         ld      h, 0
 108+ 35FE 6F                            ld      l, a
 109+ 35FF E5                            push    hl
 110+ 3600 D9                           exx
 111+ 3601 ED 62                        sbc     hl, hl              // -1 for OK ; 0 for KO but now...
 112+ 3603 23                           inc     hl                  //  0 for OK ; 1 for ko
 113+ 3604 E5                           push    hl
 114+ 3605                              next
 114+ 3605 DD E9       >                jp      (ix)
 115+ 3607
 116+ 3607              //  ______________________________________________________________________
 117+ 3607              //
 118+ 3607              // blk-fh
 119+ 3607              //              Variable_Def BLK_FH,   "BLK-FH",   1
 120+ 3607              //
 121+ 3607              //              New_Def BLK_FNAME,   "BLK-FNAME", Create_Ptr, is_normal
 122+ 3607              // Len_Filename:   db      30
 123+ 3607              // Blk_filename:   db      "c:/tools/vforth/!Blocks-64.bin", 0
 124+ 3607              //                 ds      32
 125+ 3607
 126+ 3607              //  ______________________________________________________________________
 127+ 3607              //
 128+ 3607              // blk-seek     n --
 129+ 3607              // seek block n  within blocks!.bin  file
 130+ 3607                              Colon_Def BLK_SEEK, "BLK-SEEK", is_normal
 130+ 3607             >                New_Def  BLK_SEEK, "BLK-SEEK", Enter_Ptr, is_normal ; ok
 130+ 3607             >
 130+ 3607             >Dict_Ptr        defl    $
 130+ 3607             >
 130+ 3607             >//              ______________________________________________________________________
 130+ 3607             >//              Heap part
 130+ 3607             >
 130+ 3607             >
 130+ 3607             >                org     (Heap_Ptr & $1FFF) + $E000
 130+ EA59             >
 130+ EA59             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 130+ EA59             >Latest_Definition defl  Heap_Ptr
 130+ EA59             >
 130+ EA59             >                // dummy db directives used to calculate length of namec
 130+ EA59 42 4C 4B 2D >                db      "BLK-SEEK"
 130+ EA5D 53 45 45 4B >
 130+ EA61             >len_NFA         defl    $ - temp_NFA
 130+ EA61             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 130+ EA59             >
 130+ EA59 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 130+ EA5A 42 4C 4B 2D >                db      "BLK-SEEK"               // name string in 7-bit ascii, but
 130+ EA5E 53 45 45 4B >
 130+ EA62             >                org     $-1                 // alter last byte of Name just above to set
 130+ EA61 CB          >                db      {b $} | END_BIT     // msb as name end
 130+ EA62             >
 130+ EA62 4D 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 130+ EA64             >Prev_Ptr        defl    Heap_Ptr
 130+ EA64             >
 130+ EA64             >mirror_Ptr      defl    $
 130+ EA64             >
 130+ EA64 09 36       >                dw      Dict_Ptr + 2        // xt
 130+ EA66             >Heap_Ptr        defl    $ - $E000           // save current HP
 130+ EA66             >
 130+ EA66             >Current_HP      defl  $ - $E000             // used to set HP once!
 130+ EA66             >
 130+ EA66             >//              ______________________________________________________________________
 130+ EA66             >//              Dictionary part
 130+ EA66             >
 130+ EA66             >                org     Dict_Ptr
 130+ 3607             >
 130+ 3607 64 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 130+ 3609             >
 130+ 3609             >BLK_SEEK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 130+ 3609 CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 130+ 360C             >
 130+ 360C             >
 130+ 360C             >                endif           ; ok        // for other definitions it "points" the correct handler
 130+ 360C             >                // Use of "; ok" to suppress "warning[fwdref]"
 130+ 360C             >
 130+ 360C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 131+ 360C 67 27 91 34                  dw  BBUF, MMUL
 132+ 3610 56 3F 3E 26                  dw  BLK_FH, FETCH
 133+ 3614 7D 23                        dw  F_SEEK
 134+ 3616 3D 20 2D 00                  dw  LIT, $2D, QERROR
 134+ 361A 97 2A
 135+ 361C F4 24                        dw  EXIT
 136+ 361E
 137+ 361E              //  ______________________________________________________________________
 138+ 361E              //
 139+ 361E              // blk-read     n --
 140+ 361E              // seek block n  within blocks!.bin  file
 141+ 361E                              Colon_Def BLK_READ, "BLK-READ", is_normal
 141+ 361E             >                New_Def  BLK_READ, "BLK-READ", Enter_Ptr, is_normal ; ok
 141+ 361E             >
 141+ 361E             >Dict_Ptr        defl    $
 141+ 361E             >
 141+ 361E             >//              ______________________________________________________________________
 141+ 361E             >//              Heap part
 141+ 361E             >
 141+ 361E             >
 141+ 361E             >                org     (Heap_Ptr & $1FFF) + $E000
 141+ EA66             >
 141+ EA66             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 141+ EA66             >Latest_Definition defl  Heap_Ptr
 141+ EA66             >
 141+ EA66             >                // dummy db directives used to calculate length of namec
 141+ EA66 42 4C 4B 2D >                db      "BLK-READ"
 141+ EA6A 52 45 41 44 >
 141+ EA6E             >len_NFA         defl    $ - temp_NFA
 141+ EA6E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 141+ EA66             >
 141+ EA66 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 141+ EA67 42 4C 4B 2D >                db      "BLK-READ"               // name string in 7-bit ascii, but
 141+ EA6B 52 45 41 44 >
 141+ EA6F             >                org     $-1                 // alter last byte of Name just above to set
 141+ EA6E C4          >                db      {b $} | END_BIT     // msb as name end
 141+ EA6F             >
 141+ EA6F 59 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 141+ EA71             >Prev_Ptr        defl    Heap_Ptr
 141+ EA71             >
 141+ EA71             >mirror_Ptr      defl    $
 141+ EA71             >
 141+ EA71 20 36       >                dw      Dict_Ptr + 2        // xt
 141+ EA73             >Heap_Ptr        defl    $ - $E000           // save current HP
 141+ EA73             >
 141+ EA73             >Current_HP      defl  $ - $E000             // used to set HP once!
 141+ EA73             >
 141+ EA73             >//              ______________________________________________________________________
 141+ EA73             >//              Dictionary part
 141+ EA73             >
 141+ EA73             >                org     Dict_Ptr
 141+ 361E             >
 141+ 361E 71 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 141+ 3620             >
 141+ 3620             >BLK_READ:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 141+ 3620 CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 141+ 3623             >
 141+ 3623             >
 141+ 3623             >                endif           ; ok        // for other definitions it "points" the correct handler
 141+ 3623             >                // Use of "; ok" to suppress "warning[fwdref]"
 141+ 3623             >
 141+ 3623             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 142+ 3623 09 36                        dw  BLK_SEEK
 143+ 3625 67 27                        dw  BBUF
 144+ 3627 56 3F 3E 26                  dw  BLK_FH, FETCH
 145+ 362B C8 23                        dw  F_READ
 146+ 362D 3D 20 2E 00                  dw  LIT, $2E, QERROR
 146+ 3631 97 2A
 147+ 3633 B2 25                        dw  DROP
 148+ 3635 F4 24                        dw  EXIT
 149+ 3637
 150+ 3637              //  ______________________________________________________________________
 151+ 3637              //
 152+ 3637              // blk-write     n --
 153+ 3637              // seek block n  within blocks!.bin  file
 154+ 3637                              Colon_Def BLK_WRITE, "BLK-WRITE", is_normal
 154+ 3637             >                New_Def  BLK_WRITE, "BLK-WRITE", Enter_Ptr, is_normal ; ok
 154+ 3637             >
 154+ 3637             >Dict_Ptr        defl    $
 154+ 3637             >
 154+ 3637             >//              ______________________________________________________________________
 154+ 3637             >//              Heap part
 154+ 3637             >
 154+ 3637             >
 154+ 3637             >                org     (Heap_Ptr & $1FFF) + $E000
 154+ EA73             >
 154+ EA73             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 154+ EA73             >Latest_Definition defl  Heap_Ptr
 154+ EA73             >
 154+ EA73             >                // dummy db directives used to calculate length of namec
 154+ EA73 42 4C 4B 2D >                db      "BLK-WRITE"
 154+ EA77 57 52 49 54 >
 154+ EA7B 45          >
 154+ EA7C             >len_NFA         defl    $ - temp_NFA
 154+ EA7C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 154+ EA73             >
 154+ EA73 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 154+ EA74 42 4C 4B 2D >                db      "BLK-WRITE"               // name string in 7-bit ascii, but
 154+ EA78 57 52 49 54 >
 154+ EA7C 45          >
 154+ EA7D             >                org     $-1                 // alter last byte of Name just above to set
 154+ EA7C C5          >                db      {b $} | END_BIT     // msb as name end
 154+ EA7D             >
 154+ EA7D 66 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 154+ EA7F             >Prev_Ptr        defl    Heap_Ptr
 154+ EA7F             >
 154+ EA7F             >mirror_Ptr      defl    $
 154+ EA7F             >
 154+ EA7F 39 36       >                dw      Dict_Ptr + 2        // xt
 154+ EA81             >Heap_Ptr        defl    $ - $E000           // save current HP
 154+ EA81             >
 154+ EA81             >Current_HP      defl  $ - $E000             // used to set HP once!
 154+ EA81             >
 154+ EA81             >//              ______________________________________________________________________
 154+ EA81             >//              Dictionary part
 154+ EA81             >
 154+ EA81             >                org     Dict_Ptr
 154+ 3637             >
 154+ 3637 7F 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 154+ 3639             >
 154+ 3639             >BLK_WRITE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 154+ 3639 CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 154+ 363C             >
 154+ 363C             >
 154+ 363C             >                endif           ; ok        // for other definitions it "points" the correct handler
 154+ 363C             >                // Use of "; ok" to suppress "warning[fwdref]"
 154+ 363C             >
 154+ 363C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 155+ 363C 09 36                        dw  BLK_SEEK
 156+ 363E 67 27                        dw  BBUF
 157+ 3640 56 3F 3E 26                  dw  BLK_FH, FETCH
 158+ 3644 E6 23                        dw  F_WRITE
 159+ 3646 3D 20 2F 00                  dw  LIT, $2F, QERROR
 159+ 364A 97 2A
 160+ 364C B2 25                        dw  DROP
 161+ 364E F4 24                        dw  EXIT
 162+ 3650
 163+ 3650              //  ______________________________________________________________________
 164+ 3650              //
 165+ 3650              // blk-init     n --
 166+ 3650              // seek block n  within blocks!.bin  file
 167+ 3650                              Colon_Def BLK_INIT, "BLK-INIT", is_normal
 167+ 3650             >                New_Def  BLK_INIT, "BLK-INIT", Enter_Ptr, is_normal ; ok
 167+ 3650             >
 167+ 3650             >Dict_Ptr        defl    $
 167+ 3650             >
 167+ 3650             >//              ______________________________________________________________________
 167+ 3650             >//              Heap part
 167+ 3650             >
 167+ 3650             >
 167+ 3650             >                org     (Heap_Ptr & $1FFF) + $E000
 167+ EA81             >
 167+ EA81             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 167+ EA81             >Latest_Definition defl  Heap_Ptr
 167+ EA81             >
 167+ EA81             >                // dummy db directives used to calculate length of namec
 167+ EA81 42 4C 4B 2D >                db      "BLK-INIT"
 167+ EA85 49 4E 49 54 >
 167+ EA89             >len_NFA         defl    $ - temp_NFA
 167+ EA89             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 167+ EA81             >
 167+ EA81 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 167+ EA82 42 4C 4B 2D >                db      "BLK-INIT"               // name string in 7-bit ascii, but
 167+ EA86 49 4E 49 54 >
 167+ EA8A             >                org     $-1                 // alter last byte of Name just above to set
 167+ EA89 D4          >                db      {b $} | END_BIT     // msb as name end
 167+ EA8A             >
 167+ EA8A 73 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 167+ EA8C             >Prev_Ptr        defl    Heap_Ptr
 167+ EA8C             >
 167+ EA8C             >mirror_Ptr      defl    $
 167+ EA8C             >
 167+ EA8C 52 36       >                dw      Dict_Ptr + 2        // xt
 167+ EA8E             >Heap_Ptr        defl    $ - $E000           // save current HP
 167+ EA8E             >
 167+ EA8E             >Current_HP      defl  $ - $E000             // used to set HP once!
 167+ EA8E             >
 167+ EA8E             >//              ______________________________________________________________________
 167+ EA8E             >//              Dictionary part
 167+ EA8E             >
 167+ EA8E             >                org     Dict_Ptr
 167+ 3650             >
 167+ 3650 8C 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 167+ 3652             >
 167+ 3652             >BLK_INIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 167+ 3652 CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 167+ 3655             >
 167+ 3655             >
 167+ 3655             >                endif           ; ok        // for other definitions it "points" the correct handler
 167+ 3655             >                // Use of "; ok" to suppress "warning[fwdref]"
 167+ 3655             >
 167+ 3655             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 168+ 3655 56 3F 3E 26                  dw  BLK_FH, FETCH, F_CLOSE, DROP
 168+ 3659 98 23 B2 25
 169+ 365D 5D 3F 60 25                  dw  BLK_FNAME, ONE_PLUS
 170+ 3661 5B 28 4B 27                  dw  HERE, THREE, F_OPEN         // open for update (read+write)
 170+ 3665 F9 23
 171+ 3667                          //    dw  LIT, $2C, QERROR
 172+ 3667
 173+ 3667 8F 20                        dw  ZBRANCH
 174+ 3669 0E 00                        dw  Blk_Init_Endif - $
 175+ 366B
 176+ 366B 3D 20 CF FF                  dw  LIT, $FFCF
 177+ 366F 3D 20 58 34                  dw  LIT, Exit_with_error
 178+ 3673 48 26                        dw  STORE
 179+ 3675
 180+ 3675 16 34                        dw  BASIC
 181+ 3677              Blk_Init_Endif:
 182+ 3677
 183+ 3677 56 3F 48 26                  dw  BLK_FH, STORE
 184+ 367B F4 24                        dw  EXIT
 185+ 367D
 186+ 367D              //  ______________________________________________________________________
 187+ 367D              //
 188+ 367D              // #sec
 189+ 367D              // number of 512-Byte "sectors" available on thie sysstem.
 190+ 367D              // it adds up to 16 MByte of data that can be used as source or pool for almost anything.
 191+ 367D
 192+ 367D                              Constant_Def NSEC , "#SEC", 32767
 192+ 367D             >                New_Def  NSEC, "#SEC", Constant_Ptr, is_normal
 192+ 367D             >
 192+ 367D             >Dict_Ptr        defl    $
 192+ 367D             >
 192+ 367D             >//              ______________________________________________________________________
 192+ 367D             >//              Heap part
 192+ 367D             >
 192+ 367D             >
 192+ 367D             >                org     (Heap_Ptr & $1FFF) + $E000
 192+ EA8E             >
 192+ EA8E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 192+ EA8E             >Latest_Definition defl  Heap_Ptr
 192+ EA8E             >
 192+ EA8E             >                // dummy db directives used to calculate length of namec
 192+ EA8E 23 53 45 43 >                db      "#SEC"
 192+ EA92             >len_NFA         defl    $ - temp_NFA
 192+ EA92             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 192+ EA8E             >
 192+ EA8E 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 192+ EA8F 23 53 45 43 >                db      "#SEC"               // name string in 7-bit ascii, but
 192+ EA93             >                org     $-1                 // alter last byte of Name just above to set
 192+ EA92 C3          >                db      {b $} | END_BIT     // msb as name end
 192+ EA93             >
 192+ EA93 81 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 192+ EA95             >Prev_Ptr        defl    Heap_Ptr
 192+ EA95             >
 192+ EA95             >mirror_Ptr      defl    $
 192+ EA95             >
 192+ EA95 7F 36       >                dw      Dict_Ptr + 2        // xt
 192+ EA97             >Heap_Ptr        defl    $ - $E000           // save current HP
 192+ EA97             >
 192+ EA97             >Current_HP      defl  $ - $E000             // used to set HP once!
 192+ EA97             >
 192+ EA97             >//              ______________________________________________________________________
 192+ EA97             >//              Dictionary part
 192+ EA97             >
 192+ EA97             >                org     Dict_Ptr
 192+ 367D             >
 192+ 367D 95 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 192+ 367F             >
 192+ 367F             >NSEC:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 192+ 367F CD 0A 27    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 192+ 3682             >
 192+ 3682             >
 192+ 3682             >                endif           ; ok        // for other definitions it "points" the correct handler
 192+ 3682             >                // Use of "; ok" to suppress "warning[fwdref]"
 192+ 3682             >
 192+ 3682             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 192+ 3682 FF 7F       >                dw      32767
 193+ 3684
 194+ 3684              //  ______________________________________________________________________
 195+ 3684
 196+ 3684
 197+ 3684
# file closed: C:\Zx\CSpect\Projects\vForth17_DOT/source/next-opt1.asm
 125  3684                              include "L3.asm"
# file opened: C:\Zx\CSpect\Projects\vForth17_DOT/source/L3.asm
   1+ 3684              //  ______________________________________________________________________
   2+ 3684              //
   3+ 3684              //  L3.asm
   4+ 3684              //
   5+ 3684              //  Continuation of L2.asm
   6+ 3684              //  I/O Block definitions
   7+ 3684              //  ______________________________________________________________________
   8+ 3684
   9+ 3684
  10+ 3684              //  ______________________________________________________________________
  11+ 3684              //
  12+ 3684              // r/w          a n f --
  13+ 3684              // read/write block n depending on flag f, true-flag means read, false-flag means write.
  14+ 3684                              Colon_Def READ_WRITE, "R/W", is_normal
  14+ 3684             >                New_Def  READ_WRITE, "R/W", Enter_Ptr, is_normal ; ok
  14+ 3684             >
  14+ 3684             >Dict_Ptr        defl    $
  14+ 3684             >
  14+ 3684             >//              ______________________________________________________________________
  14+ 3684             >//              Heap part
  14+ 3684             >
  14+ 3684             >
  14+ 3684             >                org     (Heap_Ptr & $1FFF) + $E000
  14+ EA97             >
  14+ EA97             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  14+ EA97             >Latest_Definition defl  Heap_Ptr
  14+ EA97             >
  14+ EA97             >                // dummy db directives used to calculate length of namec
  14+ EA97 52 2F 57    >                db      "R/W"
  14+ EA9A             >len_NFA         defl    $ - temp_NFA
  14+ EA9A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  14+ EA97             >
  14+ EA97 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  14+ EA98 52 2F 57    >                db      "R/W"               // name string in 7-bit ascii, but
  14+ EA9B             >                org     $-1                 // alter last byte of Name just above to set
  14+ EA9A D7          >                db      {b $} | END_BIT     // msb as name end
  14+ EA9B             >
  14+ EA9B 8E 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  14+ EA9D             >Prev_Ptr        defl    Heap_Ptr
  14+ EA9D             >
  14+ EA9D             >mirror_Ptr      defl    $
  14+ EA9D             >
  14+ EA9D 86 36       >                dw      Dict_Ptr + 2        // xt
  14+ EA9F             >Heap_Ptr        defl    $ - $E000           // save current HP
  14+ EA9F             >
  14+ EA9F             >Current_HP      defl  $ - $E000             // used to set HP once!
  14+ EA9F             >
  14+ EA9F             >//              ______________________________________________________________________
  14+ EA9F             >//              Dictionary part
  14+ EA9F             >
  14+ EA9F             >                org     Dict_Ptr
  14+ 3684             >
  14+ 3684 9D 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  14+ 3686             >
  14+ 3686             >READ_WRITE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  14+ 3686 CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  14+ 3689             >
  14+ 3689             >
  14+ 3689             >                endif           ; ok        // for other definitions it "points" the correct handler
  14+ 3689             >                // Use of "; ok" to suppress "warning[fwdref]"
  14+ 3689             >
  14+ 3689             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  15+ 3689 FE 24                        dw      TO_R                    // >r
  16+ 368B 67 25                        dw      ONE_SUBTRACT            // 1-
  17+ 368D CD 25 2C 25                  dw      DUP, ZLESS              // dup 0<
  18+ 3691 A9 25 7F 36                  dw      OVER, NSEC              // over #sec
  19+ 3695 67 25 D4 28                  dw      ONE_SUBTRACT, GREATER   // 1- >
  20+ 3699 C3 24                        dw      OR_OP                   // or
  21+ 369B 3D 20 06 00                  dw      LIT, 6, QERROR          // 6 ?error
  21+ 369F 97 2A
  22+ 36A1 09 25                        dw      R_TO                    // r>
  23+ 36A3                                                              // if
  24+ 36A3 8F 20                        dw      ZBRANCH
  25+ 36A5 08 00                        dw      Read_Write_Else - $
  26+ 36A7 20 36                        dw          BLK_READ            //      blk-read
  27+ 36A9 82 20                        dw      BRANCH
  28+ 36AB 04 00                        dw      Read_Write_Endif - $
  29+ 36AD              Read_Write_Else:                                // else
  30+ 36AD 39 36                        dw          BLK_WRITE           //      blk-write
  31+ 36AF              Read_Write_Endif:                               // endif
  32+ 36AF F4 24                        dw      EXIT                    // ;
  33+ 36B1
  34+ 36B1
  35+ 36B1              //  ______________________________________________________________________
  36+ 36B1              //
  37+ 36B1              // +buf        a1 -- a2 f
  38+ 36B1              // advences to next buffer, cyclically rotating along them
  39+ 36B1                              Colon_Def PBUF, "+BUF", is_normal
  39+ 36B1             >                New_Def  PBUF, "+BUF", Enter_Ptr, is_normal ; ok
  39+ 36B1             >
  39+ 36B1             >Dict_Ptr        defl    $
  39+ 36B1             >
  39+ 36B1             >//              ______________________________________________________________________
  39+ 36B1             >//              Heap part
  39+ 36B1             >
  39+ 36B1             >
  39+ 36B1             >                org     (Heap_Ptr & $1FFF) + $E000
  39+ EA9F             >
  39+ EA9F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  39+ EA9F             >Latest_Definition defl  Heap_Ptr
  39+ EA9F             >
  39+ EA9F             >                // dummy db directives used to calculate length of namec
  39+ EA9F 2B 42 55 46 >                db      "+BUF"
  39+ EAA3             >len_NFA         defl    $ - temp_NFA
  39+ EAA3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  39+ EA9F             >
  39+ EA9F 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  39+ EAA0 2B 42 55 46 >                db      "+BUF"               // name string in 7-bit ascii, but
  39+ EAA4             >                org     $-1                 // alter last byte of Name just above to set
  39+ EAA3 C6          >                db      {b $} | END_BIT     // msb as name end
  39+ EAA4             >
  39+ EAA4 97 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  39+ EAA6             >Prev_Ptr        defl    Heap_Ptr
  39+ EAA6             >
  39+ EAA6             >mirror_Ptr      defl    $
  39+ EAA6             >
  39+ EAA6 B3 36       >                dw      Dict_Ptr + 2        // xt
  39+ EAA8             >Heap_Ptr        defl    $ - $E000           // save current HP
  39+ EAA8             >
  39+ EAA8             >Current_HP      defl  $ - $E000             // used to set HP once!
  39+ EAA8             >
  39+ EAA8             >//              ______________________________________________________________________
  39+ EAA8             >//              Dictionary part
  39+ EAA8             >
  39+ EAA8             >                org     Dict_Ptr
  39+ 36B1             >
  39+ 36B1 A6 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  39+ 36B3             >
  39+ 36B3             >PBUF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  39+ 36B3 CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  39+ 36B6             >
  39+ 36B6             >
  39+ 36B6             >                endif           ; ok        // for other definitions it "points" the correct handler
  39+ 36B6             >                // Use of "; ok" to suppress "warning[fwdref]"
  39+ 36B6             >
  39+ 36B6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  40+ 36B6 3D 20 04 02                  dw      LIT, 516, PLUS          // 516 +
  40+ 36BA 47 25
  41+ 36BC CD 25 C5 27                  dw      DUP, LIMIT, FETCH       // dup limit @
  41+ 36C0 3E 26
  42+ 36C2 A6 28                        dw      EQUALS                  // =
  43+ 36C4                                                              // if
  44+ 36C4 8F 20                        dw      ZBRANCH
  45+ 36C6 08 00                        dw      PBuf_Endif - $
  46+ 36C8 B2 25                        dw          DROP                //      drop
  47+ 36CA BF 27 3E 26                  dw          FIRST, FETCH        //      first @
  48+ 36CE              PBuf_Endif:                                     // endif
  49+ 36CE CD 25 31 28                  dw      DUP, PREV, FETCH        // dup prev @
  49+ 36D2 3E 26
  50+ 36D4 9A 28                        dw      SUBTRACT                // -
  51+ 36D6 F4 24                        dw      EXIT                    // ;
  52+ 36D8
  53+ 36D8              //  ______________________________________________________________________
  54+ 36D8              //
  55+ 36D8              // update       --
  56+ 36D8              // mark the last used block to be written to disk
  57+ 36D8                              Colon_Def UPDATE, "UPDATE", is_normal
  57+ 36D8             >                New_Def  UPDATE, "UPDATE", Enter_Ptr, is_normal ; ok
  57+ 36D8             >
  57+ 36D8             >Dict_Ptr        defl    $
  57+ 36D8             >
  57+ 36D8             >//              ______________________________________________________________________
  57+ 36D8             >//              Heap part
  57+ 36D8             >
  57+ 36D8             >
  57+ 36D8             >                org     (Heap_Ptr & $1FFF) + $E000
  57+ EAA8             >
  57+ EAA8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  57+ EAA8             >Latest_Definition defl  Heap_Ptr
  57+ EAA8             >
  57+ EAA8             >                // dummy db directives used to calculate length of namec
  57+ EAA8 55 50 44 41 >                db      "UPDATE"
  57+ EAAC 54 45       >
  57+ EAAE             >len_NFA         defl    $ - temp_NFA
  57+ EAAE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  57+ EAA8             >
  57+ EAA8 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  57+ EAA9 55 50 44 41 >                db      "UPDATE"               // name string in 7-bit ascii, but
  57+ EAAD 54 45       >
  57+ EAAF             >                org     $-1                 // alter last byte of Name just above to set
  57+ EAAE C5          >                db      {b $} | END_BIT     // msb as name end
  57+ EAAF             >
  57+ EAAF 9F 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  57+ EAB1             >Prev_Ptr        defl    Heap_Ptr
  57+ EAB1             >
  57+ EAB1             >mirror_Ptr      defl    $
  57+ EAB1             >
  57+ EAB1 DA 36       >                dw      Dict_Ptr + 2        // xt
  57+ EAB3             >Heap_Ptr        defl    $ - $E000           // save current HP
  57+ EAB3             >
  57+ EAB3             >Current_HP      defl  $ - $E000             // used to set HP once!
  57+ EAB3             >
  57+ EAB3             >//              ______________________________________________________________________
  57+ EAB3             >//              Dictionary part
  57+ EAB3             >
  57+ EAB3             >                org     Dict_Ptr
  57+ 36D8             >
  57+ 36D8 B1 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  57+ 36DA             >
  57+ 36DA             >UPDATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  57+ 36DA CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  57+ 36DD             >
  57+ 36DD             >
  57+ 36DD             >                endif           ; ok        // for other definitions it "points" the correct handler
  57+ 36DD             >                // Use of "; ok" to suppress "warning[fwdref]"
  57+ 36DD             >
  57+ 36DD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  58+ 36DD 31 28 3E 26                  dw      PREV, FETCH, FETCH      // prev @ @
  58+ 36E1 3E 26
  59+ 36E3 3D 20 00 80                  dw      LIT, $8000, OR_OP       // $8000, or
  59+ 36E7 C3 24
  60+ 36E9 31 28 3E 26                  dw      PREV, FETCH, STORE      // prev @ !
  60+ 36ED 48 26
  61+ 36EF F4 24                        dw      EXIT                    // ;
  62+ 36F1
  63+ 36F1
  64+ 36F1              //  ______________________________________________________________________
  65+ 36F1              //
  66+ 36F1              // empty-buffers --
  67+ 36F1                              Colon_Def EMPTY_BUFFERS, "EMPTY-BUFFERS", is_normal
  67+ 36F1             >                New_Def  EMPTY_BUFFERS, "EMPTY-BUFFERS", Enter_Ptr, is_normal ; ok
  67+ 36F1             >
  67+ 36F1             >Dict_Ptr        defl    $
  67+ 36F1             >
  67+ 36F1             >//              ______________________________________________________________________
  67+ 36F1             >//              Heap part
  67+ 36F1             >
  67+ 36F1             >
  67+ 36F1             >                org     (Heap_Ptr & $1FFF) + $E000
  67+ EAB3             >
  67+ EAB3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  67+ EAB3             >Latest_Definition defl  Heap_Ptr
  67+ EAB3             >
  67+ EAB3             >                // dummy db directives used to calculate length of namec
  67+ EAB3 45 4D 50 54 >                db      "EMPTY-BUFFERS"
  67+ EAB7 59 2D 42 55 >
  67+ EABB 46 46 45 52 >
  67+ EABF 53          >
  67+ EAC0             >len_NFA         defl    $ - temp_NFA
  67+ EAC0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  67+ EAB3             >
  67+ EAB3 8D          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  67+ EAB4 45 4D 50 54 >                db      "EMPTY-BUFFERS"               // name string in 7-bit ascii, but
  67+ EAB8 59 2D 42 55 >
  67+ EABC 46 46 45 52 >
  67+ EAC0 53          >
  67+ EAC1             >                org     $-1                 // alter last byte of Name just above to set
  67+ EAC0 D3          >                db      {b $} | END_BIT     // msb as name end
  67+ EAC1             >
  67+ EAC1 A8 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  67+ EAC3             >Prev_Ptr        defl    Heap_Ptr
  67+ EAC3             >
  67+ EAC3             >mirror_Ptr      defl    $
  67+ EAC3             >
  67+ EAC3 F3 36       >                dw      Dict_Ptr + 2        // xt
  67+ EAC5             >Heap_Ptr        defl    $ - $E000           // save current HP
  67+ EAC5             >
  67+ EAC5             >Current_HP      defl  $ - $E000             // used to set HP once!
  67+ EAC5             >
  67+ EAC5             >//              ______________________________________________________________________
  67+ EAC5             >//              Dictionary part
  67+ EAC5             >
  67+ EAC5             >                org     Dict_Ptr
  67+ 36F1             >
  67+ 36F1 C3 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  67+ 36F3             >
  67+ 36F3             >EMPTY_BUFFERS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  67+ 36F3 CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  67+ 36F6             >
  67+ 36F6             >
  67+ 36F6             >                endif           ; ok        // for other definitions it "points" the correct handler
  67+ 36F6             >                // Use of "; ok" to suppress "warning[fwdref]"
  67+ 36F6             >
  67+ 36F6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  68+ 36F6 BF 27 3E 26                  dw      FIRST, FETCH            // first @
  69+ 36FA C5 27 3E 26                  dw      LIMIT, FETCH            // limit @
  70+ 36FE A9 25 9A 28                  dw      OVER, SUBTRACT, ERASE   // over - erase
  70+ 3702 41 2D
  71+ 3704 F4 24                        dw      EXIT                    // ;
  72+ 3706
  73+ 3706              //  ______________________________________________________________________
  74+ 3706              //
  75+ 3706              // buffer       n -- a
  76+ 3706              // read block n and gives the address to a buffer
  77+ 3706              // any block previously inside the buffer, if modified, is rewritten to
  78+ 3706              // disk before reading the block n.
  79+ 3706
  80+ 3706                              Colon_Def BUFFER, "BUFFER", is_normal
  80+ 3706             >                New_Def  BUFFER, "BUFFER", Enter_Ptr, is_normal ; ok
  80+ 3706             >
  80+ 3706             >Dict_Ptr        defl    $
  80+ 3706             >
  80+ 3706             >//              ______________________________________________________________________
  80+ 3706             >//              Heap part
  80+ 3706             >
  80+ 3706             >
  80+ 3706             >                org     (Heap_Ptr & $1FFF) + $E000
  80+ EAC5             >
  80+ EAC5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  80+ EAC5             >Latest_Definition defl  Heap_Ptr
  80+ EAC5             >
  80+ EAC5             >                // dummy db directives used to calculate length of namec
  80+ EAC5 42 55 46 46 >                db      "BUFFER"
  80+ EAC9 45 52       >
  80+ EACB             >len_NFA         defl    $ - temp_NFA
  80+ EACB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  80+ EAC5             >
  80+ EAC5 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  80+ EAC6 42 55 46 46 >                db      "BUFFER"               // name string in 7-bit ascii, but
  80+ EACA 45 52       >
  80+ EACC             >                org     $-1                 // alter last byte of Name just above to set
  80+ EACB D2          >                db      {b $} | END_BIT     // msb as name end
  80+ EACC             >
  80+ EACC B3 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  80+ EACE             >Prev_Ptr        defl    Heap_Ptr
  80+ EACE             >
  80+ EACE             >mirror_Ptr      defl    $
  80+ EACE             >
  80+ EACE 08 37       >                dw      Dict_Ptr + 2        // xt
  80+ EAD0             >Heap_Ptr        defl    $ - $E000           // save current HP
  80+ EAD0             >
  80+ EAD0             >Current_HP      defl  $ - $E000             // used to set HP once!
  80+ EAD0             >
  80+ EAD0             >//              ______________________________________________________________________
  80+ EAD0             >//              Dictionary part
  80+ EAD0             >
  80+ EAD0             >                org     Dict_Ptr
  80+ 3706             >
  80+ 3706 CE 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  80+ 3708             >
  80+ 3708             >BUFFER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  80+ 3708 CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  80+ 370B             >
  80+ 370B             >
  80+ 370B             >                endif           ; ok        // for other definitions it "points" the correct handler
  80+ 370B             >                // Use of "; ok" to suppress "warning[fwdref]"
  80+ 370B             >
  80+ 370B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  81+ 370B 2B 28 3E 26                  dw      USED, FETCH             // used @
  82+ 370F CD 25 FE 24                  dw      DUP, TO_R               // dup >r
  83+ 3713                                                              // begin
  84+ 3713              Buffer_Begin:
  85+ 3713 B3 36                        dw          PBUF                //      +buf
  86+ 3715                                                              // until
  87+ 3715 8F 20                        dw      ZBRANCH
  88+ 3717 FC FF                        dw      Buffer_Begin - $
  89+ 3719 2B 28 48 26                  dw      USED, STORE             // used !
  90+ 371D 14 25 3E 26                  dw      R_OP, FETCH, ZLESS      // r @ 0<
  90+ 3721 2C 25
  91+ 3723                                                              // if
  92+ 3723 8F 20                        dw      ZBRANCH
  93+ 3725 14 00                        dw      Buffer_Endif - $
  94+ 3727 14 25 76 25                  dw          R_OP, CELL_PLUS     //      r cell+
  95+ 372B 14 25 3E 26                  dw          R_OP, FETCH         //      r fetch
  96+ 372F 3D 20 FF 7F                  dw          LIT, $7FFF          //      7FFF
  97+ 3733 B4 24                        dw          AND_OP              //      and
  98+ 3735 36 27 86 36                  dw          ZERO, READ_WRITE    //      0 r/w
  99+ 3739              Buffer_Endif:                                   // endif
 100+ 3739 14 25 48 26                  dw      R_OP, STORE             // r !
 101+ 373D 14 25 31 28                  dw      R_OP, PREV, STORE       // r prev !
 101+ 3741 48 26
 102+ 3743 09 25 76 25                  dw      R_TO, CELL_PLUS         // r> cell+
 103+ 3747 F4 24                        dw      EXIT                    // ;
 104+ 3749
 105+ 3749              //  ______________________________________________________________________
 106+ 3749              //
 107+ 3749              // block        n -- a
 108+ 3749              // Leaves the buffer address that contains the block n.
 109+ 3749              // If the block is not already present, it will be loaded from disk
 110+ 3749              // The block previously inside the buffer, if modified, is rewritten to
 111+ 3749              // disk before reading the block n.
 112+ 3749              // See also BUFFER, R/W, UPDATE, FLUSH.
 113+ 3749
 114+ 3749                              Colon_Def BLOCK, "BLOCK", is_normal
 114+ 3749             >                New_Def  BLOCK, "BLOCK", Enter_Ptr, is_normal ; ok
 114+ 3749             >
 114+ 3749             >Dict_Ptr        defl    $
 114+ 3749             >
 114+ 3749             >//              ______________________________________________________________________
 114+ 3749             >//              Heap part
 114+ 3749             >
 114+ 3749             >
 114+ 3749             >                org     (Heap_Ptr & $1FFF) + $E000
 114+ EAD0             >
 114+ EAD0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 114+ EAD0             >Latest_Definition defl  Heap_Ptr
 114+ EAD0             >
 114+ EAD0             >                // dummy db directives used to calculate length of namec
 114+ EAD0 42 4C 4F 43 >                db      "BLOCK"
 114+ EAD4 4B          >
 114+ EAD5             >len_NFA         defl    $ - temp_NFA
 114+ EAD5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 114+ EAD0             >
 114+ EAD0 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 114+ EAD1 42 4C 4F 43 >                db      "BLOCK"               // name string in 7-bit ascii, but
 114+ EAD5 4B          >
 114+ EAD6             >                org     $-1                 // alter last byte of Name just above to set
 114+ EAD5 CB          >                db      {b $} | END_BIT     // msb as name end
 114+ EAD6             >
 114+ EAD6 C5 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 114+ EAD8             >Prev_Ptr        defl    Heap_Ptr
 114+ EAD8             >
 114+ EAD8             >mirror_Ptr      defl    $
 114+ EAD8             >
 114+ EAD8 4B 37       >                dw      Dict_Ptr + 2        // xt
 114+ EADA             >Heap_Ptr        defl    $ - $E000           // save current HP
 114+ EADA             >
 114+ EADA             >Current_HP      defl  $ - $E000             // used to set HP once!
 114+ EADA             >
 114+ EADA             >//              ______________________________________________________________________
 114+ EADA             >//              Dictionary part
 114+ EADA             >
 114+ EADA             >                org     Dict_Ptr
 114+ 3749             >
 114+ 3749 D8 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 114+ 374B             >
 114+ 374B             >BLOCK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 114+ 374B CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 114+ 374E             >
 114+ 374E             >
 114+ 374E             >                endif           ; ok        // for other definitions it "points" the correct handler
 114+ 374E             >                // Use of "; ok" to suppress "warning[fwdref]"
 114+ 374E             >
 114+ 374E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 115+ 374E                          //  dw      OFFSET, FETCH           // offset @
 116+ 374E                          //  dw      PLUS
 117+ 374E FE 24                        dw      TO_R                    // + >r
 118+ 3750 31 28 3E 26                  dw      PREV, FETCH             // prev @
 119+ 3754 CD 25 3E 26                  dw      DUP, FETCH              // dup @
 120+ 3758 14 25 9A 28                  dw      R_OP, SUBTRACT          // r -
 121+ 375C CD 25 47 25                  dw      DUP, PLUS               // dup +  ( trick: check equality without most significant bit )
 122+ 3760                                                              // if
 123+ 3760 8F 20                        dw        ZBRANCH
 124+ 3762 32 00                        dw        Block_Endif_1 - $
 125+ 3764              Block_Begin:                                    //      begin
 126+ 3764 B3 36 19 25                  dw          PBUF, ZEQUAL        //          +buf 0
 127+ 3768                                                              //          if
 128+ 3768 8F 20                        dw          ZBRANCH
 129+ 376A 12 00                        dw          Block_Endif_2 - $
 130+ 376C B2 25                        dw              DROP            //              drop
 131+ 376E 14 25 08 37                  dw              R_OP, BUFFER    //              r buffer
 132+ 3772 CD 25                        dw              DUP             //              dup
 133+ 3774 14 25 3D 27                  dw              R_OP, ONE       //              r 1
 134+ 3778 86 36                        dw              READ_WRITE      //              r/w
 135+ 377A 83 25                        dw              TWO_MINUS       //              2-
 136+ 377C              Block_Endif_2:                                  //          endif
 137+ 377C CD 25 3E 26                  dw          DUP, FETCH, R_OP    //          dup @ r
 137+ 3780 14 25
 138+ 3782 9A 28 CD 25                  dw          SUBTRACT, DUP       //          - dup
 139+ 3786 47 25 19 25                  dw          PLUS, ZEQUAL        //          + 0=
 140+ 378A                                                              //      until
 141+ 378A 8F 20                        dw        ZBRANCH
 142+ 378C D8 FF                        dw        Block_Begin - $
 143+ 378E CD 25 31 28                  dw        DUP, PREV, STORE      //      dup prev !
 143+ 3792 48 26
 144+ 3794              Block_Endif_1:                                  // endif
 145+ 3794 09 25 B2 25                  dw      R_TO, DROP, CELL_PLUS   // r> drop cell+
 145+ 3798 76 25
 146+ 379A F4 24                        dw      EXIT                    // ;
 147+ 379C
 148+ 379C              //  ______________________________________________________________________
 149+ 379C              //
 150+ 379C              // #buff        -- n
 151+ 379C              // number of buffers available. must be the difference between LIMIT and FIRST divided by 516
 152+ 379C                              Constant_Def NBUFF,   "#BUFF", 7
 152+ 379C             >                New_Def  NBUFF, "#BUFF", Constant_Ptr, is_normal
 152+ 379C             >
 152+ 379C             >Dict_Ptr        defl    $
 152+ 379C             >
 152+ 379C             >//              ______________________________________________________________________
 152+ 379C             >//              Heap part
 152+ 379C             >
 152+ 379C             >
 152+ 379C             >                org     (Heap_Ptr & $1FFF) + $E000
 152+ EADA             >
 152+ EADA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 152+ EADA             >Latest_Definition defl  Heap_Ptr
 152+ EADA             >
 152+ EADA             >                // dummy db directives used to calculate length of namec
 152+ EADA 23 42 55 46 >                db      "#BUFF"
 152+ EADE 46          >
 152+ EADF             >len_NFA         defl    $ - temp_NFA
 152+ EADF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 152+ EADA             >
 152+ EADA 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 152+ EADB 23 42 55 46 >                db      "#BUFF"               // name string in 7-bit ascii, but
 152+ EADF 46          >
 152+ EAE0             >                org     $-1                 // alter last byte of Name just above to set
 152+ EADF C6          >                db      {b $} | END_BIT     // msb as name end
 152+ EAE0             >
 152+ EAE0 D0 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 152+ EAE2             >Prev_Ptr        defl    Heap_Ptr
 152+ EAE2             >
 152+ EAE2             >mirror_Ptr      defl    $
 152+ EAE2             >
 152+ EAE2 9E 37       >                dw      Dict_Ptr + 2        // xt
 152+ EAE4             >Heap_Ptr        defl    $ - $E000           // save current HP
 152+ EAE4             >
 152+ EAE4             >Current_HP      defl  $ - $E000             // used to set HP once!
 152+ EAE4             >
 152+ EAE4             >//              ______________________________________________________________________
 152+ EAE4             >//              Dictionary part
 152+ EAE4             >
 152+ EAE4             >                org     Dict_Ptr
 152+ 379C             >
 152+ 379C E2 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 152+ 379E             >
 152+ 379E             >NBUFF:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 152+ 379E CD 0A 27    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 152+ 37A1             >
 152+ 37A1             >
 152+ 37A1             >                endif           ; ok        // for other definitions it "points" the correct handler
 152+ 37A1             >                // Use of "; ok" to suppress "warning[fwdref]"
 152+ 37A1             >
 152+ 37A1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 152+ 37A1 07 00       >                dw      7
 153+ 37A3
 154+ 37A3              //  ______________________________________________________________________
 155+ 37A3              //
 156+ 37A3              // flush        --
 157+ 37A3                              Colon_Def FLUSH, "FLUSH", is_normal
 157+ 37A3             >                New_Def  FLUSH, "FLUSH", Enter_Ptr, is_normal ; ok
 157+ 37A3             >
 157+ 37A3             >Dict_Ptr        defl    $
 157+ 37A3             >
 157+ 37A3             >//              ______________________________________________________________________
 157+ 37A3             >//              Heap part
 157+ 37A3             >
 157+ 37A3             >
 157+ 37A3             >                org     (Heap_Ptr & $1FFF) + $E000
 157+ EAE4             >
 157+ EAE4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 157+ EAE4             >Latest_Definition defl  Heap_Ptr
 157+ EAE4             >
 157+ EAE4             >                // dummy db directives used to calculate length of namec
 157+ EAE4 46 4C 55 53 >                db      "FLUSH"
 157+ EAE8 48          >
 157+ EAE9             >len_NFA         defl    $ - temp_NFA
 157+ EAE9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 157+ EAE4             >
 157+ EAE4 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 157+ EAE5 46 4C 55 53 >                db      "FLUSH"               // name string in 7-bit ascii, but
 157+ EAE9 48          >
 157+ EAEA             >                org     $-1                 // alter last byte of Name just above to set
 157+ EAE9 C8          >                db      {b $} | END_BIT     // msb as name end
 157+ EAEA             >
 157+ EAEA DA 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 157+ EAEC             >Prev_Ptr        defl    Heap_Ptr
 157+ EAEC             >
 157+ EAEC             >mirror_Ptr      defl    $
 157+ EAEC             >
 157+ EAEC A5 37       >                dw      Dict_Ptr + 2        // xt
 157+ EAEE             >Heap_Ptr        defl    $ - $E000           // save current HP
 157+ EAEE             >
 157+ EAEE             >Current_HP      defl  $ - $E000             // used to set HP once!
 157+ EAEE             >
 157+ EAEE             >//              ______________________________________________________________________
 157+ EAEE             >//              Dictionary part
 157+ EAEE             >
 157+ EAEE             >                org     Dict_Ptr
 157+ 37A3             >
 157+ 37A3 EC 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 157+ 37A5             >
 157+ 37A5             >FLUSH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 157+ 37A5 CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 157+ 37A8             >
 157+ 37A8             >
 157+ 37A8             >                endif           ; ok        // for other definitions it "points" the correct handler
 157+ 37A8             >                // Use of "; ok" to suppress "warning[fwdref]"
 157+ 37A8             >
 157+ 37A8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 158+ 37A8 9E 37 60 25                  dw      NBUFF, ONE_PLUS, ZERO   // #buff 1+ 0
 158+ 37AC 36 27
 159+ 37AE              Flush_Do:                                       // do
 160+ 37AE CE 20                        dw      C_DO
 161+ 37B0 36 27 08 37                  dw      ZERO, BUFFER, DROP      //      0 buffer drop
 161+ 37B4 B2 25
 162+ 37B6                                                              // loop
 163+ 37B6 7A 20 F8 FF                  dw      C_LOOP, Flush_Do - $
 164+ 37BA 56 3F 3E 26                  dw      BLK_FH, FETCH           // blk-fh @     ( ZX-Next dependance )
 165+ 37BE A4 23 B2 25                  dw      F_SYNC, DROP            // f_sync drop
 166+ 37C2 F4 24                        dw      EXIT                    // exit
 167+ 37C4
 168+ 37C4              //  ______________________________________________________________________
 169+ 37C4              //
 170+ 37C4              // f_getline    a m fh -- n
 171+ 37C4              // Given an open filehandle read next line (terminated with $0D or $0A)
 172+ 37C4              // Address a is left for subsequent processing
 173+ 37C4              // and n as the actual number of byte read, that is the length of line
 174+ 37C4                              Colon_Def F_GETLINE, "F_GETLINE", is_normal
 174+ 37C4             >                New_Def  F_GETLINE, "F_GETLINE", Enter_Ptr, is_normal ; ok
 174+ 37C4             >
 174+ 37C4             >Dict_Ptr        defl    $
 174+ 37C4             >
 174+ 37C4             >//              ______________________________________________________________________
 174+ 37C4             >//              Heap part
 174+ 37C4             >
 174+ 37C4             >
 174+ 37C4             >                org     (Heap_Ptr & $1FFF) + $E000
 174+ EAEE             >
 174+ EAEE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 174+ EAEE             >Latest_Definition defl  Heap_Ptr
 174+ EAEE             >
 174+ EAEE             >                // dummy db directives used to calculate length of namec
 174+ EAEE 46 5F 47 45 >                db      "F_GETLINE"
 174+ EAF2 54 4C 49 4E >
 174+ EAF6 45          >
 174+ EAF7             >len_NFA         defl    $ - temp_NFA
 174+ EAF7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 174+ EAEE             >
 174+ EAEE 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 174+ EAEF 46 5F 47 45 >                db      "F_GETLINE"               // name string in 7-bit ascii, but
 174+ EAF3 54 4C 49 4E >
 174+ EAF7 45          >
 174+ EAF8             >                org     $-1                 // alter last byte of Name just above to set
 174+ EAF7 C5          >                db      {b $} | END_BIT     // msb as name end
 174+ EAF8             >
 174+ EAF8 E4 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 174+ EAFA             >Prev_Ptr        defl    Heap_Ptr
 174+ EAFA             >
 174+ EAFA             >mirror_Ptr      defl    $
 174+ EAFA             >
 174+ EAFA C6 37       >                dw      Dict_Ptr + 2        // xt
 174+ EAFC             >Heap_Ptr        defl    $ - $E000           // save current HP
 174+ EAFC             >
 174+ EAFC             >Current_HP      defl  $ - $E000             // used to set HP once!
 174+ EAFC             >
 174+ EAFC             >//              ______________________________________________________________________
 174+ EAFC             >//              Dictionary part
 174+ EAFC             >
 174+ EAFC             >                org     Dict_Ptr
 174+ 37C4             >
 174+ 37C4 FA 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 174+ 37C6             >
 174+ 37C6             >F_GETLINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 174+ 37C6 CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 174+ 37C9             >
 174+ 37C9             >
 174+ 37C9             >                endif           ; ok        // for other definitions it "points" the correct handler
 174+ 37C9             >                // Use of "; ok" to suppress "warning[fwdref]"
 174+ 37C9             >
 174+ 37C9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 175+ 37C9 FE 24                        dw      TO_R                    // >r               ( a  m  )     \  fh
 176+ 37CB BD 25                        dw      TUCK                    // tuck             ( m a m )
 177+ 37CD 14 25 B0 23                  dw      R_OP, F_FGETPOS         // r f_fgetpos      ( m a m d f )
 178+ 37D1 3D 20 2C 00                  dw      LIT, 44, QERROR         // 44 ?error        ( m a m d )
 178+ 37D5 97 2A
 179+ 37D7
 180+ 37D7 0F 26 A9 25                  dw      TWO_SWAP, OVER          // 2swap over       ( m d a m )
 181+ 37DB 60 25 C6 25                  dw      ONE_PLUS, SWAP          // 1+ swap          ( m d a a+1 m )
 182+ 37DF
 183+ 37DF 14 25 C8 23                  dw      R_OP, F_READ            // r f_read         ( m d a n f )
 184+ 37E3 3D 20 2E 00                  dw      LIT, 46, QERROR         // 46 ?error        ( m d a n )
 184+ 37E7 97 2A
 185+ 37E9                                                              // if ( at least 1 chr was read )  \  fh
 186+ 37E9 8F 20                        dw      ZBRANCH
 187+ 37EB 3C 00                        dw      FGetline_Else - $
 188+ 37ED 3D 20 0A 00                  dw          LIT, 10, ENCLOSE    //      10 enclose       ( m d a x b x )
 188+ 37F1 C3 21
 189+ 37F3 B2 25 B7 25                  dw          DROP, NIP           //      drop nip         ( m d a b )
 190+ 37F7 C6 25                        dw          SWAP                //      drop swap        ( m d b a )
 191+ 37F9 3D 20 0D 00                  dw          LIT, 13, ENCLOSE    //      13 enclose       ( m d b a x c x )
 191+ 37FD C3 21
 192+ 37FF B2 25 B7 25                  dw          DROP, NIP           //      drop nip         ( m d b a c )
 193+ 3803 D4 25 DF 28                  dw          ROT, MIN            //      rot min          ( m d a n )
 194+ 3807 CD 25 49 28                  dw          DUP, SPAN, STORE    //      dup span !       ( m d a n )
 194+ 380B 48 26
 195+ 380D CD 25 FE 24                  dw          DUP, TO_R           //      dup >r           ( m d a n )      \ fh n
 196+ 3811 0F 26 09 25                  dw          TWO_SWAP, R_TO      //      2swap r>         ( m a n d n )    \ fh
 197+ 3815 36 27 51 25                  dw          ZERO, DPLUS         //      0 d+             ( m a n d+n )
 198+ 3819 09 25 7D 23                  dw          R_TO, F_SEEK        //      r> f_seek        ( m a n f )
 199+ 381D 3D 20 2D 00                  dw          LIT, 45, QERROR     //      45 ?error        ( m a n )
 199+ 3821 97 2A
 200+ 3823                                                              // else
 201+ 3823 82 20                        dw      BRANCH
 202+ 3825 0C 00                        dw      FGetline_Endif - $
 203+ 3827              FGetline_Else:
 204+ 3827 09 25                        dw          R_TO                //      r>              ( m d a fh )
 205+ 3829 0F 26 09 26                  dw          TWO_SWAP, TWO_DROP  //      2swap 2drop     ( m a fh )
 206+ 382D B2 25 36 27                  dw          DROP, ZERO          //      drop, 0         ( m a 0 )
 207+ 3831              FGetline_Endif:                                 // endif
 208+ 3831 FE 24 CD 25                  dw      TO_R, DUP, DUP          // >r dup dup           ( m a a a )
 208+ 3835 CD 25
 209+ 3837 60 25 C6 25                  dw      ONE_PLUS, SWAP          // 1+ swap              ( m a a+1 a )
 210+ 383B 14 25 35 24                  dw      R_OP, CMOVE             // r cmove              ( m a )
 211+ 383F 1C 26 47 25                  dw      TWO_DUP, PLUS           // 2dup +               ( m a m+a )
 212+ 3843 36 27 C6 25                  dw      ZERO, SWAP              // 0 swap
 213+ 3847 7B 25 48 26                  dw      CELL_MINUS,  STORE      // cell-  !             ( m a )
 214+ 384B 14 25 47 25                  dw      R_OP, PLUS, ONE_SUBTRACT// r + 1-               ( m a+n1 )
 214+ 384F 67 25
 215+ 3851 C6 25 14 25                  dw      SWAP, R_OP, SUBTRACT    // swap r -             ( a+n+1 m-n )
 215+ 3855 9A 28
 216+ 3857 4C 2D                        dw      BLANK                   // blank
 217+ 3859 09 25                        dw      R_TO                    // r>                   ( n )
 218+ 385B F4 24                        dw      EXIT                    // ;
 219+ 385D
 220+ 385D              //  ______________________________________________________________________
 221+ 385D              //
 222+ 385D              // f_include    fh --
 223+ 385D              // Given a filehandle includes the source from file
 224+ 385D                              Colon_Def F_INCLUDE, "F_INCLUDE", is_normal
 224+ 385D             >                New_Def  F_INCLUDE, "F_INCLUDE", Enter_Ptr, is_normal ; ok
 224+ 385D             >
 224+ 385D             >Dict_Ptr        defl    $
 224+ 385D             >
 224+ 385D             >//              ______________________________________________________________________
 224+ 385D             >//              Heap part
 224+ 385D             >
 224+ 385D             >
 224+ 385D             >                org     (Heap_Ptr & $1FFF) + $E000
 224+ EAFC             >
 224+ EAFC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 224+ EAFC             >Latest_Definition defl  Heap_Ptr
 224+ EAFC             >
 224+ EAFC             >                // dummy db directives used to calculate length of namec
 224+ EAFC 46 5F 49 4E >                db      "F_INCLUDE"
 224+ EB00 43 4C 55 44 >
 224+ EB04 45          >
 224+ EB05             >len_NFA         defl    $ - temp_NFA
 224+ EB05             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 224+ EAFC             >
 224+ EAFC 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 224+ EAFD 46 5F 49 4E >                db      "F_INCLUDE"               // name string in 7-bit ascii, but
 224+ EB01 43 4C 55 44 >
 224+ EB05 45          >
 224+ EB06             >                org     $-1                 // alter last byte of Name just above to set
 224+ EB05 C5          >                db      {b $} | END_BIT     // msb as name end
 224+ EB06             >
 224+ EB06 EE 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 224+ EB08             >Prev_Ptr        defl    Heap_Ptr
 224+ EB08             >
 224+ EB08             >mirror_Ptr      defl    $
 224+ EB08             >
 224+ EB08 5F 38       >                dw      Dict_Ptr + 2        // xt
 224+ EB0A             >Heap_Ptr        defl    $ - $E000           // save current HP
 224+ EB0A             >
 224+ EB0A             >Current_HP      defl  $ - $E000             // used to set HP once!
 224+ EB0A             >
 224+ EB0A             >//              ______________________________________________________________________
 224+ EB0A             >//              Dictionary part
 224+ EB0A             >
 224+ EB0A             >                org     Dict_Ptr
 224+ 385D             >
 224+ 385D 08 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 224+ 385F             >
 224+ 385F             >F_INCLUDE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 224+ 385F CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 224+ 3862             >
 224+ 3862             >
 224+ 3862             >                endif           ; ok        // for other definitions it "points" the correct handler
 224+ 3862             >                // Use of "; ok" to suppress "warning[fwdref]"
 224+ 3862             >
 224+ 3862             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 225+ 3862 D7 27 3E 26                  dw      BLK, FETCH, TO_R        // blk @ >r
 225+ 3866 FE 24
 226+ 3868 DD 27 3E 26                  dw      TO_IN, FETCH, TO_R      // >in @ >r
 226+ 386C FE 24
 227+ 386E 43 28 3E 26                  dw      SOURCE_ID, FETCH, TO_R  // source-id @ >r
 227+ 3872 FE 24
 228+ 3874 14 25                        dw      R_OP                    // r
 229+ 3876                                                              // if
 230+ 3876 8F 20                        dw      ZBRANCH
 231+ 3878 20 00                        dw      FInclude_Else_1 - $
 232+ 387A 14 25 B0 23                  dw          R_OP, F_FGETPOS     //      r f_getpos
 233+ 387E 3D 20 2C 00                  dw          LIT, 44, QERROR     //      44 ?error
 233+ 3882 97 2A
 234+ 3884 DD 27 3E 26                  dw          TO_IN, FETCH        //      >in @ 2-
 235+ 3888 83 25                        dw          TWO_MINUS
 236+ 388A 49 28 3E 26                  dw          SPAN, FETCH         //      span @ -
 237+ 388E 9A 28                        dw          SUBTRACT
 238+ 3890 8F 28 51 25                  dw          S_TO_D, DPLUS       //      s>d d+
 239+ 3894                                                              // else
 240+ 3894 82 20                        dw      BRANCH
 241+ 3896 06 00                        dw      FInclude_Endif_1 - $
 242+ 3898              FInclude_Else_1:
 243+ 3898 36 27 36 27                  dw          ZERO, ZERO          //      0 0
 244+ 389C                                                              // endif
 245+ 389C              FInclude_Endif_1:
 246+ 389C FE 24 FE 24                  dw      TO_R, TO_R              // >r >r
 247+ 38A0 43 28 48 26                  dw      SOURCE_ID, STORE        // source-id !
 248+ 38A4              FInclude_Begin:                                 // begin
 249+ 38A4 3D 27 4B 37                  dw          ONE, BLOCK, BBUF    //      1 block b/buf
 249+ 38A8 67 27
 250+ 38AA 1C 26 4C 2D                  dw          TWO_DUP, BLANK      //      2dup blank
 251+ 38AE C6 25 60 25                  dw          SWAP, ONE_PLUS      //      swap 1+
 252+ 38B2 C6 25 7B 25                  dw          SWAP, CELL_MINUS    //      swap cell-
 253+ 38B6 43 28 3E 26                  dw          SOURCE_ID, FETCH    //      source-id @
 254+ 38BA C6 37                        dw          F_GETLINE           //      f_getline
 255+ 38BC                                                              // while
 256+ 38BC 8F 20                        dw      ZBRANCH
 257+ 38BE 14 00                        dw      FInclude_Repeat - $
 258+ 38C0 3D 27 D7 27                  dw          ONE, BLK, STORE     //      1 blk !
 258+ 38C4 48 26
 259+ 38C6 36 27 DD 27                  dw          ZERO, TO_IN, STORE  //      0 >in !
 259+ 38CA 48 26
 260+ 38CC 7C 31                        dw          INTERPRET           //      interpret
 261+ 38CE 82 20                        dw      BRANCH
 262+ 38D0 D4 FF                        dw      FInclude_Begin - $
 263+ 38D2              FInclude_Repeat:                                // repeat
 264+ 38D2 43 28 3E 26                  dw      SOURCE_ID, FETCH        // source-id @
 265+ 38D6 36 27 43 28                  dw      ZERO, SOURCE_ID, STORE  // 0 source-id !
 265+ 38DA 48 26
 266+ 38DC 98 23                        dw      F_CLOSE                 // f_close
 267+ 38DE 3D 20 2A 00                  dw      LIT, 42, QERROR         // 42 ?error
 267+ 38E2 97 2A
 268+ 38E4 09 25 09 25                  dw      R_TO, R_TO, R_TO        // r> r> r>
 268+ 38E8 09 25
 269+ 38EA CD 25 43 28                  dw      DUP, SOURCE_ID, STORE   // dup source-id !
 269+ 38EE 48 26
 270+ 38F0                                                              // if
 271+ 38F0 8F 20                        dw      ZBRANCH
 272+ 38F2 12 00                        dw      FInclude_Else_2 - $
 273+ 38F4 43 28 3E 26                  dw          SOURCE_ID, FETCH    //      source-id @
 274+ 38F8 7D 23                        dw          F_SEEK              //      f_seek
 275+ 38FA 3D 20 2B 00                  dw          LIT, 43, QERROR     //      43, ?error
 275+ 38FE 97 2A
 276+ 3900                                                              // else
 277+ 3900 82 20                        dw      BRANCH
 278+ 3902 04 00                        dw      FInclude_Endif_2 - $
 279+ 3904              FInclude_Else_2:
 280+ 3904 09 26                        dw          TWO_DROP            //      2drop
 281+ 3906              FInclude_Endif_2:                               // endif
 282+ 3906 09 25 DD 27                  dw      R_TO, TO_IN, STORE      // r> >in !
 282+ 390A 48 26
 283+ 390C 09 25 D7 27                  dw      R_TO, BLK, STORE        // r> blk !
 283+ 3910 48 26
 284+ 3912 F4 24                        dw      EXIT                    // ;
 285+ 3914
 286+ 3914              //  ______________________________________________________________________
 287+ 3914              //
 288+ 3914              // open<         -- fh
 289+ 3914              // Open the following filename and return it file-handle
 290+ 3914              // Used in the form OPEN CCCC
 291+ 3914                              Colon_Def OPEN_FH, "OPEN<", is_normal
 291+ 3914             >                New_Def  OPEN_FH, "OPEN<", Enter_Ptr, is_normal ; ok
 291+ 3914             >
 291+ 3914             >Dict_Ptr        defl    $
 291+ 3914             >
 291+ 3914             >//              ______________________________________________________________________
 291+ 3914             >//              Heap part
 291+ 3914             >
 291+ 3914             >
 291+ 3914             >                org     (Heap_Ptr & $1FFF) + $E000
 291+ EB0A             >
 291+ EB0A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 291+ EB0A             >Latest_Definition defl  Heap_Ptr
 291+ EB0A             >
 291+ EB0A             >                // dummy db directives used to calculate length of namec
 291+ EB0A 4F 50 45 4E >                db      "OPEN<"
 291+ EB0E 3C          >
 291+ EB0F             >len_NFA         defl    $ - temp_NFA
 291+ EB0F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 291+ EB0A             >
 291+ EB0A 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 291+ EB0B 4F 50 45 4E >                db      "OPEN<"               // name string in 7-bit ascii, but
 291+ EB0F 3C          >
 291+ EB10             >                org     $-1                 // alter last byte of Name just above to set
 291+ EB0F BC          >                db      {b $} | END_BIT     // msb as name end
 291+ EB10             >
 291+ EB10 FC 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 291+ EB12             >Prev_Ptr        defl    Heap_Ptr
 291+ EB12             >
 291+ EB12             >mirror_Ptr      defl    $
 291+ EB12             >
 291+ EB12 16 39       >                dw      Dict_Ptr + 2        // xt
 291+ EB14             >Heap_Ptr        defl    $ - $E000           // save current HP
 291+ EB14             >
 291+ EB14             >Current_HP      defl  $ - $E000             // used to set HP once!
 291+ EB14             >
 291+ EB14             >//              ______________________________________________________________________
 291+ EB14             >//              Dictionary part
 291+ EB14             >
 291+ EB14             >                org     Dict_Ptr
 291+ 3914             >
 291+ 3914 12 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 291+ 3916             >
 291+ 3916             >OPEN_FH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 291+ 3916 CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 291+ 3919             >
 291+ 3919             >
 291+ 3919             >                endif           ; ok        // for other definitions it "points" the correct handler
 291+ 3919             >                // Use of "; ok" to suppress "warning[fwdref]"
 291+ 3919             >
 291+ 3919             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 292+ 3919 59 27                        dw      BL
 293+ 391B 79 2D D3 2B                  dw      WORD, COUNT, OVER       // bl word count over
 293+ 391F A9 25
 294+ 3921 47 25 36 27                  dw      PLUS, ZERO, SWAP, STORE // + 0 swap !
 294+ 3925 C6 25 48 26
 295+ 3929 6A 2D 3D 27                  dw      PAD, ONE, F_OPEN        // pad 1 f_open
 295+ 392D F9 23
 296+ 392F 3D 20 2B 00                  dw      LIT, 43                 // 43
 297+ 3933 97 2A                        dw      QERROR                  // ?error
 298+ 3935 F4 24                        dw      EXIT                    // ;
 299+ 3937
 300+ 3937              //  ______________________________________________________________________
 301+ 3937              //
 302+ 3937              // use          -- cccc
 303+ 3937              // Include the following filename
 304+ 3937                              Colon_Def USE, "USE", is_normal
 304+ 3937             >                New_Def  USE, "USE", Enter_Ptr, is_normal ; ok
 304+ 3937             >
 304+ 3937             >Dict_Ptr        defl    $
 304+ 3937             >
 304+ 3937             >//              ______________________________________________________________________
 304+ 3937             >//              Heap part
 304+ 3937             >
 304+ 3937             >
 304+ 3937             >                org     (Heap_Ptr & $1FFF) + $E000
 304+ EB14             >
 304+ EB14             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 304+ EB14             >Latest_Definition defl  Heap_Ptr
 304+ EB14             >
 304+ EB14             >                // dummy db directives used to calculate length of namec
 304+ EB14 55 53 45    >                db      "USE"
 304+ EB17             >len_NFA         defl    $ - temp_NFA
 304+ EB17             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 304+ EB14             >
 304+ EB14 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 304+ EB15 55 53 45    >                db      "USE"               // name string in 7-bit ascii, but
 304+ EB18             >                org     $-1                 // alter last byte of Name just above to set
 304+ EB17 C5          >                db      {b $} | END_BIT     // msb as name end
 304+ EB18             >
 304+ EB18 0A 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 304+ EB1A             >Prev_Ptr        defl    Heap_Ptr
 304+ EB1A             >
 304+ EB1A             >mirror_Ptr      defl    $
 304+ EB1A             >
 304+ EB1A 39 39       >                dw      Dict_Ptr + 2        // xt
 304+ EB1C             >Heap_Ptr        defl    $ - $E000           // save current HP
 304+ EB1C             >
 304+ EB1C             >Current_HP      defl  $ - $E000             // used to set HP once!
 304+ EB1C             >
 304+ EB1C             >//              ______________________________________________________________________
 304+ EB1C             >//              Dictionary part
 304+ EB1C             >
 304+ EB1C             >                org     Dict_Ptr
 304+ 3937             >
 304+ 3937 1A 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 304+ 3939             >
 304+ 3939             >USE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 304+ 3939 CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 304+ 393C             >
 304+ 393C             >
 304+ 393C             >                endif           ; ok        // for other definitions it "points" the correct handler
 304+ 393C             >                // Use of "; ok" to suppress "warning[fwdref]"
 304+ 393C             >
 304+ 393C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 305+ 393C 16 39                        dw      OPEN_FH                 // open<
 306+ 393E 56 3F 3E 26                  dw      BLK_FH, FETCH           // blk-fh @
 307+ 3942 98 23 B2 25                  dw      F_CLOSE, DROP           // f_close drop
 308+ 3946 56 3F 48 26                  dw      BLK_FH, STORE           // blk-fh !
 309+ 394A F4 24                        dw      EXIT                    // ;
 310+ 394C
 311+ 394C              //  ______________________________________________________________________
 312+ 394C              //
 313+ 394C              // include      -- cccc
 314+ 394C              // Include the following filename
 315+ 394C                              Colon_Def INCLUDE, "INCLUDE", is_normal
 315+ 394C             >                New_Def  INCLUDE, "INCLUDE", Enter_Ptr, is_normal ; ok
 315+ 394C             >
 315+ 394C             >Dict_Ptr        defl    $
 315+ 394C             >
 315+ 394C             >//              ______________________________________________________________________
 315+ 394C             >//              Heap part
 315+ 394C             >
 315+ 394C             >
 315+ 394C             >                org     (Heap_Ptr & $1FFF) + $E000
 315+ EB1C             >
 315+ EB1C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 315+ EB1C             >Latest_Definition defl  Heap_Ptr
 315+ EB1C             >
 315+ EB1C             >                // dummy db directives used to calculate length of namec
 315+ EB1C 49 4E 43 4C >                db      "INCLUDE"
 315+ EB20 55 44 45    >
 315+ EB23             >len_NFA         defl    $ - temp_NFA
 315+ EB23             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 315+ EB1C             >
 315+ EB1C 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 315+ EB1D 49 4E 43 4C >                db      "INCLUDE"               // name string in 7-bit ascii, but
 315+ EB21 55 44 45    >
 315+ EB24             >                org     $-1                 // alter last byte of Name just above to set
 315+ EB23 C5          >                db      {b $} | END_BIT     // msb as name end
 315+ EB24             >
 315+ EB24 14 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 315+ EB26             >Prev_Ptr        defl    Heap_Ptr
 315+ EB26             >
 315+ EB26             >mirror_Ptr      defl    $
 315+ EB26             >
 315+ EB26 4E 39       >                dw      Dict_Ptr + 2        // xt
 315+ EB28             >Heap_Ptr        defl    $ - $E000           // save current HP
 315+ EB28             >
 315+ EB28             >Current_HP      defl  $ - $E000             // used to set HP once!
 315+ EB28             >
 315+ EB28             >//              ______________________________________________________________________
 315+ EB28             >//              Dictionary part
 315+ EB28             >
 315+ EB28             >                org     Dict_Ptr
 315+ 394C             >
 315+ 394C 26 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 315+ 394E             >
 315+ 394E             >INCLUDE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 315+ 394E CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 315+ 3951             >
 315+ 3951             >
 315+ 3951             >                endif           ; ok        // for other definitions it "points" the correct handler
 315+ 3951             >                // Use of "; ok" to suppress "warning[fwdref]"
 315+ 3951             >
 315+ 3951             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 316+ 3951 16 39                        dw      OPEN_FH                 // open
 317+ 3953 CD 25 5F 38                  dw      DUP, F_INCLUDE          // dup f_include
 318+ 3957 98 23 B2 25                  dw      F_CLOSE, DROP           // f_close drop
 319+ 395B F4 24                        dw      EXIT                    // ;
 320+ 395D
 321+ 395D              //  ______________________________________________________________________
 322+ 395D              //
 323+ 395D              // needs
 324+ 395D              // check for cccc exists in vocabulary
 325+ 395D              // if it doesn't then  INCLUDE  inc/cccc.F
 326+ 395D
 327+ 395D              // temp filename cccc.f as counted string zero-padded
 328+ 395D                              New_Def NEEDS_W,   "NEEDS-W", Create_Ptr, is_normal
 328+ 395D             >
 328+ 395D             >Dict_Ptr        defl    $
 328+ 395D             >
 328+ 395D             >//              ______________________________________________________________________
 328+ 395D             >//              Heap part
 328+ 395D             >
 328+ 395D             >
 328+ 395D             >                org     (Heap_Ptr & $1FFF) + $E000
 328+ EB28             >
 328+ EB28             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 328+ EB28             >Latest_Definition defl  Heap_Ptr
 328+ EB28             >
 328+ EB28             >                // dummy db directives used to calculate length of namec
 328+ EB28 4E 45 45 44 >                db      "NEEDS-W"
 328+ EB2C 53 2D 57    >
 328+ EB2F             >len_NFA         defl    $ - temp_NFA
 328+ EB2F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 328+ EB28             >
 328+ EB28 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 328+ EB29 4E 45 45 44 >                db      "NEEDS-W"               // name string in 7-bit ascii, but
 328+ EB2D 53 2D 57    >
 328+ EB30             >                org     $-1                 // alter last byte of Name just above to set
 328+ EB2F D7          >                db      {b $} | END_BIT     // msb as name end
 328+ EB30             >
 328+ EB30 1C 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 328+ EB32             >Prev_Ptr        defl    Heap_Ptr
 328+ EB32             >
 328+ EB32             >mirror_Ptr      defl    $
 328+ EB32             >
 328+ EB32 5F 39       >                dw      Dict_Ptr + 2        // xt
 328+ EB34             >Heap_Ptr        defl    $ - $E000           // save current HP
 328+ EB34             >
 328+ EB34             >Current_HP      defl  $ - $E000             // used to set HP once!
 328+ EB34             >
 328+ EB34             >//              ______________________________________________________________________
 328+ EB34             >//              Dictionary part
 328+ EB34             >
 328+ EB34             >                org     Dict_Ptr
 328+ 395D             >
 328+ 395D 32 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 328+ 395F             >
 328+ 395F             >NEEDS_W:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 328+ 395F CD C0 30    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 328+ 3962             >
 328+ 3962             >
 328+ 3962             >                endif           ; ok        // for other definitions it "points" the correct handler
 328+ 3962             >                // Use of "; ok" to suppress "warning[fwdref]"
 328+ 3962             >
 328+ 3962             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 329+ 3962 00 00 00...                  ds      35                      // 32 + .f + 0x00 = len 35
 330+ 3985              // temp complete path+filename
 331+ 3985                              New_Def NEEDS_FN,  "NEEDS-FN", Create_Ptr, is_normal
 331+ 3985             >
 331+ 3985             >Dict_Ptr        defl    $
 331+ 3985             >
 331+ 3985             >//              ______________________________________________________________________
 331+ 3985             >//              Heap part
 331+ 3985             >
 331+ 3985             >
 331+ 3985             >                org     (Heap_Ptr & $1FFF) + $E000
 331+ EB34             >
 331+ EB34             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 331+ EB34             >Latest_Definition defl  Heap_Ptr
 331+ EB34             >
 331+ EB34             >                // dummy db directives used to calculate length of namec
 331+ EB34 4E 45 45 44 >                db      "NEEDS-FN"
 331+ EB38 53 2D 46 4E >
 331+ EB3C             >len_NFA         defl    $ - temp_NFA
 331+ EB3C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 331+ EB34             >
 331+ EB34 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 331+ EB35 4E 45 45 44 >                db      "NEEDS-FN"               // name string in 7-bit ascii, but
 331+ EB39 53 2D 46 4E >
 331+ EB3D             >                org     $-1                 // alter last byte of Name just above to set
 331+ EB3C CE          >                db      {b $} | END_BIT     // msb as name end
 331+ EB3D             >
 331+ EB3D 28 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 331+ EB3F             >Prev_Ptr        defl    Heap_Ptr
 331+ EB3F             >
 331+ EB3F             >mirror_Ptr      defl    $
 331+ EB3F             >
 331+ EB3F 87 39       >                dw      Dict_Ptr + 2        // xt
 331+ EB41             >Heap_Ptr        defl    $ - $E000           // save current HP
 331+ EB41             >
 331+ EB41             >Current_HP      defl  $ - $E000             // used to set HP once!
 331+ EB41             >
 331+ EB41             >//              ______________________________________________________________________
 331+ EB41             >//              Dictionary part
 331+ EB41             >
 331+ EB41             >                org     Dict_Ptr
 331+ 3985             >
 331+ 3985 3F 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 331+ 3987             >
 331+ 3987             >NEEDS_FN:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 331+ 3987 CD C0 30    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 331+ 398A             >
 331+ 398A             >
 331+ 398A             >                endif           ; ok        // for other definitions it "points" the correct handler
 331+ 398A             >                // Use of "; ok" to suppress "warning[fwdref]"
 331+ 398A             >
 331+ 398A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 332+ 398A 00 00 00...                  ds      40
 333+ 39B2              // constant path
 334+ 39B2                              New_Def NEEDS_INC,  "NEEDS-INC", Create_Ptr, is_normal
 334+ 39B2             >
 334+ 39B2             >Dict_Ptr        defl    $
 334+ 39B2             >
 334+ 39B2             >//              ______________________________________________________________________
 334+ 39B2             >//              Heap part
 334+ 39B2             >
 334+ 39B2             >
 334+ 39B2             >                org     (Heap_Ptr & $1FFF) + $E000
 334+ EB41             >
 334+ EB41             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 334+ EB41             >Latest_Definition defl  Heap_Ptr
 334+ EB41             >
 334+ EB41             >                // dummy db directives used to calculate length of namec
 334+ EB41 4E 45 45 44 >                db      "NEEDS-INC"
 334+ EB45 53 2D 49 4E >
 334+ EB49 43          >
 334+ EB4A             >len_NFA         defl    $ - temp_NFA
 334+ EB4A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 334+ EB41             >
 334+ EB41 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 334+ EB42 4E 45 45 44 >                db      "NEEDS-INC"               // name string in 7-bit ascii, but
 334+ EB46 53 2D 49 4E >
 334+ EB4A 43          >
 334+ EB4B             >                org     $-1                 // alter last byte of Name just above to set
 334+ EB4A C3          >                db      {b $} | END_BIT     // msb as name end
 334+ EB4B             >
 334+ EB4B 34 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 334+ EB4D             >Prev_Ptr        defl    Heap_Ptr
 334+ EB4D             >
 334+ EB4D             >mirror_Ptr      defl    $
 334+ EB4D             >
 334+ EB4D B4 39       >                dw      Dict_Ptr + 2        // xt
 334+ EB4F             >Heap_Ptr        defl    $ - $E000           // save current HP
 334+ EB4F             >
 334+ EB4F             >Current_HP      defl  $ - $E000             // used to set HP once!
 334+ EB4F             >
 334+ EB4F             >//              ______________________________________________________________________
 334+ EB4F             >//              Dictionary part
 334+ EB4F             >
 334+ EB4F             >                org     Dict_Ptr
 334+ 39B2             >
 334+ 39B2 4D 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 334+ 39B4             >
 334+ 39B4             >NEEDS_INC:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 334+ 39B4 CD C0 30    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 334+ 39B7             >
 334+ 39B7             >
 334+ 39B7             >                endif           ; ok        // for other definitions it "points" the correct handler
 334+ 39B7             >                // Use of "; ok" to suppress "warning[fwdref]"
 334+ 39B7             >
 334+ 39B7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 335+ 39B7 04 69 6E 63                  db      4, "inc/", 0
 335+ 39BB 2F 00
 336+ 39BD                              New_Def NEEDS_LIB,  "NEEDS-LIB", Create_Ptr, is_normal
 336+ 39BD             >
 336+ 39BD             >Dict_Ptr        defl    $
 336+ 39BD             >
 336+ 39BD             >//              ______________________________________________________________________
 336+ 39BD             >//              Heap part
 336+ 39BD             >
 336+ 39BD             >
 336+ 39BD             >                org     (Heap_Ptr & $1FFF) + $E000
 336+ EB4F             >
 336+ EB4F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 336+ EB4F             >Latest_Definition defl  Heap_Ptr
 336+ EB4F             >
 336+ EB4F             >                // dummy db directives used to calculate length of namec
 336+ EB4F 4E 45 45 44 >                db      "NEEDS-LIB"
 336+ EB53 53 2D 4C 49 >
 336+ EB57 42          >
 336+ EB58             >len_NFA         defl    $ - temp_NFA
 336+ EB58             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 336+ EB4F             >
 336+ EB4F 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 336+ EB50 4E 45 45 44 >                db      "NEEDS-LIB"               // name string in 7-bit ascii, but
 336+ EB54 53 2D 4C 49 >
 336+ EB58 42          >
 336+ EB59             >                org     $-1                 // alter last byte of Name just above to set
 336+ EB58 C2          >                db      {b $} | END_BIT     // msb as name end
 336+ EB59             >
 336+ EB59 41 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 336+ EB5B             >Prev_Ptr        defl    Heap_Ptr
 336+ EB5B             >
 336+ EB5B             >mirror_Ptr      defl    $
 336+ EB5B             >
 336+ EB5B BF 39       >                dw      Dict_Ptr + 2        // xt
 336+ EB5D             >Heap_Ptr        defl    $ - $E000           // save current HP
 336+ EB5D             >
 336+ EB5D             >Current_HP      defl  $ - $E000             // used to set HP once!
 336+ EB5D             >
 336+ EB5D             >//              ______________________________________________________________________
 336+ EB5D             >//              Dictionary part
 336+ EB5D             >
 336+ EB5D             >                org     Dict_Ptr
 336+ 39BD             >
 336+ 39BD 5B 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 336+ 39BF             >
 336+ 39BF             >NEEDS_LIB:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 336+ 39BF CD C0 30    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 336+ 39C2             >
 336+ 39C2             >
 336+ 39C2             >                endif           ; ok        // for other definitions it "points" the correct handler
 336+ 39C2             >                // Use of "; ok" to suppress "warning[fwdref]"
 336+ 39C2             >
 336+ 39C2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 337+ 39C2 04 6C 69 62                  db      4, "lib/", 0
 337+ 39C6 2F 00
 338+ 39C8
 339+ 39C8              // Concatenate path at a and filename and include it
 340+ 39C8              // No error is issued if filename doesn't exist.
 341+ 39C8                              Colon_Def NEEDS_SLASH, "NEEDS/", is_normal
 341+ 39C8             >                New_Def  NEEDS_SLASH, "NEEDS/", Enter_Ptr, is_normal ; ok
 341+ 39C8             >
 341+ 39C8             >Dict_Ptr        defl    $
 341+ 39C8             >
 341+ 39C8             >//              ______________________________________________________________________
 341+ 39C8             >//              Heap part
 341+ 39C8             >
 341+ 39C8             >
 341+ 39C8             >                org     (Heap_Ptr & $1FFF) + $E000
 341+ EB5D             >
 341+ EB5D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 341+ EB5D             >Latest_Definition defl  Heap_Ptr
 341+ EB5D             >
 341+ EB5D             >                // dummy db directives used to calculate length of namec
 341+ EB5D 4E 45 45 44 >                db      "NEEDS/"
 341+ EB61 53 2F       >
 341+ EB63             >len_NFA         defl    $ - temp_NFA
 341+ EB63             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 341+ EB5D             >
 341+ EB5D 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 341+ EB5E 4E 45 45 44 >                db      "NEEDS/"               // name string in 7-bit ascii, but
 341+ EB62 53 2F       >
 341+ EB64             >                org     $-1                 // alter last byte of Name just above to set
 341+ EB63 AF          >                db      {b $} | END_BIT     // msb as name end
 341+ EB64             >
 341+ EB64 4F 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 341+ EB66             >Prev_Ptr        defl    Heap_Ptr
 341+ EB66             >
 341+ EB66             >mirror_Ptr      defl    $
 341+ EB66             >
 341+ EB66 CA 39       >                dw      Dict_Ptr + 2        // xt
 341+ EB68             >Heap_Ptr        defl    $ - $E000           // save current HP
 341+ EB68             >
 341+ EB68             >Current_HP      defl  $ - $E000             // used to set HP once!
 341+ EB68             >
 341+ EB68             >//              ______________________________________________________________________
 341+ EB68             >//              Dictionary part
 341+ EB68             >
 341+ EB68             >                org     Dict_Ptr
 341+ 39C8             >
 341+ 39C8 66 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 341+ 39CA             >
 341+ 39CA             >NEEDS_SLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 341+ 39CA CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 341+ 39CD             >
 341+ 39CD             >
 341+ 39CD             >                endif           ; ok        // for other definitions it "points" the correct handler
 341+ 39CD             >                // Use of "; ok" to suppress "warning[fwdref]"
 341+ 39CD             >
 341+ 39CD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 342+ 39CD D3 2B BD 25                  dw      COUNT, TUCK             // n a n
 343+ 39D1 87 39 C6 25                  dw      NEEDS_FN, SWAP, CMOVE   // n        \ Path
 343+ 39D5 35 24
 344+ 39D7 87 39 47 25                  dw      NEEDS_FN, PLUS          // a1+n     \ Concat
 345+ 39DB 5F 39 60 25                  dw      NEEDS_W, ONE_PLUS, SWAP
 345+ 39DF C6 25
 346+ 39E1 3D 20 23 00                  dw      LIT, 35
 347+ 39E5 35 24                        dw      CMOVE
 348+ 39E7 87 39                        dw      NEEDS_FN
 349+ 39E9 6A 2D 3D 27                  dw      PAD, ONE, F_OPEN
 349+ 39ED F9 23
 350+ 39EF 19 25                        dw      ZEQUAL
 351+ 39F1 8F 20                        dw      ZBRANCH
 352+ 39F3 08 00                        dw      Needs_1 - $
 353+ 39F5 5F 38                        dw          F_INCLUDE
 354+ 39F7 82 20                        dw      BRANCH
 355+ 39F9 04 00                        dw      Needs_2 - $
 356+ 39FB              Needs_1:
 357+ 39FB              //              dw          NEEDS_W, COUNT, TYPE, SPACE
 358+ 39FB              //              dw          LIT, 43, MESSAGE
 359+ 39FB B2 25                        dw          DROP
 360+ 39FD              Needs_2:
 361+ 39FD F4 24                        dw      EXIT                    // ;
 362+ 39FF
 363+ 39FF
 364+ 39FF                              New_Def NDOM,   "NDOM", Create_Ptr, is_normal
 364+ 39FF             >
 364+ 39FF             >Dict_Ptr        defl    $
 364+ 39FF             >
 364+ 39FF             >//              ______________________________________________________________________
 364+ 39FF             >//              Heap part
 364+ 39FF             >
 364+ 39FF             >
 364+ 39FF             >                org     (Heap_Ptr & $1FFF) + $E000
 364+ EB68             >
 364+ EB68             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 364+ EB68             >Latest_Definition defl  Heap_Ptr
 364+ EB68             >
 364+ EB68             >                // dummy db directives used to calculate length of namec
 364+ EB68 4E 44 4F 4D >                db      "NDOM"
 364+ EB6C             >len_NFA         defl    $ - temp_NFA
 364+ EB6C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 364+ EB68             >
 364+ EB68 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 364+ EB69 4E 44 4F 4D >                db      "NDOM"               // name string in 7-bit ascii, but
 364+ EB6D             >                org     $-1                 // alter last byte of Name just above to set
 364+ EB6C CD          >                db      {b $} | END_BIT     // msb as name end
 364+ EB6D             >
 364+ EB6D 5D 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 364+ EB6F             >Prev_Ptr        defl    Heap_Ptr
 364+ EB6F             >
 364+ EB6F             >mirror_Ptr      defl    $
 364+ EB6F             >
 364+ EB6F 01 3A       >                dw      Dict_Ptr + 2        // xt
 364+ EB71             >Heap_Ptr        defl    $ - $E000           // save current HP
 364+ EB71             >
 364+ EB71             >Current_HP      defl  $ - $E000             // used to set HP once!
 364+ EB71             >
 364+ EB71             >//              ______________________________________________________________________
 364+ EB71             >//              Dictionary part
 364+ EB71             >
 364+ EB71             >                org     Dict_Ptr
 364+ 39FF             >
 364+ 39FF 6F 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 364+ 3A01             >
 364+ 3A01             >NDOM:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 364+ 3A01 CD C0 30    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 364+ 3A04             >
 364+ 3A04             >
 364+ 3A04             >                endif           ; ok        // for other definitions it "points" the correct handler
 364+ 3A04             >                // Use of "; ok" to suppress "warning[fwdref]"
 364+ 3A04             >
 364+ 3A04             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 365+ 3A04              //              db $3A, $3F, $2F, $2A, $7C, $5C, $3C, $3E, $22
 366+ 3A04 3A 3F 2F 2A                  db ':?/*|\<>"'
 366+ 3A08 7C 5C 3C 3E
 366+ 3A0C 22
 367+ 3A0D 00                           db 0
 368+ 3A0E
 369+ 3A0E                              New_Def NCDM,   "NCDM", Create_Ptr, is_normal
 369+ 3A0E             >
 369+ 3A0E             >Dict_Ptr        defl    $
 369+ 3A0E             >
 369+ 3A0E             >//              ______________________________________________________________________
 369+ 3A0E             >//              Heap part
 369+ 3A0E             >
 369+ 3A0E             >
 369+ 3A0E             >                org     (Heap_Ptr & $1FFF) + $E000
 369+ EB71             >
 369+ EB71             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 369+ EB71             >Latest_Definition defl  Heap_Ptr
 369+ EB71             >
 369+ EB71             >                // dummy db directives used to calculate length of namec
 369+ EB71 4E 43 44 4D >                db      "NCDM"
 369+ EB75             >len_NFA         defl    $ - temp_NFA
 369+ EB75             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 369+ EB71             >
 369+ EB71 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 369+ EB72 4E 43 44 4D >                db      "NCDM"               // name string in 7-bit ascii, but
 369+ EB76             >                org     $-1                 // alter last byte of Name just above to set
 369+ EB75 CD          >                db      {b $} | END_BIT     // msb as name end
 369+ EB76             >
 369+ EB76 68 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 369+ EB78             >Prev_Ptr        defl    Heap_Ptr
 369+ EB78             >
 369+ EB78             >mirror_Ptr      defl    $
 369+ EB78             >
 369+ EB78 10 3A       >                dw      Dict_Ptr + 2        // xt
 369+ EB7A             >Heap_Ptr        defl    $ - $E000           // save current HP
 369+ EB7A             >
 369+ EB7A             >Current_HP      defl  $ - $E000             // used to set HP once!
 369+ EB7A             >
 369+ EB7A             >//              ______________________________________________________________________
 369+ EB7A             >//              Dictionary part
 369+ EB7A             >
 369+ EB7A             >                org     Dict_Ptr
 369+ 3A0E             >
 369+ 3A0E 78 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 369+ 3A10             >
 369+ 3A10             >NCDM:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 369+ 3A10 CD C0 30    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 369+ 3A13             >
 369+ 3A13             >
 369+ 3A13             >                endif           ; ok        // for other definitions it "points" the correct handler
 369+ 3A13             >                // Use of "; ok" to suppress "warning[fwdref]"
 369+ 3A13             >
 369+ 3A13             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 370+ 3A13              //              db $5F, $5E, $25, $26, $24, $5F, $7B, $7D, $7E
 371+ 3A13 5F 5E 25 26                  db '_^%&$_{}~'
 371+ 3A17 24 5F 7B 7D
 371+ 3A1B 7E
 372+ 3A1C 00                           db 0
 373+ 3A1D
 374+ 3A1D              // Replace illegal character in filename using the map here above
 375+ 3A1D              // at the moment we need only  "
 376+ 3A1D                              Colon_Def NEEDS_CHECK, "MAP-FN", is_normal
 376+ 3A1D             >                New_Def  NEEDS_CHECK, "MAP-FN", Enter_Ptr, is_normal ; ok
 376+ 3A1D             >
 376+ 3A1D             >Dict_Ptr        defl    $
 376+ 3A1D             >
 376+ 3A1D             >//              ______________________________________________________________________
 376+ 3A1D             >//              Heap part
 376+ 3A1D             >
 376+ 3A1D             >
 376+ 3A1D             >                org     (Heap_Ptr & $1FFF) + $E000
 376+ EB7A             >
 376+ EB7A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 376+ EB7A             >Latest_Definition defl  Heap_Ptr
 376+ EB7A             >
 376+ EB7A             >                // dummy db directives used to calculate length of namec
 376+ EB7A 4D 41 50 2D >                db      "MAP-FN"
 376+ EB7E 46 4E       >
 376+ EB80             >len_NFA         defl    $ - temp_NFA
 376+ EB80             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 376+ EB7A             >
 376+ EB7A 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 376+ EB7B 4D 41 50 2D >                db      "MAP-FN"               // name string in 7-bit ascii, but
 376+ EB7F 46 4E       >
 376+ EB81             >                org     $-1                 // alter last byte of Name just above to set
 376+ EB80 CE          >                db      {b $} | END_BIT     // msb as name end
 376+ EB81             >
 376+ EB81 71 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 376+ EB83             >Prev_Ptr        defl    Heap_Ptr
 376+ EB83             >
 376+ EB83             >mirror_Ptr      defl    $
 376+ EB83             >
 376+ EB83 1F 3A       >                dw      Dict_Ptr + 2        // xt
 376+ EB85             >Heap_Ptr        defl    $ - $E000           // save current HP
 376+ EB85             >
 376+ EB85             >Current_HP      defl  $ - $E000             // used to set HP once!
 376+ EB85             >
 376+ EB85             >//              ______________________________________________________________________
 376+ EB85             >//              Dictionary part
 376+ EB85             >
 376+ EB85             >                org     Dict_Ptr
 376+ 3A1D             >
 376+ 3A1D 83 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 376+ 3A1F             >
 376+ 3A1F             >NEEDS_CHECK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 376+ 3A1F CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 376+ 3A22             >
 376+ 3A22             >
 376+ 3A22             >                endif           ; ok        // for other definitions it "points" the correct handler
 376+ 3A22             >                // Use of "; ok" to suppress "warning[fwdref]"
 376+ 3A22             >
 376+ 3A22             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 377+ 3A22 D3 2B E0 2B                  dw      COUNT, BOUNDS
 378+ 3A26 CE 20                        dw      C_DO
 379+ 3A28              Needs_3:
 380+ 3A28 10 3A 01 3A                  dw          NCDM, NDOM, LIT, 10
 380+ 3A2C 3D 20 0A 00
 381+ 3A30 D4 20 53 26                  dw          I, CFETCH
 382+ 3A34 F5 21                        dw          C_MAP
 383+ 3A36 D4 20 5C 26                  dw          I, CSTORE
 384+ 3A3A              Needs_4:
 385+ 3A3A 7A 20                        dw      C_LOOP
 386+ 3A3C EC FF                        dw      Needs_3 - $
 387+ 3A3E F4 24                        dw      EXIT
 388+ 3A40
 389+ 3A40
 390+ 3A40              // include  "path/cccc.f" if cccc is not defined
 391+ 3A40              // filename cccc.f is temporary stored at NEEDS-W
 392+ 3A40                              Colon_Def NEEDS_PATH, "NEEDS-F", is_normal
 392+ 3A40             >                New_Def  NEEDS_PATH, "NEEDS-F", Enter_Ptr, is_normal ; ok
 392+ 3A40             >
 392+ 3A40             >Dict_Ptr        defl    $
 392+ 3A40             >
 392+ 3A40             >//              ______________________________________________________________________
 392+ 3A40             >//              Heap part
 392+ 3A40             >
 392+ 3A40             >
 392+ 3A40             >                org     (Heap_Ptr & $1FFF) + $E000
 392+ EB85             >
 392+ EB85             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 392+ EB85             >Latest_Definition defl  Heap_Ptr
 392+ EB85             >
 392+ EB85             >                // dummy db directives used to calculate length of namec
 392+ EB85 4E 45 45 44 >                db      "NEEDS-F"
 392+ EB89 53 2D 46    >
 392+ EB8C             >len_NFA         defl    $ - temp_NFA
 392+ EB8C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 392+ EB85             >
 392+ EB85 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 392+ EB86 4E 45 45 44 >                db      "NEEDS-F"               // name string in 7-bit ascii, but
 392+ EB8A 53 2D 46    >
 392+ EB8D             >                org     $-1                 // alter last byte of Name just above to set
 392+ EB8C C6          >                db      {b $} | END_BIT     // msb as name end
 392+ EB8D             >
 392+ EB8D 7A 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 392+ EB8F             >Prev_Ptr        defl    Heap_Ptr
 392+ EB8F             >
 392+ EB8F             >mirror_Ptr      defl    $
 392+ EB8F             >
 392+ EB8F 42 3A       >                dw      Dict_Ptr + 2        // xt
 392+ EB91             >Heap_Ptr        defl    $ - $E000           // save current HP
 392+ EB91             >
 392+ EB91             >Current_HP      defl  $ - $E000             // used to set HP once!
 392+ EB91             >
 392+ EB91             >//              ______________________________________________________________________
 392+ EB91             >//              Dictionary part
 392+ EB91             >
 392+ EB91             >                org     Dict_Ptr
 392+ 3A40             >
 392+ 3A40 8F 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 392+ 3A42             >
 392+ 3A42             >NEEDS_PATH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 392+ 3A42 CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 392+ 3A45             >
 392+ 3A45             >
 392+ 3A45             >                endif           ; ok        // for other definitions it "points" the correct handler
 392+ 3A45             >                // Use of "; ok" to suppress "warning[fwdref]"
 392+ 3A45             >
 392+ 3A45             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 393+ 3A45 B9 2F                        dw      LFIND
 394+ 3A47 8F 20                        dw      ZBRANCH
 395+ 3A49 0A 00                        dw      Needs_5 - $
 396+ 3A4B
 397+ 3A4B B2 25 09 26                  dw          DROP, TWO_DROP
 398+ 3A4F 82 20                        dw      BRANCH
 399+ 3A51 2C 00                        dw      Needs_6 - $
 400+ 3A53              Needs_5:
 401+ 3A53 5F 39                        dw          NEEDS_W
 402+ 3A55 3D 20 23 00                  dw          LIT, 35
 403+ 3A59 41 2D                        dw          ERASE                   // a
 404+ 3A5B 5B 28 53 26                  dw          HERE, CFETCH, ONE_PLUS  // a n
 404+ 3A5F 60 25
 405+ 3A61 5B 28 A9 25                  dw          HERE, OVER              // a n here n
 406+ 3A65 5F 39 C6 25                  dw          NEEDS_W, SWAP, CMOVE    // a n
 406+ 3A69 35 24
 407+ 3A6B 5F 39 1F 3A                  dw          NEEDS_W, NEEDS_CHECK
 408+ 3A6F 5F 39 47 25                  dw          NEEDS_W, PLUS           // a a1+1
 409+ 3A73 3D 20 2E 66                  dw          LIT, $662E              // a a1+1 ".F"
 410+ 3A77 C6 25 48 26                  dw          SWAP, STORE             // a
 411+ 3A7B CA 39                        dw          NEEDS_SLASH
 412+ 3A7D              Needs_6:
 413+ 3A7D F4 24                        dw      EXIT
 414+ 3A7F
 415+ 3A7F
 416+ 3A7F              // check for cccc exists in vocabulary
 417+ 3A7F              // if it doesn't then  INCLUDE  inc/cccc.F
 418+ 3A7F              // search in inc subdirectory
 419+ 3A7F                              Colon_Def NEEDS, "NEEDS", is_normal
 419+ 3A7F             >                New_Def  NEEDS, "NEEDS", Enter_Ptr, is_normal ; ok
 419+ 3A7F             >
 419+ 3A7F             >Dict_Ptr        defl    $
 419+ 3A7F             >
 419+ 3A7F             >//              ______________________________________________________________________
 419+ 3A7F             >//              Heap part
 419+ 3A7F             >
 419+ 3A7F             >
 419+ 3A7F             >                org     (Heap_Ptr & $1FFF) + $E000
 419+ EB91             >
 419+ EB91             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 419+ EB91             >Latest_Definition defl  Heap_Ptr
 419+ EB91             >
 419+ EB91             >                // dummy db directives used to calculate length of namec
 419+ EB91 4E 45 45 44 >                db      "NEEDS"
 419+ EB95 53          >
 419+ EB96             >len_NFA         defl    $ - temp_NFA
 419+ EB96             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 419+ EB91             >
 419+ EB91 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 419+ EB92 4E 45 45 44 >                db      "NEEDS"               // name string in 7-bit ascii, but
 419+ EB96 53          >
 419+ EB97             >                org     $-1                 // alter last byte of Name just above to set
 419+ EB96 D3          >                db      {b $} | END_BIT     // msb as name end
 419+ EB97             >
 419+ EB97 85 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 419+ EB99             >Prev_Ptr        defl    Heap_Ptr
 419+ EB99             >
 419+ EB99             >mirror_Ptr      defl    $
 419+ EB99             >
 419+ EB99 81 3A       >                dw      Dict_Ptr + 2        // xt
 419+ EB9B             >Heap_Ptr        defl    $ - $E000           // save current HP
 419+ EB9B             >
 419+ EB9B             >Current_HP      defl  $ - $E000             // used to set HP once!
 419+ EB9B             >
 419+ EB9B             >//              ______________________________________________________________________
 419+ EB9B             >//              Dictionary part
 419+ EB9B             >
 419+ EB9B             >                org     Dict_Ptr
 419+ 3A7F             >
 419+ 3A7F 99 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 419+ 3A81             >
 419+ 3A81             >NEEDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 419+ 3A81 CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 419+ 3A84             >
 419+ 3A84             >
 419+ 3A84             >                endif           ; ok        // for other definitions it "points" the correct handler
 419+ 3A84             >                // Use of "; ok" to suppress "warning[fwdref]"
 419+ 3A84             >
 419+ 3A84             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 420+ 3A84 DD 27 3E 26                  dw      TO_IN, FETCH
 421+ 3A88 CD 25                        dw      DUP
 422+ 3A8A B4 39 42 3A                  dw      NEEDS_INC, NEEDS_PATH
 423+ 3A8E DD 27 48 26                  dw      TO_IN, STORE
 424+ 3A92 BF 39 42 3A                  dw      NEEDS_LIB, NEEDS_PATH
 425+ 3A96 DD 27 48 26                  dw      TO_IN, STORE
 426+ 3A9A B9 2F                        dw      LFIND
 427+ 3A9C 8F 20                        dw      ZBRANCH
 428+ 3A9E 08 00                        dw      Needs_10 - $
 429+ 3AA0 09 26                        dw          TWO_DROP
 430+ 3AA2 82 20                        dw      BRANCH
 431+ 3AA4 10 00                        dw      Needs_11 - $
 432+ 3AA6              Needs_10:
 433+ 3AA6 5F 39 D3 2B                  dw      NEEDS_W, COUNT, TYPE, SPACE
 433+ 3AAA 27 2C 2C 29
 434+ 3AAE 3D 20 2B 00                  dw      LIT, 43, MESSAGE
 434+ 3AB2 8E 35
 435+ 3AB4              Needs_11:
 436+ 3AB4 F4 24                        dw      EXIT
 437+ 3AB6
 438+ 3AB6
 439+ 3AB6              //  ______________________________________________________________________
 440+ 3AB6              //
 441+ 3AB6              // load         n --
 442+ 3AB6                              Colon_Def LOAD, "LOAD", is_normal
 442+ 3AB6             >                New_Def  LOAD, "LOAD", Enter_Ptr, is_normal ; ok
 442+ 3AB6             >
 442+ 3AB6             >Dict_Ptr        defl    $
 442+ 3AB6             >
 442+ 3AB6             >//              ______________________________________________________________________
 442+ 3AB6             >//              Heap part
 442+ 3AB6             >
 442+ 3AB6             >
 442+ 3AB6             >                org     (Heap_Ptr & $1FFF) + $E000
 442+ EB9B             >
 442+ EB9B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 442+ EB9B             >Latest_Definition defl  Heap_Ptr
 442+ EB9B             >
 442+ EB9B             >                // dummy db directives used to calculate length of namec
 442+ EB9B 4C 4F 41 44 >                db      "LOAD"
 442+ EB9F             >len_NFA         defl    $ - temp_NFA
 442+ EB9F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 442+ EB9B             >
 442+ EB9B 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 442+ EB9C 4C 4F 41 44 >                db      "LOAD"               // name string in 7-bit ascii, but
 442+ EBA0             >                org     $-1                 // alter last byte of Name just above to set
 442+ EB9F C4          >                db      {b $} | END_BIT     // msb as name end
 442+ EBA0             >
 442+ EBA0 91 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 442+ EBA2             >Prev_Ptr        defl    Heap_Ptr
 442+ EBA2             >
 442+ EBA2             >mirror_Ptr      defl    $
 442+ EBA2             >
 442+ EBA2 B8 3A       >                dw      Dict_Ptr + 2        // xt
 442+ EBA4             >Heap_Ptr        defl    $ - $E000           // save current HP
 442+ EBA4             >
 442+ EBA4             >Current_HP      defl  $ - $E000             // used to set HP once!
 442+ EBA4             >
 442+ EBA4             >//              ______________________________________________________________________
 442+ EBA4             >//              Dictionary part
 442+ EBA4             >
 442+ EBA4             >                org     Dict_Ptr
 442+ 3AB6             >
 442+ 3AB6 A2 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 442+ 3AB8             >
 442+ 3AB8             >LOAD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 442+ 3AB8 CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 442+ 3ABB             >
 442+ 3ABB             >
 442+ 3ABB             >                endif           ; ok        // for other definitions it "points" the correct handler
 442+ 3ABB             >                // Use of "; ok" to suppress "warning[fwdref]"
 442+ 3ABB             >
 442+ 3ABB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 443+ 3ABB D7 27 3E 26                  dw      BLK, FETCH, TO_R        // blk @ >r
 443+ 3ABF FE 24
 444+ 3AC1 DD 27 3E 26                  dw      TO_IN, FETCH, TO_R      // >in @ >r
 444+ 3AC5 FE 24
 445+ 3AC7
 446+ 3AC7 36 27 DD 27                  dw      ZERO, TO_IN, STORE      // 0 >in !
 446+ 3ACB 48 26
 447+ 3ACD 6E 27 1A 35                  dw      BSCR, MUL, BLK, STORE   // b/scr * blk !
 447+ 3AD1 D7 27 48 26
 448+ 3AD5 7C 31                        dw      INTERPRET               // interpret
 449+ 3AD7
 450+ 3AD7 09 25 DD 27                  dw      R_TO, TO_IN, STORE      // r> >in !
 450+ 3ADB 48 26
 451+ 3ADD 09 25 D7 27                  dw      R_TO, BLK, STORE        // r> blk !
 451+ 3AE1 48 26
 452+ 3AE3 F4 24                        dw      EXIT                    // ;
 453+ 3AE5
 454+ 3AE5              //  ______________________________________________________________________
 455+ 3AE5              //
 456+ 3AE5              // -->          --
 457+ 3AE5                              Colon_Def LOAD_NEXT, "-->", is_immediate
 457+ 3AE5             >                New_Def  LOAD_NEXT, "-->", Enter_Ptr, is_immediate ; ok
 457+ 3AE5             >
 457+ 3AE5             >Dict_Ptr        defl    $
 457+ 3AE5             >
 457+ 3AE5             >//              ______________________________________________________________________
 457+ 3AE5             >//              Heap part
 457+ 3AE5             >
 457+ 3AE5             >
 457+ 3AE5             >                org     (Heap_Ptr & $1FFF) + $E000
 457+ EBA4             >
 457+ EBA4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 457+ EBA4             >Latest_Definition defl  Heap_Ptr
 457+ EBA4             >
 457+ EBA4             >                // dummy db directives used to calculate length of namec
 457+ EBA4 2D 2D 3E    >                db      "-->"
 457+ EBA7             >len_NFA         defl    $ - temp_NFA
 457+ EBA7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 457+ EBA4             >
 457+ EBA4 C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 457+ EBA5 2D 2D 3E    >                db      "-->"               // name string in 7-bit ascii, but
 457+ EBA8             >                org     $-1                 // alter last byte of Name just above to set
 457+ EBA7 BE          >                db      {b $} | END_BIT     // msb as name end
 457+ EBA8             >
 457+ EBA8 9B 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 457+ EBAA             >Prev_Ptr        defl    Heap_Ptr
 457+ EBAA             >
 457+ EBAA             >mirror_Ptr      defl    $
 457+ EBAA             >
 457+ EBAA E7 3A       >                dw      Dict_Ptr + 2        // xt
 457+ EBAC             >Heap_Ptr        defl    $ - $E000           // save current HP
 457+ EBAC             >
 457+ EBAC             >Current_HP      defl  $ - $E000             // used to set HP once!
 457+ EBAC             >
 457+ EBAC             >//              ______________________________________________________________________
 457+ EBAC             >//              Dictionary part
 457+ EBAC             >
 457+ EBAC             >                org     Dict_Ptr
 457+ 3AE5             >
 457+ 3AE5 AA 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 457+ 3AE7             >
 457+ 3AE7             >LOAD_NEXT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 457+ 3AE7 CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 457+ 3AEA             >
 457+ 3AEA             >
 457+ 3AEA             >                endif           ; ok        // for other definitions it "points" the correct handler
 457+ 3AEA             >                // Use of "; ok" to suppress "warning[fwdref]"
 457+ 3AEA             >
 457+ 3AEA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 458+ 3AEA F4 2A                        dw      QLOADING                // ?loading
 459+ 3AEC 36 27 DD 27                  dw      ZERO, TO_IN, STORE      // 0 >in !
 459+ 3AF0 48 26
 460+ 3AF2 6E 27                        dw      BSCR                    // b/scr
 461+ 3AF4 D7 27 3E 26                  dw      BLK, FETCH              // blk @
 462+ 3AF8 A9 25                        dw      OVER                    // over
 463+ 3AFA 3F 35                        dw      MOD                     // mod
 464+ 3AFC 9A 28                        dw      SUBTRACT                // -
 465+ 3AFE D7 27 26 26                  dw      BLK, PLUSSTORE          // +!
 466+ 3B02 F4 24                        dw      EXIT                    // ;
 467+ 3B04
 468+ 3B04              //  ______________________________________________________________________
 469+ 3B04              //
 470+ 3B04              // '            -- xt
 471+ 3B04                              Colon_Def TICK, "'", is_normal
 471+ 3B04             >                New_Def  TICK, "'", Enter_Ptr, is_normal ; ok
 471+ 3B04             >
 471+ 3B04             >Dict_Ptr        defl    $
 471+ 3B04             >
 471+ 3B04             >//              ______________________________________________________________________
 471+ 3B04             >//              Heap part
 471+ 3B04             >
 471+ 3B04             >
 471+ 3B04             >                org     (Heap_Ptr & $1FFF) + $E000
 471+ EBAC             >
 471+ EBAC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 471+ EBAC             >Latest_Definition defl  Heap_Ptr
 471+ EBAC             >
 471+ EBAC             >                // dummy db directives used to calculate length of namec
 471+ EBAC 27          >                db      "'"
 471+ EBAD             >len_NFA         defl    $ - temp_NFA
 471+ EBAD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 471+ EBAC             >
 471+ EBAC 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 471+ EBAD 27          >                db      "'"               // name string in 7-bit ascii, but
 471+ EBAE             >                org     $-1                 // alter last byte of Name just above to set
 471+ EBAD A7          >                db      {b $} | END_BIT     // msb as name end
 471+ EBAE             >
 471+ EBAE A4 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 471+ EBB0             >Prev_Ptr        defl    Heap_Ptr
 471+ EBB0             >
 471+ EBB0             >mirror_Ptr      defl    $
 471+ EBB0             >
 471+ EBB0 06 3B       >                dw      Dict_Ptr + 2        // xt
 471+ EBB2             >Heap_Ptr        defl    $ - $E000           // save current HP
 471+ EBB2             >
 471+ EBB2             >Current_HP      defl  $ - $E000             // used to set HP once!
 471+ EBB2             >
 471+ EBB2             >//              ______________________________________________________________________
 471+ EBB2             >//              Dictionary part
 471+ EBB2             >
 471+ EBB2             >                org     Dict_Ptr
 471+ 3B04             >
 471+ 3B04 B0 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 471+ 3B06             >
 471+ 3B06             >TICK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 471+ 3B06 CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 471+ 3B09             >
 471+ 3B09             >
 471+ 3B09             >                endif           ; ok        // for other definitions it "points" the correct handler
 471+ 3B09             >                // Use of "; ok" to suppress "warning[fwdref]"
 471+ 3B09             >
 471+ 3B09             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 472+ 3B09 B9 2F                        dw      LFIND                   // -find
 473+ 3B0B 19 25                        dw      ZEQUAL                  // 0=
 474+ 3B0D 36 27 97 2A                  dw      ZERO, QERROR            // 0 ?error
 475+ 3B11 B2 25                        dw      DROP                    // drop
 476+ 3B13 F4 24                        dw      EXIT                    // ;
 477+ 3B15
 478+ 3B15              //  ______________________________________________________________________
 479+ 3B15              //
 480+ 3B15              // forget       -- cccc
 481+ 3B15                              Colon_Def FORGET, "FORGET", is_normal
 481+ 3B15             >                New_Def  FORGET, "FORGET", Enter_Ptr, is_normal ; ok
 481+ 3B15             >
 481+ 3B15             >Dict_Ptr        defl    $
 481+ 3B15             >
 481+ 3B15             >//              ______________________________________________________________________
 481+ 3B15             >//              Heap part
 481+ 3B15             >
 481+ 3B15             >
 481+ 3B15             >                org     (Heap_Ptr & $1FFF) + $E000
 481+ EBB2             >
 481+ EBB2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 481+ EBB2             >Latest_Definition defl  Heap_Ptr
 481+ EBB2             >
 481+ EBB2             >                // dummy db directives used to calculate length of namec
 481+ EBB2 46 4F 52 47 >                db      "FORGET"
 481+ EBB6 45 54       >
 481+ EBB8             >len_NFA         defl    $ - temp_NFA
 481+ EBB8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 481+ EBB2             >
 481+ EBB2 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 481+ EBB3 46 4F 52 47 >                db      "FORGET"               // name string in 7-bit ascii, but
 481+ EBB7 45 54       >
 481+ EBB9             >                org     $-1                 // alter last byte of Name just above to set
 481+ EBB8 D4          >                db      {b $} | END_BIT     // msb as name end
 481+ EBB9             >
 481+ EBB9 AC 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 481+ EBBB             >Prev_Ptr        defl    Heap_Ptr
 481+ EBBB             >
 481+ EBBB             >mirror_Ptr      defl    $
 481+ EBBB             >
 481+ EBBB 17 3B       >                dw      Dict_Ptr + 2        // xt
 481+ EBBD             >Heap_Ptr        defl    $ - $E000           // save current HP
 481+ EBBD             >
 481+ EBBD             >Current_HP      defl  $ - $E000             // used to set HP once!
 481+ EBBD             >
 481+ EBBD             >//              ______________________________________________________________________
 481+ EBBD             >//              Dictionary part
 481+ EBBD             >
 481+ EBBD             >                org     Dict_Ptr
 481+ 3B15             >
 481+ 3B15 BB 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 481+ 3B17             >
 481+ 3B17             >FORGET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 481+ 3B17 CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 481+ 3B1A             >
 481+ 3B1A             >
 481+ 3B1A             >                endif           ; ok        // for other definitions it "points" the correct handler
 481+ 3B1A             >                // Use of "; ok" to suppress "warning[fwdref]"
 481+ 3B1A             >
 481+ 3B1A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 482+ 3B1A FB 27 3E 26                  dw      CURRENT, FETCH          // current @
 483+ 3B1E F5 27 3E 26                  dw      CONTEXT, FETCH          // context @
 484+ 3B22 9A 28 3D 20                  dw      SUBTRACT, LIT, 23, QERROR // - 23 ?error
 484+ 3B26 17 00 97 2A
 485+ 3B2A 06 3B 16 2A                  dw      TICK, TO_BODY           // ' >body
 486+ 3B2E CD 25 AD 27                  dw      DUP, FENCE, FETCH       // dup fence @
 486+ 3B32 3E 26
 487+ 3B34 B1 28 3D 20                  dw      ULESS, LIT, 21, QERROR  // u< 21 ?error
 487+ 3B38 15 00 97 2A
 488+ 3B3C CD 25 4B 2A                  dw      DUP, NFA                // dup nfa
 489+ 3B40
 490+ 3B40                          //  dw      DUP
 491+ 3B40                          //  dw      LIT, $E000, LESS
 492+ 3B40                          //  dw      MMU7_FETCH, ONE, EQUALS
 493+ 3B40                          //  dw      OR_OP, NOT_OP
 494+ 3B40                          //  dw      ZBRANCH
 495+ 3B40                          //  dw      Forget_then - $
 496+ 3B40
 497+ 3B40 54 29 77 29                  dw      MMU7_FETCH, FROM_FAR
 498+ 3B44 CB 27 48 26                  dw      HP, STORE
 499+ 3B48 CD 25 40 2A                  dw      DUP, CFA, CELL_MINUS
 499+ 3B4C 7B 25
 500+ 3B4E              // Forget_then:
 501+ 3B4E B3 27 48 26                  dw      DP, STORE               // dp !
 502+ 3B52 56 2A 3E 26                  dw      LFA, FETCH              // lfa @
 503+ 3B56 F5 27 3E 26                  dw      CONTEXT, FETCH, STORE   // context @ !
 503+ 3B5A 48 26
 504+ 3B5C F4 24                        dw      EXIT                    // ;
 505+ 3B5E
 506+ 3B5E              //  ______________________________________________________________________
 507+ 3B5E              //
 508+ 3B5E              // marker       -- cccc
 509+ 3B5E                              Colon_Def MARKER, "MARKER", is_immediate
 509+ 3B5E             >                New_Def  MARKER, "MARKER", Enter_Ptr, is_immediate ; ok
 509+ 3B5E             >
 509+ 3B5E             >Dict_Ptr        defl    $
 509+ 3B5E             >
 509+ 3B5E             >//              ______________________________________________________________________
 509+ 3B5E             >//              Heap part
 509+ 3B5E             >
 509+ 3B5E             >
 509+ 3B5E             >                org     (Heap_Ptr & $1FFF) + $E000
 509+ EBBD             >
 509+ EBBD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 509+ EBBD             >Latest_Definition defl  Heap_Ptr
 509+ EBBD             >
 509+ EBBD             >                // dummy db directives used to calculate length of namec
 509+ EBBD 4D 41 52 4B >                db      "MARKER"
 509+ EBC1 45 52       >
 509+ EBC3             >len_NFA         defl    $ - temp_NFA
 509+ EBC3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 509+ EBBD             >
 509+ EBBD C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 509+ EBBE 4D 41 52 4B >                db      "MARKER"               // name string in 7-bit ascii, but
 509+ EBC2 45 52       >
 509+ EBC4             >                org     $-1                 // alter last byte of Name just above to set
 509+ EBC3 D2          >                db      {b $} | END_BIT     // msb as name end
 509+ EBC4             >
 509+ EBC4 B2 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 509+ EBC6             >Prev_Ptr        defl    Heap_Ptr
 509+ EBC6             >
 509+ EBC6             >mirror_Ptr      defl    $
 509+ EBC6             >
 509+ EBC6 60 3B       >                dw      Dict_Ptr + 2        // xt
 509+ EBC8             >Heap_Ptr        defl    $ - $E000           // save current HP
 509+ EBC8             >
 509+ EBC8             >Current_HP      defl  $ - $E000             // used to set HP once!
 509+ EBC8             >
 509+ EBC8             >//              ______________________________________________________________________
 509+ EBC8             >//              Dictionary part
 509+ EBC8             >
 509+ EBC8             >                org     Dict_Ptr
 509+ 3B5E             >
 509+ 3B5E C6 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 509+ 3B60             >
 509+ 3B60             >MARKER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 509+ 3B60 CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 509+ 3B63             >
 509+ 3B63             >
 509+ 3B63             >                endif           ; ok        // for other definitions it "points" the correct handler
 509+ 3B63             >                // Use of "; ok" to suppress "warning[fwdref]"
 509+ 3B63             >
 509+ 3B63             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 510+ 3B63 AB 2B                        dw      CBUILDS
 511+ 3B65 B9 27 3E 26                  dw      VOC_LINK, FETCH, COMMA
 511+ 3B69 71 28
 512+ 3B6B FB 27 3E 26                  dw      CURRENT, FETCH, COMMA
 512+ 3B6F 71 28
 513+ 3B71 F5 27 3E 26                  dw      CONTEXT, FETCH, COMMA
 513+ 3B75 71 28
 514+ 3B77 FB 27 3E 26                  dw      CURRENT, FETCH, FETCH,  COMMA
 514+ 3B7B 3E 26 71 28
 515+ 3B7F 07 2A 65 2A                  dw      LATEST, PFA, LFA, FETCH, COMMA
 515+ 3B83 56 2A 3E 26
 515+ 3B87 71 28
 516+ 3B89 B6 2B                        dw      DOES_TO
 517+ 3B8B CD 25 3E 26                  dw      DUP, FETCH, VOC_LINK, STORE, CELL_PLUS
 517+ 3B8F B9 27 48 26
 517+ 3B93 76 25
 518+ 3B95 CD 25 3E 26                  dw      DUP, FETCH, CURRENT, STORE, CELL_PLUS
 518+ 3B99 FB 27 48 26
 518+ 3B9D 76 25
 519+ 3B9F CD 25 3E 26                  dw      DUP, FETCH, CONTEXT, STORE, CELL_PLUS
 519+ 3BA3 F5 27 48 26
 519+ 3BA7 76 25
 520+ 3BA9 CD 25 3E 26                  dw      DUP, FETCH
 521+ 3BAD                          //  dw      DUP, QHEAPP
 522+ 3BAD                          //  dw      ZBRANCH
 523+ 3BAD                          //  dw      Marker_then - $
 524+ 3BAD CD 25 CB 27                  dw          DUP, HP, STORE
 524+ 3BB1 48 26
 525+ 3BB3 65 2A 40 2A                  dw          PFA, CFA, CELL_MINUS
 525+ 3BB7 7B 25
 526+ 3BB9              // Marker_then:
 527+ 3BB9 B3 27 48 26                  dw      DP, STORE, CELL_PLUS
 527+ 3BBD 76 25
 528+ 3BBF 3E 26 FB 27                  dw      FETCH, CURRENT, FETCH, STORE
 528+ 3BC3 3E 26 48 26
 529+ 3BC7 F4 24                        dw      EXIT
 530+ 3BC9
 531+ 3BC9              //  ______________________________________________________________________
 532+ 3BC9              //
 533+ 3BC9              // spaces       n --
 534+ 3BC9                              Colon_Def SPACES, "SPACES", is_normal
 534+ 3BC9             >                New_Def  SPACES, "SPACES", Enter_Ptr, is_normal ; ok
 534+ 3BC9             >
 534+ 3BC9             >Dict_Ptr        defl    $
 534+ 3BC9             >
 534+ 3BC9             >//              ______________________________________________________________________
 534+ 3BC9             >//              Heap part
 534+ 3BC9             >
 534+ 3BC9             >
 534+ 3BC9             >                org     (Heap_Ptr & $1FFF) + $E000
 534+ EBC8             >
 534+ EBC8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 534+ EBC8             >Latest_Definition defl  Heap_Ptr
 534+ EBC8             >
 534+ EBC8             >                // dummy db directives used to calculate length of namec
 534+ EBC8 53 50 41 43 >                db      "SPACES"
 534+ EBCC 45 53       >
 534+ EBCE             >len_NFA         defl    $ - temp_NFA
 534+ EBCE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 534+ EBC8             >
 534+ EBC8 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 534+ EBC9 53 50 41 43 >                db      "SPACES"               // name string in 7-bit ascii, but
 534+ EBCD 45 53       >
 534+ EBCF             >                org     $-1                 // alter last byte of Name just above to set
 534+ EBCE D3          >                db      {b $} | END_BIT     // msb as name end
 534+ EBCF             >
 534+ EBCF BD 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 534+ EBD1             >Prev_Ptr        defl    Heap_Ptr
 534+ EBD1             >
 534+ EBD1             >mirror_Ptr      defl    $
 534+ EBD1             >
 534+ EBD1 CB 3B       >                dw      Dict_Ptr + 2        // xt
 534+ EBD3             >Heap_Ptr        defl    $ - $E000           // save current HP
 534+ EBD3             >
 534+ EBD3             >Current_HP      defl  $ - $E000             // used to set HP once!
 534+ EBD3             >
 534+ EBD3             >//              ______________________________________________________________________
 534+ EBD3             >//              Dictionary part
 534+ EBD3             >
 534+ EBD3             >                org     Dict_Ptr
 534+ 3BC9             >
 534+ 3BC9 D1 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 534+ 3BCB             >
 534+ 3BCB             >SPACES:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 534+ 3BCB CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 534+ 3BCE             >
 534+ 3BCE             >
 534+ 3BCE             >                endif           ; ok        // for other definitions it "points" the correct handler
 534+ 3BCE             >                // Use of "; ok" to suppress "warning[fwdref]"
 534+ 3BCE             >
 534+ 3BCE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 535+ 3BCE 36 27 F2 28                  dw      ZERO, MAX
 536+ 3BD2 36 27 A6 20                  dw      ZERO, C_Q_DO
 537+ 3BD6 08 00                        dw      Spaces_Leave - $
 538+ 3BD8              Spaces_Loop:
 539+ 3BD8 2C 29                        dw          SPACE
 540+ 3BDA 7A 20                        dw      C_LOOP
 541+ 3BDC FC FF                        dw      Spaces_Loop - $
 542+ 3BDE              Spaces_Leave:
 543+ 3BDE F4 24                        dw      EXIT                    // ;
 544+ 3BE0
 545+ 3BE0              //  ______________________________________________________________________
 546+ 3BE0              //
 547+ 3BE0              // <#           --
 548+ 3BE0                              Colon_Def BEGIN_DASH, "<#", is_normal
 548+ 3BE0             >                New_Def  BEGIN_DASH, "<#", Enter_Ptr, is_normal ; ok
 548+ 3BE0             >
 548+ 3BE0             >Dict_Ptr        defl    $
 548+ 3BE0             >
 548+ 3BE0             >//              ______________________________________________________________________
 548+ 3BE0             >//              Heap part
 548+ 3BE0             >
 548+ 3BE0             >
 548+ 3BE0             >                org     (Heap_Ptr & $1FFF) + $E000
 548+ EBD3             >
 548+ EBD3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 548+ EBD3             >Latest_Definition defl  Heap_Ptr
 548+ EBD3             >
 548+ EBD3             >                // dummy db directives used to calculate length of namec
 548+ EBD3 3C 23       >                db      "<#"
 548+ EBD5             >len_NFA         defl    $ - temp_NFA
 548+ EBD5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 548+ EBD3             >
 548+ EBD3 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 548+ EBD4 3C 23       >                db      "<#"               // name string in 7-bit ascii, but
 548+ EBD6             >                org     $-1                 // alter last byte of Name just above to set
 548+ EBD5 A3          >                db      {b $} | END_BIT     // msb as name end
 548+ EBD6             >
 548+ EBD6 C8 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 548+ EBD8             >Prev_Ptr        defl    Heap_Ptr
 548+ EBD8             >
 548+ EBD8             >mirror_Ptr      defl    $
 548+ EBD8             >
 548+ EBD8 E2 3B       >                dw      Dict_Ptr + 2        // xt
 548+ EBDA             >Heap_Ptr        defl    $ - $E000           // save current HP
 548+ EBDA             >
 548+ EBDA             >Current_HP      defl  $ - $E000             // used to set HP once!
 548+ EBDA             >
 548+ EBDA             >//              ______________________________________________________________________
 548+ EBDA             >//              Dictionary part
 548+ EBDA             >
 548+ EBDA             >                org     Dict_Ptr
 548+ 3BE0             >
 548+ 3BE0 D8 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 548+ 3BE2             >
 548+ 3BE2             >BEGIN_DASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 548+ 3BE2 CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 548+ 3BE5             >
 548+ 3BE5             >
 548+ 3BE5             >                endif           ; ok        // for other definitions it "points" the correct handler
 548+ 3BE5             >                // Use of "; ok" to suppress "warning[fwdref]"
 548+ 3BE5             >
 548+ 3BE5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 549+ 3BE5 6A 2D 25 28                  dw      PAD, HLD, STORE
 549+ 3BE9 48 26
 550+ 3BEB F4 24                        dw      EXIT
 551+ 3BED
 552+ 3BED              //  ______________________________________________________________________
 553+ 3BED              //
 554+ 3BED              // #>           --
 555+ 3BED                              Colon_Def DASH_END, "#>", is_normal
 555+ 3BED             >                New_Def  DASH_END, "#>", Enter_Ptr, is_normal ; ok
 555+ 3BED             >
 555+ 3BED             >Dict_Ptr        defl    $
 555+ 3BED             >
 555+ 3BED             >//              ______________________________________________________________________
 555+ 3BED             >//              Heap part
 555+ 3BED             >
 555+ 3BED             >
 555+ 3BED             >                org     (Heap_Ptr & $1FFF) + $E000
 555+ EBDA             >
 555+ EBDA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 555+ EBDA             >Latest_Definition defl  Heap_Ptr
 555+ EBDA             >
 555+ EBDA             >                // dummy db directives used to calculate length of namec
 555+ EBDA 23 3E       >                db      "#>"
 555+ EBDC             >len_NFA         defl    $ - temp_NFA
 555+ EBDC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 555+ EBDA             >
 555+ EBDA 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 555+ EBDB 23 3E       >                db      "#>"               // name string in 7-bit ascii, but
 555+ EBDD             >                org     $-1                 // alter last byte of Name just above to set
 555+ EBDC BE          >                db      {b $} | END_BIT     // msb as name end
 555+ EBDD             >
 555+ EBDD D3 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 555+ EBDF             >Prev_Ptr        defl    Heap_Ptr
 555+ EBDF             >
 555+ EBDF             >mirror_Ptr      defl    $
 555+ EBDF             >
 555+ EBDF EF 3B       >                dw      Dict_Ptr + 2        // xt
 555+ EBE1             >Heap_Ptr        defl    $ - $E000           // save current HP
 555+ EBE1             >
 555+ EBE1             >Current_HP      defl  $ - $E000             // used to set HP once!
 555+ EBE1             >
 555+ EBE1             >//              ______________________________________________________________________
 555+ EBE1             >//              Dictionary part
 555+ EBE1             >
 555+ EBE1             >                org     Dict_Ptr
 555+ 3BED             >
 555+ 3BED DF 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 555+ 3BEF             >
 555+ 3BEF             >DASH_END:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 555+ 3BEF CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 555+ 3BF2             >
 555+ 3BF2             >
 555+ 3BF2             >                endif           ; ok        // for other definitions it "points" the correct handler
 555+ 3BF2             >                // Use of "; ok" to suppress "warning[fwdref]"
 555+ 3BF2             >
 555+ 3BF2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 556+ 3BF2 09 26                        dw      TWO_DROP
 557+ 3BF4 25 28 3E 26                  dw      HLD, FETCH, PAD, OVER, SUBTRACT
 557+ 3BF8 6A 2D A9 25
 557+ 3BFC 9A 28
 558+ 3BFE F4 24                        dw      EXIT
 559+ 3C00
 560+ 3C00              //  ______________________________________________________________________
 561+ 3C00              //
 562+ 3C00              // sign         n d -- d
 563+ 3C00                              Colon_Def SIGN, "SIGN", is_normal
 563+ 3C00             >                New_Def  SIGN, "SIGN", Enter_Ptr, is_normal ; ok
 563+ 3C00             >
 563+ 3C00             >Dict_Ptr        defl    $
 563+ 3C00             >
 563+ 3C00             >//              ______________________________________________________________________
 563+ 3C00             >//              Heap part
 563+ 3C00             >
 563+ 3C00             >
 563+ 3C00             >                org     (Heap_Ptr & $1FFF) + $E000
 563+ EBE1             >
 563+ EBE1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 563+ EBE1             >Latest_Definition defl  Heap_Ptr
 563+ EBE1             >
 563+ EBE1             >                // dummy db directives used to calculate length of namec
 563+ EBE1 53 49 47 4E >                db      "SIGN"
 563+ EBE5             >len_NFA         defl    $ - temp_NFA
 563+ EBE5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 563+ EBE1             >
 563+ EBE1 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 563+ EBE2 53 49 47 4E >                db      "SIGN"               // name string in 7-bit ascii, but
 563+ EBE6             >                org     $-1                 // alter last byte of Name just above to set
 563+ EBE5 CE          >                db      {b $} | END_BIT     // msb as name end
 563+ EBE6             >
 563+ EBE6 DA 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 563+ EBE8             >Prev_Ptr        defl    Heap_Ptr
 563+ EBE8             >
 563+ EBE8             >mirror_Ptr      defl    $
 563+ EBE8             >
 563+ EBE8 02 3C       >                dw      Dict_Ptr + 2        // xt
 563+ EBEA             >Heap_Ptr        defl    $ - $E000           // save current HP
 563+ EBEA             >
 563+ EBEA             >Current_HP      defl  $ - $E000             // used to set HP once!
 563+ EBEA             >
 563+ EBEA             >//              ______________________________________________________________________
 563+ EBEA             >//              Dictionary part
 563+ EBEA             >
 563+ EBEA             >                org     Dict_Ptr
 563+ 3C00             >
 563+ 3C00 E8 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 563+ 3C02             >
 563+ 3C02             >SIGN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 563+ 3C02 CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 563+ 3C05             >
 563+ 3C05             >
 563+ 3C05             >                endif           ; ok        // for other definitions it "points" the correct handler
 563+ 3C05             >                // Use of "; ok" to suppress "warning[fwdref]"
 563+ 3C05             >
 563+ 3C05             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 564+ 3C05 2C 25                        dw      ZLESS
 565+ 3C07 8F 20                        dw      ZBRANCH
 566+ 3C09 08 00                        dw      Sign_Endif - $
 567+ 3C0B 3D 20 2D 00                  dw          LIT, 45, HOLD
 567+ 3C0F 57 2D
 568+ 3C11              Sign_Endif:
 569+ 3C11 F4 24                        dw      EXIT
 570+ 3C13
 571+ 3C13              //  ______________________________________________________________________
 572+ 3C13              //
 573+ 3C13              // #           d1 -- d2
 574+ 3C13                              Colon_Def DASH, "#", is_normal
 574+ 3C13             >                New_Def  DASH, "#", Enter_Ptr, is_normal ; ok
 574+ 3C13             >
 574+ 3C13             >Dict_Ptr        defl    $
 574+ 3C13             >
 574+ 3C13             >//              ______________________________________________________________________
 574+ 3C13             >//              Heap part
 574+ 3C13             >
 574+ 3C13             >
 574+ 3C13             >                org     (Heap_Ptr & $1FFF) + $E000
 574+ EBEA             >
 574+ EBEA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 574+ EBEA             >Latest_Definition defl  Heap_Ptr
 574+ EBEA             >
 574+ EBEA             >                // dummy db directives used to calculate length of namec
 574+ EBEA 23          >                db      "#"
 574+ EBEB             >len_NFA         defl    $ - temp_NFA
 574+ EBEB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 574+ EBEA             >
 574+ EBEA 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 574+ EBEB 23          >                db      "#"               // name string in 7-bit ascii, but
 574+ EBEC             >                org     $-1                 // alter last byte of Name just above to set
 574+ EBEB A3          >                db      {b $} | END_BIT     // msb as name end
 574+ EBEC             >
 574+ EBEC E1 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 574+ EBEE             >Prev_Ptr        defl    Heap_Ptr
 574+ EBEE             >
 574+ EBEE             >mirror_Ptr      defl    $
 574+ EBEE             >
 574+ EBEE 15 3C       >                dw      Dict_Ptr + 2        // xt
 574+ EBF0             >Heap_Ptr        defl    $ - $E000           // save current HP
 574+ EBF0             >
 574+ EBF0             >Current_HP      defl  $ - $E000             // used to set HP once!
 574+ EBF0             >
 574+ EBF0             >//              ______________________________________________________________________
 574+ EBF0             >//              Dictionary part
 574+ EBF0             >
 574+ EBF0             >                org     Dict_Ptr
 574+ 3C13             >
 574+ 3C13 EE 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 574+ 3C15             >
 574+ 3C15             >DASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 574+ 3C15 CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 574+ 3C18             >
 574+ 3C18             >
 574+ 3C18             >                endif           ; ok        // for other definitions it "points" the correct handler
 574+ 3C18             >                // Use of "; ok" to suppress "warning[fwdref]"
 574+ 3C18             >
 574+ 3C18             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 575+ 3C18 07 28 3E 26                  dw      BASE, FETCH
 576+ 3C1C
 577+ 3C1C FE 24                        dw      TO_R                    // >r           ( ud1 )
 578+ 3C1E 36 27 14 25                  dw      ZERO, R_OP, UMDIVMOD    // 0 r um/mod   ( l rem1 h/r )
 578+ 3C22 81 24
 579+ 3C24 09 25 C6 25                  dw      R_TO, SWAP, TO_R        // r> swap >r   ( l rem )
 579+ 3C28 FE 24
 580+ 3C2A 81 24                        dw      UMDIVMOD                // um/mod       ( rem2 l/r )
 581+ 3C2C 09 25                        dw      R_TO                    // r>           ( rem2 l/r h/r )
 582+ 3C2E
 583+ 3C2E D4 25                        dw      ROT
 584+ 3C30 3D 20 09 00                  dw      LIT, 9, OVER, LESS
 584+ 3C34 A9 25 BF 28
 585+ 3C38 8F 20                        dw      ZBRANCH
 586+ 3C3A 08 00                        dw      Dash_Endif - $
 587+ 3C3C 3D 20 07 00                  dw          LIT, 7, PLUS
 587+ 3C40 47 25
 588+ 3C42              Dash_Endif:
 589+ 3C42
 590+ 3C42 3D 20 30 00                  dw      LIT, 48, PLUS, HOLD
 590+ 3C46 47 25 57 2D
 591+ 3C4A F4 24                        dw      EXIT
 592+ 3C4C
 593+ 3C4C              //  ______________________________________________________________________
 594+ 3C4C              //
 595+ 3C4C              // #s           d1 -- d2
 596+ 3C4C                              Colon_Def DASHES, "#S", is_normal
 596+ 3C4C             >                New_Def  DASHES, "#S", Enter_Ptr, is_normal ; ok
 596+ 3C4C             >
 596+ 3C4C             >Dict_Ptr        defl    $
 596+ 3C4C             >
 596+ 3C4C             >//              ______________________________________________________________________
 596+ 3C4C             >//              Heap part
 596+ 3C4C             >
 596+ 3C4C             >
 596+ 3C4C             >                org     (Heap_Ptr & $1FFF) + $E000
 596+ EBF0             >
 596+ EBF0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 596+ EBF0             >Latest_Definition defl  Heap_Ptr
 596+ EBF0             >
 596+ EBF0             >                // dummy db directives used to calculate length of namec
 596+ EBF0 23 53       >                db      "#S"
 596+ EBF2             >len_NFA         defl    $ - temp_NFA
 596+ EBF2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 596+ EBF0             >
 596+ EBF0 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 596+ EBF1 23 53       >                db      "#S"               // name string in 7-bit ascii, but
 596+ EBF3             >                org     $-1                 // alter last byte of Name just above to set
 596+ EBF2 D3          >                db      {b $} | END_BIT     // msb as name end
 596+ EBF3             >
 596+ EBF3 EA 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 596+ EBF5             >Prev_Ptr        defl    Heap_Ptr
 596+ EBF5             >
 596+ EBF5             >mirror_Ptr      defl    $
 596+ EBF5             >
 596+ EBF5 4E 3C       >                dw      Dict_Ptr + 2        // xt
 596+ EBF7             >Heap_Ptr        defl    $ - $E000           // save current HP
 596+ EBF7             >
 596+ EBF7             >Current_HP      defl  $ - $E000             // used to set HP once!
 596+ EBF7             >
 596+ EBF7             >//              ______________________________________________________________________
 596+ EBF7             >//              Dictionary part
 596+ EBF7             >
 596+ EBF7             >                org     Dict_Ptr
 596+ 3C4C             >
 596+ 3C4C F5 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 596+ 3C4E             >
 596+ 3C4E             >DASHES:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 596+ 3C4E CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 596+ 3C51             >
 596+ 3C51             >
 596+ 3C51             >                endif           ; ok        // for other definitions it "points" the correct handler
 596+ 3C51             >                // Use of "; ok" to suppress "warning[fwdref]"
 596+ 3C51             >
 596+ 3C51             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 597+ 3C51              Dashes_Begin:
 598+ 3C51 15 3C 1C 26                  dw      DASH, TWO_DUP
 599+ 3C55 C3 24 19 25                  dw          OR_OP, ZEQUAL
 600+ 3C59 8F 20                        dw      ZBRANCH
 601+ 3C5B F6 FF                        dw      Dashes_Begin - $
 602+ 3C5D F4 24                        dw      EXIT
 603+ 3C5F
 604+ 3C5F              //  ______________________________________________________________________
 605+ 3C5F              //
 606+ 3C5F              // d.r          d n --
 607+ 3C5F                              Colon_Def D_DOT_R, "D.R", is_normal
 607+ 3C5F             >                New_Def  D_DOT_R, "D.R", Enter_Ptr, is_normal ; ok
 607+ 3C5F             >
 607+ 3C5F             >Dict_Ptr        defl    $
 607+ 3C5F             >
 607+ 3C5F             >//              ______________________________________________________________________
 607+ 3C5F             >//              Heap part
 607+ 3C5F             >
 607+ 3C5F             >
 607+ 3C5F             >                org     (Heap_Ptr & $1FFF) + $E000
 607+ EBF7             >
 607+ EBF7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 607+ EBF7             >Latest_Definition defl  Heap_Ptr
 607+ EBF7             >
 607+ EBF7             >                // dummy db directives used to calculate length of namec
 607+ EBF7 44 2E 52    >                db      "D.R"
 607+ EBFA             >len_NFA         defl    $ - temp_NFA
 607+ EBFA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 607+ EBF7             >
 607+ EBF7 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 607+ EBF8 44 2E 52    >                db      "D.R"               // name string in 7-bit ascii, but
 607+ EBFB             >                org     $-1                 // alter last byte of Name just above to set
 607+ EBFA D2          >                db      {b $} | END_BIT     // msb as name end
 607+ EBFB             >
 607+ EBFB F0 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 607+ EBFD             >Prev_Ptr        defl    Heap_Ptr
 607+ EBFD             >
 607+ EBFD             >mirror_Ptr      defl    $
 607+ EBFD             >
 607+ EBFD 61 3C       >                dw      Dict_Ptr + 2        // xt
 607+ EBFF             >Heap_Ptr        defl    $ - $E000           // save current HP
 607+ EBFF             >
 607+ EBFF             >Current_HP      defl  $ - $E000             // used to set HP once!
 607+ EBFF             >
 607+ EBFF             >//              ______________________________________________________________________
 607+ EBFF             >//              Dictionary part
 607+ EBFF             >
 607+ EBFF             >                org     Dict_Ptr
 607+ 3C5F             >
 607+ 3C5F FD 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 607+ 3C61             >
 607+ 3C61             >D_DOT_R:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 607+ 3C61 CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 607+ 3C64             >
 607+ 3C64             >
 607+ 3C64             >                endif           ; ok        // for other definitions it "points" the correct handler
 607+ 3C64             >                // Use of "; ok" to suppress "warning[fwdref]"
 607+ 3C64             >
 607+ 3C64             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 608+ 3C64 FE 24                        dw      TO_R
 609+ 3C66 BD 25 86 34                  dw      TUCK, DABS
 610+ 3C6A E2 3B 4E 3C                  dw      BEGIN_DASH, DASHES, ROT, SIGN, DASH_END
 610+ 3C6E D4 25 02 3C
 610+ 3C72 EF 3B
 611+ 3C74 09 25                        dw      R_TO
 612+ 3C76 A9 25 9A 28                  dw      OVER, SUBTRACT, SPACES, TYPE
 612+ 3C7A CB 3B 27 2C
 613+ 3C7E F4 24                        dw      EXIT
 614+ 3C80
 615+ 3C80              //  ______________________________________________________________________
 616+ 3C80              //
 617+ 3C80              // .r           n1 n2 --
 618+ 3C80                              Colon_Def DOT_R, ".R", is_normal
 618+ 3C80             >                New_Def  DOT_R, ".R", Enter_Ptr, is_normal ; ok
 618+ 3C80             >
 618+ 3C80             >Dict_Ptr        defl    $
 618+ 3C80             >
 618+ 3C80             >//              ______________________________________________________________________
 618+ 3C80             >//              Heap part
 618+ 3C80             >
 618+ 3C80             >
 618+ 3C80             >                org     (Heap_Ptr & $1FFF) + $E000
 618+ EBFF             >
 618+ EBFF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 618+ EBFF             >Latest_Definition defl  Heap_Ptr
 618+ EBFF             >
 618+ EBFF             >                // dummy db directives used to calculate length of namec
 618+ EBFF 2E 52       >                db      ".R"
 618+ EC01             >len_NFA         defl    $ - temp_NFA
 618+ EC01             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 618+ EBFF             >
 618+ EBFF 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 618+ EC00 2E 52       >                db      ".R"               // name string in 7-bit ascii, but
 618+ EC02             >                org     $-1                 // alter last byte of Name just above to set
 618+ EC01 D2          >                db      {b $} | END_BIT     // msb as name end
 618+ EC02             >
 618+ EC02 F7 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 618+ EC04             >Prev_Ptr        defl    Heap_Ptr
 618+ EC04             >
 618+ EC04             >mirror_Ptr      defl    $
 618+ EC04             >
 618+ EC04 82 3C       >                dw      Dict_Ptr + 2        // xt
 618+ EC06             >Heap_Ptr        defl    $ - $E000           // save current HP
 618+ EC06             >
 618+ EC06             >Current_HP      defl  $ - $E000             // used to set HP once!
 618+ EC06             >
 618+ EC06             >//              ______________________________________________________________________
 618+ EC06             >//              Dictionary part
 618+ EC06             >
 618+ EC06             >                org     Dict_Ptr
 618+ 3C80             >
 618+ 3C80 04 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 618+ 3C82             >
 618+ 3C82             >DOT_R:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 618+ 3C82 CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 618+ 3C85             >
 618+ 3C85             >
 618+ 3C85             >                endif           ; ok        // for other definitions it "points" the correct handler
 618+ 3C85             >                // Use of "; ok" to suppress "warning[fwdref]"
 618+ 3C85             >
 618+ 3C85             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 619+ 3C85 FE 24                        dw      TO_R
 620+ 3C87 8F 28 09 25                  dw      S_TO_D, R_TO
 621+ 3C8B 61 3C                        dw      D_DOT_R
 622+ 3C8D F4 24                        dw      EXIT
 623+ 3C8F
 624+ 3C8F              //  ______________________________________________________________________
 625+ 3C8F              //
 626+ 3C8F              // d.           d --
 627+ 3C8F                              Colon_Def D_DOT, "D.", is_normal
 627+ 3C8F             >                New_Def  D_DOT, "D.", Enter_Ptr, is_normal ; ok
 627+ 3C8F             >
 627+ 3C8F             >Dict_Ptr        defl    $
 627+ 3C8F             >
 627+ 3C8F             >//              ______________________________________________________________________
 627+ 3C8F             >//              Heap part
 627+ 3C8F             >
 627+ 3C8F             >
 627+ 3C8F             >                org     (Heap_Ptr & $1FFF) + $E000
 627+ EC06             >
 627+ EC06             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 627+ EC06             >Latest_Definition defl  Heap_Ptr
 627+ EC06             >
 627+ EC06             >                // dummy db directives used to calculate length of namec
 627+ EC06 44 2E       >                db      "D."
 627+ EC08             >len_NFA         defl    $ - temp_NFA
 627+ EC08             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 627+ EC06             >
 627+ EC06 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 627+ EC07 44 2E       >                db      "D."               // name string in 7-bit ascii, but
 627+ EC09             >                org     $-1                 // alter last byte of Name just above to set
 627+ EC08 AE          >                db      {b $} | END_BIT     // msb as name end
 627+ EC09             >
 627+ EC09 FF 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 627+ EC0B             >Prev_Ptr        defl    Heap_Ptr
 627+ EC0B             >
 627+ EC0B             >mirror_Ptr      defl    $
 627+ EC0B             >
 627+ EC0B 91 3C       >                dw      Dict_Ptr + 2        // xt
 627+ EC0D             >Heap_Ptr        defl    $ - $E000           // save current HP
 627+ EC0D             >
 627+ EC0D             >Current_HP      defl  $ - $E000             // used to set HP once!
 627+ EC0D             >
 627+ EC0D             >//              ______________________________________________________________________
 627+ EC0D             >//              Dictionary part
 627+ EC0D             >
 627+ EC0D             >                org     Dict_Ptr
 627+ 3C8F             >
 627+ 3C8F 0B 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 627+ 3C91             >
 627+ 3C91             >D_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 627+ 3C91 CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 627+ 3C94             >
 627+ 3C94             >
 627+ 3C94             >                endif           ; ok        // for other definitions it "points" the correct handler
 627+ 3C94             >                // Use of "; ok" to suppress "warning[fwdref]"
 627+ 3C94             >
 627+ 3C94             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 628+ 3C94 36 27 61 3C                  dw      ZERO, D_DOT_R, SPACE
 628+ 3C98 2C 29
 629+ 3C9A F4 24                        dw      EXIT
 630+ 3C9C
 631+ 3C9C              //  ______________________________________________________________________
 632+ 3C9C              //
 633+ 3C9C              // .            n --
 634+ 3C9C                              Colon_Def DOT, ".", is_normal
 634+ 3C9C             >                New_Def  DOT, ".", Enter_Ptr, is_normal ; ok
 634+ 3C9C             >
 634+ 3C9C             >Dict_Ptr        defl    $
 634+ 3C9C             >
 634+ 3C9C             >//              ______________________________________________________________________
 634+ 3C9C             >//              Heap part
 634+ 3C9C             >
 634+ 3C9C             >
 634+ 3C9C             >                org     (Heap_Ptr & $1FFF) + $E000
 634+ EC0D             >
 634+ EC0D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 634+ EC0D             >Latest_Definition defl  Heap_Ptr
 634+ EC0D             >
 634+ EC0D             >                // dummy db directives used to calculate length of namec
 634+ EC0D 2E          >                db      "."
 634+ EC0E             >len_NFA         defl    $ - temp_NFA
 634+ EC0E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 634+ EC0D             >
 634+ EC0D 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 634+ EC0E 2E          >                db      "."               // name string in 7-bit ascii, but
 634+ EC0F             >                org     $-1                 // alter last byte of Name just above to set
 634+ EC0E AE          >                db      {b $} | END_BIT     // msb as name end
 634+ EC0F             >
 634+ EC0F 06 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 634+ EC11             >Prev_Ptr        defl    Heap_Ptr
 634+ EC11             >
 634+ EC11             >mirror_Ptr      defl    $
 634+ EC11             >
 634+ EC11 9E 3C       >                dw      Dict_Ptr + 2        // xt
 634+ EC13             >Heap_Ptr        defl    $ - $E000           // save current HP
 634+ EC13             >
 634+ EC13             >Current_HP      defl  $ - $E000             // used to set HP once!
 634+ EC13             >
 634+ EC13             >//              ______________________________________________________________________
 634+ EC13             >//              Dictionary part
 634+ EC13             >
 634+ EC13             >                org     Dict_Ptr
 634+ 3C9C             >
 634+ 3C9C 11 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 634+ 3C9E             >
 634+ 3C9E             >DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 634+ 3C9E CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 634+ 3CA1             >
 634+ 3CA1             >
 634+ 3CA1             >                endif           ; ok        // for other definitions it "points" the correct handler
 634+ 3CA1             >                // Use of "; ok" to suppress "warning[fwdref]"
 634+ 3CA1             >
 634+ 3CA1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 635+ 3CA1 8F 28 91 3C                  dw      S_TO_D, D_DOT
 636+ 3CA5 F4 24                        dw      EXIT
 637+ 3CA7
 638+ 3CA7              //  ______________________________________________________________________
 639+ 3CA7              //
 640+ 3CA7              // ?            n --
 641+ 3CA7                              Colon_Def QUESTION, "?", is_normal
 641+ 3CA7             >                New_Def  QUESTION, "?", Enter_Ptr, is_normal ; ok
 641+ 3CA7             >
 641+ 3CA7             >Dict_Ptr        defl    $
 641+ 3CA7             >
 641+ 3CA7             >//              ______________________________________________________________________
 641+ 3CA7             >//              Heap part
 641+ 3CA7             >
 641+ 3CA7             >
 641+ 3CA7             >                org     (Heap_Ptr & $1FFF) + $E000
 641+ EC13             >
 641+ EC13             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 641+ EC13             >Latest_Definition defl  Heap_Ptr
 641+ EC13             >
 641+ EC13             >                // dummy db directives used to calculate length of namec
 641+ EC13 3F          >                db      "?"
 641+ EC14             >len_NFA         defl    $ - temp_NFA
 641+ EC14             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 641+ EC13             >
 641+ EC13 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 641+ EC14 3F          >                db      "?"               // name string in 7-bit ascii, but
 641+ EC15             >                org     $-1                 // alter last byte of Name just above to set
 641+ EC14 BF          >                db      {b $} | END_BIT     // msb as name end
 641+ EC15             >
 641+ EC15 0D 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 641+ EC17             >Prev_Ptr        defl    Heap_Ptr
 641+ EC17             >
 641+ EC17             >mirror_Ptr      defl    $
 641+ EC17             >
 641+ EC17 A9 3C       >                dw      Dict_Ptr + 2        // xt
 641+ EC19             >Heap_Ptr        defl    $ - $E000           // save current HP
 641+ EC19             >
 641+ EC19             >Current_HP      defl  $ - $E000             // used to set HP once!
 641+ EC19             >
 641+ EC19             >//              ______________________________________________________________________
 641+ EC19             >//              Dictionary part
 641+ EC19             >
 641+ EC19             >                org     Dict_Ptr
 641+ 3CA7             >
 641+ 3CA7 17 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 641+ 3CA9             >
 641+ 3CA9             >QUESTION:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 641+ 3CA9 CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 641+ 3CAC             >
 641+ 3CAC             >
 641+ 3CAC             >                endif           ; ok        // for other definitions it "points" the correct handler
 641+ 3CAC             >                // Use of "; ok" to suppress "warning[fwdref]"
 641+ 3CAC             >
 641+ 3CAC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 642+ 3CAC 3E 26 9E 3C                  dw      FETCH, DOT
 643+ 3CB0 F4 24                        dw      EXIT
 644+ 3CB2
 645+ 3CB2              //  ______________________________________________________________________
 646+ 3CB2              //
 647+ 3CB2              // u.           u --
 648+ 3CB2                              Colon_Def U_DOT, "U.", is_normal
 648+ 3CB2             >                New_Def  U_DOT, "U.", Enter_Ptr, is_normal ; ok
 648+ 3CB2             >
 648+ 3CB2             >Dict_Ptr        defl    $
 648+ 3CB2             >
 648+ 3CB2             >//              ______________________________________________________________________
 648+ 3CB2             >//              Heap part
 648+ 3CB2             >
 648+ 3CB2             >
 648+ 3CB2             >                org     (Heap_Ptr & $1FFF) + $E000
 648+ EC19             >
 648+ EC19             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 648+ EC19             >Latest_Definition defl  Heap_Ptr
 648+ EC19             >
 648+ EC19             >                // dummy db directives used to calculate length of namec
 648+ EC19 55 2E       >                db      "U."
 648+ EC1B             >len_NFA         defl    $ - temp_NFA
 648+ EC1B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 648+ EC19             >
 648+ EC19 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 648+ EC1A 55 2E       >                db      "U."               // name string in 7-bit ascii, but
 648+ EC1C             >                org     $-1                 // alter last byte of Name just above to set
 648+ EC1B AE          >                db      {b $} | END_BIT     // msb as name end
 648+ EC1C             >
 648+ EC1C 13 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 648+ EC1E             >Prev_Ptr        defl    Heap_Ptr
 648+ EC1E             >
 648+ EC1E             >mirror_Ptr      defl    $
 648+ EC1E             >
 648+ EC1E B4 3C       >                dw      Dict_Ptr + 2        // xt
 648+ EC20             >Heap_Ptr        defl    $ - $E000           // save current HP
 648+ EC20             >
 648+ EC20             >Current_HP      defl  $ - $E000             // used to set HP once!
 648+ EC20             >
 648+ EC20             >//              ______________________________________________________________________
 648+ EC20             >//              Dictionary part
 648+ EC20             >
 648+ EC20             >                org     Dict_Ptr
 648+ 3CB2             >
 648+ 3CB2 1E 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 648+ 3CB4             >
 648+ 3CB4             >U_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 648+ 3CB4 CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 648+ 3CB7             >
 648+ 3CB7             >
 648+ 3CB7             >                endif           ; ok        // for other definitions it "points" the correct handler
 648+ 3CB7             >                // Use of "; ok" to suppress "warning[fwdref]"
 648+ 3CB7             >
 648+ 3CB7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 649+ 3CB7 36 27 91 3C                  dw      ZERO, D_DOT
 650+ 3CBB F4 24                        dw      EXIT
 651+ 3CBD
 652+ 3CBD              //  ______________________________________________________________________
 653+ 3CBD              //
 654+ 3CBD              // words        --
 655+ 3CBD                              Colon_Def WORDS, "WORDS", is_normal
 655+ 3CBD             >                New_Def  WORDS, "WORDS", Enter_Ptr, is_normal ; ok
 655+ 3CBD             >
 655+ 3CBD             >Dict_Ptr        defl    $
 655+ 3CBD             >
 655+ 3CBD             >//              ______________________________________________________________________
 655+ 3CBD             >//              Heap part
 655+ 3CBD             >
 655+ 3CBD             >
 655+ 3CBD             >                org     (Heap_Ptr & $1FFF) + $E000
 655+ EC20             >
 655+ EC20             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 655+ EC20             >Latest_Definition defl  Heap_Ptr
 655+ EC20             >
 655+ EC20             >                // dummy db directives used to calculate length of namec
 655+ EC20 57 4F 52 44 >                db      "WORDS"
 655+ EC24 53          >
 655+ EC25             >len_NFA         defl    $ - temp_NFA
 655+ EC25             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 655+ EC20             >
 655+ EC20 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 655+ EC21 57 4F 52 44 >                db      "WORDS"               // name string in 7-bit ascii, but
 655+ EC25 53          >
 655+ EC26             >                org     $-1                 // alter last byte of Name just above to set
 655+ EC25 D3          >                db      {b $} | END_BIT     // msb as name end
 655+ EC26             >
 655+ EC26 19 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 655+ EC28             >Prev_Ptr        defl    Heap_Ptr
 655+ EC28             >
 655+ EC28             >mirror_Ptr      defl    $
 655+ EC28             >
 655+ EC28 BF 3C       >                dw      Dict_Ptr + 2        // xt
 655+ EC2A             >Heap_Ptr        defl    $ - $E000           // save current HP
 655+ EC2A             >
 655+ EC2A             >Current_HP      defl  $ - $E000             // used to set HP once!
 655+ EC2A             >
 655+ EC2A             >//              ______________________________________________________________________
 655+ EC2A             >//              Dictionary part
 655+ EC2A             >
 655+ EC2A             >                org     Dict_Ptr
 655+ 3CBD             >
 655+ 3CBD 28 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 655+ 3CBF             >
 655+ 3CBF             >WORDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 655+ 3CBF CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 655+ 3CC2             >
 655+ 3CC2             >
 655+ 3CC2             >                endif           ; ok        // for other definitions it "points" the correct handler
 655+ 3CC2             >                // Use of "; ok" to suppress "warning[fwdref]"
 655+ 3CC2             >
 655+ 3CC2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 656+ 3CC2 3D 20 80 00                  dw      LIT, 128, OUT, STORE
 656+ 3CC6 E3 27 48 26
 657+ 3CCA F5 27 3E 26                  dw      CONTEXT, FETCH, FETCH
 657+ 3CCE 3E 26
 658+ 3CD0              Words_Begin:
 659+ 3CD0 9D 29                        dw          FAR // Q TO HEAP
 660+ 3CD2 CD 25 53 26                  dw          DUP, CFETCH, LIT, $1F, AND_OP
 660+ 3CD6 3D 20 1F 00
 660+ 3CDA B4 24
 661+ 3CDC E3 27 3E 26                  dw          OUT, FETCH, PLUS
 661+ 3CE0 47 25
 662+ 3CE2 60 27 BF 28                  dw          CL, LESS, ZEQUAL
 662+ 3CE6 19 25
 663+ 3CE8 8F 20                        dw          ZBRANCH
 664+ 3CEA 0A 00                        dw          Words_Endif - $
 665+ 3CEC 50 22 36 27                  dw              CR, ZERO, OUT, STORE
 665+ 3CF0 E3 27 48 26
 666+ 3CF4              Words_Endif:
 667+ 3CF4 CD 25 07 30                  dw          DUP, ID_DOT
 668+ 3CF8 3D 27 37 29                  dw          ONE, TRAVERSE, ONE_PLUS, FETCH
 668+ 3CFC 60 25 3E 26
 669+ 3D00 CD 25 19 25                  dw          DUP, ZEQUAL
 670+ 3D04 4D 23 C3 24                  dw          QTERMINAL, OR_OP
 671+ 3D08 8F 20                        dw      ZBRANCH
 672+ 3D0A C6 FF                        dw      Words_Begin - $
 673+ 3D0C B2 25                        dw      DROP
 674+ 3D0E F4 24                        dw      EXIT
 675+ 3D10
 676+ 3D10              //  ______________________________________________________________________
 677+ 3D10              //
 678+ 3D10              // list         n --
 679+ 3D10                              Colon_Def LIST, "LIST", is_normal
 679+ 3D10             >                New_Def  LIST, "LIST", Enter_Ptr, is_normal ; ok
 679+ 3D10             >
 679+ 3D10             >Dict_Ptr        defl    $
 679+ 3D10             >
 679+ 3D10             >//              ______________________________________________________________________
 679+ 3D10             >//              Heap part
 679+ 3D10             >
 679+ 3D10             >
 679+ 3D10             >                org     (Heap_Ptr & $1FFF) + $E000
 679+ EC2A             >
 679+ EC2A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 679+ EC2A             >Latest_Definition defl  Heap_Ptr
 679+ EC2A             >
 679+ EC2A             >                // dummy db directives used to calculate length of namec
 679+ EC2A 4C 49 53 54 >                db      "LIST"
 679+ EC2E             >len_NFA         defl    $ - temp_NFA
 679+ EC2E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 679+ EC2A             >
 679+ EC2A 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 679+ EC2B 4C 49 53 54 >                db      "LIST"               // name string in 7-bit ascii, but
 679+ EC2F             >                org     $-1                 // alter last byte of Name just above to set
 679+ EC2E D4          >                db      {b $} | END_BIT     // msb as name end
 679+ EC2F             >
 679+ EC2F 20 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 679+ EC31             >Prev_Ptr        defl    Heap_Ptr
 679+ EC31             >
 679+ EC31             >mirror_Ptr      defl    $
 679+ EC31             >
 679+ EC31 12 3D       >                dw      Dict_Ptr + 2        // xt
 679+ EC33             >Heap_Ptr        defl    $ - $E000           // save current HP
 679+ EC33             >
 679+ EC33             >Current_HP      defl  $ - $E000             // used to set HP once!
 679+ EC33             >
 679+ EC33             >//              ______________________________________________________________________
 679+ EC33             >//              Dictionary part
 679+ EC33             >
 679+ EC33             >                org     Dict_Ptr
 679+ 3D10             >
 679+ 3D10 31 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 679+ 3D12             >
 679+ 3D12             >LIST:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 679+ 3D12 CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 679+ 3D15             >
 679+ 3D15             >
 679+ 3D15             >                endif           ; ok        // for other definitions it "points" the correct handler
 679+ 3D15             >                // Use of "; ok" to suppress "warning[fwdref]"
 679+ 3D15             >
 679+ 3D15             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 680+ 3D15 70 2B 50 22                  dw      DECIMAL, CR
 681+ 3D19 CD 25 E9 27                  dw      DUP, SCR, STORE
 681+ 3D1D 48 26
 682+ 3D1F C4 2D                        dw      C_DOT_QUOTE
 683+ 3D21 05 53 63 72                  db      5, "Scr# "
 683+ 3D25 23 20
 684+ 3D27 9E 3C                        dw      DOT
 685+ 3D29 75 27 36 27                  dw      LSCR, ZERO, C_DO
 685+ 3D2D CE 20
 686+ 3D2F              List_Loop:
 687+ 3D2F 50 22                        dw          CR
 688+ 3D31 D4 20 4B 27                  dw          I, THREE
 689+ 3D35 82 3C 2C 29                  dw          DOT_R, SPACE
 690+ 3D39 D4 20 E9 27                  dw          I, SCR, FETCH, DOT_LINE
 690+ 3D3D 3E 26 81 35
 691+ 3D41 4D 23                        dw          QTERMINAL
 692+ 3D43 8F 20                        dw          ZBRANCH
 693+ 3D45 06 00                        dw          List_Endif - $
 694+ 3D47 9A 20                        dw              C_LEAVE
 695+ 3D49 06 00                        dw              List_Leave - $
 696+ 3D4B              List_Endif:
 697+ 3D4B 7A 20                        dw      C_LOOP
 698+ 3D4D E2 FF                        dw      List_Loop - $
 699+ 3D4F              List_Leave:
 700+ 3D4F 50 22                        dw      CR
 701+ 3D51 F4 24                        dw      EXIT
 702+ 3D53
 703+ 3D53              //  ______________________________________________________________________
 704+ 3D53              //
 705+ 3D53              // index        n1 n2 --
 706+ 3D53                              Colon_Def INDEX, "INDEX", is_normal
 706+ 3D53             >                New_Def  INDEX, "INDEX", Enter_Ptr, is_normal ; ok
 706+ 3D53             >
 706+ 3D53             >Dict_Ptr        defl    $
 706+ 3D53             >
 706+ 3D53             >//              ______________________________________________________________________
 706+ 3D53             >//              Heap part
 706+ 3D53             >
 706+ 3D53             >
 706+ 3D53             >                org     (Heap_Ptr & $1FFF) + $E000
 706+ EC33             >
 706+ EC33             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 706+ EC33             >Latest_Definition defl  Heap_Ptr
 706+ EC33             >
 706+ EC33             >                // dummy db directives used to calculate length of namec
 706+ EC33 49 4E 44 45 >                db      "INDEX"
 706+ EC37 58          >
 706+ EC38             >len_NFA         defl    $ - temp_NFA
 706+ EC38             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 706+ EC33             >
 706+ EC33 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 706+ EC34 49 4E 44 45 >                db      "INDEX"               // name string in 7-bit ascii, but
 706+ EC38 58          >
 706+ EC39             >                org     $-1                 // alter last byte of Name just above to set
 706+ EC38 D8          >                db      {b $} | END_BIT     // msb as name end
 706+ EC39             >
 706+ EC39 2A 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 706+ EC3B             >Prev_Ptr        defl    Heap_Ptr
 706+ EC3B             >
 706+ EC3B             >mirror_Ptr      defl    $
 706+ EC3B             >
 706+ EC3B 55 3D       >                dw      Dict_Ptr + 2        // xt
 706+ EC3D             >Heap_Ptr        defl    $ - $E000           // save current HP
 706+ EC3D             >
 706+ EC3D             >Current_HP      defl  $ - $E000             // used to set HP once!
 706+ EC3D             >
 706+ EC3D             >//              ______________________________________________________________________
 706+ EC3D             >//              Dictionary part
 706+ EC3D             >
 706+ EC3D             >                org     Dict_Ptr
 706+ 3D53             >
 706+ 3D53 3B 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 706+ 3D55             >
 706+ 3D55             >INDEX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 706+ 3D55 CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 706+ 3D58             >
 706+ 3D58             >
 706+ 3D58             >                endif           ; ok        // for other definitions it "points" the correct handler
 706+ 3D58             >                // Use of "; ok" to suppress "warning[fwdref]"
 706+ 3D58             >
 706+ 3D58             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 707+ 3D58 60 25 C6 25                  dw      ONE_PLUS, SWAP, C_DO
 707+ 3D5C CE 20
 708+ 3D5E              Index_Loop:
 709+ 3D5E 50 22 D4 20                  dw          CR, I, THREE
 709+ 3D62 4B 27
 710+ 3D64 82 3C 2C 29                  dw          DOT_R, SPACE
 711+ 3D68 36 27 D4 20                  dw          ZERO, I, DOT_LINE
 711+ 3D6C 81 35
 712+ 3D6E 4D 23                        dw          QTERMINAL
 713+ 3D70 8F 20                        dw          ZBRANCH
 714+ 3D72 06 00                        dw          Index_Endif - $
 715+ 3D74 9A 20                        dw              C_LEAVE
 716+ 3D76 06 00                        dw              Index_Leave - $
 717+ 3D78              Index_Endif:
 718+ 3D78 7A 20                        dw      C_LOOP
 719+ 3D7A E4 FF                        dw      Index_Loop - $
 720+ 3D7C              Index_Leave:
 721+ 3D7C 50 22                        dw      CR
 722+ 3D7E F4 24                        dw      EXIT
 723+ 3D80
 724+ 3D80              //  ______________________________________________________________________
 725+ 3D80              //
 726+ 3D80              // cls          --
 727+ 3D80                              Colon_Def CLS, "CLS", is_normal
 727+ 3D80             >                New_Def  CLS, "CLS", Enter_Ptr, is_normal ; ok
 727+ 3D80             >
 727+ 3D80             >Dict_Ptr        defl    $
 727+ 3D80             >
 727+ 3D80             >//              ______________________________________________________________________
 727+ 3D80             >//              Heap part
 727+ 3D80             >
 727+ 3D80             >
 727+ 3D80             >                org     (Heap_Ptr & $1FFF) + $E000
 727+ EC3D             >
 727+ EC3D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 727+ EC3D             >Latest_Definition defl  Heap_Ptr
 727+ EC3D             >
 727+ EC3D             >                // dummy db directives used to calculate length of namec
 727+ EC3D 43 4C 53    >                db      "CLS"
 727+ EC40             >len_NFA         defl    $ - temp_NFA
 727+ EC40             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 727+ EC3D             >
 727+ EC3D 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 727+ EC3E 43 4C 53    >                db      "CLS"               // name string in 7-bit ascii, but
 727+ EC41             >                org     $-1                 // alter last byte of Name just above to set
 727+ EC40 D3          >                db      {b $} | END_BIT     // msb as name end
 727+ EC41             >
 727+ EC41 33 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 727+ EC43             >Prev_Ptr        defl    Heap_Ptr
 727+ EC43             >
 727+ EC43             >mirror_Ptr      defl    $
 727+ EC43             >
 727+ EC43 82 3D       >                dw      Dict_Ptr + 2        // xt
 727+ EC45             >Heap_Ptr        defl    $ - $E000           // save current HP
 727+ EC45             >
 727+ EC45             >Current_HP      defl  $ - $E000             // used to set HP once!
 727+ EC45             >
 727+ EC45             >//              ______________________________________________________________________
 727+ EC45             >//              Dictionary part
 727+ EC45             >
 727+ EC45             >                org     Dict_Ptr
 727+ 3D80             >
 727+ 3D80 43 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 727+ 3D82             >
 727+ 3D82             >CLS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 727+ 3D82 CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 727+ 3D85             >
 727+ 3D85             >
 727+ 3D85             >                endif           ; ok        // for other definitions it "points" the correct handler
 727+ 3D85             >                // Use of "; ok" to suppress "warning[fwdref]"
 727+ 3D85             >
 727+ 3D85             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 728+ 3D85 3D 20 0E 00                  dw      LIT, $0E, EMITC
 728+ 3D89 3C 22
 729+ 3D8B F4 24                        dw      EXIT
 730+ 3D8D
 731+ 3D8D              //  ______________________________________________________________________
 732+ 3D8D              //
 733+ 3D8D              // splash       --
 734+ 3D8D              //              Colon_Def SPLASH, "SPLASH", is_normal
 735+ 3D8D              //              dw      CLS
 736+ 3D8D              //              dw      C_DOT_QUOTE
 737+ 3D8D              //              db      87
 738+ 3D8D              //              db      "v-Forth 1.7 NextZXOS version", 13    // 29
 739+ 3D8D              //              db      "Heap Vocabulary - build 20231004", 13  // 33
 740+ 3D8D              //              db      "1990-2023 Matteo Vitturi", 13        // 25
 741+ 3D8D              //              dw      EXIT
 742+ 3D8D
 743+ 3D8D              //  ______________________________________________________________________
 744+ 3D8D              //
 745+ 3D8D              // splash       --
 746+ 3D8D                              Colon_Def SPLASH, "SPLASH", is_normal
 746+ 3D8D             >                New_Def  SPLASH, "SPLASH", Enter_Ptr, is_normal ; ok
 746+ 3D8D             >
 746+ 3D8D             >Dict_Ptr        defl    $
 746+ 3D8D             >
 746+ 3D8D             >//              ______________________________________________________________________
 746+ 3D8D             >//              Heap part
 746+ 3D8D             >
 746+ 3D8D             >
 746+ 3D8D             >                org     (Heap_Ptr & $1FFF) + $E000
 746+ EC45             >
 746+ EC45             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 746+ EC45             >Latest_Definition defl  Heap_Ptr
 746+ EC45             >
 746+ EC45             >                // dummy db directives used to calculate length of namec
 746+ EC45 53 50 4C 41 >                db      "SPLASH"
 746+ EC49 53 48       >
 746+ EC4B             >len_NFA         defl    $ - temp_NFA
 746+ EC4B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 746+ EC45             >
 746+ EC45 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 746+ EC46 53 50 4C 41 >                db      "SPLASH"               // name string in 7-bit ascii, but
 746+ EC4A 53 48       >
 746+ EC4C             >                org     $-1                 // alter last byte of Name just above to set
 746+ EC4B C8          >                db      {b $} | END_BIT     // msb as name end
 746+ EC4C             >
 746+ EC4C 3D 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 746+ EC4E             >Prev_Ptr        defl    Heap_Ptr
 746+ EC4E             >
 746+ EC4E             >mirror_Ptr      defl    $
 746+ EC4E             >
 746+ EC4E 8F 3D       >                dw      Dict_Ptr + 2        // xt
 746+ EC50             >Heap_Ptr        defl    $ - $E000           // save current HP
 746+ EC50             >
 746+ EC50             >Current_HP      defl  $ - $E000             // used to set HP once!
 746+ EC50             >
 746+ EC50             >//              ______________________________________________________________________
 746+ EC50             >//              Dictionary part
 746+ EC50             >
 746+ EC50             >                org     Dict_Ptr
 746+ 3D8D             >
 746+ 3D8D 4E 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 746+ 3D8F             >
 746+ 3D8F             >SPLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 746+ 3D8F CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 746+ 3D92             >
 746+ 3D92             >
 746+ 3D92             >                endif           ; ok        // for other definitions it "points" the correct handler
 746+ 3D92             >                // Use of "; ok" to suppress "warning[fwdref]"
 746+ 3D92             >
 746+ 3D92             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 747+ 3D92 82 3D                        dw      CLS
 748+ 3D94 3D 20 02 00                  dw      LIT, Splash_Ptr
 749+ 3D98 9D 29                        dw      FAR
 750+ 3D9A D3 2B 27 2C                  dw      COUNT, TYPE
 751+ 3D9E F4 24                        dw      EXIT
 752+ 3DA0
 753+ 3DA0              //  ______________________________________________________________________
 754+ 3DA0              //
 755+ 3DA0              // video        --
 756+ 3DA0                              Colon_Def VIDEO, "VIDEO", is_normal
 756+ 3DA0             >                New_Def  VIDEO, "VIDEO", Enter_Ptr, is_normal ; ok
 756+ 3DA0             >
 756+ 3DA0             >Dict_Ptr        defl    $
 756+ 3DA0             >
 756+ 3DA0             >//              ______________________________________________________________________
 756+ 3DA0             >//              Heap part
 756+ 3DA0             >
 756+ 3DA0             >
 756+ 3DA0             >                org     (Heap_Ptr & $1FFF) + $E000
 756+ EC50             >
 756+ EC50             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 756+ EC50             >Latest_Definition defl  Heap_Ptr
 756+ EC50             >
 756+ EC50             >                // dummy db directives used to calculate length of namec
 756+ EC50 56 49 44 45 >                db      "VIDEO"
 756+ EC54 4F          >
 756+ EC55             >len_NFA         defl    $ - temp_NFA
 756+ EC55             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 756+ EC50             >
 756+ EC50 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 756+ EC51 56 49 44 45 >                db      "VIDEO"               // name string in 7-bit ascii, but
 756+ EC55 4F          >
 756+ EC56             >                org     $-1                 // alter last byte of Name just above to set
 756+ EC55 CF          >                db      {b $} | END_BIT     // msb as name end
 756+ EC56             >
 756+ EC56 45 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 756+ EC58             >Prev_Ptr        defl    Heap_Ptr
 756+ EC58             >
 756+ EC58             >mirror_Ptr      defl    $
 756+ EC58             >
 756+ EC58 A2 3D       >                dw      Dict_Ptr + 2        // xt
 756+ EC5A             >Heap_Ptr        defl    $ - $E000           // save current HP
 756+ EC5A             >
 756+ EC5A             >Current_HP      defl  $ - $E000             // used to set HP once!
 756+ EC5A             >
 756+ EC5A             >//              ______________________________________________________________________
 756+ EC5A             >//              Dictionary part
 756+ EC5A             >
 756+ EC5A             >                org     Dict_Ptr
 756+ 3DA0             >
 756+ 3DA0 58 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 756+ 3DA2             >
 756+ 3DA2             >VIDEO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 756+ 3DA2 CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 756+ 3DA5             >
 756+ 3DA5             >
 756+ 3DA5             >                endif           ; ok        // for other definitions it "points" the correct handler
 756+ 3DA5             >                // Use of "; ok" to suppress "warning[fwdref]"
 756+ 3DA5             >
 756+ 3DA5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 757+ 3DA5 44 27 CD 25                  dw      TWO, DUP, DEVICE, STORE
 757+ 3DA9 B6 35 48 26
 758+ 3DAD 61 23                        dw      SELECT
 759+ 3DAF F4 24                        dw      EXIT
 760+ 3DB1
 761+ 3DB1              //  ______________________________________________________________________
 762+ 3DB1              //
 763+ 3DB1              // autoexec     --
 764+ 3DB1              // this word is called the first time the Forth system boot to
 765+ 3DB1              // load Screen# 1. Once called it patches itself to prevent furhter runs.
 766+ 3DB1                              Colon_Def AUTOEXEC, "AUTOEXEC", is_normal
 766+ 3DB1             >                New_Def  AUTOEXEC, "AUTOEXEC", Enter_Ptr, is_normal ; ok
 766+ 3DB1             >
 766+ 3DB1             >Dict_Ptr        defl    $
 766+ 3DB1             >
 766+ 3DB1             >//              ______________________________________________________________________
 766+ 3DB1             >//              Heap part
 766+ 3DB1             >
 766+ 3DB1             >
 766+ 3DB1             >                org     (Heap_Ptr & $1FFF) + $E000
 766+ EC5A             >
 766+ EC5A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 766+ EC5A             >Latest_Definition defl  Heap_Ptr
 766+ EC5A             >
 766+ EC5A             >                // dummy db directives used to calculate length of namec
 766+ EC5A 41 55 54 4F >                db      "AUTOEXEC"
 766+ EC5E 45 58 45 43 >
 766+ EC62             >len_NFA         defl    $ - temp_NFA
 766+ EC62             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 766+ EC5A             >
 766+ EC5A 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 766+ EC5B 41 55 54 4F >                db      "AUTOEXEC"               // name string in 7-bit ascii, but
 766+ EC5F 45 58 45 43 >
 766+ EC63             >                org     $-1                 // alter last byte of Name just above to set
 766+ EC62 C3          >                db      {b $} | END_BIT     // msb as name end
 766+ EC63             >
 766+ EC63 50 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 766+ EC65             >Prev_Ptr        defl    Heap_Ptr
 766+ EC65             >
 766+ EC65             >mirror_Ptr      defl    $
 766+ EC65             >
 766+ EC65 B3 3D       >                dw      Dict_Ptr + 2        // xt
 766+ EC67             >Heap_Ptr        defl    $ - $E000           // save current HP
 766+ EC67             >
 766+ EC67             >Current_HP      defl  $ - $E000             // used to set HP once!
 766+ EC67             >
 766+ EC67             >//              ______________________________________________________________________
 766+ EC67             >//              Dictionary part
 766+ EC67             >
 766+ EC67             >                org     Dict_Ptr
 766+ 3DB1             >
 766+ 3DB1 65 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 766+ 3DB3             >
 766+ 3DB3             >AUTOEXEC:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 766+ 3DB3 CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 766+ 3DB6             >
 766+ 3DB6             >
 766+ 3DB6             >                endif           ; ok        // for other definitions it "points" the correct handler
 766+ 3DB6             >                // Use of "; ok" to suppress "warning[fwdref]"
 766+ 3DB6             >
 766+ 3DB6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 767+ 3DB6 3D 20 0B 00                  dw      LIT, 11
 768+ 3DBA 3D 20 FD 26                  dw      LIT, NOOP
 769+ 3DBE 3D 20 76 32                  dw      LIT, Autoexec_Ptr
 770+ 3DC2 48 26                        dw      STORE
 771+ 3DC4 B8 3A                        dw      LOAD
 772+ 3DC6
 773+ 3DC6              //              dw      NEEDS_FN, ONE, F_OPEN
 774+ 3DC6              //              dw      LIT, 43, QERROR
 775+ 3DC6              //              dw      DUP, F_INCLUDE
 776+ 3DC6              //              dw      F_CLOSE, DROP
 777+ 3DC6
 778+ 3DC6 1D 32                        dw      QUIT
 779+ 3DC8 F4 24                        dw      EXIT
 780+ 3DCA
 781+ 3DCA
 782+ 3DCA              //  ______________________________________________________________________
 783+ 3DCA              //
 784+ 3DCA              // bye     --
 785+ 3DCA              //
 786+ 3DCA                              Colon_Def BYE, "BYE", is_normal
 786+ 3DCA             >                New_Def  BYE, "BYE", Enter_Ptr, is_normal ; ok
 786+ 3DCA             >
 786+ 3DCA             >Dict_Ptr        defl    $
 786+ 3DCA             >
 786+ 3DCA             >//              ______________________________________________________________________
 786+ 3DCA             >//              Heap part
 786+ 3DCA             >
 786+ 3DCA             >
 786+ 3DCA             >                org     (Heap_Ptr & $1FFF) + $E000
 786+ EC67             >
 786+ EC67             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 786+ EC67             >Latest_Definition defl  Heap_Ptr
 786+ EC67             >
 786+ EC67             >                // dummy db directives used to calculate length of namec
 786+ EC67 42 59 45    >                db      "BYE"
 786+ EC6A             >len_NFA         defl    $ - temp_NFA
 786+ EC6A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 786+ EC67             >
 786+ EC67 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 786+ EC68 42 59 45    >                db      "BYE"               // name string in 7-bit ascii, but
 786+ EC6B             >                org     $-1                 // alter last byte of Name just above to set
 786+ EC6A C5          >                db      {b $} | END_BIT     // msb as name end
 786+ EC6B             >
 786+ EC6B 5A 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 786+ EC6D             >Prev_Ptr        defl    Heap_Ptr
 786+ EC6D             >
 786+ EC6D             >mirror_Ptr      defl    $
 786+ EC6D             >
 786+ EC6D CC 3D       >                dw      Dict_Ptr + 2        // xt
 786+ EC6F             >Heap_Ptr        defl    $ - $E000           // save current HP
 786+ EC6F             >
 786+ EC6F             >Current_HP      defl  $ - $E000             // used to set HP once!
 786+ EC6F             >
 786+ EC6F             >//              ______________________________________________________________________
 786+ EC6F             >//              Dictionary part
 786+ EC6F             >
 786+ EC6F             >                org     Dict_Ptr
 786+ 3DCA             >
 786+ 3DCA 6D 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 786+ 3DCC             >
 786+ 3DCC             >BYE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 786+ 3DCC CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 786+ 3DCF             >
 786+ 3DCF             >
 786+ 3DCF             >                endif           ; ok        // for other definitions it "points" the correct handler
 786+ 3DCF             >                // Use of "; ok" to suppress "warning[fwdref]"
 786+ 3DCF             >
 786+ 3DCF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 787+ 3DCF A5 37                        dw      FLUSH
 788+ 3DD1 F3 36                        dw      EMPTY_BUFFERS
 789+ 3DD3 56 3F 3E 26                  dw      BLK_FH, FETCH, F_CLOSE, DROP
 789+ 3DD7 98 23 B2 25
 790+ 3DDB 36 27 7C 27                  dw      ZERO, PLUS_ORIGIN
 791+ 3DDF 16 34                        dw      BASIC
 792+ 3DE1
 793+ 3DE1              //  ______________________________________________________________________
 794+ 3DE1              //
 795+ 3DE1              // invv     --
 796+ 3DE1              //
 797+ 3DE1              //              Colon_Def INVV, "INVV", is_normal
 798+ 3DE1              //              dw      LIT, 20, EMITC, ONE, EMITC
 799+ 3DE1              //              dw      EXIT
 800+ 3DE1
 801+ 3DE1              //  ______________________________________________________________________
 802+ 3DE1              //
 803+ 3DE1              // truv     --
 804+ 3DE1              //
 805+ 3DE1              //              Colon_Def TRUV, "TRUV", is_normal
 806+ 3DE1              //              dw      LIT, 20, EMITC, ZERO, EMITC
 807+ 3DE1              //              dw      EXIT
 808+ 3DE1
 809+ 3DE1              //  ______________________________________________________________________
 810+ 3DE1              //
 811+ 3DE1              // mark     --
 812+ 3DE1              //
 813+ 3DE1              //              Colon_Def MARK, "MARK", is_normal
 814+ 3DE1              //              dw      INVV, TYPE, TRUV
 815+ 3DE1              //              dw      EXIT
 816+ 3DE1
 817+ 3DE1              //  ______________________________________________________________________
 818+ 3DE1              //
 819+ 3DE1              // back     --
 820+ 3DE1              //
 821+ 3DE1                              Colon_Def BACK, "BACK", is_normal
 821+ 3DE1             >                New_Def  BACK, "BACK", Enter_Ptr, is_normal ; ok
 821+ 3DE1             >
 821+ 3DE1             >Dict_Ptr        defl    $
 821+ 3DE1             >
 821+ 3DE1             >//              ______________________________________________________________________
 821+ 3DE1             >//              Heap part
 821+ 3DE1             >
 821+ 3DE1             >
 821+ 3DE1             >                org     (Heap_Ptr & $1FFF) + $E000
 821+ EC6F             >
 821+ EC6F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 821+ EC6F             >Latest_Definition defl  Heap_Ptr
 821+ EC6F             >
 821+ EC6F             >                // dummy db directives used to calculate length of namec
 821+ EC6F 42 41 43 4B >                db      "BACK"
 821+ EC73             >len_NFA         defl    $ - temp_NFA
 821+ EC73             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 821+ EC6F             >
 821+ EC6F 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 821+ EC70 42 41 43 4B >                db      "BACK"               // name string in 7-bit ascii, but
 821+ EC74             >                org     $-1                 // alter last byte of Name just above to set
 821+ EC73 CB          >                db      {b $} | END_BIT     // msb as name end
 821+ EC74             >
 821+ EC74 67 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 821+ EC76             >Prev_Ptr        defl    Heap_Ptr
 821+ EC76             >
 821+ EC76             >mirror_Ptr      defl    $
 821+ EC76             >
 821+ EC76 E3 3D       >                dw      Dict_Ptr + 2        // xt
 821+ EC78             >Heap_Ptr        defl    $ - $E000           // save current HP
 821+ EC78             >
 821+ EC78             >Current_HP      defl  $ - $E000             // used to set HP once!
 821+ EC78             >
 821+ EC78             >//              ______________________________________________________________________
 821+ EC78             >//              Dictionary part
 821+ EC78             >
 821+ EC78             >                org     Dict_Ptr
 821+ 3DE1             >
 821+ 3DE1 76 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 821+ 3DE3             >
 821+ 3DE3             >BACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 821+ 3DE3 CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 821+ 3DE6             >
 821+ 3DE6             >
 821+ 3DE6             >                endif           ; ok        // for other definitions it "points" the correct handler
 821+ 3DE6             >                // Use of "; ok" to suppress "warning[fwdref]"
 821+ 3DE6             >
 821+ 3DE6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 822+ 3DE6 5B 28 9A 28                  dw      HERE, SUBTRACT, COMMA
 822+ 3DEA 71 28
 823+ 3DEC F4 24                        dw      EXIT
 824+ 3DEE
 825+ 3DEE              //  ______________________________________________________________________
 826+ 3DEE              //
 827+ 3DEE              // if          ( -- a 2 ) \ compile-time
 828+ 3DEE              // IF ... THEN
 829+ 3DEE              // IF ... ELSE ... ENDIF
 830+ 3DEE                              Colon_Def IF, "IF", is_immediate
 830+ 3DEE             >                New_Def  IF, "IF", Enter_Ptr, is_immediate ; ok
 830+ 3DEE             >
 830+ 3DEE             >Dict_Ptr        defl    $
 830+ 3DEE             >
 830+ 3DEE             >//              ______________________________________________________________________
 830+ 3DEE             >//              Heap part
 830+ 3DEE             >
 830+ 3DEE             >
 830+ 3DEE             >                org     (Heap_Ptr & $1FFF) + $E000
 830+ EC78             >
 830+ EC78             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 830+ EC78             >Latest_Definition defl  Heap_Ptr
 830+ EC78             >
 830+ EC78             >                // dummy db directives used to calculate length of namec
 830+ EC78 49 46       >                db      "IF"
 830+ EC7A             >len_NFA         defl    $ - temp_NFA
 830+ EC7A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 830+ EC78             >
 830+ EC78 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 830+ EC79 49 46       >                db      "IF"               // name string in 7-bit ascii, but
 830+ EC7B             >                org     $-1                 // alter last byte of Name just above to set
 830+ EC7A C6          >                db      {b $} | END_BIT     // msb as name end
 830+ EC7B             >
 830+ EC7B 6F 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 830+ EC7D             >Prev_Ptr        defl    Heap_Ptr
 830+ EC7D             >
 830+ EC7D             >mirror_Ptr      defl    $
 830+ EC7D             >
 830+ EC7D F0 3D       >                dw      Dict_Ptr + 2        // xt
 830+ EC7F             >Heap_Ptr        defl    $ - $E000           // save current HP
 830+ EC7F             >
 830+ EC7F             >Current_HP      defl  $ - $E000             // used to set HP once!
 830+ EC7F             >
 830+ EC7F             >//              ______________________________________________________________________
 830+ EC7F             >//              Dictionary part
 830+ EC7F             >
 830+ EC7F             >                org     Dict_Ptr
 830+ 3DEE             >
 830+ 3DEE 7D 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 830+ 3DF0             >
 830+ 3DF0             >IF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 830+ 3DF0 CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 830+ 3DF3             >
 830+ 3DF3             >
 830+ 3DF3             >                endif           ; ok        // for other definitions it "points" the correct handler
 830+ 3DF3             >                // Use of "; ok" to suppress "warning[fwdref]"
 830+ 3DF3             >
 830+ 3DF3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 831+ 3DF3 07 2B 8F 20                  dw      COMPILE, ZBRANCH
 832+ 3DF7 5B 28 36 27                  dw      HERE, ZERO, COMMA
 832+ 3DFB 71 28
 833+ 3DFD 44 27                        dw      TWO
 834+ 3DFF F4 24                        dw      EXIT
 835+ 3E01
 836+ 3E01              //  ______________________________________________________________________
 837+ 3E01              //
 838+ 3E01              // then        ( a 2 -- ) \ compile-time
 839+ 3E01              //
 840+ 3E01                              Colon_Def THEN, "THEN", is_immediate
 840+ 3E01             >                New_Def  THEN, "THEN", Enter_Ptr, is_immediate ; ok
 840+ 3E01             >
 840+ 3E01             >Dict_Ptr        defl    $
 840+ 3E01             >
 840+ 3E01             >//              ______________________________________________________________________
 840+ 3E01             >//              Heap part
 840+ 3E01             >
 840+ 3E01             >
 840+ 3E01             >                org     (Heap_Ptr & $1FFF) + $E000
 840+ EC7F             >
 840+ EC7F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 840+ EC7F             >Latest_Definition defl  Heap_Ptr
 840+ EC7F             >
 840+ EC7F             >                // dummy db directives used to calculate length of namec
 840+ EC7F 54 48 45 4E >                db      "THEN"
 840+ EC83             >len_NFA         defl    $ - temp_NFA
 840+ EC83             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 840+ EC7F             >
 840+ EC7F C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 840+ EC80 54 48 45 4E >                db      "THEN"               // name string in 7-bit ascii, but
 840+ EC84             >                org     $-1                 // alter last byte of Name just above to set
 840+ EC83 CE          >                db      {b $} | END_BIT     // msb as name end
 840+ EC84             >
 840+ EC84 78 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 840+ EC86             >Prev_Ptr        defl    Heap_Ptr
 840+ EC86             >
 840+ EC86             >mirror_Ptr      defl    $
 840+ EC86             >
 840+ EC86 03 3E       >                dw      Dict_Ptr + 2        // xt
 840+ EC88             >Heap_Ptr        defl    $ - $E000           // save current HP
 840+ EC88             >
 840+ EC88             >Current_HP      defl  $ - $E000             // used to set HP once!
 840+ EC88             >
 840+ EC88             >//              ______________________________________________________________________
 840+ EC88             >//              Dictionary part
 840+ EC88             >
 840+ EC88             >                org     Dict_Ptr
 840+ 3E01             >
 840+ 3E01 86 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 840+ 3E03             >
 840+ 3E03             >THEN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 840+ 3E03 CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 840+ 3E06             >
 840+ 3E06             >
 840+ 3E06             >                endif           ; ok        // for other definitions it "points" the correct handler
 840+ 3E06             >                // Use of "; ok" to suppress "warning[fwdref]"
 840+ 3E06             >
 840+ 3E06             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 841+ 3E06 AC 2A                        dw      QCOMP
 842+ 3E08 44 27 D0 2A                  dw      TWO, QPAIRS
 843+ 3E0C 5B 28 A9 25                  dw      HERE, OVER, SUBTRACT, SWAP, STORE
 843+ 3E10 9A 28 C6 25
 843+ 3E14 48 26
 844+ 3E16 F4 24                        dw      EXIT
 845+ 3E18
 846+ 3E18              //  ______________________________________________________________________
 847+ 3E18              //
 848+ 3E18              // endif       ( a 2 -- ) \ compile-time
 849+ 3E18              //
 850+ 3E18                              Colon_Def ENDIF, "ENDIF", is_immediate
 850+ 3E18             >                New_Def  ENDIF, "ENDIF", Enter_Ptr, is_immediate ; ok
 850+ 3E18             >
 850+ 3E18             >Dict_Ptr        defl    $
 850+ 3E18             >
 850+ 3E18             >//              ______________________________________________________________________
 850+ 3E18             >//              Heap part
 850+ 3E18             >
 850+ 3E18             >
 850+ 3E18             >                org     (Heap_Ptr & $1FFF) + $E000
 850+ EC88             >
 850+ EC88             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 850+ EC88             >Latest_Definition defl  Heap_Ptr
 850+ EC88             >
 850+ EC88             >                // dummy db directives used to calculate length of namec
 850+ EC88 45 4E 44 49 >                db      "ENDIF"
 850+ EC8C 46          >
 850+ EC8D             >len_NFA         defl    $ - temp_NFA
 850+ EC8D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 850+ EC88             >
 850+ EC88 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 850+ EC89 45 4E 44 49 >                db      "ENDIF"               // name string in 7-bit ascii, but
 850+ EC8D 46          >
 850+ EC8E             >                org     $-1                 // alter last byte of Name just above to set
 850+ EC8D C6          >                db      {b $} | END_BIT     // msb as name end
 850+ EC8E             >
 850+ EC8E 7F 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 850+ EC90             >Prev_Ptr        defl    Heap_Ptr
 850+ EC90             >
 850+ EC90             >mirror_Ptr      defl    $
 850+ EC90             >
 850+ EC90 1A 3E       >                dw      Dict_Ptr + 2        // xt
 850+ EC92             >Heap_Ptr        defl    $ - $E000           // save current HP
 850+ EC92             >
 850+ EC92             >Current_HP      defl  $ - $E000             // used to set HP once!
 850+ EC92             >
 850+ EC92             >//              ______________________________________________________________________
 850+ EC92             >//              Dictionary part
 850+ EC92             >
 850+ EC92             >                org     Dict_Ptr
 850+ 3E18             >
 850+ 3E18 90 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 850+ 3E1A             >
 850+ 3E1A             >ENDIF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 850+ 3E1A CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 850+ 3E1D             >
 850+ 3E1D             >
 850+ 3E1D             >                endif           ; ok        // for other definitions it "points" the correct handler
 850+ 3E1D             >                // Use of "; ok" to suppress "warning[fwdref]"
 850+ 3E1D             >
 850+ 3E1D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 851+ 3E1D 03 3E                        dw      THEN
 852+ 3E1F F4 24                        dw      EXIT
 853+ 3E21
 854+ 3E21              //  ______________________________________________________________________
 855+ 3E21              //
 856+ 3E21              // else        ( a1 2 -- a2 2 ) \ compile-time
 857+ 3E21              //
 858+ 3E21                              Colon_Def ELSE, "ELSE", is_immediate
 858+ 3E21             >                New_Def  ELSE, "ELSE", Enter_Ptr, is_immediate ; ok
 858+ 3E21             >
 858+ 3E21             >Dict_Ptr        defl    $
 858+ 3E21             >
 858+ 3E21             >//              ______________________________________________________________________
 858+ 3E21             >//              Heap part
 858+ 3E21             >
 858+ 3E21             >
 858+ 3E21             >                org     (Heap_Ptr & $1FFF) + $E000
 858+ EC92             >
 858+ EC92             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 858+ EC92             >Latest_Definition defl  Heap_Ptr
 858+ EC92             >
 858+ EC92             >                // dummy db directives used to calculate length of namec
 858+ EC92 45 4C 53 45 >                db      "ELSE"
 858+ EC96             >len_NFA         defl    $ - temp_NFA
 858+ EC96             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 858+ EC92             >
 858+ EC92 C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 858+ EC93 45 4C 53 45 >                db      "ELSE"               // name string in 7-bit ascii, but
 858+ EC97             >                org     $-1                 // alter last byte of Name just above to set
 858+ EC96 C5          >                db      {b $} | END_BIT     // msb as name end
 858+ EC97             >
 858+ EC97 88 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 858+ EC99             >Prev_Ptr        defl    Heap_Ptr
 858+ EC99             >
 858+ EC99             >mirror_Ptr      defl    $
 858+ EC99             >
 858+ EC99 23 3E       >                dw      Dict_Ptr + 2        // xt
 858+ EC9B             >Heap_Ptr        defl    $ - $E000           // save current HP
 858+ EC9B             >
 858+ EC9B             >Current_HP      defl  $ - $E000             // used to set HP once!
 858+ EC9B             >
 858+ EC9B             >//              ______________________________________________________________________
 858+ EC9B             >//              Dictionary part
 858+ EC9B             >
 858+ EC9B             >                org     Dict_Ptr
 858+ 3E21             >
 858+ 3E21 99 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 858+ 3E23             >
 858+ 3E23             >ELSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 858+ 3E23 CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 858+ 3E26             >
 858+ 3E26             >
 858+ 3E26             >                endif           ; ok        // for other definitions it "points" the correct handler
 858+ 3E26             >                // Use of "; ok" to suppress "warning[fwdref]"
 858+ 3E26             >
 858+ 3E26             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 859+ 3E26 AC 2A                        dw      QCOMP
 860+ 3E28 44 27 D0 2A                  dw      TWO, QPAIRS
 861+ 3E2C 07 2B 82 20                  dw      COMPILE, BRANCH
 862+ 3E30 5B 28 36 27                  dw      HERE, ZERO, COMMA
 862+ 3E34 71 28
 863+ 3E36 C6 25 44 27                  dw      SWAP, TWO, THEN
 863+ 3E3A 03 3E
 864+ 3E3C 44 27                        dw      TWO
 865+ 3E3E F4 24                        dw      EXIT
 866+ 3E40
 867+ 3E40              //  ______________________________________________________________________
 868+ 3E40              //
 869+ 3E40              // begin        ( -- a 1 ) \ compile-time
 870+ 3E40              // BEGIN ... AGAIN
 871+ 3E40              // BEGIN ... f UNTIL
 872+ 3E40              // BEGIN ... f WHILE ... REPEAT
 873+ 3E40                              Colon_Def BEGIN, "BEGIN", is_immediate
 873+ 3E40             >                New_Def  BEGIN, "BEGIN", Enter_Ptr, is_immediate ; ok
 873+ 3E40             >
 873+ 3E40             >Dict_Ptr        defl    $
 873+ 3E40             >
 873+ 3E40             >//              ______________________________________________________________________
 873+ 3E40             >//              Heap part
 873+ 3E40             >
 873+ 3E40             >
 873+ 3E40             >                org     (Heap_Ptr & $1FFF) + $E000
 873+ EC9B             >
 873+ EC9B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 873+ EC9B             >Latest_Definition defl  Heap_Ptr
 873+ EC9B             >
 873+ EC9B             >                // dummy db directives used to calculate length of namec
 873+ EC9B 42 45 47 49 >                db      "BEGIN"
 873+ EC9F 4E          >
 873+ ECA0             >len_NFA         defl    $ - temp_NFA
 873+ ECA0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 873+ EC9B             >
 873+ EC9B C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 873+ EC9C 42 45 47 49 >                db      "BEGIN"               // name string in 7-bit ascii, but
 873+ ECA0 4E          >
 873+ ECA1             >                org     $-1                 // alter last byte of Name just above to set
 873+ ECA0 CE          >                db      {b $} | END_BIT     // msb as name end
 873+ ECA1             >
 873+ ECA1 92 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 873+ ECA3             >Prev_Ptr        defl    Heap_Ptr
 873+ ECA3             >
 873+ ECA3             >mirror_Ptr      defl    $
 873+ ECA3             >
 873+ ECA3 42 3E       >                dw      Dict_Ptr + 2        // xt
 873+ ECA5             >Heap_Ptr        defl    $ - $E000           // save current HP
 873+ ECA5             >
 873+ ECA5             >Current_HP      defl  $ - $E000             // used to set HP once!
 873+ ECA5             >
 873+ ECA5             >//              ______________________________________________________________________
 873+ ECA5             >//              Dictionary part
 873+ ECA5             >
 873+ ECA5             >                org     Dict_Ptr
 873+ 3E40             >
 873+ 3E40 A3 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 873+ 3E42             >
 873+ 3E42             >BEGIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 873+ 3E42 CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 873+ 3E45             >
 873+ 3E45             >
 873+ 3E45             >                endif           ; ok        // for other definitions it "points" the correct handler
 873+ 3E45             >                // Use of "; ok" to suppress "warning[fwdref]"
 873+ 3E45             >
 873+ 3E45             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 874+ 3E45 AC 2A                        dw      QCOMP
 875+ 3E47 5B 28                        dw      HERE
 876+ 3E49 44 27                        dw      TWO
 877+ 3E4B F4 24                        dw      EXIT
 878+ 3E4D
 879+ 3E4D              //  ______________________________________________________________________
 880+ 3E4D              //
 881+ 3E4D              // again        ( a 1 -- ) \ compile-time
 882+ 3E4D                              Colon_Def AGAIN, "AGAIN", is_immediate
 882+ 3E4D             >                New_Def  AGAIN, "AGAIN", Enter_Ptr, is_immediate ; ok
 882+ 3E4D             >
 882+ 3E4D             >Dict_Ptr        defl    $
 882+ 3E4D             >
 882+ 3E4D             >//              ______________________________________________________________________
 882+ 3E4D             >//              Heap part
 882+ 3E4D             >
 882+ 3E4D             >
 882+ 3E4D             >                org     (Heap_Ptr & $1FFF) + $E000
 882+ ECA5             >
 882+ ECA5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 882+ ECA5             >Latest_Definition defl  Heap_Ptr
 882+ ECA5             >
 882+ ECA5             >                // dummy db directives used to calculate length of namec
 882+ ECA5 41 47 41 49 >                db      "AGAIN"
 882+ ECA9 4E          >
 882+ ECAA             >len_NFA         defl    $ - temp_NFA
 882+ ECAA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 882+ ECA5             >
 882+ ECA5 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 882+ ECA6 41 47 41 49 >                db      "AGAIN"               // name string in 7-bit ascii, but
 882+ ECAA 4E          >
 882+ ECAB             >                org     $-1                 // alter last byte of Name just above to set
 882+ ECAA CE          >                db      {b $} | END_BIT     // msb as name end
 882+ ECAB             >
 882+ ECAB 9B 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 882+ ECAD             >Prev_Ptr        defl    Heap_Ptr
 882+ ECAD             >
 882+ ECAD             >mirror_Ptr      defl    $
 882+ ECAD             >
 882+ ECAD 4F 3E       >                dw      Dict_Ptr + 2        // xt
 882+ ECAF             >Heap_Ptr        defl    $ - $E000           // save current HP
 882+ ECAF             >
 882+ ECAF             >Current_HP      defl  $ - $E000             // used to set HP once!
 882+ ECAF             >
 882+ ECAF             >//              ______________________________________________________________________
 882+ ECAF             >//              Dictionary part
 882+ ECAF             >
 882+ ECAF             >                org     Dict_Ptr
 882+ 3E4D             >
 882+ 3E4D AD 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 882+ 3E4F             >
 882+ 3E4F             >AGAIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 882+ 3E4F CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 882+ 3E52             >
 882+ 3E52             >
 882+ 3E52             >                endif           ; ok        // for other definitions it "points" the correct handler
 882+ 3E52             >                // Use of "; ok" to suppress "warning[fwdref]"
 882+ 3E52             >
 882+ 3E52             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 883+ 3E52 AC 2A                        dw      QCOMP
 884+ 3E54 44 27 D0 2A                  dw      TWO, QPAIRS
 885+ 3E58 07 2B 82 20                  dw      COMPILE, BRANCH
 886+ 3E5C E3 3D                        dw      BACK
 887+ 3E5E F4 24                        dw      EXIT
 888+ 3E60
 889+ 3E60              //  ______________________________________________________________________
 890+ 3E60              //
 891+ 3E60              // until        ( a 1 -- ) \ compile-time
 892+ 3E60                              Colon_Def UNTIL, "UNTIL", is_immediate
 892+ 3E60             >                New_Def  UNTIL, "UNTIL", Enter_Ptr, is_immediate ; ok
 892+ 3E60             >
 892+ 3E60             >Dict_Ptr        defl    $
 892+ 3E60             >
 892+ 3E60             >//              ______________________________________________________________________
 892+ 3E60             >//              Heap part
 892+ 3E60             >
 892+ 3E60             >
 892+ 3E60             >                org     (Heap_Ptr & $1FFF) + $E000
 892+ ECAF             >
 892+ ECAF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 892+ ECAF             >Latest_Definition defl  Heap_Ptr
 892+ ECAF             >
 892+ ECAF             >                // dummy db directives used to calculate length of namec
 892+ ECAF 55 4E 54 49 >                db      "UNTIL"
 892+ ECB3 4C          >
 892+ ECB4             >len_NFA         defl    $ - temp_NFA
 892+ ECB4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 892+ ECAF             >
 892+ ECAF C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 892+ ECB0 55 4E 54 49 >                db      "UNTIL"               // name string in 7-bit ascii, but
 892+ ECB4 4C          >
 892+ ECB5             >                org     $-1                 // alter last byte of Name just above to set
 892+ ECB4 CC          >                db      {b $} | END_BIT     // msb as name end
 892+ ECB5             >
 892+ ECB5 A5 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 892+ ECB7             >Prev_Ptr        defl    Heap_Ptr
 892+ ECB7             >
 892+ ECB7             >mirror_Ptr      defl    $
 892+ ECB7             >
 892+ ECB7 62 3E       >                dw      Dict_Ptr + 2        // xt
 892+ ECB9             >Heap_Ptr        defl    $ - $E000           // save current HP
 892+ ECB9             >
 892+ ECB9             >Current_HP      defl  $ - $E000             // used to set HP once!
 892+ ECB9             >
 892+ ECB9             >//              ______________________________________________________________________
 892+ ECB9             >//              Dictionary part
 892+ ECB9             >
 892+ ECB9             >                org     Dict_Ptr
 892+ 3E60             >
 892+ 3E60 B7 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 892+ 3E62             >
 892+ 3E62             >UNTIL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 892+ 3E62 CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 892+ 3E65             >
 892+ 3E65             >
 892+ 3E65             >                endif           ; ok        // for other definitions it "points" the correct handler
 892+ 3E65             >                // Use of "; ok" to suppress "warning[fwdref]"
 892+ 3E65             >
 892+ 3E65             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 893+ 3E65 AC 2A                        dw      QCOMP
 894+ 3E67 44 27 D0 2A                  dw      TWO, QPAIRS
 895+ 3E6B 07 2B 8F 20                  dw      COMPILE, ZBRANCH
 896+ 3E6F E3 3D                        dw      BACK
 897+ 3E71 F4 24                        dw      EXIT
 898+ 3E73
 899+ 3E73              //  ______________________________________________________________________
 900+ 3E73              //
 901+ 3E73              // end          ( a 1 -- ) \ compile-time
 902+ 3E73                              Colon_Def END, "END", is_immediate
 902+ 3E73             >                New_Def  END, "END", Enter_Ptr, is_immediate ; ok
 902+ 3E73             >
 902+ 3E73             >Dict_Ptr        defl    $
 902+ 3E73             >
 902+ 3E73             >//              ______________________________________________________________________
 902+ 3E73             >//              Heap part
 902+ 3E73             >
 902+ 3E73             >
 902+ 3E73             >                org     (Heap_Ptr & $1FFF) + $E000
 902+ ECB9             >
 902+ ECB9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 902+ ECB9             >Latest_Definition defl  Heap_Ptr
 902+ ECB9             >
 902+ ECB9             >                // dummy db directives used to calculate length of namec
 902+ ECB9 45 4E 44    >                db      "END"
 902+ ECBC             >len_NFA         defl    $ - temp_NFA
 902+ ECBC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 902+ ECB9             >
 902+ ECB9 C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 902+ ECBA 45 4E 44    >                db      "END"               // name string in 7-bit ascii, but
 902+ ECBD             >                org     $-1                 // alter last byte of Name just above to set
 902+ ECBC C4          >                db      {b $} | END_BIT     // msb as name end
 902+ ECBD             >
 902+ ECBD AF 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 902+ ECBF             >Prev_Ptr        defl    Heap_Ptr
 902+ ECBF             >
 902+ ECBF             >mirror_Ptr      defl    $
 902+ ECBF             >
 902+ ECBF 75 3E       >                dw      Dict_Ptr + 2        // xt
 902+ ECC1             >Heap_Ptr        defl    $ - $E000           // save current HP
 902+ ECC1             >
 902+ ECC1             >Current_HP      defl  $ - $E000             // used to set HP once!
 902+ ECC1             >
 902+ ECC1             >//              ______________________________________________________________________
 902+ ECC1             >//              Dictionary part
 902+ ECC1             >
 902+ ECC1             >                org     Dict_Ptr
 902+ 3E73             >
 902+ 3E73 BF 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 902+ 3E75             >
 902+ 3E75             >END:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 902+ 3E75 CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 902+ 3E78             >
 902+ 3E78             >
 902+ 3E78             >                endif           ; ok        // for other definitions it "points" the correct handler
 902+ 3E78             >                // Use of "; ok" to suppress "warning[fwdref]"
 902+ 3E78             >
 902+ 3E78             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 903+ 3E78 62 3E                        dw      UNTIL
 904+ 3E7A F4 24                        dw      EXIT
 905+ 3E7C
 906+ 3E7C              //  ______________________________________________________________________
 907+ 3E7C              //
 908+ 3E7C              // while        ( a1 1 -- a1 1 a2 4 ) \ compile-time
 909+ 3E7C                              Colon_Def WHILE, "WHILE", is_immediate
 909+ 3E7C             >                New_Def  WHILE, "WHILE", Enter_Ptr, is_immediate ; ok
 909+ 3E7C             >
 909+ 3E7C             >Dict_Ptr        defl    $
 909+ 3E7C             >
 909+ 3E7C             >//              ______________________________________________________________________
 909+ 3E7C             >//              Heap part
 909+ 3E7C             >
 909+ 3E7C             >
 909+ 3E7C             >                org     (Heap_Ptr & $1FFF) + $E000
 909+ ECC1             >
 909+ ECC1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 909+ ECC1             >Latest_Definition defl  Heap_Ptr
 909+ ECC1             >
 909+ ECC1             >                // dummy db directives used to calculate length of namec
 909+ ECC1 57 48 49 4C >                db      "WHILE"
 909+ ECC5 45          >
 909+ ECC6             >len_NFA         defl    $ - temp_NFA
 909+ ECC6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 909+ ECC1             >
 909+ ECC1 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 909+ ECC2 57 48 49 4C >                db      "WHILE"               // name string in 7-bit ascii, but
 909+ ECC6 45          >
 909+ ECC7             >                org     $-1                 // alter last byte of Name just above to set
 909+ ECC6 C5          >                db      {b $} | END_BIT     // msb as name end
 909+ ECC7             >
 909+ ECC7 B9 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 909+ ECC9             >Prev_Ptr        defl    Heap_Ptr
 909+ ECC9             >
 909+ ECC9             >mirror_Ptr      defl    $
 909+ ECC9             >
 909+ ECC9 7E 3E       >                dw      Dict_Ptr + 2        // xt
 909+ ECCB             >Heap_Ptr        defl    $ - $E000           // save current HP
 909+ ECCB             >
 909+ ECCB             >Current_HP      defl  $ - $E000             // used to set HP once!
 909+ ECCB             >
 909+ ECCB             >//              ______________________________________________________________________
 909+ ECCB             >//              Dictionary part
 909+ ECCB             >
 909+ ECCB             >                org     Dict_Ptr
 909+ 3E7C             >
 909+ 3E7C C9 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 909+ 3E7E             >
 909+ 3E7E             >WHILE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 909+ 3E7E CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 909+ 3E81             >
 909+ 3E81             >
 909+ 3E81             >                endif           ; ok        // for other definitions it "points" the correct handler
 909+ 3E81             >                // Use of "; ok" to suppress "warning[fwdref]"
 909+ 3E81             >
 909+ 3E81             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 910+ 3E81 F0 3D                        dw      IF
 911+ 3E83              //              dw      TWO_PLUS // ( that is 4 )
 912+ 3E83 0F 26                        dw      TWO_SWAP
 913+ 3E85 F4 24                        dw      EXIT
 914+ 3E87
 915+ 3E87              //  ______________________________________________________________________
 916+ 3E87              //
 917+ 3E87              // repeat       ( a1 1 a2 4 -- ) \ compile-time
 918+ 3E87                              Colon_Def REPEAT, "REPEAT", is_immediate
 918+ 3E87             >                New_Def  REPEAT, "REPEAT", Enter_Ptr, is_immediate ; ok
 918+ 3E87             >
 918+ 3E87             >Dict_Ptr        defl    $
 918+ 3E87             >
 918+ 3E87             >//              ______________________________________________________________________
 918+ 3E87             >//              Heap part
 918+ 3E87             >
 918+ 3E87             >
 918+ 3E87             >                org     (Heap_Ptr & $1FFF) + $E000
 918+ ECCB             >
 918+ ECCB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 918+ ECCB             >Latest_Definition defl  Heap_Ptr
 918+ ECCB             >
 918+ ECCB             >                // dummy db directives used to calculate length of namec
 918+ ECCB 52 45 50 45 >                db      "REPEAT"
 918+ ECCF 41 54       >
 918+ ECD1             >len_NFA         defl    $ - temp_NFA
 918+ ECD1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 918+ ECCB             >
 918+ ECCB C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 918+ ECCC 52 45 50 45 >                db      "REPEAT"               // name string in 7-bit ascii, but
 918+ ECD0 41 54       >
 918+ ECD2             >                org     $-1                 // alter last byte of Name just above to set
 918+ ECD1 D4          >                db      {b $} | END_BIT     // msb as name end
 918+ ECD2             >
 918+ ECD2 C1 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 918+ ECD4             >Prev_Ptr        defl    Heap_Ptr
 918+ ECD4             >
 918+ ECD4             >mirror_Ptr      defl    $
 918+ ECD4             >
 918+ ECD4 89 3E       >                dw      Dict_Ptr + 2        // xt
 918+ ECD6             >Heap_Ptr        defl    $ - $E000           // save current HP
 918+ ECD6             >
 918+ ECD6             >Current_HP      defl  $ - $E000             // used to set HP once!
 918+ ECD6             >
 918+ ECD6             >//              ______________________________________________________________________
 918+ ECD6             >//              Dictionary part
 918+ ECD6             >
 918+ ECD6             >                org     Dict_Ptr
 918+ 3E87             >
 918+ 3E87 D4 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 918+ 3E89             >
 918+ 3E89             >REPEAT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 918+ 3E89 CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 918+ 3E8C             >
 918+ 3E8C             >
 918+ 3E8C             >                endif           ; ok        // for other definitions it "points" the correct handler
 918+ 3E8C             >                // Use of "; ok" to suppress "warning[fwdref]"
 918+ 3E8C             >
 918+ 3E8C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 919+ 3E8C 4F 3E                        dw      AGAIN
 920+ 3E8E              //              dw      TWO_MINUS
 921+ 3E8E 03 3E                        dw      THEN
 922+ 3E90 F4 24                        dw      EXIT
 923+ 3E92
 924+ 3E92              //  ______________________________________________________________________
 925+ 3E92              //
 926+ 3E92              // ?do-
 927+ 3E92              // special version of "BACK" used by ?DO and LOOP
 928+ 3E92                              Colon_Def C_DO_BACK, "?DO-", is_normal
 928+ 3E92             >                New_Def  C_DO_BACK, "?DO-", Enter_Ptr, is_normal ; ok
 928+ 3E92             >
 928+ 3E92             >Dict_Ptr        defl    $
 928+ 3E92             >
 928+ 3E92             >//              ______________________________________________________________________
 928+ 3E92             >//              Heap part
 928+ 3E92             >
 928+ 3E92             >
 928+ 3E92             >                org     (Heap_Ptr & $1FFF) + $E000
 928+ ECD6             >
 928+ ECD6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 928+ ECD6             >Latest_Definition defl  Heap_Ptr
 928+ ECD6             >
 928+ ECD6             >                // dummy db directives used to calculate length of namec
 928+ ECD6 3F 44 4F 2D >                db      "?DO-"
 928+ ECDA             >len_NFA         defl    $ - temp_NFA
 928+ ECDA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 928+ ECD6             >
 928+ ECD6 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 928+ ECD7 3F 44 4F 2D >                db      "?DO-"               // name string in 7-bit ascii, but
 928+ ECDB             >                org     $-1                 // alter last byte of Name just above to set
 928+ ECDA AD          >                db      {b $} | END_BIT     // msb as name end
 928+ ECDB             >
 928+ ECDB CB 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 928+ ECDD             >Prev_Ptr        defl    Heap_Ptr
 928+ ECDD             >
 928+ ECDD             >mirror_Ptr      defl    $
 928+ ECDD             >
 928+ ECDD 94 3E       >                dw      Dict_Ptr + 2        // xt
 928+ ECDF             >Heap_Ptr        defl    $ - $E000           // save current HP
 928+ ECDF             >
 928+ ECDF             >Current_HP      defl  $ - $E000             // used to set HP once!
 928+ ECDF             >
 928+ ECDF             >//              ______________________________________________________________________
 928+ ECDF             >//              Dictionary part
 928+ ECDF             >
 928+ ECDF             >                org     Dict_Ptr
 928+ 3E92             >
 928+ 3E92 DD 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 928+ 3E94             >
 928+ 3E94             >C_DO_BACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 928+ 3E94 CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 928+ 3E97             >
 928+ 3E97             >
 928+ 3E97             >                endif           ; ok        // for other definitions it "points" the correct handler
 928+ 3E97             >                // Use of "; ok" to suppress "warning[fwdref]"
 928+ 3E97             >
 928+ 3E97             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 929+ 3E97 E3 3D                        dw      BACK
 930+ 3E99              CDoBack_Begin:
 931+ 3E99 DB 24 19 28                  dw      SPFETCH, CSP, FETCH, SUBTRACT
 931+ 3E9D 3E 26 9A 28
 932+ 3EA1 8F 20                        dw      ZBRANCH
 933+ 3EA3 0A 00                        dw      CDoBack_While - $
 934+ 3EA5 6E 25 03 3E                  dw          TWO_PLUS, THEN
 935+ 3EA9 82 20                        dw      BRANCH
 936+ 3EAB EE FF                        dw      CDoBack_Begin - $
 937+ 3EAD              CDoBack_While:
 938+ 3EAD DF 2A 19 28                  dw      QCSP, CSP, STORE
 938+ 3EB1 48 26
 939+ 3EB3 F4 24                        dw      EXIT
 940+ 3EB5
 941+ 3EB5              //  ______________________________________________________________________
 942+ 3EB5              //
 943+ 3EB5              // do
 944+ 3EB5              // DO  ... LOOP
 945+ 3EB5              // DO  ... n +LOOP
 946+ 3EB5              // ?DO ... LOOP
 947+ 3EB5              // ?DO ... n +LOOP
 948+ 3EB5                              Colon_Def DO, "DO", is_immediate
 948+ 3EB5             >                New_Def  DO, "DO", Enter_Ptr, is_immediate ; ok
 948+ 3EB5             >
 948+ 3EB5             >Dict_Ptr        defl    $
 948+ 3EB5             >
 948+ 3EB5             >//              ______________________________________________________________________
 948+ 3EB5             >//              Heap part
 948+ 3EB5             >
 948+ 3EB5             >
 948+ 3EB5             >                org     (Heap_Ptr & $1FFF) + $E000
 948+ ECDF             >
 948+ ECDF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 948+ ECDF             >Latest_Definition defl  Heap_Ptr
 948+ ECDF             >
 948+ ECDF             >                // dummy db directives used to calculate length of namec
 948+ ECDF 44 4F       >                db      "DO"
 948+ ECE1             >len_NFA         defl    $ - temp_NFA
 948+ ECE1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 948+ ECDF             >
 948+ ECDF C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 948+ ECE0 44 4F       >                db      "DO"               // name string in 7-bit ascii, but
 948+ ECE2             >                org     $-1                 // alter last byte of Name just above to set
 948+ ECE1 CF          >                db      {b $} | END_BIT     // msb as name end
 948+ ECE2             >
 948+ ECE2 D6 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 948+ ECE4             >Prev_Ptr        defl    Heap_Ptr
 948+ ECE4             >
 948+ ECE4             >mirror_Ptr      defl    $
 948+ ECE4             >
 948+ ECE4 B7 3E       >                dw      Dict_Ptr + 2        // xt
 948+ ECE6             >Heap_Ptr        defl    $ - $E000           // save current HP
 948+ ECE6             >
 948+ ECE6             >Current_HP      defl  $ - $E000             // used to set HP once!
 948+ ECE6             >
 948+ ECE6             >//              ______________________________________________________________________
 948+ ECE6             >//              Dictionary part
 948+ ECE6             >
 948+ ECE6             >                org     Dict_Ptr
 948+ 3EB5             >
 948+ 3EB5 E4 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 948+ 3EB7             >
 948+ 3EB7             >DO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 948+ 3EB7 CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 948+ 3EBA             >
 948+ 3EBA             >
 948+ 3EBA             >                endif           ; ok        // for other definitions it "points" the correct handler
 948+ 3EBA             >                // Use of "; ok" to suppress "warning[fwdref]"
 948+ 3EBA             >
 948+ 3EBA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 949+ 3EBA 07 2B CE 20                  dw      COMPILE, C_DO
 950+ 3EBE 19 28 3E 26                  dw      CSP, FETCH, STORE_CSP
 950+ 3EC2 8A 2A
 951+ 3EC4 5B 28 4B 27                  dw      HERE, THREE
 952+ 3EC8 F4 24                        dw      EXIT
 953+ 3ECA
 954+ 3ECA              //  ______________________________________________________________________
 955+ 3ECA              //
 956+ 3ECA              // loop
 957+ 3ECA                              Colon_Def LOOP, "LOOP", is_immediate
 957+ 3ECA             >                New_Def  LOOP, "LOOP", Enter_Ptr, is_immediate ; ok
 957+ 3ECA             >
 957+ 3ECA             >Dict_Ptr        defl    $
 957+ 3ECA             >
 957+ 3ECA             >//              ______________________________________________________________________
 957+ 3ECA             >//              Heap part
 957+ 3ECA             >
 957+ 3ECA             >
 957+ 3ECA             >                org     (Heap_Ptr & $1FFF) + $E000
 957+ ECE6             >
 957+ ECE6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 957+ ECE6             >Latest_Definition defl  Heap_Ptr
 957+ ECE6             >
 957+ ECE6             >                // dummy db directives used to calculate length of namec
 957+ ECE6 4C 4F 4F 50 >                db      "LOOP"
 957+ ECEA             >len_NFA         defl    $ - temp_NFA
 957+ ECEA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 957+ ECE6             >
 957+ ECE6 C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 957+ ECE7 4C 4F 4F 50 >                db      "LOOP"               // name string in 7-bit ascii, but
 957+ ECEB             >                org     $-1                 // alter last byte of Name just above to set
 957+ ECEA D0          >                db      {b $} | END_BIT     // msb as name end
 957+ ECEB             >
 957+ ECEB DF 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 957+ ECED             >Prev_Ptr        defl    Heap_Ptr
 957+ ECED             >
 957+ ECED             >mirror_Ptr      defl    $
 957+ ECED             >
 957+ ECED CC 3E       >                dw      Dict_Ptr + 2        // xt
 957+ ECEF             >Heap_Ptr        defl    $ - $E000           // save current HP
 957+ ECEF             >
 957+ ECEF             >Current_HP      defl  $ - $E000             // used to set HP once!
 957+ ECEF             >
 957+ ECEF             >//              ______________________________________________________________________
 957+ ECEF             >//              Dictionary part
 957+ ECEF             >
 957+ ECEF             >                org     Dict_Ptr
 957+ 3ECA             >
 957+ 3ECA ED 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 957+ 3ECC             >
 957+ 3ECC             >LOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 957+ 3ECC CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 957+ 3ECF             >
 957+ 3ECF             >
 957+ 3ECF             >                endif           ; ok        // for other definitions it "points" the correct handler
 957+ 3ECF             >                // Use of "; ok" to suppress "warning[fwdref]"
 957+ 3ECF             >
 957+ 3ECF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 958+ 3ECF 4B 27 D0 2A                  dw      THREE, QPAIRS
 959+ 3ED3 07 2B 7A 20                  dw      COMPILE, C_LOOP
 960+ 3ED7 94 3E                        dw      C_DO_BACK
 961+ 3ED9 F4 24                        dw      EXIT
 962+ 3EDB
 963+ 3EDB              //  ______________________________________________________________________
 964+ 3EDB              //
 965+ 3EDB              // +loop
 966+ 3EDB                              Colon_Def PLOOP, "+LOOP", is_immediate
 966+ 3EDB             >                New_Def  PLOOP, "+LOOP", Enter_Ptr, is_immediate ; ok
 966+ 3EDB             >
 966+ 3EDB             >Dict_Ptr        defl    $
 966+ 3EDB             >
 966+ 3EDB             >//              ______________________________________________________________________
 966+ 3EDB             >//              Heap part
 966+ 3EDB             >
 966+ 3EDB             >
 966+ 3EDB             >                org     (Heap_Ptr & $1FFF) + $E000
 966+ ECEF             >
 966+ ECEF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 966+ ECEF             >Latest_Definition defl  Heap_Ptr
 966+ ECEF             >
 966+ ECEF             >                // dummy db directives used to calculate length of namec
 966+ ECEF 2B 4C 4F 4F >                db      "+LOOP"
 966+ ECF3 50          >
 966+ ECF4             >len_NFA         defl    $ - temp_NFA
 966+ ECF4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 966+ ECEF             >
 966+ ECEF C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 966+ ECF0 2B 4C 4F 4F >                db      "+LOOP"               // name string in 7-bit ascii, but
 966+ ECF4 50          >
 966+ ECF5             >                org     $-1                 // alter last byte of Name just above to set
 966+ ECF4 D0          >                db      {b $} | END_BIT     // msb as name end
 966+ ECF5             >
 966+ ECF5 E6 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 966+ ECF7             >Prev_Ptr        defl    Heap_Ptr
 966+ ECF7             >
 966+ ECF7             >mirror_Ptr      defl    $
 966+ ECF7             >
 966+ ECF7 DD 3E       >                dw      Dict_Ptr + 2        // xt
 966+ ECF9             >Heap_Ptr        defl    $ - $E000           // save current HP
 966+ ECF9             >
 966+ ECF9             >Current_HP      defl  $ - $E000             // used to set HP once!
 966+ ECF9             >
 966+ ECF9             >//              ______________________________________________________________________
 966+ ECF9             >//              Dictionary part
 966+ ECF9             >
 966+ ECF9             >                org     Dict_Ptr
 966+ 3EDB             >
 966+ 3EDB F7 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 966+ 3EDD             >
 966+ 3EDD             >PLOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 966+ 3EDD CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 966+ 3EE0             >
 966+ 3EE0             >
 966+ 3EE0             >                endif           ; ok        // for other definitions it "points" the correct handler
 966+ 3EE0             >                // Use of "; ok" to suppress "warning[fwdref]"
 966+ 3EE0             >
 966+ 3EE0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 967+ 3EE0 4B 27 D0 2A                  dw      THREE, QPAIRS
 968+ 3EE4 07 2B 4B 20                  dw      COMPILE, C_PLOOP
 969+ 3EE8 94 3E                        dw      C_DO_BACK
 970+ 3EEA F4 24                        dw      EXIT
 971+ 3EEC
 972+ 3EEC              //  ______________________________________________________________________
 973+ 3EEC              //
 974+ 3EEC              // ?do
 975+ 3EEC                              Colon_Def QDO, "?DO", is_immediate
 975+ 3EEC             >                New_Def  QDO, "?DO", Enter_Ptr, is_immediate ; ok
 975+ 3EEC             >
 975+ 3EEC             >Dict_Ptr        defl    $
 975+ 3EEC             >
 975+ 3EEC             >//              ______________________________________________________________________
 975+ 3EEC             >//              Heap part
 975+ 3EEC             >
 975+ 3EEC             >
 975+ 3EEC             >                org     (Heap_Ptr & $1FFF) + $E000
 975+ ECF9             >
 975+ ECF9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 975+ ECF9             >Latest_Definition defl  Heap_Ptr
 975+ ECF9             >
 975+ ECF9             >                // dummy db directives used to calculate length of namec
 975+ ECF9 3F 44 4F    >                db      "?DO"
 975+ ECFC             >len_NFA         defl    $ - temp_NFA
 975+ ECFC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 975+ ECF9             >
 975+ ECF9 C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 975+ ECFA 3F 44 4F    >                db      "?DO"               // name string in 7-bit ascii, but
 975+ ECFD             >                org     $-1                 // alter last byte of Name just above to set
 975+ ECFC CF          >                db      {b $} | END_BIT     // msb as name end
 975+ ECFD             >
 975+ ECFD EF 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 975+ ECFF             >Prev_Ptr        defl    Heap_Ptr
 975+ ECFF             >
 975+ ECFF             >mirror_Ptr      defl    $
 975+ ECFF             >
 975+ ECFF EE 3E       >                dw      Dict_Ptr + 2        // xt
 975+ ED01             >Heap_Ptr        defl    $ - $E000           // save current HP
 975+ ED01             >
 975+ ED01             >Current_HP      defl  $ - $E000             // used to set HP once!
 975+ ED01             >
 975+ ED01             >//              ______________________________________________________________________
 975+ ED01             >//              Dictionary part
 975+ ED01             >
 975+ ED01             >                org     Dict_Ptr
 975+ 3EEC             >
 975+ 3EEC FF 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 975+ 3EEE             >
 975+ 3EEE             >QDO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 975+ 3EEE CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 975+ 3EF1             >
 975+ 3EF1             >
 975+ 3EF1             >                endif           ; ok        // for other definitions it "points" the correct handler
 975+ 3EF1             >                // Use of "; ok" to suppress "warning[fwdref]"
 975+ 3EF1             >
 975+ 3EF1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 976+ 3EF1 07 2B A6 20                  dw      COMPILE, C_Q_DO
 977+ 3EF5 19 28 3E 26                  dw      CSP, FETCH, STORE_CSP
 977+ 3EF9 8A 2A
 978+ 3EFB 5B 28 36 27                  dw      HERE, ZERO, COMMA, ZERO
 978+ 3EFF 71 28 36 27
 979+ 3F03 5B 28 4B 27                  dw      HERE, THREE
 980+ 3F07 F4 24                        dw      EXIT
 981+ 3F09
 982+ 3F09              //  ______________________________________________________________________
 983+ 3F09              //
 984+ 3F09              // \
 985+ 3F09                              Colon_Def BACKSLASH, "\\", is_immediate  // this is a single back-slash
 985+ 3F09             >                New_Def  BACKSLASH, "\\", Enter_Ptr, is_immediate ; ok
 985+ 3F09             >
 985+ 3F09             >Dict_Ptr        defl    $
 985+ 3F09             >
 985+ 3F09             >//              ______________________________________________________________________
 985+ 3F09             >//              Heap part
 985+ 3F09             >
 985+ 3F09             >
 985+ 3F09             >                org     (Heap_Ptr & $1FFF) + $E000
 985+ ED01             >
 985+ ED01             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 985+ ED01             >Latest_Definition defl  Heap_Ptr
 985+ ED01             >
 985+ ED01             >                // dummy db directives used to calculate length of namec
 985+ ED01 5C          >                db      "\\"
 985+ ED02             >len_NFA         defl    $ - temp_NFA
 985+ ED02             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 985+ ED01             >
 985+ ED01 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 985+ ED02 5C          >                db      "\\"               // name string in 7-bit ascii, but
 985+ ED03             >                org     $-1                 // alter last byte of Name just above to set
 985+ ED02 DC          >                db      {b $} | END_BIT     // msb as name end
 985+ ED03             >
 985+ ED03 F9 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 985+ ED05             >Prev_Ptr        defl    Heap_Ptr
 985+ ED05             >
 985+ ED05             >mirror_Ptr      defl    $
 985+ ED05             >
 985+ ED05 0B 3F       >                dw      Dict_Ptr + 2        // xt
 985+ ED07             >Heap_Ptr        defl    $ - $E000           // save current HP
 985+ ED07             >
 985+ ED07             >Current_HP      defl  $ - $E000             // used to set HP once!
 985+ ED07             >
 985+ ED07             >//              ______________________________________________________________________
 985+ ED07             >//              Dictionary part
 985+ ED07             >
 985+ ED07             >                org     Dict_Ptr
 985+ 3F09             >
 985+ 3F09 05 0D       >                dw      mirror_Ptr - $E000 + Heap_offset
 985+ 3F0B             >
 985+ 3F0B             >BACKSLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 985+ 3F0B CD E1 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 985+ 3F0E             >
 985+ 3F0E             >
 985+ 3F0E             >                endif           ; ok        // for other definitions it "points" the correct handler
 985+ 3F0E             >                // Use of "; ok" to suppress "warning[fwdref]"
 985+ 3F0E             >
 985+ 3F0E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 986+ 3F0E D7 27 3E 26                  dw      BLK, FETCH
 987+ 3F12 8F 20                        dw      ZBRANCH
 988+ 3F14 30 00                        dw      Backslash_Else_1 - $
 989+ 3F16 D7 27 3E 26                  dw          BLK, FETCH, ONE, GREATER  // BLOCK 1 is used as temp-line in INCLUDE file
 989+ 3F1A 3D 27 D4 28
 990+ 3F1E 8F 20                        dw          ZBRANCH
 991+ 3F20 18 00                        dw          Backslash_Else_2 - $
 992+ 3F22 DD 27 3E 26                  dw              TO_IN, FETCH, CL, MOD, CL
 992+ 3F26 60 27 3F 35
 992+ 3F2A 60 27
 993+ 3F2C C6 25 9A 28                  dw              SWAP, SUBTRACT, TO_IN, PLUSSTORE
 993+ 3F30 DD 27 26 26
 994+ 3F34 82 20                        dw          BRANCH
 995+ 3F36 0A 00                        dw          Backslash_Endif_2 - $
 996+ 3F38              Backslash_Else_2:
 997+ 3F38 67 27 7B 25                  dw              BBUF, CELL_MINUS, TO_IN, STORE
 997+ 3F3C DD 27 48 26
 998+ 3F40              Backslash_Endif_2:
 999+ 3F40 82 20                        dw      BRANCH
1000+ 3F42 10 00                        dw      Backslash_Endif_1 - $
1001+ 3F44              Backslash_Else_1:
1002+ 3F44 36 27 9B 27                  dw          ZERO, TIB, FETCH, TO_IN, FETCH, PLUS, STORE
1002+ 3F48 3E 26 DD 27
1002+ 3F4C 3E 26 47 25
1002+ 3F50 48 26
1003+ 3F52              Backslash_Endif_1:
1004+ 3F52 F4 24                        dw      EXIT
1005+ 3F54
1006+ 3F54              //  ______________________________________________________________________
1007+ 3F54              //
1008+ 3F54              // blk-fh
1009+ 3F54                              Variable_Def BLK_FH,   "BLK-FH",   1
1009+ 3F54             >                New_Def  BLK_FH, "BLK-FH", Variable_Ptr, is_normal
1009+ 3F54             >
1009+ 3F54             >Dict_Ptr        defl    $
1009+ 3F54             >
1009+ 3F54             >//              ______________________________________________________________________
1009+ 3F54             >//              Heap part
1009+ 3F54             >
1009+ 3F54             >
1009+ 3F54             >                org     (Heap_Ptr & $1FFF) + $E000
1009+ ED07             >
1009+ ED07             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1009+ ED07             >Latest_Definition defl  Heap_Ptr
1009+ ED07             >
1009+ ED07             >                // dummy db directives used to calculate length of namec
1009+ ED07 42 4C 4B 2D >                db      "BLK-FH"
1009+ ED0B 46 48       >
1009+ ED0D             >len_NFA         defl    $ - temp_NFA
1009+ ED0D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1009+ ED07             >
1009+ ED07 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1009+ ED08 42 4C 4B 2D >                db      "BLK-FH"               // name string in 7-bit ascii, but
1009+ ED0C 46 48       >
1009+ ED0E             >                org     $-1                 // alter last byte of Name just above to set
1009+ ED0D C8          >                db      {b $} | END_BIT     // msb as name end
1009+ ED0E             >
1009+ ED0E 01 0D       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1009+ ED10             >Prev_Ptr        defl    Heap_Ptr
1009+ ED10             >
1009+ ED10             >mirror_Ptr      defl    $
1009+ ED10             >
1009+ ED10 56 3F       >                dw      Dict_Ptr + 2        // xt
1009+ ED12             >Heap_Ptr        defl    $ - $E000           // save current HP
1009+ ED12             >
1009+ ED12             >Current_HP      defl  $ - $E000             // used to set HP once!
1009+ ED12             >
1009+ ED12             >//              ______________________________________________________________________
1009+ ED12             >//              Dictionary part
1009+ ED12             >
1009+ ED12             >                org     Dict_Ptr
1009+ 3F54             >
1009+ 3F54 10 0D       >                dw      mirror_Ptr - $E000 + Heap_offset
1009+ 3F56             >
1009+ 3F56             >BLK_FH:          if Variable_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1009+ 3F56 CD 1D 27    >                call    Variable_Ptr ; ok        // for primitive definitions  actual code
1009+ 3F59             >
1009+ 3F59             >
1009+ 3F59             >                endif           ; ok        // for other definitions it "points" the correct handler
1009+ 3F59             >                // Use of "; ok" to suppress "warning[fwdref]"
1009+ 3F59             >
1009+ 3F59             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1009+ 3F59 01 00       >                dw      1
1010+ 3F5B
1011+ 3F5B                              New_Def BLK_FNAME,   "BLK-FNAME", Create_Ptr, is_normal
1011+ 3F5B             >
1011+ 3F5B             >Dict_Ptr        defl    $
1011+ 3F5B             >
1011+ 3F5B             >//              ______________________________________________________________________
1011+ 3F5B             >//              Heap part
1011+ 3F5B             >
1011+ 3F5B             >
1011+ 3F5B             >                org     (Heap_Ptr & $1FFF) + $E000
1011+ ED12             >
1011+ ED12             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1011+ ED12             >Latest_Definition defl  Heap_Ptr
1011+ ED12             >
1011+ ED12             >                // dummy db directives used to calculate length of namec
1011+ ED12 42 4C 4B 2D >                db      "BLK-FNAME"
1011+ ED16 46 4E 41 4D >
1011+ ED1A 45          >
1011+ ED1B             >len_NFA         defl    $ - temp_NFA
1011+ ED1B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1011+ ED12             >
1011+ ED12 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1011+ ED13 42 4C 4B 2D >                db      "BLK-FNAME"               // name string in 7-bit ascii, but
1011+ ED17 46 4E 41 4D >
1011+ ED1B 45          >
1011+ ED1C             >                org     $-1                 // alter last byte of Name just above to set
1011+ ED1B C5          >                db      {b $} | END_BIT     // msb as name end
1011+ ED1C             >
1011+ ED1C 07 0D       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1011+ ED1E             >Prev_Ptr        defl    Heap_Ptr
1011+ ED1E             >
1011+ ED1E             >mirror_Ptr      defl    $
1011+ ED1E             >
1011+ ED1E 5D 3F       >                dw      Dict_Ptr + 2        // xt
1011+ ED20             >Heap_Ptr        defl    $ - $E000           // save current HP
1011+ ED20             >
1011+ ED20             >Current_HP      defl  $ - $E000             // used to set HP once!
1011+ ED20             >
1011+ ED20             >//              ______________________________________________________________________
1011+ ED20             >//              Dictionary part
1011+ ED20             >
1011+ ED20             >                org     Dict_Ptr
1011+ 3F5B             >
1011+ 3F5B 1E 0D       >                dw      mirror_Ptr - $E000 + Heap_offset
1011+ 3F5D             >
1011+ 3F5D             >BLK_FNAME:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1011+ 3F5D CD C0 30    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
1011+ 3F60             >
1011+ 3F60             >
1011+ 3F60             >                endif           ; ok        // for other definitions it "points" the correct handler
1011+ 3F60             >                // Use of "; ok" to suppress "warning[fwdref]"
1011+ 3F60             >
1011+ 3F60             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1012+ 3F60 1E           Len_Filename:   db      30
1013+ 3F61 63 3A 2F 74  Blk_filename:   db      "c:/tools/vforth/!Blocks-64.bin", 0
1013+ 3F65 6F 6F 6C 73
1013+ 3F69 2F 76 66 6F
1013+ 3F6D 72 74 68 2F
1013+ 3F71 21 42 6C 6F
1013+ 3F75 63 6B 73 2D
1013+ 3F79 36 34 2E 62
1013+ 3F7D 69 6E 00
1014+ 3F80 00 00 00...                  ds      32
1015+ 3FA0
1016+ 3FA0              Fence_Word:
1017+ 3FA0              //  ______________________________________________________________________
1018+ 3FA0              //
1019+ 3FA0
1020+ 3FA0 00           Here_Dictionary db      0
1021+ 3FA1
# file closed: C:\Zx\CSpect\Projects\vForth17_DOT/source/L3.asm
 126  3FA1
 127  3FA1              // now we save the compiled file so we can either run it or debug it
 128  3FA1                              SAVENEX OPEN "output/main.nex", ORIGIN
 129  3FA1                              SAVENEX CORE 3, 0, 0                                // Next core 3.0.0 required as minimum
 130  3FA1                              SAVENEX CFG  0
 131  3FA1                              SAVENEX BANK 2, 0
 132  3FA1                              SAVENEX AUTO
 133  3FA1                              SAVENEX CLOSE
 134  3FA1
 135  3FA1              //              PAGE 7 ;set 7 page to current slot
 136  3FA1              //              SAVEBIN "ram7.bin",$C000,$4000 ;- save 4000h begin from C000h of RAM to file
 137  3FA1              //              SAVEBIN "output/ram2.bin", $8000, 9800 ;- save 3000h begin from 8000h of RAM to file
 138  3FA1
 139  3FA1                      ////    SAVETAP "output/F16d.tap", CODE, "forth17d", ORIGIN, $2000
 140  3FA1                      ////    SAVETAP "output/F16e.tap", CODE, "forth17e", $E000, $2000
 141  3FA1
 142  3FA1                      ////    SAVEBIN "output/vforth", ORIGIN, $2000
 143  3FA1                      ////    SAVEBIN "output/vforth.bin", $E000, $2000 ;- save 2000h begin from E000h of RAM to file
 144  3FA1
 145  3FA1                              SAVEBIN "output/vforth.1", ORIGIN, $2000
 146  3FA1                              SAVEBIN "output/vforth.2", $E000, $2000 ;- save 2000h begin from E000h of RAM to file
 147  3FA1
 148  3FA1                              // To run must copy vforth and vforth.bin to /dot directory
 149  3FA1                              // then start with
 150  3FA1                              //      .vforth
 151  3FA1
 152  3FA1                              END
# file closed: C:\Zx\CSpect\Projects\vForth17_DOT/source/main.asm
