C:\Zx\CSpect\Projects\vForth17_DOT/source/system.asm(163): error: Duplicate label: CLS
C:\Zx\CSpect\Projects\vForth17_DOT/source/L3.asm(727): ^ emitted from here
# file opened: C:\Zx\CSpect\Projects\vForth17_DOT/source/main.asm
   1  0000              //  ______________________________________________________________________
   2  0000              //
   3  0000              //  main.asm
   4  0000              //  ______________________________________________________________________
   5  0000              //
   6  0000              //  v-Forth 1.7 NextZXOS version
   7  0000              //  DOT-command version
   8  0000              //  build 20231112
   9  0000              //
  10  0000              //  Direct-Threaded version.
  11  0000              //
  12  0000              //  NextZXOS version
  13  0000              //  ______________________________________________________________________
  14  0000              //
  15  0000              //  This work is available as-is with no whatsoever warranty.
  16  0000              //  Copying, modifying and distributing this software is allowed
  17  0000              //  provided that the copyright notice is kept.
  18  0000              //  ______________________________________________________________________
  19  0000              //
  20  0000              //  by Matteo Vitturi, 1990-2023
  21  0000              //
  22  0000              //  https://sites.google.com/view/vforth/vforth15-next
  23  0000              //  https://www.oocities.org/matteo_vitturi/english/index.htm
  24  0000              //
  25  0000              //  This is the complete compiler for v.Forth for SINCLAIR ZX Spectrum Next.
  26  0000              //  Each line of this source list mustn't exceed 80 bytes.
  27  0000              //  Z80N (ZX Spectrum Next) extension is available.
  28  0000              //
  29  0000              //  This list has been tested using the following configuration:
  30  0000              //      - CSpect emulator V.2.12.30
  31  0000              //  ______________________________________________________________________
  32  0000              //
  33  0000              //  Z80 Registers usage map
  34  0000              //
  35  0000              //  AF
  36  0000              //  BC - Instruction Pointer: should be preserved during ROM/OS calls
  37  0000              //  DE - Return Stack Pointer: should be preserved during ROM/OS calls
  38  0000              //  HL - Working
  39  0000              //
  40  0000              //  AF'- Sometime used for backup purpose
  41  0000              //  BC'- Not used
  42  0000              //  DE'- Not used
  43  0000              //  HL'- Not used
  44  0000              //
  45  0000              //  SP - Calculator Stack Pointer
  46  0000              //  IX - Inner interpreter "next" address pointer. This way jp (ix) is 2T-state faster than JP next
  47  0000              //  IY - (ZX System: must be preserved to interact with standard ROM)
  48  0000              //
  49  0000              //  ______________________________________________________________________
  50  0000              //
  51  0000              //  _________________
  52  0000              //
  53  0000              //  FORTH DEFINITIONS
  54  0000              //  _________________
  55  0000
  56  0000                              OPT     --zxnext
  57  0000              //  ______________________________________________________________________
  58  0000              //
  59  0000              // this controls some debugging code in L0.asm
  60  0000              //  0 for final binary release.
  61  0000              //  1 for debugging with Visual Studio Code and DeZog
  62  0000              // -1 for for binary comparison with Forth generated code.
  63  0000              DEBUGGING       equ     1   // .dot
  64  0000              //
  65  0000              //  ______________________________________________________________________
  66  0000
  67  0000                              if ( -1 == DEBUGGING )
  68  0000 ~            // ORIGIN          equ     $6366 - $80                 // for binary comparison with double compilation
  69  0000 ~            ORIGIN          equ     $9B21   -$80             // for binary comparison with single compilation
  70  0000 ~            Heap_Ptr        defl    $1F80                       // HP before compilation
  71  0000 ~            Heap_offset     defl    $2000
  72  0000 ~
  73  0000                              endif
  74  0000              //  ______________________________________________________________________
  75  0000
  76  0000                              if (  0 == DEBUGGING )
  77  0000 ~            ORIGIN          equ     $6366                   // binary and Tape
  78  0000 ~            // ORIGIN          equ     $9A93                // binary and Tape
  79  0000 ~            Heap_Ptr        defl    $0002
  80  0000 ~            Heap_offset     defl     0
  81  0000 ~
  82  0000                              endif
  83  0000              //  ______________________________________________________________________
  84  0000
  85  0000                              if (  1 == DEBUGGING )
  86  0000              ORIGIN          equ     $2000                   // for .dot
  87  0000              Heap_Ptr        defl    $0002
  88  0000              Heap_offset     defl     0
  89  0000
  90  0000                              endif
  91  0000              //  ______________________________________________________________________
  92  0000
  93  0000                              DEVICE  ZXSPECTRUMNEXT
  94  0000
  95  0000                              ORG     ORIGIN
  96  2000
  97  2000                              if ( -1 == DEBUGGING )
  98  2000 ~                            ds 128                            // for binary comparison
  99  2000                              endif
 100  2000
 101  2000              //  ______________________________________________________________________
 102  2000              //
 103  2000              //  Naming convention for Label vs Forth correspondance
 104  2000              //  Forth words are named as they are named for real with some exception to avoid assembler syntax errors.
 105  2000              //    - Leading "0" is converted into "Z_"
 106  2000              //    - Leading "(" is converted into "C_", closing bracket is omitted
 107  2000              //    - Leading numbers are converted in letters: ONE_  TWO_ etc.
 108  2000              //    - Question mark "?" is converted into "Q" or omitted if needed / useful.
 109  2000              //    - Plus sign "+" is converted in _PLUS or ADD_ depending.
 110  2000              //    - Minus sign "-" in L (for Line), MINUS or SUBTRACT depending
 111  2000              //    - Greater-Than sign ">" in _GREATER or TO_ depending
 112  2000              //    - Equal sign "=" is converted in EQUAL
 113  2000              //    - Less-Than sign "<" in _LESS or FROM_ (or TO_ again) depending
 114  2000              //    - Asterisk sign "*" is converted in _MUL or STAR
 115  2000              //    - Slash "/" is converted in _DIV or omitted if it is clear what it means
 116  2000              //    - Exclamation mark "!" is converted in STORE
 117  2000              //    - At-Sign "@" is converted in FETCH
 118  2000              //    - Words that collide with Assembler are normally suffixed with "_OP"
 119  2000
 120  2000                              include "system.asm"
# file opened: C:\Zx\CSpect\Projects\vForth17_DOT/source/system.asm
   1+ 2000              //  ______________________________________________________________________
   2+ 2000              //
   3+ 2000              //  system.asm
   4+ 2000              //  ______________________________________________________________________
   5+ 2000
   6+ 2000              // Registers:
   7+ 2000              //
   8+ 2000              //      BC: Instruction Pointer
   9+ 2000              //      DE:
  10+ 2000              //      HL: W register
  11+ 2000              //      SP: Calc stack Pointer
  12+ 2000              //      IX: Inner-Interpreter Address
  13+ 2000
  14+ 2000              //  ______________________________________________________________________
  15+ 2000              //
  16+ 2000              // ZX-Spectrum standard system variables
  17+ 2000              SCR_CT          equ     $5C8C                   // SCR-CT system variable
  18+ 2000              LASTK           equ     $5C08                   // LASTK system variable
  19+ 2000              BORDCR          equ     $5C48                   // BORDCR system variable
  20+ 2000              FLAGS2          equ     $5C6A                   // for caps-lock
  21+ 2000              RAMTOP          equ     $5CB2
  22+ 2000              TSTACK          equ     $5C00                   // TSTACK
  23+ 2000              // FSTACK          ecu     $4000 - 8
  24+ 2000              //  ______________________________________________________________________
  25+ 2000              //
  26+ 2000              // Flag constants
  27+ 2000              TRUE_FLAG       equ     $FFFF
  28+ 2000              FALSE_FLAG      equ     $0000
  29+ 2000
  30+ 2000              //  ______________________________________________________________________
  31+ 2000              //
  32+ 2000              // Ascii char constants
  33+ 2000              NUL_CHAR        equ     $00
  34+ 2000              COMMA_CHAR      equ     $06
  35+ 2000              BACKSPACE_CHAR  equ     $08
  36+ 2000              CR_CHAR         equ     $0D
  37+ 2000              BLANK_CHAR      equ     $20
  38+ 2000              QUOTE_CHAR      equ     "'"
  39+ 2000              DQUOTE_CHAR     equ     '"'
  40+ 2000              UNDERSCORE_CHAR equ     $5F
  41+ 2000              SOLIDBLOCK_CHAR equ     $8F
  42+ 2000              HALFBLOCK_CHAR  equ     $8C
  43+ 2000              LC_A_CHAR       equ     $61                 // lower-case "a"
  44+ 2000              LC_Z_CHAR       equ     $7A                 // lower-case "z"
  45+ 2000
  46+ 2000
  47+ 2000              //  ______________________________________________________________________
  48+ 2000              //
  49+ 2000
  50+ 2000                              // emulate something like:  ld hl,rp
  51+ 2000              ldhlrp          macro
  52+ 2000 ~                            ld      hl,(RP_Pointer)
  53+ 2000                              endm
  54+ 2000
  55+ 2000                              // emulate something like:  ld rp,hl
  56+ 2000              ldrphl          macro
  57+ 2000 ~                            ld      (RP_Pointer),hl
  58+ 2000                              endm
  59+ 2000
  60+ 2000              //  ______________________________________________________________________
  61+ 2000              //
  62+ 2000              //  Inner interpreter next-address pointer. This is 2T-state faster than "jp address"
  63+ 2000              next            macro
  64+ 2000 ~                            jp      (ix)
  65+ 2000                              endm
  66+ 2000
  67+ 2000              psh1            macro
  68+ 2000 ~                            push    hl
  69+ 2000 ~                            jp      (ix)
  70+ 2000                              endm
  71+ 2000
  72+ 2000              psh2            macro
  73+ 2000 ~                            push    de
  74+ 2000 ~                            push    hl
  75+ 2000 ~                            jp      (ix)
  76+ 2000                              endm
  77+ 2000
  78+ 2000              //  ______________________________________________________________________
  79+ 2000              //
  80+ 2000              // Bit constants in length-byte
  81+ 2000
  82+ 2000              SMUDGE_BIT      equ     %00100000               // $20
  83+ 2000              IMMEDIATE_BIT   equ     %01000000               // $40
  84+ 2000              END_BIT         equ     %10000000               // $80
  85+ 2000
  86+ 2000
  87+ 2000              //  ______________________________________________________________________
  88+ 2000              //
  89+ 2000              //  To create Forth words using this (nice) Assembler, we have to use the two following
  90+ 2000              //  pointers
  91+ 2000              temp_NFA        defl    0
  92+ 2000              last_NFA        defl    0
  93+ 2000              len_NFA         defl    0
  94+ 2000
  95+ 2000              Dict_Ptr        defl    0
  96+ 2000              // Heap_Ptr        defl    $0002
  97+ 2000              Prev_Ptr        defl    0
  98+ 2000              mirror_Ptr      defl    0
  99+ 2000
 100+ 2000              is_code         equ     0                   // so the direct machine-code starts at CFA
 101+ 2000              is_normal       equ     0                   // so the direct machine-code starts at CFA
 102+ 2000              is_immediate    equ     IMMEDIATE_BIT       // $40 - the definition is IMMEDIATE.
 103+ 2000
 104+ 2000
 105+ 2000              Behave          macro   xp
 106+ 2000 ~            temp_PTR        defl    $                   // save this org
 107+ 2000 ~                            org     (Heap_Ptr & $1FFF) + $E000 -2
 108+ 2000 ~                            dw      xp
 109+ 2000 ~                            org     temp_PTR
 110+ 2000                              endm
 111+ 2000
 112+ 2000              //  ______________________________________________________________________
 113+ 2000              //
 114+ 2000              //  Create a new "low-level" definition
 115+ 2000              //  This macro is used in the form  Create FORTH_NAME,n,"forth_name"
 116+ 2000              //  to create a new Forth Dictionary entry the same way Forth itself would do.
 117+ 2000              //  A word begins with a Length-Byte in range 1-31. Top 3 msb are used as flags
 118+ 2000              //  see SMUDGE_BIT and IMMEDIATE_BIT constant above.
 119+ 2000              //  It is followed by the Name of the word, i.e. a string expressed in 7-bit Ascii.
 120+ 2000              //  The last character of the Name must have the msb set to signal the end of it (END_BIT)
 121+ 2000              //  This macro acts much like the standard Forth definition CREATE
 122+ 2000
 123+ 2000              New_Def         macro   label, namec, runcode, bits
 124+ 2000 ~
 125+ 2000 ~            Dict_Ptr        defl    $
 126+ 2000 ~
 127+ 2000 ~            //              ______________________________________________________________________
 128+ 2000 ~            //              Heap part
 129+ 2000 ~
 130+ 2000 ~
 131+ 2000 ~                            org     (Heap_Ptr & $1FFF) + $E000
 132+ 2000 ~
 133+ 2000 ~            temp_NFA        defl    $                   // save this NFA address to temp_NFA
 134+ 2000 ~            Latest_Definition defl  Heap_Ptr
 135+ 2000 ~
 136+ 2000 ~                            // dummy db directives used to calculate length of namec
 137+ 2000 ~                            db      namec
 138+ 2000 ~            len_NFA         defl    $ - temp_NFA
 139+ 2000 ~                            org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 140+ 2000 ~
 141+ 2000 ~                            db      len_NFA | END_BIT | bits  // The start of NFA must have msb set to signal the beginning of the sounted string
 142+ 2000 ~                            db      namec               // name string in 7-bit ascii, but
 143+ 2000 ~                            org     $-1                 // alter last byte of Name just above to set
 144+ 2000 ~                            db      {b $} | END_BIT     // msb as name end
 145+ 2000 ~
 146+ 2000 ~                            dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 147+ 2000 ~            Prev_Ptr        defl    Heap_Ptr
 148+ 2000 ~
 149+ 2000 ~            mirror_Ptr      defl    $
 150+ 2000 ~
 151+ 2000 ~                            dw      Dict_Ptr + 2        // xt
 152+ 2000 ~            Heap_Ptr        defl    $ - $E000           // save current HP
 153+ 2000 ~
 154+ 2000 ~            Current_HP      defl  $ - $E000             // used to set HP once!
 155+ 2000 ~
 156+ 2000 ~            //              ______________________________________________________________________
 157+ 2000 ~            //              Dictionary part
 158+ 2000 ~
 159+ 2000 ~                            org     Dict_Ptr
 160+ 2000 ~
 161+ 2000 ~                            dw      mirror_Ptr - $E000 + Heap_offset
 162+ 2000 ~
 163+ 2000 ~            label:          if runcode != 0 ; ok        // This is the start address of the direct jp(hl)
 164+ 2000 ~                            call    runcode ; ok        // for primitive definitions  actual code
 165+ 2000 ~
 166+ 2000 ~
 167+ 2000 ~                            endif           ; ok        // for other definitions it "points" the correct handler
 168+ 2000 ~                            // Use of "; ok" to suppress "warning[fwdref]"
 169+ 2000 ~
 170+ 2000 ~            last_NFA        defl    temp_NFA            // keep track of NFA saved above
 171+ 2000                              endm
 172+ 2000
 173+ 2000              //  ______________________________________________________________________
 174+ 2000              //
 175+ 2000              // Create a "constant"
 176+ 2000              // The constant value is compiled in first PFA cell
 177+ 2000              Constant_Def    macro   label, namec, constant_value
 178+ 2000 ~                            New_Def  label, namec, Constant_Ptr, is_normal
 179+ 2000 ~                            dw      constant_value
 180+ 2000                              endm
 181+ 2000
 182+ 2000              //  ______________________________________________________________________
 183+ 2000              //
 184+ 2000              // Create a "variable"
 185+ 2000              // The when invoked, a variable returns a pointer, the address of first PFA cell
 186+ 2000              // this allow creation of "variables" which content is  of any length
 187+ 2000              Variable_Def    macro   label, namec, initial_value
 188+ 2000 ~                            New_Def  label, namec, Variable_Ptr, is_normal
 189+ 2000 ~                            dw      initial_value
 190+ 2000                              endm
 191+ 2000
 192+ 2000              //  ______________________________________________________________________
 193+ 2000              //
 194+ 2000              // Create a "user"
 195+ 2000              // It uses a single byte as offset to calculate the address of the variable
 196+ 2000              User_Def        macro   label, namec, offset_value
 197+ 2000 ~                            New_Def  label, namec, User_Ptr, is_normal
 198+ 2000 ~                            db      offset_value
 199+ 2000                              endm
 200+ 2000
 201+ 2000              //  ______________________________________________________________________
 202+ 2000              //
 203+ 2000              // Create a "colon-definition"
 204+ 2000              // The CFA contains a small routine i.e. "call Enter_Ptr".
 205+ 2000              // The PFA, three bytes later, contains the actual Forth definition
 206+ 2000              Colon_Def       macro   label, namec, bits
 207+ 2000 ~                            New_Def  label, namec, Enter_Ptr, bits ; ok
 208+ 2000                              endm
 209+ 2000
 210+ 2000              //  ______________________________________________________________________
 211+ 2000              //
 212+ 2000              // Create a "heap-string"
 213+ 2000              Start_Heap      macro
 214+ 2000 ~            temp_ORG        defl    $                   // save this ORG
 215+ 2000 ~                            org     (Heap_Ptr & $1FFF) + $E000
 216+ 2000 ~
 217+ 2000                              endm
 218+ 2000
 219+ 2000              End_Heap        macro
 220+ 2000 ~            Heap_Ptr        defl    $ - $E000
 221+ 2000 ~                            org     temp_ORG
 222+ 2000 ~
 223+ 2000                              endm
 224+ 2000
 225+ 2000
 226+ 2000              //  ______________________________________________________________________
 227+ 2000              //
 228+ 2000
 229+ 2000
 230+ 2000
 231+ 2000              S0_system:      equ     $D0E8               // Address of top of Calc Stack
 232+ 2000              TIB_system      equ     $D0E8               // TIB grows upwards, Return-Stack downward.
 233+ 2000              R0_system:      equ     $D188               // Address of top of Return Stack. This is S0 + $00A0
 234+ 2000              USER_system:    equ     $D188               // User variables zone.
 235+ 2000              FIRST_system:   equ     $D1E4               // Address of first BUFFER
 236+ 2000              LIMIT_system:   equ     $E000               // Address of first byte beyond last BUFFER
 237+ 2000
# file closed: C:\Zx\CSpect\Projects\vForth17_DOT/source/system.asm
 121  2000                              include "L0.asm"
# file opened: C:\Zx\CSpect\Projects\vForth17_DOT/source/L0.asm
   1+ 2000              //  ______________________________________________________________________
   2+ 2000              //
   3+ 2000              //  L0.asm
   4+ 2000              //
   5+ 2000              //  Origin-Area and Level-0 definitions
   6+ 2000              //  ______________________________________________________________________
   7+ 2000
   8+ 2000              Cold_origin:
   9+ 2000 F3                           di      // and     a
  10+ 2001 C3 1F 33                     jp      ColdRoutine
  11+ 2004              Warm_origin:
  12+ 2004 37                           scf
  13+ 2005 C3 1F 33                     jp      WarmRoutine
  14+ 2008
  15+ 2008              // +008
  16+ 2008 E6 D0        SP_Basic:       dw      $D0E6               // These are bits with some "standard" meaning... 0101
  17+ 200A
  18+ 200A              // +00A
  19+ 200A 00 0E                        dw      $0E00
  20+ 200C
  21+ 200C              // +00C
  22+ 200C 10 0D        Latest_origin:  dw      Latest_Definition   // Latest word (used in Cold_Start)
  23+ 200E
  24+ 200E              // +00E
  25+ 200E 0C 00        DEL_Char_Ptr:   dw      $000C               // This is the characther used as "Back-Space"
  26+ 2010
  27+ 2010              // +010
  28+ 2010 50 B2        CPU_Id          dw      $B250               // Z80 expressed in base 36
  29+ 2012
  30+ 2012              // +012
  31+ 2012 E8 D0        S0_origin:      dw      S0_system
  32+ 2014 88 D1        R0_origin:      dw      R0_system
  33+ 2016 E8 D0        TIB_origin:     dw      TIB_system
  34+ 2018 1F 00        WIDTH_origin:   dw      31
  35+ 201A 01 00        WARNING_origin: dw      1
  36+ 201C 00 80        FENCE_origin:   dw      $8000 // $8184 // 25446 // $6000 // **** Fence_Word
  37+ 201E 00 80        DP_origin       dw      $8000 // $8184 // 25446 // $6000 // ****Fence_Word
  38+ 2020 09 32        VOCLINK_origin: dw      Voclink_Ptr
  39+ 2022 E4 D1                        dw      FIRST_system
  40+ 2024 00 E0                        dw      LIMIT_system
  41+ 2026 1E 0D        HP_origin:      dw      Current_HP
  42+ 2028
  43+ 2028              // +028
  44+ 2028 8F           Block_Face:     db      SOLIDBLOCK_CHAR     // Caps-Lock   Cursor face
  45+ 2029 8C           Half_Face:      db      HALFBLOCK_CHAR      // Caps-unlock Cursor face
  46+ 202A 5F           Underscore_Face:db      UNDERSCORE_CHAR     // Underscore  Cursor face
  47+ 202B 00                           db      0
  48+ 202C
  49+ 202C              // +02C
  50+ 202C 00 00        SP_Saved:       dw      $0000               // Saved SP during NextOS call
  51+ 202E
  52+ 202E              // +02E
  53+ 202E 88 D1        USER_Pointer:   dw      USER_system
  54+ 2030
  55+ 2030              // +030
  56+ 2030 88 D1        RP_Pointer:     dw      $d188 // R0_system
  57+ 2032
  58+ 2032              // +32
  59+ 2032 00 00        IX_Echo:        dw      $0000               // Echo IX after NextOS call
  60+ 2034
  61+ 2034
  62+ 2034                              Start_Heap
  62+ 2034             >temp_ORG        defl    $                   // save this ORG
  62+ 2034             >                org     (Heap_Ptr & $1FFF) + $E000
  62+ E002             >
  63+ E002              Splash_Ptr      defl    $ - $E000           // save current HP
  64+ E002                              // length include a leading space in each line
  65+ E002 6E                           db      110
  66+ E003 20 76 2D 46                  db      " v-Forth 1.7 - NextZXOS version ", $0D      // 32
  66+ E007 6F 72 74 68
  66+ E00B 20 31 2E 37
  66+ E00F 20 2D 20 4E
  66+ E013 65 78 74 5A
  66+ E017 58 4F 53 20
  66+ E01B 76 65 72 73
  66+ E01F 69 6F 6E 20
  66+ E023 0D
  67+ E024 20 48 65 61                  db      " Heap Vocabulary - build 2023-10-14 ", $0D  // 36
  67+ E028 70 20 56 6F
  67+ E02C 63 61 62 75
  67+ E030 6C 61 72 79
  67+ E034 20 2D 20 62
  67+ E038 75 69 6C 64
  67+ E03C 20 32 30 32
  67+ E040 33 2D 31 30
  67+ E044 2D 31 34 20
  67+ E048 0D
  68+ E049 20 4D 49 54                  db      " MIT License ", 127                         // 13
  68+ E04D 20 4C 69 63
  68+ E051 65 6E 73 65
  68+ E055 20 7F
  69+ E057 20 31 39 39                  db      " 1990-2023 Matteo Vitturi "                 // 25
  69+ E05B 30 2D 32 30
  69+ E05F 32 33 20 4D
  69+ E063 61 74 74 65
  69+ E067 6F 20 56 69
  69+ E06B 74 74 75 72
  69+ E06F 69 20
  70+ E071                              End_Heap
  70+ E071             >Heap_Ptr        defl    $ - $E000
  70+ E071             >                org     temp_ORG
  70+ 2034             >
  71+ 2034
  72+ 2034              //  ______________________________________________________________________
  73+ 2034
  74+ 2034              // from this point we can use LDHLRP and LDRPHL Assembler macros
  75+ 2034              // instead of their equivalent long sequences.
  76+ 2034
  77+ 2034              //  ______________________________________________________________________
  78+ 2034
  79+ 2034              // address for "next" - inner interpreter
  80+ 2034              // This address must always be pointed by IX
  81+ 2034              // "next" macro simply does a  jp(ix)  instruction
  82+ 2034
  83+ 2034              // Psh2_Ptr:       push    de
  84+ 2034              // Psh1_Ptr:       push    hl
  85+ 2034
  86+ 2034              Next_Ptr:       // This address must always be kept in IX: "next" relies on that
  87+ 2034
  88+ 2034              //              if ( 1 == DEBUGGING )
  89+ 2034              //              ld      hl, Next_Breakpoint_1
  90+ 2034              //              and     a
  91+ 2034              //              sbc     hl, bc
  92+ 2034              //              jr      nz, Next_Continue
  93+ 2034              //              nop // This is where you have to put a real breakpoint to intercept BC values...
  94+ 2034              //              endif
  95+ 2034
  96+ 2034              Next_Continue:
  97+ 2034 0A                           ld      a, (bc)
  98+ 2035 03                           inc     bc
  99+ 2036 6F                           ld      l, a
 100+ 2037 0A                           ld      a, (bc)
 101+ 2038 03                           inc     bc
 102+ 2039 67                           ld      h, a                // hl contains a CFA (xt) of word being executed
 103+ 203A
 104+ 203A              // Execute xt i.e. CFA held in HL
 105+ 203A              Exec_Ptr:
 106+ 203A
 107+ 203A
 108+ 203A
 109+ 203A
 110+ 203A E9                           jp      (hl)                // and jump to it
 111+ 203B                                                          // there you'll find the real code or a CALL to a ;code part
 112+ 203B
 113+ 203B              // temp_NULL       defl    Heap_Ptr & $1FFF
 114+ 203B              // 0x00         n --      ( compile time )
 115+ 203B              //              New_Def NUL_DUMMY,  $00, is_code, is_immediate
 116+ 203B              //              next
 117+ 203B
 118+ 203B              //  ______________________________________________________________________
 119+ 203B              //
 120+ 203B              // lit          -- x
 121+ 203B              // puts on top of stack the value of the following word.
 122+ 203B              // it is compiled in colon definition before a literal number
 123+ 203B
 124+ 203B                              New_Def  LIT, "LIT", is_code, is_normal
 124+ 203B             >
 124+ 203B             >Dict_Ptr        defl    $
 124+ 203B             >
 124+ 203B             >//              ______________________________________________________________________
 124+ 203B             >//              Heap part
 124+ 203B             >
 124+ 203B             >
 124+ 203B             >                org     (Heap_Ptr & $1FFF) + $E000
 124+ E071             >
 124+ E071             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 124+ E071             >Latest_Definition defl  Heap_Ptr
 124+ E071             >
 124+ E071             >                // dummy db directives used to calculate length of namec
 124+ E071 4C 49 54    >                db      "LIT"
 124+ E074             >len_NFA         defl    $ - temp_NFA
 124+ E074             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 124+ E071             >
 124+ E071 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 124+ E072 4C 49 54    >                db      "LIT"               // name string in 7-bit ascii, but
 124+ E075             >                org     $-1                 // alter last byte of Name just above to set
 124+ E074 D4          >                db      {b $} | END_BIT     // msb as name end
 124+ E075             >
 124+ E075 00 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 124+ E077             >Prev_Ptr        defl    Heap_Ptr
 124+ E077             >
 124+ E077             >mirror_Ptr      defl    $
 124+ E077             >
 124+ E077 3D 20       >                dw      Dict_Ptr + 2        // xt
 124+ E079             >Heap_Ptr        defl    $ - $E000           // save current HP
 124+ E079             >
 124+ E079             >Current_HP      defl  $ - $E000             // used to set HP once!
 124+ E079             >
 124+ E079             >//              ______________________________________________________________________
 124+ E079             >//              Dictionary part
 124+ E079             >
 124+ E079             >                org     Dict_Ptr
 124+ 203B             >
 124+ 203B 77 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 124+ 203D             >
 124+ 203D             >LIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 124+ 203D ~           >                call    runcode ; ok        // for primitive definitions  actual code
 124+ 203D ~           >
 124+ 203D ~           >
 124+ 203D             >                endif           ; ok        // for other definitions it "points" the correct handler
 124+ 203D             >                // Use of "; ok" to suppress "warning[fwdref]"
 124+ 203D             >
 124+ 203D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 125+ 203D
 126+ 203D 0A                           ld      a, (bc)
 127+ 203E 03                           inc     bc
 128+ 203F 6F                           ld      l, a
 129+ 2040 0A                           ld      a, (bc)
 130+ 2041 03                           inc     bc
 131+ 2042 67                           ld      h, a
 132+ 2043 E5                           push    hl
 133+ 2044                              next
 133+ 2044 DD E9       >                jp      (ix)
 134+ 2046
 135+ 2046              //  ______________________________________________________________________
 136+ 2046              //
 137+ 2046              // execute      i*x xt -- j*x
 138+ 2046              // execution token. usually xt is given by CFA
 139+ 2046
 140+ 2046                              New_Def  EXECUTE, "EXECUTE", is_code, is_normal
 140+ 2046             >
 140+ 2046             >Dict_Ptr        defl    $
 140+ 2046             >
 140+ 2046             >//              ______________________________________________________________________
 140+ 2046             >//              Heap part
 140+ 2046             >
 140+ 2046             >
 140+ 2046             >                org     (Heap_Ptr & $1FFF) + $E000
 140+ E079             >
 140+ E079             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 140+ E079             >Latest_Definition defl  Heap_Ptr
 140+ E079             >
 140+ E079             >                // dummy db directives used to calculate length of namec
 140+ E079 45 58 45 43 >                db      "EXECUTE"
 140+ E07D 55 54 45    >
 140+ E080             >len_NFA         defl    $ - temp_NFA
 140+ E080             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 140+ E079             >
 140+ E079 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 140+ E07A 45 58 45 43 >                db      "EXECUTE"               // name string in 7-bit ascii, but
 140+ E07E 55 54 45    >
 140+ E081             >                org     $-1                 // alter last byte of Name just above to set
 140+ E080 C5          >                db      {b $} | END_BIT     // msb as name end
 140+ E081             >
 140+ E081 71 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 140+ E083             >Prev_Ptr        defl    Heap_Ptr
 140+ E083             >
 140+ E083             >mirror_Ptr      defl    $
 140+ E083             >
 140+ E083 48 20       >                dw      Dict_Ptr + 2        // xt
 140+ E085             >Heap_Ptr        defl    $ - $E000           // save current HP
 140+ E085             >
 140+ E085             >Current_HP      defl  $ - $E000             // used to set HP once!
 140+ E085             >
 140+ E085             >//              ______________________________________________________________________
 140+ E085             >//              Dictionary part
 140+ E085             >
 140+ E085             >                org     Dict_Ptr
 140+ 2046             >
 140+ 2046 83 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 140+ 2048             >
 140+ 2048             >EXECUTE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 140+ 2048 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 140+ 2048 ~           >
 140+ 2048 ~           >
 140+ 2048             >                endif           ; ok        // for other definitions it "points" the correct handler
 140+ 2048             >                // Use of "; ok" to suppress "warning[fwdref]"
 140+ 2048             >
 140+ 2048             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 141+ 2048 C9                           ret
 142+ 2049
 143+ 2049              //  ______________________________________________________________________
 144+ 2049              //
 145+ 2049              // brk
 146+ 2049              //              New_Def  BRK, "BRK", is_code, is_normal
 147+ 2049              //              next
 148+ 2049
 149+ 2049
 150+ 2049
 151+ 2049              //  ______________________________________________________________________
 152+ 2049              //
 153+ 2049              // (+loop)      n --
 154+ 2049              // compiled by +LOOP. it uses the top two values of return-stack to
 155+ 2049              // keep track of index and limit, they are accessed via I and I'
 156+ 2049              // Add n to the loop index. If the loop index did not cross the boundary
 157+ 2049              // between the loop limit minus one and the loop limit, continue execution
 158+ 2049              // at the beginning of the loop. Otherwise, discard the current loop control
 159+ 2049              // parameters and continue execution immediately following the loop.
 160+ 2049                              New_Def C_PLOOP, "(+LOOP)", is_code, is_normal
 160+ 2049             >
 160+ 2049             >Dict_Ptr        defl    $
 160+ 2049             >
 160+ 2049             >//              ______________________________________________________________________
 160+ 2049             >//              Heap part
 160+ 2049             >
 160+ 2049             >
 160+ 2049             >                org     (Heap_Ptr & $1FFF) + $E000
 160+ E085             >
 160+ E085             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 160+ E085             >Latest_Definition defl  Heap_Ptr
 160+ E085             >
 160+ E085             >                // dummy db directives used to calculate length of namec
 160+ E085 28 2B 4C 4F >                db      "(+LOOP)"
 160+ E089 4F 50 29    >
 160+ E08C             >len_NFA         defl    $ - temp_NFA
 160+ E08C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 160+ E085             >
 160+ E085 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 160+ E086 28 2B 4C 4F >                db      "(+LOOP)"               // name string in 7-bit ascii, but
 160+ E08A 4F 50 29    >
 160+ E08D             >                org     $-1                 // alter last byte of Name just above to set
 160+ E08C A9          >                db      {b $} | END_BIT     // msb as name end
 160+ E08D             >
 160+ E08D 79 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 160+ E08F             >Prev_Ptr        defl    Heap_Ptr
 160+ E08F             >
 160+ E08F             >mirror_Ptr      defl    $
 160+ E08F             >
 160+ E08F 4B 20       >                dw      Dict_Ptr + 2        // xt
 160+ E091             >Heap_Ptr        defl    $ - $E000           // save current HP
 160+ E091             >
 160+ E091             >Current_HP      defl  $ - $E000             // used to set HP once!
 160+ E091             >
 160+ E091             >//              ______________________________________________________________________
 160+ E091             >//              Dictionary part
 160+ E091             >
 160+ E091             >                org     Dict_Ptr
 160+ 2049             >
 160+ 2049 8F 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 160+ 204B             >
 160+ 204B             >C_PLOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 160+ 204B ~           >                call    runcode ; ok        // for primitive definitions  actual code
 160+ 204B ~           >
 160+ 204B ~           >
 160+ 204B             >                endif           ; ok        // for other definitions it "points" the correct handler
 160+ 204B             >                // Use of "; ok" to suppress "warning[fwdref]"
 160+ 204B             >
 160+ 204B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 161+ 204B
 162+ 204B              Loop_Ptr:
 163+ 204B E1                           pop     hl                  // get increment
 164+ 204C EB                           ex      de, hl
 165+ 204D                              // *** ldhlrp
 166+ 204D C5                           push    bc                  // Save IP
 167+ 204E 42                           ld      b, d                // bc is increment
 168+ 204F 4B                           ld      c, e
 169+ 2050 E5                           push    hl
 170+ 2051 5E                           ld      e, (hl)             // hl points to loop-index, add increment to it.
 171+ 2052 7B                           ld      a, e                // de keeps index before increment.
 172+ 2053 81                           add     c
 173+ 2054 77                           ld      (hl), a
 174+ 2055 23                           inc     hl
 175+ 2056 56                           ld      d, (hl)
 176+ 2057 7A                           ld      a, d
 177+ 2058 88                           adc     b
 178+ 2059 77                           ld      (hl),a
 179+ 205A 23                           inc     hl
 180+ 205B
 181+ 205B 7B                           ld      a, e
 182+ 205C 96                           sub     (hl)
 183+ 205D 5F                           ld      e, a
 184+ 205E 23                           inc     hl
 185+ 205F 7A                           ld      a, d
 186+ 2060 9E                           sbc     (hl)
 187+ 2061 57                           ld      d, a                // DE is index - limit : limit is the "new zero"
 188+ 2062
 189+ 2062 EB                           ex      de, hl              // swap HL and DE, so restore DE:=RP+3
 190+ 2063 09                           add     hl, bc
 191+ 2064 CB 78                        bit     7, b                // keep increment-sign just before overwriting d
 192+ 2066 28 01                        jr      z, Loop_NegativeIncrement
 193+ 2068 3F                               ccf                     // carry-flag tracks bonudary limit crossing.
 194+ 2069              Loop_NegativeIncrement:
 195+ 2069 38 04                        jr      c, Loop_Endif
 196+ 206B D1                               pop     de              // Discard RP+3, retrieve original RP
 197+ 206C C1                               pop     bc                  // Retrieve IP
 198+ 206D 18 13                            jr      Branch_Ptr      // perform branch consuming following cell
 199+ 206F              Loop_Endif:
 200+ 206F C1                           pop     bc                  // discard original RP
 201+ 2070 EB                           ex      de, hl
 202+ 2071 23                           inc     hl                  // keep    RP+4 (exit from loop)
 203+ 2072                              // *** ldrphl                      // ld rp,hl macro 30h +Origin
 204+ 2072 EB                           ex      de, hl
 205+ 2073 C1                           pop     bc                  // Retrieve IP
 206+ 2074 03                           inc     bc                  // skip branch-style offset
 207+ 2075 03                           inc     bc
 208+ 2076                              next
 208+ 2076 DD E9       >                jp      (ix)
 209+ 2078
 210+ 2078              //  ______________________________________________________________________
 211+ 2078              //
 212+ 2078              // (loop)       n --
 213+ 2078              // same as (LOOP) but index is incremented by 1
 214+ 2078              // compiled by LOOP.
 215+ 2078                              New_Def C_LOOP, "(LOOP)", is_code, is_normal
 215+ 2078             >
 215+ 2078             >Dict_Ptr        defl    $
 215+ 2078             >
 215+ 2078             >//              ______________________________________________________________________
 215+ 2078             >//              Heap part
 215+ 2078             >
 215+ 2078             >
 215+ 2078             >                org     (Heap_Ptr & $1FFF) + $E000
 215+ E091             >
 215+ E091             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 215+ E091             >Latest_Definition defl  Heap_Ptr
 215+ E091             >
 215+ E091             >                // dummy db directives used to calculate length of namec
 215+ E091 28 4C 4F 4F >                db      "(LOOP)"
 215+ E095 50 29       >
 215+ E097             >len_NFA         defl    $ - temp_NFA
 215+ E097             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 215+ E091             >
 215+ E091 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 215+ E092 28 4C 4F 4F >                db      "(LOOP)"               // name string in 7-bit ascii, but
 215+ E096 50 29       >
 215+ E098             >                org     $-1                 // alter last byte of Name just above to set
 215+ E097 A9          >                db      {b $} | END_BIT     // msb as name end
 215+ E098             >
 215+ E098 85 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 215+ E09A             >Prev_Ptr        defl    Heap_Ptr
 215+ E09A             >
 215+ E09A             >mirror_Ptr      defl    $
 215+ E09A             >
 215+ E09A 7A 20       >                dw      Dict_Ptr + 2        // xt
 215+ E09C             >Heap_Ptr        defl    $ - $E000           // save current HP
 215+ E09C             >
 215+ E09C             >Current_HP      defl  $ - $E000             // used to set HP once!
 215+ E09C             >
 215+ E09C             >//              ______________________________________________________________________
 215+ E09C             >//              Dictionary part
 215+ E09C             >
 215+ E09C             >                org     Dict_Ptr
 215+ 2078             >
 215+ 2078 9A 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 215+ 207A             >
 215+ 207A             >C_LOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 215+ 207A ~           >                call    runcode ; ok        // for primitive definitions  actual code
 215+ 207A ~           >
 215+ 207A ~           >
 215+ 207A             >                endif           ; ok        // for other definitions it "points" the correct handler
 215+ 207A             >                // Use of "; ok" to suppress "warning[fwdref]"
 215+ 207A             >
 215+ 207A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 216+ 207A ED 8A 00 01                  push    1
 217+ 207E 18 CB                        jr      Loop_Ptr
 218+ 2080
 219+ 2080              //  ______________________________________________________________________
 220+ 2080              //
 221+ 2080              // branch       --
 222+ 2080              // unconditional branch in colon definition using the following cell as an offset from current IP value
 223+ 2080              // compiled by ELSE, AGAIN and some other immediate words
 224+ 2080
 225+ 2080                              New_Def BRANCH, "BRANCH", is_code, is_normal
 225+ 2080             >
 225+ 2080             >Dict_Ptr        defl    $
 225+ 2080             >
 225+ 2080             >//              ______________________________________________________________________
 225+ 2080             >//              Heap part
 225+ 2080             >
 225+ 2080             >
 225+ 2080             >                org     (Heap_Ptr & $1FFF) + $E000
 225+ E09C             >
 225+ E09C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 225+ E09C             >Latest_Definition defl  Heap_Ptr
 225+ E09C             >
 225+ E09C             >                // dummy db directives used to calculate length of namec
 225+ E09C 42 52 41 4E >                db      "BRANCH"
 225+ E0A0 43 48       >
 225+ E0A2             >len_NFA         defl    $ - temp_NFA
 225+ E0A2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 225+ E09C             >
 225+ E09C 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 225+ E09D 42 52 41 4E >                db      "BRANCH"               // name string in 7-bit ascii, but
 225+ E0A1 43 48       >
 225+ E0A3             >                org     $-1                 // alter last byte of Name just above to set
 225+ E0A2 C8          >                db      {b $} | END_BIT     // msb as name end
 225+ E0A3             >
 225+ E0A3 91 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 225+ E0A5             >Prev_Ptr        defl    Heap_Ptr
 225+ E0A5             >
 225+ E0A5             >mirror_Ptr      defl    $
 225+ E0A5             >
 225+ E0A5 82 20       >                dw      Dict_Ptr + 2        // xt
 225+ E0A7             >Heap_Ptr        defl    $ - $E000           // save current HP
 225+ E0A7             >
 225+ E0A7             >Current_HP      defl  $ - $E000             // used to set HP once!
 225+ E0A7             >
 225+ E0A7             >//              ______________________________________________________________________
 225+ E0A7             >//              Dictionary part
 225+ E0A7             >
 225+ E0A7             >                org     Dict_Ptr
 225+ 2080             >
 225+ 2080 A5 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 225+ 2082             >
 225+ 2082             >BRANCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 225+ 2082 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 225+ 2082 ~           >
 225+ 2082 ~           >
 225+ 2082             >                endif           ; ok        // for other definitions it "points" the correct handler
 225+ 2082             >                // Use of "; ok" to suppress "warning[fwdref]"
 225+ 2082             >
 225+ 2082             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 226+ 2082              Branch_Ptr:
 227+ 2082 0A                           ld      a, (bc)
 228+ 2083 6F                           ld      l, a
 229+ 2084 03                           inc     bc
 230+ 2085 0A                           ld      a, (bc)
 231+ 2086 67                           ld      h, a
 232+ 2087 0B                           dec     bc
 233+ 2088 09                           add     hl, bc
 234+ 2089 4D                           ld      c, l
 235+ 208A 44                           ld      b, h
 236+ 208B                              next
 236+ 208B DD E9       >                jp      (ix)
 237+ 208D
 238+ 208D
 239+ 208D              //  ______________________________________________________________________
 240+ 208D              //
 241+ 208D              // 0branch      f --
 242+ 208D              // conditional branch if the top-of-stack is ZERO or FALSE.
 243+ 208D              // compiled by IF, UNTIL and some other immediate words
 244+ 208D
 245+ 208D                              New_Def ZBRANCH, "0BRANCH", is_code, is_normal
 245+ 208D             >
 245+ 208D             >Dict_Ptr        defl    $
 245+ 208D             >
 245+ 208D             >//              ______________________________________________________________________
 245+ 208D             >//              Heap part
 245+ 208D             >
 245+ 208D             >
 245+ 208D             >                org     (Heap_Ptr & $1FFF) + $E000
 245+ E0A7             >
 245+ E0A7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 245+ E0A7             >Latest_Definition defl  Heap_Ptr
 245+ E0A7             >
 245+ E0A7             >                // dummy db directives used to calculate length of namec
 245+ E0A7 30 42 52 41 >                db      "0BRANCH"
 245+ E0AB 4E 43 48    >
 245+ E0AE             >len_NFA         defl    $ - temp_NFA
 245+ E0AE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 245+ E0A7             >
 245+ E0A7 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 245+ E0A8 30 42 52 41 >                db      "0BRANCH"               // name string in 7-bit ascii, but
 245+ E0AC 4E 43 48    >
 245+ E0AF             >                org     $-1                 // alter last byte of Name just above to set
 245+ E0AE C8          >                db      {b $} | END_BIT     // msb as name end
 245+ E0AF             >
 245+ E0AF 9C 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 245+ E0B1             >Prev_Ptr        defl    Heap_Ptr
 245+ E0B1             >
 245+ E0B1             >mirror_Ptr      defl    $
 245+ E0B1             >
 245+ E0B1 8F 20       >                dw      Dict_Ptr + 2        // xt
 245+ E0B3             >Heap_Ptr        defl    $ - $E000           // save current HP
 245+ E0B3             >
 245+ E0B3             >Current_HP      defl  $ - $E000             // used to set HP once!
 245+ E0B3             >
 245+ E0B3             >//              ______________________________________________________________________
 245+ E0B3             >//              Dictionary part
 245+ E0B3             >
 245+ E0B3             >                org     Dict_Ptr
 245+ 208D             >
 245+ 208D B1 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 245+ 208F             >
 245+ 208F             >ZBRANCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 245+ 208F ~           >                call    runcode ; ok        // for primitive definitions  actual code
 245+ 208F ~           >
 245+ 208F ~           >
 245+ 208F             >                endif           ; ok        // for other definitions it "points" the correct handler
 245+ 208F             >                // Use of "; ok" to suppress "warning[fwdref]"
 245+ 208F             >
 245+ 208F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 246+ 208F              ZBranch_Ptr:
 247+ 208F E1                           pop     hl
 248+ 2090 7D                           ld      a, l
 249+ 2091 B4                           or      h
 250+ 2092 28 EE                        jr      z, Branch_Ptr
 251+ 2094 03                           inc     bc                  // if not branch, skip offset cell.
 252+ 2095 03                           inc     bc
 253+ 2096                              next
 253+ 2096 DD E9       >                jp      (ix)
 254+ 2098
 255+ 2098              //  ______________________________________________________________________
 256+ 2098              //
 257+ 2098              // (leave)        --
 258+ 2098              // compiled by LEAVE
 259+ 2098              // this forces to exit from loop and jump past
 260+ 2098                              New_Def C_LEAVE, "(LEAVE)", is_code, is_normal
 260+ 2098             >
 260+ 2098             >Dict_Ptr        defl    $
 260+ 2098             >
 260+ 2098             >//              ______________________________________________________________________
 260+ 2098             >//              Heap part
 260+ 2098             >
 260+ 2098             >
 260+ 2098             >                org     (Heap_Ptr & $1FFF) + $E000
 260+ E0B3             >
 260+ E0B3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 260+ E0B3             >Latest_Definition defl  Heap_Ptr
 260+ E0B3             >
 260+ E0B3             >                // dummy db directives used to calculate length of namec
 260+ E0B3 28 4C 45 41 >                db      "(LEAVE)"
 260+ E0B7 56 45 29    >
 260+ E0BA             >len_NFA         defl    $ - temp_NFA
 260+ E0BA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 260+ E0B3             >
 260+ E0B3 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 260+ E0B4 28 4C 45 41 >                db      "(LEAVE)"               // name string in 7-bit ascii, but
 260+ E0B8 56 45 29    >
 260+ E0BB             >                org     $-1                 // alter last byte of Name just above to set
 260+ E0BA A9          >                db      {b $} | END_BIT     // msb as name end
 260+ E0BB             >
 260+ E0BB A7 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 260+ E0BD             >Prev_Ptr        defl    Heap_Ptr
 260+ E0BD             >
 260+ E0BD             >mirror_Ptr      defl    $
 260+ E0BD             >
 260+ E0BD 9A 20       >                dw      Dict_Ptr + 2        // xt
 260+ E0BF             >Heap_Ptr        defl    $ - $E000           // save current HP
 260+ E0BF             >
 260+ E0BF             >Current_HP      defl  $ - $E000             // used to set HP once!
 260+ E0BF             >
 260+ E0BF             >//              ______________________________________________________________________
 260+ E0BF             >//              Dictionary part
 260+ E0BF             >
 260+ E0BF             >                org     Dict_Ptr
 260+ 2098             >
 260+ 2098 BD 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 260+ 209A             >
 260+ 209A             >C_LEAVE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 260+ 209A ~           >                call    runcode ; ok        // for primitive definitions  actual code
 260+ 209A ~           >
 260+ 209A ~           >
 260+ 209A             >                endif           ; ok        // for other definitions it "points" the correct handler
 260+ 209A             >                // Use of "; ok" to suppress "warning[fwdref]"
 260+ 209A             >
 260+ 209A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 261+ 209A EB                           ex      de, hl
 262+ 209B                              // *** ldhlrp
 263+ 209B 3E 04                        ld      a, 4
 264+ 209D ED 31                        add     hl, a
 265+ 209F                              // *** ldrphl
 266+ 209F EB                           ex      de, hl
 267+ 20A0 18 E0                        jr      Branch_Ptr       // perform branch consuming following cell
 268+ 20A2                              next
 268+ 20A2 DD E9       >                jp      (ix)
 269+ 20A4
 270+ 20A4              //  ______________________________________________________________________
 271+ 20A4              //
 272+ 20A4              // (?do)        lim ind --
 273+ 20A4              // compiled by ?DO to make a loop checking for lim == ind first
 274+ 20A4              // at run-time (?DO) must be followed by a BRANCH offset
 275+ 20A4              // used to skip the loop if lim == ind
 276+ 20A4                              New_Def C_Q_DO, "(?DO)", is_code, is_normal
 276+ 20A4             >
 276+ 20A4             >Dict_Ptr        defl    $
 276+ 20A4             >
 276+ 20A4             >//              ______________________________________________________________________
 276+ 20A4             >//              Heap part
 276+ 20A4             >
 276+ 20A4             >
 276+ 20A4             >                org     (Heap_Ptr & $1FFF) + $E000
 276+ E0BF             >
 276+ E0BF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 276+ E0BF             >Latest_Definition defl  Heap_Ptr
 276+ E0BF             >
 276+ E0BF             >                // dummy db directives used to calculate length of namec
 276+ E0BF 28 3F 44 4F >                db      "(?DO)"
 276+ E0C3 29          >
 276+ E0C4             >len_NFA         defl    $ - temp_NFA
 276+ E0C4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 276+ E0BF             >
 276+ E0BF 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 276+ E0C0 28 3F 44 4F >                db      "(?DO)"               // name string in 7-bit ascii, but
 276+ E0C4 29          >
 276+ E0C5             >                org     $-1                 // alter last byte of Name just above to set
 276+ E0C4 A9          >                db      {b $} | END_BIT     // msb as name end
 276+ E0C5             >
 276+ E0C5 B3 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 276+ E0C7             >Prev_Ptr        defl    Heap_Ptr
 276+ E0C7             >
 276+ E0C7             >mirror_Ptr      defl    $
 276+ E0C7             >
 276+ E0C7 A6 20       >                dw      Dict_Ptr + 2        // xt
 276+ E0C9             >Heap_Ptr        defl    $ - $E000           // save current HP
 276+ E0C9             >
 276+ E0C9             >Current_HP      defl  $ - $E000             // used to set HP once!
 276+ E0C9             >
 276+ E0C9             >//              ______________________________________________________________________
 276+ E0C9             >//              Dictionary part
 276+ E0C9             >
 276+ E0C9             >                org     Dict_Ptr
 276+ 20A4             >
 276+ 20A4 C7 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 276+ 20A6             >
 276+ 20A6             >C_Q_DO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 276+ 20A6 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 276+ 20A6 ~           >
 276+ 20A6 ~           >
 276+ 20A6             >                endif           ; ok        // for other definitions it "points" the correct handler
 276+ 20A6             >                // Use of "; ok" to suppress "warning[fwdref]"
 276+ 20A6             >
 276+ 20A6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 277+ 20A6 D9                           exx
 278+ 20A7 D1                            pop     de                  // de has the index
 279+ 20A8 E1                            pop     hl                  // hl has the limit
 280+ 20A9 44                            ld      b, h
 281+ 20AA 4D                            ld      c, l
 282+ 20AB E5                            push    hl                  // put them back to stack for later
 283+ 20AC D5                            push    de
 284+ 20AD A7                            and     a                   // reset carry flag
 285+ 20AE ED 52                         sbc     hl, de              // compute limit - index
 286+ 20B0 D9                           exx
 287+ 20B1 20 04                        jr      nz, Do_Ptr          // if zero then don't even begin loop
 288+ 20B3 E1                               pop     hl
 289+ 20B4 E1                               pop     hl
 290+ 20B5 18 CB                            jr      Branch_Ptr          // perform branch consuming following cell
 291+ 20B7              Do_Ptr:
 292+ 20B7                              // *** ldhlrp                 // prepare RP
 293+ 20B7                              // *** ex      de, hl
 294+ 20B7                              // dec     de
 295+ 20B7                              // dec     de
 296+ 20B7                              // dec     de
 297+ 20B7                              // dec     de
 298+ 20B7 ED 35 FC FF                  add     de, -4
 299+ 20BB D5                           push    de                  // pass it to h'l'
 300+ 20BC                              // *** ex      de, hl
 301+ 20BC                              // *** ldrphl
 302+ 20BC D9                           exx
 303+ 20BD E1                            pop     hl
 304+ 20BE
 305+ 20BE                               // store index as top RP
 306+ 20BE D1                            pop     de
 307+ 20BF 73                            ld      (hl), e
 308+ 20C0 23                            inc     hl
 309+ 20C1 72                            ld      (hl), d
 310+ 20C2 23                            inc     hl
 311+ 20C3                               // stores lim as second from top RP
 312+ 20C3 D1                            pop     de
 313+ 20C4 73                            ld      (hl), e
 314+ 20C5 23                            inc     hl
 315+ 20C6 72                            ld      (hl), d
 316+ 20C7 D9                           exx
 317+ 20C8                              // skip branch-style offseet
 318+ 20C8 03                           inc     bc
 319+ 20C9 03                           inc     bc
 320+ 20CA                              next
 320+ 20CA DD E9       >                jp      (ix)
 321+ 20CC
 322+ 20CC              //  ______________________________________________________________________
 323+ 20CC              //
 324+ 20CC              // (do)        lim ind --
 325+ 20CC              // compiled by DO to make a loop checking for lim == ind first
 326+ 20CC              // this is a simpler version of (?DO)
 327+ 20CC                              New_Def C_DO, "(DO)", is_code, is_normal
 327+ 20CC             >
 327+ 20CC             >Dict_Ptr        defl    $
 327+ 20CC             >
 327+ 20CC             >//              ______________________________________________________________________
 327+ 20CC             >//              Heap part
 327+ 20CC             >
 327+ 20CC             >
 327+ 20CC             >                org     (Heap_Ptr & $1FFF) + $E000
 327+ E0C9             >
 327+ E0C9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 327+ E0C9             >Latest_Definition defl  Heap_Ptr
 327+ E0C9             >
 327+ E0C9             >                // dummy db directives used to calculate length of namec
 327+ E0C9 28 44 4F 29 >                db      "(DO)"
 327+ E0CD             >len_NFA         defl    $ - temp_NFA
 327+ E0CD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 327+ E0C9             >
 327+ E0C9 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 327+ E0CA 28 44 4F 29 >                db      "(DO)"               // name string in 7-bit ascii, but
 327+ E0CE             >                org     $-1                 // alter last byte of Name just above to set
 327+ E0CD A9          >                db      {b $} | END_BIT     // msb as name end
 327+ E0CE             >
 327+ E0CE BF 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 327+ E0D0             >Prev_Ptr        defl    Heap_Ptr
 327+ E0D0             >
 327+ E0D0             >mirror_Ptr      defl    $
 327+ E0D0             >
 327+ E0D0 CE 20       >                dw      Dict_Ptr + 2        // xt
 327+ E0D2             >Heap_Ptr        defl    $ - $E000           // save current HP
 327+ E0D2             >
 327+ E0D2             >Current_HP      defl  $ - $E000             // used to set HP once!
 327+ E0D2             >
 327+ E0D2             >//              ______________________________________________________________________
 327+ E0D2             >//              Dictionary part
 327+ E0D2             >
 327+ E0D2             >                org     Dict_Ptr
 327+ 20CC             >
 327+ 20CC D0 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 327+ 20CE             >
 327+ 20CE             >C_DO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 327+ 20CE ~           >                call    runcode ; ok        // for primitive definitions  actual code
 327+ 20CE ~           >
 327+ 20CE ~           >
 327+ 20CE             >                endif           ; ok        // for other definitions it "points" the correct handler
 327+ 20CE             >                // Use of "; ok" to suppress "warning[fwdref]"
 327+ 20CE             >
 327+ 20CE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 328+ 20CE 0B                           dec     bc                  // prepare IP beforehand
 329+ 20CF 0B                           dec     bc                  // to balance the two final inc bc in (?do)
 330+ 20D0 18 E5                        jr      Do_Ptr
 331+ 20D2
 332+ 20D2              //  ______________________________________________________________________
 333+ 20D2              //
 334+ 20D2              // i            -- n
 335+ 20D2              // used between DO and LOOP or between DO e +LOOP to copy on top of stack
 336+ 20D2              // the current value of the index-loop
 337+ 20D2                              New_Def I, "I", is_code, is_normal
 337+ 20D2             >
 337+ 20D2             >Dict_Ptr        defl    $
 337+ 20D2             >
 337+ 20D2             >//              ______________________________________________________________________
 337+ 20D2             >//              Heap part
 337+ 20D2             >
 337+ 20D2             >
 337+ 20D2             >                org     (Heap_Ptr & $1FFF) + $E000
 337+ E0D2             >
 337+ E0D2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 337+ E0D2             >Latest_Definition defl  Heap_Ptr
 337+ E0D2             >
 337+ E0D2             >                // dummy db directives used to calculate length of namec
 337+ E0D2 49          >                db      "I"
 337+ E0D3             >len_NFA         defl    $ - temp_NFA
 337+ E0D3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 337+ E0D2             >
 337+ E0D2 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 337+ E0D3 49          >                db      "I"               // name string in 7-bit ascii, but
 337+ E0D4             >                org     $-1                 // alter last byte of Name just above to set
 337+ E0D3 C9          >                db      {b $} | END_BIT     // msb as name end
 337+ E0D4             >
 337+ E0D4 C9 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 337+ E0D6             >Prev_Ptr        defl    Heap_Ptr
 337+ E0D6             >
 337+ E0D6             >mirror_Ptr      defl    $
 337+ E0D6             >
 337+ E0D6 D4 20       >                dw      Dict_Ptr + 2        // xt
 337+ E0D8             >Heap_Ptr        defl    $ - $E000           // save current HP
 337+ E0D8             >
 337+ E0D8             >Current_HP      defl  $ - $E000             // used to set HP once!
 337+ E0D8             >
 337+ E0D8             >//              ______________________________________________________________________
 337+ E0D8             >//              Dictionary part
 337+ E0D8             >
 337+ E0D8             >                org     Dict_Ptr
 337+ 20D2             >
 337+ 20D2 D6 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 337+ 20D4             >
 337+ 20D4             >I:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 337+ 20D4 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 337+ 20D4 ~           >
 337+ 20D4 ~           >
 337+ 20D4             >                endif           ; ok        // for other definitions it "points" the correct handler
 337+ 20D4             >                // Use of "; ok" to suppress "warning[fwdref]"
 337+ 20D4             >
 337+ 20D4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 338+ 20D4              I_Ptr:
 339+ 20D4 62                           ld      h, d
 340+ 20D5 6B                           ld      l, e
 341+ 20D6                              // *** ldhlrp
 342+ 20D6              I_Ptr_prime:
 343+ 20D6 7E                           ld      a, (hl)
 344+ 20D7 23                           inc     hl
 345+ 20D8 66                           ld      h, (hl)
 346+ 20D9 6F                           ld      l, a
 347+ 20DA E5                           push    hl
 348+ 20DB                              next
 348+ 20DB DD E9       >                jp      (ix)
 349+ 20DD
 350+ 20DD
 351+ 20DD              //  ______________________________________________________________________
 352+ 20DD              //
 353+ 20DD              // i'            -- n
 354+ 20DD              // used between DO and LOOP or between DO e +LOOP to copy on top of stack
 355+ 20DD              // the limit of the index-loop
 356+ 20DD
 357+ 20DD                              New_Def II, "I'", is_code, is_normal
 357+ 20DD             >
 357+ 20DD             >Dict_Ptr        defl    $
 357+ 20DD             >
 357+ 20DD             >//              ______________________________________________________________________
 357+ 20DD             >//              Heap part
 357+ 20DD             >
 357+ 20DD             >
 357+ 20DD             >                org     (Heap_Ptr & $1FFF) + $E000
 357+ E0D8             >
 357+ E0D8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 357+ E0D8             >Latest_Definition defl  Heap_Ptr
 357+ E0D8             >
 357+ E0D8             >                // dummy db directives used to calculate length of namec
 357+ E0D8 49 27       >                db      "I'"
 357+ E0DA             >len_NFA         defl    $ - temp_NFA
 357+ E0DA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 357+ E0D8             >
 357+ E0D8 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 357+ E0D9 49 27       >                db      "I'"               // name string in 7-bit ascii, but
 357+ E0DB             >                org     $-1                 // alter last byte of Name just above to set
 357+ E0DA A7          >                db      {b $} | END_BIT     // msb as name end
 357+ E0DB             >
 357+ E0DB D2 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 357+ E0DD             >Prev_Ptr        defl    Heap_Ptr
 357+ E0DD             >
 357+ E0DD             >mirror_Ptr      defl    $
 357+ E0DD             >
 357+ E0DD DF 20       >                dw      Dict_Ptr + 2        // xt
 357+ E0DF             >Heap_Ptr        defl    $ - $E000           // save current HP
 357+ E0DF             >
 357+ E0DF             >Current_HP      defl  $ - $E000             // used to set HP once!
 357+ E0DF             >
 357+ E0DF             >//              ______________________________________________________________________
 357+ E0DF             >//              Dictionary part
 357+ E0DF             >
 357+ E0DF             >                org     Dict_Ptr
 357+ 20DD             >
 357+ 20DD DD 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 357+ 20DF             >
 357+ 20DF             >II:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 357+ 20DF ~           >                call    runcode ; ok        // for primitive definitions  actual code
 357+ 20DF ~           >
 357+ 20DF ~           >
 357+ 20DF             >                endif           ; ok        // for other definitions it "points" the correct handler
 357+ 20DF             >                // Use of "; ok" to suppress "warning[fwdref]"
 357+ 20DF             >
 357+ 20DF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 358+ 20DF 62                           ld      h, d
 359+ 20E0 6B                           ld      l, e
 360+ 20E1                              // *** ldhlrp
 361+ 20E1 23                           inc     hl
 362+ 20E2 23                           inc     hl
 363+ 20E3 18 F1                        jr      I_Ptr_prime
 364+ 20E5
 365+ 20E5
 366+ 20E5              //  ______________________________________________________________________
 367+ 20E5              //
 368+ 20E5              // digit        c n -- u tf  |  ff
 369+ 20E5              // convert a character c using base n
 370+ 20E5              // returns a unsigned number and a true flag
 371+ 20E5              // or just a false flag if the conversion fails
 372+ 20E5                              New_Def DIGIT, "DIGIT", is_code, is_normal
 372+ 20E5             >
 372+ 20E5             >Dict_Ptr        defl    $
 372+ 20E5             >
 372+ 20E5             >//              ______________________________________________________________________
 372+ 20E5             >//              Heap part
 372+ 20E5             >
 372+ 20E5             >
 372+ 20E5             >                org     (Heap_Ptr & $1FFF) + $E000
 372+ E0DF             >
 372+ E0DF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 372+ E0DF             >Latest_Definition defl  Heap_Ptr
 372+ E0DF             >
 372+ E0DF             >                // dummy db directives used to calculate length of namec
 372+ E0DF 44 49 47 49 >                db      "DIGIT"
 372+ E0E3 54          >
 372+ E0E4             >len_NFA         defl    $ - temp_NFA
 372+ E0E4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 372+ E0DF             >
 372+ E0DF 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 372+ E0E0 44 49 47 49 >                db      "DIGIT"               // name string in 7-bit ascii, but
 372+ E0E4 54          >
 372+ E0E5             >                org     $-1                 // alter last byte of Name just above to set
 372+ E0E4 D4          >                db      {b $} | END_BIT     // msb as name end
 372+ E0E5             >
 372+ E0E5 D8 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 372+ E0E7             >Prev_Ptr        defl    Heap_Ptr
 372+ E0E7             >
 372+ E0E7             >mirror_Ptr      defl    $
 372+ E0E7             >
 372+ E0E7 E7 20       >                dw      Dict_Ptr + 2        // xt
 372+ E0E9             >Heap_Ptr        defl    $ - $E000           // save current HP
 372+ E0E9             >
 372+ E0E9             >Current_HP      defl  $ - $E000             // used to set HP once!
 372+ E0E9             >
 372+ E0E9             >//              ______________________________________________________________________
 372+ E0E9             >//              Dictionary part
 372+ E0E9             >
 372+ E0E9             >                org     Dict_Ptr
 372+ 20E5             >
 372+ 20E5 E7 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 372+ 20E7             >
 372+ 20E7             >DIGIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 372+ 20E7 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 372+ 20E7 ~           >
 372+ 20E7 ~           >
 372+ 20E7             >                endif           ; ok        // for other definitions it "points" the correct handler
 372+ 20E7             >                // Use of "; ok" to suppress "warning[fwdref]"
 372+ 20E7             >
 372+ 20E7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 373+ 20E7 D9                           exx
 374+ 20E8 E1                           pop     hl                  // l has the base
 375+ 20E9 D1                           pop     de                  // e has the digit
 376+ 20EA 7B                           ld      a, e
 377+ 20EB FE 60                        cp      $60                 // check if lowercase
 378+ 20ED 38 02                        jr      c, Digit_Uppercase
 379+ 20EF D6 20                            sub     $20                 // quick'n'dirty uppercase
 380+ 20F1              Digit_Uppercase:
 381+ 20F1 D6 30                        sub     $30
 382+ 20F3 38 16                        jr      c, Digit_Fail       // fail when character < "0"
 383+ 20F5 FE 0A                            cp      $0A
 384+ 20F7 38 06                            jr      c, Digit_Decimal    // perhaps is not decimal
 385+ 20F9 D6 07                                sub     7                   // try hex and subtract 7
 386+ 20FB FE 0A                                cp      $0A
 387+ 20FD 38 0C                                jr      c,  Digit_Fail      // it is not hex !
 388+ 20FF
 389+ 20FF              Digit_Decimal:
 390+ 20FF                              // compare digit
 391+ 20FF BD                           cp      l                   // compare with base
 392+ 2100 30 09                        jr      nc, Digit_Fail      // fail when greater than base
 393+ 2102 5F                               ld      e, a                // digit is returned as second from TOS
 394+ 2103 21 01 00                         ld      hl, 1
 395+ 2106 D5                               push    de
 396+ 2107 E5                               push    hl
 397+ 2108 D9                               exx
 398+ 2109                                  next
 398+ 2109 DD E9       >                jp      (ix)
 399+ 210B              Digit_Fail:
 400+ 210B 21 00 00                     ld      hl, 0
 401+ 210E E5                           push    hl
 402+ 210F D9                           exx
 403+ 2110                              next
 403+ 2110 DD E9       >                jp      (ix)
 404+ 2112
 405+ 2112              //  ______________________________________________________________________
 406+ 2112              //
 407+ 2112              //  parametric uppercase routine
 408+ 2112              //  depending on the following op-code the routine can be by-passed
 409+ 2112              //  changing the behaviour of some callers.
 410+ 2112              //  If it is "ret" then the system is Case-Sensitive
 411+ 2112              //  If it is "Nop" then the system is Case-Insensitive
 412+ 2112              //  Only A register is touched.
 413+ 2112 00           Case_Sensitive: nop                         // Default is case-insensitive.
 414+ 2113              Case_Upper:
 415+ 2113 FE 61                        cp      LC_A_CHAR           // lower-case "a"
 416+ 2115 D8                           ret     c                   // no change if A < "a"
 417+ 2116 FE 7B                        cp      LC_Z_CHAR + 1       // lower-case "z" + 1
 418+ 2118 D0                           ret     nc                  // no change if A > "z"
 419+ 2119 D6 20                        sub     $20                 // Make uppercase if A in ["a".."z"]
 420+ 211B C9                           ret
 421+ 211C
 422+ 211C              //  ______________________________________________________________________
 423+ 211C              //
 424+ 211C              //  caseon      --
 425+ 211C              // set system case-sensitivity on
 426+ 211C              // it patches a RET/NOP at the beginning of the uppercase-routine
 427+ 211C                              New_Def CASEON, "CASEON", is_code, is_normal
 427+ 211C             >
 427+ 211C             >Dict_Ptr        defl    $
 427+ 211C             >
 427+ 211C             >//              ______________________________________________________________________
 427+ 211C             >//              Heap part
 427+ 211C             >
 427+ 211C             >
 427+ 211C             >                org     (Heap_Ptr & $1FFF) + $E000
 427+ E0E9             >
 427+ E0E9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 427+ E0E9             >Latest_Definition defl  Heap_Ptr
 427+ E0E9             >
 427+ E0E9             >                // dummy db directives used to calculate length of namec
 427+ E0E9 43 41 53 45 >                db      "CASEON"
 427+ E0ED 4F 4E       >
 427+ E0EF             >len_NFA         defl    $ - temp_NFA
 427+ E0EF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 427+ E0E9             >
 427+ E0E9 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 427+ E0EA 43 41 53 45 >                db      "CASEON"               // name string in 7-bit ascii, but
 427+ E0EE 4F 4E       >
 427+ E0F0             >                org     $-1                 // alter last byte of Name just above to set
 427+ E0EF CE          >                db      {b $} | END_BIT     // msb as name end
 427+ E0F0             >
 427+ E0F0 DF 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 427+ E0F2             >Prev_Ptr        defl    Heap_Ptr
 427+ E0F2             >
 427+ E0F2             >mirror_Ptr      defl    $
 427+ E0F2             >
 427+ E0F2 1E 21       >                dw      Dict_Ptr + 2        // xt
 427+ E0F4             >Heap_Ptr        defl    $ - $E000           // save current HP
 427+ E0F4             >
 427+ E0F4             >Current_HP      defl  $ - $E000             // used to set HP once!
 427+ E0F4             >
 427+ E0F4             >//              ______________________________________________________________________
 427+ E0F4             >//              Dictionary part
 427+ E0F4             >
 427+ E0F4             >                org     Dict_Ptr
 427+ 211C             >
 427+ 211C F2 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 427+ 211E             >
 427+ 211E             >CASEON:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 427+ 211E ~           >                call    runcode ; ok        // for primitive definitions  actual code
 427+ 211E ~           >
 427+ 211E ~           >
 427+ 211E             >                endif           ; ok        // for other definitions it "points" the correct handler
 427+ 211E             >                // Use of "; ok" to suppress "warning[fwdref]"
 427+ 211E             >
 427+ 211E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 428+ 211E 3E C9                        ld      a, $C9              // "ret"
 429+ 2120 32 12 21                     ld      (Case_Sensitive), a
 430+ 2123                              next
 430+ 2123 DD E9       >                jp      (ix)
 431+ 2125
 432+ 2125              //  ______________________________________________________________________
 433+ 2125              //
 434+ 2125              //  caseoff     --
 435+ 2125              // set system case-sensitivity on
 436+ 2125              // it patches a RET/NOP at the beginning of the uppercase-routine
 437+ 2125                              New_Def CASEOFF, "CASEOFF", is_code, is_normal
 437+ 2125             >
 437+ 2125             >Dict_Ptr        defl    $
 437+ 2125             >
 437+ 2125             >//              ______________________________________________________________________
 437+ 2125             >//              Heap part
 437+ 2125             >
 437+ 2125             >
 437+ 2125             >                org     (Heap_Ptr & $1FFF) + $E000
 437+ E0F4             >
 437+ E0F4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 437+ E0F4             >Latest_Definition defl  Heap_Ptr
 437+ E0F4             >
 437+ E0F4             >                // dummy db directives used to calculate length of namec
 437+ E0F4 43 41 53 45 >                db      "CASEOFF"
 437+ E0F8 4F 46 46    >
 437+ E0FB             >len_NFA         defl    $ - temp_NFA
 437+ E0FB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 437+ E0F4             >
 437+ E0F4 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 437+ E0F5 43 41 53 45 >                db      "CASEOFF"               // name string in 7-bit ascii, but
 437+ E0F9 4F 46 46    >
 437+ E0FC             >                org     $-1                 // alter last byte of Name just above to set
 437+ E0FB C6          >                db      {b $} | END_BIT     // msb as name end
 437+ E0FC             >
 437+ E0FC E9 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 437+ E0FE             >Prev_Ptr        defl    Heap_Ptr
 437+ E0FE             >
 437+ E0FE             >mirror_Ptr      defl    $
 437+ E0FE             >
 437+ E0FE 27 21       >                dw      Dict_Ptr + 2        // xt
 437+ E100             >Heap_Ptr        defl    $ - $E000           // save current HP
 437+ E100             >
 437+ E100             >Current_HP      defl  $ - $E000             // used to set HP once!
 437+ E100             >
 437+ E100             >//              ______________________________________________________________________
 437+ E100             >//              Dictionary part
 437+ E100             >
 437+ E100             >                org     Dict_Ptr
 437+ 2125             >
 437+ 2125 FE 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 437+ 2127             >
 437+ 2127             >CASEOFF:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 437+ 2127 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 437+ 2127 ~           >
 437+ 2127 ~           >
 437+ 2127             >                endif           ; ok        // for other definitions it "points" the correct handler
 437+ 2127             >                // Use of "; ok" to suppress "warning[fwdref]"
 437+ 2127             >
 437+ 2127             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 438+ 2127 3E 00                        ld      a, $00              // "nop"
 439+ 2129 32 12 21                     ld      (Case_Sensitive), a
 440+ 212C                              next
 440+ 212C DD E9       >                jp      (ix)
 441+ 212E
 442+ 212E              //  ______________________________________________________________________
 443+ 212E              //
 444+ 212E              //  upper       c1 -- c1 | c2
 445+ 212E              // character on top of stack is forced to Uppercase.
 446+ 212E                              New_Def UPPER, "UPPER", is_code, is_normal
 446+ 212E             >
 446+ 212E             >Dict_Ptr        defl    $
 446+ 212E             >
 446+ 212E             >//              ______________________________________________________________________
 446+ 212E             >//              Heap part
 446+ 212E             >
 446+ 212E             >
 446+ 212E             >                org     (Heap_Ptr & $1FFF) + $E000
 446+ E100             >
 446+ E100             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 446+ E100             >Latest_Definition defl  Heap_Ptr
 446+ E100             >
 446+ E100             >                // dummy db directives used to calculate length of namec
 446+ E100 55 50 50 45 >                db      "UPPER"
 446+ E104 52          >
 446+ E105             >len_NFA         defl    $ - temp_NFA
 446+ E105             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 446+ E100             >
 446+ E100 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 446+ E101 55 50 50 45 >                db      "UPPER"               // name string in 7-bit ascii, but
 446+ E105 52          >
 446+ E106             >                org     $-1                 // alter last byte of Name just above to set
 446+ E105 D2          >                db      {b $} | END_BIT     // msb as name end
 446+ E106             >
 446+ E106 F4 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 446+ E108             >Prev_Ptr        defl    Heap_Ptr
 446+ E108             >
 446+ E108             >mirror_Ptr      defl    $
 446+ E108             >
 446+ E108 30 21       >                dw      Dict_Ptr + 2        // xt
 446+ E10A             >Heap_Ptr        defl    $ - $E000           // save current HP
 446+ E10A             >
 446+ E10A             >Current_HP      defl  $ - $E000             // used to set HP once!
 446+ E10A             >
 446+ E10A             >//              ______________________________________________________________________
 446+ E10A             >//              Dictionary part
 446+ E10A             >
 446+ E10A             >                org     Dict_Ptr
 446+ 212E             >
 446+ 212E 08 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 446+ 2130             >
 446+ 2130             >UPPER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 446+ 2130 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 446+ 2130 ~           >
 446+ 2130 ~           >
 446+ 2130             >                endif           ; ok        // for other definitions it "points" the correct handler
 446+ 2130             >                // Use of "; ok" to suppress "warning[fwdref]"
 446+ 2130             >
 446+ 2130             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 447+ 2130 E1                           pop     hl
 448+ 2131 7D                           ld      a, l
 449+ 2132 CD 13 21                     call    Case_Upper
 450+ 2135 6F                           ld      l, a
 451+ 2136
 452+ 2136                              psh1
 452+ 2136 E5          >                push    hl
 452+ 2137 DD E9       >                jp      (ix)
 453+ 2139
 454+ 2139              //  ______________________________________________________________________
 455+ 2139
 456+ 2139              MMU7_read:
 457+ 2139 3E 57                        ld      a, 87
 458+ 213B              NEXTREG_read:
 459+ 213B 01 3B 24                     ld      bc, $243B
 460+ 213E ED 79                        out     (c), a
 461+ 2140 04                           inc     b
 462+ 2141 ED 78                        in      a, (c)
 463+ 2143 C9                           ret
 464+ 2144
 465+ 2144              //  ______________________________________________________________________
 466+ 2144
 467+ 2144              TO_FAR_rout:
 468+ 2144 7C                           ld      a, h
 469+ 2145 08                           ex      af, af
 470+ 2146 7C                           ld      a, h
 471+ 2147 F6 E0                        or      $E0
 472+ 2149 67                           ld      h, a
 473+ 214A 08                           ex      af, af
 474+ 214B 07                           rlca
 475+ 214C 07                           rlca
 476+ 214D 07                           rlca
 477+ 214E E6 07                        and     $07
 478+ 2150 C6 20                        add     $20
 479+ 2152 C9                           ret
 480+ 2153
 481+ 2153
 482+ 2153              //  ______________________________________________________________________
 483+ 2153              //
 484+ 2153              // (find)       addr voc -- 0 | cfa b 1
 485+ 2153              // vocabulary search,
 486+ 2153              // - voc is starting word's NFA
 487+ 2153              // - addr is the string to be searched for
 488+ 2153              // On success, it returns the CFA of found word, the first NFA byte
 489+ 2153              // (which contains length and some flags) and a true flag.
 490+ 2153              // On fail, a false flag  (no more: leaves addr unchanged)
 491+ 2153                              New_Def C_FIND, "(FIND)", is_code, is_normal
 491+ 2153             >
 491+ 2153             >Dict_Ptr        defl    $
 491+ 2153             >
 491+ 2153             >//              ______________________________________________________________________
 491+ 2153             >//              Heap part
 491+ 2153             >
 491+ 2153             >
 491+ 2153             >                org     (Heap_Ptr & $1FFF) + $E000
 491+ E10A             >
 491+ E10A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 491+ E10A             >Latest_Definition defl  Heap_Ptr
 491+ E10A             >
 491+ E10A             >                // dummy db directives used to calculate length of namec
 491+ E10A 28 46 49 4E >                db      "(FIND)"
 491+ E10E 44 29       >
 491+ E110             >len_NFA         defl    $ - temp_NFA
 491+ E110             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 491+ E10A             >
 491+ E10A 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 491+ E10B 28 46 49 4E >                db      "(FIND)"               // name string in 7-bit ascii, but
 491+ E10F 44 29       >
 491+ E111             >                org     $-1                 // alter last byte of Name just above to set
 491+ E110 A9          >                db      {b $} | END_BIT     // msb as name end
 491+ E111             >
 491+ E111 00 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 491+ E113             >Prev_Ptr        defl    Heap_Ptr
 491+ E113             >
 491+ E113             >mirror_Ptr      defl    $
 491+ E113             >
 491+ E113 55 21       >                dw      Dict_Ptr + 2        // xt
 491+ E115             >Heap_Ptr        defl    $ - $E000           // save current HP
 491+ E115             >
 491+ E115             >Current_HP      defl  $ - $E000             // used to set HP once!
 491+ E115             >
 491+ E115             >//              ______________________________________________________________________
 491+ E115             >//              Dictionary part
 491+ E115             >
 491+ E115             >                org     Dict_Ptr
 491+ 2153             >
 491+ 2153 13 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 491+ 2155             >
 491+ 2155             >C_FIND:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 491+ 2155 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 491+ 2155 ~           >
 491+ 2155 ~           >
 491+ 2155             >                endif           ; ok        // for other definitions it "points" the correct handler
 491+ 2155             >                // Use of "; ok" to suppress "warning[fwdref]"
 491+ 2155             >
 491+ 2155             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 492+ 2155 D9                           exx
 493+ 2156 CD 39 21                     call    MMU7_read
 494+ 2159 D9                           exx
 495+ 215A 6F                           ld      l, a
 496+ 215B D9                           exx
 497+ 215C
 498+ 215C D1                           pop     de                      // de has dictionary pointer
 499+ 215D              Find_VocabularyLoop:
 500+ 215D 7A                               ld      a, d
 501+ 215E D6 60                            sub     $60
 502+ 2160 30 08                            jr      nc, Find_far_endif
 503+ 2162 EB                                   ex      de, hl
 504+ 2163 CD 44 21                             call    TO_FAR_rout
 505+ 2166 EB                                   ex      de, hl
 506+ 2167 ED 92 57                             nextreg 87, a
 507+ 216A              Find_far_endif:
 508+ 216A E1                               pop     hl                  // string pointer to search for
 509+ 216B E5                               push    hl                  // keep it on stack too for the end.
 510+ 216C 1A                               ld      a, (de)             // save NFA length byte
 511+ 216D 08                               ex      af,af'              // for later use (!)
 512+ 216E 1A                               ld      a, (de)             // reload NFA length byte
 513+ 216F AE                               xor     (hl)                // check if same length
 514+ 2170 E6 3F                            and     $3F                 // by resetting 3 high bits (flags)
 515+ 2172                                  // word and text haven't the same length, skip to next vocabulary entry
 516+ 2172 20 33                            jr      nz, Find_DifferentLenght
 517+ 2174
 518+ 2174              Find_ThisWord:      // begin loop
 519+ 2174 23                                   inc     hl
 520+ 2175 13                                   inc     de
 521+ 2176 1A                                   ld      a, (de)
 522+ 2177                                      // case insensitive option - begin
 523+ 2177                                      // push    bc
 524+ 2177 E6 80                                and     $80                 // split A in msb and the rest
 525+ 2179 47                                   ld      b, a
 526+ 217A 1A                                   ld      a, (de)
 527+ 217B E6 7F                                and     $7F                 // ... the rest (lower 7 bits)
 528+ 217D CD 12 21                             call    Case_Sensitive      // uppercase routine
 529+ 2180 4F                                   ld      c, a
 530+ 2181 7E                                   ld      a, (hl)
 531+ 2182 CD 12 21                             call    Case_Sensitive      // uppercase routine
 532+ 2185 A9                                   xor     c
 533+ 2186 A8                                   xor     b
 534+ 2187                                      // pop     bc
 535+ 2187                                      // case insensitive option - end
 536+ 2187 87                                   add     a                   // ignore msb during compare
 537+ 2188 20 1B                                jr      nz, Find_DidntMatch  // jump if doesn't match (*)
 538+ 218A
 539+ 218A                                  // loop back until last byte msb is found set
 540+ 218A                                  // that bit marks the ending char of this word
 541+ 218A 30 E8                            jr      nc, Find_ThisWord
 542+ 218C
 543+ 218C                                  // match found !
 544+ 218C 21 03 00                         ld      hl, 3               // 3 bytes for CFA offset to skip LFA
 545+ 218F 19                               add     hl, de
 546+ 2190
 547+ 2190                              //  ld      a, h
 548+ 2190                              //  and     $E0
 549+ 2190                              //  xor     h
 550+ 2190                              //  jr      nz, Non_MMU7
 551+ 2190                                  //  call    MMU7_read
 552+ 2190                                  //  dec     a
 553+ 2190                                  //  jr      z, Non_MMU7
 554+ 2190 5E                                       ld      e, (hl)
 555+ 2191 23                                       inc     hl
 556+ 2192 56                                       ld      d, (hl)
 557+ 2193 EB                                       ex      de, hl
 558+ 2194              //Non_MMU7:
 559+ 2194 E3                               ex      (sp), hl            // CFA on stack and drop addr
 560+ 2195 08                               ex      af, af'             // retrieve NFA byte (!)
 561+ 2196 5F                               ld      e, a
 562+ 2197 16 00                            ld      d, 0
 563+ 2199 21 FF FF                         ld      hl, -1
 564+ 219C D5                               push    de
 565+ 219D E5                               push    hl
 566+ 219E D9                               exx
 567+ 219F 7D                               ld      a, l
 568+ 21A0 ED 92 57                         nextreg 87, a
 569+ 21A3                                  next
 569+ 21A3 DD E9       >                jp      (ix)
 570+ 21A5
 571+ 21A5              Find_DidntMatch: // didn't match (*)
 572+ 21A5 38 05                            jr      c,  Find_WordEnd   // jump if not end of word (**)
 573+ 21A7
 574+ 21A7              Find_DifferentLenght:
 575+ 21A7                                  // consume chars until the end of the word
 576+ 21A7                                  // that is last byte msb is found set
 577+ 21A7 13                                   inc     de
 578+ 21A8 1A                                   ld      a, (de)
 579+ 21A9 87                                   add     a, a
 580+ 21AA 30 FB                            jr      nc, Find_DifferentLenght
 581+ 21AC
 582+ 21AC              Find_WordEnd:   // word-end  found (**)
 583+ 21AC                                  // take LFA and use it
 584+ 21AC 13                               inc     de
 585+ 21AD EB                               ex      de, hl
 586+ 21AE 5E                               ld      e, (hl)
 587+ 21AF 23                               inc     hl
 588+ 21B0 56                               ld      d, (hl)
 589+ 21B1 7A                               ld      a, d
 590+ 21B2 B3                               or      e
 591+ 21B3
 592+ 21B3                              // loop until end of vocabulary
 593+ 21B3 20 A8                        jr      nz, Find_VocabularyLoop
 594+ 21B5
 595+ 21B5 E1                           pop     hl              // without this, leaves addr unchanged
 596+ 21B6 21 00 00                     ld      hl, 0
 597+ 21B9 E5                           push    hl
 598+ 21BA D9                           exx
 599+ 21BB 7D                           ld      a, l
 600+ 21BC ED 92 57                     nextreg 87, a
 601+ 21BF                              next
 601+ 21BF DD E9       >                jp      (ix)
 602+ 21C1
 603+ 21C1              //  ______________________________________________________________________
 604+ 21C1              //
 605+ 21C1              // enclose      a c -- a  n1 n2 n3
 606+ 21C1              // starting from a, using delimiter c, determines the offsets:
 607+ 21C1              //   n1   the first character non-delimiter
 608+ 21C1              //   n2   the first delimiter after the text
 609+ 21C1              //   n3   the first character non enclosed.
 610+ 21C1              // This procedure does not go beyond a 'nul' ASCII (0x00) that represents
 611+ 21C1              // an uncoditional delimiter.
 612+ 21C1              // Examples:
 613+ 21C1              //   i:	c  c  x  x  x  c  x	 -- 2  5  6
 614+ 21C1              //  ii:	c  c  x  x  x  'nul' -- 2  5  5
 615+ 21C1              // iii:	c  c  'nul'          -- 2  3  2
 616+ 21C1                              New_Def ENCLOSE, "ENCLOSE", is_code, is_normal
 616+ 21C1             >
 616+ 21C1             >Dict_Ptr        defl    $
 616+ 21C1             >
 616+ 21C1             >//              ______________________________________________________________________
 616+ 21C1             >//              Heap part
 616+ 21C1             >
 616+ 21C1             >
 616+ 21C1             >                org     (Heap_Ptr & $1FFF) + $E000
 616+ E115             >
 616+ E115             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 616+ E115             >Latest_Definition defl  Heap_Ptr
 616+ E115             >
 616+ E115             >                // dummy db directives used to calculate length of namec
 616+ E115 45 4E 43 4C >                db      "ENCLOSE"
 616+ E119 4F 53 45    >
 616+ E11C             >len_NFA         defl    $ - temp_NFA
 616+ E11C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 616+ E115             >
 616+ E115 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 616+ E116 45 4E 43 4C >                db      "ENCLOSE"               // name string in 7-bit ascii, but
 616+ E11A 4F 53 45    >
 616+ E11D             >                org     $-1                 // alter last byte of Name just above to set
 616+ E11C C5          >                db      {b $} | END_BIT     // msb as name end
 616+ E11D             >
 616+ E11D 0A 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 616+ E11F             >Prev_Ptr        defl    Heap_Ptr
 616+ E11F             >
 616+ E11F             >mirror_Ptr      defl    $
 616+ E11F             >
 616+ E11F C3 21       >                dw      Dict_Ptr + 2        // xt
 616+ E121             >Heap_Ptr        defl    $ - $E000           // save current HP
 616+ E121             >
 616+ E121             >Current_HP      defl  $ - $E000             // used to set HP once!
 616+ E121             >
 616+ E121             >//              ______________________________________________________________________
 616+ E121             >//              Dictionary part
 616+ E121             >
 616+ E121             >                org     Dict_Ptr
 616+ 21C1             >
 616+ 21C1 1F 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 616+ 21C3             >
 616+ 21C3             >ENCLOSE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 616+ 21C3 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 616+ 21C3 ~           >
 616+ 21C3 ~           >
 616+ 21C3             >                endif           ; ok        // for other definitions it "points" the correct handler
 616+ 21C3             >                // Use of "; ok" to suppress "warning[fwdref]"
 616+ 21C3             >
 616+ 21C3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 617+ 21C3 D9                           exx
 618+ 21C4 D1                           pop     de                  //  e has the character
 619+ 21C5 E1                           pop     hl                  // hl has the string address
 620+ 21C6 E5                           push    hl
 621+ 21C7 7B                           ld      a, e
 622+ 21C8 11 FF FF                     ld      de, -1              // let's start from -1
 623+ 21CB 2B                           dec     hl
 624+ 21CC              Enclose_NonDelimiter:
 625+ 21CC                              // find first non delimiter
 626+ 21CC 23                               inc     hl
 627+ 21CD 13                               inc     de
 628+ 21CE BE                               cp      (hl)
 629+ 21CF 28 FB                        jr      z, Enclose_NonDelimiter
 630+ 21D1 D5                           push    de
 631+ 21D2
 632+ 21D2                              // push    bc                  // save Instruction Pointer
 633+ 21D2
 634+ 21D2 4F                           ld      c, a                // save char
 635+ 21D3 7E                           ld      a, (hl)
 636+ 21D4 A7                           and     a                   // stop if 0x00
 637+ 21D5 20 07                        jr      nz, Enclose_NextChar
 638+ 21D7                              /// case iii. no more character in string
 639+ 21D7                                  // pop     bc                  // restore Instruction Pointer
 640+ 21D7 13                               inc     de
 641+ 21D8 D5                               push    de
 642+ 21D9 1B                               dec     de
 643+ 21DA D5                               push    de
 644+ 21DB D9                               exx
 645+ 21DC                                  next
 645+ 21DC DD E9       >                jp      (ix)
 646+ 21DE              Enclose_NextChar:
 647+ 21DE 79                               ld      a, c
 648+ 21DF 23                               inc     hl
 649+ 21E0 13                               inc     de
 650+ 21E1 BE                               cp      (hl)
 651+ 21E2 20 06                            jr      nz, Enclose_NonSeparator
 652+ 21E4                                      // case i. first non enclosed
 653+ 21E4                                      // pop     bc                  // restore Instruction Pointer
 654+ 21E4 D5                                   push    de
 655+ 21E5 13                                   inc     de
 656+ 21E6 D5                                   push    de
 657+ 21E7 D9                                   exx
 658+ 21E8                                      next
 658+ 21E8 DD E9       >                jp      (ix)
 659+ 21EA              Enclose_NonSeparator:
 660+ 21EA 7E                               ld      a, (hl)
 661+ 21EB A7                               and     a
 662+ 21EC 20 F0                        jr      nz, Enclose_NextChar
 663+ 21EE
 664+ 21EE                              // case ii. separator & terminator
 665+ 21EE                              // pop     bc                  // restore Instruction Pointer
 666+ 21EE D5                           push    de
 667+ 21EF D5                           push    de
 668+ 21F0 D9                           exx
 669+ 21F1                              next
 669+ 21F1 DD E9       >                jp      (ix)
 670+ 21F3
 671+ 21F3              //  ______________________________________________________________________
 672+ 21F3              //
 673+ 21F3              // (map)        a2 a1 n c1 -- c2
 674+ 21F3              // translate character c1 using mapping string a2 and a2
 675+ 21F3              // if c1 is not present within string a1 then
 676+ 21F3              // c2 = c2 if it is not translated. n is the length of both a1 and a2.
 677+ 21F3                              New_Def C_MAP, "(MAP)", is_code, is_normal
 677+ 21F3             >
 677+ 21F3             >Dict_Ptr        defl    $
 677+ 21F3             >
 677+ 21F3             >//              ______________________________________________________________________
 677+ 21F3             >//              Heap part
 677+ 21F3             >
 677+ 21F3             >
 677+ 21F3             >                org     (Heap_Ptr & $1FFF) + $E000
 677+ E121             >
 677+ E121             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 677+ E121             >Latest_Definition defl  Heap_Ptr
 677+ E121             >
 677+ E121             >                // dummy db directives used to calculate length of namec
 677+ E121 28 4D 41 50 >                db      "(MAP)"
 677+ E125 29          >
 677+ E126             >len_NFA         defl    $ - temp_NFA
 677+ E126             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 677+ E121             >
 677+ E121 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 677+ E122 28 4D 41 50 >                db      "(MAP)"               // name string in 7-bit ascii, but
 677+ E126 29          >
 677+ E127             >                org     $-1                 // alter last byte of Name just above to set
 677+ E126 A9          >                db      {b $} | END_BIT     // msb as name end
 677+ E127             >
 677+ E127 15 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 677+ E129             >Prev_Ptr        defl    Heap_Ptr
 677+ E129             >
 677+ E129             >mirror_Ptr      defl    $
 677+ E129             >
 677+ E129 F5 21       >                dw      Dict_Ptr + 2        // xt
 677+ E12B             >Heap_Ptr        defl    $ - $E000           // save current HP
 677+ E12B             >
 677+ E12B             >Current_HP      defl  $ - $E000             // used to set HP once!
 677+ E12B             >
 677+ E12B             >//              ______________________________________________________________________
 677+ E12B             >//              Dictionary part
 677+ E12B             >
 677+ E12B             >                org     Dict_Ptr
 677+ 21F3             >
 677+ 21F3 29 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 677+ 21F5             >
 677+ 21F5             >C_MAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 677+ 21F5 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 677+ 21F5 ~           >
 677+ 21F5 ~           >
 677+ 21F5             >                endif           ; ok        // for other definitions it "points" the correct handler
 677+ 21F5             >                // Use of "; ok" to suppress "warning[fwdref]"
 677+ 21F5             >
 677+ 21F5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 678+ 21F5 D9                           exx
 679+ 21F6 E1                           pop     hl
 680+ 21F7 7D                           ld      a, l
 681+ 21F8 C1                           pop     bc
 682+ 21F9 E1                           pop     hl
 683+ 21FA 50                           ld      d, b
 684+ 21FB 59                           ld      e, c
 685+ 21FC ED B1                        cpir
 686+ 21FE E1                           pop     hl
 687+ 21FF 20 05                        jr      nz, C_Map_Then
 687+ 2201
 688+ 2201 19                               add     hl, de
 689+ 2202 2B                               dec     hl
 690+ 2203 ED 42                            sbc     hl, bc
 691+ 2205 7E                               ld      a, (hl)
 692+ 2206              C_Map_Then:
 693+ 2206 6F                           ld      l, a
 694+ 2207 26 00                        ld      h, 0
 695+ 2209 E5                           push    hl
 696+ 220A D9                           exx
 697+ 220B                              next
 697+ 220B DD E9       >                jp      (ix)
 698+ 220D
 699+ 220D              //  ______________________________________________________________________
 700+ 220D              //
 701+ 220D              // (compare)    a1 a2 n -- b
 702+ 220D              // this word performs a lexicographic compare of n bytes of text at address a1
 703+ 220D              // with n bytes of text at address a2. It returns numeric a value:
 704+ 220D              //  0 : if strings are equal
 705+ 220D              // +1 : if string at a1 greater than string at a2
 706+ 220D              // -1 : if string at a1 less than string at a2
 707+ 220D              // strings can be 256 bytes in length at most.
 708+ 220D                              New_Def C_COMPARE, "(COMPARE)", is_code, is_normal
 708+ 220D             >
 708+ 220D             >Dict_Ptr        defl    $
 708+ 220D             >
 708+ 220D             >//              ______________________________________________________________________
 708+ 220D             >//              Heap part
 708+ 220D             >
 708+ 220D             >
 708+ 220D             >                org     (Heap_Ptr & $1FFF) + $E000
 708+ E12B             >
 708+ E12B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 708+ E12B             >Latest_Definition defl  Heap_Ptr
 708+ E12B             >
 708+ E12B             >                // dummy db directives used to calculate length of namec
 708+ E12B 28 43 4F 4D >                db      "(COMPARE)"
 708+ E12F 50 41 52 45 >
 708+ E133 29          >
 708+ E134             >len_NFA         defl    $ - temp_NFA
 708+ E134             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 708+ E12B             >
 708+ E12B 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 708+ E12C 28 43 4F 4D >                db      "(COMPARE)"               // name string in 7-bit ascii, but
 708+ E130 50 41 52 45 >
 708+ E134 29          >
 708+ E135             >                org     $-1                 // alter last byte of Name just above to set
 708+ E134 A9          >                db      {b $} | END_BIT     // msb as name end
 708+ E135             >
 708+ E135 21 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 708+ E137             >Prev_Ptr        defl    Heap_Ptr
 708+ E137             >
 708+ E137             >mirror_Ptr      defl    $
 708+ E137             >
 708+ E137 0F 22       >                dw      Dict_Ptr + 2        // xt
 708+ E139             >Heap_Ptr        defl    $ - $E000           // save current HP
 708+ E139             >
 708+ E139             >Current_HP      defl  $ - $E000             // used to set HP once!
 708+ E139             >
 708+ E139             >//              ______________________________________________________________________
 708+ E139             >//              Dictionary part
 708+ E139             >
 708+ E139             >                org     Dict_Ptr
 708+ 220D             >
 708+ 220D 37 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 708+ 220F             >
 708+ 220F             >C_COMPARE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 708+ 220F ~           >                call    runcode ; ok        // for primitive definitions  actual code
 708+ 220F ~           >
 708+ 220F ~           >
 708+ 220F             >                endif           ; ok        // for other definitions it "points" the correct handler
 708+ 220F             >                // Use of "; ok" to suppress "warning[fwdref]"
 708+ 220F             >
 708+ 220F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 709+ 220F D9                           exx
 710+ 2210 E1                           pop     hl                  // Number of bytes
 711+ 2211 7D                           ld      a, l
 712+ 2212 E1                           pop     hl                  // hl points string a2
 713+ 2213 D1                           pop     de                  // hl points string a1
 714+ 2214              //              push    bc                  // Instruction pointer on stack
 715+ 2214 47                           ld      b, a
 716+ 2215              C_Compare_Loop:
 717+ 2215 7E                               ld      a, (hl)
 718+ 2216 CD 12 21                         call    Case_Sensitive
 719+ 2219 4F                               ld      c, a
 720+ 221A 1A                               ld      a, (de)
 721+ 221B CD 12 21                         call    Case_Sensitive
 722+ 221E B9                               cp      c
 723+ 221F 13                               inc     de
 724+ 2220 23                               inc     hl
 725+ 2221 28 0E                            jr      z, C_Compare_Equal
 726+ 2223 38 05                                jr      c, C_Compare_NotLessThan  // If LessThan
 727+ 2225 21 01 00                                 ld      hl, 1               // a1 gt a2
 728+ 2228 18 03                                jr      C_Compare_Then      // Else
 729+ 222A              C_Compare_NotLessThan:
 730+ 222A 21 FF FF                                 ld      hl, -1              // a1 lt a2
 731+ 222D              C_Compare_Then:                                 // Endif
 732+ 222D              //                      pop     bc              // restore Instruction Pointer
 733+ 222D E5                                   push    hl
 734+ 222E D9                                   exx
 735+ 222F
 736+ 222F                                      next
 736+ 222F DD E9       >                jp      (ix)
 737+ 2231
 738+ 2231              C_Compare_Equal:
 739+ 2231 10 E2                        djnz    C_Compare_Loop
 740+ 2233 21 00 00                     ld      hl, 0               // a1 eq a2
 741+ 2236              //              pop     bc                  // restore Instruction Pointer
 742+ 2236 E5                           push    hl
 743+ 2237 D9                           exx
 744+ 2238
 745+ 2238                              next
 745+ 2238 DD E9       >                jp      (ix)
 746+ 223A
 747+ 223A              //  ______________________________________________________________________
 748+ 223A              //
 749+ 223A              // emitc        c --
 750+ 223A              // low level emit, calls ROM routine at #10 to send a character to
 751+ 223A              // the the current channel (see SELECT to change stream-channel)
 752+ 223A                              New_Def EMITC, "EMITC", is_code, is_normal
 752+ 223A             >
 752+ 223A             >Dict_Ptr        defl    $
 752+ 223A             >
 752+ 223A             >//              ______________________________________________________________________
 752+ 223A             >//              Heap part
 752+ 223A             >
 752+ 223A             >
 752+ 223A             >                org     (Heap_Ptr & $1FFF) + $E000
 752+ E139             >
 752+ E139             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 752+ E139             >Latest_Definition defl  Heap_Ptr
 752+ E139             >
 752+ E139             >                // dummy db directives used to calculate length of namec
 752+ E139 45 4D 49 54 >                db      "EMITC"
 752+ E13D 43          >
 752+ E13E             >len_NFA         defl    $ - temp_NFA
 752+ E13E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 752+ E139             >
 752+ E139 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 752+ E13A 45 4D 49 54 >                db      "EMITC"               // name string in 7-bit ascii, but
 752+ E13E 43          >
 752+ E13F             >                org     $-1                 // alter last byte of Name just above to set
 752+ E13E C3          >                db      {b $} | END_BIT     // msb as name end
 752+ E13F             >
 752+ E13F 2B 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 752+ E141             >Prev_Ptr        defl    Heap_Ptr
 752+ E141             >
 752+ E141             >mirror_Ptr      defl    $
 752+ E141             >
 752+ E141 3C 22       >                dw      Dict_Ptr + 2        // xt
 752+ E143             >Heap_Ptr        defl    $ - $E000           // save current HP
 752+ E143             >
 752+ E143             >Current_HP      defl  $ - $E000             // used to set HP once!
 752+ E143             >
 752+ E143             >//              ______________________________________________________________________
 752+ E143             >//              Dictionary part
 752+ E143             >
 752+ E143             >                org     Dict_Ptr
 752+ 223A             >
 752+ 223A 41 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 752+ 223C             >
 752+ 223C             >EMITC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 752+ 223C ~           >                call    runcode ; ok        // for primitive definitions  actual code
 752+ 223C ~           >
 752+ 223C ~           >
 752+ 223C             >                endif           ; ok        // for other definitions it "points" the correct handler
 752+ 223C             >                // Use of "; ok" to suppress "warning[fwdref]"
 752+ 223C             >
 752+ 223C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 753+ 223C E1                           pop     hl
 754+ 223D 7D                           ld      a, l
 755+ 223E              Emitc_Ptr:
 756+ 223E C5                           push    bc
 757+ 223F D5                           push    de
 758+ 2240 DD E5                        push    ix
 759+ 2242 F3                           di
 760+ 2243 D7                           rst     $10
 761+ 2244 FB                           ei
 762+ 2245 DD E1                        pop     ix
 763+ 2247 D1                           pop     de
 764+ 2248 C1                           pop     bc
 765+ 2249              //              ld      a, -1            // max possible
 766+ 2249              //              ld      (SCR_CT), a
 767+ 2249                              next
 767+ 2249 DD E9       >                jp      (ix)
 768+ 224B
 769+ 224B              //  ______________________________________________________________________
 770+ 224B              //
 771+ 224B              // cr           --
 772+ 224B              // send a CR via EMITC
 773+ 224B                              Colon_Def CLS, "CR", is_normal
 773+ 224B             >                New_Def  CLS, "CR", Enter_Ptr, is_normal ; ok
 773+ 224B             >
 773+ 224B             >Dict_Ptr        defl    $
 773+ 224B             >
 773+ 224B             >//              ______________________________________________________________________
 773+ 224B             >//              Heap part
 773+ 224B             >
 773+ 224B             >
 773+ 224B             >                org     (Heap_Ptr & $1FFF) + $E000
 773+ E143             >
 773+ E143             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 773+ E143             >Latest_Definition defl  Heap_Ptr
 773+ E143             >
 773+ E143             >                // dummy db directives used to calculate length of namec
 773+ E143 43 52       >                db      "CR"
 773+ E145             >len_NFA         defl    $ - temp_NFA
 773+ E145             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 773+ E143             >
 773+ E143 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 773+ E144 43 52       >                db      "CR"               // name string in 7-bit ascii, but
 773+ E146             >                org     $-1                 // alter last byte of Name just above to set
 773+ E145 D2          >                db      {b $} | END_BIT     // msb as name end
 773+ E146             >
 773+ E146 39 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 773+ E148             >Prev_Ptr        defl    Heap_Ptr
 773+ E148             >
 773+ E148             >mirror_Ptr      defl    $
 773+ E148             >
 773+ E148 4D 22       >                dw      Dict_Ptr + 2        // xt
 773+ E14A             >Heap_Ptr        defl    $ - $E000           // save current HP
 773+ E14A             >
 773+ E14A             >Current_HP      defl  $ - $E000             // used to set HP once!
 773+ E14A             >
 773+ E14A             >//              ______________________________________________________________________
 773+ E14A             >//              Dictionary part
 773+ E14A             >
 773+ E14A             >                org     Dict_Ptr
 773+ 224B             >
 773+ 224B 48 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 773+ 224D             >
C:\Zx\CSpect\Projects\vForth17_DOT/source/system.asm(163): warning: Label has different value in pass 3: previous value 15761 not equal 8781
C:\Zx\CSpect\Projects\vForth17_DOT/source/L0.asm(773): ^ emitted from here
 773+ 224D             >CLS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 773+ 224D CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 773+ 2250             >
 773+ 2250             >
 773+ 2250             >                endif           ; ok        // for other definitions it "points" the correct handler
 773+ 2250             >                // Use of "; ok" to suppress "warning[fwdref]"
 773+ 2250             >
 773+ 2250             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 774+ 2250 3D 20 1A 00                  dw      LIT, 26, EMITC
 774+ 2254 3C 22
 775+ 2256 44 27 3C 22                  dw      ZERO, EMITC
 776+ 225A 3D 20 0D 00                  dw      LIT, 13, EMITC
 776+ 225E 3C 22
 777+ 2260 02 25                        dw      EXIT
 778+ 2262
 779+ 2262              Emitc_Vec:
 780+ 2262 9B 22                        dw      C_Emit_Printable  // comma
 781+ 2264 A2 22                        dw      C_Emit_Bel        // bel
 782+ 2266 9B 22                        dw      C_Emit_Printable  // bs
 783+ 2268 BC 22                        dw      C_Emit_Tab        // tab
 784+ 226A 9B 22                        dw      C_Emit_Printable  // cr
 785+ 226C C1 22                        dw      C_Emit_NL         // lf (unix newline)
 786+ 226E 9B 22                        dw      C_Emit_Printable  // blank
 787+ 2270 9B 22                        dw      C_Emit_Printable  // blank
 788+ 2272
 789+ 2272              Emit_Selector_Start:
 790+ 2272 06                           db      $06                 // comma
 791+ 2273 07                           db      $07                 // bel
 792+ 2274 08                           db      $08                 // bs
 793+ 2275 09                           db      $09                 // tab
 794+ 2276 0D                           db      $0D                 // cr
 795+ 2277 0A                           db      $0A                 // lf (unix newline)
 796+ 2278 20                           db      $20
 797+ 2279              Emit_Selector_End:
 798+ 2279 20                           db      $20
 799+ 227A
 800+ 227A              //  ______________________________________________________________________
 801+ 227A              //
 802+ 227A              // (?emit)      c1 -- c2 | c1
 803+ 227A              // decode a character to be sent via EMIT
 804+ 227A              // search first the Emit_Selector table, if found jump to the corresponding routine in Emit_Vector
 805+ 227A              // the routine should resolve anything and convert the character anyway.
 806+ 227A                              New_Def C_EMIT, "(?EMIT)", is_code, is_normal
 806+ 227A             >
 806+ 227A             >Dict_Ptr        defl    $
 806+ 227A             >
 806+ 227A             >//              ______________________________________________________________________
 806+ 227A             >//              Heap part
 806+ 227A             >
 806+ 227A             >
 806+ 227A             >                org     (Heap_Ptr & $1FFF) + $E000
 806+ E14A             >
 806+ E14A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 806+ E14A             >Latest_Definition defl  Heap_Ptr
 806+ E14A             >
 806+ E14A             >                // dummy db directives used to calculate length of namec
 806+ E14A 28 3F 45 4D >                db      "(?EMIT)"
 806+ E14E 49 54 29    >
 806+ E151             >len_NFA         defl    $ - temp_NFA
 806+ E151             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 806+ E14A             >
 806+ E14A 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 806+ E14B 28 3F 45 4D >                db      "(?EMIT)"               // name string in 7-bit ascii, but
 806+ E14F 49 54 29    >
 806+ E152             >                org     $-1                 // alter last byte of Name just above to set
 806+ E151 A9          >                db      {b $} | END_BIT     // msb as name end
 806+ E152             >
 806+ E152 43 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 806+ E154             >Prev_Ptr        defl    Heap_Ptr
 806+ E154             >
 806+ E154             >mirror_Ptr      defl    $
 806+ E154             >
 806+ E154 7C 22       >                dw      Dict_Ptr + 2        // xt
 806+ E156             >Heap_Ptr        defl    $ - $E000           // save current HP
 806+ E156             >
 806+ E156             >Current_HP      defl  $ - $E000             // used to set HP once!
 806+ E156             >
 806+ E156             >//              ______________________________________________________________________
 806+ E156             >//              Dictionary part
 806+ E156             >
 806+ E156             >                org     Dict_Ptr
 806+ 227A             >
 806+ 227A 54 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 806+ 227C             >
 806+ 227C             >C_EMIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 806+ 227C ~           >                call    runcode ; ok        // for primitive definitions  actual code
 806+ 227C ~           >
 806+ 227C ~           >
 806+ 227C             >                endif           ; ok        // for other definitions it "points" the correct handler
 806+ 227C             >                // Use of "; ok" to suppress "warning[fwdref]"
 806+ 227C             >
 806+ 227C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 807+ 227C D9                           exx
 808+ 227D D1                           pop     de
 809+ 227E 7B                           ld      a, e                //  de has c1
 810+ 227F E6 7F                        and     $7F                 // 7-bit ascii only
 811+ 2281                              // push    bc                  // save Instruction Pointer
 812+ 2281 01 08 00                     ld      bc, Emit_Selector_End - Emit_Selector_Start + 1
 813+ 2284 21 79 22                     ld      hl, Emit_Selector_End
 814+ 2287 ED B9                        cpdr                        // search for c1 in Emit_Selector table, backward
 815+ 2289 20 0A                        jr      nz, C_Emit_Not_Found
 816+ 228B                                  // Found then decode it
 817+ 228B 21 62 22                         ld      hl, Emitc_Vec
 818+ 228E 09                               add     hl, bc
 819+ 228F 09                               add     hl, bc
 820+ 2290 5E                               ld      e, (hl)
 821+ 2291 23                               inc     hl
 822+ 2292 56                               ld      d, (hl)
 823+ 2293 EB                               ex      de, hl
 824+ 2294                                  // pop     bc                  // restore Instruction Pointer
 825+ 2294 E9                               jp      (hl)                // one of the following labels
 826+ 2295              C_Emit_Not_Found:
 827+ 2295                              // pop     bc                  // restore Instruction Pointer
 828+ 2295 FE 20                        cp      BLANK_CHAR          // cp $20 non-printable check
 829+ 2297 30 02                        jr      nc, C_Emit_Printable
 830+ 2299 3E 00                            ld      a, NUL_CHAR         // NUL is never "printed"
 831+ 229B              C_Emit_Printable:
 832+ 229B 6F                           ld      l, a
 833+ 229C 26 00                        ld      h, 0
 834+ 229E              C_Emit_exx_next:
 835+ 229E E5                           push    hl
 836+ 229F D9                           exx
 837+ 22A0                              next
 837+ 22A0 DD E9       >                jp      (ix)
 838+ 22A2
 839+ 22A2              C_Emit_Bel:
 840+ 22A2 D9                            exx
 841+ 22A3 C5                           push    bc                  // save Instruction Pointer
 842+ 22A4 D5                           push    de
 843+ 22A5 11 00 01                     ld      de, $0100
 844+ 22A8 21 00 02                     ld      hl, $0200
 845+ 22AB DD E5                        push    ix                  // save Next Pointer
 846+ 22AD                              // call    $03B6               // bleep Standard-ROM routine
 847+ 22AD F3                           di
 848+ 22AE DF                           rst     $18
 849+ 22AF B6 03                        defw    $03B6
 850+ 22B1 FB                           ei
 851+ 22B2 DD E1                        pop     ix                  // restore Next Pointer
 852+ 22B4 D1                           pop     de
 853+ 22B5 C1                           pop     bc                  // restore Instruction Pointer
 854+ 22B6 21 00 00                     ld      hl, NUL_CHAR
 855+ 22B9 E5                           push    hl
 856+ 22BA                              next
 856+ 22BA DD E9       >                jp      (ix)
 857+ 22BC
 858+ 22BC 21 06 00     C_Emit_Tab:     ld      hl, COMMA_CHAR
 859+ 22BF 18 DD                        jr C_Emit_exx_next
 860+ 22C1                          //  push    hl
 861+ 22C1                          //  exx
 862+ 22C1                          //  next
 863+ 22C1
 864+ 22C1 21 0D 00     C_Emit_NL       ld      hl, CR_CHAR           // 0x0A --> 0x0D  à la Spectrum
 865+ 22C4 18 D8                        jr C_Emit_exx_next
 866+ 22C6                          //  push    hl
 867+ 22C6                          //  exx
 868+ 22C6                          //  next
 869+ 22C6
 870+ 22C6              //  ______________________________________________________________________
 871+ 22C6
 872+ 22C6              Key_Table:
 873+ 22C6 E2                           db      $E2                 //  0: STOP  --> SYMBOL+A : ~
 874+ 22C7 C3                           db      $C3                 //  1: NOT   --> SYMBOL+S : |
 875+ 22C8 CD                           db      $CD                 //  2: STEP  --> SYMBOl+D : //
 876+ 22C9 CC                           db      $CC                 //  3: TO    --> SYMBOL+F : {
 877+ 22CA CB                           db      $CB                 //  4: THEN  --> SYMBOL+G : }
 878+ 22CB C6                           db      $C6                 //  5: AND   --> SYMBOL+Y : [
 879+ 22CC C5                           db      $C5                 //  6: OR    --> SYMBOL+U : ]
 880+ 22CD AC                           db      $AC                 //  7: AT    --> SYMBOL+I : (C) copyright symbol
 881+ 22CE C7                           db      $C7                 //  8: <=    --> same as SHIFT-1 [EDIT]
 882+ 22CF C8                           db      $C8                 //  9: >=    --> same as SHIFT-0 [BACKSPACE]
 883+ 22D0 C9                           db      $C9                 // 10: <>    --> SYMBOL+W is the same as CAPS (toggle) SHIFT+2
 884+ 22D1              Key_MapTo:
 885+ 22D1 06                           db      $06                 // 10: SYMBOL+W is the same as CAPS (toggle) SHIFT+2
 886+ 22D2 0C                           db      $0C                 //  9: same as SHIFT-0 [BACKSPACE]
 887+ 22D3 07                           db      $07                 //  8: same as SHIFT-1 [EDIT]
 888+ 22D4 7F                           db      $7F                 //  7: SYMBOL+I : (C) copyright symbol
 889+ 22D5 5D                           db      $5D                 //  6: SYMBOL+U : ]
 890+ 22D6 5B                           db      $5B                 //  5: SYMBOL+Y : [
 891+ 22D7 7D                           db      $7D                 //  4: SYMBOL+G : }
 892+ 22D8 7B                           db      $7B                 //  3: SYMBOL+F : {
 893+ 22D9 5C                           db      $5C                 //  2: SYMBOl+D : //
 894+ 22DA 7C                           db      $7C                 //  1: SYMBOL+S : |
 895+ 22DB 7E                           db      $7E                 //  0: SYMBOL+A : ~
 896+ 22DC
 897+ 22DC              //  ______________________________________________________________________
 898+ 22DC              //
 899+ 22DC              // curs         -- c
 900+ 22DC              // wait for a keypress
 901+ 22DC              // This definition need Standard ROM Interrupt to be served
 902+ 22DC
 903+ 22DC                              New_Def CUR, "CURS", is_code, is_normal
 903+ 22DC             >
 903+ 22DC             >Dict_Ptr        defl    $
 903+ 22DC             >
 903+ 22DC             >//              ______________________________________________________________________
 903+ 22DC             >//              Heap part
 903+ 22DC             >
 903+ 22DC             >
 903+ 22DC             >                org     (Heap_Ptr & $1FFF) + $E000
 903+ E156             >
 903+ E156             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 903+ E156             >Latest_Definition defl  Heap_Ptr
 903+ E156             >
 903+ E156             >                // dummy db directives used to calculate length of namec
 903+ E156 43 55 52 53 >                db      "CURS"
 903+ E15A             >len_NFA         defl    $ - temp_NFA
 903+ E15A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 903+ E156             >
 903+ E156 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 903+ E157 43 55 52 53 >                db      "CURS"               // name string in 7-bit ascii, but
 903+ E15B             >                org     $-1                 // alter last byte of Name just above to set
 903+ E15A D3          >                db      {b $} | END_BIT     // msb as name end
 903+ E15B             >
 903+ E15B 4A 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 903+ E15D             >Prev_Ptr        defl    Heap_Ptr
 903+ E15D             >
 903+ E15D             >mirror_Ptr      defl    $
 903+ E15D             >
 903+ E15D DE 22       >                dw      Dict_Ptr + 2        // xt
 903+ E15F             >Heap_Ptr        defl    $ - $E000           // save current HP
 903+ E15F             >
 903+ E15F             >Current_HP      defl  $ - $E000             // used to set HP once!
 903+ E15F             >
 903+ E15F             >//              ______________________________________________________________________
 903+ E15F             >//              Dictionary part
 903+ E15F             >
 903+ E15F             >                org     Dict_Ptr
 903+ 22DC             >
 903+ 22DC 5D 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 903+ 22DE             >
 903+ 22DE             >CUR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 903+ 22DE ~           >                call    runcode ; ok        // for primitive definitions  actual code
 903+ 22DE ~           >
 903+ 22DE ~           >
 903+ 22DE             >                endif           ; ok        // for other definitions it "points" the correct handler
 903+ 22DE             >                // Use of "; ok" to suppress "warning[fwdref]"
 903+ 22DE             >
 903+ 22DE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 904+ 22DE
 905+ 22DE C5                           push    bc                  // save Instruction Pointer
 906+ 22DF D5                           push    de                  // save Return Stack Pointer
 907+ 22E0 DD E5                        push    ix
 908+ 22E2 ED 73 2C 20                  ld      (SP_Saved), sp      // be sure to not to be paged out.
 909+ 22E6                          //  ld      sp, Cold_origin - 5 // maybe $8000 in the future...
 910+ 22E6 31 00 5C                     ld      sp, TSTACK           // Carefully balanced from startup
 911+ 22E9 FD CB 01 AE                  res     5, (iy + 1)         // FLAGS (5C3A+1)
 912+ 22ED
 913+ 22ED              Cur_Wait:
 914+ 22ED 76                               halt
 915+ 22EE 3E 02                            ld      a, 2                // selec channel #2 (Upper Video)
 916+ 22F0                              //  call    $1601               // SELECT Standard-ROM Routine
 917+ 22F0 DF                               rst     $18
 918+ 22F1 01 16                            dw      $1601
 919+ 22F3                                  // software-flash: flips face every 320 ms
 920+ 22F3 3E 20                            ld      a, $20              // Timing based
 921+ 22F5 FD A6 3E                         and     (iy + $3E)          // FRAMES (5C3A+3E)
 922+ 22F8
 923+ 22F8 3A 28 20                         ld      a, (Block_Face)     // see origin.asm
 924+ 22FB 20 0C                            jr      nz, Cur_Cursor
 925+ 22FD 3A 29 20                             ld      a, (Half_Face)      // see origin.asm
 926+ 2300 FD CB 30 5E                          bit     3, (iy + $30)       // FLAGS2 (5C3A+$30) that is CAPS-LOCK
 927+ 2304 28 03                                jr      z, Cur_Cursor
 928+ 2306 3A 2A 20                                 ld      a, (Underscore_Face) // see origin
 929+ 2309              Cur_Cursor:
 930+ 2309 D7                               rst     $10
 931+ 230A 3E 08                            ld      a, BACKSPACE_CHAR    // backspace
 932+ 230C D7                               rst     $10
 933+ 230D FD CB 01 6E                      bit     5, (iy + 1)         // FLAGS (5C3A+1)
 934+ 2311 28 DA                        jr      z, Cur_Wait
 935+ 2313
 936+ 2313 76                           halt    // this is to sync flashing cursor.
 937+ 2314
 938+ 2314 3E 20                        ld      a, BLANK_CHAR       // space to blank cursor
 939+ 2316 D7                           rst     $10
 940+ 2317 3E 08                        ld      a, BACKSPACE_CHAR   // backspace
 941+ 2319 D7                           rst     $10
 942+ 231A
 943+ 231A ED 7B 2C 20                  ld      sp, (SP_Saved)
 944+ 231E DD E1                        pop     ix
 945+ 2320 D1                           pop     de                  // Restore Return Stack Pointer
 946+ 2321 C1                           pop     bc                  // Restore Instruction Pointer
 947+ 2322                              next
 947+ 2322 DD E9       >                jp      (ix)
 948+ 2324
 949+ 2324
 950+ 2324              //  ______________________________________________________________________
 951+ 2324              //
 952+ 2324              // key          -- c
 953+ 2324              // This definition need Standard ROM Interrupt to be served
 954+ 2324
 955+ 2324                              New_Def KEY, "KEY", is_code, is_normal
 955+ 2324             >
 955+ 2324             >Dict_Ptr        defl    $
 955+ 2324             >
 955+ 2324             >//              ______________________________________________________________________
 955+ 2324             >//              Heap part
 955+ 2324             >
 955+ 2324             >
 955+ 2324             >                org     (Heap_Ptr & $1FFF) + $E000
 955+ E15F             >
 955+ E15F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 955+ E15F             >Latest_Definition defl  Heap_Ptr
 955+ E15F             >
 955+ E15F             >                // dummy db directives used to calculate length of namec
 955+ E15F 4B 45 59    >                db      "KEY"
 955+ E162             >len_NFA         defl    $ - temp_NFA
 955+ E162             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 955+ E15F             >
 955+ E15F 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 955+ E160 4B 45 59    >                db      "KEY"               // name string in 7-bit ascii, but
 955+ E163             >                org     $-1                 // alter last byte of Name just above to set
 955+ E162 D9          >                db      {b $} | END_BIT     // msb as name end
 955+ E163             >
 955+ E163 56 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 955+ E165             >Prev_Ptr        defl    Heap_Ptr
 955+ E165             >
 955+ E165             >mirror_Ptr      defl    $
 955+ E165             >
 955+ E165 26 23       >                dw      Dict_Ptr + 2        // xt
 955+ E167             >Heap_Ptr        defl    $ - $E000           // save current HP
 955+ E167             >
 955+ E167             >Current_HP      defl  $ - $E000             // used to set HP once!
 955+ E167             >
 955+ E167             >//              ______________________________________________________________________
 955+ E167             >//              Dictionary part
 955+ E167             >
 955+ E167             >                org     Dict_Ptr
 955+ 2324             >
 955+ 2324 65 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 955+ 2326             >
 955+ 2326             >KEY:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 955+ 2326 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 955+ 2326 ~           >
 955+ 2326 ~           >
 955+ 2326             >                endif           ; ok        // for other definitions it "points" the correct handler
 955+ 2326             >                // Use of "; ok" to suppress "warning[fwdref]"
 955+ 2326             >
 955+ 2326             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 956+ 2326
 957+ 2326 C5                           push    bc                  // Save Instruction Pointer
 958+ 2327
 959+ 2327              Key_Wait:
 960+ 2327 FD CB 01 6E                      bit     5, (iy + 1)         // FLAGS (5C3A+1)
 961+ 232B 28 FA                        jr      z, Key_Wait
 962+ 232D
 963+ 232D 3A 08 5C                     ld      a, (LASTK)          // get typed character (5C08)
 964+ 2330
 965+ 2330                              // decode character from above table
 966+ 2330 21 C6 22                     ld      hl, Key_Table
 967+ 2333 01 0B 00                     ld      bc, $000B
 968+ 2336 ED B1                        cpir
 969+ 2338 20 05                        jr      nz, Key_DontMap
 970+ 233A 21 D1 22                         ld      hl, Key_MapTo
 971+ 233D 09                               add     hl, bc
 972+ 233E 7E                               ld      a, (hl)
 973+ 233F FE 06        Key_DontMap:    cp      $06                 // CAPS-LOCK management
 974+ 2341 20 09                        jr      nz, Key_NoCapsLock
 975+ 2343 21 6A 5C                         ld      hl, $5C6A           // FLAGS2
 976+ 2346 7E                               ld      a, (hl)
 977+ 2347 EE 08                            xor     $08
 978+ 2349 77                               ld      (hl), a
 979+ 234A 3E 00                            ld      a, NUL_CHAR
 980+ 234C 6F           Key_NoCapsLock: ld      l, a
 981+ 234D 26 00                        ld      h, 0                // Prepare TOS
 982+ 234F
 983+ 234F FD CB 01 AE                  res     5, (iy + 1)         // FLAGS (5C3A+1)
 984+ 2353
 985+ 2353 C1                           pop     bc                  // Restore Instruction Pointer
 986+ 2354
 987+ 2354                              psh1
 987+ 2354 E5          >                push    hl
 987+ 2355 DD E9       >                jp      (ix)
 988+ 2357
 989+ 2357
 990+ 2357              //  ______________________________________________________________________
 991+ 2357              //
 992+ 2357              // click        --
 993+ 2357              // This definition need Standard ROM Interrupt to be served
 994+ 2357              //
 995+ 2357              //              New_Def CLICK, "CLICK", is_code, is_normal
 996+ 2357              //
 997+ 2357              //                push    bc
 998+ 2357              //              ld      a, ($5C48)          // BORDCR system variable
 999+ 2357              //              rra
1000+ 2357              //              rra
1001+ 2357              //              rra
1002+ 2357              //              or      $18                 // quick'n'dirty click
1003+ 2357              //              out     ($fe), a
1004+ 2357              //              ld      b, 0
1005+ 2357              //              djnz    $                   // wait loop
1006+ 2357              //              xor     $18
1007+ 2357              //              out     ($fe), a
1008+ 2357              //                pop     bc
1009+ 2357
1010+ 2357              //              next
1011+ 2357
1012+ 2357              //  ______________________________________________________________________
1013+ 2357              //
1014+ 2357              // key?         -- f
1015+ 2357              // key available
1016+ 2357              //
1017+ 2357              //              New_Def KEY_Q, "KEY?", is_code, is_normal
1018+ 2357              //
1019+ 2357              //              ld      hl, 0000
1020+ 2357              //              bit     5, (iy + 1)         // FLAGS (5C3A+1)
1021+ 2357              //              jr      z, Key_Q
1022+ 2357              //                  dec     hl
1023+ 2357              // Key_Q:
1024+ 2357              //                psh1
1025+ 2357              //              next
1026+ 2357
1027+ 2357              //  ______________________________________________________________________
1028+ 2357              //
1029+ 2357              // ?terminal    -- FALSE | TRUE
1030+ 2357              // test for BREAK keypress
1031+ 2357                              New_Def QTERMINAL, "?TERMINAL", is_code, is_normal
1031+ 2357             >
1031+ 2357             >Dict_Ptr        defl    $
1031+ 2357             >
1031+ 2357             >//              ______________________________________________________________________
1031+ 2357             >//              Heap part
1031+ 2357             >
1031+ 2357             >
1031+ 2357             >                org     (Heap_Ptr & $1FFF) + $E000
1031+ E167             >
1031+ E167             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1031+ E167             >Latest_Definition defl  Heap_Ptr
1031+ E167             >
1031+ E167             >                // dummy db directives used to calculate length of namec
1031+ E167 3F 54 45 52 >                db      "?TERMINAL"
1031+ E16B 4D 49 4E 41 >
1031+ E16F 4C          >
1031+ E170             >len_NFA         defl    $ - temp_NFA
1031+ E170             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1031+ E167             >
1031+ E167 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1031+ E168 3F 54 45 52 >                db      "?TERMINAL"               // name string in 7-bit ascii, but
1031+ E16C 4D 49 4E 41 >
1031+ E170 4C          >
1031+ E171             >                org     $-1                 // alter last byte of Name just above to set
1031+ E170 CC          >                db      {b $} | END_BIT     // msb as name end
1031+ E171             >
1031+ E171 5F 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1031+ E173             >Prev_Ptr        defl    Heap_Ptr
1031+ E173             >
1031+ E173             >mirror_Ptr      defl    $
1031+ E173             >
1031+ E173 59 23       >                dw      Dict_Ptr + 2        // xt
1031+ E175             >Heap_Ptr        defl    $ - $E000           // save current HP
1031+ E175             >
1031+ E175             >Current_HP      defl  $ - $E000             // used to set HP once!
1031+ E175             >
1031+ E175             >//              ______________________________________________________________________
1031+ E175             >//              Dictionary part
1031+ E175             >
1031+ E175             >                org     Dict_Ptr
1031+ 2357             >
1031+ 2357 73 01       >                dw      mirror_Ptr - $E000 + Heap_offset
1031+ 2359             >
1031+ 2359             >QTERMINAL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1031+ 2359 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1031+ 2359 ~           >
1031+ 2359 ~           >
1031+ 2359             >                endif           ; ok        // for other definitions it "points" the correct handler
1031+ 2359             >                // Use of "; ok" to suppress "warning[fwdref]"
1031+ 2359             >
1031+ 2359             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1032+ 2359 D9                           exx
1033+ 235A 01 FE 7F                     ld      bc, $7ffe
1034+ 235D ED 50                        in      d, (c)
1035+ 235F 41                           ld      b, c
1036+ 2360 ED 78                        in      a, (c)
1037+ 2362 B2                           or       d
1038+ 2363 1F                           rra
1039+ 2364 3F                           ccf
1040+ 2365 ED 62                        sbc     hl, hl
1041+ 2367 E5                           push    hl
1042+ 2368 D9                           exx
1043+ 2369                              next
1043+ 2369 DD E9       >                jp      (ix)
1044+ 236B
1045+ 236B
1046+ 236B              //  ______________________________________________________________________
1047+ 236B              //
1048+ 236B              // inkey        -- c | 0
1049+ 236B              // call ROM inkey$ routine, returns c or "zero".
1050+ 236B              //
1051+ 236B              //              New_Def INKEY, "INKEY", is_code, is_normal
1052+ 236B              //              push    bc
1053+ 236B              //              push    de
1054+ 236B              //              ld      (SP_Saved), sp
1055+ 236B              //              ld      sp, Cold_origin - 5
1056+ 236B              //              ld      sp, TSTACK           // Carefully balanced from startup
1057+ 236B              //              push    ix
1058+ 236B              //              di
1059+ 236B              //              call    $15E6                   // instead of 15E9
1060+ 236B              //              ei
1061+ 236B              //              pop     ix
1062+ 236B              //              ld      sp, (SP_Saved)
1063+ 236B              //              ld      l, a
1064+ 236B              //              ld      h, 0
1065+ 236B              //              pop     de
1066+ 236B              //              pop     bc
1067+ 236B              //              psh1
1068+ 236B
1069+ 236B              //  ______________________________________________________________________
1070+ 236B              //
1071+ 236B              // select      n --
1072+ 236B              // selects the given channel number
1073+ 236B
1074+ 236B                              New_Def SELECT, "SELECT", is_code, is_normal
1074+ 236B             >
1074+ 236B             >Dict_Ptr        defl    $
1074+ 236B             >
1074+ 236B             >//              ______________________________________________________________________
1074+ 236B             >//              Heap part
1074+ 236B             >
1074+ 236B             >
1074+ 236B             >                org     (Heap_Ptr & $1FFF) + $E000
1074+ E175             >
1074+ E175             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1074+ E175             >Latest_Definition defl  Heap_Ptr
1074+ E175             >
1074+ E175             >                // dummy db directives used to calculate length of namec
1074+ E175 53 45 4C 45 >                db      "SELECT"
1074+ E179 43 54       >
1074+ E17B             >len_NFA         defl    $ - temp_NFA
1074+ E17B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1074+ E175             >
1074+ E175 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1074+ E176 53 45 4C 45 >                db      "SELECT"               // name string in 7-bit ascii, but
1074+ E17A 43 54       >
1074+ E17C             >                org     $-1                 // alter last byte of Name just above to set
1074+ E17B D4          >                db      {b $} | END_BIT     // msb as name end
1074+ E17C             >
1074+ E17C 67 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1074+ E17E             >Prev_Ptr        defl    Heap_Ptr
1074+ E17E             >
1074+ E17E             >mirror_Ptr      defl    $
1074+ E17E             >
1074+ E17E 6D 23       >                dw      Dict_Ptr + 2        // xt
1074+ E180             >Heap_Ptr        defl    $ - $E000           // save current HP
1074+ E180             >
1074+ E180             >Current_HP      defl  $ - $E000             // used to set HP once!
1074+ E180             >
1074+ E180             >//              ______________________________________________________________________
1074+ E180             >//              Dictionary part
1074+ E180             >
1074+ E180             >                org     Dict_Ptr
1074+ 236B             >
1074+ 236B 7E 01       >                dw      mirror_Ptr - $E000 + Heap_offset
1074+ 236D             >
1074+ 236D             >SELECT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1074+ 236D ~           >                call    runcode ; ok        // for primitive definitions  actual code
1074+ 236D ~           >
1074+ 236D ~           >
1074+ 236D             >                endif           ; ok        // for other definitions it "points" the correct handler
1074+ 236D             >                // Use of "; ok" to suppress "warning[fwdref]"
1074+ 236D             >
1074+ 236D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1075+ 236D E1                           pop     hl
1076+ 236E C5                           push    bc
1077+ 236F D5                           push    de
1078+ 2370 7D                           ld      a, l
1079+ 2371 ED 73 2C 20                  ld      (SP_Saved), sp
1080+ 2375                          //  ld      sp, Cold_origin - 5
1081+ 2375 31 00 5C                     ld      sp, TSTACK           // Carefully balanced from startup
1082+ 2378 DD E5                        push    ix
1083+ 237A                          //  call    $1601
1084+ 237A F3                           di
1085+ 237B DF                           rst     $18
1086+ 237C 01 16                        dw      $1601
1087+ 237E FB                           ei
1088+ 237F DD E1                        pop     ix
1089+ 2381 ED 7B 2C 20                  ld      sp, (SP_Saved)
1090+ 2385 D1                           pop     de
1091+ 2386 C1                           pop     bc
1092+ 2387                              next
1092+ 2387 DD E9       >                jp      (ix)
1093+ 2389
1094+ 2389              //  ______________________________________________________________________
1095+ 2389              //
1096+ 2389              // ZX Spectrum Next - Low Level disk primitives.
1097+ 2389              // this include is "here" for backward compatibility
1098+ 2389
1099+ 2389                              include "next-opt0.asm"
# file opened: C:\Zx\CSpect\Projects\vForth17_DOT/source/next-opt0.asm
   1++2389              //  ______________________________________________________________________
   2++2389              //
   3++2389              //  next-opt.asm
   4++2389              //
   5++2389              //  ZX Spectrum Next - peculiar definitions
   6++2389              //  ______________________________________________________________________
   7++2389
   8++2389              //  ______________________________________________________________________
   9++2389              //
  10++2389              // f_seek       d u -- f
  11++2389              // Seek to position d in file-handle u.
  12++2389              // Return a false-flag 0 on success, True flag on error
  13++2389                              New_Def F_SEEK, "F_SEEK", is_code, is_normal
  13++2389             >
  13++2389             >Dict_Ptr        defl    $
  13++2389             >
  13++2389             >//              ______________________________________________________________________
  13++2389             >//              Heap part
  13++2389             >
  13++2389             >
  13++2389             >                org     (Heap_Ptr & $1FFF) + $E000
  13++E180             >
  13++E180             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13++E180             >Latest_Definition defl  Heap_Ptr
  13++E180             >
  13++E180             >                // dummy db directives used to calculate length of namec
  13++E180 46 5F 53 45 >                db      "F_SEEK"
  13++E184 45 4B       >
  13++E186             >len_NFA         defl    $ - temp_NFA
  13++E186             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13++E180             >
  13++E180 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  13++E181 46 5F 53 45 >                db      "F_SEEK"               // name string in 7-bit ascii, but
  13++E185 45 4B       >
  13++E187             >                org     $-1                 // alter last byte of Name just above to set
  13++E186 CB          >                db      {b $} | END_BIT     // msb as name end
  13++E187             >
  13++E187 75 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  13++E189             >Prev_Ptr        defl    Heap_Ptr
  13++E189             >
  13++E189             >mirror_Ptr      defl    $
  13++E189             >
  13++E189 8B 23       >                dw      Dict_Ptr + 2        // xt
  13++E18B             >Heap_Ptr        defl    $ - $E000           // save current HP
  13++E18B             >
  13++E18B             >Current_HP      defl  $ - $E000             // used to set HP once!
  13++E18B             >
  13++E18B             >//              ______________________________________________________________________
  13++E18B             >//              Dictionary part
  13++E18B             >
  13++E18B             >                org     Dict_Ptr
  13++2389             >
  13++2389 89 01       >                dw      mirror_Ptr - $E000 + Heap_offset
  13++238B             >
  13++238B             >F_SEEK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  13++238B ~           >                call    runcode ; ok        // for primitive definitions  actual code
  13++238B ~           >
  13++238B ~           >
  13++238B             >                endif           ; ok        // for other definitions it "points" the correct handler
  13++238B             >                // Use of "; ok" to suppress "warning[fwdref]"
  13++238B             >
  13++238B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14++238B D9                            exx
  15++238C E1                            pop     hl                  // file-handle
  16++238D 7D                            ld      a, l
  17++238E C1                            pop     bc                  // bc has high-word of d
  18++238F D1                            pop     de
  19++2390 D9                           exx
  20++2391 DD E5                        push    ix
  21++2393 D5                           push    de
  22++2394 C5                           push    bc                  // save Instruction Pointer
  23++2395 D9                            exx
  24++2396 21 00 00                      ld      hl, 0 // ix, 0
  25++2399 CF                            rst     $08
  26++239A 9F                            db      $9F
  27++239B              F_Seek_Exit:
  28++239B C1                           pop     bc                  // restore Instruction Pointer
  29++239C D1                           pop     de
  30++239D DD E1                        pop     ix
  31++239F ED 62                        sbc     hl, hl              // to get 0 or -1
  32++23A1
  33++23A1                              psh1
  33++23A1 E5          >                push    hl
  33++23A2 DD E9       >                jp      (ix)
  34++23A4
  35++23A4              //  ______________________________________________________________________
  36++23A4              //
  37++23A4              // f_close      u -- f
  38++23A4              // Close file-handle u.
  39++23A4              // Return 0 on success, True flag on error
  40++23A4
  41++23A4                              New_Def F_CLOSE, "F_CLOSE", is_code, is_normal
  41++23A4             >
  41++23A4             >Dict_Ptr        defl    $
  41++23A4             >
  41++23A4             >//              ______________________________________________________________________
  41++23A4             >//              Heap part
  41++23A4             >
  41++23A4             >
  41++23A4             >                org     (Heap_Ptr & $1FFF) + $E000
  41++E18B             >
  41++E18B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  41++E18B             >Latest_Definition defl  Heap_Ptr
  41++E18B             >
  41++E18B             >                // dummy db directives used to calculate length of namec
  41++E18B 46 5F 43 4C >                db      "F_CLOSE"
  41++E18F 4F 53 45    >
  41++E192             >len_NFA         defl    $ - temp_NFA
  41++E192             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  41++E18B             >
  41++E18B 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  41++E18C 46 5F 43 4C >                db      "F_CLOSE"               // name string in 7-bit ascii, but
  41++E190 4F 53 45    >
  41++E193             >                org     $-1                 // alter last byte of Name just above to set
  41++E192 C5          >                db      {b $} | END_BIT     // msb as name end
  41++E193             >
  41++E193 80 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  41++E195             >Prev_Ptr        defl    Heap_Ptr
  41++E195             >
  41++E195             >mirror_Ptr      defl    $
  41++E195             >
  41++E195 A6 23       >                dw      Dict_Ptr + 2        // xt
  41++E197             >Heap_Ptr        defl    $ - $E000           // save current HP
  41++E197             >
  41++E197             >Current_HP      defl  $ - $E000             // used to set HP once!
  41++E197             >
  41++E197             >//              ______________________________________________________________________
  41++E197             >//              Dictionary part
  41++E197             >
  41++E197             >                org     Dict_Ptr
  41++23A4             >
  41++23A4 95 01       >                dw      mirror_Ptr - $E000 + Heap_offset
  41++23A6             >
  41++23A6             >F_CLOSE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  41++23A6 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  41++23A6 ~           >
  41++23A6 ~           >
  41++23A6             >                endif           ; ok        // for other definitions it "points" the correct handler
  41++23A6             >                // Use of "; ok" to suppress "warning[fwdref]"
  41++23A6             >
  41++23A6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  42++23A6
  43++23A6 E1                           pop     hl
  44++23A7 7D                           ld      a, l                // file-handle
  45++23A8 DD E5                        push    ix
  46++23AA D5                           push    de
  47++23AB C5                           push    bc                  // Save Instruction pointer
  48++23AC CF                           rst     $08
  49++23AD 9B                           db      $9B
  50++23AE 18 EB                        jr      F_Seek_Exit
  51++23B0              //              pop     de
  52++23B0              //              pop     bc
  53++23B0              //              pop     ix
  54++23B0              //              sbc     hl, hl
  55++23B0              //              psh1
  56++23B0
  57++23B0              //  ______________________________________________________________________
  58++23B0              //
  59++23B0              // f_sync      u -- f
  60++23B0              // Close file-handle u.
  61++23B0              // Return 0 on success, True flag on error
  62++23B0
  63++23B0                              New_Def F_SYNC, "F_SYNC", is_code, is_normal
  63++23B0             >
  63++23B0             >Dict_Ptr        defl    $
  63++23B0             >
  63++23B0             >//              ______________________________________________________________________
  63++23B0             >//              Heap part
  63++23B0             >
  63++23B0             >
  63++23B0             >                org     (Heap_Ptr & $1FFF) + $E000
  63++E197             >
  63++E197             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  63++E197             >Latest_Definition defl  Heap_Ptr
  63++E197             >
  63++E197             >                // dummy db directives used to calculate length of namec
  63++E197 46 5F 53 59 >                db      "F_SYNC"
  63++E19B 4E 43       >
  63++E19D             >len_NFA         defl    $ - temp_NFA
  63++E19D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  63++E197             >
  63++E197 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  63++E198 46 5F 53 59 >                db      "F_SYNC"               // name string in 7-bit ascii, but
  63++E19C 4E 43       >
  63++E19E             >                org     $-1                 // alter last byte of Name just above to set
  63++E19D C3          >                db      {b $} | END_BIT     // msb as name end
  63++E19E             >
  63++E19E 8B 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  63++E1A0             >Prev_Ptr        defl    Heap_Ptr
  63++E1A0             >
  63++E1A0             >mirror_Ptr      defl    $
  63++E1A0             >
  63++E1A0 B2 23       >                dw      Dict_Ptr + 2        // xt
  63++E1A2             >Heap_Ptr        defl    $ - $E000           // save current HP
  63++E1A2             >
  63++E1A2             >Current_HP      defl  $ - $E000             // used to set HP once!
  63++E1A2             >
  63++E1A2             >//              ______________________________________________________________________
  63++E1A2             >//              Dictionary part
  63++E1A2             >
  63++E1A2             >                org     Dict_Ptr
  63++23B0             >
  63++23B0 A0 01       >                dw      mirror_Ptr - $E000 + Heap_offset
  63++23B2             >
  63++23B2             >F_SYNC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  63++23B2 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  63++23B2 ~           >
  63++23B2 ~           >
  63++23B2             >                endif           ; ok        // for other definitions it "points" the correct handler
  63++23B2             >                // Use of "; ok" to suppress "warning[fwdref]"
  63++23B2             >
  63++23B2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  64++23B2 E1                           pop     hl
  65++23B3 7D                           ld      a, l                // file-handle
  66++23B4 DD E5                        push    ix
  67++23B6 D5                           push    de
  68++23B7 C5                           push    bc
  69++23B8 CF                           rst     $08
  70++23B9 9C                           db      $9C
  71++23BA 18 DF                        jr      F_Seek_Exit
  72++23BC              //              pop     de
  73++23BC              //              pop     bc
  74++23BC              //              pop     ix
  75++23BC              //              sbc     hl, hl
  76++23BC              //              psh1
  77++23BC
  78++23BC              //  ______________________________________________________________________
  79++23BC              //
  80++23BC              // f_fgetpos    u -- d f
  81++23BC              // Seek to position d in file-handle u.
  82++23BC              // Return a false-flag 0 on success, True flag on error
  83++23BC                              New_Def F_FGETPOS, "F_FGETPOS", is_code, is_normal
  83++23BC             >
  83++23BC             >Dict_Ptr        defl    $
  83++23BC             >
  83++23BC             >//              ______________________________________________________________________
  83++23BC             >//              Heap part
  83++23BC             >
  83++23BC             >
  83++23BC             >                org     (Heap_Ptr & $1FFF) + $E000
  83++E1A2             >
  83++E1A2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  83++E1A2             >Latest_Definition defl  Heap_Ptr
  83++E1A2             >
  83++E1A2             >                // dummy db directives used to calculate length of namec
  83++E1A2 46 5F 46 47 >                db      "F_FGETPOS"
  83++E1A6 45 54 50 4F >
  83++E1AA 53          >
  83++E1AB             >len_NFA         defl    $ - temp_NFA
  83++E1AB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  83++E1A2             >
  83++E1A2 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  83++E1A3 46 5F 46 47 >                db      "F_FGETPOS"               // name string in 7-bit ascii, but
  83++E1A7 45 54 50 4F >
  83++E1AB 53          >
  83++E1AC             >                org     $-1                 // alter last byte of Name just above to set
  83++E1AB D3          >                db      {b $} | END_BIT     // msb as name end
  83++E1AC             >
  83++E1AC 97 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  83++E1AE             >Prev_Ptr        defl    Heap_Ptr
  83++E1AE             >
  83++E1AE             >mirror_Ptr      defl    $
  83++E1AE             >
  83++E1AE BE 23       >                dw      Dict_Ptr + 2        // xt
  83++E1B0             >Heap_Ptr        defl    $ - $E000           // save current HP
  83++E1B0             >
  83++E1B0             >Current_HP      defl  $ - $E000             // used to set HP once!
  83++E1B0             >
  83++E1B0             >//              ______________________________________________________________________
  83++E1B0             >//              Dictionary part
  83++E1B0             >
  83++E1B0             >                org     Dict_Ptr
  83++23BC             >
  83++23BC AE 01       >                dw      mirror_Ptr - $E000 + Heap_offset
  83++23BE             >
  83++23BE             >F_FGETPOS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  83++23BE ~           >                call    runcode ; ok        // for primitive definitions  actual code
  83++23BE ~           >
  83++23BE ~           >
  83++23BE             >                endif           ; ok        // for other definitions it "points" the correct handler
  83++23BE             >                // Use of "; ok" to suppress "warning[fwdref]"
  83++23BE             >
  83++23BE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  84++23BE E1                            pop     hl
  85++23BF 7D                            ld      a, l                // file-handle
  86++23C0 DD E5                         push    ix
  87++23C2 D5                            push    de
  88++23C3 C5                            push    bc
  89++23C4 CF                            rst     $08
  90++23C5 A0                            db      $A0
  91++23C6 D9                           exx
  92++23C7 C1                           pop     bc                  // IP
  93++23C8 D1                           pop     de                  // Return Stack Pointer
  94++23C9 DD E1                        pop     ix
  95++23CB D9                            exx
  96++23CC D5                            push    de
  97++23CD C5                            push    bc
  98++23CE ED 62                         sbc     hl, hl
  99++23D0 E5                            push    hl
 100++23D1 D9                           exx
 101++23D2                              next
 101++23D2 DD E9       >                jp      (ix)
 102++23D4
 103++23D4              //  ______________________________________________________________________
 104++23D4              //
 105++23D4              // f_read       a b u -- n f
 106++23D4              // Read b bytes from file-handle u to address a
 107++23D4              // Return the actual number n of bytes read
 108++23D4              // Return 0 on success, True flag on error
 109++23D4                              New_Def F_READ, "F_READ", is_code, is_normal
 109++23D4             >
 109++23D4             >Dict_Ptr        defl    $
 109++23D4             >
 109++23D4             >//              ______________________________________________________________________
 109++23D4             >//              Heap part
 109++23D4             >
 109++23D4             >
 109++23D4             >                org     (Heap_Ptr & $1FFF) + $E000
 109++E1B0             >
 109++E1B0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 109++E1B0             >Latest_Definition defl  Heap_Ptr
 109++E1B0             >
 109++E1B0             >                // dummy db directives used to calculate length of namec
 109++E1B0 46 5F 52 45 >                db      "F_READ"
 109++E1B4 41 44       >
 109++E1B6             >len_NFA         defl    $ - temp_NFA
 109++E1B6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 109++E1B0             >
 109++E1B0 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 109++E1B1 46 5F 52 45 >                db      "F_READ"               // name string in 7-bit ascii, but
 109++E1B5 41 44       >
 109++E1B7             >                org     $-1                 // alter last byte of Name just above to set
 109++E1B6 C4          >                db      {b $} | END_BIT     // msb as name end
 109++E1B7             >
 109++E1B7 A2 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 109++E1B9             >Prev_Ptr        defl    Heap_Ptr
 109++E1B9             >
 109++E1B9             >mirror_Ptr      defl    $
 109++E1B9             >
 109++E1B9 D6 23       >                dw      Dict_Ptr + 2        // xt
 109++E1BB             >Heap_Ptr        defl    $ - $E000           // save current HP
 109++E1BB             >
 109++E1BB             >Current_HP      defl  $ - $E000             // used to set HP once!
 109++E1BB             >
 109++E1BB             >//              ______________________________________________________________________
 109++E1BB             >//              Dictionary part
 109++E1BB             >
 109++E1BB             >                org     Dict_Ptr
 109++23D4             >
 109++23D4 B9 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 109++23D6             >
 109++23D6             >F_READ:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 109++23D6 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 109++23D6 ~           >
 109++23D6 ~           >
 109++23D6             >                endif           ; ok        // for other definitions it "points" the correct handler
 109++23D6             >                // Use of "; ok" to suppress "warning[fwdref]"
 109++23D6             >
 109++23D6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 110++23D6 D9                            exx
 111++23D7 E1                            pop     hl
 112++23D8 7D                            ld      a, l                // file-handle
 113++23D9 C1                            pop     bc                  // bc has bytes to read
 114++23DA DD E3                         ex      (sp), ix            // ix has address
 115++23DC DD E5                         push    ix
 116++23DE E1                            pop     hl
 117++23DF D9                           exx
 118++23E0 D5                           push    de                  // Save Return Stack pointer
 119++23E1 C5                           push    bc                  // Save Instruction pointer
 120++23E2 D9                            exx
 121++23E3 CF                            rst     $08
 122++23E4 9D                            db      $9D
 123++23E5              F_Read_Exit:
 124++23E5 D9                           exx
 125++23E6 C1                           pop     bc                  // Restore Instruction pointer
 126++23E7 D1                           pop     de                  // Restore Return Stack pointer
 127++23E8 DD E1                        pop     ix                  // Restore ix
 128++23EA D9                            exx
 129++23EB D5                            push    de                  // bytes involved in i/o operation
 130++23EC ED 62                         sbc     hl, hl
 131++23EE E5                            push    hl
 132++23EF D9                           exx
 133++23F0                              next
 133++23F0 DD E9       >                jp      (ix)
 134++23F2
 135++23F2              //  ______________________________________________________________________
 136++23F2              //
 137++23F2              // f_write      a b u -- n f
 138++23F2              // Write bytes currently stored at address a to file-handle u.
 139++23F2              // Return the actual n bytes written and 0 on success, True flag on error.
 140++23F2                              New_Def F_WRITE, "F_WRITE", is_code, is_normal
 140++23F2             >
 140++23F2             >Dict_Ptr        defl    $
 140++23F2             >
 140++23F2             >//              ______________________________________________________________________
 140++23F2             >//              Heap part
 140++23F2             >
 140++23F2             >
 140++23F2             >                org     (Heap_Ptr & $1FFF) + $E000
 140++E1BB             >
 140++E1BB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 140++E1BB             >Latest_Definition defl  Heap_Ptr
 140++E1BB             >
 140++E1BB             >                // dummy db directives used to calculate length of namec
 140++E1BB 46 5F 57 52 >                db      "F_WRITE"
 140++E1BF 49 54 45    >
 140++E1C2             >len_NFA         defl    $ - temp_NFA
 140++E1C2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 140++E1BB             >
 140++E1BB 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 140++E1BC 46 5F 57 52 >                db      "F_WRITE"               // name string in 7-bit ascii, but
 140++E1C0 49 54 45    >
 140++E1C3             >                org     $-1                 // alter last byte of Name just above to set
 140++E1C2 C5          >                db      {b $} | END_BIT     // msb as name end
 140++E1C3             >
 140++E1C3 B0 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 140++E1C5             >Prev_Ptr        defl    Heap_Ptr
 140++E1C5             >
 140++E1C5             >mirror_Ptr      defl    $
 140++E1C5             >
 140++E1C5 F4 23       >                dw      Dict_Ptr + 2        // xt
 140++E1C7             >Heap_Ptr        defl    $ - $E000           // save current HP
 140++E1C7             >
 140++E1C7             >Current_HP      defl  $ - $E000             // used to set HP once!
 140++E1C7             >
 140++E1C7             >//              ______________________________________________________________________
 140++E1C7             >//              Dictionary part
 140++E1C7             >
 140++E1C7             >                org     Dict_Ptr
 140++23F2             >
 140++23F2 C5 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 140++23F4             >
 140++23F4             >F_WRITE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 140++23F4 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 140++23F4 ~           >
 140++23F4 ~           >
 140++23F4             >                endif           ; ok        // for other definitions it "points" the correct handler
 140++23F4             >                // Use of "; ok" to suppress "warning[fwdref]"
 140++23F4             >
 140++23F4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 141++23F4 D9                            exx
 142++23F5 E1                            pop     hl
 143++23F6 7D                            ld      a, l                // file-handle
 144++23F7 C1                            pop     bc                  // bc has bytes to read
 145++23F8 DD E3                         ex      (sp), ix            // ix has address
 146++23FA DD E5                         push    ix
 147++23FC E1                            pop     hl
 148++23FD D9                           exx
 149++23FE D5                           push    de                  // Save Return Stack pointer
 150++23FF C5                           push    bc                  // Save Instruction pointer
 151++2400 D9                            exx
 152++2401 CF                            rst     $08
 153++2402 9E                            db      $9E
 154++2403 18 E0                         jr F_Read_Exit
 155++2405              //                exx
 156++2405              //                pop     de                  // Restore Return Stack pointer
 157++2405              //                pop     bc                  // Restore Instruction pointer
 158++2405              //                pop     ix                  // Restore ix
 159++2405              //                 exx
 160++2405              //                 push    de                  // bytes involved in i/o operation
 161++2405              //                 sbc     hl, hl
 162++2405              //                 push    hl
 163++2405              //                exx
 164++2405              //                next
 165++2405
 166++2405              //  ______________________________________________________________________
 167++2405              //
 168++2405              // f_open       a1 a2 b -- u f
 169++2405              // open a file
 170++2405              // a1 (filespec) is a null-terminated string, such as produced by ," definition
 171++2405              // a2 is address to an 8-byte header data used in some cases.
 172++2405              // b is access mode-byte, that is a combination of:
 173++2405              // any/all of:
 174++2405              //   esx_mode_read          $01 request read access
 175++2405              //   esx_mode_write         $02 request write access
 176++2405              //   esx_mode_use_header    $40 read/write +3DOS header
 177++2405              // plus one of:
 178++2405              //   esx_mode_open_exist    $00 only open existing file
 179++2405              //   esx_mode_open_creat    $08 open existing or create file
 180++2405              //   esx_mode_creat_noexist $04 create new file, error if exists
 181++2405              //   esx_mode_creat_trunc   $0c create new file, delete existing
 182++2405              // Return file-handle u and 0 on success, True flag on error
 183++2405                              New_Def F_OPEN, "F_OPEN", is_code, is_normal
 183++2405             >
 183++2405             >Dict_Ptr        defl    $
 183++2405             >
 183++2405             >//              ______________________________________________________________________
 183++2405             >//              Heap part
 183++2405             >
 183++2405             >
 183++2405             >                org     (Heap_Ptr & $1FFF) + $E000
 183++E1C7             >
 183++E1C7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 183++E1C7             >Latest_Definition defl  Heap_Ptr
 183++E1C7             >
 183++E1C7             >                // dummy db directives used to calculate length of namec
 183++E1C7 46 5F 4F 50 >                db      "F_OPEN"
 183++E1CB 45 4E       >
 183++E1CD             >len_NFA         defl    $ - temp_NFA
 183++E1CD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 183++E1C7             >
 183++E1C7 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 183++E1C8 46 5F 4F 50 >                db      "F_OPEN"               // name string in 7-bit ascii, but
 183++E1CC 45 4E       >
 183++E1CE             >                org     $-1                 // alter last byte of Name just above to set
 183++E1CD CE          >                db      {b $} | END_BIT     // msb as name end
 183++E1CE             >
 183++E1CE BB 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 183++E1D0             >Prev_Ptr        defl    Heap_Ptr
 183++E1D0             >
 183++E1D0             >mirror_Ptr      defl    $
 183++E1D0             >
 183++E1D0 07 24       >                dw      Dict_Ptr + 2        // xt
 183++E1D2             >Heap_Ptr        defl    $ - $E000           // save current HP
 183++E1D2             >
 183++E1D2             >Current_HP      defl  $ - $E000             // used to set HP once!
 183++E1D2             >
 183++E1D2             >//              ______________________________________________________________________
 183++E1D2             >//              Dictionary part
 183++E1D2             >
 183++E1D2             >                org     Dict_Ptr
 183++2405             >
 183++2405 D0 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 183++2407             >
 183++2407             >F_OPEN:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 183++2407 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 183++2407 ~           >
 183++2407 ~           >
 183++2407             >                endif           ; ok        // for other definitions it "points" the correct handler
 183++2407             >                // Use of "; ok" to suppress "warning[fwdref]"
 183++2407             >
 183++2407             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 184++2407 D9                            exx
 185++2408 C1                            pop     bc                  // file-mode
 186++2409 41                            ld      b, c                // file-mode
 187++240A D1                            pop     de                  // 8-bytes buffer if any
 188++240B DD E3                         ex      (sp), ix            // filespec nul-terminated
 189++240D DD E5                         push    ix
 190++240F E1                            pop     hl
 191++2410 D9                           exx
 192++2411 D5                           push    de                  // Save Return Stack pointer
 193++2412 C5                           push    bc                  // Save Instruction pointer
 194++2413 D9                            exx
 195++2414 3E 2A                         ld      a, "*"
 196++2416 CF                            rst     $08
 197++2417 9A                            db      $9A
 198++2418              F_Open_Exit:
 199++2418 5F                            ld      e, a                // return the handle-number
 200++2419 16 00                         ld      d, 0
 201++241B 18 C8                        jr F_Read_Exit
 202++241D
 203++241D              //   \ CREATE FILENAME ," test.txt"   \ new Counted String
 204++241D              //   \ FILENAME 1+ PAD 1 F_OPEN
 205++241D              //   \ DROP
 206++241D              //   \ F_CLOSE
 207++241D
 208++241D
 209++241D              //  ______________________________________________________________________
 210++241D              //
 211++241D              // f_opendir    a1 -- u f
 212++241D              // open a file
 213++241D                              New_Def F_OPENDIR, "F_OPENDIR", is_code, is_normal
 213++241D             >
 213++241D             >Dict_Ptr        defl    $
 213++241D             >
 213++241D             >//              ______________________________________________________________________
 213++241D             >//              Heap part
 213++241D             >
 213++241D             >
 213++241D             >                org     (Heap_Ptr & $1FFF) + $E000
 213++E1D2             >
 213++E1D2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 213++E1D2             >Latest_Definition defl  Heap_Ptr
 213++E1D2             >
 213++E1D2             >                // dummy db directives used to calculate length of namec
 213++E1D2 46 5F 4F 50 >                db      "F_OPENDIR"
 213++E1D6 45 4E 44 49 >
 213++E1DA 52          >
 213++E1DB             >len_NFA         defl    $ - temp_NFA
 213++E1DB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 213++E1D2             >
 213++E1D2 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 213++E1D3 46 5F 4F 50 >                db      "F_OPENDIR"               // name string in 7-bit ascii, but
 213++E1D7 45 4E 44 49 >
 213++E1DB 52          >
 213++E1DC             >                org     $-1                 // alter last byte of Name just above to set
 213++E1DB D2          >                db      {b $} | END_BIT     // msb as name end
 213++E1DC             >
 213++E1DC C7 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 213++E1DE             >Prev_Ptr        defl    Heap_Ptr
 213++E1DE             >
 213++E1DE             >mirror_Ptr      defl    $
 213++E1DE             >
 213++E1DE 1F 24       >                dw      Dict_Ptr + 2        // xt
 213++E1E0             >Heap_Ptr        defl    $ - $E000           // save current HP
 213++E1E0             >
 213++E1E0             >Current_HP      defl  $ - $E000             // used to set HP once!
 213++E1E0             >
 213++E1E0             >//              ______________________________________________________________________
 213++E1E0             >//              Dictionary part
 213++E1E0             >
 213++E1E0             >                org     Dict_Ptr
 213++241D             >
 213++241D DE 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 213++241F             >
 213++241F             >F_OPENDIR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 213++241F ~           >                call    runcode ; ok        // for primitive definitions  actual code
 213++241F ~           >
 213++241F ~           >
 213++241F             >                endif           ; ok        // for other definitions it "points" the correct handler
 213++241F             >                // Use of "; ok" to suppress "warning[fwdref]"
 213++241F             >
 213++241F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 214++241F DD E3                        ex      (sp), ix            // filespec nul-terminated
 215++2421 DD E5                        push    ix
 216++2423 E1                           pop     hl
 217++2424 D5                           push    de                  // Save Return Stack pointer
 218++2425 C5                           push    bc                  // Save Instruction pointer
 219++2426 06 10                        ld      b, $10              // file-mode
 220++2428 3E 43                        ld      a, "C"
 221++242A CF                           rst     $08
 222++242B A3                           db      $A3
 223++242C 18 EA                        jr      F_Open_Exit
 224++242E
 225++242E
 226++242E              //  ______________________________________________________________________
 227++242E              //
 228++242E              // f_readdir    a1 a2 b -- u f
 229++242E              // open a file
 230++242E                              New_Def F_READDIR, "F_READDIR", is_code, is_normal
 230++242E             >
 230++242E             >Dict_Ptr        defl    $
 230++242E             >
 230++242E             >//              ______________________________________________________________________
 230++242E             >//              Heap part
 230++242E             >
 230++242E             >
 230++242E             >                org     (Heap_Ptr & $1FFF) + $E000
 230++E1E0             >
 230++E1E0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 230++E1E0             >Latest_Definition defl  Heap_Ptr
 230++E1E0             >
 230++E1E0             >                // dummy db directives used to calculate length of namec
 230++E1E0 46 5F 52 45 >                db      "F_READDIR"
 230++E1E4 41 44 44 49 >
 230++E1E8 52          >
 230++E1E9             >len_NFA         defl    $ - temp_NFA
 230++E1E9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 230++E1E0             >
 230++E1E0 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 230++E1E1 46 5F 52 45 >                db      "F_READDIR"               // name string in 7-bit ascii, but
 230++E1E5 41 44 44 49 >
 230++E1E9 52          >
 230++E1EA             >                org     $-1                 // alter last byte of Name just above to set
 230++E1E9 D2          >                db      {b $} | END_BIT     // msb as name end
 230++E1EA             >
 230++E1EA D2 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 230++E1EC             >Prev_Ptr        defl    Heap_Ptr
 230++E1EC             >
 230++E1EC             >mirror_Ptr      defl    $
 230++E1EC             >
 230++E1EC 30 24       >                dw      Dict_Ptr + 2        // xt
 230++E1EE             >Heap_Ptr        defl    $ - $E000           // save current HP
 230++E1EE             >
 230++E1EE             >Current_HP      defl  $ - $E000             // used to set HP once!
 230++E1EE             >
 230++E1EE             >//              ______________________________________________________________________
 230++E1EE             >//              Dictionary part
 230++E1EE             >
 230++E1EE             >                org     Dict_Ptr
 230++242E             >
 230++242E EC 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 230++2430             >
 230++2430             >F_READDIR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 230++2430 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 230++2430 ~           >
 230++2430 ~           >
 230++2430             >                endif           ; ok        // for other definitions it "points" the correct handler
 230++2430             >                // Use of "; ok" to suppress "warning[fwdref]"
 230++2430             >
 230++2430             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 231++2430 D9                            exx
 232++2431 E1                            pop     hl
 233++2432 7D                            ld      a, l
 234++2433 D1                            pop     de
 235++2434 DD E3                         ex      (sp), ix            // filespec nul-terminated
 236++2436 DD E5                         push    ix
 237++2438 E1                            pop     hl
 238++2439 D9                           exx
 239++243A D5                           push    de                  // Save Return Stack pointer
 240++243B C5                           push    bc                  // Save Instruction pointer
 241++243C D9                            exx
 242++243D CF                            rst     $08
 243++243E A4                            db      $A4
 244++243F 18 D7                         jr      F_Open_Exit
 245++2441
# file closed: C:\Zx\CSpect\Projects\vForth17_DOT/source/next-opt0.asm
1100+ 2441
1101+ 2441
1102+ 2441              //  ______________________________________________________________________
1103+ 2441              //
1104+ 2441              // cmove    a1 a2 u --
1105+ 2441              // If u > 0, moves memory content starting at address a1 for n bytes long
1106+ 2441              // storing then starting at address addr2.
1107+ 2441              // The content of a1 is moved first. See CMOVE> also.
1108+ 2441                              New_Def CMOVE, "CMOVE", is_code, is_normal
1108+ 2441             >
1108+ 2441             >Dict_Ptr        defl    $
1108+ 2441             >
1108+ 2441             >//              ______________________________________________________________________
1108+ 2441             >//              Heap part
1108+ 2441             >
1108+ 2441             >
1108+ 2441             >                org     (Heap_Ptr & $1FFF) + $E000
1108+ E1EE             >
1108+ E1EE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1108+ E1EE             >Latest_Definition defl  Heap_Ptr
1108+ E1EE             >
1108+ E1EE             >                // dummy db directives used to calculate length of namec
1108+ E1EE 43 4D 4F 56 >                db      "CMOVE"
1108+ E1F2 45          >
1108+ E1F3             >len_NFA         defl    $ - temp_NFA
1108+ E1F3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1108+ E1EE             >
1108+ E1EE 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1108+ E1EF 43 4D 4F 56 >                db      "CMOVE"               // name string in 7-bit ascii, but
1108+ E1F3 45          >
1108+ E1F4             >                org     $-1                 // alter last byte of Name just above to set
1108+ E1F3 C5          >                db      {b $} | END_BIT     // msb as name end
1108+ E1F4             >
1108+ E1F4 E0 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1108+ E1F6             >Prev_Ptr        defl    Heap_Ptr
1108+ E1F6             >
1108+ E1F6             >mirror_Ptr      defl    $
1108+ E1F6             >
1108+ E1F6 43 24       >                dw      Dict_Ptr + 2        // xt
1108+ E1F8             >Heap_Ptr        defl    $ - $E000           // save current HP
1108+ E1F8             >
1108+ E1F8             >Current_HP      defl  $ - $E000             // used to set HP once!
1108+ E1F8             >
1108+ E1F8             >//              ______________________________________________________________________
1108+ E1F8             >//              Dictionary part
1108+ E1F8             >
1108+ E1F8             >                org     Dict_Ptr
1108+ 2441             >
1108+ 2441 F6 01       >                dw      mirror_Ptr - $E000 + Heap_offset
1108+ 2443             >
1108+ 2443             >CMOVE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1108+ 2443 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1108+ 2443 ~           >
1108+ 2443 ~           >
1108+ 2443             >                endif           ; ok        // for other definitions it "points" the correct handler
1108+ 2443             >                // Use of "; ok" to suppress "warning[fwdref]"
1108+ 2443             >
1108+ 2443             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1109+ 2443 D9                           exx
1110+ 2444
1111+ 2444 C1                           pop     bc                  // bc has counter
1112+ 2445 D1                           pop     de                  // de now has dest
1113+ 2446 E1                           pop     hl                 // hl has source, save Instruction Pointer
1114+ 2447 78                           ld      a, b
1115+ 2448 B1                           or      c
1116+ 2449 28 02                        jr      z, Cmove_NoMove
1117+ 244B ED B0                            ldir
1118+ 244D              Cmove_NoMove:
1119+ 244D D9                           exx
1120+ 244E
1121+ 244E                              next
1121+ 244E DD E9       >                jp      (ix)
1122+ 2450
1123+ 2450              //  ______________________________________________________________________
1124+ 2450              //
1125+ 2450              // cmove>    a1 a2 u --
1126+ 2450              // If u > 0, moves memory content starting at address a1 for n bytes long
1127+ 2450              // storing then starting at address addr2.
1128+ 2450              // The content of a1 is moved last. See cmove.
1129+ 2450                              New_Def CMOVE_TO, "CMOVE>", is_code, is_normal
1129+ 2450             >
1129+ 2450             >Dict_Ptr        defl    $
1129+ 2450             >
1129+ 2450             >//              ______________________________________________________________________
1129+ 2450             >//              Heap part
1129+ 2450             >
1129+ 2450             >
1129+ 2450             >                org     (Heap_Ptr & $1FFF) + $E000
1129+ E1F8             >
1129+ E1F8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1129+ E1F8             >Latest_Definition defl  Heap_Ptr
1129+ E1F8             >
1129+ E1F8             >                // dummy db directives used to calculate length of namec
1129+ E1F8 43 4D 4F 56 >                db      "CMOVE>"
1129+ E1FC 45 3E       >
1129+ E1FE             >len_NFA         defl    $ - temp_NFA
1129+ E1FE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1129+ E1F8             >
1129+ E1F8 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1129+ E1F9 43 4D 4F 56 >                db      "CMOVE>"               // name string in 7-bit ascii, but
1129+ E1FD 45 3E       >
1129+ E1FF             >                org     $-1                 // alter last byte of Name just above to set
1129+ E1FE BE          >                db      {b $} | END_BIT     // msb as name end
1129+ E1FF             >
1129+ E1FF EE 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1129+ E201             >Prev_Ptr        defl    Heap_Ptr
1129+ E201             >
1129+ E201             >mirror_Ptr      defl    $
1129+ E201             >
1129+ E201 52 24       >                dw      Dict_Ptr + 2        // xt
1129+ E203             >Heap_Ptr        defl    $ - $E000           // save current HP
1129+ E203             >
1129+ E203             >Current_HP      defl  $ - $E000             // used to set HP once!
1129+ E203             >
1129+ E203             >//              ______________________________________________________________________
1129+ E203             >//              Dictionary part
1129+ E203             >
1129+ E203             >                org     Dict_Ptr
1129+ 2450             >
1129+ 2450 01 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1129+ 2452             >
1129+ 2452             >CMOVE_TO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1129+ 2452 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1129+ 2452 ~           >
1129+ 2452 ~           >
1129+ 2452             >                endif           ; ok        // for other definitions it "points" the correct handler
1129+ 2452             >                // Use of "; ok" to suppress "warning[fwdref]"
1129+ 2452             >
1129+ 2452             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1130+ 2452 D9                           exx
1131+ 2453
1132+ 2453 C1                           pop     bc                  // bc has counter
1133+ 2454 D1                           pop     de                  // de has dest
1134+ 2455 E1                           pop     hl                  // hl has source, save Instruction Pointer
1135+ 2456 78                           ld      a, b
1136+ 2457 B1                           or      c
1137+ 2458 28 08                        jr      z, CmoveV_NoMove
1138+ 245A EB                               ex      de, hl              // compute address to
1139+ 245B 09                               add     hl, bc              // operate backward
1140+ 245C 2B                               dec     hl
1141+ 245D EB                               ex      de, hl
1142+ 245E 09                               add     hl, bc
1143+ 245F 2B                               dec     hl
1144+ 2460 ED B8                            lddr                        // backward
1145+ 2462              CmoveV_NoMove:
1146+ 2462 D9                           exx
1147+ 2463
1148+ 2463                              next
1148+ 2463 DD E9       >                jp      (ix)
1149+ 2465
1150+ 2465              //  ______________________________________________________________________
1151+ 2465              //
1152+ 2465              // um*      u1 u2 -- ud
1153+ 2465              // Unsigned multiplication
1154+ 2465              // A double-integer is kept in CPU registers as DEHL then pushed on stack.
1155+ 2465              // On the stack a double number is treated as two single numbers
1156+ 2465              // where DE is on the top of the stack and HL is the second from top,
1157+ 2465              // Instead, in 2VARIABLE a double number is stored as EDLH.
1158+ 2465              // this definition could use "MUL" Z80N new op-code.
1159+ 2465                              New_Def UM_MUL, "UM*", is_code, is_normal
1159+ 2465             >
1159+ 2465             >Dict_Ptr        defl    $
1159+ 2465             >
1159+ 2465             >//              ______________________________________________________________________
1159+ 2465             >//              Heap part
1159+ 2465             >
1159+ 2465             >
1159+ 2465             >                org     (Heap_Ptr & $1FFF) + $E000
1159+ E203             >
1159+ E203             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1159+ E203             >Latest_Definition defl  Heap_Ptr
1159+ E203             >
1159+ E203             >                // dummy db directives used to calculate length of namec
1159+ E203 55 4D 2A    >                db      "UM*"
1159+ E206             >len_NFA         defl    $ - temp_NFA
1159+ E206             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1159+ E203             >
1159+ E203 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1159+ E204 55 4D 2A    >                db      "UM*"               // name string in 7-bit ascii, but
1159+ E207             >                org     $-1                 // alter last byte of Name just above to set
1159+ E206 AA          >                db      {b $} | END_BIT     // msb as name end
1159+ E207             >
1159+ E207 F8 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1159+ E209             >Prev_Ptr        defl    Heap_Ptr
1159+ E209             >
1159+ E209             >mirror_Ptr      defl    $
1159+ E209             >
1159+ E209 67 24       >                dw      Dict_Ptr + 2        // xt
1159+ E20B             >Heap_Ptr        defl    $ - $E000           // save current HP
1159+ E20B             >
1159+ E20B             >Current_HP      defl  $ - $E000             // used to set HP once!
1159+ E20B             >
1159+ E20B             >//              ______________________________________________________________________
1159+ E20B             >//              Dictionary part
1159+ E20B             >
1159+ E20B             >                org     Dict_Ptr
1159+ 2465             >
1159+ 2465 09 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1159+ 2467             >
1159+ 2467             >UM_MUL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1159+ 2467 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1159+ 2467 ~           >
1159+ 2467 ~           >
1159+ 2467             >                endif           ; ok        // for other definitions it "points" the correct handler
1159+ 2467             >                // Use of "; ok" to suppress "warning[fwdref]"
1159+ 2467             >
1159+ 2467             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1160+ 2467 D9                           exx
1161+ 2468 D1                           pop     de                    // de has u2 operand
1162+ 2469 E1                           pop     hl                    // hl has u1 operand
1163+ 246A 45                           ld      b, l
1164+ 246B 4B                           ld      c, e
1165+ 246C 5D                           ld      e, l
1166+ 246D 6A                           ld      l, d
1167+ 246E E5                           push    hl
1168+ 246F 69                           ld      l, c
1169+ 2470 ED 30                        mul
1170+ 2472 EB                           ex      de, hl
1171+ 2473 ED 30                        mul
1172+ 2475 AF                           xor     a
1173+ 2476 19                           add     hl, de
1174+ 2477 8F                           adc     a
1175+ 2478 59                           ld      e, c
1176+ 2479 50                           ld      d, b
1177+ 247A ED 30                        mul
1178+ 247C 47                           ld      b, a
1179+ 247D 4C                           ld      c, h
1180+ 247E 7A                           ld      a, d
1181+ 247F 85                           add     l
1182+ 2480 67                           ld      h, a
1183+ 2481 6B                           ld      l, e
1184+ 2482 D1                           pop     de
1185+ 2483 ED 30                        mul
1186+ 2485 EB                           ex      de, hl
1187+ 2486 ED 4A                        adc     hl, bc
1188+ 2488 D5                           push    de
1189+ 2489 E5                           push    hl
1190+ 248A D9                           exx
1191+ 248B                              next
1191+ 248B DD E9       >                jp      (ix)
1192+ 248D
1193+ 248D              //  ______________________________________________________________________
1194+ 248D              //
1195+ 248D              // um/mod      ud u1 -- q r
1196+ 248D              // divides ud into u1 giving quotient q and remainder r
1197+ 248D              // algorithm takes 16 bit at a time starting from msb
1198+ 248D              // DE grows from lsb upward with quotient result
1199+ 248D              // HL keeps the remainder at each stage of division
1200+ 248D              // each loop 'lowers' the next binary digit to form the current dividend
1201+ 248D                              New_Def UMDIVMOD, "UM/MOD", is_code, is_normal
1201+ 248D             >
1201+ 248D             >Dict_Ptr        defl    $
1201+ 248D             >
1201+ 248D             >//              ______________________________________________________________________
1201+ 248D             >//              Heap part
1201+ 248D             >
1201+ 248D             >
1201+ 248D             >                org     (Heap_Ptr & $1FFF) + $E000
1201+ E20B             >
1201+ E20B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1201+ E20B             >Latest_Definition defl  Heap_Ptr
1201+ E20B             >
1201+ E20B             >                // dummy db directives used to calculate length of namec
1201+ E20B 55 4D 2F 4D >                db      "UM/MOD"
1201+ E20F 4F 44       >
1201+ E211             >len_NFA         defl    $ - temp_NFA
1201+ E211             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1201+ E20B             >
1201+ E20B 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1201+ E20C 55 4D 2F 4D >                db      "UM/MOD"               // name string in 7-bit ascii, but
1201+ E210 4F 44       >
1201+ E212             >                org     $-1                 // alter last byte of Name just above to set
1201+ E211 C4          >                db      {b $} | END_BIT     // msb as name end
1201+ E212             >
1201+ E212 03 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1201+ E214             >Prev_Ptr        defl    Heap_Ptr
1201+ E214             >
1201+ E214             >mirror_Ptr      defl    $
1201+ E214             >
1201+ E214 8F 24       >                dw      Dict_Ptr + 2        // xt
1201+ E216             >Heap_Ptr        defl    $ - $E000           // save current HP
1201+ E216             >
1201+ E216             >Current_HP      defl  $ - $E000             // used to set HP once!
1201+ E216             >
1201+ E216             >//              ______________________________________________________________________
1201+ E216             >//              Dictionary part
1201+ E216             >
1201+ E216             >                org     Dict_Ptr
1201+ 248D             >
1201+ 248D 14 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1201+ 248F             >
1201+ 248F             >UMDIVMOD:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1201+ 248F ~           >                call    runcode ; ok        // for primitive definitions  actual code
1201+ 248F ~           >
1201+ 248F ~           >
1201+ 248F             >                endif           ; ok        // for other definitions it "points" the correct handler
1201+ 248F             >                // Use of "; ok" to suppress "warning[fwdref]"
1201+ 248F             >
1201+ 248F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1202+ 248F D9                           exx
1203+ 2490 C1                           pop     bc                      // divisor
1204+ 2491
1205+ 2491 E1                           pop     hl                      // < high part
1206+ 2492 D1                           pop     de                      // < low part and
1207+ 2493
1208+ 2493 7D                           ld      a, l                    // check without changing arguments
1209+ 2494 91                           sub     c                       // if divisor is greater than high part
1210+ 2495 7C                           ld      a, h                    // so quotient will be in range
1211+ 2496 98                           sbc     a, b
1212+ 2497 30 20                        jr      nc, Um_DivMod_OutOfRange
1213+ 2499 3E 10                            ld      a, 16
1214+ 249B              Um_DivMod_Loop:
1215+ 249B CB 23                                sla     e
1216+ 249D CB 12                                rl      d
1217+ 249F ED 6A                                adc     hl, hl
1218+ 24A1 30 05                                jr      nc, Um_DivMod_Carry
1219+ 24A3 A7                                       and     a
1220+ 24A4 ED 42                                    sbc     hl, bc
1221+ 24A6 18 07                                jr      Um_DivMod_Endif    // else
1222+ 24A8              Um_DivMod_Carry:
1223+ 24A8 A7                                       and     a
1224+ 24A9 ED 42                                    sbc     hl, bc
1225+ 24AB 30 02                                    jr      nc, Um_DivMod_Endif
1226+ 24AD 09                                           add     hl, bc
1227+ 24AE 1B                                           dec     de
1228+ 24AF              Um_DivMod_Endif:                                   // endif
1229+ 24AF 13                                   inc     de
1230+ 24B0 3D                                   dec     a
1231+ 24B1 20 E8                            jr      nz, Um_DivMod_Loop
1232+ 24B3 EB                               ex      de, hl
1233+ 24B4              Um_DivMod_Bailout:
1234+ 24B4 D5                               push    de                  // de := remanider
1235+ 24B5 E5                               push    hl                  // hl := quotient
1236+ 24B6 D9                               exx
1237+ 24B7                                  next
1237+ 24B7 DD E9       >                jp      (ix)
1238+ 24B9
1239+ 24B9              Um_DivMod_OutOfRange:
1240+ 24B9 21 FF FF                     ld      hl, -1
1241+ 24BC 54                           ld      d, h
1242+ 24BD 5D                           ld      e, l
1243+ 24BE 18 F4                        jr      Um_DivMod_Bailout
1244+ 24C0
1245+ 24C0              //  ______________________________________________________________________
1246+ 24C0              //
1247+ 24C0              // and          n1 n2 -- n3
1248+ 24C0              // bit logical AND. Returns n3 as n1 & n2
1249+ 24C0                              New_Def AND_OP, "AND", is_code, is_normal
1249+ 24C0             >
1249+ 24C0             >Dict_Ptr        defl    $
1249+ 24C0             >
1249+ 24C0             >//              ______________________________________________________________________
1249+ 24C0             >//              Heap part
1249+ 24C0             >
1249+ 24C0             >
1249+ 24C0             >                org     (Heap_Ptr & $1FFF) + $E000
1249+ E216             >
1249+ E216             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1249+ E216             >Latest_Definition defl  Heap_Ptr
1249+ E216             >
1249+ E216             >                // dummy db directives used to calculate length of namec
1249+ E216 41 4E 44    >                db      "AND"
1249+ E219             >len_NFA         defl    $ - temp_NFA
1249+ E219             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1249+ E216             >
1249+ E216 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1249+ E217 41 4E 44    >                db      "AND"               // name string in 7-bit ascii, but
1249+ E21A             >                org     $-1                 // alter last byte of Name just above to set
1249+ E219 C4          >                db      {b $} | END_BIT     // msb as name end
1249+ E21A             >
1249+ E21A 0B 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1249+ E21C             >Prev_Ptr        defl    Heap_Ptr
1249+ E21C             >
1249+ E21C             >mirror_Ptr      defl    $
1249+ E21C             >
1249+ E21C C2 24       >                dw      Dict_Ptr + 2        // xt
1249+ E21E             >Heap_Ptr        defl    $ - $E000           // save current HP
1249+ E21E             >
1249+ E21E             >Current_HP      defl  $ - $E000             // used to set HP once!
1249+ E21E             >
1249+ E21E             >//              ______________________________________________________________________
1249+ E21E             >//              Dictionary part
1249+ E21E             >
1249+ E21E             >                org     Dict_Ptr
1249+ 24C0             >
1249+ 24C0 1C 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1249+ 24C2             >
1249+ 24C2             >AND_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1249+ 24C2 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1249+ 24C2 ~           >
1249+ 24C2 ~           >
1249+ 24C2             >                endif           ; ok        // for other definitions it "points" the correct handler
1249+ 24C2             >                // Use of "; ok" to suppress "warning[fwdref]"
1249+ 24C2             >
1249+ 24C2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1250+ 24C2 D9                           exx
1251+ 24C3 D1                           pop     de
1252+ 24C4 E1                           pop     hl
1253+ 24C5 7B                           ld      a, e
1254+ 24C6 A5                           and     l
1255+ 24C7 6F                           ld      l, a
1256+ 24C8 7A                           ld      a, d
1257+ 24C9 A4                           and     h
1258+ 24CA              Boolean_exit:
1259+ 24CA 67                           ld      h, a
1260+ 24CB E5                           push    hl
1261+ 24CC D9                           exx
1262+ 24CD                              next
1262+ 24CD DD E9       >                jp      (ix)
1263+ 24CF
1264+ 24CF              //  ______________________________________________________________________
1265+ 24CF              //
1266+ 24CF              // or           n1 n2 -- n3
1267+ 24CF              // bit logical OR. Returns n3 as n1 | n2
1268+ 24CF                              New_Def OR_OP, "OR", is_code, is_normal
1268+ 24CF             >
1268+ 24CF             >Dict_Ptr        defl    $
1268+ 24CF             >
1268+ 24CF             >//              ______________________________________________________________________
1268+ 24CF             >//              Heap part
1268+ 24CF             >
1268+ 24CF             >
1268+ 24CF             >                org     (Heap_Ptr & $1FFF) + $E000
1268+ E21E             >
1268+ E21E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1268+ E21E             >Latest_Definition defl  Heap_Ptr
1268+ E21E             >
1268+ E21E             >                // dummy db directives used to calculate length of namec
1268+ E21E 4F 52       >                db      "OR"
1268+ E220             >len_NFA         defl    $ - temp_NFA
1268+ E220             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1268+ E21E             >
1268+ E21E 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1268+ E21F 4F 52       >                db      "OR"               // name string in 7-bit ascii, but
1268+ E221             >                org     $-1                 // alter last byte of Name just above to set
1268+ E220 D2          >                db      {b $} | END_BIT     // msb as name end
1268+ E221             >
1268+ E221 16 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1268+ E223             >Prev_Ptr        defl    Heap_Ptr
1268+ E223             >
1268+ E223             >mirror_Ptr      defl    $
1268+ E223             >
1268+ E223 D1 24       >                dw      Dict_Ptr + 2        // xt
1268+ E225             >Heap_Ptr        defl    $ - $E000           // save current HP
1268+ E225             >
1268+ E225             >Current_HP      defl  $ - $E000             // used to set HP once!
1268+ E225             >
1268+ E225             >//              ______________________________________________________________________
1268+ E225             >//              Dictionary part
1268+ E225             >
1268+ E225             >                org     Dict_Ptr
1268+ 24CF             >
1268+ 24CF 23 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1268+ 24D1             >
1268+ 24D1             >OR_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1268+ 24D1 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1268+ 24D1 ~           >
1268+ 24D1 ~           >
1268+ 24D1             >                endif           ; ok        // for other definitions it "points" the correct handler
1268+ 24D1             >                // Use of "; ok" to suppress "warning[fwdref]"
1268+ 24D1             >
1268+ 24D1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1269+ 24D1 D9                           exx
1270+ 24D2 D1                           pop     de
1271+ 24D3 E1                           pop     hl
1272+ 24D4 7B                           ld      a, e
1273+ 24D5 B5                           or      l
1274+ 24D6 6F                           ld      l, a
1275+ 24D7 7A                           ld      a, d
1276+ 24D8 B4                           or      h
1277+ 24D9 18 EF                        jr      Boolean_exit
1278+ 24DB                        //    ld      h, a
1279+ 24DB                        //    push    hl
1280+ 24DB                        //    exx
1281+ 24DB                        //    next
1282+ 24DB
1283+ 24DB              //  ______________________________________________________________________
1284+ 24DB              //
1285+ 24DB              // xor          n1 n2 -- n3
1286+ 24DB              // bit logical OR. Returns n3 as n1 ^ n2
1287+ 24DB                              New_Def XOR_OP, "XOR", is_code, is_normal
1287+ 24DB             >
1287+ 24DB             >Dict_Ptr        defl    $
1287+ 24DB             >
1287+ 24DB             >//              ______________________________________________________________________
1287+ 24DB             >//              Heap part
1287+ 24DB             >
1287+ 24DB             >
1287+ 24DB             >                org     (Heap_Ptr & $1FFF) + $E000
1287+ E225             >
1287+ E225             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1287+ E225             >Latest_Definition defl  Heap_Ptr
1287+ E225             >
1287+ E225             >                // dummy db directives used to calculate length of namec
1287+ E225 58 4F 52    >                db      "XOR"
1287+ E228             >len_NFA         defl    $ - temp_NFA
1287+ E228             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1287+ E225             >
1287+ E225 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1287+ E226 58 4F 52    >                db      "XOR"               // name string in 7-bit ascii, but
1287+ E229             >                org     $-1                 // alter last byte of Name just above to set
1287+ E228 D2          >                db      {b $} | END_BIT     // msb as name end
1287+ E229             >
1287+ E229 1E 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1287+ E22B             >Prev_Ptr        defl    Heap_Ptr
1287+ E22B             >
1287+ E22B             >mirror_Ptr      defl    $
1287+ E22B             >
1287+ E22B DD 24       >                dw      Dict_Ptr + 2        // xt
1287+ E22D             >Heap_Ptr        defl    $ - $E000           // save current HP
1287+ E22D             >
1287+ E22D             >Current_HP      defl  $ - $E000             // used to set HP once!
1287+ E22D             >
1287+ E22D             >//              ______________________________________________________________________
1287+ E22D             >//              Dictionary part
1287+ E22D             >
1287+ E22D             >                org     Dict_Ptr
1287+ 24DB             >
1287+ 24DB 2B 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1287+ 24DD             >
1287+ 24DD             >XOR_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1287+ 24DD ~           >                call    runcode ; ok        // for primitive definitions  actual code
1287+ 24DD ~           >
1287+ 24DD ~           >
1287+ 24DD             >                endif           ; ok        // for other definitions it "points" the correct handler
1287+ 24DD             >                // Use of "; ok" to suppress "warning[fwdref]"
1287+ 24DD             >
1287+ 24DD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1288+ 24DD D9                           exx
1289+ 24DE D1                           pop     de
1290+ 24DF E1                           pop     hl
1291+ 24E0 7B                           ld      a, e
1292+ 24E1 AD                           xor     l
1293+ 24E2 6F                           ld      l, a
1294+ 24E3 7A                           ld      a, d
1295+ 24E4 AC                           xor     h
1296+ 24E5 18 E3                        jr      Boolean_exit
1297+ 24E7                        //    ld      h, a
1298+ 24E7                        //    push    hl
1299+ 24E7                        //    exx
1300+ 24E7                        //    next
1301+ 24E7
1302+ 24E7              //  ______________________________________________________________________
1303+ 24E7              //
1304+ 24E7              // sp@      -- a
1305+ 24E7              // returns on top of stack the value of SP before execution
1306+ 24E7                              New_Def SPFETCH, "SP@", is_code, is_normal
1306+ 24E7             >
1306+ 24E7             >Dict_Ptr        defl    $
1306+ 24E7             >
1306+ 24E7             >//              ______________________________________________________________________
1306+ 24E7             >//              Heap part
1306+ 24E7             >
1306+ 24E7             >
1306+ 24E7             >                org     (Heap_Ptr & $1FFF) + $E000
1306+ E22D             >
1306+ E22D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1306+ E22D             >Latest_Definition defl  Heap_Ptr
1306+ E22D             >
1306+ E22D             >                // dummy db directives used to calculate length of namec
1306+ E22D 53 50 40    >                db      "SP@"
1306+ E230             >len_NFA         defl    $ - temp_NFA
1306+ E230             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1306+ E22D             >
1306+ E22D 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1306+ E22E 53 50 40    >                db      "SP@"               // name string in 7-bit ascii, but
1306+ E231             >                org     $-1                 // alter last byte of Name just above to set
1306+ E230 C0          >                db      {b $} | END_BIT     // msb as name end
1306+ E231             >
1306+ E231 25 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1306+ E233             >Prev_Ptr        defl    Heap_Ptr
1306+ E233             >
1306+ E233             >mirror_Ptr      defl    $
1306+ E233             >
1306+ E233 E9 24       >                dw      Dict_Ptr + 2        // xt
1306+ E235             >Heap_Ptr        defl    $ - $E000           // save current HP
1306+ E235             >
1306+ E235             >Current_HP      defl  $ - $E000             // used to set HP once!
1306+ E235             >
1306+ E235             >//              ______________________________________________________________________
1306+ E235             >//              Dictionary part
1306+ E235             >
1306+ E235             >                org     Dict_Ptr
1306+ 24E7             >
1306+ 24E7 33 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1306+ 24E9             >
1306+ 24E9             >SPFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1306+ 24E9 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1306+ 24E9 ~           >
1306+ 24E9 ~           >
1306+ 24E9             >                endif           ; ok        // for other definitions it "points" the correct handler
1306+ 24E9             >                // Use of "; ok" to suppress "warning[fwdref]"
1306+ 24E9             >
1306+ 24E9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1307+ 24E9
1308+ 24E9 21 00 00                     ld      hl, 0
1309+ 24EC 39                           add     hl, sp
1310+ 24ED
1311+ 24ED                              psh1
1311+ 24ED E5          >                push    hl
1311+ 24EE DD E9       >                jp      (ix)
1312+ 24F0
1313+ 24F0              //  ______________________________________________________________________
1314+ 24F0              //
1315+ 24F0              // sp!      a --
1316+ 24F0              // restore SP to the initial value passed
1317+ 24F0              // normally it is S0, i.e. the word at offset 6 and 7 of user variabiles area.
1318+ 24F0                              New_Def SPSTORE, "SP!", is_code, is_normal
1318+ 24F0             >
1318+ 24F0             >Dict_Ptr        defl    $
1318+ 24F0             >
1318+ 24F0             >//              ______________________________________________________________________
1318+ 24F0             >//              Heap part
1318+ 24F0             >
1318+ 24F0             >
1318+ 24F0             >                org     (Heap_Ptr & $1FFF) + $E000
1318+ E235             >
1318+ E235             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1318+ E235             >Latest_Definition defl  Heap_Ptr
1318+ E235             >
1318+ E235             >                // dummy db directives used to calculate length of namec
1318+ E235 53 50 21    >                db      "SP!"
1318+ E238             >len_NFA         defl    $ - temp_NFA
1318+ E238             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1318+ E235             >
1318+ E235 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1318+ E236 53 50 21    >                db      "SP!"               // name string in 7-bit ascii, but
1318+ E239             >                org     $-1                 // alter last byte of Name just above to set
1318+ E238 A1          >                db      {b $} | END_BIT     // msb as name end
1318+ E239             >
1318+ E239 2D 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1318+ E23B             >Prev_Ptr        defl    Heap_Ptr
1318+ E23B             >
1318+ E23B             >mirror_Ptr      defl    $
1318+ E23B             >
1318+ E23B F2 24       >                dw      Dict_Ptr + 2        // xt
1318+ E23D             >Heap_Ptr        defl    $ - $E000           // save current HP
1318+ E23D             >
1318+ E23D             >Current_HP      defl  $ - $E000             // used to set HP once!
1318+ E23D             >
1318+ E23D             >//              ______________________________________________________________________
1318+ E23D             >//              Dictionary part
1318+ E23D             >
1318+ E23D             >                org     Dict_Ptr
1318+ 24F0             >
1318+ 24F0 3B 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1318+ 24F2             >
1318+ 24F2             >SPSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1318+ 24F2 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1318+ 24F2 ~           >
1318+ 24F2 ~           >
1318+ 24F2             >                endif           ; ok        // for other definitions it "points" the correct handler
1318+ 24F2             >                // Use of "; ok" to suppress "warning[fwdref]"
1318+ 24F2             >
1318+ 24F2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1319+ 24F2 E1                           pop     hl
1320+ 24F3 F9                           ld      sp, hl
1321+ 24F4
1322+ 24F4                              next
1322+ 24F4 DD E9       >                jp      (ix)
1323+ 24F6
1324+ 24F6              //  ______________________________________________________________________
1325+ 24F6              //
1326+ 24F6              // rp@      -- a
1327+ 24F6              // returns on top of stack the value of Return-Pointer
1328+ 24F6                              New_Def RPFETCH, "RP@", is_code, is_normal
1328+ 24F6             >
1328+ 24F6             >Dict_Ptr        defl    $
1328+ 24F6             >
1328+ 24F6             >//              ______________________________________________________________________
1328+ 24F6             >//              Heap part
1328+ 24F6             >
1328+ 24F6             >
1328+ 24F6             >                org     (Heap_Ptr & $1FFF) + $E000
1328+ E23D             >
1328+ E23D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1328+ E23D             >Latest_Definition defl  Heap_Ptr
1328+ E23D             >
1328+ E23D             >                // dummy db directives used to calculate length of namec
1328+ E23D 52 50 40    >                db      "RP@"
1328+ E240             >len_NFA         defl    $ - temp_NFA
1328+ E240             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1328+ E23D             >
1328+ E23D 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1328+ E23E 52 50 40    >                db      "RP@"               // name string in 7-bit ascii, but
1328+ E241             >                org     $-1                 // alter last byte of Name just above to set
1328+ E240 C0          >                db      {b $} | END_BIT     // msb as name end
1328+ E241             >
1328+ E241 35 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1328+ E243             >Prev_Ptr        defl    Heap_Ptr
1328+ E243             >
1328+ E243             >mirror_Ptr      defl    $
1328+ E243             >
1328+ E243 F8 24       >                dw      Dict_Ptr + 2        // xt
1328+ E245             >Heap_Ptr        defl    $ - $E000           // save current HP
1328+ E245             >
1328+ E245             >Current_HP      defl  $ - $E000             // used to set HP once!
1328+ E245             >
1328+ E245             >//              ______________________________________________________________________
1328+ E245             >//              Dictionary part
1328+ E245             >
1328+ E245             >                org     Dict_Ptr
1328+ 24F6             >
1328+ 24F6 43 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1328+ 24F8             >
1328+ 24F8             >RPFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1328+ 24F8 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1328+ 24F8 ~           >
1328+ 24F8 ~           >
1328+ 24F8             >                endif           ; ok        // for other definitions it "points" the correct handler
1328+ 24F8             >                // Use of "; ok" to suppress "warning[fwdref]"
1328+ 24F8             >
1328+ 24F8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1329+ 24F8
1330+ 24F8                              // *** ldhlrp
1331+ 24F8                              // *** ex      de, hl
1332+ 24F8 D5                           push de
1333+ 24F9
1334+ 24F9                              next
1334+ 24F9 DD E9       >                jp      (ix)
1335+ 24FB
1336+ 24FB              //  ______________________________________________________________________
1337+ 24FB              //
1338+ 24FB              // rp!      a --
1339+ 24FB              // restore RP to the initial value passed
1340+ 24FB              // normally it is R0 @, i.e. the word at offset 8 of user variabiles area.
1341+ 24FB                              New_Def RPSTORE, "RP!", is_code, is_normal
1341+ 24FB             >
1341+ 24FB             >Dict_Ptr        defl    $
1341+ 24FB             >
1341+ 24FB             >//              ______________________________________________________________________
1341+ 24FB             >//              Heap part
1341+ 24FB             >
1341+ 24FB             >
1341+ 24FB             >                org     (Heap_Ptr & $1FFF) + $E000
1341+ E245             >
1341+ E245             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1341+ E245             >Latest_Definition defl  Heap_Ptr
1341+ E245             >
1341+ E245             >                // dummy db directives used to calculate length of namec
1341+ E245 52 50 21    >                db      "RP!"
1341+ E248             >len_NFA         defl    $ - temp_NFA
1341+ E248             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1341+ E245             >
1341+ E245 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1341+ E246 52 50 21    >                db      "RP!"               // name string in 7-bit ascii, but
1341+ E249             >                org     $-1                 // alter last byte of Name just above to set
1341+ E248 A1          >                db      {b $} | END_BIT     // msb as name end
1341+ E249             >
1341+ E249 3D 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1341+ E24B             >Prev_Ptr        defl    Heap_Ptr
1341+ E24B             >
1341+ E24B             >mirror_Ptr      defl    $
1341+ E24B             >
1341+ E24B FD 24       >                dw      Dict_Ptr + 2        // xt
1341+ E24D             >Heap_Ptr        defl    $ - $E000           // save current HP
1341+ E24D             >
1341+ E24D             >Current_HP      defl  $ - $E000             // used to set HP once!
1341+ E24D             >
1341+ E24D             >//              ______________________________________________________________________
1341+ E24D             >//              Dictionary part
1341+ E24D             >
1341+ E24D             >                org     Dict_Ptr
1341+ 24FB             >
1341+ 24FB 4B 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1341+ 24FD             >
1341+ 24FD             >RPSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1341+ 24FD ~           >                call    runcode ; ok        // for primitive definitions  actual code
1341+ 24FD ~           >
1341+ 24FD ~           >
1341+ 24FD             >                endif           ; ok        // for other definitions it "points" the correct handler
1341+ 24FD             >                // Use of "; ok" to suppress "warning[fwdref]"
1341+ 24FD             >
1341+ 24FD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1342+ 24FD D1                           pop     de
1343+ 24FE                              // *** ex      de, hl
1344+ 24FE                              // *** ldrphl
1345+ 24FE
1346+ 24FE                              next
1346+ 24FE DD E9       >                jp      (ix)
1347+ 2500
1348+ 2500              //  ______________________________________________________________________
1349+ 2500              //
1350+ 2500              // exit       --
1351+ 2500              // exits back to the caller word
1352+ 2500                              New_Def EXIT, "EXIT", is_code, is_normal
1352+ 2500             >
1352+ 2500             >Dict_Ptr        defl    $
1352+ 2500             >
1352+ 2500             >//              ______________________________________________________________________
1352+ 2500             >//              Heap part
1352+ 2500             >
1352+ 2500             >
1352+ 2500             >                org     (Heap_Ptr & $1FFF) + $E000
1352+ E24D             >
1352+ E24D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1352+ E24D             >Latest_Definition defl  Heap_Ptr
1352+ E24D             >
1352+ E24D             >                // dummy db directives used to calculate length of namec
1352+ E24D 45 58 49 54 >                db      "EXIT"
1352+ E251             >len_NFA         defl    $ - temp_NFA
1352+ E251             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1352+ E24D             >
1352+ E24D 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1352+ E24E 45 58 49 54 >                db      "EXIT"               // name string in 7-bit ascii, but
1352+ E252             >                org     $-1                 // alter last byte of Name just above to set
1352+ E251 D4          >                db      {b $} | END_BIT     // msb as name end
1352+ E252             >
1352+ E252 45 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1352+ E254             >Prev_Ptr        defl    Heap_Ptr
1352+ E254             >
1352+ E254             >mirror_Ptr      defl    $
1352+ E254             >
1352+ E254 02 25       >                dw      Dict_Ptr + 2        // xt
1352+ E256             >Heap_Ptr        defl    $ - $E000           // save current HP
1352+ E256             >
1352+ E256             >Current_HP      defl  $ - $E000             // used to set HP once!
1352+ E256             >
1352+ E256             >//              ______________________________________________________________________
1352+ E256             >//              Dictionary part
1352+ E256             >
1352+ E256             >                org     Dict_Ptr
1352+ 2500             >
1352+ 2500 54 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1352+ 2502             >
1352+ 2502             >EXIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1352+ 2502 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1352+ 2502 ~           >
1352+ 2502 ~           >
1352+ 2502             >                endif           ; ok        // for other definitions it "points" the correct handler
1352+ 2502             >                // Use of "; ok" to suppress "warning[fwdref]"
1352+ 2502             >
1352+ 2502             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1353+ 2502 EB                           ex      de, hl
1354+ 2503                              // *** ldhlrp                      // Get Return Stack Pointer
1355+ 2503 4E                           ld      c, (hl)             // pop Instruction Pointer
1356+ 2504 23                           inc     hl                  // from Return Stack
1357+ 2505 46                           ld      b, (hl)
1358+ 2506 23                           inc     hl
1359+ 2507                              // *** ldrphl                      // Set Return Stack Pointer
1360+ 2507 EB                           ex      de, hl
1361+ 2508                              next
1361+ 2508 DD E9       >                jp      (ix)
1362+ 250A
1363+ 250A              //  ______________________________________________________________________
1364+ 250A              //
1365+ 250A              // lastl      --
1366+ 250A              // exits back to the caller word
1367+ 250A              //              New_Def EXIT, "LASTL", is_code, is_normal
1368+ 250A              //              push    de
1369+ 250A              //              ex      de, hl //**
1370+ 250A              //              // *** ldhlrp                      // Get Return Stack Pointer
1371+ 250A              //              ld      e, (hl)             // pop Instruction Pointer
1372+ 250A              //              inc     hl                  // from Return Stack
1373+ 250A              //              ld      d, (hl)
1374+ 250A              //              inc     hl
1375+ 250A              //              ld      (hl), e
1376+ 250A              //              inc     hl
1377+ 250A              //              ld      (hl), d
1378+ 250A              //              add     hl, -3
1379+ 250A              //              pop     de
1380+ 250A              //              next
1381+ 250A
1382+ 250A              //  ______________________________________________________________________
1383+ 250A              //
1384+ 250A              // >r      n --
1385+ 250A              // pop from calculator-stack and push into return-stack
1386+ 250A                              New_Def TO_R, ">R", is_code, is_normal
1386+ 250A             >
1386+ 250A             >Dict_Ptr        defl    $
1386+ 250A             >
1386+ 250A             >//              ______________________________________________________________________
1386+ 250A             >//              Heap part
1386+ 250A             >
1386+ 250A             >
1386+ 250A             >                org     (Heap_Ptr & $1FFF) + $E000
1386+ E256             >
1386+ E256             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1386+ E256             >Latest_Definition defl  Heap_Ptr
1386+ E256             >
1386+ E256             >                // dummy db directives used to calculate length of namec
1386+ E256 3E 52       >                db      ">R"
1386+ E258             >len_NFA         defl    $ - temp_NFA
1386+ E258             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1386+ E256             >
1386+ E256 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1386+ E257 3E 52       >                db      ">R"               // name string in 7-bit ascii, but
1386+ E259             >                org     $-1                 // alter last byte of Name just above to set
1386+ E258 D2          >                db      {b $} | END_BIT     // msb as name end
1386+ E259             >
1386+ E259 4D 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1386+ E25B             >Prev_Ptr        defl    Heap_Ptr
1386+ E25B             >
1386+ E25B             >mirror_Ptr      defl    $
1386+ E25B             >
1386+ E25B 0C 25       >                dw      Dict_Ptr + 2        // xt
1386+ E25D             >Heap_Ptr        defl    $ - $E000           // save current HP
1386+ E25D             >
1386+ E25D             >Current_HP      defl  $ - $E000             // used to set HP once!
1386+ E25D             >
1386+ E25D             >//              ______________________________________________________________________
1386+ E25D             >//              Dictionary part
1386+ E25D             >
1386+ E25D             >                org     Dict_Ptr
1386+ 250A             >
1386+ 250A 5B 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1386+ 250C             >
1386+ 250C             >TO_R:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1386+ 250C ~           >                call    runcode ; ok        // for primitive definitions  actual code
1386+ 250C ~           >
1386+ 250C ~           >
1386+ 250C             >                endif           ; ok        // for other definitions it "points" the correct handler
1386+ 250C             >                // Use of "; ok" to suppress "warning[fwdref]"
1386+ 250C             >
1386+ 250C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1387+ 250C E1                           pop     hl
1388+ 250D EB                           ex      de, hl //**
1389+ 250E                              // *** ldhlrp
1390+ 250E 2B                           dec     hl
1391+ 250F 72                           ld      (hl), d             // store current TOS
1392+ 2510 2B                           dec     hl                  // to Return Stack
1393+ 2511 73                           ld      (hl), e
1394+ 2512                              // *** ldrphl
1395+ 2512 EB                           ex      de, hl //**
1396+ 2513                              next
1396+ 2513 DD E9       >                jp      (ix)
1397+ 2515
1398+ 2515              //  ______________________________________________________________________
1399+ 2515              //
1400+ 2515              // r>      -- n
1401+ 2515              // pop from return-stack and push into calculator-stack
1402+ 2515                              New_Def R_TO, "R>", is_code, is_normal
1402+ 2515             >
1402+ 2515             >Dict_Ptr        defl    $
1402+ 2515             >
1402+ 2515             >//              ______________________________________________________________________
1402+ 2515             >//              Heap part
1402+ 2515             >
1402+ 2515             >
1402+ 2515             >                org     (Heap_Ptr & $1FFF) + $E000
1402+ E25D             >
1402+ E25D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1402+ E25D             >Latest_Definition defl  Heap_Ptr
1402+ E25D             >
1402+ E25D             >                // dummy db directives used to calculate length of namec
1402+ E25D 52 3E       >                db      "R>"
1402+ E25F             >len_NFA         defl    $ - temp_NFA
1402+ E25F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1402+ E25D             >
1402+ E25D 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1402+ E25E 52 3E       >                db      "R>"               // name string in 7-bit ascii, but
1402+ E260             >                org     $-1                 // alter last byte of Name just above to set
1402+ E25F BE          >                db      {b $} | END_BIT     // msb as name end
1402+ E260             >
1402+ E260 56 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1402+ E262             >Prev_Ptr        defl    Heap_Ptr
1402+ E262             >
1402+ E262             >mirror_Ptr      defl    $
1402+ E262             >
1402+ E262 17 25       >                dw      Dict_Ptr + 2        // xt
1402+ E264             >Heap_Ptr        defl    $ - $E000           // save current HP
1402+ E264             >
1402+ E264             >Current_HP      defl  $ - $E000             // used to set HP once!
1402+ E264             >
1402+ E264             >//              ______________________________________________________________________
1402+ E264             >//              Dictionary part
1402+ E264             >
1402+ E264             >                org     Dict_Ptr
1402+ 2515             >
1402+ 2515 62 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1402+ 2517             >
1402+ 2517             >R_TO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1402+ 2517 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1402+ 2517 ~           >
1402+ 2517 ~           >
1402+ 2517             >                endif           ; ok        // for other definitions it "points" the correct handler
1402+ 2517             >                // Use of "; ok" to suppress "warning[fwdref]"
1402+ 2517             >
1402+ 2517             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1403+ 2517
1404+ 2517 EB                           ex      de, hl //**
1405+ 2518                              // *** ldhlrp
1406+ 2518 5E                           ld      e, (hl)             // retrieve from Return Stack
1407+ 2519 23                           inc     hl
1408+ 251A 56                           ld      d, (hl)
1409+ 251B 23                           inc     hl
1410+ 251C                              // *** ldrphl
1411+ 251C EB                           ex      de, hl //**
1412+ 251D E5                           push    hl
1413+ 251E                              next
1413+ 251E DD E9       >                jp      (ix)
1414+ 2520
1415+ 2520              //  ______________________________________________________________________
1416+ 2520              //
1417+ 2520              // r@           -- n
1418+ 2520              // return on top of stack the value of top of return-stack
1419+ 2520              // Since this is the same as I, we alter R's CFA to jump there
1420+ 2520                              New_Def R_OP, "R@", is_code, is_normal
1420+ 2520             >
1420+ 2520             >Dict_Ptr        defl    $
1420+ 2520             >
1420+ 2520             >//              ______________________________________________________________________
1420+ 2520             >//              Heap part
1420+ 2520             >
1420+ 2520             >
1420+ 2520             >                org     (Heap_Ptr & $1FFF) + $E000
1420+ E264             >
1420+ E264             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1420+ E264             >Latest_Definition defl  Heap_Ptr
1420+ E264             >
1420+ E264             >                // dummy db directives used to calculate length of namec
1420+ E264 52 40       >                db      "R@"
1420+ E266             >len_NFA         defl    $ - temp_NFA
1420+ E266             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1420+ E264             >
1420+ E264 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1420+ E265 52 40       >                db      "R@"               // name string in 7-bit ascii, but
1420+ E267             >                org     $-1                 // alter last byte of Name just above to set
1420+ E266 C0          >                db      {b $} | END_BIT     // msb as name end
1420+ E267             >
1420+ E267 5D 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1420+ E269             >Prev_Ptr        defl    Heap_Ptr
1420+ E269             >
1420+ E269             >mirror_Ptr      defl    $
1420+ E269             >
1420+ E269 22 25       >                dw      Dict_Ptr + 2        // xt
1420+ E26B             >Heap_Ptr        defl    $ - $E000           // save current HP
1420+ E26B             >
1420+ E26B             >Current_HP      defl  $ - $E000             // used to set HP once!
1420+ E26B             >
1420+ E26B             >//              ______________________________________________________________________
1420+ E26B             >//              Dictionary part
1420+ E26B             >
1420+ E26B             >                org     Dict_Ptr
1420+ 2520             >
1420+ 2520 69 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1420+ 2522             >
1420+ 2522             >R_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1420+ 2522 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1420+ 2522 ~           >
1420+ 2522 ~           >
1420+ 2522             >                endif           ; ok        // for other definitions it "points" the correct handler
1420+ 2522             >                // Use of "; ok" to suppress "warning[fwdref]"
1420+ 2522             >
1420+ 2522             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1421+ 2522                          //  Behave  I_Ptr
1422+ 2522 C3 D4 20                     jp      I_Ptr
1423+ 2525
1424+ 2525              //  ______________________________________________________________________
1425+ 2525              //
1426+ 2525              // r            -- n
1427+ 2525              // return on top of stack the value of top of return-stack
1428+ 2525              // Since this is the same as I, we alter R's CFA to jump there
1429+ 2525              //              New_Def R_OLD, "R", is_code, is_normal
1430+ 2525              //              jp      I_Ptr
1431+ 2525
1432+ 2525              //  ______________________________________________________________________
1433+ 2525              //
1434+ 2525              // 0=           n -- f
1435+ 2525              // true (non zero) if n is zero, false (0) elsewere
1436+ 2525                              New_Def ZEQUAL, "0=", is_code, is_normal
1436+ 2525             >
1436+ 2525             >Dict_Ptr        defl    $
1436+ 2525             >
1436+ 2525             >//              ______________________________________________________________________
1436+ 2525             >//              Heap part
1436+ 2525             >
1436+ 2525             >
1436+ 2525             >                org     (Heap_Ptr & $1FFF) + $E000
1436+ E26B             >
1436+ E26B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1436+ E26B             >Latest_Definition defl  Heap_Ptr
1436+ E26B             >
1436+ E26B             >                // dummy db directives used to calculate length of namec
1436+ E26B 30 3D       >                db      "0="
1436+ E26D             >len_NFA         defl    $ - temp_NFA
1436+ E26D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1436+ E26B             >
1436+ E26B 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1436+ E26C 30 3D       >                db      "0="               // name string in 7-bit ascii, but
1436+ E26E             >                org     $-1                 // alter last byte of Name just above to set
1436+ E26D BD          >                db      {b $} | END_BIT     // msb as name end
1436+ E26E             >
1436+ E26E 64 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1436+ E270             >Prev_Ptr        defl    Heap_Ptr
1436+ E270             >
1436+ E270             >mirror_Ptr      defl    $
1436+ E270             >
1436+ E270 27 25       >                dw      Dict_Ptr + 2        // xt
1436+ E272             >Heap_Ptr        defl    $ - $E000           // save current HP
1436+ E272             >
1436+ E272             >Current_HP      defl  $ - $E000             // used to set HP once!
1436+ E272             >
1436+ E272             >//              ______________________________________________________________________
1436+ E272             >//              Dictionary part
1436+ E272             >
1436+ E272             >                org     Dict_Ptr
1436+ 2525             >
1436+ 2525 70 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1436+ 2527             >
1436+ 2527             >ZEQUAL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1436+ 2527 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1436+ 2527 ~           >
1436+ 2527 ~           >
1436+ 2527             >                endif           ; ok        // for other definitions it "points" the correct handler
1436+ 2527             >                // Use of "; ok" to suppress "warning[fwdref]"
1436+ 2527             >
1436+ 2527             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1437+ 2527              Zero_Equal:
1438+ 2527 E1                           pop     hl
1439+ 2528 7D                           ld      a, l
1440+ 2529 B4                           or      h
1441+ 252A 21 00 00                     ld      hl, FALSE_FLAG
1442+ 252D 20 01                        jr      nz, ZEqual_Skip
1443+ 252F 2B                               dec     hl
1444+ 2530              ZEqual_Skip:
1445+ 2530                              psh1
1445+ 2530 E5          >                push    hl
1445+ 2531 DD E9       >                jp      (ix)
1446+ 2533
1447+ 2533              //  ______________________________________________________________________
1448+ 2533              //
1449+ 2533              // not         a1 -- a2
1450+ 2533              // increment by 2 top of stack
1451+ 2533                              New_Def NOT_OP, "NOT", is_code, is_normal
1451+ 2533             >
1451+ 2533             >Dict_Ptr        defl    $
1451+ 2533             >
1451+ 2533             >//              ______________________________________________________________________
1451+ 2533             >//              Heap part
1451+ 2533             >
1451+ 2533             >
1451+ 2533             >                org     (Heap_Ptr & $1FFF) + $E000
1451+ E272             >
1451+ E272             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1451+ E272             >Latest_Definition defl  Heap_Ptr
1451+ E272             >
1451+ E272             >                // dummy db directives used to calculate length of namec
1451+ E272 4E 4F 54    >                db      "NOT"
1451+ E275             >len_NFA         defl    $ - temp_NFA
1451+ E275             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1451+ E272             >
1451+ E272 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1451+ E273 4E 4F 54    >                db      "NOT"               // name string in 7-bit ascii, but
1451+ E276             >                org     $-1                 // alter last byte of Name just above to set
1451+ E275 D4          >                db      {b $} | END_BIT     // msb as name end
1451+ E276             >
1451+ E276 6B 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1451+ E278             >Prev_Ptr        defl    Heap_Ptr
1451+ E278             >
1451+ E278             >mirror_Ptr      defl    $
1451+ E278             >
1451+ E278 35 25       >                dw      Dict_Ptr + 2        // xt
1451+ E27A             >Heap_Ptr        defl    $ - $E000           // save current HP
1451+ E27A             >
1451+ E27A             >Current_HP      defl  $ - $E000             // used to set HP once!
1451+ E27A             >
1451+ E27A             >//              ______________________________________________________________________
1451+ E27A             >//              Dictionary part
1451+ E27A             >
1451+ E27A             >                org     Dict_Ptr
1451+ 2533             >
1451+ 2533 78 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1451+ 2535             >
1451+ 2535             >NOT_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1451+ 2535 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1451+ 2535 ~           >
1451+ 2535 ~           >
1451+ 2535             >                endif           ; ok        // for other definitions it "points" the correct handler
1451+ 2535             >                // Use of "; ok" to suppress "warning[fwdref]"
1451+ 2535             >
1451+ 2535             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1452+ 2535                          //  Behave  Zero_Equal
1453+ 2535 C3 27 25                     jp      Zero_Equal
1454+ 2538
1455+ 2538              //  ______________________________________________________________________
1456+ 2538              //
1457+ 2538              // 0<           n -- f
1458+ 2538              // true (non zero) if n is less than zero, false (0) elsewere
1459+ 2538                              New_Def ZLESS, "0<", is_code, is_normal
1459+ 2538             >
1459+ 2538             >Dict_Ptr        defl    $
1459+ 2538             >
1459+ 2538             >//              ______________________________________________________________________
1459+ 2538             >//              Heap part
1459+ 2538             >
1459+ 2538             >
1459+ 2538             >                org     (Heap_Ptr & $1FFF) + $E000
1459+ E27A             >
1459+ E27A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1459+ E27A             >Latest_Definition defl  Heap_Ptr
1459+ E27A             >
1459+ E27A             >                // dummy db directives used to calculate length of namec
1459+ E27A 30 3C       >                db      "0<"
1459+ E27C             >len_NFA         defl    $ - temp_NFA
1459+ E27C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1459+ E27A             >
1459+ E27A 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1459+ E27B 30 3C       >                db      "0<"               // name string in 7-bit ascii, but
1459+ E27D             >                org     $-1                 // alter last byte of Name just above to set
1459+ E27C BC          >                db      {b $} | END_BIT     // msb as name end
1459+ E27D             >
1459+ E27D 72 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1459+ E27F             >Prev_Ptr        defl    Heap_Ptr
1459+ E27F             >
1459+ E27F             >mirror_Ptr      defl    $
1459+ E27F             >
1459+ E27F 3A 25       >                dw      Dict_Ptr + 2        // xt
1459+ E281             >Heap_Ptr        defl    $ - $E000           // save current HP
1459+ E281             >
1459+ E281             >Current_HP      defl  $ - $E000             // used to set HP once!
1459+ E281             >
1459+ E281             >//              ______________________________________________________________________
1459+ E281             >//              Dictionary part
1459+ E281             >
1459+ E281             >                org     Dict_Ptr
1459+ 2538             >
1459+ 2538 7F 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1459+ 253A             >
1459+ 253A             >ZLESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1459+ 253A ~           >                call    runcode ; ok        // for primitive definitions  actual code
1459+ 253A ~           >
1459+ 253A ~           >
1459+ 253A             >                endif           ; ok        // for other definitions it "points" the correct handler
1459+ 253A             >                // Use of "; ok" to suppress "warning[fwdref]"
1459+ 253A             >
1459+ 253A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1460+ 253A E1                           pop     hl
1461+ 253B 29                           add     hl, hl
1462+ 253C ED 62                        sbc     hl, hl
1463+ 253E                              psh1
1463+ 253E E5          >                push    hl
1463+ 253F DD E9       >                jp      (ix)
1464+ 2541
1465+ 2541              //  ______________________________________________________________________
1466+ 2541              //
1467+ 2541              // 0>           n -- f
1468+ 2541              // true (non zero) if n is less than zero, false (0) elsewere
1469+ 2541                              New_Def ZGREATER, "0>", is_code, is_normal
1469+ 2541             >
1469+ 2541             >Dict_Ptr        defl    $
1469+ 2541             >
1469+ 2541             >//              ______________________________________________________________________
1469+ 2541             >//              Heap part
1469+ 2541             >
1469+ 2541             >
1469+ 2541             >                org     (Heap_Ptr & $1FFF) + $E000
1469+ E281             >
1469+ E281             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1469+ E281             >Latest_Definition defl  Heap_Ptr
1469+ E281             >
1469+ E281             >                // dummy db directives used to calculate length of namec
1469+ E281 30 3E       >                db      "0>"
1469+ E283             >len_NFA         defl    $ - temp_NFA
1469+ E283             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1469+ E281             >
1469+ E281 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1469+ E282 30 3E       >                db      "0>"               // name string in 7-bit ascii, but
1469+ E284             >                org     $-1                 // alter last byte of Name just above to set
1469+ E283 BE          >                db      {b $} | END_BIT     // msb as name end
1469+ E284             >
1469+ E284 7A 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1469+ E286             >Prev_Ptr        defl    Heap_Ptr
1469+ E286             >
1469+ E286             >mirror_Ptr      defl    $
1469+ E286             >
1469+ E286 43 25       >                dw      Dict_Ptr + 2        // xt
1469+ E288             >Heap_Ptr        defl    $ - $E000           // save current HP
1469+ E288             >
1469+ E288             >Current_HP      defl  $ - $E000             // used to set HP once!
1469+ E288             >
1469+ E288             >//              ______________________________________________________________________
1469+ E288             >//              Dictionary part
1469+ E288             >
1469+ E288             >                org     Dict_Ptr
1469+ 2541             >
1469+ 2541 86 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1469+ 2543             >
1469+ 2543             >ZGREATER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1469+ 2543 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1469+ 2543 ~           >
1469+ 2543 ~           >
1469+ 2543             >                endif           ; ok        // for other definitions it "points" the correct handler
1469+ 2543             >                // Use of "; ok" to suppress "warning[fwdref]"
1469+ 2543             >
1469+ 2543             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1470+ 2543 E1                           pop     hl
1471+ 2544 7D                           ld      a, l
1472+ 2545 B4                           or      h
1473+ 2546 29                           add     hl, hl
1474+ 2547 21 00 00                     ld      hl, FALSE_FLAG
1475+ 254A 38 04                        jr      c, ZGreater_Skip
1476+ 254C A7                               and     a
1477+ 254D 28 01                            jr      z, ZGreater_Skip
1478+ 254F 2B                                   dec     hl
1479+ 2550              ZGreater_Skip:
1480+ 2550                              psh1
1480+ 2550 E5          >                push    hl
1480+ 2551 DD E9       >                jp      (ix)
1481+ 2553
1482+ 2553              //  ______________________________________________________________________
1483+ 2553              //
1484+ 2553              // +            n1 n2 -- n3
1485+ 2553              // returns the unsigned sum of two top values
1486+ 2553                              New_Def PLUS, "+", is_code, is_normal
1486+ 2553             >
1486+ 2553             >Dict_Ptr        defl    $
1486+ 2553             >
1486+ 2553             >//              ______________________________________________________________________
1486+ 2553             >//              Heap part
1486+ 2553             >
1486+ 2553             >
1486+ 2553             >                org     (Heap_Ptr & $1FFF) + $E000
1486+ E288             >
1486+ E288             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1486+ E288             >Latest_Definition defl  Heap_Ptr
1486+ E288             >
1486+ E288             >                // dummy db directives used to calculate length of namec
1486+ E288 2B          >                db      "+"
1486+ E289             >len_NFA         defl    $ - temp_NFA
1486+ E289             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1486+ E288             >
1486+ E288 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1486+ E289 2B          >                db      "+"               // name string in 7-bit ascii, but
1486+ E28A             >                org     $-1                 // alter last byte of Name just above to set
1486+ E289 AB          >                db      {b $} | END_BIT     // msb as name end
1486+ E28A             >
1486+ E28A 81 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1486+ E28C             >Prev_Ptr        defl    Heap_Ptr
1486+ E28C             >
1486+ E28C             >mirror_Ptr      defl    $
1486+ E28C             >
1486+ E28C 55 25       >                dw      Dict_Ptr + 2        // xt
1486+ E28E             >Heap_Ptr        defl    $ - $E000           // save current HP
1486+ E28E             >
1486+ E28E             >Current_HP      defl  $ - $E000             // used to set HP once!
1486+ E28E             >
1486+ E28E             >//              ______________________________________________________________________
1486+ E28E             >//              Dictionary part
1486+ E28E             >
1486+ E28E             >                org     Dict_Ptr
1486+ 2553             >
1486+ 2553 8C 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1486+ 2555             >
1486+ 2555             >PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1486+ 2555 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1486+ 2555 ~           >
1486+ 2555 ~           >
1486+ 2555             >                endif           ; ok        // for other definitions it "points" the correct handler
1486+ 2555             >                // Use of "; ok" to suppress "warning[fwdref]"
1486+ 2555             >
1486+ 2555             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1487+ 2555 D9                           exx
1488+ 2556 E1                           pop     hl
1489+ 2557 D1                           pop     de
1490+ 2558 19                           add     hl, de
1491+ 2559 E5                           push    hl
1492+ 255A D9                           exx
1493+ 255B                              next
1493+ 255B DD E9       >                jp      (ix)
1494+ 255D
1495+ 255D
1496+ 255D              //  ______________________________________________________________________
1497+ 255D              //
1498+ 255D              // d+           d1 d2 -- d3
1499+ 255D              // returns the unsigned sum of two top double-numbers
1500+ 255D              //      d2  d1
1501+ 255D              //      h l h l
1502+ 255D              // SP   LHEDLHED
1503+ 255D              // SP  +01234567
1504+ 255D                              New_Def DPLUS, "D+", is_code, is_normal
1504+ 255D             >
1504+ 255D             >Dict_Ptr        defl    $
1504+ 255D             >
1504+ 255D             >//              ______________________________________________________________________
1504+ 255D             >//              Heap part
1504+ 255D             >
1504+ 255D             >
1504+ 255D             >                org     (Heap_Ptr & $1FFF) + $E000
1504+ E28E             >
1504+ E28E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1504+ E28E             >Latest_Definition defl  Heap_Ptr
1504+ E28E             >
1504+ E28E             >                // dummy db directives used to calculate length of namec
1504+ E28E 44 2B       >                db      "D+"
1504+ E290             >len_NFA         defl    $ - temp_NFA
1504+ E290             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1504+ E28E             >
1504+ E28E 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1504+ E28F 44 2B       >                db      "D+"               // name string in 7-bit ascii, but
1504+ E291             >                org     $-1                 // alter last byte of Name just above to set
1504+ E290 AB          >                db      {b $} | END_BIT     // msb as name end
1504+ E291             >
1504+ E291 88 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1504+ E293             >Prev_Ptr        defl    Heap_Ptr
1504+ E293             >
1504+ E293             >mirror_Ptr      defl    $
1504+ E293             >
1504+ E293 5F 25       >                dw      Dict_Ptr + 2        // xt
1504+ E295             >Heap_Ptr        defl    $ - $E000           // save current HP
1504+ E295             >
1504+ E295             >Current_HP      defl  $ - $E000             // used to set HP once!
1504+ E295             >
1504+ E295             >//              ______________________________________________________________________
1504+ E295             >//              Dictionary part
1504+ E295             >
1504+ E295             >                org     Dict_Ptr
1504+ 255D             >
1504+ 255D 93 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1504+ 255F             >
1504+ 255F             >DPLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1504+ 255F ~           >                call    runcode ; ok        // for primitive definitions  actual code
1504+ 255F ~           >
1504+ 255F ~           >
1504+ 255F             >                endif           ; ok        // for other definitions it "points" the correct handler
1504+ 255F             >                // Use of "; ok" to suppress "warning[fwdref]"
1504+ 255F             >
1504+ 255F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1505+ 255F
1506+ 255F D9                           exx
1507+ 2560 C1                           pop     bc                  // bc := d2.H
1508+ 2561 D1                           pop     de                  // hl := d2.L
1509+ 2562 E1                           pop     hl                  // d1.H
1510+ 2563 E3                           ex      (sp), hl            // d1.L
1511+ 2564 19                           add     hl, de              // hl := d2.L + d1.L
1512+ 2565 E3                           ex      (sp), hl            // d1.H
1513+ 2566 ED 4A                        adc     hl, bc              // d1.H + d2.H
1514+ 2568 E5                           push    hl
1515+ 2569 D9                           exx
1516+ 256A                              next
1516+ 256A DD E9       >                jp      (ix)
1517+ 256C
1518+ 256C              //  ______________________________________________________________________
1519+ 256C              //
1520+ 256C              // 1+           n1 -- n2
1521+ 256C              // increment by 1 top of stack
1522+ 256C                              New_Def ONE_PLUS, "1+", is_code, is_normal
1522+ 256C             >
1522+ 256C             >Dict_Ptr        defl    $
1522+ 256C             >
1522+ 256C             >//              ______________________________________________________________________
1522+ 256C             >//              Heap part
1522+ 256C             >
1522+ 256C             >
1522+ 256C             >                org     (Heap_Ptr & $1FFF) + $E000
1522+ E295             >
1522+ E295             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1522+ E295             >Latest_Definition defl  Heap_Ptr
1522+ E295             >
1522+ E295             >                // dummy db directives used to calculate length of namec
1522+ E295 31 2B       >                db      "1+"
1522+ E297             >len_NFA         defl    $ - temp_NFA
1522+ E297             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1522+ E295             >
1522+ E295 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1522+ E296 31 2B       >                db      "1+"               // name string in 7-bit ascii, but
1522+ E298             >                org     $-1                 // alter last byte of Name just above to set
1522+ E297 AB          >                db      {b $} | END_BIT     // msb as name end
1522+ E298             >
1522+ E298 8E 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1522+ E29A             >Prev_Ptr        defl    Heap_Ptr
1522+ E29A             >
1522+ E29A             >mirror_Ptr      defl    $
1522+ E29A             >
1522+ E29A 6E 25       >                dw      Dict_Ptr + 2        // xt
1522+ E29C             >Heap_Ptr        defl    $ - $E000           // save current HP
1522+ E29C             >
1522+ E29C             >Current_HP      defl  $ - $E000             // used to set HP once!
1522+ E29C             >
1522+ E29C             >//              ______________________________________________________________________
1522+ E29C             >//              Dictionary part
1522+ E29C             >
1522+ E29C             >                org     Dict_Ptr
1522+ 256C             >
1522+ 256C 9A 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1522+ 256E             >
1522+ 256E             >ONE_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1522+ 256E ~           >                call    runcode ; ok        // for primitive definitions  actual code
1522+ 256E ~           >
1522+ 256E ~           >
1522+ 256E             >                endif           ; ok        // for other definitions it "points" the correct handler
1522+ 256E             >                // Use of "; ok" to suppress "warning[fwdref]"
1522+ 256E             >
1522+ 256E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1523+ 256E E1                           pop     hl
1524+ 256F 23                           inc     hl
1525+ 2570
1526+ 2570                              psh1
1526+ 2570 E5          >                push    hl
1526+ 2571 DD E9       >                jp      (ix)
1527+ 2573
1528+ 2573              //  ______________________________________________________________________
1529+ 2573              //
1530+ 2573              // 1-           n1 -- n2
1531+ 2573              // decrement by 1 top of stack
1532+ 2573                              New_Def ONE_SUBTRACT, "1-", is_code, is_normal
1532+ 2573             >
1532+ 2573             >Dict_Ptr        defl    $
1532+ 2573             >
1532+ 2573             >//              ______________________________________________________________________
1532+ 2573             >//              Heap part
1532+ 2573             >
1532+ 2573             >
1532+ 2573             >                org     (Heap_Ptr & $1FFF) + $E000
1532+ E29C             >
1532+ E29C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1532+ E29C             >Latest_Definition defl  Heap_Ptr
1532+ E29C             >
1532+ E29C             >                // dummy db directives used to calculate length of namec
1532+ E29C 31 2D       >                db      "1-"
1532+ E29E             >len_NFA         defl    $ - temp_NFA
1532+ E29E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1532+ E29C             >
1532+ E29C 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1532+ E29D 31 2D       >                db      "1-"               // name string in 7-bit ascii, but
1532+ E29F             >                org     $-1                 // alter last byte of Name just above to set
1532+ E29E AD          >                db      {b $} | END_BIT     // msb as name end
1532+ E29F             >
1532+ E29F 95 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1532+ E2A1             >Prev_Ptr        defl    Heap_Ptr
1532+ E2A1             >
1532+ E2A1             >mirror_Ptr      defl    $
1532+ E2A1             >
1532+ E2A1 75 25       >                dw      Dict_Ptr + 2        // xt
1532+ E2A3             >Heap_Ptr        defl    $ - $E000           // save current HP
1532+ E2A3             >
1532+ E2A3             >Current_HP      defl  $ - $E000             // used to set HP once!
1532+ E2A3             >
1532+ E2A3             >//              ______________________________________________________________________
1532+ E2A3             >//              Dictionary part
1532+ E2A3             >
1532+ E2A3             >                org     Dict_Ptr
1532+ 2573             >
1532+ 2573 A1 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1532+ 2575             >
1532+ 2575             >ONE_SUBTRACT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1532+ 2575 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1532+ 2575 ~           >
1532+ 2575 ~           >
1532+ 2575             >                endif           ; ok        // for other definitions it "points" the correct handler
1532+ 2575             >                // Use of "; ok" to suppress "warning[fwdref]"
1532+ 2575             >
1532+ 2575             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1533+ 2575 E1                           pop     hl
1534+ 2576 2B                           dec     hl
1535+ 2577
1536+ 2577                              psh1
1536+ 2577 E5          >                push    hl
1536+ 2578 DD E9       >                jp      (ix)
1537+ 257A
1538+ 257A              //  ______________________________________________________________________
1539+ 257A              //
1540+ 257A              // 2+           n1 -- n2
1541+ 257A              // increment by 2 top of stack
1542+ 257A                              New_Def TWO_PLUS, "2+", is_code, is_normal
1542+ 257A             >
1542+ 257A             >Dict_Ptr        defl    $
1542+ 257A             >
1542+ 257A             >//              ______________________________________________________________________
1542+ 257A             >//              Heap part
1542+ 257A             >
1542+ 257A             >
1542+ 257A             >                org     (Heap_Ptr & $1FFF) + $E000
1542+ E2A3             >
1542+ E2A3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1542+ E2A3             >Latest_Definition defl  Heap_Ptr
1542+ E2A3             >
1542+ E2A3             >                // dummy db directives used to calculate length of namec
1542+ E2A3 32 2B       >                db      "2+"
1542+ E2A5             >len_NFA         defl    $ - temp_NFA
1542+ E2A5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1542+ E2A3             >
1542+ E2A3 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1542+ E2A4 32 2B       >                db      "2+"               // name string in 7-bit ascii, but
1542+ E2A6             >                org     $-1                 // alter last byte of Name just above to set
1542+ E2A5 AB          >                db      {b $} | END_BIT     // msb as name end
1542+ E2A6             >
1542+ E2A6 9C 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1542+ E2A8             >Prev_Ptr        defl    Heap_Ptr
1542+ E2A8             >
1542+ E2A8             >mirror_Ptr      defl    $
1542+ E2A8             >
1542+ E2A8 7C 25       >                dw      Dict_Ptr + 2        // xt
1542+ E2AA             >Heap_Ptr        defl    $ - $E000           // save current HP
1542+ E2AA             >
1542+ E2AA             >Current_HP      defl  $ - $E000             // used to set HP once!
1542+ E2AA             >
1542+ E2AA             >//              ______________________________________________________________________
1542+ E2AA             >//              Dictionary part
1542+ E2AA             >
1542+ E2AA             >                org     Dict_Ptr
1542+ 257A             >
1542+ 257A A8 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1542+ 257C             >
1542+ 257C             >TWO_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1542+ 257C ~           >                call    runcode ; ok        // for primitive definitions  actual code
1542+ 257C ~           >
1542+ 257C ~           >
1542+ 257C             >                endif           ; ok        // for other definitions it "points" the correct handler
1542+ 257C             >                // Use of "; ok" to suppress "warning[fwdref]"
1542+ 257C             >
1542+ 257C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1543+ 257C              Two_Plus:
1544+ 257C E1                           pop     hl
1545+ 257D 23                           inc     hl
1546+ 257E 23                           inc     hl
1547+ 257F
1548+ 257F                              psh1
1548+ 257F E5          >                push    hl
1548+ 2580 DD E9       >                jp      (ix)
1549+ 2582
1550+ 2582              //  ______________________________________________________________________
1551+ 2582              //
1552+ 2582              // cell+        a1 -- a2
1553+ 2582              // increment by 2 top of stack
1554+ 2582                              New_Def CELL_PLUS, "CELL+", is_code, is_normal
1554+ 2582             >
1554+ 2582             >Dict_Ptr        defl    $
1554+ 2582             >
1554+ 2582             >//              ______________________________________________________________________
1554+ 2582             >//              Heap part
1554+ 2582             >
1554+ 2582             >
1554+ 2582             >                org     (Heap_Ptr & $1FFF) + $E000
1554+ E2AA             >
1554+ E2AA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1554+ E2AA             >Latest_Definition defl  Heap_Ptr
1554+ E2AA             >
1554+ E2AA             >                // dummy db directives used to calculate length of namec
1554+ E2AA 43 45 4C 4C >                db      "CELL+"
1554+ E2AE 2B          >
1554+ E2AF             >len_NFA         defl    $ - temp_NFA
1554+ E2AF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1554+ E2AA             >
1554+ E2AA 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1554+ E2AB 43 45 4C 4C >                db      "CELL+"               // name string in 7-bit ascii, but
1554+ E2AF 2B          >
1554+ E2B0             >                org     $-1                 // alter last byte of Name just above to set
1554+ E2AF AB          >                db      {b $} | END_BIT     // msb as name end
1554+ E2B0             >
1554+ E2B0 A3 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1554+ E2B2             >Prev_Ptr        defl    Heap_Ptr
1554+ E2B2             >
1554+ E2B2             >mirror_Ptr      defl    $
1554+ E2B2             >
1554+ E2B2 84 25       >                dw      Dict_Ptr + 2        // xt
1554+ E2B4             >Heap_Ptr        defl    $ - $E000           // save current HP
1554+ E2B4             >
1554+ E2B4             >Current_HP      defl  $ - $E000             // used to set HP once!
1554+ E2B4             >
1554+ E2B4             >//              ______________________________________________________________________
1554+ E2B4             >//              Dictionary part
1554+ E2B4             >
1554+ E2B4             >                org     Dict_Ptr
1554+ 2582             >
1554+ 2582 B2 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1554+ 2584             >
1554+ 2584             >CELL_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1554+ 2584 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1554+ 2584 ~           >
1554+ 2584 ~           >
1554+ 2584             >                endif           ; ok        // for other definitions it "points" the correct handler
1554+ 2584             >                // Use of "; ok" to suppress "warning[fwdref]"
1554+ 2584             >
1554+ 2584             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1555+ 2584 C3 7C 25                     jp      Two_Plus
1556+ 2587
1557+ 2587              //  ______________________________________________________________________
1558+ 2587              //
1559+ 2587              // align        a1 -- a2
1560+ 2587              // align memory : not used
1561+ 2587              //              New_Def ALIGN_ADDR, "ALIGN", is_code, is_normal
1562+ 2587              //            next
1563+ 2587
1564+ 2587              //  ______________________________________________________________________
1565+ 2587              //
1566+ 2587              // cell-        a1 -- a2
1567+ 2587              // decrement by 2 top of stack
1568+ 2587                              New_Def CELL_MINUS, "CELL-", is_code, is_normal
1568+ 2587             >
1568+ 2587             >Dict_Ptr        defl    $
1568+ 2587             >
1568+ 2587             >//              ______________________________________________________________________
1568+ 2587             >//              Heap part
1568+ 2587             >
1568+ 2587             >
1568+ 2587             >                org     (Heap_Ptr & $1FFF) + $E000
1568+ E2B4             >
1568+ E2B4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1568+ E2B4             >Latest_Definition defl  Heap_Ptr
1568+ E2B4             >
1568+ E2B4             >                // dummy db directives used to calculate length of namec
1568+ E2B4 43 45 4C 4C >                db      "CELL-"
1568+ E2B8 2D          >
1568+ E2B9             >len_NFA         defl    $ - temp_NFA
1568+ E2B9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1568+ E2B4             >
1568+ E2B4 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1568+ E2B5 43 45 4C 4C >                db      "CELL-"               // name string in 7-bit ascii, but
1568+ E2B9 2D          >
1568+ E2BA             >                org     $-1                 // alter last byte of Name just above to set
1568+ E2B9 AD          >                db      {b $} | END_BIT     // msb as name end
1568+ E2BA             >
1568+ E2BA AA 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1568+ E2BC             >Prev_Ptr        defl    Heap_Ptr
1568+ E2BC             >
1568+ E2BC             >mirror_Ptr      defl    $
1568+ E2BC             >
1568+ E2BC 89 25       >                dw      Dict_Ptr + 2        // xt
1568+ E2BE             >Heap_Ptr        defl    $ - $E000           // save current HP
1568+ E2BE             >
1568+ E2BE             >Current_HP      defl  $ - $E000             // used to set HP once!
1568+ E2BE             >
1568+ E2BE             >//              ______________________________________________________________________
1568+ E2BE             >//              Dictionary part
1568+ E2BE             >
1568+ E2BE             >                org     Dict_Ptr
1568+ 2587             >
1568+ 2587 BC 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1568+ 2589             >
1568+ 2589             >CELL_MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1568+ 2589 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1568+ 2589 ~           >
1568+ 2589 ~           >
1568+ 2589             >                endif           ; ok        // for other definitions it "points" the correct handler
1568+ 2589             >                // Use of "; ok" to suppress "warning[fwdref]"
1568+ 2589             >
1568+ 2589             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1569+ 2589              CellMinus:
1570+ 2589 E1                           pop     hl
1571+ 258A 2B                           dec     hl
1572+ 258B 2B                           dec     hl
1573+ 258C
1574+ 258C                              psh1
1574+ 258C E5          >                push    hl
1574+ 258D DD E9       >                jp      (ix)
1575+ 258F
1576+ 258F              //  ______________________________________________________________________
1577+ 258F              //
1578+ 258F              // 2-           a1 -- a2
1579+ 258F              // decrement by 2 top of stack
1580+ 258F                              New_Def TWO_MINUS, "2-", is_code, is_normal
1580+ 258F             >
1580+ 258F             >Dict_Ptr        defl    $
1580+ 258F             >
1580+ 258F             >//              ______________________________________________________________________
1580+ 258F             >//              Heap part
1580+ 258F             >
1580+ 258F             >
1580+ 258F             >                org     (Heap_Ptr & $1FFF) + $E000
1580+ E2BE             >
1580+ E2BE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1580+ E2BE             >Latest_Definition defl  Heap_Ptr
1580+ E2BE             >
1580+ E2BE             >                // dummy db directives used to calculate length of namec
1580+ E2BE 32 2D       >                db      "2-"
1580+ E2C0             >len_NFA         defl    $ - temp_NFA
1580+ E2C0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1580+ E2BE             >
1580+ E2BE 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1580+ E2BF 32 2D       >                db      "2-"               // name string in 7-bit ascii, but
1580+ E2C1             >                org     $-1                 // alter last byte of Name just above to set
1580+ E2C0 AD          >                db      {b $} | END_BIT     // msb as name end
1580+ E2C1             >
1580+ E2C1 B4 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1580+ E2C3             >Prev_Ptr        defl    Heap_Ptr
1580+ E2C3             >
1580+ E2C3             >mirror_Ptr      defl    $
1580+ E2C3             >
1580+ E2C3 91 25       >                dw      Dict_Ptr + 2        // xt
1580+ E2C5             >Heap_Ptr        defl    $ - $E000           // save current HP
1580+ E2C5             >
1580+ E2C5             >Current_HP      defl  $ - $E000             // used to set HP once!
1580+ E2C5             >
1580+ E2C5             >//              ______________________________________________________________________
1580+ E2C5             >//              Dictionary part
1580+ E2C5             >
1580+ E2C5             >                org     Dict_Ptr
1580+ 258F             >
1580+ 258F C3 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1580+ 2591             >
1580+ 2591             >TWO_MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1580+ 2591 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1580+ 2591 ~           >
1580+ 2591 ~           >
1580+ 2591             >                endif           ; ok        // for other definitions it "points" the correct handler
1580+ 2591             >                // Use of "; ok" to suppress "warning[fwdref]"
1580+ 2591             >
1580+ 2591             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1581+ 2591 C3 89 25                     jp      CellMinus
1582+ 2594
1583+ 2594              //  ______________________________________________________________________
1584+ 2594              //
1585+ 2594              // negate       n1 -- n2
1586+ 2594              // change the sign of number
1587+ 2594                              New_Def MINUS, "NEGATE", is_code, is_normal
1587+ 2594             >
1587+ 2594             >Dict_Ptr        defl    $
1587+ 2594             >
1587+ 2594             >//              ______________________________________________________________________
1587+ 2594             >//              Heap part
1587+ 2594             >
1587+ 2594             >
1587+ 2594             >                org     (Heap_Ptr & $1FFF) + $E000
1587+ E2C5             >
1587+ E2C5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1587+ E2C5             >Latest_Definition defl  Heap_Ptr
1587+ E2C5             >
1587+ E2C5             >                // dummy db directives used to calculate length of namec
1587+ E2C5 4E 45 47 41 >                db      "NEGATE"
1587+ E2C9 54 45       >
1587+ E2CB             >len_NFA         defl    $ - temp_NFA
1587+ E2CB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1587+ E2C5             >
1587+ E2C5 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1587+ E2C6 4E 45 47 41 >                db      "NEGATE"               // name string in 7-bit ascii, but
1587+ E2CA 54 45       >
1587+ E2CC             >                org     $-1                 // alter last byte of Name just above to set
1587+ E2CB C5          >                db      {b $} | END_BIT     // msb as name end
1587+ E2CC             >
1587+ E2CC BE 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1587+ E2CE             >Prev_Ptr        defl    Heap_Ptr
1587+ E2CE             >
1587+ E2CE             >mirror_Ptr      defl    $
1587+ E2CE             >
1587+ E2CE 96 25       >                dw      Dict_Ptr + 2        // xt
1587+ E2D0             >Heap_Ptr        defl    $ - $E000           // save current HP
1587+ E2D0             >
1587+ E2D0             >Current_HP      defl  $ - $E000             // used to set HP once!
1587+ E2D0             >
1587+ E2D0             >//              ______________________________________________________________________
1587+ E2D0             >//              Dictionary part
1587+ E2D0             >
1587+ E2D0             >                org     Dict_Ptr
1587+ 2594             >
1587+ 2594 CE 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1587+ 2596             >
1587+ 2596             >MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1587+ 2596 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1587+ 2596 ~           >
1587+ 2596 ~           >
1587+ 2596             >                endif           ; ok        // for other definitions it "points" the correct handler
1587+ 2596             >                // Use of "; ok" to suppress "warning[fwdref]"
1587+ 2596             >
1587+ 2596             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1588+ 2596 D9                           exx
1589+ 2597 21 00 00                     ld      hl, 0               // subtract from 0
1590+ 259A D1                           pop     de
1591+ 259B B7                           or      a
1592+ 259C ED 52                        sbc     hl, de
1593+ 259E E5                           push    hl
1594+ 259F D9                           exx
1595+ 25A0                              next
1595+ 25A0 DD E9       >                jp      (ix)
1596+ 25A2
1597+ 25A2              //  ______________________________________________________________________
1598+ 25A2              //
1599+ 25A2              // dnegate      d1 -- d2
1600+ 25A2              // change the sign of a double number
1601+ 25A2                              New_Def DMINUS, "DNEGATE", is_code, is_normal
1601+ 25A2             >
1601+ 25A2             >Dict_Ptr        defl    $
1601+ 25A2             >
1601+ 25A2             >//              ______________________________________________________________________
1601+ 25A2             >//              Heap part
1601+ 25A2             >
1601+ 25A2             >
1601+ 25A2             >                org     (Heap_Ptr & $1FFF) + $E000
1601+ E2D0             >
1601+ E2D0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1601+ E2D0             >Latest_Definition defl  Heap_Ptr
1601+ E2D0             >
1601+ E2D0             >                // dummy db directives used to calculate length of namec
1601+ E2D0 44 4E 45 47 >                db      "DNEGATE"
1601+ E2D4 41 54 45    >
1601+ E2D7             >len_NFA         defl    $ - temp_NFA
1601+ E2D7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1601+ E2D0             >
1601+ E2D0 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1601+ E2D1 44 4E 45 47 >                db      "DNEGATE"               // name string in 7-bit ascii, but
1601+ E2D5 41 54 45    >
1601+ E2D8             >                org     $-1                 // alter last byte of Name just above to set
1601+ E2D7 C5          >                db      {b $} | END_BIT     // msb as name end
1601+ E2D8             >
1601+ E2D8 C5 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1601+ E2DA             >Prev_Ptr        defl    Heap_Ptr
1601+ E2DA             >
1601+ E2DA             >mirror_Ptr      defl    $
1601+ E2DA             >
1601+ E2DA A4 25       >                dw      Dict_Ptr + 2        // xt
1601+ E2DC             >Heap_Ptr        defl    $ - $E000           // save current HP
1601+ E2DC             >
1601+ E2DC             >Current_HP      defl  $ - $E000             // used to set HP once!
1601+ E2DC             >
1601+ E2DC             >//              ______________________________________________________________________
1601+ E2DC             >//              Dictionary part
1601+ E2DC             >
1601+ E2DC             >                org     Dict_Ptr
1601+ 25A2             >
1601+ 25A2 DA 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1601+ 25A4             >
1601+ 25A4             >DMINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1601+ 25A4 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1601+ 25A4 ~           >
1601+ 25A4 ~           >
1601+ 25A4             >                endif           ; ok        // for other definitions it "points" the correct handler
1601+ 25A4             >                // Use of "; ok" to suppress "warning[fwdref]"
1601+ 25A4             >
1601+ 25A4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1602+ 25A4 D9                           exx
1603+ 25A5 C1                           pop     bc                  // d1.H
1604+ 25A6 D1                           pop     de                  // d1.L
1605+ 25A7 AF                           xor     a
1606+ 25A8 67                           ld      h, a
1607+ 25A9 6F                           ld      l, a
1608+ 25AA ED 52                        sbc     hl, de              // subtact from zero
1609+ 25AC E5                           push    hl                  // > d2-L
1610+ 25AD 67                           ld      h, a
1611+ 25AE 6F                           ld      l, a
1612+ 25AF ED 42                        sbc     hl, bc              // subtract from zero with carry
1613+ 25B1                                                          // > d2-H
1614+ 25B1 E5                           push    hl
1615+ 25B2 D9                           exx
1616+ 25B3                              next
1616+ 25B3 DD E9       >                jp      (ix)
1617+ 25B5
1618+ 25B5              //  ______________________________________________________________________
1619+ 25B5              //
1620+ 25B5              // over         n1 n2 -- n1 n2 n1
1621+ 25B5              // copy the second value of stack and put it on top.
1622+ 25B5                              New_Def OVER, "OVER", is_code, is_normal
1622+ 25B5             >
1622+ 25B5             >Dict_Ptr        defl    $
1622+ 25B5             >
1622+ 25B5             >//              ______________________________________________________________________
1622+ 25B5             >//              Heap part
1622+ 25B5             >
1622+ 25B5             >
1622+ 25B5             >                org     (Heap_Ptr & $1FFF) + $E000
1622+ E2DC             >
1622+ E2DC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1622+ E2DC             >Latest_Definition defl  Heap_Ptr
1622+ E2DC             >
1622+ E2DC             >                // dummy db directives used to calculate length of namec
1622+ E2DC 4F 56 45 52 >                db      "OVER"
1622+ E2E0             >len_NFA         defl    $ - temp_NFA
1622+ E2E0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1622+ E2DC             >
1622+ E2DC 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1622+ E2DD 4F 56 45 52 >                db      "OVER"               // name string in 7-bit ascii, but
1622+ E2E1             >                org     $-1                 // alter last byte of Name just above to set
1622+ E2E0 D2          >                db      {b $} | END_BIT     // msb as name end
1622+ E2E1             >
1622+ E2E1 D0 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1622+ E2E3             >Prev_Ptr        defl    Heap_Ptr
1622+ E2E3             >
1622+ E2E3             >mirror_Ptr      defl    $
1622+ E2E3             >
1622+ E2E3 B7 25       >                dw      Dict_Ptr + 2        // xt
1622+ E2E5             >Heap_Ptr        defl    $ - $E000           // save current HP
1622+ E2E5             >
1622+ E2E5             >Current_HP      defl  $ - $E000             // used to set HP once!
1622+ E2E5             >
1622+ E2E5             >//              ______________________________________________________________________
1622+ E2E5             >//              Dictionary part
1622+ E2E5             >
1622+ E2E5             >                org     Dict_Ptr
1622+ 25B5             >
1622+ 25B5 E3 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1622+ 25B7             >
1622+ 25B7             >OVER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1622+ 25B7 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1622+ 25B7 ~           >
1622+ 25B7 ~           >
1622+ 25B7             >                endif           ; ok        // for other definitions it "points" the correct handler
1622+ 25B7             >                // Use of "; ok" to suppress "warning[fwdref]"
1622+ 25B7             >
1622+ 25B7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1623+ 25B7                              // exx     // we can use af instead OPTIMIZATION possible
1624+ 25B7 F1                           pop     af                  //   n2
1625+ 25B8 E1                           pop     hl                  // < n1
1626+ 25B9 E5                           push    hl                  // > n1
1627+ 25BA F5                           push    af                  // > n2
1628+ 25BB E5                           push    hl                  // > n1
1629+ 25BC                              // exx
1630+ 25BC                              next
1630+ 25BC DD E9       >                jp      (ix)
1631+ 25BE
1632+ 25BE              //  ______________________________________________________________________
1633+ 25BE              //
1634+ 25BE              // drop         n1 --
1635+ 25BE              // drops the top of stack
1636+ 25BE                              New_Def DROP, "DROP", is_code, is_normal
1636+ 25BE             >
1636+ 25BE             >Dict_Ptr        defl    $
1636+ 25BE             >
1636+ 25BE             >//              ______________________________________________________________________
1636+ 25BE             >//              Heap part
1636+ 25BE             >
1636+ 25BE             >
1636+ 25BE             >                org     (Heap_Ptr & $1FFF) + $E000
1636+ E2E5             >
1636+ E2E5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1636+ E2E5             >Latest_Definition defl  Heap_Ptr
1636+ E2E5             >
1636+ E2E5             >                // dummy db directives used to calculate length of namec
1636+ E2E5 44 52 4F 50 >                db      "DROP"
1636+ E2E9             >len_NFA         defl    $ - temp_NFA
1636+ E2E9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1636+ E2E5             >
1636+ E2E5 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1636+ E2E6 44 52 4F 50 >                db      "DROP"               // name string in 7-bit ascii, but
1636+ E2EA             >                org     $-1                 // alter last byte of Name just above to set
1636+ E2E9 D0          >                db      {b $} | END_BIT     // msb as name end
1636+ E2EA             >
1636+ E2EA DC 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1636+ E2EC             >Prev_Ptr        defl    Heap_Ptr
1636+ E2EC             >
1636+ E2EC             >mirror_Ptr      defl    $
1636+ E2EC             >
1636+ E2EC C0 25       >                dw      Dict_Ptr + 2        // xt
1636+ E2EE             >Heap_Ptr        defl    $ - $E000           // save current HP
1636+ E2EE             >
1636+ E2EE             >Current_HP      defl  $ - $E000             // used to set HP once!
1636+ E2EE             >
1636+ E2EE             >//              ______________________________________________________________________
1636+ E2EE             >//              Dictionary part
1636+ E2EE             >
1636+ E2EE             >                org     Dict_Ptr
1636+ 25BE             >
1636+ 25BE EC 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1636+ 25C0             >
1636+ 25C0             >DROP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1636+ 25C0 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1636+ 25C0 ~           >
1636+ 25C0 ~           >
1636+ 25C0             >                endif           ; ok        // for other definitions it "points" the correct handler
1636+ 25C0             >                // Use of "; ok" to suppress "warning[fwdref]"
1636+ 25C0             >
1636+ 25C0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1637+ 25C0 E1                           pop     hl                  // < n1 and discard previous TOS
1638+ 25C1                              next
1638+ 25C1 DD E9       >                jp      (ix)
1639+ 25C3
1640+ 25C3              //  ______________________________________________________________________
1641+ 25C3              //
1642+ 25C3              // nip          n1 n2 -- n2
1643+ 25C3              // drops the second elemento on the stack
1644+ 25C3                              New_Def NIP, "NIP", is_code, is_normal
1644+ 25C3             >
1644+ 25C3             >Dict_Ptr        defl    $
1644+ 25C3             >
1644+ 25C3             >//              ______________________________________________________________________
1644+ 25C3             >//              Heap part
1644+ 25C3             >
1644+ 25C3             >
1644+ 25C3             >                org     (Heap_Ptr & $1FFF) + $E000
1644+ E2EE             >
1644+ E2EE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1644+ E2EE             >Latest_Definition defl  Heap_Ptr
1644+ E2EE             >
1644+ E2EE             >                // dummy db directives used to calculate length of namec
1644+ E2EE 4E 49 50    >                db      "NIP"
1644+ E2F1             >len_NFA         defl    $ - temp_NFA
1644+ E2F1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1644+ E2EE             >
1644+ E2EE 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1644+ E2EF 4E 49 50    >                db      "NIP"               // name string in 7-bit ascii, but
1644+ E2F2             >                org     $-1                 // alter last byte of Name just above to set
1644+ E2F1 D0          >                db      {b $} | END_BIT     // msb as name end
1644+ E2F2             >
1644+ E2F2 E5 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1644+ E2F4             >Prev_Ptr        defl    Heap_Ptr
1644+ E2F4             >
1644+ E2F4             >mirror_Ptr      defl    $
1644+ E2F4             >
1644+ E2F4 C5 25       >                dw      Dict_Ptr + 2        // xt
1644+ E2F6             >Heap_Ptr        defl    $ - $E000           // save current HP
1644+ E2F6             >
1644+ E2F6             >Current_HP      defl  $ - $E000             // used to set HP once!
1644+ E2F6             >
1644+ E2F6             >//              ______________________________________________________________________
1644+ E2F6             >//              Dictionary part
1644+ E2F6             >
1644+ E2F6             >                org     Dict_Ptr
1644+ 25C3             >
1644+ 25C3 F4 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1644+ 25C5             >
1644+ 25C5             >NIP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1644+ 25C5 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1644+ 25C5 ~           >
1644+ 25C5 ~           >
1644+ 25C5             >                endif           ; ok        // for other definitions it "points" the correct handler
1644+ 25C5             >                // Use of "; ok" to suppress "warning[fwdref]"
1644+ 25C5             >
1644+ 25C5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1645+ 25C5
1646+ 25C5 E1                           pop     hl                  // < n1 discarded
1647+ 25C6 E3                           ex      (sp), hl
1648+ 25C7                              next
1648+ 25C7 DD E9       >                jp      (ix)
1649+ 25C9
1650+ 25C9              //  ______________________________________________________________________
1651+ 25C9              //
1652+ 25C9              // tuck         n1 n2 -- n2 n1 n2
1653+ 25C9              // copy the top element after the second.
1654+ 25C9                              New_Def TUCK, "TUCK", is_code, is_normal
1654+ 25C9             >
1654+ 25C9             >Dict_Ptr        defl    $
1654+ 25C9             >
1654+ 25C9             >//              ______________________________________________________________________
1654+ 25C9             >//              Heap part
1654+ 25C9             >
1654+ 25C9             >
1654+ 25C9             >                org     (Heap_Ptr & $1FFF) + $E000
1654+ E2F6             >
1654+ E2F6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1654+ E2F6             >Latest_Definition defl  Heap_Ptr
1654+ E2F6             >
1654+ E2F6             >                // dummy db directives used to calculate length of namec
1654+ E2F6 54 55 43 4B >                db      "TUCK"
1654+ E2FA             >len_NFA         defl    $ - temp_NFA
1654+ E2FA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1654+ E2F6             >
1654+ E2F6 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1654+ E2F7 54 55 43 4B >                db      "TUCK"               // name string in 7-bit ascii, but
1654+ E2FB             >                org     $-1                 // alter last byte of Name just above to set
1654+ E2FA CB          >                db      {b $} | END_BIT     // msb as name end
1654+ E2FB             >
1654+ E2FB EE 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1654+ E2FD             >Prev_Ptr        defl    Heap_Ptr
1654+ E2FD             >
1654+ E2FD             >mirror_Ptr      defl    $
1654+ E2FD             >
1654+ E2FD CB 25       >                dw      Dict_Ptr + 2        // xt
1654+ E2FF             >Heap_Ptr        defl    $ - $E000           // save current HP
1654+ E2FF             >
1654+ E2FF             >Current_HP      defl  $ - $E000             // used to set HP once!
1654+ E2FF             >
1654+ E2FF             >//              ______________________________________________________________________
1654+ E2FF             >//              Dictionary part
1654+ E2FF             >
1654+ E2FF             >                org     Dict_Ptr
1654+ 25C9             >
1654+ 25C9 FD 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1654+ 25CB             >
1654+ 25CB             >TUCK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1654+ 25CB ~           >                call    runcode ; ok        // for primitive definitions  actual code
1654+ 25CB ~           >
1654+ 25CB ~           >
1654+ 25CB             >                endif           ; ok        // for other definitions it "points" the correct handler
1654+ 25CB             >                // Use of "; ok" to suppress "warning[fwdref]"
1654+ 25CB             >
1654+ 25CB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1655+ 25CB E1                           pop     hl
1656+ 25CC F1                           pop     af                  // < n1
1657+ 25CD E5                           push    hl                  // > n2  and TOS
1658+ 25CE F5                           push    af                  // > n1
1659+ 25CF E5                           push    hl
1660+ 25D0                              next
1660+ 25D0 DD E9       >                jp      (ix)
1661+ 25D2
1662+ 25D2              //  ______________________________________________________________________
1663+ 25D2              //
1664+ 25D2              // swap         n1 n2 -- n2 n1
1665+ 25D2              // swaps the two values on top of stack
1666+ 25D2                              New_Def SWAP, "SWAP", is_code, is_normal
1666+ 25D2             >
1666+ 25D2             >Dict_Ptr        defl    $
1666+ 25D2             >
1666+ 25D2             >//              ______________________________________________________________________
1666+ 25D2             >//              Heap part
1666+ 25D2             >
1666+ 25D2             >
1666+ 25D2             >                org     (Heap_Ptr & $1FFF) + $E000
1666+ E2FF             >
1666+ E2FF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1666+ E2FF             >Latest_Definition defl  Heap_Ptr
1666+ E2FF             >
1666+ E2FF             >                // dummy db directives used to calculate length of namec
1666+ E2FF 53 57 41 50 >                db      "SWAP"
1666+ E303             >len_NFA         defl    $ - temp_NFA
1666+ E303             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1666+ E2FF             >
1666+ E2FF 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1666+ E300 53 57 41 50 >                db      "SWAP"               // name string in 7-bit ascii, but
1666+ E304             >                org     $-1                 // alter last byte of Name just above to set
1666+ E303 D0          >                db      {b $} | END_BIT     // msb as name end
1666+ E304             >
1666+ E304 F6 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1666+ E306             >Prev_Ptr        defl    Heap_Ptr
1666+ E306             >
1666+ E306             >mirror_Ptr      defl    $
1666+ E306             >
1666+ E306 D4 25       >                dw      Dict_Ptr + 2        // xt
1666+ E308             >Heap_Ptr        defl    $ - $E000           // save current HP
1666+ E308             >
1666+ E308             >Current_HP      defl  $ - $E000             // used to set HP once!
1666+ E308             >
1666+ E308             >//              ______________________________________________________________________
1666+ E308             >//              Dictionary part
1666+ E308             >
1666+ E308             >                org     Dict_Ptr
1666+ 25D2             >
1666+ 25D2 06 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1666+ 25D4             >
1666+ 25D4             >SWAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1666+ 25D4 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1666+ 25D4 ~           >
1666+ 25D4 ~           >
1666+ 25D4             >                endif           ; ok        // for other definitions it "points" the correct handler
1666+ 25D4             >                // Use of "; ok" to suppress "warning[fwdref]"
1666+ 25D4             >
1666+ 25D4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1667+ 25D4 E1                           pop     hl                  // < n1
1668+ 25D5 E3                           ex      (sp),hl             // > n2
1669+ 25D6 E5                           push    hl                  // copy n1 to TOS
1670+ 25D7                              next
1670+ 25D7 DD E9       >                jp      (ix)
1671+ 25D9
1672+ 25D9              //  ______________________________________________________________________
1673+ 25D9              //
1674+ 25D9              // dup         n -- n n
1675+ 25D9              // duplicates the top value of stack
1676+ 25D9                              New_Def DUP, "DUP", is_code, is_normal
1676+ 25D9             >
1676+ 25D9             >Dict_Ptr        defl    $
1676+ 25D9             >
1676+ 25D9             >//              ______________________________________________________________________
1676+ 25D9             >//              Heap part
1676+ 25D9             >
1676+ 25D9             >
1676+ 25D9             >                org     (Heap_Ptr & $1FFF) + $E000
1676+ E308             >
1676+ E308             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1676+ E308             >Latest_Definition defl  Heap_Ptr
1676+ E308             >
1676+ E308             >                // dummy db directives used to calculate length of namec
1676+ E308 44 55 50    >                db      "DUP"
1676+ E30B             >len_NFA         defl    $ - temp_NFA
1676+ E30B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1676+ E308             >
1676+ E308 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1676+ E309 44 55 50    >                db      "DUP"               // name string in 7-bit ascii, but
1676+ E30C             >                org     $-1                 // alter last byte of Name just above to set
1676+ E30B D0          >                db      {b $} | END_BIT     // msb as name end
1676+ E30C             >
1676+ E30C FF 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1676+ E30E             >Prev_Ptr        defl    Heap_Ptr
1676+ E30E             >
1676+ E30E             >mirror_Ptr      defl    $
1676+ E30E             >
1676+ E30E DB 25       >                dw      Dict_Ptr + 2        // xt
1676+ E310             >Heap_Ptr        defl    $ - $E000           // save current HP
1676+ E310             >
1676+ E310             >Current_HP      defl  $ - $E000             // used to set HP once!
1676+ E310             >
1676+ E310             >//              ______________________________________________________________________
1676+ E310             >//              Dictionary part
1676+ E310             >
1676+ E310             >                org     Dict_Ptr
1676+ 25D9             >
1676+ 25D9 0E 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1676+ 25DB             >
1676+ 25DB             >DUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1676+ 25DB ~           >                call    runcode ; ok        // for primitive definitions  actual code
1676+ 25DB ~           >
1676+ 25DB ~           >
1676+ 25DB             >                endif           ; ok        // for other definitions it "points" the correct handler
1676+ 25DB             >                // Use of "; ok" to suppress "warning[fwdref]"
1676+ 25DB             >
1676+ 25DB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1677+ 25DB E1                           pop     hl
1678+ 25DC E5                           push    hl                  // > n duplicate TOS
1679+ 25DD E5                           push    hl
1680+ 25DE                              next
1680+ 25DE DD E9       >                jp      (ix)
1681+ 25E0
1682+ 25E0              //  ______________________________________________________________________
1683+ 25E0              //
1684+ 25E0              // rot         n1 n2 n3 -- n2 n3 n1
1685+ 25E0              // Rotates the 3 top values of stack by picking the 3rd in access-order
1686+ 25E0              // and putting it on top. The other two are shifted down one place.
1687+ 25E0                              New_Def ROT, "ROT", is_code, is_normal
1687+ 25E0             >
1687+ 25E0             >Dict_Ptr        defl    $
1687+ 25E0             >
1687+ 25E0             >//              ______________________________________________________________________
1687+ 25E0             >//              Heap part
1687+ 25E0             >
1687+ 25E0             >
1687+ 25E0             >                org     (Heap_Ptr & $1FFF) + $E000
1687+ E310             >
1687+ E310             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1687+ E310             >Latest_Definition defl  Heap_Ptr
1687+ E310             >
1687+ E310             >                // dummy db directives used to calculate length of namec
1687+ E310 52 4F 54    >                db      "ROT"
1687+ E313             >len_NFA         defl    $ - temp_NFA
1687+ E313             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1687+ E310             >
1687+ E310 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1687+ E311 52 4F 54    >                db      "ROT"               // name string in 7-bit ascii, but
1687+ E314             >                org     $-1                 // alter last byte of Name just above to set
1687+ E313 D4          >                db      {b $} | END_BIT     // msb as name end
1687+ E314             >
1687+ E314 08 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1687+ E316             >Prev_Ptr        defl    Heap_Ptr
1687+ E316             >
1687+ E316             >mirror_Ptr      defl    $
1687+ E316             >
1687+ E316 E2 25       >                dw      Dict_Ptr + 2        // xt
1687+ E318             >Heap_Ptr        defl    $ - $E000           // save current HP
1687+ E318             >
1687+ E318             >Current_HP      defl  $ - $E000             // used to set HP once!
1687+ E318             >
1687+ E318             >//              ______________________________________________________________________
1687+ E318             >//              Dictionary part
1687+ E318             >
1687+ E318             >                org     Dict_Ptr
1687+ 25E0             >
1687+ 25E0 16 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1687+ 25E2             >
1687+ 25E2             >ROT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1687+ 25E2 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1687+ 25E2 ~           >
1687+ 25E2 ~           >
1687+ 25E2             >                endif           ; ok        // for other definitions it "points" the correct handler
1687+ 25E2             >                // Use of "; ok" to suppress "warning[fwdref]"
1687+ 25E2             >
1687+ 25E2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1688+ 25E2 D9                           exx
1689+ 25E3 D1                           pop     de                  // < n3
1690+ 25E4 E1                           pop     hl                  // < n2
1691+ 25E5 E3                           ex      (sp),hl             // > n2 < n1
1692+ 25E6 D5                           push    de                  // > n3
1693+ 25E7 E5                           push    hl                  // copy n1 to TOS
1694+ 25E8 D9                           exx
1695+ 25E9                              next
1695+ 25E9 DD E9       >                jp      (ix)
1696+ 25EB
1697+ 25EB              //  ______________________________________________________________________
1698+ 25EB              //
1699+ 25EB              // -rot         n1 n2 n3 -- n3 n1 n2
1700+ 25EB              // Rotates the 3 top values of stack by picking the 1st in access-order
1701+ 25EB              // and putting back to 3rd place. The other two are shifted down one place.
1702+ 25EB                              New_Def DASH_ROT, "-ROT", is_code, is_normal
1702+ 25EB             >
1702+ 25EB             >Dict_Ptr        defl    $
1702+ 25EB             >
1702+ 25EB             >//              ______________________________________________________________________
1702+ 25EB             >//              Heap part
1702+ 25EB             >
1702+ 25EB             >
1702+ 25EB             >                org     (Heap_Ptr & $1FFF) + $E000
1702+ E318             >
1702+ E318             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1702+ E318             >Latest_Definition defl  Heap_Ptr
1702+ E318             >
1702+ E318             >                // dummy db directives used to calculate length of namec
1702+ E318 2D 52 4F 54 >                db      "-ROT"
1702+ E31C             >len_NFA         defl    $ - temp_NFA
1702+ E31C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1702+ E318             >
1702+ E318 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1702+ E319 2D 52 4F 54 >                db      "-ROT"               // name string in 7-bit ascii, but
1702+ E31D             >                org     $-1                 // alter last byte of Name just above to set
1702+ E31C D4          >                db      {b $} | END_BIT     // msb as name end
1702+ E31D             >
1702+ E31D 10 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1702+ E31F             >Prev_Ptr        defl    Heap_Ptr
1702+ E31F             >
1702+ E31F             >mirror_Ptr      defl    $
1702+ E31F             >
1702+ E31F ED 25       >                dw      Dict_Ptr + 2        // xt
1702+ E321             >Heap_Ptr        defl    $ - $E000           // save current HP
1702+ E321             >
1702+ E321             >Current_HP      defl  $ - $E000             // used to set HP once!
1702+ E321             >
1702+ E321             >//              ______________________________________________________________________
1702+ E321             >//              Dictionary part
1702+ E321             >
1702+ E321             >                org     Dict_Ptr
1702+ 25EB             >
1702+ 25EB 1F 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1702+ 25ED             >
1702+ 25ED             >DASH_ROT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1702+ 25ED ~           >                call    runcode ; ok        // for primitive definitions  actual code
1702+ 25ED ~           >
1702+ 25ED ~           >
1702+ 25ED             >                endif           ; ok        // for other definitions it "points" the correct handler
1702+ 25ED             >                // Use of "; ok" to suppress "warning[fwdref]"
1702+ 25ED             >
1702+ 25ED             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1703+ 25ED D9                           exx
1704+ 25EE E1                           pop     hl                  // < n3
1705+ 25EF D1                           pop     de                  // < n2
1706+ 25F0 E3                           ex      (sp),hl             // > n3 < n1
1707+ 25F1 E5                           push    hl                  // > n1
1708+ 25F2 D5                           push    de                  // copy n3 to TOS
1709+ 25F3 D9                           exx
1710+ 25F4                              next
1710+ 25F4 DD E9       >                jp      (ix)
1711+ 25F6
1712+ 25F6              //  ______________________________________________________________________
1713+ 25F6              //
1714+ 25F6              // pick        n1 -- nx
1715+ 25F6              // picks the nth element from TOS
1716+ 25F6                              New_Def PICK, "PICK", is_code, is_normal
1716+ 25F6             >
1716+ 25F6             >Dict_Ptr        defl    $
1716+ 25F6             >
1716+ 25F6             >//              ______________________________________________________________________
1716+ 25F6             >//              Heap part
1716+ 25F6             >
1716+ 25F6             >
1716+ 25F6             >                org     (Heap_Ptr & $1FFF) + $E000
1716+ E321             >
1716+ E321             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1716+ E321             >Latest_Definition defl  Heap_Ptr
1716+ E321             >
1716+ E321             >                // dummy db directives used to calculate length of namec
1716+ E321 50 49 43 4B >                db      "PICK"
1716+ E325             >len_NFA         defl    $ - temp_NFA
1716+ E325             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1716+ E321             >
1716+ E321 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1716+ E322 50 49 43 4B >                db      "PICK"               // name string in 7-bit ascii, but
1716+ E326             >                org     $-1                 // alter last byte of Name just above to set
1716+ E325 CB          >                db      {b $} | END_BIT     // msb as name end
1716+ E326             >
1716+ E326 18 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1716+ E328             >Prev_Ptr        defl    Heap_Ptr
1716+ E328             >
1716+ E328             >mirror_Ptr      defl    $
1716+ E328             >
1716+ E328 F8 25       >                dw      Dict_Ptr + 2        // xt
1716+ E32A             >Heap_Ptr        defl    $ - $E000           // save current HP
1716+ E32A             >
1716+ E32A             >Current_HP      defl  $ - $E000             // used to set HP once!
1716+ E32A             >
1716+ E32A             >//              ______________________________________________________________________
1716+ E32A             >//              Dictionary part
1716+ E32A             >
1716+ E32A             >                org     Dict_Ptr
1716+ 25F6             >
1716+ 25F6 28 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1716+ 25F8             >
1716+ 25F8             >PICK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1716+ 25F8 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1716+ 25F8 ~           >
1716+ 25F8 ~           >
1716+ 25F8             >                endif           ; ok        // for other definitions it "points" the correct handler
1716+ 25F8             >                // Use of "; ok" to suppress "warning[fwdref]"
1716+ 25F8             >
1716+ 25F8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1717+ 25F8 E1                           pop     hl                  // take TOS as index
1718+ 25F9 29                           add     hl, hl              // as cells
1719+ 25FA 39                           add     hl, sp              // from Stack Pointer
1720+ 25FB 7E                           ld      a, (hl)             // replace TOS
1721+ 25FC 23                           inc     hl
1722+ 25FD 66                           ld      h, (hl)
1723+ 25FE 6F                           ld      l, a
1724+ 25FF E5                           push    hl
1725+ 2600                              next
1725+ 2600 DD E9       >                jp      (ix)
1726+ 2602
1727+ 2602
1728+ 2602              //  ______________________________________________________________________
1729+ 2602              //
1730+ 2602              // roll        n1 n2 n3 ... n -- n2 n3 ... n1
1731+ 2602              // picks the nth element from TOS
1732+ 2602              //              New_Def ROLL, "ROLL", is_code, is_normal
1733+ 2602              //              exx                     // we need all registers free
1734+ 2602              //              pop     hl              // number of cells to roll
1735+ 2602              //              ld      a, h
1736+ 2602              //              or       l
1737+ 2602              //              jr      z, Roll_Zero
1738+ 2602              //                  add     hl, hl              // number of bytes to move
1739+ 2602              //                  ld      b, h
1740+ 2602              //                  ld      c, l
1741+ 2602              //                  add     hl, sp          // address of n1
1742+ 2602              //                  ld      a, (hl)         // take n1 into a and a,
1743+ 2602              //                  inc     hl
1744+ 2602              //                  ex      af, af'
1745+ 2602              //                  ld      a, (hl)         // take n1 into a and a,
1746+ 2602              //                  ld      d, h
1747+ 2602              //                  ld      e, l
1748+ 2602              //                  dec     hl
1749+ 2602              //                  dec     hl
1750+ 2602              //                  lddr
1751+ 2602              //                  ex      de, hl
1752+ 2602              //                  ld      (hl), a
1753+ 2602              //                  dec     hl
1754+ 2602              //                  ex      af, af'
1755+ 2602              //                  ld      (hl), a
1756+ 2602              //Roll_Zero:
1757+ 2602              //              exx
1758+ 2602              //              next
1759+ 2602
1760+ 2602
1761+ 2602              //  ______________________________________________________________________
1762+ 2602              //
1763+ 2602              // 2over        d1 d2 -- d1 d2 d1
1764+ 2602              //              n1 n2 n3 n4 -- n1 n2 n3 n4 n1 n2
1765+ 2602              // copy the second double of stack and put on top.
1766+ 2602                              New_Def TWO_OVER, "2OVER", is_code, is_normal
1766+ 2602             >
1766+ 2602             >Dict_Ptr        defl    $
1766+ 2602             >
1766+ 2602             >//              ______________________________________________________________________
1766+ 2602             >//              Heap part
1766+ 2602             >
1766+ 2602             >
1766+ 2602             >                org     (Heap_Ptr & $1FFF) + $E000
1766+ E32A             >
1766+ E32A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1766+ E32A             >Latest_Definition defl  Heap_Ptr
1766+ E32A             >
1766+ E32A             >                // dummy db directives used to calculate length of namec
1766+ E32A 32 4F 56 45 >                db      "2OVER"
1766+ E32E 52          >
1766+ E32F             >len_NFA         defl    $ - temp_NFA
1766+ E32F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1766+ E32A             >
1766+ E32A 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1766+ E32B 32 4F 56 45 >                db      "2OVER"               // name string in 7-bit ascii, but
1766+ E32F 52          >
1766+ E330             >                org     $-1                 // alter last byte of Name just above to set
1766+ E32F D2          >                db      {b $} | END_BIT     // msb as name end
1766+ E330             >
1766+ E330 21 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1766+ E332             >Prev_Ptr        defl    Heap_Ptr
1766+ E332             >
1766+ E332             >mirror_Ptr      defl    $
1766+ E332             >
1766+ E332 04 26       >                dw      Dict_Ptr + 2        // xt
1766+ E334             >Heap_Ptr        defl    $ - $E000           // save current HP
1766+ E334             >
1766+ E334             >Current_HP      defl  $ - $E000             // used to set HP once!
1766+ E334             >
1766+ E334             >//              ______________________________________________________________________
1766+ E334             >//              Dictionary part
1766+ E334             >
1766+ E334             >                org     Dict_Ptr
1766+ 2602             >
1766+ 2602 32 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1766+ 2604             >
1766+ 2604             >TWO_OVER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1766+ 2604 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1766+ 2604 ~           >
1766+ 2604 ~           >
1766+ 2604             >                endif           ; ok        // for other definitions it "points" the correct handler
1766+ 2604             >                // Use of "; ok" to suppress "warning[fwdref]"
1766+ 2604             >
1766+ 2604             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1767+ 2604 D9                           exx
1768+ 2605 21 07 00                     ld      hl, 7
1769+ 2608 39                           add     hl, sp
1770+ 2609 56                           ld      d, (hl)
1771+ 260A 2B                           dec     hl
1772+ 260B 5E                           ld      e, (hl)             // d1-L
1773+ 260C D5                           push    de
1774+ 260D 2B                           dec     hl
1775+ 260E 56                           ld      d, (hl)
1776+ 260F 2B                           dec     hl
1777+ 2610 5E                           ld      e, (hl)             // d1-H
1778+ 2611 D5                           push    de
1779+ 2612 D9                           exx
1780+ 2613                              next
1780+ 2613 DD E9       >                jp      (ix)
1781+ 2615
1782+ 2615              //  ______________________________________________________________________
1783+ 2615              //
1784+ 2615              // 2drop        d --
1785+ 2615              //              n1 n2 --
1786+ 2615              // drops the top double from stack
1787+ 2615                              New_Def TWO_DROP, "2DROP", is_code, is_normal
1787+ 2615             >
1787+ 2615             >Dict_Ptr        defl    $
1787+ 2615             >
1787+ 2615             >//              ______________________________________________________________________
1787+ 2615             >//              Heap part
1787+ 2615             >
1787+ 2615             >
1787+ 2615             >                org     (Heap_Ptr & $1FFF) + $E000
1787+ E334             >
1787+ E334             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1787+ E334             >Latest_Definition defl  Heap_Ptr
1787+ E334             >
1787+ E334             >                // dummy db directives used to calculate length of namec
1787+ E334 32 44 52 4F >                db      "2DROP"
1787+ E338 50          >
1787+ E339             >len_NFA         defl    $ - temp_NFA
1787+ E339             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1787+ E334             >
1787+ E334 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1787+ E335 32 44 52 4F >                db      "2DROP"               // name string in 7-bit ascii, but
1787+ E339 50          >
1787+ E33A             >                org     $-1                 // alter last byte of Name just above to set
1787+ E339 D0          >                db      {b $} | END_BIT     // msb as name end
1787+ E33A             >
1787+ E33A 2A 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1787+ E33C             >Prev_Ptr        defl    Heap_Ptr
1787+ E33C             >
1787+ E33C             >mirror_Ptr      defl    $
1787+ E33C             >
1787+ E33C 17 26       >                dw      Dict_Ptr + 2        // xt
1787+ E33E             >Heap_Ptr        defl    $ - $E000           // save current HP
1787+ E33E             >
1787+ E33E             >Current_HP      defl  $ - $E000             // used to set HP once!
1787+ E33E             >
1787+ E33E             >//              ______________________________________________________________________
1787+ E33E             >//              Dictionary part
1787+ E33E             >
1787+ E33E             >                org     Dict_Ptr
1787+ 2615             >
1787+ 2615 3C 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1787+ 2617             >
1787+ 2617             >TWO_DROP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1787+ 2617 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1787+ 2617 ~           >
1787+ 2617 ~           >
1787+ 2617             >                endif           ; ok        // for other definitions it "points" the correct handler
1787+ 2617             >                // Use of "; ok" to suppress "warning[fwdref]"
1787+ 2617             >
1787+ 2617             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1788+ 2617 E1                           pop     hl
1789+ 2618 E1                           pop     hl
1790+ 2619                              next
1790+ 2619 DD E9       >                jp      (ix)
1791+ 261B
1792+ 261B              //  ______________________________________________________________________
1793+ 261B              //
1794+ 261B              // 2nip         d1 d2 -- d2
1795+ 261B              //              n1 n2 n3 n4 -- n3 n4
1796+ 261B              // drops the second double on the stack
1797+ 261B              //              New_Def TWO_NIP, 4, "2nip"
1798+ 261B              //              ...
1799+ 261B
1800+ 261B              //  ______________________________________________________________________
1801+ 261B              //
1802+ 261B              // 2tuck         d1 d2 -- d2 d1 d2
1803+ 261B              // copy the top element after the second.
1804+ 261B              //              New_Def TWO_TUCK, 5, "2tuck"
1805+ 261B              //              ...
1806+ 261B
1807+ 261B              //  ______________________________________________________________________
1808+ 261B              //
1809+ 261B              // 2swap         d1 d2 -- d2 d1
1810+ 261B              //               n1 n2 n3 n4 -- n3 n4 n1 n2
1811+ 261B              // swaps the two doubles on top of stack
1812+ 261B                              New_Def TWO_SWAP, "2SWAP", is_code, is_normal
1812+ 261B             >
1812+ 261B             >Dict_Ptr        defl    $
1812+ 261B             >
1812+ 261B             >//              ______________________________________________________________________
1812+ 261B             >//              Heap part
1812+ 261B             >
1812+ 261B             >
1812+ 261B             >                org     (Heap_Ptr & $1FFF) + $E000
1812+ E33E             >
1812+ E33E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1812+ E33E             >Latest_Definition defl  Heap_Ptr
1812+ E33E             >
1812+ E33E             >                // dummy db directives used to calculate length of namec
1812+ E33E 32 53 57 41 >                db      "2SWAP"
1812+ E342 50          >
1812+ E343             >len_NFA         defl    $ - temp_NFA
1812+ E343             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1812+ E33E             >
1812+ E33E 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1812+ E33F 32 53 57 41 >                db      "2SWAP"               // name string in 7-bit ascii, but
1812+ E343 50          >
1812+ E344             >                org     $-1                 // alter last byte of Name just above to set
1812+ E343 D0          >                db      {b $} | END_BIT     // msb as name end
1812+ E344             >
1812+ E344 34 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1812+ E346             >Prev_Ptr        defl    Heap_Ptr
1812+ E346             >
1812+ E346             >mirror_Ptr      defl    $
1812+ E346             >
1812+ E346 1D 26       >                dw      Dict_Ptr + 2        // xt
1812+ E348             >Heap_Ptr        defl    $ - $E000           // save current HP
1812+ E348             >
1812+ E348             >Current_HP      defl  $ - $E000             // used to set HP once!
1812+ E348             >
1812+ E348             >//              ______________________________________________________________________
1812+ E348             >//              Dictionary part
1812+ E348             >
1812+ E348             >                org     Dict_Ptr
1812+ 261B             >
1812+ 261B 46 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1812+ 261D             >
1812+ 261D             >TWO_SWAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1812+ 261D ~           >                call    runcode ; ok        // for primitive definitions  actual code
1812+ 261D ~           >
1812+ 261D ~           >
1812+ 261D             >                endif           ; ok        // for other definitions it "points" the correct handler
1812+ 261D             >                // Use of "; ok" to suppress "warning[fwdref]"
1812+ 261D             >
1812+ 261D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1813+ 261D D9                           exx
1814+ 261E F1                           pop     af                  //   d2-H
1815+ 261F E1                           pop     hl                  // < d2-L
1816+ 2620 D1                           pop     de                  // < d1-H
1817+ 2621 E3                           ex      (sp), hl            // < d1-L > d2-L
1818+ 2622 F5                           push    af                  // > d2-H
1819+ 2623 E5                           push    hl                  // > d1-L
1820+ 2624 D5                           push    de
1821+ 2625 D9                           exx
1822+ 2626                              next
1822+ 2626 DD E9       >                jp      (ix)
1823+ 2628
1824+ 2628              //  ______________________________________________________________________
1825+ 2628              //
1826+ 2628              // 2dup         d -- d d
1827+ 2628              //              n1 n2 -- n1 n2 n1 n2
1828+ 2628              // duplicates the top double of stack
1829+ 2628                              New_Def TWO_DUP, "2DUP", is_code, is_normal
1829+ 2628             >
1829+ 2628             >Dict_Ptr        defl    $
1829+ 2628             >
1829+ 2628             >//              ______________________________________________________________________
1829+ 2628             >//              Heap part
1829+ 2628             >
1829+ 2628             >
1829+ 2628             >                org     (Heap_Ptr & $1FFF) + $E000
1829+ E348             >
1829+ E348             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1829+ E348             >Latest_Definition defl  Heap_Ptr
1829+ E348             >
1829+ E348             >                // dummy db directives used to calculate length of namec
1829+ E348 32 44 55 50 >                db      "2DUP"
1829+ E34C             >len_NFA         defl    $ - temp_NFA
1829+ E34C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1829+ E348             >
1829+ E348 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1829+ E349 32 44 55 50 >                db      "2DUP"               // name string in 7-bit ascii, but
1829+ E34D             >                org     $-1                 // alter last byte of Name just above to set
1829+ E34C D0          >                db      {b $} | END_BIT     // msb as name end
1829+ E34D             >
1829+ E34D 3E 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1829+ E34F             >Prev_Ptr        defl    Heap_Ptr
1829+ E34F             >
1829+ E34F             >mirror_Ptr      defl    $
1829+ E34F             >
1829+ E34F 2A 26       >                dw      Dict_Ptr + 2        // xt
1829+ E351             >Heap_Ptr        defl    $ - $E000           // save current HP
1829+ E351             >
1829+ E351             >Current_HP      defl  $ - $E000             // used to set HP once!
1829+ E351             >
1829+ E351             >//              ______________________________________________________________________
1829+ E351             >//              Dictionary part
1829+ E351             >
1829+ E351             >                org     Dict_Ptr
1829+ 2628             >
1829+ 2628 4F 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1829+ 262A             >
1829+ 262A             >TWO_DUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1829+ 262A ~           >                call    runcode ; ok        // for primitive definitions  actual code
1829+ 262A ~           >
1829+ 262A ~           >
1829+ 262A             >                endif           ; ok        // for other definitions it "points" the correct handler
1829+ 262A             >                // Use of "; ok" to suppress "warning[fwdref]"
1829+ 262A             >
1829+ 262A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1830+ 262A E1                           pop     hl                  // < d-H
1831+ 262B F1                           pop     af                  // < d-L
1832+ 262C F5                           push    af                  // < d-L
1833+ 262D E5                           push    hl                  // > d-H
1834+ 262E F5                           push    af                  // > d-L
1835+ 262F E5                           push    hl                  // > d-H
1836+ 2630                              next
1836+ 2630 DD E9       >                jp      (ix)
1837+ 2632
1838+ 2632              //  ______________________________________________________________________
1839+ 2632              //
1840+ 2632              // 2rot         d1 d2 d3 -- d2 d3 d1
1841+ 2632              //              n1 n2 n3 n4 n5 n6 -- n3 n4 n5 n6 n1 n2
1842+ 2632              // Rotates the 3 top doubles of stack by picking the 3rd in access-order
1843+ 2632              // and putting it on top. The other two are shifted down one place.
1844+ 2632              //              New_Def TWO?ROT, 4, "2rot"
1845+ 2632              //              ...
1846+ 2632              //              New_Def TWO_ROT, "2ROT", is_code, is_normal
1847+ 2632              //
1848+ 2632              //      d3  |d2  |d1  |
1849+ 2632              //      h l |h l |h l |
1850+ 2632              // SP   LHED|LHED|LHED|
1851+ 2632              // SP  +0123|4567|89ab|
1852+ 2632              //              ld      hl, $000B
1853+ 2632              //              add     hl, sp
1854+ 2632              //              ld      d, (hl)
1855+ 2632              //              dec     hl
1856+ 2632              //              ld      e, (hl)
1857+ 2632              //              dec     hl
1858+ 2632              //              push    de
1859+ 2632              //              ld      d, (hl)
1860+ 2632              //              dec     hl
1861+ 2632              //              ld      e, (hl)
1862+ 2632              //              dec     hl
1863+ 2632              //              push    de
1864+ 2632
1865+ 2632              //      d1  |d3  |d2  |d1  |
1866+ 2632              //      h l |h l |h l |h l |
1867+ 2632              // SP   LHED|LHED|LHED|LHED|
1868+ 2632              // SP       +0123|4567|89ab|
1869+ 2632
1870+ 2632              //              ld      d, h
1871+ 2632              //              ld      e, l
1872+ 2632              //              inc     de
1873+ 2632              //              inc     de
1874+ 2632              //              inc     de
1875+ 2632              //              inc     de
1876+ 2632              //              push    bc
1877+ 2632              //              ld      bc, $000C
1878+ 2632              //              lddr
1879+ 2632              //              pop     bc
1880+ 2632              //              pop     de
1881+ 2632              //              pop     de
1882+ 2632              //
1883+ 2632              //              next
1884+ 2632
1885+ 2632
1886+ 2632              //  ______________________________________________________________________
1887+ 2632              //
1888+ 2632              // +!           n a --
1889+ 2632              // Sums to the content of address a the number n.
1890+ 2632              // It is the same of  a @ n + a !
1891+ 2632                              New_Def PLUSSTORE, "+!", is_code, is_normal
1891+ 2632             >
1891+ 2632             >Dict_Ptr        defl    $
1891+ 2632             >
1891+ 2632             >//              ______________________________________________________________________
1891+ 2632             >//              Heap part
1891+ 2632             >
1891+ 2632             >
1891+ 2632             >                org     (Heap_Ptr & $1FFF) + $E000
1891+ E351             >
1891+ E351             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1891+ E351             >Latest_Definition defl  Heap_Ptr
1891+ E351             >
1891+ E351             >                // dummy db directives used to calculate length of namec
1891+ E351 2B 21       >                db      "+!"
1891+ E353             >len_NFA         defl    $ - temp_NFA
1891+ E353             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1891+ E351             >
1891+ E351 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1891+ E352 2B 21       >                db      "+!"               // name string in 7-bit ascii, but
1891+ E354             >                org     $-1                 // alter last byte of Name just above to set
1891+ E353 A1          >                db      {b $} | END_BIT     // msb as name end
1891+ E354             >
1891+ E354 48 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1891+ E356             >Prev_Ptr        defl    Heap_Ptr
1891+ E356             >
1891+ E356             >mirror_Ptr      defl    $
1891+ E356             >
1891+ E356 34 26       >                dw      Dict_Ptr + 2        // xt
1891+ E358             >Heap_Ptr        defl    $ - $E000           // save current HP
1891+ E358             >
1891+ E358             >Current_HP      defl  $ - $E000             // used to set HP once!
1891+ E358             >
1891+ E358             >//              ______________________________________________________________________
1891+ E358             >//              Dictionary part
1891+ E358             >
1891+ E358             >                org     Dict_Ptr
1891+ 2632             >
1891+ 2632 56 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1891+ 2634             >
1891+ 2634             >PLUSSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1891+ 2634 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1891+ 2634 ~           >
1891+ 2634 ~           >
1891+ 2634             >                endif           ; ok        // for other definitions it "points" the correct handler
1891+ 2634             >                // Use of "; ok" to suppress "warning[fwdref]"
1891+ 2634             >
1891+ 2634             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1892+ 2634 D9                           exx
1893+ 2635 E1                           pop     hl                  // hl is the address
1894+ 2636 D1                           pop     de                  // de is the number
1895+ 2637 7E                           ld      a, (hl)
1896+ 2638 83                           add     e
1897+ 2639 77                           ld      (hl), a
1898+ 263A 23                           inc     hl
1899+ 263B 7E                           ld      a, (hl)
1900+ 263C 8A                           adc     d
1901+ 263D 77                           ld      (hl), a
1902+ 263E D9                           exx
1903+ 263F                              next
1903+ 263F DD E9       >                jp      (ix)
1904+ 2641
1905+ 2641              //  ______________________________________________________________________
1906+ 2641              //
1907+ 2641              // toggle       a n --
1908+ 2641              // Complements (xor) the byte at addrress  a  with the model n.
1909+ 2641                              New_Def TOGGLE, "TOGGLE", is_code, is_normal
1909+ 2641             >
1909+ 2641             >Dict_Ptr        defl    $
1909+ 2641             >
1909+ 2641             >//              ______________________________________________________________________
1909+ 2641             >//              Heap part
1909+ 2641             >
1909+ 2641             >
1909+ 2641             >                org     (Heap_Ptr & $1FFF) + $E000
1909+ E358             >
1909+ E358             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1909+ E358             >Latest_Definition defl  Heap_Ptr
1909+ E358             >
1909+ E358             >                // dummy db directives used to calculate length of namec
1909+ E358 54 4F 47 47 >                db      "TOGGLE"
1909+ E35C 4C 45       >
1909+ E35E             >len_NFA         defl    $ - temp_NFA
1909+ E35E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1909+ E358             >
1909+ E358 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1909+ E359 54 4F 47 47 >                db      "TOGGLE"               // name string in 7-bit ascii, but
1909+ E35D 4C 45       >
1909+ E35F             >                org     $-1                 // alter last byte of Name just above to set
1909+ E35E C5          >                db      {b $} | END_BIT     // msb as name end
1909+ E35F             >
1909+ E35F 51 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1909+ E361             >Prev_Ptr        defl    Heap_Ptr
1909+ E361             >
1909+ E361             >mirror_Ptr      defl    $
1909+ E361             >
1909+ E361 43 26       >                dw      Dict_Ptr + 2        // xt
1909+ E363             >Heap_Ptr        defl    $ - $E000           // save current HP
1909+ E363             >
1909+ E363             >Current_HP      defl  $ - $E000             // used to set HP once!
1909+ E363             >
1909+ E363             >//              ______________________________________________________________________
1909+ E363             >//              Dictionary part
1909+ E363             >
1909+ E363             >                org     Dict_Ptr
1909+ 2641             >
1909+ 2641 61 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1909+ 2643             >
1909+ 2643             >TOGGLE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1909+ 2643 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1909+ 2643 ~           >
1909+ 2643 ~           >
1909+ 2643             >                endif           ; ok        // for other definitions it "points" the correct handler
1909+ 2643             >                // Use of "; ok" to suppress "warning[fwdref]"
1909+ 2643             >
1909+ 2643             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1910+ 2643 E1                           pop     hl
1911+ 2644 7D                           ld      a, l
1912+ 2645 E1                           pop     hl
1913+ 2646 AE                           xor     (hl)
1914+ 2647 77                           ld      (hl), a
1915+ 2648
1916+ 2648                              next
1916+ 2648 DD E9       >                jp      (ix)
1917+ 264A
1918+ 264A              //  ______________________________________________________________________
1919+ 264A              //
1920+ 264A              // @            a -- n
1921+ 264A              // fetch 16 bit number n from address a. Z80 keeps high byte is in high memory
1922+ 264A                              New_Def FETCH, "@", is_code, is_normal
1922+ 264A             >
1922+ 264A             >Dict_Ptr        defl    $
1922+ 264A             >
1922+ 264A             >//              ______________________________________________________________________
1922+ 264A             >//              Heap part
1922+ 264A             >
1922+ 264A             >
1922+ 264A             >                org     (Heap_Ptr & $1FFF) + $E000
1922+ E363             >
1922+ E363             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1922+ E363             >Latest_Definition defl  Heap_Ptr
1922+ E363             >
1922+ E363             >                // dummy db directives used to calculate length of namec
1922+ E363 40          >                db      "@"
1922+ E364             >len_NFA         defl    $ - temp_NFA
1922+ E364             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1922+ E363             >
1922+ E363 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1922+ E364 40          >                db      "@"               // name string in 7-bit ascii, but
1922+ E365             >                org     $-1                 // alter last byte of Name just above to set
1922+ E364 C0          >                db      {b $} | END_BIT     // msb as name end
1922+ E365             >
1922+ E365 58 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1922+ E367             >Prev_Ptr        defl    Heap_Ptr
1922+ E367             >
1922+ E367             >mirror_Ptr      defl    $
1922+ E367             >
1922+ E367 4C 26       >                dw      Dict_Ptr + 2        // xt
1922+ E369             >Heap_Ptr        defl    $ - $E000           // save current HP
1922+ E369             >
1922+ E369             >Current_HP      defl  $ - $E000             // used to set HP once!
1922+ E369             >
1922+ E369             >//              ______________________________________________________________________
1922+ E369             >//              Dictionary part
1922+ E369             >
1922+ E369             >                org     Dict_Ptr
1922+ 264A             >
1922+ 264A 67 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1922+ 264C             >
1922+ 264C             >FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1922+ 264C ~           >                call    runcode ; ok        // for primitive definitions  actual code
1922+ 264C ~           >
1922+ 264C ~           >
1922+ 264C             >                endif           ; ok        // for other definitions it "points" the correct handler
1922+ 264C             >                // Use of "; ok" to suppress "warning[fwdref]"
1922+ 264C             >
1922+ 264C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1923+ 264C E1                           pop     hl
1924+ 264D 7E                           ld      a, (hl)             // low-byte
1925+ 264E 23                           inc     hl
1926+ 264F 66                           ld      h, (hl)             // high-byte
1927+ 2650 6F                           ld      l, a
1928+ 2651 E5                           push    hl
1929+ 2652                              next
1929+ 2652 DD E9       >                jp      (ix)
1930+ 2654
1931+ 2654              //  ______________________________________________________________________
1932+ 2654              //
1933+ 2654              // !            n a --
1934+ 2654              // store 16 bit number n from address a. Z80 keeps high byte is in high memory
1935+ 2654                              New_Def STORE, "!", is_code, is_normal
1935+ 2654             >
1935+ 2654             >Dict_Ptr        defl    $
1935+ 2654             >
1935+ 2654             >//              ______________________________________________________________________
1935+ 2654             >//              Heap part
1935+ 2654             >
1935+ 2654             >
1935+ 2654             >                org     (Heap_Ptr & $1FFF) + $E000
1935+ E369             >
1935+ E369             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1935+ E369             >Latest_Definition defl  Heap_Ptr
1935+ E369             >
1935+ E369             >                // dummy db directives used to calculate length of namec
1935+ E369 21          >                db      "!"
1935+ E36A             >len_NFA         defl    $ - temp_NFA
1935+ E36A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1935+ E369             >
1935+ E369 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1935+ E36A 21          >                db      "!"               // name string in 7-bit ascii, but
1935+ E36B             >                org     $-1                 // alter last byte of Name just above to set
1935+ E36A A1          >                db      {b $} | END_BIT     // msb as name end
1935+ E36B             >
1935+ E36B 63 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1935+ E36D             >Prev_Ptr        defl    Heap_Ptr
1935+ E36D             >
1935+ E36D             >mirror_Ptr      defl    $
1935+ E36D             >
1935+ E36D 56 26       >                dw      Dict_Ptr + 2        // xt
1935+ E36F             >Heap_Ptr        defl    $ - $E000           // save current HP
1935+ E36F             >
1935+ E36F             >Current_HP      defl  $ - $E000             // used to set HP once!
1935+ E36F             >
1935+ E36F             >//              ______________________________________________________________________
1935+ E36F             >//              Dictionary part
1935+ E36F             >
1935+ E36F             >                org     Dict_Ptr
1935+ 2654             >
1935+ 2654 6D 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1935+ 2656             >
1935+ 2656             >STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1935+ 2656 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1935+ 2656 ~           >
1935+ 2656 ~           >
1935+ 2656             >                endif           ; ok        // for other definitions it "points" the correct handler
1935+ 2656             >                // Use of "; ok" to suppress "warning[fwdref]"
1935+ 2656             >
1935+ 2656             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1936+ 2656 D9                           exx
1937+ 2657 E1                           pop     hl                  // address
1938+ 2658 D1                           pop     de                  // < n
1939+ 2659 73                           ld      (hl), e             // low-byte
1940+ 265A 23                           inc     hl
1941+ 265B 72                           ld      (hl), d             // high-byte
1942+ 265C D9                           exx
1943+ 265D                              next
1943+ 265D DD E9       >                jp      (ix)
1944+ 265F
1945+ 265F              //  ______________________________________________________________________
1946+ 265F              //
1947+ 265F              // c@           a -- c
1948+ 265F              // fetch a character n from address a
1949+ 265F                              New_Def CFETCH, "C@", is_code, is_normal
1949+ 265F             >
1949+ 265F             >Dict_Ptr        defl    $
1949+ 265F             >
1949+ 265F             >//              ______________________________________________________________________
1949+ 265F             >//              Heap part
1949+ 265F             >
1949+ 265F             >
1949+ 265F             >                org     (Heap_Ptr & $1FFF) + $E000
1949+ E36F             >
1949+ E36F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1949+ E36F             >Latest_Definition defl  Heap_Ptr
1949+ E36F             >
1949+ E36F             >                // dummy db directives used to calculate length of namec
1949+ E36F 43 40       >                db      "C@"
1949+ E371             >len_NFA         defl    $ - temp_NFA
1949+ E371             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1949+ E36F             >
1949+ E36F 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1949+ E370 43 40       >                db      "C@"               // name string in 7-bit ascii, but
1949+ E372             >                org     $-1                 // alter last byte of Name just above to set
1949+ E371 C0          >                db      {b $} | END_BIT     // msb as name end
1949+ E372             >
1949+ E372 69 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1949+ E374             >Prev_Ptr        defl    Heap_Ptr
1949+ E374             >
1949+ E374             >mirror_Ptr      defl    $
1949+ E374             >
1949+ E374 61 26       >                dw      Dict_Ptr + 2        // xt
1949+ E376             >Heap_Ptr        defl    $ - $E000           // save current HP
1949+ E376             >
1949+ E376             >Current_HP      defl  $ - $E000             // used to set HP once!
1949+ E376             >
1949+ E376             >//              ______________________________________________________________________
1949+ E376             >//              Dictionary part
1949+ E376             >
1949+ E376             >                org     Dict_Ptr
1949+ 265F             >
1949+ 265F 74 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1949+ 2661             >
1949+ 2661             >CFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1949+ 2661 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1949+ 2661 ~           >
1949+ 2661 ~           >
1949+ 2661             >                endif           ; ok        // for other definitions it "points" the correct handler
1949+ 2661             >                // Use of "; ok" to suppress "warning[fwdref]"
1949+ 2661             >
1949+ 2661             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1950+ 2661 E1                           pop     hl
1951+ 2662 6E                           ld      l, (hl)             // low-byte
1952+ 2663 26 00                        ld      h, 0
1953+ 2665
1954+ 2665                              psh1
1954+ 2665 E5          >                push    hl
1954+ 2666 DD E9       >                jp      (ix)
1955+ 2668
1956+ 2668              //  ______________________________________________________________________
1957+ 2668              //
1958+ 2668              // c!           c a --
1959+ 2668              // fetch 16 bit number n from address a. Z80 keeps high byte is in high memory
1960+ 2668                              New_Def CSTORE, "C!", is_code, is_normal
1960+ 2668             >
1960+ 2668             >Dict_Ptr        defl    $
1960+ 2668             >
1960+ 2668             >//              ______________________________________________________________________
1960+ 2668             >//              Heap part
1960+ 2668             >
1960+ 2668             >
1960+ 2668             >                org     (Heap_Ptr & $1FFF) + $E000
1960+ E376             >
1960+ E376             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1960+ E376             >Latest_Definition defl  Heap_Ptr
1960+ E376             >
1960+ E376             >                // dummy db directives used to calculate length of namec
1960+ E376 43 21       >                db      "C!"
1960+ E378             >len_NFA         defl    $ - temp_NFA
1960+ E378             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1960+ E376             >
1960+ E376 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1960+ E377 43 21       >                db      "C!"               // name string in 7-bit ascii, but
1960+ E379             >                org     $-1                 // alter last byte of Name just above to set
1960+ E378 A1          >                db      {b $} | END_BIT     // msb as name end
1960+ E379             >
1960+ E379 6F 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1960+ E37B             >Prev_Ptr        defl    Heap_Ptr
1960+ E37B             >
1960+ E37B             >mirror_Ptr      defl    $
1960+ E37B             >
1960+ E37B 6A 26       >                dw      Dict_Ptr + 2        // xt
1960+ E37D             >Heap_Ptr        defl    $ - $E000           // save current HP
1960+ E37D             >
1960+ E37D             >Current_HP      defl  $ - $E000             // used to set HP once!
1960+ E37D             >
1960+ E37D             >//              ______________________________________________________________________
1960+ E37D             >//              Dictionary part
1960+ E37D             >
1960+ E37D             >                org     Dict_Ptr
1960+ 2668             >
1960+ 2668 7B 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1960+ 266A             >
1960+ 266A             >CSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1960+ 266A ~           >                call    runcode ; ok        // for primitive definitions  actual code
1960+ 266A ~           >
1960+ 266A ~           >
1960+ 266A             >                endif           ; ok        // for other definitions it "points" the correct handler
1960+ 266A             >                // Use of "; ok" to suppress "warning[fwdref]"
1960+ 266A             >
1960+ 266A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1961+ 266A D9                           exx
1962+ 266B E1                           pop     hl                  // < address
1963+ 266C D1                           pop     de
1964+ 266D 73                           ld      (hl), e             // low-byte
1965+ 266E D9                           exx
1966+ 266F                              next
1966+ 266F DD E9       >                jp      (ix)
1967+ 2671
1968+ 2671              //  ______________________________________________________________________
1969+ 2671              //
1970+ 2671              // 2@           a -- d
1971+ 2671              // fetch a 32 bits number d from address a and leaves it on top of the
1972+ 2671              // stack as two single numbers, high part as top of the stack.
1973+ 2671              // A double number is normally kept in CPU registers as HLDE.
1974+ 2671              // On stack a double number is treated as two single numbers
1975+ 2671              // where BC is on the top of the stack and HL is the second from top,
1976+ 2671              // so the sign of the number can be checked on top of stack
1977+ 2671              // and in the stack memory it appears as LHED.
1978+ 2671                              New_Def TWO_FETCH, "2@", is_code, is_normal
1978+ 2671             >
1978+ 2671             >Dict_Ptr        defl    $
1978+ 2671             >
1978+ 2671             >//              ______________________________________________________________________
1978+ 2671             >//              Heap part
1978+ 2671             >
1978+ 2671             >
1978+ 2671             >                org     (Heap_Ptr & $1FFF) + $E000
1978+ E37D             >
1978+ E37D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1978+ E37D             >Latest_Definition defl  Heap_Ptr
1978+ E37D             >
1978+ E37D             >                // dummy db directives used to calculate length of namec
1978+ E37D 32 40       >                db      "2@"
1978+ E37F             >len_NFA         defl    $ - temp_NFA
1978+ E37F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1978+ E37D             >
1978+ E37D 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1978+ E37E 32 40       >                db      "2@"               // name string in 7-bit ascii, but
1978+ E380             >                org     $-1                 // alter last byte of Name just above to set
1978+ E37F C0          >                db      {b $} | END_BIT     // msb as name end
1978+ E380             >
1978+ E380 76 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1978+ E382             >Prev_Ptr        defl    Heap_Ptr
1978+ E382             >
1978+ E382             >mirror_Ptr      defl    $
1978+ E382             >
1978+ E382 73 26       >                dw      Dict_Ptr + 2        // xt
1978+ E384             >Heap_Ptr        defl    $ - $E000           // save current HP
1978+ E384             >
1978+ E384             >Current_HP      defl  $ - $E000             // used to set HP once!
1978+ E384             >
1978+ E384             >//              ______________________________________________________________________
1978+ E384             >//              Dictionary part
1978+ E384             >
1978+ E384             >                org     Dict_Ptr
1978+ 2671             >
1978+ 2671 82 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1978+ 2673             >
1978+ 2673             >TWO_FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1978+ 2673 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1978+ 2673 ~           >
1978+ 2673 ~           >
1978+ 2673             >                endif           ; ok        // for other definitions it "points" the correct handler
1978+ 2673             >                // Use of "; ok" to suppress "warning[fwdref]"
1978+ 2673             >
1978+ 2673             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1979+ 2673 D9                           exx
1980+ 2674 E1                           pop     hl                  // address
1981+ 2675 5E                           ld      e, (hl)             // low-byte
1982+ 2676 23                           inc     hl
1983+ 2677 56                           ld      d, (hl)             // high-byte
1984+ 2678 23                           inc     hl
1985+ 2679 7E                           ld      a, (hl)             // low-byte
1986+ 267A 23                           inc     hl
1987+ 267B 66                           ld      h, (hl)             // high-byte
1988+ 267C 6F                           ld      l, a
1989+ 267D E5                           push    hl
1990+ 267E D5                           push    de
1991+ 267F D9                           exx
1992+ 2680                              next
1992+ 2680 DD E9       >                jp      (ix)
1993+ 2682
1994+ 2682              //  ______________________________________________________________________
1995+ 2682              //
1996+ 2682              // 2!           d a --
1997+ 2682              // stores a 32 bits number d from address a and leaves it on top of the
1998+ 2682              // stack as two single numbers, high part as top of the stack.
1999+ 2682              // A double number is normally kept in CPU registers as HLDE.
2000+ 2682              // On stack a double number is treated as two single numbers
2001+ 2682              // where BC is on the top of the stack and HL is the second from top,
2002+ 2682              // so the sign of the number can be checked on top of stack
2003+ 2682              // and in the stack memory it appears as LHED.
2004+ 2682                              New_Def TWO_STORE, "2!", is_code, is_normal
2004+ 2682             >
2004+ 2682             >Dict_Ptr        defl    $
2004+ 2682             >
2004+ 2682             >//              ______________________________________________________________________
2004+ 2682             >//              Heap part
2004+ 2682             >
2004+ 2682             >
2004+ 2682             >                org     (Heap_Ptr & $1FFF) + $E000
2004+ E384             >
2004+ E384             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2004+ E384             >Latest_Definition defl  Heap_Ptr
2004+ E384             >
2004+ E384             >                // dummy db directives used to calculate length of namec
2004+ E384 32 21       >                db      "2!"
2004+ E386             >len_NFA         defl    $ - temp_NFA
2004+ E386             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2004+ E384             >
2004+ E384 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2004+ E385 32 21       >                db      "2!"               // name string in 7-bit ascii, but
2004+ E387             >                org     $-1                 // alter last byte of Name just above to set
2004+ E386 A1          >                db      {b $} | END_BIT     // msb as name end
2004+ E387             >
2004+ E387 7D 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2004+ E389             >Prev_Ptr        defl    Heap_Ptr
2004+ E389             >
2004+ E389             >mirror_Ptr      defl    $
2004+ E389             >
2004+ E389 84 26       >                dw      Dict_Ptr + 2        // xt
2004+ E38B             >Heap_Ptr        defl    $ - $E000           // save current HP
2004+ E38B             >
2004+ E38B             >Current_HP      defl  $ - $E000             // used to set HP once!
2004+ E38B             >
2004+ E38B             >//              ______________________________________________________________________
2004+ E38B             >//              Dictionary part
2004+ E38B             >
2004+ E38B             >                org     Dict_Ptr
2004+ 2682             >
2004+ 2682 89 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2004+ 2684             >
2004+ 2684             >TWO_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2004+ 2684 ~           >                call    runcode ; ok        // for primitive definitions  actual code
2004+ 2684 ~           >
2004+ 2684 ~           >
2004+ 2684             >                endif           ; ok        // for other definitions it "points" the correct handler
2004+ 2684             >                // Use of "; ok" to suppress "warning[fwdref]"
2004+ 2684             >
2004+ 2684             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2005+ 2684 D9                           exx
2006+ 2685 E1                           pop     hl                  // address
2007+ 2686 C1                           pop     bc                  // < high-part
2008+ 2687 D1                           pop     de                  // < low-part > Instruction Pointer
2009+ 2688 71                           ld      (hl), c
2010+ 2689 23                           inc     hl
2011+ 268A 70                           ld      (hl), b
2012+ 268B 23                           inc     hl
2013+ 268C 73                           ld      (hl), e
2014+ 268D 23                           inc     hl
2015+ 268E 72                           ld      (hl), d
2016+ 268F D9                           exx
2017+ 2690                              next
2017+ 2690 DD E9       >                jp      (ix)
2018+ 2692
2019+ 2692              //  ______________________________________________________________________
2020+ 2692              //
2021+ 2692              // p@           a -- c
2022+ 2692              // Read one byte from port a and leave the result on top of stack
2023+ 2692                              New_Def PFETCH, "P@", is_code, is_normal
2023+ 2692             >
2023+ 2692             >Dict_Ptr        defl    $
2023+ 2692             >
2023+ 2692             >//              ______________________________________________________________________
2023+ 2692             >//              Heap part
2023+ 2692             >
2023+ 2692             >
2023+ 2692             >                org     (Heap_Ptr & $1FFF) + $E000
2023+ E38B             >
2023+ E38B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2023+ E38B             >Latest_Definition defl  Heap_Ptr
2023+ E38B             >
2023+ E38B             >                // dummy db directives used to calculate length of namec
2023+ E38B 50 40       >                db      "P@"
2023+ E38D             >len_NFA         defl    $ - temp_NFA
2023+ E38D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2023+ E38B             >
2023+ E38B 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2023+ E38C 50 40       >                db      "P@"               // name string in 7-bit ascii, but
2023+ E38E             >                org     $-1                 // alter last byte of Name just above to set
2023+ E38D C0          >                db      {b $} | END_BIT     // msb as name end
2023+ E38E             >
2023+ E38E 84 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2023+ E390             >Prev_Ptr        defl    Heap_Ptr
2023+ E390             >
2023+ E390             >mirror_Ptr      defl    $
2023+ E390             >
2023+ E390 94 26       >                dw      Dict_Ptr + 2        // xt
2023+ E392             >Heap_Ptr        defl    $ - $E000           // save current HP
2023+ E392             >
2023+ E392             >Current_HP      defl  $ - $E000             // used to set HP once!
2023+ E392             >
2023+ E392             >//              ______________________________________________________________________
2023+ E392             >//              Dictionary part
2023+ E392             >
2023+ E392             >                org     Dict_Ptr
2023+ 2692             >
2023+ 2692 90 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2023+ 2694             >
2023+ 2694             >PFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2023+ 2694 ~           >                call    runcode ; ok        // for primitive definitions  actual code
2023+ 2694 ~           >
2023+ 2694 ~           >
2023+ 2694             >                endif           ; ok        // for other definitions it "points" the correct handler
2023+ 2694             >                // Use of "; ok" to suppress "warning[fwdref]"
2023+ 2694             >
2023+ 2694             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2024+ 2694 D9                           exx
2025+ 2695 C1                           pop     bc
2026+ 2696 26 00                        ld      h, 0
2027+ 2698 ED 68                        in      l, (c)
2028+ 269A E5                           push    hl
2029+ 269B D9                           exx
2030+ 269C                              next
2030+ 269C DD E9       >                jp      (ix)
2031+ 269E
2032+ 269E              //  ______________________________________________________________________
2033+ 269E              //
2034+ 269E              // p!           c a --
2035+ 269E              // Send one byte (top of stack) to port a
2036+ 269E                              New_Def PSTORE, "P!", is_code, is_normal
2036+ 269E             >
2036+ 269E             >Dict_Ptr        defl    $
2036+ 269E             >
2036+ 269E             >//              ______________________________________________________________________
2036+ 269E             >//              Heap part
2036+ 269E             >
2036+ 269E             >
2036+ 269E             >                org     (Heap_Ptr & $1FFF) + $E000
2036+ E392             >
2036+ E392             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2036+ E392             >Latest_Definition defl  Heap_Ptr
2036+ E392             >
2036+ E392             >                // dummy db directives used to calculate length of namec
2036+ E392 50 21       >                db      "P!"
2036+ E394             >len_NFA         defl    $ - temp_NFA
2036+ E394             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2036+ E392             >
2036+ E392 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2036+ E393 50 21       >                db      "P!"               // name string in 7-bit ascii, but
2036+ E395             >                org     $-1                 // alter last byte of Name just above to set
2036+ E394 A1          >                db      {b $} | END_BIT     // msb as name end
2036+ E395             >
2036+ E395 8B 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2036+ E397             >Prev_Ptr        defl    Heap_Ptr
2036+ E397             >
2036+ E397             >mirror_Ptr      defl    $
2036+ E397             >
2036+ E397 A0 26       >                dw      Dict_Ptr + 2        // xt
2036+ E399             >Heap_Ptr        defl    $ - $E000           // save current HP
2036+ E399             >
2036+ E399             >Current_HP      defl  $ - $E000             // used to set HP once!
2036+ E399             >
2036+ E399             >//              ______________________________________________________________________
2036+ E399             >//              Dictionary part
2036+ E399             >
2036+ E399             >                org     Dict_Ptr
2036+ 269E             >
2036+ 269E 97 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2036+ 26A0             >
2036+ 26A0             >PSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2036+ 26A0 ~           >                call    runcode ; ok        // for primitive definitions  actual code
2036+ 26A0 ~           >
2036+ 26A0 ~           >
2036+ 26A0             >                endif           ; ok        // for other definitions it "points" the correct handler
2036+ 26A0             >                // Use of "; ok" to suppress "warning[fwdref]"
2036+ 26A0             >
2036+ 26A0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2037+ 26A0 D9                           exx
2038+ 26A1 C1                           pop     bc
2039+ 26A2 E1                           pop     hl                  // < c
2040+ 26A3 ED 69                        out     (c), l              // low-byte
2041+ 26A5 D9                           exx
2042+ 26A6                              next
2042+ 26A6 DD E9       >                jp      (ix)
2043+ 26A8
2044+ 26A8
2045+ 26A8              //  ______________________________________________________________________
2046+ 26A8              //
2047+ 26A8              // 2*           n1 -- n2
2048+ 26A8              // doubles the number at top of stack
2049+ 26A8                              New_Def TWO_MUL, "2*", is_code, is_normal
2049+ 26A8             >
2049+ 26A8             >Dict_Ptr        defl    $
2049+ 26A8             >
2049+ 26A8             >//              ______________________________________________________________________
2049+ 26A8             >//              Heap part
2049+ 26A8             >
2049+ 26A8             >
2049+ 26A8             >                org     (Heap_Ptr & $1FFF) + $E000
2049+ E399             >
2049+ E399             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2049+ E399             >Latest_Definition defl  Heap_Ptr
2049+ E399             >
2049+ E399             >                // dummy db directives used to calculate length of namec
2049+ E399 32 2A       >                db      "2*"
2049+ E39B             >len_NFA         defl    $ - temp_NFA
2049+ E39B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2049+ E399             >
2049+ E399 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2049+ E39A 32 2A       >                db      "2*"               // name string in 7-bit ascii, but
2049+ E39C             >                org     $-1                 // alter last byte of Name just above to set
2049+ E39B AA          >                db      {b $} | END_BIT     // msb as name end
2049+ E39C             >
2049+ E39C 92 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2049+ E39E             >Prev_Ptr        defl    Heap_Ptr
2049+ E39E             >
2049+ E39E             >mirror_Ptr      defl    $
2049+ E39E             >
2049+ E39E AA 26       >                dw      Dict_Ptr + 2        // xt
2049+ E3A0             >Heap_Ptr        defl    $ - $E000           // save current HP
2049+ E3A0             >
2049+ E3A0             >Current_HP      defl  $ - $E000             // used to set HP once!
2049+ E3A0             >
2049+ E3A0             >//              ______________________________________________________________________
2049+ E3A0             >//              Dictionary part
2049+ E3A0             >
2049+ E3A0             >                org     Dict_Ptr
2049+ 26A8             >
2049+ 26A8 9E 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2049+ 26AA             >
2049+ 26AA             >TWO_MUL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2049+ 26AA ~           >                call    runcode ; ok        // for primitive definitions  actual code
2049+ 26AA ~           >
2049+ 26AA ~           >
2049+ 26AA             >                endif           ; ok        // for other definitions it "points" the correct handler
2049+ 26AA             >                // Use of "; ok" to suppress "warning[fwdref]"
2049+ 26AA             >
2049+ 26AA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2050+ 26AA              Two_Mul_Ptr:
2051+ 26AA E1                           pop     hl
2052+ 26AB 29                           add     hl, hl
2053+ 26AC
2054+ 26AC                              psh1
2054+ 26AC E5          >                push    hl
2054+ 26AD DD E9       >                jp      (ix)
2055+ 26AF
2056+ 26AF              //  ______________________________________________________________________
2057+ 26AF              //
2058+ 26AF              // 2/           n1 -- n2
2059+ 26AF              // halves the top of stack, sign is unchanged
2060+ 26AF                              New_Def TWO_DIV, "2/", is_code, is_normal
2060+ 26AF             >
2060+ 26AF             >Dict_Ptr        defl    $
2060+ 26AF             >
2060+ 26AF             >//              ______________________________________________________________________
2060+ 26AF             >//              Heap part
2060+ 26AF             >
2060+ 26AF             >
2060+ 26AF             >                org     (Heap_Ptr & $1FFF) + $E000
2060+ E3A0             >
2060+ E3A0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2060+ E3A0             >Latest_Definition defl  Heap_Ptr
2060+ E3A0             >
2060+ E3A0             >                // dummy db directives used to calculate length of namec
2060+ E3A0 32 2F       >                db      "2/"
2060+ E3A2             >len_NFA         defl    $ - temp_NFA
2060+ E3A2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2060+ E3A0             >
2060+ E3A0 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2060+ E3A1 32 2F       >                db      "2/"               // name string in 7-bit ascii, but
2060+ E3A3             >                org     $-1                 // alter last byte of Name just above to set
2060+ E3A2 AF          >                db      {b $} | END_BIT     // msb as name end
2060+ E3A3             >
2060+ E3A3 99 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2060+ E3A5             >Prev_Ptr        defl    Heap_Ptr
2060+ E3A5             >
2060+ E3A5             >mirror_Ptr      defl    $
2060+ E3A5             >
2060+ E3A5 B1 26       >                dw      Dict_Ptr + 2        // xt
2060+ E3A7             >Heap_Ptr        defl    $ - $E000           // save current HP
2060+ E3A7             >
2060+ E3A7             >Current_HP      defl  $ - $E000             // used to set HP once!
2060+ E3A7             >
2060+ E3A7             >//              ______________________________________________________________________
2060+ E3A7             >//              Dictionary part
2060+ E3A7             >
2060+ E3A7             >                org     Dict_Ptr
2060+ 26AF             >
2060+ 26AF A5 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2060+ 26B1             >
2060+ 26B1             >TWO_DIV:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2060+ 26B1 ~           >                call    runcode ; ok        // for primitive definitions  actual code
2060+ 26B1 ~           >
2060+ 26B1 ~           >
2060+ 26B1             >                endif           ; ok        // for other definitions it "points" the correct handler
2060+ 26B1             >                // Use of "; ok" to suppress "warning[fwdref]"
2060+ 26B1             >
2060+ 26B1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2061+ 26B1 E1                           pop     hl
2062+ 26B2 CB 2C                        sra     h
2063+ 26B4 CB 1D                        rr      l
2064+ 26B6
2065+ 26B6                              psh1
2065+ 26B6 E5          >                push    hl
2065+ 26B7 DD E9       >                jp      (ix)
2066+ 26B9
2067+ 26B9              //  ______________________________________________________________________
2068+ 26B9              //
2069+ 26B9              // lshift       n1 u -- n2
2070+ 26B9              // bit left shift of u bits
2071+ 26B9                              New_Def LSHIFT, "LSHIFT", is_code, is_normal
2071+ 26B9             >
2071+ 26B9             >Dict_Ptr        defl    $
2071+ 26B9             >
2071+ 26B9             >//              ______________________________________________________________________
2071+ 26B9             >//              Heap part
2071+ 26B9             >
2071+ 26B9             >
2071+ 26B9             >                org     (Heap_Ptr & $1FFF) + $E000
2071+ E3A7             >
2071+ E3A7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2071+ E3A7             >Latest_Definition defl  Heap_Ptr
2071+ E3A7             >
2071+ E3A7             >                // dummy db directives used to calculate length of namec
2071+ E3A7 4C 53 48 49 >                db      "LSHIFT"
2071+ E3AB 46 54       >
2071+ E3AD             >len_NFA         defl    $ - temp_NFA
2071+ E3AD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2071+ E3A7             >
2071+ E3A7 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2071+ E3A8 4C 53 48 49 >                db      "LSHIFT"               // name string in 7-bit ascii, but
2071+ E3AC 46 54       >
2071+ E3AE             >                org     $-1                 // alter last byte of Name just above to set
2071+ E3AD D4          >                db      {b $} | END_BIT     // msb as name end
2071+ E3AE             >
2071+ E3AE A0 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2071+ E3B0             >Prev_Ptr        defl    Heap_Ptr
2071+ E3B0             >
2071+ E3B0             >mirror_Ptr      defl    $
2071+ E3B0             >
2071+ E3B0 BB 26       >                dw      Dict_Ptr + 2        // xt
2071+ E3B2             >Heap_Ptr        defl    $ - $E000           // save current HP
2071+ E3B2             >
2071+ E3B2             >Current_HP      defl  $ - $E000             // used to set HP once!
2071+ E3B2             >
2071+ E3B2             >//              ______________________________________________________________________
2071+ E3B2             >//              Dictionary part
2071+ E3B2             >
2071+ E3B2             >                org     Dict_Ptr
2071+ 26B9             >
2071+ 26B9 B0 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2071+ 26BB             >
2071+ 26BB             >LSHIFT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2071+ 26BB ~           >                call    runcode ; ok        // for primitive definitions  actual code
2071+ 26BB ~           >
2071+ 26BB ~           >
2071+ 26BB             >                endif           ; ok        // for other definitions it "points" the correct handler
2071+ 26BB             >                // Use of "; ok" to suppress "warning[fwdref]"
2071+ 26BB             >
2071+ 26BB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2072+ 26BB D9                           exx
2073+ 26BC C1                           pop     bc
2074+ 26BD 41                           ld      b, c
2075+ 26BE D1                           pop     de
2076+ 26BF ED 28                        bsla    de, b
2077+ 26C1 D5                           push    de
2078+ 26C2 D9                           exx
2079+ 26C3                              next
2079+ 26C3 DD E9       >                jp      (ix)
2080+ 26C5
2081+ 26C5              //  ______________________________________________________________________
2082+ 26C5              //
2083+ 26C5              // rshift       n1 u -- n2
2084+ 26C5              // bit right shift of u bits
2085+ 26C5                              New_Def RSHIFT, "RSHIFT", is_code, is_normal
2085+ 26C5             >
2085+ 26C5             >Dict_Ptr        defl    $
2085+ 26C5             >
2085+ 26C5             >//              ______________________________________________________________________
2085+ 26C5             >//              Heap part
2085+ 26C5             >
2085+ 26C5             >
2085+ 26C5             >                org     (Heap_Ptr & $1FFF) + $E000
2085+ E3B2             >
2085+ E3B2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2085+ E3B2             >Latest_Definition defl  Heap_Ptr
2085+ E3B2             >
2085+ E3B2             >                // dummy db directives used to calculate length of namec
2085+ E3B2 52 53 48 49 >                db      "RSHIFT"
2085+ E3B6 46 54       >
2085+ E3B8             >len_NFA         defl    $ - temp_NFA
2085+ E3B8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2085+ E3B2             >
2085+ E3B2 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2085+ E3B3 52 53 48 49 >                db      "RSHIFT"               // name string in 7-bit ascii, but
2085+ E3B7 46 54       >
2085+ E3B9             >                org     $-1                 // alter last byte of Name just above to set
2085+ E3B8 D4          >                db      {b $} | END_BIT     // msb as name end
2085+ E3B9             >
2085+ E3B9 A7 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2085+ E3BB             >Prev_Ptr        defl    Heap_Ptr
2085+ E3BB             >
2085+ E3BB             >mirror_Ptr      defl    $
2085+ E3BB             >
2085+ E3BB C7 26       >                dw      Dict_Ptr + 2        // xt
2085+ E3BD             >Heap_Ptr        defl    $ - $E000           // save current HP
2085+ E3BD             >
2085+ E3BD             >Current_HP      defl  $ - $E000             // used to set HP once!
2085+ E3BD             >
2085+ E3BD             >//              ______________________________________________________________________
2085+ E3BD             >//              Dictionary part
2085+ E3BD             >
2085+ E3BD             >                org     Dict_Ptr
2085+ 26C5             >
2085+ 26C5 BB 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2085+ 26C7             >
2085+ 26C7             >RSHIFT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2085+ 26C7 ~           >                call    runcode ; ok        // for primitive definitions  actual code
2085+ 26C7 ~           >
2085+ 26C7 ~           >
2085+ 26C7             >                endif           ; ok        // for other definitions it "points" the correct handler
2085+ 26C7             >                // Use of "; ok" to suppress "warning[fwdref]"
2085+ 26C7             >
2085+ 26C7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2086+ 26C7 D9                           exx
2087+ 26C8 C1                           pop     bc
2088+ 26C9 41                           ld      b, c
2089+ 26CA D1                           pop     de
2090+ 26CB ED 2A                        bsrl    de, b
2091+ 26CD D5                           push    de
2092+ 26CE D9                           exx
2093+ 26CF                              next
2093+ 26CF DD E9       >                jp      (ix)
2094+ 26D1
2095+ 26D1              //  ______________________________________________________________________
2096+ 26D1              //
2097+ 26D1              // cells        n1 -- n2
2098+ 26D1              // decrement by 2 top of stack
2099+ 26D1                              New_Def CELLS, "CELLS", is_code, is_normal
2099+ 26D1             >
2099+ 26D1             >Dict_Ptr        defl    $
2099+ 26D1             >
2099+ 26D1             >//              ______________________________________________________________________
2099+ 26D1             >//              Heap part
2099+ 26D1             >
2099+ 26D1             >
2099+ 26D1             >                org     (Heap_Ptr & $1FFF) + $E000
2099+ E3BD             >
2099+ E3BD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2099+ E3BD             >Latest_Definition defl  Heap_Ptr
2099+ E3BD             >
2099+ E3BD             >                // dummy db directives used to calculate length of namec
2099+ E3BD 43 45 4C 4C >                db      "CELLS"
2099+ E3C1 53          >
2099+ E3C2             >len_NFA         defl    $ - temp_NFA
2099+ E3C2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2099+ E3BD             >
2099+ E3BD 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2099+ E3BE 43 45 4C 4C >                db      "CELLS"               // name string in 7-bit ascii, but
2099+ E3C2 53          >
2099+ E3C3             >                org     $-1                 // alter last byte of Name just above to set
2099+ E3C2 D3          >                db      {b $} | END_BIT     // msb as name end
2099+ E3C3             >
2099+ E3C3 B2 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2099+ E3C5             >Prev_Ptr        defl    Heap_Ptr
2099+ E3C5             >
2099+ E3C5             >mirror_Ptr      defl    $
2099+ E3C5             >
2099+ E3C5 D3 26       >                dw      Dict_Ptr + 2        // xt
2099+ E3C7             >Heap_Ptr        defl    $ - $E000           // save current HP
2099+ E3C7             >
2099+ E3C7             >Current_HP      defl  $ - $E000             // used to set HP once!
2099+ E3C7             >
2099+ E3C7             >//              ______________________________________________________________________
2099+ E3C7             >//              Dictionary part
2099+ E3C7             >
2099+ E3C7             >                org     Dict_Ptr
2099+ 26D1             >
2099+ 26D1 C5 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2099+ 26D3             >
2099+ 26D3             >CELLS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2099+ 26D3 ~           >                call    runcode ; ok        // for primitive definitions  actual code
2099+ 26D3 ~           >
2099+ 26D3 ~           >
2099+ 26D3             >                endif           ; ok        // for other definitions it "points" the correct handler
2099+ 26D3             >                // Use of "; ok" to suppress "warning[fwdref]"
2099+ 26D3             >
2099+ 26D3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2100+ 26D3 C3 AA 26                     jp      Two_Mul_Ptr
2101+ 26D6
2102+ 26D6
2103+ 26D6              //  ______________________________________________________________________
2104+ 26D6
# file closed: C:\Zx\CSpect\Projects\vForth17_DOT/source/L0.asm
 122  26D6                              include "L1.asm"
# file opened: C:\Zx\CSpect\Projects\vForth17_DOT/source/L1.asm
   1+ 26D6              //  ______________________________________________________________________
   2+ 26D6              //
   3+ 26D6              //  L1.asm
   4+ 26D6              //
   5+ 26D6              //  Level-1 definitions and derivate
   6+ 26D6              //  ______________________________________________________________________
   7+ 26D6
   8+ 26D6              //  ______________________________________________________________________
   9+ 26D6              //
  10+ 26D6              // :            -- cccc     ( compile time )
  11+ 26D6              //              i*x -- j*x  ( run time )
  12+ 26D6              // Colon Definition
  13+ 26D6                              Colon_Def COLON, ":", is_normal      // has forward-ref
  13+ 26D6             >                New_Def  COLON, ":", Enter_Ptr, is_normal ; ok
  13+ 26D6             >
  13+ 26D6             >Dict_Ptr        defl    $
  13+ 26D6             >
  13+ 26D6             >//              ______________________________________________________________________
  13+ 26D6             >//              Heap part
  13+ 26D6             >
  13+ 26D6             >
  13+ 26D6             >                org     (Heap_Ptr & $1FFF) + $E000
  13+ E3C7             >
  13+ E3C7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13+ E3C7             >Latest_Definition defl  Heap_Ptr
  13+ E3C7             >
  13+ E3C7             >                // dummy db directives used to calculate length of namec
  13+ E3C7 3A          >                db      ":"
  13+ E3C8             >len_NFA         defl    $ - temp_NFA
  13+ E3C8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13+ E3C7             >
  13+ E3C7 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  13+ E3C8 3A          >                db      ":"               // name string in 7-bit ascii, but
  13+ E3C9             >                org     $-1                 // alter last byte of Name just above to set
  13+ E3C8 BA          >                db      {b $} | END_BIT     // msb as name end
  13+ E3C9             >
  13+ E3C9 BD 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  13+ E3CB             >Prev_Ptr        defl    Heap_Ptr
  13+ E3CB             >
  13+ E3CB             >mirror_Ptr      defl    $
  13+ E3CB             >
  13+ E3CB D8 26       >                dw      Dict_Ptr + 2        // xt
  13+ E3CD             >Heap_Ptr        defl    $ - $E000           // save current HP
  13+ E3CD             >
  13+ E3CD             >Current_HP      defl  $ - $E000             // used to set HP once!
  13+ E3CD             >
  13+ E3CD             >//              ______________________________________________________________________
  13+ E3CD             >//              Dictionary part
  13+ E3CD             >
  13+ E3CD             >                org     Dict_Ptr
  13+ 26D6             >
  13+ 26D6 CB 03       >                dw      mirror_Ptr - $E000 + Heap_offset
  13+ 26D8             >
  13+ 26D8             >COLON:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  13+ 26D8 CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  13+ 26DB             >
  13+ 26DB             >
  13+ 26DB             >                endif           ; ok        // for other definitions it "points" the correct handler
  13+ 26DB             >                // Use of "; ok" to suppress "warning[fwdref]"
  13+ 26DB             >
  13+ 26DB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14+ 26DB
  15+ 26DB CD 2A                        dw      QEXEC                   // ?exec
  16+ 26DD 98 2A                        dw      STORE_CSP               // !csp
  17+ 26DF 09 28 4C 26                  dw      CURRENT, FETCH          // current @
  18+ 26E3 03 28 56 26                  dw      CONTEXT, STORE          // context !
  19+ 26E7 B9 30                        dw      CREATE                  // create  ( forward )
  20+ 26E9 51 2B                        dw      SMUDGE                  // dmudge
  21+ 26EB 42 2B                        dw      SQUARED_CLOSE           // ]
  22+ 26ED 8D 2B                        dw      C_SEMICOLON_CODE        // ;code ( change the 3-bytes CFA of defining word to call Enter_Ptr )
  23+ 26EF                                                              // ... immediate
  24+ 26EF              Enter_Ptr:
  25+ 26EF                              // via call coded in CFA
  26+ 26EF EB                           ex      de, hl //**
  27+ 26F0                              // *** ldhlrp
  28+ 26F0 2B                           dec     hl                  // push on Return-Stack current Instruction-Pointer
  29+ 26F1 70                           ld      (hl), b
  30+ 26F2 2B                           dec     hl
  31+ 26F3 71                           ld      (hl), c
  32+ 26F4                              // *** ldrphl
  33+ 26F4 EB                           ex      de, hl //**
  34+ 26F5
  35+ 26F5
  36+ 26F5 C1                           pop     bc                  // points to PFA of "this" word
  37+ 26F6                              next
  37+ 26F6 DD E9       >                jp      (ix)
  38+ 26F8
  39+ 26F8              //  ______________________________________________________________________
  40+ 26F8              //
  41+ 26F8              // ;            --
  42+ 26F8              // Semicolon. End of Colon-Definition. Stack must be balanced.
  43+ 26F8                              Colon_Def SEMICOLON, ";", is_immediate   // has forward-ref
  43+ 26F8             >                New_Def  SEMICOLON, ";", Enter_Ptr, is_immediate ; ok
  43+ 26F8             >
  43+ 26F8             >Dict_Ptr        defl    $
  43+ 26F8             >
  43+ 26F8             >//              ______________________________________________________________________
  43+ 26F8             >//              Heap part
  43+ 26F8             >
  43+ 26F8             >
  43+ 26F8             >                org     (Heap_Ptr & $1FFF) + $E000
  43+ E3CD             >
  43+ E3CD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  43+ E3CD             >Latest_Definition defl  Heap_Ptr
  43+ E3CD             >
  43+ E3CD             >                // dummy db directives used to calculate length of namec
  43+ E3CD 3B          >                db      ";"
  43+ E3CE             >len_NFA         defl    $ - temp_NFA
  43+ E3CE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  43+ E3CD             >
  43+ E3CD C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
  43+ E3CE 3B          >                db      ";"               // name string in 7-bit ascii, but
  43+ E3CF             >                org     $-1                 // alter last byte of Name just above to set
  43+ E3CE BB          >                db      {b $} | END_BIT     // msb as name end
  43+ E3CF             >
  43+ E3CF C7 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  43+ E3D1             >Prev_Ptr        defl    Heap_Ptr
  43+ E3D1             >
  43+ E3D1             >mirror_Ptr      defl    $
  43+ E3D1             >
  43+ E3D1 FA 26       >                dw      Dict_Ptr + 2        // xt
  43+ E3D3             >Heap_Ptr        defl    $ - $E000           // save current HP
  43+ E3D3             >
  43+ E3D3             >Current_HP      defl  $ - $E000             // used to set HP once!
  43+ E3D3             >
  43+ E3D3             >//              ______________________________________________________________________
  43+ E3D3             >//              Dictionary part
  43+ E3D3             >
  43+ E3D3             >                org     Dict_Ptr
  43+ 26F8             >
  43+ 26F8 D1 03       >                dw      mirror_Ptr - $E000 + Heap_offset
  43+ 26FA             >
  43+ 26FA             >SEMICOLON:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  43+ 26FA CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  43+ 26FD             >
  43+ 26FD             >
  43+ 26FD             >                endif           ; ok        // for other definitions it "points" the correct handler
  43+ 26FD             >                // Use of "; ok" to suppress "warning[fwdref]"
  43+ 26FD             >
  43+ 26FD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  44+ 26FD
  45+ 26FD ED 2A                        dw      QCSP                    // ?csp
  46+ 26FF 15 2B 02 25                  dw      COMPILE, EXIT           // [compile] ;s
  47+ 2703 51 2B                        dw      SMUDGE                  // smudge
  48+ 2705 35 2B                        dw      SQUARED_OPEN            // [
  49+ 2707 02 25                        dw      EXIT                    // ; immediate
  50+ 2709
  51+ 2709              //  ______________________________________________________________________
  52+ 2709              //
  53+ 2709              // noop         --
  54+ 2709
  55+ 2709                              New_Def NOOP, "NOOP", is_code, is_normal
  55+ 2709             >
  55+ 2709             >Dict_Ptr        defl    $
  55+ 2709             >
  55+ 2709             >//              ______________________________________________________________________
  55+ 2709             >//              Heap part
  55+ 2709             >
  55+ 2709             >
  55+ 2709             >                org     (Heap_Ptr & $1FFF) + $E000
  55+ E3D3             >
  55+ E3D3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  55+ E3D3             >Latest_Definition defl  Heap_Ptr
  55+ E3D3             >
  55+ E3D3             >                // dummy db directives used to calculate length of namec
  55+ E3D3 4E 4F 4F 50 >                db      "NOOP"
  55+ E3D7             >len_NFA         defl    $ - temp_NFA
  55+ E3D7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  55+ E3D3             >
  55+ E3D3 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  55+ E3D4 4E 4F 4F 50 >                db      "NOOP"               // name string in 7-bit ascii, but
  55+ E3D8             >                org     $-1                 // alter last byte of Name just above to set
  55+ E3D7 D0          >                db      {b $} | END_BIT     // msb as name end
  55+ E3D8             >
  55+ E3D8 CD 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  55+ E3DA             >Prev_Ptr        defl    Heap_Ptr
  55+ E3DA             >
  55+ E3DA             >mirror_Ptr      defl    $
  55+ E3DA             >
  55+ E3DA 0B 27       >                dw      Dict_Ptr + 2        // xt
  55+ E3DC             >Heap_Ptr        defl    $ - $E000           // save current HP
  55+ E3DC             >
  55+ E3DC             >Current_HP      defl  $ - $E000             // used to set HP once!
  55+ E3DC             >
  55+ E3DC             >//              ______________________________________________________________________
  55+ E3DC             >//              Dictionary part
  55+ E3DC             >
  55+ E3DC             >                org     Dict_Ptr
  55+ 2709             >
  55+ 2709 DA 03       >                dw      mirror_Ptr - $E000 + Heap_offset
  55+ 270B             >
  55+ 270B             >NOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  55+ 270B ~           >                call    runcode ; ok        // for primitive definitions  actual code
  55+ 270B ~           >
  55+ 270B ~           >
  55+ 270B             >                endif           ; ok        // for other definitions it "points" the correct handler
  55+ 270B             >                // Use of "; ok" to suppress "warning[fwdref]"
  55+ 270B             >
  55+ 270B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  56+ 270B                              next
  56+ 270B DD E9       >                jp      (ix)
  57+ 270D
  58+ 270D              //  ______________________________________________________________________
  59+ 270D              //
  60+ 270D              // constant     n -- cccc     ( compile time )
  61+ 270D              //              -- n          ( run time )
  62+ 270D              // Constant definition.
  63+ 270D                              Colon_Def CONSTANT, "CONSTANT", is_normal   // has forward-ref
  63+ 270D             >                New_Def  CONSTANT, "CONSTANT", Enter_Ptr, is_normal ; ok
  63+ 270D             >
  63+ 270D             >Dict_Ptr        defl    $
  63+ 270D             >
  63+ 270D             >//              ______________________________________________________________________
  63+ 270D             >//              Heap part
  63+ 270D             >
  63+ 270D             >
  63+ 270D             >                org     (Heap_Ptr & $1FFF) + $E000
  63+ E3DC             >
  63+ E3DC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  63+ E3DC             >Latest_Definition defl  Heap_Ptr
  63+ E3DC             >
  63+ E3DC             >                // dummy db directives used to calculate length of namec
  63+ E3DC 43 4F 4E 53 >                db      "CONSTANT"
  63+ E3E0 54 41 4E 54 >
  63+ E3E4             >len_NFA         defl    $ - temp_NFA
  63+ E3E4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  63+ E3DC             >
  63+ E3DC 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  63+ E3DD 43 4F 4E 53 >                db      "CONSTANT"               // name string in 7-bit ascii, but
  63+ E3E1 54 41 4E 54 >
  63+ E3E5             >                org     $-1                 // alter last byte of Name just above to set
  63+ E3E4 D4          >                db      {b $} | END_BIT     // msb as name end
  63+ E3E5             >
  63+ E3E5 D3 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  63+ E3E7             >Prev_Ptr        defl    Heap_Ptr
  63+ E3E7             >
  63+ E3E7             >mirror_Ptr      defl    $
  63+ E3E7             >
  63+ E3E7 0F 27       >                dw      Dict_Ptr + 2        // xt
  63+ E3E9             >Heap_Ptr        defl    $ - $E000           // save current HP
  63+ E3E9             >
  63+ E3E9             >Current_HP      defl  $ - $E000             // used to set HP once!
  63+ E3E9             >
  63+ E3E9             >//              ______________________________________________________________________
  63+ E3E9             >//              Dictionary part
  63+ E3E9             >
  63+ E3E9             >                org     Dict_Ptr
  63+ 270D             >
  63+ 270D E7 03       >                dw      mirror_Ptr - $E000 + Heap_offset
  63+ 270F             >
  63+ 270F             >CONSTANT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  63+ 270F CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  63+ 2712             >
  63+ 2712             >
  63+ 2712             >                endif           ; ok        // for other definitions it "points" the correct handler
  63+ 2712             >                // Use of "; ok" to suppress "warning[fwdref]"
  63+ 2712             >
  63+ 2712             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  64+ 2712 B9 30                        dw      CREATE                  // create
  65+ 2714 7F 28                        dw      COMMA                   // ,    ( at PFA then, store the value )
  66+ 2716 8D 2B                        dw      C_SEMICOLON_CODE        // ;code (  changes the 3-bytes CFA to call Constant_Ptr )
  67+ 2718              Constant_Ptr:
  68+ 2718
  69+ 2718
  70+ 2718 E1                           pop     hl
  71+ 2719
  72+ 2719 7E                           ld      a, (hl)
  73+ 271A 23                           inc     hl
  74+ 271B 66                           ld      h, (hl)
  75+ 271C 6F                           ld      l, a
  76+ 271D E5                           push    hl
  77+ 271E                              next
  77+ 271E DD E9       >                jp      (ix)
  78+ 2720
  79+ 2720              //  ______________________________________________________________________
  80+ 2720              //
  81+ 2720              // variable     n -- cccc     ( compile time )
  82+ 2720              //              -- a          ( run time )
  83+ 2720              // Variable definition, n is the initial value.
  84+ 2720                              Colon_Def VARIABLE, "VARIABLE", is_normal   // has forward-ref
  84+ 2720             >                New_Def  VARIABLE, "VARIABLE", Enter_Ptr, is_normal ; ok
  84+ 2720             >
  84+ 2720             >Dict_Ptr        defl    $
  84+ 2720             >
  84+ 2720             >//              ______________________________________________________________________
  84+ 2720             >//              Heap part
  84+ 2720             >
  84+ 2720             >
  84+ 2720             >                org     (Heap_Ptr & $1FFF) + $E000
  84+ E3E9             >
  84+ E3E9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  84+ E3E9             >Latest_Definition defl  Heap_Ptr
  84+ E3E9             >
  84+ E3E9             >                // dummy db directives used to calculate length of namec
  84+ E3E9 56 41 52 49 >                db      "VARIABLE"
  84+ E3ED 41 42 4C 45 >
  84+ E3F1             >len_NFA         defl    $ - temp_NFA
  84+ E3F1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  84+ E3E9             >
  84+ E3E9 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  84+ E3EA 56 41 52 49 >                db      "VARIABLE"               // name string in 7-bit ascii, but
  84+ E3EE 41 42 4C 45 >
  84+ E3F2             >                org     $-1                 // alter last byte of Name just above to set
  84+ E3F1 C5          >                db      {b $} | END_BIT     // msb as name end
  84+ E3F2             >
  84+ E3F2 DC 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  84+ E3F4             >Prev_Ptr        defl    Heap_Ptr
  84+ E3F4             >
  84+ E3F4             >mirror_Ptr      defl    $
  84+ E3F4             >
  84+ E3F4 22 27       >                dw      Dict_Ptr + 2        // xt
  84+ E3F6             >Heap_Ptr        defl    $ - $E000           // save current HP
  84+ E3F6             >
  84+ E3F6             >Current_HP      defl  $ - $E000             // used to set HP once!
  84+ E3F6             >
  84+ E3F6             >//              ______________________________________________________________________
  84+ E3F6             >//              Dictionary part
  84+ E3F6             >
  84+ E3F6             >                org     Dict_Ptr
  84+ 2720             >
  84+ 2720 F4 03       >                dw      mirror_Ptr - $E000 + Heap_offset
  84+ 2722             >
  84+ 2722             >VARIABLE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  84+ 2722 CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  84+ 2725             >
  84+ 2725             >
  84+ 2725             >                endif           ; ok        // for other definitions it "points" the correct handler
  84+ 2725             >                // Use of "; ok" to suppress "warning[fwdref]"
  84+ 2725             >
  84+ 2725             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  85+ 2725
  86+ 2725 44 27                        dw      ZERO
  87+ 2727 0F 27                        dw      CONSTANT                // constant
  88+ 2729 8D 2B                        dw      C_SEMICOLON_CODE        // ;code ( changes the 3-bytes CFA to call Variable_Ptr )
  89+ 272B              Variable_Ptr:
  90+ 272B
  91+ 272B
  92+ 272B
  93+ 272B
  94+ 272B                              next
  94+ 272B DD E9       >                jp      (ix)
  95+ 272D
  96+ 272D              //  ______________________________________________________________________
  97+ 272D              //
  98+ 272D              // user         b -- cccc     ( compile time )
  99+ 272D              //              -- a          ( run time )
 100+ 272D              // User variable definition
 101+ 272D                              Colon_Def USER, "USER", is_normal
 101+ 272D             >                New_Def  USER, "USER", Enter_Ptr, is_normal ; ok
 101+ 272D             >
 101+ 272D             >Dict_Ptr        defl    $
 101+ 272D             >
 101+ 272D             >//              ______________________________________________________________________
 101+ 272D             >//              Heap part
 101+ 272D             >
 101+ 272D             >
 101+ 272D             >                org     (Heap_Ptr & $1FFF) + $E000
 101+ E3F6             >
 101+ E3F6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 101+ E3F6             >Latest_Definition defl  Heap_Ptr
 101+ E3F6             >
 101+ E3F6             >                // dummy db directives used to calculate length of namec
 101+ E3F6 55 53 45 52 >                db      "USER"
 101+ E3FA             >len_NFA         defl    $ - temp_NFA
 101+ E3FA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 101+ E3F6             >
 101+ E3F6 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 101+ E3F7 55 53 45 52 >                db      "USER"               // name string in 7-bit ascii, but
 101+ E3FB             >                org     $-1                 // alter last byte of Name just above to set
 101+ E3FA D2          >                db      {b $} | END_BIT     // msb as name end
 101+ E3FB             >
 101+ E3FB E9 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 101+ E3FD             >Prev_Ptr        defl    Heap_Ptr
 101+ E3FD             >
 101+ E3FD             >mirror_Ptr      defl    $
 101+ E3FD             >
 101+ E3FD 2F 27       >                dw      Dict_Ptr + 2        // xt
 101+ E3FF             >Heap_Ptr        defl    $ - $E000           // save current HP
 101+ E3FF             >
 101+ E3FF             >Current_HP      defl  $ - $E000             // used to set HP once!
 101+ E3FF             >
 101+ E3FF             >//              ______________________________________________________________________
 101+ E3FF             >//              Dictionary part
 101+ E3FF             >
 101+ E3FF             >                org     Dict_Ptr
 101+ 272D             >
 101+ 272D FD 03       >                dw      mirror_Ptr - $E000 + Heap_offset
 101+ 272F             >
 101+ 272F             >USER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 101+ 272F CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 101+ 2732             >
 101+ 2732             >
 101+ 2732             >                endif           ; ok        // for other definitions it "points" the correct handler
 101+ 2732             >                // Use of "; ok" to suppress "warning[fwdref]"
 101+ 2732             >
 101+ 2732             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 102+ 2732
 103+ 2732 B9 30                        dw      CREATE                  // create
 104+ 2734 8E 28                        dw      CCOMMA                  // c,
 105+ 2736 8D 2B                        dw      C_SEMICOLON_CODE        // ;code () changes the 3-bytes CFA to call User_Ptr )
 106+ 2738
 107+ 2738
 108+ 2738              User_Ptr:
 109+ 2738                              // via call coded in CFA
 110+ 2738 E1                           pop     hl
 111+ 2739
 112+ 2739 7E                           ld      a, (hl)
 113+ 273A 2A 2E 20                     ld      hl, (USER_Pointer)
 114+ 273D ED 31                        add     hl, a
 115+ 273F E5                           push    hl
 116+ 2740                              next
 116+ 2740 DD E9       >                jp      (ix)
 117+ 2742
 118+ 2742              //  ______________________________________________________________________
 119+ 2742              //
 120+ 2742                              Constant_Def ZERO       ,   "0"     ,   0
 120+ 2742             >                New_Def  ZERO, "0", Constant_Ptr, is_normal
 120+ 2742             >
 120+ 2742             >Dict_Ptr        defl    $
 120+ 2742             >
 120+ 2742             >//              ______________________________________________________________________
 120+ 2742             >//              Heap part
 120+ 2742             >
 120+ 2742             >
 120+ 2742             >                org     (Heap_Ptr & $1FFF) + $E000
 120+ E3FF             >
 120+ E3FF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 120+ E3FF             >Latest_Definition defl  Heap_Ptr
 120+ E3FF             >
 120+ E3FF             >                // dummy db directives used to calculate length of namec
 120+ E3FF 30          >                db      "0"
 120+ E400             >len_NFA         defl    $ - temp_NFA
 120+ E400             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 120+ E3FF             >
 120+ E3FF 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 120+ E400 30          >                db      "0"               // name string in 7-bit ascii, but
 120+ E401             >                org     $-1                 // alter last byte of Name just above to set
 120+ E400 B0          >                db      {b $} | END_BIT     // msb as name end
 120+ E401             >
 120+ E401 F6 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 120+ E403             >Prev_Ptr        defl    Heap_Ptr
 120+ E403             >
 120+ E403             >mirror_Ptr      defl    $
 120+ E403             >
 120+ E403 44 27       >                dw      Dict_Ptr + 2        // xt
 120+ E405             >Heap_Ptr        defl    $ - $E000           // save current HP
 120+ E405             >
 120+ E405             >Current_HP      defl  $ - $E000             // used to set HP once!
 120+ E405             >
 120+ E405             >//              ______________________________________________________________________
 120+ E405             >//              Dictionary part
 120+ E405             >
 120+ E405             >                org     Dict_Ptr
 120+ 2742             >
 120+ 2742 03 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 120+ 2744             >
 120+ 2744             >ZERO:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 120+ 2744 CD 18 27    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 120+ 2747             >
 120+ 2747             >
 120+ 2747             >                endif           ; ok        // for other definitions it "points" the correct handler
 120+ 2747             >                // Use of "; ok" to suppress "warning[fwdref]"
 120+ 2747             >
 120+ 2747             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 120+ 2747 00 00       >                dw      0
 121+ 2749                              Constant_Def ONE        ,   "1"     ,   1
 121+ 2749             >                New_Def  ONE, "1", Constant_Ptr, is_normal
 121+ 2749             >
 121+ 2749             >Dict_Ptr        defl    $
 121+ 2749             >
 121+ 2749             >//              ______________________________________________________________________
 121+ 2749             >//              Heap part
 121+ 2749             >
 121+ 2749             >
 121+ 2749             >                org     (Heap_Ptr & $1FFF) + $E000
 121+ E405             >
 121+ E405             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 121+ E405             >Latest_Definition defl  Heap_Ptr
 121+ E405             >
 121+ E405             >                // dummy db directives used to calculate length of namec
 121+ E405 31          >                db      "1"
 121+ E406             >len_NFA         defl    $ - temp_NFA
 121+ E406             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 121+ E405             >
 121+ E405 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 121+ E406 31          >                db      "1"               // name string in 7-bit ascii, but
 121+ E407             >                org     $-1                 // alter last byte of Name just above to set
 121+ E406 B1          >                db      {b $} | END_BIT     // msb as name end
 121+ E407             >
 121+ E407 FF 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 121+ E409             >Prev_Ptr        defl    Heap_Ptr
 121+ E409             >
 121+ E409             >mirror_Ptr      defl    $
 121+ E409             >
 121+ E409 4B 27       >                dw      Dict_Ptr + 2        // xt
 121+ E40B             >Heap_Ptr        defl    $ - $E000           // save current HP
 121+ E40B             >
 121+ E40B             >Current_HP      defl  $ - $E000             // used to set HP once!
 121+ E40B             >
 121+ E40B             >//              ______________________________________________________________________
 121+ E40B             >//              Dictionary part
 121+ E40B             >
 121+ E40B             >                org     Dict_Ptr
 121+ 2749             >
 121+ 2749 09 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 121+ 274B             >
 121+ 274B             >ONE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 121+ 274B CD 18 27    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 121+ 274E             >
 121+ 274E             >
 121+ 274E             >                endif           ; ok        // for other definitions it "points" the correct handler
 121+ 274E             >                // Use of "; ok" to suppress "warning[fwdref]"
 121+ 274E             >
 121+ 274E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 121+ 274E 01 00       >                dw      1
 122+ 2750                              Constant_Def TWO        ,   "2"     ,   2
 122+ 2750             >                New_Def  TWO, "2", Constant_Ptr, is_normal
 122+ 2750             >
 122+ 2750             >Dict_Ptr        defl    $
 122+ 2750             >
 122+ 2750             >//              ______________________________________________________________________
 122+ 2750             >//              Heap part
 122+ 2750             >
 122+ 2750             >
 122+ 2750             >                org     (Heap_Ptr & $1FFF) + $E000
 122+ E40B             >
 122+ E40B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 122+ E40B             >Latest_Definition defl  Heap_Ptr
 122+ E40B             >
 122+ E40B             >                // dummy db directives used to calculate length of namec
 122+ E40B 32          >                db      "2"
 122+ E40C             >len_NFA         defl    $ - temp_NFA
 122+ E40C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 122+ E40B             >
 122+ E40B 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 122+ E40C 32          >                db      "2"               // name string in 7-bit ascii, but
 122+ E40D             >                org     $-1                 // alter last byte of Name just above to set
 122+ E40C B2          >                db      {b $} | END_BIT     // msb as name end
 122+ E40D             >
 122+ E40D 05 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 122+ E40F             >Prev_Ptr        defl    Heap_Ptr
 122+ E40F             >
 122+ E40F             >mirror_Ptr      defl    $
 122+ E40F             >
 122+ E40F 52 27       >                dw      Dict_Ptr + 2        // xt
 122+ E411             >Heap_Ptr        defl    $ - $E000           // save current HP
 122+ E411             >
 122+ E411             >Current_HP      defl  $ - $E000             // used to set HP once!
 122+ E411             >
 122+ E411             >//              ______________________________________________________________________
 122+ E411             >//              Dictionary part
 122+ E411             >
 122+ E411             >                org     Dict_Ptr
 122+ 2750             >
 122+ 2750 0F 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 122+ 2752             >
 122+ 2752             >TWO:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 122+ 2752 CD 18 27    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 122+ 2755             >
 122+ 2755             >
 122+ 2755             >                endif           ; ok        // for other definitions it "points" the correct handler
 122+ 2755             >                // Use of "; ok" to suppress "warning[fwdref]"
 122+ 2755             >
 122+ 2755             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 122+ 2755 02 00       >                dw      2
 123+ 2757                              Constant_Def THREE      ,   "3"     ,   3
 123+ 2757             >                New_Def  THREE, "3", Constant_Ptr, is_normal
 123+ 2757             >
 123+ 2757             >Dict_Ptr        defl    $
 123+ 2757             >
 123+ 2757             >//              ______________________________________________________________________
 123+ 2757             >//              Heap part
 123+ 2757             >
 123+ 2757             >
 123+ 2757             >                org     (Heap_Ptr & $1FFF) + $E000
 123+ E411             >
 123+ E411             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 123+ E411             >Latest_Definition defl  Heap_Ptr
 123+ E411             >
 123+ E411             >                // dummy db directives used to calculate length of namec
 123+ E411 33          >                db      "3"
 123+ E412             >len_NFA         defl    $ - temp_NFA
 123+ E412             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 123+ E411             >
 123+ E411 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 123+ E412 33          >                db      "3"               // name string in 7-bit ascii, but
 123+ E413             >                org     $-1                 // alter last byte of Name just above to set
 123+ E412 B3          >                db      {b $} | END_BIT     // msb as name end
 123+ E413             >
 123+ E413 0B 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 123+ E415             >Prev_Ptr        defl    Heap_Ptr
 123+ E415             >
 123+ E415             >mirror_Ptr      defl    $
 123+ E415             >
 123+ E415 59 27       >                dw      Dict_Ptr + 2        // xt
 123+ E417             >Heap_Ptr        defl    $ - $E000           // save current HP
 123+ E417             >
 123+ E417             >Current_HP      defl  $ - $E000             // used to set HP once!
 123+ E417             >
 123+ E417             >//              ______________________________________________________________________
 123+ E417             >//              Dictionary part
 123+ E417             >
 123+ E417             >                org     Dict_Ptr
 123+ 2757             >
 123+ 2757 15 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 123+ 2759             >
 123+ 2759             >THREE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 123+ 2759 CD 18 27    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 123+ 275C             >
 123+ 275C             >
 123+ 275C             >                endif           ; ok        // for other definitions it "points" the correct handler
 123+ 275C             >                // Use of "; ok" to suppress "warning[fwdref]"
 123+ 275C             >
 123+ 275C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 123+ 275C 03 00       >                dw      3
 124+ 275E                              Constant_Def NEG_ONE    ,   "-1"    ,  -1
 124+ 275E             >                New_Def  NEG_ONE, "-1", Constant_Ptr, is_normal
 124+ 275E             >
 124+ 275E             >Dict_Ptr        defl    $
 124+ 275E             >
 124+ 275E             >//              ______________________________________________________________________
 124+ 275E             >//              Heap part
 124+ 275E             >
 124+ 275E             >
 124+ 275E             >                org     (Heap_Ptr & $1FFF) + $E000
 124+ E417             >
 124+ E417             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 124+ E417             >Latest_Definition defl  Heap_Ptr
 124+ E417             >
 124+ E417             >                // dummy db directives used to calculate length of namec
 124+ E417 2D 31       >                db      "-1"
 124+ E419             >len_NFA         defl    $ - temp_NFA
 124+ E419             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 124+ E417             >
 124+ E417 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 124+ E418 2D 31       >                db      "-1"               // name string in 7-bit ascii, but
 124+ E41A             >                org     $-1                 // alter last byte of Name just above to set
 124+ E419 B1          >                db      {b $} | END_BIT     // msb as name end
 124+ E41A             >
 124+ E41A 11 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 124+ E41C             >Prev_Ptr        defl    Heap_Ptr
 124+ E41C             >
 124+ E41C             >mirror_Ptr      defl    $
 124+ E41C             >
 124+ E41C 60 27       >                dw      Dict_Ptr + 2        // xt
 124+ E41E             >Heap_Ptr        defl    $ - $E000           // save current HP
 124+ E41E             >
 124+ E41E             >Current_HP      defl  $ - $E000             // used to set HP once!
 124+ E41E             >
 124+ E41E             >//              ______________________________________________________________________
 124+ E41E             >//              Dictionary part
 124+ E41E             >
 124+ E41E             >                org     Dict_Ptr
 124+ 275E             >
 124+ 275E 1C 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 124+ 2760             >
 124+ 2760             >NEG_ONE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 124+ 2760 CD 18 27    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 124+ 2763             >
 124+ 2763             >
 124+ 2763             >                endif           ; ok        // for other definitions it "points" the correct handler
 124+ 2763             >                // Use of "; ok" to suppress "warning[fwdref]"
 124+ 2763             >
 124+ 2763             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 124+ 2763 FF FF       >                dw      -1
 125+ 2765                              Constant_Def BL         ,   "BL"    , $20
 125+ 2765             >                New_Def  BL, "BL", Constant_Ptr, is_normal
 125+ 2765             >
 125+ 2765             >Dict_Ptr        defl    $
 125+ 2765             >
 125+ 2765             >//              ______________________________________________________________________
 125+ 2765             >//              Heap part
 125+ 2765             >
 125+ 2765             >
 125+ 2765             >                org     (Heap_Ptr & $1FFF) + $E000
 125+ E41E             >
 125+ E41E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 125+ E41E             >Latest_Definition defl  Heap_Ptr
 125+ E41E             >
 125+ E41E             >                // dummy db directives used to calculate length of namec
 125+ E41E 42 4C       >                db      "BL"
 125+ E420             >len_NFA         defl    $ - temp_NFA
 125+ E420             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 125+ E41E             >
 125+ E41E 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 125+ E41F 42 4C       >                db      "BL"               // name string in 7-bit ascii, but
 125+ E421             >                org     $-1                 // alter last byte of Name just above to set
 125+ E420 CC          >                db      {b $} | END_BIT     // msb as name end
 125+ E421             >
 125+ E421 17 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 125+ E423             >Prev_Ptr        defl    Heap_Ptr
 125+ E423             >
 125+ E423             >mirror_Ptr      defl    $
 125+ E423             >
 125+ E423 67 27       >                dw      Dict_Ptr + 2        // xt
 125+ E425             >Heap_Ptr        defl    $ - $E000           // save current HP
 125+ E425             >
 125+ E425             >Current_HP      defl  $ - $E000             // used to set HP once!
 125+ E425             >
 125+ E425             >//              ______________________________________________________________________
 125+ E425             >//              Dictionary part
 125+ E425             >
 125+ E425             >                org     Dict_Ptr
 125+ 2765             >
 125+ 2765 23 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 125+ 2767             >
 125+ 2767             >BL:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 125+ 2767 CD 18 27    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 125+ 276A             >
 125+ 276A             >
 125+ 276A             >                endif           ; ok        // for other definitions it "points" the correct handler
 125+ 276A             >                // Use of "; ok" to suppress "warning[fwdref]"
 125+ 276A             >
 125+ 276A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 125+ 276A 20 00       >                dw      $20
 126+ 276C                              Constant_Def CL         ,   "C/L"   ,  64
 126+ 276C             >                New_Def  CL, "C/L", Constant_Ptr, is_normal
 126+ 276C             >
 126+ 276C             >Dict_Ptr        defl    $
 126+ 276C             >
 126+ 276C             >//              ______________________________________________________________________
 126+ 276C             >//              Heap part
 126+ 276C             >
 126+ 276C             >
 126+ 276C             >                org     (Heap_Ptr & $1FFF) + $E000
 126+ E425             >
 126+ E425             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 126+ E425             >Latest_Definition defl  Heap_Ptr
 126+ E425             >
 126+ E425             >                // dummy db directives used to calculate length of namec
 126+ E425 43 2F 4C    >                db      "C/L"
 126+ E428             >len_NFA         defl    $ - temp_NFA
 126+ E428             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 126+ E425             >
 126+ E425 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 126+ E426 43 2F 4C    >                db      "C/L"               // name string in 7-bit ascii, but
 126+ E429             >                org     $-1                 // alter last byte of Name just above to set
 126+ E428 CC          >                db      {b $} | END_BIT     // msb as name end
 126+ E429             >
 126+ E429 1E 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 126+ E42B             >Prev_Ptr        defl    Heap_Ptr
 126+ E42B             >
 126+ E42B             >mirror_Ptr      defl    $
 126+ E42B             >
 126+ E42B 6E 27       >                dw      Dict_Ptr + 2        // xt
 126+ E42D             >Heap_Ptr        defl    $ - $E000           // save current HP
 126+ E42D             >
 126+ E42D             >Current_HP      defl  $ - $E000             // used to set HP once!
 126+ E42D             >
 126+ E42D             >//              ______________________________________________________________________
 126+ E42D             >//              Dictionary part
 126+ E42D             >
 126+ E42D             >                org     Dict_Ptr
 126+ 276C             >
 126+ 276C 2B 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 126+ 276E             >
 126+ 276E             >CL:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 126+ 276E CD 18 27    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 126+ 2771             >
 126+ 2771             >
 126+ 2771             >                endif           ; ok        // for other definitions it "points" the correct handler
 126+ 2771             >                // Use of "; ok" to suppress "warning[fwdref]"
 126+ 2771             >
 126+ 2771             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 126+ 2771 40 00       >                dw      64
 127+ 2773                              Constant_Def BBUF       ,   "B/BUF" , 512
 127+ 2773             >                New_Def  BBUF, "B/BUF", Constant_Ptr, is_normal
 127+ 2773             >
 127+ 2773             >Dict_Ptr        defl    $
 127+ 2773             >
 127+ 2773             >//              ______________________________________________________________________
 127+ 2773             >//              Heap part
 127+ 2773             >
 127+ 2773             >
 127+ 2773             >                org     (Heap_Ptr & $1FFF) + $E000
 127+ E42D             >
 127+ E42D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 127+ E42D             >Latest_Definition defl  Heap_Ptr
 127+ E42D             >
 127+ E42D             >                // dummy db directives used to calculate length of namec
 127+ E42D 42 2F 42 55 >                db      "B/BUF"
 127+ E431 46          >
 127+ E432             >len_NFA         defl    $ - temp_NFA
 127+ E432             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 127+ E42D             >
 127+ E42D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 127+ E42E 42 2F 42 55 >                db      "B/BUF"               // name string in 7-bit ascii, but
 127+ E432 46          >
 127+ E433             >                org     $-1                 // alter last byte of Name just above to set
 127+ E432 C6          >                db      {b $} | END_BIT     // msb as name end
 127+ E433             >
 127+ E433 25 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 127+ E435             >Prev_Ptr        defl    Heap_Ptr
 127+ E435             >
 127+ E435             >mirror_Ptr      defl    $
 127+ E435             >
 127+ E435 75 27       >                dw      Dict_Ptr + 2        // xt
 127+ E437             >Heap_Ptr        defl    $ - $E000           // save current HP
 127+ E437             >
 127+ E437             >Current_HP      defl  $ - $E000             // used to set HP once!
 127+ E437             >
 127+ E437             >//              ______________________________________________________________________
 127+ E437             >//              Dictionary part
 127+ E437             >
 127+ E437             >                org     Dict_Ptr
 127+ 2773             >
 127+ 2773 35 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 127+ 2775             >
 127+ 2775             >BBUF:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 127+ 2775 CD 18 27    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 127+ 2778             >
 127+ 2778             >
 127+ 2778             >                endif           ; ok        // for other definitions it "points" the correct handler
 127+ 2778             >                // Use of "; ok" to suppress "warning[fwdref]"
 127+ 2778             >
 127+ 2778             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 127+ 2778 00 02       >                dw      512
 128+ 277A                              Constant_Def BSCR       ,   "B/SCR" ,   2
 128+ 277A             >                New_Def  BSCR, "B/SCR", Constant_Ptr, is_normal
 128+ 277A             >
 128+ 277A             >Dict_Ptr        defl    $
 128+ 277A             >
 128+ 277A             >//              ______________________________________________________________________
 128+ 277A             >//              Heap part
 128+ 277A             >
 128+ 277A             >
 128+ 277A             >                org     (Heap_Ptr & $1FFF) + $E000
 128+ E437             >
 128+ E437             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 128+ E437             >Latest_Definition defl  Heap_Ptr
 128+ E437             >
 128+ E437             >                // dummy db directives used to calculate length of namec
 128+ E437 42 2F 53 43 >                db      "B/SCR"
 128+ E43B 52          >
 128+ E43C             >len_NFA         defl    $ - temp_NFA
 128+ E43C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 128+ E437             >
 128+ E437 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 128+ E438 42 2F 53 43 >                db      "B/SCR"               // name string in 7-bit ascii, but
 128+ E43C 52          >
 128+ E43D             >                org     $-1                 // alter last byte of Name just above to set
 128+ E43C D2          >                db      {b $} | END_BIT     // msb as name end
 128+ E43D             >
 128+ E43D 2D 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 128+ E43F             >Prev_Ptr        defl    Heap_Ptr
 128+ E43F             >
 128+ E43F             >mirror_Ptr      defl    $
 128+ E43F             >
 128+ E43F 7C 27       >                dw      Dict_Ptr + 2        // xt
 128+ E441             >Heap_Ptr        defl    $ - $E000           // save current HP
 128+ E441             >
 128+ E441             >Current_HP      defl  $ - $E000             // used to set HP once!
 128+ E441             >
 128+ E441             >//              ______________________________________________________________________
 128+ E441             >//              Dictionary part
 128+ E441             >
 128+ E441             >                org     Dict_Ptr
 128+ 277A             >
 128+ 277A 3F 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 128+ 277C             >
 128+ 277C             >BSCR:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 128+ 277C CD 18 27    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 128+ 277F             >
 128+ 277F             >
 128+ 277F             >                endif           ; ok        // for other definitions it "points" the correct handler
 128+ 277F             >                // Use of "; ok" to suppress "warning[fwdref]"
 128+ 277F             >
 128+ 277F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 128+ 277F 02 00       >                dw      2
 129+ 2781                              Constant_Def LSCR       ,   "L/SCR" ,  16
 129+ 2781             >                New_Def  LSCR, "L/SCR", Constant_Ptr, is_normal
 129+ 2781             >
 129+ 2781             >Dict_Ptr        defl    $
 129+ 2781             >
 129+ 2781             >//              ______________________________________________________________________
 129+ 2781             >//              Heap part
 129+ 2781             >
 129+ 2781             >
 129+ 2781             >                org     (Heap_Ptr & $1FFF) + $E000
 129+ E441             >
 129+ E441             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 129+ E441             >Latest_Definition defl  Heap_Ptr
 129+ E441             >
 129+ E441             >                // dummy db directives used to calculate length of namec
 129+ E441 4C 2F 53 43 >                db      "L/SCR"
 129+ E445 52          >
 129+ E446             >len_NFA         defl    $ - temp_NFA
 129+ E446             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 129+ E441             >
 129+ E441 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 129+ E442 4C 2F 53 43 >                db      "L/SCR"               // name string in 7-bit ascii, but
 129+ E446 52          >
 129+ E447             >                org     $-1                 // alter last byte of Name just above to set
 129+ E446 D2          >                db      {b $} | END_BIT     // msb as name end
 129+ E447             >
 129+ E447 37 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 129+ E449             >Prev_Ptr        defl    Heap_Ptr
 129+ E449             >
 129+ E449             >mirror_Ptr      defl    $
 129+ E449             >
 129+ E449 83 27       >                dw      Dict_Ptr + 2        // xt
 129+ E44B             >Heap_Ptr        defl    $ - $E000           // save current HP
 129+ E44B             >
 129+ E44B             >Current_HP      defl  $ - $E000             // used to set HP once!
 129+ E44B             >
 129+ E44B             >//              ______________________________________________________________________
 129+ E44B             >//              Dictionary part
 129+ E44B             >
 129+ E44B             >                org     Dict_Ptr
 129+ 2781             >
 129+ 2781 49 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 129+ 2783             >
 129+ 2783             >LSCR:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 129+ 2783 CD 18 27    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 129+ 2786             >
 129+ 2786             >
 129+ 2786             >                endif           ; ok        // for other definitions it "points" the correct handler
 129+ 2786             >                // Use of "; ok" to suppress "warning[fwdref]"
 129+ 2786             >
 129+ 2786             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 129+ 2786 10 00       >                dw      16
 130+ 2788
 131+ 2788              //  ______________________________________________________________________
 132+ 2788              //
 133+ 2788              // +origin         --
 134+ 2788              //              Colon_Def PLUS_ORIGIN, "+ORIGIN", is_normal
 135+ 2788              //              dw      LIT, Cold_origin        // [ hex 6366 ] literal
 136+ 2788              //              dw      PLUS                    // +
 137+ 2788              //              dw      EXIT                    // ;
 138+ 2788                              New_Def  PLUS_ORIGIN, "+ORIGIN", is_code, is_normal
 138+ 2788             >
 138+ 2788             >Dict_Ptr        defl    $
 138+ 2788             >
 138+ 2788             >//              ______________________________________________________________________
 138+ 2788             >//              Heap part
 138+ 2788             >
 138+ 2788             >
 138+ 2788             >                org     (Heap_Ptr & $1FFF) + $E000
 138+ E44B             >
 138+ E44B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 138+ E44B             >Latest_Definition defl  Heap_Ptr
 138+ E44B             >
 138+ E44B             >                // dummy db directives used to calculate length of namec
 138+ E44B 2B 4F 52 49 >                db      "+ORIGIN"
 138+ E44F 47 49 4E    >
 138+ E452             >len_NFA         defl    $ - temp_NFA
 138+ E452             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 138+ E44B             >
 138+ E44B 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 138+ E44C 2B 4F 52 49 >                db      "+ORIGIN"               // name string in 7-bit ascii, but
 138+ E450 47 49 4E    >
 138+ E453             >                org     $-1                 // alter last byte of Name just above to set
 138+ E452 CE          >                db      {b $} | END_BIT     // msb as name end
 138+ E453             >
 138+ E453 41 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 138+ E455             >Prev_Ptr        defl    Heap_Ptr
 138+ E455             >
 138+ E455             >mirror_Ptr      defl    $
 138+ E455             >
 138+ E455 8A 27       >                dw      Dict_Ptr + 2        // xt
 138+ E457             >Heap_Ptr        defl    $ - $E000           // save current HP
 138+ E457             >
 138+ E457             >Current_HP      defl  $ - $E000             // used to set HP once!
 138+ E457             >
 138+ E457             >//              ______________________________________________________________________
 138+ E457             >//              Dictionary part
 138+ E457             >
 138+ E457             >                org     Dict_Ptr
 138+ 2788             >
 138+ 2788 55 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 138+ 278A             >
 138+ 278A             >PLUS_ORIGIN:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 138+ 278A ~           >                call    runcode ; ok        // for primitive definitions  actual code
 138+ 278A ~           >
 138+ 278A ~           >
 138+ 278A             >                endif           ; ok        // for other definitions it "points" the correct handler
 138+ 278A             >                // Use of "; ok" to suppress "warning[fwdref]"
 138+ 278A             >
 138+ 278A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 139+ 278A D9                           exx
 140+ 278B E1                           pop     hl
 141+ 278C 11 00 20                     ld      de, Cold_origin
 142+ 278F 19                           add     hl, de
 143+ 2790 E5                           push    hl
 144+ 2791 D9                           exx
 145+ 2792                              next
 145+ 2792 DD E9       >                jp      (ix)
 146+ 2794
 147+ 2794
 148+ 2794              //  ______________________________________________________________________
 149+ 2794              //
 150+ 2794                              Constant_Def CNEXT      ,   "(NEXT)", Next_Ptr
 150+ 2794             >                New_Def  CNEXT, "(NEXT)", Constant_Ptr, is_normal
 150+ 2794             >
 150+ 2794             >Dict_Ptr        defl    $
 150+ 2794             >
 150+ 2794             >//              ______________________________________________________________________
 150+ 2794             >//              Heap part
 150+ 2794             >
 150+ 2794             >
 150+ 2794             >                org     (Heap_Ptr & $1FFF) + $E000
 150+ E457             >
 150+ E457             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 150+ E457             >Latest_Definition defl  Heap_Ptr
 150+ E457             >
 150+ E457             >                // dummy db directives used to calculate length of namec
 150+ E457 28 4E 45 58 >                db      "(NEXT)"
 150+ E45B 54 29       >
 150+ E45D             >len_NFA         defl    $ - temp_NFA
 150+ E45D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 150+ E457             >
 150+ E457 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 150+ E458 28 4E 45 58 >                db      "(NEXT)"               // name string in 7-bit ascii, but
 150+ E45C 54 29       >
 150+ E45E             >                org     $-1                 // alter last byte of Name just above to set
 150+ E45D A9          >                db      {b $} | END_BIT     // msb as name end
 150+ E45E             >
 150+ E45E 4B 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 150+ E460             >Prev_Ptr        defl    Heap_Ptr
 150+ E460             >
 150+ E460             >mirror_Ptr      defl    $
 150+ E460             >
 150+ E460 96 27       >                dw      Dict_Ptr + 2        // xt
 150+ E462             >Heap_Ptr        defl    $ - $E000           // save current HP
 150+ E462             >
 150+ E462             >Current_HP      defl  $ - $E000             // used to set HP once!
 150+ E462             >
 150+ E462             >//              ______________________________________________________________________
 150+ E462             >//              Dictionary part
 150+ E462             >
 150+ E462             >                org     Dict_Ptr
 150+ 2794             >
 150+ 2794 60 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 150+ 2796             >
 150+ 2796             >CNEXT:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 150+ 2796 CD 18 27    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 150+ 2799             >
 150+ 2799             >
 150+ 2799             >                endif           ; ok        // for other definitions it "points" the correct handler
 150+ 2799             >                // Use of "; ok" to suppress "warning[fwdref]"
 150+ 2799             >
 150+ 2799             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 150+ 2799 34 20       >                dw      Next_Ptr
 151+ 279B
 152+ 279B              //  ______________________________________________________________________
 153+ 279B              //
 154+ 279B
 155+ 279B                              User_Def S0         , "S0"        , 06 // starting value of Stack-Pointer
 155+ 279B             >                New_Def  S0, "S0", User_Ptr, is_normal
 155+ 279B             >
 155+ 279B             >Dict_Ptr        defl    $
 155+ 279B             >
 155+ 279B             >//              ______________________________________________________________________
 155+ 279B             >//              Heap part
 155+ 279B             >
 155+ 279B             >
 155+ 279B             >                org     (Heap_Ptr & $1FFF) + $E000
 155+ E462             >
 155+ E462             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 155+ E462             >Latest_Definition defl  Heap_Ptr
 155+ E462             >
 155+ E462             >                // dummy db directives used to calculate length of namec
 155+ E462 53 30       >                db      "S0"
 155+ E464             >len_NFA         defl    $ - temp_NFA
 155+ E464             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 155+ E462             >
 155+ E462 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 155+ E463 53 30       >                db      "S0"               // name string in 7-bit ascii, but
 155+ E465             >                org     $-1                 // alter last byte of Name just above to set
 155+ E464 B0          >                db      {b $} | END_BIT     // msb as name end
 155+ E465             >
 155+ E465 57 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 155+ E467             >Prev_Ptr        defl    Heap_Ptr
 155+ E467             >
 155+ E467             >mirror_Ptr      defl    $
 155+ E467             >
 155+ E467 9D 27       >                dw      Dict_Ptr + 2        // xt
 155+ E469             >Heap_Ptr        defl    $ - $E000           // save current HP
 155+ E469             >
 155+ E469             >Current_HP      defl  $ - $E000             // used to set HP once!
 155+ E469             >
 155+ E469             >//              ______________________________________________________________________
 155+ E469             >//              Dictionary part
 155+ E469             >
 155+ E469             >                org     Dict_Ptr
 155+ 279B             >
 155+ 279B 67 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 155+ 279D             >
 155+ 279D             >S0:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 155+ 279D CD 38 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 155+ 27A0             >
 155+ 27A0             >
 155+ 27A0             >                endif           ; ok        // for other definitions it "points" the correct handler
 155+ 27A0             >                // Use of "; ok" to suppress "warning[fwdref]"
 155+ 27A0             >
 155+ 27A0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 155+ 27A0 06          >                db      06
 156+ 27A1                              User_Def R0         , "R0"        , 08 // starting value of Return-Pointer
 156+ 27A1             >                New_Def  R0, "R0", User_Ptr, is_normal
 156+ 27A1             >
 156+ 27A1             >Dict_Ptr        defl    $
 156+ 27A1             >
 156+ 27A1             >//              ______________________________________________________________________
 156+ 27A1             >//              Heap part
 156+ 27A1             >
 156+ 27A1             >
 156+ 27A1             >                org     (Heap_Ptr & $1FFF) + $E000
 156+ E469             >
 156+ E469             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 156+ E469             >Latest_Definition defl  Heap_Ptr
 156+ E469             >
 156+ E469             >                // dummy db directives used to calculate length of namec
 156+ E469 52 30       >                db      "R0"
 156+ E46B             >len_NFA         defl    $ - temp_NFA
 156+ E46B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 156+ E469             >
 156+ E469 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 156+ E46A 52 30       >                db      "R0"               // name string in 7-bit ascii, but
 156+ E46C             >                org     $-1                 // alter last byte of Name just above to set
 156+ E46B B0          >                db      {b $} | END_BIT     // msb as name end
 156+ E46C             >
 156+ E46C 62 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 156+ E46E             >Prev_Ptr        defl    Heap_Ptr
 156+ E46E             >
 156+ E46E             >mirror_Ptr      defl    $
 156+ E46E             >
 156+ E46E A3 27       >                dw      Dict_Ptr + 2        // xt
 156+ E470             >Heap_Ptr        defl    $ - $E000           // save current HP
 156+ E470             >
 156+ E470             >Current_HP      defl  $ - $E000             // used to set HP once!
 156+ E470             >
 156+ E470             >//              ______________________________________________________________________
 156+ E470             >//              Dictionary part
 156+ E470             >
 156+ E470             >                org     Dict_Ptr
 156+ 27A1             >
 156+ 27A1 6E 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 156+ 27A3             >
 156+ 27A3             >R0:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 156+ 27A3 CD 38 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 156+ 27A6             >
 156+ 27A6             >
 156+ 27A6             >                endif           ; ok        // for other definitions it "points" the correct handler
 156+ 27A6             >                // Use of "; ok" to suppress "warning[fwdref]"
 156+ 27A6             >
 156+ 27A6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 156+ 27A6 08          >                db      08
 157+ 27A7                              User_Def TIB        , "TIB"       , 10 // input terminal buffer address
 157+ 27A7             >                New_Def  TIB, "TIB", User_Ptr, is_normal
 157+ 27A7             >
 157+ 27A7             >Dict_Ptr        defl    $
 157+ 27A7             >
 157+ 27A7             >//              ______________________________________________________________________
 157+ 27A7             >//              Heap part
 157+ 27A7             >
 157+ 27A7             >
 157+ 27A7             >                org     (Heap_Ptr & $1FFF) + $E000
 157+ E470             >
 157+ E470             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 157+ E470             >Latest_Definition defl  Heap_Ptr
 157+ E470             >
 157+ E470             >                // dummy db directives used to calculate length of namec
 157+ E470 54 49 42    >                db      "TIB"
 157+ E473             >len_NFA         defl    $ - temp_NFA
 157+ E473             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 157+ E470             >
 157+ E470 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 157+ E471 54 49 42    >                db      "TIB"               // name string in 7-bit ascii, but
 157+ E474             >                org     $-1                 // alter last byte of Name just above to set
 157+ E473 C2          >                db      {b $} | END_BIT     // msb as name end
 157+ E474             >
 157+ E474 69 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 157+ E476             >Prev_Ptr        defl    Heap_Ptr
 157+ E476             >
 157+ E476             >mirror_Ptr      defl    $
 157+ E476             >
 157+ E476 A9 27       >                dw      Dict_Ptr + 2        // xt
 157+ E478             >Heap_Ptr        defl    $ - $E000           // save current HP
 157+ E478             >
 157+ E478             >Current_HP      defl  $ - $E000             // used to set HP once!
 157+ E478             >
 157+ E478             >//              ______________________________________________________________________
 157+ E478             >//              Dictionary part
 157+ E478             >
 157+ E478             >                org     Dict_Ptr
 157+ 27A7             >
 157+ 27A7 76 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 157+ 27A9             >
 157+ 27A9             >TIB:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 157+ 27A9 CD 38 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 157+ 27AC             >
 157+ 27AC             >
 157+ 27AC             >                endif           ; ok        // for other definitions it "points" the correct handler
 157+ 27AC             >                // Use of "; ok" to suppress "warning[fwdref]"
 157+ 27AC             >
 157+ 27AC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 157+ 27AC 0A          >                db      10
 158+ 27AD                              User_Def WIDTH      , "WIDTH"     , 12 // maximum number of characters for a word name
 158+ 27AD             >                New_Def  WIDTH, "WIDTH", User_Ptr, is_normal
 158+ 27AD             >
 158+ 27AD             >Dict_Ptr        defl    $
 158+ 27AD             >
 158+ 27AD             >//              ______________________________________________________________________
 158+ 27AD             >//              Heap part
 158+ 27AD             >
 158+ 27AD             >
 158+ 27AD             >                org     (Heap_Ptr & $1FFF) + $E000
 158+ E478             >
 158+ E478             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 158+ E478             >Latest_Definition defl  Heap_Ptr
 158+ E478             >
 158+ E478             >                // dummy db directives used to calculate length of namec
 158+ E478 57 49 44 54 >                db      "WIDTH"
 158+ E47C 48          >
 158+ E47D             >len_NFA         defl    $ - temp_NFA
 158+ E47D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 158+ E478             >
 158+ E478 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 158+ E479 57 49 44 54 >                db      "WIDTH"               // name string in 7-bit ascii, but
 158+ E47D 48          >
 158+ E47E             >                org     $-1                 // alter last byte of Name just above to set
 158+ E47D C8          >                db      {b $} | END_BIT     // msb as name end
 158+ E47E             >
 158+ E47E 70 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 158+ E480             >Prev_Ptr        defl    Heap_Ptr
 158+ E480             >
 158+ E480             >mirror_Ptr      defl    $
 158+ E480             >
 158+ E480 AF 27       >                dw      Dict_Ptr + 2        // xt
 158+ E482             >Heap_Ptr        defl    $ - $E000           // save current HP
 158+ E482             >
 158+ E482             >Current_HP      defl  $ - $E000             // used to set HP once!
 158+ E482             >
 158+ E482             >//              ______________________________________________________________________
 158+ E482             >//              Dictionary part
 158+ E482             >
 158+ E482             >                org     Dict_Ptr
 158+ 27AD             >
 158+ 27AD 80 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 158+ 27AF             >
 158+ 27AF             >WIDTH:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 158+ 27AF CD 38 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 158+ 27B2             >
 158+ 27B2             >
 158+ 27B2             >                endif           ; ok        // for other definitions it "points" the correct handler
 158+ 27B2             >                // Use of "; ok" to suppress "warning[fwdref]"
 158+ 27B2             >
 158+ 27B2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 158+ 27B2 0C          >                db      12
 159+ 27B3                              User_Def WARNING    , "WARNING"   , 14 // error reporting method: 0 base, 1 verbose
 159+ 27B3             >                New_Def  WARNING, "WARNING", User_Ptr, is_normal
 159+ 27B3             >
 159+ 27B3             >Dict_Ptr        defl    $
 159+ 27B3             >
 159+ 27B3             >//              ______________________________________________________________________
 159+ 27B3             >//              Heap part
 159+ 27B3             >
 159+ 27B3             >
 159+ 27B3             >                org     (Heap_Ptr & $1FFF) + $E000
 159+ E482             >
 159+ E482             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 159+ E482             >Latest_Definition defl  Heap_Ptr
 159+ E482             >
 159+ E482             >                // dummy db directives used to calculate length of namec
 159+ E482 57 41 52 4E >                db      "WARNING"
 159+ E486 49 4E 47    >
 159+ E489             >len_NFA         defl    $ - temp_NFA
 159+ E489             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 159+ E482             >
 159+ E482 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 159+ E483 57 41 52 4E >                db      "WARNING"               // name string in 7-bit ascii, but
 159+ E487 49 4E 47    >
 159+ E48A             >                org     $-1                 // alter last byte of Name just above to set
 159+ E489 C7          >                db      {b $} | END_BIT     // msb as name end
 159+ E48A             >
 159+ E48A 78 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 159+ E48C             >Prev_Ptr        defl    Heap_Ptr
 159+ E48C             >
 159+ E48C             >mirror_Ptr      defl    $
 159+ E48C             >
 159+ E48C B5 27       >                dw      Dict_Ptr + 2        // xt
 159+ E48E             >Heap_Ptr        defl    $ - $E000           // save current HP
 159+ E48E             >
 159+ E48E             >Current_HP      defl  $ - $E000             // used to set HP once!
 159+ E48E             >
 159+ E48E             >//              ______________________________________________________________________
 159+ E48E             >//              Dictionary part
 159+ E48E             >
 159+ E48E             >                org     Dict_Ptr
 159+ 27B3             >
 159+ 27B3 8C 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 159+ 27B5             >
 159+ 27B5             >WARNING:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 159+ 27B5 CD 38 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 159+ 27B8             >
 159+ 27B8             >
 159+ 27B8             >                endif           ; ok        // for other definitions it "points" the correct handler
 159+ 27B8             >                // Use of "; ok" to suppress "warning[fwdref]"
 159+ 27B8             >
 159+ 27B8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 159+ 27B8 0E          >                db      14
 160+ 27B9                              User_Def FENCE      , "FENCE"     , 16 // minimum address where FORGET can work
 160+ 27B9             >                New_Def  FENCE, "FENCE", User_Ptr, is_normal
 160+ 27B9             >
 160+ 27B9             >Dict_Ptr        defl    $
 160+ 27B9             >
 160+ 27B9             >//              ______________________________________________________________________
 160+ 27B9             >//              Heap part
 160+ 27B9             >
 160+ 27B9             >
 160+ 27B9             >                org     (Heap_Ptr & $1FFF) + $E000
 160+ E48E             >
 160+ E48E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 160+ E48E             >Latest_Definition defl  Heap_Ptr
 160+ E48E             >
 160+ E48E             >                // dummy db directives used to calculate length of namec
 160+ E48E 46 45 4E 43 >                db      "FENCE"
 160+ E492 45          >
 160+ E493             >len_NFA         defl    $ - temp_NFA
 160+ E493             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 160+ E48E             >
 160+ E48E 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 160+ E48F 46 45 4E 43 >                db      "FENCE"               // name string in 7-bit ascii, but
 160+ E493 45          >
 160+ E494             >                org     $-1                 // alter last byte of Name just above to set
 160+ E493 C5          >                db      {b $} | END_BIT     // msb as name end
 160+ E494             >
 160+ E494 82 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 160+ E496             >Prev_Ptr        defl    Heap_Ptr
 160+ E496             >
 160+ E496             >mirror_Ptr      defl    $
 160+ E496             >
 160+ E496 BB 27       >                dw      Dict_Ptr + 2        // xt
 160+ E498             >Heap_Ptr        defl    $ - $E000           // save current HP
 160+ E498             >
 160+ E498             >Current_HP      defl  $ - $E000             // used to set HP once!
 160+ E498             >
 160+ E498             >//              ______________________________________________________________________
 160+ E498             >//              Dictionary part
 160+ E498             >
 160+ E498             >                org     Dict_Ptr
 160+ 27B9             >
 160+ 27B9 96 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 160+ 27BB             >
 160+ 27BB             >FENCE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 160+ 27BB CD 38 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 160+ 27BE             >
 160+ 27BE             >
 160+ 27BE             >                endif           ; ok        // for other definitions it "points" the correct handler
 160+ 27BE             >                // Use of "; ok" to suppress "warning[fwdref]"
 160+ 27BE             >
 160+ 27BE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 160+ 27BE 10          >                db      16
 161+ 27BF                              User_Def DP         , "DP"        , 18 // Dictionary Pointer
 161+ 27BF             >                New_Def  DP, "DP", User_Ptr, is_normal
 161+ 27BF             >
 161+ 27BF             >Dict_Ptr        defl    $
 161+ 27BF             >
 161+ 27BF             >//              ______________________________________________________________________
 161+ 27BF             >//              Heap part
 161+ 27BF             >
 161+ 27BF             >
 161+ 27BF             >                org     (Heap_Ptr & $1FFF) + $E000
 161+ E498             >
 161+ E498             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 161+ E498             >Latest_Definition defl  Heap_Ptr
 161+ E498             >
 161+ E498             >                // dummy db directives used to calculate length of namec
 161+ E498 44 50       >                db      "DP"
 161+ E49A             >len_NFA         defl    $ - temp_NFA
 161+ E49A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 161+ E498             >
 161+ E498 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 161+ E499 44 50       >                db      "DP"               // name string in 7-bit ascii, but
 161+ E49B             >                org     $-1                 // alter last byte of Name just above to set
 161+ E49A D0          >                db      {b $} | END_BIT     // msb as name end
 161+ E49B             >
 161+ E49B 8E 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 161+ E49D             >Prev_Ptr        defl    Heap_Ptr
 161+ E49D             >
 161+ E49D             >mirror_Ptr      defl    $
 161+ E49D             >
 161+ E49D C1 27       >                dw      Dict_Ptr + 2        // xt
 161+ E49F             >Heap_Ptr        defl    $ - $E000           // save current HP
 161+ E49F             >
 161+ E49F             >Current_HP      defl  $ - $E000             // used to set HP once!
 161+ E49F             >
 161+ E49F             >//              ______________________________________________________________________
 161+ E49F             >//              Dictionary part
 161+ E49F             >
 161+ E49F             >                org     Dict_Ptr
 161+ 27BF             >
 161+ 27BF 9D 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 161+ 27C1             >
 161+ 27C1             >DP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 161+ 27C1 CD 38 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 161+ 27C4             >
 161+ 27C4             >
 161+ 27C4             >                endif           ; ok        // for other definitions it "points" the correct handler
 161+ 27C4             >                // Use of "; ok" to suppress "warning[fwdref]"
 161+ 27C4             >
 161+ 27C4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 161+ 27C4 12          >                db      18
 162+ 27C5                              User_Def VOC_LINK   , "VOC-LINK"  , 20 // pointer to the latest vocabulary
 162+ 27C5             >                New_Def  VOC_LINK, "VOC-LINK", User_Ptr, is_normal
 162+ 27C5             >
 162+ 27C5             >Dict_Ptr        defl    $
 162+ 27C5             >
 162+ 27C5             >//              ______________________________________________________________________
 162+ 27C5             >//              Heap part
 162+ 27C5             >
 162+ 27C5             >
 162+ 27C5             >                org     (Heap_Ptr & $1FFF) + $E000
 162+ E49F             >
 162+ E49F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 162+ E49F             >Latest_Definition defl  Heap_Ptr
 162+ E49F             >
 162+ E49F             >                // dummy db directives used to calculate length of namec
 162+ E49F 56 4F 43 2D >                db      "VOC-LINK"
 162+ E4A3 4C 49 4E 4B >
 162+ E4A7             >len_NFA         defl    $ - temp_NFA
 162+ E4A7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 162+ E49F             >
 162+ E49F 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 162+ E4A0 56 4F 43 2D >                db      "VOC-LINK"               // name string in 7-bit ascii, but
 162+ E4A4 4C 49 4E 4B >
 162+ E4A8             >                org     $-1                 // alter last byte of Name just above to set
 162+ E4A7 CB          >                db      {b $} | END_BIT     // msb as name end
 162+ E4A8             >
 162+ E4A8 98 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 162+ E4AA             >Prev_Ptr        defl    Heap_Ptr
 162+ E4AA             >
 162+ E4AA             >mirror_Ptr      defl    $
 162+ E4AA             >
 162+ E4AA C7 27       >                dw      Dict_Ptr + 2        // xt
 162+ E4AC             >Heap_Ptr        defl    $ - $E000           // save current HP
 162+ E4AC             >
 162+ E4AC             >Current_HP      defl  $ - $E000             // used to set HP once!
 162+ E4AC             >
 162+ E4AC             >//              ______________________________________________________________________
 162+ E4AC             >//              Dictionary part
 162+ E4AC             >
 162+ E4AC             >                org     Dict_Ptr
 162+ 27C5             >
 162+ 27C5 AA 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 162+ 27C7             >
 162+ 27C7             >VOC_LINK:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 162+ 27C7 CD 38 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 162+ 27CA             >
 162+ 27CA             >
 162+ 27CA             >                endif           ; ok        // for other definitions it "points" the correct handler
 162+ 27CA             >                // Use of "; ok" to suppress "warning[fwdref]"
 162+ 27CA             >
 162+ 27CA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 162+ 27CA 14          >                db      20
 163+ 27CB                              User_Def FIRST      , "FIRST"     , 22 // address of first buffer
 163+ 27CB             >                New_Def  FIRST, "FIRST", User_Ptr, is_normal
 163+ 27CB             >
 163+ 27CB             >Dict_Ptr        defl    $
 163+ 27CB             >
 163+ 27CB             >//              ______________________________________________________________________
 163+ 27CB             >//              Heap part
 163+ 27CB             >
 163+ 27CB             >
 163+ 27CB             >                org     (Heap_Ptr & $1FFF) + $E000
 163+ E4AC             >
 163+ E4AC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 163+ E4AC             >Latest_Definition defl  Heap_Ptr
 163+ E4AC             >
 163+ E4AC             >                // dummy db directives used to calculate length of namec
 163+ E4AC 46 49 52 53 >                db      "FIRST"
 163+ E4B0 54          >
 163+ E4B1             >len_NFA         defl    $ - temp_NFA
 163+ E4B1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 163+ E4AC             >
 163+ E4AC 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 163+ E4AD 46 49 52 53 >                db      "FIRST"               // name string in 7-bit ascii, but
 163+ E4B1 54          >
 163+ E4B2             >                org     $-1                 // alter last byte of Name just above to set
 163+ E4B1 D4          >                db      {b $} | END_BIT     // msb as name end
 163+ E4B2             >
 163+ E4B2 9F 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 163+ E4B4             >Prev_Ptr        defl    Heap_Ptr
 163+ E4B4             >
 163+ E4B4             >mirror_Ptr      defl    $
 163+ E4B4             >
 163+ E4B4 CD 27       >                dw      Dict_Ptr + 2        // xt
 163+ E4B6             >Heap_Ptr        defl    $ - $E000           // save current HP
 163+ E4B6             >
 163+ E4B6             >Current_HP      defl  $ - $E000             // used to set HP once!
 163+ E4B6             >
 163+ E4B6             >//              ______________________________________________________________________
 163+ E4B6             >//              Dictionary part
 163+ E4B6             >
 163+ E4B6             >                org     Dict_Ptr
 163+ 27CB             >
 163+ 27CB B4 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 163+ 27CD             >
 163+ 27CD             >FIRST:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 163+ 27CD CD 38 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 163+ 27D0             >
 163+ 27D0             >
 163+ 27D0             >                endif           ; ok        // for other definitions it "points" the correct handler
 163+ 27D0             >                // Use of "; ok" to suppress "warning[fwdref]"
 163+ 27D0             >
 163+ 27D0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 163+ 27D0 16          >                db      22
 164+ 27D1                              User_Def LIMIT      , "LIMIT"     , 24 // address of last buffer
 164+ 27D1             >                New_Def  LIMIT, "LIMIT", User_Ptr, is_normal
 164+ 27D1             >
 164+ 27D1             >Dict_Ptr        defl    $
 164+ 27D1             >
 164+ 27D1             >//              ______________________________________________________________________
 164+ 27D1             >//              Heap part
 164+ 27D1             >
 164+ 27D1             >
 164+ 27D1             >                org     (Heap_Ptr & $1FFF) + $E000
 164+ E4B6             >
 164+ E4B6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 164+ E4B6             >Latest_Definition defl  Heap_Ptr
 164+ E4B6             >
 164+ E4B6             >                // dummy db directives used to calculate length of namec
 164+ E4B6 4C 49 4D 49 >                db      "LIMIT"
 164+ E4BA 54          >
 164+ E4BB             >len_NFA         defl    $ - temp_NFA
 164+ E4BB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 164+ E4B6             >
 164+ E4B6 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 164+ E4B7 4C 49 4D 49 >                db      "LIMIT"               // name string in 7-bit ascii, but
 164+ E4BB 54          >
 164+ E4BC             >                org     $-1                 // alter last byte of Name just above to set
 164+ E4BB D4          >                db      {b $} | END_BIT     // msb as name end
 164+ E4BC             >
 164+ E4BC AC 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 164+ E4BE             >Prev_Ptr        defl    Heap_Ptr
 164+ E4BE             >
 164+ E4BE             >mirror_Ptr      defl    $
 164+ E4BE             >
 164+ E4BE D3 27       >                dw      Dict_Ptr + 2        // xt
 164+ E4C0             >Heap_Ptr        defl    $ - $E000           // save current HP
 164+ E4C0             >
 164+ E4C0             >Current_HP      defl  $ - $E000             // used to set HP once!
 164+ E4C0             >
 164+ E4C0             >//              ______________________________________________________________________
 164+ E4C0             >//              Dictionary part
 164+ E4C0             >
 164+ E4C0             >                org     Dict_Ptr
 164+ 27D1             >
 164+ 27D1 BE 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 164+ 27D3             >
 164+ 27D3             >LIMIT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 164+ 27D3 CD 38 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 164+ 27D6             >
 164+ 27D6             >
 164+ 27D6             >                endif           ; ok        // for other definitions it "points" the correct handler
 164+ 27D6             >                // Use of "; ok" to suppress "warning[fwdref]"
 164+ 27D6             >
 164+ 27D6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 164+ 27D6 18          >                db      24
 165+ 27D7                              User_Def HP         , "HP"        , 26 // heap-pointer address
 165+ 27D7             >                New_Def  HP, "HP", User_Ptr, is_normal
 165+ 27D7             >
 165+ 27D7             >Dict_Ptr        defl    $
 165+ 27D7             >
 165+ 27D7             >//              ______________________________________________________________________
 165+ 27D7             >//              Heap part
 165+ 27D7             >
 165+ 27D7             >
 165+ 27D7             >                org     (Heap_Ptr & $1FFF) + $E000
 165+ E4C0             >
 165+ E4C0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 165+ E4C0             >Latest_Definition defl  Heap_Ptr
 165+ E4C0             >
 165+ E4C0             >                // dummy db directives used to calculate length of namec
 165+ E4C0 48 50       >                db      "HP"
 165+ E4C2             >len_NFA         defl    $ - temp_NFA
 165+ E4C2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 165+ E4C0             >
 165+ E4C0 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 165+ E4C1 48 50       >                db      "HP"               // name string in 7-bit ascii, but
 165+ E4C3             >                org     $-1                 // alter last byte of Name just above to set
 165+ E4C2 D0          >                db      {b $} | END_BIT     // msb as name end
 165+ E4C3             >
 165+ E4C3 B6 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 165+ E4C5             >Prev_Ptr        defl    Heap_Ptr
 165+ E4C5             >
 165+ E4C5             >mirror_Ptr      defl    $
 165+ E4C5             >
 165+ E4C5 D9 27       >                dw      Dict_Ptr + 2        // xt
 165+ E4C7             >Heap_Ptr        defl    $ - $E000           // save current HP
 165+ E4C7             >
 165+ E4C7             >Current_HP      defl  $ - $E000             // used to set HP once!
 165+ E4C7             >
 165+ E4C7             >//              ______________________________________________________________________
 165+ E4C7             >//              Dictionary part
 165+ E4C7             >
 165+ E4C7             >                org     Dict_Ptr
 165+ 27D7             >
 165+ 27D7 C5 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 165+ 27D9             >
 165+ 27D9             >HP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 165+ 27D9 CD 38 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 165+ 27DC             >
 165+ 27DC             >
 165+ 27DC             >                endif           ; ok        // for other definitions it "points" the correct handler
 165+ 27DC             >                // Use of "; ok" to suppress "warning[fwdref]"
 165+ 27DC             >
 165+ 27DC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 165+ 27DC 1A          >                db      26
 166+ 27DD                              User_Def NMODE      , "NMODE"     , 28 // number mode: 0 integer, 1 floating point
 166+ 27DD             >                New_Def  NMODE, "NMODE", User_Ptr, is_normal
 166+ 27DD             >
 166+ 27DD             >Dict_Ptr        defl    $
 166+ 27DD             >
 166+ 27DD             >//              ______________________________________________________________________
 166+ 27DD             >//              Heap part
 166+ 27DD             >
 166+ 27DD             >
 166+ 27DD             >                org     (Heap_Ptr & $1FFF) + $E000
 166+ E4C7             >
 166+ E4C7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 166+ E4C7             >Latest_Definition defl  Heap_Ptr
 166+ E4C7             >
 166+ E4C7             >                // dummy db directives used to calculate length of namec
 166+ E4C7 4E 4D 4F 44 >                db      "NMODE"
 166+ E4CB 45          >
 166+ E4CC             >len_NFA         defl    $ - temp_NFA
 166+ E4CC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 166+ E4C7             >
 166+ E4C7 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 166+ E4C8 4E 4D 4F 44 >                db      "NMODE"               // name string in 7-bit ascii, but
 166+ E4CC 45          >
 166+ E4CD             >                org     $-1                 // alter last byte of Name just above to set
 166+ E4CC C5          >                db      {b $} | END_BIT     // msb as name end
 166+ E4CD             >
 166+ E4CD C0 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 166+ E4CF             >Prev_Ptr        defl    Heap_Ptr
 166+ E4CF             >
 166+ E4CF             >mirror_Ptr      defl    $
 166+ E4CF             >
 166+ E4CF DF 27       >                dw      Dict_Ptr + 2        // xt
 166+ E4D1             >Heap_Ptr        defl    $ - $E000           // save current HP
 166+ E4D1             >
 166+ E4D1             >Current_HP      defl  $ - $E000             // used to set HP once!
 166+ E4D1             >
 166+ E4D1             >//              ______________________________________________________________________
 166+ E4D1             >//              Dictionary part
 166+ E4D1             >
 166+ E4D1             >                org     Dict_Ptr
 166+ 27DD             >
 166+ 27DD CF 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 166+ 27DF             >
 166+ 27DF             >NMODE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 166+ 27DF CD 38 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 166+ 27E2             >
 166+ 27E2             >
 166+ 27E2             >                endif           ; ok        // for other definitions it "points" the correct handler
 166+ 27E2             >                // Use of "; ok" to suppress "warning[fwdref]"
 166+ 27E2             >
 166+ 27E2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 166+ 27E2 1C          >                db      28
 167+ 27E3                              User_Def BLK        , "BLK"       , 30 // block number to be interpreted. 0 for terminal
 167+ 27E3             >                New_Def  BLK, "BLK", User_Ptr, is_normal
 167+ 27E3             >
 167+ 27E3             >Dict_Ptr        defl    $
 167+ 27E3             >
 167+ 27E3             >//              ______________________________________________________________________
 167+ 27E3             >//              Heap part
 167+ 27E3             >
 167+ 27E3             >
 167+ 27E3             >                org     (Heap_Ptr & $1FFF) + $E000
 167+ E4D1             >
 167+ E4D1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 167+ E4D1             >Latest_Definition defl  Heap_Ptr
 167+ E4D1             >
 167+ E4D1             >                // dummy db directives used to calculate length of namec
 167+ E4D1 42 4C 4B    >                db      "BLK"
 167+ E4D4             >len_NFA         defl    $ - temp_NFA
 167+ E4D4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 167+ E4D1             >
 167+ E4D1 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 167+ E4D2 42 4C 4B    >                db      "BLK"               // name string in 7-bit ascii, but
 167+ E4D5             >                org     $-1                 // alter last byte of Name just above to set
 167+ E4D4 CB          >                db      {b $} | END_BIT     // msb as name end
 167+ E4D5             >
 167+ E4D5 C7 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 167+ E4D7             >Prev_Ptr        defl    Heap_Ptr
 167+ E4D7             >
 167+ E4D7             >mirror_Ptr      defl    $
 167+ E4D7             >
 167+ E4D7 E5 27       >                dw      Dict_Ptr + 2        // xt
 167+ E4D9             >Heap_Ptr        defl    $ - $E000           // save current HP
 167+ E4D9             >
 167+ E4D9             >Current_HP      defl  $ - $E000             // used to set HP once!
 167+ E4D9             >
 167+ E4D9             >//              ______________________________________________________________________
 167+ E4D9             >//              Dictionary part
 167+ E4D9             >
 167+ E4D9             >                org     Dict_Ptr
 167+ 27E3             >
 167+ 27E3 D7 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 167+ 27E5             >
 167+ 27E5             >BLK:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 167+ 27E5 CD 38 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 167+ 27E8             >
 167+ 27E8             >
 167+ 27E8             >                endif           ; ok        // for other definitions it "points" the correct handler
 167+ 27E8             >                // Use of "; ok" to suppress "warning[fwdref]"
 167+ 27E8             >
 167+ 27E8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 167+ 27E8 1E          >                db      30
 168+ 27E9                              User_Def TO_IN      , ">IN"       , 32 // incremented when consuming input buffer
 168+ 27E9             >                New_Def  TO_IN, ">IN", User_Ptr, is_normal
 168+ 27E9             >
 168+ 27E9             >Dict_Ptr        defl    $
 168+ 27E9             >
 168+ 27E9             >//              ______________________________________________________________________
 168+ 27E9             >//              Heap part
 168+ 27E9             >
 168+ 27E9             >
 168+ 27E9             >                org     (Heap_Ptr & $1FFF) + $E000
 168+ E4D9             >
 168+ E4D9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 168+ E4D9             >Latest_Definition defl  Heap_Ptr
 168+ E4D9             >
 168+ E4D9             >                // dummy db directives used to calculate length of namec
 168+ E4D9 3E 49 4E    >                db      ">IN"
 168+ E4DC             >len_NFA         defl    $ - temp_NFA
 168+ E4DC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 168+ E4D9             >
 168+ E4D9 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 168+ E4DA 3E 49 4E    >                db      ">IN"               // name string in 7-bit ascii, but
 168+ E4DD             >                org     $-1                 // alter last byte of Name just above to set
 168+ E4DC CE          >                db      {b $} | END_BIT     // msb as name end
 168+ E4DD             >
 168+ E4DD D1 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 168+ E4DF             >Prev_Ptr        defl    Heap_Ptr
 168+ E4DF             >
 168+ E4DF             >mirror_Ptr      defl    $
 168+ E4DF             >
 168+ E4DF EB 27       >                dw      Dict_Ptr + 2        // xt
 168+ E4E1             >Heap_Ptr        defl    $ - $E000           // save current HP
 168+ E4E1             >
 168+ E4E1             >Current_HP      defl  $ - $E000             // used to set HP once!
 168+ E4E1             >
 168+ E4E1             >//              ______________________________________________________________________
 168+ E4E1             >//              Dictionary part
 168+ E4E1             >
 168+ E4E1             >                org     Dict_Ptr
 168+ 27E9             >
 168+ 27E9 DF 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 168+ 27EB             >
 168+ 27EB             >TO_IN:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 168+ 27EB CD 38 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 168+ 27EE             >
 168+ 27EE             >
 168+ 27EE             >                endif           ; ok        // for other definitions it "points" the correct handler
 168+ 27EE             >                // Use of "; ok" to suppress "warning[fwdref]"
 168+ 27EE             >
 168+ 27EE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 168+ 27EE 20          >                db      32
 169+ 27EF                              User_Def OUT        , "OUT"       , 34 // incremented when sending to output
 169+ 27EF             >                New_Def  OUT, "OUT", User_Ptr, is_normal
 169+ 27EF             >
 169+ 27EF             >Dict_Ptr        defl    $
 169+ 27EF             >
 169+ 27EF             >//              ______________________________________________________________________
 169+ 27EF             >//              Heap part
 169+ 27EF             >
 169+ 27EF             >
 169+ 27EF             >                org     (Heap_Ptr & $1FFF) + $E000
 169+ E4E1             >
 169+ E4E1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 169+ E4E1             >Latest_Definition defl  Heap_Ptr
 169+ E4E1             >
 169+ E4E1             >                // dummy db directives used to calculate length of namec
 169+ E4E1 4F 55 54    >                db      "OUT"
 169+ E4E4             >len_NFA         defl    $ - temp_NFA
 169+ E4E4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 169+ E4E1             >
 169+ E4E1 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 169+ E4E2 4F 55 54    >                db      "OUT"               // name string in 7-bit ascii, but
 169+ E4E5             >                org     $-1                 // alter last byte of Name just above to set
 169+ E4E4 D4          >                db      {b $} | END_BIT     // msb as name end
 169+ E4E5             >
 169+ E4E5 D9 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 169+ E4E7             >Prev_Ptr        defl    Heap_Ptr
 169+ E4E7             >
 169+ E4E7             >mirror_Ptr      defl    $
 169+ E4E7             >
 169+ E4E7 F1 27       >                dw      Dict_Ptr + 2        // xt
 169+ E4E9             >Heap_Ptr        defl    $ - $E000           // save current HP
 169+ E4E9             >
 169+ E4E9             >Current_HP      defl  $ - $E000             // used to set HP once!
 169+ E4E9             >
 169+ E4E9             >//              ______________________________________________________________________
 169+ E4E9             >//              Dictionary part
 169+ E4E9             >
 169+ E4E9             >                org     Dict_Ptr
 169+ 27EF             >
 169+ 27EF E7 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 169+ 27F1             >
 169+ 27F1             >OUT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 169+ 27F1 CD 38 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 169+ 27F4             >
 169+ 27F4             >
 169+ 27F4             >                endif           ; ok        // for other definitions it "points" the correct handler
 169+ 27F4             >                // Use of "; ok" to suppress "warning[fwdref]"
 169+ 27F4             >
 169+ 27F4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 169+ 27F4 22          >                db      34
 170+ 27F5                              User_Def SCR        , "SCR"       , 36 // latest screen retreieved by LIST
 170+ 27F5             >                New_Def  SCR, "SCR", User_Ptr, is_normal
 170+ 27F5             >
 170+ 27F5             >Dict_Ptr        defl    $
 170+ 27F5             >
 170+ 27F5             >//              ______________________________________________________________________
 170+ 27F5             >//              Heap part
 170+ 27F5             >
 170+ 27F5             >
 170+ 27F5             >                org     (Heap_Ptr & $1FFF) + $E000
 170+ E4E9             >
 170+ E4E9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 170+ E4E9             >Latest_Definition defl  Heap_Ptr
 170+ E4E9             >
 170+ E4E9             >                // dummy db directives used to calculate length of namec
 170+ E4E9 53 43 52    >                db      "SCR"
 170+ E4EC             >len_NFA         defl    $ - temp_NFA
 170+ E4EC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 170+ E4E9             >
 170+ E4E9 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 170+ E4EA 53 43 52    >                db      "SCR"               // name string in 7-bit ascii, but
 170+ E4ED             >                org     $-1                 // alter last byte of Name just above to set
 170+ E4EC D2          >                db      {b $} | END_BIT     // msb as name end
 170+ E4ED             >
 170+ E4ED E1 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 170+ E4EF             >Prev_Ptr        defl    Heap_Ptr
 170+ E4EF             >
 170+ E4EF             >mirror_Ptr      defl    $
 170+ E4EF             >
 170+ E4EF F7 27       >                dw      Dict_Ptr + 2        // xt
 170+ E4F1             >Heap_Ptr        defl    $ - $E000           // save current HP
 170+ E4F1             >
 170+ E4F1             >Current_HP      defl  $ - $E000             // used to set HP once!
 170+ E4F1             >
 170+ E4F1             >//              ______________________________________________________________________
 170+ E4F1             >//              Dictionary part
 170+ E4F1             >
 170+ E4F1             >                org     Dict_Ptr
 170+ 27F5             >
 170+ 27F5 EF 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 170+ 27F7             >
 170+ 27F7             >SCR:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 170+ 27F7 CD 38 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 170+ 27FA             >
 170+ 27FA             >
 170+ 27FA             >                endif           ; ok        // for other definitions it "points" the correct handler
 170+ 27FA             >                // Use of "; ok" to suppress "warning[fwdref]"
 170+ 27FA             >
 170+ 27FA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 170+ 27FA 24          >                db      36
 171+ 27FB                              User_Def OFFSET     , "OFFSET"    , 38 //
 171+ 27FB             >                New_Def  OFFSET, "OFFSET", User_Ptr, is_normal
 171+ 27FB             >
 171+ 27FB             >Dict_Ptr        defl    $
 171+ 27FB             >
 171+ 27FB             >//              ______________________________________________________________________
 171+ 27FB             >//              Heap part
 171+ 27FB             >
 171+ 27FB             >
 171+ 27FB             >                org     (Heap_Ptr & $1FFF) + $E000
 171+ E4F1             >
 171+ E4F1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 171+ E4F1             >Latest_Definition defl  Heap_Ptr
 171+ E4F1             >
 171+ E4F1             >                // dummy db directives used to calculate length of namec
 171+ E4F1 4F 46 46 53 >                db      "OFFSET"
 171+ E4F5 45 54       >
 171+ E4F7             >len_NFA         defl    $ - temp_NFA
 171+ E4F7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 171+ E4F1             >
 171+ E4F1 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 171+ E4F2 4F 46 46 53 >                db      "OFFSET"               // name string in 7-bit ascii, but
 171+ E4F6 45 54       >
 171+ E4F8             >                org     $-1                 // alter last byte of Name just above to set
 171+ E4F7 D4          >                db      {b $} | END_BIT     // msb as name end
 171+ E4F8             >
 171+ E4F8 E9 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 171+ E4FA             >Prev_Ptr        defl    Heap_Ptr
 171+ E4FA             >
 171+ E4FA             >mirror_Ptr      defl    $
 171+ E4FA             >
 171+ E4FA FD 27       >                dw      Dict_Ptr + 2        // xt
 171+ E4FC             >Heap_Ptr        defl    $ - $E000           // save current HP
 171+ E4FC             >
 171+ E4FC             >Current_HP      defl  $ - $E000             // used to set HP once!
 171+ E4FC             >
 171+ E4FC             >//              ______________________________________________________________________
 171+ E4FC             >//              Dictionary part
 171+ E4FC             >
 171+ E4FC             >                org     Dict_Ptr
 171+ 27FB             >
 171+ 27FB FA 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 171+ 27FD             >
 171+ 27FD             >OFFSET:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 171+ 27FD CD 38 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 171+ 2800             >
 171+ 2800             >
 171+ 2800             >                endif           ; ok        // for other definitions it "points" the correct handler
 171+ 2800             >                // Use of "; ok" to suppress "warning[fwdref]"
 171+ 2800             >
 171+ 2800             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 171+ 2800 26          >                db      38
 172+ 2801                              User_Def CONTEXT    , "CONTEXT"   , 40 // pointer to the vocabulary where search begins
 172+ 2801             >                New_Def  CONTEXT, "CONTEXT", User_Ptr, is_normal
 172+ 2801             >
 172+ 2801             >Dict_Ptr        defl    $
 172+ 2801             >
 172+ 2801             >//              ______________________________________________________________________
 172+ 2801             >//              Heap part
 172+ 2801             >
 172+ 2801             >
 172+ 2801             >                org     (Heap_Ptr & $1FFF) + $E000
 172+ E4FC             >
 172+ E4FC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 172+ E4FC             >Latest_Definition defl  Heap_Ptr
 172+ E4FC             >
 172+ E4FC             >                // dummy db directives used to calculate length of namec
 172+ E4FC 43 4F 4E 54 >                db      "CONTEXT"
 172+ E500 45 58 54    >
 172+ E503             >len_NFA         defl    $ - temp_NFA
 172+ E503             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 172+ E4FC             >
 172+ E4FC 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 172+ E4FD 43 4F 4E 54 >                db      "CONTEXT"               // name string in 7-bit ascii, but
 172+ E501 45 58 54    >
 172+ E504             >                org     $-1                 // alter last byte of Name just above to set
 172+ E503 D4          >                db      {b $} | END_BIT     // msb as name end
 172+ E504             >
 172+ E504 F1 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 172+ E506             >Prev_Ptr        defl    Heap_Ptr
 172+ E506             >
 172+ E506             >mirror_Ptr      defl    $
 172+ E506             >
 172+ E506 03 28       >                dw      Dict_Ptr + 2        // xt
 172+ E508             >Heap_Ptr        defl    $ - $E000           // save current HP
 172+ E508             >
 172+ E508             >Current_HP      defl  $ - $E000             // used to set HP once!
 172+ E508             >
 172+ E508             >//              ______________________________________________________________________
 172+ E508             >//              Dictionary part
 172+ E508             >
 172+ E508             >                org     Dict_Ptr
 172+ 2801             >
 172+ 2801 06 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 172+ 2803             >
 172+ 2803             >CONTEXT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 172+ 2803 CD 38 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 172+ 2806             >
 172+ 2806             >
 172+ 2806             >                endif           ; ok        // for other definitions it "points" the correct handler
 172+ 2806             >                // Use of "; ok" to suppress "warning[fwdref]"
 172+ 2806             >
 172+ 2806             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 172+ 2806 28          >                db      40
 173+ 2807                              User_Def CURRENT    , "CURRENT"   , 42 // pointer to the vocabulary where search continues
 173+ 2807             >                New_Def  CURRENT, "CURRENT", User_Ptr, is_normal
 173+ 2807             >
 173+ 2807             >Dict_Ptr        defl    $
 173+ 2807             >
 173+ 2807             >//              ______________________________________________________________________
 173+ 2807             >//              Heap part
 173+ 2807             >
 173+ 2807             >
 173+ 2807             >                org     (Heap_Ptr & $1FFF) + $E000
 173+ E508             >
 173+ E508             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 173+ E508             >Latest_Definition defl  Heap_Ptr
 173+ E508             >
 173+ E508             >                // dummy db directives used to calculate length of namec
 173+ E508 43 55 52 52 >                db      "CURRENT"
 173+ E50C 45 4E 54    >
 173+ E50F             >len_NFA         defl    $ - temp_NFA
 173+ E50F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 173+ E508             >
 173+ E508 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 173+ E509 43 55 52 52 >                db      "CURRENT"               // name string in 7-bit ascii, but
 173+ E50D 45 4E 54    >
 173+ E510             >                org     $-1                 // alter last byte of Name just above to set
 173+ E50F D4          >                db      {b $} | END_BIT     // msb as name end
 173+ E510             >
 173+ E510 FC 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 173+ E512             >Prev_Ptr        defl    Heap_Ptr
 173+ E512             >
 173+ E512             >mirror_Ptr      defl    $
 173+ E512             >
 173+ E512 09 28       >                dw      Dict_Ptr + 2        // xt
 173+ E514             >Heap_Ptr        defl    $ - $E000           // save current HP
 173+ E514             >
 173+ E514             >Current_HP      defl  $ - $E000             // used to set HP once!
 173+ E514             >
 173+ E514             >//              ______________________________________________________________________
 173+ E514             >//              Dictionary part
 173+ E514             >
 173+ E514             >                org     Dict_Ptr
 173+ 2807             >
 173+ 2807 12 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 173+ 2809             >
 173+ 2809             >CURRENT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 173+ 2809 CD 38 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 173+ 280C             >
 173+ 280C             >
 173+ 280C             >                endif           ; ok        // for other definitions it "points" the correct handler
 173+ 280C             >                // Use of "; ok" to suppress "warning[fwdref]"
 173+ 280C             >
 173+ 280C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 173+ 280C 2A          >                db      42
 174+ 280D                              User_Def STATE      , "STATE"     , 44 // compilation status. 0 interpreting.
 174+ 280D             >                New_Def  STATE, "STATE", User_Ptr, is_normal
 174+ 280D             >
 174+ 280D             >Dict_Ptr        defl    $
 174+ 280D             >
 174+ 280D             >//              ______________________________________________________________________
 174+ 280D             >//              Heap part
 174+ 280D             >
 174+ 280D             >
 174+ 280D             >                org     (Heap_Ptr & $1FFF) + $E000
 174+ E514             >
 174+ E514             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 174+ E514             >Latest_Definition defl  Heap_Ptr
 174+ E514             >
 174+ E514             >                // dummy db directives used to calculate length of namec
 174+ E514 53 54 41 54 >                db      "STATE"
 174+ E518 45          >
 174+ E519             >len_NFA         defl    $ - temp_NFA
 174+ E519             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 174+ E514             >
 174+ E514 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 174+ E515 53 54 41 54 >                db      "STATE"               // name string in 7-bit ascii, but
 174+ E519 45          >
 174+ E51A             >                org     $-1                 // alter last byte of Name just above to set
 174+ E519 C5          >                db      {b $} | END_BIT     // msb as name end
 174+ E51A             >
 174+ E51A 08 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 174+ E51C             >Prev_Ptr        defl    Heap_Ptr
 174+ E51C             >
 174+ E51C             >mirror_Ptr      defl    $
 174+ E51C             >
 174+ E51C 0F 28       >                dw      Dict_Ptr + 2        // xt
 174+ E51E             >Heap_Ptr        defl    $ - $E000           // save current HP
 174+ E51E             >
 174+ E51E             >Current_HP      defl  $ - $E000             // used to set HP once!
 174+ E51E             >
 174+ E51E             >//              ______________________________________________________________________
 174+ E51E             >//              Dictionary part
 174+ E51E             >
 174+ E51E             >                org     Dict_Ptr
 174+ 280D             >
 174+ 280D 1C 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 174+ 280F             >
 174+ 280F             >STATE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 174+ 280F CD 38 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 174+ 2812             >
 174+ 2812             >
 174+ 2812             >                endif           ; ok        // for other definitions it "points" the correct handler
 174+ 2812             >                // Use of "; ok" to suppress "warning[fwdref]"
 174+ 2812             >
 174+ 2812             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 174+ 2812 2C          >                db      44
 175+ 2813                              User_Def BASE       , "BASE"      , 46 //
 175+ 2813             >                New_Def  BASE, "BASE", User_Ptr, is_normal
 175+ 2813             >
 175+ 2813             >Dict_Ptr        defl    $
 175+ 2813             >
 175+ 2813             >//              ______________________________________________________________________
 175+ 2813             >//              Heap part
 175+ 2813             >
 175+ 2813             >
 175+ 2813             >                org     (Heap_Ptr & $1FFF) + $E000
 175+ E51E             >
 175+ E51E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 175+ E51E             >Latest_Definition defl  Heap_Ptr
 175+ E51E             >
 175+ E51E             >                // dummy db directives used to calculate length of namec
 175+ E51E 42 41 53 45 >                db      "BASE"
 175+ E522             >len_NFA         defl    $ - temp_NFA
 175+ E522             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 175+ E51E             >
 175+ E51E 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 175+ E51F 42 41 53 45 >                db      "BASE"               // name string in 7-bit ascii, but
 175+ E523             >                org     $-1                 // alter last byte of Name just above to set
 175+ E522 C5          >                db      {b $} | END_BIT     // msb as name end
 175+ E523             >
 175+ E523 14 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 175+ E525             >Prev_Ptr        defl    Heap_Ptr
 175+ E525             >
 175+ E525             >mirror_Ptr      defl    $
 175+ E525             >
 175+ E525 15 28       >                dw      Dict_Ptr + 2        // xt
 175+ E527             >Heap_Ptr        defl    $ - $E000           // save current HP
 175+ E527             >
 175+ E527             >Current_HP      defl  $ - $E000             // used to set HP once!
 175+ E527             >
 175+ E527             >//              ______________________________________________________________________
 175+ E527             >//              Dictionary part
 175+ E527             >
 175+ E527             >                org     Dict_Ptr
 175+ 2813             >
 175+ 2813 25 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 175+ 2815             >
 175+ 2815             >BASE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 175+ 2815 CD 38 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 175+ 2818             >
 175+ 2818             >
 175+ 2818             >                endif           ; ok        // for other definitions it "points" the correct handler
 175+ 2818             >                // Use of "; ok" to suppress "warning[fwdref]"
 175+ 2818             >
 175+ 2818             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 175+ 2818 2E          >                db      46
 176+ 2819                              User_Def DPL        , "DPL"       , 48 // number of digits after decimal point in conversion
 176+ 2819             >                New_Def  DPL, "DPL", User_Ptr, is_normal
 176+ 2819             >
 176+ 2819             >Dict_Ptr        defl    $
 176+ 2819             >
 176+ 2819             >//              ______________________________________________________________________
 176+ 2819             >//              Heap part
 176+ 2819             >
 176+ 2819             >
 176+ 2819             >                org     (Heap_Ptr & $1FFF) + $E000
 176+ E527             >
 176+ E527             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 176+ E527             >Latest_Definition defl  Heap_Ptr
 176+ E527             >
 176+ E527             >                // dummy db directives used to calculate length of namec
 176+ E527 44 50 4C    >                db      "DPL"
 176+ E52A             >len_NFA         defl    $ - temp_NFA
 176+ E52A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 176+ E527             >
 176+ E527 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 176+ E528 44 50 4C    >                db      "DPL"               // name string in 7-bit ascii, but
 176+ E52B             >                org     $-1                 // alter last byte of Name just above to set
 176+ E52A CC          >                db      {b $} | END_BIT     // msb as name end
 176+ E52B             >
 176+ E52B 1E 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 176+ E52D             >Prev_Ptr        defl    Heap_Ptr
 176+ E52D             >
 176+ E52D             >mirror_Ptr      defl    $
 176+ E52D             >
 176+ E52D 1B 28       >                dw      Dict_Ptr + 2        // xt
 176+ E52F             >Heap_Ptr        defl    $ - $E000           // save current HP
 176+ E52F             >
 176+ E52F             >Current_HP      defl  $ - $E000             // used to set HP once!
 176+ E52F             >
 176+ E52F             >//              ______________________________________________________________________
 176+ E52F             >//              Dictionary part
 176+ E52F             >
 176+ E52F             >                org     Dict_Ptr
 176+ 2819             >
 176+ 2819 2D 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 176+ 281B             >
 176+ 281B             >DPL:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 176+ 281B CD 38 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 176+ 281E             >
 176+ 281E             >
 176+ 281E             >                endif           ; ok        // for other definitions it "points" the correct handler
 176+ 281E             >                // Use of "; ok" to suppress "warning[fwdref]"
 176+ 281E             >
 176+ 281E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 176+ 281E 30          >                db      48
 177+ 281F                              User_Def FLD        , "FLD"       , 50 // output field width
 177+ 281F             >                New_Def  FLD, "FLD", User_Ptr, is_normal
 177+ 281F             >
 177+ 281F             >Dict_Ptr        defl    $
 177+ 281F             >
 177+ 281F             >//              ______________________________________________________________________
 177+ 281F             >//              Heap part
 177+ 281F             >
 177+ 281F             >
 177+ 281F             >                org     (Heap_Ptr & $1FFF) + $E000
 177+ E52F             >
 177+ E52F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 177+ E52F             >Latest_Definition defl  Heap_Ptr
 177+ E52F             >
 177+ E52F             >                // dummy db directives used to calculate length of namec
 177+ E52F 46 4C 44    >                db      "FLD"
 177+ E532             >len_NFA         defl    $ - temp_NFA
 177+ E532             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 177+ E52F             >
 177+ E52F 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 177+ E530 46 4C 44    >                db      "FLD"               // name string in 7-bit ascii, but
 177+ E533             >                org     $-1                 // alter last byte of Name just above to set
 177+ E532 C4          >                db      {b $} | END_BIT     // msb as name end
 177+ E533             >
 177+ E533 27 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 177+ E535             >Prev_Ptr        defl    Heap_Ptr
 177+ E535             >
 177+ E535             >mirror_Ptr      defl    $
 177+ E535             >
 177+ E535 21 28       >                dw      Dict_Ptr + 2        // xt
 177+ E537             >Heap_Ptr        defl    $ - $E000           // save current HP
 177+ E537             >
 177+ E537             >Current_HP      defl  $ - $E000             // used to set HP once!
 177+ E537             >
 177+ E537             >//              ______________________________________________________________________
 177+ E537             >//              Dictionary part
 177+ E537             >
 177+ E537             >                org     Dict_Ptr
 177+ 281F             >
 177+ 281F 35 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 177+ 2821             >
 177+ 2821             >FLD:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 177+ 2821 CD 38 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 177+ 2824             >
 177+ 2824             >
 177+ 2824             >                endif           ; ok        // for other definitions it "points" the correct handler
 177+ 2824             >                // Use of "; ok" to suppress "warning[fwdref]"
 177+ 2824             >
 177+ 2824             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 177+ 2824 32          >                db      50
 178+ 2825                              User_Def CSP        , "CSP"       , 52 // used to temporary store Stack-Pointer value
 178+ 2825             >                New_Def  CSP, "CSP", User_Ptr, is_normal
 178+ 2825             >
 178+ 2825             >Dict_Ptr        defl    $
 178+ 2825             >
 178+ 2825             >//              ______________________________________________________________________
 178+ 2825             >//              Heap part
 178+ 2825             >
 178+ 2825             >
 178+ 2825             >                org     (Heap_Ptr & $1FFF) + $E000
 178+ E537             >
 178+ E537             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 178+ E537             >Latest_Definition defl  Heap_Ptr
 178+ E537             >
 178+ E537             >                // dummy db directives used to calculate length of namec
 178+ E537 43 53 50    >                db      "CSP"
 178+ E53A             >len_NFA         defl    $ - temp_NFA
 178+ E53A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 178+ E537             >
 178+ E537 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 178+ E538 43 53 50    >                db      "CSP"               // name string in 7-bit ascii, but
 178+ E53B             >                org     $-1                 // alter last byte of Name just above to set
 178+ E53A D0          >                db      {b $} | END_BIT     // msb as name end
 178+ E53B             >
 178+ E53B 2F 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 178+ E53D             >Prev_Ptr        defl    Heap_Ptr
 178+ E53D             >
 178+ E53D             >mirror_Ptr      defl    $
 178+ E53D             >
 178+ E53D 27 28       >                dw      Dict_Ptr + 2        // xt
 178+ E53F             >Heap_Ptr        defl    $ - $E000           // save current HP
 178+ E53F             >
 178+ E53F             >Current_HP      defl  $ - $E000             // used to set HP once!
 178+ E53F             >
 178+ E53F             >//              ______________________________________________________________________
 178+ E53F             >//              Dictionary part
 178+ E53F             >
 178+ E53F             >                org     Dict_Ptr
 178+ 2825             >
 178+ 2825 3D 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 178+ 2827             >
 178+ 2827             >CSP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 178+ 2827 CD 38 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 178+ 282A             >
 178+ 282A             >
 178+ 282A             >                endif           ; ok        // for other definitions it "points" the correct handler
 178+ 282A             >                // Use of "; ok" to suppress "warning[fwdref]"
 178+ 282A             >
 178+ 282A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 178+ 282A 34          >                db      52
 179+ 282B                              User_Def RSHARP     , "R#"        , 54 // location of editing cursor
 179+ 282B             >                New_Def  RSHARP, "R#", User_Ptr, is_normal
 179+ 282B             >
 179+ 282B             >Dict_Ptr        defl    $
 179+ 282B             >
 179+ 282B             >//              ______________________________________________________________________
 179+ 282B             >//              Heap part
 179+ 282B             >
 179+ 282B             >
 179+ 282B             >                org     (Heap_Ptr & $1FFF) + $E000
 179+ E53F             >
 179+ E53F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 179+ E53F             >Latest_Definition defl  Heap_Ptr
 179+ E53F             >
 179+ E53F             >                // dummy db directives used to calculate length of namec
 179+ E53F 52 23       >                db      "R#"
 179+ E541             >len_NFA         defl    $ - temp_NFA
 179+ E541             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 179+ E53F             >
 179+ E53F 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 179+ E540 52 23       >                db      "R#"               // name string in 7-bit ascii, but
 179+ E542             >                org     $-1                 // alter last byte of Name just above to set
 179+ E541 A3          >                db      {b $} | END_BIT     // msb as name end
 179+ E542             >
 179+ E542 37 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 179+ E544             >Prev_Ptr        defl    Heap_Ptr
 179+ E544             >
 179+ E544             >mirror_Ptr      defl    $
 179+ E544             >
 179+ E544 2D 28       >                dw      Dict_Ptr + 2        // xt
 179+ E546             >Heap_Ptr        defl    $ - $E000           // save current HP
 179+ E546             >
 179+ E546             >Current_HP      defl  $ - $E000             // used to set HP once!
 179+ E546             >
 179+ E546             >//              ______________________________________________________________________
 179+ E546             >//              Dictionary part
 179+ E546             >
 179+ E546             >                org     Dict_Ptr
 179+ 282B             >
 179+ 282B 44 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 179+ 282D             >
 179+ 282D             >RSHARP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 179+ 282D CD 38 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 179+ 2830             >
 179+ 2830             >
 179+ 2830             >                endif           ; ok        // for other definitions it "points" the correct handler
 179+ 2830             >                // Use of "; ok" to suppress "warning[fwdref]"
 179+ 2830             >
 179+ 2830             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 179+ 2830 36          >                db      54
 180+ 2831                              User_Def HLD        , "HLD"       , 56 // last character during a number conversion output
 180+ 2831             >                New_Def  HLD, "HLD", User_Ptr, is_normal
 180+ 2831             >
 180+ 2831             >Dict_Ptr        defl    $
 180+ 2831             >
 180+ 2831             >//              ______________________________________________________________________
 180+ 2831             >//              Heap part
 180+ 2831             >
 180+ 2831             >
 180+ 2831             >                org     (Heap_Ptr & $1FFF) + $E000
 180+ E546             >
 180+ E546             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 180+ E546             >Latest_Definition defl  Heap_Ptr
 180+ E546             >
 180+ E546             >                // dummy db directives used to calculate length of namec
 180+ E546 48 4C 44    >                db      "HLD"
 180+ E549             >len_NFA         defl    $ - temp_NFA
 180+ E549             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 180+ E546             >
 180+ E546 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 180+ E547 48 4C 44    >                db      "HLD"               // name string in 7-bit ascii, but
 180+ E54A             >                org     $-1                 // alter last byte of Name just above to set
 180+ E549 C4          >                db      {b $} | END_BIT     // msb as name end
 180+ E54A             >
 180+ E54A 3F 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 180+ E54C             >Prev_Ptr        defl    Heap_Ptr
 180+ E54C             >
 180+ E54C             >mirror_Ptr      defl    $
 180+ E54C             >
 180+ E54C 33 28       >                dw      Dict_Ptr + 2        // xt
 180+ E54E             >Heap_Ptr        defl    $ - $E000           // save current HP
 180+ E54E             >
 180+ E54E             >Current_HP      defl  $ - $E000             // used to set HP once!
 180+ E54E             >
 180+ E54E             >//              ______________________________________________________________________
 180+ E54E             >//              Dictionary part
 180+ E54E             >
 180+ E54E             >                org     Dict_Ptr
 180+ 2831             >
 180+ 2831 4C 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 180+ 2833             >
 180+ 2833             >HLD:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 180+ 2833 CD 38 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 180+ 2836             >
 180+ 2836             >
 180+ 2836             >                endif           ; ok        // for other definitions it "points" the correct handler
 180+ 2836             >                // Use of "; ok" to suppress "warning[fwdref]"
 180+ 2836             >
 180+ 2836             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 180+ 2836 38          >                db      56
 181+ 2837                              User_Def USED       , "USED"      , 58 // address of last used block
 181+ 2837             >                New_Def  USED, "USED", User_Ptr, is_normal
 181+ 2837             >
 181+ 2837             >Dict_Ptr        defl    $
 181+ 2837             >
 181+ 2837             >//              ______________________________________________________________________
 181+ 2837             >//              Heap part
 181+ 2837             >
 181+ 2837             >
 181+ 2837             >                org     (Heap_Ptr & $1FFF) + $E000
 181+ E54E             >
 181+ E54E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 181+ E54E             >Latest_Definition defl  Heap_Ptr
 181+ E54E             >
 181+ E54E             >                // dummy db directives used to calculate length of namec
 181+ E54E 55 53 45 44 >                db      "USED"
 181+ E552             >len_NFA         defl    $ - temp_NFA
 181+ E552             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 181+ E54E             >
 181+ E54E 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 181+ E54F 55 53 45 44 >                db      "USED"               // name string in 7-bit ascii, but
 181+ E553             >                org     $-1                 // alter last byte of Name just above to set
 181+ E552 C4          >                db      {b $} | END_BIT     // msb as name end
 181+ E553             >
 181+ E553 46 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 181+ E555             >Prev_Ptr        defl    Heap_Ptr
 181+ E555             >
 181+ E555             >mirror_Ptr      defl    $
 181+ E555             >
 181+ E555 39 28       >                dw      Dict_Ptr + 2        // xt
 181+ E557             >Heap_Ptr        defl    $ - $E000           // save current HP
 181+ E557             >
 181+ E557             >Current_HP      defl  $ - $E000             // used to set HP once!
 181+ E557             >
 181+ E557             >//              ______________________________________________________________________
 181+ E557             >//              Dictionary part
 181+ E557             >
 181+ E557             >                org     Dict_Ptr
 181+ 2837             >
 181+ 2837 55 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 181+ 2839             >
 181+ 2839             >USED:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 181+ 2839 CD 38 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 181+ 283C             >
 181+ 283C             >
 181+ 283C             >                endif           ; ok        // for other definitions it "points" the correct handler
 181+ 283C             >                // Use of "; ok" to suppress "warning[fwdref]"
 181+ 283C             >
 181+ 283C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 181+ 283C 3A          >                db      58
 182+ 283D                              User_Def PREV       , "PREV"      , 60 // address of previous used block
 182+ 283D             >                New_Def  PREV, "PREV", User_Ptr, is_normal
 182+ 283D             >
 182+ 283D             >Dict_Ptr        defl    $
 182+ 283D             >
 182+ 283D             >//              ______________________________________________________________________
 182+ 283D             >//              Heap part
 182+ 283D             >
 182+ 283D             >
 182+ 283D             >                org     (Heap_Ptr & $1FFF) + $E000
 182+ E557             >
 182+ E557             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 182+ E557             >Latest_Definition defl  Heap_Ptr
 182+ E557             >
 182+ E557             >                // dummy db directives used to calculate length of namec
 182+ E557 50 52 45 56 >                db      "PREV"
 182+ E55B             >len_NFA         defl    $ - temp_NFA
 182+ E55B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 182+ E557             >
 182+ E557 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 182+ E558 50 52 45 56 >                db      "PREV"               // name string in 7-bit ascii, but
 182+ E55C             >                org     $-1                 // alter last byte of Name just above to set
 182+ E55B D6          >                db      {b $} | END_BIT     // msb as name end
 182+ E55C             >
 182+ E55C 4E 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 182+ E55E             >Prev_Ptr        defl    Heap_Ptr
 182+ E55E             >
 182+ E55E             >mirror_Ptr      defl    $
 182+ E55E             >
 182+ E55E 3F 28       >                dw      Dict_Ptr + 2        // xt
 182+ E560             >Heap_Ptr        defl    $ - $E000           // save current HP
 182+ E560             >
 182+ E560             >Current_HP      defl  $ - $E000             // used to set HP once!
 182+ E560             >
 182+ E560             >//              ______________________________________________________________________
 182+ E560             >//              Dictionary part
 182+ E560             >
 182+ E560             >                org     Dict_Ptr
 182+ 283D             >
 182+ 283D 5E 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 182+ 283F             >
 182+ 283F             >PREV:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 182+ 283F CD 38 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 182+ 2842             >
 182+ 2842             >
 182+ 2842             >                endif           ; ok        // for other definitions it "points" the correct handler
 182+ 2842             >                // Use of "; ok" to suppress "warning[fwdref]"
 182+ 2842             >
 182+ 2842             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 182+ 2842 3C          >                db      60
 183+ 2843                              User_Def LP         , "LP"        , 62 // line printer (not used)
 183+ 2843             >                New_Def  LP, "LP", User_Ptr, is_normal
 183+ 2843             >
 183+ 2843             >Dict_Ptr        defl    $
 183+ 2843             >
 183+ 2843             >//              ______________________________________________________________________
 183+ 2843             >//              Heap part
 183+ 2843             >
 183+ 2843             >
 183+ 2843             >                org     (Heap_Ptr & $1FFF) + $E000
 183+ E560             >
 183+ E560             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 183+ E560             >Latest_Definition defl  Heap_Ptr
 183+ E560             >
 183+ E560             >                // dummy db directives used to calculate length of namec
 183+ E560 4C 50       >                db      "LP"
 183+ E562             >len_NFA         defl    $ - temp_NFA
 183+ E562             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 183+ E560             >
 183+ E560 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 183+ E561 4C 50       >                db      "LP"               // name string in 7-bit ascii, but
 183+ E563             >                org     $-1                 // alter last byte of Name just above to set
 183+ E562 D0          >                db      {b $} | END_BIT     // msb as name end
 183+ E563             >
 183+ E563 57 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 183+ E565             >Prev_Ptr        defl    Heap_Ptr
 183+ E565             >
 183+ E565             >mirror_Ptr      defl    $
 183+ E565             >
 183+ E565 45 28       >                dw      Dict_Ptr + 2        // xt
 183+ E567             >Heap_Ptr        defl    $ - $E000           // save current HP
 183+ E567             >
 183+ E567             >Current_HP      defl  $ - $E000             // used to set HP once!
 183+ E567             >
 183+ E567             >//              ______________________________________________________________________
 183+ E567             >//              Dictionary part
 183+ E567             >
 183+ E567             >                org     Dict_Ptr
 183+ 2843             >
 183+ 2843 65 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 183+ 2845             >
 183+ 2845             >LP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 183+ 2845 CD 38 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 183+ 2848             >
 183+ 2848             >
 183+ 2848             >                endif           ; ok        // for other definitions it "points" the correct handler
 183+ 2848             >                // Use of "; ok" to suppress "warning[fwdref]"
 183+ 2848             >
 183+ 2848             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 183+ 2848 3E          >                db      62
 184+ 2849                              User_Def PLACE      , "PLACE"     , 64 // number of digits after decimal point in output
 184+ 2849             >                New_Def  PLACE, "PLACE", User_Ptr, is_normal
 184+ 2849             >
 184+ 2849             >Dict_Ptr        defl    $
 184+ 2849             >
 184+ 2849             >//              ______________________________________________________________________
 184+ 2849             >//              Heap part
 184+ 2849             >
 184+ 2849             >
 184+ 2849             >                org     (Heap_Ptr & $1FFF) + $E000
 184+ E567             >
 184+ E567             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 184+ E567             >Latest_Definition defl  Heap_Ptr
 184+ E567             >
 184+ E567             >                // dummy db directives used to calculate length of namec
 184+ E567 50 4C 41 43 >                db      "PLACE"
 184+ E56B 45          >
 184+ E56C             >len_NFA         defl    $ - temp_NFA
 184+ E56C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 184+ E567             >
 184+ E567 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 184+ E568 50 4C 41 43 >                db      "PLACE"               // name string in 7-bit ascii, but
 184+ E56C 45          >
 184+ E56D             >                org     $-1                 // alter last byte of Name just above to set
 184+ E56C C5          >                db      {b $} | END_BIT     // msb as name end
 184+ E56D             >
 184+ E56D 60 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 184+ E56F             >Prev_Ptr        defl    Heap_Ptr
 184+ E56F             >
 184+ E56F             >mirror_Ptr      defl    $
 184+ E56F             >
 184+ E56F 4B 28       >                dw      Dict_Ptr + 2        // xt
 184+ E571             >Heap_Ptr        defl    $ - $E000           // save current HP
 184+ E571             >
 184+ E571             >Current_HP      defl  $ - $E000             // used to set HP once!
 184+ E571             >
 184+ E571             >//              ______________________________________________________________________
 184+ E571             >//              Dictionary part
 184+ E571             >
 184+ E571             >                org     Dict_Ptr
 184+ 2849             >
 184+ 2849 6F 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 184+ 284B             >
 184+ 284B             >PLACE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 184+ 284B CD 38 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 184+ 284E             >
 184+ 284E             >
 184+ 284E             >                endif           ; ok        // for other definitions it "points" the correct handler
 184+ 284E             >                // Use of "; ok" to suppress "warning[fwdref]"
 184+ 284E             >
 184+ 284E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 184+ 284E 40          >                db      64
 185+ 284F                              User_Def SOURCE_ID  , "SOURCE-ID" , 66 // data-stream number in INCLUDE and LOAD-
 185+ 284F             >                New_Def  SOURCE_ID, "SOURCE-ID", User_Ptr, is_normal
 185+ 284F             >
 185+ 284F             >Dict_Ptr        defl    $
 185+ 284F             >
 185+ 284F             >//              ______________________________________________________________________
 185+ 284F             >//              Heap part
 185+ 284F             >
 185+ 284F             >
 185+ 284F             >                org     (Heap_Ptr & $1FFF) + $E000
 185+ E571             >
 185+ E571             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 185+ E571             >Latest_Definition defl  Heap_Ptr
 185+ E571             >
 185+ E571             >                // dummy db directives used to calculate length of namec
 185+ E571 53 4F 55 52 >                db      "SOURCE-ID"
 185+ E575 43 45 2D 49 >
 185+ E579 44          >
 185+ E57A             >len_NFA         defl    $ - temp_NFA
 185+ E57A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 185+ E571             >
 185+ E571 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 185+ E572 53 4F 55 52 >                db      "SOURCE-ID"               // name string in 7-bit ascii, but
 185+ E576 43 45 2D 49 >
 185+ E57A 44          >
 185+ E57B             >                org     $-1                 // alter last byte of Name just above to set
 185+ E57A C4          >                db      {b $} | END_BIT     // msb as name end
 185+ E57B             >
 185+ E57B 67 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 185+ E57D             >Prev_Ptr        defl    Heap_Ptr
 185+ E57D             >
 185+ E57D             >mirror_Ptr      defl    $
 185+ E57D             >
 185+ E57D 51 28       >                dw      Dict_Ptr + 2        // xt
 185+ E57F             >Heap_Ptr        defl    $ - $E000           // save current HP
 185+ E57F             >
 185+ E57F             >Current_HP      defl  $ - $E000             // used to set HP once!
 185+ E57F             >
 185+ E57F             >//              ______________________________________________________________________
 185+ E57F             >//              Dictionary part
 185+ E57F             >
 185+ E57F             >                org     Dict_Ptr
 185+ 284F             >
 185+ 284F 7D 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 185+ 2851             >
 185+ 2851             >SOURCE_ID:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 185+ 2851 CD 38 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 185+ 2854             >
 185+ 2854             >
 185+ 2854             >                endif           ; ok        // for other definitions it "points" the correct handler
 185+ 2854             >                // Use of "; ok" to suppress "warning[fwdref]"
 185+ 2854             >
 185+ 2854             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 185+ 2854 42          >                db      66
 186+ 2855                              User_Def SPAN       , "SPAN"      , 68 // number of character of last EXPECT
 186+ 2855             >                New_Def  SPAN, "SPAN", User_Ptr, is_normal
 186+ 2855             >
 186+ 2855             >Dict_Ptr        defl    $
 186+ 2855             >
 186+ 2855             >//              ______________________________________________________________________
 186+ 2855             >//              Heap part
 186+ 2855             >
 186+ 2855             >
 186+ 2855             >                org     (Heap_Ptr & $1FFF) + $E000
 186+ E57F             >
 186+ E57F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 186+ E57F             >Latest_Definition defl  Heap_Ptr
 186+ E57F             >
 186+ E57F             >                // dummy db directives used to calculate length of namec
 186+ E57F 53 50 41 4E >                db      "SPAN"
 186+ E583             >len_NFA         defl    $ - temp_NFA
 186+ E583             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 186+ E57F             >
 186+ E57F 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 186+ E580 53 50 41 4E >                db      "SPAN"               // name string in 7-bit ascii, but
 186+ E584             >                org     $-1                 // alter last byte of Name just above to set
 186+ E583 CE          >                db      {b $} | END_BIT     // msb as name end
 186+ E584             >
 186+ E584 71 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 186+ E586             >Prev_Ptr        defl    Heap_Ptr
 186+ E586             >
 186+ E586             >mirror_Ptr      defl    $
 186+ E586             >
 186+ E586 57 28       >                dw      Dict_Ptr + 2        // xt
 186+ E588             >Heap_Ptr        defl    $ - $E000           // save current HP
 186+ E588             >
 186+ E588             >Current_HP      defl  $ - $E000             // used to set HP once!
 186+ E588             >
 186+ E588             >//              ______________________________________________________________________
 186+ E588             >//              Dictionary part
 186+ E588             >
 186+ E588             >                org     Dict_Ptr
 186+ 2855             >
 186+ 2855 86 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 186+ 2857             >
 186+ 2857             >SPAN:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 186+ 2857 CD 38 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 186+ 285A             >
 186+ 285A             >
 186+ 285A             >                endif           ; ok        // for other definitions it "points" the correct handler
 186+ 285A             >                // Use of "; ok" to suppress "warning[fwdref]"
 186+ 285A             >
 186+ 285A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 186+ 285A 44          >                db      68
 187+ 285B                              User_Def HANDLER    , "HANDLER"   , 70 // Used by THROW-CATCH
 187+ 285B             >                New_Def  HANDLER, "HANDLER", User_Ptr, is_normal
 187+ 285B             >
 187+ 285B             >Dict_Ptr        defl    $
 187+ 285B             >
 187+ 285B             >//              ______________________________________________________________________
 187+ 285B             >//              Heap part
 187+ 285B             >
 187+ 285B             >
 187+ 285B             >                org     (Heap_Ptr & $1FFF) + $E000
 187+ E588             >
 187+ E588             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 187+ E588             >Latest_Definition defl  Heap_Ptr
 187+ E588             >
 187+ E588             >                // dummy db directives used to calculate length of namec
 187+ E588 48 41 4E 44 >                db      "HANDLER"
 187+ E58C 4C 45 52    >
 187+ E58F             >len_NFA         defl    $ - temp_NFA
 187+ E58F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 187+ E588             >
 187+ E588 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 187+ E589 48 41 4E 44 >                db      "HANDLER"               // name string in 7-bit ascii, but
 187+ E58D 4C 45 52    >
 187+ E590             >                org     $-1                 // alter last byte of Name just above to set
 187+ E58F D2          >                db      {b $} | END_BIT     // msb as name end
 187+ E590             >
 187+ E590 7F 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 187+ E592             >Prev_Ptr        defl    Heap_Ptr
 187+ E592             >
 187+ E592             >mirror_Ptr      defl    $
 187+ E592             >
 187+ E592 5D 28       >                dw      Dict_Ptr + 2        // xt
 187+ E594             >Heap_Ptr        defl    $ - $E000           // save current HP
 187+ E594             >
 187+ E594             >Current_HP      defl  $ - $E000             // used to set HP once!
 187+ E594             >
 187+ E594             >//              ______________________________________________________________________
 187+ E594             >//              Dictionary part
 187+ E594             >
 187+ E594             >                org     Dict_Ptr
 187+ 285B             >
 187+ 285B 92 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 187+ 285D             >
 187+ 285D             >HANDLER:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 187+ 285D CD 38 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 187+ 2860             >
 187+ 2860             >
 187+ 2860             >                endif           ; ok        // for other definitions it "points" the correct handler
 187+ 2860             >                // Use of "; ok" to suppress "warning[fwdref]"
 187+ 2860             >
 187+ 2860             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 187+ 2860 46          >                db      70
 188+ 2861                              User_Def EXP        , "EXP"       , 72 // keeps the exponent in number conversion
 188+ 2861             >                New_Def  EXP, "EXP", User_Ptr, is_normal
 188+ 2861             >
 188+ 2861             >Dict_Ptr        defl    $
 188+ 2861             >
 188+ 2861             >//              ______________________________________________________________________
 188+ 2861             >//              Heap part
 188+ 2861             >
 188+ 2861             >
 188+ 2861             >                org     (Heap_Ptr & $1FFF) + $E000
 188+ E594             >
 188+ E594             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 188+ E594             >Latest_Definition defl  Heap_Ptr
 188+ E594             >
 188+ E594             >                // dummy db directives used to calculate length of namec
 188+ E594 45 58 50    >                db      "EXP"
 188+ E597             >len_NFA         defl    $ - temp_NFA
 188+ E597             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 188+ E594             >
 188+ E594 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 188+ E595 45 58 50    >                db      "EXP"               // name string in 7-bit ascii, but
 188+ E598             >                org     $-1                 // alter last byte of Name just above to set
 188+ E597 D0          >                db      {b $} | END_BIT     // msb as name end
 188+ E598             >
 188+ E598 88 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 188+ E59A             >Prev_Ptr        defl    Heap_Ptr
 188+ E59A             >
 188+ E59A             >mirror_Ptr      defl    $
 188+ E59A             >
 188+ E59A 63 28       >                dw      Dict_Ptr + 2        // xt
 188+ E59C             >Heap_Ptr        defl    $ - $E000           // save current HP
 188+ E59C             >
 188+ E59C             >Current_HP      defl  $ - $E000             // used to set HP once!
 188+ E59C             >
 188+ E59C             >//              ______________________________________________________________________
 188+ E59C             >//              Dictionary part
 188+ E59C             >
 188+ E59C             >                org     Dict_Ptr
 188+ 2861             >
 188+ 2861 9A 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 188+ 2863             >
 188+ 2863             >EXP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 188+ 2863 CD 38 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 188+ 2866             >
 188+ 2866             >
 188+ 2866             >                endif           ; ok        // for other definitions it "points" the correct handler
 188+ 2866             >                // Use of "; ok" to suppress "warning[fwdref]"
 188+ 2866             >
 188+ 2866             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 188+ 2866 48          >                db      72
 189+ 2867
 190+ 2867              //  ______________________________________________________________________
 191+ 2867              //
 192+ 2867              // here         -- a
 193+ 2867                              Colon_Def HERE, "HERE", is_normal
 193+ 2867             >                New_Def  HERE, "HERE", Enter_Ptr, is_normal ; ok
 193+ 2867             >
 193+ 2867             >Dict_Ptr        defl    $
 193+ 2867             >
 193+ 2867             >//              ______________________________________________________________________
 193+ 2867             >//              Heap part
 193+ 2867             >
 193+ 2867             >
 193+ 2867             >                org     (Heap_Ptr & $1FFF) + $E000
 193+ E59C             >
 193+ E59C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 193+ E59C             >Latest_Definition defl  Heap_Ptr
 193+ E59C             >
 193+ E59C             >                // dummy db directives used to calculate length of namec
 193+ E59C 48 45 52 45 >                db      "HERE"
 193+ E5A0             >len_NFA         defl    $ - temp_NFA
 193+ E5A0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 193+ E59C             >
 193+ E59C 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 193+ E59D 48 45 52 45 >                db      "HERE"               // name string in 7-bit ascii, but
 193+ E5A1             >                org     $-1                 // alter last byte of Name just above to set
 193+ E5A0 C5          >                db      {b $} | END_BIT     // msb as name end
 193+ E5A1             >
 193+ E5A1 94 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 193+ E5A3             >Prev_Ptr        defl    Heap_Ptr
 193+ E5A3             >
 193+ E5A3             >mirror_Ptr      defl    $
 193+ E5A3             >
 193+ E5A3 69 28       >                dw      Dict_Ptr + 2        // xt
 193+ E5A5             >Heap_Ptr        defl    $ - $E000           // save current HP
 193+ E5A5             >
 193+ E5A5             >Current_HP      defl  $ - $E000             // used to set HP once!
 193+ E5A5             >
 193+ E5A5             >//              ______________________________________________________________________
 193+ E5A5             >//              Dictionary part
 193+ E5A5             >
 193+ E5A5             >                org     Dict_Ptr
 193+ 2867             >
 193+ 2867 A3 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 193+ 2869             >
 193+ 2869             >HERE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 193+ 2869 CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 193+ 286C             >
 193+ 286C             >
 193+ 286C             >                endif           ; ok        // for other definitions it "points" the correct handler
 193+ 286C             >                // Use of "; ok" to suppress "warning[fwdref]"
 193+ 286C             >
 193+ 286C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 194+ 286C C1 27 4C 26                  dw      DP, FETCH               // dp @
 195+ 2870 02 25                        dw      EXIT                    // ;
 196+ 2872
 197+ 2872              //  ______________________________________________________________________
 198+ 2872              //
 199+ 2872              // allot        n --
 200+ 2872                              Colon_Def ALLOT, "ALLOT", is_normal
 200+ 2872             >                New_Def  ALLOT, "ALLOT", Enter_Ptr, is_normal ; ok
 200+ 2872             >
 200+ 2872             >Dict_Ptr        defl    $
 200+ 2872             >
 200+ 2872             >//              ______________________________________________________________________
 200+ 2872             >//              Heap part
 200+ 2872             >
 200+ 2872             >
 200+ 2872             >                org     (Heap_Ptr & $1FFF) + $E000
 200+ E5A5             >
 200+ E5A5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 200+ E5A5             >Latest_Definition defl  Heap_Ptr
 200+ E5A5             >
 200+ E5A5             >                // dummy db directives used to calculate length of namec
 200+ E5A5 41 4C 4C 4F >                db      "ALLOT"
 200+ E5A9 54          >
 200+ E5AA             >len_NFA         defl    $ - temp_NFA
 200+ E5AA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 200+ E5A5             >
 200+ E5A5 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 200+ E5A6 41 4C 4C 4F >                db      "ALLOT"               // name string in 7-bit ascii, but
 200+ E5AA 54          >
 200+ E5AB             >                org     $-1                 // alter last byte of Name just above to set
 200+ E5AA D4          >                db      {b $} | END_BIT     // msb as name end
 200+ E5AB             >
 200+ E5AB 9C 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 200+ E5AD             >Prev_Ptr        defl    Heap_Ptr
 200+ E5AD             >
 200+ E5AD             >mirror_Ptr      defl    $
 200+ E5AD             >
 200+ E5AD 74 28       >                dw      Dict_Ptr + 2        // xt
 200+ E5AF             >Heap_Ptr        defl    $ - $E000           // save current HP
 200+ E5AF             >
 200+ E5AF             >Current_HP      defl  $ - $E000             // used to set HP once!
 200+ E5AF             >
 200+ E5AF             >//              ______________________________________________________________________
 200+ E5AF             >//              Dictionary part
 200+ E5AF             >
 200+ E5AF             >                org     Dict_Ptr
 200+ 2872             >
 200+ 2872 AD 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 200+ 2874             >
 200+ 2874             >ALLOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 200+ 2874 CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 200+ 2877             >
 200+ 2877             >
 200+ 2877             >                endif           ; ok        // for other definitions it "points" the correct handler
 200+ 2877             >                // Use of "; ok" to suppress "warning[fwdref]"
 200+ 2877             >
 200+ 2877             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 201+ 2877 C1 27 34 26                  dw      DP,  PLUSSTORE          // dp +!
 202+ 287B 02 25                        dw      EXIT                    // ;
 203+ 287D
 204+ 287D              //  ______________________________________________________________________
 205+ 287D              //
 206+ 287D              // comma        n --
 207+ 287D                              Colon_Def COMMA, ",", is_normal
 207+ 287D             >                New_Def  COMMA, ",", Enter_Ptr, is_normal ; ok
 207+ 287D             >
 207+ 287D             >Dict_Ptr        defl    $
 207+ 287D             >
 207+ 287D             >//              ______________________________________________________________________
 207+ 287D             >//              Heap part
 207+ 287D             >
 207+ 287D             >
 207+ 287D             >                org     (Heap_Ptr & $1FFF) + $E000
 207+ E5AF             >
 207+ E5AF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 207+ E5AF             >Latest_Definition defl  Heap_Ptr
 207+ E5AF             >
 207+ E5AF             >                // dummy db directives used to calculate length of namec
 207+ E5AF 2C          >                db      ","
 207+ E5B0             >len_NFA         defl    $ - temp_NFA
 207+ E5B0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 207+ E5AF             >
 207+ E5AF 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 207+ E5B0 2C          >                db      ","               // name string in 7-bit ascii, but
 207+ E5B1             >                org     $-1                 // alter last byte of Name just above to set
 207+ E5B0 AC          >                db      {b $} | END_BIT     // msb as name end
 207+ E5B1             >
 207+ E5B1 A5 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 207+ E5B3             >Prev_Ptr        defl    Heap_Ptr
 207+ E5B3             >
 207+ E5B3             >mirror_Ptr      defl    $
 207+ E5B3             >
 207+ E5B3 7F 28       >                dw      Dict_Ptr + 2        // xt
 207+ E5B5             >Heap_Ptr        defl    $ - $E000           // save current HP
 207+ E5B5             >
 207+ E5B5             >Current_HP      defl  $ - $E000             // used to set HP once!
 207+ E5B5             >
 207+ E5B5             >//              ______________________________________________________________________
 207+ E5B5             >//              Dictionary part
 207+ E5B5             >
 207+ E5B5             >                org     Dict_Ptr
 207+ 287D             >
 207+ 287D B3 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 207+ 287F             >
 207+ 287F             >COMMA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 207+ 287F CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 207+ 2882             >
 207+ 2882             >
 207+ 2882             >                endif           ; ok        // for other definitions it "points" the correct handler
 207+ 2882             >                // Use of "; ok" to suppress "warning[fwdref]"
 207+ 2882             >
 207+ 2882             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 208+ 2882 69 28 56 26                  dw      HERE, STORE             // here !
 209+ 2886 52 27 74 28                  dw      TWO, ALLOT              // 2 allot
 210+ 288A 02 25                        dw      EXIT                    // ;
 211+ 288C
 212+ 288C              //  ______________________________________________________________________
 213+ 288C              //
 214+ 288C              // ccomma       c --
 215+ 288C                              Colon_Def CCOMMA, "C,", is_normal
 215+ 288C             >                New_Def  CCOMMA, "C,", Enter_Ptr, is_normal ; ok
 215+ 288C             >
 215+ 288C             >Dict_Ptr        defl    $
 215+ 288C             >
 215+ 288C             >//              ______________________________________________________________________
 215+ 288C             >//              Heap part
 215+ 288C             >
 215+ 288C             >
 215+ 288C             >                org     (Heap_Ptr & $1FFF) + $E000
 215+ E5B5             >
 215+ E5B5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 215+ E5B5             >Latest_Definition defl  Heap_Ptr
 215+ E5B5             >
 215+ E5B5             >                // dummy db directives used to calculate length of namec
 215+ E5B5 43 2C       >                db      "C,"
 215+ E5B7             >len_NFA         defl    $ - temp_NFA
 215+ E5B7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 215+ E5B5             >
 215+ E5B5 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 215+ E5B6 43 2C       >                db      "C,"               // name string in 7-bit ascii, but
 215+ E5B8             >                org     $-1                 // alter last byte of Name just above to set
 215+ E5B7 AC          >                db      {b $} | END_BIT     // msb as name end
 215+ E5B8             >
 215+ E5B8 AF 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 215+ E5BA             >Prev_Ptr        defl    Heap_Ptr
 215+ E5BA             >
 215+ E5BA             >mirror_Ptr      defl    $
 215+ E5BA             >
 215+ E5BA 8E 28       >                dw      Dict_Ptr + 2        // xt
 215+ E5BC             >Heap_Ptr        defl    $ - $E000           // save current HP
 215+ E5BC             >
 215+ E5BC             >Current_HP      defl  $ - $E000             // used to set HP once!
 215+ E5BC             >
 215+ E5BC             >//              ______________________________________________________________________
 215+ E5BC             >//              Dictionary part
 215+ E5BC             >
 215+ E5BC             >                org     Dict_Ptr
 215+ 288C             >
 215+ 288C BA 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 215+ 288E             >
 215+ 288E             >CCOMMA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 215+ 288E CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 215+ 2891             >
 215+ 2891             >
 215+ 2891             >                endif           ; ok        // for other definitions it "points" the correct handler
 215+ 2891             >                // Use of "; ok" to suppress "warning[fwdref]"
 215+ 2891             >
 215+ 2891             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 216+ 2891 69 28 6A 26                  dw      HERE, CSTORE            // here c!
 217+ 2895 4B 27 74 28                  dw      ONE, ALLOT              // 1 allot
 218+ 2899 02 25                        dw      EXIT                    // ;
 219+ 289B
 220+ 289B              //  ______________________________________________________________________
 221+ 289B              //
 222+ 289B              // hpcomma      n --
 223+ 289B              //              Colon_Def HCOMMA, "HP,", is_normal
 224+ 289B              //              dw      HP_FETCH, FAR, STORE    // HP@ FAR !
 225+ 289B              //              dw      TWO, HP, PLUSSTORE      // 2 HP +!
 226+ 289B              //              dw      EXIT                    // ;
 227+ 289B
 228+ 289B              //  ______________________________________________________________________
 229+ 289B              //
 230+ 289B              // s>d          n -- d
 231+ 289B              // converts a single precision integer in a double precision
 232+ 289B                              New_Def S_TO_D, "S>D", is_code, is_normal
 232+ 289B             >
 232+ 289B             >Dict_Ptr        defl    $
 232+ 289B             >
 232+ 289B             >//              ______________________________________________________________________
 232+ 289B             >//              Heap part
 232+ 289B             >
 232+ 289B             >
 232+ 289B             >                org     (Heap_Ptr & $1FFF) + $E000
 232+ E5BC             >
 232+ E5BC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 232+ E5BC             >Latest_Definition defl  Heap_Ptr
 232+ E5BC             >
 232+ E5BC             >                // dummy db directives used to calculate length of namec
 232+ E5BC 53 3E 44    >                db      "S>D"
 232+ E5BF             >len_NFA         defl    $ - temp_NFA
 232+ E5BF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 232+ E5BC             >
 232+ E5BC 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 232+ E5BD 53 3E 44    >                db      "S>D"               // name string in 7-bit ascii, but
 232+ E5C0             >                org     $-1                 // alter last byte of Name just above to set
 232+ E5BF C4          >                db      {b $} | END_BIT     // msb as name end
 232+ E5C0             >
 232+ E5C0 B5 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 232+ E5C2             >Prev_Ptr        defl    Heap_Ptr
 232+ E5C2             >
 232+ E5C2             >mirror_Ptr      defl    $
 232+ E5C2             >
 232+ E5C2 9D 28       >                dw      Dict_Ptr + 2        // xt
 232+ E5C4             >Heap_Ptr        defl    $ - $E000           // save current HP
 232+ E5C4             >
 232+ E5C4             >Current_HP      defl  $ - $E000             // used to set HP once!
 232+ E5C4             >
 232+ E5C4             >//              ______________________________________________________________________
 232+ E5C4             >//              Dictionary part
 232+ E5C4             >
 232+ E5C4             >                org     Dict_Ptr
 232+ 289B             >
 232+ 289B C2 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 232+ 289D             >
 232+ 289D             >S_TO_D:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 232+ 289D ~           >                call    runcode ; ok        // for primitive definitions  actual code
 232+ 289D ~           >
 232+ 289D ~           >
 232+ 289D             >                endif           ; ok        // for other definitions it "points" the correct handler
 232+ 289D             >                // Use of "; ok" to suppress "warning[fwdref]"
 232+ 289D             >
 232+ 289D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 233+ 289D E1                           pop     hl
 234+ 289E 7C                           ld      a, h
 235+ 289F E5                           push    hl
 236+ 28A0 17                           rla
 237+ 28A1 ED 62                        sbc     hl, hl
 238+ 28A3 E5                           push    hl
 239+ 28A4                              next
 239+ 28A4 DD E9       >                jp      (ix)
 240+ 28A6
 241+ 28A6              //  ______________________________________________________________________
 242+ 28A6              //
 243+ 28A6              // -            n1 n2 -- n3
 244+ 28A6              // subtraction
 245+ 28A6                              New_Def SUBTRACT, "-", is_code, is_normal
 245+ 28A6             >
 245+ 28A6             >Dict_Ptr        defl    $
 245+ 28A6             >
 245+ 28A6             >//              ______________________________________________________________________
 245+ 28A6             >//              Heap part
 245+ 28A6             >
 245+ 28A6             >
 245+ 28A6             >                org     (Heap_Ptr & $1FFF) + $E000
 245+ E5C4             >
 245+ E5C4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 245+ E5C4             >Latest_Definition defl  Heap_Ptr
 245+ E5C4             >
 245+ E5C4             >                // dummy db directives used to calculate length of namec
 245+ E5C4 2D          >                db      "-"
 245+ E5C5             >len_NFA         defl    $ - temp_NFA
 245+ E5C5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 245+ E5C4             >
 245+ E5C4 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 245+ E5C5 2D          >                db      "-"               // name string in 7-bit ascii, but
 245+ E5C6             >                org     $-1                 // alter last byte of Name just above to set
 245+ E5C5 AD          >                db      {b $} | END_BIT     // msb as name end
 245+ E5C6             >
 245+ E5C6 BC 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 245+ E5C8             >Prev_Ptr        defl    Heap_Ptr
 245+ E5C8             >
 245+ E5C8             >mirror_Ptr      defl    $
 245+ E5C8             >
 245+ E5C8 A8 28       >                dw      Dict_Ptr + 2        // xt
 245+ E5CA             >Heap_Ptr        defl    $ - $E000           // save current HP
 245+ E5CA             >
 245+ E5CA             >Current_HP      defl  $ - $E000             // used to set HP once!
 245+ E5CA             >
 245+ E5CA             >//              ______________________________________________________________________
 245+ E5CA             >//              Dictionary part
 245+ E5CA             >
 245+ E5CA             >                org     Dict_Ptr
 245+ 28A6             >
 245+ 28A6 C8 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 245+ 28A8             >
 245+ 28A8             >SUBTRACT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 245+ 28A8 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 245+ 28A8 ~           >
 245+ 28A8 ~           >
 245+ 28A8             >                endif           ; ok        // for other definitions it "points" the correct handler
 245+ 28A8             >                // Use of "; ok" to suppress "warning[fwdref]"
 245+ 28A8             >
 245+ 28A8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 246+ 28A8 D9                           exx
 247+ 28A9 D1                           pop     de
 248+ 28AA E1                           pop     hl
 249+ 28AB A7                           and     a
 250+ 28AC ED 52                        sbc     hl, de
 251+ 28AE E5                           push    hl
 252+ 28AF D9                           exx
 253+ 28B0                              next
 253+ 28B0 DD E9       >                jp      (ix)
 254+ 28B2
 255+ 28B2
 256+ 28B2              //  ______________________________________________________________________
 257+ 28B2              //
 258+ 28B2              // =            n1 n2 -- n3
 259+ 28B2              // equals
 260+ 28B2                              Colon_Def EQUALS, "=", is_normal
 260+ 28B2             >                New_Def  EQUALS, "=", Enter_Ptr, is_normal ; ok
 260+ 28B2             >
 260+ 28B2             >Dict_Ptr        defl    $
 260+ 28B2             >
 260+ 28B2             >//              ______________________________________________________________________
 260+ 28B2             >//              Heap part
 260+ 28B2             >
 260+ 28B2             >
 260+ 28B2             >                org     (Heap_Ptr & $1FFF) + $E000
 260+ E5CA             >
 260+ E5CA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 260+ E5CA             >Latest_Definition defl  Heap_Ptr
 260+ E5CA             >
 260+ E5CA             >                // dummy db directives used to calculate length of namec
 260+ E5CA 3D          >                db      "="
 260+ E5CB             >len_NFA         defl    $ - temp_NFA
 260+ E5CB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 260+ E5CA             >
 260+ E5CA 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 260+ E5CB 3D          >                db      "="               // name string in 7-bit ascii, but
 260+ E5CC             >                org     $-1                 // alter last byte of Name just above to set
 260+ E5CB BD          >                db      {b $} | END_BIT     // msb as name end
 260+ E5CC             >
 260+ E5CC C4 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 260+ E5CE             >Prev_Ptr        defl    Heap_Ptr
 260+ E5CE             >
 260+ E5CE             >mirror_Ptr      defl    $
 260+ E5CE             >
 260+ E5CE B4 28       >                dw      Dict_Ptr + 2        // xt
 260+ E5D0             >Heap_Ptr        defl    $ - $E000           // save current HP
 260+ E5D0             >
 260+ E5D0             >Current_HP      defl  $ - $E000             // used to set HP once!
 260+ E5D0             >
 260+ E5D0             >//              ______________________________________________________________________
 260+ E5D0             >//              Dictionary part
 260+ E5D0             >
 260+ E5D0             >                org     Dict_Ptr
 260+ 28B2             >
 260+ 28B2 CE 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 260+ 28B4             >
 260+ 28B4             >EQUALS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 260+ 28B4 CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 260+ 28B7             >
 260+ 28B7             >
 260+ 28B7             >                endif           ; ok        // for other definitions it "points" the correct handler
 260+ 28B7             >                // Use of "; ok" to suppress "warning[fwdref]"
 260+ 28B7             >
 260+ 28B7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 261+ 28B7 A8 28 27 25                  dw      SUBTRACT, ZEQUAL        // - 0=
 262+ 28BB 02 25                        dw      EXIT                    // ;
 263+ 28BD
 264+ 28BD              //  ______________________________________________________________________
 265+ 28BD              //
 266+ 28BD              // u<           u1 u2 -- u3
 267+ 28BD              // unsigned less-than
 268+ 28BD                              New_Def ULESS, "U<", is_code, is_normal
 268+ 28BD             >
 268+ 28BD             >Dict_Ptr        defl    $
 268+ 28BD             >
 268+ 28BD             >//              ______________________________________________________________________
 268+ 28BD             >//              Heap part
 268+ 28BD             >
 268+ 28BD             >
 268+ 28BD             >                org     (Heap_Ptr & $1FFF) + $E000
 268+ E5D0             >
 268+ E5D0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 268+ E5D0             >Latest_Definition defl  Heap_Ptr
 268+ E5D0             >
 268+ E5D0             >                // dummy db directives used to calculate length of namec
 268+ E5D0 55 3C       >                db      "U<"
 268+ E5D2             >len_NFA         defl    $ - temp_NFA
 268+ E5D2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 268+ E5D0             >
 268+ E5D0 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 268+ E5D1 55 3C       >                db      "U<"               // name string in 7-bit ascii, but
 268+ E5D3             >                org     $-1                 // alter last byte of Name just above to set
 268+ E5D2 BC          >                db      {b $} | END_BIT     // msb as name end
 268+ E5D3             >
 268+ E5D3 CA 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 268+ E5D5             >Prev_Ptr        defl    Heap_Ptr
 268+ E5D5             >
 268+ E5D5             >mirror_Ptr      defl    $
 268+ E5D5             >
 268+ E5D5 BF 28       >                dw      Dict_Ptr + 2        // xt
 268+ E5D7             >Heap_Ptr        defl    $ - $E000           // save current HP
 268+ E5D7             >
 268+ E5D7             >Current_HP      defl  $ - $E000             // used to set HP once!
 268+ E5D7             >
 268+ E5D7             >//              ______________________________________________________________________
 268+ E5D7             >//              Dictionary part
 268+ E5D7             >
 268+ E5D7             >                org     Dict_Ptr
 268+ 28BD             >
 268+ 28BD D5 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 268+ 28BF             >
 268+ 28BF             >ULESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 268+ 28BF ~           >                call    runcode ; ok        // for primitive definitions  actual code
 268+ 28BF ~           >
 268+ 28BF ~           >
 268+ 28BF             >                endif           ; ok        // for other definitions it "points" the correct handler
 268+ 28BF             >                // Use of "; ok" to suppress "warning[fwdref]"
 268+ 28BF             >
 268+ 28BF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 269+ 28BF D9                           exx
 270+ 28C0 D1                           pop     de
 271+ 28C1 E1                           pop     hl
 272+ 28C2 A7                           and     a
 273+ 28C3 ED 52                        sbc     hl, de
 274+ 28C5 ED 62                        sbc     hl, hl
 275+ 28C7 E5                           push    hl
 276+ 28C8 D9                           exx
 277+ 28C9                              next
 277+ 28C9 DD E9       >                jp      (ix)
 278+ 28CB
 279+ 28CB              //  ______________________________________________________________________
 280+ 28CB              //
 281+ 28CB              // <           n1 n2 -- n3
 282+ 28CB              // less-than
 283+ 28CB                              New_Def LESS, "<", is_code, is_normal
 283+ 28CB             >
 283+ 28CB             >Dict_Ptr        defl    $
 283+ 28CB             >
 283+ 28CB             >//              ______________________________________________________________________
 283+ 28CB             >//              Heap part
 283+ 28CB             >
 283+ 28CB             >
 283+ 28CB             >                org     (Heap_Ptr & $1FFF) + $E000
 283+ E5D7             >
 283+ E5D7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 283+ E5D7             >Latest_Definition defl  Heap_Ptr
 283+ E5D7             >
 283+ E5D7             >                // dummy db directives used to calculate length of namec
 283+ E5D7 3C          >                db      "<"
 283+ E5D8             >len_NFA         defl    $ - temp_NFA
 283+ E5D8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 283+ E5D7             >
 283+ E5D7 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 283+ E5D8 3C          >                db      "<"               // name string in 7-bit ascii, but
 283+ E5D9             >                org     $-1                 // alter last byte of Name just above to set
 283+ E5D8 BC          >                db      {b $} | END_BIT     // msb as name end
 283+ E5D9             >
 283+ E5D9 D0 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 283+ E5DB             >Prev_Ptr        defl    Heap_Ptr
 283+ E5DB             >
 283+ E5DB             >mirror_Ptr      defl    $
 283+ E5DB             >
 283+ E5DB CD 28       >                dw      Dict_Ptr + 2        // xt
 283+ E5DD             >Heap_Ptr        defl    $ - $E000           // save current HP
 283+ E5DD             >
 283+ E5DD             >Current_HP      defl  $ - $E000             // used to set HP once!
 283+ E5DD             >
 283+ E5DD             >//              ______________________________________________________________________
 283+ E5DD             >//              Dictionary part
 283+ E5DD             >
 283+ E5DD             >                org     Dict_Ptr
 283+ 28CB             >
 283+ 28CB DB 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 283+ 28CD             >
 283+ 28CD             >LESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 283+ 28CD ~           >                call    runcode ; ok        // for primitive definitions  actual code
 283+ 28CD ~           >
 283+ 28CD ~           >
 283+ 28CD             >                endif           ; ok        // for other definitions it "points" the correct handler
 283+ 28CD             >                // Use of "; ok" to suppress "warning[fwdref]"
 283+ 28CD             >
 283+ 28CD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 284+ 28CD D9                           exx
 285+ 28CE D1                           pop     de
 286+ 28CF E1                           pop     hl
 287+ 28D0 7C                           ld      a, h
 288+ 28D1 EE 80                        xor     $80
 289+ 28D3 67                           ld      h, a
 290+ 28D4 7A                           ld      a, d
 291+ 28D5 EE 80                        xor     $80
 292+ 28D7 57                           ld      d, a
 293+ 28D8              //              and     a
 294+ 28D8 ED 52                        sbc     hl, de
 295+ 28DA ED 62                        sbc     hl, hl
 296+ 28DC E5                           push    hl
 297+ 28DD D9                           exx
 298+ 28DE                              next
 298+ 28DE DD E9       >                jp      (ix)
 299+ 28E0
 300+ 28E0              //  ______________________________________________________________________
 301+ 28E0              //
 302+ 28E0              // >            n1 n2 -- n3
 303+ 28E0              // greater than
 304+ 28E0                              Colon_Def GREATER, ">", is_normal
 304+ 28E0             >                New_Def  GREATER, ">", Enter_Ptr, is_normal ; ok
 304+ 28E0             >
 304+ 28E0             >Dict_Ptr        defl    $
 304+ 28E0             >
 304+ 28E0             >//              ______________________________________________________________________
 304+ 28E0             >//              Heap part
 304+ 28E0             >
 304+ 28E0             >
 304+ 28E0             >                org     (Heap_Ptr & $1FFF) + $E000
 304+ E5DD             >
 304+ E5DD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 304+ E5DD             >Latest_Definition defl  Heap_Ptr
 304+ E5DD             >
 304+ E5DD             >                // dummy db directives used to calculate length of namec
 304+ E5DD 3E          >                db      ">"
 304+ E5DE             >len_NFA         defl    $ - temp_NFA
 304+ E5DE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 304+ E5DD             >
 304+ E5DD 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 304+ E5DE 3E          >                db      ">"               // name string in 7-bit ascii, but
 304+ E5DF             >                org     $-1                 // alter last byte of Name just above to set
 304+ E5DE BE          >                db      {b $} | END_BIT     // msb as name end
 304+ E5DF             >
 304+ E5DF D7 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 304+ E5E1             >Prev_Ptr        defl    Heap_Ptr
 304+ E5E1             >
 304+ E5E1             >mirror_Ptr      defl    $
 304+ E5E1             >
 304+ E5E1 E2 28       >                dw      Dict_Ptr + 2        // xt
 304+ E5E3             >Heap_Ptr        defl    $ - $E000           // save current HP
 304+ E5E3             >
 304+ E5E3             >Current_HP      defl  $ - $E000             // used to set HP once!
 304+ E5E3             >
 304+ E5E3             >//              ______________________________________________________________________
 304+ E5E3             >//              Dictionary part
 304+ E5E3             >
 304+ E5E3             >                org     Dict_Ptr
 304+ 28E0             >
 304+ 28E0 E1 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 304+ 28E2             >
 304+ 28E2             >GREATER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 304+ 28E2 CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 304+ 28E5             >
 304+ 28E5             >
 304+ 28E5             >                endif           ; ok        // for other definitions it "points" the correct handler
 304+ 28E5             >                // Use of "; ok" to suppress "warning[fwdref]"
 304+ 28E5             >
 304+ 28E5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 305+ 28E5 D4 25 CD 28                  dw      SWAP, LESS              // swap <
 306+ 28E9 02 25                        dw      EXIT                    // ;
 307+ 28EB              //  ______________________________________________________________________
 308+ 28EB              //
 309+ 28EB              // min          n1 n2 -- n3
 310+ 28EB              // minimum between n1 and n2
 311+ 28EB                              Colon_Def MIN, "MIN" , is_normal
 311+ 28EB             >                New_Def  MIN, "MIN", Enter_Ptr, is_normal ; ok
 311+ 28EB             >
 311+ 28EB             >Dict_Ptr        defl    $
 311+ 28EB             >
 311+ 28EB             >//              ______________________________________________________________________
 311+ 28EB             >//              Heap part
 311+ 28EB             >
 311+ 28EB             >
 311+ 28EB             >                org     (Heap_Ptr & $1FFF) + $E000
 311+ E5E3             >
 311+ E5E3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 311+ E5E3             >Latest_Definition defl  Heap_Ptr
 311+ E5E3             >
 311+ E5E3             >                // dummy db directives used to calculate length of namec
 311+ E5E3 4D 49 4E    >                db      "MIN"
 311+ E5E6             >len_NFA         defl    $ - temp_NFA
 311+ E5E6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 311+ E5E3             >
 311+ E5E3 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 311+ E5E4 4D 49 4E    >                db      "MIN"               // name string in 7-bit ascii, but
 311+ E5E7             >                org     $-1                 // alter last byte of Name just above to set
 311+ E5E6 CE          >                db      {b $} | END_BIT     // msb as name end
 311+ E5E7             >
 311+ E5E7 DD 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 311+ E5E9             >Prev_Ptr        defl    Heap_Ptr
 311+ E5E9             >
 311+ E5E9             >mirror_Ptr      defl    $
 311+ E5E9             >
 311+ E5E9 ED 28       >                dw      Dict_Ptr + 2        // xt
 311+ E5EB             >Heap_Ptr        defl    $ - $E000           // save current HP
 311+ E5EB             >
 311+ E5EB             >Current_HP      defl  $ - $E000             // used to set HP once!
 311+ E5EB             >
 311+ E5EB             >//              ______________________________________________________________________
 311+ E5EB             >//              Dictionary part
 311+ E5EB             >
 311+ E5EB             >                org     Dict_Ptr
 311+ 28EB             >
 311+ 28EB E9 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 311+ 28ED             >
 311+ 28ED             >MIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 311+ 28ED CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 311+ 28F0             >
 311+ 28F0             >
 311+ 28F0             >                endif           ; ok        // for other definitions it "points" the correct handler
 311+ 28F0             >                // Use of "; ok" to suppress "warning[fwdref]"
 311+ 28F0             >
 311+ 28F0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 312+ 28F0 2A 26                        dw      TWO_DUP                 // 2dup
 313+ 28F2 E2 28                        dw      GREATER                 // >
 314+ 28F4 8F 20                        dw      ZBRANCH
 315+ 28F6 04 00                        dw      Min_Skip - $   // if
 316+ 28F8 D4 25                        dw          SWAP                //      swap
 317+ 28FA              Min_Skip:                                       // endif
 318+ 28FA C0 25                        dw      DROP                    // drop
 319+ 28FC 02 25                        dw      EXIT                    // ;
 320+ 28FE
 321+ 28FE              //  ______________________________________________________________________
 322+ 28FE              //
 323+ 28FE              // max          n1 n2 -- n3
 324+ 28FE              // maximum between n1 and n2
 325+ 28FE                              Colon_Def MAX, "MAX", is_normal
 325+ 28FE             >                New_Def  MAX, "MAX", Enter_Ptr, is_normal ; ok
 325+ 28FE             >
 325+ 28FE             >Dict_Ptr        defl    $
 325+ 28FE             >
 325+ 28FE             >//              ______________________________________________________________________
 325+ 28FE             >//              Heap part
 325+ 28FE             >
 325+ 28FE             >
 325+ 28FE             >                org     (Heap_Ptr & $1FFF) + $E000
 325+ E5EB             >
 325+ E5EB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 325+ E5EB             >Latest_Definition defl  Heap_Ptr
 325+ E5EB             >
 325+ E5EB             >                // dummy db directives used to calculate length of namec
 325+ E5EB 4D 41 58    >                db      "MAX"
 325+ E5EE             >len_NFA         defl    $ - temp_NFA
 325+ E5EE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 325+ E5EB             >
 325+ E5EB 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 325+ E5EC 4D 41 58    >                db      "MAX"               // name string in 7-bit ascii, but
 325+ E5EF             >                org     $-1                 // alter last byte of Name just above to set
 325+ E5EE D8          >                db      {b $} | END_BIT     // msb as name end
 325+ E5EF             >
 325+ E5EF E3 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 325+ E5F1             >Prev_Ptr        defl    Heap_Ptr
 325+ E5F1             >
 325+ E5F1             >mirror_Ptr      defl    $
 325+ E5F1             >
 325+ E5F1 00 29       >                dw      Dict_Ptr + 2        // xt
 325+ E5F3             >Heap_Ptr        defl    $ - $E000           // save current HP
 325+ E5F3             >
 325+ E5F3             >Current_HP      defl  $ - $E000             // used to set HP once!
 325+ E5F3             >
 325+ E5F3             >//              ______________________________________________________________________
 325+ E5F3             >//              Dictionary part
 325+ E5F3             >
 325+ E5F3             >                org     Dict_Ptr
 325+ 28FE             >
 325+ 28FE F1 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 325+ 2900             >
 325+ 2900             >MAX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 325+ 2900 CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 325+ 2903             >
 325+ 2903             >
 325+ 2903             >                endif           ; ok        // for other definitions it "points" the correct handler
 325+ 2903             >                // Use of "; ok" to suppress "warning[fwdref]"
 325+ 2903             >
 325+ 2903             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 326+ 2903 2A 26                        dw      TWO_DUP                 // 2dup
 327+ 2905 CD 28                        dw      LESS                    // <
 328+ 2907 8F 20                        dw      ZBRANCH
 329+ 2909 04 00                        dw      Max_Skip - $   // if
 330+ 290B D4 25                        dw          SWAP                //      swap
 331+ 290D              Max_Skip:                                       // endif
 332+ 290D C0 25                        dw      DROP                    // drop
 333+ 290F 02 25                        dw      EXIT                    // ;
 334+ 2911
 335+ 2911              //  ______________________________________________________________________
 336+ 2911              //
 337+ 2911              // ?dup         n -- 0 | n n
 338+ 2911              // duplicate if not zero
 339+ 2911                              New_Def QDUP, "?DUP", is_code, is_normal
 339+ 2911             >
 339+ 2911             >Dict_Ptr        defl    $
 339+ 2911             >
 339+ 2911             >//              ______________________________________________________________________
 339+ 2911             >//              Heap part
 339+ 2911             >
 339+ 2911             >
 339+ 2911             >                org     (Heap_Ptr & $1FFF) + $E000
 339+ E5F3             >
 339+ E5F3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 339+ E5F3             >Latest_Definition defl  Heap_Ptr
 339+ E5F3             >
 339+ E5F3             >                // dummy db directives used to calculate length of namec
 339+ E5F3 3F 44 55 50 >                db      "?DUP"
 339+ E5F7             >len_NFA         defl    $ - temp_NFA
 339+ E5F7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 339+ E5F3             >
 339+ E5F3 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 339+ E5F4 3F 44 55 50 >                db      "?DUP"               // name string in 7-bit ascii, but
 339+ E5F8             >                org     $-1                 // alter last byte of Name just above to set
 339+ E5F7 D0          >                db      {b $} | END_BIT     // msb as name end
 339+ E5F8             >
 339+ E5F8 EB 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 339+ E5FA             >Prev_Ptr        defl    Heap_Ptr
 339+ E5FA             >
 339+ E5FA             >mirror_Ptr      defl    $
 339+ E5FA             >
 339+ E5FA 13 29       >                dw      Dict_Ptr + 2        // xt
 339+ E5FC             >Heap_Ptr        defl    $ - $E000           // save current HP
 339+ E5FC             >
 339+ E5FC             >Current_HP      defl  $ - $E000             // used to set HP once!
 339+ E5FC             >
 339+ E5FC             >//              ______________________________________________________________________
 339+ E5FC             >//              Dictionary part
 339+ E5FC             >
 339+ E5FC             >                org     Dict_Ptr
 339+ 2911             >
 339+ 2911 FA 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 339+ 2913             >
 339+ 2913             >QDUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 339+ 2913 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 339+ 2913 ~           >
 339+ 2913 ~           >
 339+ 2913             >                endif           ; ok        // for other definitions it "points" the correct handler
 339+ 2913             >                // Use of "; ok" to suppress "warning[fwdref]"
 339+ 2913             >
 339+ 2913             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 340+ 2913              QDup_Ptr:
 341+ 2913 E1                           pop     hl
 342+ 2914 7C                           ld      a, h
 343+ 2915 B5                           or      l
 344+ 2916 28 01                        jr      z, QDup_Skip
 345+ 2918 E5                               push    hl
 346+ 2919              QDup_Skip:
 347+ 2919                              psh1
 347+ 2919 E5          >                push    hl
 347+ 291A DD E9       >                jp      (ix)
 348+ 291C
 349+ 291C              //  ______________________________________________________________________
 350+ 291C              //
 351+ 291C              // -dup         n -- 0 | n n
 352+ 291C              // duplicate if not zero
 353+ 291C                              New_Def LDUP, "-DUP", is_code, is_normal
 353+ 291C             >
 353+ 291C             >Dict_Ptr        defl    $
 353+ 291C             >
 353+ 291C             >//              ______________________________________________________________________
 353+ 291C             >//              Heap part
 353+ 291C             >
 353+ 291C             >
 353+ 291C             >                org     (Heap_Ptr & $1FFF) + $E000
 353+ E5FC             >
 353+ E5FC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 353+ E5FC             >Latest_Definition defl  Heap_Ptr
 353+ E5FC             >
 353+ E5FC             >                // dummy db directives used to calculate length of namec
 353+ E5FC 2D 44 55 50 >                db      "-DUP"
 353+ E600             >len_NFA         defl    $ - temp_NFA
 353+ E600             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 353+ E5FC             >
 353+ E5FC 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 353+ E5FD 2D 44 55 50 >                db      "-DUP"               // name string in 7-bit ascii, but
 353+ E601             >                org     $-1                 // alter last byte of Name just above to set
 353+ E600 D0          >                db      {b $} | END_BIT     // msb as name end
 353+ E601             >
 353+ E601 F3 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 353+ E603             >Prev_Ptr        defl    Heap_Ptr
 353+ E603             >
 353+ E603             >mirror_Ptr      defl    $
 353+ E603             >
 353+ E603 1E 29       >                dw      Dict_Ptr + 2        // xt
 353+ E605             >Heap_Ptr        defl    $ - $E000           // save current HP
 353+ E605             >
 353+ E605             >Current_HP      defl  $ - $E000             // used to set HP once!
 353+ E605             >
 353+ E605             >//              ______________________________________________________________________
 353+ E605             >//              Dictionary part
 353+ E605             >
 353+ E605             >                org     Dict_Ptr
 353+ 291C             >
 353+ 291C 03 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 353+ 291E             >
 353+ 291E             >LDUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 353+ 291E ~           >                call    runcode ; ok        // for primitive definitions  actual code
 353+ 291E ~           >
 353+ 291E ~           >
 353+ 291E             >                endif           ; ok        // for other definitions it "points" the correct handler
 353+ 291E             >                // Use of "; ok" to suppress "warning[fwdref]"
 353+ 291E             >
 353+ 291E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 354+ 291E C3 13 29                     jp      QDup_Ptr
 355+ 2921
 356+ 2921              //  ______________________________________________________________________
 357+ 2921              //
 358+ 2921              // emit         c --
 359+ 2921                              Colon_Def EMIT, "EMIT", is_normal
 359+ 2921             >                New_Def  EMIT, "EMIT", Enter_Ptr, is_normal ; ok
 359+ 2921             >
 359+ 2921             >Dict_Ptr        defl    $
 359+ 2921             >
 359+ 2921             >//              ______________________________________________________________________
 359+ 2921             >//              Heap part
 359+ 2921             >
 359+ 2921             >
 359+ 2921             >                org     (Heap_Ptr & $1FFF) + $E000
 359+ E605             >
 359+ E605             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 359+ E605             >Latest_Definition defl  Heap_Ptr
 359+ E605             >
 359+ E605             >                // dummy db directives used to calculate length of namec
 359+ E605 45 4D 49 54 >                db      "EMIT"
 359+ E609             >len_NFA         defl    $ - temp_NFA
 359+ E609             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 359+ E605             >
 359+ E605 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 359+ E606 45 4D 49 54 >                db      "EMIT"               // name string in 7-bit ascii, but
 359+ E60A             >                org     $-1                 // alter last byte of Name just above to set
 359+ E609 D4          >                db      {b $} | END_BIT     // msb as name end
 359+ E60A             >
 359+ E60A FC 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 359+ E60C             >Prev_Ptr        defl    Heap_Ptr
 359+ E60C             >
 359+ E60C             >mirror_Ptr      defl    $
 359+ E60C             >
 359+ E60C 23 29       >                dw      Dict_Ptr + 2        // xt
 359+ E60E             >Heap_Ptr        defl    $ - $E000           // save current HP
 359+ E60E             >
 359+ E60E             >Current_HP      defl  $ - $E000             // used to set HP once!
 359+ E60E             >
 359+ E60E             >//              ______________________________________________________________________
 359+ E60E             >//              Dictionary part
 359+ E60E             >
 359+ E60E             >                org     Dict_Ptr
 359+ 2921             >
 359+ 2921 0C 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 359+ 2923             >
 359+ 2923             >EMIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 359+ 2923 CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 359+ 2926             >
 359+ 2926             >
 359+ 2926             >                endif           ; ok        // for other definitions it "points" the correct handler
 359+ 2926             >                // Use of "; ok" to suppress "warning[fwdref]"
 359+ 2926             >
 359+ 2926             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 360+ 2926 7C 22                        dw      C_EMIT                      // (?emit)
 361+ 2928 13 29                        dw      QDUP                        // ?dup
 362+ 292A                                                                  // if
 363+ 292A 8F 20                        dw      ZBRANCH
 364+ 292C 0A 00                        dw      Emit_Skip - $
 365+ 292E 3C 22                        dw          EMITC                   //      emitc
 366+ 2930 4B 27                        dw          ONE                     //      1
 367+ 2932 F1 27 34 26                  dw          OUT, PLUSSTORE        //      out +!
 368+ 2936              Emit_Skip:                                          // endif
 369+ 2936 02 25                        dw      EXIT                        // ;
 370+ 2938
 371+ 2938              //  ______________________________________________________________________
 372+ 2938              //
 373+ 2938              // space        --
 374+ 2938                              Colon_Def SPACE, "SPACE", is_normal
 374+ 2938             >                New_Def  SPACE, "SPACE", Enter_Ptr, is_normal ; ok
 374+ 2938             >
 374+ 2938             >Dict_Ptr        defl    $
 374+ 2938             >
 374+ 2938             >//              ______________________________________________________________________
 374+ 2938             >//              Heap part
 374+ 2938             >
 374+ 2938             >
 374+ 2938             >                org     (Heap_Ptr & $1FFF) + $E000
 374+ E60E             >
 374+ E60E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 374+ E60E             >Latest_Definition defl  Heap_Ptr
 374+ E60E             >
 374+ E60E             >                // dummy db directives used to calculate length of namec
 374+ E60E 53 50 41 43 >                db      "SPACE"
 374+ E612 45          >
 374+ E613             >len_NFA         defl    $ - temp_NFA
 374+ E613             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 374+ E60E             >
 374+ E60E 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 374+ E60F 53 50 41 43 >                db      "SPACE"               // name string in 7-bit ascii, but
 374+ E613 45          >
 374+ E614             >                org     $-1                 // alter last byte of Name just above to set
 374+ E613 C5          >                db      {b $} | END_BIT     // msb as name end
 374+ E614             >
 374+ E614 05 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 374+ E616             >Prev_Ptr        defl    Heap_Ptr
 374+ E616             >
 374+ E616             >mirror_Ptr      defl    $
 374+ E616             >
 374+ E616 3A 29       >                dw      Dict_Ptr + 2        // xt
 374+ E618             >Heap_Ptr        defl    $ - $E000           // save current HP
 374+ E618             >
 374+ E618             >Current_HP      defl  $ - $E000             // used to set HP once!
 374+ E618             >
 374+ E618             >//              ______________________________________________________________________
 374+ E618             >//              Dictionary part
 374+ E618             >
 374+ E618             >                org     Dict_Ptr
 374+ 2938             >
 374+ 2938 16 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 374+ 293A             >
 374+ 293A             >SPACE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 374+ 293A CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 374+ 293D             >
 374+ 293D             >
 374+ 293D             >                endif           ; ok        // for other definitions it "points" the correct handler
 374+ 293D             >                // Use of "; ok" to suppress "warning[fwdref]"
 374+ 293D             >
 374+ 293D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 375+ 293D 67 27 23 29                  dw      BL, EMIT                // bl emit
 376+ 2941 02 25                        dw      EXIT                    // ;
 377+ 2943
 378+ 2943              //  ______________________________________________________________________
 379+ 2943              //
 380+ 2943              // traverse     a n -- a
 381+ 2943              // A dictionary entry is structured as follows
 382+ 2943              // NFA: +0   one byte of word-length (n<32) | some flags (immediate, smudge) | $80
 383+ 2943              //      +1   word name, last character is toggled with $80
 384+ 2943              // LFA: +1+n link to NFA ofprevious  dictionary entry.
 385+ 2943              // CFA: +3+n routine address. Colon definitions here have a CALL aa
 386+ 2943              // PFA: +6+n "is_code", definitions have no PFA. // +5
 387+ 2943              //
 388+ 2943                              Colon_Def TRAVERSE, "TRAVERSE", is_normal
 388+ 2943             >                New_Def  TRAVERSE, "TRAVERSE", Enter_Ptr, is_normal ; ok
 388+ 2943             >
 388+ 2943             >Dict_Ptr        defl    $
 388+ 2943             >
 388+ 2943             >//              ______________________________________________________________________
 388+ 2943             >//              Heap part
 388+ 2943             >
 388+ 2943             >
 388+ 2943             >                org     (Heap_Ptr & $1FFF) + $E000
 388+ E618             >
 388+ E618             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 388+ E618             >Latest_Definition defl  Heap_Ptr
 388+ E618             >
 388+ E618             >                // dummy db directives used to calculate length of namec
 388+ E618 54 52 41 56 >                db      "TRAVERSE"
 388+ E61C 45 52 53 45 >
 388+ E620             >len_NFA         defl    $ - temp_NFA
 388+ E620             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 388+ E618             >
 388+ E618 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 388+ E619 54 52 41 56 >                db      "TRAVERSE"               // name string in 7-bit ascii, but
 388+ E61D 45 52 53 45 >
 388+ E621             >                org     $-1                 // alter last byte of Name just above to set
 388+ E620 C5          >                db      {b $} | END_BIT     // msb as name end
 388+ E621             >
 388+ E621 0E 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 388+ E623             >Prev_Ptr        defl    Heap_Ptr
 388+ E623             >
 388+ E623             >mirror_Ptr      defl    $
 388+ E623             >
 388+ E623 45 29       >                dw      Dict_Ptr + 2        // xt
 388+ E625             >Heap_Ptr        defl    $ - $E000           // save current HP
 388+ E625             >
 388+ E625             >Current_HP      defl  $ - $E000             // used to set HP once!
 388+ E625             >
 388+ E625             >//              ______________________________________________________________________
 388+ E625             >//              Dictionary part
 388+ E625             >
 388+ E625             >                org     Dict_Ptr
 388+ 2943             >
 388+ 2943 23 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 388+ 2945             >
 388+ 2945             >TRAVERSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 388+ 2945 CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 388+ 2948             >
 388+ 2948             >
 388+ 2948             >                endif           ; ok        // for other definitions it "points" the correct handler
 388+ 2948             >                // Use of "; ok" to suppress "warning[fwdref]"
 388+ 2948             >
 388+ 2948             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 389+ 2948 D4 25                        dw      SWAP                    // swap
 390+ 294A              Traverse_Begin:                                 // begin
 391+ 294A B7 25 55 25                  dw          OVER, PLUS          //      over +
 392+ 294E 3D 20 7F 00                  dw          LIT, 127            //      127
 393+ 2952 B7 25 61 26                  dw          OVER, CFETCH        //      over @
 394+ 2956 CD 28                        dw          LESS                //      <
 395+ 2958                                                              // until
 396+ 2958 8F 20                        dw      ZBRANCH
 397+ 295A F0 FF                        dw      Traverse_Begin - $
 398+ 295C C5 25                        dw      NIP                     //  nip
 399+ 295E 02 25                        dw      EXIT                    //  ;
 400+ 2960
 401+ 2960              //  ______________________________________________________________________
 402+ 2960              //
 403+ 2960              // mmu7@        -- n
 404+ 2960              // query current page in MMU7 8K-RAM : 0 and 223
 405+ 2960
 406+ 2960                              New_Def MMU7_FETCH, "MMU7@", is_code, is_normal
 406+ 2960             >
 406+ 2960             >Dict_Ptr        defl    $
 406+ 2960             >
 406+ 2960             >//              ______________________________________________________________________
 406+ 2960             >//              Heap part
 406+ 2960             >
 406+ 2960             >
 406+ 2960             >                org     (Heap_Ptr & $1FFF) + $E000
 406+ E625             >
 406+ E625             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 406+ E625             >Latest_Definition defl  Heap_Ptr
 406+ E625             >
 406+ E625             >                // dummy db directives used to calculate length of namec
 406+ E625 4D 4D 55 37 >                db      "MMU7@"
 406+ E629 40          >
 406+ E62A             >len_NFA         defl    $ - temp_NFA
 406+ E62A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 406+ E625             >
 406+ E625 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 406+ E626 4D 4D 55 37 >                db      "MMU7@"               // name string in 7-bit ascii, but
 406+ E62A 40          >
 406+ E62B             >                org     $-1                 // alter last byte of Name just above to set
 406+ E62A C0          >                db      {b $} | END_BIT     // msb as name end
 406+ E62B             >
 406+ E62B 18 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 406+ E62D             >Prev_Ptr        defl    Heap_Ptr
 406+ E62D             >
 406+ E62D             >mirror_Ptr      defl    $
 406+ E62D             >
 406+ E62D 62 29       >                dw      Dict_Ptr + 2        // xt
 406+ E62F             >Heap_Ptr        defl    $ - $E000           // save current HP
 406+ E62F             >
 406+ E62F             >Current_HP      defl  $ - $E000             // used to set HP once!
 406+ E62F             >
 406+ E62F             >//              ______________________________________________________________________
 406+ E62F             >//              Dictionary part
 406+ E62F             >
 406+ E62F             >                org     Dict_Ptr
 406+ 2960             >
 406+ 2960 2D 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 406+ 2962             >
 406+ 2962             >MMU7_FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 406+ 2962 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 406+ 2962 ~           >
 406+ 2962 ~           >
 406+ 2962             >                endif           ; ok        // for other definitions it "points" the correct handler
 406+ 2962             >                // Use of "; ok" to suppress "warning[fwdref]"
 406+ 2962             >
 406+ 2962             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 407+ 2962 D9                           exx
 408+ 2963 CD 39 21                     call    MMU7_read
 409+ 2966 D9                           exx
 410+ 2967 6F                           ld      l, a
 411+ 2968 26 00                        ld      h, 0
 412+ 296A E5                           push    hl
 413+ 296B                              next
 413+ 296B DD E9       >                jp      (ix)
 414+ 296D
 415+ 296D              //  ______________________________________________________________________
 416+ 296D              //
 417+ 296D              // mmu7!        n --
 418+ 296D              // set MMU7 8K-RAM page to n given between 0 and 223
 419+ 296D              // optimized version that uses NEXTREG n,A Z80n op-code.
 420+ 296D
 421+ 296D                              New_Def MMU7_STORE, "MMU7!", is_code, is_normal
 421+ 296D             >
 421+ 296D             >Dict_Ptr        defl    $
 421+ 296D             >
 421+ 296D             >//              ______________________________________________________________________
 421+ 296D             >//              Heap part
 421+ 296D             >
 421+ 296D             >
 421+ 296D             >                org     (Heap_Ptr & $1FFF) + $E000
 421+ E62F             >
 421+ E62F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 421+ E62F             >Latest_Definition defl  Heap_Ptr
 421+ E62F             >
 421+ E62F             >                // dummy db directives used to calculate length of namec
 421+ E62F 4D 4D 55 37 >                db      "MMU7!"
 421+ E633 21          >
 421+ E634             >len_NFA         defl    $ - temp_NFA
 421+ E634             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 421+ E62F             >
 421+ E62F 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 421+ E630 4D 4D 55 37 >                db      "MMU7!"               // name string in 7-bit ascii, but
 421+ E634 21          >
 421+ E635             >                org     $-1                 // alter last byte of Name just above to set
 421+ E634 A1          >                db      {b $} | END_BIT     // msb as name end
 421+ E635             >
 421+ E635 25 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 421+ E637             >Prev_Ptr        defl    Heap_Ptr
 421+ E637             >
 421+ E637             >mirror_Ptr      defl    $
 421+ E637             >
 421+ E637 6F 29       >                dw      Dict_Ptr + 2        // xt
 421+ E639             >Heap_Ptr        defl    $ - $E000           // save current HP
 421+ E639             >
 421+ E639             >Current_HP      defl  $ - $E000             // used to set HP once!
 421+ E639             >
 421+ E639             >//              ______________________________________________________________________
 421+ E639             >//              Dictionary part
 421+ E639             >
 421+ E639             >                org     Dict_Ptr
 421+ 296D             >
 421+ 296D 37 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 421+ 296F             >
 421+ 296F             >MMU7_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 421+ 296F ~           >                call    runcode ; ok        // for primitive definitions  actual code
 421+ 296F ~           >
 421+ 296F ~           >
 421+ 296F             >                endif           ; ok        // for other definitions it "points" the correct handler
 421+ 296F             >                // Use of "; ok" to suppress "warning[fwdref]"
 421+ 296F             >
 421+ 296F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 422+ 296F E1                           pop     hl
 423+ 2970 7D                           ld      a, l
 424+ 2971 ED 92 57                     nextreg 87, a
 425+ 2974
 426+ 2974                              next
 426+ 2974 DD E9       >                jp      (ix)
 427+ 2976
 428+ 2976              //  ______________________________________________________________________
 429+ 2976              //
 430+ 2976              // >far         ha -- a n
 431+ 2976              // decode bits 765 of H as one of the 8K-page between 64 and 71 (40h-47h)
 432+ 2976              // take lower bits of H and L as an offset from E000h
 433+ 2976              // then return address  a  between E000h-FFFFh
 434+ 2976              // and page number n  between 64-71 (40h-47h)
 435+ 2976              // For example, in hex:
 436+ 2976              //   0000 >FAR  gives  40.E000
 437+ 2976              //   1FFF >FAR  gives  40.FFFF
 438+ 2976              //   2000 >FAR  gives  41.E000
 439+ 2976              //   3FFF >FAR  gives  41.FFFF
 440+ 2976              //   EFFF >FAR  gives  47.EFFF
 441+ 2976              //   FFFF >FAR  gives  47.FFFF
 442+ 2976                              New_Def TO_FAR, ">FAR", is_code, is_normal
 442+ 2976             >
 442+ 2976             >Dict_Ptr        defl    $
 442+ 2976             >
 442+ 2976             >//              ______________________________________________________________________
 442+ 2976             >//              Heap part
 442+ 2976             >
 442+ 2976             >
 442+ 2976             >                org     (Heap_Ptr & $1FFF) + $E000
 442+ E639             >
 442+ E639             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 442+ E639             >Latest_Definition defl  Heap_Ptr
 442+ E639             >
 442+ E639             >                // dummy db directives used to calculate length of namec
 442+ E639 3E 46 41 52 >                db      ">FAR"
 442+ E63D             >len_NFA         defl    $ - temp_NFA
 442+ E63D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 442+ E639             >
 442+ E639 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 442+ E63A 3E 46 41 52 >                db      ">FAR"               // name string in 7-bit ascii, but
 442+ E63E             >                org     $-1                 // alter last byte of Name just above to set
 442+ E63D D2          >                db      {b $} | END_BIT     // msb as name end
 442+ E63E             >
 442+ E63E 2F 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 442+ E640             >Prev_Ptr        defl    Heap_Ptr
 442+ E640             >
 442+ E640             >mirror_Ptr      defl    $
 442+ E640             >
 442+ E640 78 29       >                dw      Dict_Ptr + 2        // xt
 442+ E642             >Heap_Ptr        defl    $ - $E000           // save current HP
 442+ E642             >
 442+ E642             >Current_HP      defl  $ - $E000             // used to set HP once!
 442+ E642             >
 442+ E642             >//              ______________________________________________________________________
 442+ E642             >//              Dictionary part
 442+ E642             >
 442+ E642             >                org     Dict_Ptr
 442+ 2976             >
 442+ 2976 40 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 442+ 2978             >
 442+ 2978             >TO_FAR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 442+ 2978 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 442+ 2978 ~           >
 442+ 2978 ~           >
 442+ 2978             >                endif           ; ok        // for other definitions it "points" the correct handler
 442+ 2978             >                // Use of "; ok" to suppress "warning[fwdref]"
 442+ 2978             >
 442+ 2978             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 443+ 2978 E1                           pop     hl
 444+ 2979 CD 44 21                     call    TO_FAR_rout
 445+ 297C E5                           push    hl
 446+ 297D 6F                           ld      l, a
 447+ 297E 26 00                        ld      h, 0
 448+ 2980 E5                           push    hl
 449+ 2981                              next
 449+ 2981 DD E9       >                jp      (ix)
 450+ 2983
 451+ 2983              //  ______________________________________________________________________
 452+ 2983              //
 453+ 2983              // <far         a n  -- ha
 454+ 2983              // given an address E000-FFFF and a page number n (64-71 or 40h-47h)
 455+ 2983              // reverse of >FAR: encodes a FAR address compressing
 456+ 2983              // to bits 765 of H, lower bits of HL address offset from E000h
 457+ 2983                              New_Def FROM_FAR, "<FAR", is_code, is_normal
 457+ 2983             >
 457+ 2983             >Dict_Ptr        defl    $
 457+ 2983             >
 457+ 2983             >//              ______________________________________________________________________
 457+ 2983             >//              Heap part
 457+ 2983             >
 457+ 2983             >
 457+ 2983             >                org     (Heap_Ptr & $1FFF) + $E000
 457+ E642             >
 457+ E642             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 457+ E642             >Latest_Definition defl  Heap_Ptr
 457+ E642             >
 457+ E642             >                // dummy db directives used to calculate length of namec
 457+ E642 3C 46 41 52 >                db      "<FAR"
 457+ E646             >len_NFA         defl    $ - temp_NFA
 457+ E646             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 457+ E642             >
 457+ E642 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 457+ E643 3C 46 41 52 >                db      "<FAR"               // name string in 7-bit ascii, but
 457+ E647             >                org     $-1                 // alter last byte of Name just above to set
 457+ E646 D2          >                db      {b $} | END_BIT     // msb as name end
 457+ E647             >
 457+ E647 39 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 457+ E649             >Prev_Ptr        defl    Heap_Ptr
 457+ E649             >
 457+ E649             >mirror_Ptr      defl    $
 457+ E649             >
 457+ E649 85 29       >                dw      Dict_Ptr + 2        // xt
 457+ E64B             >Heap_Ptr        defl    $ - $E000           // save current HP
 457+ E64B             >
 457+ E64B             >Current_HP      defl  $ - $E000             // used to set HP once!
 457+ E64B             >
 457+ E64B             >//              ______________________________________________________________________
 457+ E64B             >//              Dictionary part
 457+ E64B             >
 457+ E64B             >                org     Dict_Ptr
 457+ 2983             >
 457+ 2983 49 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 457+ 2985             >
 457+ 2985             >FROM_FAR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 457+ 2985 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 457+ 2985 ~           >
 457+ 2985 ~           >
 457+ 2985             >                endif           ; ok        // for other definitions it "points" the correct handler
 457+ 2985             >                // Use of "; ok" to suppress "warning[fwdref]"
 457+ 2985             >
 457+ 2985             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 458+ 2985 E1                           pop     hl                  // page number in e
 459+ 2986 7D                           ld      a, l
 460+ 2987 E6 07                        and     07
 461+ 2989 0F                           rrca
 462+ 298A 0F                           rrca
 463+ 298B 0F                           rrca
 464+ 298C 08                           ex      af, af
 465+ 298D E1                           pop     hl                  // address in hl
 466+ 298E 7C                           ld      a, h
 467+ 298F E6 1F                        and     $1F
 468+ 2991 67                           ld      h, a
 469+ 2992 08                           ex      af, af
 470+ 2993 B4                           or      h
 471+ 2994 67                           ld      h, a
 472+ 2995                              psh1
 472+ 2995 E5          >                push    hl
 472+ 2996 DD E9       >                jp      (ix)
 473+ 2998
 474+ 2998              //  ______________________________________________________________________
 475+ 2998              //
 476+ 2998              // ?IN_MMU7        a -- f
 477+ 2998              // query current page in MMU7 8K-RAM : 0 and 223
 478+ 2998                              Colon_Def QMMU7, "?IN_MMU7", is_normal
 478+ 2998             >                New_Def  QMMU7, "?IN_MMU7", Enter_Ptr, is_normal ; ok
 478+ 2998             >
 478+ 2998             >Dict_Ptr        defl    $
 478+ 2998             >
 478+ 2998             >//              ______________________________________________________________________
 478+ 2998             >//              Heap part
 478+ 2998             >
 478+ 2998             >
 478+ 2998             >                org     (Heap_Ptr & $1FFF) + $E000
 478+ E64B             >
 478+ E64B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 478+ E64B             >Latest_Definition defl  Heap_Ptr
 478+ E64B             >
 478+ E64B             >                // dummy db directives used to calculate length of namec
 478+ E64B 3F 49 4E 5F >                db      "?IN_MMU7"
 478+ E64F 4D 4D 55 37 >
 478+ E653             >len_NFA         defl    $ - temp_NFA
 478+ E653             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 478+ E64B             >
 478+ E64B 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 478+ E64C 3F 49 4E 5F >                db      "?IN_MMU7"               // name string in 7-bit ascii, but
 478+ E650 4D 4D 55 37 >
 478+ E654             >                org     $-1                 // alter last byte of Name just above to set
 478+ E653 B7          >                db      {b $} | END_BIT     // msb as name end
 478+ E654             >
 478+ E654 42 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 478+ E656             >Prev_Ptr        defl    Heap_Ptr
 478+ E656             >
 478+ E656             >mirror_Ptr      defl    $
 478+ E656             >
 478+ E656 9A 29       >                dw      Dict_Ptr + 2        // xt
 478+ E658             >Heap_Ptr        defl    $ - $E000           // save current HP
 478+ E658             >
 478+ E658             >Current_HP      defl  $ - $E000             // used to set HP once!
 478+ E658             >
 478+ E658             >//              ______________________________________________________________________
 478+ E658             >//              Dictionary part
 478+ E658             >
 478+ E658             >                org     Dict_Ptr
 478+ 2998             >
 478+ 2998 56 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 478+ 299A             >
 478+ 299A             >QMMU7:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 478+ 299A CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 478+ 299D             >
 478+ 299D             >
 478+ 299D             >                endif           ; ok        // for other definitions it "points" the correct handler
 478+ 299D             >                // Use of "; ok" to suppress "warning[fwdref]"
 478+ 299D             >
 478+ 299D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 479+ 299D DB 25                        dw      DUP
 480+ 299F 3D 20 00 E0                  dw      LIT, $E000
 481+ 29A3 BF 28                        dw      ULESS
 482+ 29A5 35 25                        dw      NOT_OP
 483+ 29A7 02 25                        dw      EXIT
 484+ 29A9
 485+ 29A9              //  ______________________________________________________________________
 486+ 29A9              //
 487+ 29A9              // far          hp -- ha
 488+ 29A9              // query current page in MMU7 8K-RAM : 0 and 223
 489+ 29A9                              Colon_Def FAR, "FAR", is_normal
 489+ 29A9             >                New_Def  FAR, "FAR", Enter_Ptr, is_normal ; ok
 489+ 29A9             >
 489+ 29A9             >Dict_Ptr        defl    $
 489+ 29A9             >
 489+ 29A9             >//              ______________________________________________________________________
 489+ 29A9             >//              Heap part
 489+ 29A9             >
 489+ 29A9             >
 489+ 29A9             >                org     (Heap_Ptr & $1FFF) + $E000
 489+ E658             >
 489+ E658             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 489+ E658             >Latest_Definition defl  Heap_Ptr
 489+ E658             >
 489+ E658             >                // dummy db directives used to calculate length of namec
 489+ E658 46 41 52    >                db      "FAR"
 489+ E65B             >len_NFA         defl    $ - temp_NFA
 489+ E65B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 489+ E658             >
 489+ E658 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 489+ E659 46 41 52    >                db      "FAR"               // name string in 7-bit ascii, but
 489+ E65C             >                org     $-1                 // alter last byte of Name just above to set
 489+ E65B D2          >                db      {b $} | END_BIT     // msb as name end
 489+ E65C             >
 489+ E65C 4B 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 489+ E65E             >Prev_Ptr        defl    Heap_Ptr
 489+ E65E             >
 489+ E65E             >mirror_Ptr      defl    $
 489+ E65E             >
 489+ E65E AB 29       >                dw      Dict_Ptr + 2        // xt
 489+ E660             >Heap_Ptr        defl    $ - $E000           // save current HP
 489+ E660             >
 489+ E660             >Current_HP      defl  $ - $E000             // used to set HP once!
 489+ E660             >
 489+ E660             >//              ______________________________________________________________________
 489+ E660             >//              Dictionary part
 489+ E660             >
 489+ E660             >                org     Dict_Ptr
 489+ 29A9             >
 489+ 29A9 5E 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 489+ 29AB             >
 489+ 29AB             >FAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 489+ 29AB CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 489+ 29AE             >
 489+ 29AE             >
 489+ 29AE             >                endif           ; ok        // for other definitions it "points" the correct handler
 489+ 29AE             >                // Use of "; ok" to suppress "warning[fwdref]"
 489+ 29AE             >
 489+ 29AE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 490+ 29AE 78 29                        dw      TO_FAR
 491+ 29B0 6F 29                        dw      MMU7_STORE
 492+ 29B2 02 25                        dw      EXIT
 493+ 29B4
 494+ 29B4              //  ______________________________________________________________________
 495+ 29B4              //
 496+ 29B4              // ?HEAP_PTR       n -- n f
 497+ 29B4              // query current page in MMU7 8K-RAM : 0 and 223
 498+ 29B4                              Colon_Def QHEAPP, "?HEAP_PTR", is_normal
 498+ 29B4             >                New_Def  QHEAPP, "?HEAP_PTR", Enter_Ptr, is_normal ; ok
 498+ 29B4             >
 498+ 29B4             >Dict_Ptr        defl    $
 498+ 29B4             >
 498+ 29B4             >//              ______________________________________________________________________
 498+ 29B4             >//              Heap part
 498+ 29B4             >
 498+ 29B4             >
 498+ 29B4             >                org     (Heap_Ptr & $1FFF) + $E000
 498+ E660             >
 498+ E660             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 498+ E660             >Latest_Definition defl  Heap_Ptr
 498+ E660             >
 498+ E660             >                // dummy db directives used to calculate length of namec
 498+ E660 3F 48 45 41 >                db      "?HEAP_PTR"
 498+ E664 50 5F 50 54 >
 498+ E668 52          >
 498+ E669             >len_NFA         defl    $ - temp_NFA
 498+ E669             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 498+ E660             >
 498+ E660 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 498+ E661 3F 48 45 41 >                db      "?HEAP_PTR"               // name string in 7-bit ascii, but
 498+ E665 50 5F 50 54 >
 498+ E669 52          >
 498+ E66A             >                org     $-1                 // alter last byte of Name just above to set
 498+ E669 D2          >                db      {b $} | END_BIT     // msb as name end
 498+ E66A             >
 498+ E66A 58 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 498+ E66C             >Prev_Ptr        defl    Heap_Ptr
 498+ E66C             >
 498+ E66C             >mirror_Ptr      defl    $
 498+ E66C             >
 498+ E66C B6 29       >                dw      Dict_Ptr + 2        // xt
 498+ E66E             >Heap_Ptr        defl    $ - $E000           // save current HP
 498+ E66E             >
 498+ E66E             >Current_HP      defl  $ - $E000             // used to set HP once!
 498+ E66E             >
 498+ E66E             >//              ______________________________________________________________________
 498+ E66E             >//              Dictionary part
 498+ E66E             >
 498+ E66E             >                org     Dict_Ptr
 498+ 29B4             >
 498+ 29B4 6C 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 498+ 29B6             >
 498+ 29B6             >QHEAPP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 498+ 29B6 CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 498+ 29B9             >
 498+ 29B9             >
 498+ 29B9             >                endif           ; ok        // for other definitions it "points" the correct handler
 498+ 29B9             >                // Use of "; ok" to suppress "warning[fwdref]"
 498+ 29B9             >
 498+ 29B9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 499+ 29B9 DB 25                        dw      DUP
 500+ 29BB 8F 20                        dw      ZBRANCH
 501+ 29BD 08 00                        dw      QHeap_Skip - $
 502+ 29BF 3D 20 00 60                  dw          LIT, $6000
 503+ 29C3 BF 28                        dw          ULESS
 504+ 29C5              QHeap_Skip:                                          // endif
 505+ 29C5 02 25                        dw      EXIT                        // ;
 506+ 29C7
 507+ 29C7              //  ______________________________________________________________________
 508+ 29C7              //
 509+ 29C7              // ?>heap       n1 -- n2
 510+ 29C7              // query current page in MMU7 8K-RAM : 0 and 223
 511+ 29C7                              Colon_Def QTOHEAP, "?>HEAP", is_normal
 511+ 29C7             >                New_Def  QTOHEAP, "?>HEAP", Enter_Ptr, is_normal ; ok
 511+ 29C7             >
 511+ 29C7             >Dict_Ptr        defl    $
 511+ 29C7             >
 511+ 29C7             >//              ______________________________________________________________________
 511+ 29C7             >//              Heap part
 511+ 29C7             >
 511+ 29C7             >
 511+ 29C7             >                org     (Heap_Ptr & $1FFF) + $E000
 511+ E66E             >
 511+ E66E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 511+ E66E             >Latest_Definition defl  Heap_Ptr
 511+ E66E             >
 511+ E66E             >                // dummy db directives used to calculate length of namec
 511+ E66E 3F 3E 48 45 >                db      "?>HEAP"
 511+ E672 41 50       >
 511+ E674             >len_NFA         defl    $ - temp_NFA
 511+ E674             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 511+ E66E             >
 511+ E66E 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 511+ E66F 3F 3E 48 45 >                db      "?>HEAP"               // name string in 7-bit ascii, but
 511+ E673 41 50       >
 511+ E675             >                org     $-1                 // alter last byte of Name just above to set
 511+ E674 D0          >                db      {b $} | END_BIT     // msb as name end
 511+ E675             >
 511+ E675 60 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 511+ E677             >Prev_Ptr        defl    Heap_Ptr
 511+ E677             >
 511+ E677             >mirror_Ptr      defl    $
 511+ E677             >
 511+ E677 C9 29       >                dw      Dict_Ptr + 2        // xt
 511+ E679             >Heap_Ptr        defl    $ - $E000           // save current HP
 511+ E679             >
 511+ E679             >Current_HP      defl  $ - $E000             // used to set HP once!
 511+ E679             >
 511+ E679             >//              ______________________________________________________________________
 511+ E679             >//              Dictionary part
 511+ E679             >
 511+ E679             >                org     Dict_Ptr
 511+ 29C7             >
 511+ 29C7 77 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 511+ 29C9             >
 511+ 29C9             >QTOHEAP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 511+ 29C9 CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 511+ 29CC             >
 511+ 29CC             >
 511+ 29CC             >                endif           ; ok        // for other definitions it "points" the correct handler
 511+ 29CC             >                // Use of "; ok" to suppress "warning[fwdref]"
 511+ 29CC             >
 511+ 29CC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 512+ 29CC DB 25                        dw      DUP
 513+ 29CE B6 29                        dw      QHEAPP
 514+ 29D0 8F 20                        dw      ZBRANCH
 515+ 29D2 04 00                        dw      Q2Heap_Skip - $
 516+ 29D4 AB 29                        dw          FAR
 517+ 29D6              Q2Heap_Skip:                                          // endif
 518+ 29D6 02 25                        dw      EXIT                        // ;
 519+ 29D8
 520+ 29D8              //  ______________________________________________________________________
 521+ 29D8              //
 522+ 29D8              // hp_fetch     -- a
 523+ 29D8                              Colon_Def HP_FETCH, "HP@", is_normal
 523+ 29D8             >                New_Def  HP_FETCH, "HP@", Enter_Ptr, is_normal ; ok
 523+ 29D8             >
 523+ 29D8             >Dict_Ptr        defl    $
 523+ 29D8             >
 523+ 29D8             >//              ______________________________________________________________________
 523+ 29D8             >//              Heap part
 523+ 29D8             >
 523+ 29D8             >
 523+ 29D8             >                org     (Heap_Ptr & $1FFF) + $E000
 523+ E679             >
 523+ E679             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 523+ E679             >Latest_Definition defl  Heap_Ptr
 523+ E679             >
 523+ E679             >                // dummy db directives used to calculate length of namec
 523+ E679 48 50 40    >                db      "HP@"
 523+ E67C             >len_NFA         defl    $ - temp_NFA
 523+ E67C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 523+ E679             >
 523+ E679 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 523+ E67A 48 50 40    >                db      "HP@"               // name string in 7-bit ascii, but
 523+ E67D             >                org     $-1                 // alter last byte of Name just above to set
 523+ E67C C0          >                db      {b $} | END_BIT     // msb as name end
 523+ E67D             >
 523+ E67D 6E 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 523+ E67F             >Prev_Ptr        defl    Heap_Ptr
 523+ E67F             >
 523+ E67F             >mirror_Ptr      defl    $
 523+ E67F             >
 523+ E67F DA 29       >                dw      Dict_Ptr + 2        // xt
 523+ E681             >Heap_Ptr        defl    $ - $E000           // save current HP
 523+ E681             >
 523+ E681             >Current_HP      defl  $ - $E000             // used to set HP once!
 523+ E681             >
 523+ E681             >//              ______________________________________________________________________
 523+ E681             >//              Dictionary part
 523+ E681             >
 523+ E681             >                org     Dict_Ptr
 523+ 29D8             >
 523+ 29D8 7F 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 523+ 29DA             >
 523+ 29DA             >HP_FETCH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 523+ 29DA CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 523+ 29DD             >
 523+ 29DD             >
 523+ 29DD             >                endif           ; ok        // for other definitions it "points" the correct handler
 523+ 29DD             >                // Use of "; ok" to suppress "warning[fwdref]"
 523+ 29DD             >
 523+ 29DD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 524+ 29DD D9 27 4C 26                  dw      HP, FETCH               // hp @
 525+ 29E1 02 25                        dw      EXIT                    // ;
 526+ 29E3
 527+ 29E3              //  ______________________________________________________________________
 528+ 29E3              //
 529+ 29E3              // page-watermark   -- n
 530+ 29E3              // number of buffers available. must be the difference between LIMIT and FIRST divided by 516
 531+ 29E3                              Constant_Def PAGE_WATERMARK,   "PAGE-WATERMARK", $1F80
 531+ 29E3             >                New_Def  PAGE_WATERMARK, "PAGE-WATERMARK", Constant_Ptr, is_normal
 531+ 29E3             >
 531+ 29E3             >Dict_Ptr        defl    $
 531+ 29E3             >
 531+ 29E3             >//              ______________________________________________________________________
 531+ 29E3             >//              Heap part
 531+ 29E3             >
 531+ 29E3             >
 531+ 29E3             >                org     (Heap_Ptr & $1FFF) + $E000
 531+ E681             >
 531+ E681             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 531+ E681             >Latest_Definition defl  Heap_Ptr
 531+ E681             >
 531+ E681             >                // dummy db directives used to calculate length of namec
 531+ E681 50 41 47 45 >                db      "PAGE-WATERMARK"
 531+ E685 2D 57 41 54 >
 531+ E689 45 52 4D 41 >
 531+ E68D 52 4B       >
 531+ E68F             >len_NFA         defl    $ - temp_NFA
 531+ E68F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 531+ E681             >
 531+ E681 8E          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 531+ E682 50 41 47 45 >                db      "PAGE-WATERMARK"               // name string in 7-bit ascii, but
 531+ E686 2D 57 41 54 >
 531+ E68A 45 52 4D 41 >
 531+ E68E 52 4B       >
 531+ E690             >                org     $-1                 // alter last byte of Name just above to set
 531+ E68F CB          >                db      {b $} | END_BIT     // msb as name end
 531+ E690             >
 531+ E690 79 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 531+ E692             >Prev_Ptr        defl    Heap_Ptr
 531+ E692             >
 531+ E692             >mirror_Ptr      defl    $
 531+ E692             >
 531+ E692 E5 29       >                dw      Dict_Ptr + 2        // xt
 531+ E694             >Heap_Ptr        defl    $ - $E000           // save current HP
 531+ E694             >
 531+ E694             >Current_HP      defl  $ - $E000             // used to set HP once!
 531+ E694             >
 531+ E694             >//              ______________________________________________________________________
 531+ E694             >//              Dictionary part
 531+ E694             >
 531+ E694             >                org     Dict_Ptr
 531+ 29E3             >
 531+ 29E3 92 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 531+ 29E5             >
 531+ 29E5             >PAGE_WATERMARK:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 531+ 29E5 CD 18 27    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 531+ 29E8             >
 531+ 29E8             >
 531+ 29E8             >                endif           ; ok        // for other definitions it "points" the correct handler
 531+ 29E8             >                // Use of "; ok" to suppress "warning[fwdref]"
 531+ 29E8             >
 531+ 29E8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 531+ 29E8 80 1F       >                dw      $1F80
 532+ 29EA
 533+ 29EA              //  ______________________________________________________________________
 534+ 29EA              //
 535+ 29EA              // skip-hp-page ha -- a
 536+ 29EA                              Colon_Def SKIP_HP_PAGE, "SKIP-HP-PAGE", is_normal
 536+ 29EA             >                New_Def  SKIP_HP_PAGE, "SKIP-HP-PAGE", Enter_Ptr, is_normal ; ok
 536+ 29EA             >
 536+ 29EA             >Dict_Ptr        defl    $
 536+ 29EA             >
 536+ 29EA             >//              ______________________________________________________________________
 536+ 29EA             >//              Heap part
 536+ 29EA             >
 536+ 29EA             >
 536+ 29EA             >                org     (Heap_Ptr & $1FFF) + $E000
 536+ E694             >
 536+ E694             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 536+ E694             >Latest_Definition defl  Heap_Ptr
 536+ E694             >
 536+ E694             >                // dummy db directives used to calculate length of namec
 536+ E694 53 4B 49 50 >                db      "SKIP-HP-PAGE"
 536+ E698 2D 48 50 2D >
 536+ E69C 50 41 47 45 >
 536+ E6A0             >len_NFA         defl    $ - temp_NFA
 536+ E6A0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 536+ E694             >
 536+ E694 8C          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 536+ E695 53 4B 49 50 >                db      "SKIP-HP-PAGE"               // name string in 7-bit ascii, but
 536+ E699 2D 48 50 2D >
 536+ E69D 50 41 47 45 >
 536+ E6A1             >                org     $-1                 // alter last byte of Name just above to set
 536+ E6A0 C5          >                db      {b $} | END_BIT     // msb as name end
 536+ E6A1             >
 536+ E6A1 81 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 536+ E6A3             >Prev_Ptr        defl    Heap_Ptr
 536+ E6A3             >
 536+ E6A3             >mirror_Ptr      defl    $
 536+ E6A3             >
 536+ E6A3 EC 29       >                dw      Dict_Ptr + 2        // xt
 536+ E6A5             >Heap_Ptr        defl    $ - $E000           // save current HP
 536+ E6A5             >
 536+ E6A5             >Current_HP      defl  $ - $E000             // used to set HP once!
 536+ E6A5             >
 536+ E6A5             >//              ______________________________________________________________________
 536+ E6A5             >//              Dictionary part
 536+ E6A5             >
 536+ E6A5             >                org     Dict_Ptr
 536+ 29EA             >
 536+ 29EA A3 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 536+ 29EC             >
 536+ 29EC             >SKIP_HP_PAGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 536+ 29EC CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 536+ 29EF             >
 536+ 29EF             >
 536+ 29EF             >                endif           ; ok        // for other definitions it "points" the correct handler
 536+ 29EF             >                // Use of "; ok" to suppress "warning[fwdref]"
 536+ 29EF             >
 536+ 29EF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 537+ 29EF DA 29                        dw      HP_FETCH                // hp@
 538+ 29F1 3D 20 FF 1F                  dw      LIT, $1FFF, AND_OP      // 1FFF and
 538+ 29F5 C2 24
 539+ 29F7 55 25                        dw      PLUS
 540+ 29F9 E5 29                        dw      PAGE_WATERMARK
 541+ 29FB E2 28                        dw      GREATER
 542+ 29FD 8F 20                        dw      ZBRANCH
 543+ 29FF 12 00                        dw      Skip_Skip - $   // if
 544+ 2A01 DA 29                        dw      HP_FETCH
 545+ 2A03 3D 20 FF 1F                  dw      LIT, $1FFF, OR_OP
 545+ 2A07 D1 24
 546+ 2A09 6E 25 7C 25                  dw      ONE_PLUS, TWO_PLUS
 547+ 2A0D D9 27 56 26                  dw      HP, STORE
 548+ 2A11              Skip_Skip:
 549+ 2A11 02 25                        dw      EXIT                    // ;
 550+ 2A13              //  ______________________________________________________________________
 551+ 2A13              //
 552+ 2A13              // latest       -- nfa
 553+ 2A13                              Colon_Def LATEST, "LATEST", is_normal
 553+ 2A13             >                New_Def  LATEST, "LATEST", Enter_Ptr, is_normal ; ok
 553+ 2A13             >
 553+ 2A13             >Dict_Ptr        defl    $
 553+ 2A13             >
 553+ 2A13             >//              ______________________________________________________________________
 553+ 2A13             >//              Heap part
 553+ 2A13             >
 553+ 2A13             >
 553+ 2A13             >                org     (Heap_Ptr & $1FFF) + $E000
 553+ E6A5             >
 553+ E6A5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 553+ E6A5             >Latest_Definition defl  Heap_Ptr
 553+ E6A5             >
 553+ E6A5             >                // dummy db directives used to calculate length of namec
 553+ E6A5 4C 41 54 45 >                db      "LATEST"
 553+ E6A9 53 54       >
 553+ E6AB             >len_NFA         defl    $ - temp_NFA
 553+ E6AB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 553+ E6A5             >
 553+ E6A5 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 553+ E6A6 4C 41 54 45 >                db      "LATEST"               // name string in 7-bit ascii, but
 553+ E6AA 53 54       >
 553+ E6AC             >                org     $-1                 // alter last byte of Name just above to set
 553+ E6AB D4          >                db      {b $} | END_BIT     // msb as name end
 553+ E6AC             >
 553+ E6AC 94 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 553+ E6AE             >Prev_Ptr        defl    Heap_Ptr
 553+ E6AE             >
 553+ E6AE             >mirror_Ptr      defl    $
 553+ E6AE             >
 553+ E6AE 15 2A       >                dw      Dict_Ptr + 2        // xt
 553+ E6B0             >Heap_Ptr        defl    $ - $E000           // save current HP
 553+ E6B0             >
 553+ E6B0             >Current_HP      defl  $ - $E000             // used to set HP once!
 553+ E6B0             >
 553+ E6B0             >//              ______________________________________________________________________
 553+ E6B0             >//              Dictionary part
 553+ E6B0             >
 553+ E6B0             >                org     Dict_Ptr
 553+ 2A13             >
 553+ 2A13 AE 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 553+ 2A15             >
 553+ 2A15             >LATEST:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 553+ 2A15 CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 553+ 2A18             >
 553+ 2A18             >
 553+ 2A18             >                endif           ; ok        // for other definitions it "points" the correct handler
 553+ 2A18             >                // Use of "; ok" to suppress "warning[fwdref]"
 553+ 2A18             >
 553+ 2A18             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 554+ 2A18 09 28                        dw      CURRENT                 // current
 555+ 2A1A 4C 26 4C 26                  dw      FETCH, FETCH            // @ @
 556+ 2A1E AB 29                        dw      FAR // Q TO HEAP
 557+ 2A20 02 25                        dw      EXIT                    // ;
 558+ 2A22
 559+ 2A22              //  ______________________________________________________________________
 560+ 2A22              //
 561+ 2A22              // >body        cfa -- pfa
 562+ 2A22                              Colon_Def TO_BODY, ">BODY", is_normal
 562+ 2A22             >                New_Def  TO_BODY, ">BODY", Enter_Ptr, is_normal ; ok
 562+ 2A22             >
 562+ 2A22             >Dict_Ptr        defl    $
 562+ 2A22             >
 562+ 2A22             >//              ______________________________________________________________________
 562+ 2A22             >//              Heap part
 562+ 2A22             >
 562+ 2A22             >
 562+ 2A22             >                org     (Heap_Ptr & $1FFF) + $E000
 562+ E6B0             >
 562+ E6B0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 562+ E6B0             >Latest_Definition defl  Heap_Ptr
 562+ E6B0             >
 562+ E6B0             >                // dummy db directives used to calculate length of namec
 562+ E6B0 3E 42 4F 44 >                db      ">BODY"
 562+ E6B4 59          >
 562+ E6B5             >len_NFA         defl    $ - temp_NFA
 562+ E6B5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 562+ E6B0             >
 562+ E6B0 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 562+ E6B1 3E 42 4F 44 >                db      ">BODY"               // name string in 7-bit ascii, but
 562+ E6B5 59          >
 562+ E6B6             >                org     $-1                 // alter last byte of Name just above to set
 562+ E6B5 D9          >                db      {b $} | END_BIT     // msb as name end
 562+ E6B6             >
 562+ E6B6 A5 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 562+ E6B8             >Prev_Ptr        defl    Heap_Ptr
 562+ E6B8             >
 562+ E6B8             >mirror_Ptr      defl    $
 562+ E6B8             >
 562+ E6B8 24 2A       >                dw      Dict_Ptr + 2        // xt
 562+ E6BA             >Heap_Ptr        defl    $ - $E000           // save current HP
 562+ E6BA             >
 562+ E6BA             >Current_HP      defl  $ - $E000             // used to set HP once!
 562+ E6BA             >
 562+ E6BA             >//              ______________________________________________________________________
 562+ E6BA             >//              Dictionary part
 562+ E6BA             >
 562+ E6BA             >                org     Dict_Ptr
 562+ 2A22             >
 562+ 2A22 B8 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 562+ 2A24             >
 562+ 2A24             >TO_BODY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 562+ 2A24 CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 562+ 2A27             >
 562+ 2A27             >
 562+ 2A27             >                endif           ; ok        // for other definitions it "points" the correct handler
 562+ 2A27             >                // Use of "; ok" to suppress "warning[fwdref]"
 562+ 2A27             >
 562+ 2A27             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 563+ 2A27 59 27 55 25                  dw      THREE, PLUS             // cell+ --> 3 +
 564+ 2A2B 02 25                        dw      EXIT                    // ;
 565+ 2A2D
 566+ 2A2D              //  ______________________________________________________________________
 567+ 2A2D              //
 568+ 2A2D              // <name        cfa -- nfa
 569+ 2A2D                              Colon_Def TO_NAME, "<NAME", is_normal
 569+ 2A2D             >                New_Def  TO_NAME, "<NAME", Enter_Ptr, is_normal ; ok
 569+ 2A2D             >
 569+ 2A2D             >Dict_Ptr        defl    $
 569+ 2A2D             >
 569+ 2A2D             >//              ______________________________________________________________________
 569+ 2A2D             >//              Heap part
 569+ 2A2D             >
 569+ 2A2D             >
 569+ 2A2D             >                org     (Heap_Ptr & $1FFF) + $E000
 569+ E6BA             >
 569+ E6BA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 569+ E6BA             >Latest_Definition defl  Heap_Ptr
 569+ E6BA             >
 569+ E6BA             >                // dummy db directives used to calculate length of namec
 569+ E6BA 3C 4E 41 4D >                db      "<NAME"
 569+ E6BE 45          >
 569+ E6BF             >len_NFA         defl    $ - temp_NFA
 569+ E6BF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 569+ E6BA             >
 569+ E6BA 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 569+ E6BB 3C 4E 41 4D >                db      "<NAME"               // name string in 7-bit ascii, but
 569+ E6BF 45          >
 569+ E6C0             >                org     $-1                 // alter last byte of Name just above to set
 569+ E6BF C5          >                db      {b $} | END_BIT     // msb as name end
 569+ E6C0             >
 569+ E6C0 B0 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 569+ E6C2             >Prev_Ptr        defl    Heap_Ptr
 569+ E6C2             >
 569+ E6C2             >mirror_Ptr      defl    $
 569+ E6C2             >
 569+ E6C2 2F 2A       >                dw      Dict_Ptr + 2        // xt
 569+ E6C4             >Heap_Ptr        defl    $ - $E000           // save current HP
 569+ E6C4             >
 569+ E6C4             >Current_HP      defl  $ - $E000             // used to set HP once!
 569+ E6C4             >
 569+ E6C4             >//              ______________________________________________________________________
 569+ E6C4             >//              Dictionary part
 569+ E6C4             >
 569+ E6C4             >                org     Dict_Ptr
 569+ 2A2D             >
 569+ 2A2D C2 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 569+ 2A2F             >
 569+ 2A2F             >TO_NAME:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 569+ 2A2F CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 569+ 2A32             >
 569+ 2A32             >
 569+ 2A32             >                endif           ; ok        // for other definitions it "points" the correct handler
 569+ 2A32             >                // Use of "; ok" to suppress "warning[fwdref]"
 569+ 2A32             >
 569+ 2A32             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 570+ 2A32 89 25                        dw      CELL_MINUS              // cell-
 571+ 2A34 DB 25 4C 26                  dw      DUP, FETCH
 572+ 2A38 B6 29                        dw      QHEAPP
 573+ 2A3A 8F 20                        dw      ZBRANCH
 574+ 2A3C 08 00                        dw      ToName_Skip - $
 575+ 2A3E 4C 26 AB 29                  dw          FETCH, FAR
 576+ 2A42 89 25                        dw          CELL_MINUS
 577+ 2A44              ToName_Skip:                                    // endif
 578+ 2A44
 579+ 2A44 75 25                        dw      ONE_SUBTRACT            // 1-
 580+ 2A46 60 27                        dw      NEG_ONE                 // -1
 581+ 2A48 45 29                        dw      TRAVERSE                // traverse
 582+ 2A4A 02 25                        dw      EXIT                    // ;
 583+ 2A4C
 584+ 2A4C              //  ______________________________________________________________________
 585+ 2A4C              //
 586+ 2A4C              // cfa          pfa -- cfa
 587+ 2A4C                              Colon_Def CFA, "CFA", is_normal
 587+ 2A4C             >                New_Def  CFA, "CFA", Enter_Ptr, is_normal ; ok
 587+ 2A4C             >
 587+ 2A4C             >Dict_Ptr        defl    $
 587+ 2A4C             >
 587+ 2A4C             >//              ______________________________________________________________________
 587+ 2A4C             >//              Heap part
 587+ 2A4C             >
 587+ 2A4C             >
 587+ 2A4C             >                org     (Heap_Ptr & $1FFF) + $E000
 587+ E6C4             >
 587+ E6C4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 587+ E6C4             >Latest_Definition defl  Heap_Ptr
 587+ E6C4             >
 587+ E6C4             >                // dummy db directives used to calculate length of namec
 587+ E6C4 43 46 41    >                db      "CFA"
 587+ E6C7             >len_NFA         defl    $ - temp_NFA
 587+ E6C7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 587+ E6C4             >
 587+ E6C4 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 587+ E6C5 43 46 41    >                db      "CFA"               // name string in 7-bit ascii, but
 587+ E6C8             >                org     $-1                 // alter last byte of Name just above to set
 587+ E6C7 C1          >                db      {b $} | END_BIT     // msb as name end
 587+ E6C8             >
 587+ E6C8 BA 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 587+ E6CA             >Prev_Ptr        defl    Heap_Ptr
 587+ E6CA             >
 587+ E6CA             >mirror_Ptr      defl    $
 587+ E6CA             >
 587+ E6CA 4E 2A       >                dw      Dict_Ptr + 2        // xt
 587+ E6CC             >Heap_Ptr        defl    $ - $E000           // save current HP
 587+ E6CC             >
 587+ E6CC             >Current_HP      defl  $ - $E000             // used to set HP once!
 587+ E6CC             >
 587+ E6CC             >//              ______________________________________________________________________
 587+ E6CC             >//              Dictionary part
 587+ E6CC             >
 587+ E6CC             >                org     Dict_Ptr
 587+ 2A4C             >
 587+ 2A4C CA 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 587+ 2A4E             >
 587+ 2A4E             >CFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 587+ 2A4E CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 587+ 2A51             >
 587+ 2A51             >
 587+ 2A51             >                endif           ; ok        // for other definitions it "points" the correct handler
 587+ 2A51             >                // Use of "; ok" to suppress "warning[fwdref]"
 587+ 2A51             >
 587+ 2A51             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 588+ 2A51 59 27 A8 28                  dw      THREE, SUBTRACT         // 3 -
 589+ 2A55 02 25                        dw      EXIT                    // ;
 590+ 2A57
 591+ 2A57              //  ______________________________________________________________________
 592+ 2A57              //
 593+ 2A57              // nfa          pfa -- nfa
 594+ 2A57                              Colon_Def NFA, "NFA", is_normal
 594+ 2A57             >                New_Def  NFA, "NFA", Enter_Ptr, is_normal ; ok
 594+ 2A57             >
 594+ 2A57             >Dict_Ptr        defl    $
 594+ 2A57             >
 594+ 2A57             >//              ______________________________________________________________________
 594+ 2A57             >//              Heap part
 594+ 2A57             >
 594+ 2A57             >
 594+ 2A57             >                org     (Heap_Ptr & $1FFF) + $E000
 594+ E6CC             >
 594+ E6CC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 594+ E6CC             >Latest_Definition defl  Heap_Ptr
 594+ E6CC             >
 594+ E6CC             >                // dummy db directives used to calculate length of namec
 594+ E6CC 4E 46 41    >                db      "NFA"
 594+ E6CF             >len_NFA         defl    $ - temp_NFA
 594+ E6CF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 594+ E6CC             >
 594+ E6CC 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 594+ E6CD 4E 46 41    >                db      "NFA"               // name string in 7-bit ascii, but
 594+ E6D0             >                org     $-1                 // alter last byte of Name just above to set
 594+ E6CF C1          >                db      {b $} | END_BIT     // msb as name end
 594+ E6D0             >
 594+ E6D0 C4 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 594+ E6D2             >Prev_Ptr        defl    Heap_Ptr
 594+ E6D2             >
 594+ E6D2             >mirror_Ptr      defl    $
 594+ E6D2             >
 594+ E6D2 59 2A       >                dw      Dict_Ptr + 2        // xt
 594+ E6D4             >Heap_Ptr        defl    $ - $E000           // save current HP
 594+ E6D4             >
 594+ E6D4             >Current_HP      defl  $ - $E000             // used to set HP once!
 594+ E6D4             >
 594+ E6D4             >//              ______________________________________________________________________
 594+ E6D4             >//              Dictionary part
 594+ E6D4             >
 594+ E6D4             >                org     Dict_Ptr
 594+ 2A57             >
 594+ 2A57 D2 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 594+ 2A59             >
 594+ 2A59             >NFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 594+ 2A59 CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 594+ 2A5C             >
 594+ 2A5C             >
 594+ 2A5C             >                endif           ; ok        // for other definitions it "points" the correct handler
 594+ 2A5C             >                // Use of "; ok" to suppress "warning[fwdref]"
 594+ 2A5C             >
 594+ 2A5C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 595+ 2A5C 4E 2A                        dw      CFA                     // cfa
 596+ 2A5E 2F 2A                        dw      TO_NAME                 // traverse
 597+ 2A60 02 25                        dw      EXIT                    // ;
 598+ 2A62
 599+ 2A62              //  ______________________________________________________________________
 600+ 2A62              //
 601+ 2A62              // lfa          pfa -- lfa
 602+ 2A62                              Colon_Def LFA, "LFA", is_normal
 602+ 2A62             >                New_Def  LFA, "LFA", Enter_Ptr, is_normal ; ok
 602+ 2A62             >
 602+ 2A62             >Dict_Ptr        defl    $
 602+ 2A62             >
 602+ 2A62             >//              ______________________________________________________________________
 602+ 2A62             >//              Heap part
 602+ 2A62             >
 602+ 2A62             >
 602+ 2A62             >                org     (Heap_Ptr & $1FFF) + $E000
 602+ E6D4             >
 602+ E6D4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 602+ E6D4             >Latest_Definition defl  Heap_Ptr
 602+ E6D4             >
 602+ E6D4             >                // dummy db directives used to calculate length of namec
 602+ E6D4 4C 46 41    >                db      "LFA"
 602+ E6D7             >len_NFA         defl    $ - temp_NFA
 602+ E6D7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 602+ E6D4             >
 602+ E6D4 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 602+ E6D5 4C 46 41    >                db      "LFA"               // name string in 7-bit ascii, but
 602+ E6D8             >                org     $-1                 // alter last byte of Name just above to set
 602+ E6D7 C1          >                db      {b $} | END_BIT     // msb as name end
 602+ E6D8             >
 602+ E6D8 CC 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 602+ E6DA             >Prev_Ptr        defl    Heap_Ptr
 602+ E6DA             >
 602+ E6DA             >mirror_Ptr      defl    $
 602+ E6DA             >
 602+ E6DA 64 2A       >                dw      Dict_Ptr + 2        // xt
 602+ E6DC             >Heap_Ptr        defl    $ - $E000           // save current HP
 602+ E6DC             >
 602+ E6DC             >Current_HP      defl  $ - $E000             // used to set HP once!
 602+ E6DC             >
 602+ E6DC             >//              ______________________________________________________________________
 602+ E6DC             >//              Dictionary part
 602+ E6DC             >
 602+ E6DC             >                org     Dict_Ptr
 602+ 2A62             >
 602+ 2A62 DA 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 602+ 2A64             >
 602+ 2A64             >LFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 602+ 2A64 CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 602+ 2A67             >
 602+ 2A67             >
 602+ 2A67             >                endif           ; ok        // for other definitions it "points" the correct handler
 602+ 2A67             >                // Use of "; ok" to suppress "warning[fwdref]"
 602+ 2A67             >
 602+ 2A67             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 603+ 2A67 59 2A                        dw      NFA                     // nfa
 604+ 2A69 4B 27                        dw      ONE                     // 1
 605+ 2A6B 45 29                        dw      TRAVERSE                // traverse
 606+ 2A6D 6E 25                        dw      ONE_PLUS                // 1+
 607+ 2A6F 02 25                        dw      EXIT                    // ;
 608+ 2A71
 609+ 2A71              //  ______________________________________________________________________
 610+ 2A71              //
 611+ 2A71              // pfa          nfa -- pfa
 612+ 2A71                              Colon_Def PFA, "PFA", is_normal
 612+ 2A71             >                New_Def  PFA, "PFA", Enter_Ptr, is_normal ; ok
 612+ 2A71             >
 612+ 2A71             >Dict_Ptr        defl    $
 612+ 2A71             >
 612+ 2A71             >//              ______________________________________________________________________
 612+ 2A71             >//              Heap part
 612+ 2A71             >
 612+ 2A71             >
 612+ 2A71             >                org     (Heap_Ptr & $1FFF) + $E000
 612+ E6DC             >
 612+ E6DC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 612+ E6DC             >Latest_Definition defl  Heap_Ptr
 612+ E6DC             >
 612+ E6DC             >                // dummy db directives used to calculate length of namec
 612+ E6DC 50 46 41    >                db      "PFA"
 612+ E6DF             >len_NFA         defl    $ - temp_NFA
 612+ E6DF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 612+ E6DC             >
 612+ E6DC 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 612+ E6DD 50 46 41    >                db      "PFA"               // name string in 7-bit ascii, but
 612+ E6E0             >                org     $-1                 // alter last byte of Name just above to set
 612+ E6DF C1          >                db      {b $} | END_BIT     // msb as name end
 612+ E6E0             >
 612+ E6E0 D4 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 612+ E6E2             >Prev_Ptr        defl    Heap_Ptr
 612+ E6E2             >
 612+ E6E2             >mirror_Ptr      defl    $
 612+ E6E2             >
 612+ E6E2 73 2A       >                dw      Dict_Ptr + 2        // xt
 612+ E6E4             >Heap_Ptr        defl    $ - $E000           // save current HP
 612+ E6E4             >
 612+ E6E4             >Current_HP      defl  $ - $E000             // used to set HP once!
 612+ E6E4             >
 612+ E6E4             >//              ______________________________________________________________________
 612+ E6E4             >//              Dictionary part
 612+ E6E4             >
 612+ E6E4             >                org     Dict_Ptr
 612+ 2A71             >
 612+ 2A71 E2 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 612+ 2A73             >
 612+ 2A73             >PFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 612+ 2A73 CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 612+ 2A76             >
 612+ 2A76             >
 612+ 2A76             >                endif           ; ok        // for other definitions it "points" the correct handler
 612+ 2A76             >                // Use of "; ok" to suppress "warning[fwdref]"
 612+ 2A76             >
 612+ 2A76             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 613+ 2A76 C9 29                        dw      QTOHEAP
 614+ 2A78 4B 27                        dw      ONE                     // 1
 615+ 2A7A 45 29                        dw      TRAVERSE                // traverse
 616+ 2A7C 6E 25                        dw      ONE_PLUS                // 1+
 617+ 2A7E 84 25                        dw      CELL_PLUS               // cell+
 618+ 2A80 9A 29                        dw      QMMU7
 619+ 2A82 8F 20                        dw      ZBRANCH
 620+ 2A84 0E 00                        dw      PFA_Skip - $
 621+ 2A86 62 29                        dw          MMU7_FETCH
 622+ 2A88 4B 27 A8 28                  dw          ONE, SUBTRACT
 623+ 2A8C 8F 20                        dw          ZBRANCH
 624+ 2A8E 04 00                        dw          PFA_Skip - $
 625+ 2A90 4C 26                        dw              FETCH
 626+ 2A92              PFA_Skip:                                    // endif
 627+ 2A92 24 2A                        dw      TO_BODY                 // >body
 628+ 2A94 02 25                        dw      EXIT                    // ;
 629+ 2A96
 630+ 2A96              //  ______________________________________________________________________
 631+ 2A96              //
 632+ 2A96              // !csp         --
 633+ 2A96              // store in user variable CSP current value of SP. Used at compile-time for syntax checkng
 634+ 2A96                              Colon_Def STORE_CSP, "!CSP", is_normal
 634+ 2A96             >                New_Def  STORE_CSP, "!CSP", Enter_Ptr, is_normal ; ok
 634+ 2A96             >
 634+ 2A96             >Dict_Ptr        defl    $
 634+ 2A96             >
 634+ 2A96             >//              ______________________________________________________________________
 634+ 2A96             >//              Heap part
 634+ 2A96             >
 634+ 2A96             >
 634+ 2A96             >                org     (Heap_Ptr & $1FFF) + $E000
 634+ E6E4             >
 634+ E6E4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 634+ E6E4             >Latest_Definition defl  Heap_Ptr
 634+ E6E4             >
 634+ E6E4             >                // dummy db directives used to calculate length of namec
 634+ E6E4 21 43 53 50 >                db      "!CSP"
 634+ E6E8             >len_NFA         defl    $ - temp_NFA
 634+ E6E8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 634+ E6E4             >
 634+ E6E4 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 634+ E6E5 21 43 53 50 >                db      "!CSP"               // name string in 7-bit ascii, but
 634+ E6E9             >                org     $-1                 // alter last byte of Name just above to set
 634+ E6E8 D0          >                db      {b $} | END_BIT     // msb as name end
 634+ E6E9             >
 634+ E6E9 DC 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 634+ E6EB             >Prev_Ptr        defl    Heap_Ptr
 634+ E6EB             >
 634+ E6EB             >mirror_Ptr      defl    $
 634+ E6EB             >
 634+ E6EB 98 2A       >                dw      Dict_Ptr + 2        // xt
 634+ E6ED             >Heap_Ptr        defl    $ - $E000           // save current HP
 634+ E6ED             >
 634+ E6ED             >Current_HP      defl  $ - $E000             // used to set HP once!
 634+ E6ED             >
 634+ E6ED             >//              ______________________________________________________________________
 634+ E6ED             >//              Dictionary part
 634+ E6ED             >
 634+ E6ED             >                org     Dict_Ptr
 634+ 2A96             >
 634+ 2A96 EB 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 634+ 2A98             >
 634+ 2A98             >STORE_CSP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 634+ 2A98 CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 634+ 2A9B             >
 634+ 2A9B             >
 634+ 2A9B             >                endif           ; ok        // for other definitions it "points" the correct handler
 634+ 2A9B             >                // Use of "; ok" to suppress "warning[fwdref]"
 634+ 2A9B             >
 634+ 2A9B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 635+ 2A9B E9 24                        dw      SPFETCH                 // sp@
 636+ 2A9D 27 28 56 26                  dw      CSP, STORE              // csp !
 637+ 2AA1 02 25                        dw      EXIT                    // ;
 638+ 2AA3
 639+ 2AA3              //  ______________________________________________________________________
 640+ 2AA3              //
 641+ 2AA3              // ?error       f n --
 642+ 2AA3              // rase error n if flag f it true
 643+ 2AA3                              Colon_Def QERROR, "?ERROR", is_normal
 643+ 2AA3             >                New_Def  QERROR, "?ERROR", Enter_Ptr, is_normal ; ok
 643+ 2AA3             >
 643+ 2AA3             >Dict_Ptr        defl    $
 643+ 2AA3             >
 643+ 2AA3             >//              ______________________________________________________________________
 643+ 2AA3             >//              Heap part
 643+ 2AA3             >
 643+ 2AA3             >
 643+ 2AA3             >                org     (Heap_Ptr & $1FFF) + $E000
 643+ E6ED             >
 643+ E6ED             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 643+ E6ED             >Latest_Definition defl  Heap_Ptr
 643+ E6ED             >
 643+ E6ED             >                // dummy db directives used to calculate length of namec
 643+ E6ED 3F 45 52 52 >                db      "?ERROR"
 643+ E6F1 4F 52       >
 643+ E6F3             >len_NFA         defl    $ - temp_NFA
 643+ E6F3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 643+ E6ED             >
 643+ E6ED 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 643+ E6EE 3F 45 52 52 >                db      "?ERROR"               // name string in 7-bit ascii, but
 643+ E6F2 4F 52       >
 643+ E6F4             >                org     $-1                 // alter last byte of Name just above to set
 643+ E6F3 D2          >                db      {b $} | END_BIT     // msb as name end
 643+ E6F4             >
 643+ E6F4 E4 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 643+ E6F6             >Prev_Ptr        defl    Heap_Ptr
 643+ E6F6             >
 643+ E6F6             >mirror_Ptr      defl    $
 643+ E6F6             >
 643+ E6F6 A5 2A       >                dw      Dict_Ptr + 2        // xt
 643+ E6F8             >Heap_Ptr        defl    $ - $E000           // save current HP
 643+ E6F8             >
 643+ E6F8             >Current_HP      defl  $ - $E000             // used to set HP once!
 643+ E6F8             >
 643+ E6F8             >//              ______________________________________________________________________
 643+ E6F8             >//              Dictionary part
 643+ E6F8             >
 643+ E6F8             >                org     Dict_Ptr
 643+ 2AA3             >
 643+ 2AA3 F6 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 643+ 2AA5             >
 643+ 2AA5             >QERROR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 643+ 2AA5 CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 643+ 2AA8             >
 643+ 2AA8             >
 643+ 2AA8             >                endif           ; ok        // for other definitions it "points" the correct handler
 643+ 2AA8             >                // Use of "; ok" to suppress "warning[fwdref]"
 643+ 2AA8             >
 643+ 2AA8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 644+ 2AA8 D4 25                        dw      SWAP                    // swap
 645+ 2AAA                                                              // if
 646+ 2AAA 8F 20                        dw      ZBRANCH
 647+ 2AAC 08 00                        dw      QError_Else - $
 648+ 2AAE DD 2F                        dw          ERROR               //      error  ( is a forward-ref )
 649+ 2AB0                                                              // else
 650+ 2AB0 82 20                        dw      BRANCH
 651+ 2AB2 04 00                        dw      QError_Endif - $
 652+ 2AB4              QError_Else:
 653+ 2AB4 C0 25                        dw          DROP                //      drop
 654+ 2AB6              QError_Endif:                                   // endif
 655+ 2AB6 02 25                        dw      EXIT                    // ;
 656+ 2AB8
 657+ 2AB8              //  ______________________________________________________________________
 658+ 2AB8              //
 659+ 2AB8              // ?comp       --
 660+ 2AB8              // raise msg #17 if not compiling
 661+ 2AB8                              Colon_Def QCOMP, "?COMP", is_normal
 661+ 2AB8             >                New_Def  QCOMP, "?COMP", Enter_Ptr, is_normal ; ok
 661+ 2AB8             >
 661+ 2AB8             >Dict_Ptr        defl    $
 661+ 2AB8             >
 661+ 2AB8             >//              ______________________________________________________________________
 661+ 2AB8             >//              Heap part
 661+ 2AB8             >
 661+ 2AB8             >
 661+ 2AB8             >                org     (Heap_Ptr & $1FFF) + $E000
 661+ E6F8             >
 661+ E6F8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 661+ E6F8             >Latest_Definition defl  Heap_Ptr
 661+ E6F8             >
 661+ E6F8             >                // dummy db directives used to calculate length of namec
 661+ E6F8 3F 43 4F 4D >                db      "?COMP"
 661+ E6FC 50          >
 661+ E6FD             >len_NFA         defl    $ - temp_NFA
 661+ E6FD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 661+ E6F8             >
 661+ E6F8 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 661+ E6F9 3F 43 4F 4D >                db      "?COMP"               // name string in 7-bit ascii, but
 661+ E6FD 50          >
 661+ E6FE             >                org     $-1                 // alter last byte of Name just above to set
 661+ E6FD D0          >                db      {b $} | END_BIT     // msb as name end
 661+ E6FE             >
 661+ E6FE ED 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 661+ E700             >Prev_Ptr        defl    Heap_Ptr
 661+ E700             >
 661+ E700             >mirror_Ptr      defl    $
 661+ E700             >
 661+ E700 BA 2A       >                dw      Dict_Ptr + 2        // xt
 661+ E702             >Heap_Ptr        defl    $ - $E000           // save current HP
 661+ E702             >
 661+ E702             >Current_HP      defl  $ - $E000             // used to set HP once!
 661+ E702             >
 661+ E702             >//              ______________________________________________________________________
 661+ E702             >//              Dictionary part
 661+ E702             >
 661+ E702             >                org     Dict_Ptr
 661+ 2AB8             >
 661+ 2AB8 00 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 661+ 2ABA             >
 661+ 2ABA             >QCOMP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 661+ 2ABA CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 661+ 2ABD             >
 661+ 2ABD             >
 661+ 2ABD             >                endif           ; ok        // for other definitions it "points" the correct handler
 661+ 2ABD             >                // Use of "; ok" to suppress "warning[fwdref]"
 661+ 2ABD             >
 661+ 2ABD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 662+ 2ABD 0F 28 4C 26                  dw      STATE, FETCH            // state @
 663+ 2AC1 27 25                        dw      ZEQUAL                  // 0=
 664+ 2AC3 3D 20 11 00                  dw      LIT, 17                 // 17  ( can't be executed )
 665+ 2AC7 A5 2A                        dw      QERROR                  // ?error
 666+ 2AC9 02 25                        dw      EXIT                    // ;
 667+ 2ACB
 668+ 2ACB              //  ______________________________________________________________________
 669+ 2ACB              //
 670+ 2ACB              // ?exec       --
 671+ 2ACB              // raise msg #18 if compiling
 672+ 2ACB                              Colon_Def QEXEC, "?EXEC", is_normal
 672+ 2ACB             >                New_Def  QEXEC, "?EXEC", Enter_Ptr, is_normal ; ok
 672+ 2ACB             >
 672+ 2ACB             >Dict_Ptr        defl    $
 672+ 2ACB             >
 672+ 2ACB             >//              ______________________________________________________________________
 672+ 2ACB             >//              Heap part
 672+ 2ACB             >
 672+ 2ACB             >
 672+ 2ACB             >                org     (Heap_Ptr & $1FFF) + $E000
 672+ E702             >
 672+ E702             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 672+ E702             >Latest_Definition defl  Heap_Ptr
 672+ E702             >
 672+ E702             >                // dummy db directives used to calculate length of namec
 672+ E702 3F 45 58 45 >                db      "?EXEC"
 672+ E706 43          >
 672+ E707             >len_NFA         defl    $ - temp_NFA
 672+ E707             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 672+ E702             >
 672+ E702 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 672+ E703 3F 45 58 45 >                db      "?EXEC"               // name string in 7-bit ascii, but
 672+ E707 43          >
 672+ E708             >                org     $-1                 // alter last byte of Name just above to set
 672+ E707 C3          >                db      {b $} | END_BIT     // msb as name end
 672+ E708             >
 672+ E708 F8 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 672+ E70A             >Prev_Ptr        defl    Heap_Ptr
 672+ E70A             >
 672+ E70A             >mirror_Ptr      defl    $
 672+ E70A             >
 672+ E70A CD 2A       >                dw      Dict_Ptr + 2        // xt
 672+ E70C             >Heap_Ptr        defl    $ - $E000           // save current HP
 672+ E70C             >
 672+ E70C             >Current_HP      defl  $ - $E000             // used to set HP once!
 672+ E70C             >
 672+ E70C             >//              ______________________________________________________________________
 672+ E70C             >//              Dictionary part
 672+ E70C             >
 672+ E70C             >                org     Dict_Ptr
 672+ 2ACB             >
 672+ 2ACB 0A 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 672+ 2ACD             >
 672+ 2ACD             >QEXEC:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 672+ 2ACD CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 672+ 2AD0             >
 672+ 2AD0             >
 672+ 2AD0             >                endif           ; ok        // for other definitions it "points" the correct handler
 672+ 2AD0             >                // Use of "; ok" to suppress "warning[fwdref]"
 672+ 2AD0             >
 672+ 2AD0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 673+ 2AD0 0F 28 4C 26                  dw      STATE, FETCH            // state @
 674+ 2AD4 3D 20 12 00                  dw      LIT, 18                 // 18  ( can't be compiled )
 675+ 2AD8 A5 2A                        dw      QERROR                  // ?error
 676+ 2ADA 02 25                        dw      EXIT                    // ;
 677+ 2ADC
 678+ 2ADC              //  ______________________________________________________________________
 679+ 2ADC              //
 680+ 2ADC              // ?pairs       n1 n2 --
 681+ 2ADC              // raise msg #19 if n1 != n2. Compiler pushes some placeholder to stack for syntax checking
 682+ 2ADC                              Colon_Def QPAIRS, "?PAIRS", is_normal
 682+ 2ADC             >                New_Def  QPAIRS, "?PAIRS", Enter_Ptr, is_normal ; ok
 682+ 2ADC             >
 682+ 2ADC             >Dict_Ptr        defl    $
 682+ 2ADC             >
 682+ 2ADC             >//              ______________________________________________________________________
 682+ 2ADC             >//              Heap part
 682+ 2ADC             >
 682+ 2ADC             >
 682+ 2ADC             >                org     (Heap_Ptr & $1FFF) + $E000
 682+ E70C             >
 682+ E70C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 682+ E70C             >Latest_Definition defl  Heap_Ptr
 682+ E70C             >
 682+ E70C             >                // dummy db directives used to calculate length of namec
 682+ E70C 3F 50 41 49 >                db      "?PAIRS"
 682+ E710 52 53       >
 682+ E712             >len_NFA         defl    $ - temp_NFA
 682+ E712             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 682+ E70C             >
 682+ E70C 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 682+ E70D 3F 50 41 49 >                db      "?PAIRS"               // name string in 7-bit ascii, but
 682+ E711 52 53       >
 682+ E713             >                org     $-1                 // alter last byte of Name just above to set
 682+ E712 D3          >                db      {b $} | END_BIT     // msb as name end
 682+ E713             >
 682+ E713 02 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 682+ E715             >Prev_Ptr        defl    Heap_Ptr
 682+ E715             >
 682+ E715             >mirror_Ptr      defl    $
 682+ E715             >
 682+ E715 DE 2A       >                dw      Dict_Ptr + 2        // xt
 682+ E717             >Heap_Ptr        defl    $ - $E000           // save current HP
 682+ E717             >
 682+ E717             >Current_HP      defl  $ - $E000             // used to set HP once!
 682+ E717             >
 682+ E717             >//              ______________________________________________________________________
 682+ E717             >//              Dictionary part
 682+ E717             >
 682+ E717             >                org     Dict_Ptr
 682+ 2ADC             >
 682+ 2ADC 15 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 682+ 2ADE             >
 682+ 2ADE             >QPAIRS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 682+ 2ADE CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 682+ 2AE1             >
 682+ 2AE1             >
 682+ 2AE1             >                endif           ; ok        // for other definitions it "points" the correct handler
 682+ 2AE1             >                // Use of "; ok" to suppress "warning[fwdref]"
 682+ 2AE1             >
 682+ 2AE1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 683+ 2AE1 A8 28                        dw      SUBTRACT                // -
 684+ 2AE3 3D 20 13 00                  dw      LIT, 19                 // 18  ( syntax error )
 685+ 2AE7 A5 2A                        dw      QERROR                  // ?error
 686+ 2AE9 02 25                        dw      EXIT                    // ;
 687+ 2AEB
 688+ 2AEB              //  ______________________________________________________________________
 689+ 2AEB              //
 690+ 2AEB              // ?csp       --
 691+ 2AEB              // raise msg #20 if surrent SP in not what previously saved in CSP.
 692+ 2AEB              // Compiler relies on that for  syntax checking of structures
 693+ 2AEB                              Colon_Def QCSP, "?CSP", is_normal
 693+ 2AEB             >                New_Def  QCSP, "?CSP", Enter_Ptr, is_normal ; ok
 693+ 2AEB             >
 693+ 2AEB             >Dict_Ptr        defl    $
 693+ 2AEB             >
 693+ 2AEB             >//              ______________________________________________________________________
 693+ 2AEB             >//              Heap part
 693+ 2AEB             >
 693+ 2AEB             >
 693+ 2AEB             >                org     (Heap_Ptr & $1FFF) + $E000
 693+ E717             >
 693+ E717             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 693+ E717             >Latest_Definition defl  Heap_Ptr
 693+ E717             >
 693+ E717             >                // dummy db directives used to calculate length of namec
 693+ E717 3F 43 53 50 >                db      "?CSP"
 693+ E71B             >len_NFA         defl    $ - temp_NFA
 693+ E71B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 693+ E717             >
 693+ E717 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 693+ E718 3F 43 53 50 >                db      "?CSP"               // name string in 7-bit ascii, but
 693+ E71C             >                org     $-1                 // alter last byte of Name just above to set
 693+ E71B D0          >                db      {b $} | END_BIT     // msb as name end
 693+ E71C             >
 693+ E71C 0C 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 693+ E71E             >Prev_Ptr        defl    Heap_Ptr
 693+ E71E             >
 693+ E71E             >mirror_Ptr      defl    $
 693+ E71E             >
 693+ E71E ED 2A       >                dw      Dict_Ptr + 2        // xt
 693+ E720             >Heap_Ptr        defl    $ - $E000           // save current HP
 693+ E720             >
 693+ E720             >Current_HP      defl  $ - $E000             // used to set HP once!
 693+ E720             >
 693+ E720             >//              ______________________________________________________________________
 693+ E720             >//              Dictionary part
 693+ E720             >
 693+ E720             >                org     Dict_Ptr
 693+ 2AEB             >
 693+ 2AEB 1E 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 693+ 2AED             >
 693+ 2AED             >QCSP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 693+ 2AED CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 693+ 2AF0             >
 693+ 2AF0             >
 693+ 2AF0             >                endif           ; ok        // for other definitions it "points" the correct handler
 693+ 2AF0             >                // Use of "; ok" to suppress "warning[fwdref]"
 693+ 2AF0             >
 693+ 2AF0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 694+ 2AF0 E9 24                        dw      SPFETCH                 // sp@
 695+ 2AF2 27 28 4C 26                  dw      CSP, FETCH              // csp @
 696+ 2AF6 A8 28                        dw      SUBTRACT                // -
 697+ 2AF8 3D 20 14 00                  dw      LIT, 20                 // 20  ( bad definition end )
 698+ 2AFC A5 2A                        dw      QERROR                  // ?error
 699+ 2AFE 02 25                        dw      EXIT                    // ;
 700+ 2B00
 701+ 2B00              //  ______________________________________________________________________
 702+ 2B00              //
 703+ 2B00              // ?loading      --
 704+ 2B00              // raise msg #22 if not loading
 705+ 2B00                              Colon_Def QLOADING, "?LOADING", is_normal
 705+ 2B00             >                New_Def  QLOADING, "?LOADING", Enter_Ptr, is_normal ; ok
 705+ 2B00             >
 705+ 2B00             >Dict_Ptr        defl    $
 705+ 2B00             >
 705+ 2B00             >//              ______________________________________________________________________
 705+ 2B00             >//              Heap part
 705+ 2B00             >
 705+ 2B00             >
 705+ 2B00             >                org     (Heap_Ptr & $1FFF) + $E000
 705+ E720             >
 705+ E720             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 705+ E720             >Latest_Definition defl  Heap_Ptr
 705+ E720             >
 705+ E720             >                // dummy db directives used to calculate length of namec
 705+ E720 3F 4C 4F 41 >                db      "?LOADING"
 705+ E724 44 49 4E 47 >
 705+ E728             >len_NFA         defl    $ - temp_NFA
 705+ E728             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 705+ E720             >
 705+ E720 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 705+ E721 3F 4C 4F 41 >                db      "?LOADING"               // name string in 7-bit ascii, but
 705+ E725 44 49 4E 47 >
 705+ E729             >                org     $-1                 // alter last byte of Name just above to set
 705+ E728 C7          >                db      {b $} | END_BIT     // msb as name end
 705+ E729             >
 705+ E729 17 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 705+ E72B             >Prev_Ptr        defl    Heap_Ptr
 705+ E72B             >
 705+ E72B             >mirror_Ptr      defl    $
 705+ E72B             >
 705+ E72B 02 2B       >                dw      Dict_Ptr + 2        // xt
 705+ E72D             >Heap_Ptr        defl    $ - $E000           // save current HP
 705+ E72D             >
 705+ E72D             >Current_HP      defl  $ - $E000             // used to set HP once!
 705+ E72D             >
 705+ E72D             >//              ______________________________________________________________________
 705+ E72D             >//              Dictionary part
 705+ E72D             >
 705+ E72D             >                org     Dict_Ptr
 705+ 2B00             >
 705+ 2B00 2B 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 705+ 2B02             >
 705+ 2B02             >QLOADING:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 705+ 2B02 CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 705+ 2B05             >
 705+ 2B05             >
 705+ 2B05             >                endif           ; ok        // for other definitions it "points" the correct handler
 705+ 2B05             >                // Use of "; ok" to suppress "warning[fwdref]"
 705+ 2B05             >
 705+ 2B05             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 706+ 2B05 E5 27 4C 26                  dw      BLK, FETCH              // blk @
 707+ 2B09 27 25                        dw      ZEQUAL                  // 0=
 708+ 2B0B 3D 20 16 00                  dw      LIT, 22                 // 22  ( aren't loading now )
 709+ 2B0F A5 2A                        dw      QERROR                  // ?error
 710+ 2B11 02 25                        dw      EXIT                    // ;
 711+ 2B13
 712+ 2B13              //  ______________________________________________________________________
 713+ 2B13              //
 714+ 2B13              // compile      --
 715+ 2B13              // compiles the following word
 716+ 2B13                              Colon_Def COMPILE, "COMPILE", is_normal
 716+ 2B13             >                New_Def  COMPILE, "COMPILE", Enter_Ptr, is_normal ; ok
 716+ 2B13             >
 716+ 2B13             >Dict_Ptr        defl    $
 716+ 2B13             >
 716+ 2B13             >//              ______________________________________________________________________
 716+ 2B13             >//              Heap part
 716+ 2B13             >
 716+ 2B13             >
 716+ 2B13             >                org     (Heap_Ptr & $1FFF) + $E000
 716+ E72D             >
 716+ E72D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 716+ E72D             >Latest_Definition defl  Heap_Ptr
 716+ E72D             >
 716+ E72D             >                // dummy db directives used to calculate length of namec
 716+ E72D 43 4F 4D 50 >                db      "COMPILE"
 716+ E731 49 4C 45    >
 716+ E734             >len_NFA         defl    $ - temp_NFA
 716+ E734             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 716+ E72D             >
 716+ E72D 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 716+ E72E 43 4F 4D 50 >                db      "COMPILE"               // name string in 7-bit ascii, but
 716+ E732 49 4C 45    >
 716+ E735             >                org     $-1                 // alter last byte of Name just above to set
 716+ E734 C5          >                db      {b $} | END_BIT     // msb as name end
 716+ E735             >
 716+ E735 20 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 716+ E737             >Prev_Ptr        defl    Heap_Ptr
 716+ E737             >
 716+ E737             >mirror_Ptr      defl    $
 716+ E737             >
 716+ E737 15 2B       >                dw      Dict_Ptr + 2        // xt
 716+ E739             >Heap_Ptr        defl    $ - $E000           // save current HP
 716+ E739             >
 716+ E739             >Current_HP      defl  $ - $E000             // used to set HP once!
 716+ E739             >
 716+ E739             >//              ______________________________________________________________________
 716+ E739             >//              Dictionary part
 716+ E739             >
 716+ E739             >                org     Dict_Ptr
 716+ 2B13             >
 716+ 2B13 37 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 716+ 2B15             >
 716+ 2B15             >COMPILE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 716+ 2B15 CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 716+ 2B18             >
 716+ 2B18             >
 716+ 2B18             >                endif           ; ok        // for other definitions it "points" the correct handler
 716+ 2B18             >                // Use of "; ok" to suppress "warning[fwdref]"
 716+ 2B18             >
 716+ 2B18             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 717+ 2B18 BA 2A                        dw      QCOMP                   // ?comp
 718+ 2B1A 17 25                        dw      R_TO                    // r>
 719+ 2B1C DB 25 84 25                  dw      DUP, CELL_PLUS          // dup, cell+
 720+ 2B20 0C 25                        dw      TO_R                    // >r
 721+ 2B22 4C 26 7F 28                  dw      FETCH, COMMA            // @ ,
 722+ 2B26 02 25                        dw      EXIT                    // ;
 723+ 2B28
 724+ 2B28              //  ______________________________________________________________________
 725+ 2B28              //
 726+ 2B28              // compile,     --
 727+ 2B28              // compiles the following word
 728+ 2B28                              Colon_Def COMPILE_XT, "COMPILE,", is_normal
 728+ 2B28             >                New_Def  COMPILE_XT, "COMPILE,", Enter_Ptr, is_normal ; ok
 728+ 2B28             >
 728+ 2B28             >Dict_Ptr        defl    $
 728+ 2B28             >
 728+ 2B28             >//              ______________________________________________________________________
 728+ 2B28             >//              Heap part
 728+ 2B28             >
 728+ 2B28             >
 728+ 2B28             >                org     (Heap_Ptr & $1FFF) + $E000
 728+ E739             >
 728+ E739             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 728+ E739             >Latest_Definition defl  Heap_Ptr
 728+ E739             >
 728+ E739             >                // dummy db directives used to calculate length of namec
 728+ E739 43 4F 4D 50 >                db      "COMPILE,"
 728+ E73D 49 4C 45 2C >
 728+ E741             >len_NFA         defl    $ - temp_NFA
 728+ E741             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 728+ E739             >
 728+ E739 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 728+ E73A 43 4F 4D 50 >                db      "COMPILE,"               // name string in 7-bit ascii, but
 728+ E73E 49 4C 45 2C >
 728+ E742             >                org     $-1                 // alter last byte of Name just above to set
 728+ E741 AC          >                db      {b $} | END_BIT     // msb as name end
 728+ E742             >
 728+ E742 2D 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 728+ E744             >Prev_Ptr        defl    Heap_Ptr
 728+ E744             >
 728+ E744             >mirror_Ptr      defl    $
 728+ E744             >
 728+ E744 2A 2B       >                dw      Dict_Ptr + 2        // xt
 728+ E746             >Heap_Ptr        defl    $ - $E000           // save current HP
 728+ E746             >
 728+ E746             >Current_HP      defl  $ - $E000             // used to set HP once!
 728+ E746             >
 728+ E746             >//              ______________________________________________________________________
 728+ E746             >//              Dictionary part
 728+ E746             >
 728+ E746             >                org     Dict_Ptr
 728+ 2B28             >
 728+ 2B28 44 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 728+ 2B2A             >
 728+ 2B2A             >COMPILE_XT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 728+ 2B2A CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 728+ 2B2D             >
 728+ 2B2D             >
 728+ 2B2D             >                endif           ; ok        // for other definitions it "points" the correct handler
 728+ 2B2D             >                // Use of "; ok" to suppress "warning[fwdref]"
 728+ 2B2D             >
 728+ 2B2D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 729+ 2B2D BA 2A                        dw      QCOMP                   // ?comp
 730+ 2B2F 7F 28                        dw      COMMA                   // ,
 731+ 2B31 02 25                        dw      EXIT                    // ;
 732+ 2B33
 733+ 2B33              //  ______________________________________________________________________
 734+ 2B33              //
 735+ 2B33              // [            --
 736+ 2B33              // stop compilation
 737+ 2B33                              Colon_Def SQUARED_OPEN, "[", is_immediate
 737+ 2B33             >                New_Def  SQUARED_OPEN, "[", Enter_Ptr, is_immediate ; ok
 737+ 2B33             >
 737+ 2B33             >Dict_Ptr        defl    $
 737+ 2B33             >
 737+ 2B33             >//              ______________________________________________________________________
 737+ 2B33             >//              Heap part
 737+ 2B33             >
 737+ 2B33             >
 737+ 2B33             >                org     (Heap_Ptr & $1FFF) + $E000
 737+ E746             >
 737+ E746             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 737+ E746             >Latest_Definition defl  Heap_Ptr
 737+ E746             >
 737+ E746             >                // dummy db directives used to calculate length of namec
 737+ E746 5B          >                db      "["
 737+ E747             >len_NFA         defl    $ - temp_NFA
 737+ E747             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 737+ E746             >
 737+ E746 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 737+ E747 5B          >                db      "["               // name string in 7-bit ascii, but
 737+ E748             >                org     $-1                 // alter last byte of Name just above to set
 737+ E747 DB          >                db      {b $} | END_BIT     // msb as name end
 737+ E748             >
 737+ E748 39 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 737+ E74A             >Prev_Ptr        defl    Heap_Ptr
 737+ E74A             >
 737+ E74A             >mirror_Ptr      defl    $
 737+ E74A             >
 737+ E74A 35 2B       >                dw      Dict_Ptr + 2        // xt
 737+ E74C             >Heap_Ptr        defl    $ - $E000           // save current HP
 737+ E74C             >
 737+ E74C             >Current_HP      defl  $ - $E000             // used to set HP once!
 737+ E74C             >
 737+ E74C             >//              ______________________________________________________________________
 737+ E74C             >//              Dictionary part
 737+ E74C             >
 737+ E74C             >                org     Dict_Ptr
 737+ 2B33             >
 737+ 2B33 4A 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 737+ 2B35             >
 737+ 2B35             >SQUARED_OPEN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 737+ 2B35 CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 737+ 2B38             >
 737+ 2B38             >
 737+ 2B38             >                endif           ; ok        // for other definitions it "points" the correct handler
 737+ 2B38             >                // Use of "; ok" to suppress "warning[fwdref]"
 737+ 2B38             >
 737+ 2B38             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 738+ 2B38 44 27                        dw      ZERO                    // 0
 739+ 2B3A 0F 28 56 26                  dw      STATE, STORE            // state !
 740+ 2B3E 02 25                        dw      EXIT                    // ; immediate
 741+ 2B40
 742+ 2B40              //  ______________________________________________________________________
 743+ 2B40              //
 744+ 2B40              // ]            --
 745+ 2B40              // start compilation
 746+ 2B40                              Colon_Def SQUARED_CLOSE, "]", is_normal
 746+ 2B40             >                New_Def  SQUARED_CLOSE, "]", Enter_Ptr, is_normal ; ok
 746+ 2B40             >
 746+ 2B40             >Dict_Ptr        defl    $
 746+ 2B40             >
 746+ 2B40             >//              ______________________________________________________________________
 746+ 2B40             >//              Heap part
 746+ 2B40             >
 746+ 2B40             >
 746+ 2B40             >                org     (Heap_Ptr & $1FFF) + $E000
 746+ E74C             >
 746+ E74C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 746+ E74C             >Latest_Definition defl  Heap_Ptr
 746+ E74C             >
 746+ E74C             >                // dummy db directives used to calculate length of namec
 746+ E74C 5D          >                db      "]"
 746+ E74D             >len_NFA         defl    $ - temp_NFA
 746+ E74D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 746+ E74C             >
 746+ E74C 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 746+ E74D 5D          >                db      "]"               // name string in 7-bit ascii, but
 746+ E74E             >                org     $-1                 // alter last byte of Name just above to set
 746+ E74D DD          >                db      {b $} | END_BIT     // msb as name end
 746+ E74E             >
 746+ E74E 46 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 746+ E750             >Prev_Ptr        defl    Heap_Ptr
 746+ E750             >
 746+ E750             >mirror_Ptr      defl    $
 746+ E750             >
 746+ E750 42 2B       >                dw      Dict_Ptr + 2        // xt
 746+ E752             >Heap_Ptr        defl    $ - $E000           // save current HP
 746+ E752             >
 746+ E752             >Current_HP      defl  $ - $E000             // used to set HP once!
 746+ E752             >
 746+ E752             >//              ______________________________________________________________________
 746+ E752             >//              Dictionary part
 746+ E752             >
 746+ E752             >                org     Dict_Ptr
 746+ 2B40             >
 746+ 2B40 50 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 746+ 2B42             >
 746+ 2B42             >SQUARED_CLOSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 746+ 2B42 CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 746+ 2B45             >
 746+ 2B45             >
 746+ 2B45             >                endif           ; ok        // for other definitions it "points" the correct handler
 746+ 2B45             >                // Use of "; ok" to suppress "warning[fwdref]"
 746+ 2B45             >
 746+ 2B45             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 747+ 2B45 3D 20 C0 00                  dw      LIT, $C0                // 192
 748+ 2B49 0F 28 56 26                  dw      STATE, STORE            // state !
 749+ 2B4D 02 25                        dw      EXIT                    // ;
 750+ 2B4F
 751+ 2B4F              //  ______________________________________________________________________
 752+ 2B4F              //
 753+ 2B4F              // smudge       --
 754+ 2B4F              // toggle smudge bit of latest definition
 755+ 2B4F                              Colon_Def SMUDGE, "SMUDGE", is_normal
 755+ 2B4F             >                New_Def  SMUDGE, "SMUDGE", Enter_Ptr, is_normal ; ok
 755+ 2B4F             >
 755+ 2B4F             >Dict_Ptr        defl    $
 755+ 2B4F             >
 755+ 2B4F             >//              ______________________________________________________________________
 755+ 2B4F             >//              Heap part
 755+ 2B4F             >
 755+ 2B4F             >
 755+ 2B4F             >                org     (Heap_Ptr & $1FFF) + $E000
 755+ E752             >
 755+ E752             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 755+ E752             >Latest_Definition defl  Heap_Ptr
 755+ E752             >
 755+ E752             >                // dummy db directives used to calculate length of namec
 755+ E752 53 4D 55 44 >                db      "SMUDGE"
 755+ E756 47 45       >
 755+ E758             >len_NFA         defl    $ - temp_NFA
 755+ E758             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 755+ E752             >
 755+ E752 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 755+ E753 53 4D 55 44 >                db      "SMUDGE"               // name string in 7-bit ascii, but
 755+ E757 47 45       >
 755+ E759             >                org     $-1                 // alter last byte of Name just above to set
 755+ E758 C5          >                db      {b $} | END_BIT     // msb as name end
 755+ E759             >
 755+ E759 4C 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 755+ E75B             >Prev_Ptr        defl    Heap_Ptr
 755+ E75B             >
 755+ E75B             >mirror_Ptr      defl    $
 755+ E75B             >
 755+ E75B 51 2B       >                dw      Dict_Ptr + 2        // xt
 755+ E75D             >Heap_Ptr        defl    $ - $E000           // save current HP
 755+ E75D             >
 755+ E75D             >Current_HP      defl  $ - $E000             // used to set HP once!
 755+ E75D             >
 755+ E75D             >//              ______________________________________________________________________
 755+ E75D             >//              Dictionary part
 755+ E75D             >
 755+ E75D             >                org     Dict_Ptr
 755+ 2B4F             >
 755+ 2B4F 5B 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 755+ 2B51             >
 755+ 2B51             >SMUDGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 755+ 2B51 CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 755+ 2B54             >
 755+ 2B54             >
 755+ 2B54             >                endif           ; ok        // for other definitions it "points" the correct handler
 755+ 2B54             >                // Use of "; ok" to suppress "warning[fwdref]"
 755+ 2B54             >
 755+ 2B54             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 756+ 2B54 15 2A                        dw      LATEST                  // latest
 757+ 2B56 3D 20 20 00                  dw      LIT, SMUDGE_BIT         // 32
 758+ 2B5A 43 26                        dw      TOGGLE                  // toggle
 759+ 2B5C 02 25                        dw      EXIT                    // ;
 760+ 2B5E
 761+ 2B5E              //  ______________________________________________________________________
 762+ 2B5E              //
 763+ 2B5E              // immediate    --
 764+ 2B5E              // make immediate the latest definition
 765+ 2B5E                              Colon_Def IMMEDIATE, "IMMEDIATE", is_normal
 765+ 2B5E             >                New_Def  IMMEDIATE, "IMMEDIATE", Enter_Ptr, is_normal ; ok
 765+ 2B5E             >
 765+ 2B5E             >Dict_Ptr        defl    $
 765+ 2B5E             >
 765+ 2B5E             >//              ______________________________________________________________________
 765+ 2B5E             >//              Heap part
 765+ 2B5E             >
 765+ 2B5E             >
 765+ 2B5E             >                org     (Heap_Ptr & $1FFF) + $E000
 765+ E75D             >
 765+ E75D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 765+ E75D             >Latest_Definition defl  Heap_Ptr
 765+ E75D             >
 765+ E75D             >                // dummy db directives used to calculate length of namec
 765+ E75D 49 4D 4D 45 >                db      "IMMEDIATE"
 765+ E761 44 49 41 54 >
 765+ E765 45          >
 765+ E766             >len_NFA         defl    $ - temp_NFA
 765+ E766             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 765+ E75D             >
 765+ E75D 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 765+ E75E 49 4D 4D 45 >                db      "IMMEDIATE"               // name string in 7-bit ascii, but
 765+ E762 44 49 41 54 >
 765+ E766 45          >
 765+ E767             >                org     $-1                 // alter last byte of Name just above to set
 765+ E766 C5          >                db      {b $} | END_BIT     // msb as name end
 765+ E767             >
 765+ E767 52 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 765+ E769             >Prev_Ptr        defl    Heap_Ptr
 765+ E769             >
 765+ E769             >mirror_Ptr      defl    $
 765+ E769             >
 765+ E769 60 2B       >                dw      Dict_Ptr + 2        // xt
 765+ E76B             >Heap_Ptr        defl    $ - $E000           // save current HP
 765+ E76B             >
 765+ E76B             >Current_HP      defl  $ - $E000             // used to set HP once!
 765+ E76B             >
 765+ E76B             >//              ______________________________________________________________________
 765+ E76B             >//              Dictionary part
 765+ E76B             >
 765+ E76B             >                org     Dict_Ptr
 765+ 2B5E             >
 765+ 2B5E 69 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 765+ 2B60             >
 765+ 2B60             >IMMEDIATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 765+ 2B60 CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 765+ 2B63             >
 765+ 2B63             >
 765+ 2B63             >                endif           ; ok        // for other definitions it "points" the correct handler
 765+ 2B63             >                // Use of "; ok" to suppress "warning[fwdref]"
 765+ 2B63             >
 765+ 2B63             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 766+ 2B63 15 2A                        dw      LATEST                  // latest
 767+ 2B65 3D 20 40 00                  dw      LIT, $40                // 64
 768+ 2B69 43 26                        dw      TOGGLE                  // toggle
 769+ 2B6B 02 25                        dw      EXIT                    // ;
 770+ 2B6D
 771+ 2B6D              //  ______________________________________________________________________
 772+ 2B6D              //
 773+ 2B6D              // hex          --
 774+ 2B6D              // change numeration base
 775+ 2B6D                              Colon_Def HEX, "HEX", is_normal
 775+ 2B6D             >                New_Def  HEX, "HEX", Enter_Ptr, is_normal ; ok
 775+ 2B6D             >
 775+ 2B6D             >Dict_Ptr        defl    $
 775+ 2B6D             >
 775+ 2B6D             >//              ______________________________________________________________________
 775+ 2B6D             >//              Heap part
 775+ 2B6D             >
 775+ 2B6D             >
 775+ 2B6D             >                org     (Heap_Ptr & $1FFF) + $E000
 775+ E76B             >
 775+ E76B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 775+ E76B             >Latest_Definition defl  Heap_Ptr
 775+ E76B             >
 775+ E76B             >                // dummy db directives used to calculate length of namec
 775+ E76B 48 45 58    >                db      "HEX"
 775+ E76E             >len_NFA         defl    $ - temp_NFA
 775+ E76E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 775+ E76B             >
 775+ E76B 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 775+ E76C 48 45 58    >                db      "HEX"               // name string in 7-bit ascii, but
 775+ E76F             >                org     $-1                 // alter last byte of Name just above to set
 775+ E76E D8          >                db      {b $} | END_BIT     // msb as name end
 775+ E76F             >
 775+ E76F 5D 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 775+ E771             >Prev_Ptr        defl    Heap_Ptr
 775+ E771             >
 775+ E771             >mirror_Ptr      defl    $
 775+ E771             >
 775+ E771 6F 2B       >                dw      Dict_Ptr + 2        // xt
 775+ E773             >Heap_Ptr        defl    $ - $E000           // save current HP
 775+ E773             >
 775+ E773             >Current_HP      defl  $ - $E000             // used to set HP once!
 775+ E773             >
 775+ E773             >//              ______________________________________________________________________
 775+ E773             >//              Dictionary part
 775+ E773             >
 775+ E773             >                org     Dict_Ptr
 775+ 2B6D             >
 775+ 2B6D 71 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 775+ 2B6F             >
 775+ 2B6F             >HEX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 775+ 2B6F CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 775+ 2B72             >
 775+ 2B72             >
 775+ 2B72             >                endif           ; ok        // for other definitions it "points" the correct handler
 775+ 2B72             >                // Use of "; ok" to suppress "warning[fwdref]"
 775+ 2B72             >
 775+ 2B72             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 776+ 2B72 3D 20 10 00                  dw      LIT, 16                 // 16
 777+ 2B76 15 28 56 26                  dw      BASE, STORE             // base !
 778+ 2B7A 02 25                        dw      EXIT                    // ;
 779+ 2B7C
 780+ 2B7C              //  ______________________________________________________________________
 781+ 2B7C              //
 782+ 2B7C              // decimal      --
 783+ 2B7C              // change numeration base
 784+ 2B7C                              Colon_Def DECIMAL, "DECIMAL", is_normal
 784+ 2B7C             >                New_Def  DECIMAL, "DECIMAL", Enter_Ptr, is_normal ; ok
 784+ 2B7C             >
 784+ 2B7C             >Dict_Ptr        defl    $
 784+ 2B7C             >
 784+ 2B7C             >//              ______________________________________________________________________
 784+ 2B7C             >//              Heap part
 784+ 2B7C             >
 784+ 2B7C             >
 784+ 2B7C             >                org     (Heap_Ptr & $1FFF) + $E000
 784+ E773             >
 784+ E773             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 784+ E773             >Latest_Definition defl  Heap_Ptr
 784+ E773             >
 784+ E773             >                // dummy db directives used to calculate length of namec
 784+ E773 44 45 43 49 >                db      "DECIMAL"
 784+ E777 4D 41 4C    >
 784+ E77A             >len_NFA         defl    $ - temp_NFA
 784+ E77A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 784+ E773             >
 784+ E773 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 784+ E774 44 45 43 49 >                db      "DECIMAL"               // name string in 7-bit ascii, but
 784+ E778 4D 41 4C    >
 784+ E77B             >                org     $-1                 // alter last byte of Name just above to set
 784+ E77A CC          >                db      {b $} | END_BIT     // msb as name end
 784+ E77B             >
 784+ E77B 6B 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 784+ E77D             >Prev_Ptr        defl    Heap_Ptr
 784+ E77D             >
 784+ E77D             >mirror_Ptr      defl    $
 784+ E77D             >
 784+ E77D 7E 2B       >                dw      Dict_Ptr + 2        // xt
 784+ E77F             >Heap_Ptr        defl    $ - $E000           // save current HP
 784+ E77F             >
 784+ E77F             >Current_HP      defl  $ - $E000             // used to set HP once!
 784+ E77F             >
 784+ E77F             >//              ______________________________________________________________________
 784+ E77F             >//              Dictionary part
 784+ E77F             >
 784+ E77F             >                org     Dict_Ptr
 784+ 2B7C             >
 784+ 2B7C 7D 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 784+ 2B7E             >
 784+ 2B7E             >DECIMAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 784+ 2B7E CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 784+ 2B81             >
 784+ 2B81             >
 784+ 2B81             >                endif           ; ok        // for other definitions it "points" the correct handler
 784+ 2B81             >                // Use of "; ok" to suppress "warning[fwdref]"
 784+ 2B81             >
 784+ 2B81             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 785+ 2B81 3D 20 0A 00                  dw      LIT, 10                 // 10
 786+ 2B85 15 28 56 26                  dw      BASE, STORE             // base !
 787+ 2B89 02 25                        dw      EXIT                    // ;
 788+ 2B8B
 789+ 2B8B              //  ______________________________________________________________________
 790+ 2B8B              //
 791+ 2B8B              // (;code)       --
 792+ 2B8B              // patch to CFA to call/jump to the "following code"
 793+ 2B8B                              Colon_Def C_SEMICOLON_CODE, "(;CODE)", is_normal
 793+ 2B8B             >                New_Def  C_SEMICOLON_CODE, "(;CODE)", Enter_Ptr, is_normal ; ok
 793+ 2B8B             >
 793+ 2B8B             >Dict_Ptr        defl    $
 793+ 2B8B             >
 793+ 2B8B             >//              ______________________________________________________________________
 793+ 2B8B             >//              Heap part
 793+ 2B8B             >
 793+ 2B8B             >
 793+ 2B8B             >                org     (Heap_Ptr & $1FFF) + $E000
 793+ E77F             >
 793+ E77F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 793+ E77F             >Latest_Definition defl  Heap_Ptr
 793+ E77F             >
 793+ E77F             >                // dummy db directives used to calculate length of namec
 793+ E77F 28 3B 43 4F >                db      "(;CODE)"
 793+ E783 44 45 29    >
 793+ E786             >len_NFA         defl    $ - temp_NFA
 793+ E786             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 793+ E77F             >
 793+ E77F 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 793+ E780 28 3B 43 4F >                db      "(;CODE)"               // name string in 7-bit ascii, but
 793+ E784 44 45 29    >
 793+ E787             >                org     $-1                 // alter last byte of Name just above to set
 793+ E786 A9          >                db      {b $} | END_BIT     // msb as name end
 793+ E787             >
 793+ E787 73 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 793+ E789             >Prev_Ptr        defl    Heap_Ptr
 793+ E789             >
 793+ E789             >mirror_Ptr      defl    $
 793+ E789             >
 793+ E789 8D 2B       >                dw      Dict_Ptr + 2        // xt
 793+ E78B             >Heap_Ptr        defl    $ - $E000           // save current HP
 793+ E78B             >
 793+ E78B             >Current_HP      defl  $ - $E000             // used to set HP once!
 793+ E78B             >
 793+ E78B             >//              ______________________________________________________________________
 793+ E78B             >//              Dictionary part
 793+ E78B             >
 793+ E78B             >                org     Dict_Ptr
 793+ 2B8B             >
 793+ 2B8B 89 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 793+ 2B8D             >
 793+ 2B8D             >C_SEMICOLON_CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 793+ 2B8D CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 793+ 2B90             >
 793+ 2B90             >
 793+ 2B90             >                endif           ; ok        // for other definitions it "points" the correct handler
 793+ 2B90             >                // Use of "; ok" to suppress "warning[fwdref]"
 793+ 2B90             >
 793+ 2B90             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 794+ 2B90 17 25                        dw      R_TO                    // r>       ( Return Stack has IP to caller's next cell )
 795+ 2B92 15 2A                        dw      LATEST                  // latest   ( Word being defined in this moment )
 796+ 2B94 73 2A 4E 2A                  dw      PFA, CFA                // pfa cfa  ( cfa of latest word )
 797+ 2B98
 798+ 2B98 3D 20 CD 00                  dw      LIT, $CD                // $CD      ( At Latest CFA put "call" op-code )
 799+ 2B9C B7 25 6A 26                  dw      OVER, CSTORE            // over c!  ( why can't use comma? because CFA was already ALLOTted by create? )
 800+ 2BA0 6E 25                        dw      ONE_PLUS                // 1+       ( At Latest CFA+1 put address for call. )
 801+ 2BA2
 802+ 2BA2 56 26                        dw      STORE                   // !
 803+ 2BA4 02 25                        dw      EXIT                    // ;
 804+ 2BA6
 805+ 2BA6              //  ______________________________________________________________________
 806+ 2BA6              //
 807+ 2BA6              // ;code        --
 808+ 2BA6                              Colon_Def SEMICOLON_CODE, ";CODE", is_immediate
 808+ 2BA6             >                New_Def  SEMICOLON_CODE, ";CODE", Enter_Ptr, is_immediate ; ok
 808+ 2BA6             >
 808+ 2BA6             >Dict_Ptr        defl    $
 808+ 2BA6             >
 808+ 2BA6             >//              ______________________________________________________________________
 808+ 2BA6             >//              Heap part
 808+ 2BA6             >
 808+ 2BA6             >
 808+ 2BA6             >                org     (Heap_Ptr & $1FFF) + $E000
 808+ E78B             >
 808+ E78B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 808+ E78B             >Latest_Definition defl  Heap_Ptr
 808+ E78B             >
 808+ E78B             >                // dummy db directives used to calculate length of namec
 808+ E78B 3B 43 4F 44 >                db      ";CODE"
 808+ E78F 45          >
 808+ E790             >len_NFA         defl    $ - temp_NFA
 808+ E790             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 808+ E78B             >
 808+ E78B C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 808+ E78C 3B 43 4F 44 >                db      ";CODE"               // name string in 7-bit ascii, but
 808+ E790 45          >
 808+ E791             >                org     $-1                 // alter last byte of Name just above to set
 808+ E790 C5          >                db      {b $} | END_BIT     // msb as name end
 808+ E791             >
 808+ E791 7F 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 808+ E793             >Prev_Ptr        defl    Heap_Ptr
 808+ E793             >
 808+ E793             >mirror_Ptr      defl    $
 808+ E793             >
 808+ E793 A8 2B       >                dw      Dict_Ptr + 2        // xt
 808+ E795             >Heap_Ptr        defl    $ - $E000           // save current HP
 808+ E795             >
 808+ E795             >Current_HP      defl  $ - $E000             // used to set HP once!
 808+ E795             >
 808+ E795             >//              ______________________________________________________________________
 808+ E795             >//              Dictionary part
 808+ E795             >
 808+ E795             >                org     Dict_Ptr
 808+ 2BA6             >
 808+ 2BA6 93 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 808+ 2BA8             >
 808+ 2BA8             >SEMICOLON_CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 808+ 2BA8 CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 808+ 2BAB             >
 808+ 2BAB             >
 808+ 2BAB             >                endif           ; ok        // for other definitions it "points" the correct handler
 808+ 2BAB             >                // Use of "; ok" to suppress "warning[fwdref]"
 808+ 2BAB             >
 808+ 2BAB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 809+ 2BAB ED 2A                        dw      QCSP                    // ?csp
 810+ 2BAD 15 2B                        dw      COMPILE                 // compile
 811+ 2BAF 8D 2B                        dw      C_SEMICOLON_CODE        // (;code)
 812+ 2BB1 35 2B                        dw      SQUARED_OPEN            // [
 813+ 2BB3 0B 27                        dw      NOOP                    // noop () can be patched later to ASSEMBLER... )
 814+ 2BB5 02 25                        dw      EXIT                    // ; immediate
 815+ 2BB7
 816+ 2BB7              //  ______________________________________________________________________
 817+ 2BB7              //
 818+ 2BB7              // <builds      --
 819+ 2BB7                              Colon_Def CBUILDS, "<BUILDS", is_normal
 819+ 2BB7             >                New_Def  CBUILDS, "<BUILDS", Enter_Ptr, is_normal ; ok
 819+ 2BB7             >
 819+ 2BB7             >Dict_Ptr        defl    $
 819+ 2BB7             >
 819+ 2BB7             >//              ______________________________________________________________________
 819+ 2BB7             >//              Heap part
 819+ 2BB7             >
 819+ 2BB7             >
 819+ 2BB7             >                org     (Heap_Ptr & $1FFF) + $E000
 819+ E795             >
 819+ E795             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 819+ E795             >Latest_Definition defl  Heap_Ptr
 819+ E795             >
 819+ E795             >                // dummy db directives used to calculate length of namec
 819+ E795 3C 42 55 49 >                db      "<BUILDS"
 819+ E799 4C 44 53    >
 819+ E79C             >len_NFA         defl    $ - temp_NFA
 819+ E79C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 819+ E795             >
 819+ E795 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 819+ E796 3C 42 55 49 >                db      "<BUILDS"               // name string in 7-bit ascii, but
 819+ E79A 4C 44 53    >
 819+ E79D             >                org     $-1                 // alter last byte of Name just above to set
 819+ E79C D3          >                db      {b $} | END_BIT     // msb as name end
 819+ E79D             >
 819+ E79D 8B 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 819+ E79F             >Prev_Ptr        defl    Heap_Ptr
 819+ E79F             >
 819+ E79F             >mirror_Ptr      defl    $
 819+ E79F             >
 819+ E79F B9 2B       >                dw      Dict_Ptr + 2        // xt
 819+ E7A1             >Heap_Ptr        defl    $ - $E000           // save current HP
 819+ E7A1             >
 819+ E7A1             >Current_HP      defl  $ - $E000             // used to set HP once!
 819+ E7A1             >
 819+ E7A1             >//              ______________________________________________________________________
 819+ E7A1             >//              Dictionary part
 819+ E7A1             >
 819+ E7A1             >                org     Dict_Ptr
 819+ 2BB7             >
 819+ 2BB7 9F 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 819+ 2BB9             >
 819+ 2BB9             >CBUILDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 819+ 2BB9 CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 819+ 2BBC             >
 819+ 2BBC             >
 819+ 2BBC             >                endif           ; ok        // for other definitions it "points" the correct handler
 819+ 2BBC             >                // Use of "; ok" to suppress "warning[fwdref]"
 819+ 2BBC             >
 819+ 2BBC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 820+ 2BBC 44 27                        dw      ZERO                    // 0
 821+ 2BBE 0F 27                        dw      CONSTANT                // constant
 822+ 2BC0 02 25                        dw      EXIT                    // ;
 823+ 2BC2
 824+ 2BC2              //  ______________________________________________________________________
 825+ 2BC2              //
 826+ 2BC2              // recurse      --
 827+ 2BC2              //              Colon_Def RECURSE, "RECURSE", is_immediate
 828+ 2BC2              //              dw      QCOMP                   // ?comp
 829+ 2BC2              //              dw      LATEST                  // latest
 830+ 2BC2              //              dw      PFA, CFA                // pfa cfa
 831+ 2BC2              //              dw      COMMA                   // ,
 832+ 2BC2              //              dw      EXIT                    // ; immediate
 833+ 2BC2
 834+ 2BC2              //  ______________________________________________________________________
 835+ 2BC2              //
 836+ 2BC2              // does>     --
 837+ 2BC2                              Colon_Def DOES_TO, "DOES>", is_normal
 837+ 2BC2             >                New_Def  DOES_TO, "DOES>", Enter_Ptr, is_normal ; ok
 837+ 2BC2             >
 837+ 2BC2             >Dict_Ptr        defl    $
 837+ 2BC2             >
 837+ 2BC2             >//              ______________________________________________________________________
 837+ 2BC2             >//              Heap part
 837+ 2BC2             >
 837+ 2BC2             >
 837+ 2BC2             >                org     (Heap_Ptr & $1FFF) + $E000
 837+ E7A1             >
 837+ E7A1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 837+ E7A1             >Latest_Definition defl  Heap_Ptr
 837+ E7A1             >
 837+ E7A1             >                // dummy db directives used to calculate length of namec
 837+ E7A1 44 4F 45 53 >                db      "DOES>"
 837+ E7A5 3E          >
 837+ E7A6             >len_NFA         defl    $ - temp_NFA
 837+ E7A6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 837+ E7A1             >
 837+ E7A1 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 837+ E7A2 44 4F 45 53 >                db      "DOES>"               // name string in 7-bit ascii, but
 837+ E7A6 3E          >
 837+ E7A7             >                org     $-1                 // alter last byte of Name just above to set
 837+ E7A6 BE          >                db      {b $} | END_BIT     // msb as name end
 837+ E7A7             >
 837+ E7A7 95 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 837+ E7A9             >Prev_Ptr        defl    Heap_Ptr
 837+ E7A9             >
 837+ E7A9             >mirror_Ptr      defl    $
 837+ E7A9             >
 837+ E7A9 C4 2B       >                dw      Dict_Ptr + 2        // xt
 837+ E7AB             >Heap_Ptr        defl    $ - $E000           // save current HP
 837+ E7AB             >
 837+ E7AB             >Current_HP      defl  $ - $E000             // used to set HP once!
 837+ E7AB             >
 837+ E7AB             >//              ______________________________________________________________________
 837+ E7AB             >//              Dictionary part
 837+ E7AB             >
 837+ E7AB             >                org     Dict_Ptr
 837+ 2BC2             >
 837+ 2BC2 A9 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 837+ 2BC4             >
 837+ 2BC4             >DOES_TO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 837+ 2BC4 CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 837+ 2BC7             >
 837+ 2BC7             >
 837+ 2BC7             >                endif           ; ok        // for other definitions it "points" the correct handler
 837+ 2BC7             >                // Use of "; ok" to suppress "warning[fwdref]"
 837+ 2BC7             >
 837+ 2BC7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 838+ 2BC7 17 25                        dw      R_TO                    // r>
 839+ 2BC9 15 2A                        dw      LATEST                  // latest
 840+ 2BCB 73 2A                        dw      PFA                     // pfa
 841+ 2BCD 56 26                        dw      STORE                   // !        \ old use of <BUILDS
 842+ 2BCF              //              dw      COMMA                   // ,        \ new use of CREATE
 843+ 2BCF 8D 2B                        dw      C_SEMICOLON_CODE        // ;code
 844+ 2BD1              Does_Ptr:
 845+ 2BD1                              // via call coded in CFA
 846+ 2BD1 EB                           ex      de, hl //**
 847+ 2BD2                              // *** ldhlrp
 848+ 2BD2 2B                           dec     hl                  // push on Return-Stack current Instruction-Pointer
 849+ 2BD3 70                           ld      (hl), b
 850+ 2BD4 2B                           dec     hl
 851+ 2BD5 71                           ld      (hl), c
 852+ 2BD6                              // *** ldrphl
 853+ 2BD6 EB                           ex      de, hl //**
 854+ 2BD7 E1                           pop     hl                  // CFA has a call to this, so PFA -> IP
 855+ 2BD8
 856+ 2BD8 4E                           ld      c, (hl)
 857+ 2BD9 23                           inc     hl
 858+ 2BDA 46                           ld      b, (hl)
 859+ 2BDB 23                           inc     hl
 860+ 2BDC
 861+ 2BDC                              psh1
 861+ 2BDC E5          >                push    hl
 861+ 2BDD DD E9       >                jp      (ix)
 862+ 2BDF                              // SMUDGE !
 863+ 2BDF
 864+ 2BDF              //  ______________________________________________________________________
 865+ 2BDF              //
 866+ 2BDF              // count        a -- a2 n
 867+ 2BDF              // expects a counted string at address a, returns string address and counter
 868+ 2BDF                              New_Def COUNT, "COUNT", is_code, is_normal
 868+ 2BDF             >
 868+ 2BDF             >Dict_Ptr        defl    $
 868+ 2BDF             >
 868+ 2BDF             >//              ______________________________________________________________________
 868+ 2BDF             >//              Heap part
 868+ 2BDF             >
 868+ 2BDF             >
 868+ 2BDF             >                org     (Heap_Ptr & $1FFF) + $E000
 868+ E7AB             >
 868+ E7AB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 868+ E7AB             >Latest_Definition defl  Heap_Ptr
 868+ E7AB             >
 868+ E7AB             >                // dummy db directives used to calculate length of namec
 868+ E7AB 43 4F 55 4E >                db      "COUNT"
 868+ E7AF 54          >
 868+ E7B0             >len_NFA         defl    $ - temp_NFA
 868+ E7B0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 868+ E7AB             >
 868+ E7AB 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 868+ E7AC 43 4F 55 4E >                db      "COUNT"               // name string in 7-bit ascii, but
 868+ E7B0 54          >
 868+ E7B1             >                org     $-1                 // alter last byte of Name just above to set
 868+ E7B0 D4          >                db      {b $} | END_BIT     // msb as name end
 868+ E7B1             >
 868+ E7B1 A1 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 868+ E7B3             >Prev_Ptr        defl    Heap_Ptr
 868+ E7B3             >
 868+ E7B3             >mirror_Ptr      defl    $
 868+ E7B3             >
 868+ E7B3 E1 2B       >                dw      Dict_Ptr + 2        // xt
 868+ E7B5             >Heap_Ptr        defl    $ - $E000           // save current HP
 868+ E7B5             >
 868+ E7B5             >Current_HP      defl  $ - $E000             // used to set HP once!
 868+ E7B5             >
 868+ E7B5             >//              ______________________________________________________________________
 868+ E7B5             >//              Dictionary part
 868+ E7B5             >
 868+ E7B5             >                org     Dict_Ptr
 868+ 2BDF             >
 868+ 2BDF B3 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 868+ 2BE1             >
 868+ 2BE1             >COUNT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 868+ 2BE1 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 868+ 2BE1 ~           >
 868+ 2BE1 ~           >
 868+ 2BE1             >                endif           ; ok        // for other definitions it "points" the correct handler
 868+ 2BE1             >                // Use of "; ok" to suppress "warning[fwdref]"
 868+ 2BE1             >
 868+ 2BE1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 869+ 2BE1 D9                           exx
 870+ 2BE2 E1                           pop     hl
 871+ 2BE3 5E                           ld      e, (hl)
 872+ 2BE4 16 00                        ld      d, 0
 873+ 2BE6 23                           inc     hl
 874+ 2BE7              Count_Here:
 875+ 2BE7 E5                           push    hl
 876+ 2BE8 D5                           push    de
 877+ 2BE9 D9                           exx
 878+ 2BEA                              next
 878+ 2BEA DD E9       >                jp      (ix)
 879+ 2BEC              //                pop     hl
 880+ 2BEC              //                ld      a, (hl)
 881+ 2BEC              //                inc     hl
 882+ 2BEC              //                push    hl
 883+ 2BEC              //                ld      h, 0
 884+ 2BEC              //                ld      l, a
 885+ 2BEC              //                push    hl
 886+ 2BEC              //                next
 887+ 2BEC
 888+ 2BEC              //  ______________________________________________________________________
 889+ 2BEC              //
 890+ 2BEC              // bounds       a n -- a+n n
 891+ 2BEC              // given an address and a length ( a n ) calculate the bound addresses
 892+ 2BEC              // suitable for DO-LOOP
 893+ 2BEC                              New_Def BOUNDS, "BOUNDS", is_code, is_normal
 893+ 2BEC             >
 893+ 2BEC             >Dict_Ptr        defl    $
 893+ 2BEC             >
 893+ 2BEC             >//              ______________________________________________________________________
 893+ 2BEC             >//              Heap part
 893+ 2BEC             >
 893+ 2BEC             >
 893+ 2BEC             >                org     (Heap_Ptr & $1FFF) + $E000
 893+ E7B5             >
 893+ E7B5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 893+ E7B5             >Latest_Definition defl  Heap_Ptr
 893+ E7B5             >
 893+ E7B5             >                // dummy db directives used to calculate length of namec
 893+ E7B5 42 4F 55 4E >                db      "BOUNDS"
 893+ E7B9 44 53       >
 893+ E7BB             >len_NFA         defl    $ - temp_NFA
 893+ E7BB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 893+ E7B5             >
 893+ E7B5 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 893+ E7B6 42 4F 55 4E >                db      "BOUNDS"               // name string in 7-bit ascii, but
 893+ E7BA 44 53       >
 893+ E7BC             >                org     $-1                 // alter last byte of Name just above to set
 893+ E7BB D3          >                db      {b $} | END_BIT     // msb as name end
 893+ E7BC             >
 893+ E7BC AB 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 893+ E7BE             >Prev_Ptr        defl    Heap_Ptr
 893+ E7BE             >
 893+ E7BE             >mirror_Ptr      defl    $
 893+ E7BE             >
 893+ E7BE EE 2B       >                dw      Dict_Ptr + 2        // xt
 893+ E7C0             >Heap_Ptr        defl    $ - $E000           // save current HP
 893+ E7C0             >
 893+ E7C0             >Current_HP      defl  $ - $E000             // used to set HP once!
 893+ E7C0             >
 893+ E7C0             >//              ______________________________________________________________________
 893+ E7C0             >//              Dictionary part
 893+ E7C0             >
 893+ E7C0             >                org     Dict_Ptr
 893+ 2BEC             >
 893+ 2BEC BE 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 893+ 2BEE             >
 893+ 2BEE             >BOUNDS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 893+ 2BEE ~           >                call    runcode ; ok        // for primitive definitions  actual code
 893+ 2BEE ~           >
 893+ 2BEE ~           >
 893+ 2BEE             >                endif           ; ok        // for other definitions it "points" the correct handler
 893+ 2BEE             >                // Use of "; ok" to suppress "warning[fwdref]"
 893+ 2BEE             >
 893+ 2BEE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 894+ 2BEE D9                           exx
 895+ 2BEF E1                           pop     hl
 896+ 2BF0 D1                           pop     de
 897+ 2BF1 19                           add     hl, de
 898+ 2BF2 18 F3                        jr      Count_Here
 899+ 2BF4                              // push    hl
 900+ 2BF4                              // push    de
 901+ 2BF4                              // exx
 902+ 2BF4                              // next
 903+ 2BF4
 904+ 2BF4              //  ______________________________________________________________________
 905+ 2BF4              //
 906+ 2BF4              // leave        --
 907+ 2BF4              // Compile (leave) to leave current LOOP and jump just after it
 908+ 2BF4                              Colon_Def LEAVE, "LEAVE", is_immediate
 908+ 2BF4             >                New_Def  LEAVE, "LEAVE", Enter_Ptr, is_immediate ; ok
 908+ 2BF4             >
 908+ 2BF4             >Dict_Ptr        defl    $
 908+ 2BF4             >
 908+ 2BF4             >//              ______________________________________________________________________
 908+ 2BF4             >//              Heap part
 908+ 2BF4             >
 908+ 2BF4             >
 908+ 2BF4             >                org     (Heap_Ptr & $1FFF) + $E000
 908+ E7C0             >
 908+ E7C0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 908+ E7C0             >Latest_Definition defl  Heap_Ptr
 908+ E7C0             >
 908+ E7C0             >                // dummy db directives used to calculate length of namec
 908+ E7C0 4C 45 41 56 >                db      "LEAVE"
 908+ E7C4 45          >
 908+ E7C5             >len_NFA         defl    $ - temp_NFA
 908+ E7C5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 908+ E7C0             >
 908+ E7C0 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 908+ E7C1 4C 45 41 56 >                db      "LEAVE"               // name string in 7-bit ascii, but
 908+ E7C5 45          >
 908+ E7C6             >                org     $-1                 // alter last byte of Name just above to set
 908+ E7C5 C5          >                db      {b $} | END_BIT     // msb as name end
 908+ E7C6             >
 908+ E7C6 B5 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 908+ E7C8             >Prev_Ptr        defl    Heap_Ptr
 908+ E7C8             >
 908+ E7C8             >mirror_Ptr      defl    $
 908+ E7C8             >
 908+ E7C8 F6 2B       >                dw      Dict_Ptr + 2        // xt
 908+ E7CA             >Heap_Ptr        defl    $ - $E000           // save current HP
 908+ E7CA             >
 908+ E7CA             >Current_HP      defl  $ - $E000             // used to set HP once!
 908+ E7CA             >
 908+ E7CA             >//              ______________________________________________________________________
 908+ E7CA             >//              Dictionary part
 908+ E7CA             >
 908+ E7CA             >                org     Dict_Ptr
 908+ 2BF4             >
 908+ 2BF4 C8 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 908+ 2BF6             >
 908+ 2BF6             >LEAVE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 908+ 2BF6 CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 908+ 2BF9             >
 908+ 2BF9             >
 908+ 2BF9             >                endif           ; ok        // for other definitions it "points" the correct handler
 908+ 2BF9             >                // Use of "; ok" to suppress "warning[fwdref]"
 908+ 2BF9             >
 908+ 2BF9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 909+ 2BF9 15 2B 9A 20                  dw      COMPILE, C_LEAVE       // compile (leave)     \ unloop and branch
 910+ 2BFD 69 28 0C 25                  dw      HERE, TO_R, ZERO, COMMA // here >r 0 ,
 910+ 2C01 44 27 7F 28
 911+ 2C05 44 27 44 27                  dw      ZERO, ZERO
 912+ 2C09 E9 24 DB 25                  dw      SPFETCH, DUP
 913+ 2C0D 84 25 84 25                  dw      CELL_PLUS, CELL_PLUS
 914+ 2C11 CB 25                        dw      TUCK
 915+ 2C13 27 28 4C 26                  dw      CSP, FETCH
 916+ 2C17 D4 25 A8 28                  dw      SWAP, SUBTRACT
 917+ 2C1B 43 24                        dw      CMOVE
 918+ 2C1D 27 28 4C 26                  dw      CSP, FETCH, CELL_MINUS
 918+ 2C21 89 25
 919+ 2C23 17 25 B7 25                  dw      R_TO, OVER, STORE
 919+ 2C27 56 26
 920+ 2C29 89 25 44 27                  dw      CELL_MINUS, ZERO
 921+ 2C2D D4 25 56 26                  dw      SWAP, STORE
 922+ 2C31 02 25                        dw      EXIT                    // ;
 923+ 2C33
 924+ 2C33              //  ______________________________________________________________________
 925+ 2C33              //
 926+ 2C33              // type         a n --
 927+ 2C33              // Sends to current output channel n characters starting at address a.
 928+ 2C33                              Colon_Def TYPE, "TYPE", is_normal
 928+ 2C33             >                New_Def  TYPE, "TYPE", Enter_Ptr, is_normal ; ok
 928+ 2C33             >
 928+ 2C33             >Dict_Ptr        defl    $
 928+ 2C33             >
 928+ 2C33             >//              ______________________________________________________________________
 928+ 2C33             >//              Heap part
 928+ 2C33             >
 928+ 2C33             >
 928+ 2C33             >                org     (Heap_Ptr & $1FFF) + $E000
 928+ E7CA             >
 928+ E7CA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 928+ E7CA             >Latest_Definition defl  Heap_Ptr
 928+ E7CA             >
 928+ E7CA             >                // dummy db directives used to calculate length of namec
 928+ E7CA 54 59 50 45 >                db      "TYPE"
 928+ E7CE             >len_NFA         defl    $ - temp_NFA
 928+ E7CE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 928+ E7CA             >
 928+ E7CA 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 928+ E7CB 54 59 50 45 >                db      "TYPE"               // name string in 7-bit ascii, but
 928+ E7CF             >                org     $-1                 // alter last byte of Name just above to set
 928+ E7CE C5          >                db      {b $} | END_BIT     // msb as name end
 928+ E7CF             >
 928+ E7CF C0 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 928+ E7D1             >Prev_Ptr        defl    Heap_Ptr
 928+ E7D1             >
 928+ E7D1             >mirror_Ptr      defl    $
 928+ E7D1             >
 928+ E7D1 35 2C       >                dw      Dict_Ptr + 2        // xt
 928+ E7D3             >Heap_Ptr        defl    $ - $E000           // save current HP
 928+ E7D3             >
 928+ E7D3             >Current_HP      defl  $ - $E000             // used to set HP once!
 928+ E7D3             >
 928+ E7D3             >//              ______________________________________________________________________
 928+ E7D3             >//              Dictionary part
 928+ E7D3             >
 928+ E7D3             >                org     Dict_Ptr
 928+ 2C33             >
 928+ 2C33 D1 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 928+ 2C35             >
 928+ 2C35             >TYPE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 928+ 2C35 CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 928+ 2C38             >
 928+ 2C38             >
 928+ 2C38             >                endif           ; ok        // for other definitions it "points" the correct handler
 928+ 2C38             >                // Use of "; ok" to suppress "warning[fwdref]"
 928+ 2C38             >
 928+ 2C38             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 929+ 2C38 EE 2B                        dw      BOUNDS                  // bounds
 930+ 2C3A A6 20                        dw      C_Q_DO                  // ?do
 931+ 2C3C 0C 00                        dw      Type_Skip - $
 932+ 2C3E              Type_Loop:
 933+ 2C3E D4 20 61 26                  dw          I, CFETCH           //      i c@
 934+ 2C42 23 29                        dw          EMIT                //      emit
 935+ 2C44 7A 20                        dw      C_LOOP                  // loop
 936+ 2C46 F8 FF                        dw      Type_Loop - $
 937+ 2C48              Type_Skip:
 938+ 2C48 02 25                        dw      EXIT                    // ;
 939+ 2C4A
 940+ 2C4A              //  ______________________________________________________________________
 941+ 2C4A              //
 942+ 2C4A              // -trailing    a n1 -- a n2
 943+ 2C4A              // Assumes that an n1 bytes-long string is stored at address a
 944+ 2C4A              // and the string contains a space delimited word,
 945+ 2C4A              // Finds n2 as the position of the first character after the word.
 946+ 2C4A                              Colon_Def LTRAILING, "-TRAILING", is_normal
 946+ 2C4A             >                New_Def  LTRAILING, "-TRAILING", Enter_Ptr, is_normal ; ok
 946+ 2C4A             >
 946+ 2C4A             >Dict_Ptr        defl    $
 946+ 2C4A             >
 946+ 2C4A             >//              ______________________________________________________________________
 946+ 2C4A             >//              Heap part
 946+ 2C4A             >
 946+ 2C4A             >
 946+ 2C4A             >                org     (Heap_Ptr & $1FFF) + $E000
 946+ E7D3             >
 946+ E7D3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 946+ E7D3             >Latest_Definition defl  Heap_Ptr
 946+ E7D3             >
 946+ E7D3             >                // dummy db directives used to calculate length of namec
 946+ E7D3 2D 54 52 41 >                db      "-TRAILING"
 946+ E7D7 49 4C 49 4E >
 946+ E7DB 47          >
 946+ E7DC             >len_NFA         defl    $ - temp_NFA
 946+ E7DC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 946+ E7D3             >
 946+ E7D3 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 946+ E7D4 2D 54 52 41 >                db      "-TRAILING"               // name string in 7-bit ascii, but
 946+ E7D8 49 4C 49 4E >
 946+ E7DC 47          >
 946+ E7DD             >                org     $-1                 // alter last byte of Name just above to set
 946+ E7DC C7          >                db      {b $} | END_BIT     // msb as name end
 946+ E7DD             >
 946+ E7DD CA 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 946+ E7DF             >Prev_Ptr        defl    Heap_Ptr
 946+ E7DF             >
 946+ E7DF             >mirror_Ptr      defl    $
 946+ E7DF             >
 946+ E7DF 4C 2C       >                dw      Dict_Ptr + 2        // xt
 946+ E7E1             >Heap_Ptr        defl    $ - $E000           // save current HP
 946+ E7E1             >
 946+ E7E1             >Current_HP      defl  $ - $E000             // used to set HP once!
 946+ E7E1             >
 946+ E7E1             >//              ______________________________________________________________________
 946+ E7E1             >//              Dictionary part
 946+ E7E1             >
 946+ E7E1             >                org     Dict_Ptr
 946+ 2C4A             >
 946+ 2C4A DF 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 946+ 2C4C             >
 946+ 2C4C             >LTRAILING:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 946+ 2C4C CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 946+ 2C4F             >
 946+ 2C4F             >
 946+ 2C4F             >                endif           ; ok        // for other definitions it "points" the correct handler
 946+ 2C4F             >                // Use of "; ok" to suppress "warning[fwdref]"
 946+ 2C4F             >
 946+ 2C4F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 947+ 2C4F DB 25 44 27                  dw      DUP, ZERO               // dup 0
 948+ 2C53                                                              // do
 949+ 2C53 A6 20                        dw      C_Q_DO
 950+ 2C55 20 00                        dw      LTrailing_Leave - $
 951+ 2C57              LTrailing_Loop:
 952+ 2C57 2A 26 55 25                  dw          TWO_DUP, PLUS       //      2dup +
 953+ 2C5B 75 25                        dw          ONE_SUBTRACT        //      1-
 954+ 2C5D 61 26                        dw          CFETCH              //      c@
 955+ 2C5F 67 27 A8 28                  dw          BL, SUBTRACT        //      bl -
 956+ 2C63                                                              //      if
 957+ 2C63 8F 20                        dw          ZBRANCH
 958+ 2C65 0A 00                        dw          LTrailing_Else - $
 959+ 2C67 9A 20                        dw              C_LEAVE         //          leave
 960+ 2C69 0C 00                        dw              LTrailing_Leave - $
 961+ 2C6B 82 20                        dw          BRANCH              //      else
 962+ 2C6D 04 00                        dw          LTrailing_Endif - $
 963+ 2C6F              LTrailing_Else:
 964+ 2C6F 75 25                        dw              ONE_SUBTRACT    //          1-
 965+ 2C71              LTrailing_Endif:                                //      endif
 966+ 2C71                                                              // loop
 967+ 2C71 7A 20                        dw      C_LOOP
 968+ 2C73 E4 FF                        dw      LTrailing_Loop - $
 969+ 2C75              LTrailing_Leave:
 970+ 2C75 02 25                        dw      EXIT                    // ;
 971+ 2C77
 972+ 2C77              //  ______________________________________________________________________
 973+ 2C77              //
 974+ 2C77              // accept       a n1 -- n2
 975+ 2C77              // Accepts at most n1 characters from terminal and stores them at address a
 976+ 2C77              // CR stops input. A 'nul' is added as trailer.
 977+ 2C77              // n2 is the string length. n2 is kept in span user variable also.
 978+ 2C77                              Colon_Def ACCEPT, "ACCEPT", is_normal
 978+ 2C77             >                New_Def  ACCEPT, "ACCEPT", Enter_Ptr, is_normal ; ok
 978+ 2C77             >
 978+ 2C77             >Dict_Ptr        defl    $
 978+ 2C77             >
 978+ 2C77             >//              ______________________________________________________________________
 978+ 2C77             >//              Heap part
 978+ 2C77             >
 978+ 2C77             >
 978+ 2C77             >                org     (Heap_Ptr & $1FFF) + $E000
 978+ E7E1             >
 978+ E7E1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 978+ E7E1             >Latest_Definition defl  Heap_Ptr
 978+ E7E1             >
 978+ E7E1             >                // dummy db directives used to calculate length of namec
 978+ E7E1 41 43 43 45 >                db      "ACCEPT"
 978+ E7E5 50 54       >
 978+ E7E7             >len_NFA         defl    $ - temp_NFA
 978+ E7E7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 978+ E7E1             >
 978+ E7E1 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 978+ E7E2 41 43 43 45 >                db      "ACCEPT"               // name string in 7-bit ascii, but
 978+ E7E6 50 54       >
 978+ E7E8             >                org     $-1                 // alter last byte of Name just above to set
 978+ E7E7 D4          >                db      {b $} | END_BIT     // msb as name end
 978+ E7E8             >
 978+ E7E8 D3 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 978+ E7EA             >Prev_Ptr        defl    Heap_Ptr
 978+ E7EA             >
 978+ E7EA             >mirror_Ptr      defl    $
 978+ E7EA             >
 978+ E7EA 79 2C       >                dw      Dict_Ptr + 2        // xt
 978+ E7EC             >Heap_Ptr        defl    $ - $E000           // save current HP
 978+ E7EC             >
 978+ E7EC             >Current_HP      defl  $ - $E000             // used to set HP once!
 978+ E7EC             >
 978+ E7EC             >//              ______________________________________________________________________
 978+ E7EC             >//              Dictionary part
 978+ E7EC             >
 978+ E7EC             >                org     Dict_Ptr
 978+ 2C77             >
 978+ 2C77 EA 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 978+ 2C79             >
 978+ 2C79             >ACCEPT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 978+ 2C79 CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 978+ 2C7C             >
 978+ 2C7C             >
 978+ 2C7C             >                endif           ; ok        // for other definitions it "points" the correct handler
 978+ 2C7C             >                // Use of "; ok" to suppress "warning[fwdref]"
 978+ 2C7C             >
 978+ 2C7C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 979+ 2C7C B7 25 55 25                  dw      OVER, PLUS, OVER        //                      ( a  n1+a  a )
 979+ 2C80 B7 25
 980+ 2C82 44 27 ED 25                  dw      ZERO, DASH_ROT          //                      ( a  0     a+n1  a )
 981+ 2C86                                                              // do
 982+ 2C86 A6 20                        dw      C_Q_DO
 983+ 2C88 8C 00                        dw      Accept_Leave - $
 984+ 2C8A              Accept_Loop:
 985+ 2C8A DE 22                        dw          CUR
 986+ 2C8C C0 25 26 23                  dw          DROP, KEY           //      drop key        ( a  c )
 987+ 2C90 DB 25                        dw          DUP                 //      dup             ( a  c  c )
 988+ 2C92 3D 20 0E 00                  dw          LIT, $0E            //      0E
 989+ 2C96 8A 27                        dw          PLUS_ORIGIN         //      +origin
 990+ 2C98 4C 26                        dw          FETCH               //      @               ( a  c  c  del )
 991+ 2C9A B4 28                        dw          EQUALS              //      =               ( a  c  c==del )
 992+ 2C9C                                                              //      if
 993+ 2C9C 8F 20                        dw          ZBRANCH
 994+ 2C9E 2C 00                        dw          Accept_Else_0 - $
 995+ 2CA0 C0 25                        dw              DROP            //          drop        ( a  )
 996+ 2CA2 DB 25 D4 20                  dw              DUP, I, EQUALS  //          dup i =     ( a  a==i )
 996+ 2CA6 B4 28
 997+ 2CA8 4B 27 C2 24                  dw              ONE, AND_OP     //          1 and
 998+ 2CAC DB 25                        dw              DUP             //          dup         ( a  a==i  a==i )
 999+ 2CAE 17 25                        dw              R_TO            //          r> 2 - + r>
1000+ 2CB0 91 25 55 25                  dw              TWO_MINUS, PLUS //      ( decrement index by 1 or 2 )
1001+ 2CB4 0C 25                        dw              TO_R            //
1002+ 2CB6                                                              //          if
1003+ 2CB6 8F 20                        dw              ZBRANCH
1004+ 2CB8 0A 00                        dw              Accept_Else_1 - $
1005+ 2CBA 3D 20 07 00                  dw                  LIT, 7      //              7       ( a  7 )
1006+ 2CBE                                                              //          else
1007+ 2CBE 82 20                        dw              BRANCH
1008+ 2CC0 06 00                        dw              Accept_Endif_1 - $
1009+ 2CC2              Accept_Else_1:
1010+ 2CC2 3D 20 08 00                  dw                  LIT, 8      //              8       ( a  8 )
1011+ 2CC6              Accept_Endif_1:                                 //          endif
1012+ 2CC6 82 20                        dw          BRANCH
1013+ 2CC8 2E 00                        dw          Accept_Endif_0 - $
1014+ 2CCA              Accept_Else_0:                                  //      else
1015+ 2CCA DB 25                        dw              DUP             //          dup         ( a  c  c )
1016+ 2CCC 3D 20 0D 00                  dw              LIT, 13         //          13
1017+ 2CD0 B4 28                        dw              EQUALS          //          =           ( a  c  c==CR )
1018+ 2CD2                                                              //          if
1019+ 2CD2 8F 20                        dw              ZBRANCH
1020+ 2CD4 0C 00                        dw              Accept_Else_2 - $
1021+ 2CD6 C0 25 67 27                  dw                  DROP, BL    //              drop bl ( a  bl )
1022+ 2CDA 44 27                        dw                  ZERO        //              0       ( a  c  0 )
1023+ 2CDC                                                              //          else
1024+ 2CDC 82 20                        dw              BRANCH
1025+ 2CDE 04 00                        dw              Accept_Endif_2 - $
1026+ 2CE0              Accept_Else_2:
1027+ 2CE0 DB 25                        dw                  DUP         //              dup     ( a  c  c )
1028+ 2CE2                                                              //          endif
1029+ 2CE2              Accept_Endif_2:
1030+ 2CE2 D4 20 6A 26                  dw              I, CSTORE       //          i           ( a  c )
1031+ 2CE6 DB 25 67 27                  dw              DUP, BL, LESS   //          dup bl <    ( a  c  c<BL )
1031+ 2CEA CD 28
1032+ 2CEC                                                              //          if
1033+ 2CEC 8F 20                        dw              ZBRANCH
1034+ 2CEE 08 00                        dw              Accept_Endif_3 - $
1035+ 2CF0 17 25                        dw                  R_TO        //              r>
1036+ 2CF2 75 25                        dw                  ONE_SUBTRACT//              1-
1037+ 2CF4 0C 25                        dw                  TO_R        //              >r
1038+ 2CF6                                                              //          endif
1039+ 2CF6              Accept_Endif_3:
1040+ 2CF6              Accept_Endif_0:                                 //      endif
1041+ 2CF6 23 29                        dw          EMIT                //      emit
1042+ 2CF8
1043+ 2CF8 44 27 D4 20                  dw          ZERO, I, ONE_PLUS   //      0 i 1+ !
1043+ 2CFC 6E 25
1044+ 2CFE 56 26                        dw          STORE               //          ( zero pad )
1045+ 2D00 D4 20                        dw          I                   //      i
1046+ 2D02 D4 20 61 26                  dw          I, CFETCH, ZEQUAL   //      i 0= if
1046+ 2D06 27 25
1047+ 2D08 8F 20                        dw          ZBRANCH             //
1048+ 2D0A 06 00                        dw              Accept_Endif_4 - $
1049+ 2D0C 9A 20                        dw                  C_LEAVE     //              leave
1050+ 2D0E 06 00                        dw                  Accept_Leave - $
1051+ 2D10              Accept_Endif_4:                                 //      endif
1052+ 2D10                                                              // loop
1053+ 2D10 7A 20                        dw      C_LOOP
1054+ 2D12 78 FF                        dw      Accept_Loop - $
1055+ 2D14              Accept_Leave:
1056+ 2D14 D4 25 A8 28                  dw      SWAP, SUBTRACT          // swap -
1057+ 2D18 6E 25                        dw      ONE_PLUS                // 1+
1058+ 2D1A DB 25 57 28                  dw      DUP, SPAN, STORE        // dup span !
1058+ 2D1E 56 26
1059+ 2D20 02 25                        dw      EXIT                    // ;
1060+ 2D22
1061+ 2D22              //  ______________________________________________________________________
1062+ 2D22              //
1063+ 2D22              // expect      a n --
1064+ 2D22              // Accepts at most n1 characters from terminal and stores them at address a
1065+ 2D22              // CR stops input. A 'nul' is added as trailer.
1066+ 2D22              // n2 is the string length. n2 is kept in span user variable also.
1067+ 2D22              //              Colon_Def EXPECT, "EXPECT", is_normal
1068+ 2D22              //              dw      ACCEPT, DROP            // accept drop
1069+ 2D22              //              dw      EXIT                    // ;
1070+ 2D22
1071+ 2D22              //  ______________________________________________________________________
1072+ 2D22              //
1073+ 2D22              // query        --
1074+ 2D22              // Accept at most 80 character from console. CR stops.
1075+ 2D22              // Text is stored in TIB. Variable IN is zeroed.
1076+ 2D22                              Colon_Def QUERY, "QUERY", is_normal
1076+ 2D22             >                New_Def  QUERY, "QUERY", Enter_Ptr, is_normal ; ok
1076+ 2D22             >
1076+ 2D22             >Dict_Ptr        defl    $
1076+ 2D22             >
1076+ 2D22             >//              ______________________________________________________________________
1076+ 2D22             >//              Heap part
1076+ 2D22             >
1076+ 2D22             >
1076+ 2D22             >                org     (Heap_Ptr & $1FFF) + $E000
1076+ E7EC             >
1076+ E7EC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1076+ E7EC             >Latest_Definition defl  Heap_Ptr
1076+ E7EC             >
1076+ E7EC             >                // dummy db directives used to calculate length of namec
1076+ E7EC 51 55 45 52 >                db      "QUERY"
1076+ E7F0 59          >
1076+ E7F1             >len_NFA         defl    $ - temp_NFA
1076+ E7F1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1076+ E7EC             >
1076+ E7EC 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1076+ E7ED 51 55 45 52 >                db      "QUERY"               // name string in 7-bit ascii, but
1076+ E7F1 59          >
1076+ E7F2             >                org     $-1                 // alter last byte of Name just above to set
1076+ E7F1 D9          >                db      {b $} | END_BIT     // msb as name end
1076+ E7F2             >
1076+ E7F2 E1 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1076+ E7F4             >Prev_Ptr        defl    Heap_Ptr
1076+ E7F4             >
1076+ E7F4             >mirror_Ptr      defl    $
1076+ E7F4             >
1076+ E7F4 24 2D       >                dw      Dict_Ptr + 2        // xt
1076+ E7F6             >Heap_Ptr        defl    $ - $E000           // save current HP
1076+ E7F6             >
1076+ E7F6             >Current_HP      defl  $ - $E000             // used to set HP once!
1076+ E7F6             >
1076+ E7F6             >//              ______________________________________________________________________
1076+ E7F6             >//              Dictionary part
1076+ E7F6             >
1076+ E7F6             >                org     Dict_Ptr
1076+ 2D22             >
1076+ 2D22 F4 07       >                dw      mirror_Ptr - $E000 + Heap_offset
1076+ 2D24             >
1076+ 2D24             >QUERY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1076+ 2D24 CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1076+ 2D27             >
1076+ 2D27             >
1076+ 2D27             >                endif           ; ok        // for other definitions it "points" the correct handler
1076+ 2D27             >                // Use of "; ok" to suppress "warning[fwdref]"
1076+ 2D27             >
1076+ 2D27             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1077+ 2D27 A9 27 4C 26                  dw      TIB, FETCH              // tib @
1078+ 2D2B 3D 20 50 00                  dw      LIT, 80                 // 80
1079+ 2D2F 79 2C C0 25                  dw      ACCEPT, DROP            // accept drop
1080+ 2D33 44 27 EB 27                  dw      ZERO, TO_IN, STORE      // 0 >in !
1080+ 2D37 56 26
1081+ 2D39 02 25                        dw      EXIT                    // ;
1082+ 2D3B
1083+ 2D3B              //  ______________________________________________________________________
1084+ 2D3B              //
1085+ 2D3B              // fill        a n c --
1086+ 2D3B              // If n > 0, fills n locations starting from address a with the value c.
1087+ 2D3B                              New_Def FILL, "FILL", is_code, is_normal
1087+ 2D3B             >
1087+ 2D3B             >Dict_Ptr        defl    $
1087+ 2D3B             >
1087+ 2D3B             >//              ______________________________________________________________________
1087+ 2D3B             >//              Heap part
1087+ 2D3B             >
1087+ 2D3B             >
1087+ 2D3B             >                org     (Heap_Ptr & $1FFF) + $E000
1087+ E7F6             >
1087+ E7F6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1087+ E7F6             >Latest_Definition defl  Heap_Ptr
1087+ E7F6             >
1087+ E7F6             >                // dummy db directives used to calculate length of namec
1087+ E7F6 46 49 4C 4C >                db      "FILL"
1087+ E7FA             >len_NFA         defl    $ - temp_NFA
1087+ E7FA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1087+ E7F6             >
1087+ E7F6 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1087+ E7F7 46 49 4C 4C >                db      "FILL"               // name string in 7-bit ascii, but
1087+ E7FB             >                org     $-1                 // alter last byte of Name just above to set
1087+ E7FA CC          >                db      {b $} | END_BIT     // msb as name end
1087+ E7FB             >
1087+ E7FB EC 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1087+ E7FD             >Prev_Ptr        defl    Heap_Ptr
1087+ E7FD             >
1087+ E7FD             >mirror_Ptr      defl    $
1087+ E7FD             >
1087+ E7FD 3D 2D       >                dw      Dict_Ptr + 2        // xt
1087+ E7FF             >Heap_Ptr        defl    $ - $E000           // save current HP
1087+ E7FF             >
1087+ E7FF             >Current_HP      defl  $ - $E000             // used to set HP once!
1087+ E7FF             >
1087+ E7FF             >//              ______________________________________________________________________
1087+ E7FF             >//              Dictionary part
1087+ E7FF             >
1087+ E7FF             >                org     Dict_Ptr
1087+ 2D3B             >
1087+ 2D3B FD 07       >                dw      mirror_Ptr - $E000 + Heap_offset
1087+ 2D3D             >
1087+ 2D3D             >FILL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1087+ 2D3D ~           >                call    runcode ; ok        // for primitive definitions  actual code
1087+ 2D3D ~           >
1087+ 2D3D ~           >
1087+ 2D3D             >                endif           ; ok        // for other definitions it "points" the correct handler
1087+ 2D3D             >                // Use of "; ok" to suppress "warning[fwdref]"
1087+ 2D3D             >
1087+ 2D3D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1088+ 2D3D D9                           exx
1089+ 2D3E D1                           pop     de                  // de has character
1090+ 2D3F C1                           pop     bc                  // bc has counter
1091+ 2D40 E1                           pop     hl                  // hl has address, save Instruction Pointer
1092+ 2D41              Fill_Loop:
1093+ 2D41 78                               ld      a, b
1094+ 2D42 B1                               or      c
1095+ 2D43 28 05                        jr      z, Fill_While_End
1096+ 2D45 73                               ld      (hl), e
1097+ 2D46 0B                               dec     bc
1098+ 2D47 23                               inc     hl
1099+ 2D48 18 F7                        jr      Fill_Loop
1100+ 2D4A              Fill_While_End:
1101+ 2D4A D9                           exx
1102+ 2D4B                              next
1102+ 2D4B DD E9       >                jp      (ix)
1103+ 2D4D
1104+ 2D4D              //  ______________________________________________________________________
1105+ 2D4D              //
1106+ 2D4D              // erase        a n --
1107+ 2D4D              // If n > 0, fills n locations starting from address a with 'nul' characters.
1108+ 2D4D                              Colon_Def ERASE, "ERASE", is_normal
1108+ 2D4D             >                New_Def  ERASE, "ERASE", Enter_Ptr, is_normal ; ok
1108+ 2D4D             >
1108+ 2D4D             >Dict_Ptr        defl    $
1108+ 2D4D             >
1108+ 2D4D             >//              ______________________________________________________________________
1108+ 2D4D             >//              Heap part
1108+ 2D4D             >
1108+ 2D4D             >
1108+ 2D4D             >                org     (Heap_Ptr & $1FFF) + $E000
1108+ E7FF             >
1108+ E7FF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1108+ E7FF             >Latest_Definition defl  Heap_Ptr
1108+ E7FF             >
1108+ E7FF             >                // dummy db directives used to calculate length of namec
1108+ E7FF 45 52 41 53 >                db      "ERASE"
1108+ E803 45          >
1108+ E804             >len_NFA         defl    $ - temp_NFA
1108+ E804             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1108+ E7FF             >
1108+ E7FF 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1108+ E800 45 52 41 53 >                db      "ERASE"               // name string in 7-bit ascii, but
1108+ E804 45          >
1108+ E805             >                org     $-1                 // alter last byte of Name just above to set
1108+ E804 C5          >                db      {b $} | END_BIT     // msb as name end
1108+ E805             >
1108+ E805 F6 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1108+ E807             >Prev_Ptr        defl    Heap_Ptr
1108+ E807             >
1108+ E807             >mirror_Ptr      defl    $
1108+ E807             >
1108+ E807 4F 2D       >                dw      Dict_Ptr + 2        // xt
1108+ E809             >Heap_Ptr        defl    $ - $E000           // save current HP
1108+ E809             >
1108+ E809             >Current_HP      defl  $ - $E000             // used to set HP once!
1108+ E809             >
1108+ E809             >//              ______________________________________________________________________
1108+ E809             >//              Dictionary part
1108+ E809             >
1108+ E809             >                org     Dict_Ptr
1108+ 2D4D             >
1108+ 2D4D 07 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1108+ 2D4F             >
1108+ 2D4F             >ERASE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1108+ 2D4F CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1108+ 2D52             >
1108+ 2D52             >
1108+ 2D52             >                endif           ; ok        // for other definitions it "points" the correct handler
1108+ 2D52             >                // Use of "; ok" to suppress "warning[fwdref]"
1108+ 2D52             >
1108+ 2D52             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1109+ 2D52 44 27 3D 2D                  dw      ZERO, FILL              // 0 fill
1110+ 2D56 02 25                        dw      EXIT                    // ;
1111+ 2D58
1112+ 2D58              //  ______________________________________________________________________
1113+ 2D58              //
1114+ 2D58              // blank        a n --
1115+ 2D58              // If n > 0, fills n locations starting from address a with 'nul' characters.
1116+ 2D58                              Colon_Def BLANK, "BLANK", is_normal
1116+ 2D58             >                New_Def  BLANK, "BLANK", Enter_Ptr, is_normal ; ok
1116+ 2D58             >
1116+ 2D58             >Dict_Ptr        defl    $
1116+ 2D58             >
1116+ 2D58             >//              ______________________________________________________________________
1116+ 2D58             >//              Heap part
1116+ 2D58             >
1116+ 2D58             >
1116+ 2D58             >                org     (Heap_Ptr & $1FFF) + $E000
1116+ E809             >
1116+ E809             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1116+ E809             >Latest_Definition defl  Heap_Ptr
1116+ E809             >
1116+ E809             >                // dummy db directives used to calculate length of namec
1116+ E809 42 4C 41 4E >                db      "BLANK"
1116+ E80D 4B          >
1116+ E80E             >len_NFA         defl    $ - temp_NFA
1116+ E80E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1116+ E809             >
1116+ E809 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1116+ E80A 42 4C 41 4E >                db      "BLANK"               // name string in 7-bit ascii, but
1116+ E80E 4B          >
1116+ E80F             >                org     $-1                 // alter last byte of Name just above to set
1116+ E80E CB          >                db      {b $} | END_BIT     // msb as name end
1116+ E80F             >
1116+ E80F FF 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1116+ E811             >Prev_Ptr        defl    Heap_Ptr
1116+ E811             >
1116+ E811             >mirror_Ptr      defl    $
1116+ E811             >
1116+ E811 5A 2D       >                dw      Dict_Ptr + 2        // xt
1116+ E813             >Heap_Ptr        defl    $ - $E000           // save current HP
1116+ E813             >
1116+ E813             >Current_HP      defl  $ - $E000             // used to set HP once!
1116+ E813             >
1116+ E813             >//              ______________________________________________________________________
1116+ E813             >//              Dictionary part
1116+ E813             >
1116+ E813             >                org     Dict_Ptr
1116+ 2D58             >
1116+ 2D58 11 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1116+ 2D5A             >
1116+ 2D5A             >BLANK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1116+ 2D5A CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1116+ 2D5D             >
1116+ 2D5D             >
1116+ 2D5D             >                endif           ; ok        // for other definitions it "points" the correct handler
1116+ 2D5D             >                // Use of "; ok" to suppress "warning[fwdref]"
1116+ 2D5D             >
1116+ 2D5D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1117+ 2D5D 67 27 3D 2D                  dw      BL, FILL                // bl fill
1118+ 2D61 02 25                        dw      EXIT                    // ;
1119+ 2D63
1120+ 2D63              //  ______________________________________________________________________
1121+ 2D63              //
1122+ 2D63              // hold         c --
1123+ 2D63              // Used between <# and #> to insert a character c in numeric formatting.
1124+ 2D63                              Colon_Def HOLD, "HOLD", is_normal
1124+ 2D63             >                New_Def  HOLD, "HOLD", Enter_Ptr, is_normal ; ok
1124+ 2D63             >
1124+ 2D63             >Dict_Ptr        defl    $
1124+ 2D63             >
1124+ 2D63             >//              ______________________________________________________________________
1124+ 2D63             >//              Heap part
1124+ 2D63             >
1124+ 2D63             >
1124+ 2D63             >                org     (Heap_Ptr & $1FFF) + $E000
1124+ E813             >
1124+ E813             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1124+ E813             >Latest_Definition defl  Heap_Ptr
1124+ E813             >
1124+ E813             >                // dummy db directives used to calculate length of namec
1124+ E813 48 4F 4C 44 >                db      "HOLD"
1124+ E817             >len_NFA         defl    $ - temp_NFA
1124+ E817             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1124+ E813             >
1124+ E813 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1124+ E814 48 4F 4C 44 >                db      "HOLD"               // name string in 7-bit ascii, but
1124+ E818             >                org     $-1                 // alter last byte of Name just above to set
1124+ E817 C4          >                db      {b $} | END_BIT     // msb as name end
1124+ E818             >
1124+ E818 09 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1124+ E81A             >Prev_Ptr        defl    Heap_Ptr
1124+ E81A             >
1124+ E81A             >mirror_Ptr      defl    $
1124+ E81A             >
1124+ E81A 65 2D       >                dw      Dict_Ptr + 2        // xt
1124+ E81C             >Heap_Ptr        defl    $ - $E000           // save current HP
1124+ E81C             >
1124+ E81C             >Current_HP      defl  $ - $E000             // used to set HP once!
1124+ E81C             >
1124+ E81C             >//              ______________________________________________________________________
1124+ E81C             >//              Dictionary part
1124+ E81C             >
1124+ E81C             >                org     Dict_Ptr
1124+ 2D63             >
1124+ 2D63 1A 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1124+ 2D65             >
1124+ 2D65             >HOLD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1124+ 2D65 CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1124+ 2D68             >
1124+ 2D68             >
1124+ 2D68             >                endif           ; ok        // for other definitions it "points" the correct handler
1124+ 2D68             >                // Use of "; ok" to suppress "warning[fwdref]"
1124+ 2D68             >
1124+ 2D68             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1125+ 2D68 60 27                        dw      NEG_ONE                 // -1
1126+ 2D6A 33 28 34 26                  dw      HLD, PLUSSTORE          // hld +!
1127+ 2D6E 33 28 4C 26                  dw      HLD, FETCH, CSTORE      // hld @ c!
1127+ 2D72 6A 26
1128+ 2D74 02 25                        dw      EXIT                    // ;
1129+ 2D76
1130+ 2D76              //  ______________________________________________________________________
1131+ 2D76              //
1132+ 2D76              // pad         -- a
1133+ 2D76              // leaves the buffer text address. This is at a fixed distance over HERE.
1134+ 2D76                              Colon_Def PAD, "PAD", is_normal
1134+ 2D76             >                New_Def  PAD, "PAD", Enter_Ptr, is_normal ; ok
1134+ 2D76             >
1134+ 2D76             >Dict_Ptr        defl    $
1134+ 2D76             >
1134+ 2D76             >//              ______________________________________________________________________
1134+ 2D76             >//              Heap part
1134+ 2D76             >
1134+ 2D76             >
1134+ 2D76             >                org     (Heap_Ptr & $1FFF) + $E000
1134+ E81C             >
1134+ E81C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1134+ E81C             >Latest_Definition defl  Heap_Ptr
1134+ E81C             >
1134+ E81C             >                // dummy db directives used to calculate length of namec
1134+ E81C 50 41 44    >                db      "PAD"
1134+ E81F             >len_NFA         defl    $ - temp_NFA
1134+ E81F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1134+ E81C             >
1134+ E81C 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1134+ E81D 50 41 44    >                db      "PAD"               // name string in 7-bit ascii, but
1134+ E820             >                org     $-1                 // alter last byte of Name just above to set
1134+ E81F C4          >                db      {b $} | END_BIT     // msb as name end
1134+ E820             >
1134+ E820 13 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1134+ E822             >Prev_Ptr        defl    Heap_Ptr
1134+ E822             >
1134+ E822             >mirror_Ptr      defl    $
1134+ E822             >
1134+ E822 78 2D       >                dw      Dict_Ptr + 2        // xt
1134+ E824             >Heap_Ptr        defl    $ - $E000           // save current HP
1134+ E824             >
1134+ E824             >Current_HP      defl  $ - $E000             // used to set HP once!
1134+ E824             >
1134+ E824             >//              ______________________________________________________________________
1134+ E824             >//              Dictionary part
1134+ E824             >
1134+ E824             >                org     Dict_Ptr
1134+ 2D76             >
1134+ 2D76 22 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1134+ 2D78             >
1134+ 2D78             >PAD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1134+ 2D78 CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1134+ 2D7B             >
1134+ 2D7B             >
1134+ 2D7B             >                endif           ; ok        // for other definitions it "points" the correct handler
1134+ 2D7B             >                // Use of "; ok" to suppress "warning[fwdref]"
1134+ 2D7B             >
1134+ 2D7B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1135+ 2D7B 69 28                        dw      HERE                    // here
1136+ 2D7D 3D 20 44 00                  dw      LIT, 68                 // 68
1137+ 2D81 55 25                        dw      PLUS                    // +
1138+ 2D83 02 25                        dw      EXIT                    // ;
1139+ 2D85
1140+ 2D85              //  ______________________________________________________________________
1141+ 2D85              //
1142+ 2D85              // word         c -- a
1143+ 2D85              // reads characters from input streams until it encouners a c delimiter.
1144+ 2D85              // Stores that packet so it starts from HERE
1145+ 2D85              // WORD leaves a counter as first byte and ends the packet with two spaces.
1146+ 2D85              // Other occurrences of c are ignored.
1147+ 2D85              // If BLK is zero, text is taken from terminal buffer TIB.
1148+ 2D85              // Otherwise text is taken from the disk-block given by BLK.
1149+ 2D85              // "in" variable is incremented of the number of character read.
1150+ 2D85              // The number of characters read is given by ENCLOSE.
1151+ 2D85                              Colon_Def WORD, "WORD", is_normal
1151+ 2D85             >                New_Def  WORD, "WORD", Enter_Ptr, is_normal ; ok
1151+ 2D85             >
1151+ 2D85             >Dict_Ptr        defl    $
1151+ 2D85             >
1151+ 2D85             >//              ______________________________________________________________________
1151+ 2D85             >//              Heap part
1151+ 2D85             >
1151+ 2D85             >
1151+ 2D85             >                org     (Heap_Ptr & $1FFF) + $E000
1151+ E824             >
1151+ E824             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1151+ E824             >Latest_Definition defl  Heap_Ptr
1151+ E824             >
1151+ E824             >                // dummy db directives used to calculate length of namec
1151+ E824 57 4F 52 44 >                db      "WORD"
1151+ E828             >len_NFA         defl    $ - temp_NFA
1151+ E828             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1151+ E824             >
1151+ E824 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1151+ E825 57 4F 52 44 >                db      "WORD"               // name string in 7-bit ascii, but
1151+ E829             >                org     $-1                 // alter last byte of Name just above to set
1151+ E828 C4          >                db      {b $} | END_BIT     // msb as name end
1151+ E829             >
1151+ E829 1C 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1151+ E82B             >Prev_Ptr        defl    Heap_Ptr
1151+ E82B             >
1151+ E82B             >mirror_Ptr      defl    $
1151+ E82B             >
1151+ E82B 87 2D       >                dw      Dict_Ptr + 2        // xt
1151+ E82D             >Heap_Ptr        defl    $ - $E000           // save current HP
1151+ E82D             >
1151+ E82D             >Current_HP      defl  $ - $E000             // used to set HP once!
1151+ E82D             >
1151+ E82D             >//              ______________________________________________________________________
1151+ E82D             >//              Dictionary part
1151+ E82D             >
1151+ E82D             >                org     Dict_Ptr
1151+ 2D85             >
1151+ 2D85 2B 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1151+ 2D87             >
1151+ 2D87             >WORD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1151+ 2D87 CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1151+ 2D8A             >
1151+ 2D8A             >
1151+ 2D8A             >                endif           ; ok        // for other definitions it "points" the correct handler
1151+ 2D8A             >                // Use of "; ok" to suppress "warning[fwdref]"
1151+ 2D8A             >
1151+ 2D8A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1152+ 2D8A E5 27 4C 26                  dw      BLK, FETCH              // blk @
1153+ 2D8E                                                              // if
1154+ 2D8E 8F 20                        dw      ZBRANCH
1155+ 2D90 0C 00                        dw      Word_Else - $
1156+ 2D92 E5 27 4C 26                  dw          BLK, FETCH          //      blk @
1157+ 2D96 5A 37                        dw          BLOCK               //      block ( forward )
1158+ 2D98                                                              // else
1159+ 2D98 82 20                        dw      BRANCH
1160+ 2D9A 06 00                        dw      Word_Endif - $
1161+ 2D9C              Word_Else:
1162+ 2D9C A9 27 4C 26                  dw         TIB, FETCH           //      tib @
1163+ 2DA0              Word_Endif:                                     // endif
1164+ 2DA0 EB 27 4C 26                  dw      TO_IN, FETCH, PLUS      // >in @ +
1164+ 2DA4 55 25
1165+ 2DA6 D4 25 C3 21                  dw      SWAP, ENCLOSE           // swap enclose
1166+ 2DAA 69 28 3D 20                  dw      HERE, LIT, 34, BLANK    // here 34 blank
1166+ 2DAE 22 00 5A 2D
1167+ 2DB2 EB 27 34 26                  dw      TO_IN, PLUSSTORE        // >in @ +
1168+ 2DB6 B7 25 A8 28                  dw      OVER, SUBTRACT, TO_R    // over - >r
1168+ 2DBA 0C 25
1169+ 2DBC 22 25 69 28                  dw      R_OP, HERE, CSTORE      // r here c!
1169+ 2DC0 6A 26
1170+ 2DC2 55 25                        dw      PLUS                    // +
1171+ 2DC4 69 28 6E 25                  dw      HERE, ONE_PLUS, R_TO    // here 1+ r>
1171+ 2DC8 17 25
1172+ 2DCA 43 24                        dw      CMOVE                   // cmove
1173+ 2DCC 69 28                        dw      HERE                    // here
1174+ 2DCE 02 25                        dw      EXIT                    // ;
1175+ 2DD0
1176+ 2DD0              //  ______________________________________________________________________
1177+ 2DD0              //
1178+ 2DD0              // (.")         --
1179+ 2DD0              // Direct procedure compiled by ." and  .(  It executes TYPE.
1180+ 2DD0                              Colon_Def C_DOT_QUOTE, '(.")', is_normal
1180+ 2DD0             >                New_Def  C_DOT_QUOTE, '(.")', Enter_Ptr, is_normal ; ok
1180+ 2DD0             >
1180+ 2DD0             >Dict_Ptr        defl    $
1180+ 2DD0             >
1180+ 2DD0             >//              ______________________________________________________________________
1180+ 2DD0             >//              Heap part
1180+ 2DD0             >
1180+ 2DD0             >
1180+ 2DD0             >                org     (Heap_Ptr & $1FFF) + $E000
1180+ E82D             >
1180+ E82D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1180+ E82D             >Latest_Definition defl  Heap_Ptr
1180+ E82D             >
1180+ E82D             >                // dummy db directives used to calculate length of namec
1180+ E82D 28 2E 22 29 >                db      '(.")'
1180+ E831             >len_NFA         defl    $ - temp_NFA
1180+ E831             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1180+ E82D             >
1180+ E82D 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1180+ E82E 28 2E 22 29 >                db      '(.")'               // name string in 7-bit ascii, but
1180+ E832             >                org     $-1                 // alter last byte of Name just above to set
1180+ E831 A9          >                db      {b $} | END_BIT     // msb as name end
1180+ E832             >
1180+ E832 24 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1180+ E834             >Prev_Ptr        defl    Heap_Ptr
1180+ E834             >
1180+ E834             >mirror_Ptr      defl    $
1180+ E834             >
1180+ E834 D2 2D       >                dw      Dict_Ptr + 2        // xt
1180+ E836             >Heap_Ptr        defl    $ - $E000           // save current HP
1180+ E836             >
1180+ E836             >Current_HP      defl  $ - $E000             // used to set HP once!
1180+ E836             >
1180+ E836             >//              ______________________________________________________________________
1180+ E836             >//              Dictionary part
1180+ E836             >
1180+ E836             >                org     Dict_Ptr
1180+ 2DD0             >
1180+ 2DD0 34 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1180+ 2DD2             >
1180+ 2DD2             >C_DOT_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1180+ 2DD2 CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1180+ 2DD5             >
1180+ 2DD5             >
1180+ 2DD5             >                endif           ; ok        // for other definitions it "points" the correct handler
1180+ 2DD5             >                // Use of "; ok" to suppress "warning[fwdref]"
1180+ 2DD5             >
1180+ 2DD5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1181+ 2DD5 22 25 E1 2B                  dw      R_OP, COUNT             // r count
1182+ 2DD9 DB 25 6E 25                  dw      DUP, ONE_PLUS           // dup 1+
1183+ 2DDD 17 25 55 25                  dw      R_TO, PLUS, TO_R        // r> + >r  ( advance IP )
1183+ 2DE1 0C 25
1184+ 2DE3 35 2C                        dw      TYPE                    // type
1185+ 2DE5 02 25                        dw      EXIT                    // ;
1186+ 2DE7
1187+ 2DE7              //  ______________________________________________________________________
1188+ 2DE7              //
1189+ 2DE7              // char         -- c
1190+ 2DE7              // get first character from next input word
1191+ 2DE7                              Colon_Def CHAR,  "CHAR", is_normal
1191+ 2DE7             >                New_Def  CHAR, "CHAR", Enter_Ptr, is_normal ; ok
1191+ 2DE7             >
1191+ 2DE7             >Dict_Ptr        defl    $
1191+ 2DE7             >
1191+ 2DE7             >//              ______________________________________________________________________
1191+ 2DE7             >//              Heap part
1191+ 2DE7             >
1191+ 2DE7             >
1191+ 2DE7             >                org     (Heap_Ptr & $1FFF) + $E000
1191+ E836             >
1191+ E836             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1191+ E836             >Latest_Definition defl  Heap_Ptr
1191+ E836             >
1191+ E836             >                // dummy db directives used to calculate length of namec
1191+ E836 43 48 41 52 >                db      "CHAR"
1191+ E83A             >len_NFA         defl    $ - temp_NFA
1191+ E83A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1191+ E836             >
1191+ E836 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1191+ E837 43 48 41 52 >                db      "CHAR"               // name string in 7-bit ascii, but
1191+ E83B             >                org     $-1                 // alter last byte of Name just above to set
1191+ E83A D2          >                db      {b $} | END_BIT     // msb as name end
1191+ E83B             >
1191+ E83B 2D 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1191+ E83D             >Prev_Ptr        defl    Heap_Ptr
1191+ E83D             >
1191+ E83D             >mirror_Ptr      defl    $
1191+ E83D             >
1191+ E83D E9 2D       >                dw      Dict_Ptr + 2        // xt
1191+ E83F             >Heap_Ptr        defl    $ - $E000           // save current HP
1191+ E83F             >
1191+ E83F             >Current_HP      defl  $ - $E000             // used to set HP once!
1191+ E83F             >
1191+ E83F             >//              ______________________________________________________________________
1191+ E83F             >//              Dictionary part
1191+ E83F             >
1191+ E83F             >                org     Dict_Ptr
1191+ 2DE7             >
1191+ 2DE7 3D 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1191+ 2DE9             >
1191+ 2DE9             >CHAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1191+ 2DE9 CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1191+ 2DEC             >
1191+ 2DEC             >
1191+ 2DEC             >                endif           ; ok        // for other definitions it "points" the correct handler
1191+ 2DEC             >                // Use of "; ok" to suppress "warning[fwdref]"
1191+ 2DEC             >
1191+ 2DEC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1192+ 2DEC 67 27 87 2D                  dw      BL, WORD                // bl word
1193+ 2DF0 6E 25 61 26                  dw      ONE_PLUS, CFETCH        // 1+ c@
1194+ 2DF4 02 25                        dw      EXIT                    // ;
1195+ 2DF6
1196+ 2DF6              //  ______________________________________________________________________
1197+ 2DF6              //
1198+ 2DF6              // ,"           --
1199+ 2DF6              // compiles a string terminated by " as a counted string from next input stream
1200+ 2DF6                              Colon_Def COMMA_QUOTE,  ',"', is_normal
1200+ 2DF6             >                New_Def  COMMA_QUOTE, ',"', Enter_Ptr, is_normal ; ok
1200+ 2DF6             >
1200+ 2DF6             >Dict_Ptr        defl    $
1200+ 2DF6             >
1200+ 2DF6             >//              ______________________________________________________________________
1200+ 2DF6             >//              Heap part
1200+ 2DF6             >
1200+ 2DF6             >
1200+ 2DF6             >                org     (Heap_Ptr & $1FFF) + $E000
1200+ E83F             >
1200+ E83F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1200+ E83F             >Latest_Definition defl  Heap_Ptr
1200+ E83F             >
1200+ E83F             >                // dummy db directives used to calculate length of namec
1200+ E83F 2C 22       >                db      ',"'
1200+ E841             >len_NFA         defl    $ - temp_NFA
1200+ E841             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1200+ E83F             >
1200+ E83F 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1200+ E840 2C 22       >                db      ',"'               // name string in 7-bit ascii, but
1200+ E842             >                org     $-1                 // alter last byte of Name just above to set
1200+ E841 A2          >                db      {b $} | END_BIT     // msb as name end
1200+ E842             >
1200+ E842 36 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1200+ E844             >Prev_Ptr        defl    Heap_Ptr
1200+ E844             >
1200+ E844             >mirror_Ptr      defl    $
1200+ E844             >
1200+ E844 F8 2D       >                dw      Dict_Ptr + 2        // xt
1200+ E846             >Heap_Ptr        defl    $ - $E000           // save current HP
1200+ E846             >
1200+ E846             >Current_HP      defl  $ - $E000             // used to set HP once!
1200+ E846             >
1200+ E846             >//              ______________________________________________________________________
1200+ E846             >//              Dictionary part
1200+ E846             >
1200+ E846             >                org     Dict_Ptr
1200+ 2DF6             >
1200+ 2DF6 44 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1200+ 2DF8             >
1200+ 2DF8             >COMMA_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1200+ 2DF8 CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1200+ 2DFB             >
1200+ 2DFB             >
1200+ 2DFB             >                endif           ; ok        // for other definitions it "points" the correct handler
1200+ 2DFB             >                // Use of "; ok" to suppress "warning[fwdref]"
1200+ 2DFB             >
1200+ 2DFB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1201+ 2DFB 3D 20 22 00                  dw      LIT, DQUOTE_CHAR        // [char] "
1202+ 2DFF 87 2D                        dw      WORD                    // word
1203+ 2E01 61 26 6E 25                  dw      CFETCH, ONE_PLUS        // c@ 1+
1204+ 2E05 74 28                        dw      ALLOT                   // allot
1205+ 2E07 44 27 8E 28                  dw      ZERO, CCOMMA            // 0 c,  ( nul-terminated string - useful anyway )
1206+ 2E0B 02 25                        dw      EXIT
1207+ 2E0D
1208+ 2E0D              //  ______________________________________________________________________
1209+ 2E0D              //
1210+ 2E0D              // .c           c --
1211+ 2E0D              // intermediate general purpose string builder, used by ." and .(
1212+ 2E0D                              Colon_Def DOT_C,  ".C", is_immediate
1212+ 2E0D             >                New_Def  DOT_C, ".C", Enter_Ptr, is_immediate ; ok
1212+ 2E0D             >
1212+ 2E0D             >Dict_Ptr        defl    $
1212+ 2E0D             >
1212+ 2E0D             >//              ______________________________________________________________________
1212+ 2E0D             >//              Heap part
1212+ 2E0D             >
1212+ 2E0D             >
1212+ 2E0D             >                org     (Heap_Ptr & $1FFF) + $E000
1212+ E846             >
1212+ E846             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1212+ E846             >Latest_Definition defl  Heap_Ptr
1212+ E846             >
1212+ E846             >                // dummy db directives used to calculate length of namec
1212+ E846 2E 43       >                db      ".C"
1212+ E848             >len_NFA         defl    $ - temp_NFA
1212+ E848             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1212+ E846             >
1212+ E846 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1212+ E847 2E 43       >                db      ".C"               // name string in 7-bit ascii, but
1212+ E849             >                org     $-1                 // alter last byte of Name just above to set
1212+ E848 C3          >                db      {b $} | END_BIT     // msb as name end
1212+ E849             >
1212+ E849 3F 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1212+ E84B             >Prev_Ptr        defl    Heap_Ptr
1212+ E84B             >
1212+ E84B             >mirror_Ptr      defl    $
1212+ E84B             >
1212+ E84B 0F 2E       >                dw      Dict_Ptr + 2        // xt
1212+ E84D             >Heap_Ptr        defl    $ - $E000           // save current HP
1212+ E84D             >
1212+ E84D             >Current_HP      defl  $ - $E000             // used to set HP once!
1212+ E84D             >
1212+ E84D             >//              ______________________________________________________________________
1212+ E84D             >//              Dictionary part
1212+ E84D             >
1212+ E84D             >                org     Dict_Ptr
1212+ 2E0D             >
1212+ 2E0D 4B 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1212+ 2E0F             >
1212+ 2E0F             >DOT_C:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1212+ 2E0F CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1212+ 2E12             >
1212+ 2E12             >
1212+ 2E12             >                endif           ; ok        // for other definitions it "points" the correct handler
1212+ 2E12             >                // Use of "; ok" to suppress "warning[fwdref]"
1212+ 2E12             >
1212+ 2E12             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1213+ 2E12 0F 28 4C 26                  dw      STATE, FETCH            // state @
1214+ 2E16                                                              // if
1215+ 2E16 8F 20                        dw      ZBRANCH
1216+ 2E18 12 00                        dw      Dot_C_Else - $
1217+ 2E1A 15 2B D2 2D                  dw          COMPILE, C_DOT_QUOTE //     compile (.")
1218+ 2E1E 87 2D 61 26                  dw          WORD, CFETCH        //      word c@
1219+ 2E22 6E 25 74 28                  dw          ONE_PLUS, ALLOT     //      1+ allot
1220+ 2E26                                                              // else
1221+ 2E26 82 20                        dw      BRANCH
1222+ 2E28 08 00                        dw      Dot_C_Endif - $
1223+ 2E2A              Dot_C_Else:
1224+ 2E2A 87 2D E1 2B                  dw          WORD, COUNT, TYPE   //      word count type
1224+ 2E2E 35 2C
1225+ 2E30              Dot_C_Endif:                                    // endif
1226+ 2E30 02 25                        dw      EXIT                    ;
1227+ 2E32
1228+ 2E32              //  ______________________________________________________________________
1229+ 2E32              //
1230+ 2E32              // ."           c --
1231+ 2E32                              Colon_Def DOT_QUOTE,  '."', is_immediate
1231+ 2E32             >                New_Def  DOT_QUOTE, '."', Enter_Ptr, is_immediate ; ok
1231+ 2E32             >
1231+ 2E32             >Dict_Ptr        defl    $
1231+ 2E32             >
1231+ 2E32             >//              ______________________________________________________________________
1231+ 2E32             >//              Heap part
1231+ 2E32             >
1231+ 2E32             >
1231+ 2E32             >                org     (Heap_Ptr & $1FFF) + $E000
1231+ E84D             >
1231+ E84D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1231+ E84D             >Latest_Definition defl  Heap_Ptr
1231+ E84D             >
1231+ E84D             >                // dummy db directives used to calculate length of namec
1231+ E84D 2E 22       >                db      '."'
1231+ E84F             >len_NFA         defl    $ - temp_NFA
1231+ E84F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1231+ E84D             >
1231+ E84D C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1231+ E84E 2E 22       >                db      '."'               // name string in 7-bit ascii, but
1231+ E850             >                org     $-1                 // alter last byte of Name just above to set
1231+ E84F A2          >                db      {b $} | END_BIT     // msb as name end
1231+ E850             >
1231+ E850 46 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1231+ E852             >Prev_Ptr        defl    Heap_Ptr
1231+ E852             >
1231+ E852             >mirror_Ptr      defl    $
1231+ E852             >
1231+ E852 34 2E       >                dw      Dict_Ptr + 2        // xt
1231+ E854             >Heap_Ptr        defl    $ - $E000           // save current HP
1231+ E854             >
1231+ E854             >Current_HP      defl  $ - $E000             // used to set HP once!
1231+ E854             >
1231+ E854             >//              ______________________________________________________________________
1231+ E854             >//              Dictionary part
1231+ E854             >
1231+ E854             >                org     Dict_Ptr
1231+ 2E32             >
1231+ 2E32 52 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1231+ 2E34             >
1231+ 2E34             >DOT_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1231+ 2E34 CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1231+ 2E37             >
1231+ 2E37             >
1231+ 2E37             >                endif           ; ok        // for other definitions it "points" the correct handler
1231+ 2E37             >                // Use of "; ok" to suppress "warning[fwdref]"
1231+ 2E37             >
1231+ 2E37             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1232+ 2E37 3D 20 22 00                  dw      LIT, DQUOTE_CHAR        // [char] "
1233+ 2E3B 0F 2E                        dw      DOT_C                   // [compile] .c
1234+ 2E3D 02 25                        dw      EXIT                    // ; immediate
1235+ 2E3F
1236+ 2E3F              //  ______________________________________________________________________
1237+ 2E3F              //
1238+ 2E3F              // .(           c --
1239+ 2E3F                              Colon_Def DOT_BRACKET,  ".(", is_immediate
1239+ 2E3F             >                New_Def  DOT_BRACKET, ".(", Enter_Ptr, is_immediate ; ok
1239+ 2E3F             >
1239+ 2E3F             >Dict_Ptr        defl    $
1239+ 2E3F             >
1239+ 2E3F             >//              ______________________________________________________________________
1239+ 2E3F             >//              Heap part
1239+ 2E3F             >
1239+ 2E3F             >
1239+ 2E3F             >                org     (Heap_Ptr & $1FFF) + $E000
1239+ E854             >
1239+ E854             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1239+ E854             >Latest_Definition defl  Heap_Ptr
1239+ E854             >
1239+ E854             >                // dummy db directives used to calculate length of namec
1239+ E854 2E 28       >                db      ".("
1239+ E856             >len_NFA         defl    $ - temp_NFA
1239+ E856             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1239+ E854             >
1239+ E854 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1239+ E855 2E 28       >                db      ".("               // name string in 7-bit ascii, but
1239+ E857             >                org     $-1                 // alter last byte of Name just above to set
1239+ E856 A8          >                db      {b $} | END_BIT     // msb as name end
1239+ E857             >
1239+ E857 4D 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1239+ E859             >Prev_Ptr        defl    Heap_Ptr
1239+ E859             >
1239+ E859             >mirror_Ptr      defl    $
1239+ E859             >
1239+ E859 41 2E       >                dw      Dict_Ptr + 2        // xt
1239+ E85B             >Heap_Ptr        defl    $ - $E000           // save current HP
1239+ E85B             >
1239+ E85B             >Current_HP      defl  $ - $E000             // used to set HP once!
1239+ E85B             >
1239+ E85B             >//              ______________________________________________________________________
1239+ E85B             >//              Dictionary part
1239+ E85B             >
1239+ E85B             >                org     Dict_Ptr
1239+ 2E3F             >
1239+ 2E3F 59 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1239+ 2E41             >
1239+ 2E41             >DOT_BRACKET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1239+ 2E41 CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1239+ 2E44             >
1239+ 2E44             >
1239+ 2E44             >                endif           ; ok        // for other definitions it "points" the correct handler
1239+ 2E44             >                // Use of "; ok" to suppress "warning[fwdref]"
1239+ 2E44             >
1239+ 2E44             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1240+ 2E44 3D 20 29 00                  dw      LIT, ")"                // [char] )
1241+ 2E48 0F 2E                        dw      DOT_C                   // [compile] .c
1242+ 2E4A 02 25                        dw      EXIT                    // ; immediate
1243+ 2E4C
1244+ 2E4C              //  ______________________________________________________________________
1245+ 2E4C              //
1246+ 2E4C              // (sgn)        a -- a f
1247+ 2E4C              // determines if char in addr a is a sign (+ or -), and in that case increments
1248+ 2E4C              // a flag. Returns f as the sign, true for negative, false for positive.
1249+ 2E4C              // called by NUMBER and (EXP)
1250+ 2E4C                              Colon_Def CSGN,  "(SGN)", is_normal
1250+ 2E4C             >                New_Def  CSGN, "(SGN)", Enter_Ptr, is_normal ; ok
1250+ 2E4C             >
1250+ 2E4C             >Dict_Ptr        defl    $
1250+ 2E4C             >
1250+ 2E4C             >//              ______________________________________________________________________
1250+ 2E4C             >//              Heap part
1250+ 2E4C             >
1250+ 2E4C             >
1250+ 2E4C             >                org     (Heap_Ptr & $1FFF) + $E000
1250+ E85B             >
1250+ E85B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1250+ E85B             >Latest_Definition defl  Heap_Ptr
1250+ E85B             >
1250+ E85B             >                // dummy db directives used to calculate length of namec
1250+ E85B 28 53 47 4E >                db      "(SGN)"
1250+ E85F 29          >
1250+ E860             >len_NFA         defl    $ - temp_NFA
1250+ E860             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1250+ E85B             >
1250+ E85B 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1250+ E85C 28 53 47 4E >                db      "(SGN)"               // name string in 7-bit ascii, but
1250+ E860 29          >
1250+ E861             >                org     $-1                 // alter last byte of Name just above to set
1250+ E860 A9          >                db      {b $} | END_BIT     // msb as name end
1250+ E861             >
1250+ E861 54 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1250+ E863             >Prev_Ptr        defl    Heap_Ptr
1250+ E863             >
1250+ E863             >mirror_Ptr      defl    $
1250+ E863             >
1250+ E863 4E 2E       >                dw      Dict_Ptr + 2        // xt
1250+ E865             >Heap_Ptr        defl    $ - $E000           // save current HP
1250+ E865             >
1250+ E865             >Current_HP      defl  $ - $E000             // used to set HP once!
1250+ E865             >
1250+ E865             >//              ______________________________________________________________________
1250+ E865             >//              Dictionary part
1250+ E865             >
1250+ E865             >                org     Dict_Ptr
1250+ 2E4C             >
1250+ 2E4C 63 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1250+ 2E4E             >
1250+ 2E4E             >CSGN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1250+ 2E4E CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1250+ 2E51             >
1250+ 2E51             >
1250+ 2E51             >                endif           ; ok        // for other definitions it "points" the correct handler
1250+ 2E51             >                // Use of "; ok" to suppress "warning[fwdref]"
1250+ 2E51             >
1250+ 2E51             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1251+ 2E51 DB 25 6E 25                  dw      DUP, ONE_PLUS, CFETCH   // dup 1+ c@
1251+ 2E55 61 26
1252+ 2E57 DB 25 3D 20                  dw      DUP, LIT, "-", EQUALS   // dup [char] - =
1252+ 2E5B 2D 00 B4 28
1253+ 2E5F                                                              // if
1254+ 2E5F 8F 20                        dw      ZBRANCH
1255+ 2E61 12 00                        dw      CSgn_Else_0 - $
1256+ 2E63 C0 25                        dw          DROP                //      drop
1257+ 2E65 6E 25                        dw          ONE_PLUS            //      1+
1258+ 2E67 4B 27 1B 28                  dw          ONE, DPL, PLUSSTORE //      1 dpl +!
1258+ 2E6B 34 26
1259+ 2E6D 4B 27                        dw          ONE                 //      1
1260+ 2E6F                                                              // else
1261+ 2E6F 82 20                        dw      BRANCH
1262+ 2E71 16 00                        dw      CSgn_Endif_0 - $
1263+ 2E73              CSgn_Else_0:
1264+ 2E73 3D 20 2B 00                  dw          LIT, "+", EQUALS    //      [char] + =
1264+ 2E77 B4 28
1265+ 2E79                                                              //      if
1266+ 2E79 8F 20                        dw          ZBRANCH
1267+ 2E7B 0A 00                        dw          CSgn_Endif_1 - $
1268+ 2E7D 6E 25                        dw              ONE_PLUS        //          1+
1269+ 2E7F 4B 27 1B 28                  dw              ONE, DPL        //          1 dpl
1270+ 2E83 34 26                        dw              PLUSSTORE       //          +!
1271+ 2E85              CSgn_Endif_1                                    //      endif
1272+ 2E85 44 27                        dw          ZERO                //      0
1273+ 2E87              CSgn_Endif_0:                                   // endif
1274+ 2E87 02 25                        dw      EXIT
1275+ 2E89
1276+ 2E89              //  ______________________________________________________________________
1277+ 2E89              //
1278+ 2E89              // (number)     d a -- d1 a1
1279+ 2E89              // using the current BASE parse characters stored in address a
1280+ 2E89              // accumulating a double precision integer d
1281+ 2E89              // the process stops at the first not-convertible character
1282+ 2E89              // A double-number is kept in CPU registers as HLDE.
1283+ 2E89              // On the stack a double number is treated as two single numbers
1284+ 2E89              // where HL is on the top of the stack and DE is the second from top,
1285+ 2E89              // so in the stack memory it appears as LHED.
1286+ 2E89              // Instead, in 2VARIABLE a double number is stored as EDLH.
1287+ 2E89                              Colon_Def CNUMBER,  "(NUMBER)", is_normal
1287+ 2E89             >                New_Def  CNUMBER, "(NUMBER)", Enter_Ptr, is_normal ; ok
1287+ 2E89             >
1287+ 2E89             >Dict_Ptr        defl    $
1287+ 2E89             >
1287+ 2E89             >//              ______________________________________________________________________
1287+ 2E89             >//              Heap part
1287+ 2E89             >
1287+ 2E89             >
1287+ 2E89             >                org     (Heap_Ptr & $1FFF) + $E000
1287+ E865             >
1287+ E865             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1287+ E865             >Latest_Definition defl  Heap_Ptr
1287+ E865             >
1287+ E865             >                // dummy db directives used to calculate length of namec
1287+ E865 28 4E 55 4D >                db      "(NUMBER)"
1287+ E869 42 45 52 29 >
1287+ E86D             >len_NFA         defl    $ - temp_NFA
1287+ E86D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1287+ E865             >
1287+ E865 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1287+ E866 28 4E 55 4D >                db      "(NUMBER)"               // name string in 7-bit ascii, but
1287+ E86A 42 45 52 29 >
1287+ E86E             >                org     $-1                 // alter last byte of Name just above to set
1287+ E86D A9          >                db      {b $} | END_BIT     // msb as name end
1287+ E86E             >
1287+ E86E 5B 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1287+ E870             >Prev_Ptr        defl    Heap_Ptr
1287+ E870             >
1287+ E870             >mirror_Ptr      defl    $
1287+ E870             >
1287+ E870 8B 2E       >                dw      Dict_Ptr + 2        // xt
1287+ E872             >Heap_Ptr        defl    $ - $E000           // save current HP
1287+ E872             >
1287+ E872             >Current_HP      defl  $ - $E000             // used to set HP once!
1287+ E872             >
1287+ E872             >//              ______________________________________________________________________
1287+ E872             >//              Dictionary part
1287+ E872             >
1287+ E872             >                org     Dict_Ptr
1287+ 2E89             >
1287+ 2E89 70 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1287+ 2E8B             >
1287+ 2E8B             >CNUMBER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1287+ 2E8B CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1287+ 2E8E             >
1287+ 2E8E             >
1287+ 2E8E             >                endif           ; ok        // for other definitions it "points" the correct handler
1287+ 2E8E             >                // Use of "; ok" to suppress "warning[fwdref]"
1287+ 2E8E             >
1287+ 2E8E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1288+ 2E8E                                                              // begin
1289+ 2E8E              CNumber_Begin:
1290+ 2E8E 6E 25                        dw          ONE_PLUS            //      1+
1291+ 2E90 DB 25 0C 25                  dw          DUP, TO_R           //      dup >r
1292+ 2E94 61 26                        dw          CFETCH              //      @
1293+ 2E96 15 28 4C 26                  dw          BASE, FETCH         //      base @
1294+ 2E9A E7 20                        dw          DIGIT               //      digit
1295+ 2E9C                                                              // while
1296+ 2E9C 8F 20                        dw      ZBRANCH
1297+ 2E9E 2C 00                        dw      CNumber_While_end - $
1298+ 2EA0 D4 25                        dw          SWAP                //      swap
1299+ 2EA2 15 28 4C 26                  dw          BASE, FETCH         //      base @
1300+ 2EA6 67 24                        dw          UM_MUL              //      um*
1301+ 2EA8 C0 25 E2 25                  dw          DROP, ROT           //      drop rot
1302+ 2EAC 15 28 4C 26                  dw          BASE, FETCH         //      base @
1303+ 2EB0 67 24                        dw          UM_MUL              //      um*
1304+ 2EB2 5F 25                        dw          DPLUS               //      d+
1305+ 2EB4 1B 28 4C 26                  dw          DPL, FETCH          //      dpl @
1306+ 2EB8 6E 25                        dw          ONE_PLUS            //      1+
1307+ 2EBA                                                              //      if
1308+ 2EBA 8F 20                        dw          ZBRANCH
1309+ 2EBC 08 00                        dw          CNumber_Endif - $
1310+ 2EBE 4B 27 1B 28                  dw              ONE, DPL        //          1 dpl
1311+ 2EC2 34 26                        dw              PLUSSTORE       //          +!
1312+ 2EC4              CNumber_Endif:                                  //      endif
1313+ 2EC4 17 25                        dw             R_TO             //      r>  ( balance rp )
1314+ 2EC6 82 20                        dw      BRANCH
1315+ 2EC8 C6 FF                        dw      CNumber_Begin - $
1316+ 2ECA              CNumber_While_end:                              // repeat
1317+ 2ECA 17 25                        dw      R_TO                    // r>  ( balance rp on exit while-repeat )
1318+ 2ECC 02 25                        dw      EXIT                    // ;
1319+ 2ECE
1320+ 2ECE              //  ______________________________________________________________________
1321+ 2ECE              //
1322+ 2ECE              // (prefix)
1323+ 2ECE                              Colon_Def CPREFIX,  "(PREFIX)", is_normal
1323+ 2ECE             >                New_Def  CPREFIX, "(PREFIX)", Enter_Ptr, is_normal ; ok
1323+ 2ECE             >
1323+ 2ECE             >Dict_Ptr        defl    $
1323+ 2ECE             >
1323+ 2ECE             >//              ______________________________________________________________________
1323+ 2ECE             >//              Heap part
1323+ 2ECE             >
1323+ 2ECE             >
1323+ 2ECE             >                org     (Heap_Ptr & $1FFF) + $E000
1323+ E872             >
1323+ E872             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1323+ E872             >Latest_Definition defl  Heap_Ptr
1323+ E872             >
1323+ E872             >                // dummy db directives used to calculate length of namec
1323+ E872 28 50 52 45 >                db      "(PREFIX)"
1323+ E876 46 49 58 29 >
1323+ E87A             >len_NFA         defl    $ - temp_NFA
1323+ E87A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1323+ E872             >
1323+ E872 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1323+ E873 28 50 52 45 >                db      "(PREFIX)"               // name string in 7-bit ascii, but
1323+ E877 46 49 58 29 >
1323+ E87B             >                org     $-1                 // alter last byte of Name just above to set
1323+ E87A A9          >                db      {b $} | END_BIT     // msb as name end
1323+ E87B             >
1323+ E87B 65 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1323+ E87D             >Prev_Ptr        defl    Heap_Ptr
1323+ E87D             >
1323+ E87D             >mirror_Ptr      defl    $
1323+ E87D             >
1323+ E87D D0 2E       >                dw      Dict_Ptr + 2        // xt
1323+ E87F             >Heap_Ptr        defl    $ - $E000           // save current HP
1323+ E87F             >
1323+ E87F             >Current_HP      defl  $ - $E000             // used to set HP once!
1323+ E87F             >
1323+ E87F             >//              ______________________________________________________________________
1323+ E87F             >//              Dictionary part
1323+ E87F             >
1323+ E87F             >                org     Dict_Ptr
1323+ 2ECE             >
1323+ 2ECE 7D 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1323+ 2ED0             >
1323+ 2ED0             >CPREFIX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1323+ 2ED0 CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1323+ 2ED3             >
1323+ 2ED3             >
1323+ 2ED3             >                endif           ; ok        // for other definitions it "points" the correct handler
1323+ 2ED3             >                // Use of "; ok" to suppress "warning[fwdref]"
1323+ 2ED3             >
1323+ 2ED3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1324+ 2ED3 DB 25 6E 25                  dw      DUP, ONE_PLUS, CFETCH   // dup 1+ c@
1324+ 2ED7 61 26
1325+ 2ED9 DB 25 0C 25                  dw      DUP, TO_R               // dup >r
1326+ 2EDD 3D 20 24 00                  dw      LIT, "$", EQUALS        // [char] $ =
1326+ 2EE1 B4 28
1327+ 2EE3                                                              // if
1328+ 2EE3 8F 20                        dw      ZBRANCH
1329+ 2EE5 0C 00                        dw      CPrefix_Endif_0 - $
1330+ 2EE7 6E 25                        dw          ONE_PLUS            //      1+
1331+ 2EE9 3D 20 10 00                  dw          LIT, 16
1332+ 2EED 15 28 56 26                  dw          BASE, STORE         //      16 base !
1333+ 2EF1              CPrefix_Endif_0:                                // endif
1334+ 2EF1 17 25                        dw      R_TO                    // r>
1335+ 2EF3 3D 20 25 00                  dw      LIT, "%", EQUALS        // [char] $ =
1335+ 2EF7 B4 28
1336+ 2EF9                                                              // if
1337+ 2EF9 8F 20                        dw      ZBRANCH
1338+ 2EFB 0A 00                        dw      CPrefix_Endif_1 - $
1339+ 2EFD 6E 25                        dw          ONE_PLUS            //      1+
1340+ 2EFF 52 27                        dw          TWO
1341+ 2F01 15 28 56 26                  dw          BASE, STORE         //      2 base !
1342+ 2F05              CPrefix_Endif_1:                                // endif
1343+ 2F05 02 25                        dw      EXIT
1344+ 2F07
1345+ 2F07              //  ______________________________________________________________________
1346+ 2F07
1347+ 2F07                              New_Def PDOM,   "PDOM", Create_Ptr, is_normal
1347+ 2F07             >
1347+ 2F07             >Dict_Ptr        defl    $
1347+ 2F07             >
1347+ 2F07             >//              ______________________________________________________________________
1347+ 2F07             >//              Heap part
1347+ 2F07             >
1347+ 2F07             >
1347+ 2F07             >                org     (Heap_Ptr & $1FFF) + $E000
1347+ E87F             >
1347+ E87F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1347+ E87F             >Latest_Definition defl  Heap_Ptr
1347+ E87F             >
1347+ E87F             >                // dummy db directives used to calculate length of namec
1347+ E87F 50 44 4F 4D >                db      "PDOM"
1347+ E883             >len_NFA         defl    $ - temp_NFA
1347+ E883             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1347+ E87F             >
1347+ E87F 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1347+ E880 50 44 4F 4D >                db      "PDOM"               // name string in 7-bit ascii, but
1347+ E884             >                org     $-1                 // alter last byte of Name just above to set
1347+ E883 CD          >                db      {b $} | END_BIT     // msb as name end
1347+ E884             >
1347+ E884 72 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1347+ E886             >Prev_Ptr        defl    Heap_Ptr
1347+ E886             >
1347+ E886             >mirror_Ptr      defl    $
1347+ E886             >
1347+ E886 09 2F       >                dw      Dict_Ptr + 2        // xt
1347+ E888             >Heap_Ptr        defl    $ - $E000           // save current HP
1347+ E888             >
1347+ E888             >Current_HP      defl  $ - $E000             // used to set HP once!
1347+ E888             >
1347+ E888             >//              ______________________________________________________________________
1347+ E888             >//              Dictionary part
1347+ E888             >
1347+ E888             >                org     Dict_Ptr
1347+ 2F07             >
1347+ 2F07 86 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1347+ 2F09             >
1347+ 2F09             >PDOM:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1347+ 2F09 CD CE 30    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
1347+ 2F0C             >
1347+ 2F0C             >
1347+ 2F0C             >                endif           ; ok        // for other definitions it "points" the correct handler
1347+ 2F0C             >                // Use of "; ok" to suppress "warning[fwdref]"
1347+ 2F0C             >
1347+ 2F0C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1348+ 2F0C 2C 2F 2D 3A                  db ',/-:'
1349+ 2F10
1350+ 2F10                              New_Def PCDM,   "PCDM", Create_Ptr, is_normal
1350+ 2F10             >
1350+ 2F10             >Dict_Ptr        defl    $
1350+ 2F10             >
1350+ 2F10             >//              ______________________________________________________________________
1350+ 2F10             >//              Heap part
1350+ 2F10             >
1350+ 2F10             >
1350+ 2F10             >                org     (Heap_Ptr & $1FFF) + $E000
1350+ E888             >
1350+ E888             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1350+ E888             >Latest_Definition defl  Heap_Ptr
1350+ E888             >
1350+ E888             >                // dummy db directives used to calculate length of namec
1350+ E888 50 43 44 4D >                db      "PCDM"
1350+ E88C             >len_NFA         defl    $ - temp_NFA
1350+ E88C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1350+ E888             >
1350+ E888 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1350+ E889 50 43 44 4D >                db      "PCDM"               // name string in 7-bit ascii, but
1350+ E88D             >                org     $-1                 // alter last byte of Name just above to set
1350+ E88C CD          >                db      {b $} | END_BIT     // msb as name end
1350+ E88D             >
1350+ E88D 7F 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1350+ E88F             >Prev_Ptr        defl    Heap_Ptr
1350+ E88F             >
1350+ E88F             >mirror_Ptr      defl    $
1350+ E88F             >
1350+ E88F 12 2F       >                dw      Dict_Ptr + 2        // xt
1350+ E891             >Heap_Ptr        defl    $ - $E000           // save current HP
1350+ E891             >
1350+ E891             >Current_HP      defl  $ - $E000             // used to set HP once!
1350+ E891             >
1350+ E891             >//              ______________________________________________________________________
1350+ E891             >//              Dictionary part
1350+ E891             >
1350+ E891             >                org     Dict_Ptr
1350+ 2F10             >
1350+ 2F10 8F 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1350+ 2F12             >
1350+ 2F12             >PCDM:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1350+ 2F12 CD CE 30    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
1350+ 2F15             >
1350+ 2F15             >
1350+ 2F15             >                endif           ; ok        // for other definitions it "points" the correct handler
1350+ 2F15             >                // Use of "; ok" to suppress "warning[fwdref]"
1350+ 2F15             >
1350+ 2F15             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1351+ 2F15 2E 2E 2E 2E                  db '....'
1352+ 2F19
1353+ 2F19              //  ______________________________________________________________________
1354+ 2F19              //
1355+ 2F19              // number       a -- d
1356+ 2F19                              Colon_Def NUMBER,  "NUMBER", is_normal
1356+ 2F19             >                New_Def  NUMBER, "NUMBER", Enter_Ptr, is_normal ; ok
1356+ 2F19             >
1356+ 2F19             >Dict_Ptr        defl    $
1356+ 2F19             >
1356+ 2F19             >//              ______________________________________________________________________
1356+ 2F19             >//              Heap part
1356+ 2F19             >
1356+ 2F19             >
1356+ 2F19             >                org     (Heap_Ptr & $1FFF) + $E000
1356+ E891             >
1356+ E891             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1356+ E891             >Latest_Definition defl  Heap_Ptr
1356+ E891             >
1356+ E891             >                // dummy db directives used to calculate length of namec
1356+ E891 4E 55 4D 42 >                db      "NUMBER"
1356+ E895 45 52       >
1356+ E897             >len_NFA         defl    $ - temp_NFA
1356+ E897             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1356+ E891             >
1356+ E891 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1356+ E892 4E 55 4D 42 >                db      "NUMBER"               // name string in 7-bit ascii, but
1356+ E896 45 52       >
1356+ E898             >                org     $-1                 // alter last byte of Name just above to set
1356+ E897 D2          >                db      {b $} | END_BIT     // msb as name end
1356+ E898             >
1356+ E898 88 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1356+ E89A             >Prev_Ptr        defl    Heap_Ptr
1356+ E89A             >
1356+ E89A             >mirror_Ptr      defl    $
1356+ E89A             >
1356+ E89A 1B 2F       >                dw      Dict_Ptr + 2        // xt
1356+ E89C             >Heap_Ptr        defl    $ - $E000           // save current HP
1356+ E89C             >
1356+ E89C             >Current_HP      defl  $ - $E000             // used to set HP once!
1356+ E89C             >
1356+ E89C             >//              ______________________________________________________________________
1356+ E89C             >//              Dictionary part
1356+ E89C             >
1356+ E89C             >                org     Dict_Ptr
1356+ 2F19             >
1356+ 2F19 9A 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1356+ 2F1B             >
1356+ 2F1B             >NUMBER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1356+ 2F1B CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1356+ 2F1E             >
1356+ 2F1E             >
1356+ 2F1E             >                endif           ; ok        // for other definitions it "points" the correct handler
1356+ 2F1E             >                // Use of "; ok" to suppress "warning[fwdref]"
1356+ 2F1E             >
1356+ 2F1E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1357+ 2F1E 44 27 44 27                  dw      ZERO, ZERO              // 0 0
1358+ 2F22 E2 25                        dw      ROT                     // rot
1359+ 2F24 4E 2E 0C 25                  dw      CSGN, TO_R              // (sgn) >r
1360+ 2F28 15 28 4C 26                  dw      BASE, FETCH, TO_R       // base @ >r  // ***
1360+ 2F2C 0C 25
1361+ 2F2E D0 2E                        dw      CPREFIX                 // (prefix)   // ***
1362+ 2F30 60 27 1B 28                  dw      NEG_ONE, DPL, STORE     // -1 dpl !
1362+ 2F34 56 26
1363+ 2F36 8B 2E                        dw      CNUMBER                 // (number)
1364+ 2F38              Number_Begin:                                   // begin
1365+ 2F38 DB 25 61 26                  dw        DUP, CFETCH             // dup c@
1366+ 2F3C 0C 25                        dw        TO_R                    // >r
1367+ 2F3E 12 2F 09 2F                  dw        PCDM, PDOM, LIT, 4      // pcdm pdom 4
1367+ 2F42 3D 20 04 00
1368+ 2F46 17 25                        dw        R_TO                    // r>
1369+ 2F48 F5 21                        dw        C_MAP                   // (map)
1370+ 2F4A 44 27 D4 25                  dw        ZERO, SWAP              // 0 swap
1371+ 2F4E 3D 20 2E 00                  dw        LIT, ".", EQUALS        // [char] . =  ( decimal point )
1371+ 2F52 B4 28
1372+ 2F54
1373+ 2F54 8F 20                        dw        ZBRANCH                 // if
1374+ 2F56 0A 00                        dw        Number_Endif_1 - $
1375+ 2F58 44 27 1B 28                  dw          ZERO, DPL, STORE        //      0 dpl !
1375+ 2F5C 56 26
1376+ 2F5E 6E 25                        dw          ONE_PLUS                //      1+
1377+ 2F60              Number_Endif_1:                                   // endif
1378+ 2F60
1379+ 2F60 8F 20                        dw      ZBRANCH                // while
1380+ 2F62 08 00                        dw      Number_While_end - $
1381+ 2F64 8B 2E                        dw        CNUMBER                 // (number)
1382+ 2F66 82 20                        dw      BRANCH
1383+ 2F68 D0 FF                        dw      Number_Begin - $
1384+ 2F6A              Number_While_end:                               // repeat
1385+ 2F6A
1386+ 2F6A 61 26 67 27                  dw      CFETCH, BL              // c@ bl
1387+ 2F6E A8 28 44 27                  dw      SUBTRACT, ZERO, QERROR  // - 0 ?error
1387+ 2F72 A5 2A
1388+ 2F74 17 25 15 28                  dw      R_TO, BASE, STORE       // r> base !  // ***
1388+ 2F78 56 26
1389+ 2F7A 17 25                        dw      R_TO                    // r>
1390+ 2F7C                                                              // if
1391+ 2F7C 8F 20                        dw      ZBRANCH
1392+ 2F7E 04 00                        dw      Number_Endif_2 - $
1393+ 2F80 A4 25                        dw          DMINUS              //      dminus
1394+ 2F82              Number_Endif_2:                                 // endif
1395+ 2F82 02 25                        dw      EXIT                    // ;
1396+ 2F84
1397+ 2F84              //  ______________________________________________________________________
1398+ 2F84              //
1399+ 2F84              // twofind      a -- d
1400+ 2F84                              Colon_Def TWOFIND,  "2FIND", is_normal
1400+ 2F84             >                New_Def  TWOFIND, "2FIND", Enter_Ptr, is_normal ; ok
1400+ 2F84             >
1400+ 2F84             >Dict_Ptr        defl    $
1400+ 2F84             >
1400+ 2F84             >//              ______________________________________________________________________
1400+ 2F84             >//              Heap part
1400+ 2F84             >
1400+ 2F84             >
1400+ 2F84             >                org     (Heap_Ptr & $1FFF) + $E000
1400+ E89C             >
1400+ E89C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1400+ E89C             >Latest_Definition defl  Heap_Ptr
1400+ E89C             >
1400+ E89C             >                // dummy db directives used to calculate length of namec
1400+ E89C 32 46 49 4E >                db      "2FIND"
1400+ E8A0 44          >
1400+ E8A1             >len_NFA         defl    $ - temp_NFA
1400+ E8A1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1400+ E89C             >
1400+ E89C 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1400+ E89D 32 46 49 4E >                db      "2FIND"               // name string in 7-bit ascii, but
1400+ E8A1 44          >
1400+ E8A2             >                org     $-1                 // alter last byte of Name just above to set
1400+ E8A1 C4          >                db      {b $} | END_BIT     // msb as name end
1400+ E8A2             >
1400+ E8A2 91 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1400+ E8A4             >Prev_Ptr        defl    Heap_Ptr
1400+ E8A4             >
1400+ E8A4             >mirror_Ptr      defl    $
1400+ E8A4             >
1400+ E8A4 86 2F       >                dw      Dict_Ptr + 2        // xt
1400+ E8A6             >Heap_Ptr        defl    $ - $E000           // save current HP
1400+ E8A6             >
1400+ E8A6             >Current_HP      defl  $ - $E000             // used to set HP once!
1400+ E8A6             >
1400+ E8A6             >//              ______________________________________________________________________
1400+ E8A6             >//              Dictionary part
1400+ E8A6             >
1400+ E8A6             >                org     Dict_Ptr
1400+ 2F84             >
1400+ 2F84 A4 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1400+ 2F86             >
1400+ 2F86             >TWOFIND:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1400+ 2F86 CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1400+ 2F89             >
1400+ 2F89             >
1400+ 2F89             >                endif           ; ok        // for other definitions it "points" the correct handler
1400+ 2F89             >                // Use of "; ok" to suppress "warning[fwdref]"
1400+ 2F89             >
1400+ 2F89             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1401+ 2F89 0C 25 22 25                  dw      TO_R, R_OP              // >r r@
1402+ 2F8D 03 28 4C 26                  dw      CONTEXT, FETCH, FETCH   // context @ @
1402+ 2F91 4C 26
1403+ 2F93 55 21                        dw      C_FIND                  // (find)
1404+ 2F95 13 29                        dw      QDUP                    // ?dup
1405+ 2F97 27 25                        dw      ZEQUAL                  // 0=
1406+ 2F99                                                              // if
1407+ 2F99 8F 20                        dw      ZBRANCH
1408+ 2F9B 24 00                        dw      LFind_Endif - $
1409+ 2F9D 22 25                        dw          R_OP                //      r@
1410+ 2F9F                              // dw          LATEST               //      latest
1411+ 2F9F 09 28 4C 26                  dw          CURRENT, FETCH, FETCH   // context @ @
1411+ 2FA3 4C 26
1412+ 2FA5 55 21                        dw          C_FIND              //      (find)
1413+ 2FA7
1414+ 2FA7 13 29                            dw      QDUP                    // ?dup
1415+ 2FA9 27 25                            dw      ZEQUAL                  // 0=
1416+ 2FAB                                                                  // if
1417+ 2FAB 8F 20                            dw      ZBRANCH
1418+ 2FAD 12 00                            dw      LFind_Endif2 - $
1419+ 2FAF 22 25                            dw          R_OP                //      r@
1420+ 2FB1 3D 20 00 32                      dw          LIT, FORTH, TO_BODY
1420+ 2FB5 24 2A
1421+ 2FB7 84 25 84 25                      dw          CELL_PLUS, CELL_PLUS
1422+ 2FBB 4C 26                            dw          FETCH
1423+ 2FBD 55 21                            dw          C_FIND              //      (find)
1424+ 2FBF              LFind_Endif2:                                    // endif
1425+ 2FBF
1426+ 2FBF
1427+ 2FBF              LFind_Endif:                                    // endif
1428+ 2FBF 17 25 C0 25                  dw      R_TO, DROP              // r> drop
1429+ 2FC3 02 25                        dw      EXIT                    // ;
1430+ 2FC5
1431+ 2FC5              //  ______________________________________________________________________
1432+ 2FC5              //
1433+ 2FC5              // -find        a -- d
1434+ 2FC5                              Colon_Def LFIND,  "-FIND", is_normal
1434+ 2FC5             >                New_Def  LFIND, "-FIND", Enter_Ptr, is_normal ; ok
1434+ 2FC5             >
1434+ 2FC5             >Dict_Ptr        defl    $
1434+ 2FC5             >
1434+ 2FC5             >//              ______________________________________________________________________
1434+ 2FC5             >//              Heap part
1434+ 2FC5             >
1434+ 2FC5             >
1434+ 2FC5             >                org     (Heap_Ptr & $1FFF) + $E000
1434+ E8A6             >
1434+ E8A6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1434+ E8A6             >Latest_Definition defl  Heap_Ptr
1434+ E8A6             >
1434+ E8A6             >                // dummy db directives used to calculate length of namec
1434+ E8A6 2D 46 49 4E >                db      "-FIND"
1434+ E8AA 44          >
1434+ E8AB             >len_NFA         defl    $ - temp_NFA
1434+ E8AB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1434+ E8A6             >
1434+ E8A6 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1434+ E8A7 2D 46 49 4E >                db      "-FIND"               // name string in 7-bit ascii, but
1434+ E8AB 44          >
1434+ E8AC             >                org     $-1                 // alter last byte of Name just above to set
1434+ E8AB C4          >                db      {b $} | END_BIT     // msb as name end
1434+ E8AC             >
1434+ E8AC 9C 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1434+ E8AE             >Prev_Ptr        defl    Heap_Ptr
1434+ E8AE             >
1434+ E8AE             >mirror_Ptr      defl    $
1434+ E8AE             >
1434+ E8AE C7 2F       >                dw      Dict_Ptr + 2        // xt
1434+ E8B0             >Heap_Ptr        defl    $ - $E000           // save current HP
1434+ E8B0             >
1434+ E8B0             >Current_HP      defl  $ - $E000             // used to set HP once!
1434+ E8B0             >
1434+ E8B0             >//              ______________________________________________________________________
1434+ E8B0             >//              Dictionary part
1434+ E8B0             >
1434+ E8B0             >                org     Dict_Ptr
1434+ 2FC5             >
1434+ 2FC5 AE 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1434+ 2FC7             >
1434+ 2FC7             >LFIND:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1434+ 2FC7 CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1434+ 2FCA             >
1434+ 2FCA             >
1434+ 2FCA             >                endif           ; ok        // for other definitions it "points" the correct handler
1434+ 2FCA             >                // Use of "; ok" to suppress "warning[fwdref]"
1434+ 2FCA             >
1434+ 2FCA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1435+ 2FCA 67 27 87 2D                  dw      BL, WORD                // bl word
1436+ 2FCE 86 2F                        dw      TWOFIND                 // 2find
1437+ 2FD0 02 25                        dw      EXIT                    // ;
1438+ 2FD2
1439+ 2FD2              //  ______________________________________________________________________
1440+ 2FD2              //
1441+ 2FD2              // (abort)      --
1442+ 2FD2                              Colon_Def CABORT,  "(ABORT)", is_normal
1442+ 2FD2             >                New_Def  CABORT, "(ABORT)", Enter_Ptr, is_normal ; ok
1442+ 2FD2             >
1442+ 2FD2             >Dict_Ptr        defl    $
1442+ 2FD2             >
1442+ 2FD2             >//              ______________________________________________________________________
1442+ 2FD2             >//              Heap part
1442+ 2FD2             >
1442+ 2FD2             >
1442+ 2FD2             >                org     (Heap_Ptr & $1FFF) + $E000
1442+ E8B0             >
1442+ E8B0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1442+ E8B0             >Latest_Definition defl  Heap_Ptr
1442+ E8B0             >
1442+ E8B0             >                // dummy db directives used to calculate length of namec
1442+ E8B0 28 41 42 4F >                db      "(ABORT)"
1442+ E8B4 52 54 29    >
1442+ E8B7             >len_NFA         defl    $ - temp_NFA
1442+ E8B7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1442+ E8B0             >
1442+ E8B0 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1442+ E8B1 28 41 42 4F >                db      "(ABORT)"               // name string in 7-bit ascii, but
1442+ E8B5 52 54 29    >
1442+ E8B8             >                org     $-1                 // alter last byte of Name just above to set
1442+ E8B7 A9          >                db      {b $} | END_BIT     // msb as name end
1442+ E8B8             >
1442+ E8B8 A6 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1442+ E8BA             >Prev_Ptr        defl    Heap_Ptr
1442+ E8BA             >
1442+ E8BA             >mirror_Ptr      defl    $
1442+ E8BA             >
1442+ E8BA D4 2F       >                dw      Dict_Ptr + 2        // xt
1442+ E8BC             >Heap_Ptr        defl    $ - $E000           // save current HP
1442+ E8BC             >
1442+ E8BC             >Current_HP      defl  $ - $E000             // used to set HP once!
1442+ E8BC             >
1442+ E8BC             >//              ______________________________________________________________________
1442+ E8BC             >//              Dictionary part
1442+ E8BC             >
1442+ E8BC             >                org     Dict_Ptr
1442+ 2FD2             >
1442+ 2FD2 BA 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1442+ 2FD4             >
1442+ 2FD4             >CABORT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1442+ 2FD4 CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1442+ 2FD7             >
1442+ 2FD7             >
1442+ 2FD7             >                endif           ; ok        // for other definitions it "points" the correct handler
1442+ 2FD7             >                // Use of "; ok" to suppress "warning[fwdref]"
1442+ 2FD7             >
1442+ 2FD7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1443+ 2FD7 67 32                        dw      ABORT                   // abort
1444+ 2FD9 02 25                        dw      EXIT                    // ;
1445+ 2FDB
1446+ 2FDB              //  ______________________________________________________________________
1447+ 2FDB              //
1448+ 2FDB              // error        n --
1449+ 2FDB              // raise an error
1450+ 2FDB              // if WARNING is 0, prints "MSG#n".
1451+ 2FDB              // if WARNING is 1, prints line n of screen 4.
1452+ 2FDB              // if WARNING is -1 does (ABORT) that normally does ABORT
1453+ 2FDB              // value can be negative or beyond block 4.
1454+ 2FDB                              Colon_Def ERROR,  "ERROR", is_normal
1454+ 2FDB             >                New_Def  ERROR, "ERROR", Enter_Ptr, is_normal ; ok
1454+ 2FDB             >
1454+ 2FDB             >Dict_Ptr        defl    $
1454+ 2FDB             >
1454+ 2FDB             >//              ______________________________________________________________________
1454+ 2FDB             >//              Heap part
1454+ 2FDB             >
1454+ 2FDB             >
1454+ 2FDB             >                org     (Heap_Ptr & $1FFF) + $E000
1454+ E8BC             >
1454+ E8BC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1454+ E8BC             >Latest_Definition defl  Heap_Ptr
1454+ E8BC             >
1454+ E8BC             >                // dummy db directives used to calculate length of namec
1454+ E8BC 45 52 52 4F >                db      "ERROR"
1454+ E8C0 52          >
1454+ E8C1             >len_NFA         defl    $ - temp_NFA
1454+ E8C1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1454+ E8BC             >
1454+ E8BC 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1454+ E8BD 45 52 52 4F >                db      "ERROR"               // name string in 7-bit ascii, but
1454+ E8C1 52          >
1454+ E8C2             >                org     $-1                 // alter last byte of Name just above to set
1454+ E8C1 D2          >                db      {b $} | END_BIT     // msb as name end
1454+ E8C2             >
1454+ E8C2 B0 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1454+ E8C4             >Prev_Ptr        defl    Heap_Ptr
1454+ E8C4             >
1454+ E8C4             >mirror_Ptr      defl    $
1454+ E8C4             >
1454+ E8C4 DD 2F       >                dw      Dict_Ptr + 2        // xt
1454+ E8C6             >Heap_Ptr        defl    $ - $E000           // save current HP
1454+ E8C6             >
1454+ E8C6             >Current_HP      defl  $ - $E000             // used to set HP once!
1454+ E8C6             >
1454+ E8C6             >//              ______________________________________________________________________
1454+ E8C6             >//              Dictionary part
1454+ E8C6             >
1454+ E8C6             >                org     Dict_Ptr
1454+ 2FDB             >
1454+ 2FDB C4 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1454+ 2FDD             >
1454+ 2FDD             >ERROR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1454+ 2FDD CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1454+ 2FE0             >
1454+ 2FE0             >
1454+ 2FE0             >                endif           ; ok        // for other definitions it "points" the correct handler
1454+ 2FE0             >                // Use of "; ok" to suppress "warning[fwdref]"
1454+ 2FE0             >
1454+ 2FE0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1455+ 2FE0 B5 27 4C 26                  dw      WARNING, FETCH, ZLESS   // warning @ 0<
1455+ 2FE4 3A 25
1456+ 2FE6                                                              // if
1457+ 2FE6 8F 20                        dw      ZBRANCH
1458+ 2FE8 04 00                        dw      Error_Endif_1 - $
1459+ 2FEA D4 2F                        dw          CABORT              //      (abort)
1460+ 2FEC              Error_Endif_1:                                  // endif
1461+ 2FEC 69 28 E1 2B                  dw      HERE, COUNT, TYPE       // here count type
1461+ 2FF0 35 2C
1462+ 2FF2 D2 2D                        dw      C_DOT_QUOTE             // .( ? )
1463+ 2FF4 02 3F 20                     db      2, "? "
1464+ 2FF7 9B 35                        dw      MESSAGE                 // message  ( forward )
1465+ 2FF9 9D 27 4C 26                  dw      S0, FETCH, SPSTORE      // s0 @ sp!
1465+ 2FFD F2 24
1466+ 2FFF E5 27 4C 26                  dw      BLK, FETCH, QDUP        // blk @ ?dup
1466+ 3003 13 29
1467+ 3005                                                              // if
1468+ 3005 8F 20                        dw      ZBRANCH
1469+ 3007 08 00                        dw      Error_Endif_2 - $
1470+ 3009 EB 27 4C 26                  dw          TO_IN, FETCH, SWAP  //      >in @ swap
1470+ 300D D4 25
1471+ 300F              Error_Endif_2:                                  // endif
1472+ 300F 2B 32                        dw      QUIT                    // quit ( forward )
1473+ 3011 02 25                        dw      EXIT                    // ;
1474+ 3013              //  ______________________________________________________________________
1475+ 3013              //
1476+ 3013              // id.          nfa --
1477+ 3013                              Colon_Def ID_DOT,  "ID.", is_normal
1477+ 3013             >                New_Def  ID_DOT, "ID.", Enter_Ptr, is_normal ; ok
1477+ 3013             >
1477+ 3013             >Dict_Ptr        defl    $
1477+ 3013             >
1477+ 3013             >//              ______________________________________________________________________
1477+ 3013             >//              Heap part
1477+ 3013             >
1477+ 3013             >
1477+ 3013             >                org     (Heap_Ptr & $1FFF) + $E000
1477+ E8C6             >
1477+ E8C6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1477+ E8C6             >Latest_Definition defl  Heap_Ptr
1477+ E8C6             >
1477+ E8C6             >                // dummy db directives used to calculate length of namec
1477+ E8C6 49 44 2E    >                db      "ID."
1477+ E8C9             >len_NFA         defl    $ - temp_NFA
1477+ E8C9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1477+ E8C6             >
1477+ E8C6 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1477+ E8C7 49 44 2E    >                db      "ID."               // name string in 7-bit ascii, but
1477+ E8CA             >                org     $-1                 // alter last byte of Name just above to set
1477+ E8C9 AE          >                db      {b $} | END_BIT     // msb as name end
1477+ E8CA             >
1477+ E8CA BC 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1477+ E8CC             >Prev_Ptr        defl    Heap_Ptr
1477+ E8CC             >
1477+ E8CC             >mirror_Ptr      defl    $
1477+ E8CC             >
1477+ E8CC 15 30       >                dw      Dict_Ptr + 2        // xt
1477+ E8CE             >Heap_Ptr        defl    $ - $E000           // save current HP
1477+ E8CE             >
1477+ E8CE             >Current_HP      defl  $ - $E000             // used to set HP once!
1477+ E8CE             >
1477+ E8CE             >//              ______________________________________________________________________
1477+ E8CE             >//              Dictionary part
1477+ E8CE             >
1477+ E8CE             >                org     Dict_Ptr
1477+ 3013             >
1477+ 3013 CC 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1477+ 3015             >
1477+ 3015             >ID_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1477+ 3015 CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1477+ 3018             >
1477+ 3018             >
1477+ 3018             >                endif           ; ok        // for other definitions it "points" the correct handler
1477+ 3018             >                // Use of "; ok" to suppress "warning[fwdref]"
1477+ 3018             >
1477+ 3018             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1478+ 3018 C9 29                        dw      QTOHEAP
1479+ 301A DB 25 4B 27                  dw      DUP, ONE, TRAVERSE      // dup 1 traverse
1479+ 301E 45 29
1480+ 3020 6E 25                        dw      ONE_PLUS                // 1+
1481+ 3022 B7 25 A8 28                  dw      OVER, SUBTRACT          // over -
1482+ 3026 DB 25 0C 25                  dw      DUP, TO_R               // >r
1483+ 302A 78 2D D4 25                  dw      PAD, SWAP               // pad swap
1484+ 302E 43 24                        dw      CMOVE                   // cmove
1485+ 3030 78 2D 6E 25                  dw      PAD, ONE_PLUS           // pad 1+
1486+ 3034 17 25 75 25                  dw      R_TO, ONE_SUBTRACT      // R> 1-
1487+ 3038 35 2C 3A 29                  dw      TYPE, SPACE             // type
1488+ 303C 02 25                        dw      EXIT                    // ;
1489+ 303E
1490+ 303E              //  ______________________________________________________________________
1491+ 303E              //
1492+ 303E              // code         -- cccc
1493+ 303E                              Colon_Def CODE,  "CODE", is_normal
1493+ 303E             >                New_Def  CODE, "CODE", Enter_Ptr, is_normal ; ok
1493+ 303E             >
1493+ 303E             >Dict_Ptr        defl    $
1493+ 303E             >
1493+ 303E             >//              ______________________________________________________________________
1493+ 303E             >//              Heap part
1493+ 303E             >
1493+ 303E             >
1493+ 303E             >                org     (Heap_Ptr & $1FFF) + $E000
1493+ E8CE             >
1493+ E8CE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1493+ E8CE             >Latest_Definition defl  Heap_Ptr
1493+ E8CE             >
1493+ E8CE             >                // dummy db directives used to calculate length of namec
1493+ E8CE 43 4F 44 45 >                db      "CODE"
1493+ E8D2             >len_NFA         defl    $ - temp_NFA
1493+ E8D2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1493+ E8CE             >
1493+ E8CE 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1493+ E8CF 43 4F 44 45 >                db      "CODE"               // name string in 7-bit ascii, but
1493+ E8D3             >                org     $-1                 // alter last byte of Name just above to set
1493+ E8D2 C5          >                db      {b $} | END_BIT     // msb as name end
1493+ E8D3             >
1493+ E8D3 C6 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1493+ E8D5             >Prev_Ptr        defl    Heap_Ptr
1493+ E8D5             >
1493+ E8D5             >mirror_Ptr      defl    $
1493+ E8D5             >
1493+ E8D5 40 30       >                dw      Dict_Ptr + 2        // xt
1493+ E8D7             >Heap_Ptr        defl    $ - $E000           // save current HP
1493+ E8D7             >
1493+ E8D7             >Current_HP      defl  $ - $E000             // used to set HP once!
1493+ E8D7             >
1493+ E8D7             >//              ______________________________________________________________________
1493+ E8D7             >//              Dictionary part
1493+ E8D7             >
1493+ E8D7             >                org     Dict_Ptr
1493+ 303E             >
1493+ 303E D5 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1493+ 3040             >
1493+ 3040             >CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1493+ 3040 CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1493+ 3043             >
1493+ 3043             >
1493+ 3043             >                endif           ; ok        // for other definitions it "points" the correct handler
1493+ 3043             >                // Use of "; ok" to suppress "warning[fwdref]"
1493+ 3043             >
1493+ 3043             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1494+ 3043 C7 2F                        dw      LFIND                   // -find
1495+ 3045                                                              // if
1496+ 3045 8F 20                        dw      ZBRANCH
1497+ 3047 10 00                        dw      Code_Endif - $
1498+ 3049 C0 25                        dw          DROP                //      drop
1499+ 304B 2F 2A 15 30                  dw          TO_NAME, ID_DOT     //      >name id.
1500+ 304F 3D 20 04 00                  dw          LIT, 4, MESSAGE     //      4 message
1500+ 3053 9B 35
1501+ 3055 3A 29                        dw          SPACE               //      space
1502+ 3057              Code_Endif:                                     // endif
1503+ 3057 69 28                        dw      HERE                    // here
1504+ 3059                                                              // ( ---- here begins NFA ---- )
1505+ 3059 DB 25 61 26                  dw      DUP, CFETCH             // dup c@
1506+ 305D AF 27 4C 26                  dw      WIDTH, FETCH, MIN       // width @ min  ( max 31 character length )
1506+ 3061 ED 28
1507+ 3063 6E 25                        dw      ONE_PLUS                // 1+
1508+ 3065 DB 25 74 28                  dw      DUP, ALLOT              // dup allot
1509+ 3069 84 25 84 25                  dw      CELL_PLUS, CELL_PLUS    // cell+ cell+
1510+ 306D 0C 25                        dw      TO_R                    // >r
1511+ 306F DB 25                        dw      DUP                     // dup
1512+ 3071 3D 20                        dw      LIT
1513+ 3073 A0 00                        dw      SMUDGE_BIT | END_BIT    // 160
1514+ 3075 43 26                        dw      TOGGLE                  // toggle
1515+ 3077 69 28 75 25                  dw      HERE, ONE_SUBTRACT      // here 1- ( last character )
1516+ 307B 3D 20 80 00                  dw      LIT, END_BIT, TOGGLE    // 128 toggle
1516+ 307F 43 26
1517+ 3081                                                              // ( ---- here is LFA ---- )
1518+ 3081 09 28 4C 26                  dw      CURRENT, FETCH, FETCH   // current @ @ , \ latest ,
1518+ 3085 4C 26
1519+ 3087 7F 28                        dw      COMMA
1520+ 3089 DB 25 84 25                  dw      DUP, CELL_PLUS, COMMA   // dup cell+ ,
1520+ 308D 7F 28
1521+ 308F DA 29                        dw      HP_FETCH                // hp@
1522+ 3091 09 28 4C 26                  dw      CURRENT, FETCH, STORE   // current @ ! ( save this word as the latest )
1522+ 3095 56 26
1523+ 3097 DA 29 AB 29                  dw      HP_FETCH, FAR           // hp@ far R@ cmove
1524+ 309B 22 25 43 24                  dw      R_OP, CMOVE
1525+ 309F 22 25 96 25                  dw      R_OP, MINUS, ALLOT      // r@ negate allot
1525+ 30A3 74 28
1526+ 30A5 17 25 D9 27                  dw      R_TO, HP, PLUSSTORE     // r> hp +!
1526+ 30A9 34 26
1527+ 30AB DA 29 89 25                  dw      HP_FETCH, CELL_MINUS    // hp@ cell- ,
1528+ 30AF 7F 28                        dw      COMMA
1529+ 30B1 44 27 EC 29                  dw      ZERO, SKIP_HP_PAGE
1530+ 30B5                                                              // ( ---- here is LFA ---- )
1531+ 30B5 02 25                        dw      EXIT                    // ;
1532+ 30B7
1533+ 30B7              //  ______________________________________________________________________
1534+ 30B7              //
1535+ 30B7              // create       -- cccc     ( compile time )
1536+ 30B7              //              -- a        ( run time )
1537+ 30B7                              Colon_Def CREATE,  "CREATE", is_normal
1537+ 30B7             >                New_Def  CREATE, "CREATE", Enter_Ptr, is_normal ; ok
1537+ 30B7             >
1537+ 30B7             >Dict_Ptr        defl    $
1537+ 30B7             >
1537+ 30B7             >//              ______________________________________________________________________
1537+ 30B7             >//              Heap part
1537+ 30B7             >
1537+ 30B7             >
1537+ 30B7             >                org     (Heap_Ptr & $1FFF) + $E000
1537+ E8D7             >
1537+ E8D7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1537+ E8D7             >Latest_Definition defl  Heap_Ptr
1537+ E8D7             >
1537+ E8D7             >                // dummy db directives used to calculate length of namec
1537+ E8D7 43 52 45 41 >                db      "CREATE"
1537+ E8DB 54 45       >
1537+ E8DD             >len_NFA         defl    $ - temp_NFA
1537+ E8DD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1537+ E8D7             >
1537+ E8D7 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1537+ E8D8 43 52 45 41 >                db      "CREATE"               // name string in 7-bit ascii, but
1537+ E8DC 54 45       >
1537+ E8DE             >                org     $-1                 // alter last byte of Name just above to set
1537+ E8DD C5          >                db      {b $} | END_BIT     // msb as name end
1537+ E8DE             >
1537+ E8DE CE 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1537+ E8E0             >Prev_Ptr        defl    Heap_Ptr
1537+ E8E0             >
1537+ E8E0             >mirror_Ptr      defl    $
1537+ E8E0             >
1537+ E8E0 B9 30       >                dw      Dict_Ptr + 2        // xt
1537+ E8E2             >Heap_Ptr        defl    $ - $E000           // save current HP
1537+ E8E2             >
1537+ E8E2             >Current_HP      defl  $ - $E000             // used to set HP once!
1537+ E8E2             >
1537+ E8E2             >//              ______________________________________________________________________
1537+ E8E2             >//              Dictionary part
1537+ E8E2             >
1537+ E8E2             >                org     Dict_Ptr
1537+ 30B7             >
1537+ 30B7 E0 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1537+ 30B9             >
1537+ 30B9             >CREATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1537+ 30B9 CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1537+ 30BC             >
1537+ 30BC             >
1537+ 30BC             >                endif           ; ok        // for other definitions it "points" the correct handler
1537+ 30BC             >                // Use of "; ok" to suppress "warning[fwdref]"
1537+ 30BC             >
1537+ 30BC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1538+ 30BC 40 30 51 2B                  dw      CODE, SMUDGE            // code smudge
1539+ 30C0 3D 20 CD 00                  dw      LIT, $CD, CCOMMA        // 00CD c,
1539+ 30C4 8E 28
1540+ 30C6 3D 20 2B 27                  dw      LIT, Variable_Ptr, COMMA// Variable_Ptr ,
1540+ 30CA 7F 28
1541+ 30CC 8D 2B                        dw      C_SEMICOLON_CODE
1542+ 30CE                              // this routine is called from the call coded in CFA
1543+ 30CE              Create_Ptr:
1544+ 30CE
1545+ 30CE
1546+ 30CE
1547+ 30CE                              next
1547+ 30CE DD E9       >                jp      (ix)
1548+ 30D0
1549+ 30D0              //  ______________________________________________________________________
1550+ 30D0              //
1551+ 30D0              // [compile]    -- cccc     ( compile time )
1552+ 30D0                              Colon_Def COMPILE_IMMEDIATE,  "[COMPILE]", is_immediate
1552+ 30D0             >                New_Def  COMPILE_IMMEDIATE, "[COMPILE]", Enter_Ptr, is_immediate ; ok
1552+ 30D0             >
1552+ 30D0             >Dict_Ptr        defl    $
1552+ 30D0             >
1552+ 30D0             >//              ______________________________________________________________________
1552+ 30D0             >//              Heap part
1552+ 30D0             >
1552+ 30D0             >
1552+ 30D0             >                org     (Heap_Ptr & $1FFF) + $E000
1552+ E8E2             >
1552+ E8E2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1552+ E8E2             >Latest_Definition defl  Heap_Ptr
1552+ E8E2             >
1552+ E8E2             >                // dummy db directives used to calculate length of namec
1552+ E8E2 5B 43 4F 4D >                db      "[COMPILE]"
1552+ E8E6 50 49 4C 45 >
1552+ E8EA 5D          >
1552+ E8EB             >len_NFA         defl    $ - temp_NFA
1552+ E8EB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1552+ E8E2             >
1552+ E8E2 C9          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1552+ E8E3 5B 43 4F 4D >                db      "[COMPILE]"               // name string in 7-bit ascii, but
1552+ E8E7 50 49 4C 45 >
1552+ E8EB 5D          >
1552+ E8EC             >                org     $-1                 // alter last byte of Name just above to set
1552+ E8EB DD          >                db      {b $} | END_BIT     // msb as name end
1552+ E8EC             >
1552+ E8EC D7 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1552+ E8EE             >Prev_Ptr        defl    Heap_Ptr
1552+ E8EE             >
1552+ E8EE             >mirror_Ptr      defl    $
1552+ E8EE             >
1552+ E8EE D2 30       >                dw      Dict_Ptr + 2        // xt
1552+ E8F0             >Heap_Ptr        defl    $ - $E000           // save current HP
1552+ E8F0             >
1552+ E8F0             >Current_HP      defl  $ - $E000             // used to set HP once!
1552+ E8F0             >
1552+ E8F0             >//              ______________________________________________________________________
1552+ E8F0             >//              Dictionary part
1552+ E8F0             >
1552+ E8F0             >                org     Dict_Ptr
1552+ 30D0             >
1552+ 30D0 EE 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1552+ 30D2             >
1552+ 30D2             >COMPILE_IMMEDIATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1552+ 30D2 CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1552+ 30D5             >
1552+ 30D5             >
1552+ 30D5             >                endif           ; ok        // for other definitions it "points" the correct handler
1552+ 30D5             >                // Use of "; ok" to suppress "warning[fwdref]"
1552+ 30D5             >
1552+ 30D5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1553+ 30D5 C7 2F                        dw      LFIND                   // -find      (  cfa  b  f  )
1554+ 30D7 27 25                        dw      ZEQUAL                  // 0=         (  cfa  b  )
1555+ 30D9 44 27 A5 2A                  dw      ZERO, QERROR            // 0 ?error
1556+ 30DD C0 25                        dw      DROP                    // drop       (  cfa  )
1557+ 30DF 7F 28                        dw      COMMA                   // ,
1558+ 30E1 02 25                        dw      EXIT                    // ; immediate
1559+ 30E3
1560+ 30E3              //  ______________________________________________________________________
1561+ 30E3              //
1562+ 30E3              // literal      n --      ( compile time )
1563+ 30E3                              Colon_Def LITERAL,  "LITERAL", is_immediate
1563+ 30E3             >                New_Def  LITERAL, "LITERAL", Enter_Ptr, is_immediate ; ok
1563+ 30E3             >
1563+ 30E3             >Dict_Ptr        defl    $
1563+ 30E3             >
1563+ 30E3             >//              ______________________________________________________________________
1563+ 30E3             >//              Heap part
1563+ 30E3             >
1563+ 30E3             >
1563+ 30E3             >                org     (Heap_Ptr & $1FFF) + $E000
1563+ E8F0             >
1563+ E8F0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1563+ E8F0             >Latest_Definition defl  Heap_Ptr
1563+ E8F0             >
1563+ E8F0             >                // dummy db directives used to calculate length of namec
1563+ E8F0 4C 49 54 45 >                db      "LITERAL"
1563+ E8F4 52 41 4C    >
1563+ E8F7             >len_NFA         defl    $ - temp_NFA
1563+ E8F7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1563+ E8F0             >
1563+ E8F0 C7          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1563+ E8F1 4C 49 54 45 >                db      "LITERAL"               // name string in 7-bit ascii, but
1563+ E8F5 52 41 4C    >
1563+ E8F8             >                org     $-1                 // alter last byte of Name just above to set
1563+ E8F7 CC          >                db      {b $} | END_BIT     // msb as name end
1563+ E8F8             >
1563+ E8F8 E2 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1563+ E8FA             >Prev_Ptr        defl    Heap_Ptr
1563+ E8FA             >
1563+ E8FA             >mirror_Ptr      defl    $
1563+ E8FA             >
1563+ E8FA E5 30       >                dw      Dict_Ptr + 2        // xt
1563+ E8FC             >Heap_Ptr        defl    $ - $E000           // save current HP
1563+ E8FC             >
1563+ E8FC             >Current_HP      defl  $ - $E000             // used to set HP once!
1563+ E8FC             >
1563+ E8FC             >//              ______________________________________________________________________
1563+ E8FC             >//              Dictionary part
1563+ E8FC             >
1563+ E8FC             >                org     Dict_Ptr
1563+ 30E3             >
1563+ 30E3 FA 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1563+ 30E5             >
1563+ 30E5             >LITERAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1563+ 30E5 CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1563+ 30E8             >
1563+ 30E8             >
1563+ 30E8             >                endif           ; ok        // for other definitions it "points" the correct handler
1563+ 30E8             >                // Use of "; ok" to suppress "warning[fwdref]"
1563+ 30E8             >
1563+ 30E8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1564+ 30E8 0F 28 4C 26                  dw      STATE, FETCH            // state @
1565+ 30EC                                                              // if
1566+ 30EC 8F 20                        dw      ZBRANCH
1567+ 30EE 08 00                        dw      Literal_Endif - $
1568+ 30F0 15 2B 3D 20                  dw          COMPILE, LIT        //      compile lit
1569+ 30F4 7F 28                        dw          COMMA               //      ,
1570+ 30F6              Literal_Endif:                                  // endif
1571+ 30F6 02 25                        dw      EXIT                    // ; immediate
1572+ 30F8
1573+ 30F8              //  ______________________________________________________________________
1574+ 30F8              //
1575+ 30F8              // dliteral     n --      ( compile time )
1576+ 30F8                              Colon_Def DLITERAL,  "DLITERAL", is_immediate
1576+ 30F8             >                New_Def  DLITERAL, "DLITERAL", Enter_Ptr, is_immediate ; ok
1576+ 30F8             >
1576+ 30F8             >Dict_Ptr        defl    $
1576+ 30F8             >
1576+ 30F8             >//              ______________________________________________________________________
1576+ 30F8             >//              Heap part
1576+ 30F8             >
1576+ 30F8             >
1576+ 30F8             >                org     (Heap_Ptr & $1FFF) + $E000
1576+ E8FC             >
1576+ E8FC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1576+ E8FC             >Latest_Definition defl  Heap_Ptr
1576+ E8FC             >
1576+ E8FC             >                // dummy db directives used to calculate length of namec
1576+ E8FC 44 4C 49 54 >                db      "DLITERAL"
1576+ E900 45 52 41 4C >
1576+ E904             >len_NFA         defl    $ - temp_NFA
1576+ E904             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1576+ E8FC             >
1576+ E8FC C8          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1576+ E8FD 44 4C 49 54 >                db      "DLITERAL"               // name string in 7-bit ascii, but
1576+ E901 45 52 41 4C >
1576+ E905             >                org     $-1                 // alter last byte of Name just above to set
1576+ E904 CC          >                db      {b $} | END_BIT     // msb as name end
1576+ E905             >
1576+ E905 F0 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1576+ E907             >Prev_Ptr        defl    Heap_Ptr
1576+ E907             >
1576+ E907             >mirror_Ptr      defl    $
1576+ E907             >
1576+ E907 FA 30       >                dw      Dict_Ptr + 2        // xt
1576+ E909             >Heap_Ptr        defl    $ - $E000           // save current HP
1576+ E909             >
1576+ E909             >Current_HP      defl  $ - $E000             // used to set HP once!
1576+ E909             >
1576+ E909             >//              ______________________________________________________________________
1576+ E909             >//              Dictionary part
1576+ E909             >
1576+ E909             >                org     Dict_Ptr
1576+ 30F8             >
1576+ 30F8 07 09       >                dw      mirror_Ptr - $E000 + Heap_offset
1576+ 30FA             >
1576+ 30FA             >DLITERAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1576+ 30FA CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1576+ 30FD             >
1576+ 30FD             >
1576+ 30FD             >                endif           ; ok        // for other definitions it "points" the correct handler
1576+ 30FD             >                // Use of "; ok" to suppress "warning[fwdref]"
1576+ 30FD             >
1576+ 30FD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1577+ 30FD 0F 28 4C 26                  dw      STATE, FETCH            // state @
1578+ 3101                                                              // if
1579+ 3101 8F 20                        dw      ZBRANCH
1580+ 3103 08 00                        dw      DLiteral_Endif - $
1581+ 3105 D4 25                        dw          SWAP                //      swap
1582+ 3107 E5 30 E5 30                  dw          LITERAL,  LITERAL   //      [compile] literal [compile] literal
1583+ 310B              DLiteral_Endif:                                 // endif
1584+ 310B 02 25                        dw      EXIT                    // ; immediate
1585+ 310D
1586+ 310D              //  ______________________________________________________________________
1587+ 310D              //
1588+ 310D              // [char]       n --      ( compile time )
1589+ 310D              // inside colon definition, gets first character from next input word
1590+ 310D              // and compiles it as literal.
1591+ 310D                              Colon_Def COMPILE_CHAR,  "[CHAR]", is_immediate
1591+ 310D             >                New_Def  COMPILE_CHAR, "[CHAR]", Enter_Ptr, is_immediate ; ok
1591+ 310D             >
1591+ 310D             >Dict_Ptr        defl    $
1591+ 310D             >
1591+ 310D             >//              ______________________________________________________________________
1591+ 310D             >//              Heap part
1591+ 310D             >
1591+ 310D             >
1591+ 310D             >                org     (Heap_Ptr & $1FFF) + $E000
1591+ E909             >
1591+ E909             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1591+ E909             >Latest_Definition defl  Heap_Ptr
1591+ E909             >
1591+ E909             >                // dummy db directives used to calculate length of namec
1591+ E909 5B 43 48 41 >                db      "[CHAR]"
1591+ E90D 52 5D       >
1591+ E90F             >len_NFA         defl    $ - temp_NFA
1591+ E90F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1591+ E909             >
1591+ E909 C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1591+ E90A 5B 43 48 41 >                db      "[CHAR]"               // name string in 7-bit ascii, but
1591+ E90E 52 5D       >
1591+ E910             >                org     $-1                 // alter last byte of Name just above to set
1591+ E90F DD          >                db      {b $} | END_BIT     // msb as name end
1591+ E910             >
1591+ E910 FC 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1591+ E912             >Prev_Ptr        defl    Heap_Ptr
1591+ E912             >
1591+ E912             >mirror_Ptr      defl    $
1591+ E912             >
1591+ E912 0F 31       >                dw      Dict_Ptr + 2        // xt
1591+ E914             >Heap_Ptr        defl    $ - $E000           // save current HP
1591+ E914             >
1591+ E914             >Current_HP      defl  $ - $E000             // used to set HP once!
1591+ E914             >
1591+ E914             >//              ______________________________________________________________________
1591+ E914             >//              Dictionary part
1591+ E914             >
1591+ E914             >                org     Dict_Ptr
1591+ 310D             >
1591+ 310D 12 09       >                dw      mirror_Ptr - $E000 + Heap_offset
1591+ 310F             >
1591+ 310F             >COMPILE_CHAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1591+ 310F CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1591+ 3112             >
1591+ 3112             >
1591+ 3112             >                endif           ; ok        // for other definitions it "points" the correct handler
1591+ 3112             >                // Use of "; ok" to suppress "warning[fwdref]"
1591+ 3112             >
1591+ 3112             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1592+ 3112 E9 2D E5 30                  dw      CHAR, LITERAL           // char [compile] literal
1593+ 3116 02 25                        dw      EXIT                    // ; immediate
1594+ 3118
1595+ 3118              //  ______________________________________________________________________
1596+ 3118              //
1597+ 3118              // 0x00         n --      ( compile time )
1598+ 3118                              Colon_Def NUL_WORD,  $00, is_immediate
1598+ 3118             >                New_Def  NUL_WORD, $00, Enter_Ptr, is_immediate ; ok
1598+ 3118             >
1598+ 3118             >Dict_Ptr        defl    $
1598+ 3118             >
1598+ 3118             >//              ______________________________________________________________________
1598+ 3118             >//              Heap part
1598+ 3118             >
1598+ 3118             >
1598+ 3118             >                org     (Heap_Ptr & $1FFF) + $E000
1598+ E914             >
1598+ E914             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1598+ E914             >Latest_Definition defl  Heap_Ptr
1598+ E914             >
1598+ E914             >                // dummy db directives used to calculate length of namec
1598+ E914 00          >                db      $00
1598+ E915             >len_NFA         defl    $ - temp_NFA
1598+ E915             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1598+ E914             >
1598+ E914 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1598+ E915 00          >                db      $00               // name string in 7-bit ascii, but
1598+ E916             >                org     $-1                 // alter last byte of Name just above to set
1598+ E915 80          >                db      {b $} | END_BIT     // msb as name end
1598+ E916             >
1598+ E916 09 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1598+ E918             >Prev_Ptr        defl    Heap_Ptr
1598+ E918             >
1598+ E918             >mirror_Ptr      defl    $
1598+ E918             >
1598+ E918 1A 31       >                dw      Dict_Ptr + 2        // xt
1598+ E91A             >Heap_Ptr        defl    $ - $E000           // save current HP
1598+ E91A             >
1598+ E91A             >Current_HP      defl  $ - $E000             // used to set HP once!
1598+ E91A             >
1598+ E91A             >//              ______________________________________________________________________
1598+ E91A             >//              Dictionary part
1598+ E91A             >
1598+ E91A             >                org     Dict_Ptr
1598+ 3118             >
1598+ 3118 18 09       >                dw      mirror_Ptr - $E000 + Heap_offset
1598+ 311A             >
1598+ 311A             >NUL_WORD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1598+ 311A CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1598+ 311D             >
1598+ 311D             >
1598+ 311D             >                endif           ; ok        // for other definitions it "points" the correct handler
1598+ 311D             >                // Use of "; ok" to suppress "warning[fwdref]"
1598+ 311D             >
1598+ 311D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1599+ 311D E5 27 4C 26                  dw      BLK, FETCH, ONE         // blk @ 1
1599+ 3121 4B 27
1600+ 3123 E2 28                        dw      GREATER                 // > if
1601+ 3125                                                              // if
1602+ 3125 8F 20                        dw      ZBRANCH
1603+ 3127 28 00                        dw      Nul_Else_1 - $
1604+ 3129 4B 27 E5 27                  dw          ONE, BLK, PLUSSTORE //      1 blk +!
1604+ 312D 34 26
1605+ 312F 44 27 EB 27                  dw          ZERO, TO_IN, STORE  //      0 >in !
1605+ 3133 56 26
1606+ 3135 E5 27 4C 26                  dw          BLK, FETCH          //      blk @
1607+ 3139 7C 27                        dw          BSCR                //      b/scr
1608+ 313B 75 25                        dw          ONE_SUBTRACT        //      1 -
1609+ 313D C2 24                        dw          AND_OP              //      and  ( this is tricky )
1610+ 313F 27 25                        dw          ZEQUAL              //      0=
1611+ 3141                                                              //      if
1612+ 3141 8F 20                        dw          ZBRANCH
1613+ 3143 08 00                        dw          Nul_Endif_2 - $
1614+ 3145 CD 2A                        dw              QEXEC           //          ?exec
1615+ 3147 17 25 C0 25                  dw              R_TO, DROP      //          r> drop
1616+ 314B              Nul_Endif_2:                                    //      endif
1617+ 314B 82 20                        dw      BRANCH
1618+ 314D 06 00                        dw      Nul_Endif_1 - $
1619+ 314F              Nul_Else_1:                                     // else
1620+ 314F 17 25 C0 25                  dw          R_TO, DROP          //      r> drop
1621+ 3153              Nul_Endif_1:                                    // endif
1622+ 3153 02 25                        dw      EXIT                    // ;
1623+ 3155
1624+ 3155              //  ______________________________________________________________________
1625+ 3155              //
1626+ 3155              // ?stack       --
1627+ 3155              // Raise error #1 if stack is empty and you pop it
1628+ 3155              // Raise error #7 if stack is full.
1629+ 3155              // This means SP must always stay between HERE and FFFF
1630+ 3155              // For 128K BANK paging purpose SP must be <= BFE0 and 50 words room
1631+ 3155              // for Next 8K MMU paging this is $DOE8
1632+ 3155                              Colon_Def QSTACK, "?STACK", is_normal
1632+ 3155             >                New_Def  QSTACK, "?STACK", Enter_Ptr, is_normal ; ok
1632+ 3155             >
1632+ 3155             >Dict_Ptr        defl    $
1632+ 3155             >
1632+ 3155             >//              ______________________________________________________________________
1632+ 3155             >//              Heap part
1632+ 3155             >
1632+ 3155             >
1632+ 3155             >                org     (Heap_Ptr & $1FFF) + $E000
1632+ E91A             >
1632+ E91A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1632+ E91A             >Latest_Definition defl  Heap_Ptr
1632+ E91A             >
1632+ E91A             >                // dummy db directives used to calculate length of namec
1632+ E91A 3F 53 54 41 >                db      "?STACK"
1632+ E91E 43 4B       >
1632+ E920             >len_NFA         defl    $ - temp_NFA
1632+ E920             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1632+ E91A             >
1632+ E91A 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1632+ E91B 3F 53 54 41 >                db      "?STACK"               // name string in 7-bit ascii, but
1632+ E91F 43 4B       >
1632+ E921             >                org     $-1                 // alter last byte of Name just above to set
1632+ E920 CB          >                db      {b $} | END_BIT     // msb as name end
1632+ E921             >
1632+ E921 14 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1632+ E923             >Prev_Ptr        defl    Heap_Ptr
1632+ E923             >
1632+ E923             >mirror_Ptr      defl    $
1632+ E923             >
1632+ E923 57 31       >                dw      Dict_Ptr + 2        // xt
1632+ E925             >Heap_Ptr        defl    $ - $E000           // save current HP
1632+ E925             >
1632+ E925             >Current_HP      defl  $ - $E000             // used to set HP once!
1632+ E925             >
1632+ E925             >//              ______________________________________________________________________
1632+ E925             >//              Dictionary part
1632+ E925             >
1632+ E925             >                org     Dict_Ptr
1632+ 3155             >
1632+ 3155 23 09       >                dw      mirror_Ptr - $E000 + Heap_offset
1632+ 3157             >
1632+ 3157             >QSTACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1632+ 3157 CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1632+ 315A             >
1632+ 315A             >
1632+ 315A             >                endif           ; ok        // for other definitions it "points" the correct handler
1632+ 315A             >                // Use of "; ok" to suppress "warning[fwdref]"
1632+ 315A             >
1632+ 315A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1633+ 315A E9 24                        dw      SPFETCH                 // sp@
1634+ 315C 9D 27 4C 26                  dw      S0, FETCH               // s0 @
1635+ 3160 D4 25 BF 28                  dw      SWAP, ULESS             // swap u<
1636+ 3164 4B 27 A5 2A                  dw      ONE, QERROR             // 1 ?error
1637+ 3168 69 28                        dw      HERE                    // here
1638+ 316A 9D 27 4C 26                  dw      S0, FETCH, LESS         // s0 @ <
1638+ 316E CD 28
1639+ 3170                                                              // if
1640+ 3170 8F 20                        dw      ZBRANCH
1641+ 3172 14 00                        dw      QStack_Endif - $
1642+ 3174 E9 24                        dw          SPFETCH             //      sp@
1643+ 3176 69 28 3D 20                  dw          HERE, LIT, 128      //      here 128
1643+ 317A 80 00
1644+ 317C 55 25 BF 28                  dw          PLUS, ULESS         //      plus u<
1645+ 3180 3D 20 07 00                  dw          LIT, 7, QERROR      //      7 Cerror
1645+ 3184 A5 2A
1646+ 3186              QStack_Endif:                                   // endif
1647+ 3186 02 25                        dw      EXIT                    // ;
1648+ 3188
1649+ 3188
# file closed: C:\Zx\CSpect\Projects\vForth17_DOT/source/L1.asm
 123  3188                              include "L2.asm"
# file opened: C:\Zx\CSpect\Projects\vForth17_DOT/source/L2.asm
   1+ 3188              //  ______________________________________________________________________
   2+ 3188              //
   3+ 3188              //  L2.asm
   4+ 3188              //
   5+ 3188              //  Level-2 3dos
   6+ 3188              //  the Forth interpreter, vocabulary, cold/warm start and quit from Forth.
   7+ 3188              //  ______________________________________________________________________
   8+ 3188
   9+ 3188
  10+ 3188              //  ______________________________________________________________________
  11+ 3188              //
  12+ 3188              // interpret    --
  13+ 3188              // This is the text interpreter.
  14+ 3188              // It executes or compiles, depending on STATE, the text coming from
  15+ 3188              // current input stream.
  16+ 3188              // If the word search fails after parsing CONTEXT and CURRENT vocabulary,
  17+ 3188              // the word is interpreted as numeric and converted, using current BASE,
  18+ 3188              // leaving on top of stack a single or double precision number, depending
  19+ 3188              // on the presence of a decimal point.
  20+ 3188              // If the number conversion fails, the terminal is notified with ? followed
  21+ 3188              // by the offending word.
  22+ 3188                              Colon_Def INTERPRET, "INTERPRET", is_normal
  22+ 3188             >                New_Def  INTERPRET, "INTERPRET", Enter_Ptr, is_normal ; ok
  22+ 3188             >
  22+ 3188             >Dict_Ptr        defl    $
  22+ 3188             >
  22+ 3188             >//              ______________________________________________________________________
  22+ 3188             >//              Heap part
  22+ 3188             >
  22+ 3188             >
  22+ 3188             >                org     (Heap_Ptr & $1FFF) + $E000
  22+ E925             >
  22+ E925             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  22+ E925             >Latest_Definition defl  Heap_Ptr
  22+ E925             >
  22+ E925             >                // dummy db directives used to calculate length of namec
  22+ E925 49 4E 54 45 >                db      "INTERPRET"
  22+ E929 52 50 52 45 >
  22+ E92D 54          >
  22+ E92E             >len_NFA         defl    $ - temp_NFA
  22+ E92E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  22+ E925             >
  22+ E925 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  22+ E926 49 4E 54 45 >                db      "INTERPRET"               // name string in 7-bit ascii, but
  22+ E92A 52 50 52 45 >
  22+ E92E 54          >
  22+ E92F             >                org     $-1                 // alter last byte of Name just above to set
  22+ E92E D4          >                db      {b $} | END_BIT     // msb as name end
  22+ E92F             >
  22+ E92F 1A 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  22+ E931             >Prev_Ptr        defl    Heap_Ptr
  22+ E931             >
  22+ E931             >mirror_Ptr      defl    $
  22+ E931             >
  22+ E931 8A 31       >                dw      Dict_Ptr + 2        // xt
  22+ E933             >Heap_Ptr        defl    $ - $E000           // save current HP
  22+ E933             >
  22+ E933             >Current_HP      defl  $ - $E000             // used to set HP once!
  22+ E933             >
  22+ E933             >//              ______________________________________________________________________
  22+ E933             >//              Dictionary part
  22+ E933             >
  22+ E933             >                org     Dict_Ptr
  22+ 3188             >
  22+ 3188 31 09       >                dw      mirror_Ptr - $E000 + Heap_offset
  22+ 318A             >
  22+ 318A             >INTERPRET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  22+ 318A CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  22+ 318D             >
  22+ 318D             >
  22+ 318D             >                endif           ; ok        // for other definitions it "points" the correct handler
  22+ 318D             >                // Use of "; ok" to suppress "warning[fwdref]"
  22+ 318D             >
  22+ 318D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  23+ 318D
  24+ 318D              Interpret_Begin:                                        // begin
  25+ 318D C7 2F                        dw          LFIND                       //      -find
  26+ 318F                                                                      //      if
  27+ 318F 8F 20                        dw          ZBRANCH
  28+ 3191 1A 00                        dw          Interpret_Else_1 - $
  29+ 3193 0F 28 4C 26                  dw              STATE, FETCH, LESS      //          state @ <
  29+ 3197 CD 28
  30+ 3199                                                                      //          if
  31+ 3199 8F 20                        dw              ZBRANCH
  32+ 319B 08 00                        dw              Interpret_Else_2 - $
  33+ 319D 2A 2B                        dw                  COMPILE_XT          //              compile,
  34+ 319F                                                                      //          else
  35+ 319F 82 20                        dw              BRANCH
  36+ 31A1 06 00                        dw              Interpret_Endif_2 - $
  37+ 31A3              Interpret_Else_2:
  38+ 31A3 48 20 0B 27                  dw                  EXECUTE, NOOP       //              execute nooop
  39+ 31A7              Interpret_Endif_2:                                      //          endif
  40+ 31A7                                                                      //      else
  41+ 31A7 82 20                        dw          BRANCH
  42+ 31A9 1A 00                        dw          Interpret_Endif_1 - $
  43+ 31AB              Interpret_Else_1:
  44+ 31AB 69 28 1B 2F                  dw              HERE, NUMBER            //          here number
  45+ 31AF 1B 28 4C 26                  dw              DPL, FETCH, ONE_PLUS    //          dpl @ 1+
  45+ 31B3 6E 25
  46+ 31B5                                                                      //          if
  47+ 31B5 8F 20                        dw              ZBRANCH
  48+ 31B7 08 00                        dw              Interpret_Else_3 - $
  49+ 31B9              //              dw                  NMODE, FETCH        //              nmode @
  50+ 31B9              //                                                      //              if
  51+ 31B9              //              dw                  ZBRANCH
  52+ 31B9              //              dw                  Interpret_Endif_4 - $
  53+ 31B9              //              dw                      ONE, ZERO       //                  1 0
  54+ 31B9              //              dw                      TWO_DROP        //                  2drop
  55+ 31B9              //Interpret_Endif_4:                                      //              endif
  56+ 31B9 FA 30                        dw                  DLITERAL            //              [compile] dliteral
  57+ 31BB                                                                      //          else
  58+ 31BB 82 20                        dw              BRANCH
  59+ 31BD 06 00                        dw              Interpret_Endif_3 - $
  60+ 31BF              Interpret_Else_3:
  61+ 31BF C0 25                        dw                  DROP                //              drop
  62+ 31C1 E5 30                        dw                  LITERAL             //              [compile]  literal
  63+ 31C3              Interpret_Endif_3:                                      //          endif
  64+ 31C3              Interpret_Endif_1:                                      //      endif
  65+ 31C3 57 31                        dw          QSTACK                      //      ?stack
  66+ 31C5 59 23                        dw          QTERMINAL                   //      ?terminal
  67+ 31C7                                                                      //      if
  68+ 31C7 8F 20                        dw          ZBRANCH
  69+ 31C9 04 00                        dw          Interpret_Endif_5 - $
  70+ 31CB 2B 32                        dw              QUIT                    //          quit
  71+ 31CD              Interpret_Endif_5:                                      //      endif
  72+ 31CD 82 20                        dw      BRANCH
  73+ 31CF BE FF                        dw      Interpret_Begin - $
  74+ 31D1 02 25                        dw      EXIT                            // ;
  75+ 31D3
  76+ 31D3              //  ______________________________________________________________________
  77+ 31D3              //
  78+ 31D3              // vocabulary   -- cccc     ( compile time )
  79+ 31D3              // Defining word used in the form   VOCABULARY cccc
  80+ 31D3              // creates the word  cccc  that gives the name to the vocabulary.
  81+ 31D3              // Giving  cccc  makes the vocabulary CONTEXT so its words are executed first
  82+ 31D3              // Giving  cccc DEFINITIONS makes  the vocabulary  CURRENT
  83+ 31D3              // so new definitions can be inserted in that vocabulary.
  84+ 31D3                              Colon_Def VOCABULARY, "VOCABULARY", is_normal
  84+ 31D3             >                New_Def  VOCABULARY, "VOCABULARY", Enter_Ptr, is_normal ; ok
  84+ 31D3             >
  84+ 31D3             >Dict_Ptr        defl    $
  84+ 31D3             >
  84+ 31D3             >//              ______________________________________________________________________
  84+ 31D3             >//              Heap part
  84+ 31D3             >
  84+ 31D3             >
  84+ 31D3             >                org     (Heap_Ptr & $1FFF) + $E000
  84+ E933             >
  84+ E933             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  84+ E933             >Latest_Definition defl  Heap_Ptr
  84+ E933             >
  84+ E933             >                // dummy db directives used to calculate length of namec
  84+ E933 56 4F 43 41 >                db      "VOCABULARY"
  84+ E937 42 55 4C 41 >
  84+ E93B 52 59       >
  84+ E93D             >len_NFA         defl    $ - temp_NFA
  84+ E93D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  84+ E933             >
  84+ E933 8A          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  84+ E934 56 4F 43 41 >                db      "VOCABULARY"               // name string in 7-bit ascii, but
  84+ E938 42 55 4C 41 >
  84+ E93C 52 59       >
  84+ E93E             >                org     $-1                 // alter last byte of Name just above to set
  84+ E93D D9          >                db      {b $} | END_BIT     // msb as name end
  84+ E93E             >
  84+ E93E 25 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  84+ E940             >Prev_Ptr        defl    Heap_Ptr
  84+ E940             >
  84+ E940             >mirror_Ptr      defl    $
  84+ E940             >
  84+ E940 D5 31       >                dw      Dict_Ptr + 2        // xt
  84+ E942             >Heap_Ptr        defl    $ - $E000           // save current HP
  84+ E942             >
  84+ E942             >Current_HP      defl  $ - $E000             // used to set HP once!
  84+ E942             >
  84+ E942             >//              ______________________________________________________________________
  84+ E942             >//              Dictionary part
  84+ E942             >
  84+ E942             >                org     Dict_Ptr
  84+ 31D3             >
  84+ 31D3 40 09       >                dw      mirror_Ptr - $E000 + Heap_offset
  84+ 31D5             >
  84+ 31D5             >VOCABULARY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  84+ 31D5 CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  84+ 31D8             >
  84+ 31D8             >
  84+ 31D8             >                endif           ; ok        // for other definitions it "points" the correct handler
  84+ 31D8             >                // Use of "; ok" to suppress "warning[fwdref]"
  84+ 31D8             >
  84+ 31D8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  85+ 31D8
  86+ 31D8 B9 2B                        dw      CBUILDS
  87+ 31DA
  88+ 31DA                              // dummy word + link part
  89+ 31DA 3D 20 81 A0                  dw      LIT, $A081, COMMA       // $81A0 ,
  89+ 31DE 7F 28
  90+ 31E0 09 28 4C 26                  dw      CURRENT, FETCH          // current @
  91+ 31E4 4C 26                        dw      FETCH                   // @
  92+ 31E6                          //  dw      CELL_MINUS              // cell-
  93+ 31E6 7F 28                        dw      COMMA                   // ,
  94+ 31E8
  95+ 31E8                              // voc-link part
  96+ 31E8 69 28                        dw      HERE                    // here
  97+ 31EA C7 27 4C 26                  dw      VOC_LINK, FETCH         // voc-link @
  98+ 31EE 7F 28                        dw      COMMA                   // ,
  99+ 31F0 C7 27 56 26                  dw      VOC_LINK, STORE         // voc-link !
 100+ 31F4                              // DOES part
 101+ 31F4 C4 2B                        dw      DOES_TO                 // does>
 102+ 31F6              Vocabulary_Does:
 103+ 31F6 84 25                        dw      CELL_PLUS               // cell+
 104+ 31F8 03 28 56 26                  dw      CONTEXT, STORE          // context !
 105+ 31FC 02 25                        dw      EXIT                    // ;
 106+ 31FE
 107+ 31FE              //  ______________________________________________________________________
 108+ 31FE              //
 109+ 31FE              // forth        --
 110+ 31FE              // Name of the first vocabulary.
 111+ 31FE              // It makes FORTH the CONTEXT vocabulary.
 112+ 31FE              // Until new user vocabulary are defined, new colon-definitions becomes
 113+ 31FE              // part of FORTH. It is immediate, so it will executed during the creation
 114+ 31FE              // of a colon definition to be able to select the vocabulary.
 115+ 31FE
 116+ 31FE                              New_Def FORTH, "FORTH", Does_Ptr, is_immediate
 116+ 31FE             >
 116+ 31FE             >Dict_Ptr        defl    $
 116+ 31FE             >
 116+ 31FE             >//              ______________________________________________________________________
 116+ 31FE             >//              Heap part
 116+ 31FE             >
 116+ 31FE             >
 116+ 31FE             >                org     (Heap_Ptr & $1FFF) + $E000
 116+ E942             >
 116+ E942             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 116+ E942             >Latest_Definition defl  Heap_Ptr
 116+ E942             >
 116+ E942             >                // dummy db directives used to calculate length of namec
 116+ E942 46 4F 52 54 >                db      "FORTH"
 116+ E946 48          >
 116+ E947             >len_NFA         defl    $ - temp_NFA
 116+ E947             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 116+ E942             >
 116+ E942 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 116+ E943 46 4F 52 54 >                db      "FORTH"               // name string in 7-bit ascii, but
 116+ E947 48          >
 116+ E948             >                org     $-1                 // alter last byte of Name just above to set
 116+ E947 C8          >                db      {b $} | END_BIT     // msb as name end
 116+ E948             >
 116+ E948 33 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 116+ E94A             >Prev_Ptr        defl    Heap_Ptr
 116+ E94A             >
 116+ E94A             >mirror_Ptr      defl    $
 116+ E94A             >
 116+ E94A 00 32       >                dw      Dict_Ptr + 2        // xt
 116+ E94C             >Heap_Ptr        defl    $ - $E000           // save current HP
 116+ E94C             >
 116+ E94C             >Current_HP      defl  $ - $E000             // used to set HP once!
 116+ E94C             >
 116+ E94C             >//              ______________________________________________________________________
 116+ E94C             >//              Dictionary part
 116+ E94C             >
 116+ E94C             >                org     Dict_Ptr
 116+ 31FE             >
 116+ 31FE 4A 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 116+ 3200             >
 116+ 3200             >FORTH:          if Does_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 116+ 3200 CD D1 2B    >                call    Does_Ptr ; ok        // for primitive definitions  actual code
 116+ 3203             >
 116+ 3203             >
 116+ 3203             >                endif           ; ok        // for other definitions it "points" the correct handler
 116+ 3203             >                // Use of "; ok" to suppress "warning[fwdref]"
 116+ 3203             >
 116+ 3203             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 117+ 3203 F6 31                        dw      Vocabulary_Does
 118+ 3205
 119+ 3205 81 A0                        db      $81, $A0
 120+ 3207              Forth_Latest_Ptr:
 121+ 3207 42 09                        dw      Latest_Definition
 122+ 3209              Voclink_Ptr:
 123+ 3209 00 00                        dw      0
 124+ 320B
 125+ 320B              // ____
 126+ 320B              // temp_VOC        defl    $                   // save this address
 127+ 320B              //              org     (Heap_Ptr & $1FFF) + $E000
 128+ 320B              //              db      $81, $A0
 129+ 320B              // Forth_Latest_Ptr_HEAP:
 130+ 320B              //                 dw      Latest_Definition
 131+ 320B              // Voclink_Ptr_HEAP:
 132+ 320B              //                 dw      0
 133+ 320B              // Heap_Ptr        defl    $ - $E000           // save current HP
 134+ 320B              //                 org     temp_VOC
 135+ 320B              // ____
 136+ 320B
 137+ 320B              // Any new vocabulary is structured as follow:
 138+ 320B              // PFA+0 points to DOES> part of VOCABULARY to perform CELL+ CONTEXT !
 139+ 320B              // PFA+2 is 81,A0 i.e. a null-word used as LATEST in the new vocabulary
 140+ 320B              // PFA+4 always contains the LATEST word of this VOCABULARY.
 141+ 320B              //       at creations it points to the null-word of its parent vocabulary
 142+ 320B              //       that is normally FORTH, For example ASSEMBLER points FORTH's null-word
 143+ 320B              // PFA+6 is the pointer that builds up the vocabulary linked list.
 144+ 320B              //       FORTH has 0 here to signal the end of the list and user's variable
 145+ 320B              //       VOC-LINK points to PFA+6 of the newest vocabulary created.
 146+ 320B              //       While FORTH is the only vocabulary, VOC-LINK points to FORTH's PFA+6
 147+ 320B              //       When ASSEMBLER is created, its PFA+6 points to FORTH's PFA+6, and so on
 148+ 320B
 149+ 320B              //  ______________________________________________________________________
 150+ 320B              //
 151+ 320B              // definitions  --
 152+ 320B              // Used in the form  cccc DEFINITIONS
 153+ 320B              // set the CURRENT vocabulary at CONTEXT to insert new definitions in
 154+ 320B              // vocabulary cccc.
 155+ 320B                              Colon_Def DEFINITIONS, "DEFINITIONS", is_normal
 155+ 320B             >                New_Def  DEFINITIONS, "DEFINITIONS", Enter_Ptr, is_normal ; ok
 155+ 320B             >
 155+ 320B             >Dict_Ptr        defl    $
 155+ 320B             >
 155+ 320B             >//              ______________________________________________________________________
 155+ 320B             >//              Heap part
 155+ 320B             >
 155+ 320B             >
 155+ 320B             >                org     (Heap_Ptr & $1FFF) + $E000
 155+ E94C             >
 155+ E94C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 155+ E94C             >Latest_Definition defl  Heap_Ptr
 155+ E94C             >
 155+ E94C             >                // dummy db directives used to calculate length of namec
 155+ E94C 44 45 46 49 >                db      "DEFINITIONS"
 155+ E950 4E 49 54 49 >
 155+ E954 4F 4E 53    >
 155+ E957             >len_NFA         defl    $ - temp_NFA
 155+ E957             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 155+ E94C             >
 155+ E94C 8B          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 155+ E94D 44 45 46 49 >                db      "DEFINITIONS"               // name string in 7-bit ascii, but
 155+ E951 4E 49 54 49 >
 155+ E955 4F 4E 53    >
 155+ E958             >                org     $-1                 // alter last byte of Name just above to set
 155+ E957 D3          >                db      {b $} | END_BIT     // msb as name end
 155+ E958             >
 155+ E958 42 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 155+ E95A             >Prev_Ptr        defl    Heap_Ptr
 155+ E95A             >
 155+ E95A             >mirror_Ptr      defl    $
 155+ E95A             >
 155+ E95A 0D 32       >                dw      Dict_Ptr + 2        // xt
 155+ E95C             >Heap_Ptr        defl    $ - $E000           // save current HP
 155+ E95C             >
 155+ E95C             >Current_HP      defl  $ - $E000             // used to set HP once!
 155+ E95C             >
 155+ E95C             >//              ______________________________________________________________________
 155+ E95C             >//              Dictionary part
 155+ E95C             >
 155+ E95C             >                org     Dict_Ptr
 155+ 320B             >
 155+ 320B 5A 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 155+ 320D             >
 155+ 320D             >DEFINITIONS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 155+ 320D CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 155+ 3210             >
 155+ 3210             >
 155+ 3210             >                endif           ; ok        // for other definitions it "points" the correct handler
 155+ 3210             >                // Use of "; ok" to suppress "warning[fwdref]"
 155+ 3210             >
 155+ 3210             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 156+ 3210 03 28 4C 26                  dw      CONTEXT, FETCH          // context @
 157+ 3214 09 28 56 26                  dw      CURRENT, STORE          // current !
 158+ 3218 02 25                        dw      EXIT                    // ;
 159+ 321A
 160+ 321A              //  ______________________________________________________________________
 161+ 321A              //
 162+ 321A              // (            -- cccc )
 163+ 321A              // the following text is interpreted as a comment until a closing )
 164+ 321A                              Colon_Def COMMENT_BRAKET, "(", is_immediate
 164+ 321A             >                New_Def  COMMENT_BRAKET, "(", Enter_Ptr, is_immediate ; ok
 164+ 321A             >
 164+ 321A             >Dict_Ptr        defl    $
 164+ 321A             >
 164+ 321A             >//              ______________________________________________________________________
 164+ 321A             >//              Heap part
 164+ 321A             >
 164+ 321A             >
 164+ 321A             >                org     (Heap_Ptr & $1FFF) + $E000
 164+ E95C             >
 164+ E95C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 164+ E95C             >Latest_Definition defl  Heap_Ptr
 164+ E95C             >
 164+ E95C             >                // dummy db directives used to calculate length of namec
 164+ E95C 28          >                db      "("
 164+ E95D             >len_NFA         defl    $ - temp_NFA
 164+ E95D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 164+ E95C             >
 164+ E95C C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 164+ E95D 28          >                db      "("               // name string in 7-bit ascii, but
 164+ E95E             >                org     $-1                 // alter last byte of Name just above to set
 164+ E95D A8          >                db      {b $} | END_BIT     // msb as name end
 164+ E95E             >
 164+ E95E 4C 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 164+ E960             >Prev_Ptr        defl    Heap_Ptr
 164+ E960             >
 164+ E960             >mirror_Ptr      defl    $
 164+ E960             >
 164+ E960 1C 32       >                dw      Dict_Ptr + 2        // xt
 164+ E962             >Heap_Ptr        defl    $ - $E000           // save current HP
 164+ E962             >
 164+ E962             >Current_HP      defl  $ - $E000             // used to set HP once!
 164+ E962             >
 164+ E962             >//              ______________________________________________________________________
 164+ E962             >//              Dictionary part
 164+ E962             >
 164+ E962             >                org     Dict_Ptr
 164+ 321A             >
 164+ 321A 60 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 164+ 321C             >
 164+ 321C             >COMMENT_BRAKET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 164+ 321C CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 164+ 321F             >
 164+ 321F             >
 164+ 321F             >                endif           ; ok        // for other definitions it "points" the correct handler
 164+ 321F             >                // Use of "; ok" to suppress "warning[fwdref]"
 164+ 321F             >
 164+ 321F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 165+ 321F 3D 20 29 00                  dw      LIT, ")"                // [char] )
 166+ 3223 87 2D C0 25                  dw      WORD, DROP              // word drop
 167+ 3227 02 25                        dw      EXIT                    // ;
 168+ 3229
 169+ 3229              //  ______________________________________________________________________
 170+ 3229              //
 171+ 3229              // quit         --
 172+ 3229              // \ Erase the return-stack, stop any compilation and give controlo to the console. No message is issued.
 173+ 3229                              Colon_Def QUIT, "QUIT", is_normal
 173+ 3229             >                New_Def  QUIT, "QUIT", Enter_Ptr, is_normal ; ok
 173+ 3229             >
 173+ 3229             >Dict_Ptr        defl    $
 173+ 3229             >
 173+ 3229             >//              ______________________________________________________________________
 173+ 3229             >//              Heap part
 173+ 3229             >
 173+ 3229             >
 173+ 3229             >                org     (Heap_Ptr & $1FFF) + $E000
 173+ E962             >
 173+ E962             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 173+ E962             >Latest_Definition defl  Heap_Ptr
 173+ E962             >
 173+ E962             >                // dummy db directives used to calculate length of namec
 173+ E962 51 55 49 54 >                db      "QUIT"
 173+ E966             >len_NFA         defl    $ - temp_NFA
 173+ E966             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 173+ E962             >
 173+ E962 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 173+ E963 51 55 49 54 >                db      "QUIT"               // name string in 7-bit ascii, but
 173+ E967             >                org     $-1                 // alter last byte of Name just above to set
 173+ E966 D4          >                db      {b $} | END_BIT     // msb as name end
 173+ E967             >
 173+ E967 5C 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 173+ E969             >Prev_Ptr        defl    Heap_Ptr
 173+ E969             >
 173+ E969             >mirror_Ptr      defl    $
 173+ E969             >
 173+ E969 2B 32       >                dw      Dict_Ptr + 2        // xt
 173+ E96B             >Heap_Ptr        defl    $ - $E000           // save current HP
 173+ E96B             >
 173+ E96B             >Current_HP      defl  $ - $E000             // used to set HP once!
 173+ E96B             >
 173+ E96B             >//              ______________________________________________________________________
 173+ E96B             >//              Dictionary part
 173+ E96B             >
 173+ E96B             >                org     Dict_Ptr
 173+ 3229             >
 173+ 3229 69 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 173+ 322B             >
 173+ 322B             >QUIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 173+ 322B CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 173+ 322E             >
 173+ 322E             >
 173+ 322E             >                endif           ; ok        // for other definitions it "points" the correct handler
 173+ 322E             >                // Use of "; ok" to suppress "warning[fwdref]"
 173+ 322E             >
 173+ 322E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 174+ 322E
 175+ 322E 51 28 4C 26                  dw      SOURCE_ID, FETCH        // source-id @
 176+ 3232 A6 23 C0 25                  dw      F_CLOSE, DROP           // f_close drop
 177+ 3236 44 27 51 28                  dw      ZERO, SOURCE_ID, STORE  // 0 source-id !
 177+ 323A 56 26
 178+ 323C 44 27 E5 27                  dw      ZERO, BLK, STORE        // 0 blk !
 178+ 3240 56 26
 179+ 3242 35 2B                        dw      SQUARED_OPEN            // [compile] [
 180+ 3244                                                              // begin
 181+ 3244              Quit_Begin:
 182+ 3244 A3 27 4C 26                  dw      R0, FETCH, RPSTORE      //      r0 @ rp!
 182+ 3248 FD 24
C:\Zx\CSpect\Projects\vForth17_DOT/source/L2.asm(183): error: Label not found: CR
 183+ 324A 00 00                        dw      CR                      //      cr
 184+ 324C 24 2D                        dw      QUERY                   //      query
 185+ 324E              Next_Breakpoint_1:
 186+ 324E 8A 31                        dw      INTERPRET               //      interpret
 187+ 3250 0F 28 4C 26                  dw      STATE, FETCH, ZEQUAL    //      state @ 0=
 187+ 3254 27 25
 188+ 3256                                                              //      if
 189+ 3256 8F 20                        dw      ZBRANCH
 190+ 3258 07 00                        dw      Quit_Endif - $
 191+ 325A D2 2D                        dw          C_DOT_QUOTE
 192+ 325C 02 6F 6B                     db          2, "ok"             //          .( ok)
 193+ 325F              Quit_Endif:                                     //      else
 194+ 325F                                                              // again
 195+ 325F 82 20                        dw      BRANCH
 196+ 3261 E3 FF                        dw      Quit_Begin - $
 197+ 3263 02 25                        dw      EXIT                    // ;
 198+ 3265
 199+ 3265              //  ______________________________________________________________________
 200+ 3265              //
 201+ 3265              // abort        --
 202+ 3265                              Colon_Def ABORT, "ABORT", is_normal
 202+ 3265             >                New_Def  ABORT, "ABORT", Enter_Ptr, is_normal ; ok
 202+ 3265             >
 202+ 3265             >Dict_Ptr        defl    $
 202+ 3265             >
 202+ 3265             >//              ______________________________________________________________________
 202+ 3265             >//              Heap part
 202+ 3265             >
 202+ 3265             >
 202+ 3265             >                org     (Heap_Ptr & $1FFF) + $E000
 202+ E96B             >
 202+ E96B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 202+ E96B             >Latest_Definition defl  Heap_Ptr
 202+ E96B             >
 202+ E96B             >                // dummy db directives used to calculate length of namec
 202+ E96B 41 42 4F 52 >                db      "ABORT"
 202+ E96F 54          >
 202+ E970             >len_NFA         defl    $ - temp_NFA
 202+ E970             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 202+ E96B             >
 202+ E96B 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 202+ E96C 41 42 4F 52 >                db      "ABORT"               // name string in 7-bit ascii, but
 202+ E970 54          >
 202+ E971             >                org     $-1                 // alter last byte of Name just above to set
 202+ E970 D4          >                db      {b $} | END_BIT     // msb as name end
 202+ E971             >
 202+ E971 62 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 202+ E973             >Prev_Ptr        defl    Heap_Ptr
 202+ E973             >
 202+ E973             >mirror_Ptr      defl    $
 202+ E973             >
 202+ E973 67 32       >                dw      Dict_Ptr + 2        // xt
 202+ E975             >Heap_Ptr        defl    $ - $E000           // save current HP
 202+ E975             >
 202+ E975             >Current_HP      defl  $ - $E000             // used to set HP once!
 202+ E975             >
 202+ E975             >//              ______________________________________________________________________
 202+ E975             >//              Dictionary part
 202+ E975             >
 202+ E975             >                org     Dict_Ptr
 202+ 3265             >
 202+ 3265 73 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 202+ 3267             >
 202+ 3267             >ABORT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 202+ 3267 CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 202+ 326A             >
 202+ 326A             >
 202+ 326A             >                endif           ; ok        // for other definitions it "points" the correct handler
 202+ 326A             >                // Use of "; ok" to suppress "warning[fwdref]"
 202+ 326A             >
 202+ 326A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 203+ 326A 9D 27 4C 26                  dw      S0, FETCH               // s0 @
 204+ 326E 67 27                        dw      BL                      // bl
 205+ 3270 B7 25 56 26                  dw      OVER, STORE             // over !
 206+ 3274 F2 24                        dw      SPSTORE                 // sp!
 207+ 3276 7E 2B                        dw      DECIMAL                 // decimal
 208+ 3278 00 32                        dw      FORTH                   // [compile] forth
 209+ 327A 0D 32                        dw      DEFINITIONS             // definitions
 210+ 327C
 211+ 327C 35 2B                        dw      SQUARED_OPEN            // [compile] [
 212+ 327E A3 27 4C 26                  dw      R0, FETCH, RPSTORE      //      r0 @ rp!
 212+ 3282 FD 24
 213+ 3284
 214+ 3284              Autoexec_Ptr:
 215+ 3284 C2 3D                        dw      AUTOEXEC                // autoexec, patched to noop
 216+ 3286                          //  dw      NOOP
 217+ 3286 2B 32                        dw      QUIT                   // quit
 218+ 3288 02 25                        dw      EXIT                    // ;
 219+ 328A
 220+ 328A              //  ______________________________________________________________________
 221+ 328A              //
 222+ 328A              // warm         --
 223+ 328A                              Colon_Def WARM, "WARM", is_normal
 223+ 328A             >                New_Def  WARM, "WARM", Enter_Ptr, is_normal ; ok
 223+ 328A             >
 223+ 328A             >Dict_Ptr        defl    $
 223+ 328A             >
 223+ 328A             >//              ______________________________________________________________________
 223+ 328A             >//              Heap part
 223+ 328A             >
 223+ 328A             >
 223+ 328A             >                org     (Heap_Ptr & $1FFF) + $E000
 223+ E975             >
 223+ E975             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 223+ E975             >Latest_Definition defl  Heap_Ptr
 223+ E975             >
 223+ E975             >                // dummy db directives used to calculate length of namec
 223+ E975 57 41 52 4D >                db      "WARM"
 223+ E979             >len_NFA         defl    $ - temp_NFA
 223+ E979             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 223+ E975             >
 223+ E975 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 223+ E976 57 41 52 4D >                db      "WARM"               // name string in 7-bit ascii, but
 223+ E97A             >                org     $-1                 // alter last byte of Name just above to set
 223+ E979 CD          >                db      {b $} | END_BIT     // msb as name end
 223+ E97A             >
 223+ E97A 6B 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 223+ E97C             >Prev_Ptr        defl    Heap_Ptr
 223+ E97C             >
 223+ E97C             >mirror_Ptr      defl    $
 223+ E97C             >
 223+ E97C 8C 32       >                dw      Dict_Ptr + 2        // xt
 223+ E97E             >Heap_Ptr        defl    $ - $E000           // save current HP
 223+ E97E             >
 223+ E97E             >Current_HP      defl  $ - $E000             // used to set HP once!
 223+ E97E             >
 223+ E97E             >//              ______________________________________________________________________
 223+ E97E             >//              Dictionary part
 223+ E97E             >
 223+ E97E             >                org     Dict_Ptr
 223+ 328A             >
 223+ 328A 7C 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 223+ 328C             >
 223+ 328C             >WARM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 223+ 328C CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 223+ 328F             >
 223+ 328F             >
 223+ 328F             >                endif           ; ok        // for other definitions it "points" the correct handler
 223+ 328F             >                // Use of "; ok" to suppress "warning[fwdref]"
 223+ 328F             >
 223+ 328F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 224+ 328F 61 36                        dw      BLK_INIT                // blk-init
 225+ 3291 9E 3D                        dw      SPLASH                  // splash
 226+ 3293 3D 20 07 00                  dw      LIT, 7, EMIT            // 7 emit
 226+ 3297 23 29
 227+ 3299 67 32                        dw      ABORT                   // abort
 228+ 329B 02 25                        dw      EXIT                    // exit
 229+ 329D
 230+ 329D              //  ______________________________________________________________________
 231+ 329D              //
 232+ 329D              // cold         --
 233+ 329D                              Colon_Def COLD, "COLD", is_normal
 233+ 329D             >                New_Def  COLD, "COLD", Enter_Ptr, is_normal ; ok
 233+ 329D             >
 233+ 329D             >Dict_Ptr        defl    $
 233+ 329D             >
 233+ 329D             >//              ______________________________________________________________________
 233+ 329D             >//              Heap part
 233+ 329D             >
 233+ 329D             >
 233+ 329D             >                org     (Heap_Ptr & $1FFF) + $E000
 233+ E97E             >
 233+ E97E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 233+ E97E             >Latest_Definition defl  Heap_Ptr
 233+ E97E             >
 233+ E97E             >                // dummy db directives used to calculate length of namec
 233+ E97E 43 4F 4C 44 >                db      "COLD"
 233+ E982             >len_NFA         defl    $ - temp_NFA
 233+ E982             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 233+ E97E             >
 233+ E97E 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 233+ E97F 43 4F 4C 44 >                db      "COLD"               // name string in 7-bit ascii, but
 233+ E983             >                org     $-1                 // alter last byte of Name just above to set
 233+ E982 C4          >                db      {b $} | END_BIT     // msb as name end
 233+ E983             >
 233+ E983 75 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 233+ E985             >Prev_Ptr        defl    Heap_Ptr
 233+ E985             >
 233+ E985             >mirror_Ptr      defl    $
 233+ E985             >
 233+ E985 9F 32       >                dw      Dict_Ptr + 2        // xt
 233+ E987             >Heap_Ptr        defl    $ - $E000           // save current HP
 233+ E987             >
 233+ E987             >Current_HP      defl  $ - $E000             // used to set HP once!
 233+ E987             >
 233+ E987             >//              ______________________________________________________________________
 233+ E987             >//              Dictionary part
 233+ E987             >
 233+ E987             >                org     Dict_Ptr
 233+ 329D             >
 233+ 329D 85 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 233+ 329F             >
 233+ 329F             >COLD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 233+ 329F CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 233+ 32A2             >
 233+ 32A2             >
 233+ 32A2             >                endif           ; ok        // for other definitions it "points" the correct handler
 233+ 32A2             >                // Use of "; ok" to suppress "warning[fwdref]"
 233+ 32A2             >
 233+ 32A2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 234+ 32A2              //              dw      NOOP, NOOP
 235+ 32A2 3D 20 12 20                  dw      LIT, S0_origin          // [ hex $12 +origin ] Literal
 236+ 32A6 3D 20 2E 20                  dw      LIT, USER_Pointer       // [ hex $3E +origin ] literal
 237+ 32AA 4C 26                        dw      FETCH                   // @
 238+ 32AC 3D 20 06 00                  dw      LIT, 6, PLUS            // 6 +
 238+ 32B0 55 25
 239+ 32B2 3D 20 16 00                  dw      LIT, 22                 // 22
 240+ 32B6 43 24                        dw      CMOVE
 241+ 32B8 3D 20 0C 20                  dw      LIT, Latest_origin      // [ hex 0C +origin ] literal
 242+ 32BC 4C 26                        dw      FETCH                   // @
 243+ 32BE 3D 20 07 32                  dw      LIT, Forth_Latest_Ptr   // [ ' forth >body 4 + ] Literal
 244+ 32C2 56 26                        dw      STORE                   // !
 245+ 32C4 44 27 DF 27                  dw      ZERO, NMODE, STORE      // 0 nmode !
 245+ 32C8 56 26
 246+ 32CA CD 27 4C 26                  dw      FIRST, FETCH, DUP       // first @ dup
 246+ 32CE DB 25
 247+ 32D0 39 28 56 26                  dw      USED, STORE             // used !
 248+ 32D4 3F 28 56 26                  dw      PREV, STORE             // prev !
 249+ 32D8 3D 20 04 00                  dw      LIT, 4, PLACE, STORE    // 4 place !
 249+ 32DC 4B 28 56 26
 250+ 32E0              //              dw      LIT, 8
 251+ 32E0              //              dw      LIT, FLAGS2, CSTORE     // 8 5C6A c!
 252+ 32E0 02 37                        dw      EMPTY_BUFFERS
 253+ 32E2 44 27 E5 27                  dw      ZERO, BLK, STORE
 253+ 32E6 56 26
 254+ 32E8 44 27 51 28                  dw      ZERO, SOURCE_ID, STORE
 254+ 32EC 56 26
 255+ 32EE
 256+ 32EE 8C 32        Warm_Start:     dw      WARM
 257+ 32F0 9F 32        Cold_Start:     dw      COLD
 258+ 32F2 02 25                        dw      EXIT
 259+ 32F4
 260+ 32F4
 261+ 32F4              //  ______________________________________________________________________
 262+ 32F4
 263+ 32F4              Tools_vForth_Directory
 264+ 32F4 43 3A 2F 74                  db      "C:/tools/vForth/", $FF
 264+ 32F8 6F 6F 6C 73
 264+ 32FC 2F 76 46 6F
 264+ 3300 72 74 68 2F
 264+ 3304 FF
 265+ 3305 43 3A 2F 64  Filename_Ram7:  db      "C:/dot/vforth.bin",0
 265+ 3309 6F 74 2F 76
 265+ 330D 66 6F 72 74
 265+ 3311 68 2E 62 69
 265+ 3315 6E 00
 266+ 3317
 267+ 3317              Saved_Speed:
 268+ 3317 00                           db      0
 269+ 3318 02 03 04 05  Saved_MMU       db      2,3,4,5,6,7   // MMU2-MMU7
 269+ 331C 06 07
 270+ 331E
 271+ 331E              Saved_Layer:
 272+ 331E 00                           db      0           // graphics current mode
 273+ 331F
 274+ 331F              //  ______________________________________________________________________
 275+ 331F              WarmRoutine:
 276+ 331F              ColdRoutine:
 277+ 331F              //  ______________________________________________________________________
 278+ 331F              // 0.
 279+ 331F D1                           pop     de                      // retrieve return to basic address
 280+ 3320 ED 73 08 20                  ld      (SP_Basic), sp
 281+ 3324 31 00 40                     ld      sp, $4000               // safe area
 282+ 3327 D5                           push    de                      // save return to basic address
 283+ 3328 D9                           exx
 284+ 3329 E5                           push    hl                      // save Basic's h'l' return address
 285+ 332A D9                           exx
 286+ 332B
 287+ 332B              //  ______________________________________________________________________
 288+ 332B              // 1.
 289+ 332B              // Accepts one parameter from Basic as the filename to USE for blocks.
 290+ 332B 7C                           ld      a, h
 291+ 332C B5                           or      l
 292+ 332D 28 1E                        jr      z, Skip_Parameter
 293+ 332F
 294+ 332F 11 70 3F                     ld      de, Blk_filename
 295+ 3332 01 00 00                     ld      bc, 0
 296+ 3335              Parameter_Loop:
 297+ 3335 7E                           ld      a, (hl)
 298+ 3336 FE 3A                        cp      ':'
 299+ 3338 28 08                        jr      z, End_Parameter
 300+ 333A FE 0D                        cp      $0D
 301+ 333C 28 04                        jr      z, End_Parameter
 302+ 333E ED A0                        ldi
 303+ 3340 18 F3                        jr      Parameter_Loop
 304+ 3342              End_Parameter:
 305+ 3342 AF                           xor     a
 306+ 3343 12                           ld      (de), a
 307+ 3344 21 00 00                     ld      hl, 0
 308+ 3347 ED 42                        sbc     hl, bc
 309+ 3349 7D                           ld      a, l
 310+ 334A 32 6F 3F                     ld      (Len_Filename), a
 311+ 334D              Skip_Parameter:
 312+ 334D
 313+ 334D              //  ______________________________________________________________________
 314+ 334D              // 2. prepare save-area address and hw register port
 315+ 334D 21 17 33                     ld      hl, Saved_Speed     // save-area
 316+ 3350              //              ld      bc, $243B               // hw-register port
 317+ 3350              //  ______________________________________________________________________
 318+ 3350              // 2.1
 319+ 3350              // ask / read speed and MMU status
 320+ 3350 3E 07                        ld      a ,$07                  // read current speed
 321+ 3352 CD 10 34                     call    Get_MMU_status
 322+ 3355 16 03                        ld      d, 3                    // set top speed
 323+ 3357 B2                           or      d                       // reuse data just read
 324+ 3358 ED 92 07                     nextreg 07, a
 325+ 335B
 326+ 335B 1E 06                        ld      e, 6                    // loop limit
 327+ 335D              MMU_read_loop:
 328+ 335D 3E 58                        ld      a, $58                  // MMU2-MMU7 ($52-$57)
 329+ 335F 93                           sub     e
 330+ 3360 CD 10 34                     call    Get_MMU_status
 331+ 3363 1D                           dec     e
 332+ 3364 20 F7                        jr      nz, MMU_read_loop
 333+ 3366              //  ______________________________________________________________________
 334+ 3366              // 2.2
 335+ 3366              // save current LAYER status
 336+ 3366
 337+ 3366 11 D5 01                     ld      de, $01D5   // on success set carry-flag
 338+ 3369 0E 07                        ld      c, 7        // necessary to call M_P3DOS
 339+ 336B 3E 00                        ld      a, 0        // query current status
 340+ 336D CF                           rst     8
 341+ 336E 94                           db      $94 // carry flag set on success
 342+ 336F
 343+ 336F 32 1E 33                     ld      (Saved_Layer), a     // store after MMUs
 344+ 3372              //  ______________________________________________________________________
 345+ 3372              // 2.3
 346+ 3372 21 00 60                     ld      hl, $6000
 347+ 3375 11 00 40                     ld      de, $4000
 348+ 3378 CD CA 33                     call    Backup_Restore_MMU
 349+ 337B
 350+ 337B              //  ______________________________________________________________________
 351+ 337B              // 5.
 352+ 337B              // set LAYER 1,2
 353+ 337B D9                           exx
 354+ 337C 01 02 01                     ld      bc, $0102
 355+ 337F CD 16 34                     call    Set_Layer
 356+ 3382
 357+ 3382              //  ______________________________________________________________________
 358+ 3382              // 6.
 359+ 3382              // Set current drive/directory
 360+ 3382
 361+ 3382              //              ld      a, $00
 362+ 3382              //              rst     8
 363+ 3382              //              defb    $89     ; m_getsetdrv
 364+ 3382              //              rst     8
 365+ 3382              //              defb    $89     ; m_getsetdrv
 366+ 3382
 367+ 3382 CD B0 33                     call    Set_Cur_Dir
 368+ 3385
 369+ 3385              //  ______________________________________________________________________
 370+ 3385              // 2.2
 371+ 3385              // Reserve pages from OS.
 372+ 3385
 373+ 3385 CD EB 33                     call    Restore_Reserve_MMU     // multiple IDE_BANK  !
 374+ 3388 CD DA 33                     call    Set_forth_MMU
 375+ 338B
 376+ 338B              //  ______________________________________________________________________
 377+ 338B              // 7.
 378+ 338B              // Get current handle via M_GETHANDLE and load ram
 379+ 338B CF                           rst     8
 380+ 338C 8D                           DEFB    $8d             ; M_GETHANDLE
 381+ 338D
 382+ 338D              //  ______________________________________________________________________
 383+ 338D              // 8.
 384+ 338D              // set MMU3-MMU7 to $20-$1C abd load ram7.bin
 385+ 338D
 386+ 338D              //              ld      hl, Filename_Ram7   ; because we are within a dot command
 387+ 338D              //              ld      b, $01          ; $01 request read access
 388+ 338D              //              ld      a, $2A          ; '*'
 389+ 338D              //              rst     8
 390+ 338D              //              DEFB    $9A             ; f_open
 391+ 338D
 392+ 338D F5                           push    af
 393+ 338E 21 00 E0                     ld      hl, $E000
 394+ 3391 01 FF 1F                     ld      bc, $1FFF
 395+ 3394 CF                           rst     8
 396+ 3395 9D                           DEFB    $9D             ; f_read
 397+ 3396 F1                           pop     af
 398+ 3397 CF                           rst     8
 399+ 3398 9B                           DEFB    $9B             ; f_close
 400+ 3399
 401+ 3399              //  ______________________________________________________________________
 402+ 3399              // 9.
 403+ 3399              // pre-set the four main 16-bit registers
 404+ 3399 ED 7B 12 20                  ld      sp, (S0_origin)         // Calculator Stack Pointer
 405+ 339D DD 21 34 20                  ld      ix, Next_Ptr            // Inner Interpreter Pointer
 406+ 33A1 ED 5B 14 20                  ld      de, (R0_origin)         // Return Stack Pointer
 407+ 33A5 01 F0 32                     ld      bc, Cold_Start          // Instruction Pointer
 408+ 33A8
 409+ 33A8                              // never stop scrolling: print chr$26;chr$0
 410+ 33A8 3E 1A                        ld      a, 26
 411+ 33AA D7                           rst     $10
 412+ 33AB AF                           xor     a
 413+ 33AC D7                           rst     $10
 414+ 33AD
 415+ 33AD FB                           ei
 416+ 33AE
 417+ 33AE                          //  push    ix
 418+ 33AE                          //  pop     hl
 419+ 33AE                          //  rst     $20
 420+ 33AE                              next
 420+ 33AE DD E9       >                jp      (ix)
 421+ 33B0
 422+ 33B0
 423+ 33B0              //  ______________________________________________________________________
 424+ 33B0              // Routine
 425+ 33B0              // set current directory  /tools/vForth
 426+ 33B0              Set_Cur_Dir:
 427+ 33B0 21 F4 32                     ld      hl, Tools_vForth_Directory
 428+ 33B3 11 00 40                     ld      de, $4000 // use some temporary safe zone
 429+ 33B6 01 11 00                     ld      bc, 17    // length of Tools_vForth_Directory
 430+ 33B9 ED B0                        ldir
 431+ 33BB D9                           exx
 432+ 33BC 21 00 40                     ld      hl, $4000
 433+ 33BF                          //  ld      hl, Tools_vForth_Directory
 434+ 33BF D9                           exx
 435+ 33C0 11 B1 01                     ld      de, $01B1
 436+ 33C3 0E 07                        ld      c, 7
 437+ 33C5 3E 00                        ld      a, 0
 438+ 33C7 CF                           rst     8
 439+ 33C8 94                           db      $94 // carry flag set on success !
 440+ 33C9
 441+ 33C9 C9                           ret
 442+ 33CA
 443+ 33CA              //  ______________________________________________________________________
 444+ 33CA              // Routine, safe backup
 445+ 33CA              // INput: hl:$6000, de:$E000 for backup or viceversa for restore.
 446+ 33CA              Backup_Restore_MMU:
 447+ 33CA ED 91 52 28                  nextreg $52, $28        ;   MMU2  = $6000
 448+ 33CE 01 00 20                     ld      bc, $2000
 449+ 33D1 ED B0                        ldir
 450+ 33D3 3A 18 33                     ld      a, (Saved_MMU)
 451+ 33D6 ED 92 52                     nextreg $52, a
 452+ 33D9 C9                           ret
 453+ 33DA
 454+ 33DA              //  ______________________________________________________________________
 455+ 33DA              // Routine
 456+ 33DA              // set MMU7 to $20 and laod ram7.bin
 457+ 33DA              Set_forth_MMU:
 458+ 33DA                      ////    nextreg $53, $28         ;   MMU3  = 24576
 459+ 33DA ED 91 54 1D                  nextreg $54, $1D         ;   MMU4  = $8000
 460+ 33DE ED 91 55 1E                  nextreg $55, $1E         ;   MMU5
 461+ 33E2 ED 91 56 1F                  nextreg $56, $1F         ;   MMU6
 462+ 33E6 ED 91 57 20                  nextreg $57, $20         ;   MMU7
 463+ 33EA C9                           ret
 464+ 33EB
 465+ 33EB              //  ______________________________________________________________________
 466+ 33EB              // Routine:
 467+ 33EB              // reserve MMU pages
 468+ 33EB              Restore_Reserve_MMU:
 469+ 33EB 2E 1D                        ld      l, $1D      // first page
 470+ 33ED 26 0C                        ld      h, 8+3+1    // 8 HEAP, 3 MAIN, 1 BACKUP
 471+ 33EF              Reserve_MMU_Loop:
 472+ 33EF 7D                           ld      a, l            // pass page through a
 473+ 33F0 D9                           exx
 474+ 33F1                               // parameters:
 475+ 33F1              Deallocate_MMU:
 476+ 33F1 21 02 00                      ld      hl, $0002      // L=2:reserve E', =3:deallocate, H=0:normal 8k page
 477+ 33F4 5F                            ld      e, a           // E' is bank-id
 478+ 33F5 D9                           exx
 479+ 33F6 E5                           push    hl
 480+ 33F7
 481+ 33F7 0E 07                        ld      c, 07           // page 7 for M_P3DOS
 482+ 33F9 3E 01                        ld      a, 1
 483+ 33FB 11 BD 01                     ld      de, $01BD  // IDE_BANK
 484+ 33FE CF                           rst     8
 485+ 33FF 94                           db      $94     // M_P3DOS
 486+ 3400
 487+ 3400 E1                           pop     hl
 488+ 3401 2C                           inc     l       // next page number
 489+ 3402 25                           dec     h       // decrease counter.
 490+ 3403 20 EA                        jr      nz, Reserve_MMU_Loop
 491+ 3405 C9                           ret
 492+ 3406
 493+ 3406              //  ______________________________________________________________________
 494+ 3406              // Routine
 495+ 3406              // Input:  bc=$243B, a=reg, hl=array
 496+ 3406              // Operation: set  hardware register  a  to value at  (hl)
 497+ 3406              // Output: bc=$243B, a=a+1, hl=hl+1
 498+ 3406              Put_MMU_status:
 499+ 3406 56                           ld      d, (hl)
 500+ 3407 ED 79                        out     (c), a
 501+ 3409 04                           inc     b        // 253Bh
 502+ 340A ED 51                        out     (c), d
 503+ 340C 05                           dec     b        // 243Bh
 504+ 340D 23                           inc     hl
 505+ 340E 3C                           inc     a
 506+ 340F C9                           ret
 507+ 3410
 508+ 3410              //  ______________________________________________________________________
 509+ 3410              // Routine
 510+ 3410              // Input:  bc=$243B, a=reg, hl=array
 511+ 3410              // Operation: get current value of hardware register  a  and store at (hl)
 512+ 3410              // Output: bc=$243B, a=a+1, hl=hl+1
 513+ 3410              Get_MMU_status:
 514+ 3410              //              out     (c), a
 515+ 3410              //              inc     b        // 253Bh
 516+ 3410              //              in      d ,(c)
 517+ 3410              //              dec     b        // 243Bh
 518+ 3410 CD 3B 21                     call    NEXTREG_read
 519+ 3413 77                           ld      (hl), a
 520+ 3414 23                           inc     hl
 521+ 3415 C9                           ret
 522+ 3416
 523+ 3416              //  ______________________________________________________________________
 524+ 3416              // Routine
 525+ 3416              // set LAYER B,C
 526+ 3416              // Input: bc=$0102 for Layer 1,2
 527+ 3416              Set_Layer:
 528+ 3416 D9                           exx
 529+ 3417 11 D5 01                     ld      de, $01D5
 530+ 341A 0E 07                        ld      c, 7
 531+ 341C 3E 01                        ld      a, 1
 532+ 341E CF                           rst     8
 533+ 341F 94                           db      $94
 534+ 3420 C9                           ret
 535+ 3421
 536+ 3421              //  ______________________________________________________________________
 537+ 3421              //
 538+ 3421              // basic        --
 539+ 3421                              New_Def BASIC, "BASIC", is_code, is_normal
 539+ 3421             >
 539+ 3421             >Dict_Ptr        defl    $
 539+ 3421             >
 539+ 3421             >//              ______________________________________________________________________
 539+ 3421             >//              Heap part
 539+ 3421             >
 539+ 3421             >
 539+ 3421             >                org     (Heap_Ptr & $1FFF) + $E000
 539+ E987             >
 539+ E987             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 539+ E987             >Latest_Definition defl  Heap_Ptr
 539+ E987             >
 539+ E987             >                // dummy db directives used to calculate length of namec
 539+ E987 42 41 53 49 >                db      "BASIC"
 539+ E98B 43          >
 539+ E98C             >len_NFA         defl    $ - temp_NFA
 539+ E98C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 539+ E987             >
 539+ E987 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 539+ E988 42 41 53 49 >                db      "BASIC"               // name string in 7-bit ascii, but
 539+ E98C 43          >
 539+ E98D             >                org     $-1                 // alter last byte of Name just above to set
 539+ E98C C3          >                db      {b $} | END_BIT     // msb as name end
 539+ E98D             >
 539+ E98D 7E 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 539+ E98F             >Prev_Ptr        defl    Heap_Ptr
 539+ E98F             >
 539+ E98F             >mirror_Ptr      defl    $
 539+ E98F             >
 539+ E98F 23 34       >                dw      Dict_Ptr + 2        // xt
 539+ E991             >Heap_Ptr        defl    $ - $E000           // save current HP
 539+ E991             >
 539+ E991             >Current_HP      defl  $ - $E000             // used to set HP once!
 539+ E991             >
 539+ E991             >//              ______________________________________________________________________
 539+ E991             >//              Dictionary part
 539+ E991             >
 539+ E991             >                org     Dict_Ptr
 539+ 3421             >
 539+ 3421 8F 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 539+ 3423             >
 539+ 3423             >BASIC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 539+ 3423 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 539+ 3423 ~           >
 539+ 3423 ~           >
 539+ 3423             >                endif           ; ok        // for other definitions it "points" the correct handler
 539+ 3423             >                // Use of "; ok" to suppress "warning[fwdref]"
 539+ 3423             >
 539+ 3423             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 540+ 3423
 541+ 3423              // using dot-command, no more needs to return bc
 542+ 3423              //              pop     bc                      // return  TOS  value to Basic
 543+ 3423
 544+ 3423 F3                           di
 545+ 3424
 546+ 3424 31 FC 3F                     ld      sp, $4000 - 4           // Carefully balanced from startup
 547+ 3427
 548+ 3427                              // address
 549+ 3427 21 17 33                     ld      hl, Saved_Speed
 550+ 342A 01 3B 24                     ld      bc , $243B
 551+ 342D
 552+ 342D                              // set speed
 553+ 342D 3E 07                        ld      a, $07
 554+ 342F CD 06 34                     call    Put_MMU_status
 555+ 3432
 556+ 3432                        //    inc     hl
 557+ 3432                        //    inc     hl
 558+ 3432                              // set MMU pages
 559+ 3432 3E 52                        ld      a, $52
 560+ 3434 1E 06                        ld      e, 6
 561+ 3436              MMU_put_loop:
 562+ 3436 CD 06 34                     call    Put_MMU_status
 563+ 3439 1D                           dec     e
 564+ 343A 20 FA                        jr      nz, MMU_put_loop
 565+ 343C              //  ______________________________________________________________________
 566+ 343C                              // restore layer ide mode
 567+ 343C 7E                           ld      a, (hl)
 568+ 343D
 569+ 343D D9                           exx
 570+ 343E 47                           ld      b, a
 571+ 343F 0F                           rrca
 572+ 3440 0F                           rrca
 573+ 3441 E6 03                        and     3
 574+ 3443 4F                           ld      c, a
 575+ 3444 78                           ld      a, b
 576+ 3445 E6 03                        and     3
 577+ 3447 47                           ld      b, a
 578+ 3448 CD 16 34                     call    Set_Layer
 579+ 344B
 580+ 344B              //  ______________________________________________________________________
 581+ 344B              //
 582+ 344B 21 00 40                     ld      hl, $4000
 583+ 344E 11 00 60                     ld      de, $6000
 584+ 3451 CD CA 33                     call    Backup_Restore_MMU
 585+ 3454              //  ______________________________________________________________________
 586+ 3454              //
 587+ 3454                              // free 8k pages
 588+ 3454 3E 03                        ld      a, 3
 589+ 3456 32 F2 33                     ld      (Deallocate_MMU+1), a
 590+ 3459 CD EB 33                     call    Restore_Reserve_MMU     // multiple IDE_BANK  !
 591+ 345C              //  ______________________________________________________________________
 592+ 345C
 593+ 345C                              // restore basic pointers
 594+ 345C E1                           pop     hl                      // restore h'l'
 595+ 345D D9                           exx
 596+ 345E E1                           pop     hl
 597+ 345F ED 7B 08 20                  ld      sp, (SP_Basic)          // restore Basic's SP
 598+ 3463 E5                           push    hl
 599+ 3464 FB                           ei
 600+ 3465              Exit_with_error:
 601+ 3465 AF                           xor     a
 602+ 3466 76                           halt
 603+ 3467 C9                           ret                             // to where USR Basic was left
 604+ 3468
 605+ 3468              //  ______________________________________________________________________
 606+ 3468              //
 607+ 3468              // +-           n1 n2 -- n3
 608+ 3468              // leaves n1 with the sign of n2 as n3.
 609+ 3468                              Colon_Def PLUS_MINUS, "+-", is_normal
 609+ 3468             >                New_Def  PLUS_MINUS, "+-", Enter_Ptr, is_normal ; ok
 609+ 3468             >
 609+ 3468             >Dict_Ptr        defl    $
 609+ 3468             >
 609+ 3468             >//              ______________________________________________________________________
 609+ 3468             >//              Heap part
 609+ 3468             >
 609+ 3468             >
 609+ 3468             >                org     (Heap_Ptr & $1FFF) + $E000
 609+ E991             >
 609+ E991             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 609+ E991             >Latest_Definition defl  Heap_Ptr
 609+ E991             >
 609+ E991             >                // dummy db directives used to calculate length of namec
 609+ E991 2B 2D       >                db      "+-"
 609+ E993             >len_NFA         defl    $ - temp_NFA
 609+ E993             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 609+ E991             >
 609+ E991 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 609+ E992 2B 2D       >                db      "+-"               // name string in 7-bit ascii, but
 609+ E994             >                org     $-1                 // alter last byte of Name just above to set
 609+ E993 AD          >                db      {b $} | END_BIT     // msb as name end
 609+ E994             >
 609+ E994 87 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 609+ E996             >Prev_Ptr        defl    Heap_Ptr
 609+ E996             >
 609+ E996             >mirror_Ptr      defl    $
 609+ E996             >
 609+ E996 6A 34       >                dw      Dict_Ptr + 2        // xt
 609+ E998             >Heap_Ptr        defl    $ - $E000           // save current HP
 609+ E998             >
 609+ E998             >Current_HP      defl  $ - $E000             // used to set HP once!
 609+ E998             >
 609+ E998             >//              ______________________________________________________________________
 609+ E998             >//              Dictionary part
 609+ E998             >
 609+ E998             >                org     Dict_Ptr
 609+ 3468             >
 609+ 3468 96 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 609+ 346A             >
 609+ 346A             >PLUS_MINUS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 609+ 346A CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 609+ 346D             >
 609+ 346D             >
 609+ 346D             >                endif           ; ok        // for other definitions it "points" the correct handler
 609+ 346D             >                // Use of "; ok" to suppress "warning[fwdref]"
 609+ 346D             >
 609+ 346D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 610+ 346D 3A 25                        dw      ZLESS                   // 0<
 611+ 346F                                                              // if
 612+ 346F 8F 20                        dw      ZBRANCH
 613+ 3471 04 00                        dw      Plus_Minus_Endif - $
 614+ 3473 96 25                        dw          MINUS               //      minus
 615+ 3475              Plus_Minus_Endif:                               // endif
 616+ 3475 02 25                        dw      EXIT                    // ;
 617+ 3477
 618+ 3477              //  ______________________________________________________________________
 619+ 3477              //
 620+ 3477              // d+-          d1 n -- d2
 621+ 3477              // leaves d1 with the sign of n as d2.
 622+ 3477                              Colon_Def DPLUS_MINUS, "D+-", is_normal
 622+ 3477             >                New_Def  DPLUS_MINUS, "D+-", Enter_Ptr, is_normal ; ok
 622+ 3477             >
 622+ 3477             >Dict_Ptr        defl    $
 622+ 3477             >
 622+ 3477             >//              ______________________________________________________________________
 622+ 3477             >//              Heap part
 622+ 3477             >
 622+ 3477             >
 622+ 3477             >                org     (Heap_Ptr & $1FFF) + $E000
 622+ E998             >
 622+ E998             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 622+ E998             >Latest_Definition defl  Heap_Ptr
 622+ E998             >
 622+ E998             >                // dummy db directives used to calculate length of namec
 622+ E998 44 2B 2D    >                db      "D+-"
 622+ E99B             >len_NFA         defl    $ - temp_NFA
 622+ E99B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 622+ E998             >
 622+ E998 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 622+ E999 44 2B 2D    >                db      "D+-"               // name string in 7-bit ascii, but
 622+ E99C             >                org     $-1                 // alter last byte of Name just above to set
 622+ E99B AD          >                db      {b $} | END_BIT     // msb as name end
 622+ E99C             >
 622+ E99C 91 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 622+ E99E             >Prev_Ptr        defl    Heap_Ptr
 622+ E99E             >
 622+ E99E             >mirror_Ptr      defl    $
 622+ E99E             >
 622+ E99E 79 34       >                dw      Dict_Ptr + 2        // xt
 622+ E9A0             >Heap_Ptr        defl    $ - $E000           // save current HP
 622+ E9A0             >
 622+ E9A0             >Current_HP      defl  $ - $E000             // used to set HP once!
 622+ E9A0             >
 622+ E9A0             >//              ______________________________________________________________________
 622+ E9A0             >//              Dictionary part
 622+ E9A0             >
 622+ E9A0             >                org     Dict_Ptr
 622+ 3477             >
 622+ 3477 9E 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 622+ 3479             >
 622+ 3479             >DPLUS_MINUS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 622+ 3479 CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 622+ 347C             >
 622+ 347C             >
 622+ 347C             >                endif           ; ok        // for other definitions it "points" the correct handler
 622+ 347C             >                // Use of "; ok" to suppress "warning[fwdref]"
 622+ 347C             >
 622+ 347C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 623+ 347C 3A 25                        dw      ZLESS                   // 0<
 624+ 347E                                                              // if
 625+ 347E 8F 20                        dw      ZBRANCH
 626+ 3480 04 00                        dw      DPlus_Minus_Endif - $
 627+ 3482 A4 25                        dw          DMINUS              //      dminus
 628+ 3484              DPlus_Minus_Endif:                              // endif
 629+ 3484 02 25                        dw      EXIT                    // ;
 630+ 3486
 631+ 3486              //  ______________________________________________________________________
 632+ 3486              //
 633+ 3486              // abs          n1 -- n2
 634+ 3486                              Colon_Def ABS_OP, "ABS", is_normal
 634+ 3486             >                New_Def  ABS_OP, "ABS", Enter_Ptr, is_normal ; ok
 634+ 3486             >
 634+ 3486             >Dict_Ptr        defl    $
 634+ 3486             >
 634+ 3486             >//              ______________________________________________________________________
 634+ 3486             >//              Heap part
 634+ 3486             >
 634+ 3486             >
 634+ 3486             >                org     (Heap_Ptr & $1FFF) + $E000
 634+ E9A0             >
 634+ E9A0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 634+ E9A0             >Latest_Definition defl  Heap_Ptr
 634+ E9A0             >
 634+ E9A0             >                // dummy db directives used to calculate length of namec
 634+ E9A0 41 42 53    >                db      "ABS"
 634+ E9A3             >len_NFA         defl    $ - temp_NFA
 634+ E9A3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 634+ E9A0             >
 634+ E9A0 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 634+ E9A1 41 42 53    >                db      "ABS"               // name string in 7-bit ascii, but
 634+ E9A4             >                org     $-1                 // alter last byte of Name just above to set
 634+ E9A3 D3          >                db      {b $} | END_BIT     // msb as name end
 634+ E9A4             >
 634+ E9A4 98 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 634+ E9A6             >Prev_Ptr        defl    Heap_Ptr
 634+ E9A6             >
 634+ E9A6             >mirror_Ptr      defl    $
 634+ E9A6             >
 634+ E9A6 88 34       >                dw      Dict_Ptr + 2        // xt
 634+ E9A8             >Heap_Ptr        defl    $ - $E000           // save current HP
 634+ E9A8             >
 634+ E9A8             >Current_HP      defl  $ - $E000             // used to set HP once!
 634+ E9A8             >
 634+ E9A8             >//              ______________________________________________________________________
 634+ E9A8             >//              Dictionary part
 634+ E9A8             >
 634+ E9A8             >                org     Dict_Ptr
 634+ 3486             >
 634+ 3486 A6 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 634+ 3488             >
 634+ 3488             >ABS_OP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 634+ 3488 CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 634+ 348B             >
 634+ 348B             >
 634+ 348B             >                endif           ; ok        // for other definitions it "points" the correct handler
 634+ 348B             >                // Use of "; ok" to suppress "warning[fwdref]"
 634+ 348B             >
 634+ 348B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 635+ 348B DB 25                        dw      DUP                     // dup
 636+ 348D 6A 34                        dw      PLUS_MINUS              // +-
 637+ 348F 02 25                        dw      EXIT                    // ;
 638+ 3491
 639+ 3491              //  ______________________________________________________________________
 640+ 3491              //
 641+ 3491              // dabs         d1 -- d2
 642+ 3491                              Colon_Def DABS, "DABS", is_normal
 642+ 3491             >                New_Def  DABS, "DABS", Enter_Ptr, is_normal ; ok
 642+ 3491             >
 642+ 3491             >Dict_Ptr        defl    $
 642+ 3491             >
 642+ 3491             >//              ______________________________________________________________________
 642+ 3491             >//              Heap part
 642+ 3491             >
 642+ 3491             >
 642+ 3491             >                org     (Heap_Ptr & $1FFF) + $E000
 642+ E9A8             >
 642+ E9A8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 642+ E9A8             >Latest_Definition defl  Heap_Ptr
 642+ E9A8             >
 642+ E9A8             >                // dummy db directives used to calculate length of namec
 642+ E9A8 44 41 42 53 >                db      "DABS"
 642+ E9AC             >len_NFA         defl    $ - temp_NFA
 642+ E9AC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 642+ E9A8             >
 642+ E9A8 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 642+ E9A9 44 41 42 53 >                db      "DABS"               // name string in 7-bit ascii, but
 642+ E9AD             >                org     $-1                 // alter last byte of Name just above to set
 642+ E9AC D3          >                db      {b $} | END_BIT     // msb as name end
 642+ E9AD             >
 642+ E9AD A0 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 642+ E9AF             >Prev_Ptr        defl    Heap_Ptr
 642+ E9AF             >
 642+ E9AF             >mirror_Ptr      defl    $
 642+ E9AF             >
 642+ E9AF 93 34       >                dw      Dict_Ptr + 2        // xt
 642+ E9B1             >Heap_Ptr        defl    $ - $E000           // save current HP
 642+ E9B1             >
 642+ E9B1             >Current_HP      defl  $ - $E000             // used to set HP once!
 642+ E9B1             >
 642+ E9B1             >//              ______________________________________________________________________
 642+ E9B1             >//              Dictionary part
 642+ E9B1             >
 642+ E9B1             >                org     Dict_Ptr
 642+ 3491             >
 642+ 3491 AF 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 642+ 3493             >
 642+ 3493             >DABS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 642+ 3493 CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 642+ 3496             >
 642+ 3496             >
 642+ 3496             >                endif           ; ok        // for other definitions it "points" the correct handler
 642+ 3496             >                // Use of "; ok" to suppress "warning[fwdref]"
 642+ 3496             >
 642+ 3496             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 643+ 3496 DB 25                        dw      DUP                     // dup
 644+ 3498 79 34                        dw      DPLUS_MINUS             // d+-
 645+ 349A 02 25                        dw      EXIT                    // ;
 646+ 349C
 647+ 349C              //  ______________________________________________________________________
 648+ 349C              //
 649+ 349C              // m*           n1 n2 -- d
 650+ 349C              // multiply two integer giving a double
 651+ 349C                              Colon_Def MMUL, "M*", is_normal
 651+ 349C             >                New_Def  MMUL, "M*", Enter_Ptr, is_normal ; ok
 651+ 349C             >
 651+ 349C             >Dict_Ptr        defl    $
 651+ 349C             >
 651+ 349C             >//              ______________________________________________________________________
 651+ 349C             >//              Heap part
 651+ 349C             >
 651+ 349C             >
 651+ 349C             >                org     (Heap_Ptr & $1FFF) + $E000
 651+ E9B1             >
 651+ E9B1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 651+ E9B1             >Latest_Definition defl  Heap_Ptr
 651+ E9B1             >
 651+ E9B1             >                // dummy db directives used to calculate length of namec
 651+ E9B1 4D 2A       >                db      "M*"
 651+ E9B3             >len_NFA         defl    $ - temp_NFA
 651+ E9B3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 651+ E9B1             >
 651+ E9B1 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 651+ E9B2 4D 2A       >                db      "M*"               // name string in 7-bit ascii, but
 651+ E9B4             >                org     $-1                 // alter last byte of Name just above to set
 651+ E9B3 AA          >                db      {b $} | END_BIT     // msb as name end
 651+ E9B4             >
 651+ E9B4 A8 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 651+ E9B6             >Prev_Ptr        defl    Heap_Ptr
 651+ E9B6             >
 651+ E9B6             >mirror_Ptr      defl    $
 651+ E9B6             >
 651+ E9B6 9E 34       >                dw      Dict_Ptr + 2        // xt
 651+ E9B8             >Heap_Ptr        defl    $ - $E000           // save current HP
 651+ E9B8             >
 651+ E9B8             >Current_HP      defl  $ - $E000             // used to set HP once!
 651+ E9B8             >
 651+ E9B8             >//              ______________________________________________________________________
 651+ E9B8             >//              Dictionary part
 651+ E9B8             >
 651+ E9B8             >                org     Dict_Ptr
 651+ 349C             >
 651+ 349C B6 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 651+ 349E             >
 651+ 349E             >MMUL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 651+ 349E CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 651+ 34A1             >
 651+ 34A1             >
 651+ 34A1             >                endif           ; ok        // for other definitions it "points" the correct handler
 651+ 34A1             >                // Use of "; ok" to suppress "warning[fwdref]"
 651+ 34A1             >
 651+ 34A1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 652+ 34A1 2A 26 DD 24                  dw      TWO_DUP, XOR_OP, TO_R   // 2dup xor >r
 652+ 34A5 0C 25
 653+ 34A7 88 34 D4 25                  dw      ABS_OP, SWAP            // abs swap
 654+ 34AB 88 34 67 24                  dw      ABS_OP, UM_MUL          // abs um*
 655+ 34AF 17 25 79 34                  dw      R_TO, DPLUS_MINUS       // r> d+-
 656+ 34B3 02 25                        dw      EXIT                    // ;
 657+ 34B5
 658+ 34B5              //  ______________________________________________________________________
 659+ 34B5              //
 660+ 34B5              // sm/rem       d n -- q r
 661+ 34B5              // Symmetric division: divides a double into n giving quotient q and remainder r
 662+ 34B5              // the remainder has the sign of d.
 663+ 34B5                              Colon_Def SMDIVM, "SM/REM", is_normal
 663+ 34B5             >                New_Def  SMDIVM, "SM/REM", Enter_Ptr, is_normal ; ok
 663+ 34B5             >
 663+ 34B5             >Dict_Ptr        defl    $
 663+ 34B5             >
 663+ 34B5             >//              ______________________________________________________________________
 663+ 34B5             >//              Heap part
 663+ 34B5             >
 663+ 34B5             >
 663+ 34B5             >                org     (Heap_Ptr & $1FFF) + $E000
 663+ E9B8             >
 663+ E9B8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 663+ E9B8             >Latest_Definition defl  Heap_Ptr
 663+ E9B8             >
 663+ E9B8             >                // dummy db directives used to calculate length of namec
 663+ E9B8 53 4D 2F 52 >                db      "SM/REM"
 663+ E9BC 45 4D       >
 663+ E9BE             >len_NFA         defl    $ - temp_NFA
 663+ E9BE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 663+ E9B8             >
 663+ E9B8 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 663+ E9B9 53 4D 2F 52 >                db      "SM/REM"               // name string in 7-bit ascii, but
 663+ E9BD 45 4D       >
 663+ E9BF             >                org     $-1                 // alter last byte of Name just above to set
 663+ E9BE CD          >                db      {b $} | END_BIT     // msb as name end
 663+ E9BF             >
 663+ E9BF B1 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 663+ E9C1             >Prev_Ptr        defl    Heap_Ptr
 663+ E9C1             >
 663+ E9C1             >mirror_Ptr      defl    $
 663+ E9C1             >
 663+ E9C1 B7 34       >                dw      Dict_Ptr + 2        // xt
 663+ E9C3             >Heap_Ptr        defl    $ - $E000           // save current HP
 663+ E9C3             >
 663+ E9C3             >Current_HP      defl  $ - $E000             // used to set HP once!
 663+ E9C3             >
 663+ E9C3             >//              ______________________________________________________________________
 663+ E9C3             >//              Dictionary part
 663+ E9C3             >
 663+ E9C3             >                org     Dict_Ptr
 663+ 34B5             >
 663+ 34B5 C1 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 663+ 34B7             >
 663+ 34B7             >SMDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 663+ 34B7 CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 663+ 34BA             >
 663+ 34BA             >
 663+ 34BA             >                endif           ; ok        // for other definitions it "points" the correct handler
 663+ 34BA             >                // Use of "; ok" to suppress "warning[fwdref]"
 663+ 34BA             >
 663+ 34BA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 664+ 34BA B7 25 0C 25                  dw      OVER, TO_R, TO_R        // over >r >r
 664+ 34BE 0C 25
 665+ 34C0 93 34 22 25                  dw      DABS, R_OP, ABS_OP      // dabs r abs
 665+ 34C4 88 34
 666+ 34C6 8F 24                        dw      UMDIVMOD                // um/mod
 667+ 34C8 17 25                        dw      R_TO                    // r>
 668+ 34CA 22 25 DD 24                  dw      R_OP, XOR_OP            // r xor
 669+ 34CE 6A 34 D4 25                  dw      PLUS_MINUS, SWAP        // +- swap
 670+ 34D2 17 25                        dw      R_TO                    // r>
 671+ 34D4 6A 34 D4 25                  dw      PLUS_MINUS, SWAP        // +- swap
 672+ 34D8 02 25                        dw      EXIT                    // ;
 673+ 34DA
 674+ 34DA              //  ______________________________________________________________________
 675+ 34DA              //
 676+ 34DA              // fm/mod       d n -- q r
 677+ 34DA              // Floored division: divides a double into n giving quotient q and remainder r
 678+ 34DA              // the remainder has the sign of d.
 679+ 34DA                              Colon_Def FMDIVM, "FM/MOD", is_normal
 679+ 34DA             >                New_Def  FMDIVM, "FM/MOD", Enter_Ptr, is_normal ; ok
 679+ 34DA             >
 679+ 34DA             >Dict_Ptr        defl    $
 679+ 34DA             >
 679+ 34DA             >//              ______________________________________________________________________
 679+ 34DA             >//              Heap part
 679+ 34DA             >
 679+ 34DA             >
 679+ 34DA             >                org     (Heap_Ptr & $1FFF) + $E000
 679+ E9C3             >
 679+ E9C3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 679+ E9C3             >Latest_Definition defl  Heap_Ptr
 679+ E9C3             >
 679+ E9C3             >                // dummy db directives used to calculate length of namec
 679+ E9C3 46 4D 2F 4D >                db      "FM/MOD"
 679+ E9C7 4F 44       >
 679+ E9C9             >len_NFA         defl    $ - temp_NFA
 679+ E9C9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 679+ E9C3             >
 679+ E9C3 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 679+ E9C4 46 4D 2F 4D >                db      "FM/MOD"               // name string in 7-bit ascii, but
 679+ E9C8 4F 44       >
 679+ E9CA             >                org     $-1                 // alter last byte of Name just above to set
 679+ E9C9 C4          >                db      {b $} | END_BIT     // msb as name end
 679+ E9CA             >
 679+ E9CA B8 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 679+ E9CC             >Prev_Ptr        defl    Heap_Ptr
 679+ E9CC             >
 679+ E9CC             >mirror_Ptr      defl    $
 679+ E9CC             >
 679+ E9CC DC 34       >                dw      Dict_Ptr + 2        // xt
 679+ E9CE             >Heap_Ptr        defl    $ - $E000           // save current HP
 679+ E9CE             >
 679+ E9CE             >Current_HP      defl  $ - $E000             // used to set HP once!
 679+ E9CE             >
 679+ E9CE             >//              ______________________________________________________________________
 679+ E9CE             >//              Dictionary part
 679+ E9CE             >
 679+ E9CE             >                org     Dict_Ptr
 679+ 34DA             >
 679+ 34DA CC 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 679+ 34DC             >
 679+ 34DC             >FMDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 679+ 34DC CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 679+ 34DF             >
 679+ 34DF             >
 679+ 34DF             >                endif           ; ok        // for other definitions it "points" the correct handler
 679+ 34DF             >                // Use of "; ok" to suppress "warning[fwdref]"
 679+ 34DF             >
 679+ 34DF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 680+ 34DF DB 25 0C 25                  dw      DUP, TO_R               // dup >r
 681+ 34E3 B7 34                        dw      SMDIVM
 682+ 34E5 B7 25 DB 25                  dw      OVER, DUP
 683+ 34E9 27 25 27 25                  dw      ZEQUAL, ZEQUAL
 684+ 34ED D4 25 3A 25                  dw      SWAP, ZLESS
 685+ 34F1 22 25 3A 25                  dw      R_OP, ZLESS
 686+ 34F5 DD 24 C2 24                  dw      XOR_OP, AND_OP
 687+ 34F9 8F 20                        dw      ZBRANCH
 688+ 34FB 10 00                        dw      Fm_Mod_Else - $
 689+ 34FD 75 25                        dw          ONE_SUBTRACT
 690+ 34FF D4 25 17 25                  dw          SWAP, R_TO
 691+ 3503 55 25 D4 25                  dw          PLUS, SWAP
 692+ 3507 82 20                        dw      BRANCH
 693+ 3509 06 00                        dw      Fm_Mod_Endif - $
 694+ 350B              Fm_Mod_Else:
 695+ 350B 17 25 C0 25                  dw          R_TO, DROP
 696+ 350F              Fm_Mod_Endif:
 697+ 350F 02 25                        dw      EXIT
 698+ 3511              //              dw      TWO_DUP                 // 2dup
 699+ 3511              //              dw      XOR_OP, TO_R, TO_R      // xor >r >r
 700+ 3511              //              dw      DABS, R_OP, ABS_OP      // dabs r abs
 701+ 3511              //              dw      UMDIVMOD                // um/mod
 702+ 3511              //              dw      SWAP                    // swap
 703+ 3511              //              dw      II, ZLESS               // i'
 704+ 3511              //              dw      ONE, AND_OP, PLUS       // 0< 1 and +
 705+ 3511              //              dw      R_TO                    // r>
 706+ 3511              //              dw      PLUS_MINUS, SWAP        // +- swap
 707+ 3511              //              dw      R_OP                    // r@
 708+ 3511              //              dw      ZLESS                   // i'
 709+ 3511              //              dw      ONE, AND_OP, PLUS       // 0< 1 and +
 710+ 3511              //              dw      R_TO                    // r>
 711+ 3511              //              dw      PLUS_MINUS              // +- swap
 712+ 3511              //              dw      EXIT                    // ;
 713+ 3511
 714+ 3511              //  ______________________________________________________________________
 715+ 3511              //
 716+ 3511              // m/mod        d n -- q r
 717+ 3511              // multiply two integer giving a double
 718+ 3511                              Colon_Def MDIVM, "M/MOD", is_normal
 718+ 3511             >                New_Def  MDIVM, "M/MOD", Enter_Ptr, is_normal ; ok
 718+ 3511             >
 718+ 3511             >Dict_Ptr        defl    $
 718+ 3511             >
 718+ 3511             >//              ______________________________________________________________________
 718+ 3511             >//              Heap part
 718+ 3511             >
 718+ 3511             >
 718+ 3511             >                org     (Heap_Ptr & $1FFF) + $E000
 718+ E9CE             >
 718+ E9CE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 718+ E9CE             >Latest_Definition defl  Heap_Ptr
 718+ E9CE             >
 718+ E9CE             >                // dummy db directives used to calculate length of namec
 718+ E9CE 4D 2F 4D 4F >                db      "M/MOD"
 718+ E9D2 44          >
 718+ E9D3             >len_NFA         defl    $ - temp_NFA
 718+ E9D3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 718+ E9CE             >
 718+ E9CE 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 718+ E9CF 4D 2F 4D 4F >                db      "M/MOD"               // name string in 7-bit ascii, but
 718+ E9D3 44          >
 718+ E9D4             >                org     $-1                 // alter last byte of Name just above to set
 718+ E9D3 C4          >                db      {b $} | END_BIT     // msb as name end
 718+ E9D4             >
 718+ E9D4 C3 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 718+ E9D6             >Prev_Ptr        defl    Heap_Ptr
 718+ E9D6             >
 718+ E9D6             >mirror_Ptr      defl    $
 718+ E9D6             >
 718+ E9D6 13 35       >                dw      Dict_Ptr + 2        // xt
 718+ E9D8             >Heap_Ptr        defl    $ - $E000           // save current HP
 718+ E9D8             >
 718+ E9D8             >Current_HP      defl  $ - $E000             // used to set HP once!
 718+ E9D8             >
 718+ E9D8             >//              ______________________________________________________________________
 718+ E9D8             >//              Dictionary part
 718+ E9D8             >
 718+ E9D8             >                org     Dict_Ptr
 718+ 3511             >
 718+ 3511 D6 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 718+ 3513             >
 718+ 3513             >MDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 718+ 3513 CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 718+ 3516             >
 718+ 3516             >
 718+ 3516             >                endif           ; ok        // for other definitions it "points" the correct handler
 718+ 3516             >                // Use of "; ok" to suppress "warning[fwdref]"
 718+ 3516             >
 718+ 3516             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 719+ 3516 B7 34                        dw      SMDIVM
 720+ 3518 02 25                        dw      EXIT                    // ;
 721+ 351A
 722+ 351A              //  ______________________________________________________________________
 723+ 351A              //
 724+ 351A              // m/           d n -- q
 725+ 351A              // multiply two integer giving a double
 726+ 351A                              Colon_Def MDIV, "M/", is_normal
 726+ 351A             >                New_Def  MDIV, "M/", Enter_Ptr, is_normal ; ok
 726+ 351A             >
 726+ 351A             >Dict_Ptr        defl    $
 726+ 351A             >
 726+ 351A             >//              ______________________________________________________________________
 726+ 351A             >//              Heap part
 726+ 351A             >
 726+ 351A             >
 726+ 351A             >                org     (Heap_Ptr & $1FFF) + $E000
 726+ E9D8             >
 726+ E9D8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 726+ E9D8             >Latest_Definition defl  Heap_Ptr
 726+ E9D8             >
 726+ E9D8             >                // dummy db directives used to calculate length of namec
 726+ E9D8 4D 2F       >                db      "M/"
 726+ E9DA             >len_NFA         defl    $ - temp_NFA
 726+ E9DA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 726+ E9D8             >
 726+ E9D8 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 726+ E9D9 4D 2F       >                db      "M/"               // name string in 7-bit ascii, but
 726+ E9DB             >                org     $-1                 // alter last byte of Name just above to set
 726+ E9DA AF          >                db      {b $} | END_BIT     // msb as name end
 726+ E9DB             >
 726+ E9DB CE 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 726+ E9DD             >Prev_Ptr        defl    Heap_Ptr
 726+ E9DD             >
 726+ E9DD             >mirror_Ptr      defl    $
 726+ E9DD             >
 726+ E9DD 1C 35       >                dw      Dict_Ptr + 2        // xt
 726+ E9DF             >Heap_Ptr        defl    $ - $E000           // save current HP
 726+ E9DF             >
 726+ E9DF             >Current_HP      defl  $ - $E000             // used to set HP once!
 726+ E9DF             >
 726+ E9DF             >//              ______________________________________________________________________
 726+ E9DF             >//              Dictionary part
 726+ E9DF             >
 726+ E9DF             >                org     Dict_Ptr
 726+ 351A             >
 726+ 351A DD 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 726+ 351C             >
 726+ 351C             >MDIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 726+ 351C CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 726+ 351F             >
 726+ 351F             >
 726+ 351F             >                endif           ; ok        // for other definitions it "points" the correct handler
 726+ 351F             >                // Use of "; ok" to suppress "warning[fwdref]"
 726+ 351F             >
 726+ 351F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 727+ 351F 13 35 C5 25                  dw      MDIVM, NIP
 728+ 3523 02 25                        dw      EXIT                    // ;
 729+ 3525
 730+ 3525              //  ______________________________________________________________________
 731+ 3525              //
 732+ 3525              // *            n1 n2 -- n3
 733+ 3525              // multiply two integer
 734+ 3525                              Colon_Def MUL, "*", is_normal
 734+ 3525             >                New_Def  MUL, "*", Enter_Ptr, is_normal ; ok
 734+ 3525             >
 734+ 3525             >Dict_Ptr        defl    $
 734+ 3525             >
 734+ 3525             >//              ______________________________________________________________________
 734+ 3525             >//              Heap part
 734+ 3525             >
 734+ 3525             >
 734+ 3525             >                org     (Heap_Ptr & $1FFF) + $E000
 734+ E9DF             >
 734+ E9DF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 734+ E9DF             >Latest_Definition defl  Heap_Ptr
 734+ E9DF             >
 734+ E9DF             >                // dummy db directives used to calculate length of namec
 734+ E9DF 2A          >                db      "*"
 734+ E9E0             >len_NFA         defl    $ - temp_NFA
 734+ E9E0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 734+ E9DF             >
 734+ E9DF 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 734+ E9E0 2A          >                db      "*"               // name string in 7-bit ascii, but
 734+ E9E1             >                org     $-1                 // alter last byte of Name just above to set
 734+ E9E0 AA          >                db      {b $} | END_BIT     // msb as name end
 734+ E9E1             >
 734+ E9E1 D8 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 734+ E9E3             >Prev_Ptr        defl    Heap_Ptr
 734+ E9E3             >
 734+ E9E3             >mirror_Ptr      defl    $
 734+ E9E3             >
 734+ E9E3 27 35       >                dw      Dict_Ptr + 2        // xt
 734+ E9E5             >Heap_Ptr        defl    $ - $E000           // save current HP
 734+ E9E5             >
 734+ E9E5             >Current_HP      defl  $ - $E000             // used to set HP once!
 734+ E9E5             >
 734+ E9E5             >//              ______________________________________________________________________
 734+ E9E5             >//              Dictionary part
 734+ E9E5             >
 734+ E9E5             >                org     Dict_Ptr
 734+ 3525             >
 734+ 3525 E3 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 734+ 3527             >
 734+ 3527             >MUL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 734+ 3527 CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 734+ 352A             >
 734+ 352A             >
 734+ 352A             >                endif           ; ok        // for other definitions it "points" the correct handler
 734+ 352A             >                // Use of "; ok" to suppress "warning[fwdref]"
 734+ 352A             >
 734+ 352A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 735+ 352A 9E 34 C0 25                  dw      MMUL, DROP              // m* drop
 736+ 352E 02 25                        dw      EXIT                    // ;
 737+ 3530
 738+ 3530              //  ______________________________________________________________________
 739+ 3530              //
 740+ 3530              // /mod         n1 n2 -- n3 n4
 741+ 3530              // leaves quotient n4 and remainder n3 of the integer division n1 / n2.
 742+ 3530              // The remainder has the sign of n1
 743+ 3530                              Colon_Def DIVMOD, "/MOD", is_normal
 743+ 3530             >                New_Def  DIVMOD, "/MOD", Enter_Ptr, is_normal ; ok
 743+ 3530             >
 743+ 3530             >Dict_Ptr        defl    $
 743+ 3530             >
 743+ 3530             >//              ______________________________________________________________________
 743+ 3530             >//              Heap part
 743+ 3530             >
 743+ 3530             >
 743+ 3530             >                org     (Heap_Ptr & $1FFF) + $E000
 743+ E9E5             >
 743+ E9E5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 743+ E9E5             >Latest_Definition defl  Heap_Ptr
 743+ E9E5             >
 743+ E9E5             >                // dummy db directives used to calculate length of namec
 743+ E9E5 2F 4D 4F 44 >                db      "/MOD"
 743+ E9E9             >len_NFA         defl    $ - temp_NFA
 743+ E9E9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 743+ E9E5             >
 743+ E9E5 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 743+ E9E6 2F 4D 4F 44 >                db      "/MOD"               // name string in 7-bit ascii, but
 743+ E9EA             >                org     $-1                 // alter last byte of Name just above to set
 743+ E9E9 C4          >                db      {b $} | END_BIT     // msb as name end
 743+ E9EA             >
 743+ E9EA DF 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 743+ E9EC             >Prev_Ptr        defl    Heap_Ptr
 743+ E9EC             >
 743+ E9EC             >mirror_Ptr      defl    $
 743+ E9EC             >
 743+ E9EC 32 35       >                dw      Dict_Ptr + 2        // xt
 743+ E9EE             >Heap_Ptr        defl    $ - $E000           // save current HP
 743+ E9EE             >
 743+ E9EE             >Current_HP      defl  $ - $E000             // used to set HP once!
 743+ E9EE             >
 743+ E9EE             >//              ______________________________________________________________________
 743+ E9EE             >//              Dictionary part
 743+ E9EE             >
 743+ E9EE             >                org     Dict_Ptr
 743+ 3530             >
 743+ 3530 EC 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 743+ 3532             >
 743+ 3532             >DIVMOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 743+ 3532 CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 743+ 3535             >
 743+ 3535             >
 743+ 3535             >                endif           ; ok        // for other definitions it "points" the correct handler
 743+ 3535             >                // Use of "; ok" to suppress "warning[fwdref]"
 743+ 3535             >
 743+ 3535             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 744+ 3535 0C 25 9D 28                  dw      TO_R, S_TO_D, R_TO      // >r s->d r>
 744+ 3539 17 25
 745+ 353B 13 35                        dw      MDIVM                   // m/mod
 746+ 353D 02 25                        dw      EXIT                    // ;
 747+ 353F
 748+ 353F              //  ______________________________________________________________________
 749+ 353F              //
 750+ 353F              // /            n1 n2 -- n3
 751+ 353F              // division
 752+ 353F                              Colon_Def DIV, "/", is_normal
 752+ 353F             >                New_Def  DIV, "/", Enter_Ptr, is_normal ; ok
 752+ 353F             >
 752+ 353F             >Dict_Ptr        defl    $
 752+ 353F             >
 752+ 353F             >//              ______________________________________________________________________
 752+ 353F             >//              Heap part
 752+ 353F             >
 752+ 353F             >
 752+ 353F             >                org     (Heap_Ptr & $1FFF) + $E000
 752+ E9EE             >
 752+ E9EE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 752+ E9EE             >Latest_Definition defl  Heap_Ptr
 752+ E9EE             >
 752+ E9EE             >                // dummy db directives used to calculate length of namec
 752+ E9EE 2F          >                db      "/"
 752+ E9EF             >len_NFA         defl    $ - temp_NFA
 752+ E9EF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 752+ E9EE             >
 752+ E9EE 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 752+ E9EF 2F          >                db      "/"               // name string in 7-bit ascii, but
 752+ E9F0             >                org     $-1                 // alter last byte of Name just above to set
 752+ E9EF AF          >                db      {b $} | END_BIT     // msb as name end
 752+ E9F0             >
 752+ E9F0 E5 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 752+ E9F2             >Prev_Ptr        defl    Heap_Ptr
 752+ E9F2             >
 752+ E9F2             >mirror_Ptr      defl    $
 752+ E9F2             >
 752+ E9F2 41 35       >                dw      Dict_Ptr + 2        // xt
 752+ E9F4             >Heap_Ptr        defl    $ - $E000           // save current HP
 752+ E9F4             >
 752+ E9F4             >Current_HP      defl  $ - $E000             // used to set HP once!
 752+ E9F4             >
 752+ E9F4             >//              ______________________________________________________________________
 752+ E9F4             >//              Dictionary part
 752+ E9F4             >
 752+ E9F4             >                org     Dict_Ptr
 752+ 353F             >
 752+ 353F F2 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 752+ 3541             >
 752+ 3541             >DIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 752+ 3541 CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 752+ 3544             >
 752+ 3544             >
 752+ 3544             >                endif           ; ok        // for other definitions it "points" the correct handler
 752+ 3544             >                // Use of "; ok" to suppress "warning[fwdref]"
 752+ 3544             >
 752+ 3544             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 753+ 3544 32 35 C5 25                  dw      DIVMOD, NIP             // /mod nip
 754+ 3548 02 25                        dw      EXIT                    // ;
 755+ 354A
 756+ 354A              //  ______________________________________________________________________
 757+ 354A              //
 758+ 354A              // mod          n1 n2 -- n3
 759+ 354A                              Colon_Def MOD, "MOD", is_normal
 759+ 354A             >                New_Def  MOD, "MOD", Enter_Ptr, is_normal ; ok
 759+ 354A             >
 759+ 354A             >Dict_Ptr        defl    $
 759+ 354A             >
 759+ 354A             >//              ______________________________________________________________________
 759+ 354A             >//              Heap part
 759+ 354A             >
 759+ 354A             >
 759+ 354A             >                org     (Heap_Ptr & $1FFF) + $E000
 759+ E9F4             >
 759+ E9F4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 759+ E9F4             >Latest_Definition defl  Heap_Ptr
 759+ E9F4             >
 759+ E9F4             >                // dummy db directives used to calculate length of namec
 759+ E9F4 4D 4F 44    >                db      "MOD"
 759+ E9F7             >len_NFA         defl    $ - temp_NFA
 759+ E9F7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 759+ E9F4             >
 759+ E9F4 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 759+ E9F5 4D 4F 44    >                db      "MOD"               // name string in 7-bit ascii, but
 759+ E9F8             >                org     $-1                 // alter last byte of Name just above to set
 759+ E9F7 C4          >                db      {b $} | END_BIT     // msb as name end
 759+ E9F8             >
 759+ E9F8 EE 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 759+ E9FA             >Prev_Ptr        defl    Heap_Ptr
 759+ E9FA             >
 759+ E9FA             >mirror_Ptr      defl    $
 759+ E9FA             >
 759+ E9FA 4C 35       >                dw      Dict_Ptr + 2        // xt
 759+ E9FC             >Heap_Ptr        defl    $ - $E000           // save current HP
 759+ E9FC             >
 759+ E9FC             >Current_HP      defl  $ - $E000             // used to set HP once!
 759+ E9FC             >
 759+ E9FC             >//              ______________________________________________________________________
 759+ E9FC             >//              Dictionary part
 759+ E9FC             >
 759+ E9FC             >                org     Dict_Ptr
 759+ 354A             >
 759+ 354A FA 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 759+ 354C             >
 759+ 354C             >MOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 759+ 354C CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 759+ 354F             >
 759+ 354F             >
 759+ 354F             >                endif           ; ok        // for other definitions it "points" the correct handler
 759+ 354F             >                // Use of "; ok" to suppress "warning[fwdref]"
 759+ 354F             >
 759+ 354F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 760+ 354F 32 35 C0 25                  dw      DIVMOD, DROP            // /mod drop
 761+ 3553 02 25                        dw      EXIT                    // ;
 762+ 3555
 763+ 3555              //  ______________________________________________________________________
 764+ 3555              //
 765+ 3555              // */mod        n1 n2 n3 -- n4 n5
 766+ 3555              // leaves the quotient n5 and the remainder n4 of the operation
 767+ 3555              // (n1 * n2) / n3. The intermediate passage through a double number
 768+ 3555              // avoids loss of precision
 769+ 3555                              Colon_Def MUL_DIV_MOD, "*/MOD", is_normal
 769+ 3555             >                New_Def  MUL_DIV_MOD, "*/MOD", Enter_Ptr, is_normal ; ok
 769+ 3555             >
 769+ 3555             >Dict_Ptr        defl    $
 769+ 3555             >
 769+ 3555             >//              ______________________________________________________________________
 769+ 3555             >//              Heap part
 769+ 3555             >
 769+ 3555             >
 769+ 3555             >                org     (Heap_Ptr & $1FFF) + $E000
 769+ E9FC             >
 769+ E9FC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 769+ E9FC             >Latest_Definition defl  Heap_Ptr
 769+ E9FC             >
 769+ E9FC             >                // dummy db directives used to calculate length of namec
 769+ E9FC 2A 2F 4D 4F >                db      "*/MOD"
 769+ EA00 44          >
 769+ EA01             >len_NFA         defl    $ - temp_NFA
 769+ EA01             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 769+ E9FC             >
 769+ E9FC 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 769+ E9FD 2A 2F 4D 4F >                db      "*/MOD"               // name string in 7-bit ascii, but
 769+ EA01 44          >
 769+ EA02             >                org     $-1                 // alter last byte of Name just above to set
 769+ EA01 C4          >                db      {b $} | END_BIT     // msb as name end
 769+ EA02             >
 769+ EA02 F4 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 769+ EA04             >Prev_Ptr        defl    Heap_Ptr
 769+ EA04             >
 769+ EA04             >mirror_Ptr      defl    $
 769+ EA04             >
 769+ EA04 57 35       >                dw      Dict_Ptr + 2        // xt
 769+ EA06             >Heap_Ptr        defl    $ - $E000           // save current HP
 769+ EA06             >
 769+ EA06             >Current_HP      defl  $ - $E000             // used to set HP once!
 769+ EA06             >
 769+ EA06             >//              ______________________________________________________________________
 769+ EA06             >//              Dictionary part
 769+ EA06             >
 769+ EA06             >                org     Dict_Ptr
 769+ 3555             >
 769+ 3555 04 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 769+ 3557             >
 769+ 3557             >MUL_DIV_MOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 769+ 3557 CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 769+ 355A             >
 769+ 355A             >
 769+ 355A             >                endif           ; ok        // for other definitions it "points" the correct handler
 769+ 355A             >                // Use of "; ok" to suppress "warning[fwdref]"
 769+ 355A             >
 769+ 355A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 770+ 355A 0C 25 9E 34                  dw      TO_R, MMUL              // >r  m*
 771+ 355E 17 25 13 35                  dw      R_TO, MDIVM             // r>  m/mod
 772+ 3562 02 25                        dw      EXIT                    // ;
 773+ 3564
 774+ 3564              //  ______________________________________________________________________
 775+ 3564              //
 776+ 3564              // */          n1 n2 n3 -- n4
 777+ 3564              // (n1 * n2) / n3. The intermediate passage through a double number avoids loss of precision
 778+ 3564                              Colon_Def MUL_DIV, "*/", is_normal
 778+ 3564             >                New_Def  MUL_DIV, "*/", Enter_Ptr, is_normal ; ok
 778+ 3564             >
 778+ 3564             >Dict_Ptr        defl    $
 778+ 3564             >
 778+ 3564             >//              ______________________________________________________________________
 778+ 3564             >//              Heap part
 778+ 3564             >
 778+ 3564             >
 778+ 3564             >                org     (Heap_Ptr & $1FFF) + $E000
 778+ EA06             >
 778+ EA06             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 778+ EA06             >Latest_Definition defl  Heap_Ptr
 778+ EA06             >
 778+ EA06             >                // dummy db directives used to calculate length of namec
 778+ EA06 2A 2F       >                db      "*/"
 778+ EA08             >len_NFA         defl    $ - temp_NFA
 778+ EA08             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 778+ EA06             >
 778+ EA06 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 778+ EA07 2A 2F       >                db      "*/"               // name string in 7-bit ascii, but
 778+ EA09             >                org     $-1                 // alter last byte of Name just above to set
 778+ EA08 AF          >                db      {b $} | END_BIT     // msb as name end
 778+ EA09             >
 778+ EA09 FC 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 778+ EA0B             >Prev_Ptr        defl    Heap_Ptr
 778+ EA0B             >
 778+ EA0B             >mirror_Ptr      defl    $
 778+ EA0B             >
 778+ EA0B 66 35       >                dw      Dict_Ptr + 2        // xt
 778+ EA0D             >Heap_Ptr        defl    $ - $E000           // save current HP
 778+ EA0D             >
 778+ EA0D             >Current_HP      defl  $ - $E000             // used to set HP once!
 778+ EA0D             >
 778+ EA0D             >//              ______________________________________________________________________
 778+ EA0D             >//              Dictionary part
 778+ EA0D             >
 778+ EA0D             >                org     Dict_Ptr
 778+ 3564             >
 778+ 3564 0B 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 778+ 3566             >
 778+ 3566             >MUL_DIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 778+ 3566 CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 778+ 3569             >
 778+ 3569             >
 778+ 3569             >                endif           ; ok        // for other definitions it "points" the correct handler
 778+ 3569             >                // Use of "; ok" to suppress "warning[fwdref]"
 778+ 3569             >
 778+ 3569             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 779+ 3569 57 35                        dw     MUL_DIV_MOD              // */mod
 780+ 356B C5 25                        dw     NIP                      // nip
 781+ 356D 02 25                        dw     EXIT                     // ;
 782+ 356F
 783+ 356F
 784+ 356F              //  ______________________________________________________________________
 785+ 356F              //
 786+ 356F              // m/mod        ud1 u2 -- u3 ud4
 787+ 356F              // mixed operation: it leaves the remainder u3 and the quotient ud4 of ud1 / u1.
 788+ 356F              // All terms are unsigned.
 789+ 356F              //              Colon_Def MDIV_MOD, "M/MOD", is_normal
 790+ 356F              //              dw      TO_R                    // >r           ( ud1 )
 791+ 356F              //              dw      ZERO, R_OP, UMDIVMOD    // 0 r um/mod   ( l rem1 h/r )
 792+ 356F              //              dw      R_TO, SWAP, TO_R        // r> swap >r   ( l rem )
 793+ 356F              //              dw      UMDIVMOD                // um/mod       ( rem2 l/r )
 794+ 356F              //              dw      R_TO                    // r>           ( rem2 l/r h/r )
 795+ 356F              //              dw      EXIT                    // ;
 796+ 356F
 797+ 356F              //  ______________________________________________________________________
 798+ 356F              //
 799+ 356F              // (line)       n1 n2 -- a b
 800+ 356F              // sends the line n1 of block n2 to the disk buffer.
 801+ 356F              // it returns the address a and ca counter b = C/L meaning a whole line.
 802+ 356F                              Colon_Def CLINE, "(LINE)", is_normal
 802+ 356F             >                New_Def  CLINE, "(LINE)", Enter_Ptr, is_normal ; ok
 802+ 356F             >
 802+ 356F             >Dict_Ptr        defl    $
 802+ 356F             >
 802+ 356F             >//              ______________________________________________________________________
 802+ 356F             >//              Heap part
 802+ 356F             >
 802+ 356F             >
 802+ 356F             >                org     (Heap_Ptr & $1FFF) + $E000
 802+ EA0D             >
 802+ EA0D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 802+ EA0D             >Latest_Definition defl  Heap_Ptr
 802+ EA0D             >
 802+ EA0D             >                // dummy db directives used to calculate length of namec
 802+ EA0D 28 4C 49 4E >                db      "(LINE)"
 802+ EA11 45 29       >
 802+ EA13             >len_NFA         defl    $ - temp_NFA
 802+ EA13             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 802+ EA0D             >
 802+ EA0D 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 802+ EA0E 28 4C 49 4E >                db      "(LINE)"               // name string in 7-bit ascii, but
 802+ EA12 45 29       >
 802+ EA14             >                org     $-1                 // alter last byte of Name just above to set
 802+ EA13 A9          >                db      {b $} | END_BIT     // msb as name end
 802+ EA14             >
 802+ EA14 06 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 802+ EA16             >Prev_Ptr        defl    Heap_Ptr
 802+ EA16             >
 802+ EA16             >mirror_Ptr      defl    $
 802+ EA16             >
 802+ EA16 71 35       >                dw      Dict_Ptr + 2        // xt
 802+ EA18             >Heap_Ptr        defl    $ - $E000           // save current HP
 802+ EA18             >
 802+ EA18             >Current_HP      defl  $ - $E000             // used to set HP once!
 802+ EA18             >
 802+ EA18             >//              ______________________________________________________________________
 802+ EA18             >//              Dictionary part
 802+ EA18             >
 802+ EA18             >                org     Dict_Ptr
 802+ 356F             >
 802+ 356F 16 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 802+ 3571             >
 802+ 3571             >CLINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 802+ 3571 CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 802+ 3574             >
 802+ 3574             >
 802+ 3574             >                endif           ; ok        // for other definitions it "points" the correct handler
 802+ 3574             >                // Use of "; ok" to suppress "warning[fwdref]"
 802+ 3574             >
 802+ 3574             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 803+ 3574 0C 25                        dw      TO_R                    // >r
 804+ 3576 6E 27                        dw      CL                      // c/l
 805+ 3578 75 27 57 35                  dw      BBUF, MUL_DIV_MOD       // */mod
 806+ 357C 17 25                        dw      R_TO                    // r>
 807+ 357E 7C 27 27 35                  dw      BSCR, MUL, PLUS         // b/scr * +
 807+ 3582 55 25
 808+ 3584 5A 37                        dw      BLOCK                   // block   ( forward )
 809+ 3586 55 25                        dw      PLUS                    // +
 810+ 3588 6E 27                        dw      CL                      // c/l
 811+ 358A 02 25                        dw      EXIT                    // ;
 812+ 358C
 813+ 358C              //  ______________________________________________________________________
 814+ 358C              //
 815+ 358C              // .line        n1 n2 --
 816+ 358C              // Sends to output line  n1  of screen n2.
 817+ 358C                              Colon_Def DOT_LINE, ".LINE", is_normal
 817+ 358C             >                New_Def  DOT_LINE, ".LINE", Enter_Ptr, is_normal ; ok
 817+ 358C             >
 817+ 358C             >Dict_Ptr        defl    $
 817+ 358C             >
 817+ 358C             >//              ______________________________________________________________________
 817+ 358C             >//              Heap part
 817+ 358C             >
 817+ 358C             >
 817+ 358C             >                org     (Heap_Ptr & $1FFF) + $E000
 817+ EA18             >
 817+ EA18             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 817+ EA18             >Latest_Definition defl  Heap_Ptr
 817+ EA18             >
 817+ EA18             >                // dummy db directives used to calculate length of namec
 817+ EA18 2E 4C 49 4E >                db      ".LINE"
 817+ EA1C 45          >
 817+ EA1D             >len_NFA         defl    $ - temp_NFA
 817+ EA1D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 817+ EA18             >
 817+ EA18 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 817+ EA19 2E 4C 49 4E >                db      ".LINE"               // name string in 7-bit ascii, but
 817+ EA1D 45          >
 817+ EA1E             >                org     $-1                 // alter last byte of Name just above to set
 817+ EA1D C5          >                db      {b $} | END_BIT     // msb as name end
 817+ EA1E             >
 817+ EA1E 0D 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 817+ EA20             >Prev_Ptr        defl    Heap_Ptr
 817+ EA20             >
 817+ EA20             >mirror_Ptr      defl    $
 817+ EA20             >
 817+ EA20 8E 35       >                dw      Dict_Ptr + 2        // xt
 817+ EA22             >Heap_Ptr        defl    $ - $E000           // save current HP
 817+ EA22             >
 817+ EA22             >Current_HP      defl  $ - $E000             // used to set HP once!
 817+ EA22             >
 817+ EA22             >//              ______________________________________________________________________
 817+ EA22             >//              Dictionary part
 817+ EA22             >
 817+ EA22             >                org     Dict_Ptr
 817+ 358C             >
 817+ 358C 20 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 817+ 358E             >
 817+ 358E             >DOT_LINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 817+ 358E CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 817+ 3591             >
 817+ 3591             >
 817+ 3591             >                endif           ; ok        // for other definitions it "points" the correct handler
 817+ 3591             >                // Use of "; ok" to suppress "warning[fwdref]"
 817+ 3591             >
 817+ 3591             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 818+ 3591 71 35 4C 2C                  dw      CLINE, LTRAILING, TYPE  // (line) -trailing type
 818+ 3595 35 2C
 819+ 3597 02 25                        dw      EXIT                    // ;
 820+ 3599
 821+ 3599              //  ______________________________________________________________________
 822+ 3599              //
 823+ 3599              // message       n1 n2 --
 824+ 3599              // prints error message to current channel.
 825+ 3599              // if WARNING is 0, prints "MSG#n".
 826+ 3599              // if WARNING is 1, prints line n of screen 4.
 827+ 3599              // if WARNING is -1, see ERROR
 828+ 3599              // value can be negative or beyond block 4.
 829+ 3599                              Colon_Def MESSAGE, "MESSAGE", is_normal
 829+ 3599             >                New_Def  MESSAGE, "MESSAGE", Enter_Ptr, is_normal ; ok
 829+ 3599             >
 829+ 3599             >Dict_Ptr        defl    $
 829+ 3599             >
 829+ 3599             >//              ______________________________________________________________________
 829+ 3599             >//              Heap part
 829+ 3599             >
 829+ 3599             >
 829+ 3599             >                org     (Heap_Ptr & $1FFF) + $E000
 829+ EA22             >
 829+ EA22             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 829+ EA22             >Latest_Definition defl  Heap_Ptr
 829+ EA22             >
 829+ EA22             >                // dummy db directives used to calculate length of namec
 829+ EA22 4D 45 53 53 >                db      "MESSAGE"
 829+ EA26 41 47 45    >
 829+ EA29             >len_NFA         defl    $ - temp_NFA
 829+ EA29             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 829+ EA22             >
 829+ EA22 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 829+ EA23 4D 45 53 53 >                db      "MESSAGE"               // name string in 7-bit ascii, but
 829+ EA27 41 47 45    >
 829+ EA2A             >                org     $-1                 // alter last byte of Name just above to set
 829+ EA29 C5          >                db      {b $} | END_BIT     // msb as name end
 829+ EA2A             >
 829+ EA2A 18 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 829+ EA2C             >Prev_Ptr        defl    Heap_Ptr
 829+ EA2C             >
 829+ EA2C             >mirror_Ptr      defl    $
 829+ EA2C             >
 829+ EA2C 9B 35       >                dw      Dict_Ptr + 2        // xt
 829+ EA2E             >Heap_Ptr        defl    $ - $E000           // save current HP
 829+ EA2E             >
 829+ EA2E             >Current_HP      defl  $ - $E000             // used to set HP once!
 829+ EA2E             >
 829+ EA2E             >//              ______________________________________________________________________
 829+ EA2E             >//              Dictionary part
 829+ EA2E             >
 829+ EA2E             >                org     Dict_Ptr
 829+ 3599             >
 829+ 3599 2C 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 829+ 359B             >
 829+ 359B             >MESSAGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 829+ 359B CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 829+ 359E             >
 829+ 359E             >
 829+ 359E             >                endif           ; ok        // for other definitions it "points" the correct handler
 829+ 359E             >                // Use of "; ok" to suppress "warning[fwdref]"
 829+ 359E             >
 829+ 359E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 830+ 359E B5 27 4C 26                  dw      WARNING, FETCH          // warning @
 831+ 35A2                                                              // if
 832+ 35A2 8F 20                        dw      ZBRANCH
 833+ 35A4 12 00                        dw      Message_Else - $
 834+ 35A6 3D 20 20 00                  dw          LIT, 32, PLUS       //      32 +
 834+ 35AA 55 25
 835+ 35AC 52 27                        dw          TWO                 //      2
 836+ 35AE 8E 35                        dw          DOT_LINE            //      .line
 837+ 35B0 3A 29                        dw          SPACE               //      space
 838+ 35B2                                                              // else
 839+ 35B2
 840+ 35B2 82 20                        dw      BRANCH
 841+ 35B4 0B 00                        dw      Message_ENdif - $
 842+ 35B6              Message_Else:
 843+ 35B6 D2 2D                        dw          C_DOT_QUOTE         //      .( msg#)
 844+ 35B8 04 6D 73 67                  db          4, "msg#"
 844+ 35BC 23
 845+ 35BD AD 3C                        dw          DOT                 //      .  ( forward )
 846+ 35BF              Message_ENdif:                                  // endif
 847+ 35BF 02 25                        dw      EXIT                    // ;
 848+ 35C1
 849+ 35C1
 850+ 35C1              //  ______________________________________________________________________
 851+ 35C1              //
 852+ 35C1              // device
 853+ 35C1                              Variable_Def DEVICE,   "DEVICE",   2
 853+ 35C1             >                New_Def  DEVICE, "DEVICE", Variable_Ptr, is_normal
 853+ 35C1             >
 853+ 35C1             >Dict_Ptr        defl    $
 853+ 35C1             >
 853+ 35C1             >//              ______________________________________________________________________
 853+ 35C1             >//              Heap part
 853+ 35C1             >
 853+ 35C1             >
 853+ 35C1             >                org     (Heap_Ptr & $1FFF) + $E000
 853+ EA2E             >
 853+ EA2E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 853+ EA2E             >Latest_Definition defl  Heap_Ptr
 853+ EA2E             >
 853+ EA2E             >                // dummy db directives used to calculate length of namec
 853+ EA2E 44 45 56 49 >                db      "DEVICE"
 853+ EA32 43 45       >
 853+ EA34             >len_NFA         defl    $ - temp_NFA
 853+ EA34             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 853+ EA2E             >
 853+ EA2E 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 853+ EA2F 44 45 56 49 >                db      "DEVICE"               // name string in 7-bit ascii, but
 853+ EA33 43 45       >
 853+ EA35             >                org     $-1                 // alter last byte of Name just above to set
 853+ EA34 C5          >                db      {b $} | END_BIT     // msb as name end
 853+ EA35             >
 853+ EA35 22 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 853+ EA37             >Prev_Ptr        defl    Heap_Ptr
 853+ EA37             >
 853+ EA37             >mirror_Ptr      defl    $
 853+ EA37             >
 853+ EA37 C3 35       >                dw      Dict_Ptr + 2        // xt
 853+ EA39             >Heap_Ptr        defl    $ - $E000           // save current HP
 853+ EA39             >
 853+ EA39             >Current_HP      defl  $ - $E000             // used to set HP once!
 853+ EA39             >
 853+ EA39             >//              ______________________________________________________________________
 853+ EA39             >//              Dictionary part
 853+ EA39             >
 853+ EA39             >                org     Dict_Ptr
 853+ 35C1             >
 853+ 35C1 37 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 853+ 35C3             >
 853+ 35C3             >DEVICE:          if Variable_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 853+ 35C3 CD 2B 27    >                call    Variable_Ptr ; ok        // for primitive definitions  actual code
 853+ 35C6             >
 853+ 35C6             >
 853+ 35C6             >                endif           ; ok        // for other definitions it "points" the correct handler
 853+ 35C6             >                // Use of "; ok" to suppress "warning[fwdref]"
 853+ 35C6             >
 853+ 35C6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 853+ 35C6 02 00       >                dw      2
 854+ 35C8
 855+ 35C8              //  ______________________________________________________________________
 856+ 35C8
# file closed: C:\Zx\CSpect\Projects\vForth17_DOT/source/L2.asm
 124  35C8                              include "next-opt1.asm"
# file opened: C:\Zx\CSpect\Projects\vForth17_DOT/source/next-opt1.asm
   1+ 35C8              //  ______________________________________________________________________
   2+ 35C8              //
   3+ 35C8              //  next-opt.asm
   4+ 35C8              //
   5+ 35C8              //  ZX Spectrum Next - peculiar definitions
   6+ 35C8              //  ______________________________________________________________________
   7+ 35C8
   8+ 35C8              //  ______________________________________________________________________
   9+ 35C8              //
  10+ 35C8              // reg@         n -- b
  11+ 35C8              // read Next REGister n giving byte b
  12+ 35C8              //
  13+ 35C8              //              Colon_Def REG_FETCH, "REG@", is_normal
  14+ 35C8              //              dw      LIT, $243B
  15+ 35C8              //              dw      PSTORE
  16+ 35C8              //              dw      LIT, $253B
  17+ 35C8              //              dw      PFETCH
  18+ 35C8              //              dw      EXIT
  19+ 35C8                              New_Def REG_FETCH, "REG@", is_code, is_normal
  19+ 35C8             >
  19+ 35C8             >Dict_Ptr        defl    $
  19+ 35C8             >
  19+ 35C8             >//              ______________________________________________________________________
  19+ 35C8             >//              Heap part
  19+ 35C8             >
  19+ 35C8             >
  19+ 35C8             >                org     (Heap_Ptr & $1FFF) + $E000
  19+ EA39             >
  19+ EA39             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  19+ EA39             >Latest_Definition defl  Heap_Ptr
  19+ EA39             >
  19+ EA39             >                // dummy db directives used to calculate length of namec
  19+ EA39 52 45 47 40 >                db      "REG@"
  19+ EA3D             >len_NFA         defl    $ - temp_NFA
  19+ EA3D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  19+ EA39             >
  19+ EA39 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  19+ EA3A 52 45 47 40 >                db      "REG@"               // name string in 7-bit ascii, but
  19+ EA3E             >                org     $-1                 // alter last byte of Name just above to set
  19+ EA3D C0          >                db      {b $} | END_BIT     // msb as name end
  19+ EA3E             >
  19+ EA3E 2E 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  19+ EA40             >Prev_Ptr        defl    Heap_Ptr
  19+ EA40             >
  19+ EA40             >mirror_Ptr      defl    $
  19+ EA40             >
  19+ EA40 CA 35       >                dw      Dict_Ptr + 2        // xt
  19+ EA42             >Heap_Ptr        defl    $ - $E000           // save current HP
  19+ EA42             >
  19+ EA42             >Current_HP      defl  $ - $E000             // used to set HP once!
  19+ EA42             >
  19+ EA42             >//              ______________________________________________________________________
  19+ EA42             >//              Dictionary part
  19+ EA42             >
  19+ EA42             >                org     Dict_Ptr
  19+ 35C8             >
  19+ 35C8 40 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  19+ 35CA             >
  19+ 35CA             >REG_FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  19+ 35CA ~           >                call    runcode ; ok        // for primitive definitions  actual code
  19+ 35CA ~           >
  19+ 35CA ~           >
  19+ 35CA             >                endif           ; ok        // for other definitions it "points" the correct handler
  19+ 35CA             >                // Use of "; ok" to suppress "warning[fwdref]"
  19+ 35CA             >
  19+ 35CA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  20+ 35CA D9                           exx
  21+ 35CB 01 3B 24                     ld      bc, $243B
  22+ 35CE E1                           pop     hl
  23+ 35CF ED 69                        out     (c), l
  24+ 35D1 04                           inc     b
  25+ 35D2 ED 68                        in      l, (c)
  26+ 35D4 E5                           push    hl
  27+ 35D5 D9                           exx
  28+ 35D6                              next
  28+ 35D6 DD E9       >                jp      (ix)
  29+ 35D8
  30+ 35D8
  31+ 35D8              //  ______________________________________________________________________
  32+ 35D8              //
  33+ 35D8              // reg!         b n --
  34+ 35D8              // write value b to Next REGister n
  35+ 35D8              //
  36+ 35D8              //              Colon_Def REG_STORE, "REG!", is_normal
  37+ 35D8              //              dw      LIT, $243B
  38+ 35D8              //              dw      PSTORE
  39+ 35D8              //              dw      LIT, $253B
  40+ 35D8              //              dw      PSTORE
  41+ 35D8              //              dw      EXIT
  42+ 35D8                              New_Def REG_STORE, "REG!", is_code, is_normal
  42+ 35D8             >
  42+ 35D8             >Dict_Ptr        defl    $
  42+ 35D8             >
  42+ 35D8             >//              ______________________________________________________________________
  42+ 35D8             >//              Heap part
  42+ 35D8             >
  42+ 35D8             >
  42+ 35D8             >                org     (Heap_Ptr & $1FFF) + $E000
  42+ EA42             >
  42+ EA42             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  42+ EA42             >Latest_Definition defl  Heap_Ptr
  42+ EA42             >
  42+ EA42             >                // dummy db directives used to calculate length of namec
  42+ EA42 52 45 47 21 >                db      "REG!"
  42+ EA46             >len_NFA         defl    $ - temp_NFA
  42+ EA46             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  42+ EA42             >
  42+ EA42 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  42+ EA43 52 45 47 21 >                db      "REG!"               // name string in 7-bit ascii, but
  42+ EA47             >                org     $-1                 // alter last byte of Name just above to set
  42+ EA46 A1          >                db      {b $} | END_BIT     // msb as name end
  42+ EA47             >
  42+ EA47 39 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  42+ EA49             >Prev_Ptr        defl    Heap_Ptr
  42+ EA49             >
  42+ EA49             >mirror_Ptr      defl    $
  42+ EA49             >
  42+ EA49 DA 35       >                dw      Dict_Ptr + 2        // xt
  42+ EA4B             >Heap_Ptr        defl    $ - $E000           // save current HP
  42+ EA4B             >
  42+ EA4B             >Current_HP      defl  $ - $E000             // used to set HP once!
  42+ EA4B             >
  42+ EA4B             >//              ______________________________________________________________________
  42+ EA4B             >//              Dictionary part
  42+ EA4B             >
  42+ EA4B             >                org     Dict_Ptr
  42+ 35D8             >
  42+ 35D8 49 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  42+ 35DA             >
  42+ 35DA             >REG_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  42+ 35DA ~           >                call    runcode ; ok        // for primitive definitions  actual code
  42+ 35DA ~           >
  42+ 35DA ~           >
  42+ 35DA             >                endif           ; ok        // for other definitions it "points" the correct handler
  42+ 35DA             >                // Use of "; ok" to suppress "warning[fwdref]"
  42+ 35DA             >
  42+ 35DA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  43+ 35DA D9                           exx
  44+ 35DB 01 3B 24                     ld      bc, $243B
  45+ 35DE E1                           pop     hl
  46+ 35DF ED 69                        out     (c), l
  47+ 35E1 04                           inc     b
  48+ 35E2 E1                           pop     hl
  49+ 35E3 ED 69                        out     (c), l
  50+ 35E5 D9                           exx
  51+ 35E6                              next
  51+ 35E6 DD E9       >                jp      (ix)
  52+ 35E8
  53+ 35E8
  54+ 35E8              //  ______________________________________________________________________
  55+ 35E8              //
  56+ 35E8              // m_p3dos      n1 n2 n3 n4 a -- n5 n6 n7 n8  f
  57+ 35E8              // NextZXOS call wrapper.
  58+ 35E8              //  n1 = hl register parameter value
  59+ 35E8              //  n2 = de register parameter value
  60+ 35E8              //  n3 = bc register parameter value
  61+ 35E8              //  n4 =  a register parameter value
  62+ 35E8              //   a = routine address in ROM 3
  63+ 35E8              // ----
  64+ 35E8              //  n5 = hl returned value
  65+ 35E8              //  n6 = de returned value
  66+ 35E8              //  n7 = bc returned value
  67+ 35E8              //  n8 =  a returned value
  68+ 35E8              //   f
  69+ 35E8                              New_Def M_P3DOS, "M_P3DOS", is_code, is_normal
  69+ 35E8             >
  69+ 35E8             >Dict_Ptr        defl    $
  69+ 35E8             >
  69+ 35E8             >//              ______________________________________________________________________
  69+ 35E8             >//              Heap part
  69+ 35E8             >
  69+ 35E8             >
  69+ 35E8             >                org     (Heap_Ptr & $1FFF) + $E000
  69+ EA4B             >
  69+ EA4B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  69+ EA4B             >Latest_Definition defl  Heap_Ptr
  69+ EA4B             >
  69+ EA4B             >                // dummy db directives used to calculate length of namec
  69+ EA4B 4D 5F 50 33 >                db      "M_P3DOS"
  69+ EA4F 44 4F 53    >
  69+ EA52             >len_NFA         defl    $ - temp_NFA
  69+ EA52             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  69+ EA4B             >
  69+ EA4B 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  69+ EA4C 4D 5F 50 33 >                db      "M_P3DOS"               // name string in 7-bit ascii, but
  69+ EA50 44 4F 53    >
  69+ EA53             >                org     $-1                 // alter last byte of Name just above to set
  69+ EA52 D3          >                db      {b $} | END_BIT     // msb as name end
  69+ EA53             >
  69+ EA53 42 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  69+ EA55             >Prev_Ptr        defl    Heap_Ptr
  69+ EA55             >
  69+ EA55             >mirror_Ptr      defl    $
  69+ EA55             >
  69+ EA55 EA 35       >                dw      Dict_Ptr + 2        // xt
  69+ EA57             >Heap_Ptr        defl    $ - $E000           // save current HP
  69+ EA57             >
  69+ EA57             >Current_HP      defl  $ - $E000             // used to set HP once!
  69+ EA57             >
  69+ EA57             >//              ______________________________________________________________________
  69+ EA57             >//              Dictionary part
  69+ EA57             >
  69+ EA57             >                org     Dict_Ptr
  69+ 35E8             >
  69+ 35E8 55 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  69+ 35EA             >
  69+ 35EA             >M_P3DOS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  69+ 35EA ~           >                call    runcode ; ok        // for primitive definitions  actual code
  69+ 35EA ~           >
  69+ 35EA ~           >
  69+ 35EA             >                endif           ; ok        // for other definitions it "points" the correct handler
  69+ 35EA             >                // Use of "; ok" to suppress "warning[fwdref]"
  69+ 35EA             >
  69+ 35EA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  70+ 35EA D9                            exx
  71+ 35EB E1                            pop     hl                  // dos call entry address a  //  n1 n2 n3 n4
  72+ 35EC D1                            pop     de                  // a register argument       //  n1 n2 n3
  73+ 35ED 7B                            ld      a, e
  74+ 35EE C1                            pop     bc                  // bc' argument              //  n1 n2
  75+ 35EF D1                            pop     de                  // de' argument              //  n1
  76+ 35F0 E3                            ex      (sp), hl            // hl' argument and entry address in TOS
  77+ 35F1 D9                           exx
  78+ 35F2 E1                           pop     hl                  // entry address a
  79+ 35F3 DD E5                        push    ix
  80+ 35F5 D5                           push    de
  81+ 35F6 C5                           push    bc
  82+ 35F7 EB                           ex      de, hl              // de is entry address
  83+ 35F8              //              ld      (SP_Saved), sp
  84+ 35F8              //              ld      sp, Cold_origin - 5
  85+ 35F8              //              ld      sp, TSTACK          // Carefully balanced from startup
  86+ 35F8 0E 07                        ld      c, 7                // use 7 RAM Bank
  87+ 35FA F3                           di
  88+ 35FB CF                           rst     08
  89+ 35FC 94                           db      $94
  90+ 35FD FB                           ei
  91+ 35FE                      ////    ld      a, (Saved_MMU + 1)
  92+ 35FE                      ////    nextreg $53, a            // some calls reset MMU3 to $11 !
  93+ 35FE
  94+ 35FE              //              ld      sp, (SP_Saved)
  95+ 35FE              //              push    ix
  96+ 35FE              //              pop     hl
  97+ 35FE              //              ld      (IX_Echo), hl
  98+ 35FE DD 22 32 20                  ld      (IX_Echo), ix
  99+ 3602
 100+ 3602 D9                           exx
 101+ 3603 C1                           pop     bc
 102+ 3604 D1                           pop     de
 103+ 3605 DD E1                        pop     ix
 104+ 3607 D9                            exx
 105+ 3608 E5                            push    hl
 106+ 3609 D5                            push    de
 107+ 360A C5                            push    bc
 108+ 360B 26 00                         ld      h, 0
 109+ 360D 6F                            ld      l, a
 110+ 360E E5                            push    hl
 111+ 360F D9                           exx
 112+ 3610 ED 62                        sbc     hl, hl              // -1 for OK ; 0 for KO but now...
 113+ 3612 23                           inc     hl                  //  0 for OK ; 1 for ko
 114+ 3613 E5                           push    hl
 115+ 3614                              next
 115+ 3614 DD E9       >                jp      (ix)
 116+ 3616
 117+ 3616              //  ______________________________________________________________________
 118+ 3616              //
 119+ 3616              // blk-fh
 120+ 3616              //              Variable_Def BLK_FH,   "BLK-FH",   1
 121+ 3616              //
 122+ 3616              //              New_Def BLK_FNAME,   "BLK-FNAME", Create_Ptr, is_normal
 123+ 3616              // Len_Filename:   db      30
 124+ 3616              // Blk_filename:   db      "c:/tools/vforth/!Blocks-64.bin", 0
 125+ 3616              //                 ds      32
 126+ 3616
 127+ 3616              //  ______________________________________________________________________
 128+ 3616              //
 129+ 3616              // blk-seek     n --
 130+ 3616              // seek block n  within blocks!.bin  file
 131+ 3616                              Colon_Def BLK_SEEK, "BLK-SEEK", is_normal
 131+ 3616             >                New_Def  BLK_SEEK, "BLK-SEEK", Enter_Ptr, is_normal ; ok
 131+ 3616             >
 131+ 3616             >Dict_Ptr        defl    $
 131+ 3616             >
 131+ 3616             >//              ______________________________________________________________________
 131+ 3616             >//              Heap part
 131+ 3616             >
 131+ 3616             >
 131+ 3616             >                org     (Heap_Ptr & $1FFF) + $E000
 131+ EA57             >
 131+ EA57             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 131+ EA57             >Latest_Definition defl  Heap_Ptr
 131+ EA57             >
 131+ EA57             >                // dummy db directives used to calculate length of namec
 131+ EA57 42 4C 4B 2D >                db      "BLK-SEEK"
 131+ EA5B 53 45 45 4B >
 131+ EA5F             >len_NFA         defl    $ - temp_NFA
 131+ EA5F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 131+ EA57             >
 131+ EA57 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 131+ EA58 42 4C 4B 2D >                db      "BLK-SEEK"               // name string in 7-bit ascii, but
 131+ EA5C 53 45 45 4B >
 131+ EA60             >                org     $-1                 // alter last byte of Name just above to set
 131+ EA5F CB          >                db      {b $} | END_BIT     // msb as name end
 131+ EA60             >
 131+ EA60 4B 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 131+ EA62             >Prev_Ptr        defl    Heap_Ptr
 131+ EA62             >
 131+ EA62             >mirror_Ptr      defl    $
 131+ EA62             >
 131+ EA62 18 36       >                dw      Dict_Ptr + 2        // xt
 131+ EA64             >Heap_Ptr        defl    $ - $E000           // save current HP
 131+ EA64             >
 131+ EA64             >Current_HP      defl  $ - $E000             // used to set HP once!
 131+ EA64             >
 131+ EA64             >//              ______________________________________________________________________
 131+ EA64             >//              Dictionary part
 131+ EA64             >
 131+ EA64             >                org     Dict_Ptr
 131+ 3616             >
 131+ 3616 62 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 131+ 3618             >
 131+ 3618             >BLK_SEEK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 131+ 3618 CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 131+ 361B             >
 131+ 361B             >
 131+ 361B             >                endif           ; ok        // for other definitions it "points" the correct handler
 131+ 361B             >                // Use of "; ok" to suppress "warning[fwdref]"
 131+ 361B             >
 131+ 361B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 132+ 361B 75 27 9E 34                  dw  BBUF, MMUL
 133+ 361F 65 3F 4C 26                  dw  BLK_FH, FETCH
 134+ 3623 8B 23                        dw  F_SEEK
 135+ 3625 3D 20 2D 00                  dw  LIT, $2D, QERROR
 135+ 3629 A5 2A
 136+ 362B 02 25                        dw  EXIT
 137+ 362D
 138+ 362D              //  ______________________________________________________________________
 139+ 362D              //
 140+ 362D              // blk-read     n --
 141+ 362D              // seek block n  within blocks!.bin  file
 142+ 362D                              Colon_Def BLK_READ, "BLK-READ", is_normal
 142+ 362D             >                New_Def  BLK_READ, "BLK-READ", Enter_Ptr, is_normal ; ok
 142+ 362D             >
 142+ 362D             >Dict_Ptr        defl    $
 142+ 362D             >
 142+ 362D             >//              ______________________________________________________________________
 142+ 362D             >//              Heap part
 142+ 362D             >
 142+ 362D             >
 142+ 362D             >                org     (Heap_Ptr & $1FFF) + $E000
 142+ EA64             >
 142+ EA64             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 142+ EA64             >Latest_Definition defl  Heap_Ptr
 142+ EA64             >
 142+ EA64             >                // dummy db directives used to calculate length of namec
 142+ EA64 42 4C 4B 2D >                db      "BLK-READ"
 142+ EA68 52 45 41 44 >
 142+ EA6C             >len_NFA         defl    $ - temp_NFA
 142+ EA6C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 142+ EA64             >
 142+ EA64 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 142+ EA65 42 4C 4B 2D >                db      "BLK-READ"               // name string in 7-bit ascii, but
 142+ EA69 52 45 41 44 >
 142+ EA6D             >                org     $-1                 // alter last byte of Name just above to set
 142+ EA6C C4          >                db      {b $} | END_BIT     // msb as name end
 142+ EA6D             >
 142+ EA6D 57 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 142+ EA6F             >Prev_Ptr        defl    Heap_Ptr
 142+ EA6F             >
 142+ EA6F             >mirror_Ptr      defl    $
 142+ EA6F             >
 142+ EA6F 2F 36       >                dw      Dict_Ptr + 2        // xt
 142+ EA71             >Heap_Ptr        defl    $ - $E000           // save current HP
 142+ EA71             >
 142+ EA71             >Current_HP      defl  $ - $E000             // used to set HP once!
 142+ EA71             >
 142+ EA71             >//              ______________________________________________________________________
 142+ EA71             >//              Dictionary part
 142+ EA71             >
 142+ EA71             >                org     Dict_Ptr
 142+ 362D             >
 142+ 362D 6F 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 142+ 362F             >
 142+ 362F             >BLK_READ:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 142+ 362F CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 142+ 3632             >
 142+ 3632             >
 142+ 3632             >                endif           ; ok        // for other definitions it "points" the correct handler
 142+ 3632             >                // Use of "; ok" to suppress "warning[fwdref]"
 142+ 3632             >
 142+ 3632             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 143+ 3632 18 36                        dw  BLK_SEEK
 144+ 3634 75 27                        dw  BBUF
 145+ 3636 65 3F 4C 26                  dw  BLK_FH, FETCH
 146+ 363A D6 23                        dw  F_READ
 147+ 363C 3D 20 2E 00                  dw  LIT, $2E, QERROR
 147+ 3640 A5 2A
 148+ 3642 C0 25                        dw  DROP
 149+ 3644 02 25                        dw  EXIT
 150+ 3646
 151+ 3646              //  ______________________________________________________________________
 152+ 3646              //
 153+ 3646              // blk-write     n --
 154+ 3646              // seek block n  within blocks!.bin  file
 155+ 3646                              Colon_Def BLK_WRITE, "BLK-WRITE", is_normal
 155+ 3646             >                New_Def  BLK_WRITE, "BLK-WRITE", Enter_Ptr, is_normal ; ok
 155+ 3646             >
 155+ 3646             >Dict_Ptr        defl    $
 155+ 3646             >
 155+ 3646             >//              ______________________________________________________________________
 155+ 3646             >//              Heap part
 155+ 3646             >
 155+ 3646             >
 155+ 3646             >                org     (Heap_Ptr & $1FFF) + $E000
 155+ EA71             >
 155+ EA71             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 155+ EA71             >Latest_Definition defl  Heap_Ptr
 155+ EA71             >
 155+ EA71             >                // dummy db directives used to calculate length of namec
 155+ EA71 42 4C 4B 2D >                db      "BLK-WRITE"
 155+ EA75 57 52 49 54 >
 155+ EA79 45          >
 155+ EA7A             >len_NFA         defl    $ - temp_NFA
 155+ EA7A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 155+ EA71             >
 155+ EA71 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 155+ EA72 42 4C 4B 2D >                db      "BLK-WRITE"               // name string in 7-bit ascii, but
 155+ EA76 57 52 49 54 >
 155+ EA7A 45          >
 155+ EA7B             >                org     $-1                 // alter last byte of Name just above to set
 155+ EA7A C5          >                db      {b $} | END_BIT     // msb as name end
 155+ EA7B             >
 155+ EA7B 64 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 155+ EA7D             >Prev_Ptr        defl    Heap_Ptr
 155+ EA7D             >
 155+ EA7D             >mirror_Ptr      defl    $
 155+ EA7D             >
 155+ EA7D 48 36       >                dw      Dict_Ptr + 2        // xt
 155+ EA7F             >Heap_Ptr        defl    $ - $E000           // save current HP
 155+ EA7F             >
 155+ EA7F             >Current_HP      defl  $ - $E000             // used to set HP once!
 155+ EA7F             >
 155+ EA7F             >//              ______________________________________________________________________
 155+ EA7F             >//              Dictionary part
 155+ EA7F             >
 155+ EA7F             >                org     Dict_Ptr
 155+ 3646             >
 155+ 3646 7D 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 155+ 3648             >
 155+ 3648             >BLK_WRITE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 155+ 3648 CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 155+ 364B             >
 155+ 364B             >
 155+ 364B             >                endif           ; ok        // for other definitions it "points" the correct handler
 155+ 364B             >                // Use of "; ok" to suppress "warning[fwdref]"
 155+ 364B             >
 155+ 364B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 156+ 364B 18 36                        dw  BLK_SEEK
 157+ 364D 75 27                        dw  BBUF
 158+ 364F 65 3F 4C 26                  dw  BLK_FH, FETCH
 159+ 3653 F4 23                        dw  F_WRITE
 160+ 3655 3D 20 2F 00                  dw  LIT, $2F, QERROR
 160+ 3659 A5 2A
 161+ 365B C0 25                        dw  DROP
 162+ 365D 02 25                        dw  EXIT
 163+ 365F
 164+ 365F              //  ______________________________________________________________________
 165+ 365F              //
 166+ 365F              // blk-init     n --
 167+ 365F              // seek block n  within blocks!.bin  file
 168+ 365F                              Colon_Def BLK_INIT, "BLK-INIT", is_normal
 168+ 365F             >                New_Def  BLK_INIT, "BLK-INIT", Enter_Ptr, is_normal ; ok
 168+ 365F             >
 168+ 365F             >Dict_Ptr        defl    $
 168+ 365F             >
 168+ 365F             >//              ______________________________________________________________________
 168+ 365F             >//              Heap part
 168+ 365F             >
 168+ 365F             >
 168+ 365F             >                org     (Heap_Ptr & $1FFF) + $E000
 168+ EA7F             >
 168+ EA7F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 168+ EA7F             >Latest_Definition defl  Heap_Ptr
 168+ EA7F             >
 168+ EA7F             >                // dummy db directives used to calculate length of namec
 168+ EA7F 42 4C 4B 2D >                db      "BLK-INIT"
 168+ EA83 49 4E 49 54 >
 168+ EA87             >len_NFA         defl    $ - temp_NFA
 168+ EA87             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 168+ EA7F             >
 168+ EA7F 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 168+ EA80 42 4C 4B 2D >                db      "BLK-INIT"               // name string in 7-bit ascii, but
 168+ EA84 49 4E 49 54 >
 168+ EA88             >                org     $-1                 // alter last byte of Name just above to set
 168+ EA87 D4          >                db      {b $} | END_BIT     // msb as name end
 168+ EA88             >
 168+ EA88 71 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 168+ EA8A             >Prev_Ptr        defl    Heap_Ptr
 168+ EA8A             >
 168+ EA8A             >mirror_Ptr      defl    $
 168+ EA8A             >
 168+ EA8A 61 36       >                dw      Dict_Ptr + 2        // xt
 168+ EA8C             >Heap_Ptr        defl    $ - $E000           // save current HP
 168+ EA8C             >
 168+ EA8C             >Current_HP      defl  $ - $E000             // used to set HP once!
 168+ EA8C             >
 168+ EA8C             >//              ______________________________________________________________________
 168+ EA8C             >//              Dictionary part
 168+ EA8C             >
 168+ EA8C             >                org     Dict_Ptr
 168+ 365F             >
 168+ 365F 8A 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 168+ 3661             >
 168+ 3661             >BLK_INIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 168+ 3661 CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 168+ 3664             >
 168+ 3664             >
 168+ 3664             >                endif           ; ok        // for other definitions it "points" the correct handler
 168+ 3664             >                // Use of "; ok" to suppress "warning[fwdref]"
 168+ 3664             >
 168+ 3664             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 169+ 3664 65 3F 4C 26                  dw  BLK_FH, FETCH, F_CLOSE, DROP
 169+ 3668 A6 23 C0 25
 170+ 366C 6C 3F 6E 25                  dw  BLK_FNAME, ONE_PLUS
 171+ 3670 69 28 59 27                  dw  HERE, THREE, F_OPEN         // open for update (read+write)
 171+ 3674 07 24
 172+ 3676                          //    dw  LIT, $2C, QERROR
 173+ 3676
 174+ 3676 8F 20                        dw  ZBRANCH
 175+ 3678 0E 00                        dw  Blk_Init_Endif - $
 176+ 367A
 177+ 367A 3D 20 CF FF                  dw  LIT, $FFCF
 178+ 367E 3D 20 65 34                  dw  LIT, Exit_with_error
 179+ 3682 56 26                        dw  STORE
 180+ 3684
 181+ 3684 23 34                        dw  BASIC
 182+ 3686              Blk_Init_Endif:
 183+ 3686
 184+ 3686 65 3F 56 26                  dw  BLK_FH, STORE
 185+ 368A 02 25                        dw  EXIT
 186+ 368C
 187+ 368C              //  ______________________________________________________________________
 188+ 368C              //
 189+ 368C              // #sec
 190+ 368C              // number of 512-Byte "sectors" available on thie sysstem.
 191+ 368C              // it adds up to 16 MByte of data that can be used as source or pool for almost anything.
 192+ 368C
 193+ 368C                              Constant_Def NSEC , "#SEC", 32767
 193+ 368C             >                New_Def  NSEC, "#SEC", Constant_Ptr, is_normal
 193+ 368C             >
 193+ 368C             >Dict_Ptr        defl    $
 193+ 368C             >
 193+ 368C             >//              ______________________________________________________________________
 193+ 368C             >//              Heap part
 193+ 368C             >
 193+ 368C             >
 193+ 368C             >                org     (Heap_Ptr & $1FFF) + $E000
 193+ EA8C             >
 193+ EA8C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 193+ EA8C             >Latest_Definition defl  Heap_Ptr
 193+ EA8C             >
 193+ EA8C             >                // dummy db directives used to calculate length of namec
 193+ EA8C 23 53 45 43 >                db      "#SEC"
 193+ EA90             >len_NFA         defl    $ - temp_NFA
 193+ EA90             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 193+ EA8C             >
 193+ EA8C 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 193+ EA8D 23 53 45 43 >                db      "#SEC"               // name string in 7-bit ascii, but
 193+ EA91             >                org     $-1                 // alter last byte of Name just above to set
 193+ EA90 C3          >                db      {b $} | END_BIT     // msb as name end
 193+ EA91             >
 193+ EA91 7F 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 193+ EA93             >Prev_Ptr        defl    Heap_Ptr
 193+ EA93             >
 193+ EA93             >mirror_Ptr      defl    $
 193+ EA93             >
 193+ EA93 8E 36       >                dw      Dict_Ptr + 2        // xt
 193+ EA95             >Heap_Ptr        defl    $ - $E000           // save current HP
 193+ EA95             >
 193+ EA95             >Current_HP      defl  $ - $E000             // used to set HP once!
 193+ EA95             >
 193+ EA95             >//              ______________________________________________________________________
 193+ EA95             >//              Dictionary part
 193+ EA95             >
 193+ EA95             >                org     Dict_Ptr
 193+ 368C             >
 193+ 368C 93 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 193+ 368E             >
 193+ 368E             >NSEC:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 193+ 368E CD 18 27    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 193+ 3691             >
 193+ 3691             >
 193+ 3691             >                endif           ; ok        // for other definitions it "points" the correct handler
 193+ 3691             >                // Use of "; ok" to suppress "warning[fwdref]"
 193+ 3691             >
 193+ 3691             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 193+ 3691 FF 7F       >                dw      32767
 194+ 3693
 195+ 3693              //  ______________________________________________________________________
 196+ 3693
 197+ 3693
 198+ 3693
# file closed: C:\Zx\CSpect\Projects\vForth17_DOT/source/next-opt1.asm
 125  3693                              include "L3.asm"
# file opened: C:\Zx\CSpect\Projects\vForth17_DOT/source/L3.asm
   1+ 3693              //  ______________________________________________________________________
   2+ 3693              //
   3+ 3693              //  L3.asm
   4+ 3693              //
   5+ 3693              //  Continuation of L2.asm
   6+ 3693              //  I/O Block definitions
   7+ 3693              //  ______________________________________________________________________
   8+ 3693
   9+ 3693
  10+ 3693              //  ______________________________________________________________________
  11+ 3693              //
  12+ 3693              // r/w          a n f --
  13+ 3693              // read/write block n depending on flag f, true-flag means read, false-flag means write.
  14+ 3693                              Colon_Def READ_WRITE, "R/W", is_normal
  14+ 3693             >                New_Def  READ_WRITE, "R/W", Enter_Ptr, is_normal ; ok
  14+ 3693             >
  14+ 3693             >Dict_Ptr        defl    $
  14+ 3693             >
  14+ 3693             >//              ______________________________________________________________________
  14+ 3693             >//              Heap part
  14+ 3693             >
  14+ 3693             >
  14+ 3693             >                org     (Heap_Ptr & $1FFF) + $E000
  14+ EA95             >
  14+ EA95             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  14+ EA95             >Latest_Definition defl  Heap_Ptr
  14+ EA95             >
  14+ EA95             >                // dummy db directives used to calculate length of namec
  14+ EA95 52 2F 57    >                db      "R/W"
  14+ EA98             >len_NFA         defl    $ - temp_NFA
  14+ EA98             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  14+ EA95             >
  14+ EA95 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  14+ EA96 52 2F 57    >                db      "R/W"               // name string in 7-bit ascii, but
  14+ EA99             >                org     $-1                 // alter last byte of Name just above to set
  14+ EA98 D7          >                db      {b $} | END_BIT     // msb as name end
  14+ EA99             >
  14+ EA99 8C 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  14+ EA9B             >Prev_Ptr        defl    Heap_Ptr
  14+ EA9B             >
  14+ EA9B             >mirror_Ptr      defl    $
  14+ EA9B             >
  14+ EA9B 95 36       >                dw      Dict_Ptr + 2        // xt
  14+ EA9D             >Heap_Ptr        defl    $ - $E000           // save current HP
  14+ EA9D             >
  14+ EA9D             >Current_HP      defl  $ - $E000             // used to set HP once!
  14+ EA9D             >
  14+ EA9D             >//              ______________________________________________________________________
  14+ EA9D             >//              Dictionary part
  14+ EA9D             >
  14+ EA9D             >                org     Dict_Ptr
  14+ 3693             >
  14+ 3693 9B 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  14+ 3695             >
  14+ 3695             >READ_WRITE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  14+ 3695 CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  14+ 3698             >
  14+ 3698             >
  14+ 3698             >                endif           ; ok        // for other definitions it "points" the correct handler
  14+ 3698             >                // Use of "; ok" to suppress "warning[fwdref]"
  14+ 3698             >
  14+ 3698             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  15+ 3698 0C 25                        dw      TO_R                    // >r
  16+ 369A 75 25                        dw      ONE_SUBTRACT            // 1-
  17+ 369C DB 25 3A 25                  dw      DUP, ZLESS              // dup 0<
  18+ 36A0 B7 25 8E 36                  dw      OVER, NSEC              // over #sec
  19+ 36A4 75 25 E2 28                  dw      ONE_SUBTRACT, GREATER   // 1- >
  20+ 36A8 D1 24                        dw      OR_OP                   // or
  21+ 36AA 3D 20 06 00                  dw      LIT, 6, QERROR          // 6 ?error
  21+ 36AE A5 2A
  22+ 36B0 17 25                        dw      R_TO                    // r>
  23+ 36B2                                                              // if
  24+ 36B2 8F 20                        dw      ZBRANCH
  25+ 36B4 08 00                        dw      Read_Write_Else - $
  26+ 36B6 2F 36                        dw          BLK_READ            //      blk-read
  27+ 36B8 82 20                        dw      BRANCH
  28+ 36BA 04 00                        dw      Read_Write_Endif - $
  29+ 36BC              Read_Write_Else:                                // else
  30+ 36BC 48 36                        dw          BLK_WRITE           //      blk-write
  31+ 36BE              Read_Write_Endif:                               // endif
  32+ 36BE 02 25                        dw      EXIT                    // ;
  33+ 36C0
  34+ 36C0
  35+ 36C0              //  ______________________________________________________________________
  36+ 36C0              //
  37+ 36C0              // +buf        a1 -- a2 f
  38+ 36C0              // advences to next buffer, cyclically rotating along them
  39+ 36C0                              Colon_Def PBUF, "+BUF", is_normal
  39+ 36C0             >                New_Def  PBUF, "+BUF", Enter_Ptr, is_normal ; ok
  39+ 36C0             >
  39+ 36C0             >Dict_Ptr        defl    $
  39+ 36C0             >
  39+ 36C0             >//              ______________________________________________________________________
  39+ 36C0             >//              Heap part
  39+ 36C0             >
  39+ 36C0             >
  39+ 36C0             >                org     (Heap_Ptr & $1FFF) + $E000
  39+ EA9D             >
  39+ EA9D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  39+ EA9D             >Latest_Definition defl  Heap_Ptr
  39+ EA9D             >
  39+ EA9D             >                // dummy db directives used to calculate length of namec
  39+ EA9D 2B 42 55 46 >                db      "+BUF"
  39+ EAA1             >len_NFA         defl    $ - temp_NFA
  39+ EAA1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  39+ EA9D             >
  39+ EA9D 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  39+ EA9E 2B 42 55 46 >                db      "+BUF"               // name string in 7-bit ascii, but
  39+ EAA2             >                org     $-1                 // alter last byte of Name just above to set
  39+ EAA1 C6          >                db      {b $} | END_BIT     // msb as name end
  39+ EAA2             >
  39+ EAA2 95 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  39+ EAA4             >Prev_Ptr        defl    Heap_Ptr
  39+ EAA4             >
  39+ EAA4             >mirror_Ptr      defl    $
  39+ EAA4             >
  39+ EAA4 C2 36       >                dw      Dict_Ptr + 2        // xt
  39+ EAA6             >Heap_Ptr        defl    $ - $E000           // save current HP
  39+ EAA6             >
  39+ EAA6             >Current_HP      defl  $ - $E000             // used to set HP once!
  39+ EAA6             >
  39+ EAA6             >//              ______________________________________________________________________
  39+ EAA6             >//              Dictionary part
  39+ EAA6             >
  39+ EAA6             >                org     Dict_Ptr
  39+ 36C0             >
  39+ 36C0 A4 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  39+ 36C2             >
  39+ 36C2             >PBUF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  39+ 36C2 CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  39+ 36C5             >
  39+ 36C5             >
  39+ 36C5             >                endif           ; ok        // for other definitions it "points" the correct handler
  39+ 36C5             >                // Use of "; ok" to suppress "warning[fwdref]"
  39+ 36C5             >
  39+ 36C5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  40+ 36C5 3D 20 04 02                  dw      LIT, 516, PLUS          // 516 +
  40+ 36C9 55 25
  41+ 36CB DB 25 D3 27                  dw      DUP, LIMIT, FETCH       // dup limit @
  41+ 36CF 4C 26
  42+ 36D1 B4 28                        dw      EQUALS                  // =
  43+ 36D3                                                              // if
  44+ 36D3 8F 20                        dw      ZBRANCH
  45+ 36D5 08 00                        dw      PBuf_Endif - $
  46+ 36D7 C0 25                        dw          DROP                //      drop
  47+ 36D9 CD 27 4C 26                  dw          FIRST, FETCH        //      first @
  48+ 36DD              PBuf_Endif:                                     // endif
  49+ 36DD DB 25 3F 28                  dw      DUP, PREV, FETCH        // dup prev @
  49+ 36E1 4C 26
  50+ 36E3 A8 28                        dw      SUBTRACT                // -
  51+ 36E5 02 25                        dw      EXIT                    // ;
  52+ 36E7
  53+ 36E7              //  ______________________________________________________________________
  54+ 36E7              //
  55+ 36E7              // update       --
  56+ 36E7              // mark the last used block to be written to disk
  57+ 36E7                              Colon_Def UPDATE, "UPDATE", is_normal
  57+ 36E7             >                New_Def  UPDATE, "UPDATE", Enter_Ptr, is_normal ; ok
  57+ 36E7             >
  57+ 36E7             >Dict_Ptr        defl    $
  57+ 36E7             >
  57+ 36E7             >//              ______________________________________________________________________
  57+ 36E7             >//              Heap part
  57+ 36E7             >
  57+ 36E7             >
  57+ 36E7             >                org     (Heap_Ptr & $1FFF) + $E000
  57+ EAA6             >
  57+ EAA6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  57+ EAA6             >Latest_Definition defl  Heap_Ptr
  57+ EAA6             >
  57+ EAA6             >                // dummy db directives used to calculate length of namec
  57+ EAA6 55 50 44 41 >                db      "UPDATE"
  57+ EAAA 54 45       >
  57+ EAAC             >len_NFA         defl    $ - temp_NFA
  57+ EAAC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  57+ EAA6             >
  57+ EAA6 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  57+ EAA7 55 50 44 41 >                db      "UPDATE"               // name string in 7-bit ascii, but
  57+ EAAB 54 45       >
  57+ EAAD             >                org     $-1                 // alter last byte of Name just above to set
  57+ EAAC C5          >                db      {b $} | END_BIT     // msb as name end
  57+ EAAD             >
  57+ EAAD 9D 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  57+ EAAF             >Prev_Ptr        defl    Heap_Ptr
  57+ EAAF             >
  57+ EAAF             >mirror_Ptr      defl    $
  57+ EAAF             >
  57+ EAAF E9 36       >                dw      Dict_Ptr + 2        // xt
  57+ EAB1             >Heap_Ptr        defl    $ - $E000           // save current HP
  57+ EAB1             >
  57+ EAB1             >Current_HP      defl  $ - $E000             // used to set HP once!
  57+ EAB1             >
  57+ EAB1             >//              ______________________________________________________________________
  57+ EAB1             >//              Dictionary part
  57+ EAB1             >
  57+ EAB1             >                org     Dict_Ptr
  57+ 36E7             >
  57+ 36E7 AF 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  57+ 36E9             >
  57+ 36E9             >UPDATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  57+ 36E9 CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  57+ 36EC             >
  57+ 36EC             >
  57+ 36EC             >                endif           ; ok        // for other definitions it "points" the correct handler
  57+ 36EC             >                // Use of "; ok" to suppress "warning[fwdref]"
  57+ 36EC             >
  57+ 36EC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  58+ 36EC 3F 28 4C 26                  dw      PREV, FETCH, FETCH      // prev @ @
  58+ 36F0 4C 26
  59+ 36F2 3D 20 00 80                  dw      LIT, $8000, OR_OP       // $8000, or
  59+ 36F6 D1 24
  60+ 36F8 3F 28 4C 26                  dw      PREV, FETCH, STORE      // prev @ !
  60+ 36FC 56 26
  61+ 36FE 02 25                        dw      EXIT                    // ;
  62+ 3700
  63+ 3700
  64+ 3700              //  ______________________________________________________________________
  65+ 3700              //
  66+ 3700              // empty-buffers --
  67+ 3700                              Colon_Def EMPTY_BUFFERS, "EMPTY-BUFFERS", is_normal
  67+ 3700             >                New_Def  EMPTY_BUFFERS, "EMPTY-BUFFERS", Enter_Ptr, is_normal ; ok
  67+ 3700             >
  67+ 3700             >Dict_Ptr        defl    $
  67+ 3700             >
  67+ 3700             >//              ______________________________________________________________________
  67+ 3700             >//              Heap part
  67+ 3700             >
  67+ 3700             >
  67+ 3700             >                org     (Heap_Ptr & $1FFF) + $E000
  67+ EAB1             >
  67+ EAB1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  67+ EAB1             >Latest_Definition defl  Heap_Ptr
  67+ EAB1             >
  67+ EAB1             >                // dummy db directives used to calculate length of namec
  67+ EAB1 45 4D 50 54 >                db      "EMPTY-BUFFERS"
  67+ EAB5 59 2D 42 55 >
  67+ EAB9 46 46 45 52 >
  67+ EABD 53          >
  67+ EABE             >len_NFA         defl    $ - temp_NFA
  67+ EABE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  67+ EAB1             >
  67+ EAB1 8D          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  67+ EAB2 45 4D 50 54 >                db      "EMPTY-BUFFERS"               // name string in 7-bit ascii, but
  67+ EAB6 59 2D 42 55 >
  67+ EABA 46 46 45 52 >
  67+ EABE 53          >
  67+ EABF             >                org     $-1                 // alter last byte of Name just above to set
  67+ EABE D3          >                db      {b $} | END_BIT     // msb as name end
  67+ EABF             >
  67+ EABF A6 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  67+ EAC1             >Prev_Ptr        defl    Heap_Ptr
  67+ EAC1             >
  67+ EAC1             >mirror_Ptr      defl    $
  67+ EAC1             >
  67+ EAC1 02 37       >                dw      Dict_Ptr + 2        // xt
  67+ EAC3             >Heap_Ptr        defl    $ - $E000           // save current HP
  67+ EAC3             >
  67+ EAC3             >Current_HP      defl  $ - $E000             // used to set HP once!
  67+ EAC3             >
  67+ EAC3             >//              ______________________________________________________________________
  67+ EAC3             >//              Dictionary part
  67+ EAC3             >
  67+ EAC3             >                org     Dict_Ptr
  67+ 3700             >
  67+ 3700 C1 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  67+ 3702             >
  67+ 3702             >EMPTY_BUFFERS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  67+ 3702 CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  67+ 3705             >
  67+ 3705             >
  67+ 3705             >                endif           ; ok        // for other definitions it "points" the correct handler
  67+ 3705             >                // Use of "; ok" to suppress "warning[fwdref]"
  67+ 3705             >
  67+ 3705             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  68+ 3705 CD 27 4C 26                  dw      FIRST, FETCH            // first @
  69+ 3709 D3 27 4C 26                  dw      LIMIT, FETCH            // limit @
  70+ 370D B7 25 A8 28                  dw      OVER, SUBTRACT, ERASE   // over - erase
  70+ 3711 4F 2D
  71+ 3713 02 25                        dw      EXIT                    // ;
  72+ 3715
  73+ 3715              //  ______________________________________________________________________
  74+ 3715              //
  75+ 3715              // buffer       n -- a
  76+ 3715              // read block n and gives the address to a buffer
  77+ 3715              // any block previously inside the buffer, if modified, is rewritten to
  78+ 3715              // disk before reading the block n.
  79+ 3715
  80+ 3715                              Colon_Def BUFFER, "BUFFER", is_normal
  80+ 3715             >                New_Def  BUFFER, "BUFFER", Enter_Ptr, is_normal ; ok
  80+ 3715             >
  80+ 3715             >Dict_Ptr        defl    $
  80+ 3715             >
  80+ 3715             >//              ______________________________________________________________________
  80+ 3715             >//              Heap part
  80+ 3715             >
  80+ 3715             >
  80+ 3715             >                org     (Heap_Ptr & $1FFF) + $E000
  80+ EAC3             >
  80+ EAC3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  80+ EAC3             >Latest_Definition defl  Heap_Ptr
  80+ EAC3             >
  80+ EAC3             >                // dummy db directives used to calculate length of namec
  80+ EAC3 42 55 46 46 >                db      "BUFFER"
  80+ EAC7 45 52       >
  80+ EAC9             >len_NFA         defl    $ - temp_NFA
  80+ EAC9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  80+ EAC3             >
  80+ EAC3 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  80+ EAC4 42 55 46 46 >                db      "BUFFER"               // name string in 7-bit ascii, but
  80+ EAC8 45 52       >
  80+ EACA             >                org     $-1                 // alter last byte of Name just above to set
  80+ EAC9 D2          >                db      {b $} | END_BIT     // msb as name end
  80+ EACA             >
  80+ EACA B1 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  80+ EACC             >Prev_Ptr        defl    Heap_Ptr
  80+ EACC             >
  80+ EACC             >mirror_Ptr      defl    $
  80+ EACC             >
  80+ EACC 17 37       >                dw      Dict_Ptr + 2        // xt
  80+ EACE             >Heap_Ptr        defl    $ - $E000           // save current HP
  80+ EACE             >
  80+ EACE             >Current_HP      defl  $ - $E000             // used to set HP once!
  80+ EACE             >
  80+ EACE             >//              ______________________________________________________________________
  80+ EACE             >//              Dictionary part
  80+ EACE             >
  80+ EACE             >                org     Dict_Ptr
  80+ 3715             >
  80+ 3715 CC 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  80+ 3717             >
  80+ 3717             >BUFFER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  80+ 3717 CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  80+ 371A             >
  80+ 371A             >
  80+ 371A             >                endif           ; ok        // for other definitions it "points" the correct handler
  80+ 371A             >                // Use of "; ok" to suppress "warning[fwdref]"
  80+ 371A             >
  80+ 371A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  81+ 371A 39 28 4C 26                  dw      USED, FETCH             // used @
  82+ 371E DB 25 0C 25                  dw      DUP, TO_R               // dup >r
  83+ 3722                                                              // begin
  84+ 3722              Buffer_Begin:
  85+ 3722 C2 36                        dw          PBUF                //      +buf
  86+ 3724                                                              // until
  87+ 3724 8F 20                        dw      ZBRANCH
  88+ 3726 FC FF                        dw      Buffer_Begin - $
  89+ 3728 39 28 56 26                  dw      USED, STORE             // used !
  90+ 372C 22 25 4C 26                  dw      R_OP, FETCH, ZLESS      // r @ 0<
  90+ 3730 3A 25
  91+ 3732                                                              // if
  92+ 3732 8F 20                        dw      ZBRANCH
  93+ 3734 14 00                        dw      Buffer_Endif - $
  94+ 3736 22 25 84 25                  dw          R_OP, CELL_PLUS     //      r cell+
  95+ 373A 22 25 4C 26                  dw          R_OP, FETCH         //      r fetch
  96+ 373E 3D 20 FF 7F                  dw          LIT, $7FFF          //      7FFF
  97+ 3742 C2 24                        dw          AND_OP              //      and
  98+ 3744 44 27 95 36                  dw          ZERO, READ_WRITE    //      0 r/w
  99+ 3748              Buffer_Endif:                                   // endif
 100+ 3748 22 25 56 26                  dw      R_OP, STORE             // r !
 101+ 374C 22 25 3F 28                  dw      R_OP, PREV, STORE       // r prev !
 101+ 3750 56 26
 102+ 3752 17 25 84 25                  dw      R_TO, CELL_PLUS         // r> cell+
 103+ 3756 02 25                        dw      EXIT                    // ;
 104+ 3758
 105+ 3758              //  ______________________________________________________________________
 106+ 3758              //
 107+ 3758              // block        n -- a
 108+ 3758              // Leaves the buffer address that contains the block n.
 109+ 3758              // If the block is not already present, it will be loaded from disk
 110+ 3758              // The block previously inside the buffer, if modified, is rewritten to
 111+ 3758              // disk before reading the block n.
 112+ 3758              // See also BUFFER, R/W, UPDATE, FLUSH.
 113+ 3758
 114+ 3758                              Colon_Def BLOCK, "BLOCK", is_normal
 114+ 3758             >                New_Def  BLOCK, "BLOCK", Enter_Ptr, is_normal ; ok
 114+ 3758             >
 114+ 3758             >Dict_Ptr        defl    $
 114+ 3758             >
 114+ 3758             >//              ______________________________________________________________________
 114+ 3758             >//              Heap part
 114+ 3758             >
 114+ 3758             >
 114+ 3758             >                org     (Heap_Ptr & $1FFF) + $E000
 114+ EACE             >
 114+ EACE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 114+ EACE             >Latest_Definition defl  Heap_Ptr
 114+ EACE             >
 114+ EACE             >                // dummy db directives used to calculate length of namec
 114+ EACE 42 4C 4F 43 >                db      "BLOCK"
 114+ EAD2 4B          >
 114+ EAD3             >len_NFA         defl    $ - temp_NFA
 114+ EAD3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 114+ EACE             >
 114+ EACE 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 114+ EACF 42 4C 4F 43 >                db      "BLOCK"               // name string in 7-bit ascii, but
 114+ EAD3 4B          >
 114+ EAD4             >                org     $-1                 // alter last byte of Name just above to set
 114+ EAD3 CB          >                db      {b $} | END_BIT     // msb as name end
 114+ EAD4             >
 114+ EAD4 C3 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 114+ EAD6             >Prev_Ptr        defl    Heap_Ptr
 114+ EAD6             >
 114+ EAD6             >mirror_Ptr      defl    $
 114+ EAD6             >
 114+ EAD6 5A 37       >                dw      Dict_Ptr + 2        // xt
 114+ EAD8             >Heap_Ptr        defl    $ - $E000           // save current HP
 114+ EAD8             >
 114+ EAD8             >Current_HP      defl  $ - $E000             // used to set HP once!
 114+ EAD8             >
 114+ EAD8             >//              ______________________________________________________________________
 114+ EAD8             >//              Dictionary part
 114+ EAD8             >
 114+ EAD8             >                org     Dict_Ptr
 114+ 3758             >
 114+ 3758 D6 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 114+ 375A             >
 114+ 375A             >BLOCK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 114+ 375A CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 114+ 375D             >
 114+ 375D             >
 114+ 375D             >                endif           ; ok        // for other definitions it "points" the correct handler
 114+ 375D             >                // Use of "; ok" to suppress "warning[fwdref]"
 114+ 375D             >
 114+ 375D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 115+ 375D                          //  dw      OFFSET, FETCH           // offset @
 116+ 375D                          //  dw      PLUS
 117+ 375D 0C 25                        dw      TO_R                    // + >r
 118+ 375F 3F 28 4C 26                  dw      PREV, FETCH             // prev @
 119+ 3763 DB 25 4C 26                  dw      DUP, FETCH              // dup @
 120+ 3767 22 25 A8 28                  dw      R_OP, SUBTRACT          // r -
 121+ 376B DB 25 55 25                  dw      DUP, PLUS               // dup +  ( trick: check equality without most significant bit )
 122+ 376F                                                              // if
 123+ 376F 8F 20                        dw        ZBRANCH
 124+ 3771 32 00                        dw        Block_Endif_1 - $
 125+ 3773              Block_Begin:                                    //      begin
 126+ 3773 C2 36 27 25                  dw          PBUF, ZEQUAL        //          +buf 0
 127+ 3777                                                              //          if
 128+ 3777 8F 20                        dw          ZBRANCH
 129+ 3779 12 00                        dw          Block_Endif_2 - $
 130+ 377B C0 25                        dw              DROP            //              drop
 131+ 377D 22 25 17 37                  dw              R_OP, BUFFER    //              r buffer
 132+ 3781 DB 25                        dw              DUP             //              dup
 133+ 3783 22 25 4B 27                  dw              R_OP, ONE       //              r 1
 134+ 3787 95 36                        dw              READ_WRITE      //              r/w
 135+ 3789 91 25                        dw              TWO_MINUS       //              2-
 136+ 378B              Block_Endif_2:                                  //          endif
 137+ 378B DB 25 4C 26                  dw          DUP, FETCH, R_OP    //          dup @ r
 137+ 378F 22 25
 138+ 3791 A8 28 DB 25                  dw          SUBTRACT, DUP       //          - dup
 139+ 3795 55 25 27 25                  dw          PLUS, ZEQUAL        //          + 0=
 140+ 3799                                                              //      until
 141+ 3799 8F 20                        dw        ZBRANCH
 142+ 379B D8 FF                        dw        Block_Begin - $
 143+ 379D DB 25 3F 28                  dw        DUP, PREV, STORE      //      dup prev !
 143+ 37A1 56 26
 144+ 37A3              Block_Endif_1:                                  // endif
 145+ 37A3 17 25 C0 25                  dw      R_TO, DROP, CELL_PLUS   // r> drop cell+
 145+ 37A7 84 25
 146+ 37A9 02 25                        dw      EXIT                    // ;
 147+ 37AB
 148+ 37AB              //  ______________________________________________________________________
 149+ 37AB              //
 150+ 37AB              // #buff        -- n
 151+ 37AB              // number of buffers available. must be the difference between LIMIT and FIRST divided by 516
 152+ 37AB                              Constant_Def NBUFF,   "#BUFF", 7
 152+ 37AB             >                New_Def  NBUFF, "#BUFF", Constant_Ptr, is_normal
 152+ 37AB             >
 152+ 37AB             >Dict_Ptr        defl    $
 152+ 37AB             >
 152+ 37AB             >//              ______________________________________________________________________
 152+ 37AB             >//              Heap part
 152+ 37AB             >
 152+ 37AB             >
 152+ 37AB             >                org     (Heap_Ptr & $1FFF) + $E000
 152+ EAD8             >
 152+ EAD8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 152+ EAD8             >Latest_Definition defl  Heap_Ptr
 152+ EAD8             >
 152+ EAD8             >                // dummy db directives used to calculate length of namec
 152+ EAD8 23 42 55 46 >                db      "#BUFF"
 152+ EADC 46          >
 152+ EADD             >len_NFA         defl    $ - temp_NFA
 152+ EADD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 152+ EAD8             >
 152+ EAD8 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 152+ EAD9 23 42 55 46 >                db      "#BUFF"               // name string in 7-bit ascii, but
 152+ EADD 46          >
 152+ EADE             >                org     $-1                 // alter last byte of Name just above to set
 152+ EADD C6          >                db      {b $} | END_BIT     // msb as name end
 152+ EADE             >
 152+ EADE CE 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 152+ EAE0             >Prev_Ptr        defl    Heap_Ptr
 152+ EAE0             >
 152+ EAE0             >mirror_Ptr      defl    $
 152+ EAE0             >
 152+ EAE0 AD 37       >                dw      Dict_Ptr + 2        // xt
 152+ EAE2             >Heap_Ptr        defl    $ - $E000           // save current HP
 152+ EAE2             >
 152+ EAE2             >Current_HP      defl  $ - $E000             // used to set HP once!
 152+ EAE2             >
 152+ EAE2             >//              ______________________________________________________________________
 152+ EAE2             >//              Dictionary part
 152+ EAE2             >
 152+ EAE2             >                org     Dict_Ptr
 152+ 37AB             >
 152+ 37AB E0 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 152+ 37AD             >
 152+ 37AD             >NBUFF:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 152+ 37AD CD 18 27    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 152+ 37B0             >
 152+ 37B0             >
 152+ 37B0             >                endif           ; ok        // for other definitions it "points" the correct handler
 152+ 37B0             >                // Use of "; ok" to suppress "warning[fwdref]"
 152+ 37B0             >
 152+ 37B0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 152+ 37B0 07 00       >                dw      7
 153+ 37B2
 154+ 37B2              //  ______________________________________________________________________
 155+ 37B2              //
 156+ 37B2              // flush        --
 157+ 37B2                              Colon_Def FLUSH, "FLUSH", is_normal
 157+ 37B2             >                New_Def  FLUSH, "FLUSH", Enter_Ptr, is_normal ; ok
 157+ 37B2             >
 157+ 37B2             >Dict_Ptr        defl    $
 157+ 37B2             >
 157+ 37B2             >//              ______________________________________________________________________
 157+ 37B2             >//              Heap part
 157+ 37B2             >
 157+ 37B2             >
 157+ 37B2             >                org     (Heap_Ptr & $1FFF) + $E000
 157+ EAE2             >
 157+ EAE2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 157+ EAE2             >Latest_Definition defl  Heap_Ptr
 157+ EAE2             >
 157+ EAE2             >                // dummy db directives used to calculate length of namec
 157+ EAE2 46 4C 55 53 >                db      "FLUSH"
 157+ EAE6 48          >
 157+ EAE7             >len_NFA         defl    $ - temp_NFA
 157+ EAE7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 157+ EAE2             >
 157+ EAE2 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 157+ EAE3 46 4C 55 53 >                db      "FLUSH"               // name string in 7-bit ascii, but
 157+ EAE7 48          >
 157+ EAE8             >                org     $-1                 // alter last byte of Name just above to set
 157+ EAE7 C8          >                db      {b $} | END_BIT     // msb as name end
 157+ EAE8             >
 157+ EAE8 D8 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 157+ EAEA             >Prev_Ptr        defl    Heap_Ptr
 157+ EAEA             >
 157+ EAEA             >mirror_Ptr      defl    $
 157+ EAEA             >
 157+ EAEA B4 37       >                dw      Dict_Ptr + 2        // xt
 157+ EAEC             >Heap_Ptr        defl    $ - $E000           // save current HP
 157+ EAEC             >
 157+ EAEC             >Current_HP      defl  $ - $E000             // used to set HP once!
 157+ EAEC             >
 157+ EAEC             >//              ______________________________________________________________________
 157+ EAEC             >//              Dictionary part
 157+ EAEC             >
 157+ EAEC             >                org     Dict_Ptr
 157+ 37B2             >
 157+ 37B2 EA 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 157+ 37B4             >
 157+ 37B4             >FLUSH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 157+ 37B4 CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 157+ 37B7             >
 157+ 37B7             >
 157+ 37B7             >                endif           ; ok        // for other definitions it "points" the correct handler
 157+ 37B7             >                // Use of "; ok" to suppress "warning[fwdref]"
 157+ 37B7             >
 157+ 37B7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 158+ 37B7 AD 37 6E 25                  dw      NBUFF, ONE_PLUS, ZERO   // #buff 1+ 0
 158+ 37BB 44 27
 159+ 37BD              Flush_Do:                                       // do
 160+ 37BD CE 20                        dw      C_DO
 161+ 37BF 44 27 17 37                  dw      ZERO, BUFFER, DROP      //      0 buffer drop
 161+ 37C3 C0 25
 162+ 37C5                                                              // loop
 163+ 37C5 7A 20 F8 FF                  dw      C_LOOP, Flush_Do - $
 164+ 37C9 65 3F 4C 26                  dw      BLK_FH, FETCH           // blk-fh @     ( ZX-Next dependance )
 165+ 37CD B2 23 C0 25                  dw      F_SYNC, DROP            // f_sync drop
 166+ 37D1 02 25                        dw      EXIT                    // exit
 167+ 37D3
 168+ 37D3              //  ______________________________________________________________________
 169+ 37D3              //
 170+ 37D3              // f_getline    a m fh -- n
 171+ 37D3              // Given an open filehandle read next line (terminated with $0D or $0A)
 172+ 37D3              // Address a is left for subsequent processing
 173+ 37D3              // and n as the actual number of byte read, that is the length of line
 174+ 37D3                              Colon_Def F_GETLINE, "F_GETLINE", is_normal
 174+ 37D3             >                New_Def  F_GETLINE, "F_GETLINE", Enter_Ptr, is_normal ; ok
 174+ 37D3             >
 174+ 37D3             >Dict_Ptr        defl    $
 174+ 37D3             >
 174+ 37D3             >//              ______________________________________________________________________
 174+ 37D3             >//              Heap part
 174+ 37D3             >
 174+ 37D3             >
 174+ 37D3             >                org     (Heap_Ptr & $1FFF) + $E000
 174+ EAEC             >
 174+ EAEC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 174+ EAEC             >Latest_Definition defl  Heap_Ptr
 174+ EAEC             >
 174+ EAEC             >                // dummy db directives used to calculate length of namec
 174+ EAEC 46 5F 47 45 >                db      "F_GETLINE"
 174+ EAF0 54 4C 49 4E >
 174+ EAF4 45          >
 174+ EAF5             >len_NFA         defl    $ - temp_NFA
 174+ EAF5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 174+ EAEC             >
 174+ EAEC 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 174+ EAED 46 5F 47 45 >                db      "F_GETLINE"               // name string in 7-bit ascii, but
 174+ EAF1 54 4C 49 4E >
 174+ EAF5 45          >
 174+ EAF6             >                org     $-1                 // alter last byte of Name just above to set
 174+ EAF5 C5          >                db      {b $} | END_BIT     // msb as name end
 174+ EAF6             >
 174+ EAF6 E2 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 174+ EAF8             >Prev_Ptr        defl    Heap_Ptr
 174+ EAF8             >
 174+ EAF8             >mirror_Ptr      defl    $
 174+ EAF8             >
 174+ EAF8 D5 37       >                dw      Dict_Ptr + 2        // xt
 174+ EAFA             >Heap_Ptr        defl    $ - $E000           // save current HP
 174+ EAFA             >
 174+ EAFA             >Current_HP      defl  $ - $E000             // used to set HP once!
 174+ EAFA             >
 174+ EAFA             >//              ______________________________________________________________________
 174+ EAFA             >//              Dictionary part
 174+ EAFA             >
 174+ EAFA             >                org     Dict_Ptr
 174+ 37D3             >
 174+ 37D3 F8 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 174+ 37D5             >
 174+ 37D5             >F_GETLINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 174+ 37D5 CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 174+ 37D8             >
 174+ 37D8             >
 174+ 37D8             >                endif           ; ok        // for other definitions it "points" the correct handler
 174+ 37D8             >                // Use of "; ok" to suppress "warning[fwdref]"
 174+ 37D8             >
 174+ 37D8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 175+ 37D8 0C 25                        dw      TO_R                    // >r               ( a  m  )     \  fh
 176+ 37DA CB 25                        dw      TUCK                    // tuck             ( m a m )
 177+ 37DC 22 25 BE 23                  dw      R_OP, F_FGETPOS         // r f_fgetpos      ( m a m d f )
 178+ 37E0 3D 20 2C 00                  dw      LIT, 44, QERROR         // 44 ?error        ( m a m d )
 178+ 37E4 A5 2A
 179+ 37E6
 180+ 37E6 1D 26 B7 25                  dw      TWO_SWAP, OVER          // 2swap over       ( m d a m )
 181+ 37EA 6E 25 D4 25                  dw      ONE_PLUS, SWAP          // 1+ swap          ( m d a a+1 m )
 182+ 37EE
 183+ 37EE 22 25 D6 23                  dw      R_OP, F_READ            // r f_read         ( m d a n f )
 184+ 37F2 3D 20 2E 00                  dw      LIT, 46, QERROR         // 46 ?error        ( m d a n )
 184+ 37F6 A5 2A
 185+ 37F8                                                              // if ( at least 1 chr was read )  \  fh
 186+ 37F8 8F 20                        dw      ZBRANCH
 187+ 37FA 3C 00                        dw      FGetline_Else - $
 188+ 37FC 3D 20 0A 00                  dw          LIT, 10, ENCLOSE    //      10 enclose       ( m d a x b x )
 188+ 3800 C3 21
 189+ 3802 C0 25 C5 25                  dw          DROP, NIP           //      drop nip         ( m d a b )
 190+ 3806 D4 25                        dw          SWAP                //      drop swap        ( m d b a )
 191+ 3808 3D 20 0D 00                  dw          LIT, 13, ENCLOSE    //      13 enclose       ( m d b a x c x )
 191+ 380C C3 21
 192+ 380E C0 25 C5 25                  dw          DROP, NIP           //      drop nip         ( m d b a c )
 193+ 3812 E2 25 ED 28                  dw          ROT, MIN            //      rot min          ( m d a n )
 194+ 3816 DB 25 57 28                  dw          DUP, SPAN, STORE    //      dup span !       ( m d a n )
 194+ 381A 56 26
 195+ 381C DB 25 0C 25                  dw          DUP, TO_R           //      dup >r           ( m d a n )      \ fh n
 196+ 3820 1D 26 17 25                  dw          TWO_SWAP, R_TO      //      2swap r>         ( m a n d n )    \ fh
 197+ 3824 44 27 5F 25                  dw          ZERO, DPLUS         //      0 d+             ( m a n d+n )
 198+ 3828 17 25 8B 23                  dw          R_TO, F_SEEK        //      r> f_seek        ( m a n f )
 199+ 382C 3D 20 2D 00                  dw          LIT, 45, QERROR     //      45 ?error        ( m a n )
 199+ 3830 A5 2A
 200+ 3832                                                              // else
 201+ 3832 82 20                        dw      BRANCH
 202+ 3834 0C 00                        dw      FGetline_Endif - $
 203+ 3836              FGetline_Else:
 204+ 3836 17 25                        dw          R_TO                //      r>              ( m d a fh )
 205+ 3838 1D 26 17 26                  dw          TWO_SWAP, TWO_DROP  //      2swap 2drop     ( m a fh )
 206+ 383C C0 25 44 27                  dw          DROP, ZERO          //      drop, 0         ( m a 0 )
 207+ 3840              FGetline_Endif:                                 // endif
 208+ 3840 0C 25 DB 25                  dw      TO_R, DUP, DUP          // >r dup dup           ( m a a a )
 208+ 3844 DB 25
 209+ 3846 6E 25 D4 25                  dw      ONE_PLUS, SWAP          // 1+ swap              ( m a a+1 a )
 210+ 384A 22 25 43 24                  dw      R_OP, CMOVE             // r cmove              ( m a )
 211+ 384E 2A 26 55 25                  dw      TWO_DUP, PLUS           // 2dup +               ( m a m+a )
 212+ 3852 44 27 D4 25                  dw      ZERO, SWAP              // 0 swap
 213+ 3856 89 25 56 26                  dw      CELL_MINUS,  STORE      // cell-  !             ( m a )
 214+ 385A 22 25 55 25                  dw      R_OP, PLUS, ONE_SUBTRACT// r + 1-               ( m a+n1 )
 214+ 385E 75 25
 215+ 3860 D4 25 22 25                  dw      SWAP, R_OP, SUBTRACT    // swap r -             ( a+n+1 m-n )
 215+ 3864 A8 28
 216+ 3866 5A 2D                        dw      BLANK                   // blank
 217+ 3868 17 25                        dw      R_TO                    // r>                   ( n )
 218+ 386A 02 25                        dw      EXIT                    // ;
 219+ 386C
 220+ 386C              //  ______________________________________________________________________
 221+ 386C              //
 222+ 386C              // f_include    fh --
 223+ 386C              // Given a filehandle includes the source from file
 224+ 386C                              Colon_Def F_INCLUDE, "F_INCLUDE", is_normal
 224+ 386C             >                New_Def  F_INCLUDE, "F_INCLUDE", Enter_Ptr, is_normal ; ok
 224+ 386C             >
 224+ 386C             >Dict_Ptr        defl    $
 224+ 386C             >
 224+ 386C             >//              ______________________________________________________________________
 224+ 386C             >//              Heap part
 224+ 386C             >
 224+ 386C             >
 224+ 386C             >                org     (Heap_Ptr & $1FFF) + $E000
 224+ EAFA             >
 224+ EAFA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 224+ EAFA             >Latest_Definition defl  Heap_Ptr
 224+ EAFA             >
 224+ EAFA             >                // dummy db directives used to calculate length of namec
 224+ EAFA 46 5F 49 4E >                db      "F_INCLUDE"
 224+ EAFE 43 4C 55 44 >
 224+ EB02 45          >
 224+ EB03             >len_NFA         defl    $ - temp_NFA
 224+ EB03             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 224+ EAFA             >
 224+ EAFA 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 224+ EAFB 46 5F 49 4E >                db      "F_INCLUDE"               // name string in 7-bit ascii, but
 224+ EAFF 43 4C 55 44 >
 224+ EB03 45          >
 224+ EB04             >                org     $-1                 // alter last byte of Name just above to set
 224+ EB03 C5          >                db      {b $} | END_BIT     // msb as name end
 224+ EB04             >
 224+ EB04 EC 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 224+ EB06             >Prev_Ptr        defl    Heap_Ptr
 224+ EB06             >
 224+ EB06             >mirror_Ptr      defl    $
 224+ EB06             >
 224+ EB06 6E 38       >                dw      Dict_Ptr + 2        // xt
 224+ EB08             >Heap_Ptr        defl    $ - $E000           // save current HP
 224+ EB08             >
 224+ EB08             >Current_HP      defl  $ - $E000             // used to set HP once!
 224+ EB08             >
 224+ EB08             >//              ______________________________________________________________________
 224+ EB08             >//              Dictionary part
 224+ EB08             >
 224+ EB08             >                org     Dict_Ptr
 224+ 386C             >
 224+ 386C 06 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 224+ 386E             >
 224+ 386E             >F_INCLUDE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 224+ 386E CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 224+ 3871             >
 224+ 3871             >
 224+ 3871             >                endif           ; ok        // for other definitions it "points" the correct handler
 224+ 3871             >                // Use of "; ok" to suppress "warning[fwdref]"
 224+ 3871             >
 224+ 3871             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 225+ 3871 E5 27 4C 26                  dw      BLK, FETCH, TO_R        // blk @ >r
 225+ 3875 0C 25
 226+ 3877 EB 27 4C 26                  dw      TO_IN, FETCH, TO_R      // >in @ >r
 226+ 387B 0C 25
 227+ 387D 51 28 4C 26                  dw      SOURCE_ID, FETCH, TO_R  // source-id @ >r
 227+ 3881 0C 25
 228+ 3883 22 25                        dw      R_OP                    // r
 229+ 3885                                                              // if
 230+ 3885 8F 20                        dw      ZBRANCH
 231+ 3887 20 00                        dw      FInclude_Else_1 - $
 232+ 3889 22 25 BE 23                  dw          R_OP, F_FGETPOS     //      r f_getpos
 233+ 388D 3D 20 2C 00                  dw          LIT, 44, QERROR     //      44 ?error
 233+ 3891 A5 2A
 234+ 3893 EB 27 4C 26                  dw          TO_IN, FETCH        //      >in @ 2-
 235+ 3897 91 25                        dw          TWO_MINUS
 236+ 3899 57 28 4C 26                  dw          SPAN, FETCH         //      span @ -
 237+ 389D A8 28                        dw          SUBTRACT
 238+ 389F 9D 28 5F 25                  dw          S_TO_D, DPLUS       //      s>d d+
 239+ 38A3                                                              // else
 240+ 38A3 82 20                        dw      BRANCH
 241+ 38A5 06 00                        dw      FInclude_Endif_1 - $
 242+ 38A7              FInclude_Else_1:
 243+ 38A7 44 27 44 27                  dw          ZERO, ZERO          //      0 0
 244+ 38AB                                                              // endif
 245+ 38AB              FInclude_Endif_1:
 246+ 38AB 0C 25 0C 25                  dw      TO_R, TO_R              // >r >r
 247+ 38AF 51 28 56 26                  dw      SOURCE_ID, STORE        // source-id !
 248+ 38B3              FInclude_Begin:                                 // begin
 249+ 38B3 4B 27 5A 37                  dw          ONE, BLOCK, BBUF    //      1 block b/buf
 249+ 38B7 75 27
 250+ 38B9 2A 26 5A 2D                  dw          TWO_DUP, BLANK      //      2dup blank
 251+ 38BD D4 25 6E 25                  dw          SWAP, ONE_PLUS      //      swap 1+
 252+ 38C1 D4 25 89 25                  dw          SWAP, CELL_MINUS    //      swap cell-
 253+ 38C5 51 28 4C 26                  dw          SOURCE_ID, FETCH    //      source-id @
 254+ 38C9 D5 37                        dw          F_GETLINE           //      f_getline
 255+ 38CB                                                              // while
 256+ 38CB 8F 20                        dw      ZBRANCH
 257+ 38CD 14 00                        dw      FInclude_Repeat - $
 258+ 38CF 4B 27 E5 27                  dw          ONE, BLK, STORE     //      1 blk !
 258+ 38D3 56 26
 259+ 38D5 44 27 EB 27                  dw          ZERO, TO_IN, STORE  //      0 >in !
 259+ 38D9 56 26
 260+ 38DB 8A 31                        dw          INTERPRET           //      interpret
 261+ 38DD 82 20                        dw      BRANCH
 262+ 38DF D4 FF                        dw      FInclude_Begin - $
 263+ 38E1              FInclude_Repeat:                                // repeat
 264+ 38E1 51 28 4C 26                  dw      SOURCE_ID, FETCH        // source-id @
 265+ 38E5 44 27 51 28                  dw      ZERO, SOURCE_ID, STORE  // 0 source-id !
 265+ 38E9 56 26
 266+ 38EB A6 23                        dw      F_CLOSE                 // f_close
 267+ 38ED 3D 20 2A 00                  dw      LIT, 42, QERROR         // 42 ?error
 267+ 38F1 A5 2A
 268+ 38F3 17 25 17 25                  dw      R_TO, R_TO, R_TO        // r> r> r>
 268+ 38F7 17 25
 269+ 38F9 DB 25 51 28                  dw      DUP, SOURCE_ID, STORE   // dup source-id !
 269+ 38FD 56 26
 270+ 38FF                                                              // if
 271+ 38FF 8F 20                        dw      ZBRANCH
 272+ 3901 12 00                        dw      FInclude_Else_2 - $
 273+ 3903 51 28 4C 26                  dw          SOURCE_ID, FETCH    //      source-id @
 274+ 3907 8B 23                        dw          F_SEEK              //      f_seek
 275+ 3909 3D 20 2B 00                  dw          LIT, 43, QERROR     //      43, ?error
 275+ 390D A5 2A
 276+ 390F                                                              // else
 277+ 390F 82 20                        dw      BRANCH
 278+ 3911 04 00                        dw      FInclude_Endif_2 - $
 279+ 3913              FInclude_Else_2:
 280+ 3913 17 26                        dw          TWO_DROP            //      2drop
 281+ 3915              FInclude_Endif_2:                               // endif
 282+ 3915 17 25 EB 27                  dw      R_TO, TO_IN, STORE      // r> >in !
 282+ 3919 56 26
 283+ 391B 17 25 E5 27                  dw      R_TO, BLK, STORE        // r> blk !
 283+ 391F 56 26
 284+ 3921 02 25                        dw      EXIT                    // ;
 285+ 3923
 286+ 3923              //  ______________________________________________________________________
 287+ 3923              //
 288+ 3923              // open<         -- fh
 289+ 3923              // Open the following filename and return it file-handle
 290+ 3923              // Used in the form OPEN CCCC
 291+ 3923                              Colon_Def OPEN_FH, "OPEN<", is_normal
 291+ 3923             >                New_Def  OPEN_FH, "OPEN<", Enter_Ptr, is_normal ; ok
 291+ 3923             >
 291+ 3923             >Dict_Ptr        defl    $
 291+ 3923             >
 291+ 3923             >//              ______________________________________________________________________
 291+ 3923             >//              Heap part
 291+ 3923             >
 291+ 3923             >
 291+ 3923             >                org     (Heap_Ptr & $1FFF) + $E000
 291+ EB08             >
 291+ EB08             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 291+ EB08             >Latest_Definition defl  Heap_Ptr
 291+ EB08             >
 291+ EB08             >                // dummy db directives used to calculate length of namec
 291+ EB08 4F 50 45 4E >                db      "OPEN<"
 291+ EB0C 3C          >
 291+ EB0D             >len_NFA         defl    $ - temp_NFA
 291+ EB0D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 291+ EB08             >
 291+ EB08 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 291+ EB09 4F 50 45 4E >                db      "OPEN<"               // name string in 7-bit ascii, but
 291+ EB0D 3C          >
 291+ EB0E             >                org     $-1                 // alter last byte of Name just above to set
 291+ EB0D BC          >                db      {b $} | END_BIT     // msb as name end
 291+ EB0E             >
 291+ EB0E FA 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 291+ EB10             >Prev_Ptr        defl    Heap_Ptr
 291+ EB10             >
 291+ EB10             >mirror_Ptr      defl    $
 291+ EB10             >
 291+ EB10 25 39       >                dw      Dict_Ptr + 2        // xt
 291+ EB12             >Heap_Ptr        defl    $ - $E000           // save current HP
 291+ EB12             >
 291+ EB12             >Current_HP      defl  $ - $E000             // used to set HP once!
 291+ EB12             >
 291+ EB12             >//              ______________________________________________________________________
 291+ EB12             >//              Dictionary part
 291+ EB12             >
 291+ EB12             >                org     Dict_Ptr
 291+ 3923             >
 291+ 3923 10 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 291+ 3925             >
 291+ 3925             >OPEN_FH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 291+ 3925 CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 291+ 3928             >
 291+ 3928             >
 291+ 3928             >                endif           ; ok        // for other definitions it "points" the correct handler
 291+ 3928             >                // Use of "; ok" to suppress "warning[fwdref]"
 291+ 3928             >
 291+ 3928             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 292+ 3928 67 27                        dw      BL
 293+ 392A 87 2D E1 2B                  dw      WORD, COUNT, OVER       // bl word count over
 293+ 392E B7 25
 294+ 3930 55 25 44 27                  dw      PLUS, ZERO, SWAP, STORE // + 0 swap !
 294+ 3934 D4 25 56 26
 295+ 3938 78 2D 4B 27                  dw      PAD, ONE, F_OPEN        // pad 1 f_open
 295+ 393C 07 24
 296+ 393E 3D 20 2B 00                  dw      LIT, 43                 // 43
 297+ 3942 A5 2A                        dw      QERROR                  // ?error
 298+ 3944 02 25                        dw      EXIT                    // ;
 299+ 3946
 300+ 3946              //  ______________________________________________________________________
 301+ 3946              //
 302+ 3946              // use          -- cccc
 303+ 3946              // Include the following filename
 304+ 3946                              Colon_Def USE, "USE", is_normal
 304+ 3946             >                New_Def  USE, "USE", Enter_Ptr, is_normal ; ok
 304+ 3946             >
 304+ 3946             >Dict_Ptr        defl    $
 304+ 3946             >
 304+ 3946             >//              ______________________________________________________________________
 304+ 3946             >//              Heap part
 304+ 3946             >
 304+ 3946             >
 304+ 3946             >                org     (Heap_Ptr & $1FFF) + $E000
 304+ EB12             >
 304+ EB12             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 304+ EB12             >Latest_Definition defl  Heap_Ptr
 304+ EB12             >
 304+ EB12             >                // dummy db directives used to calculate length of namec
 304+ EB12 55 53 45    >                db      "USE"
 304+ EB15             >len_NFA         defl    $ - temp_NFA
 304+ EB15             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 304+ EB12             >
 304+ EB12 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 304+ EB13 55 53 45    >                db      "USE"               // name string in 7-bit ascii, but
 304+ EB16             >                org     $-1                 // alter last byte of Name just above to set
 304+ EB15 C5          >                db      {b $} | END_BIT     // msb as name end
 304+ EB16             >
 304+ EB16 08 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 304+ EB18             >Prev_Ptr        defl    Heap_Ptr
 304+ EB18             >
 304+ EB18             >mirror_Ptr      defl    $
 304+ EB18             >
 304+ EB18 48 39       >                dw      Dict_Ptr + 2        // xt
 304+ EB1A             >Heap_Ptr        defl    $ - $E000           // save current HP
 304+ EB1A             >
 304+ EB1A             >Current_HP      defl  $ - $E000             // used to set HP once!
 304+ EB1A             >
 304+ EB1A             >//              ______________________________________________________________________
 304+ EB1A             >//              Dictionary part
 304+ EB1A             >
 304+ EB1A             >                org     Dict_Ptr
 304+ 3946             >
 304+ 3946 18 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 304+ 3948             >
 304+ 3948             >USE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 304+ 3948 CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 304+ 394B             >
 304+ 394B             >
 304+ 394B             >                endif           ; ok        // for other definitions it "points" the correct handler
 304+ 394B             >                // Use of "; ok" to suppress "warning[fwdref]"
 304+ 394B             >
 304+ 394B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 305+ 394B 25 39                        dw      OPEN_FH                 // open<
 306+ 394D 65 3F 4C 26                  dw      BLK_FH, FETCH           // blk-fh @
 307+ 3951 A6 23 C0 25                  dw      F_CLOSE, DROP           // f_close drop
 308+ 3955 65 3F 56 26                  dw      BLK_FH, STORE           // blk-fh !
 309+ 3959 02 25                        dw      EXIT                    // ;
 310+ 395B
 311+ 395B              //  ______________________________________________________________________
 312+ 395B              //
 313+ 395B              // include      -- cccc
 314+ 395B              // Include the following filename
 315+ 395B                              Colon_Def INCLUDE, "INCLUDE", is_normal
 315+ 395B             >                New_Def  INCLUDE, "INCLUDE", Enter_Ptr, is_normal ; ok
 315+ 395B             >
 315+ 395B             >Dict_Ptr        defl    $
 315+ 395B             >
 315+ 395B             >//              ______________________________________________________________________
 315+ 395B             >//              Heap part
 315+ 395B             >
 315+ 395B             >
 315+ 395B             >                org     (Heap_Ptr & $1FFF) + $E000
 315+ EB1A             >
 315+ EB1A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 315+ EB1A             >Latest_Definition defl  Heap_Ptr
 315+ EB1A             >
 315+ EB1A             >                // dummy db directives used to calculate length of namec
 315+ EB1A 49 4E 43 4C >                db      "INCLUDE"
 315+ EB1E 55 44 45    >
 315+ EB21             >len_NFA         defl    $ - temp_NFA
 315+ EB21             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 315+ EB1A             >
 315+ EB1A 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 315+ EB1B 49 4E 43 4C >                db      "INCLUDE"               // name string in 7-bit ascii, but
 315+ EB1F 55 44 45    >
 315+ EB22             >                org     $-1                 // alter last byte of Name just above to set
 315+ EB21 C5          >                db      {b $} | END_BIT     // msb as name end
 315+ EB22             >
 315+ EB22 12 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 315+ EB24             >Prev_Ptr        defl    Heap_Ptr
 315+ EB24             >
 315+ EB24             >mirror_Ptr      defl    $
 315+ EB24             >
 315+ EB24 5D 39       >                dw      Dict_Ptr + 2        // xt
 315+ EB26             >Heap_Ptr        defl    $ - $E000           // save current HP
 315+ EB26             >
 315+ EB26             >Current_HP      defl  $ - $E000             // used to set HP once!
 315+ EB26             >
 315+ EB26             >//              ______________________________________________________________________
 315+ EB26             >//              Dictionary part
 315+ EB26             >
 315+ EB26             >                org     Dict_Ptr
 315+ 395B             >
 315+ 395B 24 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 315+ 395D             >
 315+ 395D             >INCLUDE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 315+ 395D CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 315+ 3960             >
 315+ 3960             >
 315+ 3960             >                endif           ; ok        // for other definitions it "points" the correct handler
 315+ 3960             >                // Use of "; ok" to suppress "warning[fwdref]"
 315+ 3960             >
 315+ 3960             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 316+ 3960 25 39                        dw      OPEN_FH                 // open
 317+ 3962 DB 25 6E 38                  dw      DUP, F_INCLUDE          // dup f_include
 318+ 3966 A6 23 C0 25                  dw      F_CLOSE, DROP           // f_close drop
 319+ 396A 02 25                        dw      EXIT                    // ;
 320+ 396C
 321+ 396C              //  ______________________________________________________________________
 322+ 396C              //
 323+ 396C              // needs
 324+ 396C              // check for cccc exists in vocabulary
 325+ 396C              // if it doesn't then  INCLUDE  inc/cccc.F
 326+ 396C
 327+ 396C              // temp filename cccc.f as counted string zero-padded
 328+ 396C                              New_Def NEEDS_W,   "NEEDS-W", Create_Ptr, is_normal
 328+ 396C             >
 328+ 396C             >Dict_Ptr        defl    $
 328+ 396C             >
 328+ 396C             >//              ______________________________________________________________________
 328+ 396C             >//              Heap part
 328+ 396C             >
 328+ 396C             >
 328+ 396C             >                org     (Heap_Ptr & $1FFF) + $E000
 328+ EB26             >
 328+ EB26             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 328+ EB26             >Latest_Definition defl  Heap_Ptr
 328+ EB26             >
 328+ EB26             >                // dummy db directives used to calculate length of namec
 328+ EB26 4E 45 45 44 >                db      "NEEDS-W"
 328+ EB2A 53 2D 57    >
 328+ EB2D             >len_NFA         defl    $ - temp_NFA
 328+ EB2D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 328+ EB26             >
 328+ EB26 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 328+ EB27 4E 45 45 44 >                db      "NEEDS-W"               // name string in 7-bit ascii, but
 328+ EB2B 53 2D 57    >
 328+ EB2E             >                org     $-1                 // alter last byte of Name just above to set
 328+ EB2D D7          >                db      {b $} | END_BIT     // msb as name end
 328+ EB2E             >
 328+ EB2E 1A 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 328+ EB30             >Prev_Ptr        defl    Heap_Ptr
 328+ EB30             >
 328+ EB30             >mirror_Ptr      defl    $
 328+ EB30             >
 328+ EB30 6E 39       >                dw      Dict_Ptr + 2        // xt
 328+ EB32             >Heap_Ptr        defl    $ - $E000           // save current HP
 328+ EB32             >
 328+ EB32             >Current_HP      defl  $ - $E000             // used to set HP once!
 328+ EB32             >
 328+ EB32             >//              ______________________________________________________________________
 328+ EB32             >//              Dictionary part
 328+ EB32             >
 328+ EB32             >                org     Dict_Ptr
 328+ 396C             >
 328+ 396C 30 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 328+ 396E             >
 328+ 396E             >NEEDS_W:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 328+ 396E CD CE 30    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 328+ 3971             >
 328+ 3971             >
 328+ 3971             >                endif           ; ok        // for other definitions it "points" the correct handler
 328+ 3971             >                // Use of "; ok" to suppress "warning[fwdref]"
 328+ 3971             >
 328+ 3971             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 329+ 3971 00 00 00...                  ds      35                      // 32 + .f + 0x00 = len 35
 330+ 3994              // temp complete path+filename
 331+ 3994                              New_Def NEEDS_FN,  "NEEDS-FN", Create_Ptr, is_normal
 331+ 3994             >
 331+ 3994             >Dict_Ptr        defl    $
 331+ 3994             >
 331+ 3994             >//              ______________________________________________________________________
 331+ 3994             >//              Heap part
 331+ 3994             >
 331+ 3994             >
 331+ 3994             >                org     (Heap_Ptr & $1FFF) + $E000
 331+ EB32             >
 331+ EB32             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 331+ EB32             >Latest_Definition defl  Heap_Ptr
 331+ EB32             >
 331+ EB32             >                // dummy db directives used to calculate length of namec
 331+ EB32 4E 45 45 44 >                db      "NEEDS-FN"
 331+ EB36 53 2D 46 4E >
 331+ EB3A             >len_NFA         defl    $ - temp_NFA
 331+ EB3A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 331+ EB32             >
 331+ EB32 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 331+ EB33 4E 45 45 44 >                db      "NEEDS-FN"               // name string in 7-bit ascii, but
 331+ EB37 53 2D 46 4E >
 331+ EB3B             >                org     $-1                 // alter last byte of Name just above to set
 331+ EB3A CE          >                db      {b $} | END_BIT     // msb as name end
 331+ EB3B             >
 331+ EB3B 26 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 331+ EB3D             >Prev_Ptr        defl    Heap_Ptr
 331+ EB3D             >
 331+ EB3D             >mirror_Ptr      defl    $
 331+ EB3D             >
 331+ EB3D 96 39       >                dw      Dict_Ptr + 2        // xt
 331+ EB3F             >Heap_Ptr        defl    $ - $E000           // save current HP
 331+ EB3F             >
 331+ EB3F             >Current_HP      defl  $ - $E000             // used to set HP once!
 331+ EB3F             >
 331+ EB3F             >//              ______________________________________________________________________
 331+ EB3F             >//              Dictionary part
 331+ EB3F             >
 331+ EB3F             >                org     Dict_Ptr
 331+ 3994             >
 331+ 3994 3D 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 331+ 3996             >
 331+ 3996             >NEEDS_FN:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 331+ 3996 CD CE 30    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 331+ 3999             >
 331+ 3999             >
 331+ 3999             >                endif           ; ok        // for other definitions it "points" the correct handler
 331+ 3999             >                // Use of "; ok" to suppress "warning[fwdref]"
 331+ 3999             >
 331+ 3999             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 332+ 3999 00 00 00...                  ds      40
 333+ 39C1              // constant path
 334+ 39C1                              New_Def NEEDS_INC,  "NEEDS-INC", Create_Ptr, is_normal
 334+ 39C1             >
 334+ 39C1             >Dict_Ptr        defl    $
 334+ 39C1             >
 334+ 39C1             >//              ______________________________________________________________________
 334+ 39C1             >//              Heap part
 334+ 39C1             >
 334+ 39C1             >
 334+ 39C1             >                org     (Heap_Ptr & $1FFF) + $E000
 334+ EB3F             >
 334+ EB3F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 334+ EB3F             >Latest_Definition defl  Heap_Ptr
 334+ EB3F             >
 334+ EB3F             >                // dummy db directives used to calculate length of namec
 334+ EB3F 4E 45 45 44 >                db      "NEEDS-INC"
 334+ EB43 53 2D 49 4E >
 334+ EB47 43          >
 334+ EB48             >len_NFA         defl    $ - temp_NFA
 334+ EB48             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 334+ EB3F             >
 334+ EB3F 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 334+ EB40 4E 45 45 44 >                db      "NEEDS-INC"               // name string in 7-bit ascii, but
 334+ EB44 53 2D 49 4E >
 334+ EB48 43          >
 334+ EB49             >                org     $-1                 // alter last byte of Name just above to set
 334+ EB48 C3          >                db      {b $} | END_BIT     // msb as name end
 334+ EB49             >
 334+ EB49 32 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 334+ EB4B             >Prev_Ptr        defl    Heap_Ptr
 334+ EB4B             >
 334+ EB4B             >mirror_Ptr      defl    $
 334+ EB4B             >
 334+ EB4B C3 39       >                dw      Dict_Ptr + 2        // xt
 334+ EB4D             >Heap_Ptr        defl    $ - $E000           // save current HP
 334+ EB4D             >
 334+ EB4D             >Current_HP      defl  $ - $E000             // used to set HP once!
 334+ EB4D             >
 334+ EB4D             >//              ______________________________________________________________________
 334+ EB4D             >//              Dictionary part
 334+ EB4D             >
 334+ EB4D             >                org     Dict_Ptr
 334+ 39C1             >
 334+ 39C1 4B 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 334+ 39C3             >
 334+ 39C3             >NEEDS_INC:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 334+ 39C3 CD CE 30    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 334+ 39C6             >
 334+ 39C6             >
 334+ 39C6             >                endif           ; ok        // for other definitions it "points" the correct handler
 334+ 39C6             >                // Use of "; ok" to suppress "warning[fwdref]"
 334+ 39C6             >
 334+ 39C6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 335+ 39C6 04 69 6E 63                  db      4, "inc/", 0
 335+ 39CA 2F 00
 336+ 39CC                              New_Def NEEDS_LIB,  "NEEDS-LIB", Create_Ptr, is_normal
 336+ 39CC             >
 336+ 39CC             >Dict_Ptr        defl    $
 336+ 39CC             >
 336+ 39CC             >//              ______________________________________________________________________
 336+ 39CC             >//              Heap part
 336+ 39CC             >
 336+ 39CC             >
 336+ 39CC             >                org     (Heap_Ptr & $1FFF) + $E000
 336+ EB4D             >
 336+ EB4D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 336+ EB4D             >Latest_Definition defl  Heap_Ptr
 336+ EB4D             >
 336+ EB4D             >                // dummy db directives used to calculate length of namec
 336+ EB4D 4E 45 45 44 >                db      "NEEDS-LIB"
 336+ EB51 53 2D 4C 49 >
 336+ EB55 42          >
 336+ EB56             >len_NFA         defl    $ - temp_NFA
 336+ EB56             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 336+ EB4D             >
 336+ EB4D 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 336+ EB4E 4E 45 45 44 >                db      "NEEDS-LIB"               // name string in 7-bit ascii, but
 336+ EB52 53 2D 4C 49 >
 336+ EB56 42          >
 336+ EB57             >                org     $-1                 // alter last byte of Name just above to set
 336+ EB56 C2          >                db      {b $} | END_BIT     // msb as name end
 336+ EB57             >
 336+ EB57 3F 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 336+ EB59             >Prev_Ptr        defl    Heap_Ptr
 336+ EB59             >
 336+ EB59             >mirror_Ptr      defl    $
 336+ EB59             >
 336+ EB59 CE 39       >                dw      Dict_Ptr + 2        // xt
 336+ EB5B             >Heap_Ptr        defl    $ - $E000           // save current HP
 336+ EB5B             >
 336+ EB5B             >Current_HP      defl  $ - $E000             // used to set HP once!
 336+ EB5B             >
 336+ EB5B             >//              ______________________________________________________________________
 336+ EB5B             >//              Dictionary part
 336+ EB5B             >
 336+ EB5B             >                org     Dict_Ptr
 336+ 39CC             >
 336+ 39CC 59 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 336+ 39CE             >
 336+ 39CE             >NEEDS_LIB:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 336+ 39CE CD CE 30    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 336+ 39D1             >
 336+ 39D1             >
 336+ 39D1             >                endif           ; ok        // for other definitions it "points" the correct handler
 336+ 39D1             >                // Use of "; ok" to suppress "warning[fwdref]"
 336+ 39D1             >
 336+ 39D1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 337+ 39D1 04 6C 69 62                  db      4, "lib/", 0
 337+ 39D5 2F 00
 338+ 39D7
 339+ 39D7              // Concatenate path at a and filename and include it
 340+ 39D7              // No error is issued if filename doesn't exist.
 341+ 39D7                              Colon_Def NEEDS_SLASH, "NEEDS/", is_normal
 341+ 39D7             >                New_Def  NEEDS_SLASH, "NEEDS/", Enter_Ptr, is_normal ; ok
 341+ 39D7             >
 341+ 39D7             >Dict_Ptr        defl    $
 341+ 39D7             >
 341+ 39D7             >//              ______________________________________________________________________
 341+ 39D7             >//              Heap part
 341+ 39D7             >
 341+ 39D7             >
 341+ 39D7             >                org     (Heap_Ptr & $1FFF) + $E000
 341+ EB5B             >
 341+ EB5B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 341+ EB5B             >Latest_Definition defl  Heap_Ptr
 341+ EB5B             >
 341+ EB5B             >                // dummy db directives used to calculate length of namec
 341+ EB5B 4E 45 45 44 >                db      "NEEDS/"
 341+ EB5F 53 2F       >
 341+ EB61             >len_NFA         defl    $ - temp_NFA
 341+ EB61             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 341+ EB5B             >
 341+ EB5B 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 341+ EB5C 4E 45 45 44 >                db      "NEEDS/"               // name string in 7-bit ascii, but
 341+ EB60 53 2F       >
 341+ EB62             >                org     $-1                 // alter last byte of Name just above to set
 341+ EB61 AF          >                db      {b $} | END_BIT     // msb as name end
 341+ EB62             >
 341+ EB62 4D 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 341+ EB64             >Prev_Ptr        defl    Heap_Ptr
 341+ EB64             >
 341+ EB64             >mirror_Ptr      defl    $
 341+ EB64             >
 341+ EB64 D9 39       >                dw      Dict_Ptr + 2        // xt
 341+ EB66             >Heap_Ptr        defl    $ - $E000           // save current HP
 341+ EB66             >
 341+ EB66             >Current_HP      defl  $ - $E000             // used to set HP once!
 341+ EB66             >
 341+ EB66             >//              ______________________________________________________________________
 341+ EB66             >//              Dictionary part
 341+ EB66             >
 341+ EB66             >                org     Dict_Ptr
 341+ 39D7             >
 341+ 39D7 64 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 341+ 39D9             >
 341+ 39D9             >NEEDS_SLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 341+ 39D9 CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 341+ 39DC             >
 341+ 39DC             >
 341+ 39DC             >                endif           ; ok        // for other definitions it "points" the correct handler
 341+ 39DC             >                // Use of "; ok" to suppress "warning[fwdref]"
 341+ 39DC             >
 341+ 39DC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 342+ 39DC E1 2B CB 25                  dw      COUNT, TUCK             // n a n
 343+ 39E0 96 39 D4 25                  dw      NEEDS_FN, SWAP, CMOVE   // n        \ Path
 343+ 39E4 43 24
 344+ 39E6 96 39 55 25                  dw      NEEDS_FN, PLUS          // a1+n     \ Concat
 345+ 39EA 6E 39 6E 25                  dw      NEEDS_W, ONE_PLUS, SWAP
 345+ 39EE D4 25
 346+ 39F0 3D 20 23 00                  dw      LIT, 35
 347+ 39F4 43 24                        dw      CMOVE
 348+ 39F6 96 39                        dw      NEEDS_FN
 349+ 39F8 78 2D 4B 27                  dw      PAD, ONE, F_OPEN
 349+ 39FC 07 24
 350+ 39FE 27 25                        dw      ZEQUAL
 351+ 3A00 8F 20                        dw      ZBRANCH
 352+ 3A02 08 00                        dw      Needs_1 - $
 353+ 3A04 6E 38                        dw          F_INCLUDE
 354+ 3A06 82 20                        dw      BRANCH
 355+ 3A08 04 00                        dw      Needs_2 - $
 356+ 3A0A              Needs_1:
 357+ 3A0A              //              dw          NEEDS_W, COUNT, TYPE, SPACE
 358+ 3A0A              //              dw          LIT, 43, MESSAGE
 359+ 3A0A C0 25                        dw          DROP
 360+ 3A0C              Needs_2:
 361+ 3A0C 02 25                        dw      EXIT                    // ;
 362+ 3A0E
 363+ 3A0E
 364+ 3A0E                              New_Def NDOM,   "NDOM", Create_Ptr, is_normal
 364+ 3A0E             >
 364+ 3A0E             >Dict_Ptr        defl    $
 364+ 3A0E             >
 364+ 3A0E             >//              ______________________________________________________________________
 364+ 3A0E             >//              Heap part
 364+ 3A0E             >
 364+ 3A0E             >
 364+ 3A0E             >                org     (Heap_Ptr & $1FFF) + $E000
 364+ EB66             >
 364+ EB66             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 364+ EB66             >Latest_Definition defl  Heap_Ptr
 364+ EB66             >
 364+ EB66             >                // dummy db directives used to calculate length of namec
 364+ EB66 4E 44 4F 4D >                db      "NDOM"
 364+ EB6A             >len_NFA         defl    $ - temp_NFA
 364+ EB6A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 364+ EB66             >
 364+ EB66 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 364+ EB67 4E 44 4F 4D >                db      "NDOM"               // name string in 7-bit ascii, but
 364+ EB6B             >                org     $-1                 // alter last byte of Name just above to set
 364+ EB6A CD          >                db      {b $} | END_BIT     // msb as name end
 364+ EB6B             >
 364+ EB6B 5B 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 364+ EB6D             >Prev_Ptr        defl    Heap_Ptr
 364+ EB6D             >
 364+ EB6D             >mirror_Ptr      defl    $
 364+ EB6D             >
 364+ EB6D 10 3A       >                dw      Dict_Ptr + 2        // xt
 364+ EB6F             >Heap_Ptr        defl    $ - $E000           // save current HP
 364+ EB6F             >
 364+ EB6F             >Current_HP      defl  $ - $E000             // used to set HP once!
 364+ EB6F             >
 364+ EB6F             >//              ______________________________________________________________________
 364+ EB6F             >//              Dictionary part
 364+ EB6F             >
 364+ EB6F             >                org     Dict_Ptr
 364+ 3A0E             >
 364+ 3A0E 6D 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 364+ 3A10             >
 364+ 3A10             >NDOM:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 364+ 3A10 CD CE 30    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 364+ 3A13             >
 364+ 3A13             >
 364+ 3A13             >                endif           ; ok        // for other definitions it "points" the correct handler
 364+ 3A13             >                // Use of "; ok" to suppress "warning[fwdref]"
 364+ 3A13             >
 364+ 3A13             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 365+ 3A13              //              db $3A, $3F, $2F, $2A, $7C, $5C, $3C, $3E, $22
 366+ 3A13 3A 3F 2F 2A                  db ':?/*|\<>"'
 366+ 3A17 7C 5C 3C 3E
 366+ 3A1B 22
 367+ 3A1C 00                           db 0
 368+ 3A1D
 369+ 3A1D                              New_Def NCDM,   "NCDM", Create_Ptr, is_normal
 369+ 3A1D             >
 369+ 3A1D             >Dict_Ptr        defl    $
 369+ 3A1D             >
 369+ 3A1D             >//              ______________________________________________________________________
 369+ 3A1D             >//              Heap part
 369+ 3A1D             >
 369+ 3A1D             >
 369+ 3A1D             >                org     (Heap_Ptr & $1FFF) + $E000
 369+ EB6F             >
 369+ EB6F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 369+ EB6F             >Latest_Definition defl  Heap_Ptr
 369+ EB6F             >
 369+ EB6F             >                // dummy db directives used to calculate length of namec
 369+ EB6F 4E 43 44 4D >                db      "NCDM"
 369+ EB73             >len_NFA         defl    $ - temp_NFA
 369+ EB73             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 369+ EB6F             >
 369+ EB6F 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 369+ EB70 4E 43 44 4D >                db      "NCDM"               // name string in 7-bit ascii, but
 369+ EB74             >                org     $-1                 // alter last byte of Name just above to set
 369+ EB73 CD          >                db      {b $} | END_BIT     // msb as name end
 369+ EB74             >
 369+ EB74 66 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 369+ EB76             >Prev_Ptr        defl    Heap_Ptr
 369+ EB76             >
 369+ EB76             >mirror_Ptr      defl    $
 369+ EB76             >
 369+ EB76 1F 3A       >                dw      Dict_Ptr + 2        // xt
 369+ EB78             >Heap_Ptr        defl    $ - $E000           // save current HP
 369+ EB78             >
 369+ EB78             >Current_HP      defl  $ - $E000             // used to set HP once!
 369+ EB78             >
 369+ EB78             >//              ______________________________________________________________________
 369+ EB78             >//              Dictionary part
 369+ EB78             >
 369+ EB78             >                org     Dict_Ptr
 369+ 3A1D             >
 369+ 3A1D 76 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 369+ 3A1F             >
 369+ 3A1F             >NCDM:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 369+ 3A1F CD CE 30    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 369+ 3A22             >
 369+ 3A22             >
 369+ 3A22             >                endif           ; ok        // for other definitions it "points" the correct handler
 369+ 3A22             >                // Use of "; ok" to suppress "warning[fwdref]"
 369+ 3A22             >
 369+ 3A22             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 370+ 3A22              //              db $5F, $5E, $25, $26, $24, $5F, $7B, $7D, $7E
 371+ 3A22 5F 5E 25 26                  db '_^%&$_{}~'
 371+ 3A26 24 5F 7B 7D
 371+ 3A2A 7E
 372+ 3A2B 00                           db 0
 373+ 3A2C
 374+ 3A2C              // Replace illegal character in filename using the map here above
 375+ 3A2C              // at the moment we need only  "
 376+ 3A2C                              Colon_Def NEEDS_CHECK, "MAP-FN", is_normal
 376+ 3A2C             >                New_Def  NEEDS_CHECK, "MAP-FN", Enter_Ptr, is_normal ; ok
 376+ 3A2C             >
 376+ 3A2C             >Dict_Ptr        defl    $
 376+ 3A2C             >
 376+ 3A2C             >//              ______________________________________________________________________
 376+ 3A2C             >//              Heap part
 376+ 3A2C             >
 376+ 3A2C             >
 376+ 3A2C             >                org     (Heap_Ptr & $1FFF) + $E000
 376+ EB78             >
 376+ EB78             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 376+ EB78             >Latest_Definition defl  Heap_Ptr
 376+ EB78             >
 376+ EB78             >                // dummy db directives used to calculate length of namec
 376+ EB78 4D 41 50 2D >                db      "MAP-FN"
 376+ EB7C 46 4E       >
 376+ EB7E             >len_NFA         defl    $ - temp_NFA
 376+ EB7E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 376+ EB78             >
 376+ EB78 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 376+ EB79 4D 41 50 2D >                db      "MAP-FN"               // name string in 7-bit ascii, but
 376+ EB7D 46 4E       >
 376+ EB7F             >                org     $-1                 // alter last byte of Name just above to set
 376+ EB7E CE          >                db      {b $} | END_BIT     // msb as name end
 376+ EB7F             >
 376+ EB7F 6F 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 376+ EB81             >Prev_Ptr        defl    Heap_Ptr
 376+ EB81             >
 376+ EB81             >mirror_Ptr      defl    $
 376+ EB81             >
 376+ EB81 2E 3A       >                dw      Dict_Ptr + 2        // xt
 376+ EB83             >Heap_Ptr        defl    $ - $E000           // save current HP
 376+ EB83             >
 376+ EB83             >Current_HP      defl  $ - $E000             // used to set HP once!
 376+ EB83             >
 376+ EB83             >//              ______________________________________________________________________
 376+ EB83             >//              Dictionary part
 376+ EB83             >
 376+ EB83             >                org     Dict_Ptr
 376+ 3A2C             >
 376+ 3A2C 81 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 376+ 3A2E             >
 376+ 3A2E             >NEEDS_CHECK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 376+ 3A2E CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 376+ 3A31             >
 376+ 3A31             >
 376+ 3A31             >                endif           ; ok        // for other definitions it "points" the correct handler
 376+ 3A31             >                // Use of "; ok" to suppress "warning[fwdref]"
 376+ 3A31             >
 376+ 3A31             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 377+ 3A31 E1 2B EE 2B                  dw      COUNT, BOUNDS
 378+ 3A35 CE 20                        dw      C_DO
 379+ 3A37              Needs_3:
 380+ 3A37 1F 3A 10 3A                  dw          NCDM, NDOM, LIT, 10
 380+ 3A3B 3D 20 0A 00
 381+ 3A3F D4 20 61 26                  dw          I, CFETCH
 382+ 3A43 F5 21                        dw          C_MAP
 383+ 3A45 D4 20 6A 26                  dw          I, CSTORE
 384+ 3A49              Needs_4:
 385+ 3A49 7A 20                        dw      C_LOOP
 386+ 3A4B EC FF                        dw      Needs_3 - $
 387+ 3A4D 02 25                        dw      EXIT
 388+ 3A4F
 389+ 3A4F
 390+ 3A4F              // include  "path/cccc.f" if cccc is not defined
 391+ 3A4F              // filename cccc.f is temporary stored at NEEDS-W
 392+ 3A4F                              Colon_Def NEEDS_PATH, "NEEDS-F", is_normal
 392+ 3A4F             >                New_Def  NEEDS_PATH, "NEEDS-F", Enter_Ptr, is_normal ; ok
 392+ 3A4F             >
 392+ 3A4F             >Dict_Ptr        defl    $
 392+ 3A4F             >
 392+ 3A4F             >//              ______________________________________________________________________
 392+ 3A4F             >//              Heap part
 392+ 3A4F             >
 392+ 3A4F             >
 392+ 3A4F             >                org     (Heap_Ptr & $1FFF) + $E000
 392+ EB83             >
 392+ EB83             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 392+ EB83             >Latest_Definition defl  Heap_Ptr
 392+ EB83             >
 392+ EB83             >                // dummy db directives used to calculate length of namec
 392+ EB83 4E 45 45 44 >                db      "NEEDS-F"
 392+ EB87 53 2D 46    >
 392+ EB8A             >len_NFA         defl    $ - temp_NFA
 392+ EB8A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 392+ EB83             >
 392+ EB83 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 392+ EB84 4E 45 45 44 >                db      "NEEDS-F"               // name string in 7-bit ascii, but
 392+ EB88 53 2D 46    >
 392+ EB8B             >                org     $-1                 // alter last byte of Name just above to set
 392+ EB8A C6          >                db      {b $} | END_BIT     // msb as name end
 392+ EB8B             >
 392+ EB8B 78 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 392+ EB8D             >Prev_Ptr        defl    Heap_Ptr
 392+ EB8D             >
 392+ EB8D             >mirror_Ptr      defl    $
 392+ EB8D             >
 392+ EB8D 51 3A       >                dw      Dict_Ptr + 2        // xt
 392+ EB8F             >Heap_Ptr        defl    $ - $E000           // save current HP
 392+ EB8F             >
 392+ EB8F             >Current_HP      defl  $ - $E000             // used to set HP once!
 392+ EB8F             >
 392+ EB8F             >//              ______________________________________________________________________
 392+ EB8F             >//              Dictionary part
 392+ EB8F             >
 392+ EB8F             >                org     Dict_Ptr
 392+ 3A4F             >
 392+ 3A4F 8D 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 392+ 3A51             >
 392+ 3A51             >NEEDS_PATH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 392+ 3A51 CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 392+ 3A54             >
 392+ 3A54             >
 392+ 3A54             >                endif           ; ok        // for other definitions it "points" the correct handler
 392+ 3A54             >                // Use of "; ok" to suppress "warning[fwdref]"
 392+ 3A54             >
 392+ 3A54             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 393+ 3A54 C7 2F                        dw      LFIND
 394+ 3A56 8F 20                        dw      ZBRANCH
 395+ 3A58 0A 00                        dw      Needs_5 - $
 396+ 3A5A
 397+ 3A5A C0 25 17 26                  dw          DROP, TWO_DROP
 398+ 3A5E 82 20                        dw      BRANCH
 399+ 3A60 2C 00                        dw      Needs_6 - $
 400+ 3A62              Needs_5:
 401+ 3A62 6E 39                        dw          NEEDS_W
 402+ 3A64 3D 20 23 00                  dw          LIT, 35
 403+ 3A68 4F 2D                        dw          ERASE                   // a
 404+ 3A6A 69 28 61 26                  dw          HERE, CFETCH, ONE_PLUS  // a n
 404+ 3A6E 6E 25
 405+ 3A70 69 28 B7 25                  dw          HERE, OVER              // a n here n
 406+ 3A74 6E 39 D4 25                  dw          NEEDS_W, SWAP, CMOVE    // a n
 406+ 3A78 43 24
 407+ 3A7A 6E 39 2E 3A                  dw          NEEDS_W, NEEDS_CHECK
 408+ 3A7E 6E 39 55 25                  dw          NEEDS_W, PLUS           // a a1+1
 409+ 3A82 3D 20 2E 66                  dw          LIT, $662E              // a a1+1 ".F"
 410+ 3A86 D4 25 56 26                  dw          SWAP, STORE             // a
 411+ 3A8A D9 39                        dw          NEEDS_SLASH
 412+ 3A8C              Needs_6:
 413+ 3A8C 02 25                        dw      EXIT
 414+ 3A8E
 415+ 3A8E
 416+ 3A8E              // check for cccc exists in vocabulary
 417+ 3A8E              // if it doesn't then  INCLUDE  inc/cccc.F
 418+ 3A8E              // search in inc subdirectory
 419+ 3A8E                              Colon_Def NEEDS, "NEEDS", is_normal
 419+ 3A8E             >                New_Def  NEEDS, "NEEDS", Enter_Ptr, is_normal ; ok
 419+ 3A8E             >
 419+ 3A8E             >Dict_Ptr        defl    $
 419+ 3A8E             >
 419+ 3A8E             >//              ______________________________________________________________________
 419+ 3A8E             >//              Heap part
 419+ 3A8E             >
 419+ 3A8E             >
 419+ 3A8E             >                org     (Heap_Ptr & $1FFF) + $E000
 419+ EB8F             >
 419+ EB8F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 419+ EB8F             >Latest_Definition defl  Heap_Ptr
 419+ EB8F             >
 419+ EB8F             >                // dummy db directives used to calculate length of namec
 419+ EB8F 4E 45 45 44 >                db      "NEEDS"
 419+ EB93 53          >
 419+ EB94             >len_NFA         defl    $ - temp_NFA
 419+ EB94             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 419+ EB8F             >
 419+ EB8F 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 419+ EB90 4E 45 45 44 >                db      "NEEDS"               // name string in 7-bit ascii, but
 419+ EB94 53          >
 419+ EB95             >                org     $-1                 // alter last byte of Name just above to set
 419+ EB94 D3          >                db      {b $} | END_BIT     // msb as name end
 419+ EB95             >
 419+ EB95 83 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 419+ EB97             >Prev_Ptr        defl    Heap_Ptr
 419+ EB97             >
 419+ EB97             >mirror_Ptr      defl    $
 419+ EB97             >
 419+ EB97 90 3A       >                dw      Dict_Ptr + 2        // xt
 419+ EB99             >Heap_Ptr        defl    $ - $E000           // save current HP
 419+ EB99             >
 419+ EB99             >Current_HP      defl  $ - $E000             // used to set HP once!
 419+ EB99             >
 419+ EB99             >//              ______________________________________________________________________
 419+ EB99             >//              Dictionary part
 419+ EB99             >
 419+ EB99             >                org     Dict_Ptr
 419+ 3A8E             >
 419+ 3A8E 97 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 419+ 3A90             >
 419+ 3A90             >NEEDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 419+ 3A90 CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 419+ 3A93             >
 419+ 3A93             >
 419+ 3A93             >                endif           ; ok        // for other definitions it "points" the correct handler
 419+ 3A93             >                // Use of "; ok" to suppress "warning[fwdref]"
 419+ 3A93             >
 419+ 3A93             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 420+ 3A93 EB 27 4C 26                  dw      TO_IN, FETCH
 421+ 3A97 DB 25                        dw      DUP
 422+ 3A99 C3 39 51 3A                  dw      NEEDS_INC, NEEDS_PATH
 423+ 3A9D EB 27 56 26                  dw      TO_IN, STORE
 424+ 3AA1 CE 39 51 3A                  dw      NEEDS_LIB, NEEDS_PATH
 425+ 3AA5 EB 27 56 26                  dw      TO_IN, STORE
 426+ 3AA9 C7 2F                        dw      LFIND
 427+ 3AAB 8F 20                        dw      ZBRANCH
 428+ 3AAD 08 00                        dw      Needs_10 - $
 429+ 3AAF 17 26                        dw          TWO_DROP
 430+ 3AB1 82 20                        dw      BRANCH
 431+ 3AB3 10 00                        dw      Needs_11 - $
 432+ 3AB5              Needs_10:
 433+ 3AB5 6E 39 E1 2B                  dw      NEEDS_W, COUNT, TYPE, SPACE
 433+ 3AB9 35 2C 3A 29
 434+ 3ABD 3D 20 2B 00                  dw      LIT, 43, MESSAGE
 434+ 3AC1 9B 35
 435+ 3AC3              Needs_11:
 436+ 3AC3 02 25                        dw      EXIT
 437+ 3AC5
 438+ 3AC5
 439+ 3AC5              //  ______________________________________________________________________
 440+ 3AC5              //
 441+ 3AC5              // load         n --
 442+ 3AC5                              Colon_Def LOAD, "LOAD", is_normal
 442+ 3AC5             >                New_Def  LOAD, "LOAD", Enter_Ptr, is_normal ; ok
 442+ 3AC5             >
 442+ 3AC5             >Dict_Ptr        defl    $
 442+ 3AC5             >
 442+ 3AC5             >//              ______________________________________________________________________
 442+ 3AC5             >//              Heap part
 442+ 3AC5             >
 442+ 3AC5             >
 442+ 3AC5             >                org     (Heap_Ptr & $1FFF) + $E000
 442+ EB99             >
 442+ EB99             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 442+ EB99             >Latest_Definition defl  Heap_Ptr
 442+ EB99             >
 442+ EB99             >                // dummy db directives used to calculate length of namec
 442+ EB99 4C 4F 41 44 >                db      "LOAD"
 442+ EB9D             >len_NFA         defl    $ - temp_NFA
 442+ EB9D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 442+ EB99             >
 442+ EB99 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 442+ EB9A 4C 4F 41 44 >                db      "LOAD"               // name string in 7-bit ascii, but
 442+ EB9E             >                org     $-1                 // alter last byte of Name just above to set
 442+ EB9D C4          >                db      {b $} | END_BIT     // msb as name end
 442+ EB9E             >
 442+ EB9E 8F 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 442+ EBA0             >Prev_Ptr        defl    Heap_Ptr
 442+ EBA0             >
 442+ EBA0             >mirror_Ptr      defl    $
 442+ EBA0             >
 442+ EBA0 C7 3A       >                dw      Dict_Ptr + 2        // xt
 442+ EBA2             >Heap_Ptr        defl    $ - $E000           // save current HP
 442+ EBA2             >
 442+ EBA2             >Current_HP      defl  $ - $E000             // used to set HP once!
 442+ EBA2             >
 442+ EBA2             >//              ______________________________________________________________________
 442+ EBA2             >//              Dictionary part
 442+ EBA2             >
 442+ EBA2             >                org     Dict_Ptr
 442+ 3AC5             >
 442+ 3AC5 A0 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 442+ 3AC7             >
 442+ 3AC7             >LOAD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 442+ 3AC7 CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 442+ 3ACA             >
 442+ 3ACA             >
 442+ 3ACA             >                endif           ; ok        // for other definitions it "points" the correct handler
 442+ 3ACA             >                // Use of "; ok" to suppress "warning[fwdref]"
 442+ 3ACA             >
 442+ 3ACA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 443+ 3ACA E5 27 4C 26                  dw      BLK, FETCH, TO_R        // blk @ >r
 443+ 3ACE 0C 25
 444+ 3AD0 EB 27 4C 26                  dw      TO_IN, FETCH, TO_R      // >in @ >r
 444+ 3AD4 0C 25
 445+ 3AD6
 446+ 3AD6 44 27 EB 27                  dw      ZERO, TO_IN, STORE      // 0 >in !
 446+ 3ADA 56 26
 447+ 3ADC 7C 27 27 35                  dw      BSCR, MUL, BLK, STORE   // b/scr * blk !
 447+ 3AE0 E5 27 56 26
 448+ 3AE4 8A 31                        dw      INTERPRET               // interpret
 449+ 3AE6
 450+ 3AE6 17 25 EB 27                  dw      R_TO, TO_IN, STORE      // r> >in !
 450+ 3AEA 56 26
 451+ 3AEC 17 25 E5 27                  dw      R_TO, BLK, STORE        // r> blk !
 451+ 3AF0 56 26
 452+ 3AF2 02 25                        dw      EXIT                    // ;
 453+ 3AF4
 454+ 3AF4              //  ______________________________________________________________________
 455+ 3AF4              //
 456+ 3AF4              // -->          --
 457+ 3AF4                              Colon_Def LOAD_NEXT, "-->", is_immediate
 457+ 3AF4             >                New_Def  LOAD_NEXT, "-->", Enter_Ptr, is_immediate ; ok
 457+ 3AF4             >
 457+ 3AF4             >Dict_Ptr        defl    $
 457+ 3AF4             >
 457+ 3AF4             >//              ______________________________________________________________________
 457+ 3AF4             >//              Heap part
 457+ 3AF4             >
 457+ 3AF4             >
 457+ 3AF4             >                org     (Heap_Ptr & $1FFF) + $E000
 457+ EBA2             >
 457+ EBA2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 457+ EBA2             >Latest_Definition defl  Heap_Ptr
 457+ EBA2             >
 457+ EBA2             >                // dummy db directives used to calculate length of namec
 457+ EBA2 2D 2D 3E    >                db      "-->"
 457+ EBA5             >len_NFA         defl    $ - temp_NFA
 457+ EBA5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 457+ EBA2             >
 457+ EBA2 C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 457+ EBA3 2D 2D 3E    >                db      "-->"               // name string in 7-bit ascii, but
 457+ EBA6             >                org     $-1                 // alter last byte of Name just above to set
 457+ EBA5 BE          >                db      {b $} | END_BIT     // msb as name end
 457+ EBA6             >
 457+ EBA6 99 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 457+ EBA8             >Prev_Ptr        defl    Heap_Ptr
 457+ EBA8             >
 457+ EBA8             >mirror_Ptr      defl    $
 457+ EBA8             >
 457+ EBA8 F6 3A       >                dw      Dict_Ptr + 2        // xt
 457+ EBAA             >Heap_Ptr        defl    $ - $E000           // save current HP
 457+ EBAA             >
 457+ EBAA             >Current_HP      defl  $ - $E000             // used to set HP once!
 457+ EBAA             >
 457+ EBAA             >//              ______________________________________________________________________
 457+ EBAA             >//              Dictionary part
 457+ EBAA             >
 457+ EBAA             >                org     Dict_Ptr
 457+ 3AF4             >
 457+ 3AF4 A8 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 457+ 3AF6             >
 457+ 3AF6             >LOAD_NEXT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 457+ 3AF6 CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 457+ 3AF9             >
 457+ 3AF9             >
 457+ 3AF9             >                endif           ; ok        // for other definitions it "points" the correct handler
 457+ 3AF9             >                // Use of "; ok" to suppress "warning[fwdref]"
 457+ 3AF9             >
 457+ 3AF9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 458+ 3AF9 02 2B                        dw      QLOADING                // ?loading
 459+ 3AFB 44 27 EB 27                  dw      ZERO, TO_IN, STORE      // 0 >in !
 459+ 3AFF 56 26
 460+ 3B01 7C 27                        dw      BSCR                    // b/scr
 461+ 3B03 E5 27 4C 26                  dw      BLK, FETCH              // blk @
 462+ 3B07 B7 25                        dw      OVER                    // over
 463+ 3B09 4C 35                        dw      MOD                     // mod
 464+ 3B0B A8 28                        dw      SUBTRACT                // -
 465+ 3B0D E5 27 34 26                  dw      BLK, PLUSSTORE          // +!
 466+ 3B11 02 25                        dw      EXIT                    // ;
 467+ 3B13
 468+ 3B13              //  ______________________________________________________________________
 469+ 3B13              //
 470+ 3B13              // '            -- xt
 471+ 3B13                              Colon_Def TICK, "'", is_normal
 471+ 3B13             >                New_Def  TICK, "'", Enter_Ptr, is_normal ; ok
 471+ 3B13             >
 471+ 3B13             >Dict_Ptr        defl    $
 471+ 3B13             >
 471+ 3B13             >//              ______________________________________________________________________
 471+ 3B13             >//              Heap part
 471+ 3B13             >
 471+ 3B13             >
 471+ 3B13             >                org     (Heap_Ptr & $1FFF) + $E000
 471+ EBAA             >
 471+ EBAA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 471+ EBAA             >Latest_Definition defl  Heap_Ptr
 471+ EBAA             >
 471+ EBAA             >                // dummy db directives used to calculate length of namec
 471+ EBAA 27          >                db      "'"
 471+ EBAB             >len_NFA         defl    $ - temp_NFA
 471+ EBAB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 471+ EBAA             >
 471+ EBAA 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 471+ EBAB 27          >                db      "'"               // name string in 7-bit ascii, but
 471+ EBAC             >                org     $-1                 // alter last byte of Name just above to set
 471+ EBAB A7          >                db      {b $} | END_BIT     // msb as name end
 471+ EBAC             >
 471+ EBAC A2 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 471+ EBAE             >Prev_Ptr        defl    Heap_Ptr
 471+ EBAE             >
 471+ EBAE             >mirror_Ptr      defl    $
 471+ EBAE             >
 471+ EBAE 15 3B       >                dw      Dict_Ptr + 2        // xt
 471+ EBB0             >Heap_Ptr        defl    $ - $E000           // save current HP
 471+ EBB0             >
 471+ EBB0             >Current_HP      defl  $ - $E000             // used to set HP once!
 471+ EBB0             >
 471+ EBB0             >//              ______________________________________________________________________
 471+ EBB0             >//              Dictionary part
 471+ EBB0             >
 471+ EBB0             >                org     Dict_Ptr
 471+ 3B13             >
 471+ 3B13 AE 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 471+ 3B15             >
 471+ 3B15             >TICK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 471+ 3B15 CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 471+ 3B18             >
 471+ 3B18             >
 471+ 3B18             >                endif           ; ok        // for other definitions it "points" the correct handler
 471+ 3B18             >                // Use of "; ok" to suppress "warning[fwdref]"
 471+ 3B18             >
 471+ 3B18             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 472+ 3B18 C7 2F                        dw      LFIND                   // -find
 473+ 3B1A 27 25                        dw      ZEQUAL                  // 0=
 474+ 3B1C 44 27 A5 2A                  dw      ZERO, QERROR            // 0 ?error
 475+ 3B20 C0 25                        dw      DROP                    // drop
 476+ 3B22 02 25                        dw      EXIT                    // ;
 477+ 3B24
 478+ 3B24              //  ______________________________________________________________________
 479+ 3B24              //
 480+ 3B24              // forget       -- cccc
 481+ 3B24                              Colon_Def FORGET, "FORGET", is_normal
 481+ 3B24             >                New_Def  FORGET, "FORGET", Enter_Ptr, is_normal ; ok
 481+ 3B24             >
 481+ 3B24             >Dict_Ptr        defl    $
 481+ 3B24             >
 481+ 3B24             >//              ______________________________________________________________________
 481+ 3B24             >//              Heap part
 481+ 3B24             >
 481+ 3B24             >
 481+ 3B24             >                org     (Heap_Ptr & $1FFF) + $E000
 481+ EBB0             >
 481+ EBB0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 481+ EBB0             >Latest_Definition defl  Heap_Ptr
 481+ EBB0             >
 481+ EBB0             >                // dummy db directives used to calculate length of namec
 481+ EBB0 46 4F 52 47 >                db      "FORGET"
 481+ EBB4 45 54       >
 481+ EBB6             >len_NFA         defl    $ - temp_NFA
 481+ EBB6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 481+ EBB0             >
 481+ EBB0 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 481+ EBB1 46 4F 52 47 >                db      "FORGET"               // name string in 7-bit ascii, but
 481+ EBB5 45 54       >
 481+ EBB7             >                org     $-1                 // alter last byte of Name just above to set
 481+ EBB6 D4          >                db      {b $} | END_BIT     // msb as name end
 481+ EBB7             >
 481+ EBB7 AA 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 481+ EBB9             >Prev_Ptr        defl    Heap_Ptr
 481+ EBB9             >
 481+ EBB9             >mirror_Ptr      defl    $
 481+ EBB9             >
 481+ EBB9 26 3B       >                dw      Dict_Ptr + 2        // xt
 481+ EBBB             >Heap_Ptr        defl    $ - $E000           // save current HP
 481+ EBBB             >
 481+ EBBB             >Current_HP      defl  $ - $E000             // used to set HP once!
 481+ EBBB             >
 481+ EBBB             >//              ______________________________________________________________________
 481+ EBBB             >//              Dictionary part
 481+ EBBB             >
 481+ EBBB             >                org     Dict_Ptr
 481+ 3B24             >
 481+ 3B24 B9 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 481+ 3B26             >
 481+ 3B26             >FORGET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 481+ 3B26 CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 481+ 3B29             >
 481+ 3B29             >
 481+ 3B29             >                endif           ; ok        // for other definitions it "points" the correct handler
 481+ 3B29             >                // Use of "; ok" to suppress "warning[fwdref]"
 481+ 3B29             >
 481+ 3B29             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 482+ 3B29 09 28 4C 26                  dw      CURRENT, FETCH          // current @
 483+ 3B2D 03 28 4C 26                  dw      CONTEXT, FETCH          // context @
 484+ 3B31 A8 28 3D 20                  dw      SUBTRACT, LIT, 23, QERROR // - 23 ?error
 484+ 3B35 17 00 A5 2A
 485+ 3B39 15 3B 24 2A                  dw      TICK, TO_BODY           // ' >body
 486+ 3B3D DB 25 BB 27                  dw      DUP, FENCE, FETCH       // dup fence @
 486+ 3B41 4C 26
 487+ 3B43 BF 28 3D 20                  dw      ULESS, LIT, 21, QERROR  // u< 21 ?error
 487+ 3B47 15 00 A5 2A
 488+ 3B4B DB 25 59 2A                  dw      DUP, NFA                // dup nfa
 489+ 3B4F
 490+ 3B4F                          //  dw      DUP
 491+ 3B4F                          //  dw      LIT, $E000, LESS
 492+ 3B4F                          //  dw      MMU7_FETCH, ONE, EQUALS
 493+ 3B4F                          //  dw      OR_OP, NOT_OP
 494+ 3B4F                          //  dw      ZBRANCH
 495+ 3B4F                          //  dw      Forget_then - $
 496+ 3B4F
 497+ 3B4F 62 29 85 29                  dw      MMU7_FETCH, FROM_FAR
 498+ 3B53 D9 27 56 26                  dw      HP, STORE
 499+ 3B57 DB 25 4E 2A                  dw      DUP, CFA, CELL_MINUS
 499+ 3B5B 89 25
 500+ 3B5D              // Forget_then:
 501+ 3B5D C1 27 56 26                  dw      DP, STORE               // dp !
 502+ 3B61 64 2A 4C 26                  dw      LFA, FETCH              // lfa @
 503+ 3B65 03 28 4C 26                  dw      CONTEXT, FETCH, STORE   // context @ !
 503+ 3B69 56 26
 504+ 3B6B 02 25                        dw      EXIT                    // ;
 505+ 3B6D
 506+ 3B6D              //  ______________________________________________________________________
 507+ 3B6D              //
 508+ 3B6D              // marker       -- cccc
 509+ 3B6D                              Colon_Def MARKER, "MARKER", is_immediate
 509+ 3B6D             >                New_Def  MARKER, "MARKER", Enter_Ptr, is_immediate ; ok
 509+ 3B6D             >
 509+ 3B6D             >Dict_Ptr        defl    $
 509+ 3B6D             >
 509+ 3B6D             >//              ______________________________________________________________________
 509+ 3B6D             >//              Heap part
 509+ 3B6D             >
 509+ 3B6D             >
 509+ 3B6D             >                org     (Heap_Ptr & $1FFF) + $E000
 509+ EBBB             >
 509+ EBBB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 509+ EBBB             >Latest_Definition defl  Heap_Ptr
 509+ EBBB             >
 509+ EBBB             >                // dummy db directives used to calculate length of namec
 509+ EBBB 4D 41 52 4B >                db      "MARKER"
 509+ EBBF 45 52       >
 509+ EBC1             >len_NFA         defl    $ - temp_NFA
 509+ EBC1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 509+ EBBB             >
 509+ EBBB C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 509+ EBBC 4D 41 52 4B >                db      "MARKER"               // name string in 7-bit ascii, but
 509+ EBC0 45 52       >
 509+ EBC2             >                org     $-1                 // alter last byte of Name just above to set
 509+ EBC1 D2          >                db      {b $} | END_BIT     // msb as name end
 509+ EBC2             >
 509+ EBC2 B0 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 509+ EBC4             >Prev_Ptr        defl    Heap_Ptr
 509+ EBC4             >
 509+ EBC4             >mirror_Ptr      defl    $
 509+ EBC4             >
 509+ EBC4 6F 3B       >                dw      Dict_Ptr + 2        // xt
 509+ EBC6             >Heap_Ptr        defl    $ - $E000           // save current HP
 509+ EBC6             >
 509+ EBC6             >Current_HP      defl  $ - $E000             // used to set HP once!
 509+ EBC6             >
 509+ EBC6             >//              ______________________________________________________________________
 509+ EBC6             >//              Dictionary part
 509+ EBC6             >
 509+ EBC6             >                org     Dict_Ptr
 509+ 3B6D             >
 509+ 3B6D C4 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 509+ 3B6F             >
 509+ 3B6F             >MARKER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 509+ 3B6F CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 509+ 3B72             >
 509+ 3B72             >
 509+ 3B72             >                endif           ; ok        // for other definitions it "points" the correct handler
 509+ 3B72             >                // Use of "; ok" to suppress "warning[fwdref]"
 509+ 3B72             >
 509+ 3B72             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 510+ 3B72 B9 2B                        dw      CBUILDS
 511+ 3B74 C7 27 4C 26                  dw      VOC_LINK, FETCH, COMMA
 511+ 3B78 7F 28
 512+ 3B7A 09 28 4C 26                  dw      CURRENT, FETCH, COMMA
 512+ 3B7E 7F 28
 513+ 3B80 03 28 4C 26                  dw      CONTEXT, FETCH, COMMA
 513+ 3B84 7F 28
 514+ 3B86 09 28 4C 26                  dw      CURRENT, FETCH, FETCH,  COMMA
 514+ 3B8A 4C 26 7F 28
 515+ 3B8E 15 2A 73 2A                  dw      LATEST, PFA, LFA, FETCH, COMMA
 515+ 3B92 64 2A 4C 26
 515+ 3B96 7F 28
 516+ 3B98 C4 2B                        dw      DOES_TO
 517+ 3B9A DB 25 4C 26                  dw      DUP, FETCH, VOC_LINK, STORE, CELL_PLUS
 517+ 3B9E C7 27 56 26
 517+ 3BA2 84 25
 518+ 3BA4 DB 25 4C 26                  dw      DUP, FETCH, CURRENT, STORE, CELL_PLUS
 518+ 3BA8 09 28 56 26
 518+ 3BAC 84 25
 519+ 3BAE DB 25 4C 26                  dw      DUP, FETCH, CONTEXT, STORE, CELL_PLUS
 519+ 3BB2 03 28 56 26
 519+ 3BB6 84 25
 520+ 3BB8 DB 25 4C 26                  dw      DUP, FETCH
 521+ 3BBC                          //  dw      DUP, QHEAPP
 522+ 3BBC                          //  dw      ZBRANCH
 523+ 3BBC                          //  dw      Marker_then - $
 524+ 3BBC DB 25 D9 27                  dw          DUP, HP, STORE
 524+ 3BC0 56 26
 525+ 3BC2 73 2A 4E 2A                  dw          PFA, CFA, CELL_MINUS
 525+ 3BC6 89 25
 526+ 3BC8              // Marker_then:
 527+ 3BC8 C1 27 56 26                  dw      DP, STORE, CELL_PLUS
 527+ 3BCC 84 25
 528+ 3BCE 4C 26 09 28                  dw      FETCH, CURRENT, FETCH, STORE
 528+ 3BD2 4C 26 56 26
 529+ 3BD6 02 25                        dw      EXIT
 530+ 3BD8
 531+ 3BD8              //  ______________________________________________________________________
 532+ 3BD8              //
 533+ 3BD8              // spaces       n --
 534+ 3BD8                              Colon_Def SPACES, "SPACES", is_normal
 534+ 3BD8             >                New_Def  SPACES, "SPACES", Enter_Ptr, is_normal ; ok
 534+ 3BD8             >
 534+ 3BD8             >Dict_Ptr        defl    $
 534+ 3BD8             >
 534+ 3BD8             >//              ______________________________________________________________________
 534+ 3BD8             >//              Heap part
 534+ 3BD8             >
 534+ 3BD8             >
 534+ 3BD8             >                org     (Heap_Ptr & $1FFF) + $E000
 534+ EBC6             >
 534+ EBC6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 534+ EBC6             >Latest_Definition defl  Heap_Ptr
 534+ EBC6             >
 534+ EBC6             >                // dummy db directives used to calculate length of namec
 534+ EBC6 53 50 41 43 >                db      "SPACES"
 534+ EBCA 45 53       >
 534+ EBCC             >len_NFA         defl    $ - temp_NFA
 534+ EBCC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 534+ EBC6             >
 534+ EBC6 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 534+ EBC7 53 50 41 43 >                db      "SPACES"               // name string in 7-bit ascii, but
 534+ EBCB 45 53       >
 534+ EBCD             >                org     $-1                 // alter last byte of Name just above to set
 534+ EBCC D3          >                db      {b $} | END_BIT     // msb as name end
 534+ EBCD             >
 534+ EBCD BB 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 534+ EBCF             >Prev_Ptr        defl    Heap_Ptr
 534+ EBCF             >
 534+ EBCF             >mirror_Ptr      defl    $
 534+ EBCF             >
 534+ EBCF DA 3B       >                dw      Dict_Ptr + 2        // xt
 534+ EBD1             >Heap_Ptr        defl    $ - $E000           // save current HP
 534+ EBD1             >
 534+ EBD1             >Current_HP      defl  $ - $E000             // used to set HP once!
 534+ EBD1             >
 534+ EBD1             >//              ______________________________________________________________________
 534+ EBD1             >//              Dictionary part
 534+ EBD1             >
 534+ EBD1             >                org     Dict_Ptr
 534+ 3BD8             >
 534+ 3BD8 CF 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 534+ 3BDA             >
 534+ 3BDA             >SPACES:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 534+ 3BDA CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 534+ 3BDD             >
 534+ 3BDD             >
 534+ 3BDD             >                endif           ; ok        // for other definitions it "points" the correct handler
 534+ 3BDD             >                // Use of "; ok" to suppress "warning[fwdref]"
 534+ 3BDD             >
 534+ 3BDD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 535+ 3BDD 44 27 00 29                  dw      ZERO, MAX
 536+ 3BE1 44 27 A6 20                  dw      ZERO, C_Q_DO
 537+ 3BE5 08 00                        dw      Spaces_Leave - $
 538+ 3BE7              Spaces_Loop:
 539+ 3BE7 3A 29                        dw          SPACE
 540+ 3BE9 7A 20                        dw      C_LOOP
 541+ 3BEB FC FF                        dw      Spaces_Loop - $
 542+ 3BED              Spaces_Leave:
 543+ 3BED 02 25                        dw      EXIT                    // ;
 544+ 3BEF
 545+ 3BEF              //  ______________________________________________________________________
 546+ 3BEF              //
 547+ 3BEF              // <#           --
 548+ 3BEF                              Colon_Def BEGIN_DASH, "<#", is_normal
 548+ 3BEF             >                New_Def  BEGIN_DASH, "<#", Enter_Ptr, is_normal ; ok
 548+ 3BEF             >
 548+ 3BEF             >Dict_Ptr        defl    $
 548+ 3BEF             >
 548+ 3BEF             >//              ______________________________________________________________________
 548+ 3BEF             >//              Heap part
 548+ 3BEF             >
 548+ 3BEF             >
 548+ 3BEF             >                org     (Heap_Ptr & $1FFF) + $E000
 548+ EBD1             >
 548+ EBD1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 548+ EBD1             >Latest_Definition defl  Heap_Ptr
 548+ EBD1             >
 548+ EBD1             >                // dummy db directives used to calculate length of namec
 548+ EBD1 3C 23       >                db      "<#"
 548+ EBD3             >len_NFA         defl    $ - temp_NFA
 548+ EBD3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 548+ EBD1             >
 548+ EBD1 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 548+ EBD2 3C 23       >                db      "<#"               // name string in 7-bit ascii, but
 548+ EBD4             >                org     $-1                 // alter last byte of Name just above to set
 548+ EBD3 A3          >                db      {b $} | END_BIT     // msb as name end
 548+ EBD4             >
 548+ EBD4 C6 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 548+ EBD6             >Prev_Ptr        defl    Heap_Ptr
 548+ EBD6             >
 548+ EBD6             >mirror_Ptr      defl    $
 548+ EBD6             >
 548+ EBD6 F1 3B       >                dw      Dict_Ptr + 2        // xt
 548+ EBD8             >Heap_Ptr        defl    $ - $E000           // save current HP
 548+ EBD8             >
 548+ EBD8             >Current_HP      defl  $ - $E000             // used to set HP once!
 548+ EBD8             >
 548+ EBD8             >//              ______________________________________________________________________
 548+ EBD8             >//              Dictionary part
 548+ EBD8             >
 548+ EBD8             >                org     Dict_Ptr
 548+ 3BEF             >
 548+ 3BEF D6 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 548+ 3BF1             >
 548+ 3BF1             >BEGIN_DASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 548+ 3BF1 CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 548+ 3BF4             >
 548+ 3BF4             >
 548+ 3BF4             >                endif           ; ok        // for other definitions it "points" the correct handler
 548+ 3BF4             >                // Use of "; ok" to suppress "warning[fwdref]"
 548+ 3BF4             >
 548+ 3BF4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 549+ 3BF4 78 2D 33 28                  dw      PAD, HLD, STORE
 549+ 3BF8 56 26
 550+ 3BFA 02 25                        dw      EXIT
 551+ 3BFC
 552+ 3BFC              //  ______________________________________________________________________
 553+ 3BFC              //
 554+ 3BFC              // #>           --
 555+ 3BFC                              Colon_Def DASH_END, "#>", is_normal
 555+ 3BFC             >                New_Def  DASH_END, "#>", Enter_Ptr, is_normal ; ok
 555+ 3BFC             >
 555+ 3BFC             >Dict_Ptr        defl    $
 555+ 3BFC             >
 555+ 3BFC             >//              ______________________________________________________________________
 555+ 3BFC             >//              Heap part
 555+ 3BFC             >
 555+ 3BFC             >
 555+ 3BFC             >                org     (Heap_Ptr & $1FFF) + $E000
 555+ EBD8             >
 555+ EBD8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 555+ EBD8             >Latest_Definition defl  Heap_Ptr
 555+ EBD8             >
 555+ EBD8             >                // dummy db directives used to calculate length of namec
 555+ EBD8 23 3E       >                db      "#>"
 555+ EBDA             >len_NFA         defl    $ - temp_NFA
 555+ EBDA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 555+ EBD8             >
 555+ EBD8 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 555+ EBD9 23 3E       >                db      "#>"               // name string in 7-bit ascii, but
 555+ EBDB             >                org     $-1                 // alter last byte of Name just above to set
 555+ EBDA BE          >                db      {b $} | END_BIT     // msb as name end
 555+ EBDB             >
 555+ EBDB D1 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 555+ EBDD             >Prev_Ptr        defl    Heap_Ptr
 555+ EBDD             >
 555+ EBDD             >mirror_Ptr      defl    $
 555+ EBDD             >
 555+ EBDD FE 3B       >                dw      Dict_Ptr + 2        // xt
 555+ EBDF             >Heap_Ptr        defl    $ - $E000           // save current HP
 555+ EBDF             >
 555+ EBDF             >Current_HP      defl  $ - $E000             // used to set HP once!
 555+ EBDF             >
 555+ EBDF             >//              ______________________________________________________________________
 555+ EBDF             >//              Dictionary part
 555+ EBDF             >
 555+ EBDF             >                org     Dict_Ptr
 555+ 3BFC             >
 555+ 3BFC DD 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 555+ 3BFE             >
 555+ 3BFE             >DASH_END:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 555+ 3BFE CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 555+ 3C01             >
 555+ 3C01             >
 555+ 3C01             >                endif           ; ok        // for other definitions it "points" the correct handler
 555+ 3C01             >                // Use of "; ok" to suppress "warning[fwdref]"
 555+ 3C01             >
 555+ 3C01             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 556+ 3C01 17 26                        dw      TWO_DROP
 557+ 3C03 33 28 4C 26                  dw      HLD, FETCH, PAD, OVER, SUBTRACT
 557+ 3C07 78 2D B7 25
 557+ 3C0B A8 28
 558+ 3C0D 02 25                        dw      EXIT
 559+ 3C0F
 560+ 3C0F              //  ______________________________________________________________________
 561+ 3C0F              //
 562+ 3C0F              // sign         n d -- d
 563+ 3C0F                              Colon_Def SIGN, "SIGN", is_normal
 563+ 3C0F             >                New_Def  SIGN, "SIGN", Enter_Ptr, is_normal ; ok
 563+ 3C0F             >
 563+ 3C0F             >Dict_Ptr        defl    $
 563+ 3C0F             >
 563+ 3C0F             >//              ______________________________________________________________________
 563+ 3C0F             >//              Heap part
 563+ 3C0F             >
 563+ 3C0F             >
 563+ 3C0F             >                org     (Heap_Ptr & $1FFF) + $E000
 563+ EBDF             >
 563+ EBDF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 563+ EBDF             >Latest_Definition defl  Heap_Ptr
 563+ EBDF             >
 563+ EBDF             >                // dummy db directives used to calculate length of namec
 563+ EBDF 53 49 47 4E >                db      "SIGN"
 563+ EBE3             >len_NFA         defl    $ - temp_NFA
 563+ EBE3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 563+ EBDF             >
 563+ EBDF 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 563+ EBE0 53 49 47 4E >                db      "SIGN"               // name string in 7-bit ascii, but
 563+ EBE4             >                org     $-1                 // alter last byte of Name just above to set
 563+ EBE3 CE          >                db      {b $} | END_BIT     // msb as name end
 563+ EBE4             >
 563+ EBE4 D8 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 563+ EBE6             >Prev_Ptr        defl    Heap_Ptr
 563+ EBE6             >
 563+ EBE6             >mirror_Ptr      defl    $
 563+ EBE6             >
 563+ EBE6 11 3C       >                dw      Dict_Ptr + 2        // xt
 563+ EBE8             >Heap_Ptr        defl    $ - $E000           // save current HP
 563+ EBE8             >
 563+ EBE8             >Current_HP      defl  $ - $E000             // used to set HP once!
 563+ EBE8             >
 563+ EBE8             >//              ______________________________________________________________________
 563+ EBE8             >//              Dictionary part
 563+ EBE8             >
 563+ EBE8             >                org     Dict_Ptr
 563+ 3C0F             >
 563+ 3C0F E6 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 563+ 3C11             >
 563+ 3C11             >SIGN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 563+ 3C11 CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 563+ 3C14             >
 563+ 3C14             >
 563+ 3C14             >                endif           ; ok        // for other definitions it "points" the correct handler
 563+ 3C14             >                // Use of "; ok" to suppress "warning[fwdref]"
 563+ 3C14             >
 563+ 3C14             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 564+ 3C14 3A 25                        dw      ZLESS
 565+ 3C16 8F 20                        dw      ZBRANCH
 566+ 3C18 08 00                        dw      Sign_Endif - $
 567+ 3C1A 3D 20 2D 00                  dw          LIT, 45, HOLD
 567+ 3C1E 65 2D
 568+ 3C20              Sign_Endif:
 569+ 3C20 02 25                        dw      EXIT
 570+ 3C22
 571+ 3C22              //  ______________________________________________________________________
 572+ 3C22              //
 573+ 3C22              // #           d1 -- d2
 574+ 3C22                              Colon_Def DASH, "#", is_normal
 574+ 3C22             >                New_Def  DASH, "#", Enter_Ptr, is_normal ; ok
 574+ 3C22             >
 574+ 3C22             >Dict_Ptr        defl    $
 574+ 3C22             >
 574+ 3C22             >//              ______________________________________________________________________
 574+ 3C22             >//              Heap part
 574+ 3C22             >
 574+ 3C22             >
 574+ 3C22             >                org     (Heap_Ptr & $1FFF) + $E000
 574+ EBE8             >
 574+ EBE8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 574+ EBE8             >Latest_Definition defl  Heap_Ptr
 574+ EBE8             >
 574+ EBE8             >                // dummy db directives used to calculate length of namec
 574+ EBE8 23          >                db      "#"
 574+ EBE9             >len_NFA         defl    $ - temp_NFA
 574+ EBE9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 574+ EBE8             >
 574+ EBE8 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 574+ EBE9 23          >                db      "#"               // name string in 7-bit ascii, but
 574+ EBEA             >                org     $-1                 // alter last byte of Name just above to set
 574+ EBE9 A3          >                db      {b $} | END_BIT     // msb as name end
 574+ EBEA             >
 574+ EBEA DF 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 574+ EBEC             >Prev_Ptr        defl    Heap_Ptr
 574+ EBEC             >
 574+ EBEC             >mirror_Ptr      defl    $
 574+ EBEC             >
 574+ EBEC 24 3C       >                dw      Dict_Ptr + 2        // xt
 574+ EBEE             >Heap_Ptr        defl    $ - $E000           // save current HP
 574+ EBEE             >
 574+ EBEE             >Current_HP      defl  $ - $E000             // used to set HP once!
 574+ EBEE             >
 574+ EBEE             >//              ______________________________________________________________________
 574+ EBEE             >//              Dictionary part
 574+ EBEE             >
 574+ EBEE             >                org     Dict_Ptr
 574+ 3C22             >
 574+ 3C22 EC 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 574+ 3C24             >
 574+ 3C24             >DASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 574+ 3C24 CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 574+ 3C27             >
 574+ 3C27             >
 574+ 3C27             >                endif           ; ok        // for other definitions it "points" the correct handler
 574+ 3C27             >                // Use of "; ok" to suppress "warning[fwdref]"
 574+ 3C27             >
 574+ 3C27             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 575+ 3C27 15 28 4C 26                  dw      BASE, FETCH
 576+ 3C2B
 577+ 3C2B 0C 25                        dw      TO_R                    // >r           ( ud1 )
 578+ 3C2D 44 27 22 25                  dw      ZERO, R_OP, UMDIVMOD    // 0 r um/mod   ( l rem1 h/r )
 578+ 3C31 8F 24
 579+ 3C33 17 25 D4 25                  dw      R_TO, SWAP, TO_R        // r> swap >r   ( l rem )
 579+ 3C37 0C 25
 580+ 3C39 8F 24                        dw      UMDIVMOD                // um/mod       ( rem2 l/r )
 581+ 3C3B 17 25                        dw      R_TO                    // r>           ( rem2 l/r h/r )
 582+ 3C3D
 583+ 3C3D E2 25                        dw      ROT
 584+ 3C3F 3D 20 09 00                  dw      LIT, 9, OVER, LESS
 584+ 3C43 B7 25 CD 28
 585+ 3C47 8F 20                        dw      ZBRANCH
 586+ 3C49 08 00                        dw      Dash_Endif - $
 587+ 3C4B 3D 20 07 00                  dw          LIT, 7, PLUS
 587+ 3C4F 55 25
 588+ 3C51              Dash_Endif:
 589+ 3C51
 590+ 3C51 3D 20 30 00                  dw      LIT, 48, PLUS, HOLD
 590+ 3C55 55 25 65 2D
 591+ 3C59 02 25                        dw      EXIT
 592+ 3C5B
 593+ 3C5B              //  ______________________________________________________________________
 594+ 3C5B              //
 595+ 3C5B              // #s           d1 -- d2
 596+ 3C5B                              Colon_Def DASHES, "#S", is_normal
 596+ 3C5B             >                New_Def  DASHES, "#S", Enter_Ptr, is_normal ; ok
 596+ 3C5B             >
 596+ 3C5B             >Dict_Ptr        defl    $
 596+ 3C5B             >
 596+ 3C5B             >//              ______________________________________________________________________
 596+ 3C5B             >//              Heap part
 596+ 3C5B             >
 596+ 3C5B             >
 596+ 3C5B             >                org     (Heap_Ptr & $1FFF) + $E000
 596+ EBEE             >
 596+ EBEE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 596+ EBEE             >Latest_Definition defl  Heap_Ptr
 596+ EBEE             >
 596+ EBEE             >                // dummy db directives used to calculate length of namec
 596+ EBEE 23 53       >                db      "#S"
 596+ EBF0             >len_NFA         defl    $ - temp_NFA
 596+ EBF0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 596+ EBEE             >
 596+ EBEE 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 596+ EBEF 23 53       >                db      "#S"               // name string in 7-bit ascii, but
 596+ EBF1             >                org     $-1                 // alter last byte of Name just above to set
 596+ EBF0 D3          >                db      {b $} | END_BIT     // msb as name end
 596+ EBF1             >
 596+ EBF1 E8 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 596+ EBF3             >Prev_Ptr        defl    Heap_Ptr
 596+ EBF3             >
 596+ EBF3             >mirror_Ptr      defl    $
 596+ EBF3             >
 596+ EBF3 5D 3C       >                dw      Dict_Ptr + 2        // xt
 596+ EBF5             >Heap_Ptr        defl    $ - $E000           // save current HP
 596+ EBF5             >
 596+ EBF5             >Current_HP      defl  $ - $E000             // used to set HP once!
 596+ EBF5             >
 596+ EBF5             >//              ______________________________________________________________________
 596+ EBF5             >//              Dictionary part
 596+ EBF5             >
 596+ EBF5             >                org     Dict_Ptr
 596+ 3C5B             >
 596+ 3C5B F3 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 596+ 3C5D             >
 596+ 3C5D             >DASHES:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 596+ 3C5D CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 596+ 3C60             >
 596+ 3C60             >
 596+ 3C60             >                endif           ; ok        // for other definitions it "points" the correct handler
 596+ 3C60             >                // Use of "; ok" to suppress "warning[fwdref]"
 596+ 3C60             >
 596+ 3C60             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 597+ 3C60              Dashes_Begin:
 598+ 3C60 24 3C 2A 26                  dw      DASH, TWO_DUP
 599+ 3C64 D1 24 27 25                  dw          OR_OP, ZEQUAL
 600+ 3C68 8F 20                        dw      ZBRANCH
 601+ 3C6A F6 FF                        dw      Dashes_Begin - $
 602+ 3C6C 02 25                        dw      EXIT
 603+ 3C6E
 604+ 3C6E              //  ______________________________________________________________________
 605+ 3C6E              //
 606+ 3C6E              // d.r          d n --
 607+ 3C6E                              Colon_Def D_DOT_R, "D.R", is_normal
 607+ 3C6E             >                New_Def  D_DOT_R, "D.R", Enter_Ptr, is_normal ; ok
 607+ 3C6E             >
 607+ 3C6E             >Dict_Ptr        defl    $
 607+ 3C6E             >
 607+ 3C6E             >//              ______________________________________________________________________
 607+ 3C6E             >//              Heap part
 607+ 3C6E             >
 607+ 3C6E             >
 607+ 3C6E             >                org     (Heap_Ptr & $1FFF) + $E000
 607+ EBF5             >
 607+ EBF5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 607+ EBF5             >Latest_Definition defl  Heap_Ptr
 607+ EBF5             >
 607+ EBF5             >                // dummy db directives used to calculate length of namec
 607+ EBF5 44 2E 52    >                db      "D.R"
 607+ EBF8             >len_NFA         defl    $ - temp_NFA
 607+ EBF8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 607+ EBF5             >
 607+ EBF5 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 607+ EBF6 44 2E 52    >                db      "D.R"               // name string in 7-bit ascii, but
 607+ EBF9             >                org     $-1                 // alter last byte of Name just above to set
 607+ EBF8 D2          >                db      {b $} | END_BIT     // msb as name end
 607+ EBF9             >
 607+ EBF9 EE 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 607+ EBFB             >Prev_Ptr        defl    Heap_Ptr
 607+ EBFB             >
 607+ EBFB             >mirror_Ptr      defl    $
 607+ EBFB             >
 607+ EBFB 70 3C       >                dw      Dict_Ptr + 2        // xt
 607+ EBFD             >Heap_Ptr        defl    $ - $E000           // save current HP
 607+ EBFD             >
 607+ EBFD             >Current_HP      defl  $ - $E000             // used to set HP once!
 607+ EBFD             >
 607+ EBFD             >//              ______________________________________________________________________
 607+ EBFD             >//              Dictionary part
 607+ EBFD             >
 607+ EBFD             >                org     Dict_Ptr
 607+ 3C6E             >
 607+ 3C6E FB 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 607+ 3C70             >
 607+ 3C70             >D_DOT_R:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 607+ 3C70 CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 607+ 3C73             >
 607+ 3C73             >
 607+ 3C73             >                endif           ; ok        // for other definitions it "points" the correct handler
 607+ 3C73             >                // Use of "; ok" to suppress "warning[fwdref]"
 607+ 3C73             >
 607+ 3C73             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 608+ 3C73 0C 25                        dw      TO_R
 609+ 3C75 CB 25 93 34                  dw      TUCK, DABS
 610+ 3C79 F1 3B 5D 3C                  dw      BEGIN_DASH, DASHES, ROT, SIGN, DASH_END
 610+ 3C7D E2 25 11 3C
 610+ 3C81 FE 3B
 611+ 3C83 17 25                        dw      R_TO
 612+ 3C85 B7 25 A8 28                  dw      OVER, SUBTRACT, SPACES, TYPE
 612+ 3C89 DA 3B 35 2C
 613+ 3C8D 02 25                        dw      EXIT
 614+ 3C8F
 615+ 3C8F              //  ______________________________________________________________________
 616+ 3C8F              //
 617+ 3C8F              // .r           n1 n2 --
 618+ 3C8F                              Colon_Def DOT_R, ".R", is_normal
 618+ 3C8F             >                New_Def  DOT_R, ".R", Enter_Ptr, is_normal ; ok
 618+ 3C8F             >
 618+ 3C8F             >Dict_Ptr        defl    $
 618+ 3C8F             >
 618+ 3C8F             >//              ______________________________________________________________________
 618+ 3C8F             >//              Heap part
 618+ 3C8F             >
 618+ 3C8F             >
 618+ 3C8F             >                org     (Heap_Ptr & $1FFF) + $E000
 618+ EBFD             >
 618+ EBFD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 618+ EBFD             >Latest_Definition defl  Heap_Ptr
 618+ EBFD             >
 618+ EBFD             >                // dummy db directives used to calculate length of namec
 618+ EBFD 2E 52       >                db      ".R"
 618+ EBFF             >len_NFA         defl    $ - temp_NFA
 618+ EBFF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 618+ EBFD             >
 618+ EBFD 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 618+ EBFE 2E 52       >                db      ".R"               // name string in 7-bit ascii, but
 618+ EC00             >                org     $-1                 // alter last byte of Name just above to set
 618+ EBFF D2          >                db      {b $} | END_BIT     // msb as name end
 618+ EC00             >
 618+ EC00 F5 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 618+ EC02             >Prev_Ptr        defl    Heap_Ptr
 618+ EC02             >
 618+ EC02             >mirror_Ptr      defl    $
 618+ EC02             >
 618+ EC02 91 3C       >                dw      Dict_Ptr + 2        // xt
 618+ EC04             >Heap_Ptr        defl    $ - $E000           // save current HP
 618+ EC04             >
 618+ EC04             >Current_HP      defl  $ - $E000             // used to set HP once!
 618+ EC04             >
 618+ EC04             >//              ______________________________________________________________________
 618+ EC04             >//              Dictionary part
 618+ EC04             >
 618+ EC04             >                org     Dict_Ptr
 618+ 3C8F             >
 618+ 3C8F 02 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 618+ 3C91             >
 618+ 3C91             >DOT_R:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 618+ 3C91 CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 618+ 3C94             >
 618+ 3C94             >
 618+ 3C94             >                endif           ; ok        // for other definitions it "points" the correct handler
 618+ 3C94             >                // Use of "; ok" to suppress "warning[fwdref]"
 618+ 3C94             >
 618+ 3C94             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 619+ 3C94 0C 25                        dw      TO_R
 620+ 3C96 9D 28 17 25                  dw      S_TO_D, R_TO
 621+ 3C9A 70 3C                        dw      D_DOT_R
 622+ 3C9C 02 25                        dw      EXIT
 623+ 3C9E
 624+ 3C9E              //  ______________________________________________________________________
 625+ 3C9E              //
 626+ 3C9E              // d.           d --
 627+ 3C9E                              Colon_Def D_DOT, "D.", is_normal
 627+ 3C9E             >                New_Def  D_DOT, "D.", Enter_Ptr, is_normal ; ok
 627+ 3C9E             >
 627+ 3C9E             >Dict_Ptr        defl    $
 627+ 3C9E             >
 627+ 3C9E             >//              ______________________________________________________________________
 627+ 3C9E             >//              Heap part
 627+ 3C9E             >
 627+ 3C9E             >
 627+ 3C9E             >                org     (Heap_Ptr & $1FFF) + $E000
 627+ EC04             >
 627+ EC04             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 627+ EC04             >Latest_Definition defl  Heap_Ptr
 627+ EC04             >
 627+ EC04             >                // dummy db directives used to calculate length of namec
 627+ EC04 44 2E       >                db      "D."
 627+ EC06             >len_NFA         defl    $ - temp_NFA
 627+ EC06             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 627+ EC04             >
 627+ EC04 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 627+ EC05 44 2E       >                db      "D."               // name string in 7-bit ascii, but
 627+ EC07             >                org     $-1                 // alter last byte of Name just above to set
 627+ EC06 AE          >                db      {b $} | END_BIT     // msb as name end
 627+ EC07             >
 627+ EC07 FD 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 627+ EC09             >Prev_Ptr        defl    Heap_Ptr
 627+ EC09             >
 627+ EC09             >mirror_Ptr      defl    $
 627+ EC09             >
 627+ EC09 A0 3C       >                dw      Dict_Ptr + 2        // xt
 627+ EC0B             >Heap_Ptr        defl    $ - $E000           // save current HP
 627+ EC0B             >
 627+ EC0B             >Current_HP      defl  $ - $E000             // used to set HP once!
 627+ EC0B             >
 627+ EC0B             >//              ______________________________________________________________________
 627+ EC0B             >//              Dictionary part
 627+ EC0B             >
 627+ EC0B             >                org     Dict_Ptr
 627+ 3C9E             >
 627+ 3C9E 09 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 627+ 3CA0             >
 627+ 3CA0             >D_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 627+ 3CA0 CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 627+ 3CA3             >
 627+ 3CA3             >
 627+ 3CA3             >                endif           ; ok        // for other definitions it "points" the correct handler
 627+ 3CA3             >                // Use of "; ok" to suppress "warning[fwdref]"
 627+ 3CA3             >
 627+ 3CA3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 628+ 3CA3 44 27 70 3C                  dw      ZERO, D_DOT_R, SPACE
 628+ 3CA7 3A 29
 629+ 3CA9 02 25                        dw      EXIT
 630+ 3CAB
 631+ 3CAB              //  ______________________________________________________________________
 632+ 3CAB              //
 633+ 3CAB              // .            n --
 634+ 3CAB                              Colon_Def DOT, ".", is_normal
 634+ 3CAB             >                New_Def  DOT, ".", Enter_Ptr, is_normal ; ok
 634+ 3CAB             >
 634+ 3CAB             >Dict_Ptr        defl    $
 634+ 3CAB             >
 634+ 3CAB             >//              ______________________________________________________________________
 634+ 3CAB             >//              Heap part
 634+ 3CAB             >
 634+ 3CAB             >
 634+ 3CAB             >                org     (Heap_Ptr & $1FFF) + $E000
 634+ EC0B             >
 634+ EC0B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 634+ EC0B             >Latest_Definition defl  Heap_Ptr
 634+ EC0B             >
 634+ EC0B             >                // dummy db directives used to calculate length of namec
 634+ EC0B 2E          >                db      "."
 634+ EC0C             >len_NFA         defl    $ - temp_NFA
 634+ EC0C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 634+ EC0B             >
 634+ EC0B 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 634+ EC0C 2E          >                db      "."               // name string in 7-bit ascii, but
 634+ EC0D             >                org     $-1                 // alter last byte of Name just above to set
 634+ EC0C AE          >                db      {b $} | END_BIT     // msb as name end
 634+ EC0D             >
 634+ EC0D 04 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 634+ EC0F             >Prev_Ptr        defl    Heap_Ptr
 634+ EC0F             >
 634+ EC0F             >mirror_Ptr      defl    $
 634+ EC0F             >
 634+ EC0F AD 3C       >                dw      Dict_Ptr + 2        // xt
 634+ EC11             >Heap_Ptr        defl    $ - $E000           // save current HP
 634+ EC11             >
 634+ EC11             >Current_HP      defl  $ - $E000             // used to set HP once!
 634+ EC11             >
 634+ EC11             >//              ______________________________________________________________________
 634+ EC11             >//              Dictionary part
 634+ EC11             >
 634+ EC11             >                org     Dict_Ptr
 634+ 3CAB             >
 634+ 3CAB 0F 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 634+ 3CAD             >
 634+ 3CAD             >DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 634+ 3CAD CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 634+ 3CB0             >
 634+ 3CB0             >
 634+ 3CB0             >                endif           ; ok        // for other definitions it "points" the correct handler
 634+ 3CB0             >                // Use of "; ok" to suppress "warning[fwdref]"
 634+ 3CB0             >
 634+ 3CB0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 635+ 3CB0 9D 28 A0 3C                  dw      S_TO_D, D_DOT
 636+ 3CB4 02 25                        dw      EXIT
 637+ 3CB6
 638+ 3CB6              //  ______________________________________________________________________
 639+ 3CB6              //
 640+ 3CB6              // ?            n --
 641+ 3CB6                              Colon_Def QUESTION, "?", is_normal
 641+ 3CB6             >                New_Def  QUESTION, "?", Enter_Ptr, is_normal ; ok
 641+ 3CB6             >
 641+ 3CB6             >Dict_Ptr        defl    $
 641+ 3CB6             >
 641+ 3CB6             >//              ______________________________________________________________________
 641+ 3CB6             >//              Heap part
 641+ 3CB6             >
 641+ 3CB6             >
 641+ 3CB6             >                org     (Heap_Ptr & $1FFF) + $E000
 641+ EC11             >
 641+ EC11             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 641+ EC11             >Latest_Definition defl  Heap_Ptr
 641+ EC11             >
 641+ EC11             >                // dummy db directives used to calculate length of namec
 641+ EC11 3F          >                db      "?"
 641+ EC12             >len_NFA         defl    $ - temp_NFA
 641+ EC12             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 641+ EC11             >
 641+ EC11 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 641+ EC12 3F          >                db      "?"               // name string in 7-bit ascii, but
 641+ EC13             >                org     $-1                 // alter last byte of Name just above to set
 641+ EC12 BF          >                db      {b $} | END_BIT     // msb as name end
 641+ EC13             >
 641+ EC13 0B 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 641+ EC15             >Prev_Ptr        defl    Heap_Ptr
 641+ EC15             >
 641+ EC15             >mirror_Ptr      defl    $
 641+ EC15             >
 641+ EC15 B8 3C       >                dw      Dict_Ptr + 2        // xt
 641+ EC17             >Heap_Ptr        defl    $ - $E000           // save current HP
 641+ EC17             >
 641+ EC17             >Current_HP      defl  $ - $E000             // used to set HP once!
 641+ EC17             >
 641+ EC17             >//              ______________________________________________________________________
 641+ EC17             >//              Dictionary part
 641+ EC17             >
 641+ EC17             >                org     Dict_Ptr
 641+ 3CB6             >
 641+ 3CB6 15 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 641+ 3CB8             >
 641+ 3CB8             >QUESTION:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 641+ 3CB8 CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 641+ 3CBB             >
 641+ 3CBB             >
 641+ 3CBB             >                endif           ; ok        // for other definitions it "points" the correct handler
 641+ 3CBB             >                // Use of "; ok" to suppress "warning[fwdref]"
 641+ 3CBB             >
 641+ 3CBB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 642+ 3CBB 4C 26 AD 3C                  dw      FETCH, DOT
 643+ 3CBF 02 25                        dw      EXIT
 644+ 3CC1
 645+ 3CC1              //  ______________________________________________________________________
 646+ 3CC1              //
 647+ 3CC1              // u.           u --
 648+ 3CC1                              Colon_Def U_DOT, "U.", is_normal
 648+ 3CC1             >                New_Def  U_DOT, "U.", Enter_Ptr, is_normal ; ok
 648+ 3CC1             >
 648+ 3CC1             >Dict_Ptr        defl    $
 648+ 3CC1             >
 648+ 3CC1             >//              ______________________________________________________________________
 648+ 3CC1             >//              Heap part
 648+ 3CC1             >
 648+ 3CC1             >
 648+ 3CC1             >                org     (Heap_Ptr & $1FFF) + $E000
 648+ EC17             >
 648+ EC17             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 648+ EC17             >Latest_Definition defl  Heap_Ptr
 648+ EC17             >
 648+ EC17             >                // dummy db directives used to calculate length of namec
 648+ EC17 55 2E       >                db      "U."
 648+ EC19             >len_NFA         defl    $ - temp_NFA
 648+ EC19             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 648+ EC17             >
 648+ EC17 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 648+ EC18 55 2E       >                db      "U."               // name string in 7-bit ascii, but
 648+ EC1A             >                org     $-1                 // alter last byte of Name just above to set
 648+ EC19 AE          >                db      {b $} | END_BIT     // msb as name end
 648+ EC1A             >
 648+ EC1A 11 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 648+ EC1C             >Prev_Ptr        defl    Heap_Ptr
 648+ EC1C             >
 648+ EC1C             >mirror_Ptr      defl    $
 648+ EC1C             >
 648+ EC1C C3 3C       >                dw      Dict_Ptr + 2        // xt
 648+ EC1E             >Heap_Ptr        defl    $ - $E000           // save current HP
 648+ EC1E             >
 648+ EC1E             >Current_HP      defl  $ - $E000             // used to set HP once!
 648+ EC1E             >
 648+ EC1E             >//              ______________________________________________________________________
 648+ EC1E             >//              Dictionary part
 648+ EC1E             >
 648+ EC1E             >                org     Dict_Ptr
 648+ 3CC1             >
 648+ 3CC1 1C 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 648+ 3CC3             >
 648+ 3CC3             >U_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 648+ 3CC3 CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 648+ 3CC6             >
 648+ 3CC6             >
 648+ 3CC6             >                endif           ; ok        // for other definitions it "points" the correct handler
 648+ 3CC6             >                // Use of "; ok" to suppress "warning[fwdref]"
 648+ 3CC6             >
 648+ 3CC6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 649+ 3CC6 44 27 A0 3C                  dw      ZERO, D_DOT
 650+ 3CCA 02 25                        dw      EXIT
 651+ 3CCC
 652+ 3CCC              //  ______________________________________________________________________
 653+ 3CCC              //
 654+ 3CCC              // words        --
 655+ 3CCC                              Colon_Def WORDS, "WORDS", is_normal
 655+ 3CCC             >                New_Def  WORDS, "WORDS", Enter_Ptr, is_normal ; ok
 655+ 3CCC             >
 655+ 3CCC             >Dict_Ptr        defl    $
 655+ 3CCC             >
 655+ 3CCC             >//              ______________________________________________________________________
 655+ 3CCC             >//              Heap part
 655+ 3CCC             >
 655+ 3CCC             >
 655+ 3CCC             >                org     (Heap_Ptr & $1FFF) + $E000
 655+ EC1E             >
 655+ EC1E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 655+ EC1E             >Latest_Definition defl  Heap_Ptr
 655+ EC1E             >
 655+ EC1E             >                // dummy db directives used to calculate length of namec
 655+ EC1E 57 4F 52 44 >                db      "WORDS"
 655+ EC22 53          >
 655+ EC23             >len_NFA         defl    $ - temp_NFA
 655+ EC23             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 655+ EC1E             >
 655+ EC1E 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 655+ EC1F 57 4F 52 44 >                db      "WORDS"               // name string in 7-bit ascii, but
 655+ EC23 53          >
 655+ EC24             >                org     $-1                 // alter last byte of Name just above to set
 655+ EC23 D3          >                db      {b $} | END_BIT     // msb as name end
 655+ EC24             >
 655+ EC24 17 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 655+ EC26             >Prev_Ptr        defl    Heap_Ptr
 655+ EC26             >
 655+ EC26             >mirror_Ptr      defl    $
 655+ EC26             >
 655+ EC26 CE 3C       >                dw      Dict_Ptr + 2        // xt
 655+ EC28             >Heap_Ptr        defl    $ - $E000           // save current HP
 655+ EC28             >
 655+ EC28             >Current_HP      defl  $ - $E000             // used to set HP once!
 655+ EC28             >
 655+ EC28             >//              ______________________________________________________________________
 655+ EC28             >//              Dictionary part
 655+ EC28             >
 655+ EC28             >                org     Dict_Ptr
 655+ 3CCC             >
 655+ 3CCC 26 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 655+ 3CCE             >
 655+ 3CCE             >WORDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 655+ 3CCE CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 655+ 3CD1             >
 655+ 3CD1             >
 655+ 3CD1             >                endif           ; ok        // for other definitions it "points" the correct handler
 655+ 3CD1             >                // Use of "; ok" to suppress "warning[fwdref]"
 655+ 3CD1             >
 655+ 3CD1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 656+ 3CD1 3D 20 80 00                  dw      LIT, 128, OUT, STORE
 656+ 3CD5 F1 27 56 26
 657+ 3CD9 03 28 4C 26                  dw      CONTEXT, FETCH, FETCH
 657+ 3CDD 4C 26
 658+ 3CDF              Words_Begin:
 659+ 3CDF AB 29                        dw          FAR // Q TO HEAP
 660+ 3CE1 DB 25 61 26                  dw          DUP, CFETCH, LIT, $1F, AND_OP
 660+ 3CE5 3D 20 1F 00
 660+ 3CE9 C2 24
 661+ 3CEB F1 27 4C 26                  dw          OUT, FETCH, PLUS
 661+ 3CEF 55 25
 662+ 3CF1 6E 27 CD 28                  dw          CL, LESS, ZEQUAL
 662+ 3CF5 27 25
 663+ 3CF7 8F 20                        dw          ZBRANCH
 664+ 3CF9 0A 00                        dw          Words_Endif - $
C:\Zx\CSpect\Projects\vForth17_DOT/source/L3.asm(665): error: Label not found: CR
 665+ 3CFB 00 00 44 27                  dw              CR, ZERO, OUT, STORE
 665+ 3CFF F1 27 56 26
 666+ 3D03              Words_Endif:
 667+ 3D03 DB 25 15 30                  dw          DUP, ID_DOT
 668+ 3D07 4B 27 45 29                  dw          ONE, TRAVERSE, ONE_PLUS, FETCH
 668+ 3D0B 6E 25 4C 26
 669+ 3D0F DB 25 27 25                  dw          DUP, ZEQUAL
 670+ 3D13 59 23 D1 24                  dw          QTERMINAL, OR_OP
 671+ 3D17 8F 20                        dw      ZBRANCH
 672+ 3D19 C6 FF                        dw      Words_Begin - $
 673+ 3D1B C0 25                        dw      DROP
 674+ 3D1D 02 25                        dw      EXIT
 675+ 3D1F
 676+ 3D1F              //  ______________________________________________________________________
 677+ 3D1F              //
 678+ 3D1F              // list         n --
 679+ 3D1F                              Colon_Def LIST, "LIST", is_normal
 679+ 3D1F             >                New_Def  LIST, "LIST", Enter_Ptr, is_normal ; ok
 679+ 3D1F             >
 679+ 3D1F             >Dict_Ptr        defl    $
 679+ 3D1F             >
 679+ 3D1F             >//              ______________________________________________________________________
 679+ 3D1F             >//              Heap part
 679+ 3D1F             >
 679+ 3D1F             >
 679+ 3D1F             >                org     (Heap_Ptr & $1FFF) + $E000
 679+ EC28             >
 679+ EC28             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 679+ EC28             >Latest_Definition defl  Heap_Ptr
 679+ EC28             >
 679+ EC28             >                // dummy db directives used to calculate length of namec
 679+ EC28 4C 49 53 54 >                db      "LIST"
 679+ EC2C             >len_NFA         defl    $ - temp_NFA
 679+ EC2C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 679+ EC28             >
 679+ EC28 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 679+ EC29 4C 49 53 54 >                db      "LIST"               // name string in 7-bit ascii, but
 679+ EC2D             >                org     $-1                 // alter last byte of Name just above to set
 679+ EC2C D4          >                db      {b $} | END_BIT     // msb as name end
 679+ EC2D             >
 679+ EC2D 1E 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 679+ EC2F             >Prev_Ptr        defl    Heap_Ptr
 679+ EC2F             >
 679+ EC2F             >mirror_Ptr      defl    $
 679+ EC2F             >
 679+ EC2F 21 3D       >                dw      Dict_Ptr + 2        // xt
 679+ EC31             >Heap_Ptr        defl    $ - $E000           // save current HP
 679+ EC31             >
 679+ EC31             >Current_HP      defl  $ - $E000             // used to set HP once!
 679+ EC31             >
 679+ EC31             >//              ______________________________________________________________________
 679+ EC31             >//              Dictionary part
 679+ EC31             >
 679+ EC31             >                org     Dict_Ptr
 679+ 3D1F             >
 679+ 3D1F 2F 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 679+ 3D21             >
 679+ 3D21             >LIST:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 679+ 3D21 CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 679+ 3D24             >
 679+ 3D24             >
 679+ 3D24             >                endif           ; ok        // for other definitions it "points" the correct handler
 679+ 3D24             >                // Use of "; ok" to suppress "warning[fwdref]"
 679+ 3D24             >
 679+ 3D24             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
C:\Zx\CSpect\Projects\vForth17_DOT/source/L3.asm(680): error: Label not found: CR
 680+ 3D24 7E 2B 00 00                  dw      DECIMAL, CR
 681+ 3D28 DB 25 F7 27                  dw      DUP, SCR, STORE
 681+ 3D2C 56 26
 682+ 3D2E D2 2D                        dw      C_DOT_QUOTE
 683+ 3D30 05 53 63 72                  db      5, "Scr# "
 683+ 3D34 23 20
 684+ 3D36 AD 3C                        dw      DOT
 685+ 3D38 83 27 44 27                  dw      LSCR, ZERO, C_DO
 685+ 3D3C CE 20
 686+ 3D3E              List_Loop:
C:\Zx\CSpect\Projects\vForth17_DOT/source/L3.asm(687): error: Label not found: CR
 687+ 3D3E 00 00                        dw          CR
 688+ 3D40 D4 20 59 27                  dw          I, THREE
 689+ 3D44 91 3C 3A 29                  dw          DOT_R, SPACE
 690+ 3D48 D4 20 F7 27                  dw          I, SCR, FETCH, DOT_LINE
 690+ 3D4C 4C 26 8E 35
 691+ 3D50 59 23                        dw          QTERMINAL
 692+ 3D52 8F 20                        dw          ZBRANCH
 693+ 3D54 06 00                        dw          List_Endif - $
 694+ 3D56 9A 20                        dw              C_LEAVE
 695+ 3D58 06 00                        dw              List_Leave - $
 696+ 3D5A              List_Endif:
 697+ 3D5A 7A 20                        dw      C_LOOP
 698+ 3D5C E2 FF                        dw      List_Loop - $
 699+ 3D5E              List_Leave:
C:\Zx\CSpect\Projects\vForth17_DOT/source/L3.asm(700): error: Label not found: CR
 700+ 3D5E 00 00                        dw      CR
 701+ 3D60 02 25                        dw      EXIT
 702+ 3D62
 703+ 3D62              //  ______________________________________________________________________
 704+ 3D62              //
 705+ 3D62              // index        n1 n2 --
 706+ 3D62                              Colon_Def INDEX, "INDEX", is_normal
 706+ 3D62             >                New_Def  INDEX, "INDEX", Enter_Ptr, is_normal ; ok
 706+ 3D62             >
 706+ 3D62             >Dict_Ptr        defl    $
 706+ 3D62             >
 706+ 3D62             >//              ______________________________________________________________________
 706+ 3D62             >//              Heap part
 706+ 3D62             >
 706+ 3D62             >
 706+ 3D62             >                org     (Heap_Ptr & $1FFF) + $E000
 706+ EC31             >
 706+ EC31             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 706+ EC31             >Latest_Definition defl  Heap_Ptr
 706+ EC31             >
 706+ EC31             >                // dummy db directives used to calculate length of namec
 706+ EC31 49 4E 44 45 >                db      "INDEX"
 706+ EC35 58          >
 706+ EC36             >len_NFA         defl    $ - temp_NFA
 706+ EC36             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 706+ EC31             >
 706+ EC31 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 706+ EC32 49 4E 44 45 >                db      "INDEX"               // name string in 7-bit ascii, but
 706+ EC36 58          >
 706+ EC37             >                org     $-1                 // alter last byte of Name just above to set
 706+ EC36 D8          >                db      {b $} | END_BIT     // msb as name end
 706+ EC37             >
 706+ EC37 28 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 706+ EC39             >Prev_Ptr        defl    Heap_Ptr
 706+ EC39             >
 706+ EC39             >mirror_Ptr      defl    $
 706+ EC39             >
 706+ EC39 64 3D       >                dw      Dict_Ptr + 2        // xt
 706+ EC3B             >Heap_Ptr        defl    $ - $E000           // save current HP
 706+ EC3B             >
 706+ EC3B             >Current_HP      defl  $ - $E000             // used to set HP once!
 706+ EC3B             >
 706+ EC3B             >//              ______________________________________________________________________
 706+ EC3B             >//              Dictionary part
 706+ EC3B             >
 706+ EC3B             >                org     Dict_Ptr
 706+ 3D62             >
 706+ 3D62 39 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 706+ 3D64             >
 706+ 3D64             >INDEX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 706+ 3D64 CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 706+ 3D67             >
 706+ 3D67             >
 706+ 3D67             >                endif           ; ok        // for other definitions it "points" the correct handler
 706+ 3D67             >                // Use of "; ok" to suppress "warning[fwdref]"
 706+ 3D67             >
 706+ 3D67             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 707+ 3D67 6E 25 D4 25                  dw      ONE_PLUS, SWAP, C_DO
 707+ 3D6B CE 20
 708+ 3D6D              Index_Loop:
C:\Zx\CSpect\Projects\vForth17_DOT/source/L3.asm(709): error: Label not found: CR
 709+ 3D6D 00 00 D4 20                  dw          CR, I, THREE
 709+ 3D71 59 27
 710+ 3D73 91 3C 3A 29                  dw          DOT_R, SPACE
 711+ 3D77 44 27 D4 20                  dw          ZERO, I, DOT_LINE
 711+ 3D7B 8E 35
 712+ 3D7D 59 23                        dw          QTERMINAL
 713+ 3D7F 8F 20                        dw          ZBRANCH
 714+ 3D81 06 00                        dw          Index_Endif - $
 715+ 3D83 9A 20                        dw              C_LEAVE
 716+ 3D85 06 00                        dw              Index_Leave - $
 717+ 3D87              Index_Endif:
 718+ 3D87 7A 20                        dw      C_LOOP
 719+ 3D89 E4 FF                        dw      Index_Loop - $
 720+ 3D8B              Index_Leave:
C:\Zx\CSpect\Projects\vForth17_DOT/source/L3.asm(721): error: Label not found: CR
 721+ 3D8B 00 00                        dw      CR
 722+ 3D8D 02 25                        dw      EXIT
 723+ 3D8F
 724+ 3D8F              //  ______________________________________________________________________
 725+ 3D8F              //
 726+ 3D8F              // cls          --
 727+ 3D8F                              Colon_Def CLS, "CLS", is_normal
 727+ 3D8F             >                New_Def  CLS, "CLS", Enter_Ptr, is_normal ; ok
 727+ 3D8F             >
 727+ 3D8F             >Dict_Ptr        defl    $
 727+ 3D8F             >
 727+ 3D8F             >//              ______________________________________________________________________
 727+ 3D8F             >//              Heap part
 727+ 3D8F             >
 727+ 3D8F             >
 727+ 3D8F             >                org     (Heap_Ptr & $1FFF) + $E000
 727+ EC3B             >
 727+ EC3B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 727+ EC3B             >Latest_Definition defl  Heap_Ptr
 727+ EC3B             >
 727+ EC3B             >                // dummy db directives used to calculate length of namec
 727+ EC3B 43 4C 53    >                db      "CLS"
 727+ EC3E             >len_NFA         defl    $ - temp_NFA
 727+ EC3E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 727+ EC3B             >
 727+ EC3B 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 727+ EC3C 43 4C 53    >                db      "CLS"               // name string in 7-bit ascii, but
 727+ EC3F             >                org     $-1                 // alter last byte of Name just above to set
 727+ EC3E D3          >                db      {b $} | END_BIT     // msb as name end
 727+ EC3F             >
 727+ EC3F 31 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 727+ EC41             >Prev_Ptr        defl    Heap_Ptr
 727+ EC41             >
 727+ EC41             >mirror_Ptr      defl    $
 727+ EC41             >
 727+ EC41 91 3D       >                dw      Dict_Ptr + 2        // xt
 727+ EC43             >Heap_Ptr        defl    $ - $E000           // save current HP
 727+ EC43             >
 727+ EC43             >Current_HP      defl  $ - $E000             // used to set HP once!
 727+ EC43             >
 727+ EC43             >//              ______________________________________________________________________
 727+ EC43             >//              Dictionary part
 727+ EC43             >
 727+ EC43             >                org     Dict_Ptr
 727+ 3D8F             >
 727+ 3D8F 41 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 727+ 3D91             >
C:\Zx\CSpect\Projects\vForth17_DOT/source/system.asm(163): warning: Label has different value in pass 3: previous value 8781 not equal 15761
C:\Zx\CSpect\Projects\vForth17_DOT/source/L3.asm(727): ^ emitted from here
 727+ 3D91             >CLS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 727+ 3D91 CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 727+ 3D94             >
 727+ 3D94             >
 727+ 3D94             >                endif           ; ok        // for other definitions it "points" the correct handler
 727+ 3D94             >                // Use of "; ok" to suppress "warning[fwdref]"
 727+ 3D94             >
 727+ 3D94             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 728+ 3D94 3D 20 0E 00                  dw      LIT, $0E, EMITC
 728+ 3D98 3C 22
 729+ 3D9A 02 25                        dw      EXIT
 730+ 3D9C
 731+ 3D9C              //  ______________________________________________________________________
 732+ 3D9C              //
 733+ 3D9C              // splash       --
 734+ 3D9C              //              Colon_Def SPLASH, "SPLASH", is_normal
 735+ 3D9C              //              dw      CLS
 736+ 3D9C              //              dw      C_DOT_QUOTE
 737+ 3D9C              //              db      87
 738+ 3D9C              //              db      "v-Forth 1.7 NextZXOS version", 13    // 29
 739+ 3D9C              //              db      "Heap Vocabulary - build 20231112", 13  // 33
 740+ 3D9C              //              db      "1990-2023 Matteo Vitturi", 13        // 25
 741+ 3D9C              //              dw      EXIT
 742+ 3D9C
 743+ 3D9C              //  ______________________________________________________________________
 744+ 3D9C              //
 745+ 3D9C              // splash       --
 746+ 3D9C                              Colon_Def SPLASH, "SPLASH", is_normal
 746+ 3D9C             >                New_Def  SPLASH, "SPLASH", Enter_Ptr, is_normal ; ok
 746+ 3D9C             >
 746+ 3D9C             >Dict_Ptr        defl    $
 746+ 3D9C             >
 746+ 3D9C             >//              ______________________________________________________________________
 746+ 3D9C             >//              Heap part
 746+ 3D9C             >
 746+ 3D9C             >
 746+ 3D9C             >                org     (Heap_Ptr & $1FFF) + $E000
 746+ EC43             >
 746+ EC43             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 746+ EC43             >Latest_Definition defl  Heap_Ptr
 746+ EC43             >
 746+ EC43             >                // dummy db directives used to calculate length of namec
 746+ EC43 53 50 4C 41 >                db      "SPLASH"
 746+ EC47 53 48       >
 746+ EC49             >len_NFA         defl    $ - temp_NFA
 746+ EC49             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 746+ EC43             >
 746+ EC43 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 746+ EC44 53 50 4C 41 >                db      "SPLASH"               // name string in 7-bit ascii, but
 746+ EC48 53 48       >
 746+ EC4A             >                org     $-1                 // alter last byte of Name just above to set
 746+ EC49 C8          >                db      {b $} | END_BIT     // msb as name end
 746+ EC4A             >
 746+ EC4A 3B 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 746+ EC4C             >Prev_Ptr        defl    Heap_Ptr
 746+ EC4C             >
 746+ EC4C             >mirror_Ptr      defl    $
 746+ EC4C             >
 746+ EC4C 9E 3D       >                dw      Dict_Ptr + 2        // xt
 746+ EC4E             >Heap_Ptr        defl    $ - $E000           // save current HP
 746+ EC4E             >
 746+ EC4E             >Current_HP      defl  $ - $E000             // used to set HP once!
 746+ EC4E             >
 746+ EC4E             >//              ______________________________________________________________________
 746+ EC4E             >//              Dictionary part
 746+ EC4E             >
 746+ EC4E             >                org     Dict_Ptr
 746+ 3D9C             >
 746+ 3D9C 4C 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 746+ 3D9E             >
 746+ 3D9E             >SPLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 746+ 3D9E CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 746+ 3DA1             >
 746+ 3DA1             >
 746+ 3DA1             >                endif           ; ok        // for other definitions it "points" the correct handler
 746+ 3DA1             >                // Use of "; ok" to suppress "warning[fwdref]"
 746+ 3DA1             >
 746+ 3DA1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 747+ 3DA1 91 3D                        dw      CLS
 748+ 3DA3 3D 20 02 00                  dw      LIT, Splash_Ptr
 749+ 3DA7 AB 29                        dw      FAR
 750+ 3DA9 E1 2B 35 2C                  dw      COUNT, TYPE
 751+ 3DAD                          //  dw      LIT, 26, EMITC
 752+ 3DAD                          //  dw      ZERO, EMITC
 753+ 3DAD 02 25                        dw      EXIT
 754+ 3DAF
 755+ 3DAF              //  ______________________________________________________________________
 756+ 3DAF              //
 757+ 3DAF              // video        --
 758+ 3DAF                              Colon_Def VIDEO, "VIDEO", is_normal
 758+ 3DAF             >                New_Def  VIDEO, "VIDEO", Enter_Ptr, is_normal ; ok
 758+ 3DAF             >
 758+ 3DAF             >Dict_Ptr        defl    $
 758+ 3DAF             >
 758+ 3DAF             >//              ______________________________________________________________________
 758+ 3DAF             >//              Heap part
 758+ 3DAF             >
 758+ 3DAF             >
 758+ 3DAF             >                org     (Heap_Ptr & $1FFF) + $E000
 758+ EC4E             >
 758+ EC4E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 758+ EC4E             >Latest_Definition defl  Heap_Ptr
 758+ EC4E             >
 758+ EC4E             >                // dummy db directives used to calculate length of namec
 758+ EC4E 56 49 44 45 >                db      "VIDEO"
 758+ EC52 4F          >
 758+ EC53             >len_NFA         defl    $ - temp_NFA
 758+ EC53             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 758+ EC4E             >
 758+ EC4E 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 758+ EC4F 56 49 44 45 >                db      "VIDEO"               // name string in 7-bit ascii, but
 758+ EC53 4F          >
 758+ EC54             >                org     $-1                 // alter last byte of Name just above to set
 758+ EC53 CF          >                db      {b $} | END_BIT     // msb as name end
 758+ EC54             >
 758+ EC54 43 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 758+ EC56             >Prev_Ptr        defl    Heap_Ptr
 758+ EC56             >
 758+ EC56             >mirror_Ptr      defl    $
 758+ EC56             >
 758+ EC56 B1 3D       >                dw      Dict_Ptr + 2        // xt
 758+ EC58             >Heap_Ptr        defl    $ - $E000           // save current HP
 758+ EC58             >
 758+ EC58             >Current_HP      defl  $ - $E000             // used to set HP once!
 758+ EC58             >
 758+ EC58             >//              ______________________________________________________________________
 758+ EC58             >//              Dictionary part
 758+ EC58             >
 758+ EC58             >                org     Dict_Ptr
 758+ 3DAF             >
 758+ 3DAF 56 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 758+ 3DB1             >
 758+ 3DB1             >VIDEO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 758+ 3DB1 CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 758+ 3DB4             >
 758+ 3DB4             >
 758+ 3DB4             >                endif           ; ok        // for other definitions it "points" the correct handler
 758+ 3DB4             >                // Use of "; ok" to suppress "warning[fwdref]"
 758+ 3DB4             >
 758+ 3DB4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 759+ 3DB4 52 27 DB 25                  dw      TWO, DUP, DEVICE, STORE
 759+ 3DB8 C3 35 56 26
 760+ 3DBC 6D 23                        dw      SELECT
 761+ 3DBE 02 25                        dw      EXIT
 762+ 3DC0
 763+ 3DC0              //  ______________________________________________________________________
 764+ 3DC0              //
 765+ 3DC0              // autoexec     --
 766+ 3DC0              // this word is called the first time the Forth system boot to
 767+ 3DC0              // load Screen# 1. Once called it patches itself to prevent furhter runs.
 768+ 3DC0                              Colon_Def AUTOEXEC, "AUTOEXEC", is_normal
 768+ 3DC0             >                New_Def  AUTOEXEC, "AUTOEXEC", Enter_Ptr, is_normal ; ok
 768+ 3DC0             >
 768+ 3DC0             >Dict_Ptr        defl    $
 768+ 3DC0             >
 768+ 3DC0             >//              ______________________________________________________________________
 768+ 3DC0             >//              Heap part
 768+ 3DC0             >
 768+ 3DC0             >
 768+ 3DC0             >                org     (Heap_Ptr & $1FFF) + $E000
 768+ EC58             >
 768+ EC58             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 768+ EC58             >Latest_Definition defl  Heap_Ptr
 768+ EC58             >
 768+ EC58             >                // dummy db directives used to calculate length of namec
 768+ EC58 41 55 54 4F >                db      "AUTOEXEC"
 768+ EC5C 45 58 45 43 >
 768+ EC60             >len_NFA         defl    $ - temp_NFA
 768+ EC60             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 768+ EC58             >
 768+ EC58 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 768+ EC59 41 55 54 4F >                db      "AUTOEXEC"               // name string in 7-bit ascii, but
 768+ EC5D 45 58 45 43 >
 768+ EC61             >                org     $-1                 // alter last byte of Name just above to set
 768+ EC60 C3          >                db      {b $} | END_BIT     // msb as name end
 768+ EC61             >
 768+ EC61 4E 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 768+ EC63             >Prev_Ptr        defl    Heap_Ptr
 768+ EC63             >
 768+ EC63             >mirror_Ptr      defl    $
 768+ EC63             >
 768+ EC63 C2 3D       >                dw      Dict_Ptr + 2        // xt
 768+ EC65             >Heap_Ptr        defl    $ - $E000           // save current HP
 768+ EC65             >
 768+ EC65             >Current_HP      defl  $ - $E000             // used to set HP once!
 768+ EC65             >
 768+ EC65             >//              ______________________________________________________________________
 768+ EC65             >//              Dictionary part
 768+ EC65             >
 768+ EC65             >                org     Dict_Ptr
 768+ 3DC0             >
 768+ 3DC0 63 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 768+ 3DC2             >
 768+ 3DC2             >AUTOEXEC:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 768+ 3DC2 CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 768+ 3DC5             >
 768+ 3DC5             >
 768+ 3DC5             >                endif           ; ok        // for other definitions it "points" the correct handler
 768+ 3DC5             >                // Use of "; ok" to suppress "warning[fwdref]"
 768+ 3DC5             >
 768+ 3DC5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 769+ 3DC5 3D 20 0B 00                  dw      LIT, 11
 770+ 3DC9 3D 20 0B 27                  dw      LIT, NOOP
 771+ 3DCD 3D 20 84 32                  dw      LIT, Autoexec_Ptr
 772+ 3DD1 56 26                        dw      STORE
 773+ 3DD3 C7 3A                        dw      LOAD
 774+ 3DD5
 775+ 3DD5              //              dw      NEEDS_FN, ONE, F_OPEN
 776+ 3DD5              //              dw      LIT, 43, QERROR
 777+ 3DD5              //              dw      DUP, F_INCLUDE
 778+ 3DD5              //              dw      F_CLOSE, DROP
 779+ 3DD5
 780+ 3DD5 2B 32                        dw      QUIT
 781+ 3DD7 02 25                        dw      EXIT
 782+ 3DD9
 783+ 3DD9
 784+ 3DD9              //  ______________________________________________________________________
 785+ 3DD9              //
 786+ 3DD9              // bye     --
 787+ 3DD9              //
 788+ 3DD9                              Colon_Def BYE, "BYE", is_normal
 788+ 3DD9             >                New_Def  BYE, "BYE", Enter_Ptr, is_normal ; ok
 788+ 3DD9             >
 788+ 3DD9             >Dict_Ptr        defl    $
 788+ 3DD9             >
 788+ 3DD9             >//              ______________________________________________________________________
 788+ 3DD9             >//              Heap part
 788+ 3DD9             >
 788+ 3DD9             >
 788+ 3DD9             >                org     (Heap_Ptr & $1FFF) + $E000
 788+ EC65             >
 788+ EC65             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 788+ EC65             >Latest_Definition defl  Heap_Ptr
 788+ EC65             >
 788+ EC65             >                // dummy db directives used to calculate length of namec
 788+ EC65 42 59 45    >                db      "BYE"
 788+ EC68             >len_NFA         defl    $ - temp_NFA
 788+ EC68             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 788+ EC65             >
 788+ EC65 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 788+ EC66 42 59 45    >                db      "BYE"               // name string in 7-bit ascii, but
 788+ EC69             >                org     $-1                 // alter last byte of Name just above to set
 788+ EC68 C5          >                db      {b $} | END_BIT     // msb as name end
 788+ EC69             >
 788+ EC69 58 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 788+ EC6B             >Prev_Ptr        defl    Heap_Ptr
 788+ EC6B             >
 788+ EC6B             >mirror_Ptr      defl    $
 788+ EC6B             >
 788+ EC6B DB 3D       >                dw      Dict_Ptr + 2        // xt
 788+ EC6D             >Heap_Ptr        defl    $ - $E000           // save current HP
 788+ EC6D             >
 788+ EC6D             >Current_HP      defl  $ - $E000             // used to set HP once!
 788+ EC6D             >
 788+ EC6D             >//              ______________________________________________________________________
 788+ EC6D             >//              Dictionary part
 788+ EC6D             >
 788+ EC6D             >                org     Dict_Ptr
 788+ 3DD9             >
 788+ 3DD9 6B 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 788+ 3DDB             >
 788+ 3DDB             >BYE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 788+ 3DDB CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 788+ 3DDE             >
 788+ 3DDE             >
 788+ 3DDE             >                endif           ; ok        // for other definitions it "points" the correct handler
 788+ 3DDE             >                // Use of "; ok" to suppress "warning[fwdref]"
 788+ 3DDE             >
 788+ 3DDE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 789+ 3DDE B4 37                        dw      FLUSH
 790+ 3DE0 02 37                        dw      EMPTY_BUFFERS
 791+ 3DE2 65 3F 4C 26                  dw      BLK_FH, FETCH, F_CLOSE, DROP
 791+ 3DE6 A6 23 C0 25
 792+ 3DEA 44 27 8A 27                  dw      ZERO, PLUS_ORIGIN
 793+ 3DEE 23 34                        dw      BASIC
 794+ 3DF0
 795+ 3DF0              //  ______________________________________________________________________
 796+ 3DF0              //
 797+ 3DF0              // invv     --
 798+ 3DF0              //
 799+ 3DF0              //              Colon_Def INVV, "INVV", is_normal
 800+ 3DF0              //              dw      LIT, 20, EMITC, ONE, EMITC
 801+ 3DF0              //              dw      EXIT
 802+ 3DF0
 803+ 3DF0              //  ______________________________________________________________________
 804+ 3DF0              //
 805+ 3DF0              // truv     --
 806+ 3DF0              //
 807+ 3DF0              //              Colon_Def TRUV, "TRUV", is_normal
 808+ 3DF0              //              dw      LIT, 20, EMITC, ZERO, EMITC
 809+ 3DF0              //              dw      EXIT
 810+ 3DF0
 811+ 3DF0              //  ______________________________________________________________________
 812+ 3DF0              //
 813+ 3DF0              // mark     --
 814+ 3DF0              //
 815+ 3DF0              //              Colon_Def MARK, "MARK", is_normal
 816+ 3DF0              //              dw      INVV, TYPE, TRUV
 817+ 3DF0              //              dw      EXIT
 818+ 3DF0
 819+ 3DF0              //  ______________________________________________________________________
 820+ 3DF0              //
 821+ 3DF0              // back     --
 822+ 3DF0              //
 823+ 3DF0                              Colon_Def BACK, "BACK", is_normal
 823+ 3DF0             >                New_Def  BACK, "BACK", Enter_Ptr, is_normal ; ok
 823+ 3DF0             >
 823+ 3DF0             >Dict_Ptr        defl    $
 823+ 3DF0             >
 823+ 3DF0             >//              ______________________________________________________________________
 823+ 3DF0             >//              Heap part
 823+ 3DF0             >
 823+ 3DF0             >
 823+ 3DF0             >                org     (Heap_Ptr & $1FFF) + $E000
 823+ EC6D             >
 823+ EC6D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 823+ EC6D             >Latest_Definition defl  Heap_Ptr
 823+ EC6D             >
 823+ EC6D             >                // dummy db directives used to calculate length of namec
 823+ EC6D 42 41 43 4B >                db      "BACK"
 823+ EC71             >len_NFA         defl    $ - temp_NFA
 823+ EC71             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 823+ EC6D             >
 823+ EC6D 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 823+ EC6E 42 41 43 4B >                db      "BACK"               // name string in 7-bit ascii, but
 823+ EC72             >                org     $-1                 // alter last byte of Name just above to set
 823+ EC71 CB          >                db      {b $} | END_BIT     // msb as name end
 823+ EC72             >
 823+ EC72 65 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 823+ EC74             >Prev_Ptr        defl    Heap_Ptr
 823+ EC74             >
 823+ EC74             >mirror_Ptr      defl    $
 823+ EC74             >
 823+ EC74 F2 3D       >                dw      Dict_Ptr + 2        // xt
 823+ EC76             >Heap_Ptr        defl    $ - $E000           // save current HP
 823+ EC76             >
 823+ EC76             >Current_HP      defl  $ - $E000             // used to set HP once!
 823+ EC76             >
 823+ EC76             >//              ______________________________________________________________________
 823+ EC76             >//              Dictionary part
 823+ EC76             >
 823+ EC76             >                org     Dict_Ptr
 823+ 3DF0             >
 823+ 3DF0 74 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 823+ 3DF2             >
 823+ 3DF2             >BACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 823+ 3DF2 CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 823+ 3DF5             >
 823+ 3DF5             >
 823+ 3DF5             >                endif           ; ok        // for other definitions it "points" the correct handler
 823+ 3DF5             >                // Use of "; ok" to suppress "warning[fwdref]"
 823+ 3DF5             >
 823+ 3DF5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 824+ 3DF5 69 28 A8 28                  dw      HERE, SUBTRACT, COMMA
 824+ 3DF9 7F 28
 825+ 3DFB 02 25                        dw      EXIT
 826+ 3DFD
 827+ 3DFD              //  ______________________________________________________________________
 828+ 3DFD              //
 829+ 3DFD              // if          ( -- a 2 ) \ compile-time
 830+ 3DFD              // IF ... THEN
 831+ 3DFD              // IF ... ELSE ... ENDIF
 832+ 3DFD                              Colon_Def IF, "IF", is_immediate
 832+ 3DFD             >                New_Def  IF, "IF", Enter_Ptr, is_immediate ; ok
 832+ 3DFD             >
 832+ 3DFD             >Dict_Ptr        defl    $
 832+ 3DFD             >
 832+ 3DFD             >//              ______________________________________________________________________
 832+ 3DFD             >//              Heap part
 832+ 3DFD             >
 832+ 3DFD             >
 832+ 3DFD             >                org     (Heap_Ptr & $1FFF) + $E000
 832+ EC76             >
 832+ EC76             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 832+ EC76             >Latest_Definition defl  Heap_Ptr
 832+ EC76             >
 832+ EC76             >                // dummy db directives used to calculate length of namec
 832+ EC76 49 46       >                db      "IF"
 832+ EC78             >len_NFA         defl    $ - temp_NFA
 832+ EC78             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 832+ EC76             >
 832+ EC76 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 832+ EC77 49 46       >                db      "IF"               // name string in 7-bit ascii, but
 832+ EC79             >                org     $-1                 // alter last byte of Name just above to set
 832+ EC78 C6          >                db      {b $} | END_BIT     // msb as name end
 832+ EC79             >
 832+ EC79 6D 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 832+ EC7B             >Prev_Ptr        defl    Heap_Ptr
 832+ EC7B             >
 832+ EC7B             >mirror_Ptr      defl    $
 832+ EC7B             >
 832+ EC7B FF 3D       >                dw      Dict_Ptr + 2        // xt
 832+ EC7D             >Heap_Ptr        defl    $ - $E000           // save current HP
 832+ EC7D             >
 832+ EC7D             >Current_HP      defl  $ - $E000             // used to set HP once!
 832+ EC7D             >
 832+ EC7D             >//              ______________________________________________________________________
 832+ EC7D             >//              Dictionary part
 832+ EC7D             >
 832+ EC7D             >                org     Dict_Ptr
 832+ 3DFD             >
 832+ 3DFD 7B 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 832+ 3DFF             >
 832+ 3DFF             >IF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 832+ 3DFF CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 832+ 3E02             >
 832+ 3E02             >
 832+ 3E02             >                endif           ; ok        // for other definitions it "points" the correct handler
 832+ 3E02             >                // Use of "; ok" to suppress "warning[fwdref]"
 832+ 3E02             >
 832+ 3E02             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 833+ 3E02 15 2B 8F 20                  dw      COMPILE, ZBRANCH
 834+ 3E06 69 28 44 27                  dw      HERE, ZERO, COMMA
 834+ 3E0A 7F 28
 835+ 3E0C 52 27                        dw      TWO
 836+ 3E0E 02 25                        dw      EXIT
 837+ 3E10
 838+ 3E10              //  ______________________________________________________________________
 839+ 3E10              //
 840+ 3E10              // then        ( a 2 -- ) \ compile-time
 841+ 3E10              //
 842+ 3E10                              Colon_Def THEN, "THEN", is_immediate
 842+ 3E10             >                New_Def  THEN, "THEN", Enter_Ptr, is_immediate ; ok
 842+ 3E10             >
 842+ 3E10             >Dict_Ptr        defl    $
 842+ 3E10             >
 842+ 3E10             >//              ______________________________________________________________________
 842+ 3E10             >//              Heap part
 842+ 3E10             >
 842+ 3E10             >
 842+ 3E10             >                org     (Heap_Ptr & $1FFF) + $E000
 842+ EC7D             >
 842+ EC7D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 842+ EC7D             >Latest_Definition defl  Heap_Ptr
 842+ EC7D             >
 842+ EC7D             >                // dummy db directives used to calculate length of namec
 842+ EC7D 54 48 45 4E >                db      "THEN"
 842+ EC81             >len_NFA         defl    $ - temp_NFA
 842+ EC81             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 842+ EC7D             >
 842+ EC7D C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 842+ EC7E 54 48 45 4E >                db      "THEN"               // name string in 7-bit ascii, but
 842+ EC82             >                org     $-1                 // alter last byte of Name just above to set
 842+ EC81 CE          >                db      {b $} | END_BIT     // msb as name end
 842+ EC82             >
 842+ EC82 76 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 842+ EC84             >Prev_Ptr        defl    Heap_Ptr
 842+ EC84             >
 842+ EC84             >mirror_Ptr      defl    $
 842+ EC84             >
 842+ EC84 12 3E       >                dw      Dict_Ptr + 2        // xt
 842+ EC86             >Heap_Ptr        defl    $ - $E000           // save current HP
 842+ EC86             >
 842+ EC86             >Current_HP      defl  $ - $E000             // used to set HP once!
 842+ EC86             >
 842+ EC86             >//              ______________________________________________________________________
 842+ EC86             >//              Dictionary part
 842+ EC86             >
 842+ EC86             >                org     Dict_Ptr
 842+ 3E10             >
 842+ 3E10 84 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 842+ 3E12             >
 842+ 3E12             >THEN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 842+ 3E12 CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 842+ 3E15             >
 842+ 3E15             >
 842+ 3E15             >                endif           ; ok        // for other definitions it "points" the correct handler
 842+ 3E15             >                // Use of "; ok" to suppress "warning[fwdref]"
 842+ 3E15             >
 842+ 3E15             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 843+ 3E15 BA 2A                        dw      QCOMP
 844+ 3E17 52 27 DE 2A                  dw      TWO, QPAIRS
 845+ 3E1B 69 28 B7 25                  dw      HERE, OVER, SUBTRACT, SWAP, STORE
 845+ 3E1F A8 28 D4 25
 845+ 3E23 56 26
 846+ 3E25 02 25                        dw      EXIT
 847+ 3E27
 848+ 3E27              //  ______________________________________________________________________
 849+ 3E27              //
 850+ 3E27              // endif       ( a 2 -- ) \ compile-time
 851+ 3E27              //
 852+ 3E27                              Colon_Def ENDIF, "ENDIF", is_immediate
 852+ 3E27             >                New_Def  ENDIF, "ENDIF", Enter_Ptr, is_immediate ; ok
 852+ 3E27             >
 852+ 3E27             >Dict_Ptr        defl    $
 852+ 3E27             >
 852+ 3E27             >//              ______________________________________________________________________
 852+ 3E27             >//              Heap part
 852+ 3E27             >
 852+ 3E27             >
 852+ 3E27             >                org     (Heap_Ptr & $1FFF) + $E000
 852+ EC86             >
 852+ EC86             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 852+ EC86             >Latest_Definition defl  Heap_Ptr
 852+ EC86             >
 852+ EC86             >                // dummy db directives used to calculate length of namec
 852+ EC86 45 4E 44 49 >                db      "ENDIF"
 852+ EC8A 46          >
 852+ EC8B             >len_NFA         defl    $ - temp_NFA
 852+ EC8B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 852+ EC86             >
 852+ EC86 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 852+ EC87 45 4E 44 49 >                db      "ENDIF"               // name string in 7-bit ascii, but
 852+ EC8B 46          >
 852+ EC8C             >                org     $-1                 // alter last byte of Name just above to set
 852+ EC8B C6          >                db      {b $} | END_BIT     // msb as name end
 852+ EC8C             >
 852+ EC8C 7D 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 852+ EC8E             >Prev_Ptr        defl    Heap_Ptr
 852+ EC8E             >
 852+ EC8E             >mirror_Ptr      defl    $
 852+ EC8E             >
 852+ EC8E 29 3E       >                dw      Dict_Ptr + 2        // xt
 852+ EC90             >Heap_Ptr        defl    $ - $E000           // save current HP
 852+ EC90             >
 852+ EC90             >Current_HP      defl  $ - $E000             // used to set HP once!
 852+ EC90             >
 852+ EC90             >//              ______________________________________________________________________
 852+ EC90             >//              Dictionary part
 852+ EC90             >
 852+ EC90             >                org     Dict_Ptr
 852+ 3E27             >
 852+ 3E27 8E 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 852+ 3E29             >
 852+ 3E29             >ENDIF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 852+ 3E29 CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 852+ 3E2C             >
 852+ 3E2C             >
 852+ 3E2C             >                endif           ; ok        // for other definitions it "points" the correct handler
 852+ 3E2C             >                // Use of "; ok" to suppress "warning[fwdref]"
 852+ 3E2C             >
 852+ 3E2C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 853+ 3E2C 12 3E                        dw      THEN
 854+ 3E2E 02 25                        dw      EXIT
 855+ 3E30
 856+ 3E30              //  ______________________________________________________________________
 857+ 3E30              //
 858+ 3E30              // else        ( a1 2 -- a2 2 ) \ compile-time
 859+ 3E30              //
 860+ 3E30                              Colon_Def ELSE, "ELSE", is_immediate
 860+ 3E30             >                New_Def  ELSE, "ELSE", Enter_Ptr, is_immediate ; ok
 860+ 3E30             >
 860+ 3E30             >Dict_Ptr        defl    $
 860+ 3E30             >
 860+ 3E30             >//              ______________________________________________________________________
 860+ 3E30             >//              Heap part
 860+ 3E30             >
 860+ 3E30             >
 860+ 3E30             >                org     (Heap_Ptr & $1FFF) + $E000
 860+ EC90             >
 860+ EC90             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 860+ EC90             >Latest_Definition defl  Heap_Ptr
 860+ EC90             >
 860+ EC90             >                // dummy db directives used to calculate length of namec
 860+ EC90 45 4C 53 45 >                db      "ELSE"
 860+ EC94             >len_NFA         defl    $ - temp_NFA
 860+ EC94             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 860+ EC90             >
 860+ EC90 C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 860+ EC91 45 4C 53 45 >                db      "ELSE"               // name string in 7-bit ascii, but
 860+ EC95             >                org     $-1                 // alter last byte of Name just above to set
 860+ EC94 C5          >                db      {b $} | END_BIT     // msb as name end
 860+ EC95             >
 860+ EC95 86 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 860+ EC97             >Prev_Ptr        defl    Heap_Ptr
 860+ EC97             >
 860+ EC97             >mirror_Ptr      defl    $
 860+ EC97             >
 860+ EC97 32 3E       >                dw      Dict_Ptr + 2        // xt
 860+ EC99             >Heap_Ptr        defl    $ - $E000           // save current HP
 860+ EC99             >
 860+ EC99             >Current_HP      defl  $ - $E000             // used to set HP once!
 860+ EC99             >
 860+ EC99             >//              ______________________________________________________________________
 860+ EC99             >//              Dictionary part
 860+ EC99             >
 860+ EC99             >                org     Dict_Ptr
 860+ 3E30             >
 860+ 3E30 97 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 860+ 3E32             >
 860+ 3E32             >ELSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 860+ 3E32 CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 860+ 3E35             >
 860+ 3E35             >
 860+ 3E35             >                endif           ; ok        // for other definitions it "points" the correct handler
 860+ 3E35             >                // Use of "; ok" to suppress "warning[fwdref]"
 860+ 3E35             >
 860+ 3E35             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 861+ 3E35 BA 2A                        dw      QCOMP
 862+ 3E37 52 27 DE 2A                  dw      TWO, QPAIRS
 863+ 3E3B 15 2B 82 20                  dw      COMPILE, BRANCH
 864+ 3E3F 69 28 44 27                  dw      HERE, ZERO, COMMA
 864+ 3E43 7F 28
 865+ 3E45 D4 25 52 27                  dw      SWAP, TWO, THEN
 865+ 3E49 12 3E
 866+ 3E4B 52 27                        dw      TWO
 867+ 3E4D 02 25                        dw      EXIT
 868+ 3E4F
 869+ 3E4F              //  ______________________________________________________________________
 870+ 3E4F              //
 871+ 3E4F              // begin        ( -- a 1 ) \ compile-time
 872+ 3E4F              // BEGIN ... AGAIN
 873+ 3E4F              // BEGIN ... f UNTIL
 874+ 3E4F              // BEGIN ... f WHILE ... REPEAT
 875+ 3E4F                              Colon_Def BEGIN, "BEGIN", is_immediate
 875+ 3E4F             >                New_Def  BEGIN, "BEGIN", Enter_Ptr, is_immediate ; ok
 875+ 3E4F             >
 875+ 3E4F             >Dict_Ptr        defl    $
 875+ 3E4F             >
 875+ 3E4F             >//              ______________________________________________________________________
 875+ 3E4F             >//              Heap part
 875+ 3E4F             >
 875+ 3E4F             >
 875+ 3E4F             >                org     (Heap_Ptr & $1FFF) + $E000
 875+ EC99             >
 875+ EC99             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 875+ EC99             >Latest_Definition defl  Heap_Ptr
 875+ EC99             >
 875+ EC99             >                // dummy db directives used to calculate length of namec
 875+ EC99 42 45 47 49 >                db      "BEGIN"
 875+ EC9D 4E          >
 875+ EC9E             >len_NFA         defl    $ - temp_NFA
 875+ EC9E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 875+ EC99             >
 875+ EC99 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 875+ EC9A 42 45 47 49 >                db      "BEGIN"               // name string in 7-bit ascii, but
 875+ EC9E 4E          >
 875+ EC9F             >                org     $-1                 // alter last byte of Name just above to set
 875+ EC9E CE          >                db      {b $} | END_BIT     // msb as name end
 875+ EC9F             >
 875+ EC9F 90 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 875+ ECA1             >Prev_Ptr        defl    Heap_Ptr
 875+ ECA1             >
 875+ ECA1             >mirror_Ptr      defl    $
 875+ ECA1             >
 875+ ECA1 51 3E       >                dw      Dict_Ptr + 2        // xt
 875+ ECA3             >Heap_Ptr        defl    $ - $E000           // save current HP
 875+ ECA3             >
 875+ ECA3             >Current_HP      defl  $ - $E000             // used to set HP once!
 875+ ECA3             >
 875+ ECA3             >//              ______________________________________________________________________
 875+ ECA3             >//              Dictionary part
 875+ ECA3             >
 875+ ECA3             >                org     Dict_Ptr
 875+ 3E4F             >
 875+ 3E4F A1 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 875+ 3E51             >
 875+ 3E51             >BEGIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 875+ 3E51 CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 875+ 3E54             >
 875+ 3E54             >
 875+ 3E54             >                endif           ; ok        // for other definitions it "points" the correct handler
 875+ 3E54             >                // Use of "; ok" to suppress "warning[fwdref]"
 875+ 3E54             >
 875+ 3E54             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 876+ 3E54 BA 2A                        dw      QCOMP
 877+ 3E56 69 28                        dw      HERE
 878+ 3E58 52 27                        dw      TWO
 879+ 3E5A 02 25                        dw      EXIT
 880+ 3E5C
 881+ 3E5C              //  ______________________________________________________________________
 882+ 3E5C              //
 883+ 3E5C              // again        ( a 1 -- ) \ compile-time
 884+ 3E5C                              Colon_Def AGAIN, "AGAIN", is_immediate
 884+ 3E5C             >                New_Def  AGAIN, "AGAIN", Enter_Ptr, is_immediate ; ok
 884+ 3E5C             >
 884+ 3E5C             >Dict_Ptr        defl    $
 884+ 3E5C             >
 884+ 3E5C             >//              ______________________________________________________________________
 884+ 3E5C             >//              Heap part
 884+ 3E5C             >
 884+ 3E5C             >
 884+ 3E5C             >                org     (Heap_Ptr & $1FFF) + $E000
 884+ ECA3             >
 884+ ECA3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 884+ ECA3             >Latest_Definition defl  Heap_Ptr
 884+ ECA3             >
 884+ ECA3             >                // dummy db directives used to calculate length of namec
 884+ ECA3 41 47 41 49 >                db      "AGAIN"
 884+ ECA7 4E          >
 884+ ECA8             >len_NFA         defl    $ - temp_NFA
 884+ ECA8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 884+ ECA3             >
 884+ ECA3 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 884+ ECA4 41 47 41 49 >                db      "AGAIN"               // name string in 7-bit ascii, but
 884+ ECA8 4E          >
 884+ ECA9             >                org     $-1                 // alter last byte of Name just above to set
 884+ ECA8 CE          >                db      {b $} | END_BIT     // msb as name end
 884+ ECA9             >
 884+ ECA9 99 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 884+ ECAB             >Prev_Ptr        defl    Heap_Ptr
 884+ ECAB             >
 884+ ECAB             >mirror_Ptr      defl    $
 884+ ECAB             >
 884+ ECAB 5E 3E       >                dw      Dict_Ptr + 2        // xt
 884+ ECAD             >Heap_Ptr        defl    $ - $E000           // save current HP
 884+ ECAD             >
 884+ ECAD             >Current_HP      defl  $ - $E000             // used to set HP once!
 884+ ECAD             >
 884+ ECAD             >//              ______________________________________________________________________
 884+ ECAD             >//              Dictionary part
 884+ ECAD             >
 884+ ECAD             >                org     Dict_Ptr
 884+ 3E5C             >
 884+ 3E5C AB 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 884+ 3E5E             >
 884+ 3E5E             >AGAIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 884+ 3E5E CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 884+ 3E61             >
 884+ 3E61             >
 884+ 3E61             >                endif           ; ok        // for other definitions it "points" the correct handler
 884+ 3E61             >                // Use of "; ok" to suppress "warning[fwdref]"
 884+ 3E61             >
 884+ 3E61             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 885+ 3E61 BA 2A                        dw      QCOMP
 886+ 3E63 52 27 DE 2A                  dw      TWO, QPAIRS
 887+ 3E67 15 2B 82 20                  dw      COMPILE, BRANCH
 888+ 3E6B F2 3D                        dw      BACK
 889+ 3E6D 02 25                        dw      EXIT
 890+ 3E6F
 891+ 3E6F              //  ______________________________________________________________________
 892+ 3E6F              //
 893+ 3E6F              // until        ( a 1 -- ) \ compile-time
 894+ 3E6F                              Colon_Def UNTIL, "UNTIL", is_immediate
 894+ 3E6F             >                New_Def  UNTIL, "UNTIL", Enter_Ptr, is_immediate ; ok
 894+ 3E6F             >
 894+ 3E6F             >Dict_Ptr        defl    $
 894+ 3E6F             >
 894+ 3E6F             >//              ______________________________________________________________________
 894+ 3E6F             >//              Heap part
 894+ 3E6F             >
 894+ 3E6F             >
 894+ 3E6F             >                org     (Heap_Ptr & $1FFF) + $E000
 894+ ECAD             >
 894+ ECAD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 894+ ECAD             >Latest_Definition defl  Heap_Ptr
 894+ ECAD             >
 894+ ECAD             >                // dummy db directives used to calculate length of namec
 894+ ECAD 55 4E 54 49 >                db      "UNTIL"
 894+ ECB1 4C          >
 894+ ECB2             >len_NFA         defl    $ - temp_NFA
 894+ ECB2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 894+ ECAD             >
 894+ ECAD C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 894+ ECAE 55 4E 54 49 >                db      "UNTIL"               // name string in 7-bit ascii, but
 894+ ECB2 4C          >
 894+ ECB3             >                org     $-1                 // alter last byte of Name just above to set
 894+ ECB2 CC          >                db      {b $} | END_BIT     // msb as name end
 894+ ECB3             >
 894+ ECB3 A3 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 894+ ECB5             >Prev_Ptr        defl    Heap_Ptr
 894+ ECB5             >
 894+ ECB5             >mirror_Ptr      defl    $
 894+ ECB5             >
 894+ ECB5 71 3E       >                dw      Dict_Ptr + 2        // xt
 894+ ECB7             >Heap_Ptr        defl    $ - $E000           // save current HP
 894+ ECB7             >
 894+ ECB7             >Current_HP      defl  $ - $E000             // used to set HP once!
 894+ ECB7             >
 894+ ECB7             >//              ______________________________________________________________________
 894+ ECB7             >//              Dictionary part
 894+ ECB7             >
 894+ ECB7             >                org     Dict_Ptr
 894+ 3E6F             >
 894+ 3E6F B5 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 894+ 3E71             >
 894+ 3E71             >UNTIL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 894+ 3E71 CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 894+ 3E74             >
 894+ 3E74             >
 894+ 3E74             >                endif           ; ok        // for other definitions it "points" the correct handler
 894+ 3E74             >                // Use of "; ok" to suppress "warning[fwdref]"
 894+ 3E74             >
 894+ 3E74             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 895+ 3E74 BA 2A                        dw      QCOMP
 896+ 3E76 52 27 DE 2A                  dw      TWO, QPAIRS
 897+ 3E7A 15 2B 8F 20                  dw      COMPILE, ZBRANCH
 898+ 3E7E F2 3D                        dw      BACK
 899+ 3E80 02 25                        dw      EXIT
 900+ 3E82
 901+ 3E82              //  ______________________________________________________________________
 902+ 3E82              //
 903+ 3E82              // end          ( a 1 -- ) \ compile-time
 904+ 3E82                              Colon_Def END, "END", is_immediate
 904+ 3E82             >                New_Def  END, "END", Enter_Ptr, is_immediate ; ok
 904+ 3E82             >
 904+ 3E82             >Dict_Ptr        defl    $
 904+ 3E82             >
 904+ 3E82             >//              ______________________________________________________________________
 904+ 3E82             >//              Heap part
 904+ 3E82             >
 904+ 3E82             >
 904+ 3E82             >                org     (Heap_Ptr & $1FFF) + $E000
 904+ ECB7             >
 904+ ECB7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 904+ ECB7             >Latest_Definition defl  Heap_Ptr
 904+ ECB7             >
 904+ ECB7             >                // dummy db directives used to calculate length of namec
 904+ ECB7 45 4E 44    >                db      "END"
 904+ ECBA             >len_NFA         defl    $ - temp_NFA
 904+ ECBA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 904+ ECB7             >
 904+ ECB7 C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 904+ ECB8 45 4E 44    >                db      "END"               // name string in 7-bit ascii, but
 904+ ECBB             >                org     $-1                 // alter last byte of Name just above to set
 904+ ECBA C4          >                db      {b $} | END_BIT     // msb as name end
 904+ ECBB             >
 904+ ECBB AD 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 904+ ECBD             >Prev_Ptr        defl    Heap_Ptr
 904+ ECBD             >
 904+ ECBD             >mirror_Ptr      defl    $
 904+ ECBD             >
 904+ ECBD 84 3E       >                dw      Dict_Ptr + 2        // xt
 904+ ECBF             >Heap_Ptr        defl    $ - $E000           // save current HP
 904+ ECBF             >
 904+ ECBF             >Current_HP      defl  $ - $E000             // used to set HP once!
 904+ ECBF             >
 904+ ECBF             >//              ______________________________________________________________________
 904+ ECBF             >//              Dictionary part
 904+ ECBF             >
 904+ ECBF             >                org     Dict_Ptr
 904+ 3E82             >
 904+ 3E82 BD 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 904+ 3E84             >
 904+ 3E84             >END:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 904+ 3E84 CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 904+ 3E87             >
 904+ 3E87             >
 904+ 3E87             >                endif           ; ok        // for other definitions it "points" the correct handler
 904+ 3E87             >                // Use of "; ok" to suppress "warning[fwdref]"
 904+ 3E87             >
 904+ 3E87             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 905+ 3E87 71 3E                        dw      UNTIL
 906+ 3E89 02 25                        dw      EXIT
 907+ 3E8B
 908+ 3E8B              //  ______________________________________________________________________
 909+ 3E8B              //
 910+ 3E8B              // while        ( a1 1 -- a1 1 a2 4 ) \ compile-time
 911+ 3E8B                              Colon_Def WHILE, "WHILE", is_immediate
 911+ 3E8B             >                New_Def  WHILE, "WHILE", Enter_Ptr, is_immediate ; ok
 911+ 3E8B             >
 911+ 3E8B             >Dict_Ptr        defl    $
 911+ 3E8B             >
 911+ 3E8B             >//              ______________________________________________________________________
 911+ 3E8B             >//              Heap part
 911+ 3E8B             >
 911+ 3E8B             >
 911+ 3E8B             >                org     (Heap_Ptr & $1FFF) + $E000
 911+ ECBF             >
 911+ ECBF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 911+ ECBF             >Latest_Definition defl  Heap_Ptr
 911+ ECBF             >
 911+ ECBF             >                // dummy db directives used to calculate length of namec
 911+ ECBF 57 48 49 4C >                db      "WHILE"
 911+ ECC3 45          >
 911+ ECC4             >len_NFA         defl    $ - temp_NFA
 911+ ECC4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 911+ ECBF             >
 911+ ECBF C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 911+ ECC0 57 48 49 4C >                db      "WHILE"               // name string in 7-bit ascii, but
 911+ ECC4 45          >
 911+ ECC5             >                org     $-1                 // alter last byte of Name just above to set
 911+ ECC4 C5          >                db      {b $} | END_BIT     // msb as name end
 911+ ECC5             >
 911+ ECC5 B7 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 911+ ECC7             >Prev_Ptr        defl    Heap_Ptr
 911+ ECC7             >
 911+ ECC7             >mirror_Ptr      defl    $
 911+ ECC7             >
 911+ ECC7 8D 3E       >                dw      Dict_Ptr + 2        // xt
 911+ ECC9             >Heap_Ptr        defl    $ - $E000           // save current HP
 911+ ECC9             >
 911+ ECC9             >Current_HP      defl  $ - $E000             // used to set HP once!
 911+ ECC9             >
 911+ ECC9             >//              ______________________________________________________________________
 911+ ECC9             >//              Dictionary part
 911+ ECC9             >
 911+ ECC9             >                org     Dict_Ptr
 911+ 3E8B             >
 911+ 3E8B C7 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 911+ 3E8D             >
 911+ 3E8D             >WHILE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 911+ 3E8D CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 911+ 3E90             >
 911+ 3E90             >
 911+ 3E90             >                endif           ; ok        // for other definitions it "points" the correct handler
 911+ 3E90             >                // Use of "; ok" to suppress "warning[fwdref]"
 911+ 3E90             >
 911+ 3E90             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 912+ 3E90 FF 3D                        dw      IF
 913+ 3E92              //              dw      TWO_PLUS // ( that is 4 )
 914+ 3E92 1D 26                        dw      TWO_SWAP
 915+ 3E94 02 25                        dw      EXIT
 916+ 3E96
 917+ 3E96              //  ______________________________________________________________________
 918+ 3E96              //
 919+ 3E96              // repeat       ( a1 1 a2 4 -- ) \ compile-time
 920+ 3E96                              Colon_Def REPEAT, "REPEAT", is_immediate
 920+ 3E96             >                New_Def  REPEAT, "REPEAT", Enter_Ptr, is_immediate ; ok
 920+ 3E96             >
 920+ 3E96             >Dict_Ptr        defl    $
 920+ 3E96             >
 920+ 3E96             >//              ______________________________________________________________________
 920+ 3E96             >//              Heap part
 920+ 3E96             >
 920+ 3E96             >
 920+ 3E96             >                org     (Heap_Ptr & $1FFF) + $E000
 920+ ECC9             >
 920+ ECC9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 920+ ECC9             >Latest_Definition defl  Heap_Ptr
 920+ ECC9             >
 920+ ECC9             >                // dummy db directives used to calculate length of namec
 920+ ECC9 52 45 50 45 >                db      "REPEAT"
 920+ ECCD 41 54       >
 920+ ECCF             >len_NFA         defl    $ - temp_NFA
 920+ ECCF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 920+ ECC9             >
 920+ ECC9 C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 920+ ECCA 52 45 50 45 >                db      "REPEAT"               // name string in 7-bit ascii, but
 920+ ECCE 41 54       >
 920+ ECD0             >                org     $-1                 // alter last byte of Name just above to set
 920+ ECCF D4          >                db      {b $} | END_BIT     // msb as name end
 920+ ECD0             >
 920+ ECD0 BF 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 920+ ECD2             >Prev_Ptr        defl    Heap_Ptr
 920+ ECD2             >
 920+ ECD2             >mirror_Ptr      defl    $
 920+ ECD2             >
 920+ ECD2 98 3E       >                dw      Dict_Ptr + 2        // xt
 920+ ECD4             >Heap_Ptr        defl    $ - $E000           // save current HP
 920+ ECD4             >
 920+ ECD4             >Current_HP      defl  $ - $E000             // used to set HP once!
 920+ ECD4             >
 920+ ECD4             >//              ______________________________________________________________________
 920+ ECD4             >//              Dictionary part
 920+ ECD4             >
 920+ ECD4             >                org     Dict_Ptr
 920+ 3E96             >
 920+ 3E96 D2 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 920+ 3E98             >
 920+ 3E98             >REPEAT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 920+ 3E98 CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 920+ 3E9B             >
 920+ 3E9B             >
 920+ 3E9B             >                endif           ; ok        // for other definitions it "points" the correct handler
 920+ 3E9B             >                // Use of "; ok" to suppress "warning[fwdref]"
 920+ 3E9B             >
 920+ 3E9B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 921+ 3E9B 5E 3E                        dw      AGAIN
 922+ 3E9D              //              dw      TWO_MINUS
 923+ 3E9D 12 3E                        dw      THEN
 924+ 3E9F 02 25                        dw      EXIT
 925+ 3EA1
 926+ 3EA1              //  ______________________________________________________________________
 927+ 3EA1              //
 928+ 3EA1              // ?do-
 929+ 3EA1              // special version of "BACK" used by ?DO and LOOP
 930+ 3EA1                              Colon_Def C_DO_BACK, "?DO-", is_normal
 930+ 3EA1             >                New_Def  C_DO_BACK, "?DO-", Enter_Ptr, is_normal ; ok
 930+ 3EA1             >
 930+ 3EA1             >Dict_Ptr        defl    $
 930+ 3EA1             >
 930+ 3EA1             >//              ______________________________________________________________________
 930+ 3EA1             >//              Heap part
 930+ 3EA1             >
 930+ 3EA1             >
 930+ 3EA1             >                org     (Heap_Ptr & $1FFF) + $E000
 930+ ECD4             >
 930+ ECD4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 930+ ECD4             >Latest_Definition defl  Heap_Ptr
 930+ ECD4             >
 930+ ECD4             >                // dummy db directives used to calculate length of namec
 930+ ECD4 3F 44 4F 2D >                db      "?DO-"
 930+ ECD8             >len_NFA         defl    $ - temp_NFA
 930+ ECD8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 930+ ECD4             >
 930+ ECD4 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 930+ ECD5 3F 44 4F 2D >                db      "?DO-"               // name string in 7-bit ascii, but
 930+ ECD9             >                org     $-1                 // alter last byte of Name just above to set
 930+ ECD8 AD          >                db      {b $} | END_BIT     // msb as name end
 930+ ECD9             >
 930+ ECD9 C9 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 930+ ECDB             >Prev_Ptr        defl    Heap_Ptr
 930+ ECDB             >
 930+ ECDB             >mirror_Ptr      defl    $
 930+ ECDB             >
 930+ ECDB A3 3E       >                dw      Dict_Ptr + 2        // xt
 930+ ECDD             >Heap_Ptr        defl    $ - $E000           // save current HP
 930+ ECDD             >
 930+ ECDD             >Current_HP      defl  $ - $E000             // used to set HP once!
 930+ ECDD             >
 930+ ECDD             >//              ______________________________________________________________________
 930+ ECDD             >//              Dictionary part
 930+ ECDD             >
 930+ ECDD             >                org     Dict_Ptr
 930+ 3EA1             >
 930+ 3EA1 DB 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 930+ 3EA3             >
 930+ 3EA3             >C_DO_BACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 930+ 3EA3 CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 930+ 3EA6             >
 930+ 3EA6             >
 930+ 3EA6             >                endif           ; ok        // for other definitions it "points" the correct handler
 930+ 3EA6             >                // Use of "; ok" to suppress "warning[fwdref]"
 930+ 3EA6             >
 930+ 3EA6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 931+ 3EA6 F2 3D                        dw      BACK
 932+ 3EA8              CDoBack_Begin:
 933+ 3EA8 E9 24 27 28                  dw      SPFETCH, CSP, FETCH, SUBTRACT
 933+ 3EAC 4C 26 A8 28
 934+ 3EB0 8F 20                        dw      ZBRANCH
 935+ 3EB2 0A 00                        dw      CDoBack_While - $
 936+ 3EB4 7C 25 12 3E                  dw          TWO_PLUS, THEN
 937+ 3EB8 82 20                        dw      BRANCH
 938+ 3EBA EE FF                        dw      CDoBack_Begin - $
 939+ 3EBC              CDoBack_While:
 940+ 3EBC ED 2A 27 28                  dw      QCSP, CSP, STORE
 940+ 3EC0 56 26
 941+ 3EC2 02 25                        dw      EXIT
 942+ 3EC4
 943+ 3EC4              //  ______________________________________________________________________
 944+ 3EC4              //
 945+ 3EC4              // do
 946+ 3EC4              // DO  ... LOOP
 947+ 3EC4              // DO  ... n +LOOP
 948+ 3EC4              // ?DO ... LOOP
 949+ 3EC4              // ?DO ... n +LOOP
 950+ 3EC4                              Colon_Def DO, "DO", is_immediate
 950+ 3EC4             >                New_Def  DO, "DO", Enter_Ptr, is_immediate ; ok
 950+ 3EC4             >
 950+ 3EC4             >Dict_Ptr        defl    $
 950+ 3EC4             >
 950+ 3EC4             >//              ______________________________________________________________________
 950+ 3EC4             >//              Heap part
 950+ 3EC4             >
 950+ 3EC4             >
 950+ 3EC4             >                org     (Heap_Ptr & $1FFF) + $E000
 950+ ECDD             >
 950+ ECDD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 950+ ECDD             >Latest_Definition defl  Heap_Ptr
 950+ ECDD             >
 950+ ECDD             >                // dummy db directives used to calculate length of namec
 950+ ECDD 44 4F       >                db      "DO"
 950+ ECDF             >len_NFA         defl    $ - temp_NFA
 950+ ECDF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 950+ ECDD             >
 950+ ECDD C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 950+ ECDE 44 4F       >                db      "DO"               // name string in 7-bit ascii, but
 950+ ECE0             >                org     $-1                 // alter last byte of Name just above to set
 950+ ECDF CF          >                db      {b $} | END_BIT     // msb as name end
 950+ ECE0             >
 950+ ECE0 D4 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 950+ ECE2             >Prev_Ptr        defl    Heap_Ptr
 950+ ECE2             >
 950+ ECE2             >mirror_Ptr      defl    $
 950+ ECE2             >
 950+ ECE2 C6 3E       >                dw      Dict_Ptr + 2        // xt
 950+ ECE4             >Heap_Ptr        defl    $ - $E000           // save current HP
 950+ ECE4             >
 950+ ECE4             >Current_HP      defl  $ - $E000             // used to set HP once!
 950+ ECE4             >
 950+ ECE4             >//              ______________________________________________________________________
 950+ ECE4             >//              Dictionary part
 950+ ECE4             >
 950+ ECE4             >                org     Dict_Ptr
 950+ 3EC4             >
 950+ 3EC4 E2 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 950+ 3EC6             >
 950+ 3EC6             >DO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 950+ 3EC6 CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 950+ 3EC9             >
 950+ 3EC9             >
 950+ 3EC9             >                endif           ; ok        // for other definitions it "points" the correct handler
 950+ 3EC9             >                // Use of "; ok" to suppress "warning[fwdref]"
 950+ 3EC9             >
 950+ 3EC9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 951+ 3EC9 15 2B CE 20                  dw      COMPILE, C_DO
 952+ 3ECD 27 28 4C 26                  dw      CSP, FETCH, STORE_CSP
 952+ 3ED1 98 2A
 953+ 3ED3 69 28 59 27                  dw      HERE, THREE
 954+ 3ED7 02 25                        dw      EXIT
 955+ 3ED9
 956+ 3ED9              //  ______________________________________________________________________
 957+ 3ED9              //
 958+ 3ED9              // loop
 959+ 3ED9                              Colon_Def LOOP, "LOOP", is_immediate
 959+ 3ED9             >                New_Def  LOOP, "LOOP", Enter_Ptr, is_immediate ; ok
 959+ 3ED9             >
 959+ 3ED9             >Dict_Ptr        defl    $
 959+ 3ED9             >
 959+ 3ED9             >//              ______________________________________________________________________
 959+ 3ED9             >//              Heap part
 959+ 3ED9             >
 959+ 3ED9             >
 959+ 3ED9             >                org     (Heap_Ptr & $1FFF) + $E000
 959+ ECE4             >
 959+ ECE4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 959+ ECE4             >Latest_Definition defl  Heap_Ptr
 959+ ECE4             >
 959+ ECE4             >                // dummy db directives used to calculate length of namec
 959+ ECE4 4C 4F 4F 50 >                db      "LOOP"
 959+ ECE8             >len_NFA         defl    $ - temp_NFA
 959+ ECE8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 959+ ECE4             >
 959+ ECE4 C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 959+ ECE5 4C 4F 4F 50 >                db      "LOOP"               // name string in 7-bit ascii, but
 959+ ECE9             >                org     $-1                 // alter last byte of Name just above to set
 959+ ECE8 D0          >                db      {b $} | END_BIT     // msb as name end
 959+ ECE9             >
 959+ ECE9 DD 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 959+ ECEB             >Prev_Ptr        defl    Heap_Ptr
 959+ ECEB             >
 959+ ECEB             >mirror_Ptr      defl    $
 959+ ECEB             >
 959+ ECEB DB 3E       >                dw      Dict_Ptr + 2        // xt
 959+ ECED             >Heap_Ptr        defl    $ - $E000           // save current HP
 959+ ECED             >
 959+ ECED             >Current_HP      defl  $ - $E000             // used to set HP once!
 959+ ECED             >
 959+ ECED             >//              ______________________________________________________________________
 959+ ECED             >//              Dictionary part
 959+ ECED             >
 959+ ECED             >                org     Dict_Ptr
 959+ 3ED9             >
 959+ 3ED9 EB 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 959+ 3EDB             >
 959+ 3EDB             >LOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 959+ 3EDB CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 959+ 3EDE             >
 959+ 3EDE             >
 959+ 3EDE             >                endif           ; ok        // for other definitions it "points" the correct handler
 959+ 3EDE             >                // Use of "; ok" to suppress "warning[fwdref]"
 959+ 3EDE             >
 959+ 3EDE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 960+ 3EDE 59 27 DE 2A                  dw      THREE, QPAIRS
 961+ 3EE2 15 2B 7A 20                  dw      COMPILE, C_LOOP
 962+ 3EE6 A3 3E                        dw      C_DO_BACK
 963+ 3EE8 02 25                        dw      EXIT
 964+ 3EEA
 965+ 3EEA              //  ______________________________________________________________________
 966+ 3EEA              //
 967+ 3EEA              // +loop
 968+ 3EEA                              Colon_Def PLOOP, "+LOOP", is_immediate
 968+ 3EEA             >                New_Def  PLOOP, "+LOOP", Enter_Ptr, is_immediate ; ok
 968+ 3EEA             >
 968+ 3EEA             >Dict_Ptr        defl    $
 968+ 3EEA             >
 968+ 3EEA             >//              ______________________________________________________________________
 968+ 3EEA             >//              Heap part
 968+ 3EEA             >
 968+ 3EEA             >
 968+ 3EEA             >                org     (Heap_Ptr & $1FFF) + $E000
 968+ ECED             >
 968+ ECED             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 968+ ECED             >Latest_Definition defl  Heap_Ptr
 968+ ECED             >
 968+ ECED             >                // dummy db directives used to calculate length of namec
 968+ ECED 2B 4C 4F 4F >                db      "+LOOP"
 968+ ECF1 50          >
 968+ ECF2             >len_NFA         defl    $ - temp_NFA
 968+ ECF2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 968+ ECED             >
 968+ ECED C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 968+ ECEE 2B 4C 4F 4F >                db      "+LOOP"               // name string in 7-bit ascii, but
 968+ ECF2 50          >
 968+ ECF3             >                org     $-1                 // alter last byte of Name just above to set
 968+ ECF2 D0          >                db      {b $} | END_BIT     // msb as name end
 968+ ECF3             >
 968+ ECF3 E4 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 968+ ECF5             >Prev_Ptr        defl    Heap_Ptr
 968+ ECF5             >
 968+ ECF5             >mirror_Ptr      defl    $
 968+ ECF5             >
 968+ ECF5 EC 3E       >                dw      Dict_Ptr + 2        // xt
 968+ ECF7             >Heap_Ptr        defl    $ - $E000           // save current HP
 968+ ECF7             >
 968+ ECF7             >Current_HP      defl  $ - $E000             // used to set HP once!
 968+ ECF7             >
 968+ ECF7             >//              ______________________________________________________________________
 968+ ECF7             >//              Dictionary part
 968+ ECF7             >
 968+ ECF7             >                org     Dict_Ptr
 968+ 3EEA             >
 968+ 3EEA F5 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 968+ 3EEC             >
 968+ 3EEC             >PLOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 968+ 3EEC CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 968+ 3EEF             >
 968+ 3EEF             >
 968+ 3EEF             >                endif           ; ok        // for other definitions it "points" the correct handler
 968+ 3EEF             >                // Use of "; ok" to suppress "warning[fwdref]"
 968+ 3EEF             >
 968+ 3EEF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 969+ 3EEF 59 27 DE 2A                  dw      THREE, QPAIRS
 970+ 3EF3 15 2B 4B 20                  dw      COMPILE, C_PLOOP
 971+ 3EF7 A3 3E                        dw      C_DO_BACK
 972+ 3EF9 02 25                        dw      EXIT
 973+ 3EFB
 974+ 3EFB              //  ______________________________________________________________________
 975+ 3EFB              //
 976+ 3EFB              // ?do
 977+ 3EFB                              Colon_Def QDO, "?DO", is_immediate
 977+ 3EFB             >                New_Def  QDO, "?DO", Enter_Ptr, is_immediate ; ok
 977+ 3EFB             >
 977+ 3EFB             >Dict_Ptr        defl    $
 977+ 3EFB             >
 977+ 3EFB             >//              ______________________________________________________________________
 977+ 3EFB             >//              Heap part
 977+ 3EFB             >
 977+ 3EFB             >
 977+ 3EFB             >                org     (Heap_Ptr & $1FFF) + $E000
 977+ ECF7             >
 977+ ECF7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 977+ ECF7             >Latest_Definition defl  Heap_Ptr
 977+ ECF7             >
 977+ ECF7             >                // dummy db directives used to calculate length of namec
 977+ ECF7 3F 44 4F    >                db      "?DO"
 977+ ECFA             >len_NFA         defl    $ - temp_NFA
 977+ ECFA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 977+ ECF7             >
 977+ ECF7 C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 977+ ECF8 3F 44 4F    >                db      "?DO"               // name string in 7-bit ascii, but
 977+ ECFB             >                org     $-1                 // alter last byte of Name just above to set
 977+ ECFA CF          >                db      {b $} | END_BIT     // msb as name end
 977+ ECFB             >
 977+ ECFB ED 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 977+ ECFD             >Prev_Ptr        defl    Heap_Ptr
 977+ ECFD             >
 977+ ECFD             >mirror_Ptr      defl    $
 977+ ECFD             >
 977+ ECFD FD 3E       >                dw      Dict_Ptr + 2        // xt
 977+ ECFF             >Heap_Ptr        defl    $ - $E000           // save current HP
 977+ ECFF             >
 977+ ECFF             >Current_HP      defl  $ - $E000             // used to set HP once!
 977+ ECFF             >
 977+ ECFF             >//              ______________________________________________________________________
 977+ ECFF             >//              Dictionary part
 977+ ECFF             >
 977+ ECFF             >                org     Dict_Ptr
 977+ 3EFB             >
 977+ 3EFB FD 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 977+ 3EFD             >
 977+ 3EFD             >QDO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 977+ 3EFD CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 977+ 3F00             >
 977+ 3F00             >
 977+ 3F00             >                endif           ; ok        // for other definitions it "points" the correct handler
 977+ 3F00             >                // Use of "; ok" to suppress "warning[fwdref]"
 977+ 3F00             >
 977+ 3F00             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 978+ 3F00 15 2B A6 20                  dw      COMPILE, C_Q_DO
 979+ 3F04 27 28 4C 26                  dw      CSP, FETCH, STORE_CSP
 979+ 3F08 98 2A
 980+ 3F0A 69 28 44 27                  dw      HERE, ZERO, COMMA, ZERO
 980+ 3F0E 7F 28 44 27
 981+ 3F12 69 28 59 27                  dw      HERE, THREE
 982+ 3F16 02 25                        dw      EXIT
 983+ 3F18
 984+ 3F18              //  ______________________________________________________________________
 985+ 3F18              //
 986+ 3F18              // \
 987+ 3F18                              Colon_Def BACKSLASH, "\\", is_immediate  // this is a single back-slash
 987+ 3F18             >                New_Def  BACKSLASH, "\\", Enter_Ptr, is_immediate ; ok
 987+ 3F18             >
 987+ 3F18             >Dict_Ptr        defl    $
 987+ 3F18             >
 987+ 3F18             >//              ______________________________________________________________________
 987+ 3F18             >//              Heap part
 987+ 3F18             >
 987+ 3F18             >
 987+ 3F18             >                org     (Heap_Ptr & $1FFF) + $E000
 987+ ECFF             >
 987+ ECFF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 987+ ECFF             >Latest_Definition defl  Heap_Ptr
 987+ ECFF             >
 987+ ECFF             >                // dummy db directives used to calculate length of namec
 987+ ECFF 5C          >                db      "\\"
 987+ ED00             >len_NFA         defl    $ - temp_NFA
 987+ ED00             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 987+ ECFF             >
 987+ ECFF C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 987+ ED00 5C          >                db      "\\"               // name string in 7-bit ascii, but
 987+ ED01             >                org     $-1                 // alter last byte of Name just above to set
 987+ ED00 DC          >                db      {b $} | END_BIT     // msb as name end
 987+ ED01             >
 987+ ED01 F7 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 987+ ED03             >Prev_Ptr        defl    Heap_Ptr
 987+ ED03             >
 987+ ED03             >mirror_Ptr      defl    $
 987+ ED03             >
 987+ ED03 1A 3F       >                dw      Dict_Ptr + 2        // xt
 987+ ED05             >Heap_Ptr        defl    $ - $E000           // save current HP
 987+ ED05             >
 987+ ED05             >Current_HP      defl  $ - $E000             // used to set HP once!
 987+ ED05             >
 987+ ED05             >//              ______________________________________________________________________
 987+ ED05             >//              Dictionary part
 987+ ED05             >
 987+ ED05             >                org     Dict_Ptr
 987+ 3F18             >
 987+ 3F18 03 0D       >                dw      mirror_Ptr - $E000 + Heap_offset
 987+ 3F1A             >
 987+ 3F1A             >BACKSLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 987+ 3F1A CD EF 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 987+ 3F1D             >
 987+ 3F1D             >
 987+ 3F1D             >                endif           ; ok        // for other definitions it "points" the correct handler
 987+ 3F1D             >                // Use of "; ok" to suppress "warning[fwdref]"
 987+ 3F1D             >
 987+ 3F1D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 988+ 3F1D E5 27 4C 26                  dw      BLK, FETCH
 989+ 3F21 8F 20                        dw      ZBRANCH
 990+ 3F23 30 00                        dw      Backslash_Else_1 - $
 991+ 3F25 E5 27 4C 26                  dw          BLK, FETCH, ONE, GREATER  // BLOCK 1 is used as temp-line in INCLUDE file
 991+ 3F29 4B 27 E2 28
 992+ 3F2D 8F 20                        dw          ZBRANCH
 993+ 3F2F 18 00                        dw          Backslash_Else_2 - $
 994+ 3F31 EB 27 4C 26                  dw              TO_IN, FETCH, CL, MOD, CL
 994+ 3F35 6E 27 4C 35
 994+ 3F39 6E 27
 995+ 3F3B D4 25 A8 28                  dw              SWAP, SUBTRACT, TO_IN, PLUSSTORE
 995+ 3F3F EB 27 34 26
 996+ 3F43 82 20                        dw          BRANCH
 997+ 3F45 0A 00                        dw          Backslash_Endif_2 - $
 998+ 3F47              Backslash_Else_2:
 999+ 3F47 75 27 89 25                  dw              BBUF, CELL_MINUS, TO_IN, STORE
 999+ 3F4B EB 27 56 26
1000+ 3F4F              Backslash_Endif_2:
1001+ 3F4F 82 20                        dw      BRANCH
1002+ 3F51 10 00                        dw      Backslash_Endif_1 - $
1003+ 3F53              Backslash_Else_1:
1004+ 3F53 44 27 A9 27                  dw          ZERO, TIB, FETCH, TO_IN, FETCH, PLUS, STORE
1004+ 3F57 4C 26 EB 27
1004+ 3F5B 4C 26 55 25
1004+ 3F5F 56 26
1005+ 3F61              Backslash_Endif_1:
1006+ 3F61 02 25                        dw      EXIT
1007+ 3F63
1008+ 3F63              //  ______________________________________________________________________
1009+ 3F63              //
1010+ 3F63              // blk-fh
1011+ 3F63                              Variable_Def BLK_FH,   "BLK-FH",   1
1011+ 3F63             >                New_Def  BLK_FH, "BLK-FH", Variable_Ptr, is_normal
1011+ 3F63             >
1011+ 3F63             >Dict_Ptr        defl    $
1011+ 3F63             >
1011+ 3F63             >//              ______________________________________________________________________
1011+ 3F63             >//              Heap part
1011+ 3F63             >
1011+ 3F63             >
1011+ 3F63             >                org     (Heap_Ptr & $1FFF) + $E000
1011+ ED05             >
1011+ ED05             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1011+ ED05             >Latest_Definition defl  Heap_Ptr
1011+ ED05             >
1011+ ED05             >                // dummy db directives used to calculate length of namec
1011+ ED05 42 4C 4B 2D >                db      "BLK-FH"
1011+ ED09 46 48       >
1011+ ED0B             >len_NFA         defl    $ - temp_NFA
1011+ ED0B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1011+ ED05             >
1011+ ED05 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1011+ ED06 42 4C 4B 2D >                db      "BLK-FH"               // name string in 7-bit ascii, but
1011+ ED0A 46 48       >
1011+ ED0C             >                org     $-1                 // alter last byte of Name just above to set
1011+ ED0B C8          >                db      {b $} | END_BIT     // msb as name end
1011+ ED0C             >
1011+ ED0C FF 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1011+ ED0E             >Prev_Ptr        defl    Heap_Ptr
1011+ ED0E             >
1011+ ED0E             >mirror_Ptr      defl    $
1011+ ED0E             >
1011+ ED0E 65 3F       >                dw      Dict_Ptr + 2        // xt
1011+ ED10             >Heap_Ptr        defl    $ - $E000           // save current HP
1011+ ED10             >
1011+ ED10             >Current_HP      defl  $ - $E000             // used to set HP once!
1011+ ED10             >
1011+ ED10             >//              ______________________________________________________________________
1011+ ED10             >//              Dictionary part
1011+ ED10             >
1011+ ED10             >                org     Dict_Ptr
1011+ 3F63             >
1011+ 3F63 0E 0D       >                dw      mirror_Ptr - $E000 + Heap_offset
1011+ 3F65             >
1011+ 3F65             >BLK_FH:          if Variable_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1011+ 3F65 CD 2B 27    >                call    Variable_Ptr ; ok        // for primitive definitions  actual code
1011+ 3F68             >
1011+ 3F68             >
1011+ 3F68             >                endif           ; ok        // for other definitions it "points" the correct handler
1011+ 3F68             >                // Use of "; ok" to suppress "warning[fwdref]"
1011+ 3F68             >
1011+ 3F68             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1011+ 3F68 01 00       >                dw      1
1012+ 3F6A
1013+ 3F6A                              New_Def BLK_FNAME,   "BLK-FNAME", Create_Ptr, is_normal
1013+ 3F6A             >
1013+ 3F6A             >Dict_Ptr        defl    $
1013+ 3F6A             >
1013+ 3F6A             >//              ______________________________________________________________________
1013+ 3F6A             >//              Heap part
1013+ 3F6A             >
1013+ 3F6A             >
1013+ 3F6A             >                org     (Heap_Ptr & $1FFF) + $E000
1013+ ED10             >
1013+ ED10             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1013+ ED10             >Latest_Definition defl  Heap_Ptr
1013+ ED10             >
1013+ ED10             >                // dummy db directives used to calculate length of namec
1013+ ED10 42 4C 4B 2D >                db      "BLK-FNAME"
1013+ ED14 46 4E 41 4D >
1013+ ED18 45          >
1013+ ED19             >len_NFA         defl    $ - temp_NFA
1013+ ED19             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1013+ ED10             >
1013+ ED10 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1013+ ED11 42 4C 4B 2D >                db      "BLK-FNAME"               // name string in 7-bit ascii, but
1013+ ED15 46 4E 41 4D >
1013+ ED19 45          >
1013+ ED1A             >                org     $-1                 // alter last byte of Name just above to set
1013+ ED19 C5          >                db      {b $} | END_BIT     // msb as name end
1013+ ED1A             >
1013+ ED1A 05 0D       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1013+ ED1C             >Prev_Ptr        defl    Heap_Ptr
1013+ ED1C             >
1013+ ED1C             >mirror_Ptr      defl    $
1013+ ED1C             >
1013+ ED1C 6C 3F       >                dw      Dict_Ptr + 2        // xt
1013+ ED1E             >Heap_Ptr        defl    $ - $E000           // save current HP
1013+ ED1E             >
1013+ ED1E             >Current_HP      defl  $ - $E000             // used to set HP once!
1013+ ED1E             >
1013+ ED1E             >//              ______________________________________________________________________
1013+ ED1E             >//              Dictionary part
1013+ ED1E             >
1013+ ED1E             >                org     Dict_Ptr
1013+ 3F6A             >
1013+ 3F6A 1C 0D       >                dw      mirror_Ptr - $E000 + Heap_offset
1013+ 3F6C             >
1013+ 3F6C             >BLK_FNAME:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1013+ 3F6C CD CE 30    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
1013+ 3F6F             >
1013+ 3F6F             >
1013+ 3F6F             >                endif           ; ok        // for other definitions it "points" the correct handler
1013+ 3F6F             >                // Use of "; ok" to suppress "warning[fwdref]"
1013+ 3F6F             >
1013+ 3F6F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1014+ 3F6F 1E           Len_Filename:   db      30
1015+ 3F70 63 3A 2F 74  Blk_filename:   db      "c:/tools/vforth/!Blocks-64.bin", 0
1015+ 3F74 6F 6F 6C 73
1015+ 3F78 2F 76 66 6F
1015+ 3F7C 72 74 68 2F
1015+ 3F80 21 42 6C 6F
1015+ 3F84 63 6B 73 2D
1015+ 3F88 36 34 2E 62
1015+ 3F8C 69 6E 00
1016+ 3F8F 00 00 00...                  ds      32
1017+ 3FAF
1018+ 3FAF              Fence_Word:
1019+ 3FAF              //  ______________________________________________________________________
1020+ 3FAF              //
1021+ 3FAF
1022+ 3FAF 00           Here_Dictionary db      0
1023+ 3FB0
# file closed: C:\Zx\CSpect\Projects\vForth17_DOT/source/L3.asm
 126  3FB0
 127  3FB0              // now we save the compiled file so we can either run it or debug it
 128  3FB0                              SAVENEX OPEN "output/main.nex", ORIGIN
 129  3FB0                              SAVENEX CORE 3, 0, 0                                // Next core 3.0.0 required as minimum
 130  3FB0                              SAVENEX CFG  0
 131  3FB0                              SAVENEX BANK 2, 0
 132  3FB0                              SAVENEX AUTO
 133  3FB0                              SAVENEX CLOSE
 134  3FB0
 135  3FB0              //              PAGE 7 ;set 7 page to current slot
 136  3FB0              //              SAVEBIN "ram7.bin",$C000,$4000 ;- save 4000h begin from C000h of RAM to file
 137  3FB0              //              SAVEBIN "output/ram2.bin", $8000, 9800 ;- save 3000h begin from 8000h of RAM to file
 138  3FB0
 139  3FB0                      ////    SAVETAP "output/F16d.tap", CODE, "forth17d", ORIGIN, $2000
 140  3FB0                      ////    SAVETAP "output/F16e.tap", CODE, "forth17e", $E000, $2000
 141  3FB0
 142  3FB0                      ////    SAVEBIN "output/vforth", ORIGIN, $2000
 143  3FB0                      ////    SAVEBIN "output/vforth.bin", $E000, $2000 ;- save 2000h begin from E000h of RAM to file
 144  3FB0
 145  3FB0                              SAVEBIN "output/vforth.1", ORIGIN, $2000
 146  3FB0                              SAVEBIN "output/vforth.2", $E000, $2000 ;- save 2000h begin from E000h of RAM to file
 147  3FB0
 148  3FB0                              // To run must copy vforth and vforth.bin to /dot directory
 149  3FB0                              // then start with
 150  3FB0                              //      .vforth
 151  3FB0
 152  3FB0                              END
# file closed: C:\Zx\CSpect\Projects\vForth17_DOT/source/main.asm
