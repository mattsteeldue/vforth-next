# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/main.asm
   1  0000              //  ______________________________________________________________________
   2  0000              //
   3  0000              //  main.asm
   4  0000              //  ______________________________________________________________________
   5  0000              //
   6  0000              // v-Forth 1.6 NextZXOS version
   7  0000              // build 2021529
   8  0000              //
   9  0000              //
  10  0000              //  NextZXOS version
  11  0000              //  ______________________________________________________________________
  12  0000              //
  13  0000              //  This work is available as-is with no whatsoever warranty.
  14  0000              //  Copying, modifying and distributing this software is allowed
  15  0000              //  provided that the copyright notice is kept.
  16  0000              //  ______________________________________________________________________
  17  0000              //
  18  0000              //  by Matteo Vitturi, 1990-2021
  19  0000              //
  20  0000              //  https://sites.google.com/view/vforth/vforth15-next
  21  0000              //  https://www.oocities.org/matteo_vitturi/english/index.htm
  22  0000              //
  23  0000              //  This is the complete compiler for v.Forth for SINCLAIR ZX Spectrum Next.
  24  0000              //  Each line of this source list mustn't exceed 80 bytes.
  25  0000              //  Z80N (ZX Spectrum Next) extension is available.
  26  0000              //
  27  0000              //  This list has been tested using the following configuration:
  28  0000              //      - CSpect emulator V.2.12.30
  29  0000              //  ______________________________________________________________________
  30  0000              //
  31  0000              //  Z80 Registers usage map
  32  0000              //
  33  0000              //  AF
  34  0000              //  BC - Instruction Pointer: should be preserved during ROM/OS calls
  35  0000              //  DE - Top of Stack element. The second from top is pointed by SP
  36  0000              //  HL - Working
  37  0000              //
  38  0000              //  AF'- Sometime used for backup purpose
  39  0000              //  BC'- Not used
  40  0000              //  DE'- Not used
  41  0000              //  HL'- Not used: (saved at startup)
  42  0000              //
  43  0000              //  SP - Calculator Stack Pointer
  44  0000              //  IX - Inner interpreter "next" address pointer. This way jp (ix) is 2T-state faster than JP next
  45  0000              //  IY - (ZX System: must be preserved to interact with standard ROM)
  46  0000              //
  47  0000              //  ______________________________________________________________________
  48  0000              //
  49  0000              //  _________________
  50  0000              //
  51  0000              //  FORTH DEFINITIONS
  52  0000              //  _________________
  53  0000
  54  0000                              OPT     --zxnext
  55  0000              //  ______________________________________________________________________
  56  0000              //
  57  0000              // this controls some debugging code in L0.asm
  58  0000              //  0 for final binary release.
  59  0000              //  1 for debugging with Visual Studio Code and DeZog
  60  0000              // -1 for for binary comparison with Forth generated code.
  61  0000              DEBUGGING       equ     -1
  62  0000              //
  63  0000              //  ______________________________________________________________________
  64  0000
  65  0000                              if ( -1 == DEBUGGING )
  66  0000              ORIGIN          equ     $6380                   // for binary comparison
  67  0000                              endif
  68  0000              //  ______________________________________________________________________
  69  0000
  70  0000                              if (  0 == DEBUGGING )
  71  0000 ~            ORIGIN          equ     $6400                   // binary
  72  0000                              endif
  73  0000              //  ______________________________________________________________________
  74  0000
  75  0000                              if (  1 == DEBUGGING )
  76  0000 ~            ORIGIN          equ     $8080                   // for DeZog
  77  0000                              endif
  78  0000              //  ______________________________________________________________________
  79  0000
  80  0000                              DEVICE  ZXSPECTRUMNEXT
  81  0000
  82  0000                              ORG     ORIGIN
  83  6380
  84  6380                              if ( -1 == DEBUGGING )
  85  6380 00 00 00...                  ds 128                            // for binary comparison
  86  6384                              endif
  87  6400
  88  6400              //  ______________________________________________________________________
  89  6400              //
  90  6400              //  Naming convention for Label vs Forth correspondance
  91  6400              //  Forth words are named as they are named for real with some exception to avoid assembler syntax errors.
  92  6400              //    - Leading "0" is converted into "Z_"
  93  6400              //    - Leading "(" is converted into "C_", closing bracket is omitted
  94  6400              //    - Leading numbers are converted in letters: ONE_  TWO_ etc.
  95  6400              //    - Question mark "?" is converted into "Q" or omitted if needed / useful.
  96  6400              //    - Plus sign "+" is converted in _PLUS or ADD_ depending.
  97  6400              //    - Minus sign "-" in L (for Line), MINUS or SUBTRACT depending
  98  6400              //    - Greater-Than sign ">" in _GREATER or TO_ depending
  99  6400              //    - Equal sign "=" is converted in EQUAL
 100  6400              //    - Less-Than sign "<" in _LESS or FROM_ (or TO_ again) depending
 101  6400              //    - Asterisk sign "*" is converted in _MUL or STAR
 102  6400              //    - Slash "/" is converted in _DIV or omitted if it is clear what it means
 103  6400              //    - Exclamation mark "!" is converted in STORE
 104  6400              //    - At-Sign "@" is converted in FETCH
 105  6400              //    - Words that collides with Assembler are normally suffixed with "_OP"
 106  6400
 107  6400                              include "system.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/system.asm
   1+ 6400              //  ______________________________________________________________________
   2+ 6400              //
   3+ 6400              //  system.asm
   4+ 6400              //  ______________________________________________________________________
   5+ 6400
   6+ 6400              // Registers:
   7+ 6400              //
   8+ 6400              //      BC: Instruction Pointer
   9+ 6400              //      DE:
  10+ 6400              //      HL: W register
  11+ 6400              //      SP: Calc stack Pointer
  12+ 6400              //      IX: Inner-Interpreter Address
  13+ 6400
  14+ 6400              //  ______________________________________________________________________
  15+ 6400              //
  16+ 6400              // ZX-Spectrum standard system variables
  17+ 6400              SCR_CT          equ     $5C8C                   // SCR-CT system variable
  18+ 6400              LASTK           equ     $5C08                   // LASTK system variable
  19+ 6400              BORDCR          equ     $5C48                   // BORDCR system variable
  20+ 6400              FLAGS2          equ     $5C6A                   // for caps-lock
  21+ 6400
  22+ 6400              //  ______________________________________________________________________
  23+ 6400              //
  24+ 6400              // Flag constants
  25+ 6400              TRUE_FLAG       equ     $FFFF
  26+ 6400              FALSE_FLAG      equ     $0000
  27+ 6400
  28+ 6400              //  ______________________________________________________________________
  29+ 6400              //
  30+ 6400              // Ascii char constants
  31+ 6400              NUL_CHAR        equ     $00
  32+ 6400              COMMA_CHAR      equ     $06
  33+ 6400              BACKSPACE_CHAR  equ     $08
  34+ 6400              CR_CHAR         equ     $0D
  35+ 6400              BLANK_CHAR      equ     $20
  36+ 6400              QUOTE_CHAR      equ     "'"
  37+ 6400              DQUOTE_CHAR     equ     '"'
  38+ 6400              UNDERSCORE_CHAR equ     $5F
  39+ 6400              SOLIDBLOCK_CHAR equ     $8F
  40+ 6400              HALFBLOCK_CHAR  equ     $8C
  41+ 6400              LC_A_CHAR       equ     $61                 // lower-case "a"
  42+ 6400              LC_Z_CHAR       equ     $7A                 // lower-case "z"
  43+ 6400
  44+ 6400
  45+ 6400              //  ______________________________________________________________________
  46+ 6400              //
  47+ 6400
  48+ 6400                              // emulate something like:  ld hl,rp
  49+ 6400              ldhlrp          macro
  50+ 6400 ~                            ld      hl,(RP_Pointer)
  51+ 6400                              endm
  52+ 6400
  53+ 6400                              // emulate something like:  ld rp,hl
  54+ 6400              ldrphl          macro
  55+ 6400 ~                            ld      (RP_Pointer),hl
  56+ 6400                              endm
  57+ 6400
  58+ 6400              //  ______________________________________________________________________
  59+ 6400              //
  60+ 6400              //  Inner interpreter next-address pointer. This is 2T-state faster than "jp address"
  61+ 6400              next            macro
  62+ 6400 ~                            jp      (ix)
  63+ 6400                              endm
  64+ 6400
  65+ 6400              psh1            macro
  66+ 6400 ~                            push    hl
  67+ 6400 ~                            jp      (ix)
  68+ 6400                              endm
  69+ 6400
  70+ 6400              psh2            macro
  71+ 6400 ~                            push    de
  72+ 6400 ~                            push    hl
  73+ 6400 ~                            jp      (ix)
  74+ 6400                              endm
  75+ 6400
  76+ 6400              //  ______________________________________________________________________
  77+ 6400              //
  78+ 6400              // Bit constants in length-byte
  79+ 6400
  80+ 6400              SMUDGE_BIT      equ     %00100000               // $20
  81+ 6400              IMMEDIATE_BIT   equ     %01000000               // $40
  82+ 6400              END_BIT         equ     %10000000               // $80
  83+ 6400
  84+ 6400
  85+ 6400              //  ______________________________________________________________________
  86+ 6400              //
  87+ 6400              //  To create Forth words using this (nice) Assembler, we have to use the two following
  88+ 6400              //  pointers
  89+ 6400              temp_NFA        defl    0
  90+ 6400              last_NFA        defl    0
  91+ 6400              len_NFA         defl    0
  92+ 6400
  93+ 6400              is_code         equ     0                   // so the direct machine-code starts at CFA
  94+ 6400              is_normal       equ     0                   // so the direct machine-code starts at CFA
  95+ 6400              is_immediate    equ     IMMEDIATE_BIT       // $40 - the definition is IMMEDIATE.
  96+ 6400
  97+ 6400              //  ______________________________________________________________________
  98+ 6400              //
  99+ 6400              //  Create a new "low-level" definition
 100+ 6400              //  This macro is used in the form  Create FORTH_NAME,n,"forth_name"
 101+ 6400              //  to create a new Forth Dictionary entry the same way Forth itself would do.
 102+ 6400              //  A word begins with a Length-Byte in range 1-31. Top 3 msb are used as flags
 103+ 6400              //  see SMUDGE_BIT and IMMEDIATE_BIT constant above.
 104+ 6400              //  It is followed by the Name of the word, i.e. a string expressed in 7-bit Ascii.
 105+ 6400              //  The last character of the Name must have the msb set to signal the end of it (END_BIT)
 106+ 6400              //  This macro acts much like the standard Forth definition CREATE
 107+ 6400
 108+ 6400              New_Def         macro   label, namec, runcode, bits
 109+ 6400 ~            temp_NFA        defl    $                   // save this NFA address to temp_NFA
 110+ 6400 ~
 111+ 6400 ~                            // dummy db directives used to calculate length of namec
 112+ 6400 ~                            db      namec
 113+ 6400 ~            len_NFA         defl    $ - temp_NFA
 114+ 6400 ~                            org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 115+ 6400 ~
 116+ 6400 ~                            db      len_NFA | END_BIT | bits  // The start of NFA must have msb set to signal the beginning of the sounted string
 117+ 6400 ~                            db      namec               // name string in 7-bit ascii, but
 118+ 6400 ~                            org     $-1                 // alter last byte of Name just above to set
 119+ 6400 ~                            db      {b $} | END_BIT     // msb as name end
 120+ 6400 ~
 121+ 6400 ~                            dw      last_NFA            // Link to previous definition Name
 122+ 6400 ~            label:          if runcode != 0 ; ok        // This is the start address of the direct jp(hl)
 123+ 6400 ~                            dw      runcode ; ok        // for primitive definitions  actual code
 124+ 6400 ~                            else
 125+ 6400 ~                            dw      $ + 2   ; ok        // is pointed by CFA
 126+ 6400 ~                            endif           ; ok        // for other definitions it "points" the correct handler
 127+ 6400 ~                            // Use of "; ok" to suppress "warning[fwdref]"
 128+ 6400 ~
 129+ 6400 ~            last_NFA        defl    temp_NFA            // keep track of NFA saved above
 130+ 6400                              endm
 131+ 6400
 132+ 6400              //  ______________________________________________________________________
 133+ 6400              //
 134+ 6400              // Create a "constant"
 135+ 6400              // The constant value is compiled in first PFA cell
 136+ 6400              Constant_Def    macro   label, namec, constant_value
 137+ 6400 ~                            New_Def  label, namec, Constant_Ptr, is_normal
 138+ 6400 ~                            dw      constant_value
 139+ 6400                              endm
 140+ 6400
 141+ 6400              //  ______________________________________________________________________
 142+ 6400              //
 143+ 6400              // Create a "variable"
 144+ 6400              // The when invoked, a variable returns a pointer, the address of first PFA cell
 145+ 6400              // this allow creation of "variables" which content is  of any length
 146+ 6400              Variable_Def    macro   label, namec, initial_value
 147+ 6400 ~                            New_Def  label, namec, Variable_Ptr, is_normal
 148+ 6400 ~                            dw      initial_value
 149+ 6400                              endm
 150+ 6400
 151+ 6400              //  ______________________________________________________________________
 152+ 6400              //
 153+ 6400              // Create a "user"
 154+ 6400              // It uses a single byte as offset to calculate the address of the variable
 155+ 6400              User_Def        macro   label, namec, offset_value
 156+ 6400 ~                            New_Def  label, namec, User_Ptr, is_normal
 157+ 6400 ~                            db      offset_value
 158+ 6400                              endm
 159+ 6400
 160+ 6400              //  ______________________________________________________________________
 161+ 6400              //
 162+ 6400              // Create a "colon-definition"
 163+ 6400              // The CFA contains a small routine i.e. "call Enter_Ptr".
 164+ 6400              // The PFA, three bytes later, contains the actual Forth definition
 165+ 6400              Colon_Def       macro   label, namec, bits
 166+ 6400 ~                            New_Def  label, namec, Enter_Ptr, bits ; ok
 167+ 6400                              endm
 168+ 6400
 169+ 6400              //  ______________________________________________________________________
 170+ 6400              //
 171+ 6400
 172+ 6400              S0_system:      equ     $D0E8               // Address of top of Calc Stack
 173+ 6400              TIB_system      equ     $D0E8               // TIB grows upwards, Return-Stack downward.
 174+ 6400              R0_system:      equ     $D188               // Address of top of Return Stack. This is S0 + $00A0
 175+ 6400              USER_system:    equ     $D188               // User variables zone.
 176+ 6400              FIRST_system:   equ     $D1E4               // Address of first BUFFER
 177+ 6400              LIMIT_system:   equ     $E000               // Address of first byte beyond last BUFFER
 178+ 6400
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/system.asm
 108  6400                              include "L0.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L0.asm
   1+ 6400              //  ______________________________________________________________________
   2+ 6400              //
   3+ 6400              //  L0.asm
   4+ 6400              //
   5+ 6400              //  Origin-Area and Level-0 definitions
   6+ 6400              //  ______________________________________________________________________
   7+ 6400
   8+ 6400
   9+ 6400              Cold_origin:
  10+ 6400 A7                           and     a
  11+ 6401 C3 49 79                     jp      ColdRoutine
  12+ 6404              Warm_origin:
  13+ 6404 37                           scf
  14+ 6405 C3 49 79                     jp      WarmRoutine
  15+ 6408
  16+ 6408              // +008
  17+ 6408 E6 D0        SP_Basic:       dw      $D0E6               // These are bits with some "standard" meaning... 0101
  18+ 640A
  19+ 640A              // +00A
  20+ 640A 00 0E                        dw      $0E00
  21+ 640C
  22+ 640C              // +00C
  23+ 640C FD 86        Latest_origin:  dw      Latest_Definition   // Latest word (used in Cold_Start)
  24+ 640E
  25+ 640E              // +00E
  26+ 640E 0C 00        DEL_Char_Ptr:   dw      $000C               // This is the characther used as "Back-Space"
  27+ 6410
  28+ 6410              // +010
  29+ 6410 50 B2        CPU_Id          dw      $B250               // Z80 expressed in base 36
  30+ 6412
  31+ 6412              // +012
  32+ 6412 E8 D0        S0_origin:      dw      S0_system
  33+ 6414 88 D1        R0_origin:      dw      R0_system
  34+ 6416 E8 D0        TIB_origin:     dw      TIB_system
  35+ 6418 1F 00        WIDTH_origin:   dw      31
  36+ 641A 01 00        WARNING_origin: dw      1
  37+ 641C 43 87        FENCE_origin:   dw      Fence_Word
  38+ 641E 43 87        DP_origin       dw      Fence_Word
  39+ 6420 57 78        VOCLINK_origin: dw      Voclink_Ptr
  40+ 6422 E4 D1                        dw      FIRST_system
  41+ 6424 00 E0                        dw      LIMIT_system
  42+ 6426
  43+ 6426              // +026
  44+ 6426 8F           Block_Face:     db      SOLIDBLOCK_CHAR     // Caps-Lock   Cursor face
  45+ 6427 8C           Half_Face:      db      HALFBLOCK_CHAR      // Caps-unlock Cursor face
  46+ 6428 5F           Underscore_Face:db      UNDERSCORE_CHAR     // Underscore  Cursor face
  47+ 6429 00                           db      0
  48+ 642A
  49+ 642A              // +02A
  50+ 642A 00 00        IX_Echo:        dw      $0000               // Echo IX after NextOS call
  51+ 642C
  52+ 642C              // +02C
  53+ 642C 00 00        SP_Saved:       dw      $0000               // Saved SP dufing NextOS call
  54+ 642E
  55+ 642E              // +02E
  56+ 642E 88 D1        USER_Pointer:   dw      USER_system
  57+ 6430
  58+ 6430              // +030
  59+ 6430 88 D1        RP_Pointer:     dw      $d188 // R0_system
  60+ 6432
  61+ 6432              // +32
  62+ 6432              // SP_Basic        dw      0
  63+ 6432
  64+ 6432
  65+ 6432              //  ______________________________________________________________________
  66+ 6432
  67+ 6432              // from this point we can use LDHLRP and LDRPHL Assembler macros
  68+ 6432              // instead of their equivalent long sequences.
  69+ 6432
  70+ 6432              //  ______________________________________________________________________
  71+ 6432
  72+ 6432              // address for "next" - inner interpreter
  73+ 6432              // This address must always be pointed by IX
  74+ 6432              // "next" macro simply does a  jp(ix)  instruction
  75+ 6432
  76+ 6432              // Psh2_Ptr:       push    de
  77+ 6432              // Psh1_Ptr:       push    hl
  78+ 6432
  79+ 6432              Next_Ptr:       // This address must always be kept in IX: "next" relies on that
  80+ 6432
  81+ 6432                              if ( 1 == DEBUGGING )
  82+ 6432 ~                            ld      hl, Next_Breakpoint_1
  83+ 6432 ~                            and     a
  84+ 6432 ~                            sbc     hl, bc
  85+ 6432 ~                            jr      nz, Next_Continue
  86+ 6432 ~                            nop // This is where you have to put a real breakpoint to intercept BC values...
  87+ 6432                              endif
  88+ 6432
  89+ 6432              Next_Continue:
  90+ 6432 0A                           ld      a, (bc)
  91+ 6433 03                           inc     bc
  92+ 6434 6F                           ld      l, a
  93+ 6435 0A                           ld      a, (bc)
  94+ 6436 03                           inc     bc
  95+ 6437 67                           ld      h, a                // hl contains a CFA (xt) of word being executed
  96+ 6438
  97+ 6438              // Execute xt i.e. CFA held in HL
  98+ 6438              Exec_Ptr:
  99+ 6438 5E                           ld      e, (hl)
 100+ 6439 23                           inc     hl
 101+ 643A 56                           ld      d, (hl)
 102+ 643B EB                           ex      de, hl
 103+ 643C E9                           jp      (hl)                // and jump to it
 104+ 643D                                                          // there you'll find the real code or a CALL to a ;code part
 105+ 643D
 106+ 643D              //  ______________________________________________________________________
 107+ 643D              //
 108+ 643D              // lit          -- x
 109+ 643D              // puts on top of stack the value of the following word.
 110+ 643D              // it is compiled in colon definition before a literal number
 111+ 643D
 112+ 643D                              New_Def  LIT, "LIT", is_code, is_normal
 112+ 643D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 112+ 643D             >
 112+ 643D             >                // dummy db directives used to calculate length of namec
 112+ 643D 4C 49 54    >                db      "LIT"
 112+ 6440             >len_NFA         defl    $ - temp_NFA
 112+ 6440             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 112+ 643D             >
 112+ 643D 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 112+ 643E 4C 49 54    >                db      "LIT"               // name string in 7-bit ascii, but
 112+ 6441             >                org     $-1                 // alter last byte of Name just above to set
 112+ 6440 D4          >                db      {b $} | END_BIT     // msb as name end
 112+ 6441             >
 112+ 6441 00 00       >                dw      last_NFA            // Link to previous definition Name
 112+ 6443             >LIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 112+ 6443 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 112+ 6443             >                else
 112+ 6443 45 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 112+ 6445             >                endif           ; ok        // for other definitions it "points" the correct handler
 112+ 6445             >                // Use of "; ok" to suppress "warning[fwdref]"
 112+ 6445             >
 112+ 6445             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 113+ 6445
 114+ 6445 0A                           ld      a, (bc)
 115+ 6446 03                           inc     bc
 116+ 6447 6F                           ld      l, a
 117+ 6448 0A                           ld      a, (bc)
 118+ 6449 03                           inc     bc
 119+ 644A 67                           ld      h, a
 120+ 644B                              psh1
 120+ 644B E5          >                push    hl
 120+ 644C DD E9       >                jp      (ix)
 121+ 644E
 122+ 644E              //  ______________________________________________________________________
 123+ 644E              //
 124+ 644E              // execute      i*x xt -- j*x
 125+ 644E              // execution token. usually xt is given by CFA
 126+ 644E
 127+ 644E                              New_Def  EXECUTE, "EXECUTE", is_code, is_normal
 127+ 644E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 127+ 644E             >
 127+ 644E             >                // dummy db directives used to calculate length of namec
 127+ 644E 45 58 45 43 >                db      "EXECUTE"
 127+ 6452 55 54 45    >
 127+ 6455             >len_NFA         defl    $ - temp_NFA
 127+ 6455             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 127+ 644E             >
 127+ 644E 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 127+ 644F 45 58 45 43 >                db      "EXECUTE"               // name string in 7-bit ascii, but
 127+ 6453 55 54 45    >
 127+ 6456             >                org     $-1                 // alter last byte of Name just above to set
 127+ 6455 C5          >                db      {b $} | END_BIT     // msb as name end
 127+ 6456             >
 127+ 6456 3D 64       >                dw      last_NFA            // Link to previous definition Name
 127+ 6458             >EXECUTE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 127+ 6458 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 127+ 6458             >                else
 127+ 6458 5A 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 127+ 645A             >                endif           ; ok        // for other definitions it "points" the correct handler
 127+ 645A             >                // Use of "; ok" to suppress "warning[fwdref]"
 127+ 645A             >
 127+ 645A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 128+ 645A E1                           pop     hl
 129+ 645B 18 DB                        jr      Exec_Ptr
 130+ 645D
 131+ 645D
 132+ 645D              //  ______________________________________________________________________
 133+ 645D              //
 134+ 645D              // branch       --
 135+ 645D              // unconditional branch in colon definition using the following cell as an offset from current IP value
 136+ 645D              // compiled by ELSE, AGAIN and some other immediate words
 137+ 645D
 138+ 645D                              New_Def BRANCH, "BRANCH", is_code, is_normal
 138+ 645D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 138+ 645D             >
 138+ 645D             >                // dummy db directives used to calculate length of namec
 138+ 645D 42 52 41 4E >                db      "BRANCH"
 138+ 6461 43 48       >
 138+ 6463             >len_NFA         defl    $ - temp_NFA
 138+ 6463             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 138+ 645D             >
 138+ 645D 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 138+ 645E 42 52 41 4E >                db      "BRANCH"               // name string in 7-bit ascii, but
 138+ 6462 43 48       >
 138+ 6464             >                org     $-1                 // alter last byte of Name just above to set
 138+ 6463 C8          >                db      {b $} | END_BIT     // msb as name end
 138+ 6464             >
 138+ 6464 4E 64       >                dw      last_NFA            // Link to previous definition Name
 138+ 6466             >BRANCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 138+ 6466 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 138+ 6466             >                else
 138+ 6466 68 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 138+ 6468             >                endif           ; ok        // for other definitions it "points" the correct handler
 138+ 6468             >                // Use of "; ok" to suppress "warning[fwdref]"
 138+ 6468             >
 138+ 6468             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 139+ 6468              Branch_Ptr:
 140+ 6468 60                           ld      h, b
 141+ 6469 69                           ld      l, c
 142+ 646A 5E                           ld      e, (hl)
 143+ 646B 23                           inc     hl
 144+ 646C 56                           ld      d, (hl)
 145+ 646D 2B                           dec     hl                  // offset is calculated from current IP
 146+ 646E 19                           add     hl, de
 147+ 646F 4D                           ld      c, l
 148+ 6470 44                           ld      b, h
 149+ 6471                              next
 149+ 6471 DD E9       >                jp      (ix)
 150+ 6473
 151+ 6473
 152+ 6473              //  ______________________________________________________________________
 153+ 6473              //
 154+ 6473              // 0branch      f --
 155+ 6473              // conditional branch if the top-of-stack is ZERO or FALSE.
 156+ 6473              // compiled by IF, UNTIL and some other immediate words
 157+ 6473
 158+ 6473                              New_Def ZBRANCH, "0BRANCH", is_code, is_normal
 158+ 6473             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 158+ 6473             >
 158+ 6473             >                // dummy db directives used to calculate length of namec
 158+ 6473 30 42 52 41 >                db      "0BRANCH"
 158+ 6477 4E 43 48    >
 158+ 647A             >len_NFA         defl    $ - temp_NFA
 158+ 647A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 158+ 6473             >
 158+ 6473 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 158+ 6474 30 42 52 41 >                db      "0BRANCH"               // name string in 7-bit ascii, but
 158+ 6478 4E 43 48    >
 158+ 647B             >                org     $-1                 // alter last byte of Name just above to set
 158+ 647A C8          >                db      {b $} | END_BIT     // msb as name end
 158+ 647B             >
 158+ 647B 5D 64       >                dw      last_NFA            // Link to previous definition Name
 158+ 647D             >ZBRANCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 158+ 647D ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 158+ 647D             >                else
 158+ 647D 7F 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 158+ 647F             >                endif           ; ok        // for other definitions it "points" the correct handler
 158+ 647F             >                // Use of "; ok" to suppress "warning[fwdref]"
 158+ 647F             >
 158+ 647F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 159+ 647F              ZBranch_Ptr:
 160+ 647F E1                           pop     hl
 161+ 6480 7D                           ld      a, l
 162+ 6481 B4                           or      h
 163+ 6482 CA 68 64                     jp      z, Branch_Ptr
 164+ 6485 03                           inc     bc                  // if not branch, skip offset cell.
 165+ 6486 03                           inc     bc
 166+ 6487                              next
 166+ 6487 DD E9       >                jp      (ix)
 167+ 6489
 168+ 6489              //  ______________________________________________________________________
 169+ 6489              //
 170+ 6489              // (loop)       --
 171+ 6489              // compiled by +LOOP. it uses the top two values of return-stack to
 172+ 6489              // keep track of index and limit
 173+ 6489                              New_Def C_LOOP, "(LOOP)", is_code, is_normal
 173+ 6489             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 173+ 6489             >
 173+ 6489             >                // dummy db directives used to calculate length of namec
 173+ 6489 28 4C 4F 4F >                db      "(LOOP)"
 173+ 648D 50 29       >
 173+ 648F             >len_NFA         defl    $ - temp_NFA
 173+ 648F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 173+ 6489             >
 173+ 6489 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 173+ 648A 28 4C 4F 4F >                db      "(LOOP)"               // name string in 7-bit ascii, but
 173+ 648E 50 29       >
 173+ 6490             >                org     $-1                 // alter last byte of Name just above to set
 173+ 648F A9          >                db      {b $} | END_BIT     // msb as name end
 173+ 6490             >
 173+ 6490 73 64       >                dw      last_NFA            // Link to previous definition Name
 173+ 6492             >C_LOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 173+ 6492 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 173+ 6492             >                else
 173+ 6492 94 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 173+ 6494             >                endif           ; ok        // for other definitions it "points" the correct handler
 173+ 6494             >                // Use of "; ok" to suppress "warning[fwdref]"
 173+ 6494             >
 173+ 6494             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 174+ 6494
 175+ 6494
 176+ 6494 11 01 00                     ld      de, 1               // bc contains increment of 1
 177+ 6497
 178+ 6497
 179+ 6497
 180+ 6497
 181+ 6497
 182+ 6497
 183+ 6497
 184+ 6497
 185+ 6497              Loop_Ptr:
 186+ 6497                              ldhlrp                      // ld hl,rp macro 30h +Origin
 186+ 6497 2A 30 64    >                ld      hl,(RP_Pointer)
 187+ 649A 7E                           ld      a, (hl)             // hl points to loop-index, add increment de to it.
 188+ 649B 83                           add     e
 189+ 649C 77                           ld      (hl), a
 190+ 649D 5F                           ld      e, a
 191+ 649E 23                           inc     hl
 192+ 649F 7E                           ld      a, (hl)
 193+ 64A0 8A                           adc     d
 194+ 64A1 77                           ld      (hl),a
 195+ 64A2 23                           inc     hl                  // hl now points to loop-limit
 196+ 64A3 CB 7A                        bit     7, d                // keep increment-sign just before overwriting d
 197+ 64A5 57                           ld      d, a
 198+ 64A6 20 07                        jr      nz, Loop_NegativeIncrement
 199+ 64A8
 200+ 64A8 7B                               ld      a, e
 201+ 64A9 96                               sub     (hl)
 202+ 64AA 7A                               ld      a, d
 203+ 64AB 23                               inc     hl
 204+ 64AC 9E                               sbc     (hl)
 205+ 64AD 18 05                        jr      Loop_Endif              // else
 206+ 64AF              Loop_NegativeIncrement:
 207+ 64AF 7E                               ld      a, (hl)
 208+ 64B0 93                               sub     e
 209+ 64B1 23                               inc     hl
 210+ 64B2 7E                               ld      a, (hl)
 211+ 64B3 9A                               sbc     d
 212+ 64B4              Loop_Endif:
 213+ 64B4
 214+ 64B4 FA 68 64                     jp      m, Branch_Ptr       // perform branch consuming following cell
 215+ 64B7
 216+ 64B7 23                           inc     hl
 217+ 64B8                              ldrphl                      // ld rp,hl macro 30h +Origin
 217+ 64B8 22 30 64    >                ld      (RP_Pointer),hl
 218+ 64BB
 219+ 64BB 03                           inc     bc                  // skip branch-style offset
 220+ 64BC 03                           inc     bc
 221+ 64BD                              next
 221+ 64BD DD E9       >                jp      (ix)
 222+ 64BF
 223+ 64BF              //  ______________________________________________________________________
 224+ 64BF              //
 225+ 64BF              // (+loop)       n --
 226+ 64BF              // same as (LOOP) but index is incremented by n (instead of just 1)
 227+ 64BF              // compiled by +LOOP.
 228+ 64BF                              New_Def C_PLOOP, "(+LOOP)", is_code, is_normal
 228+ 64BF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 228+ 64BF             >
 228+ 64BF             >                // dummy db directives used to calculate length of namec
 228+ 64BF 28 2B 4C 4F >                db      "(+LOOP)"
 228+ 64C3 4F 50 29    >
 228+ 64C6             >len_NFA         defl    $ - temp_NFA
 228+ 64C6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 228+ 64BF             >
 228+ 64BF 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 228+ 64C0 28 2B 4C 4F >                db      "(+LOOP)"               // name string in 7-bit ascii, but
 228+ 64C4 4F 50 29    >
 228+ 64C7             >                org     $-1                 // alter last byte of Name just above to set
 228+ 64C6 A9          >                db      {b $} | END_BIT     // msb as name end
 228+ 64C7             >
 228+ 64C7 89 64       >                dw      last_NFA            // Link to previous definition Name
 228+ 64C9             >C_PLOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 228+ 64C9 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 228+ 64C9             >                else
 228+ 64C9 CB 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 228+ 64CB             >                endif           ; ok        // for other definitions it "points" the correct handler
 228+ 64CB             >                // Use of "; ok" to suppress "warning[fwdref]"
 228+ 64CB             >
 228+ 64CB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 229+ 64CB D1                           pop     de
 230+ 64CC C3 97 64                     jp      Loop_Ptr
 231+ 64CF
 232+ 64CF              //  ______________________________________________________________________
 233+ 64CF              //
 234+ 64CF              // (?do)        lim ind --
 235+ 64CF              // compiled by ?DO to make a loop checking for lim == ind first
 236+ 64CF              // at run-time (?DO) must be followed by a BRANCH offset
 237+ 64CF              // used to skip the loop if lim == ind
 238+ 64CF                              New_Def C_Q_DO, "(?DO)", is_code, is_normal
 238+ 64CF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 238+ 64CF             >
 238+ 64CF             >                // dummy db directives used to calculate length of namec
 238+ 64CF 28 3F 44 4F >                db      "(?DO)"
 238+ 64D3 29          >
 238+ 64D4             >len_NFA         defl    $ - temp_NFA
 238+ 64D4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 238+ 64CF             >
 238+ 64CF 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 238+ 64D0 28 3F 44 4F >                db      "(?DO)"               // name string in 7-bit ascii, but
 238+ 64D4 29          >
 238+ 64D5             >                org     $-1                 // alter last byte of Name just above to set
 238+ 64D4 A9          >                db      {b $} | END_BIT     // msb as name end
 238+ 64D5             >
 238+ 64D5 BF 64       >                dw      last_NFA            // Link to previous definition Name
 238+ 64D7             >C_Q_DO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 238+ 64D7 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 238+ 64D7             >                else
 238+ 64D7 D9 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 238+ 64D9             >                endif           ; ok        // for other definitions it "points" the correct handler
 238+ 64D9             >                // Use of "; ok" to suppress "warning[fwdref]"
 238+ 64D9             >
 238+ 64D9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 239+ 64D9 D1                           pop     de                  // de has the index
 240+ 64DA E1                           pop     hl                  // hl has the limit
 241+ 64DB E5                           push    hl
 242+ 64DC D5                           push    de
 243+ 64DD A7                           and     a                   // reset carry flag
 244+ 64DE ED 52                        sbc     hl, de              // compute limit - index
 245+ 64E0 20 05                        jr      nz, Do_Ptr          // if zero then don't even begin loop
 246+ 64E2 D1                               pop     de
 247+ 64E3 E1                               pop     hl
 248+ 64E4
 249+ 64E4 C3 68 64                         jp      Branch_Ptr          // perform branch consuming following cell
 250+ 64E7              Do_Ptr:
 251+ 64E7                              ldhlrp                      // prepare RP
 251+ 64E7 2A 30 64    >                ld      hl,(RP_Pointer)
 252+ 64EA 2B                           dec     hl
 253+ 64EB 2B                           dec     hl
 254+ 64EC 2B                           dec     hl
 255+ 64ED 2B                           dec     hl
 256+ 64EE                              ldrphl
 256+ 64EE 22 30 64    >                ld      (RP_Pointer),hl
 257+ 64F1
 258+ 64F1                              // store index as top RP
 259+ 64F1 D1                           pop     de
 260+ 64F2 73                           ld      (hl), e
 261+ 64F3 23                           inc     hl
 262+ 64F4 72                           ld      (hl), d
 263+ 64F5 23                           inc     hl
 264+ 64F6                              // stores lim as second from top RP
 265+ 64F6 D1                           pop     de
 266+ 64F7 73                           ld      (hl), e
 267+ 64F8 23                           inc     hl
 268+ 64F9 72                           ld      (hl), d
 269+ 64FA
 270+ 64FA                              // skip branch-style offseet
 271+ 64FA 03                           inc     bc
 272+ 64FB 03                           inc     bc
 273+ 64FC                              next
 273+ 64FC DD E9       >                jp      (ix)
 274+ 64FE
 275+ 64FE              //  ______________________________________________________________________
 276+ 64FE              //
 277+ 64FE              // (do)        lim ind --
 278+ 64FE              // compiled by DO to make a loop checking for lim == ind first
 279+ 64FE              // this is a simpler version of (?DO)
 280+ 64FE                              New_Def C_DO, "(DO)", is_code, is_normal
 280+ 64FE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 280+ 64FE             >
 280+ 64FE             >                // dummy db directives used to calculate length of namec
 280+ 64FE 28 44 4F 29 >                db      "(DO)"
 280+ 6502             >len_NFA         defl    $ - temp_NFA
 280+ 6502             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 280+ 64FE             >
 280+ 64FE 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 280+ 64FF 28 44 4F 29 >                db      "(DO)"               // name string in 7-bit ascii, but
 280+ 6503             >                org     $-1                 // alter last byte of Name just above to set
 280+ 6502 A9          >                db      {b $} | END_BIT     // msb as name end
 280+ 6503             >
 280+ 6503 CF 64       >                dw      last_NFA            // Link to previous definition Name
 280+ 6505             >C_DO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 280+ 6505 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 280+ 6505             >                else
 280+ 6505 07 65       >                dw      $ + 2   ; ok        // is pointed by CFA
 280+ 6507             >                endif           ; ok        // for other definitions it "points" the correct handler
 280+ 6507             >                // Use of "; ok" to suppress "warning[fwdref]"
 280+ 6507             >
 280+ 6507             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 281+ 6507 0B                           dec     bc                  // prepare IP beforehand
 282+ 6508 0B                           dec     bc                  // to balance the two final inc bc in (?do)
 283+ 6509 C3 E7 64                     jp      Do_Ptr
 284+ 650C
 285+ 650C              //  ______________________________________________________________________
 286+ 650C              //
 287+ 650C              // i            -- n
 288+ 650C              // used between DO and LOOP or between DO e +LOOP to copy on top of stack
 289+ 650C              // the current value of the index-loop
 290+ 650C                              New_Def I, "I", is_code, is_normal
 290+ 650C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 290+ 650C             >
 290+ 650C             >                // dummy db directives used to calculate length of namec
 290+ 650C 49          >                db      "I"
 290+ 650D             >len_NFA         defl    $ - temp_NFA
 290+ 650D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 290+ 650C             >
 290+ 650C 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 290+ 650D 49          >                db      "I"               // name string in 7-bit ascii, but
 290+ 650E             >                org     $-1                 // alter last byte of Name just above to set
 290+ 650D C9          >                db      {b $} | END_BIT     // msb as name end
 290+ 650E             >
 290+ 650E FE 64       >                dw      last_NFA            // Link to previous definition Name
 290+ 6510             >I:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 290+ 6510 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 290+ 6510             >                else
 290+ 6510 12 65       >                dw      $ + 2   ; ok        // is pointed by CFA
 290+ 6512             >                endif           ; ok        // for other definitions it "points" the correct handler
 290+ 6512             >                // Use of "; ok" to suppress "warning[fwdref]"
 290+ 6512             >
 290+ 6512             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 291+ 6512              I_Ptr:
 292+ 6512
 293+ 6512                              ldhlrp
 293+ 6512 2A 30 64    >                ld      hl,(RP_Pointer)
 294+ 6515 5E                           ld      e, (hl)
 295+ 6516 23                           inc     hl
 296+ 6517 56                           ld      d, (hl)
 297+ 6518 D5                           push    de
 298+ 6519                              next
 298+ 6519 DD E9       >                jp      (ix)
 299+ 651B
 300+ 651B              //  ______________________________________________________________________
 301+ 651B              //
 302+ 651B              // digit        c n -- u 1  |  0
 303+ 651B              // convert a character c using base n
 304+ 651B              // returns a unsigned number and a true flag
 305+ 651B              // or just a false flag if the conversion fails
 306+ 651B                              New_Def DIGIT, "DIGIT", is_code, is_normal
 306+ 651B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 306+ 651B             >
 306+ 651B             >                // dummy db directives used to calculate length of namec
 306+ 651B 44 49 47 49 >                db      "DIGIT"
 306+ 651F 54          >
 306+ 6520             >len_NFA         defl    $ - temp_NFA
 306+ 6520             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 306+ 651B             >
 306+ 651B 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 306+ 651C 44 49 47 49 >                db      "DIGIT"               // name string in 7-bit ascii, but
 306+ 6520 54          >
 306+ 6521             >                org     $-1                 // alter last byte of Name just above to set
 306+ 6520 D4          >                db      {b $} | END_BIT     // msb as name end
 306+ 6521             >
 306+ 6521 0C 65       >                dw      last_NFA            // Link to previous definition Name
 306+ 6523             >DIGIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 306+ 6523 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 306+ 6523             >                else
 306+ 6523 25 65       >                dw      $ + 2   ; ok        // is pointed by CFA
 306+ 6525             >                endif           ; ok        // for other definitions it "points" the correct handler
 306+ 6525             >                // Use of "; ok" to suppress "warning[fwdref]"
 306+ 6525             >
 306+ 6525             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 307+ 6525 E1                           pop     hl                  // l has the base
 308+ 6526 D1                           pop     de                  // e has the digit
 309+ 6527 7B                           ld      a, e
 310+ 6528 FE 60                        cp      $60                 // check if lowercase
 311+ 652A 38 02                        jr      c, Digit_Uppercase
 312+ 652C D6 20                            sub     $20                 // quick'n'dirty uppercase
 313+ 652E              Digit_Uppercase:
 314+ 652E D6 30                        sub     $30
 315+ 6530 38 15                        jr      c, Digit_Fail       // fail when character < "0"
 316+ 6532 FE 0A                            cp      $0A
 317+ 6534 38 06                            jr      c, Digit_Decimal    // perhaps is not decimal
 318+ 6536 D6 07                                sub     7                   // try hex and subtract 7
 319+ 6538 FE 0A                                cp      $0A
 320+ 653A 38 0B                                jr      c,  Digit_Fail      // it is not hex !
 321+ 653C
 322+ 653C              Digit_Decimal:
 323+ 653C                              // compare digit
 324+ 653C BD                           cp      l                   // compare with base
 325+ 653D
 326+ 653D 30 08                        jr      nc, Digit_Fail      // fail when greater than base
 327+ 653F 5F                               ld      e, a                // digit is returned as second from TOS
 328+ 6540 21 01 00                         ld      hl, 1
 329+ 6543
 330+ 6543                                  psh2
 330+ 6543 D5          >                push    de
 330+ 6544 E5          >                push    hl
 330+ 6545 DD E9       >                jp      (ix)
 331+ 6547              Digit_Fail:
 332+ 6547 21 00 00                     ld      hl, 0
 333+ 654A                              psh1
 333+ 654A E5          >                push    hl
 333+ 654B DD E9       >                jp      (ix)
 334+ 654D
 335+ 654D              //  ______________________________________________________________________
 336+ 654D              //
 337+ 654D              //  parametric uppercase routine
 338+ 654D              //  depending on the following op-code the routine can be by-passed
 339+ 654D              //  changing the behaviour of some callers.
 340+ 654D              //  If it is "ret" then the system is Case-Sensitive
 341+ 654D              //  If it is "Nop" then the system is Case-Insensitive
 342+ 654D              //  Only A register is touched.
 343+ 654D 00           Case_Sensitive: nop                         // Default is case-insensitive.
 344+ 654E              Case_Upper:
 345+ 654E FE 61                        cp      LC_A_CHAR           // lower-case "a"
 346+ 6550 D8                           ret     c                   // no change if A < "a"
 347+ 6551 FE 7B                        cp      LC_Z_CHAR + 1       // lower-case "z" + 1
 348+ 6553 D0                           ret     nc                  // no change if A > "z"
 349+ 6554 D6 20                        sub     $20                 // Make uppercase if A in ["a".."z"]
 350+ 6556 C9                           ret
 351+ 6557
 352+ 6557              //  ______________________________________________________________________
 353+ 6557              //
 354+ 6557              //  caseon      --
 355+ 6557              // set system case-sensitivity on
 356+ 6557              // it patches a RET/NOP at the beginning of the uppercase-routine
 357+ 6557                              New_Def CASEON, "CASEON", is_code, is_normal
 357+ 6557             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 357+ 6557             >
 357+ 6557             >                // dummy db directives used to calculate length of namec
 357+ 6557 43 41 53 45 >                db      "CASEON"
 357+ 655B 4F 4E       >
 357+ 655D             >len_NFA         defl    $ - temp_NFA
 357+ 655D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 357+ 6557             >
 357+ 6557 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 357+ 6558 43 41 53 45 >                db      "CASEON"               // name string in 7-bit ascii, but
 357+ 655C 4F 4E       >
 357+ 655E             >                org     $-1                 // alter last byte of Name just above to set
 357+ 655D CE          >                db      {b $} | END_BIT     // msb as name end
 357+ 655E             >
 357+ 655E 1B 65       >                dw      last_NFA            // Link to previous definition Name
 357+ 6560             >CASEON:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 357+ 6560 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 357+ 6560             >                else
 357+ 6560 62 65       >                dw      $ + 2   ; ok        // is pointed by CFA
 357+ 6562             >                endif           ; ok        // for other definitions it "points" the correct handler
 357+ 6562             >                // Use of "; ok" to suppress "warning[fwdref]"
 357+ 6562             >
 357+ 6562             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 358+ 6562 3E C9                        ld      a, $C9              // "ret"
 359+ 6564 32 4D 65                     ld      (Case_Sensitive), a
 360+ 6567                              next
 360+ 6567 DD E9       >                jp      (ix)
 361+ 6569
 362+ 6569              //  ______________________________________________________________________
 363+ 6569              //
 364+ 6569              //  caseoff     --
 365+ 6569              // set system case-sensitivity on
 366+ 6569              // it patches a RET/NOP at the beginning of the uppercase-routine
 367+ 6569                              New_Def CASEOFF, "CASEOFF", is_code, is_normal
 367+ 6569             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 367+ 6569             >
 367+ 6569             >                // dummy db directives used to calculate length of namec
 367+ 6569 43 41 53 45 >                db      "CASEOFF"
 367+ 656D 4F 46 46    >
 367+ 6570             >len_NFA         defl    $ - temp_NFA
 367+ 6570             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 367+ 6569             >
 367+ 6569 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 367+ 656A 43 41 53 45 >                db      "CASEOFF"               // name string in 7-bit ascii, but
 367+ 656E 4F 46 46    >
 367+ 6571             >                org     $-1                 // alter last byte of Name just above to set
 367+ 6570 C6          >                db      {b $} | END_BIT     // msb as name end
 367+ 6571             >
 367+ 6571 57 65       >                dw      last_NFA            // Link to previous definition Name
 367+ 6573             >CASEOFF:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 367+ 6573 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 367+ 6573             >                else
 367+ 6573 75 65       >                dw      $ + 2   ; ok        // is pointed by CFA
 367+ 6575             >                endif           ; ok        // for other definitions it "points" the correct handler
 367+ 6575             >                // Use of "; ok" to suppress "warning[fwdref]"
 367+ 6575             >
 367+ 6575             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 368+ 6575 3E 00                        ld      a, $00              // "nop"
 369+ 6577 32 4D 65                     ld      (Case_Sensitive), a
 370+ 657A                              next
 370+ 657A DD E9       >                jp      (ix)
 371+ 657C
 372+ 657C              //  ______________________________________________________________________
 373+ 657C              //
 374+ 657C              //  upper       c1 -- c1 | c2
 375+ 657C              // character on top of stack is forced to Uppercase.
 376+ 657C                              New_Def UPPER, "UPPER", is_code, is_normal
 376+ 657C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 376+ 657C             >
 376+ 657C             >                // dummy db directives used to calculate length of namec
 376+ 657C 55 50 50 45 >                db      "UPPER"
 376+ 6580 52          >
 376+ 6581             >len_NFA         defl    $ - temp_NFA
 376+ 6581             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 376+ 657C             >
 376+ 657C 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 376+ 657D 55 50 50 45 >                db      "UPPER"               // name string in 7-bit ascii, but
 376+ 6581 52          >
 376+ 6582             >                org     $-1                 // alter last byte of Name just above to set
 376+ 6581 D2          >                db      {b $} | END_BIT     // msb as name end
 376+ 6582             >
 376+ 6582 69 65       >                dw      last_NFA            // Link to previous definition Name
 376+ 6584             >UPPER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 376+ 6584 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 376+ 6584             >                else
 376+ 6584 86 65       >                dw      $ + 2   ; ok        // is pointed by CFA
 376+ 6586             >                endif           ; ok        // for other definitions it "points" the correct handler
 376+ 6586             >                // Use of "; ok" to suppress "warning[fwdref]"
 376+ 6586             >
 376+ 6586             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 377+ 6586 E1                           pop     hl
 378+ 6587 7D                           ld      a, l
 379+ 6588 CD 4E 65                     call    Case_Upper
 380+ 658B 6F                           ld      l, a
 381+ 658C
 382+ 658C                              psh1
 382+ 658C E5          >                push    hl
 382+ 658D DD E9       >                jp      (ix)
 383+ 658F
 384+ 658F              //  ______________________________________________________________________
 385+ 658F              //
 386+ 658F              // (find)       addr voc -- addr 0 | cfa b 1
 387+ 658F              // vocabulary search,
 388+ 658F              // - voc is starting word's NFA
 389+ 658F              // - addr is the string to be searched for
 390+ 658F              // On success, it returns the CFA of found word, the first NFA byte
 391+ 658F              // (which contains length and some flags) and a true flag.
 392+ 658F              // On fail, a false flag  (no more: leaves addr unchanged)
 393+ 658F                              New_Def C_FIND, "(FIND)", is_code, is_normal
 393+ 658F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 393+ 658F             >
 393+ 658F             >                // dummy db directives used to calculate length of namec
 393+ 658F 28 46 49 4E >                db      "(FIND)"
 393+ 6593 44 29       >
 393+ 6595             >len_NFA         defl    $ - temp_NFA
 393+ 6595             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 393+ 658F             >
 393+ 658F 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 393+ 6590 28 46 49 4E >                db      "(FIND)"               // name string in 7-bit ascii, but
 393+ 6594 44 29       >
 393+ 6596             >                org     $-1                 // alter last byte of Name just above to set
 393+ 6595 A9          >                db      {b $} | END_BIT     // msb as name end
 393+ 6596             >
 393+ 6596 7C 65       >                dw      last_NFA            // Link to previous definition Name
 393+ 6598             >C_FIND:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 393+ 6598 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 393+ 6598             >                else
 393+ 6598 9A 65       >                dw      $ + 2   ; ok        // is pointed by CFA
 393+ 659A             >                endif           ; ok        // for other definitions it "points" the correct handler
 393+ 659A             >                // Use of "; ok" to suppress "warning[fwdref]"
 393+ 659A             >
 393+ 659A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 394+ 659A                                                              // de has dictionary pointer
 395+ 659A D1                               pop     de
 396+ 659B              Find_VocabularyLoop:
 397+ 659B E1                               pop     hl                  // string pointer to search for
 398+ 659C E5                               push    hl                  // keep it on stack too for the end.
 399+ 659D 1A                               ld      a, (de)             // save NFA length byte
 400+ 659E 08                               ex      af,af'              // for later use (!)
 401+ 659F 1A                               ld      a, (de)             // reload NFA length byte
 402+ 65A0 AE                               xor     (hl)                // check if same length
 403+ 65A1 E6 3F                            and     $3F                 // by resetting 3 high bits (flags)
 404+ 65A3                                  // word an text haven't the same length, skip to next vocabulary entry
 405+ 65A3 20 2C                            jr      nz, Find_DifferentLenght
 406+ 65A5
 407+ 65A5              Find_ThisWord:  // begin loop
 408+ 65A5 23                                   inc     hl
 409+ 65A6 13                                   inc     de
 410+ 65A7 1A                                   ld      a, (de)
 411+ 65A8                                      // case insensitive option - begin
 412+ 65A8 C5                                   push    bc
 413+ 65A9 E6 80                                and     $80                 // split A in msb and the rest
 414+ 65AB 47                                   ld      b, a
 415+ 65AC 1A                                   ld      a, (de)
 416+ 65AD E6 7F                                and     $7F                 // ... the rest (lower 7 bits)
 417+ 65AF CD 4D 65                             call    Case_Sensitive      // uppercase routine
 418+ 65B2 4F                                   ld      c, a
 419+ 65B3 7E                                   ld      a, (hl)
 420+ 65B4 CD 4D 65                             call    Case_Sensitive      // uppercase routine
 421+ 65B7 A9                                   xor     c
 422+ 65B8 A8                                   xor     b
 423+ 65B9 C1                                   pop     bc
 424+ 65BA                                      // case insensitive option - end
 425+ 65BA 87                                   add     a                   // ignore msb during compare
 426+ 65BB 20 12                                jr      nz, Find_DidntMatch  // jump if doesn't match (*)
 427+ 65BD
 428+ 65BD                                  // loop back until last byte msb is found set
 429+ 65BD                                  // that bit marks the ending char of this word
 430+ 65BD 30 E6                            jr      nc, Find_ThisWord
 431+ 65BF
 432+ 65BF                                  // match found !
 433+ 65BF 21 03 00                             ld      hl, 3               // 3 bytes for CFA offset to skip LFA
 434+ 65C2 19                                   add     hl, de
 435+ 65C3 E3                                   ex      (sp), hl            // CFA on stack and drop addr
 436+ 65C4 08                                   ex      af, af'             // retrieve NFA byte (!)
 437+ 65C5 5F                                   ld      e, a
 438+ 65C6 16 00                                ld      d, 0
 439+ 65C8
 440+ 65C8
 441+ 65C8 21 01 00                             ld      hl, 1
 442+ 65CB                                      psh2
 442+ 65CB D5          >                push    de
 442+ 65CC E5          >                push    hl
 442+ 65CD DD E9       >                jp      (ix)
 443+ 65CF
 444+ 65CF              Find_DidntMatch: // didn't match (*)
 445+ 65CF 38 05                            jr      c,  Find_WordEnd   // jump if not end of word (**)
 446+ 65D1
 447+ 65D1              Find_DifferentLenght:
 448+ 65D1                              // consume chars until the end of the word
 449+ 65D1                              // that is last byte msb is found set
 450+ 65D1 13                               inc     de
 451+ 65D2 1A                               ld      a, (de)
 452+ 65D3 87                               add     a, a
 453+ 65D4 30 FB                        jr      nc, Find_DifferentLenght
 454+ 65D6
 455+ 65D6              Find_WordEnd:   // word-end  found (**)
 456+ 65D6                              // take LFA and use it
 457+ 65D6 13                           inc     de
 458+ 65D7 EB                           ex      de, hl
 459+ 65D8 5E                           ld      e, (hl)
 460+ 65D9 23                           inc     hl
 461+ 65DA 56                           ld      d, (hl)
 462+ 65DB 7A                           ld      a, d
 463+ 65DC B3                           or      e
 464+ 65DD
 465+ 65DD                          // loop until end of vocabulary
 466+ 65DD 20 BC                    jr      nz, Find_VocabularyLoop
 467+ 65DF
 468+ 65DF E1                       pop     hl              // with this, it leaves addr unchanged
 469+ 65E0 21 00 00                 ld      hl, FALSE_FLAG
 470+ 65E3
 471+ 65E3                          psh1
 471+ 65E3 E5          >                push    hl
 471+ 65E4 DD E9       >                jp      (ix)
 472+ 65E6
 473+ 65E6              //  ______________________________________________________________________
 474+ 65E6              //
 475+ 65E6              // enclose      a c -- a  n1 n2 n3
 476+ 65E6              // starting from a, using delimiter c, determines the offsets:
 477+ 65E6              //   n1   the first character non-delimiter
 478+ 65E6              //   n2   the first delimiter after the text
 479+ 65E6              //   n3   the first character non enclosed.
 480+ 65E6              // This procedure does not go beyond a 'nul' ASCII (0x00) that represents
 481+ 65E6              // an uncoditional delimiter.
 482+ 65E6              // Examples:
 483+ 65E6              //   i:	c  c  x  x  x  c  x	 -- 2  5  6
 484+ 65E6              //  ii:	c  c  x  x  x  'nul' -- 2  5  5
 485+ 65E6              // iii:	c  c  'nul'          -- 2  3  2
 486+ 65E6                              New_Def ENCLOSE, "ENCLOSE", is_code, is_normal
 486+ 65E6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 486+ 65E6             >
 486+ 65E6             >                // dummy db directives used to calculate length of namec
 486+ 65E6 45 4E 43 4C >                db      "ENCLOSE"
 486+ 65EA 4F 53 45    >
 486+ 65ED             >len_NFA         defl    $ - temp_NFA
 486+ 65ED             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 486+ 65E6             >
 486+ 65E6 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 486+ 65E7 45 4E 43 4C >                db      "ENCLOSE"               // name string in 7-bit ascii, but
 486+ 65EB 4F 53 45    >
 486+ 65EE             >                org     $-1                 // alter last byte of Name just above to set
 486+ 65ED C5          >                db      {b $} | END_BIT     // msb as name end
 486+ 65EE             >
 486+ 65EE 8F 65       >                dw      last_NFA            // Link to previous definition Name
 486+ 65F0             >ENCLOSE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 486+ 65F0 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 486+ 65F0             >                else
 486+ 65F0 F2 65       >                dw      $ + 2   ; ok        // is pointed by CFA
 486+ 65F2             >                endif           ; ok        // for other definitions it "points" the correct handler
 486+ 65F2             >                // Use of "; ok" to suppress "warning[fwdref]"
 486+ 65F2             >
 486+ 65F2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 487+ 65F2 D1                           pop     de                  //  e has the character
 488+ 65F3 E1                           pop     hl                  // hl has the string address
 489+ 65F4 E5                           push    hl
 490+ 65F5 7B                           ld      a, e
 491+ 65F6 11 FF FF                     ld      de, -1              // let's start from -1
 492+ 65F9 2B                           dec     hl
 493+ 65FA              Enclose_NonDelimiter:
 494+ 65FA                              // find first non delimiter
 495+ 65FA 23                               inc     hl
 496+ 65FB 13                               inc     de
 497+ 65FC BE                               cp      (hl)
 498+ 65FD 28 FB                        jr      z, Enclose_NonDelimiter
 499+ 65FF D5                           push    de
 500+ 6600
 501+ 6600 C5                           push    bc                  // save Instruction Pointer
 502+ 6601
 503+ 6601 4F                           ld      c, a                // save char
 504+ 6602 7E                           ld      a, (hl)
 505+ 6603 A7                           and     a                   // stop if 0x00
 506+ 6604 20 07                        jr      nz, Enclose_NextChar
 507+ 6606
 508+ 6606                              /// case iii. no more character in string
 509+ 6606 C1                               pop     bc                  // restore Instruction Pointer
 510+ 6607 13                               inc     de
 511+ 6608 D5                               push    de
 512+ 6609 1B                               dec     de
 513+ 660A D5                               push    de
 514+ 660B                                  next
 514+ 660B DD E9       >                jp      (ix)
 515+ 660D              Enclose_NextChar:
 516+ 660D 79                               ld      a, c
 517+ 660E 23                               inc     hl
 518+ 660F 13                               inc     de
 519+ 6610 BE                               cp      (hl)
 520+ 6611 20 06                            jr      nz, Enclose_NonSeparator
 521+ 6613
 522+ 6613                                      // case i. first non enclosed
 523+ 6613 C1                                   pop     bc                  // restore Instruction Pointer
 524+ 6614 D5                                   push    de
 525+ 6615 13                                   inc     de
 526+ 6616 D5                                   push    de
 527+ 6617                                      next
 527+ 6617 DD E9       >                jp      (ix)
 528+ 6619              Enclose_NonSeparator:
 529+ 6619 7E                               ld      a, (hl)
 530+ 661A A7                               and     a
 531+ 661B 20 F0                        jr      nz, Enclose_NextChar
 532+ 661D
 533+ 661D                              // case ii. separator & terminator
 534+ 661D C1                           pop     bc                  // restore Instruction Pointer
 535+ 661E D5                           push    de
 536+ 661F D5                           push    de
 537+ 6620                              next
 537+ 6620 DD E9       >                jp      (ix)
 538+ 6622
 539+ 6622              //  ______________________________________________________________________
 540+ 6622              //
 541+ 6622              // (map)        a2 a1 n c1 -- c2
 542+ 6622              // translate character c using mapping string a2 and a2
 543+ 6622              // c2 = c2 if it is not translated. n is the length of bot a1 and a2.
 544+ 6622                              New_Def C_MAP, "(MAP)", is_code, is_normal
 544+ 6622             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 544+ 6622             >
 544+ 6622             >                // dummy db directives used to calculate length of namec
 544+ 6622 28 4D 41 50 >                db      "(MAP)"
 544+ 6626 29          >
 544+ 6627             >len_NFA         defl    $ - temp_NFA
 544+ 6627             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 544+ 6622             >
 544+ 6622 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 544+ 6623 28 4D 41 50 >                db      "(MAP)"               // name string in 7-bit ascii, but
 544+ 6627 29          >
 544+ 6628             >                org     $-1                 // alter last byte of Name just above to set
 544+ 6627 A9          >                db      {b $} | END_BIT     // msb as name end
 544+ 6628             >
 544+ 6628 E6 65       >                dw      last_NFA            // Link to previous definition Name
 544+ 662A             >C_MAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 544+ 662A ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 544+ 662A             >                else
 544+ 662A 2C 66       >                dw      $ + 2   ; ok        // is pointed by CFA
 544+ 662C             >                endif           ; ok        // for other definitions it "points" the correct handler
 544+ 662C             >                // Use of "; ok" to suppress "warning[fwdref]"
 544+ 662C             >
 544+ 662C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 545+ 662C D9                           exx
 546+ 662D E1                           pop     hl
 547+ 662E 7D                           ld      a, l
 548+ 662F C1                           pop     bc
 549+ 6630 E1                           pop     hl
 550+ 6631 50                           ld      d, b
 551+ 6632 59                           ld      e, c
 552+ 6633 ED B1                        cpir
 553+ 6635 E1                           pop     hl
 554+ 6636 20 05                        jr      nz, C_Map_Then
 554+ 6638
 555+ 6638 19                               add     hl, de
 556+ 6639 2B                               dec     hl
 557+ 663A ED 42                            sbc     hl, bc
 558+ 663C 7E                               ld      a, (hl)
 559+ 663D              C_Map_Then:
 560+ 663D 6F                           ld      l, a
 561+ 663E 26 00                        ld      h, 0
 562+ 6640 E5                           push    hl
 563+ 6641 D9                           exx
 564+ 6642                              next
 564+ 6642 DD E9       >                jp      (ix)
 565+ 6644
 566+ 6644              //  ______________________________________________________________________
 567+ 6644              //
 568+ 6644              // (compare)    a1 a2 n -- b
 569+ 6644              // this word performs a lexicographic compare of n bytes of text at address a1
 570+ 6644              // with n bytes of text at address a2. It returns numeric a value:
 571+ 6644              //  0 : if strings are equal
 572+ 6644              // +1 : if string at a1 greater than string at a2
 573+ 6644              // -1 : if string at a1 less than string at a2
 574+ 6644              // strings can be 256 bytes in length at most.
 575+ 6644                              New_Def C_COMPARE, "(COMPARE)", is_code, is_normal
 575+ 6644             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 575+ 6644             >
 575+ 6644             >                // dummy db directives used to calculate length of namec
 575+ 6644 28 43 4F 4D >                db      "(COMPARE)"
 575+ 6648 50 41 52 45 >
 575+ 664C 29          >
 575+ 664D             >len_NFA         defl    $ - temp_NFA
 575+ 664D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 575+ 6644             >
 575+ 6644 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 575+ 6645 28 43 4F 4D >                db      "(COMPARE)"               // name string in 7-bit ascii, but
 575+ 6649 50 41 52 45 >
 575+ 664D 29          >
 575+ 664E             >                org     $-1                 // alter last byte of Name just above to set
 575+ 664D A9          >                db      {b $} | END_BIT     // msb as name end
 575+ 664E             >
 575+ 664E 22 66       >                dw      last_NFA            // Link to previous definition Name
 575+ 6650             >C_COMPARE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 575+ 6650 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 575+ 6650             >                else
 575+ 6650 52 66       >                dw      $ + 2   ; ok        // is pointed by CFA
 575+ 6652             >                endif           ; ok        // for other definitions it "points" the correct handler
 575+ 6652             >                // Use of "; ok" to suppress "warning[fwdref]"
 575+ 6652             >
 575+ 6652             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 576+ 6652 E1                           pop     hl                  // Number of bytes
 577+ 6653 7D                           ld      a, l
 578+ 6654 E1                           pop     hl                  // hl points string a2
 579+ 6655 D1                           pop     de                  // hl points string a1
 580+ 6656 C5                           push    bc                  // Instruction pointer on stack
 581+ 6657 47                           ld      b, a
 582+ 6658              C_Compare_Loop:
 583+ 6658 7E                               ld      a, (hl)
 584+ 6659 CD 4D 65                         call    Case_Sensitive
 585+ 665C 4F                               ld      c, a
 586+ 665D 1A                               ld      a, (de)
 587+ 665E CD 4D 65                         call    Case_Sensitive
 588+ 6661 B9                               cp      c
 589+ 6662 13                               inc     de
 590+ 6663 23                               inc     hl
 591+ 6664 28 0E                            jr      z, C_Compare_Equal
 592+ 6666 38 05                                jr      c, C_Compare_NotLessThan  // If LessThan
 593+ 6668 21 01 00                                 ld      hl, 1               // a1 gt a2
 594+ 666B 18 03                                jr      C_Compare_Then      // Else
 595+ 666D              C_Compare_NotLessThan:
 596+ 666D 21 FF FF                                 ld      hl, -1              // a1 lt a2
 597+ 6670              C_Compare_Then:                                 // Endif
 598+ 6670 C1                                   pop     bc              // restore Instruction Pointer
 599+ 6671
 600+ 6671                                      psh1
 600+ 6671 E5          >                push    hl
 600+ 6672 DD E9       >                jp      (ix)
 601+ 6674
 602+ 6674              C_Compare_Equal:
 603+ 6674 10 E2                        djnz    C_Compare_Loop
 604+ 6676 21 00 00                     ld      hl, 0               // a1 eq a2
 605+ 6679 C1                           pop     bc                  // restore Instruction Pointer
 606+ 667A
 607+ 667A                              psh1
 607+ 667A E5          >                push    hl
 607+ 667B DD E9       >                jp      (ix)
 608+ 667D
 609+ 667D              //  ______________________________________________________________________
 610+ 667D              //
 611+ 667D              // emitc        c --
 612+ 667D              // low level emit, calls ROM routine at #10 to send a character to
 613+ 667D              // the the current channel (see SELECT to change stream-channel)
 614+ 667D                              New_Def EMITC, "EMITC", is_code, is_normal
 614+ 667D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 614+ 667D             >
 614+ 667D             >                // dummy db directives used to calculate length of namec
 614+ 667D 45 4D 49 54 >                db      "EMITC"
 614+ 6681 43          >
 614+ 6682             >len_NFA         defl    $ - temp_NFA
 614+ 6682             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 614+ 667D             >
 614+ 667D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 614+ 667E 45 4D 49 54 >                db      "EMITC"               // name string in 7-bit ascii, but
 614+ 6682 43          >
 614+ 6683             >                org     $-1                 // alter last byte of Name just above to set
 614+ 6682 C3          >                db      {b $} | END_BIT     // msb as name end
 614+ 6683             >
 614+ 6683 44 66       >                dw      last_NFA            // Link to previous definition Name
 614+ 6685             >EMITC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 614+ 6685 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 614+ 6685             >                else
 614+ 6685 87 66       >                dw      $ + 2   ; ok        // is pointed by CFA
 614+ 6687             >                endif           ; ok        // for other definitions it "points" the correct handler
 614+ 6687             >                // Use of "; ok" to suppress "warning[fwdref]"
 614+ 6687             >
 614+ 6687             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 615+ 6687 E1                           pop     hl
 616+ 6688 7D                           ld      a, l
 617+ 6689              Emitc_Ptr:
 618+ 6689 C5                           push    bc
 619+ 668A DD E5                        push    ix
 620+ 668C D7                           rst     $10
 621+ 668D DD E1                        pop     ix
 622+ 668F C1                           pop     bc
 623+ 6690 3E FF                        ld      a, 255            // max possible
 624+ 6692 32 8C 5C                     ld      (SCR_CT), a
 625+ 6695
 626+ 6695                              next
 626+ 6695 DD E9       >                jp      (ix)
 627+ 6697
 628+ 6697              Emitc_Vec:
 629+ 6697 DC 66                        dw      C_Emit_Printable  // comma
 630+ 6699 E2 66                        dw      C_Emit_Bel        // bel
 631+ 669B DC 66                        dw      C_Emit_Printable  // bs
 632+ 669D F7 66                        dw      C_Emit_Tab        // tab
 633+ 669F DC 66                        dw      C_Emit_Printable  // cr
 634+ 66A1 FD 66                        dw      C_Emit_NL         // lf (unix newline)
 635+ 66A3 DC 66                        dw      C_Emit_Printable  // blank
 636+ 66A5 DC 66                        dw      C_Emit_Printable  // blank
 637+ 66A7
 638+ 66A7              Emit_Selector_Start:
 639+ 66A7 06                           db      $06                 // comma
 640+ 66A8 07                           db      $07                 // bel
 641+ 66A9 08                           db      $08                 // bs
 642+ 66AA 09                           db      $09                 // tab
 643+ 66AB 0D                           db      $0D                 // cr
 644+ 66AC 0A                           db      $0A                 // lf (unix newline)
 645+ 66AD 20                           db      $20
 646+ 66AE              Emit_Selector_End:
 647+ 66AE 20                           db      $20
 648+ 66AF
 649+ 66AF              //  ______________________________________________________________________
 650+ 66AF              //
 651+ 66AF              // (?emit)      c1 -- c2 | c1
 652+ 66AF              // decode a character to be sent via EMIT
 653+ 66AF              // search first the Emit_Selector table, if found jump to the corresponding routine in Emit_Vector
 654+ 66AF              // the routine should resolve anything and convert the character anyway.
 655+ 66AF                              New_Def C_EMIT, "(?EMIT)", is_code, is_normal
 655+ 66AF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 655+ 66AF             >
 655+ 66AF             >                // dummy db directives used to calculate length of namec
 655+ 66AF 28 3F 45 4D >                db      "(?EMIT)"
 655+ 66B3 49 54 29    >
 655+ 66B6             >len_NFA         defl    $ - temp_NFA
 655+ 66B6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 655+ 66AF             >
 655+ 66AF 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 655+ 66B0 28 3F 45 4D >                db      "(?EMIT)"               // name string in 7-bit ascii, but
 655+ 66B4 49 54 29    >
 655+ 66B7             >                org     $-1                 // alter last byte of Name just above to set
 655+ 66B6 A9          >                db      {b $} | END_BIT     // msb as name end
 655+ 66B7             >
 655+ 66B7 7D 66       >                dw      last_NFA            // Link to previous definition Name
 655+ 66B9             >C_EMIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 655+ 66B9 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 655+ 66B9             >                else
 655+ 66B9 BB 66       >                dw      $ + 2   ; ok        // is pointed by CFA
 655+ 66BB             >                endif           ; ok        // for other definitions it "points" the correct handler
 655+ 66BB             >                // Use of "; ok" to suppress "warning[fwdref]"
 655+ 66BB             >
 655+ 66BB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 656+ 66BB D1                           pop     de
 657+ 66BC 7B                           ld      a, e                //  de has c1
 658+ 66BD E6 7F                        and     $7F                 // 7-bit ascii only
 659+ 66BF C5                           push    bc                  // save Instruction Pointer
 660+ 66C0 01 08 00                     ld      bc, Emit_Selector_End - Emit_Selector_Start + 1
 661+ 66C3 21 AE 66                     ld      hl, Emit_Selector_End
 662+ 66C6 ED B9                        cpdr                        // search for c1 in Emit_Selector table, backward
 663+ 66C8 20 0B                        jr      nz, C_Emit_Not_Found
 664+ 66CA                                  // Found then decode it
 665+ 66CA 21 97 66                         ld      hl, Emitc_Vec
 666+ 66CD 09                               add     hl, bc
 667+ 66CE 09                               add     hl, bc
 668+ 66CF 5E                               ld      e, (hl)
 669+ 66D0 23                               inc     hl
 670+ 66D1 56                               ld      d, (hl)
 671+ 66D2 EB                               ex      de, hl
 672+ 66D3 C1                               pop     bc                  // restore Instruction Pointer
 673+ 66D4 E9                               jp      (hl)                // one of the following labels
 674+ 66D5              C_Emit_Not_Found:
 675+ 66D5 C1                           pop     bc                  // restore Instruction Pointer
 676+ 66D6 FE 20                        cp      BLANK_CHAR          // cp $20 non-printable check
 677+ 66D8 30 02                        jr      nc, C_Emit_Printable
 678+ 66DA 3E 00                            ld      a, NUL_CHAR         // NUL is never "printed"
 679+ 66DC              C_Emit_Printable:
 680+ 66DC 6F                           ld      l, a
 681+ 66DD 26 00                        ld      h, 0
 682+ 66DF
 683+ 66DF                              psh1
 683+ 66DF E5          >                push    hl
 683+ 66E0 DD E9       >                jp      (ix)
 684+ 66E2
 685+ 66E2              C_Emit_Bel:
 686+ 66E2 C5                           push    bc                  // save Instruction Pointer
 687+ 66E3 11 00 01                     ld      de, $0100
 688+ 66E6 21 00 02                     ld      hl, $0200
 689+ 66E9 DD E5                        push    ix                  // save Next Pointer
 690+ 66EB CD B6 03                     call    $03B6               // bleep Standard-ROM routine
 691+ 66EE DD E1                        pop     ix                  // restore Next Pointer
 692+ 66F0 C1                           pop     bc                  // restore Instruction Pointer
 693+ 66F1 21 00 00                     ld      hl, NUL_CHAR
 694+ 66F4
 695+ 66F4                              psh1
 695+ 66F4 E5          >                push    hl
 695+ 66F5 DD E9       >                jp      (ix)
 696+ 66F7
 697+ 66F7 21 06 00     C_Emit_Tab:     ld      hl, COMMA_CHAR
 698+ 66FA
 699+ 66FA                              psh1
 699+ 66FA E5          >                push    hl
 699+ 66FB DD E9       >                jp      (ix)
 700+ 66FD
 701+ 66FD 21 0D 00     C_Emit_NL       ld      hl, CR_CHAR           // 0x0A --> 0x0D  à la Spectrum
 702+ 6700
 703+ 6700                              psh1
 703+ 6700 E5          >                push    hl
 703+ 6701 DD E9       >                jp      (ix)
 704+ 6703
 705+ 6703              //  ______________________________________________________________________
 706+ 6703
 707+ 6703              Key_Table:
 708+ 6703 E2                           db      $E2                 //  0: STOP  --> SYMBOL+A : ~
 709+ 6704 C3                           db      $C3                 //  1: NOT   --> SYMBOL+S : |
 710+ 6705 CD                           db      $CD                 //  2: STEP  --> SYMBOl+D : //
 711+ 6706 CC                           db      $CC                 //  3: TO    --> SYMBOL+F : {
 712+ 6707 CB                           db      $CB                 //  4: THEN  --> SYMBOL+G : }
 713+ 6708 C6                           db      $C6                 //  5: AND   --> SYMBOL+Y : [
 714+ 6709 C5                           db      $C5                 //  6: OR    --> SYMBOL+U : ]
 715+ 670A AC                           db      $AC                 //  7: AT    --> SYMBOL+I : (C) copyright symbol
 716+ 670B C7                           db      $C7                 //  8: <=
 717+ 670C C8                           db      $C8                 //  9: >=
 718+ 670D C9                           db      $C9                 // 10: <>    --> SYMBOL+W is the same as CAPS (toggle) SHIFT+2
 719+ 670E              Key_MapTo:
 720+ 670E 06                           db      $06                 // 10: SYMBOL+W is the same as CAPS (toggle) SHIFT+2
 721+ 670F 20                           db      $20                 //  9: not used
 722+ 6710 20                           db      $20                 //  8: not used
 723+ 6711 7F                           db      $7F                 //  7: SYMBOL+I : (C) copyright symbol
 724+ 6712 5D                           db      $5D                 //  6: SYMBOL+U : ]
 725+ 6713 5B                           db      $5B                 //  5: SYMBOL+Y : [
 726+ 6714 7D                           db      $7D                 //  4: SYMBOL+G : }
 727+ 6715 7B                           db      $7B                 //  3: SYMBOL+F : {
 728+ 6716 5C                           db      $5C                 //  2: SYMBOl+D : //
 729+ 6717 7C                           db      $7C                 //  1: SYMBOL+S : |
 730+ 6718 7E                           db      $7E                 //  0: SYMBOL+A : ~
 731+ 6719
 732+ 6719              //  ______________________________________________________________________
 733+ 6719              //
 734+ 6719              // key          -- c
 735+ 6719              // wait for a keypress
 736+ 6719              // This definition need Standard ROM Interrupt to be served
 737+ 6719
 738+ 6719                              New_Def KEY, "KEY", is_code, is_normal
 738+ 6719             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 738+ 6719             >
 738+ 6719             >                // dummy db directives used to calculate length of namec
 738+ 6719 4B 45 59    >                db      "KEY"
 738+ 671C             >len_NFA         defl    $ - temp_NFA
 738+ 671C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 738+ 6719             >
 738+ 6719 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 738+ 671A 4B 45 59    >                db      "KEY"               // name string in 7-bit ascii, but
 738+ 671D             >                org     $-1                 // alter last byte of Name just above to set
 738+ 671C D9          >                db      {b $} | END_BIT     // msb as name end
 738+ 671D             >
 738+ 671D AF 66       >                dw      last_NFA            // Link to previous definition Name
 738+ 671F             >KEY:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 738+ 671F ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 738+ 671F             >                else
 738+ 671F 21 67       >                dw      $ + 2   ; ok        // is pointed by CFA
 738+ 6721             >                endif           ; ok        // for other definitions it "points" the correct handler
 738+ 6721             >                // Use of "; ok" to suppress "warning[fwdref]"
 738+ 6721             >
 738+ 6721             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 739+ 6721
 740+ 6721 C5                           push    bc                  // save Instruction Pointer
 741+ 6722 DD E5                        push    ix
 742+ 6724
 743+ 6724 ED 73 2C 64                  ld      (SP_Saved), sp      // be sure to not to be paged out.
 744+ 6728 31 FE 63                     ld      sp, Cold_origin - 2 // maybe $4000 in the future...
 745+ 672B FD CB 01 AE                  res     5, (iy + 1)         // FLAGS (5C3A+1)
 746+ 672F
 747+ 672F              Key_Wait:
 748+ 672F 76                               halt
 749+ 6730 3E 02                            ld      a, 2                // selec channel #2 (Upper Video)
 750+ 6732 CD 01 16                         call    $1601               // SELECT Standard-ROM Routine
 751+ 6735
 752+ 6735                                  // software-flash: flips face every 320 ms
 753+ 6735 3E 10                            ld      a, $10              // Timing based
 754+ 6737 FD A6 3E                         and     (iy + $3E)          // FRAMES (5C3A+3E)
 755+ 673A
 756+ 673A 3A 26 64                         ld      a, (Block_Face)     // see origin.asm
 757+ 673D 20 0C                            jr      nz, Key_Cursor
 758+ 673F 3A 27 64                             ld      a, (Half_Face)      // see origin.asm
 759+ 6742 FD CB 30 5E                          bit     3, (iy + $30)       // FLAGS2 (5C3A+$30) that is CAPS-LOCK
 760+ 6746 28 03                                jr      z, Key_Cursor
 761+ 6748 3A 28 64                                 ld      a, (Underscore_Face) // see origin
 762+ 674B              Key_Cursor:
 763+ 674B D7                               rst     $10
 764+ 674C 3E 08                            ld      a, BACKSPACE_CHAR    // backspace
 765+ 674E D7                               rst     $10
 766+ 674F
 767+ 674F FD CB 01 6E                      bit     5, (iy + 1)         // FLAGS (5C3A+1)
 768+ 6753 28 DA                        jr      z, Key_Wait
 769+ 6755
 770+ 6755 76                           halt    // this is to sync flashing cursor.
 771+ 6756
 772+ 6756 3E 20                        ld      a, BLANK_CHAR       // space to blank cursor
 773+ 6758 D7                           rst     $10
 774+ 6759 3E 08                        ld      a, BACKSPACE_CHAR   // backspace
 775+ 675B D7                           rst     $10
 776+ 675C 3A 08 5C                     ld      a, (LASTK)          // get typed character (5C08)
 777+ 675F
 778+ 675F                              // decode character from above table
 779+ 675F 21 03 67                     ld      hl, Key_Table
 780+ 6762 01 0B 00                     ld      bc, $000B
 781+ 6765 ED B1                        cpir
 782+ 6767 20 05                        jr      nz, Key_DontMap
 783+ 6769 21 0E 67                         ld      hl, Key_MapTo
 784+ 676C 09                               add     hl, bc
 785+ 676D 7E                               ld      a, (hl)
 786+ 676E FE 06        Key_DontMap:    cp      $06                 // CAPS-LOCK management
 787+ 6770 20 09                        jr      nz, Key_NoCapsLock
 788+ 6772 21 6A 5C                         ld      hl, $5C6A           // FLAGS2
 789+ 6775 7E                               ld      a, (hl)
 790+ 6776 EE 08                            xor     $08
 791+ 6778 77                               ld      (hl), a
 792+ 6779 3E 00                            ld      a, NUL_CHAR
 793+ 677B 6F           Key_NoCapsLock: ld      l, a
 794+ 677C 26 00                        ld      h, 0                // Prepare TOS
 795+ 677E
 796+ 677E 3A 48 5C                     ld      a, ($5C48)          // BORDCR system variable
 797+ 6781 1F                           rra
 798+ 6782 1F                           rra
 799+ 6783 1F                           rra
 800+ 6784 F6 18                        or      $18                 // quick'n'dirty click
 801+ 6786 D3 FE                        out     ($fe), a
 802+ 6788 06 00                        ld      b, 0
 803+ 678A 10 FE                        djnz    $                   // wait loop
 804+ 678C EE 18                        xor     $18
 805+ 678E D3 FE                        out     ($fe), a
 806+ 6790
 807+ 6790 ED 7B 2C 64                  ld      sp, (SP_Saved)
 808+ 6794
 809+ 6794 DD E1                        pop     ix
 810+ 6796 C1                           pop     bc                  // Restore Instruction Pointer
 811+ 6797
 812+ 6797                              psh1
 812+ 6797 E5          >                push    hl
 812+ 6798 DD E9       >                jp      (ix)
 813+ 679A
 814+ 679A              //  ______________________________________________________________________
 815+ 679A              //
 816+ 679A              // ?terminal    -- FALSE | TRUE
 817+ 679A              // test for BREAK keypress
 818+ 679A                              New_Def QTERMINAL, "?TERMINAL", is_code, is_normal
 818+ 679A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 818+ 679A             >
 818+ 679A             >                // dummy db directives used to calculate length of namec
 818+ 679A 3F 54 45 52 >                db      "?TERMINAL"
 818+ 679E 4D 49 4E 41 >
 818+ 67A2 4C          >
 818+ 67A3             >len_NFA         defl    $ - temp_NFA
 818+ 67A3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 818+ 679A             >
 818+ 679A 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 818+ 679B 3F 54 45 52 >                db      "?TERMINAL"               // name string in 7-bit ascii, but
 818+ 679F 4D 49 4E 41 >
 818+ 67A3 4C          >
 818+ 67A4             >                org     $-1                 // alter last byte of Name just above to set
 818+ 67A3 CC          >                db      {b $} | END_BIT     // msb as name end
 818+ 67A4             >
 818+ 67A4 19 67       >                dw      last_NFA            // Link to previous definition Name
 818+ 67A6             >QTERMINAL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 818+ 67A6 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 818+ 67A6             >                else
 818+ 67A6 A8 67       >                dw      $ + 2   ; ok        // is pointed by CFA
 818+ 67A8             >                endif           ; ok        // for other definitions it "points" the correct handler
 818+ 67A8             >                // Use of "; ok" to suppress "warning[fwdref]"
 818+ 67A8             >
 818+ 67A8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 819+ 67A8 21 00 00                     ld      hl, 0
 820+ 67AB ED 73 2C 64                  ld      (SP_Saved), sp
 821+ 67AF 31 FE 63                     ld      sp, Cold_origin - 2
 822+ 67B2 CD 54 1F                     call    $1F54
 823+ 67B5 ED 7B 2C 64                  ld      sp, (SP_Saved)
 824+ 67B9
 825+ 67B9 38 01                        jr      c, QTerminal_NoBreak
 826+ 67BB 2C                               inc     l                  // quick TRUE_FLAG
 827+ 67BC              QTerminal_NoBreak:
 828+ 67BC
 829+ 67BC                              psh1
 829+ 67BC E5          >                push    hl
 829+ 67BD DD E9       >                jp      (ix)
 830+ 67BF
 831+ 67BF
 832+ 67BF              //  ______________________________________________________________________
 833+ 67BF              //
 834+ 67BF              // ZX Spectrum Next - Low Level disk primitives.
 835+ 67BF              // this include is "here" for backward compatibility
 836+ 67BF
 837+ 67BF                              include "next-opt0.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/next-opt0.asm
   1++67BF              //  ______________________________________________________________________
   2++67BF              //
   3++67BF              //  next-opt.asm
   4++67BF              //
   5++67BF              //  ZX Spectrum Next - peculiar definitions
   6++67BF              //  ______________________________________________________________________
   7++67BF
   8++67BF              //  ______________________________________________________________________
   9++67BF              //
  10++67BF              // f_seek       d u -- f
  11++67BF              // Seek to position d in file-handle u.
  12++67BF              // Return a false-flag 0 on success, True flag on error
  13++67BF                              New_Def F_SEEK, "F_SEEK", is_code, is_normal
  13++67BF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13++67BF             >
  13++67BF             >                // dummy db directives used to calculate length of namec
  13++67BF 46 5F 53 45 >                db      "F_SEEK"
  13++67C3 45 4B       >
  13++67C5             >len_NFA         defl    $ - temp_NFA
  13++67C5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13++67BF             >
  13++67BF 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  13++67C0 46 5F 53 45 >                db      "F_SEEK"               // name string in 7-bit ascii, but
  13++67C4 45 4B       >
  13++67C6             >                org     $-1                 // alter last byte of Name just above to set
  13++67C5 CB          >                db      {b $} | END_BIT     // msb as name end
  13++67C6             >
  13++67C6 9A 67       >                dw      last_NFA            // Link to previous definition Name
  13++67C8             >F_SEEK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  13++67C8 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  13++67C8             >                else
  13++67C8 CA 67       >                dw      $ + 2   ; ok        // is pointed by CFA
  13++67CA             >                endif           ; ok        // for other definitions it "points" the correct handler
  13++67CA             >                // Use of "; ok" to suppress "warning[fwdref]"
  13++67CA             >
  13++67CA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14++67CA E1                           pop     hl                  // file-handle
  15++67CB 7D                           ld      a, l                // file-handle
  16++67CC 60                           ld      h, b                // save Intruction Pointer
  17++67CD 69                           ld      l, c
  18++67CE C1                           pop     bc                  // bc has high-word of d
  19++67CF D1                           pop     de
  20++67D0 DD E5                        push    ix
  21++67D2 E5                           push    hl                  // save Instruction Pointer
  22++67D3 DD 21 00 00                  ld      ix, 0
  23++67D7 CF                           rst     $08
  24++67D8 9F                           db      $9F
  25++67D9 C1                           pop     bc                  // restore Instruction Pointer
  26++67DA DD E1                        pop     ix
  27++67DC ED 62                        sbc     hl, hl              // to get 0 or -1
  28++67DE
  29++67DE                              psh1
  29++67DE E5          >                push    hl
  29++67DF DD E9       >                jp      (ix)
  30++67E1
  31++67E1              //  ______________________________________________________________________
  32++67E1              //
  33++67E1              // f_fgetpos    u -- d f
  34++67E1              // Seek to position d in file-handle u.
  35++67E1              // Return a false-flag 0 on success, True flag on error
  36++67E1                              New_Def F_FGETPOS, "F_FGETPOS", is_code, is_normal
  36++67E1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  36++67E1             >
  36++67E1             >                // dummy db directives used to calculate length of namec
  36++67E1 46 5F 46 47 >                db      "F_FGETPOS"
  36++67E5 45 54 50 4F >
  36++67E9 53          >
  36++67EA             >len_NFA         defl    $ - temp_NFA
  36++67EA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  36++67E1             >
  36++67E1 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  36++67E2 46 5F 46 47 >                db      "F_FGETPOS"               // name string in 7-bit ascii, but
  36++67E6 45 54 50 4F >
  36++67EA 53          >
  36++67EB             >                org     $-1                 // alter last byte of Name just above to set
  36++67EA D3          >                db      {b $} | END_BIT     // msb as name end
  36++67EB             >
  36++67EB BF 67       >                dw      last_NFA            // Link to previous definition Name
  36++67ED             >F_FGETPOS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  36++67ED ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  36++67ED             >                else
  36++67ED EF 67       >                dw      $ + 2   ; ok        // is pointed by CFA
  36++67EF             >                endif           ; ok        // for other definitions it "points" the correct handler
  36++67EF             >                // Use of "; ok" to suppress "warning[fwdref]"
  36++67EF             >
  36++67EF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  37++67EF E1                           pop     hl
  38++67F0 7D                           ld      a, l                // file-handle
  39++67F1 DD E5                        push    ix
  40++67F3 C5                           push    bc
  41++67F4 CF                           rst     $08
  42++67F5 A0                           db      $A0
  43++67F6 E1                           pop     hl                  // restore Instruction Pointer
  44++67F7 DD E1                        pop     ix
  45++67F9 D5                           push    de
  46++67FA C5                           push    bc
  47++67FB 44                           ld      b, h                // restore Instruction Pointer
  48++67FC 4D                           ld      c, l
  49++67FD ED 62                        sbc     hl, hl
  50++67FF
  51++67FF                              psh1
  51++67FF E5          >                push    hl
  51++6800 DD E9       >                jp      (ix)
  52++6802
  53++6802              //  ______________________________________________________________________
  54++6802              //
  55++6802              // f_read       a b u -- n f
  56++6802              // Read b bytes from file-handle u to address a
  57++6802              // Return the actual number n of bytes read
  58++6802              // Return 0 on success, True flag on error
  59++6802                              New_Def F_READ, "F_READ", is_code, is_normal
  59++6802             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  59++6802             >
  59++6802             >                // dummy db directives used to calculate length of namec
  59++6802 46 5F 52 45 >                db      "F_READ"
  59++6806 41 44       >
  59++6808             >len_NFA         defl    $ - temp_NFA
  59++6808             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  59++6802             >
  59++6802 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  59++6803 46 5F 52 45 >                db      "F_READ"               // name string in 7-bit ascii, but
  59++6807 41 44       >
  59++6809             >                org     $-1                 // alter last byte of Name just above to set
  59++6808 C4          >                db      {b $} | END_BIT     // msb as name end
  59++6809             >
  59++6809 E1 67       >                dw      last_NFA            // Link to previous definition Name
  59++680B             >F_READ:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  59++680B ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  59++680B             >                else
  59++680B 0D 68       >                dw      $ + 2   ; ok        // is pointed by CFA
  59++680D             >                endif           ; ok        // for other definitions it "points" the correct handler
  59++680D             >                // Use of "; ok" to suppress "warning[fwdref]"
  59++680D             >
  59++680D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  60++680D
  61++680D 50                           ld      d, b
  62++680E 59                           ld      e, c
  63++680F E1                           pop     hl
  64++6810 7D                           ld      a, l                // file-handle
  65++6811 C1                           pop     bc                  // bc has bytes to read
  66++6812 DD E3                        ex      (sp), ix            // ix has address
  67++6814 D5                           push    de                  // Save Instruction pointer
  68++6815 CF                           rst     $08
  69++6816 9D                           db      $9D
  70++6817 C1                           pop     bc                  // Restore Instruction pointer
  71++6818 DD E1                        pop     ix                  // Restore ix
  72++681A D5                           push    de                  // bytes written
  73++681B ED 62                        sbc     hl, hl
  74++681D
  75++681D                              psh1
  75++681D E5          >                push    hl
  75++681E DD E9       >                jp      (ix)
  76++6820
  77++6820              //  ______________________________________________________________________
  78++6820              //
  79++6820              // f_write      a b u -- n f
  80++6820              // Write bytes currently stored at address a to file-handle u.
  81++6820              // Return the actual n bytes written and 0 on success, True flag on error.
  82++6820                              New_Def F_WRITE, "F_WRITE", is_code, is_normal
  82++6820             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  82++6820             >
  82++6820             >                // dummy db directives used to calculate length of namec
  82++6820 46 5F 57 52 >                db      "F_WRITE"
  82++6824 49 54 45    >
  82++6827             >len_NFA         defl    $ - temp_NFA
  82++6827             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  82++6820             >
  82++6820 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  82++6821 46 5F 57 52 >                db      "F_WRITE"               // name string in 7-bit ascii, but
  82++6825 49 54 45    >
  82++6828             >                org     $-1                 // alter last byte of Name just above to set
  82++6827 C5          >                db      {b $} | END_BIT     // msb as name end
  82++6828             >
  82++6828 02 68       >                dw      last_NFA            // Link to previous definition Name
  82++682A             >F_WRITE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  82++682A ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  82++682A             >                else
  82++682A 2C 68       >                dw      $ + 2   ; ok        // is pointed by CFA
  82++682C             >                endif           ; ok        // for other definitions it "points" the correct handler
  82++682C             >                // Use of "; ok" to suppress "warning[fwdref]"
  82++682C             >
  82++682C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  83++682C
  84++682C 50                           ld      d, b
  85++682D 59                           ld      e, c
  86++682E E1                           pop     hl
  87++682F 7D                           ld      a, l                // file-handle
  88++6830 C1                           pop     bc                  // bc has bytes to read
  89++6831 DD E3                        ex      (sp), ix            // ix has address
  90++6833 D5                           push    de                  // Save Instruction pointer
  91++6834 CF                           rst     $08
  92++6835 9E                           db      $9E
  93++6836 C1                           pop     bc                  // Restore Instruction pointer
  94++6837 DD E1                        pop     ix                  // Restore ix
  95++6839 D5                           push    de                  // bytes written
  96++683A ED 62                        sbc     hl, hl
  97++683C
  98++683C                              psh1
  98++683C E5          >                push    hl
  98++683D DD E9       >                jp      (ix)
  99++683F
 100++683F              //  ______________________________________________________________________
 101++683F              //
 102++683F              // f_close      u -- f
 103++683F              // Close file-handle u.
 104++683F              // Return 0 on success, True flag on error
 105++683F
 106++683F                              New_Def F_CLOSE, "F_CLOSE", is_code, is_normal
 106++683F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 106++683F             >
 106++683F             >                // dummy db directives used to calculate length of namec
 106++683F 46 5F 43 4C >                db      "F_CLOSE"
 106++6843 4F 53 45    >
 106++6846             >len_NFA         defl    $ - temp_NFA
 106++6846             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 106++683F             >
 106++683F 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 106++6840 46 5F 43 4C >                db      "F_CLOSE"               // name string in 7-bit ascii, but
 106++6844 4F 53 45    >
 106++6847             >                org     $-1                 // alter last byte of Name just above to set
 106++6846 C5          >                db      {b $} | END_BIT     // msb as name end
 106++6847             >
 106++6847 20 68       >                dw      last_NFA            // Link to previous definition Name
 106++6849             >F_CLOSE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 106++6849 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 106++6849             >                else
 106++6849 4B 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 106++684B             >                endif           ; ok        // for other definitions it "points" the correct handler
 106++684B             >                // Use of "; ok" to suppress "warning[fwdref]"
 106++684B             >
 106++684B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 107++684B
 108++684B E1                           pop     hl
 109++684C 7D                           ld      a, l                // file-handle
 110++684D DD E5                        push    ix
 111++684F C5                           push    bc                  // Save Instruction pointer
 112++6850 CF                           rst     $08
 113++6851 9B                           db      $9B
 114++6852 C1                           pop     bc
 115++6853 DD E1                        pop     ix
 116++6855 ED 62                        sbc     hl, hl
 117++6857
 118++6857                              psh1
 118++6857 E5          >                push    hl
 118++6858 DD E9       >                jp      (ix)
 119++685A
 120++685A              //  ______________________________________________________________________
 121++685A              //
 122++685A              // f_open       a1 a2 b -- u f
 123++685A              // open a file
 124++685A              // a1 (filespec) is a null-terminated string, such as produced by ," definition
 125++685A              // a2 is address to an 8-byte header data used in some cases.
 126++685A              // b is access mode-byte, that is a combination of:
 127++685A              // any/all of:
 128++685A              //   esx_mode_read          $01 request read access
 129++685A              //   esx_mode_write         $02 request write access
 130++685A              //   esx_mode_use_header    $40 read/write +3DOS header
 131++685A              // plus one of:
 132++685A              //   esx_mode_open_exist    $00 only open existing file
 133++685A              //   esx_mode_open_creat    $08 open existing or create file
 134++685A              //   esx_mode_creat_noexist $04 create new file, error if exists
 135++685A              //   esx_mode_creat_trunc   $0c create new file, delete existing
 136++685A              // Return file-handle u and 0 on success, True flag on error
 137++685A                              New_Def F_OPEN, "F_OPEN", is_code, is_normal
 137++685A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 137++685A             >
 137++685A             >                // dummy db directives used to calculate length of namec
 137++685A 46 5F 4F 50 >                db      "F_OPEN"
 137++685E 45 4E       >
 137++6860             >len_NFA         defl    $ - temp_NFA
 137++6860             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 137++685A             >
 137++685A 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 137++685B 46 5F 4F 50 >                db      "F_OPEN"               // name string in 7-bit ascii, but
 137++685F 45 4E       >
 137++6861             >                org     $-1                 // alter last byte of Name just above to set
 137++6860 CE          >                db      {b $} | END_BIT     // msb as name end
 137++6861             >
 137++6861 3F 68       >                dw      last_NFA            // Link to previous definition Name
 137++6863             >F_OPEN:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 137++6863 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 137++6863             >                else
 137++6863 65 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 137++6865             >                endif           ; ok        // for other definitions it "points" the correct handler
 137++6865             >                // Use of "; ok" to suppress "warning[fwdref]"
 137++6865             >
 137++6865             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 138++6865 60                           ld      h, b                // Save Instruction pointer
 139++6866 69                           ld      l, c
 140++6867 C1                           pop     bc                  // file-mode
 141++6868 41                           ld      b, c                // file-mode
 142++6869 D1                           pop     de                  // 8-bytes buffer if any
 143++686A DD E3                        ex      (sp), ix            // filespec nul-terminated
 144++686C E5                           push    hl                  // Save Instruction pointer
 145++686D 3E 2A                        ld      a, "*"
 146++686F CF                           rst     $08
 147++6870 9A                           db      $9A
 148++6871 C1                           pop     bc
 149++6872 DD E1                        pop     ix
 150++6874 ED 62                        sbc     hl, hl
 151++6876 5F                           ld      e, a
 152++6877 16 00                        ld      d, 0
 153++6879
 154++6879
 155++6879                              psh2
 155++6879 D5          >                push    de
 155++687A E5          >                push    hl
 155++687B DD E9       >                jp      (ix)
 156++687D
 157++687D              //   \ CREATE FILENAME ," test.txt"   \ new Counted String
 158++687D              //   \ FILENAME 1+ PAD 1 F_OPEN
 159++687D              //   \ DROP
 160++687D              //   \ F_CLOSE
 161++687D
 162++687D              //  ______________________________________________________________________
 163++687D              //
 164++687D              // f_sync      u -- f
 165++687D              // Close file-handle u.
 166++687D              // Return 0 on success, True flag on error
 167++687D
 168++687D                              New_Def F_SYNC, "F_SYNC", is_code, is_normal
 168++687D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 168++687D             >
 168++687D             >                // dummy db directives used to calculate length of namec
 168++687D 46 5F 53 59 >                db      "F_SYNC"
 168++6881 4E 43       >
 168++6883             >len_NFA         defl    $ - temp_NFA
 168++6883             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 168++687D             >
 168++687D 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 168++687E 46 5F 53 59 >                db      "F_SYNC"               // name string in 7-bit ascii, but
 168++6882 4E 43       >
 168++6884             >                org     $-1                 // alter last byte of Name just above to set
 168++6883 C3          >                db      {b $} | END_BIT     // msb as name end
 168++6884             >
 168++6884 5A 68       >                dw      last_NFA            // Link to previous definition Name
 168++6886             >F_SYNC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 168++6886 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 168++6886             >                else
 168++6886 88 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 168++6888             >                endif           ; ok        // for other definitions it "points" the correct handler
 168++6888             >                // Use of "; ok" to suppress "warning[fwdref]"
 168++6888             >
 168++6888             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 169++6888 E1                           pop     hl
 170++6889 7D                           ld      a, l                // file-handle
 171++688A DD E5                        push    ix
 172++688C C5                           push    bc
 173++688D CF                           rst     $08
 174++688E 9C                           db      $9C
 175++688F C1                           pop     bc
 176++6890 DD E1                        pop     ix
 177++6892 ED 62                        sbc     hl, hl
 178++6894
 179++6894                              psh1
 179++6894 E5          >                push    hl
 179++6895 DD E9       >                jp      (ix)
 180++6897
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/next-opt0.asm
 838+ 6897
 839+ 6897
 840+ 6897              //  ______________________________________________________________________
 841+ 6897              //
 842+ 6897              // cr           --
 843+ 6897              // send a CR via EMITC
 844+ 6897                              New_Def CR, "CR", is_code, is_normal
 844+ 6897             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 844+ 6897             >
 844+ 6897             >                // dummy db directives used to calculate length of namec
 844+ 6897 43 52       >                db      "CR"
 844+ 6899             >len_NFA         defl    $ - temp_NFA
 844+ 6899             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 844+ 6897             >
 844+ 6897 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 844+ 6898 43 52       >                db      "CR"               // name string in 7-bit ascii, but
 844+ 689A             >                org     $-1                 // alter last byte of Name just above to set
 844+ 6899 D2          >                db      {b $} | END_BIT     // msb as name end
 844+ 689A             >
 844+ 689A 7D 68       >                dw      last_NFA            // Link to previous definition Name
 844+ 689C             >CR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 844+ 689C ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 844+ 689C             >                else
 844+ 689C 9E 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 844+ 689E             >                endif           ; ok        // for other definitions it "points" the correct handler
 844+ 689E             >                // Use of "; ok" to suppress "warning[fwdref]"
 844+ 689E             >
 844+ 689E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 845+ 689E
 846+ 689E 3E 0D                        ld      a, CR_CHAR
 847+ 68A0 C3 89 66                     jp      Emitc_Ptr
 848+ 68A3
 849+ 68A3              //  ______________________________________________________________________
 850+ 68A3              //
 851+ 68A3              // cmove    a1 a2 u --
 852+ 68A3              // If u > 0, moves memory content starting at address a1 for n bytes long
 853+ 68A3              // storing then starting at address addr2.
 854+ 68A3              // The content of a1 is moved first. See CMOVE> also.
 855+ 68A3                              New_Def CMOVE, "CMOVE", is_code, is_normal
 855+ 68A3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 855+ 68A3             >
 855+ 68A3             >                // dummy db directives used to calculate length of namec
 855+ 68A3 43 4D 4F 56 >                db      "CMOVE"
 855+ 68A7 45          >
 855+ 68A8             >len_NFA         defl    $ - temp_NFA
 855+ 68A8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 855+ 68A3             >
 855+ 68A3 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 855+ 68A4 43 4D 4F 56 >                db      "CMOVE"               // name string in 7-bit ascii, but
 855+ 68A8 45          >
 855+ 68A9             >                org     $-1                 // alter last byte of Name just above to set
 855+ 68A8 C5          >                db      {b $} | END_BIT     // msb as name end
 855+ 68A9             >
 855+ 68A9 97 68       >                dw      last_NFA            // Link to previous definition Name
 855+ 68AB             >CMOVE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 855+ 68AB ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 855+ 68AB             >                else
 855+ 68AB AD 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 855+ 68AD             >                endif           ; ok        // for other definitions it "points" the correct handler
 855+ 68AD             >                // Use of "; ok" to suppress "warning[fwdref]"
 855+ 68AD             >
 855+ 68AD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 856+ 68AD 60                           ld      h, b
 857+ 68AE 69                           ld      l, c
 858+ 68AF
 859+ 68AF C1                           pop     bc                  // bc has counter
 860+ 68B0 D1                           pop     de                  // de now has dest
 861+ 68B1 E3                           ex      (sp), hl            // hl has source, save Instruction Pointer
 862+ 68B2 78                           ld      a, b
 863+ 68B3 B1                           or      c
 864+ 68B4 28 02                        jr      z, Cmove_NoMove
 865+ 68B6 ED B0                            ldir
 866+ 68B8              Cmove_NoMove:
 867+ 68B8 C1                           pop     bc                  // Restore Instruction Pointer
 868+ 68B9
 869+ 68B9                              next
 869+ 68B9 DD E9       >                jp      (ix)
 870+ 68BB
 871+ 68BB              //  ______________________________________________________________________
 872+ 68BB              //
 873+ 68BB              // cmove>    a1 a2 u --
 874+ 68BB              // If u > 0, moves memory content starting at address a1 for n bytes long
 875+ 68BB              // storing then starting at address addr2.
 876+ 68BB              // The content of a1 is moved last. See cmove.
 877+ 68BB                              New_Def CMOVE_TO, "CMOVE>", is_code, is_normal
 877+ 68BB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 877+ 68BB             >
 877+ 68BB             >                // dummy db directives used to calculate length of namec
 877+ 68BB 43 4D 4F 56 >                db      "CMOVE>"
 877+ 68BF 45 3E       >
 877+ 68C1             >len_NFA         defl    $ - temp_NFA
 877+ 68C1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 877+ 68BB             >
 877+ 68BB 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 877+ 68BC 43 4D 4F 56 >                db      "CMOVE>"               // name string in 7-bit ascii, but
 877+ 68C0 45 3E       >
 877+ 68C2             >                org     $-1                 // alter last byte of Name just above to set
 877+ 68C1 BE          >                db      {b $} | END_BIT     // msb as name end
 877+ 68C2             >
 877+ 68C2 A3 68       >                dw      last_NFA            // Link to previous definition Name
 877+ 68C4             >CMOVE_TO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 877+ 68C4 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 877+ 68C4             >                else
 877+ 68C4 C6 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 877+ 68C6             >                endif           ; ok        // for other definitions it "points" the correct handler
 877+ 68C6             >                // Use of "; ok" to suppress "warning[fwdref]"
 877+ 68C6             >
 877+ 68C6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 878+ 68C6 60                           ld      h, b
 879+ 68C7 69                           ld      l, c
 880+ 68C8
 881+ 68C8 C1                           pop     bc                  // bc has counter
 882+ 68C9 D1                           pop     de                  // de has dest
 883+ 68CA E3                           ex      (sp), hl            // hl has source, save Instruction Pointer
 884+ 68CB 78                           ld      a, b
 885+ 68CC B1                           or      c
 886+ 68CD 28 08                        jr      z, CmoveV_NoMove
 887+ 68CF EB                               ex      de, hl              // compute address to
 888+ 68D0 09                               add     hl, bc              // operate backward
 889+ 68D1 2B                               dec     hl
 890+ 68D2 EB                               ex      de, hl
 891+ 68D3 09                               add     hl, bc
 892+ 68D4 2B                               dec     hl
 893+ 68D5 ED B8                            lddr                        // backward
 894+ 68D7              CmoveV_NoMove:
 895+ 68D7 C1                           pop     bc                  // Restore Instruction Pointer
 896+ 68D8
 897+ 68D8                              next
 897+ 68D8 DD E9       >                jp      (ix)
 898+ 68DA
 899+ 68DA              //  ______________________________________________________________________
 900+ 68DA              //
 901+ 68DA              // um*      u1 u2 -- ud
 902+ 68DA              // Unsigned multiplication
 903+ 68DA              // A double-integer is kept in CPU registers as DEHL then pushed on stack.
 904+ 68DA              // On the stack a double number is treated as two single numbers
 905+ 68DA              // where DE is on the top of the stack and HL is the second from top,
 906+ 68DA              // Instead, in 2VARIABLE a double number is stored as EDLH.
 907+ 68DA              // this definition could use "MUL" Z80N new op-code.
 908+ 68DA                              New_Def UM_MUL, "UM*", is_code, is_normal
 908+ 68DA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 908+ 68DA             >
 908+ 68DA             >                // dummy db directives used to calculate length of namec
 908+ 68DA 55 4D 2A    >                db      "UM*"
 908+ 68DD             >len_NFA         defl    $ - temp_NFA
 908+ 68DD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 908+ 68DA             >
 908+ 68DA 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 908+ 68DB 55 4D 2A    >                db      "UM*"               // name string in 7-bit ascii, but
 908+ 68DE             >                org     $-1                 // alter last byte of Name just above to set
 908+ 68DD AA          >                db      {b $} | END_BIT     // msb as name end
 908+ 68DE             >
 908+ 68DE BB 68       >                dw      last_NFA            // Link to previous definition Name
 908+ 68E0             >UM_MUL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 908+ 68E0 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 908+ 68E0             >                else
 908+ 68E0 E2 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 908+ 68E2             >                endif           ; ok        // for other definitions it "points" the correct handler
 908+ 68E2             >                // Use of "; ok" to suppress "warning[fwdref]"
 908+ 68E2             >
 908+ 68E2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 909+ 68E2 D1                           pop     de                    // de has u2 operand
 910+ 68E3 E1                           pop     hl                    // hl has u1 operand
 911+ 68E4 C5                           push    bc                    // Save Instruction Pointer
 912+ 68E5 45                           ld      b, l
 913+ 68E6 4B                           ld      c, e
 914+ 68E7 5D                           ld      e, l
 915+ 68E8 6A                           ld      l, d
 916+ 68E9 E5                           push    hl
 917+ 68EA 69                           ld      l, c
 918+ 68EB ED 30                        mul
 919+ 68ED EB                           ex      de, hl
 920+ 68EE ED 30                        mul
 921+ 68F0 AF                           xor     a
 922+ 68F1 19                           add     hl, de
 923+ 68F2 8F                           adc     a
 924+ 68F3 59                           ld      e, c
 925+ 68F4 50                           ld      d, b
 926+ 68F5 ED 30                        mul
 927+ 68F7 47                           ld      b, a
 928+ 68F8 4C                           ld      c, h
 929+ 68F9 7A                           ld      a, d
 930+ 68FA 85                           add     l
 931+ 68FB 67                           ld      h, a
 932+ 68FC 6B                           ld      l, e
 933+ 68FD D1                           pop     de
 934+ 68FE ED 30                        mul
 935+ 6900 EB                           ex      de, hl
 936+ 6901 ED 4A                        adc     hl, bc
 937+ 6903 C1                           pop     bc
 938+ 6904 D5                           push    de
 939+ 6905 E5                           push    hl
 940+ 6906                              next
 940+ 6906 DD E9       >                jp      (ix)
 941+ 6908
 942+ 6908              //  ______________________________________________________________________
 943+ 6908              //
 944+ 6908              // um/mod      ud u1 -- q r
 945+ 6908              // divides ud into u1 giving quotient q and remainder r
 946+ 6908              // algorithm takes 16 bit at a time starting from msb
 947+ 6908              // DE grows from lsb upward with quotient result
 948+ 6908              // HL keeps the remainder at each stage of division
 949+ 6908              // each loop 'lowers' the next binary digit to form the current dividend
 950+ 6908                              New_Def UMDIVMOD, "UM/MOD", is_code, is_normal
 950+ 6908             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 950+ 6908             >
 950+ 6908             >                // dummy db directives used to calculate length of namec
 950+ 6908 55 4D 2F 4D >                db      "UM/MOD"
 950+ 690C 4F 44       >
 950+ 690E             >len_NFA         defl    $ - temp_NFA
 950+ 690E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 950+ 6908             >
 950+ 6908 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 950+ 6909 55 4D 2F 4D >                db      "UM/MOD"               // name string in 7-bit ascii, but
 950+ 690D 4F 44       >
 950+ 690F             >                org     $-1                 // alter last byte of Name just above to set
 950+ 690E C4          >                db      {b $} | END_BIT     // msb as name end
 950+ 690F             >
 950+ 690F DA 68       >                dw      last_NFA            // Link to previous definition Name
 950+ 6911             >UMDIVMOD:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 950+ 6911 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 950+ 6911             >                else
 950+ 6911 13 69       >                dw      $ + 2   ; ok        // is pointed by CFA
 950+ 6913             >                endif           ; ok        // for other definitions it "points" the correct handler
 950+ 6913             >                // Use of "; ok" to suppress "warning[fwdref]"
 950+ 6913             >
 950+ 6913             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 951+ 6913 60                           ld      h, b
 952+ 6914 69                           ld      l, c                    // Save Instruction Pointer
 953+ 6915
 954+ 6915 C1                           pop     bc                      // divisor
 955+ 6916
 956+ 6916 D1                           pop     de                      // < high part
 957+ 6917 E3                           ex      (sp), hl                // < low part and > save bc
 958+ 6918 EB                           ex      de, hl                  //
 959+ 6919 7D                           ld      a, l                    // check without changing arguments
 960+ 691A 91                           sub     c                       // if divisor is greater than high part
 961+ 691B 7C                           ld      a, h                    // so quotient will be in range
 962+ 691C 98                           sbc     a, b
 963+ 691D 30 23                        jr      nc, Um_DivMod_OutOfRange
 964+ 691F 3E 10                            ld      a, 16
 965+ 6921              Um_DivMod_Loop:
 966+ 6921 A7                                   and     a
 967+ 6922 CB 13                                rl      e
 968+ 6924 CB 12                                rl      d
 969+ 6926 CB 15                                rl      l
 970+ 6928 CB 14                                rl      h
 971+ 692A 30 05                                jr      nc, Um_DivMod_Carry
 972+ 692C A7                                       and     a
 973+ 692D ED 42                                    sbc     hl, bc
 974+ 692F 18 07                                jr      Um_DivMod_Endif    // else
 975+ 6931              Um_DivMod_Carry:
 976+ 6931 A7                                       and     a
 977+ 6932 ED 42                                    sbc     hl, bc
 978+ 6934 30 02                                    jr      nc, Um_DivMod_Endif
 979+ 6936 09                                           add     hl, bc
 980+ 6937 1B                                           dec     de
 981+ 6938              Um_DivMod_Endif:                                   // endif
 982+ 6938 13                                   inc     de
 983+ 6939 3D                                   dec     a
 984+ 693A 20 E5                            jr      nz, Um_DivMod_Loop
 985+ 693C EB                               ex      de, hl
 986+ 693D              Um_DivMod_Bailout:
 987+ 693D C1                               pop     bc                  // restore Instruction Pointer
 988+ 693E D5                               push    de                  // de := remanider
 989+ 693F E5                               push    hl                  // hl := quotient
 990+ 6940                                  next
 990+ 6940 DD E9       >                jp      (ix)
 991+ 6942
 992+ 6942              Um_DivMod_OutOfRange:
 993+ 6942 21 FF FF                     ld      hl, -1
 994+ 6945 54                           ld      d, h
 995+ 6946 5D                           ld      e, l
 996+ 6947 18 F4                        jr      Um_DivMod_Bailout
 997+ 6949
 998+ 6949              //  ______________________________________________________________________
 999+ 6949              //
1000+ 6949              // and          n1 n2 -- n3
1001+ 6949              // bit logical AND. Returns n3 as n1 & n2
1002+ 6949                              New_Def AND_OP, "AND", is_code, is_normal
1002+ 6949             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1002+ 6949             >
1002+ 6949             >                // dummy db directives used to calculate length of namec
1002+ 6949 41 4E 44    >                db      "AND"
1002+ 694C             >len_NFA         defl    $ - temp_NFA
1002+ 694C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1002+ 6949             >
1002+ 6949 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1002+ 694A 41 4E 44    >                db      "AND"               // name string in 7-bit ascii, but
1002+ 694D             >                org     $-1                 // alter last byte of Name just above to set
1002+ 694C C4          >                db      {b $} | END_BIT     // msb as name end
1002+ 694D             >
1002+ 694D 08 69       >                dw      last_NFA            // Link to previous definition Name
1002+ 694F             >AND_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1002+ 694F ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1002+ 694F             >                else
1002+ 694F 51 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1002+ 6951             >                endif           ; ok        // for other definitions it "points" the correct handler
1002+ 6951             >                // Use of "; ok" to suppress "warning[fwdref]"
1002+ 6951             >
1002+ 6951             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1003+ 6951 D1                           pop     de
1004+ 6952 E1                           pop     hl
1005+ 6953 7B                           ld      a, e
1006+ 6954 A5                           and     l
1007+ 6955 6F                           ld      l, a
1008+ 6956 7A                           ld      a, d
1009+ 6957 A4                           and     h
1010+ 6958 67                           ld      h, a
1011+ 6959
1012+ 6959                              psh1
1012+ 6959 E5          >                push    hl
1012+ 695A DD E9       >                jp      (ix)
1013+ 695C
1014+ 695C              //  ______________________________________________________________________
1015+ 695C              //
1016+ 695C              // or           n1 n2 -- n3
1017+ 695C              // bit logical OR. Returns n3 as n1 | n2
1018+ 695C                              New_Def OR_OP, "OR", is_code, is_normal
1018+ 695C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1018+ 695C             >
1018+ 695C             >                // dummy db directives used to calculate length of namec
1018+ 695C 4F 52       >                db      "OR"
1018+ 695E             >len_NFA         defl    $ - temp_NFA
1018+ 695E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1018+ 695C             >
1018+ 695C 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1018+ 695D 4F 52       >                db      "OR"               // name string in 7-bit ascii, but
1018+ 695F             >                org     $-1                 // alter last byte of Name just above to set
1018+ 695E D2          >                db      {b $} | END_BIT     // msb as name end
1018+ 695F             >
1018+ 695F 49 69       >                dw      last_NFA            // Link to previous definition Name
1018+ 6961             >OR_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1018+ 6961 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1018+ 6961             >                else
1018+ 6961 63 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1018+ 6963             >                endif           ; ok        // for other definitions it "points" the correct handler
1018+ 6963             >                // Use of "; ok" to suppress "warning[fwdref]"
1018+ 6963             >
1018+ 6963             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1019+ 6963 D1                           pop     de
1020+ 6964 E1                           pop     hl
1021+ 6965 7B                           ld      a, e
1022+ 6966 B5                           or      l
1023+ 6967 6F                           ld      l, a
1024+ 6968 7A                           ld      a, d
1025+ 6969 B4                           or      h
1026+ 696A 67                           ld      h, a
1027+ 696B
1028+ 696B                              psh1
1028+ 696B E5          >                push    hl
1028+ 696C DD E9       >                jp      (ix)
1029+ 696E
1030+ 696E              //  ______________________________________________________________________
1031+ 696E              //
1032+ 696E              // xor          n1 n2 -- n3
1033+ 696E              // bit logical OR. Returns n3 as n1 ^ n2
1034+ 696E                              New_Def XOR_OP, "XOR", is_code, is_normal
1034+ 696E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1034+ 696E             >
1034+ 696E             >                // dummy db directives used to calculate length of namec
1034+ 696E 58 4F 52    >                db      "XOR"
1034+ 6971             >len_NFA         defl    $ - temp_NFA
1034+ 6971             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1034+ 696E             >
1034+ 696E 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1034+ 696F 58 4F 52    >                db      "XOR"               // name string in 7-bit ascii, but
1034+ 6972             >                org     $-1                 // alter last byte of Name just above to set
1034+ 6971 D2          >                db      {b $} | END_BIT     // msb as name end
1034+ 6972             >
1034+ 6972 5C 69       >                dw      last_NFA            // Link to previous definition Name
1034+ 6974             >XOR_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1034+ 6974 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1034+ 6974             >                else
1034+ 6974 76 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1034+ 6976             >                endif           ; ok        // for other definitions it "points" the correct handler
1034+ 6976             >                // Use of "; ok" to suppress "warning[fwdref]"
1034+ 6976             >
1034+ 6976             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1035+ 6976 D1                           pop     de
1036+ 6977 E1                           pop     hl
1037+ 6978 7B                           ld      a, e
1038+ 6979 AD                           xor     l
1039+ 697A 6F                           ld      l, a
1040+ 697B 7A                           ld      a, d
1041+ 697C AC                           xor     h
1042+ 697D 67                           ld      h, a
1043+ 697E
1044+ 697E                              psh1
1044+ 697E E5          >                push    hl
1044+ 697F DD E9       >                jp      (ix)
1045+ 6981
1046+ 6981              //  ______________________________________________________________________
1047+ 6981              //
1048+ 6981              // sp@      -- a
1049+ 6981              // returns on top of stack the value of SP before execution
1050+ 6981                              New_Def SPFETCH, "SP@", is_code, is_normal
1050+ 6981             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1050+ 6981             >
1050+ 6981             >                // dummy db directives used to calculate length of namec
1050+ 6981 53 50 40    >                db      "SP@"
1050+ 6984             >len_NFA         defl    $ - temp_NFA
1050+ 6984             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1050+ 6981             >
1050+ 6981 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1050+ 6982 53 50 40    >                db      "SP@"               // name string in 7-bit ascii, but
1050+ 6985             >                org     $-1                 // alter last byte of Name just above to set
1050+ 6984 C0          >                db      {b $} | END_BIT     // msb as name end
1050+ 6985             >
1050+ 6985 6E 69       >                dw      last_NFA            // Link to previous definition Name
1050+ 6987             >SPFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1050+ 6987 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1050+ 6987             >                else
1050+ 6987 89 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1050+ 6989             >                endif           ; ok        // for other definitions it "points" the correct handler
1050+ 6989             >                // Use of "; ok" to suppress "warning[fwdref]"
1050+ 6989             >
1050+ 6989             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1051+ 6989
1052+ 6989 21 00 00                     ld      hl, 0
1053+ 698C 39                           add     hl, sp
1054+ 698D
1055+ 698D                              psh1
1055+ 698D E5          >                push    hl
1055+ 698E DD E9       >                jp      (ix)
1056+ 6990
1057+ 6990              //  ______________________________________________________________________
1058+ 6990              //
1059+ 6990              // sp!      a --
1060+ 6990              // restore SP to the initial value passed
1061+ 6990              // normally it is S0, i.e. the word at offset 6 and 7 of user variabiles area.
1062+ 6990                              New_Def SPSTORE, "SP!", is_code, is_normal
1062+ 6990             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1062+ 6990             >
1062+ 6990             >                // dummy db directives used to calculate length of namec
1062+ 6990 53 50 21    >                db      "SP!"
1062+ 6993             >len_NFA         defl    $ - temp_NFA
1062+ 6993             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1062+ 6990             >
1062+ 6990 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1062+ 6991 53 50 21    >                db      "SP!"               // name string in 7-bit ascii, but
1062+ 6994             >                org     $-1                 // alter last byte of Name just above to set
1062+ 6993 A1          >                db      {b $} | END_BIT     // msb as name end
1062+ 6994             >
1062+ 6994 81 69       >                dw      last_NFA            // Link to previous definition Name
1062+ 6996             >SPSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1062+ 6996 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1062+ 6996             >                else
1062+ 6996 98 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1062+ 6998             >                endif           ; ok        // for other definitions it "points" the correct handler
1062+ 6998             >                // Use of "; ok" to suppress "warning[fwdref]"
1062+ 6998             >
1062+ 6998             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1063+ 6998 E1                           pop     hl
1064+ 6999 F9                           ld      sp, hl
1065+ 699A
1066+ 699A                              next
1066+ 699A DD E9       >                jp      (ix)
1067+ 699C
1068+ 699C              //  ______________________________________________________________________
1069+ 699C              //
1070+ 699C              // rp@      -- a
1071+ 699C              // returns on top of stack the value of Return-Pointer
1072+ 699C                              New_Def RPFETCH, "RP@", is_code, is_normal
1072+ 699C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1072+ 699C             >
1072+ 699C             >                // dummy db directives used to calculate length of namec
1072+ 699C 52 50 40    >                db      "RP@"
1072+ 699F             >len_NFA         defl    $ - temp_NFA
1072+ 699F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1072+ 699C             >
1072+ 699C 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1072+ 699D 52 50 40    >                db      "RP@"               // name string in 7-bit ascii, but
1072+ 69A0             >                org     $-1                 // alter last byte of Name just above to set
1072+ 699F C0          >                db      {b $} | END_BIT     // msb as name end
1072+ 69A0             >
1072+ 69A0 90 69       >                dw      last_NFA            // Link to previous definition Name
1072+ 69A2             >RPFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1072+ 69A2 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1072+ 69A2             >                else
1072+ 69A2 A4 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1072+ 69A4             >                endif           ; ok        // for other definitions it "points" the correct handler
1072+ 69A4             >                // Use of "; ok" to suppress "warning[fwdref]"
1072+ 69A4             >
1072+ 69A4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1073+ 69A4
1074+ 69A4                              ldhlrp
1074+ 69A4 2A 30 64    >                ld      hl,(RP_Pointer)
1075+ 69A7
1076+ 69A7                              psh1
1076+ 69A7 E5          >                push    hl
1076+ 69A8 DD E9       >                jp      (ix)
1077+ 69AA
1078+ 69AA              //  ______________________________________________________________________
1079+ 69AA              //
1080+ 69AA              // rp!      a --
1081+ 69AA              // restore RP to the initial value passed
1082+ 69AA              // normally it is R0 @, i.e. the word at offset 8 of user variabiles area.
1083+ 69AA                              New_Def RPSTORE, "RP!", is_code, is_normal
1083+ 69AA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1083+ 69AA             >
1083+ 69AA             >                // dummy db directives used to calculate length of namec
1083+ 69AA 52 50 21    >                db      "RP!"
1083+ 69AD             >len_NFA         defl    $ - temp_NFA
1083+ 69AD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1083+ 69AA             >
1083+ 69AA 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1083+ 69AB 52 50 21    >                db      "RP!"               // name string in 7-bit ascii, but
1083+ 69AE             >                org     $-1                 // alter last byte of Name just above to set
1083+ 69AD A1          >                db      {b $} | END_BIT     // msb as name end
1083+ 69AE             >
1083+ 69AE 9C 69       >                dw      last_NFA            // Link to previous definition Name
1083+ 69B0             >RPSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1083+ 69B0 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1083+ 69B0             >                else
1083+ 69B0 B2 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1083+ 69B2             >                endif           ; ok        // for other definitions it "points" the correct handler
1083+ 69B2             >                // Use of "; ok" to suppress "warning[fwdref]"
1083+ 69B2             >
1083+ 69B2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1084+ 69B2 E1                           pop     hl
1085+ 69B3                              ldrphl
1085+ 69B3 22 30 64    >                ld      (RP_Pointer),hl
1086+ 69B6
1087+ 69B6                              next
1087+ 69B6 DD E9       >                jp      (ix)
1088+ 69B8
1089+ 69B8              //  ______________________________________________________________________
1090+ 69B8              //
1091+ 69B8              // ;s      --
1092+ 69B8              // exits back to the caller word
1093+ 69B8                              New_Def EXIT, ";S", is_code, is_normal
1093+ 69B8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1093+ 69B8             >
1093+ 69B8             >                // dummy db directives used to calculate length of namec
1093+ 69B8 3B 53       >                db      ";S"
1093+ 69BA             >len_NFA         defl    $ - temp_NFA
1093+ 69BA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1093+ 69B8             >
1093+ 69B8 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1093+ 69B9 3B 53       >                db      ";S"               // name string in 7-bit ascii, but
1093+ 69BB             >                org     $-1                 // alter last byte of Name just above to set
1093+ 69BA D3          >                db      {b $} | END_BIT     // msb as name end
1093+ 69BB             >
1093+ 69BB AA 69       >                dw      last_NFA            // Link to previous definition Name
1093+ 69BD             >EXIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1093+ 69BD ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1093+ 69BD             >                else
1093+ 69BD BF 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1093+ 69BF             >                endif           ; ok        // for other definitions it "points" the correct handler
1093+ 69BF             >                // Use of "; ok" to suppress "warning[fwdref]"
1093+ 69BF             >
1093+ 69BF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1094+ 69BF                              ldhlrp                      // Get Return Stack Pointer
1094+ 69BF 2A 30 64    >                ld      hl,(RP_Pointer)
1095+ 69C2 4E                           ld      c, (hl)             // pop Instruction Pointer
1096+ 69C3 23                           inc     hl                  // from Return Stack
1097+ 69C4 46                           ld      b, (hl)
1098+ 69C5 23                           inc     hl
1099+ 69C6                              ldrphl                      // Set Return Stack Pointer
1099+ 69C6 22 30 64    >                ld      (RP_Pointer),hl
1100+ 69C9                              next
1100+ 69C9 DD E9       >                jp      (ix)
1101+ 69CB
1102+ 69CB              //  ______________________________________________________________________
1103+ 69CB              //
1104+ 69CB              // leave        --
1105+ 69CB              // set the limit-of-loop equal to the current index
1106+ 69CB              // this forces to leave from loop at the end of the current iteration
1107+ 69CB                              New_Def LEAVE, "LEAVE", is_code, is_normal
1107+ 69CB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1107+ 69CB             >
1107+ 69CB             >                // dummy db directives used to calculate length of namec
1107+ 69CB 4C 45 41 56 >                db      "LEAVE"
1107+ 69CF 45          >
1107+ 69D0             >len_NFA         defl    $ - temp_NFA
1107+ 69D0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1107+ 69CB             >
1107+ 69CB 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1107+ 69CC 4C 45 41 56 >                db      "LEAVE"               // name string in 7-bit ascii, but
1107+ 69D0 45          >
1107+ 69D1             >                org     $-1                 // alter last byte of Name just above to set
1107+ 69D0 C5          >                db      {b $} | END_BIT     // msb as name end
1107+ 69D1             >
1107+ 69D1 B8 69       >                dw      last_NFA            // Link to previous definition Name
1107+ 69D3             >LEAVE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1107+ 69D3 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1107+ 69D3             >                else
1107+ 69D3 D5 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1107+ 69D5             >                endif           ; ok        // for other definitions it "points" the correct handler
1107+ 69D5             >                // Use of "; ok" to suppress "warning[fwdref]"
1107+ 69D5             >
1107+ 69D5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1108+ 69D5
1109+ 69D5                              ldhlrp
1109+ 69D5 2A 30 64    >                ld      hl,(RP_Pointer)
1110+ 69D8 5E                           ld      e, (hl)
1111+ 69D9 23                           inc     hl
1112+ 69DA 56                           ld      d, (hl)
1113+ 69DB 23                           inc     hl
1114+ 69DC 73                           ld      (hl), e
1115+ 69DD 23                           inc     hl
1116+ 69DE 72                           ld      (hl), d
1117+ 69DF
1118+ 69DF                              next
1118+ 69DF DD E9       >                jp      (ix)
1119+ 69E1
1120+ 69E1              //  ______________________________________________________________________
1121+ 69E1              //
1122+ 69E1              // >r      n --
1123+ 69E1              // pop from calculator-stack and push into return-stack
1124+ 69E1                              New_Def TO_R, ">R", is_code, is_normal
1124+ 69E1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1124+ 69E1             >
1124+ 69E1             >                // dummy db directives used to calculate length of namec
1124+ 69E1 3E 52       >                db      ">R"
1124+ 69E3             >len_NFA         defl    $ - temp_NFA
1124+ 69E3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1124+ 69E1             >
1124+ 69E1 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1124+ 69E2 3E 52       >                db      ">R"               // name string in 7-bit ascii, but
1124+ 69E4             >                org     $-1                 // alter last byte of Name just above to set
1124+ 69E3 D2          >                db      {b $} | END_BIT     // msb as name end
1124+ 69E4             >
1124+ 69E4 CB 69       >                dw      last_NFA            // Link to previous definition Name
1124+ 69E6             >TO_R:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1124+ 69E6 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1124+ 69E6             >                else
1124+ 69E6 E8 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1124+ 69E8             >                endif           ; ok        // for other definitions it "points" the correct handler
1124+ 69E8             >                // Use of "; ok" to suppress "warning[fwdref]"
1124+ 69E8             >
1124+ 69E8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1125+ 69E8 D1                           pop     de
1126+ 69E9                              ldhlrp
1126+ 69E9 2A 30 64    >                ld      hl,(RP_Pointer)
1127+ 69EC 2B                           dec     hl
1128+ 69ED 72                           ld      (hl), d             // store current TOS
1129+ 69EE 2B                           dec     hl                  // to Return Stack
1130+ 69EF 73                           ld      (hl), e
1131+ 69F0                              ldrphl
1131+ 69F0 22 30 64    >                ld      (RP_Pointer),hl
1132+ 69F3
1133+ 69F3                              next
1133+ 69F3 DD E9       >                jp      (ix)
1134+ 69F5
1135+ 69F5              //  ______________________________________________________________________
1136+ 69F5              //
1137+ 69F5              // r>      -- n
1138+ 69F5              // pop from return-stack and push into calculator-stack
1139+ 69F5                              New_Def R_TO, "R>", is_code, is_normal
1139+ 69F5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1139+ 69F5             >
1139+ 69F5             >                // dummy db directives used to calculate length of namec
1139+ 69F5 52 3E       >                db      "R>"
1139+ 69F7             >len_NFA         defl    $ - temp_NFA
1139+ 69F7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1139+ 69F5             >
1139+ 69F5 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1139+ 69F6 52 3E       >                db      "R>"               // name string in 7-bit ascii, but
1139+ 69F8             >                org     $-1                 // alter last byte of Name just above to set
1139+ 69F7 BE          >                db      {b $} | END_BIT     // msb as name end
1139+ 69F8             >
1139+ 69F8 E1 69       >                dw      last_NFA            // Link to previous definition Name
1139+ 69FA             >R_TO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1139+ 69FA ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1139+ 69FA             >                else
1139+ 69FA FC 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1139+ 69FC             >                endif           ; ok        // for other definitions it "points" the correct handler
1139+ 69FC             >                // Use of "; ok" to suppress "warning[fwdref]"
1139+ 69FC             >
1139+ 69FC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1140+ 69FC
1141+ 69FC                              ldhlrp
1141+ 69FC 2A 30 64    >                ld      hl,(RP_Pointer)
1142+ 69FF 5E                           ld      e, (hl)             // retrieve from Return Stack
1143+ 6A00 23                           inc     hl
1144+ 6A01 56                           ld      d, (hl)
1145+ 6A02 23                           inc     hl
1146+ 6A03                              ldrphl
1146+ 6A03 22 30 64    >                ld      (RP_Pointer),hl
1147+ 6A06 D5                           push    de
1148+ 6A07                              next
1148+ 6A07 DD E9       >                jp      (ix)
1149+ 6A09
1150+ 6A09              //  ______________________________________________________________________
1151+ 6A09              //
1152+ 6A09              // r            -- n
1153+ 6A09              // return on top of stack the value of top of return-stack
1154+ 6A09              // Since this is the same as I, we alter R's CFA to jump there
1155+ 6A09                              New_Def R_OP, "R", I_Ptr, is_normal
1155+ 6A09             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1155+ 6A09             >
1155+ 6A09             >                // dummy db directives used to calculate length of namec
1155+ 6A09 52          >                db      "R"
1155+ 6A0A             >len_NFA         defl    $ - temp_NFA
1155+ 6A0A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1155+ 6A09             >
1155+ 6A09 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1155+ 6A0A 52          >                db      "R"               // name string in 7-bit ascii, but
1155+ 6A0B             >                org     $-1                 // alter last byte of Name just above to set
1155+ 6A0A D2          >                db      {b $} | END_BIT     // msb as name end
1155+ 6A0B             >
1155+ 6A0B F5 69       >                dw      last_NFA            // Link to previous definition Name
1155+ 6A0D             >R_OP:          if I_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1155+ 6A0D 12 65       >                dw      I_Ptr ; ok        // for primitive definitions  actual code
1155+ 6A0F             >                else
1155+ 6A0F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1155+ 6A0F             >                endif           ; ok        // for other definitions it "points" the correct handler
1155+ 6A0F             >                // Use of "; ok" to suppress "warning[fwdref]"
1155+ 6A0F             >
1155+ 6A0F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1156+ 6A0F
1157+ 6A0F              //  ______________________________________________________________________
1158+ 6A0F              //
1159+ 6A0F              // 0=           n -- f
1160+ 6A0F              // true (non zero) if n is zero, false (0) elsewere
1161+ 6A0F                              New_Def ZEQUAL, "0=", is_code, is_normal
1161+ 6A0F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1161+ 6A0F             >
1161+ 6A0F             >                // dummy db directives used to calculate length of namec
1161+ 6A0F 30 3D       >                db      "0="
1161+ 6A11             >len_NFA         defl    $ - temp_NFA
1161+ 6A11             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1161+ 6A0F             >
1161+ 6A0F 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1161+ 6A10 30 3D       >                db      "0="               // name string in 7-bit ascii, but
1161+ 6A12             >                org     $-1                 // alter last byte of Name just above to set
1161+ 6A11 BD          >                db      {b $} | END_BIT     // msb as name end
1161+ 6A12             >
1161+ 6A12 09 6A       >                dw      last_NFA            // Link to previous definition Name
1161+ 6A14             >ZEQUAL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1161+ 6A14 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1161+ 6A14             >                else
1161+ 6A14 16 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1161+ 6A16             >                endif           ; ok        // for other definitions it "points" the correct handler
1161+ 6A16             >                // Use of "; ok" to suppress "warning[fwdref]"
1161+ 6A16             >
1161+ 6A16             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1162+ 6A16 E1                           pop     hl
1163+ 6A17 7D                           ld      a, l
1164+ 6A18 B4                           or      h
1165+ 6A19 21 00 00                     ld      hl, FALSE_FLAG
1166+ 6A1C 20 01                        jr      nz, ZEqual_Skip
1167+ 6A1E 2C                               inc     l
1168+ 6A1F              ZEqual_Skip:
1169+ 6A1F                              psh1
1169+ 6A1F E5          >                push    hl
1169+ 6A20 DD E9       >                jp      (ix)
1170+ 6A22
1171+ 6A22              //  ______________________________________________________________________
1172+ 6A22              //
1173+ 6A22              // 0<           n -- f
1174+ 6A22              // true (non zero) if n is less than zero, false (0) elsewere
1175+ 6A22                              New_Def ZLESS, "0<", is_code, is_normal
1175+ 6A22             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1175+ 6A22             >
1175+ 6A22             >                // dummy db directives used to calculate length of namec
1175+ 6A22 30 3C       >                db      "0<"
1175+ 6A24             >len_NFA         defl    $ - temp_NFA
1175+ 6A24             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1175+ 6A22             >
1175+ 6A22 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1175+ 6A23 30 3C       >                db      "0<"               // name string in 7-bit ascii, but
1175+ 6A25             >                org     $-1                 // alter last byte of Name just above to set
1175+ 6A24 BC          >                db      {b $} | END_BIT     // msb as name end
1175+ 6A25             >
1175+ 6A25 0F 6A       >                dw      last_NFA            // Link to previous definition Name
1175+ 6A27             >ZLESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1175+ 6A27 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1175+ 6A27             >                else
1175+ 6A27 29 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1175+ 6A29             >                endif           ; ok        // for other definitions it "points" the correct handler
1175+ 6A29             >                // Use of "; ok" to suppress "warning[fwdref]"
1175+ 6A29             >
1175+ 6A29             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1176+ 6A29 E1                           pop     hl
1177+ 6A2A 29                           add     hl, hl
1178+ 6A2B 21 00 00                     ld      hl, 0
1179+ 6A2E 30 01                        jr      nc, ZLess_Skip
1180+ 6A30 2C                               inc     l
1181+ 6A31              ZLess_Skip:
1182+ 6A31                              psh1
1182+ 6A31 E5          >                push    hl
1182+ 6A32 DD E9       >                jp      (ix)
1183+ 6A34
1184+ 6A34              //  ______________________________________________________________________
1185+ 6A34              //
1186+ 6A34              // 0>           n -- f
1187+ 6A34              // true (non zero) if n is less than zero, false (0) elsewere
1188+ 6A34                              New_Def ZGREATER, "0>", is_code, is_normal
1188+ 6A34             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1188+ 6A34             >
1188+ 6A34             >                // dummy db directives used to calculate length of namec
1188+ 6A34 30 3E       >                db      "0>"
1188+ 6A36             >len_NFA         defl    $ - temp_NFA
1188+ 6A36             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1188+ 6A34             >
1188+ 6A34 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1188+ 6A35 30 3E       >                db      "0>"               // name string in 7-bit ascii, but
1188+ 6A37             >                org     $-1                 // alter last byte of Name just above to set
1188+ 6A36 BE          >                db      {b $} | END_BIT     // msb as name end
1188+ 6A37             >
1188+ 6A37 22 6A       >                dw      last_NFA            // Link to previous definition Name
1188+ 6A39             >ZGREATER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1188+ 6A39 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1188+ 6A39             >                else
1188+ 6A39 3B 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1188+ 6A3B             >                endif           ; ok        // for other definitions it "points" the correct handler
1188+ 6A3B             >                // Use of "; ok" to suppress "warning[fwdref]"
1188+ 6A3B             >
1188+ 6A3B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1189+ 6A3B E1                           pop     hl
1190+ 6A3C 7D                           ld      a, l
1191+ 6A3D B4                           or      h
1192+ 6A3E 29                           add     hl, hl
1193+ 6A3F 21 00 00                     ld      hl, FALSE_FLAG
1194+ 6A42 38 04                        jr      c, ZGreater_Skip
1195+ 6A44 A7                               and     a
1196+ 6A45 28 01                            jr      z, ZGreater_Skip
1197+ 6A47 2C                                   inc     l
1198+ 6A48              ZGreater_Skip:
1199+ 6A48                              psh1
1199+ 6A48 E5          >                push    hl
1199+ 6A49 DD E9       >                jp      (ix)
1200+ 6A4B
1201+ 6A4B              //  ______________________________________________________________________
1202+ 6A4B              //
1203+ 6A4B              // +            n1 n2 -- n3
1204+ 6A4B              // returns the unsigned sum of two top values
1205+ 6A4B                              New_Def PLUS, "+", is_code, is_normal
1205+ 6A4B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1205+ 6A4B             >
1205+ 6A4B             >                // dummy db directives used to calculate length of namec
1205+ 6A4B 2B          >                db      "+"
1205+ 6A4C             >len_NFA         defl    $ - temp_NFA
1205+ 6A4C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1205+ 6A4B             >
1205+ 6A4B 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1205+ 6A4C 2B          >                db      "+"               // name string in 7-bit ascii, but
1205+ 6A4D             >                org     $-1                 // alter last byte of Name just above to set
1205+ 6A4C AB          >                db      {b $} | END_BIT     // msb as name end
1205+ 6A4D             >
1205+ 6A4D 34 6A       >                dw      last_NFA            // Link to previous definition Name
1205+ 6A4F             >PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1205+ 6A4F ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1205+ 6A4F             >                else
1205+ 6A4F 51 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1205+ 6A51             >                endif           ; ok        // for other definitions it "points" the correct handler
1205+ 6A51             >                // Use of "; ok" to suppress "warning[fwdref]"
1205+ 6A51             >
1205+ 6A51             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1206+ 6A51 E1                           pop     hl
1207+ 6A52 D1                           pop     de
1208+ 6A53 19                           add     hl, de
1209+ 6A54
1210+ 6A54                              psh1
1210+ 6A54 E5          >                push    hl
1210+ 6A55 DD E9       >                jp      (ix)
1211+ 6A57
1212+ 6A57
1213+ 6A57              //  ______________________________________________________________________
1214+ 6A57              //
1215+ 6A57              // d+           d1 d2 -- d3
1216+ 6A57              // returns the unsigned sum of two top double-numbers
1217+ 6A57              //      d2  d1
1218+ 6A57              //      h l h l
1219+ 6A57              // SP   LHEDLHED
1220+ 6A57              // SP  +01234567
1221+ 6A57                              New_Def DPLUS, "D+", is_code, is_normal
1221+ 6A57             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1221+ 6A57             >
1221+ 6A57             >                // dummy db directives used to calculate length of namec
1221+ 6A57 44 2B       >                db      "D+"
1221+ 6A59             >len_NFA         defl    $ - temp_NFA
1221+ 6A59             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1221+ 6A57             >
1221+ 6A57 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1221+ 6A58 44 2B       >                db      "D+"               // name string in 7-bit ascii, but
1221+ 6A5A             >                org     $-1                 // alter last byte of Name just above to set
1221+ 6A59 AB          >                db      {b $} | END_BIT     // msb as name end
1221+ 6A5A             >
1221+ 6A5A 4B 6A       >                dw      last_NFA            // Link to previous definition Name
1221+ 6A5C             >DPLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1221+ 6A5C ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1221+ 6A5C             >                else
1221+ 6A5C 5E 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1221+ 6A5E             >                endif           ; ok        // for other definitions it "points" the correct handler
1221+ 6A5E             >                // Use of "; ok" to suppress "warning[fwdref]"
1221+ 6A5E             >
1221+ 6A5E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1222+ 6A5E
1223+ 6A5E 21 07 00                     ld      hl, 7
1224+ 6A61 39                           add     hl, sp
1225+ 6A62 56                           ld      d, (hl)
1226+ 6A63 70                           ld      (hl), b             // Save IP
1227+ 6A64 2B                           dec     hl
1228+ 6A65 5E                           ld      e, (hl)
1229+ 6A66 71                           ld      (hl), c             // de := d1.L
1230+ 6A67 C1                           pop     bc                  // bc := d2.H
1231+ 6A68 E1                           pop     hl                  // hl := d2.L
1232+ 6A69 19                           add     hl, de              // hl := d2.L + d1.L
1233+ 6A6A EB                           ex      de, hl              // de := lower
1234+ 6A6B E1                           pop     hl                  // d1.H
1235+ 6A6C ED 4A                        adc     hl, bc              // d1.H + d2.H
1236+ 6A6E C1                           pop     bc                  // Restore IP
1237+ 6A6F
1238+ 6A6F
1239+ 6A6F                              psh2
1239+ 6A6F D5          >                push    de
1239+ 6A70 E5          >                push    hl
1239+ 6A71 DD E9       >                jp      (ix)
1240+ 6A73
1241+ 6A73              //  ______________________________________________________________________
1242+ 6A73              //
1243+ 6A73              // 1+           n1 -- n2
1244+ 6A73              // increment by 1 top of stack
1245+ 6A73                              New_Def ONE_PLUS, "1+", is_code, is_normal
1245+ 6A73             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1245+ 6A73             >
1245+ 6A73             >                // dummy db directives used to calculate length of namec
1245+ 6A73 31 2B       >                db      "1+"
1245+ 6A75             >len_NFA         defl    $ - temp_NFA
1245+ 6A75             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1245+ 6A73             >
1245+ 6A73 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1245+ 6A74 31 2B       >                db      "1+"               // name string in 7-bit ascii, but
1245+ 6A76             >                org     $-1                 // alter last byte of Name just above to set
1245+ 6A75 AB          >                db      {b $} | END_BIT     // msb as name end
1245+ 6A76             >
1245+ 6A76 57 6A       >                dw      last_NFA            // Link to previous definition Name
1245+ 6A78             >ONE_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1245+ 6A78 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1245+ 6A78             >                else
1245+ 6A78 7A 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1245+ 6A7A             >                endif           ; ok        // for other definitions it "points" the correct handler
1245+ 6A7A             >                // Use of "; ok" to suppress "warning[fwdref]"
1245+ 6A7A             >
1245+ 6A7A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1246+ 6A7A E1                           pop     hl
1247+ 6A7B 23                           inc     hl
1248+ 6A7C
1249+ 6A7C                              psh1
1249+ 6A7C E5          >                push    hl
1249+ 6A7D DD E9       >                jp      (ix)
1250+ 6A7F
1251+ 6A7F              //  ______________________________________________________________________
1252+ 6A7F              //
1253+ 6A7F              // 1-           n1 -- n2
1254+ 6A7F              // decrement by 1 top of stack
1255+ 6A7F                              New_Def ONE_SUBTRACT, "1-", is_code, is_normal
1255+ 6A7F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1255+ 6A7F             >
1255+ 6A7F             >                // dummy db directives used to calculate length of namec
1255+ 6A7F 31 2D       >                db      "1-"
1255+ 6A81             >len_NFA         defl    $ - temp_NFA
1255+ 6A81             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1255+ 6A7F             >
1255+ 6A7F 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1255+ 6A80 31 2D       >                db      "1-"               // name string in 7-bit ascii, but
1255+ 6A82             >                org     $-1                 // alter last byte of Name just above to set
1255+ 6A81 AD          >                db      {b $} | END_BIT     // msb as name end
1255+ 6A82             >
1255+ 6A82 73 6A       >                dw      last_NFA            // Link to previous definition Name
1255+ 6A84             >ONE_SUBTRACT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1255+ 6A84 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1255+ 6A84             >                else
1255+ 6A84 86 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1255+ 6A86             >                endif           ; ok        // for other definitions it "points" the correct handler
1255+ 6A86             >                // Use of "; ok" to suppress "warning[fwdref]"
1255+ 6A86             >
1255+ 6A86             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1256+ 6A86 E1                           pop     hl
1257+ 6A87 2B                           dec     hl
1258+ 6A88
1259+ 6A88                              psh1
1259+ 6A88 E5          >                push    hl
1259+ 6A89 DD E9       >                jp      (ix)
1260+ 6A8B
1261+ 6A8B              //  ______________________________________________________________________
1262+ 6A8B              //
1263+ 6A8B              // 2+           n1 -- n2
1264+ 6A8B              // increment by 2 top of stack
1265+ 6A8B                              New_Def TWO_PLUS, "2+", is_code, is_normal
1265+ 6A8B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1265+ 6A8B             >
1265+ 6A8B             >                // dummy db directives used to calculate length of namec
1265+ 6A8B 32 2B       >                db      "2+"
1265+ 6A8D             >len_NFA         defl    $ - temp_NFA
1265+ 6A8D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1265+ 6A8B             >
1265+ 6A8B 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1265+ 6A8C 32 2B       >                db      "2+"               // name string in 7-bit ascii, but
1265+ 6A8E             >                org     $-1                 // alter last byte of Name just above to set
1265+ 6A8D AB          >                db      {b $} | END_BIT     // msb as name end
1265+ 6A8E             >
1265+ 6A8E 7F 6A       >                dw      last_NFA            // Link to previous definition Name
1265+ 6A90             >TWO_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1265+ 6A90 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1265+ 6A90             >                else
1265+ 6A90 92 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1265+ 6A92             >                endif           ; ok        // for other definitions it "points" the correct handler
1265+ 6A92             >                // Use of "; ok" to suppress "warning[fwdref]"
1265+ 6A92             >
1265+ 6A92             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1266+ 6A92              Two_Plus:
1267+ 6A92 E1                           pop     hl
1268+ 6A93 23                           inc     hl
1269+ 6A94 23                           inc     hl
1270+ 6A95
1271+ 6A95                              psh1
1271+ 6A95 E5          >                push    hl
1271+ 6A96 DD E9       >                jp      (ix)
1272+ 6A98
1273+ 6A98              //  ______________________________________________________________________
1274+ 6A98              //
1275+ 6A98              // cell+        a1 -- a2
1276+ 6A98              // increment by 2 top of stack
1277+ 6A98                              New_Def CELL_PLUS, "CELL+", Two_Plus, is_normal
1277+ 6A98             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1277+ 6A98             >
1277+ 6A98             >                // dummy db directives used to calculate length of namec
1277+ 6A98 43 45 4C 4C >                db      "CELL+"
1277+ 6A9C 2B          >
1277+ 6A9D             >len_NFA         defl    $ - temp_NFA
1277+ 6A9D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1277+ 6A98             >
1277+ 6A98 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1277+ 6A99 43 45 4C 4C >                db      "CELL+"               // name string in 7-bit ascii, but
1277+ 6A9D 2B          >
1277+ 6A9E             >                org     $-1                 // alter last byte of Name just above to set
1277+ 6A9D AB          >                db      {b $} | END_BIT     // msb as name end
1277+ 6A9E             >
1277+ 6A9E 8B 6A       >                dw      last_NFA            // Link to previous definition Name
1277+ 6AA0             >CELL_PLUS:          if Two_Plus != 0 ; ok        // This is the start address of the direct jp(hl)
1277+ 6AA0 92 6A       >                dw      Two_Plus ; ok        // for primitive definitions  actual code
1277+ 6AA2             >                else
1277+ 6AA2 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1277+ 6AA2             >                endif           ; ok        // for other definitions it "points" the correct handler
1277+ 6AA2             >                // Use of "; ok" to suppress "warning[fwdref]"
1277+ 6AA2             >
1277+ 6AA2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1278+ 6AA2
1279+ 6AA2              //  ______________________________________________________________________
1280+ 6AA2              //
1281+ 6AA2              // align        a1 -- a2
1282+ 6AA2              // align memory : not used
1283+ 6AA2              //              New_Def ALIGN_ADDR, "ALIGN", is_code, is_normal
1284+ 6AA2              //            next
1285+ 6AA2
1286+ 6AA2              //  ______________________________________________________________________
1287+ 6AA2              //
1288+ 6AA2              // cell-        a1 -- a2
1289+ 6AA2              // decrement by 2 top of stack
1290+ 6AA2                              New_Def CELL_MINUS, "CELL-", is_code, is_normal
1290+ 6AA2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1290+ 6AA2             >
1290+ 6AA2             >                // dummy db directives used to calculate length of namec
1290+ 6AA2 43 45 4C 4C >                db      "CELL-"
1290+ 6AA6 2D          >
1290+ 6AA7             >len_NFA         defl    $ - temp_NFA
1290+ 6AA7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1290+ 6AA2             >
1290+ 6AA2 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1290+ 6AA3 43 45 4C 4C >                db      "CELL-"               // name string in 7-bit ascii, but
1290+ 6AA7 2D          >
1290+ 6AA8             >                org     $-1                 // alter last byte of Name just above to set
1290+ 6AA7 AD          >                db      {b $} | END_BIT     // msb as name end
1290+ 6AA8             >
1290+ 6AA8 98 6A       >                dw      last_NFA            // Link to previous definition Name
1290+ 6AAA             >CELL_MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1290+ 6AAA ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1290+ 6AAA             >                else
1290+ 6AAA AC 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1290+ 6AAC             >                endif           ; ok        // for other definitions it "points" the correct handler
1290+ 6AAC             >                // Use of "; ok" to suppress "warning[fwdref]"
1290+ 6AAC             >
1290+ 6AAC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1291+ 6AAC E1                           pop     hl
1292+ 6AAD 2B                           dec     hl
1293+ 6AAE 2B                           dec     hl
1294+ 6AAF
1295+ 6AAF                              psh1
1295+ 6AAF E5          >                push    hl
1295+ 6AB0 DD E9       >                jp      (ix)
1296+ 6AB2
1297+ 6AB2              //  ______________________________________________________________________
1298+ 6AB2              //
1299+ 6AB2              // minus        n1 -- n2
1300+ 6AB2              // change the sign of number
1301+ 6AB2                              New_Def MINUS, "MINUS", is_code, is_normal
1301+ 6AB2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1301+ 6AB2             >
1301+ 6AB2             >                // dummy db directives used to calculate length of namec
1301+ 6AB2 4D 49 4E 55 >                db      "MINUS"
1301+ 6AB6 53          >
1301+ 6AB7             >len_NFA         defl    $ - temp_NFA
1301+ 6AB7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1301+ 6AB2             >
1301+ 6AB2 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1301+ 6AB3 4D 49 4E 55 >                db      "MINUS"               // name string in 7-bit ascii, but
1301+ 6AB7 53          >
1301+ 6AB8             >                org     $-1                 // alter last byte of Name just above to set
1301+ 6AB7 D3          >                db      {b $} | END_BIT     // msb as name end
1301+ 6AB8             >
1301+ 6AB8 A2 6A       >                dw      last_NFA            // Link to previous definition Name
1301+ 6ABA             >MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1301+ 6ABA ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1301+ 6ABA             >                else
1301+ 6ABA BC 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1301+ 6ABC             >                endif           ; ok        // for other definitions it "points" the correct handler
1301+ 6ABC             >                // Use of "; ok" to suppress "warning[fwdref]"
1301+ 6ABC             >
1301+ 6ABC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1302+ 6ABC 21 00 00                     ld      hl, 0               // subtract from 0
1303+ 6ABF D1                           pop     de
1304+ 6AC0 B7                           or      a
1305+ 6AC1 ED 52                        sbc     hl, de
1306+ 6AC3
1307+ 6AC3                              psh1
1307+ 6AC3 E5          >                push    hl
1307+ 6AC4 DD E9       >                jp      (ix)
1308+ 6AC6
1309+ 6AC6              //  ______________________________________________________________________
1310+ 6AC6              //
1311+ 6AC6              // dminus       d1 -- d2
1312+ 6AC6              // change the sign of a double number
1313+ 6AC6                              New_Def DMINUS, "DMINUS", is_code, is_normal
1313+ 6AC6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1313+ 6AC6             >
1313+ 6AC6             >                // dummy db directives used to calculate length of namec
1313+ 6AC6 44 4D 49 4E >                db      "DMINUS"
1313+ 6ACA 55 53       >
1313+ 6ACC             >len_NFA         defl    $ - temp_NFA
1313+ 6ACC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1313+ 6AC6             >
1313+ 6AC6 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1313+ 6AC7 44 4D 49 4E >                db      "DMINUS"               // name string in 7-bit ascii, but
1313+ 6ACB 55 53       >
1313+ 6ACD             >                org     $-1                 // alter last byte of Name just above to set
1313+ 6ACC D3          >                db      {b $} | END_BIT     // msb as name end
1313+ 6ACD             >
1313+ 6ACD B2 6A       >                dw      last_NFA            // Link to previous definition Name
1313+ 6ACF             >DMINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1313+ 6ACF ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1313+ 6ACF             >                else
1313+ 6ACF D1 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1313+ 6AD1             >                endif           ; ok        // for other definitions it "points" the correct handler
1313+ 6AD1             >                // Use of "; ok" to suppress "warning[fwdref]"
1313+ 6AD1             >
1313+ 6AD1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1314+ 6AD1 E1                           pop     hl                  // d1.H
1315+ 6AD2 D1                           pop     de                  // d1.L
1316+ 6AD3 C5                           push    bc                  // Save Instruction Pointer
1317+ 6AD4 44                           ld      b, h
1318+ 6AD5 4D                           ld      c, l                // bc := d1.L
1319+ 6AD6 AF                           xor     a
1320+ 6AD7 67                           ld      h, a
1321+ 6AD8 6F                           ld      l, a
1322+ 6AD9 ED 52                        sbc     hl, de              // subtact from zero
1323+ 6ADB D1                           pop     de                  // Retrieve Instruction Pointer
1324+ 6ADC E5                           push    hl                  // > d2-L
1325+ 6ADD 67                           ld      h, a
1326+ 6ADE 6F                           ld      l, a
1327+ 6ADF ED 42                        sbc     hl, bc              // subtract from zero with carry
1328+ 6AE1                                                          // > d2-H
1329+ 6AE1 42                           ld      b, d
1330+ 6AE2 4B                           ld      c, e
1331+ 6AE3                              psh1
1331+ 6AE3 E5          >                push    hl
1331+ 6AE4 DD E9       >                jp      (ix)
1332+ 6AE6
1333+ 6AE6              //  ______________________________________________________________________
1334+ 6AE6              //
1335+ 6AE6              // over         n1 n2 -- n1 n2 n1
1336+ 6AE6              // copy the second value of stack and put it on top.
1337+ 6AE6                              New_Def OVER, "OVER", is_code, is_normal
1337+ 6AE6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1337+ 6AE6             >
1337+ 6AE6             >                // dummy db directives used to calculate length of namec
1337+ 6AE6 4F 56 45 52 >                db      "OVER"
1337+ 6AEA             >len_NFA         defl    $ - temp_NFA
1337+ 6AEA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1337+ 6AE6             >
1337+ 6AE6 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1337+ 6AE7 4F 56 45 52 >                db      "OVER"               // name string in 7-bit ascii, but
1337+ 6AEB             >                org     $-1                 // alter last byte of Name just above to set
1337+ 6AEA D2          >                db      {b $} | END_BIT     // msb as name end
1337+ 6AEB             >
1337+ 6AEB C6 6A       >                dw      last_NFA            // Link to previous definition Name
1337+ 6AED             >OVER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1337+ 6AED ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1337+ 6AED             >                else
1337+ 6AED EF 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1337+ 6AEF             >                endif           ; ok        // for other definitions it "points" the correct handler
1337+ 6AEF             >                // Use of "; ok" to suppress "warning[fwdref]"
1337+ 6AEF             >
1337+ 6AEF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1338+ 6AEF D1                           pop     de                  //   n2
1339+ 6AF0 E1                           pop     hl                  // < n1
1340+ 6AF1 E5                           push    hl                  // > n1
1341+ 6AF2 D5                           push    de                  // > n2
1342+ 6AF3 E5                           push    hl                  // > n1
1343+ 6AF4                              next
1343+ 6AF4 DD E9       >                jp      (ix)
1344+ 6AF6
1345+ 6AF6              //  ______________________________________________________________________
1346+ 6AF6              //
1347+ 6AF6              // drop         n1 --
1348+ 6AF6              // drops the top of stack
1349+ 6AF6                              New_Def DROP, "DROP", is_code, is_normal
1349+ 6AF6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1349+ 6AF6             >
1349+ 6AF6             >                // dummy db directives used to calculate length of namec
1349+ 6AF6 44 52 4F 50 >                db      "DROP"
1349+ 6AFA             >len_NFA         defl    $ - temp_NFA
1349+ 6AFA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1349+ 6AF6             >
1349+ 6AF6 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1349+ 6AF7 44 52 4F 50 >                db      "DROP"               // name string in 7-bit ascii, but
1349+ 6AFB             >                org     $-1                 // alter last byte of Name just above to set
1349+ 6AFA D0          >                db      {b $} | END_BIT     // msb as name end
1349+ 6AFB             >
1349+ 6AFB E6 6A       >                dw      last_NFA            // Link to previous definition Name
1349+ 6AFD             >DROP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1349+ 6AFD ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1349+ 6AFD             >                else
1349+ 6AFD FF 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1349+ 6AFF             >                endif           ; ok        // for other definitions it "points" the correct handler
1349+ 6AFF             >                // Use of "; ok" to suppress "warning[fwdref]"
1349+ 6AFF             >
1349+ 6AFF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1350+ 6AFF E1                           pop     hl                  // < n1 and discard previous TOS
1351+ 6B00                              next
1351+ 6B00 DD E9       >                jp      (ix)
1352+ 6B02
1353+ 6B02              //  ______________________________________________________________________
1354+ 6B02              //
1355+ 6B02              // nip          n1 n2 -- n2
1356+ 6B02              // drops the second elemento on the stack
1357+ 6B02                              New_Def NIP, "NIP", is_code, is_normal
1357+ 6B02             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1357+ 6B02             >
1357+ 6B02             >                // dummy db directives used to calculate length of namec
1357+ 6B02 4E 49 50    >                db      "NIP"
1357+ 6B05             >len_NFA         defl    $ - temp_NFA
1357+ 6B05             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1357+ 6B02             >
1357+ 6B02 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1357+ 6B03 4E 49 50    >                db      "NIP"               // name string in 7-bit ascii, but
1357+ 6B06             >                org     $-1                 // alter last byte of Name just above to set
1357+ 6B05 D0          >                db      {b $} | END_BIT     // msb as name end
1357+ 6B06             >
1357+ 6B06 F6 6A       >                dw      last_NFA            // Link to previous definition Name
1357+ 6B08             >NIP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1357+ 6B08 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1357+ 6B08             >                else
1357+ 6B08 0A 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1357+ 6B0A             >                endif           ; ok        // for other definitions it "points" the correct handler
1357+ 6B0A             >                // Use of "; ok" to suppress "warning[fwdref]"
1357+ 6B0A             >
1357+ 6B0A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1358+ 6B0A
1359+ 6B0A E1                           pop     hl                  // < n1 discarded
1360+ 6B0B E3                           ex      (sp), hl
1361+ 6B0C                              next
1361+ 6B0C DD E9       >                jp      (ix)
1362+ 6B0E
1363+ 6B0E              //  ______________________________________________________________________
1364+ 6B0E              //
1365+ 6B0E              // tuck         n1 n2 -- n2 n1 n2
1366+ 6B0E              // copy the top element after the second.
1367+ 6B0E                              New_Def TUCK, "TUCK", is_code, is_normal
1367+ 6B0E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1367+ 6B0E             >
1367+ 6B0E             >                // dummy db directives used to calculate length of namec
1367+ 6B0E 54 55 43 4B >                db      "TUCK"
1367+ 6B12             >len_NFA         defl    $ - temp_NFA
1367+ 6B12             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1367+ 6B0E             >
1367+ 6B0E 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1367+ 6B0F 54 55 43 4B >                db      "TUCK"               // name string in 7-bit ascii, but
1367+ 6B13             >                org     $-1                 // alter last byte of Name just above to set
1367+ 6B12 CB          >                db      {b $} | END_BIT     // msb as name end
1367+ 6B13             >
1367+ 6B13 02 6B       >                dw      last_NFA            // Link to previous definition Name
1367+ 6B15             >TUCK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1367+ 6B15 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1367+ 6B15             >                else
1367+ 6B15 17 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1367+ 6B17             >                endif           ; ok        // for other definitions it "points" the correct handler
1367+ 6B17             >                // Use of "; ok" to suppress "warning[fwdref]"
1367+ 6B17             >
1367+ 6B17             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1368+ 6B17 E1                           pop     hl
1369+ 6B18 D1                           pop     de                  // < n1
1370+ 6B19 E5                           push    hl                  // > n2  and TOS
1371+ 6B1A D5                           push    de                  // > n1
1372+ 6B1B E5                           push    hl
1373+ 6B1C                              next
1373+ 6B1C DD E9       >                jp      (ix)
1374+ 6B1E
1375+ 6B1E              //  ______________________________________________________________________
1376+ 6B1E              //
1377+ 6B1E              // swap         n1 n2 -- n2 n1
1378+ 6B1E              // swaps the two values on top of stack
1379+ 6B1E                              New_Def SWAP, "SWAP", is_code, is_normal
1379+ 6B1E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1379+ 6B1E             >
1379+ 6B1E             >                // dummy db directives used to calculate length of namec
1379+ 6B1E 53 57 41 50 >                db      "SWAP"
1379+ 6B22             >len_NFA         defl    $ - temp_NFA
1379+ 6B22             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1379+ 6B1E             >
1379+ 6B1E 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1379+ 6B1F 53 57 41 50 >                db      "SWAP"               // name string in 7-bit ascii, but
1379+ 6B23             >                org     $-1                 // alter last byte of Name just above to set
1379+ 6B22 D0          >                db      {b $} | END_BIT     // msb as name end
1379+ 6B23             >
1379+ 6B23 0E 6B       >                dw      last_NFA            // Link to previous definition Name
1379+ 6B25             >SWAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1379+ 6B25 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1379+ 6B25             >                else
1379+ 6B25 27 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1379+ 6B27             >                endif           ; ok        // for other definitions it "points" the correct handler
1379+ 6B27             >                // Use of "; ok" to suppress "warning[fwdref]"
1379+ 6B27             >
1379+ 6B27             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1380+ 6B27 E1                           pop     hl                  // < n1
1381+ 6B28 E3                           ex      (sp),hl             // > n2
1382+ 6B29 E5                           push    hl                  // copy n1 to TOS
1383+ 6B2A                              next
1383+ 6B2A DD E9       >                jp      (ix)
1384+ 6B2C
1385+ 6B2C              //  ______________________________________________________________________
1386+ 6B2C              //
1387+ 6B2C              // dup         n -- n n
1388+ 6B2C              // duplicates the top value of stack
1389+ 6B2C                              New_Def DUP, "DUP", is_code, is_normal
1389+ 6B2C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1389+ 6B2C             >
1389+ 6B2C             >                // dummy db directives used to calculate length of namec
1389+ 6B2C 44 55 50    >                db      "DUP"
1389+ 6B2F             >len_NFA         defl    $ - temp_NFA
1389+ 6B2F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1389+ 6B2C             >
1389+ 6B2C 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1389+ 6B2D 44 55 50    >                db      "DUP"               // name string in 7-bit ascii, but
1389+ 6B30             >                org     $-1                 // alter last byte of Name just above to set
1389+ 6B2F D0          >                db      {b $} | END_BIT     // msb as name end
1389+ 6B30             >
1389+ 6B30 1E 6B       >                dw      last_NFA            // Link to previous definition Name
1389+ 6B32             >DUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1389+ 6B32 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1389+ 6B32             >                else
1389+ 6B32 34 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1389+ 6B34             >                endif           ; ok        // for other definitions it "points" the correct handler
1389+ 6B34             >                // Use of "; ok" to suppress "warning[fwdref]"
1389+ 6B34             >
1389+ 6B34             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1390+ 6B34 E1                           pop     hl
1391+ 6B35 E5                           push    hl                  // > n duplicate TOS
1392+ 6B36 E5                           push    hl
1393+ 6B37                              next
1393+ 6B37 DD E9       >                jp      (ix)
1394+ 6B39
1395+ 6B39              //  ______________________________________________________________________
1396+ 6B39              //
1397+ 6B39              // rot         n1 n2 n3 -- n2 n3 n1
1398+ 6B39              // Rotates the 3 top values of stack by picking the 3rd in access-order
1399+ 6B39              // and putting it on top. The other two are shifted down one place.
1400+ 6B39                              New_Def ROT, "ROT", is_code, is_normal
1400+ 6B39             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1400+ 6B39             >
1400+ 6B39             >                // dummy db directives used to calculate length of namec
1400+ 6B39 52 4F 54    >                db      "ROT"
1400+ 6B3C             >len_NFA         defl    $ - temp_NFA
1400+ 6B3C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1400+ 6B39             >
1400+ 6B39 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1400+ 6B3A 52 4F 54    >                db      "ROT"               // name string in 7-bit ascii, but
1400+ 6B3D             >                org     $-1                 // alter last byte of Name just above to set
1400+ 6B3C D4          >                db      {b $} | END_BIT     // msb as name end
1400+ 6B3D             >
1400+ 6B3D 2C 6B       >                dw      last_NFA            // Link to previous definition Name
1400+ 6B3F             >ROT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1400+ 6B3F ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1400+ 6B3F             >                else
1400+ 6B3F 41 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1400+ 6B41             >                endif           ; ok        // for other definitions it "points" the correct handler
1400+ 6B41             >                // Use of "; ok" to suppress "warning[fwdref]"
1400+ 6B41             >
1400+ 6B41             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1401+ 6B41 D1                           pop     de                  // < n2
1402+ 6B42 E1                           pop     hl                  // < n1
1403+ 6B43 E3                           ex      (sp),hl             // > n2
1404+ 6B44 D5                           push    de                  // > n3
1405+ 6B45 E5                           push    hl                  // copy n1 to TOS
1406+ 6B46                              next
1406+ 6B46 DD E9       >                jp      (ix)
1407+ 6B48
1408+ 6B48              //  ______________________________________________________________________
1409+ 6B48              //
1410+ 6B48              // pick        n1 -- nx
1411+ 6B48              // picks the nth element from TOS
1412+ 6B48                              New_Def PICK, "PICK", is_code, is_normal
1412+ 6B48             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1412+ 6B48             >
1412+ 6B48             >                // dummy db directives used to calculate length of namec
1412+ 6B48 50 49 43 4B >                db      "PICK"
1412+ 6B4C             >len_NFA         defl    $ - temp_NFA
1412+ 6B4C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1412+ 6B48             >
1412+ 6B48 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1412+ 6B49 50 49 43 4B >                db      "PICK"               // name string in 7-bit ascii, but
1412+ 6B4D             >                org     $-1                 // alter last byte of Name just above to set
1412+ 6B4C CB          >                db      {b $} | END_BIT     // msb as name end
1412+ 6B4D             >
1412+ 6B4D 39 6B       >                dw      last_NFA            // Link to previous definition Name
1412+ 6B4F             >PICK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1412+ 6B4F ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1412+ 6B4F             >                else
1412+ 6B4F 51 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1412+ 6B51             >                endif           ; ok        // for other definitions it "points" the correct handler
1412+ 6B51             >                // Use of "; ok" to suppress "warning[fwdref]"
1412+ 6B51             >
1412+ 6B51             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1413+ 6B51 E1                           pop     hl                  // take TOS as index
1414+ 6B52 29                           add     hl, hl              // as cells
1415+ 6B53 39                           add     hl, sp              // from Stack Pointer
1416+ 6B54 7E                           ld      a, (hl)             // replace TOS
1417+ 6B55 23                           inc     hl
1418+ 6B56 66                           ld      h, (hl)
1419+ 6B57 6F                           ld      l, a
1420+ 6B58
1421+ 6B58                              psh1
1421+ 6B58 E5          >                push    hl
1421+ 6B59 DD E9       >                jp      (ix)
1422+ 6B5B
1423+ 6B5B
1424+ 6B5B              //  ______________________________________________________________________
1425+ 6B5B              //
1426+ 6B5B              // 2over        d1 d2 -- d1 d2 d1
1427+ 6B5B              //              n1 n2 n3 n4 -- n1 n2 n3 n4 n1 n2
1428+ 6B5B              // copy the second double of stack and put on top.
1429+ 6B5B                              New_Def TWO_OVER, "2OVER", is_code, is_normal
1429+ 6B5B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1429+ 6B5B             >
1429+ 6B5B             >                // dummy db directives used to calculate length of namec
1429+ 6B5B 32 4F 56 45 >                db      "2OVER"
1429+ 6B5F 52          >
1429+ 6B60             >len_NFA         defl    $ - temp_NFA
1429+ 6B60             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1429+ 6B5B             >
1429+ 6B5B 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1429+ 6B5C 32 4F 56 45 >                db      "2OVER"               // name string in 7-bit ascii, but
1429+ 6B60 52          >
1429+ 6B61             >                org     $-1                 // alter last byte of Name just above to set
1429+ 6B60 D2          >                db      {b $} | END_BIT     // msb as name end
1429+ 6B61             >
1429+ 6B61 48 6B       >                dw      last_NFA            // Link to previous definition Name
1429+ 6B63             >TWO_OVER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1429+ 6B63 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1429+ 6B63             >                else
1429+ 6B63 65 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1429+ 6B65             >                endif           ; ok        // for other definitions it "points" the correct handler
1429+ 6B65             >                // Use of "; ok" to suppress "warning[fwdref]"
1429+ 6B65             >
1429+ 6B65             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1430+ 6B65
1431+ 6B65 21 07 00                     ld      hl, 7
1432+ 6B68 39                           add     hl, sp
1433+ 6B69 56                           ld      d, (hl)
1434+ 6B6A 2B                           dec     hl
1435+ 6B6B 5E                           ld      e, (hl)             // d1-L
1436+ 6B6C D5                           push    de
1437+ 6B6D 2B                           dec     hl
1438+ 6B6E 56                           ld      d, (hl)
1439+ 6B6F 2B                           dec     hl
1440+ 6B70 5E                           ld      e, (hl)             // d1-H
1441+ 6B71 D5                           push    de
1442+ 6B72                              next
1442+ 6B72 DD E9       >                jp      (ix)
1443+ 6B74
1444+ 6B74              //  ______________________________________________________________________
1445+ 6B74              //
1446+ 6B74              // 2drop        d --
1447+ 6B74              //              n1 n2 --
1448+ 6B74              // drops the top double from stack
1449+ 6B74                              New_Def TWO_DROP, "2DROP", is_code, is_normal
1449+ 6B74             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1449+ 6B74             >
1449+ 6B74             >                // dummy db directives used to calculate length of namec
1449+ 6B74 32 44 52 4F >                db      "2DROP"
1449+ 6B78 50          >
1449+ 6B79             >len_NFA         defl    $ - temp_NFA
1449+ 6B79             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1449+ 6B74             >
1449+ 6B74 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1449+ 6B75 32 44 52 4F >                db      "2DROP"               // name string in 7-bit ascii, but
1449+ 6B79 50          >
1449+ 6B7A             >                org     $-1                 // alter last byte of Name just above to set
1449+ 6B79 D0          >                db      {b $} | END_BIT     // msb as name end
1449+ 6B7A             >
1449+ 6B7A 5B 6B       >                dw      last_NFA            // Link to previous definition Name
1449+ 6B7C             >TWO_DROP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1449+ 6B7C ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1449+ 6B7C             >                else
1449+ 6B7C 7E 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1449+ 6B7E             >                endif           ; ok        // for other definitions it "points" the correct handler
1449+ 6B7E             >                // Use of "; ok" to suppress "warning[fwdref]"
1449+ 6B7E             >
1449+ 6B7E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1450+ 6B7E E1                           pop     hl
1451+ 6B7F E1                           pop     hl
1452+ 6B80                              next
1452+ 6B80 DD E9       >                jp      (ix)
1453+ 6B82
1454+ 6B82              //  ______________________________________________________________________
1455+ 6B82              //
1456+ 6B82              // 2nip         d1 d2 -- d2
1457+ 6B82              //              n1 n2 n3 n4 -- n3 n4
1458+ 6B82              // drops the second double on the stack
1459+ 6B82              //              New_Def TWO_NIP, 4, "2nip"
1460+ 6B82              //              ...
1461+ 6B82
1462+ 6B82              //  ______________________________________________________________________
1463+ 6B82              //
1464+ 6B82              // 2tuck         d1 d2 -- d2 d1 d2
1465+ 6B82              // copy the top element after the second.
1466+ 6B82              //              New_Def TWO_TUCK, 5, "2tuck"
1467+ 6B82              //              ...
1468+ 6B82
1469+ 6B82              //  ______________________________________________________________________
1470+ 6B82              //
1471+ 6B82              // 2swap         d1 d2 -- d2 d1
1472+ 6B82              //               n1 n2 n3 n4 -- n3 n4 n1 n2
1473+ 6B82              // swaps the two doubles on top of stack
1474+ 6B82                              New_Def TWO_SWAP, "2SWAP", is_code, is_normal
1474+ 6B82             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1474+ 6B82             >
1474+ 6B82             >                // dummy db directives used to calculate length of namec
1474+ 6B82 32 53 57 41 >                db      "2SWAP"
1474+ 6B86 50          >
1474+ 6B87             >len_NFA         defl    $ - temp_NFA
1474+ 6B87             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1474+ 6B82             >
1474+ 6B82 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1474+ 6B83 32 53 57 41 >                db      "2SWAP"               // name string in 7-bit ascii, but
1474+ 6B87 50          >
1474+ 6B88             >                org     $-1                 // alter last byte of Name just above to set
1474+ 6B87 D0          >                db      {b $} | END_BIT     // msb as name end
1474+ 6B88             >
1474+ 6B88 74 6B       >                dw      last_NFA            // Link to previous definition Name
1474+ 6B8A             >TWO_SWAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1474+ 6B8A ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1474+ 6B8A             >                else
1474+ 6B8A 8C 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1474+ 6B8C             >                endif           ; ok        // for other definitions it "points" the correct handler
1474+ 6B8C             >                // Use of "; ok" to suppress "warning[fwdref]"
1474+ 6B8C             >
1474+ 6B8C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1475+ 6B8C F1                           pop     af                  //   d2-H
1476+ 6B8D E1                           pop     hl                  // < d2-L
1477+ 6B8E D1                           pop     de                  // < d1-H
1478+ 6B8F E3                           ex      (sp), hl            // < d1-L > d2-L
1479+ 6B90 F5                           push    af                  // > d2-H
1480+ 6B91 E5                           push    hl                  // > d1-L
1481+ 6B92 D5                           push    de
1482+ 6B93
1483+ 6B93                              next
1483+ 6B93 DD E9       >                jp      (ix)
1484+ 6B95
1485+ 6B95              //  ______________________________________________________________________
1486+ 6B95              //
1487+ 6B95              // 2dup         d -- d d
1488+ 6B95              //              n1 n2 -- n1 n2 n1 n2
1489+ 6B95              // duplicates the top double of stack
1490+ 6B95                              New_Def TWO_DUP, "2DUP", is_code, is_normal
1490+ 6B95             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1490+ 6B95             >
1490+ 6B95             >                // dummy db directives used to calculate length of namec
1490+ 6B95 32 44 55 50 >                db      "2DUP"
1490+ 6B99             >len_NFA         defl    $ - temp_NFA
1490+ 6B99             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1490+ 6B95             >
1490+ 6B95 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1490+ 6B96 32 44 55 50 >                db      "2DUP"               // name string in 7-bit ascii, but
1490+ 6B9A             >                org     $-1                 // alter last byte of Name just above to set
1490+ 6B99 D0          >                db      {b $} | END_BIT     // msb as name end
1490+ 6B9A             >
1490+ 6B9A 82 6B       >                dw      last_NFA            // Link to previous definition Name
1490+ 6B9C             >TWO_DUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1490+ 6B9C ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1490+ 6B9C             >                else
1490+ 6B9C 9E 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1490+ 6B9E             >                endif           ; ok        // for other definitions it "points" the correct handler
1490+ 6B9E             >                // Use of "; ok" to suppress "warning[fwdref]"
1490+ 6B9E             >
1490+ 6B9E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1491+ 6B9E E1                           pop     hl                  // < d-H
1492+ 6B9F D1                           pop     de                  // < d-L
1493+ 6BA0 D5                           push    de                  // < d-L
1494+ 6BA1 E5                           push    hl                  // > d-H
1495+ 6BA2 D5                           push    de                  // > d-L
1496+ 6BA3 E5                           push    hl                  // > d-H
1497+ 6BA4                              next
1497+ 6BA4 DD E9       >                jp      (ix)
1498+ 6BA6
1499+ 6BA6              //  ______________________________________________________________________
1500+ 6BA6              //
1501+ 6BA6              // 2rot         d1 d2 d3 -- d2 d3 d1
1502+ 6BA6              //              n1 n2 n3 n4 n5 n6 -- n3 n4 n5 n6 n1 n2
1503+ 6BA6              // Rotates the 3 top doubles of stack by picking the 3rd in access-order
1504+ 6BA6              // and putting it on top. The other two are shifted down one place.
1505+ 6BA6              //              New_Def TWO?ROT, 4, "2rot"
1506+ 6BA6              //              ...
1507+ 6BA6                              New_Def TWO_ROT, "2ROT", is_code, is_normal
1507+ 6BA6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1507+ 6BA6             >
1507+ 6BA6             >                // dummy db directives used to calculate length of namec
1507+ 6BA6 32 52 4F 54 >                db      "2ROT"
1507+ 6BAA             >len_NFA         defl    $ - temp_NFA
1507+ 6BAA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1507+ 6BA6             >
1507+ 6BA6 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1507+ 6BA7 32 52 4F 54 >                db      "2ROT"               // name string in 7-bit ascii, but
1507+ 6BAB             >                org     $-1                 // alter last byte of Name just above to set
1507+ 6BAA D4          >                db      {b $} | END_BIT     // msb as name end
1507+ 6BAB             >
1507+ 6BAB 95 6B       >                dw      last_NFA            // Link to previous definition Name
1507+ 6BAD             >TWO_ROT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1507+ 6BAD ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1507+ 6BAD             >                else
1507+ 6BAD AF 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1507+ 6BAF             >                endif           ; ok        // for other definitions it "points" the correct handler
1507+ 6BAF             >                // Use of "; ok" to suppress "warning[fwdref]"
1507+ 6BAF             >
1507+ 6BAF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1508+ 6BAF
1509+ 6BAF              //      d3  |d2  |d1  |
1510+ 6BAF              //      h l |h l |h l |
1511+ 6BAF              // SP   LHED|LHED|LHED|
1512+ 6BAF              // SP  +0123|4567|89ab|
1513+ 6BAF 21 0B 00                     ld      hl, $000B
1514+ 6BB2 39                           add     hl, sp
1515+ 6BB3 56                           ld      d, (hl)
1516+ 6BB4 2B                           dec     hl
1517+ 6BB5 5E                           ld      e, (hl)
1518+ 6BB6 2B                           dec     hl
1519+ 6BB7 D5                           push    de
1520+ 6BB8 56                           ld      d, (hl)
1521+ 6BB9 2B                           dec     hl
1522+ 6BBA 5E                           ld      e, (hl)
1523+ 6BBB 2B                           dec     hl
1524+ 6BBC D5                           push    de
1525+ 6BBD
1526+ 6BBD              //      d1  |d3  |d2  |d1  |
1527+ 6BBD              //      h l |h l |h l |h l |
1528+ 6BBD              // SP   LHED|LHED|LHED|LHED|
1529+ 6BBD              // SP       +0123|4567|89ab|
1530+ 6BBD
1531+ 6BBD 54                           ld      d, h
1532+ 6BBE 5D                           ld      e, l
1533+ 6BBF 13                           inc     de
1534+ 6BC0 13                           inc     de
1535+ 6BC1 13                           inc     de
1536+ 6BC2 13                           inc     de
1537+ 6BC3 C5                           push    bc
1538+ 6BC4 01 0C 00                     ld      bc, $000C
1539+ 6BC7 ED B8                        lddr
1540+ 6BC9 C1                           pop     bc
1541+ 6BCA D1                           pop     de
1542+ 6BCB D1                           pop     de
1543+ 6BCC
1544+ 6BCC                              next
1544+ 6BCC DD E9       >                jp      (ix)
1545+ 6BCE
1546+ 6BCE
1547+ 6BCE              //  ______________________________________________________________________
1548+ 6BCE              //
1549+ 6BCE              // +!           n a --
1550+ 6BCE              // Sums to the content of address a the number n.
1551+ 6BCE              // It is the same of  a @ n + a !
1552+ 6BCE                              New_Def PLUSSTORE, "+!", is_code, is_normal
1552+ 6BCE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1552+ 6BCE             >
1552+ 6BCE             >                // dummy db directives used to calculate length of namec
1552+ 6BCE 2B 21       >                db      "+!"
1552+ 6BD0             >len_NFA         defl    $ - temp_NFA
1552+ 6BD0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1552+ 6BCE             >
1552+ 6BCE 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1552+ 6BCF 2B 21       >                db      "+!"               // name string in 7-bit ascii, but
1552+ 6BD1             >                org     $-1                 // alter last byte of Name just above to set
1552+ 6BD0 A1          >                db      {b $} | END_BIT     // msb as name end
1552+ 6BD1             >
1552+ 6BD1 A6 6B       >                dw      last_NFA            // Link to previous definition Name
1552+ 6BD3             >PLUSSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1552+ 6BD3 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1552+ 6BD3             >                else
1552+ 6BD3 D5 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1552+ 6BD5             >                endif           ; ok        // for other definitions it "points" the correct handler
1552+ 6BD5             >                // Use of "; ok" to suppress "warning[fwdref]"
1552+ 6BD5             >
1552+ 6BD5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1553+ 6BD5 E1                           pop     hl                  // hl is the address
1554+ 6BD6 D1                           pop     de                  // de is the number
1555+ 6BD7 7E                           ld      a, (hl)
1556+ 6BD8 83                           add     e
1557+ 6BD9 77                           ld      (hl), a
1558+ 6BDA 23                           inc     hl
1559+ 6BDB 7E                           ld      a, (hl)
1560+ 6BDC 8A                           adc     d
1561+ 6BDD 77                           ld      (hl), a
1562+ 6BDE
1563+ 6BDE                              next
1563+ 6BDE DD E9       >                jp      (ix)
1564+ 6BE0
1565+ 6BE0              //  ______________________________________________________________________
1566+ 6BE0              //
1567+ 6BE0              // toggle       a n --
1568+ 6BE0              // Complements (xor) the byte at addrress  a  with the model n.
1569+ 6BE0                              New_Def TOGGLE, "TOGGLE", is_code, is_normal
1569+ 6BE0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1569+ 6BE0             >
1569+ 6BE0             >                // dummy db directives used to calculate length of namec
1569+ 6BE0 54 4F 47 47 >                db      "TOGGLE"
1569+ 6BE4 4C 45       >
1569+ 6BE6             >len_NFA         defl    $ - temp_NFA
1569+ 6BE6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1569+ 6BE0             >
1569+ 6BE0 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1569+ 6BE1 54 4F 47 47 >                db      "TOGGLE"               // name string in 7-bit ascii, but
1569+ 6BE5 4C 45       >
1569+ 6BE7             >                org     $-1                 // alter last byte of Name just above to set
1569+ 6BE6 C5          >                db      {b $} | END_BIT     // msb as name end
1569+ 6BE7             >
1569+ 6BE7 CE 6B       >                dw      last_NFA            // Link to previous definition Name
1569+ 6BE9             >TOGGLE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1569+ 6BE9 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1569+ 6BE9             >                else
1569+ 6BE9 EB 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1569+ 6BEB             >                endif           ; ok        // for other definitions it "points" the correct handler
1569+ 6BEB             >                // Use of "; ok" to suppress "warning[fwdref]"
1569+ 6BEB             >
1569+ 6BEB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1570+ 6BEB D1                           pop     de
1571+ 6BEC E1                           pop     hl
1572+ 6BED 7E                           ld      a, (hl)
1573+ 6BEE AB                           xor     e
1574+ 6BEF 77                           ld      (hl), a
1575+ 6BF0
1576+ 6BF0                              next
1576+ 6BF0 DD E9       >                jp      (ix)
1577+ 6BF2
1578+ 6BF2              //  ______________________________________________________________________
1579+ 6BF2              //
1580+ 6BF2              // @            a -- n
1581+ 6BF2              // fetch 16 bit number n from address a. Z80 keeps high byte is in high memory
1582+ 6BF2                              New_Def FETCH, "@", is_code, is_normal
1582+ 6BF2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1582+ 6BF2             >
1582+ 6BF2             >                // dummy db directives used to calculate length of namec
1582+ 6BF2 40          >                db      "@"
1582+ 6BF3             >len_NFA         defl    $ - temp_NFA
1582+ 6BF3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1582+ 6BF2             >
1582+ 6BF2 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1582+ 6BF3 40          >                db      "@"               // name string in 7-bit ascii, but
1582+ 6BF4             >                org     $-1                 // alter last byte of Name just above to set
1582+ 6BF3 C0          >                db      {b $} | END_BIT     // msb as name end
1582+ 6BF4             >
1582+ 6BF4 E0 6B       >                dw      last_NFA            // Link to previous definition Name
1582+ 6BF6             >FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1582+ 6BF6 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1582+ 6BF6             >                else
1582+ 6BF6 F8 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1582+ 6BF8             >                endif           ; ok        // for other definitions it "points" the correct handler
1582+ 6BF8             >                // Use of "; ok" to suppress "warning[fwdref]"
1582+ 6BF8             >
1582+ 6BF8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1583+ 6BF8 E1                           pop     hl
1584+ 6BF9 5E                           ld      e, (hl)             // low-byte
1585+ 6BFA 23                           inc     hl
1586+ 6BFB 56                           ld      d, (hl)             // high-byte
1587+ 6BFC D5                           push    de
1588+ 6BFD                              next
1588+ 6BFD DD E9       >                jp      (ix)
1589+ 6BFF
1590+ 6BFF              //  ______________________________________________________________________
1591+ 6BFF              //
1592+ 6BFF              // !            n a --
1593+ 6BFF              // store 16 bit number n from address a. Z80 keeps high byte is in high memory
1594+ 6BFF                              New_Def STORE, "!", is_code, is_normal
1594+ 6BFF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1594+ 6BFF             >
1594+ 6BFF             >                // dummy db directives used to calculate length of namec
1594+ 6BFF 21          >                db      "!"
1594+ 6C00             >len_NFA         defl    $ - temp_NFA
1594+ 6C00             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1594+ 6BFF             >
1594+ 6BFF 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1594+ 6C00 21          >                db      "!"               // name string in 7-bit ascii, but
1594+ 6C01             >                org     $-1                 // alter last byte of Name just above to set
1594+ 6C00 A1          >                db      {b $} | END_BIT     // msb as name end
1594+ 6C01             >
1594+ 6C01 F2 6B       >                dw      last_NFA            // Link to previous definition Name
1594+ 6C03             >STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1594+ 6C03 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1594+ 6C03             >                else
1594+ 6C03 05 6C       >                dw      $ + 2   ; ok        // is pointed by CFA
1594+ 6C05             >                endif           ; ok        // for other definitions it "points" the correct handler
1594+ 6C05             >                // Use of "; ok" to suppress "warning[fwdref]"
1594+ 6C05             >
1594+ 6C05             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1595+ 6C05 E1                           pop     hl                  // address
1596+ 6C06 D1                           pop     de                  // < n
1597+ 6C07 73                           ld      (hl), e             // low-byte
1598+ 6C08 23                           inc     hl
1599+ 6C09 72                           ld      (hl), d             // high-byte
1600+ 6C0A
1601+ 6C0A                              next
1601+ 6C0A DD E9       >                jp      (ix)
1602+ 6C0C
1603+ 6C0C              //  ______________________________________________________________________
1604+ 6C0C              //
1605+ 6C0C              // c@           a -- c
1606+ 6C0C              // fetch a character n from address a
1607+ 6C0C                              New_Def CFETCH, "C@", is_code, is_normal
1607+ 6C0C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1607+ 6C0C             >
1607+ 6C0C             >                // dummy db directives used to calculate length of namec
1607+ 6C0C 43 40       >                db      "C@"
1607+ 6C0E             >len_NFA         defl    $ - temp_NFA
1607+ 6C0E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1607+ 6C0C             >
1607+ 6C0C 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1607+ 6C0D 43 40       >                db      "C@"               // name string in 7-bit ascii, but
1607+ 6C0F             >                org     $-1                 // alter last byte of Name just above to set
1607+ 6C0E C0          >                db      {b $} | END_BIT     // msb as name end
1607+ 6C0F             >
1607+ 6C0F FF 6B       >                dw      last_NFA            // Link to previous definition Name
1607+ 6C11             >CFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1607+ 6C11 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1607+ 6C11             >                else
1607+ 6C11 13 6C       >                dw      $ + 2   ; ok        // is pointed by CFA
1607+ 6C13             >                endif           ; ok        // for other definitions it "points" the correct handler
1607+ 6C13             >                // Use of "; ok" to suppress "warning[fwdref]"
1607+ 6C13             >
1607+ 6C13             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1608+ 6C13 E1                           pop     hl
1609+ 6C14 6E                           ld      l, (hl)             // low-byte
1610+ 6C15 26 00                        ld      h, 0
1611+ 6C17
1612+ 6C17                              psh1
1612+ 6C17 E5          >                push    hl
1612+ 6C18 DD E9       >                jp      (ix)
1613+ 6C1A
1614+ 6C1A              //  ______________________________________________________________________
1615+ 6C1A              //
1616+ 6C1A              // c!           c a --
1617+ 6C1A              // fetch 16 bit number n from address a. Z80 keeps high byte is in high memory
1618+ 6C1A                              New_Def CSTORE, "C!", is_code, is_normal
1618+ 6C1A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1618+ 6C1A             >
1618+ 6C1A             >                // dummy db directives used to calculate length of namec
1618+ 6C1A 43 21       >                db      "C!"
1618+ 6C1C             >len_NFA         defl    $ - temp_NFA
1618+ 6C1C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1618+ 6C1A             >
1618+ 6C1A 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1618+ 6C1B 43 21       >                db      "C!"               // name string in 7-bit ascii, but
1618+ 6C1D             >                org     $-1                 // alter last byte of Name just above to set
1618+ 6C1C A1          >                db      {b $} | END_BIT     // msb as name end
1618+ 6C1D             >
1618+ 6C1D 0C 6C       >                dw      last_NFA            // Link to previous definition Name
1618+ 6C1F             >CSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1618+ 6C1F ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1618+ 6C1F             >                else
1618+ 6C1F 21 6C       >                dw      $ + 2   ; ok        // is pointed by CFA
1618+ 6C21             >                endif           ; ok        // for other definitions it "points" the correct handler
1618+ 6C21             >                // Use of "; ok" to suppress "warning[fwdref]"
1618+ 6C21             >
1618+ 6C21             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1619+ 6C21 E1                           pop     hl                  // < address
1620+ 6C22 D1                           pop     de
1621+ 6C23 73                           ld      (hl), e             // low-byte
1622+ 6C24
1623+ 6C24                              next
1623+ 6C24 DD E9       >                jp      (ix)
1624+ 6C26
1625+ 6C26              //  ______________________________________________________________________
1626+ 6C26              //
1627+ 6C26              // 2@           a -- d
1628+ 6C26              // fetch a 32 bits number d from address a and leaves it on top of the
1629+ 6C26              // stack as two single numbers, high part as top of the stack.
1630+ 6C26              // A double number is normally kept in CPU registers as HLDE.
1631+ 6C26              // On stack a double number is treated as two single numbers
1632+ 6C26              // where BC is on the top of the stack and HL is the second from top,
1633+ 6C26              // so the sign of the number can be checked on top of stack
1634+ 6C26              // and in the stack memory it appears as LHED.
1635+ 6C26              // Instead, a 32 bits number d is kept in memory as EDLH
1636+ 6C26              // with the lowest significant word in the lower location
1637+ 6C26              // and the highest significant word in the higher location.
1638+ 6C26              // fetch 32 bit number n from address a.
1639+ 6C26                              New_Def TWO_FETCH, "2@", is_code, is_normal
1639+ 6C26             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1639+ 6C26             >
1639+ 6C26             >                // dummy db directives used to calculate length of namec
1639+ 6C26 32 40       >                db      "2@"
1639+ 6C28             >len_NFA         defl    $ - temp_NFA
1639+ 6C28             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1639+ 6C26             >
1639+ 6C26 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1639+ 6C27 32 40       >                db      "2@"               // name string in 7-bit ascii, but
1639+ 6C29             >                org     $-1                 // alter last byte of Name just above to set
1639+ 6C28 C0          >                db      {b $} | END_BIT     // msb as name end
1639+ 6C29             >
1639+ 6C29 1A 6C       >                dw      last_NFA            // Link to previous definition Name
1639+ 6C2B             >TWO_FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1639+ 6C2B ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1639+ 6C2B             >                else
1639+ 6C2B 2D 6C       >                dw      $ + 2   ; ok        // is pointed by CFA
1639+ 6C2D             >                endif           ; ok        // for other definitions it "points" the correct handler
1639+ 6C2D             >                // Use of "; ok" to suppress "warning[fwdref]"
1639+ 6C2D             >
1639+ 6C2D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1640+ 6C2D E1                           pop     hl                  // address
1641+ 6C2E 5E                           ld      e, (hl)             // low-byte
1642+ 6C2F 23                           inc     hl
1643+ 6C30 56                           ld      d, (hl)             // high-byte
1644+ 6C31
1645+ 6C31 23                           inc     hl
1646+ 6C32 7E                           ld      a, (hl)             // low-byte
1647+ 6C33 23                           inc     hl
1648+ 6C34 66                           ld      h, (hl)             // high-byte
1649+ 6C35 6F                           ld      l, a
1650+ 6C36                              psh2
1650+ 6C36 D5          >                push    de
1650+ 6C37 E5          >                push    hl
1650+ 6C38 DD E9       >                jp      (ix)
1651+ 6C3A
1652+ 6C3A              //  ______________________________________________________________________
1653+ 6C3A              //
1654+ 6C3A              // 2!           d a --
1655+ 6C3A              // stores a 32 bits number d from address a and leaves it on top of the
1656+ 6C3A              // stack as two single numbers, high part as top of the stack.
1657+ 6C3A              // A double number is normally kept in CPU registers as HLDE.
1658+ 6C3A              // On stack a double number is treated as two single numbers
1659+ 6C3A              // where BC is on the top of the stack and HL is the second from top,
1660+ 6C3A              // so the sign of the number can be checked on top of stack
1661+ 6C3A              // and in the stack memory it appears as LHED.
1662+ 6C3A              // Instead, a 32 bits number d is kept in memory as EDLH
1663+ 6C3A              // with the lowest significant word in the lower location
1664+ 6C3A              // and the highest significant word in the higher location.
1665+ 6C3A              // fetch 32 bit number n from address a.
1666+ 6C3A                              New_Def TWO_STORE, "2!", is_code, is_normal
1666+ 6C3A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1666+ 6C3A             >
1666+ 6C3A             >                // dummy db directives used to calculate length of namec
1666+ 6C3A 32 21       >                db      "2!"
1666+ 6C3C             >len_NFA         defl    $ - temp_NFA
1666+ 6C3C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1666+ 6C3A             >
1666+ 6C3A 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1666+ 6C3B 32 21       >                db      "2!"               // name string in 7-bit ascii, but
1666+ 6C3D             >                org     $-1                 // alter last byte of Name just above to set
1666+ 6C3C A1          >                db      {b $} | END_BIT     // msb as name end
1666+ 6C3D             >
1666+ 6C3D 26 6C       >                dw      last_NFA            // Link to previous definition Name
1666+ 6C3F             >TWO_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1666+ 6C3F ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1666+ 6C3F             >                else
1666+ 6C3F 41 6C       >                dw      $ + 2   ; ok        // is pointed by CFA
1666+ 6C41             >                endif           ; ok        // for other definitions it "points" the correct handler
1666+ 6C41             >                // Use of "; ok" to suppress "warning[fwdref]"
1666+ 6C41             >
1666+ 6C41             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1667+ 6C41 60                           ld      h, b
1668+ 6C42 69                           ld      l, c
1669+ 6C43 D1                           pop     de                  // de has address
1670+ 6C44 C1                           pop     bc                  // < high-part
1671+ 6C45 E3                           ex      (sp), hl            // < low-part > Instruction Pointer
1672+ 6C46 EB                           ex      de, hl
1673+ 6C47 73                           ld      (hl), e
1674+ 6C48 23                           inc     hl
1675+ 6C49 72                           ld      (hl), d
1676+ 6C4A 23                           inc     hl
1677+ 6C4B 71                           ld      (hl), c
1678+ 6C4C 23                           inc     hl
1679+ 6C4D 70                           ld      (hl), b
1680+ 6C4E C1                           pop     bc                  // Restore Instruction Pointer
1681+ 6C4F
1682+ 6C4F                              next
1682+ 6C4F DD E9       >                jp      (ix)
1683+ 6C51
1684+ 6C51              //  ______________________________________________________________________
1685+ 6C51              //
1686+ 6C51              // p@           a -- c
1687+ 6C51              // Read one byte from port a and leave the result on top of stack
1688+ 6C51                              New_Def PFETCH, "P@", is_code, is_normal
1688+ 6C51             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1688+ 6C51             >
1688+ 6C51             >                // dummy db directives used to calculate length of namec
1688+ 6C51 50 40       >                db      "P@"
1688+ 6C53             >len_NFA         defl    $ - temp_NFA
1688+ 6C53             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1688+ 6C51             >
1688+ 6C51 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1688+ 6C52 50 40       >                db      "P@"               // name string in 7-bit ascii, but
1688+ 6C54             >                org     $-1                 // alter last byte of Name just above to set
1688+ 6C53 C0          >                db      {b $} | END_BIT     // msb as name end
1688+ 6C54             >
1688+ 6C54 3A 6C       >                dw      last_NFA            // Link to previous definition Name
1688+ 6C56             >PFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1688+ 6C56 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1688+ 6C56             >                else
1688+ 6C56 58 6C       >                dw      $ + 2   ; ok        // is pointed by CFA
1688+ 6C58             >                endif           ; ok        // for other definitions it "points" the correct handler
1688+ 6C58             >                // Use of "; ok" to suppress "warning[fwdref]"
1688+ 6C58             >
1688+ 6C58             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1689+ 6C58 50                           ld      d, b
1690+ 6C59 59                           ld      e, c
1691+ 6C5A
1692+ 6C5A C1                           pop     bc
1693+ 6C5B 26 00                        ld      h, 0
1694+ 6C5D ED 68                        in      l, (c)
1695+ 6C5F 42                           ld      b, d
1696+ 6C60 4B                           ld      c, e
1697+ 6C61                              psh1
1697+ 6C61 E5          >                push    hl
1697+ 6C62 DD E9       >                jp      (ix)
1698+ 6C64
1699+ 6C64              //  ______________________________________________________________________
1700+ 6C64              //
1701+ 6C64              // p!           c a --
1702+ 6C64              // Send one byte (top of stack) to port a
1703+ 6C64                              New_Def PSTORE, "P!", is_code, is_normal
1703+ 6C64             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1703+ 6C64             >
1703+ 6C64             >                // dummy db directives used to calculate length of namec
1703+ 6C64 50 21       >                db      "P!"
1703+ 6C66             >len_NFA         defl    $ - temp_NFA
1703+ 6C66             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1703+ 6C64             >
1703+ 6C64 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1703+ 6C65 50 21       >                db      "P!"               // name string in 7-bit ascii, but
1703+ 6C67             >                org     $-1                 // alter last byte of Name just above to set
1703+ 6C66 A1          >                db      {b $} | END_BIT     // msb as name end
1703+ 6C67             >
1703+ 6C67 51 6C       >                dw      last_NFA            // Link to previous definition Name
1703+ 6C69             >PSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1703+ 6C69 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1703+ 6C69             >                else
1703+ 6C69 6B 6C       >                dw      $ + 2   ; ok        // is pointed by CFA
1703+ 6C6B             >                endif           ; ok        // for other definitions it "points" the correct handler
1703+ 6C6B             >                // Use of "; ok" to suppress "warning[fwdref]"
1703+ 6C6B             >
1703+ 6C6B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1704+ 6C6B 50                           ld      d, b
1705+ 6C6C 59                           ld      e, c
1706+ 6C6D
1707+ 6C6D C1                           pop     bc
1708+ 6C6E E1                           pop     hl                  // < c
1709+ 6C6F ED 69                        out     (c), l              // low-byte
1710+ 6C71 42                           ld      b, d
1711+ 6C72 4B                           ld      c, e
1712+ 6C73
1713+ 6C73                              next
1713+ 6C73 DD E9       >                jp      (ix)
1714+ 6C75
1715+ 6C75
1716+ 6C75              //  ______________________________________________________________________
1717+ 6C75              //
1718+ 6C75              // 2*           n1 -- n2
1719+ 6C75              // doubles the number at top of stack
1720+ 6C75                              New_Def TWO_MUL, "2*", is_code, is_normal
1720+ 6C75             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1720+ 6C75             >
1720+ 6C75             >                // dummy db directives used to calculate length of namec
1720+ 6C75 32 2A       >                db      "2*"
1720+ 6C77             >len_NFA         defl    $ - temp_NFA
1720+ 6C77             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1720+ 6C75             >
1720+ 6C75 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1720+ 6C76 32 2A       >                db      "2*"               // name string in 7-bit ascii, but
1720+ 6C78             >                org     $-1                 // alter last byte of Name just above to set
1720+ 6C77 AA          >                db      {b $} | END_BIT     // msb as name end
1720+ 6C78             >
1720+ 6C78 64 6C       >                dw      last_NFA            // Link to previous definition Name
1720+ 6C7A             >TWO_MUL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1720+ 6C7A ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1720+ 6C7A             >                else
1720+ 6C7A 7C 6C       >                dw      $ + 2   ; ok        // is pointed by CFA
1720+ 6C7C             >                endif           ; ok        // for other definitions it "points" the correct handler
1720+ 6C7C             >                // Use of "; ok" to suppress "warning[fwdref]"
1720+ 6C7C             >
1720+ 6C7C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1721+ 6C7C              Two_Mul_Ptr:
1722+ 6C7C E1                           pop     hl
1723+ 6C7D 29                           add     hl, hl
1724+ 6C7E
1725+ 6C7E                              psh1
1725+ 6C7E E5          >                push    hl
1725+ 6C7F DD E9       >                jp      (ix)
1726+ 6C81
1727+ 6C81              //  ______________________________________________________________________
1728+ 6C81              //
1729+ 6C81              // 2/           n1 -- n2
1730+ 6C81              // halves the top of stack, sign is unchanged
1731+ 6C81                              New_Def TWO_DIV, "2/", is_code, is_normal
1731+ 6C81             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1731+ 6C81             >
1731+ 6C81             >                // dummy db directives used to calculate length of namec
1731+ 6C81 32 2F       >                db      "2/"
1731+ 6C83             >len_NFA         defl    $ - temp_NFA
1731+ 6C83             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1731+ 6C81             >
1731+ 6C81 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1731+ 6C82 32 2F       >                db      "2/"               // name string in 7-bit ascii, but
1731+ 6C84             >                org     $-1                 // alter last byte of Name just above to set
1731+ 6C83 AF          >                db      {b $} | END_BIT     // msb as name end
1731+ 6C84             >
1731+ 6C84 75 6C       >                dw      last_NFA            // Link to previous definition Name
1731+ 6C86             >TWO_DIV:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1731+ 6C86 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1731+ 6C86             >                else
1731+ 6C86 88 6C       >                dw      $ + 2   ; ok        // is pointed by CFA
1731+ 6C88             >                endif           ; ok        // for other definitions it "points" the correct handler
1731+ 6C88             >                // Use of "; ok" to suppress "warning[fwdref]"
1731+ 6C88             >
1731+ 6C88             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1732+ 6C88 E1                           pop     hl
1733+ 6C89 CB 2C                        sra     h
1734+ 6C8B CB 1D                        rr      l
1735+ 6C8D
1736+ 6C8D                              psh1
1736+ 6C8D E5          >                push    hl
1736+ 6C8E DD E9       >                jp      (ix)
1737+ 6C90
1738+ 6C90              //  ______________________________________________________________________
1739+ 6C90              //
1740+ 6C90              // lshift       n1 u -- n2
1741+ 6C90              // bit left shift of u bits
1742+ 6C90                              New_Def LSHIFT, "LSHIFT", is_code, is_normal
1742+ 6C90             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1742+ 6C90             >
1742+ 6C90             >                // dummy db directives used to calculate length of namec
1742+ 6C90 4C 53 48 49 >                db      "LSHIFT"
1742+ 6C94 46 54       >
1742+ 6C96             >len_NFA         defl    $ - temp_NFA
1742+ 6C96             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1742+ 6C90             >
1742+ 6C90 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1742+ 6C91 4C 53 48 49 >                db      "LSHIFT"               // name string in 7-bit ascii, but
1742+ 6C95 46 54       >
1742+ 6C97             >                org     $-1                 // alter last byte of Name just above to set
1742+ 6C96 D4          >                db      {b $} | END_BIT     // msb as name end
1742+ 6C97             >
1742+ 6C97 81 6C       >                dw      last_NFA            // Link to previous definition Name
1742+ 6C99             >LSHIFT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1742+ 6C99 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1742+ 6C99             >                else
1742+ 6C99 9B 6C       >                dw      $ + 2   ; ok        // is pointed by CFA
1742+ 6C9B             >                endif           ; ok        // for other definitions it "points" the correct handler
1742+ 6C9B             >                // Use of "; ok" to suppress "warning[fwdref]"
1742+ 6C9B             >
1742+ 6C9B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1743+ 6C9B D1                           pop     de
1744+ 6C9C
1745+ 6C9C E1                           pop     hl
1746+ 6C9D 7B                           ld      a, e
1747+ 6C9E B7                           or      a
1748+ 6C9F 28 04                        jr      z, Lshift_Zero
1749+ 6CA1              Lshift_Loop:
1750+ 6CA1 29                                   add     hl, hl
1751+ 6CA2 3D                                   dec     a
1752+ 6CA3 20 FC                            jr      nz, Lshift_Loop
1753+ 6CA5              Lshift_Zero:
1754+ 6CA5
1755+ 6CA5
1756+ 6CA5                              psh1
1756+ 6CA5 E5          >                push    hl
1756+ 6CA6 DD E9       >                jp      (ix)
1757+ 6CA8
1758+ 6CA8              //  ______________________________________________________________________
1759+ 6CA8              //
1760+ 6CA8              // rshift       n1 u -- n2
1761+ 6CA8              // bit right shift of u bits
1762+ 6CA8                              New_Def RSHIFT, "RSHIFT", is_code, is_normal
1762+ 6CA8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1762+ 6CA8             >
1762+ 6CA8             >                // dummy db directives used to calculate length of namec
1762+ 6CA8 52 53 48 49 >                db      "RSHIFT"
1762+ 6CAC 46 54       >
1762+ 6CAE             >len_NFA         defl    $ - temp_NFA
1762+ 6CAE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1762+ 6CA8             >
1762+ 6CA8 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1762+ 6CA9 52 53 48 49 >                db      "RSHIFT"               // name string in 7-bit ascii, but
1762+ 6CAD 46 54       >
1762+ 6CAF             >                org     $-1                 // alter last byte of Name just above to set
1762+ 6CAE D4          >                db      {b $} | END_BIT     // msb as name end
1762+ 6CAF             >
1762+ 6CAF 90 6C       >                dw      last_NFA            // Link to previous definition Name
1762+ 6CB1             >RSHIFT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1762+ 6CB1 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1762+ 6CB1             >                else
1762+ 6CB1 B3 6C       >                dw      $ + 2   ; ok        // is pointed by CFA
1762+ 6CB3             >                endif           ; ok        // for other definitions it "points" the correct handler
1762+ 6CB3             >                // Use of "; ok" to suppress "warning[fwdref]"
1762+ 6CB3             >
1762+ 6CB3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1763+ 6CB3 D1                           pop     de
1764+ 6CB4
1765+ 6CB4 E1                           pop     hl
1766+ 6CB5 7B                           ld      a, e
1767+ 6CB6 B7                           or      a
1768+ 6CB7 28 07                        jr      z, Rshift_Zero
1769+ 6CB9              Rshift_Loop:
1770+ 6CB9 CB 3C                                srl     h
1771+ 6CBB CB 1D                                rr      l
1772+ 6CBD 3D                                   dec     a
1773+ 6CBE 20 F9                            jr      nz, Rshift_Loop
1774+ 6CC0              Rshift_Zero:
1775+ 6CC0
1776+ 6CC0
1777+ 6CC0                              psh1
1777+ 6CC0 E5          >                push    hl
1777+ 6CC1 DD E9       >                jp      (ix)
1778+ 6CC3
1779+ 6CC3              //  ______________________________________________________________________
1780+ 6CC3              //
1781+ 6CC3              // cells        n1 -- n2
1782+ 6CC3              // decrement by 2 top of stack
1783+ 6CC3                              New_Def CELLS, "CELLS", Two_Mul_Ptr, is_normal
1783+ 6CC3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1783+ 6CC3             >
1783+ 6CC3             >                // dummy db directives used to calculate length of namec
1783+ 6CC3 43 45 4C 4C >                db      "CELLS"
1783+ 6CC7 53          >
1783+ 6CC8             >len_NFA         defl    $ - temp_NFA
1783+ 6CC8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1783+ 6CC3             >
1783+ 6CC3 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1783+ 6CC4 43 45 4C 4C >                db      "CELLS"               // name string in 7-bit ascii, but
1783+ 6CC8 53          >
1783+ 6CC9             >                org     $-1                 // alter last byte of Name just above to set
1783+ 6CC8 D3          >                db      {b $} | END_BIT     // msb as name end
1783+ 6CC9             >
1783+ 6CC9 A8 6C       >                dw      last_NFA            // Link to previous definition Name
1783+ 6CCB             >CELLS:          if Two_Mul_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1783+ 6CCB 7C 6C       >                dw      Two_Mul_Ptr ; ok        // for primitive definitions  actual code
1783+ 6CCD             >                else
1783+ 6CCD ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1783+ 6CCD             >                endif           ; ok        // for other definitions it "points" the correct handler
1783+ 6CCD             >                // Use of "; ok" to suppress "warning[fwdref]"
1783+ 6CCD             >
1783+ 6CCD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1784+ 6CCD
1785+ 6CCD
1786+ 6CCD              //  ______________________________________________________________________
1787+ 6CCD
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L0.asm
 109  6CCD                              include "L1.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L1.asm
   1+ 6CCD              //  ______________________________________________________________________
   2+ 6CCD              //
   3+ 6CCD              //  L1.asm
   4+ 6CCD              //
   5+ 6CCD              //  Level-1 definitions and derivate
   6+ 6CCD              //  ______________________________________________________________________
   7+ 6CCD
   8+ 6CCD              //  ______________________________________________________________________
   9+ 6CCD              //
  10+ 6CCD              // :            -- cccc     ( compile time )
  11+ 6CCD              //              i*x -- j*x  ( run time )
  12+ 6CCD              // Colon Definition
  13+ 6CCD                              Colon_Def COLON, ":", is_immediate      // has forward-ref
  13+ 6CCD             >                New_Def  COLON, ":", Enter_Ptr, is_immediate ; ok
  13+ 6CCD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13+ 6CCD             >
  13+ 6CCD             >                // dummy db directives used to calculate length of namec
  13+ 6CCD 3A          >                db      ":"
  13+ 6CCE             >len_NFA         defl    $ - temp_NFA
  13+ 6CCE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13+ 6CCD             >
  13+ 6CCD C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
  13+ 6CCE 3A          >                db      ":"               // name string in 7-bit ascii, but
  13+ 6CCF             >                org     $-1                 // alter last byte of Name just above to set
  13+ 6CCE BA          >                db      {b $} | END_BIT     // msb as name end
  13+ 6CCF             >
  13+ 6CCF C3 6C       >                dw      last_NFA            // Link to previous definition Name
  13+ 6CD1             >COLON:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  13+ 6CD1 E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  13+ 6CD3             >                else
  13+ 6CD3 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  13+ 6CD3             >                endif           ; ok        // for other definitions it "points" the correct handler
  13+ 6CD3             >                // Use of "; ok" to suppress "warning[fwdref]"
  13+ 6CD3             >
  13+ 6CD3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14+ 6CD3
  15+ 6CD3 31 71                        dw      QEXEC                   // ?exec
  16+ 6CD5 EC 70                        dw      STORE_CSP               // !csp
  17+ 6CD7 A2 6E F6 6B                  dw      CURRENT, FETCH          // current @
  18+ 6CDB 95 6E 03 6C                  dw      CONTEXT, STORE          // context !
  19+ 6CDF C7 76                        dw      CREATE                  // create  ( forward )
  20+ 6CE1 CB 71                        dw      SMUDGE                  // dmudge
  21+ 6CE3 B6 71                        dw      SQUARED_CLOSE           // ]
  22+ 6CE5 21 72                        dw      C_SEMICOLON_CODE        // ;code ( change the 3-bytes CFA of defining word to call Enter_Ptr )
  23+ 6CE7                                                              // ... immediate
  24+ 6CE7              Enter_Ptr:
  25+ 6CE7                              // via call coded in CFA
  26+ 6CE7                              ldhlrp
  26+ 6CE7 2A 30 64    >                ld      hl,(RP_Pointer)
  27+ 6CEA 2B                           dec     hl                  // push on Return-Stack current Instruction-Pointer
  28+ 6CEB 70                           ld      (hl), b
  29+ 6CEC 2B                           dec     hl
  30+ 6CED 71                           ld      (hl), c
  31+ 6CEE                              ldrphl
  31+ 6CEE 22 30 64    >                ld      (RP_Pointer),hl
  32+ 6CF1 13                           inc     de
  33+ 6CF2 4B                           ld      c, e
  34+ 6CF3 42                           ld      b, d
  35+ 6CF4                              next
  35+ 6CF4 DD E9       >                jp      (ix)
  36+ 6CF6
  37+ 6CF6              //  ______________________________________________________________________
  38+ 6CF6              //
  39+ 6CF6              // ;            --
  40+ 6CF6              // Semicolon. End of Colon-Definition. Stack must be balanced.
  41+ 6CF6                              Colon_Def SEMICOLON, ";", is_immediate   // has forward-ref
  41+ 6CF6             >                New_Def  SEMICOLON, ";", Enter_Ptr, is_immediate ; ok
  41+ 6CF6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  41+ 6CF6             >
  41+ 6CF6             >                // dummy db directives used to calculate length of namec
  41+ 6CF6 3B          >                db      ";"
  41+ 6CF7             >len_NFA         defl    $ - temp_NFA
  41+ 6CF7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  41+ 6CF6             >
  41+ 6CF6 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
  41+ 6CF7 3B          >                db      ";"               // name string in 7-bit ascii, but
  41+ 6CF8             >                org     $-1                 // alter last byte of Name just above to set
  41+ 6CF7 BB          >                db      {b $} | END_BIT     // msb as name end
  41+ 6CF8             >
  41+ 6CF8 CD 6C       >                dw      last_NFA            // Link to previous definition Name
  41+ 6CFA             >SEMICOLON:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  41+ 6CFA E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  41+ 6CFC             >                else
  41+ 6CFC ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  41+ 6CFC             >                endif           ; ok        // for other definitions it "points" the correct handler
  41+ 6CFC             >                // Use of "; ok" to suppress "warning[fwdref]"
  41+ 6CFC             >
  41+ 6CFC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  42+ 6CFC
  43+ 6CFC 5B 71                        dw      QCSP                    // ?csp
  44+ 6CFE 92 71 BD 69                  dw      COMPILE, EXIT           // [compile] ;s
  45+ 6D02 CB 71                        dw      SMUDGE                  // smudge
  46+ 6D04 A8 71                        dw      SQUARED_OPEN            // [
  47+ 6D06 BD 69                        dw      EXIT                    // ; immediate
  48+ 6D08
  49+ 6D08              //  ______________________________________________________________________
  50+ 6D08              //
  51+ 6D08              // noop         --
  52+ 6D08
  53+ 6D08                              Colon_Def NOOP, "NOOP", is_normal
  53+ 6D08             >                New_Def  NOOP, "NOOP", Enter_Ptr, is_normal ; ok
  53+ 6D08             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  53+ 6D08             >
  53+ 6D08             >                // dummy db directives used to calculate length of namec
  53+ 6D08 4E 4F 4F 50 >                db      "NOOP"
  53+ 6D0C             >len_NFA         defl    $ - temp_NFA
  53+ 6D0C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  53+ 6D08             >
  53+ 6D08 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  53+ 6D09 4E 4F 4F 50 >                db      "NOOP"               // name string in 7-bit ascii, but
  53+ 6D0D             >                org     $-1                 // alter last byte of Name just above to set
  53+ 6D0C D0          >                db      {b $} | END_BIT     // msb as name end
  53+ 6D0D             >
  53+ 6D0D F6 6C       >                dw      last_NFA            // Link to previous definition Name
  53+ 6D0F             >NOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  53+ 6D0F E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  53+ 6D11             >                else
  53+ 6D11 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  53+ 6D11             >                endif           ; ok        // for other definitions it "points" the correct handler
  53+ 6D11             >                // Use of "; ok" to suppress "warning[fwdref]"
  53+ 6D11             >
  53+ 6D11             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  54+ 6D11 BD 69                        dw      EXIT
  55+ 6D13
  56+ 6D13              //  ______________________________________________________________________
  57+ 6D13              //
  58+ 6D13              // constant     n -- cccc     ( compile time )
  59+ 6D13              //              -- n          ( run time )
  60+ 6D13              // Constant definition.
  61+ 6D13                              Colon_Def CONSTANT, "CONSTANT", is_normal   // has forward-ref
  61+ 6D13             >                New_Def  CONSTANT, "CONSTANT", Enter_Ptr, is_normal ; ok
  61+ 6D13             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  61+ 6D13             >
  61+ 6D13             >                // dummy db directives used to calculate length of namec
  61+ 6D13 43 4F 4E 53 >                db      "CONSTANT"
  61+ 6D17 54 41 4E 54 >
  61+ 6D1B             >len_NFA         defl    $ - temp_NFA
  61+ 6D1B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  61+ 6D13             >
  61+ 6D13 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  61+ 6D14 43 4F 4E 53 >                db      "CONSTANT"               // name string in 7-bit ascii, but
  61+ 6D18 54 41 4E 54 >
  61+ 6D1C             >                org     $-1                 // alter last byte of Name just above to set
  61+ 6D1B D4          >                db      {b $} | END_BIT     // msb as name end
  61+ 6D1C             >
  61+ 6D1C 08 6D       >                dw      last_NFA            // Link to previous definition Name
  61+ 6D1E             >CONSTANT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  61+ 6D1E E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  61+ 6D20             >                else
  61+ 6D20 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  61+ 6D20             >                endif           ; ok        // for other definitions it "points" the correct handler
  61+ 6D20             >                // Use of "; ok" to suppress "warning[fwdref]"
  61+ 6D20             >
  61+ 6D20             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  62+ 6D20
  63+ 6D20 C7 76                        dw      CREATE                  // create
  64+ 6D22 50 6F                        dw      COMMA                   // ,    ( at PFA then, store the value )
  65+ 6D24 21 72                        dw      C_SEMICOLON_CODE        // ;code (  changes the 3-bytes CFA to call Constant_Ptr )
  66+ 6D26              Constant_Ptr:
  67+ 6D26
  68+ 6D26 13                           inc     de
  69+ 6D27 EB                           ex      de, hl
  70+ 6D28
  71+ 6D28 5E                           ld      e, (hl)
  72+ 6D29 23                           inc     hl
  73+ 6D2A 56                           ld      d, (hl)
  74+ 6D2B D5                           push    de
  75+ 6D2C                              next
  75+ 6D2C DD E9       >                jp      (ix)
  76+ 6D2E
  77+ 6D2E              //  ______________________________________________________________________
  78+ 6D2E              //
  79+ 6D2E              // variable     n -- cccc     ( compile time )
  80+ 6D2E              //              -- a          ( run time )
  81+ 6D2E              // Variable definition, n is the initial value.
  82+ 6D2E                              Colon_Def VARIABLE, "VARIABLE", is_normal   // has forward-ref
  82+ 6D2E             >                New_Def  VARIABLE, "VARIABLE", Enter_Ptr, is_normal ; ok
  82+ 6D2E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  82+ 6D2E             >
  82+ 6D2E             >                // dummy db directives used to calculate length of namec
  82+ 6D2E 56 41 52 49 >                db      "VARIABLE"
  82+ 6D32 41 42 4C 45 >
  82+ 6D36             >len_NFA         defl    $ - temp_NFA
  82+ 6D36             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  82+ 6D2E             >
  82+ 6D2E 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  82+ 6D2F 56 41 52 49 >                db      "VARIABLE"               // name string in 7-bit ascii, but
  82+ 6D33 41 42 4C 45 >
  82+ 6D37             >                org     $-1                 // alter last byte of Name just above to set
  82+ 6D36 C5          >                db      {b $} | END_BIT     // msb as name end
  82+ 6D37             >
  82+ 6D37 13 6D       >                dw      last_NFA            // Link to previous definition Name
  82+ 6D39             >VARIABLE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  82+ 6D39 E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  82+ 6D3B             >                else
  82+ 6D3B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  82+ 6D3B             >                endif           ; ok        // for other definitions it "points" the correct handler
  82+ 6D3B             >                // Use of "; ok" to suppress "warning[fwdref]"
  82+ 6D3B             >
  82+ 6D3B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  83+ 6D3B
  84+ 6D3B 1E 6D                        dw      CONSTANT                // constant
  85+ 6D3D 21 72                        dw      C_SEMICOLON_CODE        // ;code ( changes the 3-bytes CFA to call Variable_Ptr )
  86+ 6D3F              Variable_Ptr:
  87+ 6D3F
  88+ 6D3F 13                           inc     de
  89+ 6D40 D5                           push    de                  // balance TOS before overwrite it
  90+ 6D41
  91+ 6D41                              next
  91+ 6D41 DD E9       >                jp      (ix)
  92+ 6D43
  93+ 6D43              //  ______________________________________________________________________
  94+ 6D43              //
  95+ 6D43              // user         b -- cccc     ( compile time )
  96+ 6D43              //              -- a          ( run time )
  97+ 6D43              // User variable definition
  98+ 6D43                              Colon_Def USER, "USER", is_normal
  98+ 6D43             >                New_Def  USER, "USER", Enter_Ptr, is_normal ; ok
  98+ 6D43             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  98+ 6D43             >
  98+ 6D43             >                // dummy db directives used to calculate length of namec
  98+ 6D43 55 53 45 52 >                db      "USER"
  98+ 6D47             >len_NFA         defl    $ - temp_NFA
  98+ 6D47             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  98+ 6D43             >
  98+ 6D43 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  98+ 6D44 55 53 45 52 >                db      "USER"               // name string in 7-bit ascii, but
  98+ 6D48             >                org     $-1                 // alter last byte of Name just above to set
  98+ 6D47 D2          >                db      {b $} | END_BIT     // msb as name end
  98+ 6D48             >
  98+ 6D48 2E 6D       >                dw      last_NFA            // Link to previous definition Name
  98+ 6D4A             >USER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  98+ 6D4A E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  98+ 6D4C             >                else
  98+ 6D4C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  98+ 6D4C             >                endif           ; ok        // for other definitions it "points" the correct handler
  98+ 6D4C             >                // Use of "; ok" to suppress "warning[fwdref]"
  98+ 6D4C             >
  98+ 6D4C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  99+ 6D4C
 100+ 6D4C C7 76                        dw      CREATE                  // create
 101+ 6D4E 61 6F                        dw      CCOMMA                  // c,
 102+ 6D50 21 72                        dw      C_SEMICOLON_CODE        // ;code () changes the 3-bytes CFA to call User_Ptr )
 103+ 6D52
 104+ 6D52
 105+ 6D52              User_Ptr:
 106+ 6D52                              // via call coded in CFA
 107+ 6D52 13                           inc     de
 108+ 6D53 EB                           ex      de, hl
 109+ 6D54 5E                           ld      e, (hl)
 110+ 6D55 16 00                        ld      d, 0
 111+ 6D57 2A 2E 64                     ld      hl, (USER_Pointer)
 112+ 6D5A 19                           add     hl, de
 113+ 6D5B
 114+ 6D5B                              psh1
 114+ 6D5B E5          >                push    hl
 114+ 6D5C DD E9       >                jp      (ix)
 115+ 6D5E
 116+ 6D5E              //  ______________________________________________________________________
 117+ 6D5E              //
 118+ 6D5E                              Constant_Def ZERO       ,   "0"     ,   0
 118+ 6D5E             >                New_Def  ZERO, "0", Constant_Ptr, is_normal
 118+ 6D5E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 118+ 6D5E             >
 118+ 6D5E             >                // dummy db directives used to calculate length of namec
 118+ 6D5E 30          >                db      "0"
 118+ 6D5F             >len_NFA         defl    $ - temp_NFA
 118+ 6D5F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 118+ 6D5E             >
 118+ 6D5E 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 118+ 6D5F 30          >                db      "0"               // name string in 7-bit ascii, but
 118+ 6D60             >                org     $-1                 // alter last byte of Name just above to set
 118+ 6D5F B0          >                db      {b $} | END_BIT     // msb as name end
 118+ 6D60             >
 118+ 6D60 43 6D       >                dw      last_NFA            // Link to previous definition Name
 118+ 6D62             >ZERO:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 118+ 6D62 26 6D       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 118+ 6D64             >                else
 118+ 6D64 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 118+ 6D64             >                endif           ; ok        // for other definitions it "points" the correct handler
 118+ 6D64             >                // Use of "; ok" to suppress "warning[fwdref]"
 118+ 6D64             >
 118+ 6D64             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 118+ 6D64 00 00       >                dw      0
 119+ 6D66                              Constant_Def ONE        ,   "1"     ,   1
 119+ 6D66             >                New_Def  ONE, "1", Constant_Ptr, is_normal
 119+ 6D66             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 119+ 6D66             >
 119+ 6D66             >                // dummy db directives used to calculate length of namec
 119+ 6D66 31          >                db      "1"
 119+ 6D67             >len_NFA         defl    $ - temp_NFA
 119+ 6D67             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 119+ 6D66             >
 119+ 6D66 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 119+ 6D67 31          >                db      "1"               // name string in 7-bit ascii, but
 119+ 6D68             >                org     $-1                 // alter last byte of Name just above to set
 119+ 6D67 B1          >                db      {b $} | END_BIT     // msb as name end
 119+ 6D68             >
 119+ 6D68 5E 6D       >                dw      last_NFA            // Link to previous definition Name
 119+ 6D6A             >ONE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 119+ 6D6A 26 6D       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 119+ 6D6C             >                else
 119+ 6D6C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 119+ 6D6C             >                endif           ; ok        // for other definitions it "points" the correct handler
 119+ 6D6C             >                // Use of "; ok" to suppress "warning[fwdref]"
 119+ 6D6C             >
 119+ 6D6C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 119+ 6D6C 01 00       >                dw      1
 120+ 6D6E                              Constant_Def TWO        ,   "2"     ,   2
 120+ 6D6E             >                New_Def  TWO, "2", Constant_Ptr, is_normal
 120+ 6D6E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 120+ 6D6E             >
 120+ 6D6E             >                // dummy db directives used to calculate length of namec
 120+ 6D6E 32          >                db      "2"
 120+ 6D6F             >len_NFA         defl    $ - temp_NFA
 120+ 6D6F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 120+ 6D6E             >
 120+ 6D6E 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 120+ 6D6F 32          >                db      "2"               // name string in 7-bit ascii, but
 120+ 6D70             >                org     $-1                 // alter last byte of Name just above to set
 120+ 6D6F B2          >                db      {b $} | END_BIT     // msb as name end
 120+ 6D70             >
 120+ 6D70 66 6D       >                dw      last_NFA            // Link to previous definition Name
 120+ 6D72             >TWO:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 120+ 6D72 26 6D       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 120+ 6D74             >                else
 120+ 6D74 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 120+ 6D74             >                endif           ; ok        // for other definitions it "points" the correct handler
 120+ 6D74             >                // Use of "; ok" to suppress "warning[fwdref]"
 120+ 6D74             >
 120+ 6D74             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 120+ 6D74 02 00       >                dw      2
 121+ 6D76                              Constant_Def THREE      ,   "3"     ,   3
 121+ 6D76             >                New_Def  THREE, "3", Constant_Ptr, is_normal
 121+ 6D76             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 121+ 6D76             >
 121+ 6D76             >                // dummy db directives used to calculate length of namec
 121+ 6D76 33          >                db      "3"
 121+ 6D77             >len_NFA         defl    $ - temp_NFA
 121+ 6D77             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 121+ 6D76             >
 121+ 6D76 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 121+ 6D77 33          >                db      "3"               // name string in 7-bit ascii, but
 121+ 6D78             >                org     $-1                 // alter last byte of Name just above to set
 121+ 6D77 B3          >                db      {b $} | END_BIT     // msb as name end
 121+ 6D78             >
 121+ 6D78 6E 6D       >                dw      last_NFA            // Link to previous definition Name
 121+ 6D7A             >THREE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 121+ 6D7A 26 6D       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 121+ 6D7C             >                else
 121+ 6D7C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 121+ 6D7C             >                endif           ; ok        // for other definitions it "points" the correct handler
 121+ 6D7C             >                // Use of "; ok" to suppress "warning[fwdref]"
 121+ 6D7C             >
 121+ 6D7C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 121+ 6D7C 03 00       >                dw      3
 122+ 6D7E                              Constant_Def NEG_ONE    ,   "-1"    ,  -1
 122+ 6D7E             >                New_Def  NEG_ONE, "-1", Constant_Ptr, is_normal
 122+ 6D7E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 122+ 6D7E             >
 122+ 6D7E             >                // dummy db directives used to calculate length of namec
 122+ 6D7E 2D 31       >                db      "-1"
 122+ 6D80             >len_NFA         defl    $ - temp_NFA
 122+ 6D80             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 122+ 6D7E             >
 122+ 6D7E 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 122+ 6D7F 2D 31       >                db      "-1"               // name string in 7-bit ascii, but
 122+ 6D81             >                org     $-1                 // alter last byte of Name just above to set
 122+ 6D80 B1          >                db      {b $} | END_BIT     // msb as name end
 122+ 6D81             >
 122+ 6D81 76 6D       >                dw      last_NFA            // Link to previous definition Name
 122+ 6D83             >NEG_ONE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 122+ 6D83 26 6D       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 122+ 6D85             >                else
 122+ 6D85 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 122+ 6D85             >                endif           ; ok        // for other definitions it "points" the correct handler
 122+ 6D85             >                // Use of "; ok" to suppress "warning[fwdref]"
 122+ 6D85             >
 122+ 6D85             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 122+ 6D85 FF FF       >                dw      -1
 123+ 6D87                              Constant_Def BL         ,   "BL"    , $20
 123+ 6D87             >                New_Def  BL, "BL", Constant_Ptr, is_normal
 123+ 6D87             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 123+ 6D87             >
 123+ 6D87             >                // dummy db directives used to calculate length of namec
 123+ 6D87 42 4C       >                db      "BL"
 123+ 6D89             >len_NFA         defl    $ - temp_NFA
 123+ 6D89             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 123+ 6D87             >
 123+ 6D87 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 123+ 6D88 42 4C       >                db      "BL"               // name string in 7-bit ascii, but
 123+ 6D8A             >                org     $-1                 // alter last byte of Name just above to set
 123+ 6D89 CC          >                db      {b $} | END_BIT     // msb as name end
 123+ 6D8A             >
 123+ 6D8A 7E 6D       >                dw      last_NFA            // Link to previous definition Name
 123+ 6D8C             >BL:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 123+ 6D8C 26 6D       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 123+ 6D8E             >                else
 123+ 6D8E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 123+ 6D8E             >                endif           ; ok        // for other definitions it "points" the correct handler
 123+ 6D8E             >                // Use of "; ok" to suppress "warning[fwdref]"
 123+ 6D8E             >
 123+ 6D8E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 123+ 6D8E 20 00       >                dw      $20
 124+ 6D90                              Constant_Def CL         ,   "C/L"   ,  64
 124+ 6D90             >                New_Def  CL, "C/L", Constant_Ptr, is_normal
 124+ 6D90             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 124+ 6D90             >
 124+ 6D90             >                // dummy db directives used to calculate length of namec
 124+ 6D90 43 2F 4C    >                db      "C/L"
 124+ 6D93             >len_NFA         defl    $ - temp_NFA
 124+ 6D93             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 124+ 6D90             >
 124+ 6D90 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 124+ 6D91 43 2F 4C    >                db      "C/L"               // name string in 7-bit ascii, but
 124+ 6D94             >                org     $-1                 // alter last byte of Name just above to set
 124+ 6D93 CC          >                db      {b $} | END_BIT     // msb as name end
 124+ 6D94             >
 124+ 6D94 87 6D       >                dw      last_NFA            // Link to previous definition Name
 124+ 6D96             >CL:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 124+ 6D96 26 6D       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 124+ 6D98             >                else
 124+ 6D98 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 124+ 6D98             >                endif           ; ok        // for other definitions it "points" the correct handler
 124+ 6D98             >                // Use of "; ok" to suppress "warning[fwdref]"
 124+ 6D98             >
 124+ 6D98             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 124+ 6D98 40 00       >                dw      64
 125+ 6D9A                              Constant_Def BBUF       ,   "B/BUF" , 512
 125+ 6D9A             >                New_Def  BBUF, "B/BUF", Constant_Ptr, is_normal
 125+ 6D9A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 125+ 6D9A             >
 125+ 6D9A             >                // dummy db directives used to calculate length of namec
 125+ 6D9A 42 2F 42 55 >                db      "B/BUF"
 125+ 6D9E 46          >
 125+ 6D9F             >len_NFA         defl    $ - temp_NFA
 125+ 6D9F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 125+ 6D9A             >
 125+ 6D9A 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 125+ 6D9B 42 2F 42 55 >                db      "B/BUF"               // name string in 7-bit ascii, but
 125+ 6D9F 46          >
 125+ 6DA0             >                org     $-1                 // alter last byte of Name just above to set
 125+ 6D9F C6          >                db      {b $} | END_BIT     // msb as name end
 125+ 6DA0             >
 125+ 6DA0 90 6D       >                dw      last_NFA            // Link to previous definition Name
 125+ 6DA2             >BBUF:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 125+ 6DA2 26 6D       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 125+ 6DA4             >                else
 125+ 6DA4 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 125+ 6DA4             >                endif           ; ok        // for other definitions it "points" the correct handler
 125+ 6DA4             >                // Use of "; ok" to suppress "warning[fwdref]"
 125+ 6DA4             >
 125+ 6DA4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 125+ 6DA4 00 02       >                dw      512
 126+ 6DA6                              Constant_Def BSCR       ,   "B/SCR" ,   2
 126+ 6DA6             >                New_Def  BSCR, "B/SCR", Constant_Ptr, is_normal
 126+ 6DA6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 126+ 6DA6             >
 126+ 6DA6             >                // dummy db directives used to calculate length of namec
 126+ 6DA6 42 2F 53 43 >                db      "B/SCR"
 126+ 6DAA 52          >
 126+ 6DAB             >len_NFA         defl    $ - temp_NFA
 126+ 6DAB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 126+ 6DA6             >
 126+ 6DA6 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 126+ 6DA7 42 2F 53 43 >                db      "B/SCR"               // name string in 7-bit ascii, but
 126+ 6DAB 52          >
 126+ 6DAC             >                org     $-1                 // alter last byte of Name just above to set
 126+ 6DAB D2          >                db      {b $} | END_BIT     // msb as name end
 126+ 6DAC             >
 126+ 6DAC 9A 6D       >                dw      last_NFA            // Link to previous definition Name
 126+ 6DAE             >BSCR:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 126+ 6DAE 26 6D       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 126+ 6DB0             >                else
 126+ 6DB0 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 126+ 6DB0             >                endif           ; ok        // for other definitions it "points" the correct handler
 126+ 6DB0             >                // Use of "; ok" to suppress "warning[fwdref]"
 126+ 6DB0             >
 126+ 6DB0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 126+ 6DB0 02 00       >                dw      2
 127+ 6DB2                              Constant_Def LSCR       ,   "L/SCR" ,  16
 127+ 6DB2             >                New_Def  LSCR, "L/SCR", Constant_Ptr, is_normal
 127+ 6DB2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 127+ 6DB2             >
 127+ 6DB2             >                // dummy db directives used to calculate length of namec
 127+ 6DB2 4C 2F 53 43 >                db      "L/SCR"
 127+ 6DB6 52          >
 127+ 6DB7             >len_NFA         defl    $ - temp_NFA
 127+ 6DB7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 127+ 6DB2             >
 127+ 6DB2 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 127+ 6DB3 4C 2F 53 43 >                db      "L/SCR"               // name string in 7-bit ascii, but
 127+ 6DB7 52          >
 127+ 6DB8             >                org     $-1                 // alter last byte of Name just above to set
 127+ 6DB7 D2          >                db      {b $} | END_BIT     // msb as name end
 127+ 6DB8             >
 127+ 6DB8 A6 6D       >                dw      last_NFA            // Link to previous definition Name
 127+ 6DBA             >LSCR:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 127+ 6DBA 26 6D       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 127+ 6DBC             >                else
 127+ 6DBC ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 127+ 6DBC             >                endif           ; ok        // for other definitions it "points" the correct handler
 127+ 6DBC             >                // Use of "; ok" to suppress "warning[fwdref]"
 127+ 6DBC             >
 127+ 6DBC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 127+ 6DBC 10 00       >                dw      16
 128+ 6DBE
 129+ 6DBE              //  ______________________________________________________________________
 130+ 6DBE              //
 131+ 6DBE              // +origin         --
 132+ 6DBE                              Colon_Def PLUS_ORIGIN, "+ORIGIN", is_normal
 132+ 6DBE             >                New_Def  PLUS_ORIGIN, "+ORIGIN", Enter_Ptr, is_normal ; ok
 132+ 6DBE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 132+ 6DBE             >
 132+ 6DBE             >                // dummy db directives used to calculate length of namec
 132+ 6DBE 2B 4F 52 49 >                db      "+ORIGIN"
 132+ 6DC2 47 49 4E    >
 132+ 6DC5             >len_NFA         defl    $ - temp_NFA
 132+ 6DC5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 132+ 6DBE             >
 132+ 6DBE 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 132+ 6DBF 2B 4F 52 49 >                db      "+ORIGIN"               // name string in 7-bit ascii, but
 132+ 6DC3 47 49 4E    >
 132+ 6DC6             >                org     $-1                 // alter last byte of Name just above to set
 132+ 6DC5 CE          >                db      {b $} | END_BIT     // msb as name end
 132+ 6DC6             >
 132+ 6DC6 B2 6D       >                dw      last_NFA            // Link to previous definition Name
 132+ 6DC8             >PLUS_ORIGIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 132+ 6DC8 E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 132+ 6DCA             >                else
 132+ 6DCA ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 132+ 6DCA             >                endif           ; ok        // for other definitions it "points" the correct handler
 132+ 6DCA             >                // Use of "; ok" to suppress "warning[fwdref]"
 132+ 6DCA             >
 132+ 6DCA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 133+ 6DCA 43 64 00 64                  dw      LIT, Cold_origin        // [ hex 6400 ] literal
 134+ 6DCE 4F 6A                        dw      PLUS                    // +
 135+ 6DD0 BD 69                        dw      EXIT                    // ;
 136+ 6DD2
 137+ 6DD2              //  ______________________________________________________________________
 138+ 6DD2              //
 139+ 6DD2                              Constant_Def CNEXT      ,   "(NEXT)", Next_Ptr
 139+ 6DD2             >                New_Def  CNEXT, "(NEXT)", Constant_Ptr, is_normal
 139+ 6DD2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 139+ 6DD2             >
 139+ 6DD2             >                // dummy db directives used to calculate length of namec
 139+ 6DD2 28 4E 45 58 >                db      "(NEXT)"
 139+ 6DD6 54 29       >
 139+ 6DD8             >len_NFA         defl    $ - temp_NFA
 139+ 6DD8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 139+ 6DD2             >
 139+ 6DD2 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 139+ 6DD3 28 4E 45 58 >                db      "(NEXT)"               // name string in 7-bit ascii, but
 139+ 6DD7 54 29       >
 139+ 6DD9             >                org     $-1                 // alter last byte of Name just above to set
 139+ 6DD8 A9          >                db      {b $} | END_BIT     // msb as name end
 139+ 6DD9             >
 139+ 6DD9 BE 6D       >                dw      last_NFA            // Link to previous definition Name
 139+ 6DDB             >CNEXT:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 139+ 6DDB 26 6D       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 139+ 6DDD             >                else
 139+ 6DDD ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 139+ 6DDD             >                endif           ; ok        // for other definitions it "points" the correct handler
 139+ 6DDD             >                // Use of "; ok" to suppress "warning[fwdref]"
 139+ 6DDD             >
 139+ 6DDD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 139+ 6DDD 32 64       >                dw      Next_Ptr
 140+ 6DDF
 141+ 6DDF              //  ______________________________________________________________________
 142+ 6DDF              //
 143+ 6DDF
 144+ 6DDF                              User_Def S0         , "S0"        , 06 // starting value of Stack-Pointer
 144+ 6DDF             >                New_Def  S0, "S0", User_Ptr, is_normal
 144+ 6DDF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 144+ 6DDF             >
 144+ 6DDF             >                // dummy db directives used to calculate length of namec
 144+ 6DDF 53 30       >                db      "S0"
 144+ 6DE1             >len_NFA         defl    $ - temp_NFA
 144+ 6DE1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 144+ 6DDF             >
 144+ 6DDF 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 144+ 6DE0 53 30       >                db      "S0"               // name string in 7-bit ascii, but
 144+ 6DE2             >                org     $-1                 // alter last byte of Name just above to set
 144+ 6DE1 B0          >                db      {b $} | END_BIT     // msb as name end
 144+ 6DE2             >
 144+ 6DE2 D2 6D       >                dw      last_NFA            // Link to previous definition Name
 144+ 6DE4             >S0:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 144+ 6DE4 52 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 144+ 6DE6             >                else
 144+ 6DE6 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 144+ 6DE6             >                endif           ; ok        // for other definitions it "points" the correct handler
 144+ 6DE6             >                // Use of "; ok" to suppress "warning[fwdref]"
 144+ 6DE6             >
 144+ 6DE6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 144+ 6DE6 06          >                db      06
 145+ 6DE7                              User_Def R0         , "R0"        , 08 // starting value of Return-Pointer
 145+ 6DE7             >                New_Def  R0, "R0", User_Ptr, is_normal
 145+ 6DE7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 145+ 6DE7             >
 145+ 6DE7             >                // dummy db directives used to calculate length of namec
 145+ 6DE7 52 30       >                db      "R0"
 145+ 6DE9             >len_NFA         defl    $ - temp_NFA
 145+ 6DE9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 145+ 6DE7             >
 145+ 6DE7 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 145+ 6DE8 52 30       >                db      "R0"               // name string in 7-bit ascii, but
 145+ 6DEA             >                org     $-1                 // alter last byte of Name just above to set
 145+ 6DE9 B0          >                db      {b $} | END_BIT     // msb as name end
 145+ 6DEA             >
 145+ 6DEA DF 6D       >                dw      last_NFA            // Link to previous definition Name
 145+ 6DEC             >R0:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 145+ 6DEC 52 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 145+ 6DEE             >                else
 145+ 6DEE ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 145+ 6DEE             >                endif           ; ok        // for other definitions it "points" the correct handler
 145+ 6DEE             >                // Use of "; ok" to suppress "warning[fwdref]"
 145+ 6DEE             >
 145+ 6DEE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 145+ 6DEE 08          >                db      08
 146+ 6DEF                              User_Def TIB        , "TIB"       , 10 // input terminal buffer address
 146+ 6DEF             >                New_Def  TIB, "TIB", User_Ptr, is_normal
 146+ 6DEF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 146+ 6DEF             >
 146+ 6DEF             >                // dummy db directives used to calculate length of namec
 146+ 6DEF 54 49 42    >                db      "TIB"
 146+ 6DF2             >len_NFA         defl    $ - temp_NFA
 146+ 6DF2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 146+ 6DEF             >
 146+ 6DEF 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 146+ 6DF0 54 49 42    >                db      "TIB"               // name string in 7-bit ascii, but
 146+ 6DF3             >                org     $-1                 // alter last byte of Name just above to set
 146+ 6DF2 C2          >                db      {b $} | END_BIT     // msb as name end
 146+ 6DF3             >
 146+ 6DF3 E7 6D       >                dw      last_NFA            // Link to previous definition Name
 146+ 6DF5             >TIB:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 146+ 6DF5 52 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 146+ 6DF7             >                else
 146+ 6DF7 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 146+ 6DF7             >                endif           ; ok        // for other definitions it "points" the correct handler
 146+ 6DF7             >                // Use of "; ok" to suppress "warning[fwdref]"
 146+ 6DF7             >
 146+ 6DF7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 146+ 6DF7 0A          >                db      10
 147+ 6DF8                              User_Def WIDTH      , "WIDTH"     , 12 // maximum number of characters for a word name
 147+ 6DF8             >                New_Def  WIDTH, "WIDTH", User_Ptr, is_normal
 147+ 6DF8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 147+ 6DF8             >
 147+ 6DF8             >                // dummy db directives used to calculate length of namec
 147+ 6DF8 57 49 44 54 >                db      "WIDTH"
 147+ 6DFC 48          >
 147+ 6DFD             >len_NFA         defl    $ - temp_NFA
 147+ 6DFD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 147+ 6DF8             >
 147+ 6DF8 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 147+ 6DF9 57 49 44 54 >                db      "WIDTH"               // name string in 7-bit ascii, but
 147+ 6DFD 48          >
 147+ 6DFE             >                org     $-1                 // alter last byte of Name just above to set
 147+ 6DFD C8          >                db      {b $} | END_BIT     // msb as name end
 147+ 6DFE             >
 147+ 6DFE EF 6D       >                dw      last_NFA            // Link to previous definition Name
 147+ 6E00             >WIDTH:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 147+ 6E00 52 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 147+ 6E02             >                else
 147+ 6E02 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 147+ 6E02             >                endif           ; ok        // for other definitions it "points" the correct handler
 147+ 6E02             >                // Use of "; ok" to suppress "warning[fwdref]"
 147+ 6E02             >
 147+ 6E02             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 147+ 6E02 0C          >                db      12
 148+ 6E03                              User_Def WARNING    , "WARNING"   , 14 // error reporting method: 0 base, 1 verbose
 148+ 6E03             >                New_Def  WARNING, "WARNING", User_Ptr, is_normal
 148+ 6E03             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 148+ 6E03             >
 148+ 6E03             >                // dummy db directives used to calculate length of namec
 148+ 6E03 57 41 52 4E >                db      "WARNING"
 148+ 6E07 49 4E 47    >
 148+ 6E0A             >len_NFA         defl    $ - temp_NFA
 148+ 6E0A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 148+ 6E03             >
 148+ 6E03 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 148+ 6E04 57 41 52 4E >                db      "WARNING"               // name string in 7-bit ascii, but
 148+ 6E08 49 4E 47    >
 148+ 6E0B             >                org     $-1                 // alter last byte of Name just above to set
 148+ 6E0A C7          >                db      {b $} | END_BIT     // msb as name end
 148+ 6E0B             >
 148+ 6E0B F8 6D       >                dw      last_NFA            // Link to previous definition Name
 148+ 6E0D             >WARNING:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 148+ 6E0D 52 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 148+ 6E0F             >                else
 148+ 6E0F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 148+ 6E0F             >                endif           ; ok        // for other definitions it "points" the correct handler
 148+ 6E0F             >                // Use of "; ok" to suppress "warning[fwdref]"
 148+ 6E0F             >
 148+ 6E0F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 148+ 6E0F 0E          >                db      14
 149+ 6E10                              User_Def FENCE      , "FENCE"     , 16 // minimum address where FORGET can work
 149+ 6E10             >                New_Def  FENCE, "FENCE", User_Ptr, is_normal
 149+ 6E10             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 149+ 6E10             >
 149+ 6E10             >                // dummy db directives used to calculate length of namec
 149+ 6E10 46 45 4E 43 >                db      "FENCE"
 149+ 6E14 45          >
 149+ 6E15             >len_NFA         defl    $ - temp_NFA
 149+ 6E15             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 149+ 6E10             >
 149+ 6E10 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 149+ 6E11 46 45 4E 43 >                db      "FENCE"               // name string in 7-bit ascii, but
 149+ 6E15 45          >
 149+ 6E16             >                org     $-1                 // alter last byte of Name just above to set
 149+ 6E15 C5          >                db      {b $} | END_BIT     // msb as name end
 149+ 6E16             >
 149+ 6E16 03 6E       >                dw      last_NFA            // Link to previous definition Name
 149+ 6E18             >FENCE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 149+ 6E18 52 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 149+ 6E1A             >                else
 149+ 6E1A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 149+ 6E1A             >                endif           ; ok        // for other definitions it "points" the correct handler
 149+ 6E1A             >                // Use of "; ok" to suppress "warning[fwdref]"
 149+ 6E1A             >
 149+ 6E1A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 149+ 6E1A 10          >                db      16
 150+ 6E1B                              User_Def DP         , "DP"        , 18 // Dictionary Pointer
 150+ 6E1B             >                New_Def  DP, "DP", User_Ptr, is_normal
 150+ 6E1B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 150+ 6E1B             >
 150+ 6E1B             >                // dummy db directives used to calculate length of namec
 150+ 6E1B 44 50       >                db      "DP"
 150+ 6E1D             >len_NFA         defl    $ - temp_NFA
 150+ 6E1D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 150+ 6E1B             >
 150+ 6E1B 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 150+ 6E1C 44 50       >                db      "DP"               // name string in 7-bit ascii, but
 150+ 6E1E             >                org     $-1                 // alter last byte of Name just above to set
 150+ 6E1D D0          >                db      {b $} | END_BIT     // msb as name end
 150+ 6E1E             >
 150+ 6E1E 10 6E       >                dw      last_NFA            // Link to previous definition Name
 150+ 6E20             >DP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 150+ 6E20 52 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 150+ 6E22             >                else
 150+ 6E22 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 150+ 6E22             >                endif           ; ok        // for other definitions it "points" the correct handler
 150+ 6E22             >                // Use of "; ok" to suppress "warning[fwdref]"
 150+ 6E22             >
 150+ 6E22             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 150+ 6E22 12          >                db      18
 151+ 6E23                              User_Def VOC_LINK   , "VOC-LINK"  , 20 // pointer to the latest vocabulary
 151+ 6E23             >                New_Def  VOC_LINK, "VOC-LINK", User_Ptr, is_normal
 151+ 6E23             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 151+ 6E23             >
 151+ 6E23             >                // dummy db directives used to calculate length of namec
 151+ 6E23 56 4F 43 2D >                db      "VOC-LINK"
 151+ 6E27 4C 49 4E 4B >
 151+ 6E2B             >len_NFA         defl    $ - temp_NFA
 151+ 6E2B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 151+ 6E23             >
 151+ 6E23 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 151+ 6E24 56 4F 43 2D >                db      "VOC-LINK"               // name string in 7-bit ascii, but
 151+ 6E28 4C 49 4E 4B >
 151+ 6E2C             >                org     $-1                 // alter last byte of Name just above to set
 151+ 6E2B CB          >                db      {b $} | END_BIT     // msb as name end
 151+ 6E2C             >
 151+ 6E2C 1B 6E       >                dw      last_NFA            // Link to previous definition Name
 151+ 6E2E             >VOC_LINK:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 151+ 6E2E 52 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 151+ 6E30             >                else
 151+ 6E30 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 151+ 6E30             >                endif           ; ok        // for other definitions it "points" the correct handler
 151+ 6E30             >                // Use of "; ok" to suppress "warning[fwdref]"
 151+ 6E30             >
 151+ 6E30             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 151+ 6E30 14          >                db      20
 152+ 6E31                              User_Def FIRST      , "FIRST"     , 22 // address of first buffer
 152+ 6E31             >                New_Def  FIRST, "FIRST", User_Ptr, is_normal
 152+ 6E31             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 152+ 6E31             >
 152+ 6E31             >                // dummy db directives used to calculate length of namec
 152+ 6E31 46 49 52 53 >                db      "FIRST"
 152+ 6E35 54          >
 152+ 6E36             >len_NFA         defl    $ - temp_NFA
 152+ 6E36             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 152+ 6E31             >
 152+ 6E31 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 152+ 6E32 46 49 52 53 >                db      "FIRST"               // name string in 7-bit ascii, but
 152+ 6E36 54          >
 152+ 6E37             >                org     $-1                 // alter last byte of Name just above to set
 152+ 6E36 D4          >                db      {b $} | END_BIT     // msb as name end
 152+ 6E37             >
 152+ 6E37 23 6E       >                dw      last_NFA            // Link to previous definition Name
 152+ 6E39             >FIRST:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 152+ 6E39 52 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 152+ 6E3B             >                else
 152+ 6E3B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 152+ 6E3B             >                endif           ; ok        // for other definitions it "points" the correct handler
 152+ 6E3B             >                // Use of "; ok" to suppress "warning[fwdref]"
 152+ 6E3B             >
 152+ 6E3B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 152+ 6E3B 16          >                db      22
 153+ 6E3C                              User_Def LIMIT      , "LIMIT"     , 24 // address of last buffer
 153+ 6E3C             >                New_Def  LIMIT, "LIMIT", User_Ptr, is_normal
 153+ 6E3C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 153+ 6E3C             >
 153+ 6E3C             >                // dummy db directives used to calculate length of namec
 153+ 6E3C 4C 49 4D 49 >                db      "LIMIT"
 153+ 6E40 54          >
 153+ 6E41             >len_NFA         defl    $ - temp_NFA
 153+ 6E41             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 153+ 6E3C             >
 153+ 6E3C 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 153+ 6E3D 4C 49 4D 49 >                db      "LIMIT"               // name string in 7-bit ascii, but
 153+ 6E41 54          >
 153+ 6E42             >                org     $-1                 // alter last byte of Name just above to set
 153+ 6E41 D4          >                db      {b $} | END_BIT     // msb as name end
 153+ 6E42             >
 153+ 6E42 31 6E       >                dw      last_NFA            // Link to previous definition Name
 153+ 6E44             >LIMIT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 153+ 6E44 52 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 153+ 6E46             >                else
 153+ 6E46 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 153+ 6E46             >                endif           ; ok        // for other definitions it "points" the correct handler
 153+ 6E46             >                // Use of "; ok" to suppress "warning[fwdref]"
 153+ 6E46             >
 153+ 6E46             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 153+ 6E46 18          >                db      24
 154+ 6E47                              User_Def EXP        , "EXP"       , 26 // keeps the exponent in number conversion
 154+ 6E47             >                New_Def  EXP, "EXP", User_Ptr, is_normal
 154+ 6E47             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 154+ 6E47             >
 154+ 6E47             >                // dummy db directives used to calculate length of namec
 154+ 6E47 45 58 50    >                db      "EXP"
 154+ 6E4A             >len_NFA         defl    $ - temp_NFA
 154+ 6E4A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 154+ 6E47             >
 154+ 6E47 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 154+ 6E48 45 58 50    >                db      "EXP"               // name string in 7-bit ascii, but
 154+ 6E4B             >                org     $-1                 // alter last byte of Name just above to set
 154+ 6E4A D0          >                db      {b $} | END_BIT     // msb as name end
 154+ 6E4B             >
 154+ 6E4B 3C 6E       >                dw      last_NFA            // Link to previous definition Name
 154+ 6E4D             >EXP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 154+ 6E4D 52 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 154+ 6E4F             >                else
 154+ 6E4F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 154+ 6E4F             >                endif           ; ok        // for other definitions it "points" the correct handler
 154+ 6E4F             >                // Use of "; ok" to suppress "warning[fwdref]"
 154+ 6E4F             >
 154+ 6E4F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 154+ 6E4F 1A          >                db      26
 155+ 6E50                              User_Def NMODE      , "NMODE"     , 28 // number mode: 0 integer, 1 floating point
 155+ 6E50             >                New_Def  NMODE, "NMODE", User_Ptr, is_normal
 155+ 6E50             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 155+ 6E50             >
 155+ 6E50             >                // dummy db directives used to calculate length of namec
 155+ 6E50 4E 4D 4F 44 >                db      "NMODE"
 155+ 6E54 45          >
 155+ 6E55             >len_NFA         defl    $ - temp_NFA
 155+ 6E55             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 155+ 6E50             >
 155+ 6E50 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 155+ 6E51 4E 4D 4F 44 >                db      "NMODE"               // name string in 7-bit ascii, but
 155+ 6E55 45          >
 155+ 6E56             >                org     $-1                 // alter last byte of Name just above to set
 155+ 6E55 C5          >                db      {b $} | END_BIT     // msb as name end
 155+ 6E56             >
 155+ 6E56 47 6E       >                dw      last_NFA            // Link to previous definition Name
 155+ 6E58             >NMODE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 155+ 6E58 52 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 155+ 6E5A             >                else
 155+ 6E5A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 155+ 6E5A             >                endif           ; ok        // for other definitions it "points" the correct handler
 155+ 6E5A             >                // Use of "; ok" to suppress "warning[fwdref]"
 155+ 6E5A             >
 155+ 6E5A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 155+ 6E5A 1C          >                db      28
 156+ 6E5B                              User_Def BLK        , "BLK"       , 30 // block number to be interpreted. 0 for terminal
 156+ 6E5B             >                New_Def  BLK, "BLK", User_Ptr, is_normal
 156+ 6E5B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 156+ 6E5B             >
 156+ 6E5B             >                // dummy db directives used to calculate length of namec
 156+ 6E5B 42 4C 4B    >                db      "BLK"
 156+ 6E5E             >len_NFA         defl    $ - temp_NFA
 156+ 6E5E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 156+ 6E5B             >
 156+ 6E5B 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 156+ 6E5C 42 4C 4B    >                db      "BLK"               // name string in 7-bit ascii, but
 156+ 6E5F             >                org     $-1                 // alter last byte of Name just above to set
 156+ 6E5E CB          >                db      {b $} | END_BIT     // msb as name end
 156+ 6E5F             >
 156+ 6E5F 50 6E       >                dw      last_NFA            // Link to previous definition Name
 156+ 6E61             >BLK:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 156+ 6E61 52 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 156+ 6E63             >                else
 156+ 6E63 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 156+ 6E63             >                endif           ; ok        // for other definitions it "points" the correct handler
 156+ 6E63             >                // Use of "; ok" to suppress "warning[fwdref]"
 156+ 6E63             >
 156+ 6E63             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 156+ 6E63 1E          >                db      30
 157+ 6E64                              User_Def TO_IN      , ">IN"       , 32 // incremented when consuming input buffer
 157+ 6E64             >                New_Def  TO_IN, ">IN", User_Ptr, is_normal
 157+ 6E64             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 157+ 6E64             >
 157+ 6E64             >                // dummy db directives used to calculate length of namec
 157+ 6E64 3E 49 4E    >                db      ">IN"
 157+ 6E67             >len_NFA         defl    $ - temp_NFA
 157+ 6E67             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 157+ 6E64             >
 157+ 6E64 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 157+ 6E65 3E 49 4E    >                db      ">IN"               // name string in 7-bit ascii, but
 157+ 6E68             >                org     $-1                 // alter last byte of Name just above to set
 157+ 6E67 CE          >                db      {b $} | END_BIT     // msb as name end
 157+ 6E68             >
 157+ 6E68 5B 6E       >                dw      last_NFA            // Link to previous definition Name
 157+ 6E6A             >TO_IN:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 157+ 6E6A 52 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 157+ 6E6C             >                else
 157+ 6E6C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 157+ 6E6C             >                endif           ; ok        // for other definitions it "points" the correct handler
 157+ 6E6C             >                // Use of "; ok" to suppress "warning[fwdref]"
 157+ 6E6C             >
 157+ 6E6C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 157+ 6E6C 20          >                db      32
 158+ 6E6D                              User_Def OUT        , "OUT"       , 34 // incremented when sending to output
 158+ 6E6D             >                New_Def  OUT, "OUT", User_Ptr, is_normal
 158+ 6E6D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 158+ 6E6D             >
 158+ 6E6D             >                // dummy db directives used to calculate length of namec
 158+ 6E6D 4F 55 54    >                db      "OUT"
 158+ 6E70             >len_NFA         defl    $ - temp_NFA
 158+ 6E70             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 158+ 6E6D             >
 158+ 6E6D 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 158+ 6E6E 4F 55 54    >                db      "OUT"               // name string in 7-bit ascii, but
 158+ 6E71             >                org     $-1                 // alter last byte of Name just above to set
 158+ 6E70 D4          >                db      {b $} | END_BIT     // msb as name end
 158+ 6E71             >
 158+ 6E71 64 6E       >                dw      last_NFA            // Link to previous definition Name
 158+ 6E73             >OUT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 158+ 6E73 52 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 158+ 6E75             >                else
 158+ 6E75 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 158+ 6E75             >                endif           ; ok        // for other definitions it "points" the correct handler
 158+ 6E75             >                // Use of "; ok" to suppress "warning[fwdref]"
 158+ 6E75             >
 158+ 6E75             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 158+ 6E75 22          >                db      34
 159+ 6E76                              User_Def SCR        , "SCR"       , 36 // latest screen retreieved by LIST
 159+ 6E76             >                New_Def  SCR, "SCR", User_Ptr, is_normal
 159+ 6E76             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 159+ 6E76             >
 159+ 6E76             >                // dummy db directives used to calculate length of namec
 159+ 6E76 53 43 52    >                db      "SCR"
 159+ 6E79             >len_NFA         defl    $ - temp_NFA
 159+ 6E79             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 159+ 6E76             >
 159+ 6E76 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 159+ 6E77 53 43 52    >                db      "SCR"               // name string in 7-bit ascii, but
 159+ 6E7A             >                org     $-1                 // alter last byte of Name just above to set
 159+ 6E79 D2          >                db      {b $} | END_BIT     // msb as name end
 159+ 6E7A             >
 159+ 6E7A 6D 6E       >                dw      last_NFA            // Link to previous definition Name
 159+ 6E7C             >SCR:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 159+ 6E7C 52 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 159+ 6E7E             >                else
 159+ 6E7E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 159+ 6E7E             >                endif           ; ok        // for other definitions it "points" the correct handler
 159+ 6E7E             >                // Use of "; ok" to suppress "warning[fwdref]"
 159+ 6E7E             >
 159+ 6E7E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 159+ 6E7E 24          >                db      36
 160+ 6E7F                              User_Def OFFSET     , "OFFSET"    , 38 //
 160+ 6E7F             >                New_Def  OFFSET, "OFFSET", User_Ptr, is_normal
 160+ 6E7F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 160+ 6E7F             >
 160+ 6E7F             >                // dummy db directives used to calculate length of namec
 160+ 6E7F 4F 46 46 53 >                db      "OFFSET"
 160+ 6E83 45 54       >
 160+ 6E85             >len_NFA         defl    $ - temp_NFA
 160+ 6E85             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 160+ 6E7F             >
 160+ 6E7F 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 160+ 6E80 4F 46 46 53 >                db      "OFFSET"               // name string in 7-bit ascii, but
 160+ 6E84 45 54       >
 160+ 6E86             >                org     $-1                 // alter last byte of Name just above to set
 160+ 6E85 D4          >                db      {b $} | END_BIT     // msb as name end
 160+ 6E86             >
 160+ 6E86 76 6E       >                dw      last_NFA            // Link to previous definition Name
 160+ 6E88             >OFFSET:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 160+ 6E88 52 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 160+ 6E8A             >                else
 160+ 6E8A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 160+ 6E8A             >                endif           ; ok        // for other definitions it "points" the correct handler
 160+ 6E8A             >                // Use of "; ok" to suppress "warning[fwdref]"
 160+ 6E8A             >
 160+ 6E8A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 160+ 6E8A 26          >                db      38
 161+ 6E8B                              User_Def CONTEXT    , "CONTEXT"   , 40 // pointer to the vocabulary where search begins
 161+ 6E8B             >                New_Def  CONTEXT, "CONTEXT", User_Ptr, is_normal
 161+ 6E8B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 161+ 6E8B             >
 161+ 6E8B             >                // dummy db directives used to calculate length of namec
 161+ 6E8B 43 4F 4E 54 >                db      "CONTEXT"
 161+ 6E8F 45 58 54    >
 161+ 6E92             >len_NFA         defl    $ - temp_NFA
 161+ 6E92             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 161+ 6E8B             >
 161+ 6E8B 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 161+ 6E8C 43 4F 4E 54 >                db      "CONTEXT"               // name string in 7-bit ascii, but
 161+ 6E90 45 58 54    >
 161+ 6E93             >                org     $-1                 // alter last byte of Name just above to set
 161+ 6E92 D4          >                db      {b $} | END_BIT     // msb as name end
 161+ 6E93             >
 161+ 6E93 7F 6E       >                dw      last_NFA            // Link to previous definition Name
 161+ 6E95             >CONTEXT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 161+ 6E95 52 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 161+ 6E97             >                else
 161+ 6E97 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 161+ 6E97             >                endif           ; ok        // for other definitions it "points" the correct handler
 161+ 6E97             >                // Use of "; ok" to suppress "warning[fwdref]"
 161+ 6E97             >
 161+ 6E97             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 161+ 6E97 28          >                db      40
 162+ 6E98                              User_Def CURRENT    , "CURRENT"   , 42 // pointer to the vocabulary where search continues
 162+ 6E98             >                New_Def  CURRENT, "CURRENT", User_Ptr, is_normal
 162+ 6E98             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 162+ 6E98             >
 162+ 6E98             >                // dummy db directives used to calculate length of namec
 162+ 6E98 43 55 52 52 >                db      "CURRENT"
 162+ 6E9C 45 4E 54    >
 162+ 6E9F             >len_NFA         defl    $ - temp_NFA
 162+ 6E9F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 162+ 6E98             >
 162+ 6E98 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 162+ 6E99 43 55 52 52 >                db      "CURRENT"               // name string in 7-bit ascii, but
 162+ 6E9D 45 4E 54    >
 162+ 6EA0             >                org     $-1                 // alter last byte of Name just above to set
 162+ 6E9F D4          >                db      {b $} | END_BIT     // msb as name end
 162+ 6EA0             >
 162+ 6EA0 8B 6E       >                dw      last_NFA            // Link to previous definition Name
 162+ 6EA2             >CURRENT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 162+ 6EA2 52 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 162+ 6EA4             >                else
 162+ 6EA4 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 162+ 6EA4             >                endif           ; ok        // for other definitions it "points" the correct handler
 162+ 6EA4             >                // Use of "; ok" to suppress "warning[fwdref]"
 162+ 6EA4             >
 162+ 6EA4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 162+ 6EA4 2A          >                db      42
 163+ 6EA5                              User_Def STATE      , "STATE"     , 44 // compilation status. 0 interpreting.
 163+ 6EA5             >                New_Def  STATE, "STATE", User_Ptr, is_normal
 163+ 6EA5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 163+ 6EA5             >
 163+ 6EA5             >                // dummy db directives used to calculate length of namec
 163+ 6EA5 53 54 41 54 >                db      "STATE"
 163+ 6EA9 45          >
 163+ 6EAA             >len_NFA         defl    $ - temp_NFA
 163+ 6EAA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 163+ 6EA5             >
 163+ 6EA5 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 163+ 6EA6 53 54 41 54 >                db      "STATE"               // name string in 7-bit ascii, but
 163+ 6EAA 45          >
 163+ 6EAB             >                org     $-1                 // alter last byte of Name just above to set
 163+ 6EAA C5          >                db      {b $} | END_BIT     // msb as name end
 163+ 6EAB             >
 163+ 6EAB 98 6E       >                dw      last_NFA            // Link to previous definition Name
 163+ 6EAD             >STATE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 163+ 6EAD 52 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 163+ 6EAF             >                else
 163+ 6EAF ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 163+ 6EAF             >                endif           ; ok        // for other definitions it "points" the correct handler
 163+ 6EAF             >                // Use of "; ok" to suppress "warning[fwdref]"
 163+ 6EAF             >
 163+ 6EAF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 163+ 6EAF 2C          >                db      44
 164+ 6EB0                              User_Def BASE       , "BASE"      , 46 //
 164+ 6EB0             >                New_Def  BASE, "BASE", User_Ptr, is_normal
 164+ 6EB0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 164+ 6EB0             >
 164+ 6EB0             >                // dummy db directives used to calculate length of namec
 164+ 6EB0 42 41 53 45 >                db      "BASE"
 164+ 6EB4             >len_NFA         defl    $ - temp_NFA
 164+ 6EB4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 164+ 6EB0             >
 164+ 6EB0 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 164+ 6EB1 42 41 53 45 >                db      "BASE"               // name string in 7-bit ascii, but
 164+ 6EB5             >                org     $-1                 // alter last byte of Name just above to set
 164+ 6EB4 C5          >                db      {b $} | END_BIT     // msb as name end
 164+ 6EB5             >
 164+ 6EB5 A5 6E       >                dw      last_NFA            // Link to previous definition Name
 164+ 6EB7             >BASE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 164+ 6EB7 52 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 164+ 6EB9             >                else
 164+ 6EB9 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 164+ 6EB9             >                endif           ; ok        // for other definitions it "points" the correct handler
 164+ 6EB9             >                // Use of "; ok" to suppress "warning[fwdref]"
 164+ 6EB9             >
 164+ 6EB9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 164+ 6EB9 2E          >                db      46
 165+ 6EBA                              User_Def DPL        , "DPL"       , 48 // number of digits after decimal point in conversion
 165+ 6EBA             >                New_Def  DPL, "DPL", User_Ptr, is_normal
 165+ 6EBA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 165+ 6EBA             >
 165+ 6EBA             >                // dummy db directives used to calculate length of namec
 165+ 6EBA 44 50 4C    >                db      "DPL"
 165+ 6EBD             >len_NFA         defl    $ - temp_NFA
 165+ 6EBD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 165+ 6EBA             >
 165+ 6EBA 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 165+ 6EBB 44 50 4C    >                db      "DPL"               // name string in 7-bit ascii, but
 165+ 6EBE             >                org     $-1                 // alter last byte of Name just above to set
 165+ 6EBD CC          >                db      {b $} | END_BIT     // msb as name end
 165+ 6EBE             >
 165+ 6EBE B0 6E       >                dw      last_NFA            // Link to previous definition Name
 165+ 6EC0             >DPL:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 165+ 6EC0 52 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 165+ 6EC2             >                else
 165+ 6EC2 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 165+ 6EC2             >                endif           ; ok        // for other definitions it "points" the correct handler
 165+ 6EC2             >                // Use of "; ok" to suppress "warning[fwdref]"
 165+ 6EC2             >
 165+ 6EC2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 165+ 6EC2 30          >                db      48
 166+ 6EC3                              User_Def FLD        , "FLD"       , 50 // output field width
 166+ 6EC3             >                New_Def  FLD, "FLD", User_Ptr, is_normal
 166+ 6EC3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 166+ 6EC3             >
 166+ 6EC3             >                // dummy db directives used to calculate length of namec
 166+ 6EC3 46 4C 44    >                db      "FLD"
 166+ 6EC6             >len_NFA         defl    $ - temp_NFA
 166+ 6EC6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 166+ 6EC3             >
 166+ 6EC3 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 166+ 6EC4 46 4C 44    >                db      "FLD"               // name string in 7-bit ascii, but
 166+ 6EC7             >                org     $-1                 // alter last byte of Name just above to set
 166+ 6EC6 C4          >                db      {b $} | END_BIT     // msb as name end
 166+ 6EC7             >
 166+ 6EC7 BA 6E       >                dw      last_NFA            // Link to previous definition Name
 166+ 6EC9             >FLD:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 166+ 6EC9 52 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 166+ 6ECB             >                else
 166+ 6ECB ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 166+ 6ECB             >                endif           ; ok        // for other definitions it "points" the correct handler
 166+ 6ECB             >                // Use of "; ok" to suppress "warning[fwdref]"
 166+ 6ECB             >
 166+ 6ECB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 166+ 6ECB 32          >                db      50
 167+ 6ECC                              User_Def CSP        , "CSP"       , 52 // used to temporary store Stack-Pointer value
 167+ 6ECC             >                New_Def  CSP, "CSP", User_Ptr, is_normal
 167+ 6ECC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 167+ 6ECC             >
 167+ 6ECC             >                // dummy db directives used to calculate length of namec
 167+ 6ECC 43 53 50    >                db      "CSP"
 167+ 6ECF             >len_NFA         defl    $ - temp_NFA
 167+ 6ECF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 167+ 6ECC             >
 167+ 6ECC 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 167+ 6ECD 43 53 50    >                db      "CSP"               // name string in 7-bit ascii, but
 167+ 6ED0             >                org     $-1                 // alter last byte of Name just above to set
 167+ 6ECF D0          >                db      {b $} | END_BIT     // msb as name end
 167+ 6ED0             >
 167+ 6ED0 C3 6E       >                dw      last_NFA            // Link to previous definition Name
 167+ 6ED2             >CSP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 167+ 6ED2 52 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 167+ 6ED4             >                else
 167+ 6ED4 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 167+ 6ED4             >                endif           ; ok        // for other definitions it "points" the correct handler
 167+ 6ED4             >                // Use of "; ok" to suppress "warning[fwdref]"
 167+ 6ED4             >
 167+ 6ED4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 167+ 6ED4 34          >                db      52
 168+ 6ED5                              User_Def RSHARP     , "R#"        , 54 // location of editing cursor
 168+ 6ED5             >                New_Def  RSHARP, "R#", User_Ptr, is_normal
 168+ 6ED5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 168+ 6ED5             >
 168+ 6ED5             >                // dummy db directives used to calculate length of namec
 168+ 6ED5 52 23       >                db      "R#"
 168+ 6ED7             >len_NFA         defl    $ - temp_NFA
 168+ 6ED7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 168+ 6ED5             >
 168+ 6ED5 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 168+ 6ED6 52 23       >                db      "R#"               // name string in 7-bit ascii, but
 168+ 6ED8             >                org     $-1                 // alter last byte of Name just above to set
 168+ 6ED7 A3          >                db      {b $} | END_BIT     // msb as name end
 168+ 6ED8             >
 168+ 6ED8 CC 6E       >                dw      last_NFA            // Link to previous definition Name
 168+ 6EDA             >RSHARP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 168+ 6EDA 52 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 168+ 6EDC             >                else
 168+ 6EDC ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 168+ 6EDC             >                endif           ; ok        // for other definitions it "points" the correct handler
 168+ 6EDC             >                // Use of "; ok" to suppress "warning[fwdref]"
 168+ 6EDC             >
 168+ 6EDC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 168+ 6EDC 36          >                db      54
 169+ 6EDD                              User_Def HLD        , "HLD"       , 56 // last character during a number conversion output
 169+ 6EDD             >                New_Def  HLD, "HLD", User_Ptr, is_normal
 169+ 6EDD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 169+ 6EDD             >
 169+ 6EDD             >                // dummy db directives used to calculate length of namec
 169+ 6EDD 48 4C 44    >                db      "HLD"
 169+ 6EE0             >len_NFA         defl    $ - temp_NFA
 169+ 6EE0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 169+ 6EDD             >
 169+ 6EDD 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 169+ 6EDE 48 4C 44    >                db      "HLD"               // name string in 7-bit ascii, but
 169+ 6EE1             >                org     $-1                 // alter last byte of Name just above to set
 169+ 6EE0 C4          >                db      {b $} | END_BIT     // msb as name end
 169+ 6EE1             >
 169+ 6EE1 D5 6E       >                dw      last_NFA            // Link to previous definition Name
 169+ 6EE3             >HLD:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 169+ 6EE3 52 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 169+ 6EE5             >                else
 169+ 6EE5 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 169+ 6EE5             >                endif           ; ok        // for other definitions it "points" the correct handler
 169+ 6EE5             >                // Use of "; ok" to suppress "warning[fwdref]"
 169+ 6EE5             >
 169+ 6EE5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 169+ 6EE5 38          >                db      56
 170+ 6EE6                              User_Def USE        , "USE"       , 58 // address of last used block
 170+ 6EE6             >                New_Def  USE, "USE", User_Ptr, is_normal
 170+ 6EE6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 170+ 6EE6             >
 170+ 6EE6             >                // dummy db directives used to calculate length of namec
 170+ 6EE6 55 53 45    >                db      "USE"
 170+ 6EE9             >len_NFA         defl    $ - temp_NFA
 170+ 6EE9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 170+ 6EE6             >
 170+ 6EE6 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 170+ 6EE7 55 53 45    >                db      "USE"               // name string in 7-bit ascii, but
 170+ 6EEA             >                org     $-1                 // alter last byte of Name just above to set
 170+ 6EE9 C5          >                db      {b $} | END_BIT     // msb as name end
 170+ 6EEA             >
 170+ 6EEA DD 6E       >                dw      last_NFA            // Link to previous definition Name
 170+ 6EEC             >USE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 170+ 6EEC 52 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 170+ 6EEE             >                else
 170+ 6EEE ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 170+ 6EEE             >                endif           ; ok        // for other definitions it "points" the correct handler
 170+ 6EEE             >                // Use of "; ok" to suppress "warning[fwdref]"
 170+ 6EEE             >
 170+ 6EEE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 170+ 6EEE 3A          >                db      58
 171+ 6EEF                              User_Def PREV       , "PREV"      , 60 // address of previous used block
 171+ 6EEF             >                New_Def  PREV, "PREV", User_Ptr, is_normal
 171+ 6EEF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 171+ 6EEF             >
 171+ 6EEF             >                // dummy db directives used to calculate length of namec
 171+ 6EEF 50 52 45 56 >                db      "PREV"
 171+ 6EF3             >len_NFA         defl    $ - temp_NFA
 171+ 6EF3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 171+ 6EEF             >
 171+ 6EEF 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 171+ 6EF0 50 52 45 56 >                db      "PREV"               // name string in 7-bit ascii, but
 171+ 6EF4             >                org     $-1                 // alter last byte of Name just above to set
 171+ 6EF3 D6          >                db      {b $} | END_BIT     // msb as name end
 171+ 6EF4             >
 171+ 6EF4 E6 6E       >                dw      last_NFA            // Link to previous definition Name
 171+ 6EF6             >PREV:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 171+ 6EF6 52 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 171+ 6EF8             >                else
 171+ 6EF8 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 171+ 6EF8             >                endif           ; ok        // for other definitions it "points" the correct handler
 171+ 6EF8             >                // Use of "; ok" to suppress "warning[fwdref]"
 171+ 6EF8             >
 171+ 6EF8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 171+ 6EF8 3C          >                db      60
 172+ 6EF9                              User_Def LP         , "LP"        , 62 // line printer (not used)
 172+ 6EF9             >                New_Def  LP, "LP", User_Ptr, is_normal
 172+ 6EF9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 172+ 6EF9             >
 172+ 6EF9             >                // dummy db directives used to calculate length of namec
 172+ 6EF9 4C 50       >                db      "LP"
 172+ 6EFB             >len_NFA         defl    $ - temp_NFA
 172+ 6EFB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 172+ 6EF9             >
 172+ 6EF9 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 172+ 6EFA 4C 50       >                db      "LP"               // name string in 7-bit ascii, but
 172+ 6EFC             >                org     $-1                 // alter last byte of Name just above to set
 172+ 6EFB D0          >                db      {b $} | END_BIT     // msb as name end
 172+ 6EFC             >
 172+ 6EFC EF 6E       >                dw      last_NFA            // Link to previous definition Name
 172+ 6EFE             >LP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 172+ 6EFE 52 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 172+ 6F00             >                else
 172+ 6F00 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 172+ 6F00             >                endif           ; ok        // for other definitions it "points" the correct handler
 172+ 6F00             >                // Use of "; ok" to suppress "warning[fwdref]"
 172+ 6F00             >
 172+ 6F00             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 172+ 6F00 3E          >                db      62
 173+ 6F01                              User_Def PLACE      , "PLACE"     , 64 // number of digits after decimal point in output
 173+ 6F01             >                New_Def  PLACE, "PLACE", User_Ptr, is_normal
 173+ 6F01             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 173+ 6F01             >
 173+ 6F01             >                // dummy db directives used to calculate length of namec
 173+ 6F01 50 4C 41 43 >                db      "PLACE"
 173+ 6F05 45          >
 173+ 6F06             >len_NFA         defl    $ - temp_NFA
 173+ 6F06             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 173+ 6F01             >
 173+ 6F01 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 173+ 6F02 50 4C 41 43 >                db      "PLACE"               // name string in 7-bit ascii, but
 173+ 6F06 45          >
 173+ 6F07             >                org     $-1                 // alter last byte of Name just above to set
 173+ 6F06 C5          >                db      {b $} | END_BIT     // msb as name end
 173+ 6F07             >
 173+ 6F07 F9 6E       >                dw      last_NFA            // Link to previous definition Name
 173+ 6F09             >PLACE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 173+ 6F09 52 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 173+ 6F0B             >                else
 173+ 6F0B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 173+ 6F0B             >                endif           ; ok        // for other definitions it "points" the correct handler
 173+ 6F0B             >                // Use of "; ok" to suppress "warning[fwdref]"
 173+ 6F0B             >
 173+ 6F0B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 173+ 6F0B 40          >                db      64
 174+ 6F0C                              User_Def SOURCE_ID  , "SOURCE-ID" , 66 // data-stream number in INCLUDE and LOAD-
 174+ 6F0C             >                New_Def  SOURCE_ID, "SOURCE-ID", User_Ptr, is_normal
 174+ 6F0C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 174+ 6F0C             >
 174+ 6F0C             >                // dummy db directives used to calculate length of namec
 174+ 6F0C 53 4F 55 52 >                db      "SOURCE-ID"
 174+ 6F10 43 45 2D 49 >
 174+ 6F14 44          >
 174+ 6F15             >len_NFA         defl    $ - temp_NFA
 174+ 6F15             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 174+ 6F0C             >
 174+ 6F0C 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 174+ 6F0D 53 4F 55 52 >                db      "SOURCE-ID"               // name string in 7-bit ascii, but
 174+ 6F11 43 45 2D 49 >
 174+ 6F15 44          >
 174+ 6F16             >                org     $-1                 // alter last byte of Name just above to set
 174+ 6F15 C4          >                db      {b $} | END_BIT     // msb as name end
 174+ 6F16             >
 174+ 6F16 01 6F       >                dw      last_NFA            // Link to previous definition Name
 174+ 6F18             >SOURCE_ID:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 174+ 6F18 52 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 174+ 6F1A             >                else
 174+ 6F1A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 174+ 6F1A             >                endif           ; ok        // for other definitions it "points" the correct handler
 174+ 6F1A             >                // Use of "; ok" to suppress "warning[fwdref]"
 174+ 6F1A             >
 174+ 6F1A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 174+ 6F1A 42          >                db      66
 175+ 6F1B                              User_Def SPAN       , "SPAN"      , 68 // number of character of last EXPECT
 175+ 6F1B             >                New_Def  SPAN, "SPAN", User_Ptr, is_normal
 175+ 6F1B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 175+ 6F1B             >
 175+ 6F1B             >                // dummy db directives used to calculate length of namec
 175+ 6F1B 53 50 41 4E >                db      "SPAN"
 175+ 6F1F             >len_NFA         defl    $ - temp_NFA
 175+ 6F1F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 175+ 6F1B             >
 175+ 6F1B 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 175+ 6F1C 53 50 41 4E >                db      "SPAN"               // name string in 7-bit ascii, but
 175+ 6F20             >                org     $-1                 // alter last byte of Name just above to set
 175+ 6F1F CE          >                db      {b $} | END_BIT     // msb as name end
 175+ 6F20             >
 175+ 6F20 0C 6F       >                dw      last_NFA            // Link to previous definition Name
 175+ 6F22             >SPAN:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 175+ 6F22 52 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 175+ 6F24             >                else
 175+ 6F24 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 175+ 6F24             >                endif           ; ok        // for other definitions it "points" the correct handler
 175+ 6F24             >                // Use of "; ok" to suppress "warning[fwdref]"
 175+ 6F24             >
 175+ 6F24             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 175+ 6F24 44          >                db      68
 176+ 6F25                              User_Def HP         , "HP"        , 70 // heap-pointer address
 176+ 6F25             >                New_Def  HP, "HP", User_Ptr, is_normal
 176+ 6F25             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 176+ 6F25             >
 176+ 6F25             >                // dummy db directives used to calculate length of namec
 176+ 6F25 48 50       >                db      "HP"
 176+ 6F27             >len_NFA         defl    $ - temp_NFA
 176+ 6F27             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 176+ 6F25             >
 176+ 6F25 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 176+ 6F26 48 50       >                db      "HP"               // name string in 7-bit ascii, but
 176+ 6F28             >                org     $-1                 // alter last byte of Name just above to set
 176+ 6F27 D0          >                db      {b $} | END_BIT     // msb as name end
 176+ 6F28             >
 176+ 6F28 1B 6F       >                dw      last_NFA            // Link to previous definition Name
 176+ 6F2A             >HP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 176+ 6F2A 52 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 176+ 6F2C             >                else
 176+ 6F2C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 176+ 6F2C             >                endif           ; ok        // for other definitions it "points" the correct handler
 176+ 6F2C             >                // Use of "; ok" to suppress "warning[fwdref]"
 176+ 6F2C             >
 176+ 6F2C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 176+ 6F2C 46          >                db      70
 177+ 6F2D
 178+ 6F2D              //  ______________________________________________________________________
 179+ 6F2D              //
 180+ 6F2D              // here         -- a
 181+ 6F2D                              Colon_Def HERE, "HERE", is_normal
 181+ 6F2D             >                New_Def  HERE, "HERE", Enter_Ptr, is_normal ; ok
 181+ 6F2D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 181+ 6F2D             >
 181+ 6F2D             >                // dummy db directives used to calculate length of namec
 181+ 6F2D 48 45 52 45 >                db      "HERE"
 181+ 6F31             >len_NFA         defl    $ - temp_NFA
 181+ 6F31             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 181+ 6F2D             >
 181+ 6F2D 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 181+ 6F2E 48 45 52 45 >                db      "HERE"               // name string in 7-bit ascii, but
 181+ 6F32             >                org     $-1                 // alter last byte of Name just above to set
 181+ 6F31 C5          >                db      {b $} | END_BIT     // msb as name end
 181+ 6F32             >
 181+ 6F32 25 6F       >                dw      last_NFA            // Link to previous definition Name
 181+ 6F34             >HERE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 181+ 6F34 E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 181+ 6F36             >                else
 181+ 6F36 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 181+ 6F36             >                endif           ; ok        // for other definitions it "points" the correct handler
 181+ 6F36             >                // Use of "; ok" to suppress "warning[fwdref]"
 181+ 6F36             >
 181+ 6F36             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 182+ 6F36 20 6E F6 6B                  dw      DP, FETCH               // dp @
 183+ 6F3A BD 69                        dw      EXIT                    // ;
 184+ 6F3C
 185+ 6F3C              //  ______________________________________________________________________
 186+ 6F3C              //
 187+ 6F3C              // allot        n --
 188+ 6F3C                              Colon_Def ALLOT, "ALLOT", is_normal
 188+ 6F3C             >                New_Def  ALLOT, "ALLOT", Enter_Ptr, is_normal ; ok
 188+ 6F3C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 188+ 6F3C             >
 188+ 6F3C             >                // dummy db directives used to calculate length of namec
 188+ 6F3C 41 4C 4C 4F >                db      "ALLOT"
 188+ 6F40 54          >
 188+ 6F41             >len_NFA         defl    $ - temp_NFA
 188+ 6F41             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 188+ 6F3C             >
 188+ 6F3C 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 188+ 6F3D 41 4C 4C 4F >                db      "ALLOT"               // name string in 7-bit ascii, but
 188+ 6F41 54          >
 188+ 6F42             >                org     $-1                 // alter last byte of Name just above to set
 188+ 6F41 D4          >                db      {b $} | END_BIT     // msb as name end
 188+ 6F42             >
 188+ 6F42 2D 6F       >                dw      last_NFA            // Link to previous definition Name
 188+ 6F44             >ALLOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 188+ 6F44 E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 188+ 6F46             >                else
 188+ 6F46 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 188+ 6F46             >                endif           ; ok        // for other definitions it "points" the correct handler
 188+ 6F46             >                // Use of "; ok" to suppress "warning[fwdref]"
 188+ 6F46             >
 188+ 6F46             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 189+ 6F46 20 6E D3 6B                  dw      DP,  PLUSSTORE          // dp +!
 190+ 6F4A BD 69                        dw      EXIT                    // ;
 191+ 6F4C
 192+ 6F4C              //  ______________________________________________________________________
 193+ 6F4C              //
 194+ 6F4C              // comma        n --
 195+ 6F4C                              Colon_Def COMMA, ",", is_normal
 195+ 6F4C             >                New_Def  COMMA, ",", Enter_Ptr, is_normal ; ok
 195+ 6F4C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 195+ 6F4C             >
 195+ 6F4C             >                // dummy db directives used to calculate length of namec
 195+ 6F4C 2C          >                db      ","
 195+ 6F4D             >len_NFA         defl    $ - temp_NFA
 195+ 6F4D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 195+ 6F4C             >
 195+ 6F4C 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 195+ 6F4D 2C          >                db      ","               // name string in 7-bit ascii, but
 195+ 6F4E             >                org     $-1                 // alter last byte of Name just above to set
 195+ 6F4D AC          >                db      {b $} | END_BIT     // msb as name end
 195+ 6F4E             >
 195+ 6F4E 3C 6F       >                dw      last_NFA            // Link to previous definition Name
 195+ 6F50             >COMMA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 195+ 6F50 E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 195+ 6F52             >                else
 195+ 6F52 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 195+ 6F52             >                endif           ; ok        // for other definitions it "points" the correct handler
 195+ 6F52             >                // Use of "; ok" to suppress "warning[fwdref]"
 195+ 6F52             >
 195+ 6F52             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 196+ 6F52 34 6F 03 6C                  dw      HERE, STORE             // here !
 197+ 6F56 72 6D 44 6F                  dw      TWO, ALLOT              // 2 allot
 198+ 6F5A BD 69                        dw      EXIT                    // ;
 199+ 6F5C
 200+ 6F5C              //  ______________________________________________________________________
 201+ 6F5C              //
 202+ 6F5C              // ccomma       c --
 203+ 6F5C                              Colon_Def CCOMMA, "C,", is_normal
 203+ 6F5C             >                New_Def  CCOMMA, "C,", Enter_Ptr, is_normal ; ok
 203+ 6F5C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 203+ 6F5C             >
 203+ 6F5C             >                // dummy db directives used to calculate length of namec
 203+ 6F5C 43 2C       >                db      "C,"
 203+ 6F5E             >len_NFA         defl    $ - temp_NFA
 203+ 6F5E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 203+ 6F5C             >
 203+ 6F5C 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 203+ 6F5D 43 2C       >                db      "C,"               // name string in 7-bit ascii, but
 203+ 6F5F             >                org     $-1                 // alter last byte of Name just above to set
 203+ 6F5E AC          >                db      {b $} | END_BIT     // msb as name end
 203+ 6F5F             >
 203+ 6F5F 4C 6F       >                dw      last_NFA            // Link to previous definition Name
 203+ 6F61             >CCOMMA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 203+ 6F61 E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 203+ 6F63             >                else
 203+ 6F63 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 203+ 6F63             >                endif           ; ok        // for other definitions it "points" the correct handler
 203+ 6F63             >                // Use of "; ok" to suppress "warning[fwdref]"
 203+ 6F63             >
 203+ 6F63             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 204+ 6F63 34 6F 1F 6C                  dw      HERE, CSTORE            // here c!
 205+ 6F67 6A 6D 44 6F                  dw      ONE, ALLOT              // 1 allot
 206+ 6F6B BD 69                        dw      EXIT                    // ;
 207+ 6F6D
 208+ 6F6D              //  ______________________________________________________________________
 209+ 6F6D              //
 210+ 6F6D              // s->d         n -- d
 211+ 6F6D              // converts a single precision integer in a double precision
 212+ 6F6D                              New_Def S_TO_D, "S->D", is_code, is_normal
 212+ 6F6D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 212+ 6F6D             >
 212+ 6F6D             >                // dummy db directives used to calculate length of namec
 212+ 6F6D 53 2D 3E 44 >                db      "S->D"
 212+ 6F71             >len_NFA         defl    $ - temp_NFA
 212+ 6F71             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 212+ 6F6D             >
 212+ 6F6D 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 212+ 6F6E 53 2D 3E 44 >                db      "S->D"               // name string in 7-bit ascii, but
 212+ 6F72             >                org     $-1                 // alter last byte of Name just above to set
 212+ 6F71 C4          >                db      {b $} | END_BIT     // msb as name end
 212+ 6F72             >
 212+ 6F72 5C 6F       >                dw      last_NFA            // Link to previous definition Name
 212+ 6F74             >S_TO_D:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 212+ 6F74 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 212+ 6F74             >                else
 212+ 6F74 76 6F       >                dw      $ + 2   ; ok        // is pointed by CFA
 212+ 6F76             >                endif           ; ok        // for other definitions it "points" the correct handler
 212+ 6F76             >                // Use of "; ok" to suppress "warning[fwdref]"
 212+ 6F76             >
 212+ 6F76             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 213+ 6F76 D1                           pop     de
 214+ 6F77 21 00 00                     ld      hl, 0
 215+ 6F7A 7A                           ld      a, d
 216+ 6F7B E6 80                        and     $80
 217+ 6F7D 28 01                        jr      z, S_to_D_Skip
 218+ 6F7F 2B                           dec     hl                  // $FFFF
 219+ 6F80              S_to_D_Skip:
 220+ 6F80 D5                           push    de
 221+ 6F81 E5                           push    hl
 222+ 6F82                              next
 222+ 6F82 DD E9       >                jp      (ix)
 223+ 6F84
 224+ 6F84              //  ______________________________________________________________________
 225+ 6F84              //
 226+ 6F84              // -            n1 n2 -- n3
 227+ 6F84              // subtraction
 228+ 6F84                              New_Def SUBTRACT, "-", is_code, is_normal
 228+ 6F84             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 228+ 6F84             >
 228+ 6F84             >                // dummy db directives used to calculate length of namec
 228+ 6F84 2D          >                db      "-"
 228+ 6F85             >len_NFA         defl    $ - temp_NFA
 228+ 6F85             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 228+ 6F84             >
 228+ 6F84 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 228+ 6F85 2D          >                db      "-"               // name string in 7-bit ascii, but
 228+ 6F86             >                org     $-1                 // alter last byte of Name just above to set
 228+ 6F85 AD          >                db      {b $} | END_BIT     // msb as name end
 228+ 6F86             >
 228+ 6F86 6D 6F       >                dw      last_NFA            // Link to previous definition Name
 228+ 6F88             >SUBTRACT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 228+ 6F88 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 228+ 6F88             >                else
 228+ 6F88 8A 6F       >                dw      $ + 2   ; ok        // is pointed by CFA
 228+ 6F8A             >                endif           ; ok        // for other definitions it "points" the correct handler
 228+ 6F8A             >                // Use of "; ok" to suppress "warning[fwdref]"
 228+ 6F8A             >
 228+ 6F8A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 229+ 6F8A D1                           pop     de
 230+ 6F8B E1                           pop     hl
 231+ 6F8C A7                           and     a
 232+ 6F8D ED 52                        sbc     hl, de
 233+ 6F8F
 234+ 6F8F                              psh1
 234+ 6F8F E5          >                push    hl
 234+ 6F90 DD E9       >                jp      (ix)
 235+ 6F92
 236+ 6F92              //  ______________________________________________________________________
 237+ 6F92              //
 238+ 6F92              // =            n1 n2 -- n3
 239+ 6F92              // equals
 240+ 6F92                              Colon_Def EQUALS, "=", is_normal
 240+ 6F92             >                New_Def  EQUALS, "=", Enter_Ptr, is_normal ; ok
 240+ 6F92             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 240+ 6F92             >
 240+ 6F92             >                // dummy db directives used to calculate length of namec
 240+ 6F92 3D          >                db      "="
 240+ 6F93             >len_NFA         defl    $ - temp_NFA
 240+ 6F93             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 240+ 6F92             >
 240+ 6F92 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 240+ 6F93 3D          >                db      "="               // name string in 7-bit ascii, but
 240+ 6F94             >                org     $-1                 // alter last byte of Name just above to set
 240+ 6F93 BD          >                db      {b $} | END_BIT     // msb as name end
 240+ 6F94             >
 240+ 6F94 84 6F       >                dw      last_NFA            // Link to previous definition Name
 240+ 6F96             >EQUALS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 240+ 6F96 E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 240+ 6F98             >                else
 240+ 6F98 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 240+ 6F98             >                endif           ; ok        // for other definitions it "points" the correct handler
 240+ 6F98             >                // Use of "; ok" to suppress "warning[fwdref]"
 240+ 6F98             >
 240+ 6F98             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 241+ 6F98 88 6F 14 6A                  dw      SUBTRACT, ZEQUAL        // - 0=
 242+ 6F9C BD 69                        dw      EXIT                    // ;
 243+ 6F9E
 244+ 6F9E              //  ______________________________________________________________________
 245+ 6F9E              //
 246+ 6F9E              // u<           u1 u2 -- u3
 247+ 6F9E              // unsigned less-than
 248+ 6F9E                              New_Def ULESS, "U<", is_code, is_normal
 248+ 6F9E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 248+ 6F9E             >
 248+ 6F9E             >                // dummy db directives used to calculate length of namec
 248+ 6F9E 55 3C       >                db      "U<"
 248+ 6FA0             >len_NFA         defl    $ - temp_NFA
 248+ 6FA0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 248+ 6F9E             >
 248+ 6F9E 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 248+ 6F9F 55 3C       >                db      "U<"               // name string in 7-bit ascii, but
 248+ 6FA1             >                org     $-1                 // alter last byte of Name just above to set
 248+ 6FA0 BC          >                db      {b $} | END_BIT     // msb as name end
 248+ 6FA1             >
 248+ 6FA1 92 6F       >                dw      last_NFA            // Link to previous definition Name
 248+ 6FA3             >ULESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 248+ 6FA3 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 248+ 6FA3             >                else
 248+ 6FA3 A5 6F       >                dw      $ + 2   ; ok        // is pointed by CFA
 248+ 6FA5             >                endif           ; ok        // for other definitions it "points" the correct handler
 248+ 6FA5             >                // Use of "; ok" to suppress "warning[fwdref]"
 248+ 6FA5             >
 248+ 6FA5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 249+ 6FA5 D1                           pop     de
 250+ 6FA6 E1                           pop     hl
 251+ 6FA7 A7                           and     a
 252+ 6FA8 ED 52                        sbc     hl, de
 253+ 6FAA 21 01 00                     ld      hl, 1
 254+ 6FAD 38 01                        jr      c, ULess_Skip
 255+ 6FAF 2D                               dec     l
 256+ 6FB0              ULess_Skip:
 257+ 6FB0
 258+ 6FB0                              psh1
 258+ 6FB0 E5          >                push    hl
 258+ 6FB1 DD E9       >                jp      (ix)
 259+ 6FB3
 260+ 6FB3              //  ______________________________________________________________________
 261+ 6FB3              //
 262+ 6FB3              // <           n1 n2 -- n3
 263+ 6FB3              // less-than
 264+ 6FB3                              New_Def LESS, "<", is_code, is_normal
 264+ 6FB3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 264+ 6FB3             >
 264+ 6FB3             >                // dummy db directives used to calculate length of namec
 264+ 6FB3 3C          >                db      "<"
 264+ 6FB4             >len_NFA         defl    $ - temp_NFA
 264+ 6FB4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 264+ 6FB3             >
 264+ 6FB3 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 264+ 6FB4 3C          >                db      "<"               // name string in 7-bit ascii, but
 264+ 6FB5             >                org     $-1                 // alter last byte of Name just above to set
 264+ 6FB4 BC          >                db      {b $} | END_BIT     // msb as name end
 264+ 6FB5             >
 264+ 6FB5 9E 6F       >                dw      last_NFA            // Link to previous definition Name
 264+ 6FB7             >LESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 264+ 6FB7 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 264+ 6FB7             >                else
 264+ 6FB7 B9 6F       >                dw      $ + 2   ; ok        // is pointed by CFA
 264+ 6FB9             >                endif           ; ok        // for other definitions it "points" the correct handler
 264+ 6FB9             >                // Use of "; ok" to suppress "warning[fwdref]"
 264+ 6FB9             >
 264+ 6FB9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 265+ 6FB9 D1                           pop     de
 266+ 6FBA E1                           pop     hl
 267+ 6FBB 7C                           ld      a, h
 268+ 6FBC EE 80                        xor     $80
 269+ 6FBE 67                           ld      h, a
 270+ 6FBF 7A                           ld      a, d
 271+ 6FC0 EE 80                        xor     $80
 272+ 6FC2 57                           ld      d, a
 273+ 6FC3 A7                           and     a
 274+ 6FC4 ED 52                        sbc     hl, de
 275+ 6FC6 21 01 00                     ld      hl, 1
 276+ 6FC9 38 01                        jr      c, Less_Skip
 277+ 6FCB 2D                               dec     l
 278+ 6FCC              Less_Skip:
 279+ 6FCC
 280+ 6FCC                              psh1
 280+ 6FCC E5          >                push    hl
 280+ 6FCD DD E9       >                jp      (ix)
 281+ 6FCF
 282+ 6FCF              //  ______________________________________________________________________
 283+ 6FCF              //
 284+ 6FCF              // >            n1 n2 -- n3
 285+ 6FCF              // greater than
 286+ 6FCF                              Colon_Def GREATER, ">", is_normal
 286+ 6FCF             >                New_Def  GREATER, ">", Enter_Ptr, is_normal ; ok
 286+ 6FCF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 286+ 6FCF             >
 286+ 6FCF             >                // dummy db directives used to calculate length of namec
 286+ 6FCF 3E          >                db      ">"
 286+ 6FD0             >len_NFA         defl    $ - temp_NFA
 286+ 6FD0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 286+ 6FCF             >
 286+ 6FCF 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 286+ 6FD0 3E          >                db      ">"               // name string in 7-bit ascii, but
 286+ 6FD1             >                org     $-1                 // alter last byte of Name just above to set
 286+ 6FD0 BE          >                db      {b $} | END_BIT     // msb as name end
 286+ 6FD1             >
 286+ 6FD1 B3 6F       >                dw      last_NFA            // Link to previous definition Name
 286+ 6FD3             >GREATER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 286+ 6FD3 E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 286+ 6FD5             >                else
 286+ 6FD5 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 286+ 6FD5             >                endif           ; ok        // for other definitions it "points" the correct handler
 286+ 6FD5             >                // Use of "; ok" to suppress "warning[fwdref]"
 286+ 6FD5             >
 286+ 6FD5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 287+ 6FD5 25 6B B7 6F                  dw      SWAP, LESS              // swap <
 288+ 6FD9 BD 69                        dw      EXIT                    // ;
 289+ 6FDB              //  ______________________________________________________________________
 290+ 6FDB              //
 291+ 6FDB              // min          n1 n2 -- n3
 292+ 6FDB              // minimum between n1 and n2
 293+ 6FDB                              Colon_Def MIN, "MIN" , is_normal
 293+ 6FDB             >                New_Def  MIN, "MIN", Enter_Ptr, is_normal ; ok
 293+ 6FDB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 293+ 6FDB             >
 293+ 6FDB             >                // dummy db directives used to calculate length of namec
 293+ 6FDB 4D 49 4E    >                db      "MIN"
 293+ 6FDE             >len_NFA         defl    $ - temp_NFA
 293+ 6FDE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 293+ 6FDB             >
 293+ 6FDB 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 293+ 6FDC 4D 49 4E    >                db      "MIN"               // name string in 7-bit ascii, but
 293+ 6FDF             >                org     $-1                 // alter last byte of Name just above to set
 293+ 6FDE CE          >                db      {b $} | END_BIT     // msb as name end
 293+ 6FDF             >
 293+ 6FDF CF 6F       >                dw      last_NFA            // Link to previous definition Name
 293+ 6FE1             >MIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 293+ 6FE1 E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 293+ 6FE3             >                else
 293+ 6FE3 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 293+ 6FE3             >                endif           ; ok        // for other definitions it "points" the correct handler
 293+ 6FE3             >                // Use of "; ok" to suppress "warning[fwdref]"
 293+ 6FE3             >
 293+ 6FE3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 294+ 6FE3 9C 6B                        dw      TWO_DUP                 // 2dup
 295+ 6FE5 D3 6F                        dw      GREATER                 // >
 296+ 6FE7 7D 64                        dw      ZBRANCH
 297+ 6FE9 04 00                        dw      Min_Skip - $   // if
 298+ 6FEB 25 6B                        dw          SWAP                //      swap
 299+ 6FED              Min_Skip:                                       // endif
 300+ 6FED FD 6A                        dw      DROP                    // drop
 301+ 6FEF BD 69                        dw      EXIT                    // ;
 302+ 6FF1
 303+ 6FF1              //  ______________________________________________________________________
 304+ 6FF1              //
 305+ 6FF1              // max          n1 n2 -- n3
 306+ 6FF1              // maximum between n1 and n2
 307+ 6FF1                              Colon_Def MAX, "MAX", is_normal
 307+ 6FF1             >                New_Def  MAX, "MAX", Enter_Ptr, is_normal ; ok
 307+ 6FF1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 307+ 6FF1             >
 307+ 6FF1             >                // dummy db directives used to calculate length of namec
 307+ 6FF1 4D 41 58    >                db      "MAX"
 307+ 6FF4             >len_NFA         defl    $ - temp_NFA
 307+ 6FF4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 307+ 6FF1             >
 307+ 6FF1 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 307+ 6FF2 4D 41 58    >                db      "MAX"               // name string in 7-bit ascii, but
 307+ 6FF5             >                org     $-1                 // alter last byte of Name just above to set
 307+ 6FF4 D8          >                db      {b $} | END_BIT     // msb as name end
 307+ 6FF5             >
 307+ 6FF5 DB 6F       >                dw      last_NFA            // Link to previous definition Name
 307+ 6FF7             >MAX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 307+ 6FF7 E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 307+ 6FF9             >                else
 307+ 6FF9 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 307+ 6FF9             >                endif           ; ok        // for other definitions it "points" the correct handler
 307+ 6FF9             >                // Use of "; ok" to suppress "warning[fwdref]"
 307+ 6FF9             >
 307+ 6FF9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 308+ 6FF9 9C 6B                        dw      TWO_DUP                 // 2dup
 309+ 6FFB B7 6F                        dw      LESS                    // <
 310+ 6FFD 7D 64                        dw      ZBRANCH
 311+ 6FFF 04 00                        dw      Max_Skip - $   // if
 312+ 7001 25 6B                        dw          SWAP                //      swap
 313+ 7003              Max_Skip:                                       // endif
 314+ 7003 FD 6A                        dw      DROP                    // drop
 315+ 7005 BD 69                        dw      EXIT                    // ;
 316+ 7007
 317+ 7007              //  ______________________________________________________________________
 318+ 7007              //
 319+ 7007              // -dup         n -- 0 | n n
 320+ 7007              // duplicate if not zero
 321+ 7007                              New_Def LDUP, "-DUP", is_code, is_normal
 321+ 7007             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 321+ 7007             >
 321+ 7007             >                // dummy db directives used to calculate length of namec
 321+ 7007 2D 44 55 50 >                db      "-DUP"
 321+ 700B             >len_NFA         defl    $ - temp_NFA
 321+ 700B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 321+ 7007             >
 321+ 7007 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 321+ 7008 2D 44 55 50 >                db      "-DUP"               // name string in 7-bit ascii, but
 321+ 700C             >                org     $-1                 // alter last byte of Name just above to set
 321+ 700B D0          >                db      {b $} | END_BIT     // msb as name end
 321+ 700C             >
 321+ 700C F1 6F       >                dw      last_NFA            // Link to previous definition Name
 321+ 700E             >LDUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 321+ 700E ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 321+ 700E             >                else
 321+ 700E 10 70       >                dw      $ + 2   ; ok        // is pointed by CFA
 321+ 7010             >                endif           ; ok        // for other definitions it "points" the correct handler
 321+ 7010             >                // Use of "; ok" to suppress "warning[fwdref]"
 321+ 7010             >
 321+ 7010             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 322+ 7010              QDup_Ptr:
 323+ 7010 E1                           pop     hl
 324+ 7011 7C                           ld      a, h
 325+ 7012 B5                           or      l
 326+ 7013 28 01                        jr      z, QDup_Skip
 327+ 7015 E5                               push    hl
 328+ 7016              QDup_Skip:
 329+ 7016                              psh1
 329+ 7016 E5          >                push    hl
 329+ 7017 DD E9       >                jp      (ix)
 330+ 7019
 331+ 7019              //  ______________________________________________________________________
 332+ 7019              //
 333+ 7019              // ?dup         n -- 0 | n n
 334+ 7019              // duplicate if not zero
 335+ 7019                              New_Def QDUP, "?DUP", QDup_Ptr, is_normal
 335+ 7019             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 335+ 7019             >
 335+ 7019             >                // dummy db directives used to calculate length of namec
 335+ 7019 3F 44 55 50 >                db      "?DUP"
 335+ 701D             >len_NFA         defl    $ - temp_NFA
 335+ 701D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 335+ 7019             >
 335+ 7019 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 335+ 701A 3F 44 55 50 >                db      "?DUP"               // name string in 7-bit ascii, but
 335+ 701E             >                org     $-1                 // alter last byte of Name just above to set
 335+ 701D D0          >                db      {b $} | END_BIT     // msb as name end
 335+ 701E             >
 335+ 701E 07 70       >                dw      last_NFA            // Link to previous definition Name
 335+ 7020             >QDUP:          if QDup_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 335+ 7020 10 70       >                dw      QDup_Ptr ; ok        // for primitive definitions  actual code
 335+ 7022             >                else
 335+ 7022 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 335+ 7022             >                endif           ; ok        // for other definitions it "points" the correct handler
 335+ 7022             >                // Use of "; ok" to suppress "warning[fwdref]"
 335+ 7022             >
 335+ 7022             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 336+ 7022
 337+ 7022              //  ______________________________________________________________________
 338+ 7022              //
 339+ 7022              // emit         c --
 340+ 7022                              Colon_Def EMIT, "EMIT", is_normal
 340+ 7022             >                New_Def  EMIT, "EMIT", Enter_Ptr, is_normal ; ok
 340+ 7022             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 340+ 7022             >
 340+ 7022             >                // dummy db directives used to calculate length of namec
 340+ 7022 45 4D 49 54 >                db      "EMIT"
 340+ 7026             >len_NFA         defl    $ - temp_NFA
 340+ 7026             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 340+ 7022             >
 340+ 7022 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 340+ 7023 45 4D 49 54 >                db      "EMIT"               // name string in 7-bit ascii, but
 340+ 7027             >                org     $-1                 // alter last byte of Name just above to set
 340+ 7026 D4          >                db      {b $} | END_BIT     // msb as name end
 340+ 7027             >
 340+ 7027 19 70       >                dw      last_NFA            // Link to previous definition Name
 340+ 7029             >EMIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 340+ 7029 E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 340+ 702B             >                else
 340+ 702B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 340+ 702B             >                endif           ; ok        // for other definitions it "points" the correct handler
 340+ 702B             >                // Use of "; ok" to suppress "warning[fwdref]"
 340+ 702B             >
 340+ 702B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 341+ 702B B9 66                        dw      C_EMIT                      // (?emit)
 342+ 702D 0E 70                        dw      LDUP                        // ?dup
 343+ 702F                                                                  // if
 344+ 702F 7D 64                        dw      ZBRANCH
 345+ 7031 0A 00                        dw      Emit_Skip - $
 346+ 7033 85 66                        dw          EMITC                   //      emitc
 347+ 7035 6A 6D                        dw          ONE                     //      1
 348+ 7037 73 6E D3 6B                  dw          OUT, PLUSSTORE        //      out +!
 349+ 703B              Emit_Skip:                                          // endif
 350+ 703B BD 69                        dw      EXIT                        // ;
 351+ 703D
 352+ 703D              //  ______________________________________________________________________
 353+ 703D              //
 354+ 703D              // space        --
 355+ 703D                              Colon_Def SPACE, "SPACE", is_normal
 355+ 703D             >                New_Def  SPACE, "SPACE", Enter_Ptr, is_normal ; ok
 355+ 703D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 355+ 703D             >
 355+ 703D             >                // dummy db directives used to calculate length of namec
 355+ 703D 53 50 41 43 >                db      "SPACE"
 355+ 7041 45          >
 355+ 7042             >len_NFA         defl    $ - temp_NFA
 355+ 7042             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 355+ 703D             >
 355+ 703D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 355+ 703E 53 50 41 43 >                db      "SPACE"               // name string in 7-bit ascii, but
 355+ 7042 45          >
 355+ 7043             >                org     $-1                 // alter last byte of Name just above to set
 355+ 7042 C5          >                db      {b $} | END_BIT     // msb as name end
 355+ 7043             >
 355+ 7043 22 70       >                dw      last_NFA            // Link to previous definition Name
 355+ 7045             >SPACE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 355+ 7045 E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 355+ 7047             >                else
 355+ 7047 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 355+ 7047             >                endif           ; ok        // for other definitions it "points" the correct handler
 355+ 7047             >                // Use of "; ok" to suppress "warning[fwdref]"
 355+ 7047             >
 355+ 7047             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 356+ 7047 8C 6D 29 70                  dw      BL, EMIT                // bl emit
 357+ 704B BD 69                        dw      EXIT                    // ;
 358+ 704D
 359+ 704D              //  ______________________________________________________________________
 360+ 704D              //
 361+ 704D              // traverse     a n -- a
 362+ 704D              // A dictionary entry is structured as follows
 363+ 704D              // NFA: +0   one byte of word-length (n<32) | some flags (immediate, smudge) | $80
 364+ 704D              //      +1   word name, last character is toggled with $80
 365+ 704D              // LFA: +1+n link to NFA ofprevious  dictionary entry.
 366+ 704D              // CFA: +3+n routine address. Colon definitions here have pointer to code
 367+ 704D              // PFA: +5+n "is_code", definitions have no PFA.
 368+ 704D              //
 369+ 704D                              Colon_Def TRAVERSE, "TRAVERSE", is_normal
 369+ 704D             >                New_Def  TRAVERSE, "TRAVERSE", Enter_Ptr, is_normal ; ok
 369+ 704D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 369+ 704D             >
 369+ 704D             >                // dummy db directives used to calculate length of namec
 369+ 704D 54 52 41 56 >                db      "TRAVERSE"
 369+ 7051 45 52 53 45 >
 369+ 7055             >len_NFA         defl    $ - temp_NFA
 369+ 7055             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 369+ 704D             >
 369+ 704D 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 369+ 704E 54 52 41 56 >                db      "TRAVERSE"               // name string in 7-bit ascii, but
 369+ 7052 45 52 53 45 >
 369+ 7056             >                org     $-1                 // alter last byte of Name just above to set
 369+ 7055 C5          >                db      {b $} | END_BIT     // msb as name end
 369+ 7056             >
 369+ 7056 3D 70       >                dw      last_NFA            // Link to previous definition Name
 369+ 7058             >TRAVERSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 369+ 7058 E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 369+ 705A             >                else
 369+ 705A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 369+ 705A             >                endif           ; ok        // for other definitions it "points" the correct handler
 369+ 705A             >                // Use of "; ok" to suppress "warning[fwdref]"
 369+ 705A             >
 369+ 705A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 370+ 705A 25 6B                        dw      SWAP                    // swap
 371+ 705C              Traverse_Begin:                                 // begin
 372+ 705C ED 6A 4F 6A                  dw          OVER, PLUS          //      over +
 373+ 7060 43 64 7F 00                  dw          LIT, 127            //      127
 374+ 7064 ED 6A 11 6C                  dw          OVER, CFETCH        //      over @
 375+ 7068 B7 6F                        dw          LESS                //      <
 376+ 706A                                                              // until
 377+ 706A 7D 64                        dw      ZBRANCH
 378+ 706C F0 FF                        dw      Traverse_Begin - $
 379+ 706E 08 6B                        dw      NIP                     //  nip
 380+ 7070 BD 69                        dw      EXIT                    //  ;
 381+ 7072
 382+ 7072              //  ______________________________________________________________________
 383+ 7072              //
 384+ 7072              // latest       -- nfa
 385+ 7072                              Colon_Def LATEST, "LATEST", is_normal
 385+ 7072             >                New_Def  LATEST, "LATEST", Enter_Ptr, is_normal ; ok
 385+ 7072             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 385+ 7072             >
 385+ 7072             >                // dummy db directives used to calculate length of namec
 385+ 7072 4C 41 54 45 >                db      "LATEST"
 385+ 7076 53 54       >
 385+ 7078             >len_NFA         defl    $ - temp_NFA
 385+ 7078             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 385+ 7072             >
 385+ 7072 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 385+ 7073 4C 41 54 45 >                db      "LATEST"               // name string in 7-bit ascii, but
 385+ 7077 53 54       >
 385+ 7079             >                org     $-1                 // alter last byte of Name just above to set
 385+ 7078 D4          >                db      {b $} | END_BIT     // msb as name end
 385+ 7079             >
 385+ 7079 4D 70       >                dw      last_NFA            // Link to previous definition Name
 385+ 707B             >LATEST:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 385+ 707B E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 385+ 707D             >                else
 385+ 707D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 385+ 707D             >                endif           ; ok        // for other definitions it "points" the correct handler
 385+ 707D             >                // Use of "; ok" to suppress "warning[fwdref]"
 385+ 707D             >
 385+ 707D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 386+ 707D A2 6E                        dw      CURRENT                 // current
 387+ 707F F6 6B F6 6B                  dw      FETCH, FETCH            // @ @
 388+ 7083 BD 69                        dw      EXIT                    // ;
 389+ 7085
 390+ 7085              //  ______________________________________________________________________
 391+ 7085              //
 392+ 7085              // lfa          pfa -- lfa
 393+ 7085                              Colon_Def LFA, "LFA", is_normal
 393+ 7085             >                New_Def  LFA, "LFA", Enter_Ptr, is_normal ; ok
 393+ 7085             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 393+ 7085             >
 393+ 7085             >                // dummy db directives used to calculate length of namec
 393+ 7085 4C 46 41    >                db      "LFA"
 393+ 7088             >len_NFA         defl    $ - temp_NFA
 393+ 7088             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 393+ 7085             >
 393+ 7085 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 393+ 7086 4C 46 41    >                db      "LFA"               // name string in 7-bit ascii, but
 393+ 7089             >                org     $-1                 // alter last byte of Name just above to set
 393+ 7088 C1          >                db      {b $} | END_BIT     // msb as name end
 393+ 7089             >
 393+ 7089 72 70       >                dw      last_NFA            // Link to previous definition Name
 393+ 708B             >LFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 393+ 708B E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 393+ 708D             >                else
 393+ 708D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 393+ 708D             >                endif           ; ok        // for other definitions it "points" the correct handler
 393+ 708D             >                // Use of "; ok" to suppress "warning[fwdref]"
 393+ 708D             >
 393+ 708D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 394+ 708D AA 6A                        dw      CELL_MINUS              // cell-
 395+ 708F AA 6A                        dw      CELL_MINUS              // cell-
 396+ 7091 BD 69                        dw      EXIT                    // ;
 397+ 7093
 398+ 7093              //  ______________________________________________________________________
 399+ 7093              //
 400+ 7093              // cfa          pfa -- cfa
 401+ 7093                              Colon_Def CFA, "CFA", is_normal
 401+ 7093             >                New_Def  CFA, "CFA", Enter_Ptr, is_normal ; ok
 401+ 7093             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 401+ 7093             >
 401+ 7093             >                // dummy db directives used to calculate length of namec
 401+ 7093 43 46 41    >                db      "CFA"
 401+ 7096             >len_NFA         defl    $ - temp_NFA
 401+ 7096             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 401+ 7093             >
 401+ 7093 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 401+ 7094 43 46 41    >                db      "CFA"               // name string in 7-bit ascii, but
 401+ 7097             >                org     $-1                 // alter last byte of Name just above to set
 401+ 7096 C1          >                db      {b $} | END_BIT     // msb as name end
 401+ 7097             >
 401+ 7097 85 70       >                dw      last_NFA            // Link to previous definition Name
 401+ 7099             >CFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 401+ 7099 E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 401+ 709B             >                else
 401+ 709B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 401+ 709B             >                endif           ; ok        // for other definitions it "points" the correct handler
 401+ 709B             >                // Use of "; ok" to suppress "warning[fwdref]"
 401+ 709B             >
 401+ 709B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 402+ 709B AA 6A                        dw      CELL_MINUS              // cell-
 403+ 709D BD 69                        dw      EXIT                    // ;
 404+ 709F
 405+ 709F              //  ______________________________________________________________________
 406+ 709F              //
 407+ 709F              // nfa          pfa -- nfa
 408+ 709F                              Colon_Def NFA, "NFA", is_normal
 408+ 709F             >                New_Def  NFA, "NFA", Enter_Ptr, is_normal ; ok
 408+ 709F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 408+ 709F             >
 408+ 709F             >                // dummy db directives used to calculate length of namec
 408+ 709F 4E 46 41    >                db      "NFA"
 408+ 70A2             >len_NFA         defl    $ - temp_NFA
 408+ 70A2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 408+ 709F             >
 408+ 709F 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 408+ 70A0 4E 46 41    >                db      "NFA"               // name string in 7-bit ascii, but
 408+ 70A3             >                org     $-1                 // alter last byte of Name just above to set
 408+ 70A2 C1          >                db      {b $} | END_BIT     // msb as name end
 408+ 70A3             >
 408+ 70A3 93 70       >                dw      last_NFA            // Link to previous definition Name
 408+ 70A5             >NFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 408+ 70A5 E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 408+ 70A7             >                else
 408+ 70A7 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 408+ 70A7             >                endif           ; ok        // for other definitions it "points" the correct handler
 408+ 70A7             >                // Use of "; ok" to suppress "warning[fwdref]"
 408+ 70A7             >
 408+ 70A7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 409+ 70A7 43 64 05 00                  dw      LIT, 5                  // 5
 410+ 70AB 88 6F                        dw      SUBTRACT                // -
 411+ 70AD 83 6D                        dw      NEG_ONE                 // -1
 412+ 70AF 58 70                        dw      TRAVERSE                // traverse
 413+ 70B1 BD 69                        dw      EXIT                    // ;
 414+ 70B3
 415+ 70B3              //  ______________________________________________________________________
 416+ 70B3              //
 417+ 70B3              // pfa          nfa -- pfa
 418+ 70B3                              Colon_Def PFA, "PFA", is_normal
 418+ 70B3             >                New_Def  PFA, "PFA", Enter_Ptr, is_normal ; ok
 418+ 70B3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 418+ 70B3             >
 418+ 70B3             >                // dummy db directives used to calculate length of namec
 418+ 70B3 50 46 41    >                db      "PFA"
 418+ 70B6             >len_NFA         defl    $ - temp_NFA
 418+ 70B6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 418+ 70B3             >
 418+ 70B3 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 418+ 70B4 50 46 41    >                db      "PFA"               // name string in 7-bit ascii, but
 418+ 70B7             >                org     $-1                 // alter last byte of Name just above to set
 418+ 70B6 C1          >                db      {b $} | END_BIT     // msb as name end
 418+ 70B7             >
 418+ 70B7 9F 70       >                dw      last_NFA            // Link to previous definition Name
 418+ 70B9             >PFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 418+ 70B9 E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 418+ 70BB             >                else
 418+ 70BB ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 418+ 70BB             >                endif           ; ok        // for other definitions it "points" the correct handler
 418+ 70BB             >                // Use of "; ok" to suppress "warning[fwdref]"
 418+ 70BB             >
 418+ 70BB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 419+ 70BB 6A 6D                        dw      ONE                     // 1
 420+ 70BD 58 70                        dw      TRAVERSE                // traverse
 421+ 70BF 43 64 05 00                  dw      LIT, 5                  // 6
 422+ 70C3 4F 6A                        dw      PLUS                    // +
 423+ 70C5 BD 69                        dw      EXIT                    // ;
 424+ 70C7
 425+ 70C7              //  ______________________________________________________________________
 426+ 70C7              //
 427+ 70C7              // >body        cfa -- pfa
 428+ 70C7                              Colon_Def TO_BODY, ">BODY", is_normal
 428+ 70C7             >                New_Def  TO_BODY, ">BODY", Enter_Ptr, is_normal ; ok
 428+ 70C7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 428+ 70C7             >
 428+ 70C7             >                // dummy db directives used to calculate length of namec
 428+ 70C7 3E 42 4F 44 >                db      ">BODY"
 428+ 70CB 59          >
 428+ 70CC             >len_NFA         defl    $ - temp_NFA
 428+ 70CC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 428+ 70C7             >
 428+ 70C7 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 428+ 70C8 3E 42 4F 44 >                db      ">BODY"               // name string in 7-bit ascii, but
 428+ 70CC 59          >
 428+ 70CD             >                org     $-1                 // alter last byte of Name just above to set
 428+ 70CC D9          >                db      {b $} | END_BIT     // msb as name end
 428+ 70CD             >
 428+ 70CD B3 70       >                dw      last_NFA            // Link to previous definition Name
 428+ 70CF             >TO_BODY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 428+ 70CF E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 428+ 70D1             >                else
 428+ 70D1 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 428+ 70D1             >                endif           ; ok        // for other definitions it "points" the correct handler
 428+ 70D1             >                // Use of "; ok" to suppress "warning[fwdref]"
 428+ 70D1             >
 428+ 70D1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 429+ 70D1 A0 6A                        dw      CELL_PLUS               // cell+
 430+ 70D3 BD 69                        dw      EXIT                    // ;
 431+ 70D5
 432+ 70D5              //  ______________________________________________________________________
 433+ 70D5              //
 434+ 70D5              // <name        cfa -- nfa
 435+ 70D5                              Colon_Def TO_NAME, "<NAME", is_normal
 435+ 70D5             >                New_Def  TO_NAME, "<NAME", Enter_Ptr, is_normal ; ok
 435+ 70D5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 435+ 70D5             >
 435+ 70D5             >                // dummy db directives used to calculate length of namec
 435+ 70D5 3C 4E 41 4D >                db      "<NAME"
 435+ 70D9 45          >
 435+ 70DA             >len_NFA         defl    $ - temp_NFA
 435+ 70DA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 435+ 70D5             >
 435+ 70D5 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 435+ 70D6 3C 4E 41 4D >                db      "<NAME"               // name string in 7-bit ascii, but
 435+ 70DA 45          >
 435+ 70DB             >                org     $-1                 // alter last byte of Name just above to set
 435+ 70DA C5          >                db      {b $} | END_BIT     // msb as name end
 435+ 70DB             >
 435+ 70DB C7 70       >                dw      last_NFA            // Link to previous definition Name
 435+ 70DD             >TO_NAME:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 435+ 70DD E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 435+ 70DF             >                else
 435+ 70DF ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 435+ 70DF             >                endif           ; ok        // for other definitions it "points" the correct handler
 435+ 70DF             >                // Use of "; ok" to suppress "warning[fwdref]"
 435+ 70DF             >
 435+ 70DF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 436+ 70DF CF 70                        dw      TO_BODY                 // >body
 437+ 70E1 A5 70                        dw      NFA                     // nfa
 438+ 70E3 BD 69                        dw      EXIT                    // ;
 439+ 70E5
 440+ 70E5              //  ______________________________________________________________________
 441+ 70E5              //
 442+ 70E5              // !csp         --
 443+ 70E5              // store in user variable CSP current value of SP. Used at compile-time for syntax checkng
 444+ 70E5                              Colon_Def STORE_CSP, "!CSP", is_normal
 444+ 70E5             >                New_Def  STORE_CSP, "!CSP", Enter_Ptr, is_normal ; ok
 444+ 70E5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 444+ 70E5             >
 444+ 70E5             >                // dummy db directives used to calculate length of namec
 444+ 70E5 21 43 53 50 >                db      "!CSP"
 444+ 70E9             >len_NFA         defl    $ - temp_NFA
 444+ 70E9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 444+ 70E5             >
 444+ 70E5 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 444+ 70E6 21 43 53 50 >                db      "!CSP"               // name string in 7-bit ascii, but
 444+ 70EA             >                org     $-1                 // alter last byte of Name just above to set
 444+ 70E9 D0          >                db      {b $} | END_BIT     // msb as name end
 444+ 70EA             >
 444+ 70EA D5 70       >                dw      last_NFA            // Link to previous definition Name
 444+ 70EC             >STORE_CSP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 444+ 70EC E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 444+ 70EE             >                else
 444+ 70EE ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 444+ 70EE             >                endif           ; ok        // for other definitions it "points" the correct handler
 444+ 70EE             >                // Use of "; ok" to suppress "warning[fwdref]"
 444+ 70EE             >
 444+ 70EE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 445+ 70EE 87 69                        dw      SPFETCH                 // sp@
 446+ 70F0 D2 6E 03 6C                  dw      CSP, STORE              // csp !
 447+ 70F4 BD 69                        dw      EXIT                    // ;
 448+ 70F6
 449+ 70F6              //  ______________________________________________________________________
 450+ 70F6              //
 451+ 70F6              // ?error       f n --
 452+ 70F6              // rase error n if flag f it true
 453+ 70F6                              Colon_Def QERROR, "?ERROR", is_normal
 453+ 70F6             >                New_Def  QERROR, "?ERROR", Enter_Ptr, is_normal ; ok
 453+ 70F6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 453+ 70F6             >
 453+ 70F6             >                // dummy db directives used to calculate length of namec
 453+ 70F6 3F 45 52 52 >                db      "?ERROR"
 453+ 70FA 4F 52       >
 453+ 70FC             >len_NFA         defl    $ - temp_NFA
 453+ 70FC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 453+ 70F6             >
 453+ 70F6 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 453+ 70F7 3F 45 52 52 >                db      "?ERROR"               // name string in 7-bit ascii, but
 453+ 70FB 4F 52       >
 453+ 70FD             >                org     $-1                 // alter last byte of Name just above to set
 453+ 70FC D2          >                db      {b $} | END_BIT     // msb as name end
 453+ 70FD             >
 453+ 70FD E5 70       >                dw      last_NFA            // Link to previous definition Name
 453+ 70FF             >QERROR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 453+ 70FF E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 453+ 7101             >                else
 453+ 7101 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 453+ 7101             >                endif           ; ok        // for other definitions it "points" the correct handler
 453+ 7101             >                // Use of "; ok" to suppress "warning[fwdref]"
 453+ 7101             >
 453+ 7101             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 454+ 7101 25 6B                        dw      SWAP                    // swap
 455+ 7103                                                              // if
 456+ 7103 7D 64                        dw      ZBRANCH
 457+ 7105 08 00                        dw      QError_Else - $
 458+ 7107 04 76                        dw          ERROR               //      error  ( is a forward-ref )
 459+ 7109                                                              // else
 460+ 7109 66 64                        dw      BRANCH
 461+ 710B 04 00                        dw      QError_Endif - $
 462+ 710D              QError_Else:
 463+ 710D FD 6A                        dw          DROP                //      drop
 464+ 710F              QError_Endif:                                   // endif
 465+ 710F BD 69                        dw      EXIT                    // ;
 466+ 7111
 467+ 7111              //  ______________________________________________________________________
 468+ 7111              //
 469+ 7111              // ?comp       --
 470+ 7111              // raise msg #17 if not compiling
 471+ 7111                              Colon_Def QCOMP, "?COMP", is_normal
 471+ 7111             >                New_Def  QCOMP, "?COMP", Enter_Ptr, is_normal ; ok
 471+ 7111             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 471+ 7111             >
 471+ 7111             >                // dummy db directives used to calculate length of namec
 471+ 7111 3F 43 4F 4D >                db      "?COMP"
 471+ 7115 50          >
 471+ 7116             >len_NFA         defl    $ - temp_NFA
 471+ 7116             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 471+ 7111             >
 471+ 7111 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 471+ 7112 3F 43 4F 4D >                db      "?COMP"               // name string in 7-bit ascii, but
 471+ 7116 50          >
 471+ 7117             >                org     $-1                 // alter last byte of Name just above to set
 471+ 7116 D0          >                db      {b $} | END_BIT     // msb as name end
 471+ 7117             >
 471+ 7117 F6 70       >                dw      last_NFA            // Link to previous definition Name
 471+ 7119             >QCOMP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 471+ 7119 E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 471+ 711B             >                else
 471+ 711B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 471+ 711B             >                endif           ; ok        // for other definitions it "points" the correct handler
 471+ 711B             >                // Use of "; ok" to suppress "warning[fwdref]"
 471+ 711B             >
 471+ 711B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 472+ 711B AD 6E F6 6B                  dw      STATE, FETCH            // state @
 473+ 711F 14 6A                        dw      ZEQUAL                  // 0=
 474+ 7121 43 64 11 00                  dw      LIT, 17                 // 17  ( can't be executed )
 475+ 7125 FF 70                        dw      QERROR                  // ?error
 476+ 7127 BD 69                        dw      EXIT                    // ;
 477+ 7129
 478+ 7129              //  ______________________________________________________________________
 479+ 7129              //
 480+ 7129              // ?exec       --
 481+ 7129              // raise msg #18 if compiling
 482+ 7129                              Colon_Def QEXEC, "?EXEC", is_normal
 482+ 7129             >                New_Def  QEXEC, "?EXEC", Enter_Ptr, is_normal ; ok
 482+ 7129             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 482+ 7129             >
 482+ 7129             >                // dummy db directives used to calculate length of namec
 482+ 7129 3F 45 58 45 >                db      "?EXEC"
 482+ 712D 43          >
 482+ 712E             >len_NFA         defl    $ - temp_NFA
 482+ 712E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 482+ 7129             >
 482+ 7129 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 482+ 712A 3F 45 58 45 >                db      "?EXEC"               // name string in 7-bit ascii, but
 482+ 712E 43          >
 482+ 712F             >                org     $-1                 // alter last byte of Name just above to set
 482+ 712E C3          >                db      {b $} | END_BIT     // msb as name end
 482+ 712F             >
 482+ 712F 11 71       >                dw      last_NFA            // Link to previous definition Name
 482+ 7131             >QEXEC:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 482+ 7131 E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 482+ 7133             >                else
 482+ 7133 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 482+ 7133             >                endif           ; ok        // for other definitions it "points" the correct handler
 482+ 7133             >                // Use of "; ok" to suppress "warning[fwdref]"
 482+ 7133             >
 482+ 7133             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 483+ 7133 AD 6E F6 6B                  dw      STATE, FETCH            // state @
 484+ 7137 43 64 12 00                  dw      LIT, 18                 // 18  ( can't be compiled )
 485+ 713B FF 70                        dw      QERROR                  // ?error
 486+ 713D BD 69                        dw      EXIT                    // ;
 487+ 713F
 488+ 713F              //  ______________________________________________________________________
 489+ 713F              //
 490+ 713F              // ?pairs       n1 n2 --
 491+ 713F              // raise msg #19 if n1 != n2. Compiler pushes some placeholder to stack for syntax checking
 492+ 713F                              Colon_Def QPAIRS, "?PAIRS", is_normal
 492+ 713F             >                New_Def  QPAIRS, "?PAIRS", Enter_Ptr, is_normal ; ok
 492+ 713F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 492+ 713F             >
 492+ 713F             >                // dummy db directives used to calculate length of namec
 492+ 713F 3F 50 41 49 >                db      "?PAIRS"
 492+ 7143 52 53       >
 492+ 7145             >len_NFA         defl    $ - temp_NFA
 492+ 7145             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 492+ 713F             >
 492+ 713F 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 492+ 7140 3F 50 41 49 >                db      "?PAIRS"               // name string in 7-bit ascii, but
 492+ 7144 52 53       >
 492+ 7146             >                org     $-1                 // alter last byte of Name just above to set
 492+ 7145 D3          >                db      {b $} | END_BIT     // msb as name end
 492+ 7146             >
 492+ 7146 29 71       >                dw      last_NFA            // Link to previous definition Name
 492+ 7148             >QPAIRS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 492+ 7148 E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 492+ 714A             >                else
 492+ 714A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 492+ 714A             >                endif           ; ok        // for other definitions it "points" the correct handler
 492+ 714A             >                // Use of "; ok" to suppress "warning[fwdref]"
 492+ 714A             >
 492+ 714A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 493+ 714A 88 6F                        dw      SUBTRACT                // -
 494+ 714C 43 64 13 00                  dw      LIT, 19                 // 18  ( syntax error )
 495+ 7150 FF 70                        dw      QERROR                  // ?error
 496+ 7152 BD 69                        dw      EXIT                    // ;
 497+ 7154
 498+ 7154              //  ______________________________________________________________________
 499+ 7154              //
 500+ 7154              // ?csp       --
 501+ 7154              // raise msg #20 if surrent SP in not what previously saved in CSP.
 502+ 7154              // Compiler relies on that for  syntax checking of structures
 503+ 7154                              Colon_Def QCSP, "?CSP", is_normal
 503+ 7154             >                New_Def  QCSP, "?CSP", Enter_Ptr, is_normal ; ok
 503+ 7154             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 503+ 7154             >
 503+ 7154             >                // dummy db directives used to calculate length of namec
 503+ 7154 3F 43 53 50 >                db      "?CSP"
 503+ 7158             >len_NFA         defl    $ - temp_NFA
 503+ 7158             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 503+ 7154             >
 503+ 7154 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 503+ 7155 3F 43 53 50 >                db      "?CSP"               // name string in 7-bit ascii, but
 503+ 7159             >                org     $-1                 // alter last byte of Name just above to set
 503+ 7158 D0          >                db      {b $} | END_BIT     // msb as name end
 503+ 7159             >
 503+ 7159 3F 71       >                dw      last_NFA            // Link to previous definition Name
 503+ 715B             >QCSP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 503+ 715B E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 503+ 715D             >                else
 503+ 715D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 503+ 715D             >                endif           ; ok        // for other definitions it "points" the correct handler
 503+ 715D             >                // Use of "; ok" to suppress "warning[fwdref]"
 503+ 715D             >
 503+ 715D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 504+ 715D 87 69                        dw      SPFETCH                 // sp@
 505+ 715F D2 6E F6 6B                  dw      CSP, FETCH              // csp @
 506+ 7163 88 6F                        dw      SUBTRACT                // -
 507+ 7165 43 64 14 00                  dw      LIT, 20                 // 20  ( bad definition end )
 508+ 7169 FF 70                        dw      QERROR                  // ?error
 509+ 716B BD 69                        dw      EXIT                    // ;
 510+ 716D
 511+ 716D              //  ______________________________________________________________________
 512+ 716D              //
 513+ 716D              // ?loading      --
 514+ 716D              // raise msg #22 if not loading
 515+ 716D                              Colon_Def QLOADING, "?LOADING", is_normal
 515+ 716D             >                New_Def  QLOADING, "?LOADING", Enter_Ptr, is_normal ; ok
 515+ 716D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 515+ 716D             >
 515+ 716D             >                // dummy db directives used to calculate length of namec
 515+ 716D 3F 4C 4F 41 >                db      "?LOADING"
 515+ 7171 44 49 4E 47 >
 515+ 7175             >len_NFA         defl    $ - temp_NFA
 515+ 7175             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 515+ 716D             >
 515+ 716D 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 515+ 716E 3F 4C 4F 41 >                db      "?LOADING"               // name string in 7-bit ascii, but
 515+ 7172 44 49 4E 47 >
 515+ 7176             >                org     $-1                 // alter last byte of Name just above to set
 515+ 7175 C7          >                db      {b $} | END_BIT     // msb as name end
 515+ 7176             >
 515+ 7176 54 71       >                dw      last_NFA            // Link to previous definition Name
 515+ 7178             >QLOADING:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 515+ 7178 E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 515+ 717A             >                else
 515+ 717A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 515+ 717A             >                endif           ; ok        // for other definitions it "points" the correct handler
 515+ 717A             >                // Use of "; ok" to suppress "warning[fwdref]"
 515+ 717A             >
 515+ 717A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 516+ 717A 61 6E F6 6B                  dw      BLK, FETCH              // blk @
 517+ 717E 14 6A                        dw      ZEQUAL                  // 0=
 518+ 7180 43 64 16 00                  dw      LIT, 22                 // 22  ( aren't loading now )
 519+ 7184 FF 70                        dw      QERROR                  // ?error
 520+ 7186 BD 69                        dw      EXIT                    // ;
 521+ 7188
 522+ 7188              //  ______________________________________________________________________
 523+ 7188              //
 524+ 7188              // compile      --
 525+ 7188              // compiles the following word
 526+ 7188                              Colon_Def COMPILE, "COMPILE", is_normal
 526+ 7188             >                New_Def  COMPILE, "COMPILE", Enter_Ptr, is_normal ; ok
 526+ 7188             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 526+ 7188             >
 526+ 7188             >                // dummy db directives used to calculate length of namec
 526+ 7188 43 4F 4D 50 >                db      "COMPILE"
 526+ 718C 49 4C 45    >
 526+ 718F             >len_NFA         defl    $ - temp_NFA
 526+ 718F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 526+ 7188             >
 526+ 7188 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 526+ 7189 43 4F 4D 50 >                db      "COMPILE"               // name string in 7-bit ascii, but
 526+ 718D 49 4C 45    >
 526+ 7190             >                org     $-1                 // alter last byte of Name just above to set
 526+ 718F C5          >                db      {b $} | END_BIT     // msb as name end
 526+ 7190             >
 526+ 7190 6D 71       >                dw      last_NFA            // Link to previous definition Name
 526+ 7192             >COMPILE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 526+ 7192 E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 526+ 7194             >                else
 526+ 7194 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 526+ 7194             >                endif           ; ok        // for other definitions it "points" the correct handler
 526+ 7194             >                // Use of "; ok" to suppress "warning[fwdref]"
 526+ 7194             >
 526+ 7194             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 527+ 7194 19 71                        dw      QCOMP                   // ?comp
 528+ 7196 FA 69                        dw      R_TO                    // r>
 529+ 7198 32 6B A0 6A                  dw      DUP, CELL_PLUS          // dup, cell+
 530+ 719C E6 69                        dw      TO_R                    // >r
 531+ 719E F6 6B 50 6F                  dw      FETCH, COMMA            // @ ,
 532+ 71A2 BD 69                        dw      EXIT                    // ;
 533+ 71A4
 534+ 71A4              //  ______________________________________________________________________
 535+ 71A4              //
 536+ 71A4              // [            --
 537+ 71A4              // stop compilation
 538+ 71A4                              Colon_Def SQUARED_OPEN, "[", is_immediate
 538+ 71A4             >                New_Def  SQUARED_OPEN, "[", Enter_Ptr, is_immediate ; ok
 538+ 71A4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 538+ 71A4             >
 538+ 71A4             >                // dummy db directives used to calculate length of namec
 538+ 71A4 5B          >                db      "["
 538+ 71A5             >len_NFA         defl    $ - temp_NFA
 538+ 71A5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 538+ 71A4             >
 538+ 71A4 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 538+ 71A5 5B          >                db      "["               // name string in 7-bit ascii, but
 538+ 71A6             >                org     $-1                 // alter last byte of Name just above to set
 538+ 71A5 DB          >                db      {b $} | END_BIT     // msb as name end
 538+ 71A6             >
 538+ 71A6 88 71       >                dw      last_NFA            // Link to previous definition Name
 538+ 71A8             >SQUARED_OPEN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 538+ 71A8 E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 538+ 71AA             >                else
 538+ 71AA ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 538+ 71AA             >                endif           ; ok        // for other definitions it "points" the correct handler
 538+ 71AA             >                // Use of "; ok" to suppress "warning[fwdref]"
 538+ 71AA             >
 538+ 71AA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 539+ 71AA 62 6D                        dw      ZERO                    // 0
 540+ 71AC AD 6E 03 6C                  dw      STATE, STORE            // state !
 541+ 71B0 BD 69                        dw      EXIT                    // ; immediate
 542+ 71B2
 543+ 71B2              //  ______________________________________________________________________
 544+ 71B2              //
 545+ 71B2              // ]            --
 546+ 71B2              // start compilation
 547+ 71B2                              Colon_Def SQUARED_CLOSE, "]", is_normal
 547+ 71B2             >                New_Def  SQUARED_CLOSE, "]", Enter_Ptr, is_normal ; ok
 547+ 71B2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 547+ 71B2             >
 547+ 71B2             >                // dummy db directives used to calculate length of namec
 547+ 71B2 5D          >                db      "]"
 547+ 71B3             >len_NFA         defl    $ - temp_NFA
 547+ 71B3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 547+ 71B2             >
 547+ 71B2 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 547+ 71B3 5D          >                db      "]"               // name string in 7-bit ascii, but
 547+ 71B4             >                org     $-1                 // alter last byte of Name just above to set
 547+ 71B3 DD          >                db      {b $} | END_BIT     // msb as name end
 547+ 71B4             >
 547+ 71B4 A4 71       >                dw      last_NFA            // Link to previous definition Name
 547+ 71B6             >SQUARED_CLOSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 547+ 71B6 E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 547+ 71B8             >                else
 547+ 71B8 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 547+ 71B8             >                endif           ; ok        // for other definitions it "points" the correct handler
 547+ 71B8             >                // Use of "; ok" to suppress "warning[fwdref]"
 547+ 71B8             >
 547+ 71B8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 548+ 71B8 43 64 C0 00                  dw      LIT, $C0                // 192
 549+ 71BC AD 6E 03 6C                  dw      STATE, STORE            // state !
 550+ 71C0 BD 69                        dw      EXIT                    // ;
 551+ 71C2
 552+ 71C2              //  ______________________________________________________________________
 553+ 71C2              //
 554+ 71C2              // smudge       --
 555+ 71C2              // toggle smudge bit of latest definition
 556+ 71C2                              Colon_Def SMUDGE, "SMUDGE", is_normal
 556+ 71C2             >                New_Def  SMUDGE, "SMUDGE", Enter_Ptr, is_normal ; ok
 556+ 71C2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 556+ 71C2             >
 556+ 71C2             >                // dummy db directives used to calculate length of namec
 556+ 71C2 53 4D 55 44 >                db      "SMUDGE"
 556+ 71C6 47 45       >
 556+ 71C8             >len_NFA         defl    $ - temp_NFA
 556+ 71C8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 556+ 71C2             >
 556+ 71C2 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 556+ 71C3 53 4D 55 44 >                db      "SMUDGE"               // name string in 7-bit ascii, but
 556+ 71C7 47 45       >
 556+ 71C9             >                org     $-1                 // alter last byte of Name just above to set
 556+ 71C8 C5          >                db      {b $} | END_BIT     // msb as name end
 556+ 71C9             >
 556+ 71C9 B2 71       >                dw      last_NFA            // Link to previous definition Name
 556+ 71CB             >SMUDGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 556+ 71CB E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 556+ 71CD             >                else
 556+ 71CD ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 556+ 71CD             >                endif           ; ok        // for other definitions it "points" the correct handler
 556+ 71CD             >                // Use of "; ok" to suppress "warning[fwdref]"
 556+ 71CD             >
 556+ 71CD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 557+ 71CD 7B 70                        dw      LATEST                  // latest
 558+ 71CF 43 64 20 00                  dw      LIT, SMUDGE_BIT         // 32
 559+ 71D3 E9 6B                        dw      TOGGLE                  // toggle
 560+ 71D5 BD 69                        dw      EXIT                    // ;
 561+ 71D7
 562+ 71D7              //  ______________________________________________________________________
 563+ 71D7              //
 564+ 71D7              // immediate    --
 565+ 71D7              // make immediate the latest definition
 566+ 71D7                              Colon_Def IMMEDIATE, "IMMEDIATE", is_normal
 566+ 71D7             >                New_Def  IMMEDIATE, "IMMEDIATE", Enter_Ptr, is_normal ; ok
 566+ 71D7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 566+ 71D7             >
 566+ 71D7             >                // dummy db directives used to calculate length of namec
 566+ 71D7 49 4D 4D 45 >                db      "IMMEDIATE"
 566+ 71DB 44 49 41 54 >
 566+ 71DF 45          >
 566+ 71E0             >len_NFA         defl    $ - temp_NFA
 566+ 71E0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 566+ 71D7             >
 566+ 71D7 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 566+ 71D8 49 4D 4D 45 >                db      "IMMEDIATE"               // name string in 7-bit ascii, but
 566+ 71DC 44 49 41 54 >
 566+ 71E0 45          >
 566+ 71E1             >                org     $-1                 // alter last byte of Name just above to set
 566+ 71E0 C5          >                db      {b $} | END_BIT     // msb as name end
 566+ 71E1             >
 566+ 71E1 C2 71       >                dw      last_NFA            // Link to previous definition Name
 566+ 71E3             >IMMEDIATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 566+ 71E3 E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 566+ 71E5             >                else
 566+ 71E5 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 566+ 71E5             >                endif           ; ok        // for other definitions it "points" the correct handler
 566+ 71E5             >                // Use of "; ok" to suppress "warning[fwdref]"
 566+ 71E5             >
 566+ 71E5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 567+ 71E5 7B 70                        dw      LATEST                  // latest
 568+ 71E7 43 64 40 00                  dw      LIT, $40                // 64
 569+ 71EB E9 6B                        dw      TOGGLE                  // toggle
 570+ 71ED BD 69                        dw      EXIT                    // ;
 571+ 71EF
 572+ 71EF              //  ______________________________________________________________________
 573+ 71EF              //
 574+ 71EF              // hex          --
 575+ 71EF              // change numeration base
 576+ 71EF                              Colon_Def HEX, "HEX", is_normal
 576+ 71EF             >                New_Def  HEX, "HEX", Enter_Ptr, is_normal ; ok
 576+ 71EF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 576+ 71EF             >
 576+ 71EF             >                // dummy db directives used to calculate length of namec
 576+ 71EF 48 45 58    >                db      "HEX"
 576+ 71F2             >len_NFA         defl    $ - temp_NFA
 576+ 71F2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 576+ 71EF             >
 576+ 71EF 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 576+ 71F0 48 45 58    >                db      "HEX"               // name string in 7-bit ascii, but
 576+ 71F3             >                org     $-1                 // alter last byte of Name just above to set
 576+ 71F2 D8          >                db      {b $} | END_BIT     // msb as name end
 576+ 71F3             >
 576+ 71F3 D7 71       >                dw      last_NFA            // Link to previous definition Name
 576+ 71F5             >HEX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 576+ 71F5 E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 576+ 71F7             >                else
 576+ 71F7 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 576+ 71F7             >                endif           ; ok        // for other definitions it "points" the correct handler
 576+ 71F7             >                // Use of "; ok" to suppress "warning[fwdref]"
 576+ 71F7             >
 576+ 71F7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 577+ 71F7 43 64 10 00                  dw      LIT, 16                 // 16
 578+ 71FB B7 6E 03 6C                  dw      BASE, STORE             // base !
 579+ 71FF BD 69                        dw      EXIT                    // ;
 580+ 7201
 581+ 7201              //  ______________________________________________________________________
 582+ 7201              //
 583+ 7201              // decimal      --
 584+ 7201              // change numeration base
 585+ 7201                              Colon_Def DECIMAL, "DECIMAL", is_normal
 585+ 7201             >                New_Def  DECIMAL, "DECIMAL", Enter_Ptr, is_normal ; ok
 585+ 7201             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 585+ 7201             >
 585+ 7201             >                // dummy db directives used to calculate length of namec
 585+ 7201 44 45 43 49 >                db      "DECIMAL"
 585+ 7205 4D 41 4C    >
 585+ 7208             >len_NFA         defl    $ - temp_NFA
 585+ 7208             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 585+ 7201             >
 585+ 7201 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 585+ 7202 44 45 43 49 >                db      "DECIMAL"               // name string in 7-bit ascii, but
 585+ 7206 4D 41 4C    >
 585+ 7209             >                org     $-1                 // alter last byte of Name just above to set
 585+ 7208 CC          >                db      {b $} | END_BIT     // msb as name end
 585+ 7209             >
 585+ 7209 EF 71       >                dw      last_NFA            // Link to previous definition Name
 585+ 720B             >DECIMAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 585+ 720B E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 585+ 720D             >                else
 585+ 720D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 585+ 720D             >                endif           ; ok        // for other definitions it "points" the correct handler
 585+ 720D             >                // Use of "; ok" to suppress "warning[fwdref]"
 585+ 720D             >
 585+ 720D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 586+ 720D 43 64 0A 00                  dw      LIT, 10                 // 10
 587+ 7211 B7 6E 03 6C                  dw      BASE, STORE             // base !
 588+ 7215 BD 69                        dw      EXIT                    // ;
 589+ 7217
 590+ 7217              //  ______________________________________________________________________
 591+ 7217              //
 592+ 7217              // (;code)       --
 593+ 7217              // patch to CFA to call/jump to the "following code"
 594+ 7217                              Colon_Def C_SEMICOLON_CODE, "(;CODE)", is_normal
 594+ 7217             >                New_Def  C_SEMICOLON_CODE, "(;CODE)", Enter_Ptr, is_normal ; ok
 594+ 7217             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 594+ 7217             >
 594+ 7217             >                // dummy db directives used to calculate length of namec
 594+ 7217 28 3B 43 4F >                db      "(;CODE)"
 594+ 721B 44 45 29    >
 594+ 721E             >len_NFA         defl    $ - temp_NFA
 594+ 721E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 594+ 7217             >
 594+ 7217 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 594+ 7218 28 3B 43 4F >                db      "(;CODE)"               // name string in 7-bit ascii, but
 594+ 721C 44 45 29    >
 594+ 721F             >                org     $-1                 // alter last byte of Name just above to set
 594+ 721E A9          >                db      {b $} | END_BIT     // msb as name end
 594+ 721F             >
 594+ 721F 01 72       >                dw      last_NFA            // Link to previous definition Name
 594+ 7221             >C_SEMICOLON_CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 594+ 7221 E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 594+ 7223             >                else
 594+ 7223 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 594+ 7223             >                endif           ; ok        // for other definitions it "points" the correct handler
 594+ 7223             >                // Use of "; ok" to suppress "warning[fwdref]"
 594+ 7223             >
 594+ 7223             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 595+ 7223 FA 69                        dw      R_TO                    // r>       ( Return Stack has IP to caller's next cell )
 596+ 7225 7B 70                        dw      LATEST                  // latest   ( Word being defined in this moment )
 597+ 7227 B9 70 99 70                  dw      PFA, CFA                // pfa cfa  ( cfa of latest word )
 598+ 722B
 599+ 722B
 600+ 722B
 601+ 722B
 602+ 722B
 603+ 722B 03 6C                        dw      STORE                   // !
 604+ 722D BD 69                        dw      EXIT                    // ;
 605+ 722F
 606+ 722F              //  ______________________________________________________________________
 607+ 722F              //
 608+ 722F              // ;code        --
 609+ 722F                              Colon_Def SEMICOLON_CODE, ";CODE", is_immediate
 609+ 722F             >                New_Def  SEMICOLON_CODE, ";CODE", Enter_Ptr, is_immediate ; ok
 609+ 722F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 609+ 722F             >
 609+ 722F             >                // dummy db directives used to calculate length of namec
 609+ 722F 3B 43 4F 44 >                db      ";CODE"
 609+ 7233 45          >
 609+ 7234             >len_NFA         defl    $ - temp_NFA
 609+ 7234             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 609+ 722F             >
 609+ 722F C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 609+ 7230 3B 43 4F 44 >                db      ";CODE"               // name string in 7-bit ascii, but
 609+ 7234 45          >
 609+ 7235             >                org     $-1                 // alter last byte of Name just above to set
 609+ 7234 C5          >                db      {b $} | END_BIT     // msb as name end
 609+ 7235             >
 609+ 7235 17 72       >                dw      last_NFA            // Link to previous definition Name
 609+ 7237             >SEMICOLON_CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 609+ 7237 E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 609+ 7239             >                else
 609+ 7239 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 609+ 7239             >                endif           ; ok        // for other definitions it "points" the correct handler
 609+ 7239             >                // Use of "; ok" to suppress "warning[fwdref]"
 609+ 7239             >
 609+ 7239             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 610+ 7239 5B 71                        dw      QCSP                    // ?csp
 611+ 723B 92 71                        dw      COMPILE                 // compile
 612+ 723D 21 72                        dw      C_SEMICOLON_CODE        // (;code)
 613+ 723F A8 71                        dw      SQUARED_OPEN            // [
 614+ 7241 0F 6D                        dw      NOOP                    // noop () can be patched later to ASSEMBLER... )
 615+ 7243 BD 69                        dw      EXIT                    // ; immediate
 616+ 7245
 617+ 7245              //  ______________________________________________________________________
 618+ 7245              //
 619+ 7245              // <builds      --
 620+ 7245                              Colon_Def CBUILDS, "<BUILDS", is_normal
 620+ 7245             >                New_Def  CBUILDS, "<BUILDS", Enter_Ptr, is_normal ; ok
 620+ 7245             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 620+ 7245             >
 620+ 7245             >                // dummy db directives used to calculate length of namec
 620+ 7245 3C 42 55 49 >                db      "<BUILDS"
 620+ 7249 4C 44 53    >
 620+ 724C             >len_NFA         defl    $ - temp_NFA
 620+ 724C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 620+ 7245             >
 620+ 7245 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 620+ 7246 3C 42 55 49 >                db      "<BUILDS"               // name string in 7-bit ascii, but
 620+ 724A 4C 44 53    >
 620+ 724D             >                org     $-1                 // alter last byte of Name just above to set
 620+ 724C D3          >                db      {b $} | END_BIT     // msb as name end
 620+ 724D             >
 620+ 724D 2F 72       >                dw      last_NFA            // Link to previous definition Name
 620+ 724F             >CBUILDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 620+ 724F E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 620+ 7251             >                else
 620+ 7251 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 620+ 7251             >                endif           ; ok        // for other definitions it "points" the correct handler
 620+ 7251             >                // Use of "; ok" to suppress "warning[fwdref]"
 620+ 7251             >
 620+ 7251             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 621+ 7251 62 6D                        dw      ZERO                    // 0
 622+ 7253 1E 6D                        dw      CONSTANT                // constant
 623+ 7255 BD 69                        dw      EXIT                    // ;
 624+ 7257
 625+ 7257              //  ______________________________________________________________________
 626+ 7257              //
 627+ 7257              // recurse      --
 628+ 7257              //              Colon_Def RECURSE, "RECURSE", is_immediate
 629+ 7257              //              dw      QCOMP                   // ?comp
 630+ 7257              //              dw      LATEST                  // latest
 631+ 7257              //              dw      PFA, CFA                // pfa cfa
 632+ 7257              //              dw      COMMA                   // ,
 633+ 7257              //              dw      EXIT                    // ; immediate
 634+ 7257
 635+ 7257              //  ______________________________________________________________________
 636+ 7257              //
 637+ 7257              // does>     --
 638+ 7257                              Colon_Def DOES_TO, "DOES>", is_normal
 638+ 7257             >                New_Def  DOES_TO, "DOES>", Enter_Ptr, is_normal ; ok
 638+ 7257             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 638+ 7257             >
 638+ 7257             >                // dummy db directives used to calculate length of namec
 638+ 7257 44 4F 45 53 >                db      "DOES>"
 638+ 725B 3E          >
 638+ 725C             >len_NFA         defl    $ - temp_NFA
 638+ 725C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 638+ 7257             >
 638+ 7257 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 638+ 7258 44 4F 45 53 >                db      "DOES>"               // name string in 7-bit ascii, but
 638+ 725C 3E          >
 638+ 725D             >                org     $-1                 // alter last byte of Name just above to set
 638+ 725C BE          >                db      {b $} | END_BIT     // msb as name end
 638+ 725D             >
 638+ 725D 45 72       >                dw      last_NFA            // Link to previous definition Name
 638+ 725F             >DOES_TO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 638+ 725F E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 638+ 7261             >                else
 638+ 7261 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 638+ 7261             >                endif           ; ok        // for other definitions it "points" the correct handler
 638+ 7261             >                // Use of "; ok" to suppress "warning[fwdref]"
 638+ 7261             >
 638+ 7261             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 639+ 7261 FA 69                        dw      R_TO                    // r>
 640+ 7263 7B 70                        dw      LATEST                  // latest
 641+ 7265 B9 70                        dw      PFA                     // pfa
 642+ 7267 03 6C                        dw      STORE                   // !
 643+ 7269 21 72                        dw      C_SEMICOLON_CODE        // ;code
 644+ 726B              Does_Ptr:
 645+ 726B                              // via call coded in CFA
 646+ 726B                              ldhlrp
 646+ 726B 2A 30 64    >                ld      hl,(RP_Pointer)
 647+ 726E 2B                           dec     hl                  // push on Return-Stack current Instruction-Pointer
 648+ 726F 70                           ld      (hl), b
 649+ 7270 2B                           dec     hl
 650+ 7271 71                           ld      (hl), c
 651+ 7272                              ldrphl
 651+ 7272 22 30 64    >                ld      (RP_Pointer),hl
 652+ 7275 13                           inc     de
 653+ 7276 EB                           ex      de, hl
 654+ 7277 4E                           ld      c, (hl)
 655+ 7278 23                           inc     hl
 656+ 7279 46                           ld      b, (hl)
 657+ 727A 23                           inc     hl
 658+ 727B
 659+ 727B                              psh1
 659+ 727B E5          >                push    hl
 659+ 727C DD E9       >                jp      (ix)
 660+ 727E                              // SMUDGE !
 661+ 727E
 662+ 727E              //  ______________________________________________________________________
 663+ 727E              //
 664+ 727E              // count        a -- a2 n
 665+ 727E              // expects a counted string at address a, returns string address and counter
 666+ 727E                              Colon_Def COUNT, "COUNT", is_normal
 666+ 727E             >                New_Def  COUNT, "COUNT", Enter_Ptr, is_normal ; ok
 666+ 727E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 666+ 727E             >
 666+ 727E             >                // dummy db directives used to calculate length of namec
 666+ 727E 43 4F 55 4E >                db      "COUNT"
 666+ 7282 54          >
 666+ 7283             >len_NFA         defl    $ - temp_NFA
 666+ 7283             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 666+ 727E             >
 666+ 727E 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 666+ 727F 43 4F 55 4E >                db      "COUNT"               // name string in 7-bit ascii, but
 666+ 7283 54          >
 666+ 7284             >                org     $-1                 // alter last byte of Name just above to set
 666+ 7283 D4          >                db      {b $} | END_BIT     // msb as name end
 666+ 7284             >
 666+ 7284 57 72       >                dw      last_NFA            // Link to previous definition Name
 666+ 7286             >COUNT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 666+ 7286 E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 666+ 7288             >                else
 666+ 7288 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 666+ 7288             >                endif           ; ok        // for other definitions it "points" the correct handler
 666+ 7288             >                // Use of "; ok" to suppress "warning[fwdref]"
 666+ 7288             >
 666+ 7288             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 667+ 7288 32 6B                        dw      DUP                     // dup
 668+ 728A 78 6A                        dw      ONE_PLUS                // 1+
 669+ 728C 25 6B 11 6C                  dw      SWAP, CFETCH             // swap @
 670+ 7290 BD 69                        dw      EXIT                    // ;
 671+ 7292
 672+ 7292              //  ______________________________________________________________________
 673+ 7292              //
 674+ 7292              // type         a n --
 675+ 7292              // Sends to current output channel n characters starting at address a.
 676+ 7292                              Colon_Def TYPE, "TYPE", is_normal
 676+ 7292             >                New_Def  TYPE, "TYPE", Enter_Ptr, is_normal ; ok
 676+ 7292             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 676+ 7292             >
 676+ 7292             >                // dummy db directives used to calculate length of namec
 676+ 7292 54 59 50 45 >                db      "TYPE"
 676+ 7296             >len_NFA         defl    $ - temp_NFA
 676+ 7296             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 676+ 7292             >
 676+ 7292 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 676+ 7293 54 59 50 45 >                db      "TYPE"               // name string in 7-bit ascii, but
 676+ 7297             >                org     $-1                 // alter last byte of Name just above to set
 676+ 7296 C5          >                db      {b $} | END_BIT     // msb as name end
 676+ 7297             >
 676+ 7297 7E 72       >                dw      last_NFA            // Link to previous definition Name
 676+ 7299             >TYPE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 676+ 7299 E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 676+ 729B             >                else
 676+ 729B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 676+ 729B             >                endif           ; ok        // for other definitions it "points" the correct handler
 676+ 729B             >                // Use of "; ok" to suppress "warning[fwdref]"
 676+ 729B             >
 676+ 729B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 677+ 729B ED 6A                        dw      OVER                    // over
 678+ 729D 4F 6A                        dw      PLUS                    // +
 679+ 729F 25 6B                        dw      SWAP                    // swap
 680+ 72A1 D7 64                        dw      C_Q_DO                  // ?do
 681+ 72A3 0C 00                        dw      Type_Skip - $
 682+ 72A5              Type_Loop:
 683+ 72A5 10 65 11 6C                  dw          I, CFETCH           //      i c@
 684+ 72A9 29 70                        dw          EMIT                //      emit
 685+ 72AB 92 64                        dw      C_LOOP                  // loop
 686+ 72AD F8 FF                        dw      Type_Loop - $
 687+ 72AF              Type_Skip:
 688+ 72AF BD 69                        dw      EXIT                    // ;
 689+ 72B1
 690+ 72B1              //  ______________________________________________________________________
 691+ 72B1              //
 692+ 72B1              // -trailing    a n1 -- a n2
 693+ 72B1              // Assumes that an n1 bytes-long string is stored at address a
 694+ 72B1              // and the string contains a space delimited word,
 695+ 72B1              // Finds n2 as the position of the first character after the word.
 696+ 72B1                              Colon_Def LTRAILING, "-TRAILING", is_normal
 696+ 72B1             >                New_Def  LTRAILING, "-TRAILING", Enter_Ptr, is_normal ; ok
 696+ 72B1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 696+ 72B1             >
 696+ 72B1             >                // dummy db directives used to calculate length of namec
 696+ 72B1 2D 54 52 41 >                db      "-TRAILING"
 696+ 72B5 49 4C 49 4E >
 696+ 72B9 47          >
 696+ 72BA             >len_NFA         defl    $ - temp_NFA
 696+ 72BA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 696+ 72B1             >
 696+ 72B1 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 696+ 72B2 2D 54 52 41 >                db      "-TRAILING"               // name string in 7-bit ascii, but
 696+ 72B6 49 4C 49 4E >
 696+ 72BA 47          >
 696+ 72BB             >                org     $-1                 // alter last byte of Name just above to set
 696+ 72BA C7          >                db      {b $} | END_BIT     // msb as name end
 696+ 72BB             >
 696+ 72BB 92 72       >                dw      last_NFA            // Link to previous definition Name
 696+ 72BD             >LTRAILING:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 696+ 72BD E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 696+ 72BF             >                else
 696+ 72BF ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 696+ 72BF             >                endif           ; ok        // for other definitions it "points" the correct handler
 696+ 72BF             >                // Use of "; ok" to suppress "warning[fwdref]"
 696+ 72BF             >
 696+ 72BF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 697+ 72BF 32 6B 62 6D                  dw      DUP, ZERO               // dup 0
 698+ 72C3                                                              // do
 699+ 72C3 05 65                        dw      C_DO
 700+ 72C5              LTrailing_Loop:
 701+ 72C5 9C 6B 4F 6A                  dw          TWO_DUP, PLUS       //      2dup +
 702+ 72C9 84 6A                        dw          ONE_SUBTRACT        //      1-
 703+ 72CB 11 6C                        dw          CFETCH              //      c@
 704+ 72CD 8C 6D 88 6F                  dw          BL, SUBTRACT        //      bl -
 705+ 72D1                                                              //      if
 706+ 72D1 7D 64                        dw          ZBRANCH
 707+ 72D3 08 00                        dw          LTrailing_Else - $
 708+ 72D5 D3 69                        dw              LEAVE           //          leave
 709+ 72D7 66 64                        dw          BRANCH              //      else
 710+ 72D9 04 00                        dw          LTrailing_Endif - $
 711+ 72DB              LTrailing_Else:
 712+ 72DB 84 6A                        dw              ONE_SUBTRACT    //          1-
 713+ 72DD              LTrailing_Endif:                                //      endif
 714+ 72DD                                                              // loop
 715+ 72DD 92 64                        dw      C_LOOP
 716+ 72DF E6 FF                        dw      LTrailing_Loop - $
 717+ 72E1 BD 69                        dw      EXIT                    // ;
 718+ 72E3
 719+ 72E3              //  ______________________________________________________________________
 720+ 72E3              //
 721+ 72E3              // accept       a n1 -- n2
 722+ 72E3              // Accepts at most n1 characters from terminal and stores them at address a
 723+ 72E3              // CR stops input. A 'nul' is added as trailer.
 724+ 72E3              // n2 is the string length. n2 is kept in span user variable also.
 725+ 72E3                              Colon_Def ACCEPT, "ACCEPT", is_normal
 725+ 72E3             >                New_Def  ACCEPT, "ACCEPT", Enter_Ptr, is_normal ; ok
 725+ 72E3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 725+ 72E3             >
 725+ 72E3             >                // dummy db directives used to calculate length of namec
 725+ 72E3 41 43 43 45 >                db      "ACCEPT"
 725+ 72E7 50 54       >
 725+ 72E9             >len_NFA         defl    $ - temp_NFA
 725+ 72E9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 725+ 72E3             >
 725+ 72E3 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 725+ 72E4 41 43 43 45 >                db      "ACCEPT"               // name string in 7-bit ascii, but
 725+ 72E8 50 54       >
 725+ 72EA             >                org     $-1                 // alter last byte of Name just above to set
 725+ 72E9 D4          >                db      {b $} | END_BIT     // msb as name end
 725+ 72EA             >
 725+ 72EA B1 72       >                dw      last_NFA            // Link to previous definition Name
 725+ 72EC             >ACCEPT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 725+ 72EC E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 725+ 72EE             >                else
 725+ 72EE ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 725+ 72EE             >                endif           ; ok        // for other definitions it "points" the correct handler
 725+ 72EE             >                // Use of "; ok" to suppress "warning[fwdref]"
 725+ 72EE             >
 725+ 72EE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 726+ 72EE ED 6A 4F 6A                  dw      OVER, PLUS, OVER        //                      ( a  n1+a  a )
 726+ 72F2 ED 6A
 727+ 72F4 62 6D 3F 6B                  dw      ZERO, ROT, ROT          //                      ( a  0     a+n1  a )
 727+ 72F8 3F 6B
 728+ 72FA                                                              // do
 729+ 72FA 05 65                        dw      C_DO                    //                      ( a  0 )
 730+ 72FC              Accept_Loop:
 731+ 72FC FD 6A 1F 67                  dw          DROP, KEY           //      drop key        ( a  c )
 732+ 7300 32 6B                        dw          DUP                 //      dup             ( a  c  c )
 733+ 7302 43 64 0E 00                  dw          LIT, $0E            //      0E
 734+ 7306 C8 6D                        dw          PLUS_ORIGIN         //      +origin
 735+ 7308 F6 6B                        dw          FETCH               //      @               ( a  c  c  del )
 736+ 730A 96 6F                        dw          EQUALS              //      =               ( a  c  c==del )
 737+ 730C                                                              //      if
 738+ 730C 7D 64                        dw          ZBRANCH
 739+ 730E 2A 00                        dw          Accept_Else_0 - $
 740+ 7310 FD 6A                        dw              DROP            //          drop        ( a  )
 741+ 7312 32 6B 10 65                  dw              DUP, I, EQUALS  //          dup i =     ( a  a==i )
 741+ 7316 96 6F
 742+ 7318 32 6B                        dw              DUP             //          dup         ( a  a==i  a==i )
 743+ 731A FA 69                        dw              R_TO            //          r> 2 - + r>
 744+ 731C 72 6D 88 6F                  dw              TWO, SUBTRACT, PLUS //      ( decrement index by 1 or 2 )
 744+ 7320 4F 6A
 745+ 7322 E6 69                        dw              TO_R            //
 746+ 7324                                                              //          if
 747+ 7324 7D 64                        dw              ZBRANCH
 748+ 7326 0A 00                        dw              Accept_Else_1 - $
 749+ 7328 43 64 07 00                  dw                  LIT, 7      //              7       ( a  7 )
 750+ 732C                                                              //          else
 751+ 732C 66 64                        dw              BRANCH
 752+ 732E 06 00                        dw              Accept_Endif_1 - $
 753+ 7330              Accept_Else_1:
 754+ 7330 43 64 08 00                  dw                  LIT, 8      //              8       ( a  8 )
 755+ 7334              Accept_Endif_1:                                 //          endif
 756+ 7334 66 64                        dw          BRANCH
 757+ 7336 30 00                        dw          Accept_Endif_0 - $
 758+ 7338              Accept_Else_0:                                  //      else
 759+ 7338 32 6B                        dw              DUP             //          dup         ( a  c  c )
 760+ 733A 43 64 0D 00                  dw              LIT, 13         //          13
 761+ 733E 96 6F                        dw              EQUALS          //          =           ( a  c  c==CR )
 762+ 7340                                                              //          if
 763+ 7340 7D 64                        dw              ZBRANCH
 764+ 7342 0E 00                        dw              Accept_Else_2 - $
 765+ 7344 FD 6A 8C 6D                  dw                  DROP, BL    //              drop bl ( a  bl )
 766+ 7348 62 6D                        dw                  ZERO        //              0       ( a  c  0 )
 767+ 734A D3 69                        dw                  LEAVE       //              leave
 768+ 734C                                                              //          else
 769+ 734C 66 64                        dw              BRANCH
 770+ 734E 04 00                        dw              Accept_Endif_2 - $
 771+ 7350              Accept_Else_2:
 772+ 7350 32 6B                        dw                  DUP         //              dup     ( a  c  c )
 773+ 7352                                                              //          endif
 774+ 7352              Accept_Endif_2:
 775+ 7352 10 65 1F 6C                  dw              I, CSTORE       //          i           ( a  c )
 776+ 7356 32 6B 8C 6D                  dw              DUP, BL, LESS   //          dup bl <    ( a  c  c<BL )
 776+ 735A B7 6F
 777+ 735C                                                              //          if
 778+ 735C 7D 64                        dw              ZBRANCH
 779+ 735E 08 00                        dw              Accept_Endif_3 - $
 780+ 7360 FA 69                        dw                  R_TO        //              r>
 781+ 7362 84 6A                        dw                  ONE_SUBTRACT//              1-
 782+ 7364 E6 69                        dw                  TO_R        //              >r
 783+ 7366                                                              //          endif
 784+ 7366              Accept_Endif_3:
 785+ 7366              Accept_Endif_0:                                 //      endif
 786+ 7366 29 70                        dw          EMIT                //      emit
 787+ 7368 62 6D 10 65                  dw          ZERO, I, ONE_PLUS   //      0 i 1+ !
 787+ 736C 78 6A
 788+ 736E 03 6C                        dw          STORE               //          ( zero pad )
 789+ 7370 10 65                        dw          I                   //      i
 790+ 7372                                                              // loop
 791+ 7372 92 64                        dw      C_LOOP
 792+ 7374 88 FF                        dw      Accept_Loop - $
 793+ 7376 25 6B 88 6F                  dw      SWAP, SUBTRACT          // swap -
 794+ 737A 78 6A                        dw      ONE_PLUS                // 1+
 795+ 737C 32 6B 22 6F                  dw      DUP, SPAN, STORE        // dup span !
 795+ 7380 03 6C
 796+ 7382 BD 69                        dw      EXIT                    // ;
 797+ 7384
 798+ 7384              //  ______________________________________________________________________
 799+ 7384              //
 800+ 7384              // expect      a n --
 801+ 7384              // Accepts at most n1 characters from terminal and stores them at address a
 802+ 7384              // CR stops input. A 'nul' is added as trailer.
 803+ 7384              // n2 is the string length. n2 is kept in span user variable also.
 804+ 7384                              Colon_Def EXPECT, "EXPECT", is_normal
 804+ 7384             >                New_Def  EXPECT, "EXPECT", Enter_Ptr, is_normal ; ok
 804+ 7384             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 804+ 7384             >
 804+ 7384             >                // dummy db directives used to calculate length of namec
 804+ 7384 45 58 50 45 >                db      "EXPECT"
 804+ 7388 43 54       >
 804+ 738A             >len_NFA         defl    $ - temp_NFA
 804+ 738A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 804+ 7384             >
 804+ 7384 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 804+ 7385 45 58 50 45 >                db      "EXPECT"               // name string in 7-bit ascii, but
 804+ 7389 43 54       >
 804+ 738B             >                org     $-1                 // alter last byte of Name just above to set
 804+ 738A D4          >                db      {b $} | END_BIT     // msb as name end
 804+ 738B             >
 804+ 738B E3 72       >                dw      last_NFA            // Link to previous definition Name
 804+ 738D             >EXPECT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 804+ 738D E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 804+ 738F             >                else
 804+ 738F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 804+ 738F             >                endif           ; ok        // for other definitions it "points" the correct handler
 804+ 738F             >                // Use of "; ok" to suppress "warning[fwdref]"
 804+ 738F             >
 804+ 738F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 805+ 738F EC 72 FD 6A                  dw      ACCEPT, DROP            // accept drop
 806+ 7393 BD 69                        dw      EXIT                    // ;
 807+ 7395
 808+ 7395              //  ______________________________________________________________________
 809+ 7395              //
 810+ 7395              // query        --
 811+ 7395              // Accept at most 80 character from console. CR stops.
 812+ 7395              // Text is stored in TIB. Variable IN is zeroed.
 813+ 7395                              Colon_Def QUERY, "QUERY", is_normal
 813+ 7395             >                New_Def  QUERY, "QUERY", Enter_Ptr, is_normal ; ok
 813+ 7395             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 813+ 7395             >
 813+ 7395             >                // dummy db directives used to calculate length of namec
 813+ 7395 51 55 45 52 >                db      "QUERY"
 813+ 7399 59          >
 813+ 739A             >len_NFA         defl    $ - temp_NFA
 813+ 739A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 813+ 7395             >
 813+ 7395 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 813+ 7396 51 55 45 52 >                db      "QUERY"               // name string in 7-bit ascii, but
 813+ 739A 59          >
 813+ 739B             >                org     $-1                 // alter last byte of Name just above to set
 813+ 739A D9          >                db      {b $} | END_BIT     // msb as name end
 813+ 739B             >
 813+ 739B 84 73       >                dw      last_NFA            // Link to previous definition Name
 813+ 739D             >QUERY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 813+ 739D E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 813+ 739F             >                else
 813+ 739F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 813+ 739F             >                endif           ; ok        // for other definitions it "points" the correct handler
 813+ 739F             >                // Use of "; ok" to suppress "warning[fwdref]"
 813+ 739F             >
 813+ 739F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 814+ 739F F5 6D F6 6B                  dw      TIB, FETCH              // tib @
 815+ 73A3 43 64 50 00                  dw      LIT, 80                 // 80
 816+ 73A7 8D 73                        dw      EXPECT                  // expect
 817+ 73A9 62 6D 6A 6E                  dw      ZERO, TO_IN, STORE      // 0 >in !
 817+ 73AD 03 6C
 818+ 73AF BD 69                        dw      EXIT                    // ;
 819+ 73B1
 820+ 73B1              //  ______________________________________________________________________
 821+ 73B1              //
 822+ 73B1              // fill        a n c --
 823+ 73B1              // If n > 0, fills n locations starting from address a with the value c.
 824+ 73B1                              New_Def FILL, "FILL", is_code, is_normal
 824+ 73B1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 824+ 73B1             >
 824+ 73B1             >                // dummy db directives used to calculate length of namec
 824+ 73B1 46 49 4C 4C >                db      "FILL"
 824+ 73B5             >len_NFA         defl    $ - temp_NFA
 824+ 73B5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 824+ 73B1             >
 824+ 73B1 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 824+ 73B2 46 49 4C 4C >                db      "FILL"               // name string in 7-bit ascii, but
 824+ 73B6             >                org     $-1                 // alter last byte of Name just above to set
 824+ 73B5 CC          >                db      {b $} | END_BIT     // msb as name end
 824+ 73B6             >
 824+ 73B6 95 73       >                dw      last_NFA            // Link to previous definition Name
 824+ 73B8             >FILL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 824+ 73B8 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 824+ 73B8             >                else
 824+ 73B8 BA 73       >                dw      $ + 2   ; ok        // is pointed by CFA
 824+ 73BA             >                endif           ; ok        // for other definitions it "points" the correct handler
 824+ 73BA             >                // Use of "; ok" to suppress "warning[fwdref]"
 824+ 73BA             >
 824+ 73BA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 825+ 73BA 69                           ld      l, c
 826+ 73BB 60                           ld      h, b
 827+ 73BC D1                           pop     de                  // de has character
 828+ 73BD C1                           pop     bc                  // bc has counter
 829+ 73BE E3                           ex      (sp), hl            // hl has address, save Instruction Pointer
 830+ 73BF              Fill_Loop:
 831+ 73BF 78                               ld      a, b
 832+ 73C0 B1                               or      c
 833+ 73C1 28 05                        jr      z, Fill_While_End
 834+ 73C3 73                               ld      (hl), e
 835+ 73C4 0B                               dec     bc
 836+ 73C5 23                               inc     hl
 837+ 73C6 18 F7                        jr      Fill_Loop
 838+ 73C8              Fill_While_End:
 839+ 73C8 C1                           pop     bc                  // Restore Instruction Pointer
 840+ 73C9
 841+ 73C9                              next
 841+ 73C9 DD E9       >                jp      (ix)
 842+ 73CB
 843+ 73CB              //  ______________________________________________________________________
 844+ 73CB              //
 845+ 73CB              // erase        a n --
 846+ 73CB              // If n > 0, fills n locations starting from address a with 'nul' characters.
 847+ 73CB                              Colon_Def ERASE, "ERASE", is_normal
 847+ 73CB             >                New_Def  ERASE, "ERASE", Enter_Ptr, is_normal ; ok
 847+ 73CB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 847+ 73CB             >
 847+ 73CB             >                // dummy db directives used to calculate length of namec
 847+ 73CB 45 52 41 53 >                db      "ERASE"
 847+ 73CF 45          >
 847+ 73D0             >len_NFA         defl    $ - temp_NFA
 847+ 73D0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 847+ 73CB             >
 847+ 73CB 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 847+ 73CC 45 52 41 53 >                db      "ERASE"               // name string in 7-bit ascii, but
 847+ 73D0 45          >
 847+ 73D1             >                org     $-1                 // alter last byte of Name just above to set
 847+ 73D0 C5          >                db      {b $} | END_BIT     // msb as name end
 847+ 73D1             >
 847+ 73D1 B1 73       >                dw      last_NFA            // Link to previous definition Name
 847+ 73D3             >ERASE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 847+ 73D3 E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 847+ 73D5             >                else
 847+ 73D5 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 847+ 73D5             >                endif           ; ok        // for other definitions it "points" the correct handler
 847+ 73D5             >                // Use of "; ok" to suppress "warning[fwdref]"
 847+ 73D5             >
 847+ 73D5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 848+ 73D5 62 6D B8 73                  dw      ZERO, FILL              // 0 fill
 849+ 73D9 BD 69                        dw      EXIT                    // ;
 850+ 73DB
 851+ 73DB              //  ______________________________________________________________________
 852+ 73DB              //
 853+ 73DB              // blanks       a n --
 854+ 73DB              // If n > 0, fills n locations starting from address a with 'nul' characters.
 855+ 73DB                              Colon_Def BLANKS, "BLANKS", is_normal
 855+ 73DB             >                New_Def  BLANKS, "BLANKS", Enter_Ptr, is_normal ; ok
 855+ 73DB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 855+ 73DB             >
 855+ 73DB             >                // dummy db directives used to calculate length of namec
 855+ 73DB 42 4C 41 4E >                db      "BLANKS"
 855+ 73DF 4B 53       >
 855+ 73E1             >len_NFA         defl    $ - temp_NFA
 855+ 73E1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 855+ 73DB             >
 855+ 73DB 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 855+ 73DC 42 4C 41 4E >                db      "BLANKS"               // name string in 7-bit ascii, but
 855+ 73E0 4B 53       >
 855+ 73E2             >                org     $-1                 // alter last byte of Name just above to set
 855+ 73E1 D3          >                db      {b $} | END_BIT     // msb as name end
 855+ 73E2             >
 855+ 73E2 CB 73       >                dw      last_NFA            // Link to previous definition Name
 855+ 73E4             >BLANKS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 855+ 73E4 E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 855+ 73E6             >                else
 855+ 73E6 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 855+ 73E6             >                endif           ; ok        // for other definitions it "points" the correct handler
 855+ 73E6             >                // Use of "; ok" to suppress "warning[fwdref]"
 855+ 73E6             >
 855+ 73E6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 856+ 73E6 8C 6D B8 73                  dw      BL, FILL                // bl fill
 857+ 73EA BD 69                        dw      EXIT                    // ;
 858+ 73EC
 859+ 73EC              //  ______________________________________________________________________
 860+ 73EC              //
 861+ 73EC              // hold         c --
 862+ 73EC              // Used between <# and #> to insert a character c in numeric formatting.
 863+ 73EC                              Colon_Def HOLD, "HOLD", is_normal
 863+ 73EC             >                New_Def  HOLD, "HOLD", Enter_Ptr, is_normal ; ok
 863+ 73EC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 863+ 73EC             >
 863+ 73EC             >                // dummy db directives used to calculate length of namec
 863+ 73EC 48 4F 4C 44 >                db      "HOLD"
 863+ 73F0             >len_NFA         defl    $ - temp_NFA
 863+ 73F0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 863+ 73EC             >
 863+ 73EC 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 863+ 73ED 48 4F 4C 44 >                db      "HOLD"               // name string in 7-bit ascii, but
 863+ 73F1             >                org     $-1                 // alter last byte of Name just above to set
 863+ 73F0 C4          >                db      {b $} | END_BIT     // msb as name end
 863+ 73F1             >
 863+ 73F1 DB 73       >                dw      last_NFA            // Link to previous definition Name
 863+ 73F3             >HOLD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 863+ 73F3 E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 863+ 73F5             >                else
 863+ 73F5 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 863+ 73F5             >                endif           ; ok        // for other definitions it "points" the correct handler
 863+ 73F5             >                // Use of "; ok" to suppress "warning[fwdref]"
 863+ 73F5             >
 863+ 73F5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 864+ 73F5 83 6D                        dw      NEG_ONE                 // -1
 865+ 73F7 E3 6E D3 6B                  dw      HLD, PLUSSTORE          // hld +!
 866+ 73FB E3 6E F6 6B                  dw      HLD, FETCH, CSTORE      // hld @ c!
 866+ 73FF 1F 6C
 867+ 7401 BD 69                        dw      EXIT                    // ;
 868+ 7403
 869+ 7403              //  ______________________________________________________________________
 870+ 7403              //
 871+ 7403              // pad         -- a
 872+ 7403              // leaves the buffer text address. This is at a fixed distance over HERE.
 873+ 7403                              Colon_Def PAD, "PAD", is_normal
 873+ 7403             >                New_Def  PAD, "PAD", Enter_Ptr, is_normal ; ok
 873+ 7403             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 873+ 7403             >
 873+ 7403             >                // dummy db directives used to calculate length of namec
 873+ 7403 50 41 44    >                db      "PAD"
 873+ 7406             >len_NFA         defl    $ - temp_NFA
 873+ 7406             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 873+ 7403             >
 873+ 7403 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 873+ 7404 50 41 44    >                db      "PAD"               // name string in 7-bit ascii, but
 873+ 7407             >                org     $-1                 // alter last byte of Name just above to set
 873+ 7406 C4          >                db      {b $} | END_BIT     // msb as name end
 873+ 7407             >
 873+ 7407 EC 73       >                dw      last_NFA            // Link to previous definition Name
 873+ 7409             >PAD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 873+ 7409 E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 873+ 740B             >                else
 873+ 740B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 873+ 740B             >                endif           ; ok        // for other definitions it "points" the correct handler
 873+ 740B             >                // Use of "; ok" to suppress "warning[fwdref]"
 873+ 740B             >
 873+ 740B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 874+ 740B 34 6F                        dw      HERE                    // here
 875+ 740D 43 64 44 00                  dw      LIT, 68                 // 68
 876+ 7411 4F 6A                        dw      PLUS                    // +
 877+ 7413 BD 69                        dw      EXIT                    // ;
 878+ 7415
 879+ 7415              //  ______________________________________________________________________
 880+ 7415              //
 881+ 7415              // word         c -- a
 882+ 7415              // reads characters from input streams until it encouners a c delimiter.
 883+ 7415              // Stores that packet so it starts from HERE
 884+ 7415              // WORD leaves a counter as first byte and ends the packet with two spaces.
 885+ 7415              // Other occurrences of c are ignored.
 886+ 7415              // If BLK is zero, text is taken from terminal buffer TIB.
 887+ 7415              // Otherwise text is taken from the disk-block given by BLK.
 888+ 7415              // "in" variable is incremented of the number of character read.
 889+ 7415              // The number of characters read is given by ENCLOSE.
 890+ 7415                              Colon_Def WORD, "WORD", is_normal
 890+ 7415             >                New_Def  WORD, "WORD", Enter_Ptr, is_normal ; ok
 890+ 7415             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 890+ 7415             >
 890+ 7415             >                // dummy db directives used to calculate length of namec
 890+ 7415 57 4F 52 44 >                db      "WORD"
 890+ 7419             >len_NFA         defl    $ - temp_NFA
 890+ 7419             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 890+ 7415             >
 890+ 7415 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 890+ 7416 57 4F 52 44 >                db      "WORD"               // name string in 7-bit ascii, but
 890+ 741A             >                org     $-1                 // alter last byte of Name just above to set
 890+ 7419 C4          >                db      {b $} | END_BIT     // msb as name end
 890+ 741A             >
 890+ 741A 03 74       >                dw      last_NFA            // Link to previous definition Name
 890+ 741C             >WORD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 890+ 741C E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 890+ 741E             >                else
 890+ 741E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 890+ 741E             >                endif           ; ok        // for other definitions it "points" the correct handler
 890+ 741E             >                // Use of "; ok" to suppress "warning[fwdref]"
 890+ 741E             >
 890+ 741E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 891+ 741E 61 6E F6 6B                  dw      BLK, FETCH              // blk @
 892+ 7422                                                              // if
 893+ 7422 7D 64                        dw      ZBRANCH
 894+ 7424 0C 00                        dw      Word_Else - $
 895+ 7426 61 6E F6 6B                  dw          BLK, FETCH          //      blk @
 896+ 742A 93 7D                        dw          BLOCK               //      block ( forward )
 897+ 742C                                                              // else
 898+ 742C 66 64                        dw      BRANCH
 899+ 742E 06 00                        dw      Word_Endif - $
 900+ 7430              Word_Else:
 901+ 7430 F5 6D F6 6B                  dw         TIB, FETCH           //      tib @
 902+ 7434              Word_Endif:                                     // endif
 903+ 7434 6A 6E F6 6B                  dw      TO_IN, FETCH, PLUS      // >in @ +
 903+ 7438 4F 6A
 904+ 743A 25 6B F0 65                  dw      SWAP, ENCLOSE           // swap enclose
 905+ 743E 34 6F 43 64                  dw      HERE, LIT, 34, BLANKS   // here 34 blanks
 905+ 7442 22 00 E4 73
 906+ 7446 6A 6E D3 6B                  dw      TO_IN, PLUSSTORE        // >in @ +
 907+ 744A ED 6A 88 6F                  dw      OVER, SUBTRACT, TO_R    // over - >r
 907+ 744E E6 69
 908+ 7450 0D 6A 34 6F                  dw      R_OP, HERE, CSTORE      // r here c!
 908+ 7454 1F 6C
 909+ 7456 4F 6A                        dw      PLUS                    // +
 910+ 7458 34 6F 78 6A                  dw      HERE, ONE_PLUS, R_TO    // here 1+ r>
 910+ 745C FA 69
 911+ 745E AB 68                        dw      CMOVE                   // cmove
 912+ 7460 34 6F                        dw      HERE                    // here
 913+ 7462 BD 69                        dw      EXIT                    // ;
 914+ 7464
 915+ 7464              //  ______________________________________________________________________
 916+ 7464              //
 917+ 7464              // (.")         --
 918+ 7464              // Direct procedure compiled by ." and  .(  It executes TYPE.
 919+ 7464                              Colon_Def C_DOT_QUOTE, '(.")', is_normal
 919+ 7464             >                New_Def  C_DOT_QUOTE, '(.")', Enter_Ptr, is_normal ; ok
 919+ 7464             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 919+ 7464             >
 919+ 7464             >                // dummy db directives used to calculate length of namec
 919+ 7464 28 2E 22 29 >                db      '(.")'
 919+ 7468             >len_NFA         defl    $ - temp_NFA
 919+ 7468             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 919+ 7464             >
 919+ 7464 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 919+ 7465 28 2E 22 29 >                db      '(.")'               // name string in 7-bit ascii, but
 919+ 7469             >                org     $-1                 // alter last byte of Name just above to set
 919+ 7468 A9          >                db      {b $} | END_BIT     // msb as name end
 919+ 7469             >
 919+ 7469 15 74       >                dw      last_NFA            // Link to previous definition Name
 919+ 746B             >C_DOT_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 919+ 746B E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 919+ 746D             >                else
 919+ 746D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 919+ 746D             >                endif           ; ok        // for other definitions it "points" the correct handler
 919+ 746D             >                // Use of "; ok" to suppress "warning[fwdref]"
 919+ 746D             >
 919+ 746D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 920+ 746D 0D 6A 86 72                  dw      R_OP, COUNT             // r count
 921+ 7471 32 6B 78 6A                  dw      DUP, ONE_PLUS           // dup 1+
 922+ 7475 FA 69 4F 6A                  dw      R_TO, PLUS, TO_R        // r> + >r  ( advance IP )
 922+ 7479 E6 69
 923+ 747B 99 72                        dw      TYPE                    // type
 924+ 747D BD 69                        dw      EXIT                    // ;
 925+ 747F
 926+ 747F              //  ______________________________________________________________________
 927+ 747F              //
 928+ 747F              // char         -- c
 929+ 747F              // get first character from next input word
 930+ 747F                              Colon_Def CHAR,  "CHAR", is_normal
 930+ 747F             >                New_Def  CHAR, "CHAR", Enter_Ptr, is_normal ; ok
 930+ 747F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 930+ 747F             >
 930+ 747F             >                // dummy db directives used to calculate length of namec
 930+ 747F 43 48 41 52 >                db      "CHAR"
 930+ 7483             >len_NFA         defl    $ - temp_NFA
 930+ 7483             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 930+ 747F             >
 930+ 747F 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 930+ 7480 43 48 41 52 >                db      "CHAR"               // name string in 7-bit ascii, but
 930+ 7484             >                org     $-1                 // alter last byte of Name just above to set
 930+ 7483 D2          >                db      {b $} | END_BIT     // msb as name end
 930+ 7484             >
 930+ 7484 64 74       >                dw      last_NFA            // Link to previous definition Name
 930+ 7486             >CHAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 930+ 7486 E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 930+ 7488             >                else
 930+ 7488 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 930+ 7488             >                endif           ; ok        // for other definitions it "points" the correct handler
 930+ 7488             >                // Use of "; ok" to suppress "warning[fwdref]"
 930+ 7488             >
 930+ 7488             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 931+ 7488 8C 6D 1C 74                  dw      BL, WORD                // bl word
 932+ 748C 78 6A 11 6C                  dw      ONE_PLUS, CFETCH        // 1+ c@
 933+ 7490 BD 69                        dw      EXIT                    // ;
 934+ 7492
 935+ 7492              //  ______________________________________________________________________
 936+ 7492              //
 937+ 7492              // ,"           --
 938+ 7492              // compiles a string terminated by " as a counted string from next input stream
 939+ 7492                              Colon_Def COMMA_QUOTE,  ',"', is_normal
 939+ 7492             >                New_Def  COMMA_QUOTE, ',"', Enter_Ptr, is_normal ; ok
 939+ 7492             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 939+ 7492             >
 939+ 7492             >                // dummy db directives used to calculate length of namec
 939+ 7492 2C 22       >                db      ',"'
 939+ 7494             >len_NFA         defl    $ - temp_NFA
 939+ 7494             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 939+ 7492             >
 939+ 7492 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 939+ 7493 2C 22       >                db      ',"'               // name string in 7-bit ascii, but
 939+ 7495             >                org     $-1                 // alter last byte of Name just above to set
 939+ 7494 A2          >                db      {b $} | END_BIT     // msb as name end
 939+ 7495             >
 939+ 7495 7F 74       >                dw      last_NFA            // Link to previous definition Name
 939+ 7497             >COMMA_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 939+ 7497 E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 939+ 7499             >                else
 939+ 7499 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 939+ 7499             >                endif           ; ok        // for other definitions it "points" the correct handler
 939+ 7499             >                // Use of "; ok" to suppress "warning[fwdref]"
 939+ 7499             >
 939+ 7499             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 940+ 7499 43 64 22 00                  dw      LIT, DQUOTE_CHAR        // [char] "
 941+ 749D 1C 74                        dw      WORD                    // word
 942+ 749F 11 6C 78 6A                  dw      CFETCH, ONE_PLUS        // c@ 1+
 943+ 74A3 44 6F                        dw      ALLOT                   // allot
 944+ 74A5 62 6D 61 6F                  dw      ZERO, CCOMMA            // 0 c,  ( nul-terminated string - useful anyway )
 945+ 74A9 BD 69                        dw      EXIT
 946+ 74AB
 947+ 74AB              //  ______________________________________________________________________
 948+ 74AB              //
 949+ 74AB              // .c           c --
 950+ 74AB              // intermediate general purpose string builder, used by ." and .(
 951+ 74AB                              Colon_Def DOT_C,  ".C", is_immediate
 951+ 74AB             >                New_Def  DOT_C, ".C", Enter_Ptr, is_immediate ; ok
 951+ 74AB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 951+ 74AB             >
 951+ 74AB             >                // dummy db directives used to calculate length of namec
 951+ 74AB 2E 43       >                db      ".C"
 951+ 74AD             >len_NFA         defl    $ - temp_NFA
 951+ 74AD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 951+ 74AB             >
 951+ 74AB C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 951+ 74AC 2E 43       >                db      ".C"               // name string in 7-bit ascii, but
 951+ 74AE             >                org     $-1                 // alter last byte of Name just above to set
 951+ 74AD C3          >                db      {b $} | END_BIT     // msb as name end
 951+ 74AE             >
 951+ 74AE 92 74       >                dw      last_NFA            // Link to previous definition Name
 951+ 74B0             >DOT_C:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 951+ 74B0 E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 951+ 74B2             >                else
 951+ 74B2 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 951+ 74B2             >                endif           ; ok        // for other definitions it "points" the correct handler
 951+ 74B2             >                // Use of "; ok" to suppress "warning[fwdref]"
 951+ 74B2             >
 951+ 74B2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 952+ 74B2 AD 6E F6 6B                  dw      STATE, FETCH            // state @
 953+ 74B6                                                              // if
 954+ 74B6 7D 64                        dw      ZBRANCH
 955+ 74B8 12 00                        dw      Dot_C_Else - $
 956+ 74BA 92 71 6B 74                  dw          COMPILE, C_DOT_QUOTE //     compile (.")
 957+ 74BE 1C 74 11 6C                  dw          WORD, CFETCH        //      word c@
 958+ 74C2 78 6A 44 6F                  dw          ONE_PLUS, ALLOT     //      1+ allot
 959+ 74C6                                                              // else
 960+ 74C6 66 64                        dw      BRANCH
 961+ 74C8 08 00                        dw      Dot_C_Endif - $
 962+ 74CA              Dot_C_Else:
 963+ 74CA 1C 74 86 72                  dw          WORD, COUNT, TYPE   //      word count type
 963+ 74CE 99 72
 964+ 74D0              Dot_C_Endif:                                    // endif
 965+ 74D0 BD 69                        dw      EXIT                    ;
 966+ 74D2
 967+ 74D2              //  ______________________________________________________________________
 968+ 74D2              //
 969+ 74D2              // ."           c --
 970+ 74D2                              Colon_Def DOT_QUOTE,  '."', is_immediate
 970+ 74D2             >                New_Def  DOT_QUOTE, '."', Enter_Ptr, is_immediate ; ok
 970+ 74D2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 970+ 74D2             >
 970+ 74D2             >                // dummy db directives used to calculate length of namec
 970+ 74D2 2E 22       >                db      '."'
 970+ 74D4             >len_NFA         defl    $ - temp_NFA
 970+ 74D4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 970+ 74D2             >
 970+ 74D2 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 970+ 74D3 2E 22       >                db      '."'               // name string in 7-bit ascii, but
 970+ 74D5             >                org     $-1                 // alter last byte of Name just above to set
 970+ 74D4 A2          >                db      {b $} | END_BIT     // msb as name end
 970+ 74D5             >
 970+ 74D5 AB 74       >                dw      last_NFA            // Link to previous definition Name
 970+ 74D7             >DOT_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 970+ 74D7 E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 970+ 74D9             >                else
 970+ 74D9 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 970+ 74D9             >                endif           ; ok        // for other definitions it "points" the correct handler
 970+ 74D9             >                // Use of "; ok" to suppress "warning[fwdref]"
 970+ 74D9             >
 970+ 74D9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 971+ 74D9 43 64 22 00                  dw      LIT, DQUOTE_CHAR        // [char] "
 972+ 74DD B0 74                        dw      DOT_C                   // [compile] .c
 973+ 74DF BD 69                        dw      EXIT                    // ; immediate
 974+ 74E1
 975+ 74E1              //  ______________________________________________________________________
 976+ 74E1              //
 977+ 74E1              // .(           c --
 978+ 74E1                              Colon_Def DOT_BRACKET,  ".(", is_immediate
 978+ 74E1             >                New_Def  DOT_BRACKET, ".(", Enter_Ptr, is_immediate ; ok
 978+ 74E1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 978+ 74E1             >
 978+ 74E1             >                // dummy db directives used to calculate length of namec
 978+ 74E1 2E 28       >                db      ".("
 978+ 74E3             >len_NFA         defl    $ - temp_NFA
 978+ 74E3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 978+ 74E1             >
 978+ 74E1 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 978+ 74E2 2E 28       >                db      ".("               // name string in 7-bit ascii, but
 978+ 74E4             >                org     $-1                 // alter last byte of Name just above to set
 978+ 74E3 A8          >                db      {b $} | END_BIT     // msb as name end
 978+ 74E4             >
 978+ 74E4 D2 74       >                dw      last_NFA            // Link to previous definition Name
 978+ 74E6             >DOT_BRACKET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 978+ 74E6 E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 978+ 74E8             >                else
 978+ 74E8 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 978+ 74E8             >                endif           ; ok        // for other definitions it "points" the correct handler
 978+ 74E8             >                // Use of "; ok" to suppress "warning[fwdref]"
 978+ 74E8             >
 978+ 74E8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 979+ 74E8 43 64 29 00                  dw      LIT, ")"                // [char] )
 980+ 74EC B0 74                        dw      DOT_C                   // [compile] .c
 981+ 74EE BD 69                        dw      EXIT                    // ; immediate
 982+ 74F0
 983+ 74F0              //  ______________________________________________________________________
 984+ 74F0              //
 985+ 74F0              // (sgn)        a -- a f
 986+ 74F0              // determines if char in addr a is a sign (+ or -), and in that case increments
 987+ 74F0              // a flag. Returns f as the sign, true for negative, false for positive.
 988+ 74F0              // called by NUMBER and (EXP)
 989+ 74F0                              Colon_Def CSGN,  "(SGN)", is_normal
 989+ 74F0             >                New_Def  CSGN, "(SGN)", Enter_Ptr, is_normal ; ok
 989+ 74F0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 989+ 74F0             >
 989+ 74F0             >                // dummy db directives used to calculate length of namec
 989+ 74F0 28 53 47 4E >                db      "(SGN)"
 989+ 74F4 29          >
 989+ 74F5             >len_NFA         defl    $ - temp_NFA
 989+ 74F5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 989+ 74F0             >
 989+ 74F0 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 989+ 74F1 28 53 47 4E >                db      "(SGN)"               // name string in 7-bit ascii, but
 989+ 74F5 29          >
 989+ 74F6             >                org     $-1                 // alter last byte of Name just above to set
 989+ 74F5 A9          >                db      {b $} | END_BIT     // msb as name end
 989+ 74F6             >
 989+ 74F6 E1 74       >                dw      last_NFA            // Link to previous definition Name
 989+ 74F8             >CSGN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 989+ 74F8 E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 989+ 74FA             >                else
 989+ 74FA ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 989+ 74FA             >                endif           ; ok        // for other definitions it "points" the correct handler
 989+ 74FA             >                // Use of "; ok" to suppress "warning[fwdref]"
 989+ 74FA             >
 989+ 74FA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 990+ 74FA 32 6B 78 6A                  dw      DUP, ONE_PLUS, CFETCH   // dup 1+ c@
 990+ 74FE 11 6C
 991+ 7500 32 6B 43 64                  dw      DUP, LIT, "-", EQUALS   // dup [char] - =
 991+ 7504 2D 00 96 6F
 992+ 7508                                                              // if
 993+ 7508 7D 64                        dw      ZBRANCH
 994+ 750A 12 00                        dw      CSgn_Else_0 - $
 995+ 750C FD 6A                        dw          DROP                //      drop
 996+ 750E 78 6A                        dw          ONE_PLUS            //      1+
 997+ 7510 6A 6D C0 6E                  dw          ONE, DPL, PLUSSTORE //      1 dpl +!
 997+ 7514 D3 6B
 998+ 7516 6A 6D                        dw          ONE                 //      1
 999+ 7518                                                              // else
1000+ 7518 66 64                        dw      BRANCH
1001+ 751A 16 00                        dw      CSgn_Endif_0 - $
1002+ 751C              CSgn_Else_0:
1003+ 751C 43 64 2B 00                  dw          LIT, "+", EQUALS    //      [char] + =
1003+ 7520 96 6F
1004+ 7522                                                              //      if
1005+ 7522 7D 64                        dw          ZBRANCH
1006+ 7524 0A 00                        dw          CSgn_Endif_1 - $
1007+ 7526 78 6A                        dw              ONE_PLUS        //          1+
1008+ 7528 6A 6D C0 6E                  dw              ONE, DPL        //          1 dpl
1009+ 752C D3 6B                        dw              PLUSSTORE       //          +!
1010+ 752E              CSgn_Endif_1                                    //      endif
1011+ 752E 62 6D                        dw          ZERO                //      0
1012+ 7530              CSgn_Endif_0:                                   // endif
1013+ 7530 BD 69                        dw      EXIT
1014+ 7532
1015+ 7532              //  ______________________________________________________________________
1016+ 7532              //
1017+ 7532              // (number)     d a -- d1 a1
1018+ 7532              // using the current BASE parse characters stored in address a
1019+ 7532              // accumulating a double precision integer d
1020+ 7532              // the process stops at the first not-convertible character
1021+ 7532              // A double-number is kept in CPU registers as HLDE.
1022+ 7532              // On the stack a double number is treated as two single numbers
1023+ 7532              // where HL is on the top of the stack and DE is the second from top,
1024+ 7532              // so in the stack memory it appears as LHED.
1025+ 7532              // Instead, in 2VARIABLE a double number is stored as EDLH.
1026+ 7532                              Colon_Def CNUMBER,  "(NUMBER)", is_normal
1026+ 7532             >                New_Def  CNUMBER, "(NUMBER)", Enter_Ptr, is_normal ; ok
1026+ 7532             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1026+ 7532             >
1026+ 7532             >                // dummy db directives used to calculate length of namec
1026+ 7532 28 4E 55 4D >                db      "(NUMBER)"
1026+ 7536 42 45 52 29 >
1026+ 753A             >len_NFA         defl    $ - temp_NFA
1026+ 753A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1026+ 7532             >
1026+ 7532 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1026+ 7533 28 4E 55 4D >                db      "(NUMBER)"               // name string in 7-bit ascii, but
1026+ 7537 42 45 52 29 >
1026+ 753B             >                org     $-1                 // alter last byte of Name just above to set
1026+ 753A A9          >                db      {b $} | END_BIT     // msb as name end
1026+ 753B             >
1026+ 753B F0 74       >                dw      last_NFA            // Link to previous definition Name
1026+ 753D             >CNUMBER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1026+ 753D E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1026+ 753F             >                else
1026+ 753F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1026+ 753F             >                endif           ; ok        // for other definitions it "points" the correct handler
1026+ 753F             >                // Use of "; ok" to suppress "warning[fwdref]"
1026+ 753F             >
1026+ 753F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1027+ 753F                                                              // begin
1028+ 753F              CNumber_Begin:
1029+ 753F 78 6A                        dw          ONE_PLUS            //      1+
1030+ 7541 32 6B E6 69                  dw          DUP, TO_R           //      dup >r
1031+ 7545 11 6C                        dw          CFETCH              //      @
1032+ 7547 B7 6E F6 6B                  dw          BASE, FETCH         //      base @
1033+ 754B 23 65                        dw          DIGIT               //      digit
1034+ 754D                                                              // while
1035+ 754D 7D 64                        dw      ZBRANCH
1036+ 754F 2C 00                        dw      CNumber_While_end - $
1037+ 7551 25 6B                        dw          SWAP                //      swap
1038+ 7553 B7 6E F6 6B                  dw          BASE, FETCH         //      base @
1039+ 7557 E0 68                        dw          UM_MUL              //      um*
1040+ 7559 FD 6A 3F 6B                  dw          DROP, ROT           //      drop rot
1041+ 755D B7 6E F6 6B                  dw          BASE, FETCH         //      base @
1042+ 7561 E0 68                        dw          UM_MUL              //      um*
1043+ 7563 5C 6A                        dw          DPLUS               //      d+
1044+ 7565 C0 6E F6 6B                  dw          DPL, FETCH          //      dpl @
1045+ 7569 78 6A                        dw          ONE_PLUS            //      1+
1046+ 756B                                                              //      if
1047+ 756B 7D 64                        dw          ZBRANCH
1048+ 756D 08 00                        dw          CNumber_Endif - $
1049+ 756F 6A 6D C0 6E                  dw              ONE, DPL        //          1 dpl
1050+ 7573 D3 6B                        dw              PLUSSTORE       //          +!
1051+ 7575              CNumber_Endif:                                  //      endif
1052+ 7575 FA 69                        dw             R_TO             //      r>  ( balance rp )
1053+ 7577 66 64                        dw      BRANCH
1054+ 7579 C6 FF                        dw      CNumber_Begin - $
1055+ 757B              CNumber_While_end:                              // repeat
1056+ 757B FA 69                        dw      R_TO                    // r>  ( balance rp on exit while-repeat )
1057+ 757D BD 69                        dw      EXIT                    // ;
1058+ 757F
1059+ 757F              //  ______________________________________________________________________
1060+ 757F              //
1061+ 757F              // number       a -- d
1062+ 757F                              Colon_Def NUMBER,  "NUMBER", is_normal
1062+ 757F             >                New_Def  NUMBER, "NUMBER", Enter_Ptr, is_normal ; ok
1062+ 757F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1062+ 757F             >
1062+ 757F             >                // dummy db directives used to calculate length of namec
1062+ 757F 4E 55 4D 42 >                db      "NUMBER"
1062+ 7583 45 52       >
1062+ 7585             >len_NFA         defl    $ - temp_NFA
1062+ 7585             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1062+ 757F             >
1062+ 757F 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1062+ 7580 4E 55 4D 42 >                db      "NUMBER"               // name string in 7-bit ascii, but
1062+ 7584 45 52       >
1062+ 7586             >                org     $-1                 // alter last byte of Name just above to set
1062+ 7585 D2          >                db      {b $} | END_BIT     // msb as name end
1062+ 7586             >
1062+ 7586 32 75       >                dw      last_NFA            // Link to previous definition Name
1062+ 7588             >NUMBER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1062+ 7588 E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1062+ 758A             >                else
1062+ 758A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1062+ 758A             >                endif           ; ok        // for other definitions it "points" the correct handler
1062+ 758A             >                // Use of "; ok" to suppress "warning[fwdref]"
1062+ 758A             >
1062+ 758A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1063+ 758A 62 6D 62 6D                  dw      ZERO, ZERO              // 0 0
1064+ 758E 3F 6B                        dw      ROT                     // rot
1065+ 7590 F8 74 E6 69                  dw      CSGN, TO_R              // (sgn) >r
1066+ 7594 83 6D C0 6E                  dw      NEG_ONE, DPL, STORE     // -1 dpl !
1066+ 7598 03 6C
1067+ 759A 3D 75                        dw      CNUMBER                 // (number)
1068+ 759C 32 6B 11 6C                  dw      DUP, CFETCH             // dup c@
1069+ 75A0 43 64 2E 00                  dw      LIT, 46, EQUALS         // [char] . =  ( decimal point )
1069+ 75A4 96 6F
1070+ 75A6                                                              // if
1071+ 75A6 7D 64                        dw      ZBRANCH
1072+ 75A8 0A 00                        dw      Number_Endif_1 - $
1073+ 75AA 62 6D C0 6E                  dw          ZERO, DPL, STORE    //      0 dpl !
1073+ 75AE 03 6C
1074+ 75B0 3D 75                        dw          CNUMBER             //      (number)
1075+ 75B2              Number_Endif_1:                                 // endif
1076+ 75B2 11 6C 8C 6D                  dw      CFETCH, BL              // c@ bl
1077+ 75B6 88 6F 62 6D                  dw      SUBTRACT, ZERO, QERROR  // - 0 ?error
1077+ 75BA FF 70
1078+ 75BC FA 69                        dw      R_TO                    // r>
1079+ 75BE                                                              // if
1080+ 75BE 7D 64                        dw      ZBRANCH
1081+ 75C0 04 00                        dw      Number_Endif_2 - $
1082+ 75C2 CF 6A                        dw          DMINUS              //      dminus
1083+ 75C4              Number_Endif_2:                                 // endif
1084+ 75C4 BD 69                        dw      EXIT                    // ;
1085+ 75C6
1086+ 75C6              //  ______________________________________________________________________
1087+ 75C6              //
1088+ 75C6              // -find        a -- d
1089+ 75C6                              Colon_Def LFIND,  "-FIND", is_normal
1089+ 75C6             >                New_Def  LFIND, "-FIND", Enter_Ptr, is_normal ; ok
1089+ 75C6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1089+ 75C6             >
1089+ 75C6             >                // dummy db directives used to calculate length of namec
1089+ 75C6 2D 46 49 4E >                db      "-FIND"
1089+ 75CA 44          >
1089+ 75CB             >len_NFA         defl    $ - temp_NFA
1089+ 75CB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1089+ 75C6             >
1089+ 75C6 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1089+ 75C7 2D 46 49 4E >                db      "-FIND"               // name string in 7-bit ascii, but
1089+ 75CB 44          >
1089+ 75CC             >                org     $-1                 // alter last byte of Name just above to set
1089+ 75CB C4          >                db      {b $} | END_BIT     // msb as name end
1089+ 75CC             >
1089+ 75CC 7F 75       >                dw      last_NFA            // Link to previous definition Name
1089+ 75CE             >LFIND:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1089+ 75CE E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1089+ 75D0             >                else
1089+ 75D0 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1089+ 75D0             >                endif           ; ok        // for other definitions it "points" the correct handler
1089+ 75D0             >                // Use of "; ok" to suppress "warning[fwdref]"
1089+ 75D0             >
1089+ 75D0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1090+ 75D0 8C 6D 1C 74                  dw      BL, WORD                // bl word
1091+ 75D4 95 6E F6 6B                  dw      CONTEXT, FETCH, FETCH   // context @ @
1091+ 75D8 F6 6B
1092+ 75DA 98 65                        dw      C_FIND                  // (find)
1093+ 75DC 20 70                        dw      QDUP                    // ?dup
1094+ 75DE 14 6A                        dw      ZEQUAL                  // 0=
1095+ 75E0                                                              // if
1096+ 75E0 7D 64                        dw      ZBRANCH
1097+ 75E2 08 00                        dw      LFind_Endif - $
1098+ 75E4 34 6F                        dw          HERE                //      here
1099+ 75E6 7B 70                        dw          LATEST              //      latest
1100+ 75E8 98 65                        dw          C_FIND              //      (find)
1101+ 75EA              LFind_Endif:                                    // endif
1102+ 75EA BD 69                        dw      EXIT                    // ;
1103+ 75EC
1104+ 75EC              //  ______________________________________________________________________
1105+ 75EC              //
1106+ 75EC              // (abort)      --
1107+ 75EC                              Colon_Def CABORT,  "(ABORT)", is_normal
1107+ 75EC             >                New_Def  CABORT, "(ABORT)", Enter_Ptr, is_normal ; ok
1107+ 75EC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1107+ 75EC             >
1107+ 75EC             >                // dummy db directives used to calculate length of namec
1107+ 75EC 28 41 42 4F >                db      "(ABORT)"
1107+ 75F0 52 54 29    >
1107+ 75F3             >len_NFA         defl    $ - temp_NFA
1107+ 75F3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1107+ 75EC             >
1107+ 75EC 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1107+ 75ED 28 41 42 4F >                db      "(ABORT)"               // name string in 7-bit ascii, but
1107+ 75F1 52 54 29    >
1107+ 75F4             >                org     $-1                 // alter last byte of Name just above to set
1107+ 75F3 A9          >                db      {b $} | END_BIT     // msb as name end
1107+ 75F4             >
1107+ 75F4 C6 75       >                dw      last_NFA            // Link to previous definition Name
1107+ 75F6             >CABORT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1107+ 75F6 E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1107+ 75F8             >                else
1107+ 75F8 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1107+ 75F8             >                endif           ; ok        // for other definitions it "points" the correct handler
1107+ 75F8             >                // Use of "; ok" to suppress "warning[fwdref]"
1107+ 75F8             >
1107+ 75F8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1108+ 75F8 CB 78                        dw      ABORT                   // abort
1109+ 75FA BD 69                        dw      EXIT                    // ;
1110+ 75FC
1111+ 75FC              //  ______________________________________________________________________
1112+ 75FC              //
1113+ 75FC              // error        n --
1114+ 75FC              // raise an error
1115+ 75FC              // if WARNING is 0, prints "MSG#n".
1116+ 75FC              // if WARNING is 1, prints line n of screen 4.
1117+ 75FC              // if WARNING is -1 does (ABORT) that normally does ABORT
1118+ 75FC              // value can be negative or beyond block 4.
1119+ 75FC                              Colon_Def ERROR,  "ERROR", is_normal
1119+ 75FC             >                New_Def  ERROR, "ERROR", Enter_Ptr, is_normal ; ok
1119+ 75FC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1119+ 75FC             >
1119+ 75FC             >                // dummy db directives used to calculate length of namec
1119+ 75FC 45 52 52 4F >                db      "ERROR"
1119+ 7600 52          >
1119+ 7601             >len_NFA         defl    $ - temp_NFA
1119+ 7601             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1119+ 75FC             >
1119+ 75FC 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1119+ 75FD 45 52 52 4F >                db      "ERROR"               // name string in 7-bit ascii, but
1119+ 7601 52          >
1119+ 7602             >                org     $-1                 // alter last byte of Name just above to set
1119+ 7601 D2          >                db      {b $} | END_BIT     // msb as name end
1119+ 7602             >
1119+ 7602 EC 75       >                dw      last_NFA            // Link to previous definition Name
1119+ 7604             >ERROR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1119+ 7604 E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1119+ 7606             >                else
1119+ 7606 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1119+ 7606             >                endif           ; ok        // for other definitions it "points" the correct handler
1119+ 7606             >                // Use of "; ok" to suppress "warning[fwdref]"
1119+ 7606             >
1119+ 7606             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1120+ 7606 0D 6E F6 6B                  dw      WARNING, FETCH, ZLESS   // warning @ 0<
1120+ 760A 27 6A
1121+ 760C                                                              // if
1122+ 760C 7D 64                        dw      ZBRANCH
1123+ 760E 04 00                        dw      Error_Endif_1 - $
1124+ 7610 F6 75                        dw          CABORT              //      (abort)
1125+ 7612              Error_Endif_1:                                  // endif
1126+ 7612 34 6F 86 72                  dw      HERE, COUNT, TYPE       // here count type
1126+ 7616 99 72
1127+ 7618 6B 74                        dw      C_DOT_QUOTE             // .( ? )
1128+ 761A 02 3F 20                     db      2, "? "
1129+ 761D BE 7A                        dw      MESSAGE                 // message  ( forward )
1130+ 761F E4 6D F6 6B                  dw      S0, FETCH, SPSTORE      // s0 @ sp!
1130+ 7623 96 69
1131+ 7625 61 6E F6 6B                  dw      BLK, FETCH, LDUP        // blk @ -dup
1131+ 7629 0E 70
1132+ 762B                                                              // if
1133+ 762B 7D 64                        dw      ZBRANCH
1134+ 762D 08 00                        dw      Error_Endif_2 - $
1135+ 762F 6A 6E F6 6B                  dw          TO_IN, FETCH, SWAP  //      >in @ swap
1135+ 7633 25 6B
1136+ 7635              Error_Endif_2:                                  // endif
1137+ 7635 8A 78                        dw      QUIT                    // quit ( forward )
1138+ 7637 BD 69                        dw      EXIT                    // ;
1139+ 7639              //  ______________________________________________________________________
1140+ 7639              //
1141+ 7639              // id.          nfa --
1142+ 7639                              Colon_Def ID_DOT,  "ID.", is_normal
1142+ 7639             >                New_Def  ID_DOT, "ID.", Enter_Ptr, is_normal ; ok
1142+ 7639             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1142+ 7639             >
1142+ 7639             >                // dummy db directives used to calculate length of namec
1142+ 7639 49 44 2E    >                db      "ID."
1142+ 763C             >len_NFA         defl    $ - temp_NFA
1142+ 763C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1142+ 7639             >
1142+ 7639 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1142+ 763A 49 44 2E    >                db      "ID."               // name string in 7-bit ascii, but
1142+ 763D             >                org     $-1                 // alter last byte of Name just above to set
1142+ 763C AE          >                db      {b $} | END_BIT     // msb as name end
1142+ 763D             >
1142+ 763D FC 75       >                dw      last_NFA            // Link to previous definition Name
1142+ 763F             >ID_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1142+ 763F E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1142+ 7641             >                else
1142+ 7641 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1142+ 7641             >                endif           ; ok        // for other definitions it "points" the correct handler
1142+ 7641             >                // Use of "; ok" to suppress "warning[fwdref]"
1142+ 7641             >
1142+ 7641             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1143+ 7641 09 74 43 64                  dw      PAD, LIT, 32, LIT, 96   // pad 32 96
1143+ 7645 20 00 43 64
1143+ 7649 60 00
1144+ 764B B8 73                        dw      FILL                    // fill
1145+ 764D 32 6B B9 70                  dw      DUP, PFA, LFA           // dup pfa lfa
1145+ 7651 8B 70
1146+ 7653 ED 6A 88 6F                  dw      OVER, SUBTRACT          // over -
1147+ 7657 09 74 25 6B                  dw      PAD, SWAP               // pad swap
1148+ 765B AB 68                        dw      CMOVE                   // cmove
1149+ 765D 09 74 86 72                  dw      PAD, COUNT, LIT, $1F    // pad count 01F
1149+ 7661 43 64 1F 00
1150+ 7665 4F 69                        dw      AND_OP                  // and  ( use only lower bits )
1151+ 7667 99 72 45 70                  dw      TYPE, SPACE             // type
1152+ 766B BD 69                        dw      EXIT                    // ;
1153+ 766D
1154+ 766D              //  ______________________________________________________________________
1155+ 766D              //
1156+ 766D              // code         -- cccc
1157+ 766D                              Colon_Def CODE,  "CODE", is_normal
1157+ 766D             >                New_Def  CODE, "CODE", Enter_Ptr, is_normal ; ok
1157+ 766D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1157+ 766D             >
1157+ 766D             >                // dummy db directives used to calculate length of namec
1157+ 766D 43 4F 44 45 >                db      "CODE"
1157+ 7671             >len_NFA         defl    $ - temp_NFA
1157+ 7671             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1157+ 766D             >
1157+ 766D 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1157+ 766E 43 4F 44 45 >                db      "CODE"               // name string in 7-bit ascii, but
1157+ 7672             >                org     $-1                 // alter last byte of Name just above to set
1157+ 7671 C5          >                db      {b $} | END_BIT     // msb as name end
1157+ 7672             >
1157+ 7672 39 76       >                dw      last_NFA            // Link to previous definition Name
1157+ 7674             >CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1157+ 7674 E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1157+ 7676             >                else
1157+ 7676 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1157+ 7676             >                endif           ; ok        // for other definitions it "points" the correct handler
1157+ 7676             >                // Use of "; ok" to suppress "warning[fwdref]"
1157+ 7676             >
1157+ 7676             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1158+ 7676 CE 75                        dw      LFIND                   // -find
1159+ 7678                                                              // if
1160+ 7678 7D 64                        dw      ZBRANCH
1161+ 767A 10 00                        dw      Code_Endif - $
1162+ 767C FD 6A                        dw          DROP                //      drop
1163+ 767E DD 70 3F 76                  dw          TO_NAME, ID_DOT     //      >name id.
1164+ 7682 43 64 04 00                  dw          LIT, 4, MESSAGE     //      4 message
1164+ 7686 BE 7A
1165+ 7688 45 70                        dw          SPACE               //      space
1166+ 768A              Code_Endif:                                     // endif
1167+ 768A 34 6F                        dw      HERE                    // here
1168+ 768C                                                              // ( ---- here begins NFA ---- )
1169+ 768C 32 6B 11 6C                  dw      DUP, CFETCH             // dup c@
1170+ 7690 00 6E F6 6B                  dw      WIDTH, FETCH, MIN       // width @ min  ( max 31 character length )
1170+ 7694 E1 6F
1171+ 7696 78 6A 44 6F                  dw      ONE_PLUS, ALLOT         // 1+ allot
1172+ 769A 32 6B                        dw      DUP                     // dup
1173+ 769C 43 64                        dw      LIT
1174+ 769E A0 00                        dw      SMUDGE_BIT | END_BIT    // 160
1175+ 76A0 E9 6B                        dw      TOGGLE                  // toggle
1176+ 76A2 34 6F 84 6A                  dw      HERE, ONE_SUBTRACT     // here 1- ( last character )
1177+ 76A6 43 64 80 00                  dw      LIT, END_BIT, TOGGLE    // 128 toggle
1177+ 76AA E9 6B
1178+ 76AC                                                              // ( ---- here is LFA ---- )
1179+ 76AC 7B 70 50 6F                  dw      LATEST, COMMA           // latest ,
1180+ 76B0 A2 6E F6 6B                  dw      CURRENT, FETCH, STORE   // current @ ! ( save this word as the latest )
1180+ 76B4 03 6C
1181+ 76B6 34 6F A0 6A                  dw      HERE, CELL_PLUS, COMMA  // ( CFA point PFA )
1181+ 76BA 50 6F
1182+ 76BC BD 69                        dw      EXIT                    // ;
1183+ 76BE
1184+ 76BE              //  ______________________________________________________________________
1185+ 76BE              //
1186+ 76BE              // create       -- cccc     ( compile time )
1187+ 76BE              //              -- a        ( run time )
1188+ 76BE                              Colon_Def CREATE,  "CREATE", is_normal
1188+ 76BE             >                New_Def  CREATE, "CREATE", Enter_Ptr, is_normal ; ok
1188+ 76BE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1188+ 76BE             >
1188+ 76BE             >                // dummy db directives used to calculate length of namec
1188+ 76BE 43 52 45 41 >                db      "CREATE"
1188+ 76C2 54 45       >
1188+ 76C4             >len_NFA         defl    $ - temp_NFA
1188+ 76C4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1188+ 76BE             >
1188+ 76BE 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1188+ 76BF 43 52 45 41 >                db      "CREATE"               // name string in 7-bit ascii, but
1188+ 76C3 54 45       >
1188+ 76C5             >                org     $-1                 // alter last byte of Name just above to set
1188+ 76C4 C5          >                db      {b $} | END_BIT     // msb as name end
1188+ 76C5             >
1188+ 76C5 6D 76       >                dw      last_NFA            // Link to previous definition Name
1188+ 76C7             >CREATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1188+ 76C7 E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1188+ 76C9             >                else
1188+ 76C9 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1188+ 76C9             >                endif           ; ok        // for other definitions it "points" the correct handler
1188+ 76C9             >                // Use of "; ok" to suppress "warning[fwdref]"
1188+ 76C9             >
1188+ 76C9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1189+ 76C9 74 76 CB 71                  dw      CODE, SMUDGE        // code smudge
1190+ 76CD
1191+ 76CD
1192+ 76CD 21 72                        dw      C_SEMICOLON_CODE
1193+ 76CF                              // this routine is called from the call coded in CFA
1194+ 76CF              Create_Ptr:
1195+ 76CF 13                           inc     de
1196+ 76D0 D5                           push    de                  // balance TOS before overwrite it
1197+ 76D1
1198+ 76D1                              next
1198+ 76D1 DD E9       >                jp      (ix)
1199+ 76D3
1200+ 76D3              //  ______________________________________________________________________
1201+ 76D3              //
1202+ 76D3              // [compile]    -- cccc     ( compile time )
1203+ 76D3                              Colon_Def COMPILE_IMMEDIATE,  "[COMPILE]", is_immediate
1203+ 76D3             >                New_Def  COMPILE_IMMEDIATE, "[COMPILE]", Enter_Ptr, is_immediate ; ok
1203+ 76D3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1203+ 76D3             >
1203+ 76D3             >                // dummy db directives used to calculate length of namec
1203+ 76D3 5B 43 4F 4D >                db      "[COMPILE]"
1203+ 76D7 50 49 4C 45 >
1203+ 76DB 5D          >
1203+ 76DC             >len_NFA         defl    $ - temp_NFA
1203+ 76DC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1203+ 76D3             >
1203+ 76D3 C9          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1203+ 76D4 5B 43 4F 4D >                db      "[COMPILE]"               // name string in 7-bit ascii, but
1203+ 76D8 50 49 4C 45 >
1203+ 76DC 5D          >
1203+ 76DD             >                org     $-1                 // alter last byte of Name just above to set
1203+ 76DC DD          >                db      {b $} | END_BIT     // msb as name end
1203+ 76DD             >
1203+ 76DD BE 76       >                dw      last_NFA            // Link to previous definition Name
1203+ 76DF             >COMPILE_IMMEDIATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1203+ 76DF E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1203+ 76E1             >                else
1203+ 76E1 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1203+ 76E1             >                endif           ; ok        // for other definitions it "points" the correct handler
1203+ 76E1             >                // Use of "; ok" to suppress "warning[fwdref]"
1203+ 76E1             >
1203+ 76E1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1204+ 76E1 CE 75                        dw      LFIND                   // -find      (  cfa  b  f  )
1205+ 76E3 14 6A                        dw      ZEQUAL                  // 0=         (  cfa  b  )
1206+ 76E5 62 6D FF 70                  dw      ZERO, QERROR            // 0 ?error
1207+ 76E9 FD 6A                        dw      DROP                    // drop       (  cfa  )
1208+ 76EB 50 6F                        dw      COMMA                   // ,
1209+ 76ED BD 69                        dw      EXIT                    // ; immediate
1210+ 76EF
1211+ 76EF              //  ______________________________________________________________________
1212+ 76EF              //
1213+ 76EF              // literal      n --      ( compile time )
1214+ 76EF                              Colon_Def LITERAL,  "LITERAL", is_immediate
1214+ 76EF             >                New_Def  LITERAL, "LITERAL", Enter_Ptr, is_immediate ; ok
1214+ 76EF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1214+ 76EF             >
1214+ 76EF             >                // dummy db directives used to calculate length of namec
1214+ 76EF 4C 49 54 45 >                db      "LITERAL"
1214+ 76F3 52 41 4C    >
1214+ 76F6             >len_NFA         defl    $ - temp_NFA
1214+ 76F6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1214+ 76EF             >
1214+ 76EF C7          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1214+ 76F0 4C 49 54 45 >                db      "LITERAL"               // name string in 7-bit ascii, but
1214+ 76F4 52 41 4C    >
1214+ 76F7             >                org     $-1                 // alter last byte of Name just above to set
1214+ 76F6 CC          >                db      {b $} | END_BIT     // msb as name end
1214+ 76F7             >
1214+ 76F7 D3 76       >                dw      last_NFA            // Link to previous definition Name
1214+ 76F9             >LITERAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1214+ 76F9 E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1214+ 76FB             >                else
1214+ 76FB ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1214+ 76FB             >                endif           ; ok        // for other definitions it "points" the correct handler
1214+ 76FB             >                // Use of "; ok" to suppress "warning[fwdref]"
1214+ 76FB             >
1214+ 76FB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1215+ 76FB AD 6E F6 6B                  dw      STATE, FETCH            // state @
1216+ 76FF                                                              // if
1217+ 76FF 7D 64                        dw      ZBRANCH
1218+ 7701 08 00                        dw      Literal_Endif - $
1219+ 7703 92 71 43 64                  dw          COMPILE, LIT        //      compile lit
1220+ 7707 50 6F                        dw          COMMA               //      ,
1221+ 7709              Literal_Endif:                                  // endif
1222+ 7709 BD 69                        dw      EXIT                    // ; immediate
1223+ 770B
1224+ 770B              //  ______________________________________________________________________
1225+ 770B              //
1226+ 770B              // dliteral     n --      ( compile time )
1227+ 770B                              Colon_Def DLITERAL,  "DLITERAL", is_immediate
1227+ 770B             >                New_Def  DLITERAL, "DLITERAL", Enter_Ptr, is_immediate ; ok
1227+ 770B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1227+ 770B             >
1227+ 770B             >                // dummy db directives used to calculate length of namec
1227+ 770B 44 4C 49 54 >                db      "DLITERAL"
1227+ 770F 45 52 41 4C >
1227+ 7713             >len_NFA         defl    $ - temp_NFA
1227+ 7713             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1227+ 770B             >
1227+ 770B C8          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1227+ 770C 44 4C 49 54 >                db      "DLITERAL"               // name string in 7-bit ascii, but
1227+ 7710 45 52 41 4C >
1227+ 7714             >                org     $-1                 // alter last byte of Name just above to set
1227+ 7713 CC          >                db      {b $} | END_BIT     // msb as name end
1227+ 7714             >
1227+ 7714 EF 76       >                dw      last_NFA            // Link to previous definition Name
1227+ 7716             >DLITERAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1227+ 7716 E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1227+ 7718             >                else
1227+ 7718 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1227+ 7718             >                endif           ; ok        // for other definitions it "points" the correct handler
1227+ 7718             >                // Use of "; ok" to suppress "warning[fwdref]"
1227+ 7718             >
1227+ 7718             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1228+ 7718 AD 6E F6 6B                  dw      STATE, FETCH            // state @
1229+ 771C                                                              // if
1230+ 771C 7D 64                        dw      ZBRANCH
1231+ 771E 08 00                        dw      DLiteral_Endif - $
1232+ 7720 25 6B                        dw          SWAP                //      swap
1233+ 7722 F9 76 F9 76                  dw          LITERAL,  LITERAL   //      [compile] literal [compile] literal
1234+ 7726              DLiteral_Endif:                                 // endif
1235+ 7726 BD 69                        dw      EXIT                    // ; immediate
1236+ 7728
1237+ 7728              //  ______________________________________________________________________
1238+ 7728              //
1239+ 7728              // [char]       n --      ( compile time )
1240+ 7728              // inside colon definition, gets first character from next input word
1241+ 7728              // and compiles it as literal.
1242+ 7728                              Colon_Def COMPILE_CHAR,  "[CHAR]", is_immediate
1242+ 7728             >                New_Def  COMPILE_CHAR, "[CHAR]", Enter_Ptr, is_immediate ; ok
1242+ 7728             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1242+ 7728             >
1242+ 7728             >                // dummy db directives used to calculate length of namec
1242+ 7728 5B 43 48 41 >                db      "[CHAR]"
1242+ 772C 52 5D       >
1242+ 772E             >len_NFA         defl    $ - temp_NFA
1242+ 772E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1242+ 7728             >
1242+ 7728 C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1242+ 7729 5B 43 48 41 >                db      "[CHAR]"               // name string in 7-bit ascii, but
1242+ 772D 52 5D       >
1242+ 772F             >                org     $-1                 // alter last byte of Name just above to set
1242+ 772E DD          >                db      {b $} | END_BIT     // msb as name end
1242+ 772F             >
1242+ 772F 0B 77       >                dw      last_NFA            // Link to previous definition Name
1242+ 7731             >COMPILE_CHAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1242+ 7731 E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1242+ 7733             >                else
1242+ 7733 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1242+ 7733             >                endif           ; ok        // for other definitions it "points" the correct handler
1242+ 7733             >                // Use of "; ok" to suppress "warning[fwdref]"
1242+ 7733             >
1242+ 7733             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1243+ 7733 86 74 F9 76                  dw      CHAR, LITERAL           // char [compile] literal
1244+ 7737 BD 69                        dw      EXIT                    // ; immediate
1245+ 7739
1246+ 7739              //  ______________________________________________________________________
1247+ 7739              //
1248+ 7739              // 0x00         n --      ( compile time )
1249+ 7739                              Colon_Def NUL_WORD,  $00, is_immediate
1249+ 7739             >                New_Def  NUL_WORD, $00, Enter_Ptr, is_immediate ; ok
1249+ 7739             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1249+ 7739             >
1249+ 7739             >                // dummy db directives used to calculate length of namec
1249+ 7739 00          >                db      $00
1249+ 773A             >len_NFA         defl    $ - temp_NFA
1249+ 773A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1249+ 7739             >
1249+ 7739 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1249+ 773A 00          >                db      $00               // name string in 7-bit ascii, but
1249+ 773B             >                org     $-1                 // alter last byte of Name just above to set
1249+ 773A 80          >                db      {b $} | END_BIT     // msb as name end
1249+ 773B             >
1249+ 773B 28 77       >                dw      last_NFA            // Link to previous definition Name
1249+ 773D             >NUL_WORD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1249+ 773D E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1249+ 773F             >                else
1249+ 773F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1249+ 773F             >                endif           ; ok        // for other definitions it "points" the correct handler
1249+ 773F             >                // Use of "; ok" to suppress "warning[fwdref]"
1249+ 773F             >
1249+ 773F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1250+ 773F 61 6E F6 6B                  dw      BLK, FETCH, ONE         // blk @ 1
1250+ 7743 6A 6D
1251+ 7745 D3 6F                        dw      GREATER                 // > if
1252+ 7747                                                              // if
1253+ 7747 7D 64                        dw      ZBRANCH
1254+ 7749 28 00                        dw      Nul_Else_1 - $
1255+ 774B 6A 6D 61 6E                  dw          ONE, BLK, PLUSSTORE //      1 blk +!
1255+ 774F D3 6B
1256+ 7751 62 6D 6A 6E                  dw          ZERO, TO_IN, STORE  //      0 >in !
1256+ 7755 03 6C
1257+ 7757 61 6E F6 6B                  dw          BLK, FETCH          //      blk @
1258+ 775B AE 6D                        dw          BSCR                //      b/scr
1259+ 775D 84 6A                        dw          ONE_SUBTRACT        //      1 -
1260+ 775F 4F 69                        dw          AND_OP              //      and  ( this is tricky )
1261+ 7761 14 6A                        dw          ZEQUAL              //      0=
1262+ 7763                                                              //      if
1263+ 7763 7D 64                        dw          ZBRANCH
1264+ 7765 08 00                        dw          Nul_Endif_2 - $
1265+ 7767 31 71                        dw              QEXEC           //          ?exec
1266+ 7769 FA 69 FD 6A                  dw              R_TO, DROP      //          r> drop
1267+ 776D              Nul_Endif_2:                                    //      endif
1268+ 776D 66 64                        dw      BRANCH
1269+ 776F 06 00                        dw      Nul_Endif_1 - $
1270+ 7771              Nul_Else_1:                                     // else
1271+ 7771 FA 69 FD 6A                  dw          R_TO, DROP          //      r> drop
1272+ 7775              Nul_Endif_1:                                    // endif
1273+ 7775 BD 69                        dw      EXIT                    // ;
1274+ 7777
1275+ 7777              //  ______________________________________________________________________
1276+ 7777              //
1277+ 7777              // ?stack       --
1278+ 7777              // Raise error #1 if stack is empty and you pop it
1279+ 7777              // Raise error #7 if stack is full.
1280+ 7777              // This means SP must always stay between HERE and FFFF
1281+ 7777              // For 128K BANK paging purpose SP must be <= BFE0 and 50 words room
1282+ 7777              // for Next 8K MMU paging this is $DOE8
1283+ 7777                              Colon_Def QSTACK, "?STACK", is_normal
1283+ 7777             >                New_Def  QSTACK, "?STACK", Enter_Ptr, is_normal ; ok
1283+ 7777             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1283+ 7777             >
1283+ 7777             >                // dummy db directives used to calculate length of namec
1283+ 7777 3F 53 54 41 >                db      "?STACK"
1283+ 777B 43 4B       >
1283+ 777D             >len_NFA         defl    $ - temp_NFA
1283+ 777D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1283+ 7777             >
1283+ 7777 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1283+ 7778 3F 53 54 41 >                db      "?STACK"               // name string in 7-bit ascii, but
1283+ 777C 43 4B       >
1283+ 777E             >                org     $-1                 // alter last byte of Name just above to set
1283+ 777D CB          >                db      {b $} | END_BIT     // msb as name end
1283+ 777E             >
1283+ 777E 39 77       >                dw      last_NFA            // Link to previous definition Name
1283+ 7780             >QSTACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1283+ 7780 E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1283+ 7782             >                else
1283+ 7782 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1283+ 7782             >                endif           ; ok        // for other definitions it "points" the correct handler
1283+ 7782             >                // Use of "; ok" to suppress "warning[fwdref]"
1283+ 7782             >
1283+ 7782             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1284+ 7782 87 69                        dw      SPFETCH                 // sp@
1285+ 7784 E4 6D F6 6B                  dw      S0, FETCH               // s0 @
1286+ 7788 25 6B A3 6F                  dw      SWAP, ULESS             // swap u<
1287+ 778C 6A 6D FF 70                  dw      ONE, QERROR             // 1 ?error
1288+ 7790 34 6F                        dw      HERE                    // here
1289+ 7792 E4 6D F6 6B                  dw      S0, FETCH, LESS         // s0 @ <
1289+ 7796 B7 6F
1290+ 7798                                                              // if
1291+ 7798 7D 64                        dw      ZBRANCH
1292+ 779A 14 00                        dw      QStack_Endif - $
1293+ 779C 87 69                        dw          SPFETCH             //      sp@
1294+ 779E 34 6F 43 64                  dw          HERE, LIT, 128      //      here 128
1294+ 77A2 80 00
1295+ 77A4 4F 6A A3 6F                  dw          PLUS, ULESS         //      plus u<
1296+ 77A8 43 64 07 00                  dw          LIT, 7, QERROR      //      7 Cerror
1296+ 77AC FF 70
1297+ 77AE              QStack_Endif:                                   // endif
1298+ 77AE BD 69                        dw      EXIT                    // ;
1299+ 77B0
1300+ 77B0
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L1.asm
 110  77B0                              include "L2.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L2.asm
   1+ 77B0              //  ______________________________________________________________________
   2+ 77B0              //
   3+ 77B0              //  L2.asm
   4+ 77B0              //
   5+ 77B0              //  Level-2
   6+ 77B0              //  the Forth interpreter, vocabulary, cold/warm start and quit from Forth.
   7+ 77B0              //  ______________________________________________________________________
   8+ 77B0
   9+ 77B0
  10+ 77B0              //  ______________________________________________________________________
  11+ 77B0              //
  12+ 77B0              // interpret    --
  13+ 77B0              // This is the text interpreter.
  14+ 77B0              // It executes or compiles, depending on STATE, the text coming from
  15+ 77B0              // current input stream.
  16+ 77B0              // If the word search fails after parsing CONTEXT and CURRENT vocabulary,
  17+ 77B0              // the word is interpreted as numeric and converted, using current BASE,
  18+ 77B0              // leaving on top of stack a single or double precision number, depending
  19+ 77B0              // on the presence of a decimal point.
  20+ 77B0              // If the number conversion fails, the terminal is notified with ? followed
  21+ 77B0              // by the offending word.
  22+ 77B0                              Colon_Def INTERPRET, "INTERPRET", is_normal
  22+ 77B0             >                New_Def  INTERPRET, "INTERPRET", Enter_Ptr, is_normal ; ok
  22+ 77B0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  22+ 77B0             >
  22+ 77B0             >                // dummy db directives used to calculate length of namec
  22+ 77B0 49 4E 54 45 >                db      "INTERPRET"
  22+ 77B4 52 50 52 45 >
  22+ 77B8 54          >
  22+ 77B9             >len_NFA         defl    $ - temp_NFA
  22+ 77B9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  22+ 77B0             >
  22+ 77B0 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  22+ 77B1 49 4E 54 45 >                db      "INTERPRET"               // name string in 7-bit ascii, but
  22+ 77B5 52 50 52 45 >
  22+ 77B9 54          >
  22+ 77BA             >                org     $-1                 // alter last byte of Name just above to set
  22+ 77B9 D4          >                db      {b $} | END_BIT     // msb as name end
  22+ 77BA             >
  22+ 77BA 77 77       >                dw      last_NFA            // Link to previous definition Name
  22+ 77BC             >INTERPRET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  22+ 77BC E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  22+ 77BE             >                else
  22+ 77BE ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  22+ 77BE             >                endif           ; ok        // for other definitions it "points" the correct handler
  22+ 77BE             >                // Use of "; ok" to suppress "warning[fwdref]"
  22+ 77BE             >
  22+ 77BE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  23+ 77BE
  24+ 77BE              Interpret_Begin:                                        // begin
  25+ 77BE CE 75                        dw          LFIND                       //      -find
  26+ 77C0                                                                      //      if
  27+ 77C0 7D 64                        dw          ZBRANCH
  28+ 77C2 1A 00                        dw          Interpret_Else_1 - $
  29+ 77C4 AD 6E F6 6B                  dw              STATE, FETCH, LESS      //          state @ <
  29+ 77C8 B7 6F
  30+ 77CA                                                                      //          if
  31+ 77CA 7D 64                        dw              ZBRANCH
  32+ 77CC 08 00                        dw              Interpret_Else_2 - $
  33+ 77CE 50 6F                        dw                  COMMA               //              ,
  34+ 77D0                                                                      //          else
  35+ 77D0 66 64                        dw              BRANCH
  36+ 77D2 06 00                        dw              Interpret_Endif_2 - $
  37+ 77D4              Interpret_Else_2:
  38+ 77D4 58 64 0F 6D                  dw                  EXECUTE, NOOP       //              execute nooop
  39+ 77D8              Interpret_Endif_2:                                      //          endif
  40+ 77D8                                                                      //      else
  41+ 77D8 66 64                        dw          BRANCH
  42+ 77DA 28 00                        dw          Interpret_Endif_1 - $
  43+ 77DC              Interpret_Else_1:
  44+ 77DC 34 6F 88 75                  dw              HERE, NUMBER            //          here number
  45+ 77E0 C0 6E F6 6B                  dw              DPL, FETCH, ONE_PLUS    //          dpl @ 1+
  45+ 77E4 78 6A
  46+ 77E6                                                                      //          if
  47+ 77E6 7D 64                        dw              ZBRANCH
  48+ 77E8 16 00                        dw              Interpret_Else_3 - $
  49+ 77EA 58 6E F6 6B                  dw                  NMODE, FETCH        //              nmode @
  50+ 77EE                                                                      //              if
  51+ 77EE 7D 64                        dw                  ZBRANCH
  52+ 77F0 08 00                        dw                  Interpret_Endif_4 - $
  53+ 77F2 6A 6D 62 6D                  dw                      ONE, ZERO       //                  1 0
  54+ 77F6 7C 6B                        dw                      TWO_DROP        //                  2drop
  55+ 77F8              Interpret_Endif_4:                                      //              endif
  56+ 77F8 16 77                        dw                  DLITERAL            //              [compile] dliteral
  57+ 77FA                                                                      //          else
  58+ 77FA 66 64                        dw              BRANCH
  59+ 77FC 06 00                        dw              Interpret_Endif_3 - $
  60+ 77FE              Interpret_Else_3:
  61+ 77FE FD 6A                        dw                  DROP                //              drop
  62+ 7800 F9 76                        dw                  LITERAL             //              [compile]  literal
  63+ 7802              Interpret_Endif_3:                                      //          endif
  64+ 7802              Interpret_Endif_1:                                      //      endif
  65+ 7802 80 77                        dw          QSTACK                      //      ?stack
  66+ 7804 A6 67                        dw          QTERMINAL                   //      ?terminal
  67+ 7806                                                                      //      if
  68+ 7806 7D 64                        dw          ZBRANCH
  69+ 7808 04 00                        dw          Interpret_Endif_5 - $
  70+ 780A F6 75                        dw              CABORT                  //          (abort)
  71+ 780C              Interpret_Endif_5:                                      //      endif
  72+ 780C 66 64                        dw      BRANCH
  73+ 780E B0 FF                        dw      Interpret_Begin - $
  74+ 7810 BD 69                        dw      EXIT                            // ;
  75+ 7812
  76+ 7812              //  ______________________________________________________________________
  77+ 7812              //
  78+ 7812              // vocabulary   -- cccc     ( compile time )
  79+ 7812              // Defining word used in the form   VOCABULARY cccc
  80+ 7812              // creates the word  cccc  that gives the name to the vocabulary.
  81+ 7812              // Giving  cccc  makes the vocabulary CONTEXT so its words are executed first
  82+ 7812              // Giving  cccc DEFINITIONS makes  the vocabulary  CURRENT
  83+ 7812              // so new definitions can be inserted in that vocabulary.
  84+ 7812                              Colon_Def VOCABULARY, "VOCABULARY", is_normal
  84+ 7812             >                New_Def  VOCABULARY, "VOCABULARY", Enter_Ptr, is_normal ; ok
  84+ 7812             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  84+ 7812             >
  84+ 7812             >                // dummy db directives used to calculate length of namec
  84+ 7812 56 4F 43 41 >                db      "VOCABULARY"
  84+ 7816 42 55 4C 41 >
  84+ 781A 52 59       >
  84+ 781C             >len_NFA         defl    $ - temp_NFA
  84+ 781C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  84+ 7812             >
  84+ 7812 8A          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  84+ 7813 56 4F 43 41 >                db      "VOCABULARY"               // name string in 7-bit ascii, but
  84+ 7817 42 55 4C 41 >
  84+ 781B 52 59       >
  84+ 781D             >                org     $-1                 // alter last byte of Name just above to set
  84+ 781C D9          >                db      {b $} | END_BIT     // msb as name end
  84+ 781D             >
  84+ 781D B0 77       >                dw      last_NFA            // Link to previous definition Name
  84+ 781F             >VOCABULARY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  84+ 781F E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  84+ 7821             >                else
  84+ 7821 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  84+ 7821             >                endif           ; ok        // for other definitions it "points" the correct handler
  84+ 7821             >                // Use of "; ok" to suppress "warning[fwdref]"
  84+ 7821             >
  84+ 7821             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  85+ 7821
  86+ 7821 4F 72                        dw      CBUILDS
  87+ 7823
  88+ 7823 43 64 81 A0                  dw      LIT, $A081, COMMA       // $81A0 ,
  88+ 7827 50 6F
  89+ 7829 A2 6E F6 6B                  dw      CURRENT, FETCH          // current @
  90+ 782D AA 6A 50 6F                  dw      CELL_MINUS, COMMA       // cell- ,
  91+ 7831 34 6F                        dw      HERE                    // here
  92+ 7833 2E 6E F6 6B                  dw      VOC_LINK, FETCH, COMMA  // voc-link @ ,
  92+ 7837 50 6F
  93+ 7839 2E 6E 03 6C                  dw      VOC_LINK, STORE         // voc-link !
  94+ 783D
  95+ 783D 5F 72                        dw      DOES_TO                 // does>
  96+ 783F              Vocabulary_Does:
  97+ 783F A0 6A                        dw      CELL_PLUS               // cell+
  98+ 7841 95 6E 03 6C                  dw      CONTEXT, STORE          // context !
  99+ 7845 BD 69                        dw      EXIT                    // ;
 100+ 7847
 101+ 7847              //  ______________________________________________________________________
 102+ 7847              //
 103+ 7847              // forth        --
 104+ 7847              // Name of the first vocabulary.
 105+ 7847              // It makes FORTH the CONTEXT vocabulary.
 106+ 7847              // Until new user vocabulary are defined, new colon-definitions becomes
 107+ 7847              // part of FORTH. It is immediate, so it will executed during the creation
 108+ 7847              // of a colon definition to be able to select the vocabulary.
 109+ 7847
 110+ 7847                              New_Def FORTH, "FORTH", Does_Ptr, is_immediate
 110+ 7847             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 110+ 7847             >
 110+ 7847             >                // dummy db directives used to calculate length of namec
 110+ 7847 46 4F 52 54 >                db      "FORTH"
 110+ 784B 48          >
 110+ 784C             >len_NFA         defl    $ - temp_NFA
 110+ 784C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 110+ 7847             >
 110+ 7847 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 110+ 7848 46 4F 52 54 >                db      "FORTH"               // name string in 7-bit ascii, but
 110+ 784C 48          >
 110+ 784D             >                org     $-1                 // alter last byte of Name just above to set
 110+ 784C C8          >                db      {b $} | END_BIT     // msb as name end
 110+ 784D             >
 110+ 784D 12 78       >                dw      last_NFA            // Link to previous definition Name
 110+ 784F             >FORTH:          if Does_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 110+ 784F 6B 72       >                dw      Does_Ptr ; ok        // for primitive definitions  actual code
 110+ 7851             >                else
 110+ 7851 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 110+ 7851             >                endif           ; ok        // for other definitions it "points" the correct handler
 110+ 7851             >                // Use of "; ok" to suppress "warning[fwdref]"
 110+ 7851             >
 110+ 7851             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 111+ 7851 3F 78                        dw      Vocabulary_Does
 112+ 7853 81 A0                        db      $81, $A0
 113+ 7855              Forth_Latest_Ptr:
 114+ 7855 43 87                        dw      Here_Dictionary // Fence_Word // Latest_Definition
 115+ 7857              Voclink_Ptr:
 116+ 7857 00 00                        dw      0
 117+ 7859              // Any new vocabulary is structured as follow:
 118+ 7859              // PFA+0 points to DOES> part of VOCABULARY to perform CELL+ CONTEXT !
 119+ 7859              // PFA+2 is 81,A0 i.e. a null-word used as LATEST in the new vocabulary
 120+ 7859              // PFA+4 always contains the LATEST word of this VOCABULARY.
 121+ 7859              //       at creations it points to the null-word of its parent vocabulary
 122+ 7859              //       that is normally FORTH, For example ASSEMBLER points FORTH's null-word
 123+ 7859              // PFA+6 is the pointer that builds up the vocabulary linked list.
 124+ 7859              //       FORTH has 0 here to signal the end of the list and user's variable
 125+ 7859              //       VOC-LINK points to PFA+6 of the newest vocabulary created.
 126+ 7859              //       While FORTH is the only vocabulary, VOC-LINK points to FORTH's PFA+6
 127+ 7859              //       When ASSEMBLER is created, its PFA+6 points to FORTH's PFA+6, and so on
 128+ 7859
 129+ 7859              //  ______________________________________________________________________
 130+ 7859              //
 131+ 7859              // definitions  --
 132+ 7859              // Used in the form  cccc DEFINITIONS
 133+ 7859              // set the CURRENT vocabulary at CONTEXT to insert new definitions in
 134+ 7859              // vocabulary cccc.
 135+ 7859                              Colon_Def DEFINITIONS, "DEFINITIONS", is_normal
 135+ 7859             >                New_Def  DEFINITIONS, "DEFINITIONS", Enter_Ptr, is_normal ; ok
 135+ 7859             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 135+ 7859             >
 135+ 7859             >                // dummy db directives used to calculate length of namec
 135+ 7859 44 45 46 49 >                db      "DEFINITIONS"
 135+ 785D 4E 49 54 49 >
 135+ 7861 4F 4E 53    >
 135+ 7864             >len_NFA         defl    $ - temp_NFA
 135+ 7864             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 135+ 7859             >
 135+ 7859 8B          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 135+ 785A 44 45 46 49 >                db      "DEFINITIONS"               // name string in 7-bit ascii, but
 135+ 785E 4E 49 54 49 >
 135+ 7862 4F 4E 53    >
 135+ 7865             >                org     $-1                 // alter last byte of Name just above to set
 135+ 7864 D3          >                db      {b $} | END_BIT     // msb as name end
 135+ 7865             >
 135+ 7865 47 78       >                dw      last_NFA            // Link to previous definition Name
 135+ 7867             >DEFINITIONS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 135+ 7867 E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 135+ 7869             >                else
 135+ 7869 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 135+ 7869             >                endif           ; ok        // for other definitions it "points" the correct handler
 135+ 7869             >                // Use of "; ok" to suppress "warning[fwdref]"
 135+ 7869             >
 135+ 7869             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 136+ 7869 95 6E F6 6B                  dw      CONTEXT, FETCH          // context @
 137+ 786D A2 6E 03 6C                  dw      CURRENT, STORE          // current !
 138+ 7871 BD 69                        dw      EXIT                    // ;
 139+ 7873
 140+ 7873              //  ______________________________________________________________________
 141+ 7873              //
 142+ 7873              // (            -- cccc )
 143+ 7873              // the following text is interpreted as a comment until a closing )
 144+ 7873                              Colon_Def COMMENT_BRAKET, "(", is_immediate
 144+ 7873             >                New_Def  COMMENT_BRAKET, "(", Enter_Ptr, is_immediate ; ok
 144+ 7873             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 144+ 7873             >
 144+ 7873             >                // dummy db directives used to calculate length of namec
 144+ 7873 28          >                db      "("
 144+ 7874             >len_NFA         defl    $ - temp_NFA
 144+ 7874             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 144+ 7873             >
 144+ 7873 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 144+ 7874 28          >                db      "("               // name string in 7-bit ascii, but
 144+ 7875             >                org     $-1                 // alter last byte of Name just above to set
 144+ 7874 A8          >                db      {b $} | END_BIT     // msb as name end
 144+ 7875             >
 144+ 7875 59 78       >                dw      last_NFA            // Link to previous definition Name
 144+ 7877             >COMMENT_BRAKET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 144+ 7877 E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 144+ 7879             >                else
 144+ 7879 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 144+ 7879             >                endif           ; ok        // for other definitions it "points" the correct handler
 144+ 7879             >                // Use of "; ok" to suppress "warning[fwdref]"
 144+ 7879             >
 144+ 7879             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 145+ 7879 43 64 29 00                  dw      LIT, ")"                // [char] )
 146+ 787D 1C 74 FD 6A                  dw      WORD, DROP              // word drop
 147+ 7881 BD 69                        dw      EXIT                    // ;
 148+ 7883
 149+ 7883              //  ______________________________________________________________________
 150+ 7883              //
 151+ 7883              // quit         --
 152+ 7883              // \ Erase the return-stack, stop any compilation and give controlo to the console. No message is issued.
 153+ 7883                              Colon_Def QUIT, "QUIT", is_normal
 153+ 7883             >                New_Def  QUIT, "QUIT", Enter_Ptr, is_normal ; ok
 153+ 7883             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 153+ 7883             >
 153+ 7883             >                // dummy db directives used to calculate length of namec
 153+ 7883 51 55 49 54 >                db      "QUIT"
 153+ 7887             >len_NFA         defl    $ - temp_NFA
 153+ 7887             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 153+ 7883             >
 153+ 7883 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 153+ 7884 51 55 49 54 >                db      "QUIT"               // name string in 7-bit ascii, but
 153+ 7888             >                org     $-1                 // alter last byte of Name just above to set
 153+ 7887 D4          >                db      {b $} | END_BIT     // msb as name end
 153+ 7888             >
 153+ 7888 73 78       >                dw      last_NFA            // Link to previous definition Name
 153+ 788A             >QUIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 153+ 788A E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 153+ 788C             >                else
 153+ 788C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 153+ 788C             >                endif           ; ok        // for other definitions it "points" the correct handler
 153+ 788C             >                // Use of "; ok" to suppress "warning[fwdref]"
 153+ 788C             >
 153+ 788C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 154+ 788C
 155+ 788C 18 6F F6 6B                  dw      SOURCE_ID, FETCH        // source-id @
 156+ 7890 49 68 FD 6A                  dw      F_CLOSE, DROP           // f_close drop
 157+ 7894 62 6D 18 6F                  dw      ZERO, SOURCE_ID, STORE  // 0 source-id !
 157+ 7898 03 6C
 158+ 789A 62 6D 61 6E                  dw      ZERO, BLK, STORE        // 0 blk !
 158+ 789E 03 6C
 159+ 78A0 A8 71                        dw      SQUARED_OPEN            // [compile] [
 160+ 78A2                                                              // begin
 161+ 78A2              Quit_Begin:
 162+ 78A2 EC 6D F6 6B                  dw      R0, FETCH, RPSTORE      //      r0 @ rp!
 162+ 78A6 B0 69
 163+ 78A8 9C 68                        dw      CR                      //      cr
 164+ 78AA 9D 73                        dw      QUERY                   //      query
 165+ 78AC              Next_Breakpoint_1:
 166+ 78AC BC 77                        dw      INTERPRET               //      interpret
 167+ 78AE AD 6E F6 6B                  dw      STATE, FETCH, ZEQUAL    //      state @ 0=
 167+ 78B2 14 6A
 168+ 78B4                                                              //      if
 169+ 78B4 7D 64                        dw      ZBRANCH
 170+ 78B6 07 00                        dw      Quit_Endif - $
 171+ 78B8 6B 74                        dw          C_DOT_QUOTE
 172+ 78BA 02 6F 6B                     db          2, "ok"             //          .( ok)
 173+ 78BD              Quit_Endif:                                     //      else
 174+ 78BD                                                              // again
 175+ 78BD 66 64                        dw      BRANCH
 176+ 78BF E3 FF                        dw      Quit_Begin - $
 177+ 78C1 BD 69                        dw      EXIT                    // ;
 178+ 78C3
 179+ 78C3              //  ______________________________________________________________________
 180+ 78C3              //
 181+ 78C3              // abort        --
 182+ 78C3                              Colon_Def ABORT, "ABORT", is_normal
 182+ 78C3             >                New_Def  ABORT, "ABORT", Enter_Ptr, is_normal ; ok
 182+ 78C3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 182+ 78C3             >
 182+ 78C3             >                // dummy db directives used to calculate length of namec
 182+ 78C3 41 42 4F 52 >                db      "ABORT"
 182+ 78C7 54          >
 182+ 78C8             >len_NFA         defl    $ - temp_NFA
 182+ 78C8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 182+ 78C3             >
 182+ 78C3 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 182+ 78C4 41 42 4F 52 >                db      "ABORT"               // name string in 7-bit ascii, but
 182+ 78C8 54          >
 182+ 78C9             >                org     $-1                 // alter last byte of Name just above to set
 182+ 78C8 D4          >                db      {b $} | END_BIT     // msb as name end
 182+ 78C9             >
 182+ 78C9 83 78       >                dw      last_NFA            // Link to previous definition Name
 182+ 78CB             >ABORT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 182+ 78CB E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 182+ 78CD             >                else
 182+ 78CD ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 182+ 78CD             >                endif           ; ok        // for other definitions it "points" the correct handler
 182+ 78CD             >                // Use of "; ok" to suppress "warning[fwdref]"
 182+ 78CD             >
 182+ 78CD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 183+ 78CD E4 6D F6 6B                  dw      S0, FETCH, SPSTORE      // s0 @ sp!
 183+ 78D1 96 69
 184+ 78D3 0B 72                        dw      DECIMAL                 // decimal
 185+ 78D5 4F 78                        dw      FORTH                   // [compile] forth
 186+ 78D7 67 78                        dw      DEFINITIONS             // definitions
 187+ 78D9              Autoexec_Ptr:
 188+ 78D9 37 85                        dw      AUTOEXEC                // autoexec, patched to noop
 189+ 78DB 8A 78                        dw      QUIT                    // quit
 190+ 78DD BD 69                        dw      EXIT                    // ;
 191+ 78DF
 192+ 78DF              //  ______________________________________________________________________
 193+ 78DF              //
 194+ 78DF              // warm         --
 195+ 78DF                              Colon_Def WARM, "WARM", is_normal
 195+ 78DF             >                New_Def  WARM, "WARM", Enter_Ptr, is_normal ; ok
 195+ 78DF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 195+ 78DF             >
 195+ 78DF             >                // dummy db directives used to calculate length of namec
 195+ 78DF 57 41 52 4D >                db      "WARM"
 195+ 78E3             >len_NFA         defl    $ - temp_NFA
 195+ 78E3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 195+ 78DF             >
 195+ 78DF 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 195+ 78E0 57 41 52 4D >                db      "WARM"               // name string in 7-bit ascii, but
 195+ 78E4             >                org     $-1                 // alter last byte of Name just above to set
 195+ 78E3 CD          >                db      {b $} | END_BIT     // msb as name end
 195+ 78E4             >
 195+ 78E4 C3 78       >                dw      last_NFA            // Link to previous definition Name
 195+ 78E6             >WARM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 195+ 78E6 E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 195+ 78E8             >                else
 195+ 78E8 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 195+ 78E8             >                endif           ; ok        // for other definitions it "points" the correct handler
 195+ 78E8             >                // Use of "; ok" to suppress "warning[fwdref]"
 195+ 78E8             >
 195+ 78E8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 196+ 78E8 7B 7C                        dw      BLK_INIT                // blk-init
 197+ 78EA 01 84                        dw      SPLASH                  // splash
 198+ 78EC 43 64 07 00                  dw      LIT, 7, EMIT            // 7 emit
 198+ 78F0 29 70
 199+ 78F2 CB 78                        dw      ABORT                   // abort
 200+ 78F4 BD 69                        dw      EXIT                    // exit
 201+ 78F6
 202+ 78F6              //  ______________________________________________________________________
 203+ 78F6              //
 204+ 78F6              // cold         --
 205+ 78F6                              Colon_Def COLD, "COLD", is_normal
 205+ 78F6             >                New_Def  COLD, "COLD", Enter_Ptr, is_normal ; ok
 205+ 78F6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 205+ 78F6             >
 205+ 78F6             >                // dummy db directives used to calculate length of namec
 205+ 78F6 43 4F 4C 44 >                db      "COLD"
 205+ 78FA             >len_NFA         defl    $ - temp_NFA
 205+ 78FA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 205+ 78F6             >
 205+ 78F6 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 205+ 78F7 43 4F 4C 44 >                db      "COLD"               // name string in 7-bit ascii, but
 205+ 78FB             >                org     $-1                 // alter last byte of Name just above to set
 205+ 78FA C4          >                db      {b $} | END_BIT     // msb as name end
 205+ 78FB             >
 205+ 78FB DF 78       >                dw      last_NFA            // Link to previous definition Name
 205+ 78FD             >COLD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 205+ 78FD E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 205+ 78FF             >                else
 205+ 78FF ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 205+ 78FF             >                endif           ; ok        // for other definitions it "points" the correct handler
 205+ 78FF             >                // Use of "; ok" to suppress "warning[fwdref]"
 205+ 78FF             >
 205+ 78FF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 206+ 78FF 43 64 12 64                  dw      LIT, S0_origin          // [ hex $12 +origin ] Literal
 207+ 7903 43 64 2E 64                  dw      LIT, USER_Pointer       // [ hex $3E +origin ] literal
 208+ 7907 F6 6B                        dw      FETCH                   // @
 209+ 7909 43 64 06 00                  dw      LIT, 6, PLUS            // 6 +
 209+ 790D 4F 6A
 210+ 790F 43 64 14 00                  dw      LIT, 20                 // 20
 211+ 7913 AB 68                        dw      CMOVE
 212+ 7915 43 64 0C 64                  dw      LIT, Latest_origin      // [ hex 0C +origin ] literal
 213+ 7919 F6 6B                        dw      FETCH                   // @
 214+ 791B 43 64 55 78                  dw      LIT, Forth_Latest_Ptr   // [ ' forth >body 4 + ] Literal
 215+ 791F 03 6C                        dw      STORE                   // !
 216+ 7921 62 6D 58 6E                  dw      ZERO, NMODE, STORE      // 0 nmode !
 216+ 7925 03 6C
 217+ 7927 39 6E F6 6B                  dw      FIRST, FETCH, DUP       // first @ dup
 217+ 792B 32 6B
 218+ 792D EC 6E 03 6C                  dw      USE, STORE              // use !
 219+ 7931 F6 6E 03 6C                  dw      PREV, STORE             // prev !
 220+ 7935 43 64 04 00                  dw      LIT, 4, PLACE, STORE    // 4 place !
 220+ 7939 09 6F 03 6C
 221+ 793D              //              dw      LIT, 8
 222+ 793D              //              dw      LIT, FLAGS2, CSTORE     // 8 5C6A c!
 223+ 793D 72 6D 2A 6F                  dw      TWO, HP, STORE          // 2 hp !
 223+ 7941 03 6C
 224+ 7943 E6 78        Warm_Start:     dw      WARM
 225+ 7945 FD 78        Cold_Start:     dw      COLD
 226+ 7947 BD 69                        dw      EXIT
 227+ 7949
 228+ 7949              //  ______________________________________________________________________
 229+ 7949              WarmRoutine:
 230+ 7949              ColdRoutine:
 231+ 7949 DD 21 32 64                  ld      ix, Next_Ptr
 232+ 794D D9                           exx
 233+ 794E E5                           push    hl
 234+ 794F D9                           exx
 235+ 7950
 236+ 7950 ED 73 08 64                  ld      (SP_Basic), sp
 237+ 7954 ED 7B 12 64                  ld      sp, (S0_origin)
 238+ 7958              //              nop
 239+ 7958 2A 14 64                     ld      hl, (R0_origin)
 240+ 795B              //              nop
 241+ 795B                              ldrphl
 241+ 795B 22 30 64    >                ld      (RP_Pointer),hl
 242+ 795E 01 43 79                     ld      bc, Warm_Start
 243+ 7961 38 02                        jr      c, Warm_Skip
 244+ 7963 03                           inc     bc
 245+ 7964 03                           inc     bc
 246+ 7965              Warm_Skip:
 247+ 7965                              next
 247+ 7965 DD E9       >                jp      (ix)
 248+ 7967
 249+ 7967              //  ______________________________________________________________________
 250+ 7967              //
 251+ 7967              // basic        --
 252+ 7967                              New_Def BASIC, "BASIC", is_code, is_normal
 252+ 7967             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 252+ 7967             >
 252+ 7967             >                // dummy db directives used to calculate length of namec
 252+ 7967 42 41 53 49 >                db      "BASIC"
 252+ 796B 43          >
 252+ 796C             >len_NFA         defl    $ - temp_NFA
 252+ 796C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 252+ 7967             >
 252+ 7967 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 252+ 7968 42 41 53 49 >                db      "BASIC"               // name string in 7-bit ascii, but
 252+ 796C 43          >
 252+ 796D             >                org     $-1                 // alter last byte of Name just above to set
 252+ 796C C3          >                db      {b $} | END_BIT     // msb as name end
 252+ 796D             >
 252+ 796D F6 78       >                dw      last_NFA            // Link to previous definition Name
 252+ 796F             >BASIC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 252+ 796F ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 252+ 796F             >                else
 252+ 796F 71 79       >                dw      $ + 2   ; ok        // is pointed by CFA
 252+ 7971             >                endif           ; ok        // for other definitions it "points" the correct handler
 252+ 7971             >                // Use of "; ok" to suppress "warning[fwdref]"
 252+ 7971             >
 252+ 7971             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 253+ 7971 C1                           pop     bc
 254+ 7972 21 00 00                     ld      hl, 0
 255+ 7975 39                           add     hl, sp
 256+ 7976 ED 7B 08 64                  ld      sp, (SP_Basic)
 257+ 797A              //              nop
 258+ 797A 22 08 64                     ld      (SP_Basic),hl
 259+ 797D D9                           exx
 260+ 797E E1                           pop     hl
 261+ 797F D9                           exx
 262+ 7980 C9                           ret     // to Basic
 263+ 7981
 264+ 7981              //  ______________________________________________________________________
 265+ 7981              //
 266+ 7981              // +-           n1 n2 -- n3
 267+ 7981              // leaves n1 with the sign of n2 as n3.
 268+ 7981                              Colon_Def PLUS_MINUS, "+-", is_normal
 268+ 7981             >                New_Def  PLUS_MINUS, "+-", Enter_Ptr, is_normal ; ok
 268+ 7981             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 268+ 7981             >
 268+ 7981             >                // dummy db directives used to calculate length of namec
 268+ 7981 2B 2D       >                db      "+-"
 268+ 7983             >len_NFA         defl    $ - temp_NFA
 268+ 7983             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 268+ 7981             >
 268+ 7981 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 268+ 7982 2B 2D       >                db      "+-"               // name string in 7-bit ascii, but
 268+ 7984             >                org     $-1                 // alter last byte of Name just above to set
 268+ 7983 AD          >                db      {b $} | END_BIT     // msb as name end
 268+ 7984             >
 268+ 7984 67 79       >                dw      last_NFA            // Link to previous definition Name
 268+ 7986             >PLUS_MINUS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 268+ 7986 E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 268+ 7988             >                else
 268+ 7988 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 268+ 7988             >                endif           ; ok        // for other definitions it "points" the correct handler
 268+ 7988             >                // Use of "; ok" to suppress "warning[fwdref]"
 268+ 7988             >
 268+ 7988             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 269+ 7988 27 6A                        dw      ZLESS                   // 0<
 270+ 798A                                                              // if
 271+ 798A 7D 64                        dw      ZBRANCH
 272+ 798C 04 00                        dw      Plus_Minus_Endif - $
 273+ 798E BA 6A                        dw          MINUS               //      minus
 274+ 7990              Plus_Minus_Endif:                               // endif
 275+ 7990 BD 69                        dw      EXIT                    // ;
 276+ 7992
 277+ 7992              //  ______________________________________________________________________
 278+ 7992              //
 279+ 7992              // d+-          d1 n -- d2
 280+ 7992              // leaves d1 with the sign of n as d2.
 281+ 7992                              Colon_Def DPLUS_MINUS, "D+-", is_normal
 281+ 7992             >                New_Def  DPLUS_MINUS, "D+-", Enter_Ptr, is_normal ; ok
 281+ 7992             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 281+ 7992             >
 281+ 7992             >                // dummy db directives used to calculate length of namec
 281+ 7992 44 2B 2D    >                db      "D+-"
 281+ 7995             >len_NFA         defl    $ - temp_NFA
 281+ 7995             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 281+ 7992             >
 281+ 7992 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 281+ 7993 44 2B 2D    >                db      "D+-"               // name string in 7-bit ascii, but
 281+ 7996             >                org     $-1                 // alter last byte of Name just above to set
 281+ 7995 AD          >                db      {b $} | END_BIT     // msb as name end
 281+ 7996             >
 281+ 7996 81 79       >                dw      last_NFA            // Link to previous definition Name
 281+ 7998             >DPLUS_MINUS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 281+ 7998 E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 281+ 799A             >                else
 281+ 799A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 281+ 799A             >                endif           ; ok        // for other definitions it "points" the correct handler
 281+ 799A             >                // Use of "; ok" to suppress "warning[fwdref]"
 281+ 799A             >
 281+ 799A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 282+ 799A 27 6A                        dw      ZLESS                   // 0<
 283+ 799C                                                              // if
 284+ 799C 7D 64                        dw      ZBRANCH
 285+ 799E 04 00                        dw      DPlus_Minus_Endif - $
 286+ 79A0 CF 6A                        dw          DMINUS              //      dminus
 287+ 79A2              DPlus_Minus_Endif:                              // endif
 288+ 79A2 BD 69                        dw      EXIT                    // ;
 289+ 79A4
 290+ 79A4              //  ______________________________________________________________________
 291+ 79A4              //
 292+ 79A4              // abs          n1 -- n2
 293+ 79A4                              Colon_Def ABS_OP, "ABS", is_normal
 293+ 79A4             >                New_Def  ABS_OP, "ABS", Enter_Ptr, is_normal ; ok
 293+ 79A4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 293+ 79A4             >
 293+ 79A4             >                // dummy db directives used to calculate length of namec
 293+ 79A4 41 42 53    >                db      "ABS"
 293+ 79A7             >len_NFA         defl    $ - temp_NFA
 293+ 79A7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 293+ 79A4             >
 293+ 79A4 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 293+ 79A5 41 42 53    >                db      "ABS"               // name string in 7-bit ascii, but
 293+ 79A8             >                org     $-1                 // alter last byte of Name just above to set
 293+ 79A7 D3          >                db      {b $} | END_BIT     // msb as name end
 293+ 79A8             >
 293+ 79A8 92 79       >                dw      last_NFA            // Link to previous definition Name
 293+ 79AA             >ABS_OP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 293+ 79AA E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 293+ 79AC             >                else
 293+ 79AC ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 293+ 79AC             >                endif           ; ok        // for other definitions it "points" the correct handler
 293+ 79AC             >                // Use of "; ok" to suppress "warning[fwdref]"
 293+ 79AC             >
 293+ 79AC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 294+ 79AC 32 6B                        dw      DUP                     // dup
 295+ 79AE 86 79                        dw      PLUS_MINUS              // +-
 296+ 79B0 BD 69                        dw      EXIT                    // ;
 297+ 79B2
 298+ 79B2              //  ______________________________________________________________________
 299+ 79B2              //
 300+ 79B2              // dabs         d1 -- d2
 301+ 79B2                              Colon_Def DABS, "DABS", is_normal
 301+ 79B2             >                New_Def  DABS, "DABS", Enter_Ptr, is_normal ; ok
 301+ 79B2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 301+ 79B2             >
 301+ 79B2             >                // dummy db directives used to calculate length of namec
 301+ 79B2 44 41 42 53 >                db      "DABS"
 301+ 79B6             >len_NFA         defl    $ - temp_NFA
 301+ 79B6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 301+ 79B2             >
 301+ 79B2 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 301+ 79B3 44 41 42 53 >                db      "DABS"               // name string in 7-bit ascii, but
 301+ 79B7             >                org     $-1                 // alter last byte of Name just above to set
 301+ 79B6 D3          >                db      {b $} | END_BIT     // msb as name end
 301+ 79B7             >
 301+ 79B7 A4 79       >                dw      last_NFA            // Link to previous definition Name
 301+ 79B9             >DABS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 301+ 79B9 E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 301+ 79BB             >                else
 301+ 79BB ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 301+ 79BB             >                endif           ; ok        // for other definitions it "points" the correct handler
 301+ 79BB             >                // Use of "; ok" to suppress "warning[fwdref]"
 301+ 79BB             >
 301+ 79BB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 302+ 79BB 32 6B                        dw      DUP                     // dup
 303+ 79BD 98 79                        dw      DPLUS_MINUS             // d+-
 304+ 79BF BD 69                        dw      EXIT                    // ;
 305+ 79C1
 306+ 79C1              //  ______________________________________________________________________
 307+ 79C1              //
 308+ 79C1              // m*           n1 n2 -- d
 309+ 79C1              // multiply two integer giving a double
 310+ 79C1                              Colon_Def MMUL, "M*", is_normal
 310+ 79C1             >                New_Def  MMUL, "M*", Enter_Ptr, is_normal ; ok
 310+ 79C1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 310+ 79C1             >
 310+ 79C1             >                // dummy db directives used to calculate length of namec
 310+ 79C1 4D 2A       >                db      "M*"
 310+ 79C3             >len_NFA         defl    $ - temp_NFA
 310+ 79C3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 310+ 79C1             >
 310+ 79C1 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 310+ 79C2 4D 2A       >                db      "M*"               // name string in 7-bit ascii, but
 310+ 79C4             >                org     $-1                 // alter last byte of Name just above to set
 310+ 79C3 AA          >                db      {b $} | END_BIT     // msb as name end
 310+ 79C4             >
 310+ 79C4 B2 79       >                dw      last_NFA            // Link to previous definition Name
 310+ 79C6             >MMUL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 310+ 79C6 E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 310+ 79C8             >                else
 310+ 79C8 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 310+ 79C8             >                endif           ; ok        // for other definitions it "points" the correct handler
 310+ 79C8             >                // Use of "; ok" to suppress "warning[fwdref]"
 310+ 79C8             >
 310+ 79C8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 311+ 79C8 9C 6B 74 69                  dw      TWO_DUP, XOR_OP, TO_R   // 2dup xor >r
 311+ 79CC E6 69
 312+ 79CE AA 79 25 6B                  dw      ABS_OP, SWAP            // abs swap
 313+ 79D2 AA 79 E0 68                  dw      ABS_OP, UM_MUL          // abs um*
 314+ 79D6 FA 69 98 79                  dw      R_TO, DPLUS_MINUS       // r> d+-
 315+ 79DA BD 69                        dw      EXIT                    // ;
 316+ 79DC
 317+ 79DC              //  ______________________________________________________________________
 318+ 79DC              //
 319+ 79DC              // m/         d n -- q r
 320+ 79DC              // multiply two integer giving a double
 321+ 79DC                              Colon_Def MDIV, "M/", is_normal
 321+ 79DC             >                New_Def  MDIV, "M/", Enter_Ptr, is_normal ; ok
 321+ 79DC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 321+ 79DC             >
 321+ 79DC             >                // dummy db directives used to calculate length of namec
 321+ 79DC 4D 2F       >                db      "M/"
 321+ 79DE             >len_NFA         defl    $ - temp_NFA
 321+ 79DE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 321+ 79DC             >
 321+ 79DC 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 321+ 79DD 4D 2F       >                db      "M/"               // name string in 7-bit ascii, but
 321+ 79DF             >                org     $-1                 // alter last byte of Name just above to set
 321+ 79DE AF          >                db      {b $} | END_BIT     // msb as name end
 321+ 79DF             >
 321+ 79DF C1 79       >                dw      last_NFA            // Link to previous definition Name
 321+ 79E1             >MDIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 321+ 79E1 E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 321+ 79E3             >                else
 321+ 79E3 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 321+ 79E3             >                endif           ; ok        // for other definitions it "points" the correct handler
 321+ 79E3             >                // Use of "; ok" to suppress "warning[fwdref]"
 321+ 79E3             >
 321+ 79E3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 322+ 79E3 ED 6A E6 69                  dw      OVER, TO_R, TO_R        // over >r >r
 322+ 79E7 E6 69
 323+ 79E9 B9 79 0D 6A                  dw      DABS, R_OP, ABS_OP      // dabs r abs
 323+ 79ED AA 79
 324+ 79EF 11 69                        dw      UMDIVMOD                // um/mod
 325+ 79F1 FA 69                        dw      R_TO                    // r>
 326+ 79F3 0D 6A 74 69                  dw      R_OP, XOR_OP            // r xor
 327+ 79F7 86 79 25 6B                  dw      PLUS_MINUS, SWAP        // +- swap
 328+ 79FB FA 69                        dw      R_TO                    // r>
 329+ 79FD 86 79 25 6B                  dw      PLUS_MINUS, SWAP        // +- swap
 330+ 7A01 BD 69                        dw      EXIT                    // ;
 331+ 7A03
 332+ 7A03              //  ______________________________________________________________________
 333+ 7A03              //
 334+ 7A03              // *            n1 n2 -- n3
 335+ 7A03              // multiply two integer
 336+ 7A03                              Colon_Def MUL, "*", is_normal
 336+ 7A03             >                New_Def  MUL, "*", Enter_Ptr, is_normal ; ok
 336+ 7A03             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 336+ 7A03             >
 336+ 7A03             >                // dummy db directives used to calculate length of namec
 336+ 7A03 2A          >                db      "*"
 336+ 7A04             >len_NFA         defl    $ - temp_NFA
 336+ 7A04             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 336+ 7A03             >
 336+ 7A03 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 336+ 7A04 2A          >                db      "*"               // name string in 7-bit ascii, but
 336+ 7A05             >                org     $-1                 // alter last byte of Name just above to set
 336+ 7A04 AA          >                db      {b $} | END_BIT     // msb as name end
 336+ 7A05             >
 336+ 7A05 DC 79       >                dw      last_NFA            // Link to previous definition Name
 336+ 7A07             >MUL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 336+ 7A07 E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 336+ 7A09             >                else
 336+ 7A09 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 336+ 7A09             >                endif           ; ok        // for other definitions it "points" the correct handler
 336+ 7A09             >                // Use of "; ok" to suppress "warning[fwdref]"
 336+ 7A09             >
 336+ 7A09             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 337+ 7A09 C6 79 FD 6A                  dw      MMUL, DROP              // m* drop
 338+ 7A0D BD 69                        dw      EXIT                    // ;
 339+ 7A0F
 340+ 7A0F              //  ______________________________________________________________________
 341+ 7A0F              //
 342+ 7A0F              // /mod         n1 n2 -- n3 n4
 343+ 7A0F              // leaves quotient n4 and remainder n3 of the integer division n1 / n2.
 344+ 7A0F              // The remainder has the sign of n1
 345+ 7A0F                              Colon_Def DIVMOD, "/MOD", is_normal
 345+ 7A0F             >                New_Def  DIVMOD, "/MOD", Enter_Ptr, is_normal ; ok
 345+ 7A0F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 345+ 7A0F             >
 345+ 7A0F             >                // dummy db directives used to calculate length of namec
 345+ 7A0F 2F 4D 4F 44 >                db      "/MOD"
 345+ 7A13             >len_NFA         defl    $ - temp_NFA
 345+ 7A13             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 345+ 7A0F             >
 345+ 7A0F 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 345+ 7A10 2F 4D 4F 44 >                db      "/MOD"               // name string in 7-bit ascii, but
 345+ 7A14             >                org     $-1                 // alter last byte of Name just above to set
 345+ 7A13 C4          >                db      {b $} | END_BIT     // msb as name end
 345+ 7A14             >
 345+ 7A14 03 7A       >                dw      last_NFA            // Link to previous definition Name
 345+ 7A16             >DIVMOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 345+ 7A16 E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 345+ 7A18             >                else
 345+ 7A18 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 345+ 7A18             >                endif           ; ok        // for other definitions it "points" the correct handler
 345+ 7A18             >                // Use of "; ok" to suppress "warning[fwdref]"
 345+ 7A18             >
 345+ 7A18             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 346+ 7A18 E6 69 74 6F                  dw      TO_R, S_TO_D, R_TO      // >r s->d r>
 346+ 7A1C FA 69
 347+ 7A1E E1 79                        dw      MDIV                    // m/
 348+ 7A20 BD 69                        dw      EXIT                    // ;
 349+ 7A22
 350+ 7A22              //  ______________________________________________________________________
 351+ 7A22              //
 352+ 7A22              // /            n1 n2 -- n3
 353+ 7A22              // division
 354+ 7A22                              Colon_Def DIV, "/", is_normal
 354+ 7A22             >                New_Def  DIV, "/", Enter_Ptr, is_normal ; ok
 354+ 7A22             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 354+ 7A22             >
 354+ 7A22             >                // dummy db directives used to calculate length of namec
 354+ 7A22 2F          >                db      "/"
 354+ 7A23             >len_NFA         defl    $ - temp_NFA
 354+ 7A23             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 354+ 7A22             >
 354+ 7A22 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 354+ 7A23 2F          >                db      "/"               // name string in 7-bit ascii, but
 354+ 7A24             >                org     $-1                 // alter last byte of Name just above to set
 354+ 7A23 AF          >                db      {b $} | END_BIT     // msb as name end
 354+ 7A24             >
 354+ 7A24 0F 7A       >                dw      last_NFA            // Link to previous definition Name
 354+ 7A26             >DIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 354+ 7A26 E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 354+ 7A28             >                else
 354+ 7A28 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 354+ 7A28             >                endif           ; ok        // for other definitions it "points" the correct handler
 354+ 7A28             >                // Use of "; ok" to suppress "warning[fwdref]"
 354+ 7A28             >
 354+ 7A28             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 355+ 7A28 16 7A 08 6B                  dw      DIVMOD, NIP             // /mod nip
 356+ 7A2C BD 69                        dw      EXIT                    // ;
 357+ 7A2E
 358+ 7A2E              //  ______________________________________________________________________
 359+ 7A2E              //
 360+ 7A2E              // mod          n1 n2 -- n3
 361+ 7A2E                              Colon_Def MOD, "MOD", is_normal
 361+ 7A2E             >                New_Def  MOD, "MOD", Enter_Ptr, is_normal ; ok
 361+ 7A2E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 361+ 7A2E             >
 361+ 7A2E             >                // dummy db directives used to calculate length of namec
 361+ 7A2E 4D 4F 44    >                db      "MOD"
 361+ 7A31             >len_NFA         defl    $ - temp_NFA
 361+ 7A31             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 361+ 7A2E             >
 361+ 7A2E 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 361+ 7A2F 4D 4F 44    >                db      "MOD"               // name string in 7-bit ascii, but
 361+ 7A32             >                org     $-1                 // alter last byte of Name just above to set
 361+ 7A31 C4          >                db      {b $} | END_BIT     // msb as name end
 361+ 7A32             >
 361+ 7A32 22 7A       >                dw      last_NFA            // Link to previous definition Name
 361+ 7A34             >MOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 361+ 7A34 E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 361+ 7A36             >                else
 361+ 7A36 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 361+ 7A36             >                endif           ; ok        // for other definitions it "points" the correct handler
 361+ 7A36             >                // Use of "; ok" to suppress "warning[fwdref]"
 361+ 7A36             >
 361+ 7A36             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 362+ 7A36 16 7A FD 6A                  dw      DIVMOD, DROP            // /mod drop
 363+ 7A3A BD 69                        dw      EXIT                    // ;
 364+ 7A3C
 365+ 7A3C              //  ______________________________________________________________________
 366+ 7A3C              //
 367+ 7A3C              // */mod        n1 n2 n3 -- n4 n5
 368+ 7A3C              // leaves the quotient n5 and the remainder n4 of the operation
 369+ 7A3C              // (n1 * n2) / n3. The intermediate passage through a double number
 370+ 7A3C              // avoids loss of precision
 371+ 7A3C                              Colon_Def MUL_DIV_MOD, "*/MOD", is_normal
 371+ 7A3C             >                New_Def  MUL_DIV_MOD, "*/MOD", Enter_Ptr, is_normal ; ok
 371+ 7A3C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 371+ 7A3C             >
 371+ 7A3C             >                // dummy db directives used to calculate length of namec
 371+ 7A3C 2A 2F 4D 4F >                db      "*/MOD"
 371+ 7A40 44          >
 371+ 7A41             >len_NFA         defl    $ - temp_NFA
 371+ 7A41             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 371+ 7A3C             >
 371+ 7A3C 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 371+ 7A3D 2A 2F 4D 4F >                db      "*/MOD"               // name string in 7-bit ascii, but
 371+ 7A41 44          >
 371+ 7A42             >                org     $-1                 // alter last byte of Name just above to set
 371+ 7A41 C4          >                db      {b $} | END_BIT     // msb as name end
 371+ 7A42             >
 371+ 7A42 2E 7A       >                dw      last_NFA            // Link to previous definition Name
 371+ 7A44             >MUL_DIV_MOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 371+ 7A44 E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 371+ 7A46             >                else
 371+ 7A46 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 371+ 7A46             >                endif           ; ok        // for other definitions it "points" the correct handler
 371+ 7A46             >                // Use of "; ok" to suppress "warning[fwdref]"
 371+ 7A46             >
 371+ 7A46             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 372+ 7A46 E6 69 C6 79                  dw      TO_R, MMUL              // >r  m*
 373+ 7A4A FA 69 E1 79                  dw      R_TO, MDIV              // r>  m/
 374+ 7A4E BD 69                        dw      EXIT                    // ;
 375+ 7A50
 376+ 7A50              //  ______________________________________________________________________
 377+ 7A50              //
 378+ 7A50              // */          n1 n2 n3 -- n4
 379+ 7A50              // (n1 * n2) / n3. The intermediate passage through a double number avoids loss of precision
 380+ 7A50                              Colon_Def MUL_DIV, "*/", is_normal
 380+ 7A50             >                New_Def  MUL_DIV, "*/", Enter_Ptr, is_normal ; ok
 380+ 7A50             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 380+ 7A50             >
 380+ 7A50             >                // dummy db directives used to calculate length of namec
 380+ 7A50 2A 2F       >                db      "*/"
 380+ 7A52             >len_NFA         defl    $ - temp_NFA
 380+ 7A52             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 380+ 7A50             >
 380+ 7A50 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 380+ 7A51 2A 2F       >                db      "*/"               // name string in 7-bit ascii, but
 380+ 7A53             >                org     $-1                 // alter last byte of Name just above to set
 380+ 7A52 AF          >                db      {b $} | END_BIT     // msb as name end
 380+ 7A53             >
 380+ 7A53 3C 7A       >                dw      last_NFA            // Link to previous definition Name
 380+ 7A55             >MUL_DIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 380+ 7A55 E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 380+ 7A57             >                else
 380+ 7A57 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 380+ 7A57             >                endif           ; ok        // for other definitions it "points" the correct handler
 380+ 7A57             >                // Use of "; ok" to suppress "warning[fwdref]"
 380+ 7A57             >
 380+ 7A57             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 381+ 7A57 44 7A                        dw     MUL_DIV_MOD              // */mod
 382+ 7A59 08 6B                        dw     NIP                      // nip
 383+ 7A5B BD 69                        dw     EXIT                     // ;
 384+ 7A5D
 385+ 7A5D
 386+ 7A5D              //  ______________________________________________________________________
 387+ 7A5D              //
 388+ 7A5D              // m/mod        ud1 u2 -- u3 ud4
 389+ 7A5D              // mixed operation: it leaves the remainder u3 and the quotient ud4 of ud1 / u1.
 390+ 7A5D              // All terms are unsigned.
 391+ 7A5D                              Colon_Def MDIV_MOD, "M/MOD", is_normal
 391+ 7A5D             >                New_Def  MDIV_MOD, "M/MOD", Enter_Ptr, is_normal ; ok
 391+ 7A5D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 391+ 7A5D             >
 391+ 7A5D             >                // dummy db directives used to calculate length of namec
 391+ 7A5D 4D 2F 4D 4F >                db      "M/MOD"
 391+ 7A61 44          >
 391+ 7A62             >len_NFA         defl    $ - temp_NFA
 391+ 7A62             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 391+ 7A5D             >
 391+ 7A5D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 391+ 7A5E 4D 2F 4D 4F >                db      "M/MOD"               // name string in 7-bit ascii, but
 391+ 7A62 44          >
 391+ 7A63             >                org     $-1                 // alter last byte of Name just above to set
 391+ 7A62 C4          >                db      {b $} | END_BIT     // msb as name end
 391+ 7A63             >
 391+ 7A63 50 7A       >                dw      last_NFA            // Link to previous definition Name
 391+ 7A65             >MDIV_MOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 391+ 7A65 E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 391+ 7A67             >                else
 391+ 7A67 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 391+ 7A67             >                endif           ; ok        // for other definitions it "points" the correct handler
 391+ 7A67             >                // Use of "; ok" to suppress "warning[fwdref]"
 391+ 7A67             >
 391+ 7A67             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 392+ 7A67 E6 69                        dw      TO_R                    // >r           ( ud1 )
 393+ 7A69 62 6D 0D 6A                  dw      ZERO, R_OP, UMDIVMOD    // 0 r um/mod   ( l rem1 h/r )
 393+ 7A6D 11 69
 394+ 7A6F FA 69 25 6B                  dw      R_TO, SWAP, TO_R        // r> swap >r   ( l rem )
 394+ 7A73 E6 69
 395+ 7A75 11 69                        dw      UMDIVMOD                // um/mod       ( rem2 l/r )
 396+ 7A77 FA 69                        dw      R_TO                    // r>           ( rem2 l/r h/r )
 397+ 7A79 BD 69                        dw      EXIT                    // ;
 398+ 7A7B
 399+ 7A7B              //  ______________________________________________________________________
 400+ 7A7B              //
 401+ 7A7B              // (line)       n1 n2 -- a b
 402+ 7A7B              // sends the line n1 of block n2 to the disk buffer.
 403+ 7A7B              // it returns the address a and ca counter b = C/L meaning a whole line.
 404+ 7A7B                              Colon_Def CLINE, "(LINE)", is_normal
 404+ 7A7B             >                New_Def  CLINE, "(LINE)", Enter_Ptr, is_normal ; ok
 404+ 7A7B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 404+ 7A7B             >
 404+ 7A7B             >                // dummy db directives used to calculate length of namec
 404+ 7A7B 28 4C 49 4E >                db      "(LINE)"
 404+ 7A7F 45 29       >
 404+ 7A81             >len_NFA         defl    $ - temp_NFA
 404+ 7A81             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 404+ 7A7B             >
 404+ 7A7B 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 404+ 7A7C 28 4C 49 4E >                db      "(LINE)"               // name string in 7-bit ascii, but
 404+ 7A80 45 29       >
 404+ 7A82             >                org     $-1                 // alter last byte of Name just above to set
 404+ 7A81 A9          >                db      {b $} | END_BIT     // msb as name end
 404+ 7A82             >
 404+ 7A82 5D 7A       >                dw      last_NFA            // Link to previous definition Name
 404+ 7A84             >CLINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 404+ 7A84 E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 404+ 7A86             >                else
 404+ 7A86 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 404+ 7A86             >                endif           ; ok        // for other definitions it "points" the correct handler
 404+ 7A86             >                // Use of "; ok" to suppress "warning[fwdref]"
 404+ 7A86             >
 404+ 7A86             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 405+ 7A86 E6 69                        dw      TO_R                    // >r
 406+ 7A88 0F 6D                        dw      NOOP                    // noop
 407+ 7A8A 96 6D                        dw      CL                      // c/l
 408+ 7A8C A2 6D 44 7A                  dw      BBUF, MUL_DIV_MOD       // */mod
 409+ 7A90 FA 69                        dw      R_TO                    // r>
 410+ 7A92 AE 6D 07 7A                  dw      BSCR, MUL, PLUS         // b/scr * +
 410+ 7A96 4F 6A
 411+ 7A98 93 7D                        dw      BLOCK                   // block   ( forward )
 412+ 7A9A 4F 6A                        dw      PLUS                    // +
 413+ 7A9C 0F 6D                        dw      NOOP                    // noop
 414+ 7A9E 96 6D                        dw      CL                      // c/l
 415+ 7AA0 BD 69                        dw      EXIT                    // ;
 416+ 7AA2
 417+ 7AA2              //  ______________________________________________________________________
 418+ 7AA2              //
 419+ 7AA2              // .line        n1 n2 --
 420+ 7AA2              // Sends to output line  n1  of screen n2.
 421+ 7AA2                              Colon_Def DOT_LINE, ".LINE", is_normal
 421+ 7AA2             >                New_Def  DOT_LINE, ".LINE", Enter_Ptr, is_normal ; ok
 421+ 7AA2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 421+ 7AA2             >
 421+ 7AA2             >                // dummy db directives used to calculate length of namec
 421+ 7AA2 2E 4C 49 4E >                db      ".LINE"
 421+ 7AA6 45          >
 421+ 7AA7             >len_NFA         defl    $ - temp_NFA
 421+ 7AA7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 421+ 7AA2             >
 421+ 7AA2 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 421+ 7AA3 2E 4C 49 4E >                db      ".LINE"               // name string in 7-bit ascii, but
 421+ 7AA7 45          >
 421+ 7AA8             >                org     $-1                 // alter last byte of Name just above to set
 421+ 7AA7 C5          >                db      {b $} | END_BIT     // msb as name end
 421+ 7AA8             >
 421+ 7AA8 7B 7A       >                dw      last_NFA            // Link to previous definition Name
 421+ 7AAA             >DOT_LINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 421+ 7AAA E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 421+ 7AAC             >                else
 421+ 7AAC ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 421+ 7AAC             >                endif           ; ok        // for other definitions it "points" the correct handler
 421+ 7AAC             >                // Use of "; ok" to suppress "warning[fwdref]"
 421+ 7AAC             >
 421+ 7AAC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 422+ 7AAC 84 7A BD 72                  dw      CLINE, LTRAILING, TYPE  // (line) -trailing type
 422+ 7AB0 99 72
 423+ 7AB2 BD 69                        dw      EXIT                    // ;
 424+ 7AB4
 425+ 7AB4              //  ______________________________________________________________________
 426+ 7AB4              //
 427+ 7AB4              // message       n1 n2 --
 428+ 7AB4              // prints error message to current channel.
 429+ 7AB4              // if WARNING is 0, prints "MSG#n".
 430+ 7AB4              // if WARNING is 1, prints line n of screen 4.
 431+ 7AB4              // if WARNING is -1, see ERROR
 432+ 7AB4              // value can be negative or beyond block 4.
 433+ 7AB4                              Colon_Def MESSAGE, "MESSAGE", is_normal
 433+ 7AB4             >                New_Def  MESSAGE, "MESSAGE", Enter_Ptr, is_normal ; ok
 433+ 7AB4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 433+ 7AB4             >
 433+ 7AB4             >                // dummy db directives used to calculate length of namec
 433+ 7AB4 4D 45 53 53 >                db      "MESSAGE"
 433+ 7AB8 41 47 45    >
 433+ 7ABB             >len_NFA         defl    $ - temp_NFA
 433+ 7ABB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 433+ 7AB4             >
 433+ 7AB4 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 433+ 7AB5 4D 45 53 53 >                db      "MESSAGE"               // name string in 7-bit ascii, but
 433+ 7AB9 41 47 45    >
 433+ 7ABC             >                org     $-1                 // alter last byte of Name just above to set
 433+ 7ABB C5          >                db      {b $} | END_BIT     // msb as name end
 433+ 7ABC             >
 433+ 7ABC A2 7A       >                dw      last_NFA            // Link to previous definition Name
 433+ 7ABE             >MESSAGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 433+ 7ABE E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 433+ 7AC0             >                else
 433+ 7AC0 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 433+ 7AC0             >                endif           ; ok        // for other definitions it "points" the correct handler
 433+ 7AC0             >                // Use of "; ok" to suppress "warning[fwdref]"
 433+ 7AC0             >
 433+ 7AC0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 434+ 7AC0 0D 6E F6 6B                  dw      WARNING, FETCH          // warning @
 435+ 7AC4                                                              // if
 436+ 7AC4 7D 64                        dw      ZBRANCH
 437+ 7AC6 18 00                        dw      Message_Else - $
 438+ 7AC8 43 64 04 00                  dw          LIT, 4              //      4
 439+ 7ACC 88 6E F6 6B                  dw          OFFSET, FETCH       //      offset @
 440+ 7AD0 AE 6D 26 7A                  dw          BSCR, DIV, SUBTRACT //      b/scr / -
 440+ 7AD4 88 6F
 441+ 7AD6 AA 7A                        dw          DOT_LINE            //      .line
 442+ 7AD8 45 70                        dw          SPACE               //      space
 443+ 7ADA                                                              // else
 444+ 7ADA
 445+ 7ADA 66 64                        dw      BRANCH
 446+ 7ADC 0B 00                        dw      Message_ENdif - $
 447+ 7ADE              Message_Else:
 448+ 7ADE 6B 74                        dw          C_DOT_QUOTE         //      .( msg#)
 449+ 7AE0 04 6D 73 67                  db          4, "msg#"
 449+ 7AE4 23
 450+ 7AE5 00 83                        dw          DOT                 //      .  ( forward )
 451+ 7AE7              Message_ENdif:                                  // endif
 452+ 7AE7 BD 69                        dw      EXIT                    // ;
 453+ 7AE9
 454+ 7AE9
 455+ 7AE9              //  ______________________________________________________________________
 456+ 7AE9              //
 457+ 7AE9              // device
 458+ 7AE9                              Variable_Def DEVICE,   "DEVICE",   2
 458+ 7AE9             >                New_Def  DEVICE, "DEVICE", Variable_Ptr, is_normal
 458+ 7AE9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 458+ 7AE9             >
 458+ 7AE9             >                // dummy db directives used to calculate length of namec
 458+ 7AE9 44 45 56 49 >                db      "DEVICE"
 458+ 7AED 43 45       >
 458+ 7AEF             >len_NFA         defl    $ - temp_NFA
 458+ 7AEF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 458+ 7AE9             >
 458+ 7AE9 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 458+ 7AEA 44 45 56 49 >                db      "DEVICE"               // name string in 7-bit ascii, but
 458+ 7AEE 43 45       >
 458+ 7AF0             >                org     $-1                 // alter last byte of Name just above to set
 458+ 7AEF C5          >                db      {b $} | END_BIT     // msb as name end
 458+ 7AF0             >
 458+ 7AF0 B4 7A       >                dw      last_NFA            // Link to previous definition Name
 458+ 7AF2             >DEVICE:          if Variable_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 458+ 7AF2 3F 6D       >                dw      Variable_Ptr ; ok        // for primitive definitions  actual code
 458+ 7AF4             >                else
 458+ 7AF4 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 458+ 7AF4             >                endif           ; ok        // for other definitions it "points" the correct handler
 458+ 7AF4             >                // Use of "; ok" to suppress "warning[fwdref]"
 458+ 7AF4             >
 458+ 7AF4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 458+ 7AF4 02 00       >                dw      2
 459+ 7AF6
 460+ 7AF6              //  ______________________________________________________________________
 461+ 7AF6              //
 462+ 7AF6              // inkey        -- c | 0
 463+ 7AF6              // call ROM inkey$ routine, returns c or "zero".
 464+ 7AF6
 465+ 7AF6                              New_Def INKEY, "INKEY", is_code, is_normal
 465+ 7AF6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 465+ 7AF6             >
 465+ 7AF6             >                // dummy db directives used to calculate length of namec
 465+ 7AF6 49 4E 4B 45 >                db      "INKEY"
 465+ 7AFA 59          >
 465+ 7AFB             >len_NFA         defl    $ - temp_NFA
 465+ 7AFB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 465+ 7AF6             >
 465+ 7AF6 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 465+ 7AF7 49 4E 4B 45 >                db      "INKEY"               // name string in 7-bit ascii, but
 465+ 7AFB 59          >
 465+ 7AFC             >                org     $-1                 // alter last byte of Name just above to set
 465+ 7AFB D9          >                db      {b $} | END_BIT     // msb as name end
 465+ 7AFC             >
 465+ 7AFC E9 7A       >                dw      last_NFA            // Link to previous definition Name
 465+ 7AFE             >INKEY:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 465+ 7AFE ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 465+ 7AFE             >                else
 465+ 7AFE 00 7B       >                dw      $ + 2   ; ok        // is pointed by CFA
 465+ 7B00             >                endif           ; ok        // for other definitions it "points" the correct handler
 465+ 7B00             >                // Use of "; ok" to suppress "warning[fwdref]"
 465+ 7B00             >
 465+ 7B00             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 466+ 7B00
 467+ 7B00 C5                           push    bc
 468+ 7B01 ED 73 2C 64                  ld      (SP_Saved), sp
 469+ 7B05 31 FE 63                     ld      sp, Cold_origin - 2
 470+ 7B08 DD E5                        push    ix
 471+ 7B0A CD E6 15                     call    $15E6                   // instead of 15E9
 472+ 7B0D DD E1                        pop     ix
 473+ 7B0F ED 7B 2C 64                  ld      sp, (SP_Saved)
 474+ 7B13 6F                           ld      l, a
 475+ 7B14 26 00                        ld      h, 0
 476+ 7B16 C1                           pop     bc
 477+ 7B17                              psh1
 477+ 7B17 E5          >                push    hl
 477+ 7B18 DD E9       >                jp      (ix)
 478+ 7B1A
 479+ 7B1A              //  ______________________________________________________________________
 480+ 7B1A              //
 481+ 7B1A              // select      n --
 482+ 7B1A              // selects the given channel number
 483+ 7B1A
 484+ 7B1A                              New_Def SELECT, "SELECT", is_code, is_normal
 484+ 7B1A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 484+ 7B1A             >
 484+ 7B1A             >                // dummy db directives used to calculate length of namec
 484+ 7B1A 53 45 4C 45 >                db      "SELECT"
 484+ 7B1E 43 54       >
 484+ 7B20             >len_NFA         defl    $ - temp_NFA
 484+ 7B20             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 484+ 7B1A             >
 484+ 7B1A 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 484+ 7B1B 53 45 4C 45 >                db      "SELECT"               // name string in 7-bit ascii, but
 484+ 7B1F 43 54       >
 484+ 7B21             >                org     $-1                 // alter last byte of Name just above to set
 484+ 7B20 D4          >                db      {b $} | END_BIT     // msb as name end
 484+ 7B21             >
 484+ 7B21 F6 7A       >                dw      last_NFA            // Link to previous definition Name
 484+ 7B23             >SELECT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 484+ 7B23 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 484+ 7B23             >                else
 484+ 7B23 25 7B       >                dw      $ + 2   ; ok        // is pointed by CFA
 484+ 7B25             >                endif           ; ok        // for other definitions it "points" the correct handler
 484+ 7B25             >                // Use of "; ok" to suppress "warning[fwdref]"
 484+ 7B25             >
 484+ 7B25             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 485+ 7B25 E1                           pop     hl
 486+ 7B26 C5                           push    bc
 487+ 7B27 7D                           ld      a, l
 488+ 7B28 ED 73 2C 64                  ld      (SP_Saved), sp
 489+ 7B2C 31 FE 63                     ld      sp, Cold_origin - 2
 490+ 7B2F DD E5                        push    ix
 491+ 7B31 CD 01 16                     call    $1601
 492+ 7B34 DD E1                        pop     ix
 493+ 7B36 ED 7B 2C 64                  ld      sp, (SP_Saved)
 494+ 7B3A C1                           pop     bc
 495+ 7B3B
 496+ 7B3B                              next
 496+ 7B3B DD E9       >                jp      (ix)
 497+ 7B3D
 498+ 7B3D              //  ______________________________________________________________________
 499+ 7B3D
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L2.asm
 111  7B3D                              include "next-opt1.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/next-opt1.asm
   1+ 7B3D              //  ______________________________________________________________________
   2+ 7B3D              //
   3+ 7B3D              //  next-opt.asm
   4+ 7B3D              //
   5+ 7B3D              //  ZX Spectrum Next - peculiar definitions
   6+ 7B3D              //  ______________________________________________________________________
   7+ 7B3D
   8+ 7B3D              //  ______________________________________________________________________
   9+ 7B3D              //
  10+ 7B3D              // reg@         n -- b
  11+ 7B3D              // read Next REGister n giving byte b
  12+ 7B3D
  13+ 7B3D                              Colon_Def REG_FETCH, "REG@", is_normal
  13+ 7B3D             >                New_Def  REG_FETCH, "REG@", Enter_Ptr, is_normal ; ok
  13+ 7B3D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13+ 7B3D             >
  13+ 7B3D             >                // dummy db directives used to calculate length of namec
  13+ 7B3D 52 45 47 40 >                db      "REG@"
  13+ 7B41             >len_NFA         defl    $ - temp_NFA
  13+ 7B41             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13+ 7B3D             >
  13+ 7B3D 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  13+ 7B3E 52 45 47 40 >                db      "REG@"               // name string in 7-bit ascii, but
  13+ 7B42             >                org     $-1                 // alter last byte of Name just above to set
  13+ 7B41 C0          >                db      {b $} | END_BIT     // msb as name end
  13+ 7B42             >
  13+ 7B42 1A 7B       >                dw      last_NFA            // Link to previous definition Name
  13+ 7B44             >REG_FETCH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  13+ 7B44 E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  13+ 7B46             >                else
  13+ 7B46 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  13+ 7B46             >                endif           ; ok        // for other definitions it "points" the correct handler
  13+ 7B46             >                // Use of "; ok" to suppress "warning[fwdref]"
  13+ 7B46             >
  13+ 7B46             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14+ 7B46 43 64 3B 24                  dw      LIT, $243B
  15+ 7B4A 69 6C                        dw      PSTORE
  16+ 7B4C 43 64 3B 25                  dw      LIT, $253B
  17+ 7B50 56 6C                        dw      PFETCH
  18+ 7B52 BD 69                        dw      EXIT
  19+ 7B54
  20+ 7B54              //  ______________________________________________________________________
  21+ 7B54              //
  22+ 7B54              // reg!         b n --
  23+ 7B54              // write value b to Next REGister n
  24+ 7B54
  25+ 7B54                              Colon_Def REG_STORE, "REG!", is_normal
  25+ 7B54             >                New_Def  REG_STORE, "REG!", Enter_Ptr, is_normal ; ok
  25+ 7B54             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  25+ 7B54             >
  25+ 7B54             >                // dummy db directives used to calculate length of namec
  25+ 7B54 52 45 47 21 >                db      "REG!"
  25+ 7B58             >len_NFA         defl    $ - temp_NFA
  25+ 7B58             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  25+ 7B54             >
  25+ 7B54 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  25+ 7B55 52 45 47 21 >                db      "REG!"               // name string in 7-bit ascii, but
  25+ 7B59             >                org     $-1                 // alter last byte of Name just above to set
  25+ 7B58 A1          >                db      {b $} | END_BIT     // msb as name end
  25+ 7B59             >
  25+ 7B59 3D 7B       >                dw      last_NFA            // Link to previous definition Name
  25+ 7B5B             >REG_STORE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  25+ 7B5B E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  25+ 7B5D             >                else
  25+ 7B5D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  25+ 7B5D             >                endif           ; ok        // for other definitions it "points" the correct handler
  25+ 7B5D             >                // Use of "; ok" to suppress "warning[fwdref]"
  25+ 7B5D             >
  25+ 7B5D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  26+ 7B5D 43 64 3B 24                  dw      LIT, $243B
  27+ 7B61 69 6C                        dw      PSTORE
  28+ 7B63 43 64 3B 25                  dw      LIT, $253B
  29+ 7B67 69 6C                        dw      PSTORE
  30+ 7B69 BD 69                        dw      EXIT
  31+ 7B6B
  32+ 7B6B              //  ______________________________________________________________________
  33+ 7B6B              //
  34+ 7B6B              // mmu7@        -- n
  35+ 7B6B              // query current page in MMU7 8K-RAM : 0 and 223
  36+ 7B6B
  37+ 7B6B                              Colon_Def MMU7_FETCH, "MMU7@", is_normal
  37+ 7B6B             >                New_Def  MMU7_FETCH, "MMU7@", Enter_Ptr, is_normal ; ok
  37+ 7B6B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  37+ 7B6B             >
  37+ 7B6B             >                // dummy db directives used to calculate length of namec
  37+ 7B6B 4D 4D 55 37 >                db      "MMU7@"
  37+ 7B6F 40          >
  37+ 7B70             >len_NFA         defl    $ - temp_NFA
  37+ 7B70             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  37+ 7B6B             >
  37+ 7B6B 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  37+ 7B6C 4D 4D 55 37 >                db      "MMU7@"               // name string in 7-bit ascii, but
  37+ 7B70 40          >
  37+ 7B71             >                org     $-1                 // alter last byte of Name just above to set
  37+ 7B70 C0          >                db      {b $} | END_BIT     // msb as name end
  37+ 7B71             >
  37+ 7B71 54 7B       >                dw      last_NFA            // Link to previous definition Name
  37+ 7B73             >MMU7_FETCH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  37+ 7B73 E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  37+ 7B75             >                else
  37+ 7B75 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  37+ 7B75             >                endif           ; ok        // for other definitions it "points" the correct handler
  37+ 7B75             >                // Use of "; ok" to suppress "warning[fwdref]"
  37+ 7B75             >
  37+ 7B75             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  38+ 7B75 43 64 57 00                  dw      LIT, 87, REG_FETCH
  38+ 7B79 44 7B
  39+ 7B7B BD 69                        dw      EXIT
  40+ 7B7D
  41+ 7B7D              //  ______________________________________________________________________
  42+ 7B7D              //
  43+ 7B7D              // mmu7!        n --
  44+ 7B7D              // set MMU7 8K-RAM page to n given between 0 and 223
  45+ 7B7D              // optimized version that uses NEXTREG n,A Z80n op-code.
  46+ 7B7D
  47+ 7B7D                              New_Def MMU7_STORE, "MMU7!", is_code, is_normal
  47+ 7B7D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  47+ 7B7D             >
  47+ 7B7D             >                // dummy db directives used to calculate length of namec
  47+ 7B7D 4D 4D 55 37 >                db      "MMU7!"
  47+ 7B81 21          >
  47+ 7B82             >len_NFA         defl    $ - temp_NFA
  47+ 7B82             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  47+ 7B7D             >
  47+ 7B7D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  47+ 7B7E 4D 4D 55 37 >                db      "MMU7!"               // name string in 7-bit ascii, but
  47+ 7B82 21          >
  47+ 7B83             >                org     $-1                 // alter last byte of Name just above to set
  47+ 7B82 A1          >                db      {b $} | END_BIT     // msb as name end
  47+ 7B83             >
  47+ 7B83 6B 7B       >                dw      last_NFA            // Link to previous definition Name
  47+ 7B85             >MMU7_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  47+ 7B85 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  47+ 7B85             >                else
  47+ 7B85 87 7B       >                dw      $ + 2   ; ok        // is pointed by CFA
  47+ 7B87             >                endif           ; ok        // for other definitions it "points" the correct handler
  47+ 7B87             >                // Use of "; ok" to suppress "warning[fwdref]"
  47+ 7B87             >
  47+ 7B87             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  48+ 7B87 E1                           pop     hl
  49+ 7B88 7D                           ld      a, l
  50+ 7B89 ED 92 57                     nextreg 87, a
  51+ 7B8C
  52+ 7B8C                              next
  52+ 7B8C DD E9       >                jp      (ix)
  53+ 7B8E
  54+ 7B8E              //  ______________________________________________________________________
  55+ 7B8E              //
  56+ 7B8E              // >far         ha -- a n
  57+ 7B8E              // decode bits 765 of H as one of the 8K-page between 64 and 71 (40h-47h)
  58+ 7B8E              // take lower bits of H and L as an offset from E000h
  59+ 7B8E              // then return address  a  between E000h-FFFFh
  60+ 7B8E              // and page number n  between 64-71 (40h-47h)
  61+ 7B8E              // For example, in hex:
  62+ 7B8E              //   0000 >FAR  gives  40.E000
  63+ 7B8E              //   1FFF >FAR  gives  40.FFFF
  64+ 7B8E              //   2000 >FAR  gives  41.E000
  65+ 7B8E              //   3FFF >FAR  gives  41.FFFF
  66+ 7B8E              //   EFFF >FAR  gives  47.EFFF
  67+ 7B8E              //   FFFF >FAR  gives  47.FFFF
  68+ 7B8E              //                New_Def TO_FAR, ">FAR", is_code, is_normal
  69+ 7B8E              //                pop     de
  70+ 7B8E              //                ld      a, d
  71+ 7B8E              //                and     $E0
  72+ 7B8E              //                rlca
  73+ 7B8E              //                rlca
  74+ 7B8E              //                rlca
  75+ 7B8E              //                add     $40
  76+ 7B8E              //                ld      l, a
  77+ 7B8E              //                ld      h, 0
  78+ 7B8E              //                ld      a, d
  79+ 7B8E              //                or      $E0
  80+ 7B8E              //                ld      d, a
  81+ 7B8E              //                push    hl
  82+ 7B8E              //                push    de
  83+ 7B8E              //                next
  84+ 7B8E
  85+ 7B8E              //  ______________________________________________________________________
  86+ 7B8E              //
  87+ 7B8E              // <far         a n  -- ha
  88+ 7B8E              // given an address E000-FFFF and a page number n (64-71 or 40h-47h)
  89+ 7B8E              // reverse of >FAR: encodes a FAR address compressing
  90+ 7B8E              // to bits 765 of H, lower bits of HL address offset from E000h
  91+ 7B8E              //                New_Def FROM_FAR, "<FAR", is_code, is_normal
  92+ 7B8E              //                pop     de                  // page number in e
  93+ 7B8E              //                pop     hl                  // address in hl
  94+ 7B8E              //                ld      a, e
  95+ 7B8E              //                sub     $40                 // reduced to 0-7
  96+ 7B8E              //                rrca
  97+ 7B8E              //                rrca
  98+ 7B8E              //                rrca
  99+ 7B8E              //                ld      d, a                // save to d bits 765
 100+ 7B8E              //                ld      a, h                // drops
 101+ 7B8E              //                and     $1F
 102+ 7B8E              //                or      d
 103+ 7B8E              //                ld      h, a
 104+ 7B8E              //
 105+ 7B8E              //                psh1
 106+ 7B8E
 107+ 7B8E              //  ______________________________________________________________________
 108+ 7B8E              //
 109+ 7B8E              // m_p3dos      n1 n2 n3 n4 a -- n5 n6 n7 n8  f
 110+ 7B8E              // NextZXOS call wrapper.
 111+ 7B8E              //  n1 = hl register parameter value
 112+ 7B8E              //  n2 = de register parameter value
 113+ 7B8E              //  n3 = bc register parameter value
 114+ 7B8E              //  n4 =  a register parameter value
 115+ 7B8E              //   a = routine address in ROM 3
 116+ 7B8E              // ----
 117+ 7B8E              //  n5 = hl returned value
 118+ 7B8E              //  n6 = de returned value
 119+ 7B8E              //  n7 = bc returned value
 120+ 7B8E              //  n8 =  a returned value
 121+ 7B8E              //   f
 122+ 7B8E                              New_Def M_P3DOS, "M_P3DOS", is_code, is_normal
 122+ 7B8E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 122+ 7B8E             >
 122+ 7B8E             >                // dummy db directives used to calculate length of namec
 122+ 7B8E 4D 5F 50 33 >                db      "M_P3DOS"
 122+ 7B92 44 4F 53    >
 122+ 7B95             >len_NFA         defl    $ - temp_NFA
 122+ 7B95             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 122+ 7B8E             >
 122+ 7B8E 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 122+ 7B8F 4D 5F 50 33 >                db      "M_P3DOS"               // name string in 7-bit ascii, but
 122+ 7B93 44 4F 53    >
 122+ 7B96             >                org     $-1                 // alter last byte of Name just above to set
 122+ 7B95 D3          >                db      {b $} | END_BIT     // msb as name end
 122+ 7B96             >
 122+ 7B96 7D 7B       >                dw      last_NFA            // Link to previous definition Name
 122+ 7B98             >M_P3DOS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 122+ 7B98 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 122+ 7B98             >                else
 122+ 7B98 9A 7B       >                dw      $ + 2   ; ok        // is pointed by CFA
 122+ 7B9A             >                endif           ; ok        // for other definitions it "points" the correct handler
 122+ 7B9A             >                // Use of "; ok" to suppress "warning[fwdref]"
 122+ 7B9A             >
 122+ 7B9A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 123+ 7B9A D1                           pop     de                  // dos call entry address in de
 124+ 7B9B E1                           pop     hl                  // a register
 125+ 7B9C 7D                           ld      a, l
 126+ 7B9D D9                           exx
 127+ 7B9E C1                           pop     bc
 128+ 7B9F D1                           pop     de
 129+ 7BA0 E1                           pop     hl
 130+ 7BA1 D9                           exx
 131+ 7BA2
 132+ 7BA2 C5                           push    bc
 133+ 7BA3 DD E5                        push    ix
 134+ 7BA5
 135+ 7BA5 ED 73 2C 64                  ld      (SP_Saved), sp
 136+ 7BA9 31 FE 63                     ld      sp, Cold_origin - 2
 137+ 7BAC 0E 07                        ld      c, 7                // use 7 RAM Bank
 138+ 7BAE
 139+ 7BAE CF                           rst     08
 140+ 7BAF 94                           db      $94
 141+ 7BB0
 142+ 7BB0 ED 7B 2C 64                  ld      sp, (SP_Saved)
 143+ 7BB4 DD E5                        push    ix
 144+ 7BB6 E1                           pop     hl
 145+ 7BB7 22 2A 64                     ld      (IX_Echo), hl
 146+ 7BBA              //              nop
 147+ 7BBA DD E1                        pop     ix
 148+ 7BBC E3                           ex      (sp), hl            // hl argument and retrieve bc
 149+ 7BBD D5                           push    de
 150+ 7BBE C5                           push    bc
 151+ 7BBF 4D                           ld      c, l
 152+ 7BC0 44                           ld      b, h
 153+ 7BC1
 154+ 7BC1 26 00                        ld      h, 0
 155+ 7BC3 6F                           ld      l, a
 156+ 7BC4 E5                           push    hl
 157+ 7BC5 ED 62                        sbc     hl, hl              // -1 for OK ; 0 for KO but now...
 158+ 7BC7 23                           inc     hl                  //  0 for OK ; 1 for ko
 159+ 7BC8
 160+ 7BC8                              psh1
 160+ 7BC8 E5          >                push    hl
 160+ 7BC9 DD E9       >                jp      (ix)
 161+ 7BCB
 162+ 7BCB              //  ______________________________________________________________________
 163+ 7BCB              //
 164+ 7BCB              // blk-fh
 165+ 7BCB                              Variable_Def BLK_FH,   "BLK-FH",   1
 165+ 7BCB             >                New_Def  BLK_FH, "BLK-FH", Variable_Ptr, is_normal
 165+ 7BCB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 165+ 7BCB             >
 165+ 7BCB             >                // dummy db directives used to calculate length of namec
 165+ 7BCB 42 4C 4B 2D >                db      "BLK-FH"
 165+ 7BCF 46 48       >
 165+ 7BD1             >len_NFA         defl    $ - temp_NFA
 165+ 7BD1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 165+ 7BCB             >
 165+ 7BCB 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 165+ 7BCC 42 4C 4B 2D >                db      "BLK-FH"               // name string in 7-bit ascii, but
 165+ 7BD0 46 48       >
 165+ 7BD2             >                org     $-1                 // alter last byte of Name just above to set
 165+ 7BD1 C8          >                db      {b $} | END_BIT     // msb as name end
 165+ 7BD2             >
 165+ 7BD2 8E 7B       >                dw      last_NFA            // Link to previous definition Name
 165+ 7BD4             >BLK_FH:          if Variable_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 165+ 7BD4 3F 6D       >                dw      Variable_Ptr ; ok        // for primitive definitions  actual code
 165+ 7BD6             >                else
 165+ 7BD6 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 165+ 7BD6             >                endif           ; ok        // for other definitions it "points" the correct handler
 165+ 7BD6             >                // Use of "; ok" to suppress "warning[fwdref]"
 165+ 7BD6             >
 165+ 7BD6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 165+ 7BD6 01 00       >                dw      1
 166+ 7BD8
 167+ 7BD8                              New_Def BLK_FNAME,   "BLK-FNAME", Create_Ptr, is_normal
 167+ 7BD8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 167+ 7BD8             >
 167+ 7BD8             >                // dummy db directives used to calculate length of namec
 167+ 7BD8 42 4C 4B 2D >                db      "BLK-FNAME"
 167+ 7BDC 46 4E 41 4D >
 167+ 7BE0 45          >
 167+ 7BE1             >len_NFA         defl    $ - temp_NFA
 167+ 7BE1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 167+ 7BD8             >
 167+ 7BD8 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 167+ 7BD9 42 4C 4B 2D >                db      "BLK-FNAME"               // name string in 7-bit ascii, but
 167+ 7BDD 46 4E 41 4D >
 167+ 7BE1 45          >
 167+ 7BE2             >                org     $-1                 // alter last byte of Name just above to set
 167+ 7BE1 C5          >                db      {b $} | END_BIT     // msb as name end
 167+ 7BE2             >
 167+ 7BE2 CB 7B       >                dw      last_NFA            // Link to previous definition Name
 167+ 7BE4             >BLK_FNAME:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 167+ 7BE4 CF 76       >                dw      Create_Ptr ; ok        // for primitive definitions  actual code
 167+ 7BE6             >                else
 167+ 7BE6 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 167+ 7BE6             >                endif           ; ok        // for other definitions it "points" the correct handler
 167+ 7BE6             >                // Use of "; ok" to suppress "warning[fwdref]"
 167+ 7BE6             >
 167+ 7BE6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 168+ 7BE6 0E 21 42 6C                  db      14, "!Blocks-64.bin", 0
 168+ 7BEA 6F 63 6B 73
 168+ 7BEE 2D 36 34 2E
 168+ 7BF2 62 69 6E 00
 169+ 7BF6 00 00 00...                  ds      24
 170+ 7C0E
 171+ 7C0E              //  ______________________________________________________________________
 172+ 7C0E              //
 173+ 7C0E              // blk-seek     n --
 174+ 7C0E              // seek block n  within blocks!.bin  file
 175+ 7C0E                              Colon_Def BLK_SEEK, "BLK-SEEK", is_normal
 175+ 7C0E             >                New_Def  BLK_SEEK, "BLK-SEEK", Enter_Ptr, is_normal ; ok
 175+ 7C0E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 175+ 7C0E             >
 175+ 7C0E             >                // dummy db directives used to calculate length of namec
 175+ 7C0E 42 4C 4B 2D >                db      "BLK-SEEK"
 175+ 7C12 53 45 45 4B >
 175+ 7C16             >len_NFA         defl    $ - temp_NFA
 175+ 7C16             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 175+ 7C0E             >
 175+ 7C0E 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 175+ 7C0F 42 4C 4B 2D >                db      "BLK-SEEK"               // name string in 7-bit ascii, but
 175+ 7C13 53 45 45 4B >
 175+ 7C17             >                org     $-1                 // alter last byte of Name just above to set
 175+ 7C16 CB          >                db      {b $} | END_BIT     // msb as name end
 175+ 7C17             >
 175+ 7C17 D8 7B       >                dw      last_NFA            // Link to previous definition Name
 175+ 7C19             >BLK_SEEK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 175+ 7C19 E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 175+ 7C1B             >                else
 175+ 7C1B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 175+ 7C1B             >                endif           ; ok        // for other definitions it "points" the correct handler
 175+ 7C1B             >                // Use of "; ok" to suppress "warning[fwdref]"
 175+ 7C1B             >
 175+ 7C1B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 176+ 7C1B A2 6D C6 79                  dw  BBUF, MMUL
 177+ 7C1F D4 7B F6 6B                  dw  BLK_FH, FETCH
 178+ 7C23 C8 67                        dw  F_SEEK
 179+ 7C25 43 64 2D 00                  dw  LIT, $2D, QERROR
 179+ 7C29 FF 70
 180+ 7C2B BD 69                        dw  EXIT
 181+ 7C2D
 182+ 7C2D              //  ______________________________________________________________________
 183+ 7C2D              //
 184+ 7C2D              // blk-read     n --
 185+ 7C2D              // seek block n  within blocks!.bin  file
 186+ 7C2D                              Colon_Def BLK_READ, "BLK-READ", is_normal
 186+ 7C2D             >                New_Def  BLK_READ, "BLK-READ", Enter_Ptr, is_normal ; ok
 186+ 7C2D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 186+ 7C2D             >
 186+ 7C2D             >                // dummy db directives used to calculate length of namec
 186+ 7C2D 42 4C 4B 2D >                db      "BLK-READ"
 186+ 7C31 52 45 41 44 >
 186+ 7C35             >len_NFA         defl    $ - temp_NFA
 186+ 7C35             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 186+ 7C2D             >
 186+ 7C2D 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 186+ 7C2E 42 4C 4B 2D >                db      "BLK-READ"               // name string in 7-bit ascii, but
 186+ 7C32 52 45 41 44 >
 186+ 7C36             >                org     $-1                 // alter last byte of Name just above to set
 186+ 7C35 C4          >                db      {b $} | END_BIT     // msb as name end
 186+ 7C36             >
 186+ 7C36 0E 7C       >                dw      last_NFA            // Link to previous definition Name
 186+ 7C38             >BLK_READ:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 186+ 7C38 E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 186+ 7C3A             >                else
 186+ 7C3A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 186+ 7C3A             >                endif           ; ok        // for other definitions it "points" the correct handler
 186+ 7C3A             >                // Use of "; ok" to suppress "warning[fwdref]"
 186+ 7C3A             >
 186+ 7C3A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 187+ 7C3A 19 7C                        dw  BLK_SEEK
 188+ 7C3C A2 6D                        dw  BBUF
 189+ 7C3E D4 7B F6 6B                  dw  BLK_FH, FETCH
 190+ 7C42 0B 68                        dw  F_READ
 191+ 7C44 43 64 2E 00                  dw  LIT, $2E, QERROR
 191+ 7C48 FF 70
 192+ 7C4A FD 6A                        dw  DROP
 193+ 7C4C BD 69                        dw  EXIT
 194+ 7C4E
 195+ 7C4E              //  ______________________________________________________________________
 196+ 7C4E              //
 197+ 7C4E              // blk-write     n --
 198+ 7C4E              // seek block n  within blocks!.bin  file
 199+ 7C4E                              Colon_Def BLK_WRITE, "BLK-WRITE", is_normal
 199+ 7C4E             >                New_Def  BLK_WRITE, "BLK-WRITE", Enter_Ptr, is_normal ; ok
 199+ 7C4E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 199+ 7C4E             >
 199+ 7C4E             >                // dummy db directives used to calculate length of namec
 199+ 7C4E 42 4C 4B 2D >                db      "BLK-WRITE"
 199+ 7C52 57 52 49 54 >
 199+ 7C56 45          >
 199+ 7C57             >len_NFA         defl    $ - temp_NFA
 199+ 7C57             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 199+ 7C4E             >
 199+ 7C4E 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 199+ 7C4F 42 4C 4B 2D >                db      "BLK-WRITE"               // name string in 7-bit ascii, but
 199+ 7C53 57 52 49 54 >
 199+ 7C57 45          >
 199+ 7C58             >                org     $-1                 // alter last byte of Name just above to set
 199+ 7C57 C5          >                db      {b $} | END_BIT     // msb as name end
 199+ 7C58             >
 199+ 7C58 2D 7C       >                dw      last_NFA            // Link to previous definition Name
 199+ 7C5A             >BLK_WRITE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 199+ 7C5A E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 199+ 7C5C             >                else
 199+ 7C5C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 199+ 7C5C             >                endif           ; ok        // for other definitions it "points" the correct handler
 199+ 7C5C             >                // Use of "; ok" to suppress "warning[fwdref]"
 199+ 7C5C             >
 199+ 7C5C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 200+ 7C5C 19 7C                        dw  BLK_SEEK
 201+ 7C5E A2 6D                        dw  BBUF
 202+ 7C60 D4 7B F6 6B                  dw  BLK_FH, FETCH
 203+ 7C64 2A 68                        dw  F_WRITE
 204+ 7C66 43 64 2F 00                  dw  LIT, $2F, QERROR
 204+ 7C6A FF 70
 205+ 7C6C FD 6A                        dw  DROP
 206+ 7C6E BD 69                        dw  EXIT
 207+ 7C70
 208+ 7C70              //  ______________________________________________________________________
 209+ 7C70              //
 210+ 7C70              // blk-init     n --
 211+ 7C70              // seek block n  within blocks!.bin  file
 212+ 7C70                              Colon_Def BLK_INIT, "BLK-INIT", is_normal
 212+ 7C70             >                New_Def  BLK_INIT, "BLK-INIT", Enter_Ptr, is_normal ; ok
 212+ 7C70             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 212+ 7C70             >
 212+ 7C70             >                // dummy db directives used to calculate length of namec
 212+ 7C70 42 4C 4B 2D >                db      "BLK-INIT"
 212+ 7C74 49 4E 49 54 >
 212+ 7C78             >len_NFA         defl    $ - temp_NFA
 212+ 7C78             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 212+ 7C70             >
 212+ 7C70 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 212+ 7C71 42 4C 4B 2D >                db      "BLK-INIT"               // name string in 7-bit ascii, but
 212+ 7C75 49 4E 49 54 >
 212+ 7C79             >                org     $-1                 // alter last byte of Name just above to set
 212+ 7C78 D4          >                db      {b $} | END_BIT     // msb as name end
 212+ 7C79             >
 212+ 7C79 4E 7C       >                dw      last_NFA            // Link to previous definition Name
 212+ 7C7B             >BLK_INIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 212+ 7C7B E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 212+ 7C7D             >                else
 212+ 7C7D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 212+ 7C7D             >                endif           ; ok        // for other definitions it "points" the correct handler
 212+ 7C7D             >                // Use of "; ok" to suppress "warning[fwdref]"
 212+ 7C7D             >
 212+ 7C7D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 213+ 7C7D D4 7B F6 6B                  dw  BLK_FH, FETCH, F_CLOSE, DROP
 213+ 7C81 49 68 FD 6A
 214+ 7C85 E4 7B 78 6A                  dw  BLK_FNAME, ONE_PLUS
 215+ 7C89 34 6F 7A 6D                  dw  HERE, THREE, F_OPEN         // open for update (read+write)
 215+ 7C8D 63 68
 216+ 7C8F 43 64 2C 00                  dw  LIT, $2C, QERROR
 216+ 7C93 FF 70
 217+ 7C95 D4 7B 03 6C                  dw  BLK_FH, STORE
 218+ 7C99 BD 69                        dw  EXIT
 219+ 7C9B
 220+ 7C9B              //  ______________________________________________________________________
 221+ 7C9B              //
 222+ 7C9B              // #sec
 223+ 7C9B              // number of 512 Byte "sector" available on thie sysstem.
 224+ 7C9B              // it addd up to 16 MByte of data that can be used as source or pool for almost anything.
 225+ 7C9B
 226+ 7C9B                              Constant_Def NSEC , "#SEC", 32767
 226+ 7C9B             >                New_Def  NSEC, "#SEC", Constant_Ptr, is_normal
 226+ 7C9B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 226+ 7C9B             >
 226+ 7C9B             >                // dummy db directives used to calculate length of namec
 226+ 7C9B 23 53 45 43 >                db      "#SEC"
 226+ 7C9F             >len_NFA         defl    $ - temp_NFA
 226+ 7C9F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 226+ 7C9B             >
 226+ 7C9B 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 226+ 7C9C 23 53 45 43 >                db      "#SEC"               // name string in 7-bit ascii, but
 226+ 7CA0             >                org     $-1                 // alter last byte of Name just above to set
 226+ 7C9F C3          >                db      {b $} | END_BIT     // msb as name end
 226+ 7CA0             >
 226+ 7CA0 70 7C       >                dw      last_NFA            // Link to previous definition Name
 226+ 7CA2             >NSEC:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 226+ 7CA2 26 6D       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 226+ 7CA4             >                else
 226+ 7CA4 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 226+ 7CA4             >                endif           ; ok        // for other definitions it "points" the correct handler
 226+ 7CA4             >                // Use of "; ok" to suppress "warning[fwdref]"
 226+ 7CA4             >
 226+ 7CA4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 226+ 7CA4 FF 7F       >                dw      32767
 227+ 7CA6
 228+ 7CA6              //  ______________________________________________________________________
 229+ 7CA6
 230+ 7CA6
 231+ 7CA6
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/next-opt1.asm
 112  7CA6                              include "L3.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L3.asm
   1+ 7CA6              //  ______________________________________________________________________
   2+ 7CA6              //
   3+ 7CA6              //  L3.asm
   4+ 7CA6              //
   5+ 7CA6              //  Continuation of L2.asm
   6+ 7CA6              //  I/O Block definitions
   7+ 7CA6              //  ______________________________________________________________________
   8+ 7CA6
   9+ 7CA6
  10+ 7CA6              //  ______________________________________________________________________
  11+ 7CA6              //
  12+ 7CA6              // r/w          a n f --
  13+ 7CA6              // read/write block n depending on flag f, true-flag means read, false-flag means write.
  14+ 7CA6                              Colon_Def READ_WRITE, "R/W", is_normal
  14+ 7CA6             >                New_Def  READ_WRITE, "R/W", Enter_Ptr, is_normal ; ok
  14+ 7CA6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  14+ 7CA6             >
  14+ 7CA6             >                // dummy db directives used to calculate length of namec
  14+ 7CA6 52 2F 57    >                db      "R/W"
  14+ 7CA9             >len_NFA         defl    $ - temp_NFA
  14+ 7CA9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  14+ 7CA6             >
  14+ 7CA6 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  14+ 7CA7 52 2F 57    >                db      "R/W"               // name string in 7-bit ascii, but
  14+ 7CAA             >                org     $-1                 // alter last byte of Name just above to set
  14+ 7CA9 D7          >                db      {b $} | END_BIT     // msb as name end
  14+ 7CAA             >
  14+ 7CAA 9B 7C       >                dw      last_NFA            // Link to previous definition Name
  14+ 7CAC             >READ_WRITE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  14+ 7CAC E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  14+ 7CAE             >                else
  14+ 7CAE ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  14+ 7CAE             >                endif           ; ok        // for other definitions it "points" the correct handler
  14+ 7CAE             >                // Use of "; ok" to suppress "warning[fwdref]"
  14+ 7CAE             >
  14+ 7CAE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  15+ 7CAE E6 69                        dw      TO_R                    // >r
  16+ 7CB0 84 6A                        dw      ONE_SUBTRACT            // 1-
  17+ 7CB2 32 6B 27 6A                  dw      DUP, ZLESS              // dup 0<
  18+ 7CB6 ED 6A A2 7C                  dw      OVER, NSEC              // over #sec
  19+ 7CBA 84 6A D3 6F                  dw      ONE_SUBTRACT, GREATER   // 1- >
  20+ 7CBE 61 69                        dw      OR_OP                   // or
  21+ 7CC0 43 64 06 00                  dw      LIT, 6, QERROR          // 6 ?error
  21+ 7CC4 FF 70
  22+ 7CC6 FA 69                        dw      R_TO                    // r>
  23+ 7CC8                                                              // if
  24+ 7CC8 7D 64                        dw      ZBRANCH
  25+ 7CCA 08 00                        dw      Read_Write_Else - $
  26+ 7CCC 38 7C                        dw          BLK_READ            //      blk-read
  27+ 7CCE 66 64                        dw      BRANCH
  28+ 7CD0 04 00                        dw      Read_Write_Endif - $
  29+ 7CD2              Read_Write_Else:                                // else
  30+ 7CD2 5A 7C                        dw          BLK_WRITE           //      blk-write
  31+ 7CD4              Read_Write_Endif:                               // endif
  32+ 7CD4 BD 69                        dw      EXIT                    // ;
  33+ 7CD6
  34+ 7CD6
  35+ 7CD6              //  ______________________________________________________________________
  36+ 7CD6              //
  37+ 7CD6              // +buf        a1 -- a2 f
  38+ 7CD6              // advences to next buffer, cyclically rotating along them
  39+ 7CD6                              Colon_Def PBUF, "+BUF", is_normal
  39+ 7CD6             >                New_Def  PBUF, "+BUF", Enter_Ptr, is_normal ; ok
  39+ 7CD6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  39+ 7CD6             >
  39+ 7CD6             >                // dummy db directives used to calculate length of namec
  39+ 7CD6 2B 42 55 46 >                db      "+BUF"
  39+ 7CDA             >len_NFA         defl    $ - temp_NFA
  39+ 7CDA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  39+ 7CD6             >
  39+ 7CD6 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  39+ 7CD7 2B 42 55 46 >                db      "+BUF"               // name string in 7-bit ascii, but
  39+ 7CDB             >                org     $-1                 // alter last byte of Name just above to set
  39+ 7CDA C6          >                db      {b $} | END_BIT     // msb as name end
  39+ 7CDB             >
  39+ 7CDB A6 7C       >                dw      last_NFA            // Link to previous definition Name
  39+ 7CDD             >PBUF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  39+ 7CDD E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  39+ 7CDF             >                else
  39+ 7CDF ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  39+ 7CDF             >                endif           ; ok        // for other definitions it "points" the correct handler
  39+ 7CDF             >                // Use of "; ok" to suppress "warning[fwdref]"
  39+ 7CDF             >
  39+ 7CDF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  40+ 7CDF 43 64 04 02                  dw      LIT, 516, PLUS          // 516 +
  40+ 7CE3 4F 6A
  41+ 7CE5 32 6B 44 6E                  dw      DUP, LIMIT, FETCH       // dup limit @
  41+ 7CE9 F6 6B
  42+ 7CEB 96 6F                        dw      EQUALS                  // =
  43+ 7CED                                                              // if
  44+ 7CED 7D 64                        dw      ZBRANCH
  45+ 7CEF 08 00                        dw      PBuf_Endif - $
  46+ 7CF1 FD 6A                        dw          DROP                //      drop
  47+ 7CF3 39 6E F6 6B                  dw          FIRST, FETCH        //      first @
  48+ 7CF7              PBuf_Endif:                                     // endif
  49+ 7CF7 32 6B F6 6E                  dw      DUP, PREV, FETCH        // dup prev @
  49+ 7CFB F6 6B
  50+ 7CFD 88 6F                        dw      SUBTRACT                // -
  51+ 7CFF BD 69                        dw      EXIT                    // ;
  52+ 7D01
  53+ 7D01              //  ______________________________________________________________________
  54+ 7D01              //
  55+ 7D01              // update       --
  56+ 7D01              // mark the last used block to be written to disk
  57+ 7D01                              Colon_Def UPDATE, "UPDATE", is_normal
  57+ 7D01             >                New_Def  UPDATE, "UPDATE", Enter_Ptr, is_normal ; ok
  57+ 7D01             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  57+ 7D01             >
  57+ 7D01             >                // dummy db directives used to calculate length of namec
  57+ 7D01 55 50 44 41 >                db      "UPDATE"
  57+ 7D05 54 45       >
  57+ 7D07             >len_NFA         defl    $ - temp_NFA
  57+ 7D07             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  57+ 7D01             >
  57+ 7D01 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  57+ 7D02 55 50 44 41 >                db      "UPDATE"               // name string in 7-bit ascii, but
  57+ 7D06 54 45       >
  57+ 7D08             >                org     $-1                 // alter last byte of Name just above to set
  57+ 7D07 C5          >                db      {b $} | END_BIT     // msb as name end
  57+ 7D08             >
  57+ 7D08 D6 7C       >                dw      last_NFA            // Link to previous definition Name
  57+ 7D0A             >UPDATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  57+ 7D0A E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  57+ 7D0C             >                else
  57+ 7D0C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  57+ 7D0C             >                endif           ; ok        // for other definitions it "points" the correct handler
  57+ 7D0C             >                // Use of "; ok" to suppress "warning[fwdref]"
  57+ 7D0C             >
  57+ 7D0C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  58+ 7D0C F6 6E F6 6B                  dw      PREV, FETCH, FETCH      // prev @ @
  58+ 7D10 F6 6B
  59+ 7D12 43 64 00 80                  dw      LIT, $8000, OR_OP       // $8000, or
  59+ 7D16 61 69
  60+ 7D18 F6 6E F6 6B                  dw      PREV, FETCH, STORE      // prev @ !
  60+ 7D1C 03 6C
  61+ 7D1E BD 69                        dw      EXIT                    // ;
  62+ 7D20
  63+ 7D20
  64+ 7D20              //  ______________________________________________________________________
  65+ 7D20              //
  66+ 7D20              // empty-buffers --
  67+ 7D20                              Colon_Def EMPTY_BUFFERS, "EMPTY-BUFFERS", is_normal
  67+ 7D20             >                New_Def  EMPTY_BUFFERS, "EMPTY-BUFFERS", Enter_Ptr, is_normal ; ok
  67+ 7D20             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  67+ 7D20             >
  67+ 7D20             >                // dummy db directives used to calculate length of namec
  67+ 7D20 45 4D 50 54 >                db      "EMPTY-BUFFERS"
  67+ 7D24 59 2D 42 55 >
  67+ 7D28 46 46 45 52 >
  67+ 7D2C 53          >
  67+ 7D2D             >len_NFA         defl    $ - temp_NFA
  67+ 7D2D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  67+ 7D20             >
  67+ 7D20 8D          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  67+ 7D21 45 4D 50 54 >                db      "EMPTY-BUFFERS"               // name string in 7-bit ascii, but
  67+ 7D25 59 2D 42 55 >
  67+ 7D29 46 46 45 52 >
  67+ 7D2D 53          >
  67+ 7D2E             >                org     $-1                 // alter last byte of Name just above to set
  67+ 7D2D D3          >                db      {b $} | END_BIT     // msb as name end
  67+ 7D2E             >
  67+ 7D2E 01 7D       >                dw      last_NFA            // Link to previous definition Name
  67+ 7D30             >EMPTY_BUFFERS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  67+ 7D30 E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  67+ 7D32             >                else
  67+ 7D32 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  67+ 7D32             >                endif           ; ok        // for other definitions it "points" the correct handler
  67+ 7D32             >                // Use of "; ok" to suppress "warning[fwdref]"
  67+ 7D32             >
  67+ 7D32             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  68+ 7D32 39 6E F6 6B                  dw      FIRST, FETCH            // first @
  69+ 7D36 44 6E F6 6B                  dw      LIMIT, FETCH            // limit @
  70+ 7D3A ED 6A 88 6F                  dw      OVER, SUBTRACT, ERASE   // over - erase
  70+ 7D3E D3 73
  71+ 7D40 BD 69                        dw      EXIT                    // ;
  72+ 7D42
  73+ 7D42              //  ______________________________________________________________________
  74+ 7D42              //
  75+ 7D42              // buffer       n -- a
  76+ 7D42              // read block n and gives the address to a buffer
  77+ 7D42              // any block previously inside the buffer, if modified, is rewritten to
  78+ 7D42              // disk before reading the block n.
  79+ 7D42
  80+ 7D42                              Colon_Def BUFFER, "BUFFER", is_normal
  80+ 7D42             >                New_Def  BUFFER, "BUFFER", Enter_Ptr, is_normal ; ok
  80+ 7D42             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  80+ 7D42             >
  80+ 7D42             >                // dummy db directives used to calculate length of namec
  80+ 7D42 42 55 46 46 >                db      "BUFFER"
  80+ 7D46 45 52       >
  80+ 7D48             >len_NFA         defl    $ - temp_NFA
  80+ 7D48             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  80+ 7D42             >
  80+ 7D42 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  80+ 7D43 42 55 46 46 >                db      "BUFFER"               // name string in 7-bit ascii, but
  80+ 7D47 45 52       >
  80+ 7D49             >                org     $-1                 // alter last byte of Name just above to set
  80+ 7D48 D2          >                db      {b $} | END_BIT     // msb as name end
  80+ 7D49             >
  80+ 7D49 20 7D       >                dw      last_NFA            // Link to previous definition Name
  80+ 7D4B             >BUFFER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  80+ 7D4B E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  80+ 7D4D             >                else
  80+ 7D4D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  80+ 7D4D             >                endif           ; ok        // for other definitions it "points" the correct handler
  80+ 7D4D             >                // Use of "; ok" to suppress "warning[fwdref]"
  80+ 7D4D             >
  80+ 7D4D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  81+ 7D4D EC 6E F6 6B                  dw      USE, FETCH              // use @
  82+ 7D51 32 6B E6 69                  dw      DUP, TO_R               // dup >r
  83+ 7D55                                                              // begin
  84+ 7D55              Buffer_Begin:
  85+ 7D55 DD 7C                        dw          PBUF                //      +buf
  86+ 7D57                                                              // until
  87+ 7D57 7D 64                        dw      ZBRANCH
  88+ 7D59 FC FF                        dw      Buffer_Begin - $
  89+ 7D5B EC 6E 03 6C                  dw      USE, STORE              // use !
  90+ 7D5F 0D 6A F6 6B                  dw      R_OP, FETCH, ZLESS      // r @ 0<
  90+ 7D63 27 6A
  91+ 7D65                                                              // if
  92+ 7D65 7D 64                        dw      ZBRANCH
  93+ 7D67 14 00                        dw      Buffer_Endif - $
  94+ 7D69 0D 6A A0 6A                  dw          R_OP, CELL_PLUS     //      r cell+
  95+ 7D6D 0D 6A F6 6B                  dw          R_OP, FETCH         //      r fetch
  96+ 7D71 43 64 FF 7F                  dw          LIT, $7FFF          //      7FFF
  97+ 7D75 4F 69                        dw          AND_OP              //      and
  98+ 7D77 62 6D AC 7C                  dw          ZERO, READ_WRITE    //      0 r/w
  99+ 7D7B              Buffer_Endif:                                   // endif
 100+ 7D7B 0D 6A 03 6C                  dw      R_OP, STORE             // r !
 101+ 7D7F 0D 6A F6 6E                  dw      R_OP, PREV, STORE       // r prev !
 101+ 7D83 03 6C
 102+ 7D85 FA 69 A0 6A                  dw      R_TO, CELL_PLUS         // r> cell+
 103+ 7D89 BD 69                        dw      EXIT                    // ;
 104+ 7D8B
 105+ 7D8B              //  ______________________________________________________________________
 106+ 7D8B              //
 107+ 7D8B              // block        n -- a
 108+ 7D8B              // Leaves the buffer address that contains the block n.
 109+ 7D8B              // If the block is not already present, it will be loaded from disk
 110+ 7D8B              // The block previously inside the buffer, if modified, is rewritten to
 111+ 7D8B              // disk before reading the block n.
 112+ 7D8B              // See also BUFFER, R/W, UPDATE, FLUSH.
 113+ 7D8B
 114+ 7D8B                              Colon_Def BLOCK, "BLOCK", is_normal
 114+ 7D8B             >                New_Def  BLOCK, "BLOCK", Enter_Ptr, is_normal ; ok
 114+ 7D8B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 114+ 7D8B             >
 114+ 7D8B             >                // dummy db directives used to calculate length of namec
 114+ 7D8B 42 4C 4F 43 >                db      "BLOCK"
 114+ 7D8F 4B          >
 114+ 7D90             >len_NFA         defl    $ - temp_NFA
 114+ 7D90             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 114+ 7D8B             >
 114+ 7D8B 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 114+ 7D8C 42 4C 4F 43 >                db      "BLOCK"               // name string in 7-bit ascii, but
 114+ 7D90 4B          >
 114+ 7D91             >                org     $-1                 // alter last byte of Name just above to set
 114+ 7D90 CB          >                db      {b $} | END_BIT     // msb as name end
 114+ 7D91             >
 114+ 7D91 42 7D       >                dw      last_NFA            // Link to previous definition Name
 114+ 7D93             >BLOCK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 114+ 7D93 E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 114+ 7D95             >                else
 114+ 7D95 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 114+ 7D95             >                endif           ; ok        // for other definitions it "points" the correct handler
 114+ 7D95             >                // Use of "; ok" to suppress "warning[fwdref]"
 114+ 7D95             >
 114+ 7D95             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 115+ 7D95 88 6E F6 6B                  dw      OFFSET, FETCH           // offset @
 116+ 7D99 4F 6A E6 69                  dw      PLUS, TO_R              // + >r
 117+ 7D9D F6 6E F6 6B                  dw      PREV, FETCH             // prev @
 118+ 7DA1 32 6B F6 6B                  dw      DUP, FETCH              // dup @
 119+ 7DA5 0D 6A 88 6F                  dw      R_OP, SUBTRACT          // r -
 120+ 7DA9 32 6B 4F 6A                  dw      DUP, PLUS               // dup +  ( trick: check equality without most significant bit )
 121+ 7DAD                                                              // if
 122+ 7DAD 7D 64                        dw        ZBRANCH
 123+ 7DAF 34 00                        dw        Block_Endif_1 - $
 124+ 7DB1              Block_Begin:                                    //      begin
 125+ 7DB1 DD 7C 14 6A                  dw          PBUF, ZEQUAL        //          +buf 0
 126+ 7DB5                                                              //          if
 127+ 7DB5 7D 64                        dw          ZBRANCH
 128+ 7DB7 14 00                        dw          Block_Endif_2 - $
 129+ 7DB9 FD 6A                        dw              DROP            //              drop
 130+ 7DBB 0D 6A 4B 7D                  dw              R_OP, BUFFER    //              r buffer
 131+ 7DBF 32 6B                        dw              DUP             //              dup
 132+ 7DC1 0D 6A 6A 6D                  dw              R_OP, ONE       //              r 1
 133+ 7DC5 AC 7C                        dw              READ_WRITE      //              r/w
 134+ 7DC7 72 6D 88 6F                  dw              TWO, SUBTRACT   //              2 -
 135+ 7DCB              Block_Endif_2:                                  //          endif
 136+ 7DCB 32 6B F6 6B                  dw          DUP, FETCH, R_OP    //          dup @ r
 136+ 7DCF 0D 6A
 137+ 7DD1 88 6F 32 6B                  dw          SUBTRACT, DUP       //          - dup
 138+ 7DD5 4F 6A 14 6A                  dw          PLUS, ZEQUAL        //          + 0=
 139+ 7DD9                                                              //      until
 140+ 7DD9 7D 64                        dw        ZBRANCH
 141+ 7DDB D6 FF                        dw        Block_Begin - $
 142+ 7DDD 32 6B F6 6E                  dw        DUP, PREV, STORE      //      dup prev !
 142+ 7DE1 03 6C
 143+ 7DE3              Block_Endif_1:                                  // endif
 144+ 7DE3 FA 69 FD 6A                  dw      R_TO, DROP, CELL_PLUS   // r> drop cell+
 144+ 7DE7 A0 6A
 145+ 7DE9 BD 69                        dw      EXIT                    // ;
 146+ 7DEB
 147+ 7DEB              //  ______________________________________________________________________
 148+ 7DEB              //
 149+ 7DEB              // #buff        -- n
 150+ 7DEB              // number of buffers available. must be the difference between LIMIT and FIRST divided by 516
 151+ 7DEB                              Constant_Def NBUFF,   "#BUFF", 7
 151+ 7DEB             >                New_Def  NBUFF, "#BUFF", Constant_Ptr, is_normal
 151+ 7DEB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 151+ 7DEB             >
 151+ 7DEB             >                // dummy db directives used to calculate length of namec
 151+ 7DEB 23 42 55 46 >                db      "#BUFF"
 151+ 7DEF 46          >
 151+ 7DF0             >len_NFA         defl    $ - temp_NFA
 151+ 7DF0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 151+ 7DEB             >
 151+ 7DEB 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 151+ 7DEC 23 42 55 46 >                db      "#BUFF"               // name string in 7-bit ascii, but
 151+ 7DF0 46          >
 151+ 7DF1             >                org     $-1                 // alter last byte of Name just above to set
 151+ 7DF0 C6          >                db      {b $} | END_BIT     // msb as name end
 151+ 7DF1             >
 151+ 7DF1 8B 7D       >                dw      last_NFA            // Link to previous definition Name
 151+ 7DF3             >NBUFF:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 151+ 7DF3 26 6D       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 151+ 7DF5             >                else
 151+ 7DF5 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 151+ 7DF5             >                endif           ; ok        // for other definitions it "points" the correct handler
 151+ 7DF5             >                // Use of "; ok" to suppress "warning[fwdref]"
 151+ 7DF5             >
 151+ 7DF5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 151+ 7DF5 07 00       >                dw      7
 152+ 7DF7
 153+ 7DF7              //  ______________________________________________________________________
 154+ 7DF7              //
 155+ 7DF7              // flush        --
 156+ 7DF7                              Colon_Def FLUSH, "FLUSH", is_normal
 156+ 7DF7             >                New_Def  FLUSH, "FLUSH", Enter_Ptr, is_normal ; ok
 156+ 7DF7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 156+ 7DF7             >
 156+ 7DF7             >                // dummy db directives used to calculate length of namec
 156+ 7DF7 46 4C 55 53 >                db      "FLUSH"
 156+ 7DFB 48          >
 156+ 7DFC             >len_NFA         defl    $ - temp_NFA
 156+ 7DFC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 156+ 7DF7             >
 156+ 7DF7 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 156+ 7DF8 46 4C 55 53 >                db      "FLUSH"               // name string in 7-bit ascii, but
 156+ 7DFC 48          >
 156+ 7DFD             >                org     $-1                 // alter last byte of Name just above to set
 156+ 7DFC C8          >                db      {b $} | END_BIT     // msb as name end
 156+ 7DFD             >
 156+ 7DFD EB 7D       >                dw      last_NFA            // Link to previous definition Name
 156+ 7DFF             >FLUSH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 156+ 7DFF E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 156+ 7E01             >                else
 156+ 7E01 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 156+ 7E01             >                endif           ; ok        // for other definitions it "points" the correct handler
 156+ 7E01             >                // Use of "; ok" to suppress "warning[fwdref]"
 156+ 7E01             >
 156+ 7E01             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 157+ 7E01 F3 7D 78 6A                  dw      NBUFF, ONE_PLUS, ZERO   // #buff 1+ 0
 157+ 7E05 62 6D
 158+ 7E07              Flush_Do:                                       // do
 159+ 7E07 05 65                        dw      C_DO
 160+ 7E09 62 6D 4B 7D                  dw      ZERO, BUFFER, DROP      //      0 buffer drop
 160+ 7E0D FD 6A
 161+ 7E0F                                                              // loop
 162+ 7E0F 92 64 F8 FF                  dw      C_LOOP, Flush_Do - $
 163+ 7E13 D4 7B F6 6B                  dw      BLK_FH, FETCH           // blk-fh @     ( ZX-Next dependance )
 164+ 7E17 86 68 FD 6A                  dw      F_SYNC, DROP            // f_sync drop
 165+ 7E1B BD 69                        dw      EXIT                    // exit
 166+ 7E1D
 167+ 7E1D              //  ______________________________________________________________________
 168+ 7E1D              //
 169+ 7E1D              // f_getline    a m fh -- n
 170+ 7E1D              // Given an open filehandle read next line (terminated with $0D or $0A)
 171+ 7E1D              // Address a is left for subsequent processing
 172+ 7E1D              // and n as the actual number of byte read, that is the length of line
 173+ 7E1D                              Colon_Def F_GETLINE, "F_GETLINE", is_normal
 173+ 7E1D             >                New_Def  F_GETLINE, "F_GETLINE", Enter_Ptr, is_normal ; ok
 173+ 7E1D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 173+ 7E1D             >
 173+ 7E1D             >                // dummy db directives used to calculate length of namec
 173+ 7E1D 46 5F 47 45 >                db      "F_GETLINE"
 173+ 7E21 54 4C 49 4E >
 173+ 7E25 45          >
 173+ 7E26             >len_NFA         defl    $ - temp_NFA
 173+ 7E26             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 173+ 7E1D             >
 173+ 7E1D 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 173+ 7E1E 46 5F 47 45 >                db      "F_GETLINE"               // name string in 7-bit ascii, but
 173+ 7E22 54 4C 49 4E >
 173+ 7E26 45          >
 173+ 7E27             >                org     $-1                 // alter last byte of Name just above to set
 173+ 7E26 C5          >                db      {b $} | END_BIT     // msb as name end
 173+ 7E27             >
 173+ 7E27 F7 7D       >                dw      last_NFA            // Link to previous definition Name
 173+ 7E29             >F_GETLINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 173+ 7E29 E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 173+ 7E2B             >                else
 173+ 7E2B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 173+ 7E2B             >                endif           ; ok        // for other definitions it "points" the correct handler
 173+ 7E2B             >                // Use of "; ok" to suppress "warning[fwdref]"
 173+ 7E2B             >
 173+ 7E2B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 174+ 7E2B E6 69                        dw      TO_R                    // >r               ( a  m  )     \  fh
 175+ 7E2D 15 6B                        dw      TUCK                    // tuck             ( m a m )
 176+ 7E2F 0D 6A ED 67                  dw      R_OP, F_FGETPOS         // r f_fgetpos      ( m a m d f )
 177+ 7E33 43 64 2C 00                  dw      LIT, 44, QERROR         // 44 ?error        ( m a m d )
 177+ 7E37 FF 70
 178+ 7E39
 179+ 7E39 8A 6B ED 6A                  dw      TWO_SWAP, OVER          // 2swap over       ( m d a m )
 180+ 7E3D 78 6A 25 6B                  dw      ONE_PLUS, SWAP          // 1+ swap          ( m d a a+1 m )
 181+ 7E41
 182+ 7E41 0D 6A 0B 68                  dw      R_OP, F_READ            // r f_read         ( m d a n f )
 183+ 7E45 43 64 2E 00                  dw      LIT, 46, QERROR         // 46 ?error        ( m d a n )
 183+ 7E49 FF 70
 184+ 7E4B                                                              // if ( at least 1 chr was read )  \  fh
 185+ 7E4B 7D 64                        dw      ZBRANCH
 186+ 7E4D 36 00                        dw      FGetline_Else - $
 187+ 7E4F 43 64 0A 00                  dw          LIT, 10, ENCLOSE    //      10 enclose       ( m d a x b x )
 187+ 7E53 F0 65
 188+ 7E55 FD 6A 08 6B                  dw          DROP, NIP           //      drop nip         ( m d a b )
 189+ 7E59 25 6B                        dw          SWAP                //      drop swap        ( m d b a )
 190+ 7E5B 43 64 0D 00                  dw          LIT, 13, ENCLOSE    //      13 enclose       ( m d b a x c x )
 190+ 7E5F F0 65
 191+ 7E61 FD 6A 08 6B                  dw          DROP, NIP           //      drop nip         ( m d b a c )
 192+ 7E65 3F 6B E1 6F                  dw          ROT, MIN            //      rot min          ( m d a n )
 193+ 7E69 32 6B E6 69                  dw          DUP, TO_R           //      dup >r           ( m d a n )      \ fh n
 194+ 7E6D 8A 6B FA 69                  dw          TWO_SWAP, R_TO      //      2swap r>         ( m a n d n )    \ fh
 195+ 7E71 62 6D 5C 6A                  dw          ZERO, DPLUS         //      0 d+             ( m a n d+n )
 196+ 7E75 FA 69 C8 67                  dw          R_TO, F_SEEK        //      r> f_seek        ( m a n f )
 197+ 7E79 43 64 2D 00                  dw          LIT, 45, QERROR     //      45 ?error        ( m a n )
 197+ 7E7D FF 70
 198+ 7E7F                                                              // else
 199+ 7E7F 66 64                        dw      BRANCH
 200+ 7E81 0C 00                        dw      FGetline_Endif - $
 201+ 7E83              FGetline_Else:
 202+ 7E83 FA 69                        dw          R_TO                //      r>              ( m d a fh )
 203+ 7E85 8A 6B 7C 6B                  dw          TWO_SWAP, TWO_DROP  //      2swap 2drop     ( m a fh )
 204+ 7E89 FD 6A 62 6D                  dw          DROP, ZERO          //      drop, 0         ( m a 0 )
 205+ 7E8D              FGetline_Endif:                                 // endif
 206+ 7E8D E6 69 32 6B                  dw      TO_R, DUP, DUP          // >r dup dup           ( m a a a )
 206+ 7E91 32 6B
 207+ 7E93 78 6A 25 6B                  dw      ONE_PLUS, SWAP          // 1+ swap              ( m a a+1 a )
 208+ 7E97 0D 6A AB 68                  dw      R_OP, CMOVE             // r cmove              ( m a )
 209+ 7E9B 9C 6B 4F 6A                  dw      TWO_DUP, PLUS           // 2dup +               ( m a m+a )
 210+ 7E9F 62 6D 25 6B                  dw      ZERO, SWAP              // 0 swap
 211+ 7EA3 AA 6A 03 6C                  dw      CELL_MINUS,  STORE      // cell-  !             ( m a )
 212+ 7EA7 0D 6A 4F 6A                  dw      R_OP, PLUS, ONE_SUBTRACT// r + 1-               ( m a+n1 )
 212+ 7EAB 84 6A
 213+ 7EAD 25 6B 0D 6A                  dw      SWAP, R_OP, SUBTRACT    // swap r -             ( a+n+1 m-n )
 213+ 7EB1 88 6F
 214+ 7EB3 E4 73                        dw      BLANKS                  // blanks
 215+ 7EB5 FA 69                        dw      R_TO                    // r>                   ( n )
 216+ 7EB7 BD 69                        dw      EXIT                    // ;
 217+ 7EB9
 218+ 7EB9              //  ______________________________________________________________________
 219+ 7EB9              //
 220+ 7EB9              // f_include    fh --
 221+ 7EB9              // Given a filehandle includes the source from file
 222+ 7EB9                              Colon_Def F_INCLUDE, "F_INCLUDE", is_normal
 222+ 7EB9             >                New_Def  F_INCLUDE, "F_INCLUDE", Enter_Ptr, is_normal ; ok
 222+ 7EB9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 222+ 7EB9             >
 222+ 7EB9             >                // dummy db directives used to calculate length of namec
 222+ 7EB9 46 5F 49 4E >                db      "F_INCLUDE"
 222+ 7EBD 43 4C 55 44 >
 222+ 7EC1 45          >
 222+ 7EC2             >len_NFA         defl    $ - temp_NFA
 222+ 7EC2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 222+ 7EB9             >
 222+ 7EB9 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 222+ 7EBA 46 5F 49 4E >                db      "F_INCLUDE"               // name string in 7-bit ascii, but
 222+ 7EBE 43 4C 55 44 >
 222+ 7EC2 45          >
 222+ 7EC3             >                org     $-1                 // alter last byte of Name just above to set
 222+ 7EC2 C5          >                db      {b $} | END_BIT     // msb as name end
 222+ 7EC3             >
 222+ 7EC3 1D 7E       >                dw      last_NFA            // Link to previous definition Name
 222+ 7EC5             >F_INCLUDE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 222+ 7EC5 E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 222+ 7EC7             >                else
 222+ 7EC7 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 222+ 7EC7             >                endif           ; ok        // for other definitions it "points" the correct handler
 222+ 7EC7             >                // Use of "; ok" to suppress "warning[fwdref]"
 222+ 7EC7             >
 222+ 7EC7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 223+ 7EC7 61 6E F6 6B                  dw      BLK, FETCH, TO_R        // blk @ >r
 223+ 7ECB E6 69
 224+ 7ECD 6A 6E F6 6B                  dw      TO_IN, FETCH, TO_R      // >in @ >r
 224+ 7ED1 E6 69
 225+ 7ED3 18 6F F6 6B                  dw      SOURCE_ID, FETCH, TO_R  // source-id @ >r
 225+ 7ED7 E6 69
 226+ 7ED9 0D 6A                        dw      R_OP                    // r
 227+ 7EDB                                                              // if
 228+ 7EDB 7D 64                        dw      ZBRANCH
 229+ 7EDD 10 00                        dw      FInclude_Else_1 - $
 230+ 7EDF 0D 6A ED 67                  dw          R_OP, F_FGETPOS     //      r f_getpos
 231+ 7EE3 43 64 2C 00                  dw          LIT, 44, QERROR     //      44 ?error
 231+ 7EE7 FF 70
 232+ 7EE9                                                              // else
 233+ 7EE9 66 64                        dw      BRANCH
 234+ 7EEB 06 00                        dw      FInclude_Endif_1 - $
 235+ 7EED              FInclude_Else_1:
 236+ 7EED 62 6D 62 6D                  dw          ZERO, ZERO          //      0 0
 237+ 7EF1                                                              // endif
 238+ 7EF1              FInclude_Endif_1:
 239+ 7EF1 E6 69 E6 69                  dw      TO_R, TO_R              // >r >r
 240+ 7EF5 18 6F 03 6C                  dw      SOURCE_ID, STORE        // source-id !
 241+ 7EF9              FInclude_Begin:                                 // begin
 242+ 7EF9 6A 6D 93 7D                  dw          ONE, BLOCK, BBUF    //      1 block b/buf
 242+ 7EFD A2 6D
 243+ 7EFF 9C 6B E4 73                  dw          TWO_DUP, BLANKS     //      2dup blanks
 244+ 7F03 25 6B 78 6A                  dw          SWAP, ONE_PLUS      //      swap 1+
 245+ 7F07 25 6B AA 6A                  dw          SWAP, CELL_MINUS    //      swap cell-
 246+ 7F0B 18 6F F6 6B                  dw          SOURCE_ID, FETCH    //      source-id @
 247+ 7F0F 29 7E                        dw          F_GETLINE           //      f_getline
 248+ 7F11                                                              // while
 249+ 7F11 7D 64                        dw      ZBRANCH
 250+ 7F13 14 00                        dw      FInclude_Repeat - $
 251+ 7F15 6A 6D 61 6E                  dw          ONE, BLK, STORE     //      1 blk !
 251+ 7F19 03 6C
 252+ 7F1B 62 6D 6A 6E                  dw          ZERO, TO_IN, STORE  //      0 >in !
 252+ 7F1F 03 6C
 253+ 7F21 BC 77                        dw          INTERPRET           //      interpret
 254+ 7F23 66 64                        dw      BRANCH
 255+ 7F25 D4 FF                        dw      FInclude_Begin - $
 256+ 7F27              FInclude_Repeat:                                // repeat
 257+ 7F27 18 6F F6 6B                  dw      SOURCE_ID, FETCH        // source-id @
 258+ 7F2B 62 6D 18 6F                  dw      ZERO, SOURCE_ID, STORE  // 0 source-id !
 258+ 7F2F 03 6C
 259+ 7F31 49 68                        dw      F_CLOSE                 // f_close
 260+ 7F33 43 64 2A 00                  dw      LIT, 42, QERROR         // 42 ?error
 260+ 7F37 FF 70
 261+ 7F39 FA 69 FA 69                  dw      R_TO, R_TO, R_TO        // r> r> r>
 261+ 7F3D FA 69
 262+ 7F3F 32 6B 18 6F                  dw      DUP, SOURCE_ID, STORE   // dup source-id !
 262+ 7F43 03 6C
 263+ 7F45                                                              // if
 264+ 7F45 7D 64                        dw      ZBRANCH
 265+ 7F47 12 00                        dw      FInclude_Else_2 - $
 266+ 7F49 18 6F F6 6B                  dw          SOURCE_ID, FETCH    //      source-id @
 267+ 7F4D C8 67                        dw          F_SEEK              //      f_seek
 268+ 7F4F 43 64 2B 00                  dw          LIT, 43, QERROR     //      43, ?error
 268+ 7F53 FF 70
 269+ 7F55                                                              // else
 270+ 7F55 66 64                        dw      BRANCH
 271+ 7F57 04 00                        dw      FInclude_Endif_2 - $
 272+ 7F59              FInclude_Else_2:
 273+ 7F59 7C 6B                        dw          TWO_DROP            //      2drop
 274+ 7F5B              FInclude_Endif_2:                               // endif
 275+ 7F5B FA 69 6A 6E                  dw      R_TO, TO_IN, STORE      // r> >in !
 275+ 7F5F 03 6C
 276+ 7F61 FA 69 61 6E                  dw      R_TO, BLK, STORE        // r> blk !
 276+ 7F65 03 6C
 277+ 7F67 BD 69                        dw      EXIT                    // ;
 278+ 7F69
 279+ 7F69              //  ______________________________________________________________________
 280+ 7F69              //
 281+ 7F69              // open<         -- fh
 282+ 7F69              // Open the following filename and return it file-handle
 283+ 7F69              // Used in the form OPEN CCCC
 284+ 7F69                              Colon_Def OPEN_FH, "OPEN<", is_normal
 284+ 7F69             >                New_Def  OPEN_FH, "OPEN<", Enter_Ptr, is_normal ; ok
 284+ 7F69             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 284+ 7F69             >
 284+ 7F69             >                // dummy db directives used to calculate length of namec
 284+ 7F69 4F 50 45 4E >                db      "OPEN<"
 284+ 7F6D 3C          >
 284+ 7F6E             >len_NFA         defl    $ - temp_NFA
 284+ 7F6E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 284+ 7F69             >
 284+ 7F69 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 284+ 7F6A 4F 50 45 4E >                db      "OPEN<"               // name string in 7-bit ascii, but
 284+ 7F6E 3C          >
 284+ 7F6F             >                org     $-1                 // alter last byte of Name just above to set
 284+ 7F6E BC          >                db      {b $} | END_BIT     // msb as name end
 284+ 7F6F             >
 284+ 7F6F B9 7E       >                dw      last_NFA            // Link to previous definition Name
 284+ 7F71             >OPEN_FH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 284+ 7F71 E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 284+ 7F73             >                else
 284+ 7F73 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 284+ 7F73             >                endif           ; ok        // for other definitions it "points" the correct handler
 284+ 7F73             >                // Use of "; ok" to suppress "warning[fwdref]"
 284+ 7F73             >
 284+ 7F73             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 285+ 7F73 8C 6D                        dw      BL
 286+ 7F75 1C 74 86 72                  dw      WORD, COUNT, OVER       // bl word count over
 286+ 7F79 ED 6A
 287+ 7F7B 4F 6A 62 6D                  dw      PLUS, ZERO, SWAP, STORE // + 0 swap !
 287+ 7F7F 25 6B 03 6C
 288+ 7F83 09 74 6A 6D                  dw      PAD, ONE, F_OPEN        // pad 1 f_open
 288+ 7F87 63 68
 289+ 7F89 43 64 2B 00                  dw      LIT, 43                 // 43
 290+ 7F8D FF 70                        dw      QERROR                  // ?error
 291+ 7F8F BD 69                        dw      EXIT                    // ;
 292+ 7F91
 293+ 7F91              //  ______________________________________________________________________
 294+ 7F91              //
 295+ 7F91              // include      -- cccc
 296+ 7F91              // Include the following filename
 297+ 7F91                              Colon_Def INCLUDE, "INCLUDE", is_normal
 297+ 7F91             >                New_Def  INCLUDE, "INCLUDE", Enter_Ptr, is_normal ; ok
 297+ 7F91             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 297+ 7F91             >
 297+ 7F91             >                // dummy db directives used to calculate length of namec
 297+ 7F91 49 4E 43 4C >                db      "INCLUDE"
 297+ 7F95 55 44 45    >
 297+ 7F98             >len_NFA         defl    $ - temp_NFA
 297+ 7F98             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 297+ 7F91             >
 297+ 7F91 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 297+ 7F92 49 4E 43 4C >                db      "INCLUDE"               // name string in 7-bit ascii, but
 297+ 7F96 55 44 45    >
 297+ 7F99             >                org     $-1                 // alter last byte of Name just above to set
 297+ 7F98 C5          >                db      {b $} | END_BIT     // msb as name end
 297+ 7F99             >
 297+ 7F99 69 7F       >                dw      last_NFA            // Link to previous definition Name
 297+ 7F9B             >INCLUDE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 297+ 7F9B E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 297+ 7F9D             >                else
 297+ 7F9D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 297+ 7F9D             >                endif           ; ok        // for other definitions it "points" the correct handler
 297+ 7F9D             >                // Use of "; ok" to suppress "warning[fwdref]"
 297+ 7F9D             >
 297+ 7F9D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 298+ 7F9D 71 7F                        dw      OPEN_FH                 // open
 299+ 7F9F 32 6B C5 7E                  dw      DUP, F_INCLUDE          // dup f_include
 300+ 7FA3 49 68 FD 6A                  dw      F_CLOSE, DROP           // f_close drop
 301+ 7FA7 BD 69                        dw      EXIT                    // ;
 302+ 7FA9
 303+ 7FA9              //  ______________________________________________________________________
 304+ 7FA9              //
 305+ 7FA9              // needs
 306+ 7FA9              // check for cccc exists in vocabulary
 307+ 7FA9              // if it doesn't then  INCLUDE  inc/cccc.F
 308+ 7FA9
 309+ 7FA9              // temp filename cccc.f as counted string zero-padded
 310+ 7FA9                              New_Def NEEDS_W,   "NEEDS-W", Create_Ptr, is_normal
 310+ 7FA9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 310+ 7FA9             >
 310+ 7FA9             >                // dummy db directives used to calculate length of namec
 310+ 7FA9 4E 45 45 44 >                db      "NEEDS-W"
 310+ 7FAD 53 2D 57    >
 310+ 7FB0             >len_NFA         defl    $ - temp_NFA
 310+ 7FB0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 310+ 7FA9             >
 310+ 7FA9 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 310+ 7FAA 4E 45 45 44 >                db      "NEEDS-W"               // name string in 7-bit ascii, but
 310+ 7FAE 53 2D 57    >
 310+ 7FB1             >                org     $-1                 // alter last byte of Name just above to set
 310+ 7FB0 D7          >                db      {b $} | END_BIT     // msb as name end
 310+ 7FB1             >
 310+ 7FB1 91 7F       >                dw      last_NFA            // Link to previous definition Name
 310+ 7FB3             >NEEDS_W:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 310+ 7FB3 CF 76       >                dw      Create_Ptr ; ok        // for primitive definitions  actual code
 310+ 7FB5             >                else
 310+ 7FB5 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 310+ 7FB5             >                endif           ; ok        // for other definitions it "points" the correct handler
 310+ 7FB5             >                // Use of "; ok" to suppress "warning[fwdref]"
 310+ 7FB5             >
 310+ 7FB5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 311+ 7FB5 00 00 00...                  ds      35                      // 32 + .f + 0x00 = len 35
 312+ 7FD8              // temp complete path+filename
 313+ 7FD8                              New_Def NEEDS_FN,  "NEEDS-FN", Create_Ptr, is_normal
 313+ 7FD8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 313+ 7FD8             >
 313+ 7FD8             >                // dummy db directives used to calculate length of namec
 313+ 7FD8 4E 45 45 44 >                db      "NEEDS-FN"
 313+ 7FDC 53 2D 46 4E >
 313+ 7FE0             >len_NFA         defl    $ - temp_NFA
 313+ 7FE0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 313+ 7FD8             >
 313+ 7FD8 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 313+ 7FD9 4E 45 45 44 >                db      "NEEDS-FN"               // name string in 7-bit ascii, but
 313+ 7FDD 53 2D 46 4E >
 313+ 7FE1             >                org     $-1                 // alter last byte of Name just above to set
 313+ 7FE0 CE          >                db      {b $} | END_BIT     // msb as name end
 313+ 7FE1             >
 313+ 7FE1 A9 7F       >                dw      last_NFA            // Link to previous definition Name
 313+ 7FE3             >NEEDS_FN:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 313+ 7FE3 CF 76       >                dw      Create_Ptr ; ok        // for primitive definitions  actual code
 313+ 7FE5             >                else
 313+ 7FE5 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 313+ 7FE5             >                endif           ; ok        // for other definitions it "points" the correct handler
 313+ 7FE5             >                // Use of "; ok" to suppress "warning[fwdref]"
 313+ 7FE5             >
 313+ 7FE5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 314+ 7FE5 00 00 00...                  ds      40
 315+ 800D              // constant path
 316+ 800D                              New_Def NEEDS_INC,  "NEEDS-INC", Create_Ptr, is_normal
 316+ 800D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 316+ 800D             >
 316+ 800D             >                // dummy db directives used to calculate length of namec
 316+ 800D 4E 45 45 44 >                db      "NEEDS-INC"
 316+ 8011 53 2D 49 4E >
 316+ 8015 43          >
 316+ 8016             >len_NFA         defl    $ - temp_NFA
 316+ 8016             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 316+ 800D             >
 316+ 800D 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 316+ 800E 4E 45 45 44 >                db      "NEEDS-INC"               // name string in 7-bit ascii, but
 316+ 8012 53 2D 49 4E >
 316+ 8016 43          >
 316+ 8017             >                org     $-1                 // alter last byte of Name just above to set
 316+ 8016 C3          >                db      {b $} | END_BIT     // msb as name end
 316+ 8017             >
 316+ 8017 D8 7F       >                dw      last_NFA            // Link to previous definition Name
 316+ 8019             >NEEDS_INC:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 316+ 8019 CF 76       >                dw      Create_Ptr ; ok        // for primitive definitions  actual code
 316+ 801B             >                else
 316+ 801B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 316+ 801B             >                endif           ; ok        // for other definitions it "points" the correct handler
 316+ 801B             >                // Use of "; ok" to suppress "warning[fwdref]"
 316+ 801B             >
 316+ 801B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 317+ 801B 04 69 6E 63                  db      4, "inc/", 0
 317+ 801F 2F 00
 318+ 8021
 319+ 8021              // Concatenate path at a and filename and include it
 320+ 8021              // No error is issued if filename doesn't exist.
 321+ 8021                              Colon_Def NEEDS_SLASH, "NEEDS/", is_normal
 321+ 8021             >                New_Def  NEEDS_SLASH, "NEEDS/", Enter_Ptr, is_normal ; ok
 321+ 8021             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 321+ 8021             >
 321+ 8021             >                // dummy db directives used to calculate length of namec
 321+ 8021 4E 45 45 44 >                db      "NEEDS/"
 321+ 8025 53 2F       >
 321+ 8027             >len_NFA         defl    $ - temp_NFA
 321+ 8027             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 321+ 8021             >
 321+ 8021 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 321+ 8022 4E 45 45 44 >                db      "NEEDS/"               // name string in 7-bit ascii, but
 321+ 8026 53 2F       >
 321+ 8028             >                org     $-1                 // alter last byte of Name just above to set
 321+ 8027 AF          >                db      {b $} | END_BIT     // msb as name end
 321+ 8028             >
 321+ 8028 0D 80       >                dw      last_NFA            // Link to previous definition Name
 321+ 802A             >NEEDS_SLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 321+ 802A E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 321+ 802C             >                else
 321+ 802C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 321+ 802C             >                endif           ; ok        // for other definitions it "points" the correct handler
 321+ 802C             >                // Use of "; ok" to suppress "warning[fwdref]"
 321+ 802C             >
 321+ 802C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 322+ 802C 86 72 15 6B                  dw      COUNT, TUCK             // n a n
 323+ 8030 E3 7F 25 6B                  dw      NEEDS_FN, SWAP, CMOVE   // n        \ Path
 323+ 8034 AB 68
 324+ 8036 E3 7F 4F 6A                  dw      NEEDS_FN, PLUS          // a1+n     \ Concat
 325+ 803A B3 7F 78 6A                  dw      NEEDS_W, ONE_PLUS, SWAP
 325+ 803E 25 6B
 326+ 8040 43 64 23 00                  dw      LIT, 35
 327+ 8044 AB 68                        dw      CMOVE
 328+ 8046 E3 7F                        dw      NEEDS_FN
 329+ 8048 09 74 6A 6D                  dw      PAD, ONE, F_OPEN
 329+ 804C 63 68
 330+ 804E 7D 64                        dw      ZBRANCH
 331+ 8050 16 00                        dw      Needs_1 - $
 332+ 8052 B3 7F 86 72                  dw          NEEDS_W, COUNT, TYPE, SPACE
 332+ 8056 99 72 45 70
 333+ 805A 43 64 2B 00                  dw          LIT, 43, MESSAGE, DROP
 333+ 805E BE 7A FD 6A
 334+ 8062 66 64                        dw      BRANCH
 335+ 8064 04 00                        dw      Needs_2 - $
 336+ 8066              Needs_1:
 337+ 8066 C5 7E                        dw          F_INCLUDE
 338+ 8068              Needs_2:
 339+ 8068 BD 69                        dw      EXIT                    // ;
 340+ 806A
 341+ 806A
 342+ 806A                              New_Def NCDM,   "NCDM", Create_Ptr, is_normal
 342+ 806A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 342+ 806A             >
 342+ 806A             >                // dummy db directives used to calculate length of namec
 342+ 806A 4E 43 44 4D >                db      "NCDM"
 342+ 806E             >len_NFA         defl    $ - temp_NFA
 342+ 806E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 342+ 806A             >
 342+ 806A 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 342+ 806B 4E 43 44 4D >                db      "NCDM"               // name string in 7-bit ascii, but
 342+ 806F             >                org     $-1                 // alter last byte of Name just above to set
 342+ 806E CD          >                db      {b $} | END_BIT     // msb as name end
 342+ 806F             >
 342+ 806F 21 80       >                dw      last_NFA            // Link to previous definition Name
 342+ 8071             >NCDM:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 342+ 8071 CF 76       >                dw      Create_Ptr ; ok        // for primitive definitions  actual code
 342+ 8073             >                else
 342+ 8073 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 342+ 8073             >                endif           ; ok        // for other definitions it "points" the correct handler
 342+ 8073             >                // Use of "; ok" to suppress "warning[fwdref]"
 342+ 8073             >
 342+ 8073             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 343+ 8073 5E 60 25 26                  db $5E, $60, $25, $26, $24, $5F, $7B, $7D, $7E
 343+ 8077 24 5F 7B 7D
 343+ 807B 7E
 344+ 807C
 345+ 807C                              New_Def NDOM,   "NDOM", Create_Ptr, is_normal
 345+ 807C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 345+ 807C             >
 345+ 807C             >                // dummy db directives used to calculate length of namec
 345+ 807C 4E 44 4F 4D >                db      "NDOM"
 345+ 8080             >len_NFA         defl    $ - temp_NFA
 345+ 8080             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 345+ 807C             >
 345+ 807C 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 345+ 807D 4E 44 4F 4D >                db      "NDOM"               // name string in 7-bit ascii, but
 345+ 8081             >                org     $-1                 // alter last byte of Name just above to set
 345+ 8080 CD          >                db      {b $} | END_BIT     // msb as name end
 345+ 8081             >
 345+ 8081 6A 80       >                dw      last_NFA            // Link to previous definition Name
 345+ 8083             >NDOM:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 345+ 8083 CF 76       >                dw      Create_Ptr ; ok        // for primitive definitions  actual code
 345+ 8085             >                else
 345+ 8085 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 345+ 8085             >                endif           ; ok        // for other definitions it "points" the correct handler
 345+ 8085             >                // Use of "; ok" to suppress "warning[fwdref]"
 345+ 8085             >
 345+ 8085             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 346+ 8085 3A 3F 2F 2A                  db $3A, $3F, $2F, $2A, $7C, $5C, $3C, $3E, $22
 346+ 8089 7C 5C 3C 3E
 346+ 808D 22
 347+ 808E
 348+ 808E
 349+ 808E              // Replace illegal character in filename using the map here above
 350+ 808E              // at the moment we need only  "
 351+ 808E                              Colon_Def NEEDS_CHECK, "NEEDS-CH", is_normal
 351+ 808E             >                New_Def  NEEDS_CHECK, "NEEDS-CH", Enter_Ptr, is_normal ; ok
 351+ 808E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 351+ 808E             >
 351+ 808E             >                // dummy db directives used to calculate length of namec
 351+ 808E 4E 45 45 44 >                db      "NEEDS-CH"
 351+ 8092 53 2D 43 48 >
 351+ 8096             >len_NFA         defl    $ - temp_NFA
 351+ 8096             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 351+ 808E             >
 351+ 808E 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 351+ 808F 4E 45 45 44 >                db      "NEEDS-CH"               // name string in 7-bit ascii, but
 351+ 8093 53 2D 43 48 >
 351+ 8097             >                org     $-1                 // alter last byte of Name just above to set
 351+ 8096 C8          >                db      {b $} | END_BIT     // msb as name end
 351+ 8097             >
 351+ 8097 7C 80       >                dw      last_NFA            // Link to previous definition Name
 351+ 8099             >NEEDS_CHECK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 351+ 8099 E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 351+ 809B             >                else
 351+ 809B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 351+ 809B             >                endif           ; ok        // for other definitions it "points" the correct handler
 351+ 809B             >                // Use of "; ok" to suppress "warning[fwdref]"
 351+ 809B             >
 351+ 809B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 352+ 809B B3 7F 86 72                  dw      NEEDS_W, COUNT, OVER
 352+ 809F ED 6A
 353+ 80A1 4F 6A 25 6B                  dw      PLUS, SWAP
 354+ 80A5 05 65                        dw      C_DO
 355+ 80A7              Needs_3:
 356+ 80A7 71 80 83 80                  dw          NCDM, NDOM, LIT, 9
 356+ 80AB 43 64 09 00
 357+ 80AF 10 65 11 6C                  dw          I, CFETCH
 358+ 80B3 2A 66                        dw          C_MAP
 359+ 80B5 10 65 1F 6C                  dw          I, CSTORE
 360+ 80B9              Needs_4:
 361+ 80B9 92 64                        dw      C_LOOP
 362+ 80BB EC FF                        dw      Needs_3 - $
 363+ 80BD BD 69                        dw      EXIT
 364+ 80BF
 365+ 80BF
 366+ 80BF              // include  "path/cccc.f" if cccc is not defined
 367+ 80BF              // filename cccc.f is temporary stored at NEEDS-W
 368+ 80BF                              Colon_Def NEEDS_PATH, "NEEDS-F", is_normal
 368+ 80BF             >                New_Def  NEEDS_PATH, "NEEDS-F", Enter_Ptr, is_normal ; ok
 368+ 80BF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 368+ 80BF             >
 368+ 80BF             >                // dummy db directives used to calculate length of namec
 368+ 80BF 4E 45 45 44 >                db      "NEEDS-F"
 368+ 80C3 53 2D 46    >
 368+ 80C6             >len_NFA         defl    $ - temp_NFA
 368+ 80C6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 368+ 80BF             >
 368+ 80BF 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 368+ 80C0 4E 45 45 44 >                db      "NEEDS-F"               // name string in 7-bit ascii, but
 368+ 80C4 53 2D 46    >
 368+ 80C7             >                org     $-1                 // alter last byte of Name just above to set
 368+ 80C6 C6          >                db      {b $} | END_BIT     // msb as name end
 368+ 80C7             >
 368+ 80C7 8E 80       >                dw      last_NFA            // Link to previous definition Name
 368+ 80C9             >NEEDS_PATH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 368+ 80C9 E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 368+ 80CB             >                else
 368+ 80CB ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 368+ 80CB             >                endif           ; ok        // for other definitions it "points" the correct handler
 368+ 80CB             >                // Use of "; ok" to suppress "warning[fwdref]"
 368+ 80CB             >
 368+ 80CB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 369+ 80CB CE 75 14 6A                  dw      LFIND, ZEQUAL
 370+ 80CF 7D 64                        dw      ZBRANCH
 371+ 80D1 2E 00                        dw      Needs_5 - $
 372+ 80D3 B3 7F                        dw          NEEDS_W
 373+ 80D5 43 64 23 00                  dw          LIT, 35
 374+ 80D9 D3 73                        dw          ERASE                   // a
 375+ 80DB 34 6F 11 6C                  dw          HERE, CFETCH, ONE_PLUS  // a n
 375+ 80DF 78 6A
 376+ 80E1 34 6F ED 6A                  dw          HERE, OVER              // a n here n
 377+ 80E5 B3 7F 25 6B                  dw          NEEDS_W, SWAP, CMOVE    // a n
 377+ 80E9 AB 68
 378+ 80EB 99 80                        dw          NEEDS_CHECK
 379+ 80ED B3 7F 4F 6A                  dw          NEEDS_W, PLUS           // a a1+1
 380+ 80F1 43 64 2E 66                  dw          LIT, $662E              // a a1+1 ".F"
 381+ 80F5 25 6B 03 6C                  dw          SWAP, STORE             // a
 382+ 80F9 2A 80                        dw          NEEDS_SLASH
 383+ 80FB 66 64                        dw      BRANCH
 384+ 80FD 06 00                        dw      Needs_6 - $
 385+ 80FF              Needs_5:
 386+ 80FF FD 6A 7C 6B                  dw          DROP, TWO_DROP
 387+ 8103              Needs_6:
 388+ 8103 BD 69                        dw      EXIT
 389+ 8105
 390+ 8105
 391+ 8105              // check for cccc exists in vocabulary
 392+ 8105              // if it doesn't then  INCLUDE  inc/cccc.F
 393+ 8105              // search in inc subdirectory
 394+ 8105                              Colon_Def NEEDS, "NEEDS", is_normal
 394+ 8105             >                New_Def  NEEDS, "NEEDS", Enter_Ptr, is_normal ; ok
 394+ 8105             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 394+ 8105             >
 394+ 8105             >                // dummy db directives used to calculate length of namec
 394+ 8105 4E 45 45 44 >                db      "NEEDS"
 394+ 8109 53          >
 394+ 810A             >len_NFA         defl    $ - temp_NFA
 394+ 810A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 394+ 8105             >
 394+ 8105 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 394+ 8106 4E 45 45 44 >                db      "NEEDS"               // name string in 7-bit ascii, but
 394+ 810A 53          >
 394+ 810B             >                org     $-1                 // alter last byte of Name just above to set
 394+ 810A D3          >                db      {b $} | END_BIT     // msb as name end
 394+ 810B             >
 394+ 810B BF 80       >                dw      last_NFA            // Link to previous definition Name
 394+ 810D             >NEEDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 394+ 810D E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 394+ 810F             >                else
 394+ 810F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 394+ 810F             >                endif           ; ok        // for other definitions it "points" the correct handler
 394+ 810F             >                // Use of "; ok" to suppress "warning[fwdref]"
 394+ 810F             >
 394+ 810F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 395+ 810F 19 80 C9 80                  dw      NEEDS_INC, NEEDS_PATH
 396+ 8113 BD 69                        dw      EXIT
 397+ 8115
 398+ 8115
 399+ 8115              //  ______________________________________________________________________
 400+ 8115              //
 401+ 8115              // load+        n --
 402+ 8115                              Colon_Def LOAD_P, "LOAD+", is_normal
 402+ 8115             >                New_Def  LOAD_P, "LOAD+", Enter_Ptr, is_normal ; ok
 402+ 8115             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 402+ 8115             >
 402+ 8115             >                // dummy db directives used to calculate length of namec
 402+ 8115 4C 4F 41 44 >                db      "LOAD+"
 402+ 8119 2B          >
 402+ 811A             >len_NFA         defl    $ - temp_NFA
 402+ 811A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 402+ 8115             >
 402+ 8115 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 402+ 8116 4C 4F 41 44 >                db      "LOAD+"               // name string in 7-bit ascii, but
 402+ 811A 2B          >
 402+ 811B             >                org     $-1                 // alter last byte of Name just above to set
 402+ 811A AB          >                db      {b $} | END_BIT     // msb as name end
 402+ 811B             >
 402+ 811B 05 81       >                dw      last_NFA            // Link to previous definition Name
 402+ 811D             >LOAD_P:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 402+ 811D E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 402+ 811F             >                else
 402+ 811F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 402+ 811F             >                endif           ; ok        // for other definitions it "points" the correct handler
 402+ 811F             >                // Use of "; ok" to suppress "warning[fwdref]"
 402+ 811F             >
 402+ 811F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 403+ 811F 61 6E F6 6B                  dw      BLK, FETCH, TO_R        // blk @ >r
 403+ 8123 E6 69
 404+ 8125 6A 6E F6 6B                  dw      TO_IN, FETCH, TO_R      // >in @ >r
 404+ 8129 E6 69
 405+ 812B
 406+ 812B 62 6D 6A 6E                  dw      ZERO, TO_IN, STORE      // 0 >in !
 406+ 812F 03 6C
 407+ 8131 AE 6D 07 7A                  dw      BSCR, MUL, BLK, STORE   // b/scr * blk !
 407+ 8135 61 6E 03 6C
 408+ 8139 BC 77                        dw      INTERPRET               // interpret
 409+ 813B
 410+ 813B FA 69 6A 6E                  dw      R_TO, TO_IN, STORE      // r> >in !
 410+ 813F 03 6C
 411+ 8141 FA 69 61 6E                  dw      R_TO, BLK, STORE        // r> blk !
 411+ 8145 03 6C
 412+ 8147 BD 69                        dw      EXIT                    // ;
 413+ 8149
 414+ 8149              //  ______________________________________________________________________
 415+ 8149              //
 416+ 8149              // -->          --
 417+ 8149                              Colon_Def LOAD_NEXT, "-->", is_immediate
 417+ 8149             >                New_Def  LOAD_NEXT, "-->", Enter_Ptr, is_immediate ; ok
 417+ 8149             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 417+ 8149             >
 417+ 8149             >                // dummy db directives used to calculate length of namec
 417+ 8149 2D 2D 3E    >                db      "-->"
 417+ 814C             >len_NFA         defl    $ - temp_NFA
 417+ 814C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 417+ 8149             >
 417+ 8149 C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 417+ 814A 2D 2D 3E    >                db      "-->"               // name string in 7-bit ascii, but
 417+ 814D             >                org     $-1                 // alter last byte of Name just above to set
 417+ 814C BE          >                db      {b $} | END_BIT     // msb as name end
 417+ 814D             >
 417+ 814D 15 81       >                dw      last_NFA            // Link to previous definition Name
 417+ 814F             >LOAD_NEXT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 417+ 814F E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 417+ 8151             >                else
 417+ 8151 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 417+ 8151             >                endif           ; ok        // for other definitions it "points" the correct handler
 417+ 8151             >                // Use of "; ok" to suppress "warning[fwdref]"
 417+ 8151             >
 417+ 8151             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 418+ 8151 78 71                        dw      QLOADING                // ?loading
 419+ 8153 62 6D 6A 6E                  dw      ZERO, TO_IN, STORE      // 0 >in !
 419+ 8157 03 6C
 420+ 8159 AE 6D                        dw      BSCR                    // b/scr
 421+ 815B 61 6E F6 6B                  dw      BLK, FETCH              // blk @
 422+ 815F ED 6A                        dw      OVER                    // over
 423+ 8161 34 7A                        dw      MOD                     // mod
 424+ 8163 88 6F                        dw      SUBTRACT                // -
 425+ 8165 61 6E D3 6B                  dw      BLK, PLUSSTORE          // +!
 426+ 8169 BD 69                        dw      EXIT                    // ;
 427+ 816B
 428+ 816B              //  ______________________________________________________________________
 429+ 816B              //
 430+ 816B              // '            -- xt
 431+ 816B                              Colon_Def TICK, "'", is_normal
 431+ 816B             >                New_Def  TICK, "'", Enter_Ptr, is_normal ; ok
 431+ 816B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 431+ 816B             >
 431+ 816B             >                // dummy db directives used to calculate length of namec
 431+ 816B 27          >                db      "'"
 431+ 816C             >len_NFA         defl    $ - temp_NFA
 431+ 816C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 431+ 816B             >
 431+ 816B 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 431+ 816C 27          >                db      "'"               // name string in 7-bit ascii, but
 431+ 816D             >                org     $-1                 // alter last byte of Name just above to set
 431+ 816C A7          >                db      {b $} | END_BIT     // msb as name end
 431+ 816D             >
 431+ 816D 49 81       >                dw      last_NFA            // Link to previous definition Name
 431+ 816F             >TICK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 431+ 816F E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 431+ 8171             >                else
 431+ 8171 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 431+ 8171             >                endif           ; ok        // for other definitions it "points" the correct handler
 431+ 8171             >                // Use of "; ok" to suppress "warning[fwdref]"
 431+ 8171             >
 431+ 8171             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 432+ 8171 CE 75                        dw      LFIND                   // -find
 433+ 8173 14 6A                        dw      ZEQUAL                  // 0=
 434+ 8175 62 6D FF 70                  dw      ZERO, QERROR            // 0 ?error
 435+ 8179 FD 6A                        dw      DROP                    // drop
 436+ 817B BD 69                        dw      EXIT                    // ;
 437+ 817D
 438+ 817D              //  ______________________________________________________________________
 439+ 817D              //
 440+ 817D              // forget       -- cccc
 441+ 817D                              Colon_Def FORGET, "FORGET", is_normal
 441+ 817D             >                New_Def  FORGET, "FORGET", Enter_Ptr, is_normal ; ok
 441+ 817D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 441+ 817D             >
 441+ 817D             >                // dummy db directives used to calculate length of namec
 441+ 817D 46 4F 52 47 >                db      "FORGET"
 441+ 8181 45 54       >
 441+ 8183             >len_NFA         defl    $ - temp_NFA
 441+ 8183             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 441+ 817D             >
 441+ 817D 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 441+ 817E 46 4F 52 47 >                db      "FORGET"               // name string in 7-bit ascii, but
 441+ 8182 45 54       >
 441+ 8184             >                org     $-1                 // alter last byte of Name just above to set
 441+ 8183 D4          >                db      {b $} | END_BIT     // msb as name end
 441+ 8184             >
 441+ 8184 6B 81       >                dw      last_NFA            // Link to previous definition Name
 441+ 8186             >FORGET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 441+ 8186 E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 441+ 8188             >                else
 441+ 8188 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 441+ 8188             >                endif           ; ok        // for other definitions it "points" the correct handler
 441+ 8188             >                // Use of "; ok" to suppress "warning[fwdref]"
 441+ 8188             >
 441+ 8188             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 442+ 8188 A2 6E F6 6B                  dw      CURRENT, FETCH          // current @
 443+ 818C 95 6E F6 6B                  dw      CONTEXT, FETCH          // context @
 444+ 8190 88 6F 43 64                  dw      SUBTRACT, LIT, 23, QERROR // - 23 ?error
 444+ 8194 17 00 FF 70
 445+ 8198 6F 81 CF 70                  dw      TICK, TO_BODY           // ' >body
 446+ 819C 32 6B 18 6E                  dw      DUP, FENCE, FETCH       // dup fence @
 446+ 81A0 F6 6B
 447+ 81A2 A3 6F 43 64                  dw      ULESS, LIT, 21, QERROR  // u< 21 ?error
 447+ 81A6 15 00 FF 70
 448+ 81AA 32 6B A5 70                  dw      DUP, NFA, DP, STORE     // dup nfa dp !
 448+ 81AE 20 6E 03 6C
 449+ 81B2 8B 70 F6 6B                  dw      LFA, FETCH              // lfa @
 450+ 81B6 95 6E F6 6B                  dw      CONTEXT, FETCH, STORE   // context @ !
 450+ 81BA 03 6C
 451+ 81BC BD 69                        dw      EXIT                    // ;
 452+ 81BE
 453+ 81BE              //  ______________________________________________________________________
 454+ 81BE              //
 455+ 81BE              // marker       -- cccc
 456+ 81BE                              Colon_Def MARKER, "MARKER", is_immediate
 456+ 81BE             >                New_Def  MARKER, "MARKER", Enter_Ptr, is_immediate ; ok
 456+ 81BE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 456+ 81BE             >
 456+ 81BE             >                // dummy db directives used to calculate length of namec
 456+ 81BE 4D 41 52 4B >                db      "MARKER"
 456+ 81C2 45 52       >
 456+ 81C4             >len_NFA         defl    $ - temp_NFA
 456+ 81C4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 456+ 81BE             >
 456+ 81BE C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 456+ 81BF 4D 41 52 4B >                db      "MARKER"               // name string in 7-bit ascii, but
 456+ 81C3 45 52       >
 456+ 81C5             >                org     $-1                 // alter last byte of Name just above to set
 456+ 81C4 D2          >                db      {b $} | END_BIT     // msb as name end
 456+ 81C5             >
 456+ 81C5 7D 81       >                dw      last_NFA            // Link to previous definition Name
 456+ 81C7             >MARKER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 456+ 81C7 E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 456+ 81C9             >                else
 456+ 81C9 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 456+ 81C9             >                endif           ; ok        // for other definitions it "points" the correct handler
 456+ 81C9             >                // Use of "; ok" to suppress "warning[fwdref]"
 456+ 81C9             >
 456+ 81C9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 457+ 81C9 4F 72                        dw      CBUILDS
 458+ 81CB 2E 6E F6 6B                  dw      VOC_LINK, FETCH, COMMA
 458+ 81CF 50 6F
 459+ 81D1 A2 6E F6 6B                  dw      CURRENT, FETCH, COMMA
 459+ 81D5 50 6F
 460+ 81D7 95 6E F6 6B                  dw      CONTEXT, FETCH, COMMA
 460+ 81DB 50 6F
 461+ 81DD 7B 70 50 6F                  dw      LATEST, COMMA
 462+ 81E1 7B 70 B9 70                  dw      LATEST, PFA, LFA, FETCH, COMMA
 462+ 81E5 8B 70 F6 6B
 462+ 81E9 50 6F
 463+ 81EB 5F 72                        dw      DOES_TO
 464+ 81ED 32 6B F6 6B                  dw      DUP, FETCH, VOC_LINK, STORE, CELL_PLUS
 464+ 81F1 2E 6E 03 6C
 464+ 81F5 A0 6A
 465+ 81F7 32 6B F6 6B                  dw      DUP, FETCH, CURRENT, STORE, CELL_PLUS
 465+ 81FB A2 6E 03 6C
 465+ 81FF A0 6A
 466+ 8201 32 6B F6 6B                  dw      DUP, FETCH, CONTEXT, STORE, CELL_PLUS
 466+ 8205 95 6E 03 6C
 466+ 8209 A0 6A
 467+ 820B 32 6B F6 6B                  dw      DUP, FETCH, DP, STORE, CELL_PLUS
 467+ 820F 20 6E 03 6C
 467+ 8213 A0 6A
 468+ 8215 F6 6B A2 6E                  dw           FETCH, CURRENT, FETCH, STORE
 468+ 8219 F6 6B 03 6C
 469+ 821D BD 69                        dw      EXIT
 470+ 821F
 471+ 821F              //  ______________________________________________________________________
 472+ 821F              //
 473+ 821F              // spaces       n --
 474+ 821F                              Colon_Def SPACES, "SPACES", is_normal
 474+ 821F             >                New_Def  SPACES, "SPACES", Enter_Ptr, is_normal ; ok
 474+ 821F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 474+ 821F             >
 474+ 821F             >                // dummy db directives used to calculate length of namec
 474+ 821F 53 50 41 43 >                db      "SPACES"
 474+ 8223 45 53       >
 474+ 8225             >len_NFA         defl    $ - temp_NFA
 474+ 8225             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 474+ 821F             >
 474+ 821F 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 474+ 8220 53 50 41 43 >                db      "SPACES"               // name string in 7-bit ascii, but
 474+ 8224 45 53       >
 474+ 8226             >                org     $-1                 // alter last byte of Name just above to set
 474+ 8225 D3          >                db      {b $} | END_BIT     // msb as name end
 474+ 8226             >
 474+ 8226 BE 81       >                dw      last_NFA            // Link to previous definition Name
 474+ 8228             >SPACES:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 474+ 8228 E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 474+ 822A             >                else
 474+ 822A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 474+ 822A             >                endif           ; ok        // for other definitions it "points" the correct handler
 474+ 822A             >                // Use of "; ok" to suppress "warning[fwdref]"
 474+ 822A             >
 474+ 822A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 475+ 822A 62 6D F7 6F                  dw      ZERO, MAX
 476+ 822E 62 6D D7 64                  dw      ZERO, C_Q_DO
 477+ 8232 08 00                        dw      Spaces_Leave - $
 478+ 8234              Spaces_Loop:
 479+ 8234 45 70                        dw          SPACE
 480+ 8236 92 64                        dw      C_LOOP
 481+ 8238 FC FF                        dw      Spaces_Loop - $
 482+ 823A              Spaces_Leave:
 483+ 823A BD 69                        dw      EXIT                    // ;
 484+ 823C
 485+ 823C              //  ______________________________________________________________________
 486+ 823C              //
 487+ 823C              // <#           --
 488+ 823C                              Colon_Def BEGIN_DASH, "<#", is_normal
 488+ 823C             >                New_Def  BEGIN_DASH, "<#", Enter_Ptr, is_normal ; ok
 488+ 823C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 488+ 823C             >
 488+ 823C             >                // dummy db directives used to calculate length of namec
 488+ 823C 3C 23       >                db      "<#"
 488+ 823E             >len_NFA         defl    $ - temp_NFA
 488+ 823E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 488+ 823C             >
 488+ 823C 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 488+ 823D 3C 23       >                db      "<#"               // name string in 7-bit ascii, but
 488+ 823F             >                org     $-1                 // alter last byte of Name just above to set
 488+ 823E A3          >                db      {b $} | END_BIT     // msb as name end
 488+ 823F             >
 488+ 823F 1F 82       >                dw      last_NFA            // Link to previous definition Name
 488+ 8241             >BEGIN_DASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 488+ 8241 E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 488+ 8243             >                else
 488+ 8243 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 488+ 8243             >                endif           ; ok        // for other definitions it "points" the correct handler
 488+ 8243             >                // Use of "; ok" to suppress "warning[fwdref]"
 488+ 8243             >
 488+ 8243             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 489+ 8243 09 74 E3 6E                  dw      PAD, HLD, STORE
 489+ 8247 03 6C
 490+ 8249 BD 69                        dw      EXIT
 491+ 824B
 492+ 824B              //  ______________________________________________________________________
 493+ 824B              //
 494+ 824B              // #>           --
 495+ 824B                              Colon_Def DASH_END, "#>", is_normal
 495+ 824B             >                New_Def  DASH_END, "#>", Enter_Ptr, is_normal ; ok
 495+ 824B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 495+ 824B             >
 495+ 824B             >                // dummy db directives used to calculate length of namec
 495+ 824B 23 3E       >                db      "#>"
 495+ 824D             >len_NFA         defl    $ - temp_NFA
 495+ 824D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 495+ 824B             >
 495+ 824B 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 495+ 824C 23 3E       >                db      "#>"               // name string in 7-bit ascii, but
 495+ 824E             >                org     $-1                 // alter last byte of Name just above to set
 495+ 824D BE          >                db      {b $} | END_BIT     // msb as name end
 495+ 824E             >
 495+ 824E 3C 82       >                dw      last_NFA            // Link to previous definition Name
 495+ 8250             >DASH_END:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 495+ 8250 E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 495+ 8252             >                else
 495+ 8252 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 495+ 8252             >                endif           ; ok        // for other definitions it "points" the correct handler
 495+ 8252             >                // Use of "; ok" to suppress "warning[fwdref]"
 495+ 8252             >
 495+ 8252             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 496+ 8252 7C 6B                        dw      TWO_DROP
 497+ 8254 E3 6E F6 6B                  dw      HLD, FETCH, PAD, OVER, SUBTRACT
 497+ 8258 09 74 ED 6A
 497+ 825C 88 6F
 498+ 825E BD 69                        dw      EXIT
 499+ 8260
 500+ 8260              //  ______________________________________________________________________
 501+ 8260              //
 502+ 8260              // sign         n d -- d
 503+ 8260                              Colon_Def SIGN, "SIGN", is_normal
 503+ 8260             >                New_Def  SIGN, "SIGN", Enter_Ptr, is_normal ; ok
 503+ 8260             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 503+ 8260             >
 503+ 8260             >                // dummy db directives used to calculate length of namec
 503+ 8260 53 49 47 4E >                db      "SIGN"
 503+ 8264             >len_NFA         defl    $ - temp_NFA
 503+ 8264             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 503+ 8260             >
 503+ 8260 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 503+ 8261 53 49 47 4E >                db      "SIGN"               // name string in 7-bit ascii, but
 503+ 8265             >                org     $-1                 // alter last byte of Name just above to set
 503+ 8264 CE          >                db      {b $} | END_BIT     // msb as name end
 503+ 8265             >
 503+ 8265 4B 82       >                dw      last_NFA            // Link to previous definition Name
 503+ 8267             >SIGN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 503+ 8267 E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 503+ 8269             >                else
 503+ 8269 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 503+ 8269             >                endif           ; ok        // for other definitions it "points" the correct handler
 503+ 8269             >                // Use of "; ok" to suppress "warning[fwdref]"
 503+ 8269             >
 503+ 8269             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 504+ 8269 3F 6B 27 6A                  dw      ROT, ZLESS
 505+ 826D 7D 64                        dw      ZBRANCH
 506+ 826F 08 00                        dw      Sign_Endif - $
 507+ 8271 43 64 2D 00                  dw          LIT, 45, HOLD
 507+ 8275 F3 73
 508+ 8277              Sign_Endif:
 509+ 8277 BD 69                        dw      EXIT
 510+ 8279
 511+ 8279              //  ______________________________________________________________________
 512+ 8279              //
 513+ 8279              // #           d1 -- d2
 514+ 8279                              Colon_Def DASH, "#", is_normal
 514+ 8279             >                New_Def  DASH, "#", Enter_Ptr, is_normal ; ok
 514+ 8279             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 514+ 8279             >
 514+ 8279             >                // dummy db directives used to calculate length of namec
 514+ 8279 23          >                db      "#"
 514+ 827A             >len_NFA         defl    $ - temp_NFA
 514+ 827A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 514+ 8279             >
 514+ 8279 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 514+ 827A 23          >                db      "#"               // name string in 7-bit ascii, but
 514+ 827B             >                org     $-1                 // alter last byte of Name just above to set
 514+ 827A A3          >                db      {b $} | END_BIT     // msb as name end
 514+ 827B             >
 514+ 827B 60 82       >                dw      last_NFA            // Link to previous definition Name
 514+ 827D             >DASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 514+ 827D E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 514+ 827F             >                else
 514+ 827F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 514+ 827F             >                endif           ; ok        // for other definitions it "points" the correct handler
 514+ 827F             >                // Use of "; ok" to suppress "warning[fwdref]"
 514+ 827F             >
 514+ 827F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 515+ 827F B7 6E F6 6B                  dw      BASE, FETCH, MDIV_MOD, ROT
 515+ 8283 65 7A 3F 6B
 516+ 8287 43 64 09 00                  dw      LIT, 9, OVER, LESS
 516+ 828B ED 6A B7 6F
 517+ 828F 7D 64                        dw      ZBRANCH
 518+ 8291 08 00                        dw      Dash_Endif - $
 519+ 8293 43 64 07 00                  dw          LIT, 7, PLUS
 519+ 8297 4F 6A
 520+ 8299              Dash_Endif:
 521+ 8299
 522+ 8299 43 64 30 00                  dw      LIT, 48, PLUS, HOLD
 522+ 829D 4F 6A F3 73
 523+ 82A1 BD 69                        dw      EXIT
 524+ 82A3
 525+ 82A3              //  ______________________________________________________________________
 526+ 82A3              //
 527+ 82A3              // #s           d1 -- d2
 528+ 82A3                              Colon_Def DASHES, "#S", is_normal
 528+ 82A3             >                New_Def  DASHES, "#S", Enter_Ptr, is_normal ; ok
 528+ 82A3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 528+ 82A3             >
 528+ 82A3             >                // dummy db directives used to calculate length of namec
 528+ 82A3 23 53       >                db      "#S"
 528+ 82A5             >len_NFA         defl    $ - temp_NFA
 528+ 82A5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 528+ 82A3             >
 528+ 82A3 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 528+ 82A4 23 53       >                db      "#S"               // name string in 7-bit ascii, but
 528+ 82A6             >                org     $-1                 // alter last byte of Name just above to set
 528+ 82A5 D3          >                db      {b $} | END_BIT     // msb as name end
 528+ 82A6             >
 528+ 82A6 79 82       >                dw      last_NFA            // Link to previous definition Name
 528+ 82A8             >DASHES:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 528+ 82A8 E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 528+ 82AA             >                else
 528+ 82AA ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 528+ 82AA             >                endif           ; ok        // for other definitions it "points" the correct handler
 528+ 82AA             >                // Use of "; ok" to suppress "warning[fwdref]"
 528+ 82AA             >
 528+ 82AA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 529+ 82AA              Dashes_Begin:
 530+ 82AA 7D 82 9C 6B                  dw      DASH, TWO_DUP
 531+ 82AE 61 69 14 6A                  dw          OR_OP, ZEQUAL
 532+ 82B2 7D 64                        dw      ZBRANCH
 533+ 82B4 F6 FF                        dw      Dashes_Begin - $
 534+ 82B6 BD 69                        dw      EXIT
 535+ 82B8
 536+ 82B8              //  ______________________________________________________________________
 537+ 82B8              //
 538+ 82B8              // d.r          d n --
 539+ 82B8                              Colon_Def D_DOT_R, "D.R", is_normal
 539+ 82B8             >                New_Def  D_DOT_R, "D.R", Enter_Ptr, is_normal ; ok
 539+ 82B8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 539+ 82B8             >
 539+ 82B8             >                // dummy db directives used to calculate length of namec
 539+ 82B8 44 2E 52    >                db      "D.R"
 539+ 82BB             >len_NFA         defl    $ - temp_NFA
 539+ 82BB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 539+ 82B8             >
 539+ 82B8 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 539+ 82B9 44 2E 52    >                db      "D.R"               // name string in 7-bit ascii, but
 539+ 82BC             >                org     $-1                 // alter last byte of Name just above to set
 539+ 82BB D2          >                db      {b $} | END_BIT     // msb as name end
 539+ 82BC             >
 539+ 82BC A3 82       >                dw      last_NFA            // Link to previous definition Name
 539+ 82BE             >D_DOT_R:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 539+ 82BE E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 539+ 82C0             >                else
 539+ 82C0 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 539+ 82C0             >                endif           ; ok        // for other definitions it "points" the correct handler
 539+ 82C0             >                // Use of "; ok" to suppress "warning[fwdref]"
 539+ 82C0             >
 539+ 82C0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 540+ 82C0 E6 69                        dw      TO_R
 541+ 82C2 25 6B ED 6A                  dw      SWAP, OVER, DABS
 541+ 82C6 B9 79
 542+ 82C8 41 82 A8 82                  dw      BEGIN_DASH, DASHES, SIGN, DASH_END
 542+ 82CC 67 82 50 82
 543+ 82D0 FA 69                        dw      R_TO
 544+ 82D2 ED 6A 88 6F                  dw      OVER, SUBTRACT, SPACES, TYPE
 544+ 82D6 28 82 99 72
 545+ 82DA BD 69                        dw      EXIT
 546+ 82DC
 547+ 82DC              //  ______________________________________________________________________
 548+ 82DC              //
 549+ 82DC              // .r           n1 n2 --
 550+ 82DC                              Colon_Def DOT_R, ".R", is_normal
 550+ 82DC             >                New_Def  DOT_R, ".R", Enter_Ptr, is_normal ; ok
 550+ 82DC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 550+ 82DC             >
 550+ 82DC             >                // dummy db directives used to calculate length of namec
 550+ 82DC 2E 52       >                db      ".R"
 550+ 82DE             >len_NFA         defl    $ - temp_NFA
 550+ 82DE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 550+ 82DC             >
 550+ 82DC 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 550+ 82DD 2E 52       >                db      ".R"               // name string in 7-bit ascii, but
 550+ 82DF             >                org     $-1                 // alter last byte of Name just above to set
 550+ 82DE D2          >                db      {b $} | END_BIT     // msb as name end
 550+ 82DF             >
 550+ 82DF B8 82       >                dw      last_NFA            // Link to previous definition Name
 550+ 82E1             >DOT_R:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 550+ 82E1 E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 550+ 82E3             >                else
 550+ 82E3 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 550+ 82E3             >                endif           ; ok        // for other definitions it "points" the correct handler
 550+ 82E3             >                // Use of "; ok" to suppress "warning[fwdref]"
 550+ 82E3             >
 550+ 82E3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 551+ 82E3 E6 69                        dw      TO_R
 552+ 82E5 74 6F FA 69                  dw      S_TO_D, R_TO
 553+ 82E9 BE 82                        dw      D_DOT_R
 554+ 82EB BD 69                        dw      EXIT
 555+ 82ED
 556+ 82ED              //  ______________________________________________________________________
 557+ 82ED              //
 558+ 82ED              // d.           d --
 559+ 82ED                              Colon_Def D_DOT, "D.", is_normal
 559+ 82ED             >                New_Def  D_DOT, "D.", Enter_Ptr, is_normal ; ok
 559+ 82ED             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 559+ 82ED             >
 559+ 82ED             >                // dummy db directives used to calculate length of namec
 559+ 82ED 44 2E       >                db      "D."
 559+ 82EF             >len_NFA         defl    $ - temp_NFA
 559+ 82EF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 559+ 82ED             >
 559+ 82ED 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 559+ 82EE 44 2E       >                db      "D."               // name string in 7-bit ascii, but
 559+ 82F0             >                org     $-1                 // alter last byte of Name just above to set
 559+ 82EF AE          >                db      {b $} | END_BIT     // msb as name end
 559+ 82F0             >
 559+ 82F0 DC 82       >                dw      last_NFA            // Link to previous definition Name
 559+ 82F2             >D_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 559+ 82F2 E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 559+ 82F4             >                else
 559+ 82F4 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 559+ 82F4             >                endif           ; ok        // for other definitions it "points" the correct handler
 559+ 82F4             >                // Use of "; ok" to suppress "warning[fwdref]"
 559+ 82F4             >
 559+ 82F4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 560+ 82F4 62 6D BE 82                  dw      ZERO, D_DOT_R, SPACE
 560+ 82F8 45 70
 561+ 82FA BD 69                        dw      EXIT
 562+ 82FC
 563+ 82FC              //  ______________________________________________________________________
 564+ 82FC              //
 565+ 82FC              // .            n --
 566+ 82FC                              Colon_Def DOT, ".", is_normal
 566+ 82FC             >                New_Def  DOT, ".", Enter_Ptr, is_normal ; ok
 566+ 82FC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 566+ 82FC             >
 566+ 82FC             >                // dummy db directives used to calculate length of namec
 566+ 82FC 2E          >                db      "."
 566+ 82FD             >len_NFA         defl    $ - temp_NFA
 566+ 82FD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 566+ 82FC             >
 566+ 82FC 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 566+ 82FD 2E          >                db      "."               // name string in 7-bit ascii, but
 566+ 82FE             >                org     $-1                 // alter last byte of Name just above to set
 566+ 82FD AE          >                db      {b $} | END_BIT     // msb as name end
 566+ 82FE             >
 566+ 82FE ED 82       >                dw      last_NFA            // Link to previous definition Name
 566+ 8300             >DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 566+ 8300 E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 566+ 8302             >                else
 566+ 8302 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 566+ 8302             >                endif           ; ok        // for other definitions it "points" the correct handler
 566+ 8302             >                // Use of "; ok" to suppress "warning[fwdref]"
 566+ 8302             >
 566+ 8302             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 567+ 8302 74 6F F2 82                  dw      S_TO_D, D_DOT
 568+ 8306 BD 69                        dw      EXIT
 569+ 8308
 570+ 8308              //  ______________________________________________________________________
 571+ 8308              //
 572+ 8308              // ?            n --
 573+ 8308                              Colon_Def QUESTION, "?", is_normal
 573+ 8308             >                New_Def  QUESTION, "?", Enter_Ptr, is_normal ; ok
 573+ 8308             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 573+ 8308             >
 573+ 8308             >                // dummy db directives used to calculate length of namec
 573+ 8308 3F          >                db      "?"
 573+ 8309             >len_NFA         defl    $ - temp_NFA
 573+ 8309             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 573+ 8308             >
 573+ 8308 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 573+ 8309 3F          >                db      "?"               // name string in 7-bit ascii, but
 573+ 830A             >                org     $-1                 // alter last byte of Name just above to set
 573+ 8309 BF          >                db      {b $} | END_BIT     // msb as name end
 573+ 830A             >
 573+ 830A FC 82       >                dw      last_NFA            // Link to previous definition Name
 573+ 830C             >QUESTION:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 573+ 830C E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 573+ 830E             >                else
 573+ 830E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 573+ 830E             >                endif           ; ok        // for other definitions it "points" the correct handler
 573+ 830E             >                // Use of "; ok" to suppress "warning[fwdref]"
 573+ 830E             >
 573+ 830E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 574+ 830E F6 6B 00 83                  dw      FETCH, DOT
 575+ 8312 BD 69                        dw      EXIT
 576+ 8314
 577+ 8314              //  ______________________________________________________________________
 578+ 8314              //
 579+ 8314              // u.           u --
 580+ 8314                              Colon_Def U_DOT, "U.", is_normal
 580+ 8314             >                New_Def  U_DOT, "U.", Enter_Ptr, is_normal ; ok
 580+ 8314             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 580+ 8314             >
 580+ 8314             >                // dummy db directives used to calculate length of namec
 580+ 8314 55 2E       >                db      "U."
 580+ 8316             >len_NFA         defl    $ - temp_NFA
 580+ 8316             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 580+ 8314             >
 580+ 8314 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 580+ 8315 55 2E       >                db      "U."               // name string in 7-bit ascii, but
 580+ 8317             >                org     $-1                 // alter last byte of Name just above to set
 580+ 8316 AE          >                db      {b $} | END_BIT     // msb as name end
 580+ 8317             >
 580+ 8317 08 83       >                dw      last_NFA            // Link to previous definition Name
 580+ 8319             >U_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 580+ 8319 E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 580+ 831B             >                else
 580+ 831B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 580+ 831B             >                endif           ; ok        // for other definitions it "points" the correct handler
 580+ 831B             >                // Use of "; ok" to suppress "warning[fwdref]"
 580+ 831B             >
 580+ 831B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 581+ 831B 62 6D F2 82                  dw      ZERO, D_DOT
 582+ 831F BD 69                        dw      EXIT
 583+ 8321
 584+ 8321              //  ______________________________________________________________________
 585+ 8321              //
 586+ 8321              // words        --
 587+ 8321                              Colon_Def WORDS, "WORDS", is_normal
 587+ 8321             >                New_Def  WORDS, "WORDS", Enter_Ptr, is_normal ; ok
 587+ 8321             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 587+ 8321             >
 587+ 8321             >                // dummy db directives used to calculate length of namec
 587+ 8321 57 4F 52 44 >                db      "WORDS"
 587+ 8325 53          >
 587+ 8326             >len_NFA         defl    $ - temp_NFA
 587+ 8326             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 587+ 8321             >
 587+ 8321 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 587+ 8322 57 4F 52 44 >                db      "WORDS"               // name string in 7-bit ascii, but
 587+ 8326 53          >
 587+ 8327             >                org     $-1                 // alter last byte of Name just above to set
 587+ 8326 D3          >                db      {b $} | END_BIT     // msb as name end
 587+ 8327             >
 587+ 8327 14 83       >                dw      last_NFA            // Link to previous definition Name
 587+ 8329             >WORDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 587+ 8329 E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 587+ 832B             >                else
 587+ 832B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 587+ 832B             >                endif           ; ok        // for other definitions it "points" the correct handler
 587+ 832B             >                // Use of "; ok" to suppress "warning[fwdref]"
 587+ 832B             >
 587+ 832B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 588+ 832B 43 64 80 00                  dw      LIT, 128, OUT, STORE
 588+ 832F 73 6E 03 6C
 589+ 8333 95 6E F6 6B                  dw      CONTEXT, FETCH, FETCH
 589+ 8337 F6 6B
 590+ 8339              Words_Begin:
 591+ 8339 32 6B 11 6C                  dw          DUP, CFETCH, LIT, $1F, AND_OP
 591+ 833D 43 64 1F 00
 591+ 8341 4F 69
 592+ 8343 73 6E F6 6B                  dw          OUT, FETCH, PLUS
 592+ 8347 4F 6A
 593+ 8349 96 6D B7 6F                  dw          CL, LESS, ZEQUAL
 593+ 834D 14 6A
 594+ 834F 7D 64                        dw          ZBRANCH
 595+ 8351 0A 00                        dw          Words_Endif - $
 596+ 8353 9C 68 62 6D                  dw              CR, ZERO, OUT, STORE
 596+ 8357 73 6E 03 6C
 597+ 835B              Words_Endif:
 598+ 835B 32 6B 3F 76                  dw          DUP, ID_DOT
 599+ 835F B9 70 8B 70                  dw          PFA, LFA, FETCH
 599+ 8363 F6 6B
 600+ 8365 32 6B 14 6A                  dw          DUP, ZEQUAL
 601+ 8369 A6 67 61 69                  dw          QTERMINAL, OR_OP
 602+ 836D 7D 64                        dw      ZBRANCH
 603+ 836F CA FF                        dw      Words_Begin - $
 604+ 8371 FD 6A                        dw      DROP
 605+ 8373 BD 69                        dw      EXIT
 606+ 8375
 607+ 8375              //  ______________________________________________________________________
 608+ 8375              //
 609+ 8375              // list         n --
 610+ 8375                              Colon_Def LIST, "LIST", is_normal
 610+ 8375             >                New_Def  LIST, "LIST", Enter_Ptr, is_normal ; ok
 610+ 8375             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 610+ 8375             >
 610+ 8375             >                // dummy db directives used to calculate length of namec
 610+ 8375 4C 49 53 54 >                db      "LIST"
 610+ 8379             >len_NFA         defl    $ - temp_NFA
 610+ 8379             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 610+ 8375             >
 610+ 8375 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 610+ 8376 4C 49 53 54 >                db      "LIST"               // name string in 7-bit ascii, but
 610+ 837A             >                org     $-1                 // alter last byte of Name just above to set
 610+ 8379 D4          >                db      {b $} | END_BIT     // msb as name end
 610+ 837A             >
 610+ 837A 21 83       >                dw      last_NFA            // Link to previous definition Name
 610+ 837C             >LIST:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 610+ 837C E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 610+ 837E             >                else
 610+ 837E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 610+ 837E             >                endif           ; ok        // for other definitions it "points" the correct handler
 610+ 837E             >                // Use of "; ok" to suppress "warning[fwdref]"
 610+ 837E             >
 610+ 837E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 611+ 837E 0B 72 9C 68                  dw      DECIMAL, CR
 612+ 8382 32 6B 7C 6E                  dw      DUP, SCR, STORE
 612+ 8386 03 6C
 613+ 8388 6B 74                        dw      C_DOT_QUOTE
 614+ 838A 05 53 63 72                  db      5, "Scr# "
 614+ 838E 23 20
 615+ 8390 00 83                        dw      DOT
 616+ 8392 BA 6D 62 6D                  dw      LSCR, ZERO, C_DO
 616+ 8396 05 65
 617+ 8398              List_Loop:
 618+ 8398 9C 68                        dw          CR
 619+ 839A 10 65 7A 6D                  dw          I, THREE
 620+ 839E E1 82 45 70                  dw          DOT_R, SPACE
 621+ 83A2 10 65 7C 6E                  dw          I, SCR, FETCH, DOT_LINE
 621+ 83A6 F6 6B AA 7A
 622+ 83AA A6 67                        dw          QTERMINAL
 623+ 83AC 7D 64                        dw          ZBRANCH
 624+ 83AE 04 00                        dw          List_Endif - $
 625+ 83B0 D3 69                        dw              LEAVE
 626+ 83B2              List_Endif:
 627+ 83B2 92 64                        dw      C_LOOP
 628+ 83B4 E4 FF                        dw      List_Loop - $
 629+ 83B6 9C 68                        dw      CR
 630+ 83B8 BD 69                        dw      EXIT
 631+ 83BA
 632+ 83BA              //  ______________________________________________________________________
 633+ 83BA              //
 634+ 83BA              // index        n1 n2 --
 635+ 83BA                              Colon_Def INDEX, "INDEX", is_normal
 635+ 83BA             >                New_Def  INDEX, "INDEX", Enter_Ptr, is_normal ; ok
 635+ 83BA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 635+ 83BA             >
 635+ 83BA             >                // dummy db directives used to calculate length of namec
 635+ 83BA 49 4E 44 45 >                db      "INDEX"
 635+ 83BE 58          >
 635+ 83BF             >len_NFA         defl    $ - temp_NFA
 635+ 83BF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 635+ 83BA             >
 635+ 83BA 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 635+ 83BB 49 4E 44 45 >                db      "INDEX"               // name string in 7-bit ascii, but
 635+ 83BF 58          >
 635+ 83C0             >                org     $-1                 // alter last byte of Name just above to set
 635+ 83BF D8          >                db      {b $} | END_BIT     // msb as name end
 635+ 83C0             >
 635+ 83C0 75 83       >                dw      last_NFA            // Link to previous definition Name
 635+ 83C2             >INDEX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 635+ 83C2 E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 635+ 83C4             >                else
 635+ 83C4 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 635+ 83C4             >                endif           ; ok        // for other definitions it "points" the correct handler
 635+ 83C4             >                // Use of "; ok" to suppress "warning[fwdref]"
 635+ 83C4             >
 635+ 83C4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 636+ 83C4 78 6A 25 6B                  dw      ONE_PLUS, SWAP, C_DO
 636+ 83C8 05 65
 637+ 83CA              Index_Loop:
 638+ 83CA 9C 68 10 65                  dw          CR, I, THREE
 638+ 83CE 7A 6D
 639+ 83D0 E1 82 45 70                  dw          DOT_R, SPACE
 640+ 83D4 62 6D 10 65                  dw          ZERO, I, DOT_LINE
 640+ 83D8 AA 7A
 641+ 83DA A6 67                        dw          QTERMINAL
 642+ 83DC 7D 64                        dw          ZBRANCH
 643+ 83DE 04 00                        dw          Index_Endif - $
 644+ 83E0 D3 69                        dw              LEAVE
 645+ 83E2              Index_Endif:
 646+ 83E2 92 64                        dw      C_LOOP
 647+ 83E4 E6 FF                        dw      Index_Loop - $
 648+ 83E6 BD 69                        dw      EXIT
 649+ 83E8
 650+ 83E8              //  ______________________________________________________________________
 651+ 83E8              //
 652+ 83E8              // cls          --
 653+ 83E8                              Colon_Def CLS, "CLS", is_normal
 653+ 83E8             >                New_Def  CLS, "CLS", Enter_Ptr, is_normal ; ok
 653+ 83E8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 653+ 83E8             >
 653+ 83E8             >                // dummy db directives used to calculate length of namec
 653+ 83E8 43 4C 53    >                db      "CLS"
 653+ 83EB             >len_NFA         defl    $ - temp_NFA
 653+ 83EB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 653+ 83E8             >
 653+ 83E8 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 653+ 83E9 43 4C 53    >                db      "CLS"               // name string in 7-bit ascii, but
 653+ 83EC             >                org     $-1                 // alter last byte of Name just above to set
 653+ 83EB D3          >                db      {b $} | END_BIT     // msb as name end
 653+ 83EC             >
 653+ 83EC BA 83       >                dw      last_NFA            // Link to previous definition Name
 653+ 83EE             >CLS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 653+ 83EE E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 653+ 83F0             >                else
 653+ 83F0 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 653+ 83F0             >                endif           ; ok        // for other definitions it "points" the correct handler
 653+ 83F0             >                // Use of "; ok" to suppress "warning[fwdref]"
 653+ 83F0             >
 653+ 83F0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 654+ 83F0 43 64 0E 00                  dw      LIT, $0E, EMITC
 654+ 83F4 85 66
 655+ 83F6 BD 69                        dw      EXIT
 656+ 83F8
 657+ 83F8              //  ______________________________________________________________________
 658+ 83F8              //
 659+ 83F8              // splash       --
 660+ 83F8                              Colon_Def SPLASH, "SPLASH", is_normal
 660+ 83F8             >                New_Def  SPLASH, "SPLASH", Enter_Ptr, is_normal ; ok
 660+ 83F8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 660+ 83F8             >
 660+ 83F8             >                // dummy db directives used to calculate length of namec
 660+ 83F8 53 50 4C 41 >                db      "SPLASH"
 660+ 83FC 53 48       >
 660+ 83FE             >len_NFA         defl    $ - temp_NFA
 660+ 83FE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 660+ 83F8             >
 660+ 83F8 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 660+ 83F9 53 50 4C 41 >                db      "SPLASH"               // name string in 7-bit ascii, but
 660+ 83FD 53 48       >
 660+ 83FF             >                org     $-1                 // alter last byte of Name just above to set
 660+ 83FE C8          >                db      {b $} | END_BIT     // msb as name end
 660+ 83FF             >
 660+ 83FF E8 83       >                dw      last_NFA            // Link to previous definition Name
 660+ 8401             >SPLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 660+ 8401 E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 660+ 8403             >                else
 660+ 8403 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 660+ 8403             >                endif           ; ok        // for other definitions it "points" the correct handler
 660+ 8403             >                // Use of "; ok" to suppress "warning[fwdref]"
 660+ 8403             >
 660+ 8403             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 661+ 8403 EE 83                        dw      CLS
 662+ 8405 6B 74                        dw      C_DOT_QUOTE
 663+ 8407 45                           db      69
 664+ 8408 76 2D 46 6F                  db      "v-Forth 1.5 NextZXOS version", 13
 664+ 840C 72 74 68 20
 664+ 8410 31 2E 35 20
 664+ 8414 4E 65 78 74
 664+ 8418 5A 58 4F 53
 664+ 841C 20 76 65 72
 664+ 8420 73 69 6F 6E
 664+ 8424 0D
 665+ 8425 62 75 69 6C                  db      "build 20210529", 13
 665+ 8429 64 20 32 30
 665+ 842D 32 31 30 35
 665+ 8431 32 39 0D
 666+ 8434 31 39 39 30                  db      "1990-2021 Matteo Vitturi", 13
 666+ 8438 2D 32 30 32
 666+ 843C 31 20 4D 61
 666+ 8440 74 74 65 6F
 666+ 8444 20 56 69 74
 666+ 8448 74 75 72 69
 666+ 844C 0D
 667+ 844D BD 69                        dw      EXIT
 668+ 844F
 669+ 844F              //  ______________________________________________________________________
 670+ 844F              //
 671+ 844F              // video        --
 672+ 844F                              Colon_Def VIDEO, "VIDEO", is_normal
 672+ 844F             >                New_Def  VIDEO, "VIDEO", Enter_Ptr, is_normal ; ok
 672+ 844F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 672+ 844F             >
 672+ 844F             >                // dummy db directives used to calculate length of namec
 672+ 844F 56 49 44 45 >                db      "VIDEO"
 672+ 8453 4F          >
 672+ 8454             >len_NFA         defl    $ - temp_NFA
 672+ 8454             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 672+ 844F             >
 672+ 844F 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 672+ 8450 56 49 44 45 >                db      "VIDEO"               // name string in 7-bit ascii, but
 672+ 8454 4F          >
 672+ 8455             >                org     $-1                 // alter last byte of Name just above to set
 672+ 8454 CF          >                db      {b $} | END_BIT     // msb as name end
 672+ 8455             >
 672+ 8455 F8 83       >                dw      last_NFA            // Link to previous definition Name
 672+ 8457             >VIDEO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 672+ 8457 E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 672+ 8459             >                else
 672+ 8459 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 672+ 8459             >                endif           ; ok        // for other definitions it "points" the correct handler
 672+ 8459             >                // Use of "; ok" to suppress "warning[fwdref]"
 672+ 8459             >
 672+ 8459             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 673+ 8459 72 6D 32 6B                  dw      TWO, DUP, DEVICE, STORE
 673+ 845D F2 7A 03 6C
 674+ 8461 23 7B                        dw      SELECT
 675+ 8463 BD 69                        dw      EXIT
 676+ 8465
 677+ 8465              //  ______________________________________________________________________
 678+ 8465              //
 679+ 8465              // accept-      a n1 -- n2
 680+ 8465                              Colon_Def ACCEPT_N, "ACCEPT-", is_normal
 680+ 8465             >                New_Def  ACCEPT_N, "ACCEPT-", Enter_Ptr, is_normal ; ok
 680+ 8465             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 680+ 8465             >
 680+ 8465             >                // dummy db directives used to calculate length of namec
 680+ 8465 41 43 43 45 >                db      "ACCEPT-"
 680+ 8469 50 54 2D    >
 680+ 846C             >len_NFA         defl    $ - temp_NFA
 680+ 846C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 680+ 8465             >
 680+ 8465 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 680+ 8466 41 43 43 45 >                db      "ACCEPT-"               // name string in 7-bit ascii, but
 680+ 846A 50 54 2D    >
 680+ 846D             >                org     $-1                 // alter last byte of Name just above to set
 680+ 846C AD          >                db      {b $} | END_BIT     // msb as name end
 680+ 846D             >
 680+ 846D 4F 84       >                dw      last_NFA            // Link to previous definition Name
 680+ 846F             >ACCEPT_N:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 680+ 846F E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 680+ 8471             >                else
 680+ 8471 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 680+ 8471             >                endif           ; ok        // for other definitions it "points" the correct handler
 680+ 8471             >                // Use of "; ok" to suppress "warning[fwdref]"
 680+ 8471             >
 680+ 8471             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 681+ 8471 E6 69                        dw      TO_R
 682+ 8473 62 6D                        dw      ZERO
 683+ 8475 25 6B                        dw      SWAP
 684+ 8477 32 6B                        dw      DUP
 685+ 8479 FA 69                        dw      R_TO
 686+ 847B 4F 6A                        dw      PLUS
 687+ 847D 25 6B                        dw      SWAP
 688+ 847F 05 65                        dw      C_DO
 689+ 8481              AcceptN_Loop:
 690+ 8481 73 7B                        dw          MMU7_FETCH
 691+ 8483 FE 7A                        dw          INKEY
 692+ 8485 25 6B 85 7B                  dw          SWAP, MMU7_STORE
 693+ 8489 32 6B 14 6A                  dw          DUP, ZEQUAL
 694+ 848D 7D 64                        dw          ZBRANCH
 695+ 848F 06 00                        dw          AcceptN_Endif_1 - $
 696+ 8491 57 84 8A 78                  dw              VIDEO, QUIT
 697+ 8495              AcceptN_Endif_1:
 698+ 8495 32 6B 43 64                  dw          DUP, LIT, 13, EQUALS
 698+ 8499 0D 00 96 6F
 699+ 849D 7D 64                        dw          ZBRANCH
 700+ 849F 06 00                        dw          AcceptN_Endif_2 - $
 701+ 84A1 FD 6A 62 6D                  dw              DROP, ZERO
 702+ 84A5              AcceptN_Endif_2:
 703+ 84A5 32 6B 43 64                  dw          DUP, LIT, 10, EQUALS
 703+ 84A9 0A 00 96 6F
 704+ 84AD 7D 64                        dw          ZBRANCH
 705+ 84AF 06 00                        dw          AcceptN_Endif_3 - $
 706+ 84B1 FD 6A 62 6D                  dw              DROP, ZERO
 707+ 84B5              AcceptN_Endif_3:
 708+ 84B5 32 6B 14 6A                  dw          DUP, ZEQUAL
 709+ 84B9 7D 64                        dw          ZBRANCH
 710+ 84BB 04 00                        dw          AcceptN_Endif_4 - $
 711+ 84BD D3 69                        dw              LEAVE
 712+ 84BF              AcceptN_Endif_4:
 713+ 84BF 10 65 1F 6C                  dw          I, CSTORE, ONE_PLUS
 713+ 84C3 78 6A
 714+ 84C5 92 64                        dw      C_LOOP
 715+ 84C7 BA FF                        dw      AcceptN_Loop -$
 716+ 84C9 BD 69                        dw      EXIT
 717+ 84CB
 718+ 84CB              //  ______________________________________________________________________
 719+ 84CB              //
 720+ 84CB              // load-        n --
 721+ 84CB              // Provided that a stream n is OPEN# via the standart BASIC
 722+ 84CB              // it accepts text from stream #n to the normal INTERPRET
 723+ 84CB              // up to now, text-file must end with QUIT
 724+ 84CB                              Colon_Def LOAD_N, "LOAD-", is_normal
 724+ 84CB             >                New_Def  LOAD_N, "LOAD-", Enter_Ptr, is_normal ; ok
 724+ 84CB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 724+ 84CB             >
 724+ 84CB             >                // dummy db directives used to calculate length of namec
 724+ 84CB 4C 4F 41 44 >                db      "LOAD-"
 724+ 84CF 2D          >
 724+ 84D0             >len_NFA         defl    $ - temp_NFA
 724+ 84D0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 724+ 84CB             >
 724+ 84CB 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 724+ 84CC 4C 4F 41 44 >                db      "LOAD-"               // name string in 7-bit ascii, but
 724+ 84D0 2D          >
 724+ 84D1             >                org     $-1                 // alter last byte of Name just above to set
 724+ 84D0 AD          >                db      {b $} | END_BIT     // msb as name end
 724+ 84D1             >
 724+ 84D1 65 84       >                dw      last_NFA            // Link to previous definition Name
 724+ 84D3             >LOAD_N:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 724+ 84D3 E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 724+ 84D5             >                else
 724+ 84D5 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 724+ 84D5             >                endif           ; ok        // for other definitions it "points" the correct handler
 724+ 84D5             >                // Use of "; ok" to suppress "warning[fwdref]"
 724+ 84D5             >
 724+ 84D5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 725+ 84D5 18 6F 03 6C                  dw      SOURCE_ID, STORE
 726+ 84D9              Load_N_Begin:
 727+ 84D9 F5 6D F6 6B                  dw          TIB, FETCH
 728+ 84DD 32 6B 43 64                  dw          DUP, LIT, 80
 728+ 84E1 50 00
 729+ 84E3 9C 6B E4 73                  dw          TWO_DUP, BLANKS
 730+ 84E7 18 6F F6 6B                  dw          SOURCE_ID, FETCH
 731+ 84EB AA 79 32 6B                  dw          ABS_OP, DUP, DEVICE, STORE
 731+ 84EF F2 7A 03 6C
 732+ 84F3 23 7B                        dw          SELECT
 733+ 84F5 6F 84                        dw          ACCEPT_N
 734+ 84F7 57 84                        dw          VIDEO
 735+ 84F9 7C 6B                        dw          TWO_DROP
 736+ 84FB 62 6D 61 6E                  dw          ZERO, BLK, STORE
 736+ 84FF 03 6C
 737+ 8501 62 6D 6A 6E                  dw          ZERO, TO_IN, STORE
 737+ 8505 03 6C
 738+ 8507 BC 77                        dw          INTERPRET
 739+ 8509 A6 67                        dw          QTERMINAL
 740+ 850B 7D 64                        dw      ZBRANCH
 741+ 850D CC FF                        dw      Load_N_Begin - $
 742+ 850F BD 69                        dw      EXIT
 743+ 8511
 744+ 8511              //  ______________________________________________________________________
 745+ 8511              //
 746+ 8511              // load         n --
 747+ 8511              // if n is positive, it loads screen #n (as usual)
 748+ 8511              // if n is negative, it connects stream #n to the normal INTERPRET
 749+ 8511              // this second way is useful if you want to load any kind of file
 750+ 8511              // provied that it is OPEN# the usual BASIC way.
 751+ 8511                              Colon_Def LOAD, "LOAD", is_normal
 751+ 8511             >                New_Def  LOAD, "LOAD", Enter_Ptr, is_normal ; ok
 751+ 8511             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 751+ 8511             >
 751+ 8511             >                // dummy db directives used to calculate length of namec
 751+ 8511 4C 4F 41 44 >                db      "LOAD"
 751+ 8515             >len_NFA         defl    $ - temp_NFA
 751+ 8515             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 751+ 8511             >
 751+ 8511 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 751+ 8512 4C 4F 41 44 >                db      "LOAD"               // name string in 7-bit ascii, but
 751+ 8516             >                org     $-1                 // alter last byte of Name just above to set
 751+ 8515 C4          >                db      {b $} | END_BIT     // msb as name end
 751+ 8516             >
 751+ 8516 CB 84       >                dw      last_NFA            // Link to previous definition Name
 751+ 8518             >LOAD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 751+ 8518 E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 751+ 851A             >                else
 751+ 851A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 751+ 851A             >                endif           ; ok        // for other definitions it "points" the correct handler
 751+ 851A             >                // Use of "; ok" to suppress "warning[fwdref]"
 751+ 851A             >
 751+ 851A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 752+ 851A 32 6B 27 6A                  dw      DUP, ZLESS
 753+ 851E 7D 64                        dw      ZBRANCH
 754+ 8520 08 00                        dw      Load_Else - $
 755+ 8522 D3 84                        dw          LOAD_N
 756+ 8524 66 64                        dw      BRANCH
 757+ 8526 04 00                        dw      Load_Endif - $
 758+ 8528              Load_Else:
 759+ 8528 1D 81                        dw          LOAD_P
 760+ 852A              Load_Endif:
 761+ 852A BD 69                        dw      EXIT
 762+ 852C
 763+ 852C
 764+ 852C              //  ______________________________________________________________________
 765+ 852C              //
 766+ 852C              // autoexec     --
 767+ 852C              // this word is called the first time the Forth system boot to
 768+ 852C              // load Screen# 1. Once called it patches itself to prevent furhter runs.
 769+ 852C                              Colon_Def AUTOEXEC, "AUTOEXEC", is_normal
 769+ 852C             >                New_Def  AUTOEXEC, "AUTOEXEC", Enter_Ptr, is_normal ; ok
 769+ 852C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 769+ 852C             >
 769+ 852C             >                // dummy db directives used to calculate length of namec
 769+ 852C 41 55 54 4F >                db      "AUTOEXEC"
 769+ 8530 45 58 45 43 >
 769+ 8534             >len_NFA         defl    $ - temp_NFA
 769+ 8534             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 769+ 852C             >
 769+ 852C 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 769+ 852D 41 55 54 4F >                db      "AUTOEXEC"               // name string in 7-bit ascii, but
 769+ 8531 45 58 45 43 >
 769+ 8535             >                org     $-1                 // alter last byte of Name just above to set
 769+ 8534 C3          >                db      {b $} | END_BIT     // msb as name end
 769+ 8535             >
 769+ 8535 11 85       >                dw      last_NFA            // Link to previous definition Name
 769+ 8537             >AUTOEXEC:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 769+ 8537 E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 769+ 8539             >                else
 769+ 8539 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 769+ 8539             >                endif           ; ok        // for other definitions it "points" the correct handler
 769+ 8539             >                // Use of "; ok" to suppress "warning[fwdref]"
 769+ 8539             >
 769+ 8539             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 770+ 8539 43 64 0B 00                  dw      LIT, 11
 771+ 853D 43 64 0F 6D                  dw      LIT, NOOP
 772+ 8541 43 64 D9 78                  dw      LIT, Autoexec_Ptr
 773+ 8545 03 6C                        dw      STORE
 774+ 8547 18 85                        dw      LOAD
 775+ 8549 8A 78                        dw      QUIT
 776+ 854B BD 69                        dw      EXIT
 777+ 854D
 778+ 854D
 779+ 854D              //  ______________________________________________________________________
 780+ 854D              //
 781+ 854D              // bye     --
 782+ 854D              //
 783+ 854D                              Colon_Def BYE, "BYE", is_normal
 783+ 854D             >                New_Def  BYE, "BYE", Enter_Ptr, is_normal ; ok
 783+ 854D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 783+ 854D             >
 783+ 854D             >                // dummy db directives used to calculate length of namec
 783+ 854D 42 59 45    >                db      "BYE"
 783+ 8550             >len_NFA         defl    $ - temp_NFA
 783+ 8550             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 783+ 854D             >
 783+ 854D 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 783+ 854E 42 59 45    >                db      "BYE"               // name string in 7-bit ascii, but
 783+ 8551             >                org     $-1                 // alter last byte of Name just above to set
 783+ 8550 C5          >                db      {b $} | END_BIT     // msb as name end
 783+ 8551             >
 783+ 8551 2C 85       >                dw      last_NFA            // Link to previous definition Name
 783+ 8553             >BYE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 783+ 8553 E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 783+ 8555             >                else
 783+ 8555 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 783+ 8555             >                endif           ; ok        // for other definitions it "points" the correct handler
 783+ 8555             >                // Use of "; ok" to suppress "warning[fwdref]"
 783+ 8555             >
 783+ 8555             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 784+ 8555 FF 7D                        dw      FLUSH
 785+ 8557 30 7D                        dw      EMPTY_BUFFERS
 786+ 8559 D4 7B F6 6B                  dw      BLK_FH, FETCH, F_CLOSE, DROP
 786+ 855D 49 68 FD 6A
 787+ 8561 62 6D C8 6D                  dw      ZERO, PLUS_ORIGIN
 788+ 8565 6F 79                        dw      BASIC
 789+ 8567
 790+ 8567              //  ______________________________________________________________________
 791+ 8567              //
 792+ 8567              // invv     --
 793+ 8567              //
 794+ 8567                              Colon_Def INVV, "INVV", is_normal
 794+ 8567             >                New_Def  INVV, "INVV", Enter_Ptr, is_normal ; ok
 794+ 8567             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 794+ 8567             >
 794+ 8567             >                // dummy db directives used to calculate length of namec
 794+ 8567 49 4E 56 56 >                db      "INVV"
 794+ 856B             >len_NFA         defl    $ - temp_NFA
 794+ 856B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 794+ 8567             >
 794+ 8567 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 794+ 8568 49 4E 56 56 >                db      "INVV"               // name string in 7-bit ascii, but
 794+ 856C             >                org     $-1                 // alter last byte of Name just above to set
 794+ 856B D6          >                db      {b $} | END_BIT     // msb as name end
 794+ 856C             >
 794+ 856C 4D 85       >                dw      last_NFA            // Link to previous definition Name
 794+ 856E             >INVV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 794+ 856E E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 794+ 8570             >                else
 794+ 8570 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 794+ 8570             >                endif           ; ok        // for other definitions it "points" the correct handler
 794+ 8570             >                // Use of "; ok" to suppress "warning[fwdref]"
 794+ 8570             >
 794+ 8570             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 795+ 8570 43 64 14 00                  dw      LIT, 20, EMITC, ONE, EMITC
 795+ 8574 85 66 6A 6D
 795+ 8578 85 66
 796+ 857A BD 69                        dw      EXIT
 797+ 857C
 798+ 857C              //  ______________________________________________________________________
 799+ 857C              //
 800+ 857C              // truv     --
 801+ 857C              //
 802+ 857C                              Colon_Def TRUV, "TRUV", is_normal
 802+ 857C             >                New_Def  TRUV, "TRUV", Enter_Ptr, is_normal ; ok
 802+ 857C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 802+ 857C             >
 802+ 857C             >                // dummy db directives used to calculate length of namec
 802+ 857C 54 52 55 56 >                db      "TRUV"
 802+ 8580             >len_NFA         defl    $ - temp_NFA
 802+ 8580             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 802+ 857C             >
 802+ 857C 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 802+ 857D 54 52 55 56 >                db      "TRUV"               // name string in 7-bit ascii, but
 802+ 8581             >                org     $-1                 // alter last byte of Name just above to set
 802+ 8580 D6          >                db      {b $} | END_BIT     // msb as name end
 802+ 8581             >
 802+ 8581 67 85       >                dw      last_NFA            // Link to previous definition Name
 802+ 8583             >TRUV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 802+ 8583 E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 802+ 8585             >                else
 802+ 8585 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 802+ 8585             >                endif           ; ok        // for other definitions it "points" the correct handler
 802+ 8585             >                // Use of "; ok" to suppress "warning[fwdref]"
 802+ 8585             >
 802+ 8585             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 803+ 8585 43 64 14 00                  dw      LIT, 20, EMITC, ZERO, EMITC
 803+ 8589 85 66 62 6D
 803+ 858D 85 66
 804+ 858F BD 69                        dw      EXIT
 805+ 8591
 806+ 8591              //  ______________________________________________________________________
 807+ 8591              //
 808+ 8591              // mark     --
 809+ 8591              //
 810+ 8591              //              Colon_Def MARK, "MARK", is_normal
 811+ 8591              //              dw      INVV, TYPE, TRUV
 812+ 8591              //              dw      EXIT
 813+ 8591
 814+ 8591              //  ______________________________________________________________________
 815+ 8591              //
 816+ 8591              // back     --
 817+ 8591              //
 818+ 8591                              Colon_Def BACK, "BACK", is_normal
 818+ 8591             >                New_Def  BACK, "BACK", Enter_Ptr, is_normal ; ok
 818+ 8591             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 818+ 8591             >
 818+ 8591             >                // dummy db directives used to calculate length of namec
 818+ 8591 42 41 43 4B >                db      "BACK"
 818+ 8595             >len_NFA         defl    $ - temp_NFA
 818+ 8595             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 818+ 8591             >
 818+ 8591 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 818+ 8592 42 41 43 4B >                db      "BACK"               // name string in 7-bit ascii, but
 818+ 8596             >                org     $-1                 // alter last byte of Name just above to set
 818+ 8595 CB          >                db      {b $} | END_BIT     // msb as name end
 818+ 8596             >
 818+ 8596 7C 85       >                dw      last_NFA            // Link to previous definition Name
 818+ 8598             >BACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 818+ 8598 E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 818+ 859A             >                else
 818+ 859A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 818+ 859A             >                endif           ; ok        // for other definitions it "points" the correct handler
 818+ 859A             >                // Use of "; ok" to suppress "warning[fwdref]"
 818+ 859A             >
 818+ 859A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 819+ 859A 34 6F 88 6F                  dw      HERE, SUBTRACT, COMMA
 819+ 859E 50 6F
 820+ 85A0 BD 69                        dw      EXIT
 821+ 85A2
 822+ 85A2              //  ______________________________________________________________________
 823+ 85A2              //
 824+ 85A2              // if          ( -- a 2 ) \ compile-time
 825+ 85A2              // IF ... THEN
 826+ 85A2              // IF ... ELSE ... ENDIF
 827+ 85A2                              Colon_Def IF, "IF", is_immediate
 827+ 85A2             >                New_Def  IF, "IF", Enter_Ptr, is_immediate ; ok
 827+ 85A2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 827+ 85A2             >
 827+ 85A2             >                // dummy db directives used to calculate length of namec
 827+ 85A2 49 46       >                db      "IF"
 827+ 85A4             >len_NFA         defl    $ - temp_NFA
 827+ 85A4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 827+ 85A2             >
 827+ 85A2 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 827+ 85A3 49 46       >                db      "IF"               // name string in 7-bit ascii, but
 827+ 85A5             >                org     $-1                 // alter last byte of Name just above to set
 827+ 85A4 C6          >                db      {b $} | END_BIT     // msb as name end
 827+ 85A5             >
 827+ 85A5 91 85       >                dw      last_NFA            // Link to previous definition Name
 827+ 85A7             >IF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 827+ 85A7 E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 827+ 85A9             >                else
 827+ 85A9 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 827+ 85A9             >                endif           ; ok        // for other definitions it "points" the correct handler
 827+ 85A9             >                // Use of "; ok" to suppress "warning[fwdref]"
 827+ 85A9             >
 827+ 85A9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 828+ 85A9 92 71 7D 64                  dw      COMPILE, ZBRANCH
 829+ 85AD 34 6F 62 6D                  dw      HERE, ZERO, COMMA
 829+ 85B1 50 6F
 830+ 85B3 72 6D                        dw      TWO
 831+ 85B5 BD 69                        dw      EXIT
 832+ 85B7
 833+ 85B7              //  ______________________________________________________________________
 834+ 85B7              //
 835+ 85B7              // endif        ( a 2 -- ) \ compile-time
 836+ 85B7              //
 837+ 85B7                              Colon_Def ENDIF, "ENDIF", is_immediate
 837+ 85B7             >                New_Def  ENDIF, "ENDIF", Enter_Ptr, is_immediate ; ok
 837+ 85B7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 837+ 85B7             >
 837+ 85B7             >                // dummy db directives used to calculate length of namec
 837+ 85B7 45 4E 44 49 >                db      "ENDIF"
 837+ 85BB 46          >
 837+ 85BC             >len_NFA         defl    $ - temp_NFA
 837+ 85BC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 837+ 85B7             >
 837+ 85B7 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 837+ 85B8 45 4E 44 49 >                db      "ENDIF"               // name string in 7-bit ascii, but
 837+ 85BC 46          >
 837+ 85BD             >                org     $-1                 // alter last byte of Name just above to set
 837+ 85BC C6          >                db      {b $} | END_BIT     // msb as name end
 837+ 85BD             >
 837+ 85BD A2 85       >                dw      last_NFA            // Link to previous definition Name
 837+ 85BF             >ENDIF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 837+ 85BF E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 837+ 85C1             >                else
 837+ 85C1 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 837+ 85C1             >                endif           ; ok        // for other definitions it "points" the correct handler
 837+ 85C1             >                // Use of "; ok" to suppress "warning[fwdref]"
 837+ 85C1             >
 837+ 85C1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 838+ 85C1 19 71                        dw      QCOMP
 839+ 85C3 72 6D 48 71                  dw      TWO, QPAIRS
 840+ 85C7 34 6F ED 6A                  dw      HERE, OVER, SUBTRACT, SWAP, STORE
 840+ 85CB 88 6F 25 6B
 840+ 85CF 03 6C
 841+ 85D1 BD 69                        dw      EXIT
 842+ 85D3
 843+ 85D3              //  ______________________________________________________________________
 844+ 85D3              //
 845+ 85D3              // then        ( a 2 -- ) \ compile-time
 846+ 85D3              //
 847+ 85D3                              Colon_Def THEN, "THEN", is_immediate
 847+ 85D3             >                New_Def  THEN, "THEN", Enter_Ptr, is_immediate ; ok
 847+ 85D3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 847+ 85D3             >
 847+ 85D3             >                // dummy db directives used to calculate length of namec
 847+ 85D3 54 48 45 4E >                db      "THEN"
 847+ 85D7             >len_NFA         defl    $ - temp_NFA
 847+ 85D7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 847+ 85D3             >
 847+ 85D3 C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 847+ 85D4 54 48 45 4E >                db      "THEN"               // name string in 7-bit ascii, but
 847+ 85D8             >                org     $-1                 // alter last byte of Name just above to set
 847+ 85D7 CE          >                db      {b $} | END_BIT     // msb as name end
 847+ 85D8             >
 847+ 85D8 B7 85       >                dw      last_NFA            // Link to previous definition Name
 847+ 85DA             >THEN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 847+ 85DA E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 847+ 85DC             >                else
 847+ 85DC ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 847+ 85DC             >                endif           ; ok        // for other definitions it "points" the correct handler
 847+ 85DC             >                // Use of "; ok" to suppress "warning[fwdref]"
 847+ 85DC             >
 847+ 85DC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 848+ 85DC BF 85                        dw      ENDIF
 849+ 85DE BD 69                        dw      EXIT
 850+ 85E0
 851+ 85E0              //  ______________________________________________________________________
 852+ 85E0              //
 853+ 85E0              // else        ( a1 2 -- a2 2 ) \ compile-time
 854+ 85E0              //
 855+ 85E0                              Colon_Def ELSE, "ELSE", is_immediate
 855+ 85E0             >                New_Def  ELSE, "ELSE", Enter_Ptr, is_immediate ; ok
 855+ 85E0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 855+ 85E0             >
 855+ 85E0             >                // dummy db directives used to calculate length of namec
 855+ 85E0 45 4C 53 45 >                db      "ELSE"
 855+ 85E4             >len_NFA         defl    $ - temp_NFA
 855+ 85E4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 855+ 85E0             >
 855+ 85E0 C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 855+ 85E1 45 4C 53 45 >                db      "ELSE"               // name string in 7-bit ascii, but
 855+ 85E5             >                org     $-1                 // alter last byte of Name just above to set
 855+ 85E4 C5          >                db      {b $} | END_BIT     // msb as name end
 855+ 85E5             >
 855+ 85E5 D3 85       >                dw      last_NFA            // Link to previous definition Name
 855+ 85E7             >ELSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 855+ 85E7 E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 855+ 85E9             >                else
 855+ 85E9 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 855+ 85E9             >                endif           ; ok        // for other definitions it "points" the correct handler
 855+ 85E9             >                // Use of "; ok" to suppress "warning[fwdref]"
 855+ 85E9             >
 855+ 85E9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 856+ 85E9 19 71                        dw      QCOMP
 857+ 85EB 72 6D 48 71                  dw      TWO, QPAIRS
 858+ 85EF 92 71 66 64                  dw      COMPILE, BRANCH
 859+ 85F3 34 6F 62 6D                  dw      HERE, ZERO, COMMA
 859+ 85F7 50 6F
 860+ 85F9 25 6B 72 6D                  dw      SWAP, TWO, ENDIF
 860+ 85FD BF 85
 861+ 85FF 72 6D                        dw      TWO
 862+ 8601 BD 69                        dw      EXIT
 863+ 8603
 864+ 8603              //  ______________________________________________________________________
 865+ 8603              //
 866+ 8603              // begin        ( -- a 1 ) \ compile-time
 867+ 8603              // BEGIN ... AGAIN
 868+ 8603              // BEGIN ... f UNTIL
 869+ 8603              // BEGIN ... f WHILE ... REPEAT
 870+ 8603                              Colon_Def BEGIN, "BEGIN", is_immediate
 870+ 8603             >                New_Def  BEGIN, "BEGIN", Enter_Ptr, is_immediate ; ok
 870+ 8603             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 870+ 8603             >
 870+ 8603             >                // dummy db directives used to calculate length of namec
 870+ 8603 42 45 47 49 >                db      "BEGIN"
 870+ 8607 4E          >
 870+ 8608             >len_NFA         defl    $ - temp_NFA
 870+ 8608             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 870+ 8603             >
 870+ 8603 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 870+ 8604 42 45 47 49 >                db      "BEGIN"               // name string in 7-bit ascii, but
 870+ 8608 4E          >
 870+ 8609             >                org     $-1                 // alter last byte of Name just above to set
 870+ 8608 CE          >                db      {b $} | END_BIT     // msb as name end
 870+ 8609             >
 870+ 8609 E0 85       >                dw      last_NFA            // Link to previous definition Name
 870+ 860B             >BEGIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 870+ 860B E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 870+ 860D             >                else
 870+ 860D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 870+ 860D             >                endif           ; ok        // for other definitions it "points" the correct handler
 870+ 860D             >                // Use of "; ok" to suppress "warning[fwdref]"
 870+ 860D             >
 870+ 860D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 871+ 860D 19 71                        dw      QCOMP
 872+ 860F 34 6F                        dw      HERE
 873+ 8611 6A 6D                        dw      ONE
 874+ 8613 BD 69                        dw      EXIT
 875+ 8615
 876+ 8615              //  ______________________________________________________________________
 877+ 8615              //
 878+ 8615              // again        ( a 1 -- ) \ compile-time
 879+ 8615                              Colon_Def AGAIN, "AGAIN", is_immediate
 879+ 8615             >                New_Def  AGAIN, "AGAIN", Enter_Ptr, is_immediate ; ok
 879+ 8615             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 879+ 8615             >
 879+ 8615             >                // dummy db directives used to calculate length of namec
 879+ 8615 41 47 41 49 >                db      "AGAIN"
 879+ 8619 4E          >
 879+ 861A             >len_NFA         defl    $ - temp_NFA
 879+ 861A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 879+ 8615             >
 879+ 8615 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 879+ 8616 41 47 41 49 >                db      "AGAIN"               // name string in 7-bit ascii, but
 879+ 861A 4E          >
 879+ 861B             >                org     $-1                 // alter last byte of Name just above to set
 879+ 861A CE          >                db      {b $} | END_BIT     // msb as name end
 879+ 861B             >
 879+ 861B 03 86       >                dw      last_NFA            // Link to previous definition Name
 879+ 861D             >AGAIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 879+ 861D E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 879+ 861F             >                else
 879+ 861F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 879+ 861F             >                endif           ; ok        // for other definitions it "points" the correct handler
 879+ 861F             >                // Use of "; ok" to suppress "warning[fwdref]"
 879+ 861F             >
 879+ 861F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 880+ 861F 19 71                        dw      QCOMP
 881+ 8621 6A 6D 48 71                  dw      ONE, QPAIRS
 882+ 8625 92 71 66 64                  dw      COMPILE, BRANCH
 883+ 8629 98 85                        dw      BACK
 884+ 862B BD 69                        dw      EXIT
 885+ 862D
 886+ 862D              //  ______________________________________________________________________
 887+ 862D              //
 888+ 862D              // until        ( a 1 -- ) \ compile-time
 889+ 862D                              Colon_Def UNTIL, "UNTIL", is_immediate
 889+ 862D             >                New_Def  UNTIL, "UNTIL", Enter_Ptr, is_immediate ; ok
 889+ 862D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 889+ 862D             >
 889+ 862D             >                // dummy db directives used to calculate length of namec
 889+ 862D 55 4E 54 49 >                db      "UNTIL"
 889+ 8631 4C          >
 889+ 8632             >len_NFA         defl    $ - temp_NFA
 889+ 8632             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 889+ 862D             >
 889+ 862D C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 889+ 862E 55 4E 54 49 >                db      "UNTIL"               // name string in 7-bit ascii, but
 889+ 8632 4C          >
 889+ 8633             >                org     $-1                 // alter last byte of Name just above to set
 889+ 8632 CC          >                db      {b $} | END_BIT     // msb as name end
 889+ 8633             >
 889+ 8633 15 86       >                dw      last_NFA            // Link to previous definition Name
 889+ 8635             >UNTIL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 889+ 8635 E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 889+ 8637             >                else
 889+ 8637 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 889+ 8637             >                endif           ; ok        // for other definitions it "points" the correct handler
 889+ 8637             >                // Use of "; ok" to suppress "warning[fwdref]"
 889+ 8637             >
 889+ 8637             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 890+ 8637 19 71                        dw      QCOMP
 891+ 8639 6A 6D 48 71                  dw      ONE, QPAIRS
 892+ 863D 92 71 7D 64                  dw      COMPILE, ZBRANCH
 893+ 8641 98 85                        dw      BACK
 894+ 8643 BD 69                        dw      EXIT
 895+ 8645
 896+ 8645              //  ______________________________________________________________________
 897+ 8645              //
 898+ 8645              // end          ( a 1 -- ) \ compile-time
 899+ 8645                              Colon_Def END, "END", is_immediate
 899+ 8645             >                New_Def  END, "END", Enter_Ptr, is_immediate ; ok
 899+ 8645             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 899+ 8645             >
 899+ 8645             >                // dummy db directives used to calculate length of namec
 899+ 8645 45 4E 44    >                db      "END"
 899+ 8648             >len_NFA         defl    $ - temp_NFA
 899+ 8648             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 899+ 8645             >
 899+ 8645 C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 899+ 8646 45 4E 44    >                db      "END"               // name string in 7-bit ascii, but
 899+ 8649             >                org     $-1                 // alter last byte of Name just above to set
 899+ 8648 C4          >                db      {b $} | END_BIT     // msb as name end
 899+ 8649             >
 899+ 8649 2D 86       >                dw      last_NFA            // Link to previous definition Name
 899+ 864B             >END:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 899+ 864B E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 899+ 864D             >                else
 899+ 864D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 899+ 864D             >                endif           ; ok        // for other definitions it "points" the correct handler
 899+ 864D             >                // Use of "; ok" to suppress "warning[fwdref]"
 899+ 864D             >
 899+ 864D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 900+ 864D 35 86                        dw      UNTIL
 901+ 864F BD 69                        dw      EXIT
 902+ 8651
 903+ 8651              //  ______________________________________________________________________
 904+ 8651              //
 905+ 8651              // while        ( a1 1 -- a1 1 a2 4 ) \ compile-time
 906+ 8651                              Colon_Def WHILE, "WHILE", is_immediate
 906+ 8651             >                New_Def  WHILE, "WHILE", Enter_Ptr, is_immediate ; ok
 906+ 8651             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 906+ 8651             >
 906+ 8651             >                // dummy db directives used to calculate length of namec
 906+ 8651 57 48 49 4C >                db      "WHILE"
 906+ 8655 45          >
 906+ 8656             >len_NFA         defl    $ - temp_NFA
 906+ 8656             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 906+ 8651             >
 906+ 8651 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 906+ 8652 57 48 49 4C >                db      "WHILE"               // name string in 7-bit ascii, but
 906+ 8656 45          >
 906+ 8657             >                org     $-1                 // alter last byte of Name just above to set
 906+ 8656 C5          >                db      {b $} | END_BIT     // msb as name end
 906+ 8657             >
 906+ 8657 45 86       >                dw      last_NFA            // Link to previous definition Name
 906+ 8659             >WHILE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 906+ 8659 E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 906+ 865B             >                else
 906+ 865B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 906+ 865B             >                endif           ; ok        // for other definitions it "points" the correct handler
 906+ 865B             >                // Use of "; ok" to suppress "warning[fwdref]"
 906+ 865B             >
 906+ 865B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 907+ 865B A7 85                        dw      IF
 908+ 865D 90 6A                        dw      TWO_PLUS // ( that is 4 )
 909+ 865F BD 69                        dw      EXIT
 910+ 8661
 911+ 8661              //  ______________________________________________________________________
 912+ 8661              //
 913+ 8661              // repeat       ( a1 1 a2 4 -- ) \ compile-time
 914+ 8661                              Colon_Def REPEAT, "REPEAT", is_immediate
 914+ 8661             >                New_Def  REPEAT, "REPEAT", Enter_Ptr, is_immediate ; ok
 914+ 8661             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 914+ 8661             >
 914+ 8661             >                // dummy db directives used to calculate length of namec
 914+ 8661 52 45 50 45 >                db      "REPEAT"
 914+ 8665 41 54       >
 914+ 8667             >len_NFA         defl    $ - temp_NFA
 914+ 8667             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 914+ 8661             >
 914+ 8661 C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 914+ 8662 52 45 50 45 >                db      "REPEAT"               // name string in 7-bit ascii, but
 914+ 8666 41 54       >
 914+ 8668             >                org     $-1                 // alter last byte of Name just above to set
 914+ 8667 D4          >                db      {b $} | END_BIT     // msb as name end
 914+ 8668             >
 914+ 8668 51 86       >                dw      last_NFA            // Link to previous definition Name
 914+ 866A             >REPEAT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 914+ 866A E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 914+ 866C             >                else
 914+ 866C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 914+ 866C             >                endif           ; ok        // for other definitions it "points" the correct handler
 914+ 866C             >                // Use of "; ok" to suppress "warning[fwdref]"
 914+ 866C             >
 914+ 866C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 915+ 866C 8A 6B                        dw      TWO_SWAP
 916+ 866E 1D 86                        dw      AGAIN
 917+ 8670 72 6D 88 6F                  dw      TWO, SUBTRACT
 918+ 8674 BF 85                        dw      ENDIF
 919+ 8676 BD 69                        dw      EXIT
 920+ 8678
 921+ 8678              //  ______________________________________________________________________
 922+ 8678              //
 923+ 8678              // ?do-
 924+ 8678              // special version of "BACK" used by ?DO and LOOP
 925+ 8678                              Colon_Def C_DO_BACK, "?DO-", is_normal
 925+ 8678             >                New_Def  C_DO_BACK, "?DO-", Enter_Ptr, is_normal ; ok
 925+ 8678             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 925+ 8678             >
 925+ 8678             >                // dummy db directives used to calculate length of namec
 925+ 8678 3F 44 4F 2D >                db      "?DO-"
 925+ 867C             >len_NFA         defl    $ - temp_NFA
 925+ 867C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 925+ 8678             >
 925+ 8678 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 925+ 8679 3F 44 4F 2D >                db      "?DO-"               // name string in 7-bit ascii, but
 925+ 867D             >                org     $-1                 // alter last byte of Name just above to set
 925+ 867C AD          >                db      {b $} | END_BIT     // msb as name end
 925+ 867D             >
 925+ 867D 61 86       >                dw      last_NFA            // Link to previous definition Name
 925+ 867F             >C_DO_BACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 925+ 867F E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 925+ 8681             >                else
 925+ 8681 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 925+ 8681             >                endif           ; ok        // for other definitions it "points" the correct handler
 925+ 8681             >                // Use of "; ok" to suppress "warning[fwdref]"
 925+ 8681             >
 925+ 8681             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 926+ 8681 98 85                        dw      BACK
 927+ 8683 87 69 D2 6E                  dw      SPFETCH, CSP, FETCH, SUBTRACT
 927+ 8687 F6 6B 88 6F
 928+ 868B 7D 64                        dw      ZBRANCH
 929+ 868D 06 00                        dw      CDoBack_Endif - $
 930+ 868F 90 6A BF 85                  dw          TWO_PLUS, ENDIF
 931+ 8693              CDoBack_Endif:
 932+ 8693 5B 71 D2 6E                  dw      QCSP, CSP, STORE
 932+ 8697 03 6C
 933+ 8699 BD 69                        dw      EXIT
 934+ 869B
 935+ 869B              //  ______________________________________________________________________
 936+ 869B              //
 937+ 869B              // do
 938+ 869B              // DO  ... LOOP
 939+ 869B              // DO  ... n +LOOP
 940+ 869B              // ?DO ... LOOP
 941+ 869B              // ?DO ... n +LOOP
 942+ 869B                              Colon_Def DO, "DO", is_immediate
 942+ 869B             >                New_Def  DO, "DO", Enter_Ptr, is_immediate ; ok
 942+ 869B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 942+ 869B             >
 942+ 869B             >                // dummy db directives used to calculate length of namec
 942+ 869B 44 4F       >                db      "DO"
 942+ 869D             >len_NFA         defl    $ - temp_NFA
 942+ 869D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 942+ 869B             >
 942+ 869B C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 942+ 869C 44 4F       >                db      "DO"               // name string in 7-bit ascii, but
 942+ 869E             >                org     $-1                 // alter last byte of Name just above to set
 942+ 869D CF          >                db      {b $} | END_BIT     // msb as name end
 942+ 869E             >
 942+ 869E 78 86       >                dw      last_NFA            // Link to previous definition Name
 942+ 86A0             >DO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 942+ 86A0 E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 942+ 86A2             >                else
 942+ 86A2 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 942+ 86A2             >                endif           ; ok        // for other definitions it "points" the correct handler
 942+ 86A2             >                // Use of "; ok" to suppress "warning[fwdref]"
 942+ 86A2             >
 942+ 86A2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 943+ 86A2 92 71 05 65                  dw      COMPILE, C_DO
 944+ 86A6 D2 6E F6 6B                  dw      CSP, FETCH, STORE_CSP
 944+ 86AA EC 70
 945+ 86AC 34 6F 7A 6D                  dw      HERE, THREE
 946+ 86B0 BD 69                        dw      EXIT
 947+ 86B2
 948+ 86B2              //  ______________________________________________________________________
 949+ 86B2              //
 950+ 86B2              // loop
 951+ 86B2                              Colon_Def LOOP, "LOOP", is_immediate
 951+ 86B2             >                New_Def  LOOP, "LOOP", Enter_Ptr, is_immediate ; ok
 951+ 86B2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 951+ 86B2             >
 951+ 86B2             >                // dummy db directives used to calculate length of namec
 951+ 86B2 4C 4F 4F 50 >                db      "LOOP"
 951+ 86B6             >len_NFA         defl    $ - temp_NFA
 951+ 86B6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 951+ 86B2             >
 951+ 86B2 C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 951+ 86B3 4C 4F 4F 50 >                db      "LOOP"               // name string in 7-bit ascii, but
 951+ 86B7             >                org     $-1                 // alter last byte of Name just above to set
 951+ 86B6 D0          >                db      {b $} | END_BIT     // msb as name end
 951+ 86B7             >
 951+ 86B7 9B 86       >                dw      last_NFA            // Link to previous definition Name
 951+ 86B9             >LOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 951+ 86B9 E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 951+ 86BB             >                else
 951+ 86BB ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 951+ 86BB             >                endif           ; ok        // for other definitions it "points" the correct handler
 951+ 86BB             >                // Use of "; ok" to suppress "warning[fwdref]"
 951+ 86BB             >
 951+ 86BB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 952+ 86BB 7A 6D 48 71                  dw      THREE, QPAIRS
 953+ 86BF 92 71 92 64                  dw      COMPILE, C_LOOP
 954+ 86C3 7F 86                        dw      C_DO_BACK
 955+ 86C5 BD 69                        dw      EXIT
 956+ 86C7
 957+ 86C7              //  ______________________________________________________________________
 958+ 86C7              //
 959+ 86C7              // +loop
 960+ 86C7                              Colon_Def PLOOP, "+LOOP", is_immediate
 960+ 86C7             >                New_Def  PLOOP, "+LOOP", Enter_Ptr, is_immediate ; ok
 960+ 86C7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 960+ 86C7             >
 960+ 86C7             >                // dummy db directives used to calculate length of namec
 960+ 86C7 2B 4C 4F 4F >                db      "+LOOP"
 960+ 86CB 50          >
 960+ 86CC             >len_NFA         defl    $ - temp_NFA
 960+ 86CC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 960+ 86C7             >
 960+ 86C7 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 960+ 86C8 2B 4C 4F 4F >                db      "+LOOP"               // name string in 7-bit ascii, but
 960+ 86CC 50          >
 960+ 86CD             >                org     $-1                 // alter last byte of Name just above to set
 960+ 86CC D0          >                db      {b $} | END_BIT     // msb as name end
 960+ 86CD             >
 960+ 86CD B2 86       >                dw      last_NFA            // Link to previous definition Name
 960+ 86CF             >PLOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 960+ 86CF E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 960+ 86D1             >                else
 960+ 86D1 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 960+ 86D1             >                endif           ; ok        // for other definitions it "points" the correct handler
 960+ 86D1             >                // Use of "; ok" to suppress "warning[fwdref]"
 960+ 86D1             >
 960+ 86D1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 961+ 86D1 7A 6D 48 71                  dw      THREE, QPAIRS
 962+ 86D5 92 71 C9 64                  dw      COMPILE, C_PLOOP
 963+ 86D9 7F 86                        dw      C_DO_BACK
 964+ 86DB BD 69                        dw      EXIT
 965+ 86DD
 966+ 86DD              //  ______________________________________________________________________
 967+ 86DD              //
 968+ 86DD              // ?do
 969+ 86DD                              Colon_Def QDO, "?DO", is_immediate
 969+ 86DD             >                New_Def  QDO, "?DO", Enter_Ptr, is_immediate ; ok
 969+ 86DD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 969+ 86DD             >
 969+ 86DD             >                // dummy db directives used to calculate length of namec
 969+ 86DD 3F 44 4F    >                db      "?DO"
 969+ 86E0             >len_NFA         defl    $ - temp_NFA
 969+ 86E0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 969+ 86DD             >
 969+ 86DD C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 969+ 86DE 3F 44 4F    >                db      "?DO"               // name string in 7-bit ascii, but
 969+ 86E1             >                org     $-1                 // alter last byte of Name just above to set
 969+ 86E0 CF          >                db      {b $} | END_BIT     // msb as name end
 969+ 86E1             >
 969+ 86E1 C7 86       >                dw      last_NFA            // Link to previous definition Name
 969+ 86E3             >QDO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 969+ 86E3 E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 969+ 86E5             >                else
 969+ 86E5 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 969+ 86E5             >                endif           ; ok        // for other definitions it "points" the correct handler
 969+ 86E5             >                // Use of "; ok" to suppress "warning[fwdref]"
 969+ 86E5             >
 969+ 86E5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 970+ 86E5 92 71 D7 64                  dw      COMPILE, C_Q_DO
 971+ 86E9 D2 6E F6 6B                  dw      CSP, FETCH, STORE_CSP
 971+ 86ED EC 70
 972+ 86EF 34 6F 62 6D                  dw      HERE, ZERO, COMMA, ZERO
 972+ 86F3 50 6F 62 6D
 973+ 86F7 34 6F 7A 6D                  dw      HERE, THREE
 974+ 86FB BD 69                        dw      EXIT
 975+ 86FD
 976+ 86FD              Latest_Definition:
 977+ 86FD              //  ______________________________________________________________________
 978+ 86FD              //
 979+ 86FD              // \
 980+ 86FD                              Colon_Def BACKSLASH, "\\", is_immediate  // this is a single back-slash
 980+ 86FD             >                New_Def  BACKSLASH, "\\", Enter_Ptr, is_immediate ; ok
 980+ 86FD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 980+ 86FD             >
 980+ 86FD             >                // dummy db directives used to calculate length of namec
 980+ 86FD 5C          >                db      "\\"
 980+ 86FE             >len_NFA         defl    $ - temp_NFA
 980+ 86FE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 980+ 86FD             >
 980+ 86FD C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 980+ 86FE 5C          >                db      "\\"               // name string in 7-bit ascii, but
 980+ 86FF             >                org     $-1                 // alter last byte of Name just above to set
 980+ 86FE DC          >                db      {b $} | END_BIT     // msb as name end
 980+ 86FF             >
 980+ 86FF DD 86       >                dw      last_NFA            // Link to previous definition Name
 980+ 8701             >BACKSLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 980+ 8701 E7 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 980+ 8703             >                else
 980+ 8703 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 980+ 8703             >                endif           ; ok        // for other definitions it "points" the correct handler
 980+ 8703             >                // Use of "; ok" to suppress "warning[fwdref]"
 980+ 8703             >
 980+ 8703             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 981+ 8703 61 6E F6 6B                  dw      BLK, FETCH
 982+ 8707 7D 64                        dw      ZBRANCH
 983+ 8709 30 00                        dw      Backslash_Else_1 - $
 984+ 870B 61 6E F6 6B                  dw          BLK, FETCH, ONE, GREATER  // BLOCK 1 is used as temp-line in INCLUDE file
 984+ 870F 6A 6D D3 6F
 985+ 8713 7D 64                        dw          ZBRANCH
 986+ 8715 18 00                        dw          Backslash_Else_2 - $
 987+ 8717 6A 6E F6 6B                  dw              TO_IN, FETCH, CL, MOD, CL
 987+ 871B 96 6D 34 7A
 987+ 871F 96 6D
 988+ 8721 25 6B 88 6F                  dw              SWAP, SUBTRACT, TO_IN, PLUSSTORE
 988+ 8725 6A 6E D3 6B
 989+ 8729 66 64                        dw          BRANCH
 990+ 872B 0A 00                        dw          Backslash_Endif_2 - $
 991+ 872D              Backslash_Else_2:
 992+ 872D A2 6D AA 6A                  dw              BBUF, CELL_MINUS, TO_IN, STORE
 992+ 8731 6A 6E 03 6C
 993+ 8735              Backslash_Endif_2:
 994+ 8735 66 64                        dw      BRANCH
 995+ 8737 0A 00                        dw      Backslash_Endif_1 - $
 996+ 8739              Backslash_Else_1:
 997+ 8739 43 64 50 00                  dw          LIT, 80, TO_IN, STORE
 997+ 873D 6A 6E 03 6C
 998+ 8741              Backslash_Endif_1:
 999+ 8741 BD 69                        dw      EXIT
1000+ 8743
1001+ 8743              Fence_Word:
1002+ 8743              //  ______________________________________________________________________
1003+ 8743              //
1004+ 8743
1005+ 8743 00           Here_Dictionary db      0
1006+ 8744
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L3.asm
 113  8744
 114  8744              // now we save the compiled file so we can either run it or debug it
 115  8744                              SAVENEX OPEN "output/main.nex", ORIGIN
 116  8744                              SAVENEX CORE 3, 0, 0                                // Next core 3.0.0 required as minimum
 117  8744                              SAVENEX CFG  0
 118  8744                              SAVENEX BANK 2, 0
 119  8744                              SAVENEX AUTO
 120  8744                              SAVENEX CLOSE
 121  8744
 122  8744              //              PAGE 7 ;set 7 page to current slot
 123  8744              //              SAVEBIN "ram7.bin",$C000,$4000 ;- save 4000h begin from C000h of RAM to file
 124  8744              //              SAVEBIN "output/ram2.bin", $8000, 9800 ;- save 3000h begin from 8000h of RAM to file
 125  8744
 126  8744              //              SAVETAP "output/F15j.tap", CODE, "forth15j", $6400, 9000
 127  8744
 128  8744                              SAVEBIN "output/forth15j.bin", ORIGIN, 9400
 129  8744
 130  8744                              END
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/main.asm
