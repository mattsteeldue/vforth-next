# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/main.asm
   1  0000              //  ______________________________________________________________________
   2  0000              //
   3  0000              //  main.asm
   4  0000              //  ______________________________________________________________________
   5  0000              //
   6  0000              // v-Forth 1.6 NextZXOS version
   7  0000              // build 2021719
   8  0000              //
   9  0000              //
  10  0000              //  NextZXOS version
  11  0000              //  ______________________________________________________________________
  12  0000              //
  13  0000              //  This work is available as-is with no whatsoever warranty.
  14  0000              //  Copying, modifying and distributing this software is allowed
  15  0000              //  provided that the copyright notice is kept.
  16  0000              //  ______________________________________________________________________
  17  0000              //
  18  0000              //  by Matteo Vitturi, 1990-2021
  19  0000              //
  20  0000              //  https://sites.google.com/view/vforth/vforth15-next
  21  0000              //  https://www.oocities.org/matteo_vitturi/english/index.htm
  22  0000              //
  23  0000              //  This is the complete compiler for v.Forth for SINCLAIR ZX Spectrum Next.
  24  0000              //  Each line of this source list mustn't exceed 80 bytes.
  25  0000              //  Z80N (ZX Spectrum Next) extension is available.
  26  0000              //
  27  0000              //  This list has been tested using the following configuration:
  28  0000              //      - CSpect emulator V.2.12.30
  29  0000              //  ______________________________________________________________________
  30  0000              //
  31  0000              //  Z80 Registers usage map
  32  0000              //
  33  0000              //  AF
  34  0000              //  BC - Instruction Pointer: should be preserved during ROM/OS calls
  35  0000              //  DE - Top of Stack element. The second from top is pointed by SP
  36  0000              //  HL - Working
  37  0000              //
  38  0000              //  AF'- Sometime used for backup purpose
  39  0000              //  BC'- Not used
  40  0000              //  DE'- Not used
  41  0000              //  HL'- Not used: (saved at startup)
  42  0000              //
  43  0000              //  SP - Calculator Stack Pointer
  44  0000              //  IX - Inner interpreter "next" address pointer. This way jp (ix) is 2T-state faster than JP next
  45  0000              //  IY - (ZX System: must be preserved to interact with standard ROM)
  46  0000              //
  47  0000              //  ______________________________________________________________________
  48  0000              //
  49  0000              //  _________________
  50  0000              //
  51  0000              //  FORTH DEFINITIONS
  52  0000              //  _________________
  53  0000
  54  0000                              OPT     --zxnext
  55  0000              //  ______________________________________________________________________
  56  0000              //
  57  0000              // this controls some debugging code in L0.asm
  58  0000              //  0 for final binary release.
  59  0000              //  1 for debugging with Visual Studio Code and DeZog
  60  0000              // -1 for for binary comparison with Forth generated code.
  61  0000              DEBUGGING       equ     -1
  62  0000              //
  63  0000              //  ______________________________________________________________________
  64  0000
  65  0000                              if ( -1 == DEBUGGING )
  66  0000              ORIGIN          equ     $62E6                   // for binary comparison
  67  0000                              endif
  68  0000              //  ______________________________________________________________________
  69  0000
  70  0000                              if (  0 == DEBUGGING )
  71  0000 ~            ORIGIN          equ     $6366                   // binary
  72  0000                              endif
  73  0000              //  ______________________________________________________________________
  74  0000
  75  0000                              if (  1 == DEBUGGING )
  76  0000 ~            ORIGIN          equ     $8080                   // for DeZog
  77  0000                              endif
  78  0000              //  ______________________________________________________________________
  79  0000
  80  0000                              DEVICE  ZXSPECTRUMNEXT
  81  0000
  82  0000                              ORG     ORIGIN
  83  62E6
  84  62E6                              if ( -1 == DEBUGGING )
  85  62E6 00 00 00...                  ds 128                            // for binary comparison
  86  62EA                              endif
  87  6366
  88  6366              //  ______________________________________________________________________
  89  6366              //
  90  6366              //  Naming convention for Label vs Forth correspondance
  91  6366              //  Forth words are named as they are named for real with some exception to avoid assembler syntax errors.
  92  6366              //    - Leading "0" is converted into "Z_"
  93  6366              //    - Leading "(" is converted into "C_", closing bracket is omitted
  94  6366              //    - Leading numbers are converted in letters: ONE_  TWO_ etc.
  95  6366              //    - Question mark "?" is converted into "Q" or omitted if needed / useful.
  96  6366              //    - Plus sign "+" is converted in _PLUS or ADD_ depending.
  97  6366              //    - Minus sign "-" in L (for Line), MINUS or SUBTRACT depending
  98  6366              //    - Greater-Than sign ">" in _GREATER or TO_ depending
  99  6366              //    - Equal sign "=" is converted in EQUAL
 100  6366              //    - Less-Than sign "<" in _LESS or FROM_ (or TO_ again) depending
 101  6366              //    - Asterisk sign "*" is converted in _MUL or STAR
 102  6366              //    - Slash "/" is converted in _DIV or omitted if it is clear what it means
 103  6366              //    - Exclamation mark "!" is converted in STORE
 104  6366              //    - At-Sign "@" is converted in FETCH
 105  6366              //    - Words that collides with Assembler are normally suffixed with "_OP"
 106  6366
 107  6366                              include "system.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/system.asm
   1+ 6366              //  ______________________________________________________________________
   2+ 6366              //
   3+ 6366              //  system.asm
   4+ 6366              //  ______________________________________________________________________
   5+ 6366
   6+ 6366              // Registers:
   7+ 6366              //
   8+ 6366              //      BC: Instruction Pointer
   9+ 6366              //      DE:
  10+ 6366              //      HL: W register
  11+ 6366              //      SP: Calc stack Pointer
  12+ 6366              //      IX: Inner-Interpreter Address
  13+ 6366
  14+ 6366              //  ______________________________________________________________________
  15+ 6366              //
  16+ 6366              // ZX-Spectrum standard system variables
  17+ 6366              SCR_CT          equ     $5C8C                   // SCR-CT system variable
  18+ 6366              LASTK           equ     $5C08                   // LASTK system variable
  19+ 6366              BORDCR          equ     $5C48                   // BORDCR system variable
  20+ 6366              FLAGS2          equ     $5C6A                   // for caps-lock
  21+ 6366
  22+ 6366              //  ______________________________________________________________________
  23+ 6366              //
  24+ 6366              // Flag constants
  25+ 6366              TRUE_FLAG       equ     $FFFF
  26+ 6366              FALSE_FLAG      equ     $0000
  27+ 6366
  28+ 6366              //  ______________________________________________________________________
  29+ 6366              //
  30+ 6366              // Ascii char constants
  31+ 6366              NUL_CHAR        equ     $00
  32+ 6366              COMMA_CHAR      equ     $06
  33+ 6366              BACKSPACE_CHAR  equ     $08
  34+ 6366              CR_CHAR         equ     $0D
  35+ 6366              BLANK_CHAR      equ     $20
  36+ 6366              QUOTE_CHAR      equ     "'"
  37+ 6366              DQUOTE_CHAR     equ     '"'
  38+ 6366              UNDERSCORE_CHAR equ     $5F
  39+ 6366              SOLIDBLOCK_CHAR equ     $8F
  40+ 6366              HALFBLOCK_CHAR  equ     $8C
  41+ 6366              LC_A_CHAR       equ     $61                 // lower-case "a"
  42+ 6366              LC_Z_CHAR       equ     $7A                 // lower-case "z"
  43+ 6366
  44+ 6366
  45+ 6366              //  ______________________________________________________________________
  46+ 6366              //
  47+ 6366
  48+ 6366                              // emulate something like:  ld hl,rp
  49+ 6366              ldhlrp          macro
  50+ 6366 ~                            ld      hl,(RP_Pointer)
  51+ 6366                              endm
  52+ 6366
  53+ 6366                              // emulate something like:  ld rp,hl
  54+ 6366              ldrphl          macro
  55+ 6366 ~                            ld      (RP_Pointer),hl
  56+ 6366                              endm
  57+ 6366
  58+ 6366              //  ______________________________________________________________________
  59+ 6366              //
  60+ 6366              //  Inner interpreter next-address pointer. This is 2T-state faster than "jp address"
  61+ 6366              next            macro
  62+ 6366 ~                            jp      (ix)
  63+ 6366                              endm
  64+ 6366
  65+ 6366              psh1            macro
  66+ 6366 ~                            push    hl
  67+ 6366 ~                            jp      (ix)
  68+ 6366                              endm
  69+ 6366
  70+ 6366              psh2            macro
  71+ 6366 ~                            push    de
  72+ 6366 ~                            push    hl
  73+ 6366 ~                            jp      (ix)
  74+ 6366                              endm
  75+ 6366
  76+ 6366              //  ______________________________________________________________________
  77+ 6366              //
  78+ 6366              // Bit constants in length-byte
  79+ 6366
  80+ 6366              SMUDGE_BIT      equ     %00100000               // $20
  81+ 6366              IMMEDIATE_BIT   equ     %01000000               // $40
  82+ 6366              END_BIT         equ     %10000000               // $80
  83+ 6366
  84+ 6366
  85+ 6366              //  ______________________________________________________________________
  86+ 6366              //
  87+ 6366              //  To create Forth words using this (nice) Assembler, we have to use the two following
  88+ 6366              //  pointers
  89+ 6366              temp_NFA        defl    0
  90+ 6366              last_NFA        defl    0
  91+ 6366              len_NFA         defl    0
  92+ 6366
  93+ 6366              is_code         equ     0                   // so the direct machine-code starts at CFA
  94+ 6366              is_normal       equ     0                   // so the direct machine-code starts at CFA
  95+ 6366              is_immediate    equ     IMMEDIATE_BIT       // $40 - the definition is IMMEDIATE.
  96+ 6366
  97+ 6366              //  ______________________________________________________________________
  98+ 6366              //
  99+ 6366              //  Create a new "low-level" definition
 100+ 6366              //  This macro is used in the form  Create FORTH_NAME,n,"forth_name"
 101+ 6366              //  to create a new Forth Dictionary entry the same way Forth itself would do.
 102+ 6366              //  A word begins with a Length-Byte in range 1-31. Top 3 msb are used as flags
 103+ 6366              //  see SMUDGE_BIT and IMMEDIATE_BIT constant above.
 104+ 6366              //  It is followed by the Name of the word, i.e. a string expressed in 7-bit Ascii.
 105+ 6366              //  The last character of the Name must have the msb set to signal the end of it (END_BIT)
 106+ 6366              //  This macro acts much like the standard Forth definition CREATE
 107+ 6366
 108+ 6366              New_Def         macro   label, namec, runcode, bits
 109+ 6366 ~            temp_NFA        defl    $                   // save this NFA address to temp_NFA
 110+ 6366 ~
 111+ 6366 ~                            // dummy db directives used to calculate length of namec
 112+ 6366 ~                            db      namec
 113+ 6366 ~            len_NFA         defl    $ - temp_NFA
 114+ 6366 ~                            org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 115+ 6366 ~
 116+ 6366 ~                            db      len_NFA | END_BIT | bits  // The start of NFA must have msb set to signal the beginning of the sounted string
 117+ 6366 ~                            db      namec               // name string in 7-bit ascii, but
 118+ 6366 ~                            org     $-1                 // alter last byte of Name just above to set
 119+ 6366 ~                            db      {b $} | END_BIT     // msb as name end
 120+ 6366 ~
 121+ 6366 ~                            dw      last_NFA            // Link to previous definition Name
 122+ 6366 ~            label:          if runcode != 0 ; ok        // This is the start address of the direct jp(hl)
 123+ 6366 ~                            dw      runcode ; ok        // for primitive definitions  actual code
 124+ 6366 ~                            else
 125+ 6366 ~                            dw      $ + 2   ; ok        // is pointed by CFA
 126+ 6366 ~                            endif           ; ok        // for other definitions it "points" the correct handler
 127+ 6366 ~                            // Use of "; ok" to suppress "warning[fwdref]"
 128+ 6366 ~
 129+ 6366 ~            last_NFA        defl    temp_NFA            // keep track of NFA saved above
 130+ 6366                              endm
 131+ 6366
 132+ 6366              //  ______________________________________________________________________
 133+ 6366              //
 134+ 6366              // Create a "constant"
 135+ 6366              // The constant value is compiled in first PFA cell
 136+ 6366              Constant_Def    macro   label, namec, constant_value
 137+ 6366 ~                            New_Def  label, namec, Constant_Ptr, is_normal
 138+ 6366 ~                            dw      constant_value
 139+ 6366                              endm
 140+ 6366
 141+ 6366              //  ______________________________________________________________________
 142+ 6366              //
 143+ 6366              // Create a "variable"
 144+ 6366              // The when invoked, a variable returns a pointer, the address of first PFA cell
 145+ 6366              // this allow creation of "variables" which content is  of any length
 146+ 6366              Variable_Def    macro   label, namec, initial_value
 147+ 6366 ~                            New_Def  label, namec, Variable_Ptr, is_normal
 148+ 6366 ~                            dw      initial_value
 149+ 6366                              endm
 150+ 6366
 151+ 6366              //  ______________________________________________________________________
 152+ 6366              //
 153+ 6366              // Create a "user"
 154+ 6366              // It uses a single byte as offset to calculate the address of the variable
 155+ 6366              User_Def        macro   label, namec, offset_value
 156+ 6366 ~                            New_Def  label, namec, User_Ptr, is_normal
 157+ 6366 ~                            db      offset_value
 158+ 6366                              endm
 159+ 6366
 160+ 6366              //  ______________________________________________________________________
 161+ 6366              //
 162+ 6366              // Create a "colon-definition"
 163+ 6366              // The CFA contains a small routine i.e. "call Enter_Ptr".
 164+ 6366              // The PFA, three bytes later, contains the actual Forth definition
 165+ 6366              Colon_Def       macro   label, namec, bits
 166+ 6366 ~                            New_Def  label, namec, Enter_Ptr, bits ; ok
 167+ 6366                              endm
 168+ 6366
 169+ 6366              //  ______________________________________________________________________
 170+ 6366              //
 171+ 6366
 172+ 6366              S0_system:      equ     $D0E8               // Address of top of Calc Stack
 173+ 6366              TIB_system      equ     $D0E8               // TIB grows upwards, Return-Stack downward.
 174+ 6366              R0_system:      equ     $D188               // Address of top of Return Stack. This is S0 + $00A0
 175+ 6366              USER_system:    equ     $D188               // User variables zone.
 176+ 6366              FIRST_system:   equ     $D1E4               // Address of first BUFFER
 177+ 6366              LIMIT_system:   equ     $E000               // Address of first byte beyond last BUFFER
 178+ 6366
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/system.asm
 108  6366                              include "L0.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L0.asm
   1+ 6366              //  ______________________________________________________________________
   2+ 6366              //
   3+ 6366              //  L0.asm
   4+ 6366              //
   5+ 6366              //  Origin-Area and Level-0 definitions
   6+ 6366              //  ______________________________________________________________________
   7+ 6366
   8+ 6366
   9+ 6366              Cold_origin:
  10+ 6366 A7                           and     a
  11+ 6367 C3 99 78                     jp      ColdRoutine
  12+ 636A              Warm_origin:
  13+ 636A 37                           scf
  14+ 636B C3 99 78                     jp      WarmRoutine
  15+ 636E
  16+ 636E              // +008
  17+ 636E E6 D0        SP_Basic:       dw      $D0E6               // These are bits with some "standard" meaning... 0101
  18+ 6370
  19+ 6370              // +00A
  20+ 6370 00 0E                        dw      $0E00
  21+ 6372
  22+ 6372              // +00C
  23+ 6372 53 86        Latest_origin:  dw      Latest_Definition   // Latest word (used in Cold_Start)
  24+ 6374
  25+ 6374              // +00E
  26+ 6374 0C 00        DEL_Char_Ptr:   dw      $000C               // This is the characther used as "Back-Space"
  27+ 6376
  28+ 6376              // +010
  29+ 6376 50 B2        CPU_Id          dw      $B250               // Z80 expressed in base 36
  30+ 6378
  31+ 6378              // +012
  32+ 6378 E8 D0        S0_origin:      dw      S0_system
  33+ 637A 88 D1        R0_origin:      dw      R0_system
  34+ 637C E8 D0        TIB_origin:     dw      TIB_system
  35+ 637E 1F 00        WIDTH_origin:   dw      31
  36+ 6380 01 00        WARNING_origin: dw      1
  37+ 6382 99 86        FENCE_origin:   dw      Fence_Word
  38+ 6384 99 86        DP_origin       dw      Fence_Word
  39+ 6386 A7 77        VOCLINK_origin: dw      Voclink_Ptr
  40+ 6388 E4 D1                        dw      FIRST_system
  41+ 638A 00 E0                        dw      LIMIT_system
  42+ 638C
  43+ 638C              // +026
  44+ 638C 8F           Block_Face:     db      SOLIDBLOCK_CHAR     // Caps-Lock   Cursor face
  45+ 638D 8C           Half_Face:      db      HALFBLOCK_CHAR      // Caps-unlock Cursor face
  46+ 638E 5F           Underscore_Face:db      UNDERSCORE_CHAR     // Underscore  Cursor face
  47+ 638F 00                           db      0
  48+ 6390
  49+ 6390              // +02A
  50+ 6390 00 00        IX_Echo:        dw      $0000               // Echo IX after NextOS call
  51+ 6392
  52+ 6392              // +02C
  53+ 6392 00 00        SP_Saved:       dw      $0000               // Saved SP dufing NextOS call
  54+ 6394
  55+ 6394              // +02E
  56+ 6394 88 D1        USER_Pointer:   dw      USER_system
  57+ 6396
  58+ 6396              // +030
  59+ 6396 88 D1        RP_Pointer:     dw      $d188 // R0_system
  60+ 6398
  61+ 6398              // +32
  62+ 6398              // SP_Basic        dw      0
  63+ 6398
  64+ 6398
  65+ 6398              //  ______________________________________________________________________
  66+ 6398
  67+ 6398              // from this point we can use LDHLRP and LDRPHL Assembler macros
  68+ 6398              // instead of their equivalent long sequences.
  69+ 6398
  70+ 6398              //  ______________________________________________________________________
  71+ 6398
  72+ 6398              // address for "next" - inner interpreter
  73+ 6398              // This address must always be pointed by IX
  74+ 6398              // "next" macro simply does a  jp(ix)  instruction
  75+ 6398
  76+ 6398              // Psh2_Ptr:       push    de
  77+ 6398              // Psh1_Ptr:       push    hl
  78+ 6398
  79+ 6398              Next_Ptr:       // This address must always be kept in IX: "next" relies on that
  80+ 6398
  81+ 6398                              if ( 1 == DEBUGGING )
  82+ 6398 ~                            ld      hl, Next_Breakpoint_1
  83+ 6398 ~                            and     a
  84+ 6398 ~                            sbc     hl, bc
  85+ 6398 ~                            jr      nz, Next_Continue
  86+ 6398 ~                            nop // This is where you have to put a real breakpoint to intercept BC values...
  87+ 6398                              endif
  88+ 6398
  89+ 6398              Next_Continue:
  90+ 6398 0A                           ld      a, (bc)
  91+ 6399 03                           inc     bc
  92+ 639A 6F                           ld      l, a
  93+ 639B 0A                           ld      a, (bc)
  94+ 639C 03                           inc     bc
  95+ 639D 67                           ld      h, a                // hl contains a CFA (xt) of word being executed
  96+ 639E
  97+ 639E              // Execute xt i.e. CFA held in HL
  98+ 639E              Exec_Ptr:
  99+ 639E 5E                           ld      e, (hl)
 100+ 639F 23                           inc     hl
 101+ 63A0 56                           ld      d, (hl)
 102+ 63A1 EB                           ex      de, hl
 103+ 63A2 E9                           jp      (hl)                // and jump to it
 104+ 63A3                                                          // there you'll find the real code or a CALL to a ;code part
 105+ 63A3
 106+ 63A3              //  ______________________________________________________________________
 107+ 63A3              //
 108+ 63A3              // lit          -- x
 109+ 63A3              // puts on top of stack the value of the following word.
 110+ 63A3              // it is compiled in colon definition before a literal number
 111+ 63A3
 112+ 63A3                              New_Def  LIT, "LIT", is_code, is_normal
 112+ 63A3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 112+ 63A3             >
 112+ 63A3             >                // dummy db directives used to calculate length of namec
 112+ 63A3 4C 49 54    >                db      "LIT"
 112+ 63A6             >len_NFA         defl    $ - temp_NFA
 112+ 63A6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 112+ 63A3             >
 112+ 63A3 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 112+ 63A4 4C 49 54    >                db      "LIT"               // name string in 7-bit ascii, but
 112+ 63A7             >                org     $-1                 // alter last byte of Name just above to set
 112+ 63A6 D4          >                db      {b $} | END_BIT     // msb as name end
 112+ 63A7             >
 112+ 63A7 00 00       >                dw      last_NFA            // Link to previous definition Name
 112+ 63A9             >LIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 112+ 63A9 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 112+ 63A9             >                else
 112+ 63A9 AB 63       >                dw      $ + 2   ; ok        // is pointed by CFA
 112+ 63AB             >                endif           ; ok        // for other definitions it "points" the correct handler
 112+ 63AB             >                // Use of "; ok" to suppress "warning[fwdref]"
 112+ 63AB             >
 112+ 63AB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 113+ 63AB
 114+ 63AB 0A                           ld      a, (bc)
 115+ 63AC 03                           inc     bc
 116+ 63AD 6F                           ld      l, a
 117+ 63AE 0A                           ld      a, (bc)
 118+ 63AF 03                           inc     bc
 119+ 63B0 67                           ld      h, a
 120+ 63B1                              psh1
 120+ 63B1 E5          >                push    hl
 120+ 63B2 DD E9       >                jp      (ix)
 121+ 63B4
 122+ 63B4              //  ______________________________________________________________________
 123+ 63B4              //
 124+ 63B4              // execute      i*x xt -- j*x
 125+ 63B4              // execution token. usually xt is given by CFA
 126+ 63B4
 127+ 63B4                              New_Def  EXECUTE, "EXECUTE", is_code, is_normal
 127+ 63B4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 127+ 63B4             >
 127+ 63B4             >                // dummy db directives used to calculate length of namec
 127+ 63B4 45 58 45 43 >                db      "EXECUTE"
 127+ 63B8 55 54 45    >
 127+ 63BB             >len_NFA         defl    $ - temp_NFA
 127+ 63BB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 127+ 63B4             >
 127+ 63B4 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 127+ 63B5 45 58 45 43 >                db      "EXECUTE"               // name string in 7-bit ascii, but
 127+ 63B9 55 54 45    >
 127+ 63BC             >                org     $-1                 // alter last byte of Name just above to set
 127+ 63BB C5          >                db      {b $} | END_BIT     // msb as name end
 127+ 63BC             >
 127+ 63BC A3 63       >                dw      last_NFA            // Link to previous definition Name
 127+ 63BE             >EXECUTE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 127+ 63BE ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 127+ 63BE             >                else
 127+ 63BE C0 63       >                dw      $ + 2   ; ok        // is pointed by CFA
 127+ 63C0             >                endif           ; ok        // for other definitions it "points" the correct handler
 127+ 63C0             >                // Use of "; ok" to suppress "warning[fwdref]"
 127+ 63C0             >
 127+ 63C0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 128+ 63C0 E1                           pop     hl
 129+ 63C1 18 DB                        jr      Exec_Ptr
 130+ 63C3
 131+ 63C3
 132+ 63C3              //  ______________________________________________________________________
 133+ 63C3              //
 134+ 63C3              // branch       --
 135+ 63C3              // unconditional branch in colon definition using the following cell as an offset from current IP value
 136+ 63C3              // compiled by ELSE, AGAIN and some other immediate words
 137+ 63C3
 138+ 63C3                              New_Def BRANCH, "BRANCH", is_code, is_normal
 138+ 63C3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 138+ 63C3             >
 138+ 63C3             >                // dummy db directives used to calculate length of namec
 138+ 63C3 42 52 41 4E >                db      "BRANCH"
 138+ 63C7 43 48       >
 138+ 63C9             >len_NFA         defl    $ - temp_NFA
 138+ 63C9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 138+ 63C3             >
 138+ 63C3 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 138+ 63C4 42 52 41 4E >                db      "BRANCH"               // name string in 7-bit ascii, but
 138+ 63C8 43 48       >
 138+ 63CA             >                org     $-1                 // alter last byte of Name just above to set
 138+ 63C9 C8          >                db      {b $} | END_BIT     // msb as name end
 138+ 63CA             >
 138+ 63CA B4 63       >                dw      last_NFA            // Link to previous definition Name
 138+ 63CC             >BRANCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 138+ 63CC ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 138+ 63CC             >                else
 138+ 63CC CE 63       >                dw      $ + 2   ; ok        // is pointed by CFA
 138+ 63CE             >                endif           ; ok        // for other definitions it "points" the correct handler
 138+ 63CE             >                // Use of "; ok" to suppress "warning[fwdref]"
 138+ 63CE             >
 138+ 63CE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 139+ 63CE              Branch_Ptr:
 140+ 63CE 60                           ld      h, b
 141+ 63CF 69                           ld      l, c
 142+ 63D0 5E                           ld      e, (hl)
 143+ 63D1 23                           inc     hl
 144+ 63D2 56                           ld      d, (hl)
 145+ 63D3 2B                           dec     hl                  // offset is calculated from current IP
 146+ 63D4 19                           add     hl, de
 147+ 63D5 4D                           ld      c, l
 148+ 63D6 44                           ld      b, h
 149+ 63D7                              next
 149+ 63D7 DD E9       >                jp      (ix)
 150+ 63D9
 151+ 63D9
 152+ 63D9              //  ______________________________________________________________________
 153+ 63D9              //
 154+ 63D9              // 0branch      f --
 155+ 63D9              // conditional branch if the top-of-stack is ZERO or FALSE.
 156+ 63D9              // compiled by IF, UNTIL and some other immediate words
 157+ 63D9
 158+ 63D9                              New_Def ZBRANCH, "0BRANCH", is_code, is_normal
 158+ 63D9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 158+ 63D9             >
 158+ 63D9             >                // dummy db directives used to calculate length of namec
 158+ 63D9 30 42 52 41 >                db      "0BRANCH"
 158+ 63DD 4E 43 48    >
 158+ 63E0             >len_NFA         defl    $ - temp_NFA
 158+ 63E0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 158+ 63D9             >
 158+ 63D9 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 158+ 63DA 30 42 52 41 >                db      "0BRANCH"               // name string in 7-bit ascii, but
 158+ 63DE 4E 43 48    >
 158+ 63E1             >                org     $-1                 // alter last byte of Name just above to set
 158+ 63E0 C8          >                db      {b $} | END_BIT     // msb as name end
 158+ 63E1             >
 158+ 63E1 C3 63       >                dw      last_NFA            // Link to previous definition Name
 158+ 63E3             >ZBRANCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 158+ 63E3 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 158+ 63E3             >                else
 158+ 63E3 E5 63       >                dw      $ + 2   ; ok        // is pointed by CFA
 158+ 63E5             >                endif           ; ok        // for other definitions it "points" the correct handler
 158+ 63E5             >                // Use of "; ok" to suppress "warning[fwdref]"
 158+ 63E5             >
 158+ 63E5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 159+ 63E5              ZBranch_Ptr:
 160+ 63E5 E1                           pop     hl
 161+ 63E6 7D                           ld      a, l
 162+ 63E7 B4                           or      h
 163+ 63E8 CA CE 63                     jp      z, Branch_Ptr
 164+ 63EB 03                           inc     bc                  // if not branch, skip offset cell.
 165+ 63EC 03                           inc     bc
 166+ 63ED                              next
 166+ 63ED DD E9       >                jp      (ix)
 167+ 63EF
 168+ 63EF              //  ______________________________________________________________________
 169+ 63EF              //
 170+ 63EF              // (loop)       --
 171+ 63EF              // compiled by +LOOP. it uses the top two values of return-stack to
 172+ 63EF              // keep track of index and limit
 173+ 63EF                              New_Def C_LOOP, "(LOOP)", is_code, is_normal
 173+ 63EF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 173+ 63EF             >
 173+ 63EF             >                // dummy db directives used to calculate length of namec
 173+ 63EF 28 4C 4F 4F >                db      "(LOOP)"
 173+ 63F3 50 29       >
 173+ 63F5             >len_NFA         defl    $ - temp_NFA
 173+ 63F5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 173+ 63EF             >
 173+ 63EF 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 173+ 63F0 28 4C 4F 4F >                db      "(LOOP)"               // name string in 7-bit ascii, but
 173+ 63F4 50 29       >
 173+ 63F6             >                org     $-1                 // alter last byte of Name just above to set
 173+ 63F5 A9          >                db      {b $} | END_BIT     // msb as name end
 173+ 63F6             >
 173+ 63F6 D9 63       >                dw      last_NFA            // Link to previous definition Name
 173+ 63F8             >C_LOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 173+ 63F8 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 173+ 63F8             >                else
 173+ 63F8 FA 63       >                dw      $ + 2   ; ok        // is pointed by CFA
 173+ 63FA             >                endif           ; ok        // for other definitions it "points" the correct handler
 173+ 63FA             >                // Use of "; ok" to suppress "warning[fwdref]"
 173+ 63FA             >
 173+ 63FA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 174+ 63FA
 175+ 63FA
 176+ 63FA 11 01 00                     ld      de, 1               // bc contains increment of 1
 177+ 63FD
 178+ 63FD
 179+ 63FD
 180+ 63FD
 181+ 63FD
 182+ 63FD
 183+ 63FD
 184+ 63FD
 185+ 63FD              Loop_Ptr:
 186+ 63FD                              ldhlrp                      // ld hl,rp macro 30h +Origin
 186+ 63FD 2A 96 63    >                ld      hl,(RP_Pointer)
 187+ 6400 7E                           ld      a, (hl)             // hl points to loop-index, add increment de to it.
 188+ 6401 83                           add     e
 189+ 6402 77                           ld      (hl), a
 190+ 6403 5F                           ld      e, a
 191+ 6404 23                           inc     hl
 192+ 6405 7E                           ld      a, (hl)
 193+ 6406 8A                           adc     d
 194+ 6407 77                           ld      (hl),a
 195+ 6408 23                           inc     hl                  // hl now points to loop-limit
 196+ 6409 CB 7A                        bit     7, d                // keep increment-sign just before overwriting d
 197+ 640B 57                           ld      d, a
 198+ 640C 20 07                        jr      nz, Loop_NegativeIncrement
 199+ 640E
 200+ 640E 7B                               ld      a, e
 201+ 640F 96                               sub     (hl)
 202+ 6410 7A                               ld      a, d
 203+ 6411 23                               inc     hl
 204+ 6412 9E                               sbc     (hl)
 205+ 6413 18 05                        jr      Loop_Endif              // else
 206+ 6415              Loop_NegativeIncrement:
 207+ 6415 7E                               ld      a, (hl)
 208+ 6416 93                               sub     e
 209+ 6417 23                               inc     hl
 210+ 6418 7E                               ld      a, (hl)
 211+ 6419 9A                               sbc     d
 212+ 641A              Loop_Endif:
 213+ 641A
 214+ 641A FA CE 63                     jp      m, Branch_Ptr       // perform branch consuming following cell
 215+ 641D
 216+ 641D 23                           inc     hl
 217+ 641E                              ldrphl                      // ld rp,hl macro 30h +Origin
 217+ 641E 22 96 63    >                ld      (RP_Pointer),hl
 218+ 6421
 219+ 6421 03                           inc     bc                  // skip branch-style offset
 220+ 6422 03                           inc     bc
 221+ 6423                              next
 221+ 6423 DD E9       >                jp      (ix)
 222+ 6425
 223+ 6425              //  ______________________________________________________________________
 224+ 6425              //
 225+ 6425              // (+loop)       n --
 226+ 6425              // same as (LOOP) but index is incremented by n (instead of just 1)
 227+ 6425              // compiled by +LOOP.
 228+ 6425                              New_Def C_PLOOP, "(+LOOP)", is_code, is_normal
 228+ 6425             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 228+ 6425             >
 228+ 6425             >                // dummy db directives used to calculate length of namec
 228+ 6425 28 2B 4C 4F >                db      "(+LOOP)"
 228+ 6429 4F 50 29    >
 228+ 642C             >len_NFA         defl    $ - temp_NFA
 228+ 642C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 228+ 6425             >
 228+ 6425 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 228+ 6426 28 2B 4C 4F >                db      "(+LOOP)"               // name string in 7-bit ascii, but
 228+ 642A 4F 50 29    >
 228+ 642D             >                org     $-1                 // alter last byte of Name just above to set
 228+ 642C A9          >                db      {b $} | END_BIT     // msb as name end
 228+ 642D             >
 228+ 642D EF 63       >                dw      last_NFA            // Link to previous definition Name
 228+ 642F             >C_PLOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 228+ 642F ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 228+ 642F             >                else
 228+ 642F 31 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 228+ 6431             >                endif           ; ok        // for other definitions it "points" the correct handler
 228+ 6431             >                // Use of "; ok" to suppress "warning[fwdref]"
 228+ 6431             >
 228+ 6431             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 229+ 6431 D1                           pop     de
 230+ 6432 C3 FD 63                     jp      Loop_Ptr
 231+ 6435
 232+ 6435              //  ______________________________________________________________________
 233+ 6435              //
 234+ 6435              // (?do)        lim ind --
 235+ 6435              // compiled by ?DO to make a loop checking for lim == ind first
 236+ 6435              // at run-time (?DO) must be followed by a BRANCH offset
 237+ 6435              // used to skip the loop if lim == ind
 238+ 6435                              New_Def C_Q_DO, "(?DO)", is_code, is_normal
 238+ 6435             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 238+ 6435             >
 238+ 6435             >                // dummy db directives used to calculate length of namec
 238+ 6435 28 3F 44 4F >                db      "(?DO)"
 238+ 6439 29          >
 238+ 643A             >len_NFA         defl    $ - temp_NFA
 238+ 643A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 238+ 6435             >
 238+ 6435 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 238+ 6436 28 3F 44 4F >                db      "(?DO)"               // name string in 7-bit ascii, but
 238+ 643A 29          >
 238+ 643B             >                org     $-1                 // alter last byte of Name just above to set
 238+ 643A A9          >                db      {b $} | END_BIT     // msb as name end
 238+ 643B             >
 238+ 643B 25 64       >                dw      last_NFA            // Link to previous definition Name
 238+ 643D             >C_Q_DO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 238+ 643D ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 238+ 643D             >                else
 238+ 643D 3F 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 238+ 643F             >                endif           ; ok        // for other definitions it "points" the correct handler
 238+ 643F             >                // Use of "; ok" to suppress "warning[fwdref]"
 238+ 643F             >
 238+ 643F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 239+ 643F D1                           pop     de                  // de has the index
 240+ 6440 E1                           pop     hl                  // hl has the limit
 241+ 6441 E5                           push    hl
 242+ 6442 D5                           push    de
 243+ 6443 A7                           and     a                   // reset carry flag
 244+ 6444 ED 52                        sbc     hl, de              // compute limit - index
 245+ 6446 20 05                        jr      nz, Do_Ptr          // if zero then don't even begin loop
 246+ 6448 D1                               pop     de
 247+ 6449 E1                               pop     hl
 248+ 644A
 249+ 644A C3 CE 63                         jp      Branch_Ptr          // perform branch consuming following cell
 250+ 644D              Do_Ptr:
 251+ 644D                              ldhlrp                      // prepare RP
 251+ 644D 2A 96 63    >                ld      hl,(RP_Pointer)
 252+ 6450 2B                           dec     hl
 253+ 6451 2B                           dec     hl
 254+ 6452 2B                           dec     hl
 255+ 6453 2B                           dec     hl
 256+ 6454                              ldrphl
 256+ 6454 22 96 63    >                ld      (RP_Pointer),hl
 257+ 6457
 258+ 6457                              // store index as top RP
 259+ 6457 D1                           pop     de
 260+ 6458 73                           ld      (hl), e
 261+ 6459 23                           inc     hl
 262+ 645A 72                           ld      (hl), d
 263+ 645B 23                           inc     hl
 264+ 645C                              // stores lim as second from top RP
 265+ 645C D1                           pop     de
 266+ 645D 73                           ld      (hl), e
 267+ 645E 23                           inc     hl
 268+ 645F 72                           ld      (hl), d
 269+ 6460
 270+ 6460                              // skip branch-style offseet
 271+ 6460 03                           inc     bc
 272+ 6461 03                           inc     bc
 273+ 6462                              next
 273+ 6462 DD E9       >                jp      (ix)
 274+ 6464
 275+ 6464              //  ______________________________________________________________________
 276+ 6464              //
 277+ 6464              // (do)        lim ind --
 278+ 6464              // compiled by DO to make a loop checking for lim == ind first
 279+ 6464              // this is a simpler version of (?DO)
 280+ 6464                              New_Def C_DO, "(DO)", is_code, is_normal
 280+ 6464             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 280+ 6464             >
 280+ 6464             >                // dummy db directives used to calculate length of namec
 280+ 6464 28 44 4F 29 >                db      "(DO)"
 280+ 6468             >len_NFA         defl    $ - temp_NFA
 280+ 6468             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 280+ 6464             >
 280+ 6464 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 280+ 6465 28 44 4F 29 >                db      "(DO)"               // name string in 7-bit ascii, but
 280+ 6469             >                org     $-1                 // alter last byte of Name just above to set
 280+ 6468 A9          >                db      {b $} | END_BIT     // msb as name end
 280+ 6469             >
 280+ 6469 35 64       >                dw      last_NFA            // Link to previous definition Name
 280+ 646B             >C_DO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 280+ 646B ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 280+ 646B             >                else
 280+ 646B 6D 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 280+ 646D             >                endif           ; ok        // for other definitions it "points" the correct handler
 280+ 646D             >                // Use of "; ok" to suppress "warning[fwdref]"
 280+ 646D             >
 280+ 646D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 281+ 646D 0B                           dec     bc                  // prepare IP beforehand
 282+ 646E 0B                           dec     bc                  // to balance the two final inc bc in (?do)
 283+ 646F C3 4D 64                     jp      Do_Ptr
 284+ 6472
 285+ 6472              //  ______________________________________________________________________
 286+ 6472              //
 287+ 6472              // i            -- n
 288+ 6472              // used between DO and LOOP or between DO e +LOOP to copy on top of stack
 289+ 6472              // the current value of the index-loop
 290+ 6472                              New_Def I, "I", is_code, is_normal
 290+ 6472             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 290+ 6472             >
 290+ 6472             >                // dummy db directives used to calculate length of namec
 290+ 6472 49          >                db      "I"
 290+ 6473             >len_NFA         defl    $ - temp_NFA
 290+ 6473             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 290+ 6472             >
 290+ 6472 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 290+ 6473 49          >                db      "I"               // name string in 7-bit ascii, but
 290+ 6474             >                org     $-1                 // alter last byte of Name just above to set
 290+ 6473 C9          >                db      {b $} | END_BIT     // msb as name end
 290+ 6474             >
 290+ 6474 64 64       >                dw      last_NFA            // Link to previous definition Name
 290+ 6476             >I:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 290+ 6476 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 290+ 6476             >                else
 290+ 6476 78 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 290+ 6478             >                endif           ; ok        // for other definitions it "points" the correct handler
 290+ 6478             >                // Use of "; ok" to suppress "warning[fwdref]"
 290+ 6478             >
 290+ 6478             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 291+ 6478              I_Ptr:
 292+ 6478
 293+ 6478                              ldhlrp
 293+ 6478 2A 96 63    >                ld      hl,(RP_Pointer)
 294+ 647B 5E                           ld      e, (hl)
 295+ 647C 23                           inc     hl
 296+ 647D 56                           ld      d, (hl)
 297+ 647E D5                           push    de
 298+ 647F                              next
 298+ 647F DD E9       >                jp      (ix)
 299+ 6481
 300+ 6481              //  ______________________________________________________________________
 301+ 6481              //
 302+ 6481              // digit        c n -- u 1  |  0
 303+ 6481              // convert a character c using base n
 304+ 6481              // returns a unsigned number and a true flag
 305+ 6481              // or just a false flag if the conversion fails
 306+ 6481                              New_Def DIGIT, "DIGIT", is_code, is_normal
 306+ 6481             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 306+ 6481             >
 306+ 6481             >                // dummy db directives used to calculate length of namec
 306+ 6481 44 49 47 49 >                db      "DIGIT"
 306+ 6485 54          >
 306+ 6486             >len_NFA         defl    $ - temp_NFA
 306+ 6486             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 306+ 6481             >
 306+ 6481 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 306+ 6482 44 49 47 49 >                db      "DIGIT"               // name string in 7-bit ascii, but
 306+ 6486 54          >
 306+ 6487             >                org     $-1                 // alter last byte of Name just above to set
 306+ 6486 D4          >                db      {b $} | END_BIT     // msb as name end
 306+ 6487             >
 306+ 6487 72 64       >                dw      last_NFA            // Link to previous definition Name
 306+ 6489             >DIGIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 306+ 6489 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 306+ 6489             >                else
 306+ 6489 8B 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 306+ 648B             >                endif           ; ok        // for other definitions it "points" the correct handler
 306+ 648B             >                // Use of "; ok" to suppress "warning[fwdref]"
 306+ 648B             >
 306+ 648B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 307+ 648B E1                           pop     hl                  // l has the base
 308+ 648C D1                           pop     de                  // e has the digit
 309+ 648D 7B                           ld      a, e
 310+ 648E FE 60                        cp      $60                 // check if lowercase
 311+ 6490 38 02                        jr      c, Digit_Uppercase
 312+ 6492 D6 20                            sub     $20                 // quick'n'dirty uppercase
 313+ 6494              Digit_Uppercase:
 314+ 6494 D6 30                        sub     $30
 315+ 6496 38 15                        jr      c, Digit_Fail       // fail when character < "0"
 316+ 6498 FE 0A                            cp      $0A
 317+ 649A 38 06                            jr      c, Digit_Decimal    // perhaps is not decimal
 318+ 649C D6 07                                sub     7                   // try hex and subtract 7
 319+ 649E FE 0A                                cp      $0A
 320+ 64A0 38 0B                                jr      c,  Digit_Fail      // it is not hex !
 321+ 64A2
 322+ 64A2              Digit_Decimal:
 323+ 64A2                              // compare digit
 324+ 64A2 BD                           cp      l                   // compare with base
 325+ 64A3
 326+ 64A3 30 08                        jr      nc, Digit_Fail      // fail when greater than base
 327+ 64A5 5F                               ld      e, a                // digit is returned as second from TOS
 328+ 64A6 21 01 00                         ld      hl, 1
 329+ 64A9
 330+ 64A9                                  psh2
 330+ 64A9 D5          >                push    de
 330+ 64AA E5          >                push    hl
 330+ 64AB DD E9       >                jp      (ix)
 331+ 64AD              Digit_Fail:
 332+ 64AD 21 00 00                     ld      hl, 0
 333+ 64B0                              psh1
 333+ 64B0 E5          >                push    hl
 333+ 64B1 DD E9       >                jp      (ix)
 334+ 64B3
 335+ 64B3              //  ______________________________________________________________________
 336+ 64B3              //
 337+ 64B3              //  parametric uppercase routine
 338+ 64B3              //  depending on the following op-code the routine can be by-passed
 339+ 64B3              //  changing the behaviour of some callers.
 340+ 64B3              //  If it is "ret" then the system is Case-Sensitive
 341+ 64B3              //  If it is "Nop" then the system is Case-Insensitive
 342+ 64B3              //  Only A register is touched.
 343+ 64B3 00           Case_Sensitive: nop                         // Default is case-insensitive.
 344+ 64B4              Case_Upper:
 345+ 64B4 FE 61                        cp      LC_A_CHAR           // lower-case "a"
 346+ 64B6 D8                           ret     c                   // no change if A < "a"
 347+ 64B7 FE 7B                        cp      LC_Z_CHAR + 1       // lower-case "z" + 1
 348+ 64B9 D0                           ret     nc                  // no change if A > "z"
 349+ 64BA D6 20                        sub     $20                 // Make uppercase if A in ["a".."z"]
 350+ 64BC C9                           ret
 351+ 64BD
 352+ 64BD              //  ______________________________________________________________________
 353+ 64BD              //
 354+ 64BD              //  caseon      --
 355+ 64BD              // set system case-sensitivity on
 356+ 64BD              // it patches a RET/NOP at the beginning of the uppercase-routine
 357+ 64BD                              New_Def CASEON, "CASEON", is_code, is_normal
 357+ 64BD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 357+ 64BD             >
 357+ 64BD             >                // dummy db directives used to calculate length of namec
 357+ 64BD 43 41 53 45 >                db      "CASEON"
 357+ 64C1 4F 4E       >
 357+ 64C3             >len_NFA         defl    $ - temp_NFA
 357+ 64C3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 357+ 64BD             >
 357+ 64BD 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 357+ 64BE 43 41 53 45 >                db      "CASEON"               // name string in 7-bit ascii, but
 357+ 64C2 4F 4E       >
 357+ 64C4             >                org     $-1                 // alter last byte of Name just above to set
 357+ 64C3 CE          >                db      {b $} | END_BIT     // msb as name end
 357+ 64C4             >
 357+ 64C4 81 64       >                dw      last_NFA            // Link to previous definition Name
 357+ 64C6             >CASEON:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 357+ 64C6 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 357+ 64C6             >                else
 357+ 64C6 C8 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 357+ 64C8             >                endif           ; ok        // for other definitions it "points" the correct handler
 357+ 64C8             >                // Use of "; ok" to suppress "warning[fwdref]"
 357+ 64C8             >
 357+ 64C8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 358+ 64C8 3E C9                        ld      a, $C9              // "ret"
 359+ 64CA 32 B3 64                     ld      (Case_Sensitive), a
 360+ 64CD                              next
 360+ 64CD DD E9       >                jp      (ix)
 361+ 64CF
 362+ 64CF              //  ______________________________________________________________________
 363+ 64CF              //
 364+ 64CF              //  caseoff     --
 365+ 64CF              // set system case-sensitivity on
 366+ 64CF              // it patches a RET/NOP at the beginning of the uppercase-routine
 367+ 64CF                              New_Def CASEOFF, "CASEOFF", is_code, is_normal
 367+ 64CF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 367+ 64CF             >
 367+ 64CF             >                // dummy db directives used to calculate length of namec
 367+ 64CF 43 41 53 45 >                db      "CASEOFF"
 367+ 64D3 4F 46 46    >
 367+ 64D6             >len_NFA         defl    $ - temp_NFA
 367+ 64D6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 367+ 64CF             >
 367+ 64CF 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 367+ 64D0 43 41 53 45 >                db      "CASEOFF"               // name string in 7-bit ascii, but
 367+ 64D4 4F 46 46    >
 367+ 64D7             >                org     $-1                 // alter last byte of Name just above to set
 367+ 64D6 C6          >                db      {b $} | END_BIT     // msb as name end
 367+ 64D7             >
 367+ 64D7 BD 64       >                dw      last_NFA            // Link to previous definition Name
 367+ 64D9             >CASEOFF:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 367+ 64D9 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 367+ 64D9             >                else
 367+ 64D9 DB 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 367+ 64DB             >                endif           ; ok        // for other definitions it "points" the correct handler
 367+ 64DB             >                // Use of "; ok" to suppress "warning[fwdref]"
 367+ 64DB             >
 367+ 64DB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 368+ 64DB 3E 00                        ld      a, $00              // "nop"
 369+ 64DD 32 B3 64                     ld      (Case_Sensitive), a
 370+ 64E0                              next
 370+ 64E0 DD E9       >                jp      (ix)
 371+ 64E2
 372+ 64E2              //  ______________________________________________________________________
 373+ 64E2              //
 374+ 64E2              //  upper       c1 -- c1 | c2
 375+ 64E2              // character on top of stack is forced to Uppercase.
 376+ 64E2                              New_Def UPPER, "UPPER", is_code, is_normal
 376+ 64E2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 376+ 64E2             >
 376+ 64E2             >                // dummy db directives used to calculate length of namec
 376+ 64E2 55 50 50 45 >                db      "UPPER"
 376+ 64E6 52          >
 376+ 64E7             >len_NFA         defl    $ - temp_NFA
 376+ 64E7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 376+ 64E2             >
 376+ 64E2 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 376+ 64E3 55 50 50 45 >                db      "UPPER"               // name string in 7-bit ascii, but
 376+ 64E7 52          >
 376+ 64E8             >                org     $-1                 // alter last byte of Name just above to set
 376+ 64E7 D2          >                db      {b $} | END_BIT     // msb as name end
 376+ 64E8             >
 376+ 64E8 CF 64       >                dw      last_NFA            // Link to previous definition Name
 376+ 64EA             >UPPER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 376+ 64EA ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 376+ 64EA             >                else
 376+ 64EA EC 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 376+ 64EC             >                endif           ; ok        // for other definitions it "points" the correct handler
 376+ 64EC             >                // Use of "; ok" to suppress "warning[fwdref]"
 376+ 64EC             >
 376+ 64EC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 377+ 64EC E1                           pop     hl
 378+ 64ED 7D                           ld      a, l
 379+ 64EE CD B4 64                     call    Case_Upper
 380+ 64F1 6F                           ld      l, a
 381+ 64F2
 382+ 64F2                              psh1
 382+ 64F2 E5          >                push    hl
 382+ 64F3 DD E9       >                jp      (ix)
 383+ 64F5
 384+ 64F5              //  ______________________________________________________________________
 385+ 64F5              //
 386+ 64F5              // (find)       addr voc -- addr 0 | cfa b 1
 387+ 64F5              // vocabulary search,
 388+ 64F5              // - voc is starting word's NFA
 389+ 64F5              // - addr is the string to be searched for
 390+ 64F5              // On success, it returns the CFA of found word, the first NFA byte
 391+ 64F5              // (which contains length and some flags) and a true flag.
 392+ 64F5              // On fail, a false flag  (no more: leaves addr unchanged)
 393+ 64F5                              New_Def C_FIND, "(FIND)", is_code, is_normal
 393+ 64F5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 393+ 64F5             >
 393+ 64F5             >                // dummy db directives used to calculate length of namec
 393+ 64F5 28 46 49 4E >                db      "(FIND)"
 393+ 64F9 44 29       >
 393+ 64FB             >len_NFA         defl    $ - temp_NFA
 393+ 64FB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 393+ 64F5             >
 393+ 64F5 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 393+ 64F6 28 46 49 4E >                db      "(FIND)"               // name string in 7-bit ascii, but
 393+ 64FA 44 29       >
 393+ 64FC             >                org     $-1                 // alter last byte of Name just above to set
 393+ 64FB A9          >                db      {b $} | END_BIT     // msb as name end
 393+ 64FC             >
 393+ 64FC E2 64       >                dw      last_NFA            // Link to previous definition Name
 393+ 64FE             >C_FIND:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 393+ 64FE ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 393+ 64FE             >                else
 393+ 64FE 00 65       >                dw      $ + 2   ; ok        // is pointed by CFA
 393+ 6500             >                endif           ; ok        // for other definitions it "points" the correct handler
 393+ 6500             >                // Use of "; ok" to suppress "warning[fwdref]"
 393+ 6500             >
 393+ 6500             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 394+ 6500                                                              // de has dictionary pointer
 395+ 6500 D1                               pop     de
 396+ 6501              Find_VocabularyLoop:
 397+ 6501 E1                               pop     hl                  // string pointer to search for
 398+ 6502 E5                               push    hl                  // keep it on stack too for the end.
 399+ 6503 1A                               ld      a, (de)             // save NFA length byte
 400+ 6504 08                               ex      af,af'              // for later use (!)
 401+ 6505 1A                               ld      a, (de)             // reload NFA length byte
 402+ 6506 AE                               xor     (hl)                // check if same length
 403+ 6507 E6 3F                            and     $3F                 // by resetting 3 high bits (flags)
 404+ 6509                                  // word an text haven't the same length, skip to next vocabulary entry
 405+ 6509 20 2C                            jr      nz, Find_DifferentLenght
 406+ 650B
 407+ 650B              Find_ThisWord:  // begin loop
 408+ 650B 23                                   inc     hl
 409+ 650C 13                                   inc     de
 410+ 650D 1A                                   ld      a, (de)
 411+ 650E                                      // case insensitive option - begin
 412+ 650E C5                                   push    bc
 413+ 650F E6 80                                and     $80                 // split A in msb and the rest
 414+ 6511 47                                   ld      b, a
 415+ 6512 1A                                   ld      a, (de)
 416+ 6513 E6 7F                                and     $7F                 // ... the rest (lower 7 bits)
 417+ 6515 CD B3 64                             call    Case_Sensitive      // uppercase routine
 418+ 6518 4F                                   ld      c, a
 419+ 6519 7E                                   ld      a, (hl)
 420+ 651A CD B3 64                             call    Case_Sensitive      // uppercase routine
 421+ 651D A9                                   xor     c
 422+ 651E A8                                   xor     b
 423+ 651F C1                                   pop     bc
 424+ 6520                                      // case insensitive option - end
 425+ 6520 87                                   add     a                   // ignore msb during compare
 426+ 6521 20 12                                jr      nz, Find_DidntMatch  // jump if doesn't match (*)
 427+ 6523
 428+ 6523                                  // loop back until last byte msb is found set
 429+ 6523                                  // that bit marks the ending char of this word
 430+ 6523 30 E6                            jr      nc, Find_ThisWord
 431+ 6525
 432+ 6525                                  // match found !
 433+ 6525 21 03 00                             ld      hl, 3               // 3 bytes for CFA offset to skip LFA
 434+ 6528 19                                   add     hl, de
 435+ 6529 E3                                   ex      (sp), hl            // CFA on stack and drop addr
 436+ 652A 08                                   ex      af, af'             // retrieve NFA byte (!)
 437+ 652B 5F                                   ld      e, a
 438+ 652C 16 00                                ld      d, 0
 439+ 652E
 440+ 652E
 441+ 652E 21 01 00                             ld      hl, 1
 442+ 6531                                      psh2
 442+ 6531 D5          >                push    de
 442+ 6532 E5          >                push    hl
 442+ 6533 DD E9       >                jp      (ix)
 443+ 6535
 444+ 6535              Find_DidntMatch: // didn't match (*)
 445+ 6535 38 05                            jr      c,  Find_WordEnd   // jump if not end of word (**)
 446+ 6537
 447+ 6537              Find_DifferentLenght:
 448+ 6537                              // consume chars until the end of the word
 449+ 6537                              // that is last byte msb is found set
 450+ 6537 13                               inc     de
 451+ 6538 1A                               ld      a, (de)
 452+ 6539 87                               add     a, a
 453+ 653A 30 FB                        jr      nc, Find_DifferentLenght
 454+ 653C
 455+ 653C              Find_WordEnd:   // word-end  found (**)
 456+ 653C                              // take LFA and use it
 457+ 653C 13                           inc     de
 458+ 653D EB                           ex      de, hl
 459+ 653E 5E                           ld      e, (hl)
 460+ 653F 23                           inc     hl
 461+ 6540 56                           ld      d, (hl)
 462+ 6541 7A                           ld      a, d
 463+ 6542 B3                           or      e
 464+ 6543
 465+ 6543                          // loop until end of vocabulary
 466+ 6543 20 BC                    jr      nz, Find_VocabularyLoop
 467+ 6545
 468+ 6545 E1                       pop     hl              // with this, it leaves addr unchanged
 469+ 6546 21 00 00                 ld      hl, FALSE_FLAG
 470+ 6549
 471+ 6549                          psh1
 471+ 6549 E5          >                push    hl
 471+ 654A DD E9       >                jp      (ix)
 472+ 654C
 473+ 654C              //  ______________________________________________________________________
 474+ 654C              //
 475+ 654C              // enclose      a c -- a  n1 n2 n3
 476+ 654C              // starting from a, using delimiter c, determines the offsets:
 477+ 654C              //   n1   the first character non-delimiter
 478+ 654C              //   n2   the first delimiter after the text
 479+ 654C              //   n3   the first character non enclosed.
 480+ 654C              // This procedure does not go beyond a 'nul' ASCII (0x00) that represents
 481+ 654C              // an uncoditional delimiter.
 482+ 654C              // Examples:
 483+ 654C              //   i:	c  c  x  x  x  c  x	 -- 2  5  6
 484+ 654C              //  ii:	c  c  x  x  x  'nul' -- 2  5  5
 485+ 654C              // iii:	c  c  'nul'          -- 2  3  2
 486+ 654C                              New_Def ENCLOSE, "ENCLOSE", is_code, is_normal
 486+ 654C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 486+ 654C             >
 486+ 654C             >                // dummy db directives used to calculate length of namec
 486+ 654C 45 4E 43 4C >                db      "ENCLOSE"
 486+ 6550 4F 53 45    >
 486+ 6553             >len_NFA         defl    $ - temp_NFA
 486+ 6553             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 486+ 654C             >
 486+ 654C 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 486+ 654D 45 4E 43 4C >                db      "ENCLOSE"               // name string in 7-bit ascii, but
 486+ 6551 4F 53 45    >
 486+ 6554             >                org     $-1                 // alter last byte of Name just above to set
 486+ 6553 C5          >                db      {b $} | END_BIT     // msb as name end
 486+ 6554             >
 486+ 6554 F5 64       >                dw      last_NFA            // Link to previous definition Name
 486+ 6556             >ENCLOSE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 486+ 6556 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 486+ 6556             >                else
 486+ 6556 58 65       >                dw      $ + 2   ; ok        // is pointed by CFA
 486+ 6558             >                endif           ; ok        // for other definitions it "points" the correct handler
 486+ 6558             >                // Use of "; ok" to suppress "warning[fwdref]"
 486+ 6558             >
 486+ 6558             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 487+ 6558 D1                           pop     de                  //  e has the character
 488+ 6559 E1                           pop     hl                  // hl has the string address
 489+ 655A E5                           push    hl
 490+ 655B 7B                           ld      a, e
 491+ 655C 11 FF FF                     ld      de, -1              // let's start from -1
 492+ 655F 2B                           dec     hl
 493+ 6560              Enclose_NonDelimiter:
 494+ 6560                              // find first non delimiter
 495+ 6560 23                               inc     hl
 496+ 6561 13                               inc     de
 497+ 6562 BE                               cp      (hl)
 498+ 6563 28 FB                        jr      z, Enclose_NonDelimiter
 499+ 6565 D5                           push    de
 500+ 6566
 501+ 6566 C5                           push    bc                  // save Instruction Pointer
 502+ 6567
 503+ 6567 4F                           ld      c, a                // save char
 504+ 6568 7E                           ld      a, (hl)
 505+ 6569 A7                           and     a                   // stop if 0x00
 506+ 656A 20 07                        jr      nz, Enclose_NextChar
 507+ 656C
 508+ 656C                              /// case iii. no more character in string
 509+ 656C C1                               pop     bc                  // restore Instruction Pointer
 510+ 656D 13                               inc     de
 511+ 656E D5                               push    de
 512+ 656F 1B                               dec     de
 513+ 6570 D5                               push    de
 514+ 6571                                  next
 514+ 6571 DD E9       >                jp      (ix)
 515+ 6573              Enclose_NextChar:
 516+ 6573 79                               ld      a, c
 517+ 6574 23                               inc     hl
 518+ 6575 13                               inc     de
 519+ 6576 BE                               cp      (hl)
 520+ 6577 20 06                            jr      nz, Enclose_NonSeparator
 521+ 6579
 522+ 6579                                      // case i. first non enclosed
 523+ 6579 C1                                   pop     bc                  // restore Instruction Pointer
 524+ 657A D5                                   push    de
 525+ 657B 13                                   inc     de
 526+ 657C D5                                   push    de
 527+ 657D                                      next
 527+ 657D DD E9       >                jp      (ix)
 528+ 657F              Enclose_NonSeparator:
 529+ 657F 7E                               ld      a, (hl)
 530+ 6580 A7                               and     a
 531+ 6581 20 F0                        jr      nz, Enclose_NextChar
 532+ 6583
 533+ 6583                              // case ii. separator & terminator
 534+ 6583 C1                           pop     bc                  // restore Instruction Pointer
 535+ 6584 D5                           push    de
 536+ 6585 D5                           push    de
 537+ 6586                              next
 537+ 6586 DD E9       >                jp      (ix)
 538+ 6588
 539+ 6588              //  ______________________________________________________________________
 540+ 6588              //
 541+ 6588              // (map)        a2 a1 n c1 -- c2
 542+ 6588              // translate character c1 using mapping string a2 and a2
 543+ 6588              // if c1 is not present within string a1 then
 544+ 6588              // c2 = c2 if it is not translated. n is the length of both a1 and a2.
 545+ 6588                              New_Def C_MAP, "(MAP)", is_code, is_normal
 545+ 6588             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 545+ 6588             >
 545+ 6588             >                // dummy db directives used to calculate length of namec
 545+ 6588 28 4D 41 50 >                db      "(MAP)"
 545+ 658C 29          >
 545+ 658D             >len_NFA         defl    $ - temp_NFA
 545+ 658D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 545+ 6588             >
 545+ 6588 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 545+ 6589 28 4D 41 50 >                db      "(MAP)"               // name string in 7-bit ascii, but
 545+ 658D 29          >
 545+ 658E             >                org     $-1                 // alter last byte of Name just above to set
 545+ 658D A9          >                db      {b $} | END_BIT     // msb as name end
 545+ 658E             >
 545+ 658E 4C 65       >                dw      last_NFA            // Link to previous definition Name
 545+ 6590             >C_MAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 545+ 6590 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 545+ 6590             >                else
 545+ 6590 92 65       >                dw      $ + 2   ; ok        // is pointed by CFA
 545+ 6592             >                endif           ; ok        // for other definitions it "points" the correct handler
 545+ 6592             >                // Use of "; ok" to suppress "warning[fwdref]"
 545+ 6592             >
 545+ 6592             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 546+ 6592 D9                           exx
 547+ 6593 E1                           pop     hl
 548+ 6594 7D                           ld      a, l
 549+ 6595 C1                           pop     bc
 550+ 6596 E1                           pop     hl
 551+ 6597 50                           ld      d, b
 552+ 6598 59                           ld      e, c
 553+ 6599 ED B1                        cpir
 554+ 659B E1                           pop     hl
 555+ 659C 20 05                        jr      nz, C_Map_Then
 555+ 659E
 556+ 659E 19                               add     hl, de
 557+ 659F 2B                               dec     hl
 558+ 65A0 ED 42                            sbc     hl, bc
 559+ 65A2 7E                               ld      a, (hl)
 560+ 65A3              C_Map_Then:
 561+ 65A3 6F                           ld      l, a
 562+ 65A4 26 00                        ld      h, 0
 563+ 65A6 E5                           push    hl
 564+ 65A7 D9                           exx
 565+ 65A8                              next
 565+ 65A8 DD E9       >                jp      (ix)
 566+ 65AA
 567+ 65AA              //  ______________________________________________________________________
 568+ 65AA              //
 569+ 65AA              // (compare)    a1 a2 n -- b
 570+ 65AA              // this word performs a lexicographic compare of n bytes of text at address a1
 571+ 65AA              // with n bytes of text at address a2. It returns numeric a value:
 572+ 65AA              //  0 : if strings are equal
 573+ 65AA              // +1 : if string at a1 greater than string at a2
 574+ 65AA              // -1 : if string at a1 less than string at a2
 575+ 65AA              // strings can be 256 bytes in length at most.
 576+ 65AA                              New_Def C_COMPARE, "(COMPARE)", is_code, is_normal
 576+ 65AA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 576+ 65AA             >
 576+ 65AA             >                // dummy db directives used to calculate length of namec
 576+ 65AA 28 43 4F 4D >                db      "(COMPARE)"
 576+ 65AE 50 41 52 45 >
 576+ 65B2 29          >
 576+ 65B3             >len_NFA         defl    $ - temp_NFA
 576+ 65B3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 576+ 65AA             >
 576+ 65AA 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 576+ 65AB 28 43 4F 4D >                db      "(COMPARE)"               // name string in 7-bit ascii, but
 576+ 65AF 50 41 52 45 >
 576+ 65B3 29          >
 576+ 65B4             >                org     $-1                 // alter last byte of Name just above to set
 576+ 65B3 A9          >                db      {b $} | END_BIT     // msb as name end
 576+ 65B4             >
 576+ 65B4 88 65       >                dw      last_NFA            // Link to previous definition Name
 576+ 65B6             >C_COMPARE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 576+ 65B6 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 576+ 65B6             >                else
 576+ 65B6 B8 65       >                dw      $ + 2   ; ok        // is pointed by CFA
 576+ 65B8             >                endif           ; ok        // for other definitions it "points" the correct handler
 576+ 65B8             >                // Use of "; ok" to suppress "warning[fwdref]"
 576+ 65B8             >
 576+ 65B8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 577+ 65B8 E1                           pop     hl                  // Number of bytes
 578+ 65B9 7D                           ld      a, l
 579+ 65BA E1                           pop     hl                  // hl points string a2
 580+ 65BB D1                           pop     de                  // hl points string a1
 581+ 65BC C5                           push    bc                  // Instruction pointer on stack
 582+ 65BD 47                           ld      b, a
 583+ 65BE              C_Compare_Loop:
 584+ 65BE 7E                               ld      a, (hl)
 585+ 65BF CD B3 64                         call    Case_Sensitive
 586+ 65C2 4F                               ld      c, a
 587+ 65C3 1A                               ld      a, (de)
 588+ 65C4 CD B3 64                         call    Case_Sensitive
 589+ 65C7 B9                               cp      c
 590+ 65C8 13                               inc     de
 591+ 65C9 23                               inc     hl
 592+ 65CA 28 0E                            jr      z, C_Compare_Equal
 593+ 65CC 38 05                                jr      c, C_Compare_NotLessThan  // If LessThan
 594+ 65CE 21 01 00                                 ld      hl, 1               // a1 gt a2
 595+ 65D1 18 03                                jr      C_Compare_Then      // Else
 596+ 65D3              C_Compare_NotLessThan:
 597+ 65D3 21 FF FF                                 ld      hl, -1              // a1 lt a2
 598+ 65D6              C_Compare_Then:                                 // Endif
 599+ 65D6 C1                                   pop     bc              // restore Instruction Pointer
 600+ 65D7
 601+ 65D7                                      psh1
 601+ 65D7 E5          >                push    hl
 601+ 65D8 DD E9       >                jp      (ix)
 602+ 65DA
 603+ 65DA              C_Compare_Equal:
 604+ 65DA 10 E2                        djnz    C_Compare_Loop
 605+ 65DC 21 00 00                     ld      hl, 0               // a1 eq a2
 606+ 65DF C1                           pop     bc                  // restore Instruction Pointer
 607+ 65E0
 608+ 65E0                              psh1
 608+ 65E0 E5          >                push    hl
 608+ 65E1 DD E9       >                jp      (ix)
 609+ 65E3
 610+ 65E3              //  ______________________________________________________________________
 611+ 65E3              //
 612+ 65E3              // emitc        c --
 613+ 65E3              // low level emit, calls ROM routine at #10 to send a character to
 614+ 65E3              // the the current channel (see SELECT to change stream-channel)
 615+ 65E3                              New_Def EMITC, "EMITC", is_code, is_normal
 615+ 65E3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 615+ 65E3             >
 615+ 65E3             >                // dummy db directives used to calculate length of namec
 615+ 65E3 45 4D 49 54 >                db      "EMITC"
 615+ 65E7 43          >
 615+ 65E8             >len_NFA         defl    $ - temp_NFA
 615+ 65E8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 615+ 65E3             >
 615+ 65E3 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 615+ 65E4 45 4D 49 54 >                db      "EMITC"               // name string in 7-bit ascii, but
 615+ 65E8 43          >
 615+ 65E9             >                org     $-1                 // alter last byte of Name just above to set
 615+ 65E8 C3          >                db      {b $} | END_BIT     // msb as name end
 615+ 65E9             >
 615+ 65E9 AA 65       >                dw      last_NFA            // Link to previous definition Name
 615+ 65EB             >EMITC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 615+ 65EB ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 615+ 65EB             >                else
 615+ 65EB ED 65       >                dw      $ + 2   ; ok        // is pointed by CFA
 615+ 65ED             >                endif           ; ok        // for other definitions it "points" the correct handler
 615+ 65ED             >                // Use of "; ok" to suppress "warning[fwdref]"
 615+ 65ED             >
 615+ 65ED             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 616+ 65ED E1                           pop     hl
 617+ 65EE 7D                           ld      a, l
 618+ 65EF              Emitc_Ptr:
 619+ 65EF C5                           push    bc
 620+ 65F0 DD E5                        push    ix
 621+ 65F2 D7                           rst     $10
 622+ 65F3 DD E1                        pop     ix
 623+ 65F5 C1                           pop     bc
 624+ 65F6 3E FF                        ld      a, 255            // max possible
 625+ 65F8 32 8C 5C                     ld      (SCR_CT), a
 626+ 65FB
 627+ 65FB                              next
 627+ 65FB DD E9       >                jp      (ix)
 628+ 65FD
 629+ 65FD              Emitc_Vec:
 630+ 65FD 42 66                        dw      C_Emit_Printable  // comma
 631+ 65FF 48 66                        dw      C_Emit_Bel        // bel
 632+ 6601 42 66                        dw      C_Emit_Printable  // bs
 633+ 6603 5D 66                        dw      C_Emit_Tab        // tab
 634+ 6605 42 66                        dw      C_Emit_Printable  // cr
 635+ 6607 63 66                        dw      C_Emit_NL         // lf (unix newline)
 636+ 6609 42 66                        dw      C_Emit_Printable  // blank
 637+ 660B 42 66                        dw      C_Emit_Printable  // blank
 638+ 660D
 639+ 660D              Emit_Selector_Start:
 640+ 660D 06                           db      $06                 // comma
 641+ 660E 07                           db      $07                 // bel
 642+ 660F 08                           db      $08                 // bs
 643+ 6610 09                           db      $09                 // tab
 644+ 6611 0D                           db      $0D                 // cr
 645+ 6612 0A                           db      $0A                 // lf (unix newline)
 646+ 6613 20                           db      $20
 647+ 6614              Emit_Selector_End:
 648+ 6614 20                           db      $20
 649+ 6615
 650+ 6615              //  ______________________________________________________________________
 651+ 6615              //
 652+ 6615              // (?emit)      c1 -- c2 | c1
 653+ 6615              // decode a character to be sent via EMIT
 654+ 6615              // search first the Emit_Selector table, if found jump to the corresponding routine in Emit_Vector
 655+ 6615              // the routine should resolve anything and convert the character anyway.
 656+ 6615                              New_Def C_EMIT, "(?EMIT)", is_code, is_normal
 656+ 6615             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 656+ 6615             >
 656+ 6615             >                // dummy db directives used to calculate length of namec
 656+ 6615 28 3F 45 4D >                db      "(?EMIT)"
 656+ 6619 49 54 29    >
 656+ 661C             >len_NFA         defl    $ - temp_NFA
 656+ 661C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 656+ 6615             >
 656+ 6615 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 656+ 6616 28 3F 45 4D >                db      "(?EMIT)"               // name string in 7-bit ascii, but
 656+ 661A 49 54 29    >
 656+ 661D             >                org     $-1                 // alter last byte of Name just above to set
 656+ 661C A9          >                db      {b $} | END_BIT     // msb as name end
 656+ 661D             >
 656+ 661D E3 65       >                dw      last_NFA            // Link to previous definition Name
 656+ 661F             >C_EMIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 656+ 661F ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 656+ 661F             >                else
 656+ 661F 21 66       >                dw      $ + 2   ; ok        // is pointed by CFA
 656+ 6621             >                endif           ; ok        // for other definitions it "points" the correct handler
 656+ 6621             >                // Use of "; ok" to suppress "warning[fwdref]"
 656+ 6621             >
 656+ 6621             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 657+ 6621 D1                           pop     de
 658+ 6622 7B                           ld      a, e                //  de has c1
 659+ 6623 E6 7F                        and     $7F                 // 7-bit ascii only
 660+ 6625 C5                           push    bc                  // save Instruction Pointer
 661+ 6626 01 08 00                     ld      bc, Emit_Selector_End - Emit_Selector_Start + 1
 662+ 6629 21 14 66                     ld      hl, Emit_Selector_End
 663+ 662C ED B9                        cpdr                        // search for c1 in Emit_Selector table, backward
 664+ 662E 20 0B                        jr      nz, C_Emit_Not_Found
 665+ 6630                                  // Found then decode it
 666+ 6630 21 FD 65                         ld      hl, Emitc_Vec
 667+ 6633 09                               add     hl, bc
 668+ 6634 09                               add     hl, bc
 669+ 6635 5E                               ld      e, (hl)
 670+ 6636 23                               inc     hl
 671+ 6637 56                               ld      d, (hl)
 672+ 6638 EB                               ex      de, hl
 673+ 6639 C1                               pop     bc                  // restore Instruction Pointer
 674+ 663A E9                               jp      (hl)                // one of the following labels
 675+ 663B              C_Emit_Not_Found:
 676+ 663B C1                           pop     bc                  // restore Instruction Pointer
 677+ 663C FE 20                        cp      BLANK_CHAR          // cp $20 non-printable check
 678+ 663E 30 02                        jr      nc, C_Emit_Printable
 679+ 6640 3E 00                            ld      a, NUL_CHAR         // NUL is never "printed"
 680+ 6642              C_Emit_Printable:
 681+ 6642 6F                           ld      l, a
 682+ 6643 26 00                        ld      h, 0
 683+ 6645
 684+ 6645                              psh1
 684+ 6645 E5          >                push    hl
 684+ 6646 DD E9       >                jp      (ix)
 685+ 6648
 686+ 6648              C_Emit_Bel:
 687+ 6648 C5                           push    bc                  // save Instruction Pointer
 688+ 6649 11 00 01                     ld      de, $0100
 689+ 664C 21 00 02                     ld      hl, $0200
 690+ 664F DD E5                        push    ix                  // save Next Pointer
 691+ 6651 CD B6 03                     call    $03B6               // bleep Standard-ROM routine
 692+ 6654 DD E1                        pop     ix                  // restore Next Pointer
 693+ 6656 C1                           pop     bc                  // restore Instruction Pointer
 694+ 6657 21 00 00                     ld      hl, NUL_CHAR
 695+ 665A
 696+ 665A                              psh1
 696+ 665A E5          >                push    hl
 696+ 665B DD E9       >                jp      (ix)
 697+ 665D
 698+ 665D 21 06 00     C_Emit_Tab:     ld      hl, COMMA_CHAR
 699+ 6660
 700+ 6660                              psh1
 700+ 6660 E5          >                push    hl
 700+ 6661 DD E9       >                jp      (ix)
 701+ 6663
 702+ 6663 21 0D 00     C_Emit_NL       ld      hl, CR_CHAR           // 0x0A --> 0x0D  à la Spectrum
 703+ 6666
 704+ 6666                              psh1
 704+ 6666 E5          >                push    hl
 704+ 6667 DD E9       >                jp      (ix)
 705+ 6669
 706+ 6669              //  ______________________________________________________________________
 707+ 6669
 708+ 6669              Key_Table:
 709+ 6669 E2                           db      $E2                 //  0: STOP  --> SYMBOL+A : ~
 710+ 666A C3                           db      $C3                 //  1: NOT   --> SYMBOL+S : |
 711+ 666B CD                           db      $CD                 //  2: STEP  --> SYMBOl+D : //
 712+ 666C CC                           db      $CC                 //  3: TO    --> SYMBOL+F : {
 713+ 666D CB                           db      $CB                 //  4: THEN  --> SYMBOL+G : }
 714+ 666E C6                           db      $C6                 //  5: AND   --> SYMBOL+Y : [
 715+ 666F C5                           db      $C5                 //  6: OR    --> SYMBOL+U : ]
 716+ 6670 AC                           db      $AC                 //  7: AT    --> SYMBOL+I : (C) copyright symbol
 717+ 6671 C7                           db      $C7                 //  8: <=
 718+ 6672 C8                           db      $C8                 //  9: >=
 719+ 6673 C9                           db      $C9                 // 10: <>    --> SYMBOL+W is the same as CAPS (toggle) SHIFT+2
 720+ 6674              Key_MapTo:
 721+ 6674 06                           db      $06                 // 10: SYMBOL+W is the same as CAPS (toggle) SHIFT+2
 722+ 6675 20                           db      $20                 //  9: not used
 723+ 6676 20                           db      $20                 //  8: not used
 724+ 6677 7F                           db      $7F                 //  7: SYMBOL+I : (C) copyright symbol
 725+ 6678 5D                           db      $5D                 //  6: SYMBOL+U : ]
 726+ 6679 5B                           db      $5B                 //  5: SYMBOL+Y : [
 727+ 667A 7D                           db      $7D                 //  4: SYMBOL+G : }
 728+ 667B 7B                           db      $7B                 //  3: SYMBOL+F : {
 729+ 667C 5C                           db      $5C                 //  2: SYMBOl+D : //
 730+ 667D 7C                           db      $7C                 //  1: SYMBOL+S : |
 731+ 667E 7E                           db      $7E                 //  0: SYMBOL+A : ~
 732+ 667F
 733+ 667F              //  ______________________________________________________________________
 734+ 667F              //
 735+ 667F              // key          -- c
 736+ 667F              // wait for a keypress
 737+ 667F              // This definition need Standard ROM Interrupt to be served
 738+ 667F
 739+ 667F                              New_Def KEY, "KEY", is_code, is_normal
 739+ 667F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 739+ 667F             >
 739+ 667F             >                // dummy db directives used to calculate length of namec
 739+ 667F 4B 45 59    >                db      "KEY"
 739+ 6682             >len_NFA         defl    $ - temp_NFA
 739+ 6682             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 739+ 667F             >
 739+ 667F 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 739+ 6680 4B 45 59    >                db      "KEY"               // name string in 7-bit ascii, but
 739+ 6683             >                org     $-1                 // alter last byte of Name just above to set
 739+ 6682 D9          >                db      {b $} | END_BIT     // msb as name end
 739+ 6683             >
 739+ 6683 15 66       >                dw      last_NFA            // Link to previous definition Name
 739+ 6685             >KEY:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 739+ 6685 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 739+ 6685             >                else
 739+ 6685 87 66       >                dw      $ + 2   ; ok        // is pointed by CFA
 739+ 6687             >                endif           ; ok        // for other definitions it "points" the correct handler
 739+ 6687             >                // Use of "; ok" to suppress "warning[fwdref]"
 739+ 6687             >
 739+ 6687             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 740+ 6687
 741+ 6687 C5                           push    bc                  // save Instruction Pointer
 742+ 6688 DD E5                        push    ix
 743+ 668A
 744+ 668A ED 73 92 63                  ld      (SP_Saved), sp      // be sure to not to be paged out.
 745+ 668E 31 61 63                     ld      sp, Cold_origin - 5 // maybe $4000 in the future...
 746+ 6691 FD CB 01 AE                  res     5, (iy + 1)         // FLAGS (5C3A+1)
 747+ 6695
 748+ 6695              Key_Wait:
 749+ 6695 76                               halt
 750+ 6696 3E 02                            ld      a, 2                // selec channel #2 (Upper Video)
 751+ 6698 CD 01 16                         call    $1601               // SELECT Standard-ROM Routine
 752+ 669B
 753+ 669B                                  // software-flash: flips face every 320 ms
 754+ 669B 3E 10                            ld      a, $10              // Timing based
 755+ 669D FD A6 3E                         and     (iy + $3E)          // FRAMES (5C3A+3E)
 756+ 66A0
 757+ 66A0 3A 8C 63                         ld      a, (Block_Face)     // see origin.asm
 758+ 66A3 20 0C                            jr      nz, Key_Cursor
 759+ 66A5 3A 8D 63                             ld      a, (Half_Face)      // see origin.asm
 760+ 66A8 FD CB 30 5E                          bit     3, (iy + $30)       // FLAGS2 (5C3A+$30) that is CAPS-LOCK
 761+ 66AC 28 03                                jr      z, Key_Cursor
 762+ 66AE 3A 8E 63                                 ld      a, (Underscore_Face) // see origin
 763+ 66B1              Key_Cursor:
 764+ 66B1 D7                               rst     $10
 765+ 66B2 3E 08                            ld      a, BACKSPACE_CHAR    // backspace
 766+ 66B4 D7                               rst     $10
 767+ 66B5
 768+ 66B5 FD CB 01 6E                      bit     5, (iy + 1)         // FLAGS (5C3A+1)
 769+ 66B9 28 DA                        jr      z, Key_Wait
 770+ 66BB
 771+ 66BB 76                           halt    // this is to sync flashing cursor.
 772+ 66BC
 773+ 66BC 3E 20                        ld      a, BLANK_CHAR       // space to blank cursor
 774+ 66BE D7                           rst     $10
 775+ 66BF 3E 08                        ld      a, BACKSPACE_CHAR   // backspace
 776+ 66C1 D7                           rst     $10
 777+ 66C2 3A 08 5C                     ld      a, (LASTK)          // get typed character (5C08)
 778+ 66C5
 779+ 66C5                              // decode character from above table
 780+ 66C5 21 69 66                     ld      hl, Key_Table
 781+ 66C8 01 0B 00                     ld      bc, $000B
 782+ 66CB ED B1                        cpir
 783+ 66CD 20 05                        jr      nz, Key_DontMap
 784+ 66CF 21 74 66                         ld      hl, Key_MapTo
 785+ 66D2 09                               add     hl, bc
 786+ 66D3 7E                               ld      a, (hl)
 787+ 66D4 FE 06        Key_DontMap:    cp      $06                 // CAPS-LOCK management
 788+ 66D6 20 09                        jr      nz, Key_NoCapsLock
 789+ 66D8 21 6A 5C                         ld      hl, $5C6A           // FLAGS2
 790+ 66DB 7E                               ld      a, (hl)
 791+ 66DC EE 08                            xor     $08
 792+ 66DE 77                               ld      (hl), a
 793+ 66DF 3E 00                            ld      a, NUL_CHAR
 794+ 66E1 6F           Key_NoCapsLock: ld      l, a
 795+ 66E2 26 00                        ld      h, 0                // Prepare TOS
 796+ 66E4
 797+ 66E4 3A 48 5C                     ld      a, ($5C48)          // BORDCR system variable
 798+ 66E7 1F                           rra
 799+ 66E8 1F                           rra
 800+ 66E9 1F                           rra
 801+ 66EA F6 18                        or      $18                 // quick'n'dirty click
 802+ 66EC D3 FE                        out     ($fe), a
 803+ 66EE 06 00                        ld      b, 0
 804+ 66F0 10 FE                        djnz    $                   // wait loop
 805+ 66F2 EE 18                        xor     $18
 806+ 66F4 D3 FE                        out     ($fe), a
 807+ 66F6
 808+ 66F6 ED 7B 92 63                  ld      sp, (SP_Saved)
 809+ 66FA
 810+ 66FA DD E1                        pop     ix
 811+ 66FC C1                           pop     bc                  // Restore Instruction Pointer
 812+ 66FD
 813+ 66FD                              psh1
 813+ 66FD E5          >                push    hl
 813+ 66FE DD E9       >                jp      (ix)
 814+ 6700
 815+ 6700              //  ______________________________________________________________________
 816+ 6700              //
 817+ 6700              // ?terminal    -- FALSE | TRUE
 818+ 6700              // test for BREAK keypress
 819+ 6700                              New_Def QTERMINAL, "?TERMINAL", is_code, is_normal
 819+ 6700             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 819+ 6700             >
 819+ 6700             >                // dummy db directives used to calculate length of namec
 819+ 6700 3F 54 45 52 >                db      "?TERMINAL"
 819+ 6704 4D 49 4E 41 >
 819+ 6708 4C          >
 819+ 6709             >len_NFA         defl    $ - temp_NFA
 819+ 6709             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 819+ 6700             >
 819+ 6700 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 819+ 6701 3F 54 45 52 >                db      "?TERMINAL"               // name string in 7-bit ascii, but
 819+ 6705 4D 49 4E 41 >
 819+ 6709 4C          >
 819+ 670A             >                org     $-1                 // alter last byte of Name just above to set
 819+ 6709 CC          >                db      {b $} | END_BIT     // msb as name end
 819+ 670A             >
 819+ 670A 7F 66       >                dw      last_NFA            // Link to previous definition Name
 819+ 670C             >QTERMINAL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 819+ 670C ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 819+ 670C             >                else
 819+ 670C 0E 67       >                dw      $ + 2   ; ok        // is pointed by CFA
 819+ 670E             >                endif           ; ok        // for other definitions it "points" the correct handler
 819+ 670E             >                // Use of "; ok" to suppress "warning[fwdref]"
 819+ 670E             >
 819+ 670E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 820+ 670E 21 00 00                     ld      hl, 0
 821+ 6711 ED 73 92 63                  ld      (SP_Saved), sp
 822+ 6715 31 61 63                     ld      sp, Cold_origin - 5
 823+ 6718 CD 54 1F                     call    $1F54
 824+ 671B ED 7B 92 63                  ld      sp, (SP_Saved)
 825+ 671F
 826+ 671F 38 01                        jr      c, QTerminal_NoBreak
 827+ 6721 2C                               inc     l                  // quick TRUE_FLAG
 828+ 6722              QTerminal_NoBreak:
 829+ 6722
 830+ 6722                              psh1
 830+ 6722 E5          >                push    hl
 830+ 6723 DD E9       >                jp      (ix)
 831+ 6725
 832+ 6725
 833+ 6725              //  ______________________________________________________________________
 834+ 6725              //
 835+ 6725              // ZX Spectrum Next - Low Level disk primitives.
 836+ 6725              // this include is "here" for backward compatibility
 837+ 6725
 838+ 6725                              include "next-opt0.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/next-opt0.asm
   1++6725              //  ______________________________________________________________________
   2++6725              //
   3++6725              //  next-opt.asm
   4++6725              //
   5++6725              //  ZX Spectrum Next - peculiar definitions
   6++6725              //  ______________________________________________________________________
   7++6725
   8++6725              //  ______________________________________________________________________
   9++6725              //
  10++6725              // f_seek       d u -- f
  11++6725              // Seek to position d in file-handle u.
  12++6725              // Return a false-flag 0 on success, True flag on error
  13++6725                              New_Def F_SEEK, "F_SEEK", is_code, is_normal
  13++6725             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13++6725             >
  13++6725             >                // dummy db directives used to calculate length of namec
  13++6725 46 5F 53 45 >                db      "F_SEEK"
  13++6729 45 4B       >
  13++672B             >len_NFA         defl    $ - temp_NFA
  13++672B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13++6725             >
  13++6725 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  13++6726 46 5F 53 45 >                db      "F_SEEK"               // name string in 7-bit ascii, but
  13++672A 45 4B       >
  13++672C             >                org     $-1                 // alter last byte of Name just above to set
  13++672B CB          >                db      {b $} | END_BIT     // msb as name end
  13++672C             >
  13++672C 00 67       >                dw      last_NFA            // Link to previous definition Name
  13++672E             >F_SEEK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  13++672E ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  13++672E             >                else
  13++672E 30 67       >                dw      $ + 2   ; ok        // is pointed by CFA
  13++6730             >                endif           ; ok        // for other definitions it "points" the correct handler
  13++6730             >                // Use of "; ok" to suppress "warning[fwdref]"
  13++6730             >
  13++6730             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14++6730 E1                           pop     hl                  // file-handle
  15++6731 7D                           ld      a, l                // file-handle
  16++6732 60                           ld      h, b                // save Intruction Pointer
  17++6733 69                           ld      l, c
  18++6734 C1                           pop     bc                  // bc has high-word of d
  19++6735 D1                           pop     de
  20++6736 DD E5                        push    ix
  21++6738 E5                           push    hl                  // save Instruction Pointer
  22++6739 DD 21 00 00                  ld      ix, 0
  23++673D CF                           rst     $08
  24++673E 9F                           db      $9F
  25++673F C1                           pop     bc                  // restore Instruction Pointer
  26++6740 DD E1                        pop     ix
  27++6742 ED 62                        sbc     hl, hl              // to get 0 or -1
  28++6744
  29++6744                              psh1
  29++6744 E5          >                push    hl
  29++6745 DD E9       >                jp      (ix)
  30++6747
  31++6747              //  ______________________________________________________________________
  32++6747              //
  33++6747              // f_fgetpos    u -- d f
  34++6747              // Seek to position d in file-handle u.
  35++6747              // Return a false-flag 0 on success, True flag on error
  36++6747                              New_Def F_FGETPOS, "F_FGETPOS", is_code, is_normal
  36++6747             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  36++6747             >
  36++6747             >                // dummy db directives used to calculate length of namec
  36++6747 46 5F 46 47 >                db      "F_FGETPOS"
  36++674B 45 54 50 4F >
  36++674F 53          >
  36++6750             >len_NFA         defl    $ - temp_NFA
  36++6750             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  36++6747             >
  36++6747 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  36++6748 46 5F 46 47 >                db      "F_FGETPOS"               // name string in 7-bit ascii, but
  36++674C 45 54 50 4F >
  36++6750 53          >
  36++6751             >                org     $-1                 // alter last byte of Name just above to set
  36++6750 D3          >                db      {b $} | END_BIT     // msb as name end
  36++6751             >
  36++6751 25 67       >                dw      last_NFA            // Link to previous definition Name
  36++6753             >F_FGETPOS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  36++6753 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  36++6753             >                else
  36++6753 55 67       >                dw      $ + 2   ; ok        // is pointed by CFA
  36++6755             >                endif           ; ok        // for other definitions it "points" the correct handler
  36++6755             >                // Use of "; ok" to suppress "warning[fwdref]"
  36++6755             >
  36++6755             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  37++6755 E1                           pop     hl
  38++6756 7D                           ld      a, l                // file-handle
  39++6757 DD E5                        push    ix
  40++6759 C5                           push    bc
  41++675A CF                           rst     $08
  42++675B A0                           db      $A0
  43++675C E1                           pop     hl                  // restore Instruction Pointer
  44++675D DD E1                        pop     ix
  45++675F D5                           push    de
  46++6760 C5                           push    bc
  47++6761 44                           ld      b, h                // restore Instruction Pointer
  48++6762 4D                           ld      c, l
  49++6763 ED 62                        sbc     hl, hl
  50++6765
  51++6765                              psh1
  51++6765 E5          >                push    hl
  51++6766 DD E9       >                jp      (ix)
  52++6768
  53++6768              //  ______________________________________________________________________
  54++6768              //
  55++6768              // f_read       a b u -- n f
  56++6768              // Read b bytes from file-handle u to address a
  57++6768              // Return the actual number n of bytes read
  58++6768              // Return 0 on success, True flag on error
  59++6768                              New_Def F_READ, "F_READ", is_code, is_normal
  59++6768             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  59++6768             >
  59++6768             >                // dummy db directives used to calculate length of namec
  59++6768 46 5F 52 45 >                db      "F_READ"
  59++676C 41 44       >
  59++676E             >len_NFA         defl    $ - temp_NFA
  59++676E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  59++6768             >
  59++6768 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  59++6769 46 5F 52 45 >                db      "F_READ"               // name string in 7-bit ascii, but
  59++676D 41 44       >
  59++676F             >                org     $-1                 // alter last byte of Name just above to set
  59++676E C4          >                db      {b $} | END_BIT     // msb as name end
  59++676F             >
  59++676F 47 67       >                dw      last_NFA            // Link to previous definition Name
  59++6771             >F_READ:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  59++6771 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  59++6771             >                else
  59++6771 73 67       >                dw      $ + 2   ; ok        // is pointed by CFA
  59++6773             >                endif           ; ok        // for other definitions it "points" the correct handler
  59++6773             >                // Use of "; ok" to suppress "warning[fwdref]"
  59++6773             >
  59++6773             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  60++6773
  61++6773 50                           ld      d, b
  62++6774 59                           ld      e, c
  63++6775 E1                           pop     hl
  64++6776 7D                           ld      a, l                // file-handle
  65++6777 C1                           pop     bc                  // bc has bytes to read
  66++6778 DD E3                        ex      (sp), ix            // ix has address
  67++677A D5                           push    de                  // Save Instruction pointer
  68++677B CF                           rst     $08
  69++677C 9D                           db      $9D
  70++677D C1                           pop     bc                  // Restore Instruction pointer
  71++677E DD E1                        pop     ix                  // Restore ix
  72++6780 D5                           push    de                  // bytes written
  73++6781 ED 62                        sbc     hl, hl
  74++6783
  75++6783                              psh1
  75++6783 E5          >                push    hl
  75++6784 DD E9       >                jp      (ix)
  76++6786
  77++6786              //  ______________________________________________________________________
  78++6786              //
  79++6786              // f_write      a b u -- n f
  80++6786              // Write bytes currently stored at address a to file-handle u.
  81++6786              // Return the actual n bytes written and 0 on success, True flag on error.
  82++6786                              New_Def F_WRITE, "F_WRITE", is_code, is_normal
  82++6786             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  82++6786             >
  82++6786             >                // dummy db directives used to calculate length of namec
  82++6786 46 5F 57 52 >                db      "F_WRITE"
  82++678A 49 54 45    >
  82++678D             >len_NFA         defl    $ - temp_NFA
  82++678D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  82++6786             >
  82++6786 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  82++6787 46 5F 57 52 >                db      "F_WRITE"               // name string in 7-bit ascii, but
  82++678B 49 54 45    >
  82++678E             >                org     $-1                 // alter last byte of Name just above to set
  82++678D C5          >                db      {b $} | END_BIT     // msb as name end
  82++678E             >
  82++678E 68 67       >                dw      last_NFA            // Link to previous definition Name
  82++6790             >F_WRITE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  82++6790 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  82++6790             >                else
  82++6790 92 67       >                dw      $ + 2   ; ok        // is pointed by CFA
  82++6792             >                endif           ; ok        // for other definitions it "points" the correct handler
  82++6792             >                // Use of "; ok" to suppress "warning[fwdref]"
  82++6792             >
  82++6792             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  83++6792
  84++6792 50                           ld      d, b
  85++6793 59                           ld      e, c
  86++6794 E1                           pop     hl
  87++6795 7D                           ld      a, l                // file-handle
  88++6796 C1                           pop     bc                  // bc has bytes to read
  89++6797 DD E3                        ex      (sp), ix            // ix has address
  90++6799 D5                           push    de                  // Save Instruction pointer
  91++679A CF                           rst     $08
  92++679B 9E                           db      $9E
  93++679C C1                           pop     bc                  // Restore Instruction pointer
  94++679D DD E1                        pop     ix                  // Restore ix
  95++679F D5                           push    de                  // bytes written
  96++67A0 ED 62                        sbc     hl, hl
  97++67A2
  98++67A2                              psh1
  98++67A2 E5          >                push    hl
  98++67A3 DD E9       >                jp      (ix)
  99++67A5
 100++67A5              //  ______________________________________________________________________
 101++67A5              //
 102++67A5              // f_close      u -- f
 103++67A5              // Close file-handle u.
 104++67A5              // Return 0 on success, True flag on error
 105++67A5
 106++67A5                              New_Def F_CLOSE, "F_CLOSE", is_code, is_normal
 106++67A5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 106++67A5             >
 106++67A5             >                // dummy db directives used to calculate length of namec
 106++67A5 46 5F 43 4C >                db      "F_CLOSE"
 106++67A9 4F 53 45    >
 106++67AC             >len_NFA         defl    $ - temp_NFA
 106++67AC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 106++67A5             >
 106++67A5 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 106++67A6 46 5F 43 4C >                db      "F_CLOSE"               // name string in 7-bit ascii, but
 106++67AA 4F 53 45    >
 106++67AD             >                org     $-1                 // alter last byte of Name just above to set
 106++67AC C5          >                db      {b $} | END_BIT     // msb as name end
 106++67AD             >
 106++67AD 86 67       >                dw      last_NFA            // Link to previous definition Name
 106++67AF             >F_CLOSE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 106++67AF ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 106++67AF             >                else
 106++67AF B1 67       >                dw      $ + 2   ; ok        // is pointed by CFA
 106++67B1             >                endif           ; ok        // for other definitions it "points" the correct handler
 106++67B1             >                // Use of "; ok" to suppress "warning[fwdref]"
 106++67B1             >
 106++67B1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 107++67B1
 108++67B1 E1                           pop     hl
 109++67B2 7D                           ld      a, l                // file-handle
 110++67B3 DD E5                        push    ix
 111++67B5 C5                           push    bc                  // Save Instruction pointer
 112++67B6 CF                           rst     $08
 113++67B7 9B                           db      $9B
 114++67B8 C1                           pop     bc
 115++67B9 DD E1                        pop     ix
 116++67BB ED 62                        sbc     hl, hl
 117++67BD
 118++67BD                              psh1
 118++67BD E5          >                push    hl
 118++67BE DD E9       >                jp      (ix)
 119++67C0
 120++67C0              //  ______________________________________________________________________
 121++67C0              //
 122++67C0              // f_open       a1 a2 b -- u f
 123++67C0              // open a file
 124++67C0              // a1 (filespec) is a null-terminated string, such as produced by ," definition
 125++67C0              // a2 is address to an 8-byte header data used in some cases.
 126++67C0              // b is access mode-byte, that is a combination of:
 127++67C0              // any/all of:
 128++67C0              //   esx_mode_read          $01 request read access
 129++67C0              //   esx_mode_write         $02 request write access
 130++67C0              //   esx_mode_use_header    $40 read/write +3DOS header
 131++67C0              // plus one of:
 132++67C0              //   esx_mode_open_exist    $00 only open existing file
 133++67C0              //   esx_mode_open_creat    $08 open existing or create file
 134++67C0              //   esx_mode_creat_noexist $04 create new file, error if exists
 135++67C0              //   esx_mode_creat_trunc   $0c create new file, delete existing
 136++67C0              // Return file-handle u and 0 on success, True flag on error
 137++67C0                              New_Def F_OPEN, "F_OPEN", is_code, is_normal
 137++67C0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 137++67C0             >
 137++67C0             >                // dummy db directives used to calculate length of namec
 137++67C0 46 5F 4F 50 >                db      "F_OPEN"
 137++67C4 45 4E       >
 137++67C6             >len_NFA         defl    $ - temp_NFA
 137++67C6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 137++67C0             >
 137++67C0 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 137++67C1 46 5F 4F 50 >                db      "F_OPEN"               // name string in 7-bit ascii, but
 137++67C5 45 4E       >
 137++67C7             >                org     $-1                 // alter last byte of Name just above to set
 137++67C6 CE          >                db      {b $} | END_BIT     // msb as name end
 137++67C7             >
 137++67C7 A5 67       >                dw      last_NFA            // Link to previous definition Name
 137++67C9             >F_OPEN:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 137++67C9 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 137++67C9             >                else
 137++67C9 CB 67       >                dw      $ + 2   ; ok        // is pointed by CFA
 137++67CB             >                endif           ; ok        // for other definitions it "points" the correct handler
 137++67CB             >                // Use of "; ok" to suppress "warning[fwdref]"
 137++67CB             >
 137++67CB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 138++67CB 60                           ld      h, b                // Save Instruction pointer
 139++67CC 69                           ld      l, c
 140++67CD C1                           pop     bc                  // file-mode
 141++67CE 41                           ld      b, c                // file-mode
 142++67CF D1                           pop     de                  // 8-bytes buffer if any
 143++67D0 DD E3                        ex      (sp), ix            // filespec nul-terminated
 144++67D2 E5                           push    hl                  // Save Instruction pointer
 145++67D3 3E 2A                        ld      a, "*"
 146++67D5 CF                           rst     $08
 147++67D6 9A                           db      $9A
 148++67D7 C1                           pop     bc
 149++67D8 DD E1                        pop     ix
 150++67DA ED 62                        sbc     hl, hl
 151++67DC 5F                           ld      e, a
 152++67DD 16 00                        ld      d, 0
 153++67DF
 154++67DF
 155++67DF                              psh2
 155++67DF D5          >                push    de
 155++67E0 E5          >                push    hl
 155++67E1 DD E9       >                jp      (ix)
 156++67E3
 157++67E3              //   \ CREATE FILENAME ," test.txt"   \ new Counted String
 158++67E3              //   \ FILENAME 1+ PAD 1 F_OPEN
 159++67E3              //   \ DROP
 160++67E3              //   \ F_CLOSE
 161++67E3
 162++67E3              //  ______________________________________________________________________
 163++67E3              //
 164++67E3              // f_sync      u -- f
 165++67E3              // Close file-handle u.
 166++67E3              // Return 0 on success, True flag on error
 167++67E3
 168++67E3                              New_Def F_SYNC, "F_SYNC", is_code, is_normal
 168++67E3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 168++67E3             >
 168++67E3             >                // dummy db directives used to calculate length of namec
 168++67E3 46 5F 53 59 >                db      "F_SYNC"
 168++67E7 4E 43       >
 168++67E9             >len_NFA         defl    $ - temp_NFA
 168++67E9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 168++67E3             >
 168++67E3 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 168++67E4 46 5F 53 59 >                db      "F_SYNC"               // name string in 7-bit ascii, but
 168++67E8 4E 43       >
 168++67EA             >                org     $-1                 // alter last byte of Name just above to set
 168++67E9 C3          >                db      {b $} | END_BIT     // msb as name end
 168++67EA             >
 168++67EA C0 67       >                dw      last_NFA            // Link to previous definition Name
 168++67EC             >F_SYNC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 168++67EC ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 168++67EC             >                else
 168++67EC EE 67       >                dw      $ + 2   ; ok        // is pointed by CFA
 168++67EE             >                endif           ; ok        // for other definitions it "points" the correct handler
 168++67EE             >                // Use of "; ok" to suppress "warning[fwdref]"
 168++67EE             >
 168++67EE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 169++67EE E1                           pop     hl
 170++67EF 7D                           ld      a, l                // file-handle
 171++67F0 DD E5                        push    ix
 172++67F2 C5                           push    bc
 173++67F3 CF                           rst     $08
 174++67F4 9C                           db      $9C
 175++67F5 C1                           pop     bc
 176++67F6 DD E1                        pop     ix
 177++67F8 ED 62                        sbc     hl, hl
 178++67FA
 179++67FA                              psh1
 179++67FA E5          >                push    hl
 179++67FB DD E9       >                jp      (ix)
 180++67FD
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/next-opt0.asm
 839+ 67FD
 840+ 67FD
 841+ 67FD              //  ______________________________________________________________________
 842+ 67FD              //
 843+ 67FD              // cr           --
 844+ 67FD              // send a CR via EMITC
 845+ 67FD                              New_Def CR, "CR", is_code, is_normal
 845+ 67FD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 845+ 67FD             >
 845+ 67FD             >                // dummy db directives used to calculate length of namec
 845+ 67FD 43 52       >                db      "CR"
 845+ 67FF             >len_NFA         defl    $ - temp_NFA
 845+ 67FF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 845+ 67FD             >
 845+ 67FD 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 845+ 67FE 43 52       >                db      "CR"               // name string in 7-bit ascii, but
 845+ 6800             >                org     $-1                 // alter last byte of Name just above to set
 845+ 67FF D2          >                db      {b $} | END_BIT     // msb as name end
 845+ 6800             >
 845+ 6800 E3 67       >                dw      last_NFA            // Link to previous definition Name
 845+ 6802             >CR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 845+ 6802 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 845+ 6802             >                else
 845+ 6802 04 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 845+ 6804             >                endif           ; ok        // for other definitions it "points" the correct handler
 845+ 6804             >                // Use of "; ok" to suppress "warning[fwdref]"
 845+ 6804             >
 845+ 6804             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 846+ 6804
 847+ 6804 3E 0D                        ld      a, CR_CHAR
 848+ 6806 C3 EF 65                     jp      Emitc_Ptr
 849+ 6809
 850+ 6809              //  ______________________________________________________________________
 851+ 6809              //
 852+ 6809              // cmove    a1 a2 u --
 853+ 6809              // If u > 0, moves memory content starting at address a1 for n bytes long
 854+ 6809              // storing then starting at address addr2.
 855+ 6809              // The content of a1 is moved first. See CMOVE> also.
 856+ 6809                              New_Def CMOVE, "CMOVE", is_code, is_normal
 856+ 6809             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 856+ 6809             >
 856+ 6809             >                // dummy db directives used to calculate length of namec
 856+ 6809 43 4D 4F 56 >                db      "CMOVE"
 856+ 680D 45          >
 856+ 680E             >len_NFA         defl    $ - temp_NFA
 856+ 680E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 856+ 6809             >
 856+ 6809 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 856+ 680A 43 4D 4F 56 >                db      "CMOVE"               // name string in 7-bit ascii, but
 856+ 680E 45          >
 856+ 680F             >                org     $-1                 // alter last byte of Name just above to set
 856+ 680E C5          >                db      {b $} | END_BIT     // msb as name end
 856+ 680F             >
 856+ 680F FD 67       >                dw      last_NFA            // Link to previous definition Name
 856+ 6811             >CMOVE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 856+ 6811 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 856+ 6811             >                else
 856+ 6811 13 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 856+ 6813             >                endif           ; ok        // for other definitions it "points" the correct handler
 856+ 6813             >                // Use of "; ok" to suppress "warning[fwdref]"
 856+ 6813             >
 856+ 6813             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 857+ 6813 60                           ld      h, b
 858+ 6814 69                           ld      l, c
 859+ 6815
 860+ 6815 C1                           pop     bc                  // bc has counter
 861+ 6816 D1                           pop     de                  // de now has dest
 862+ 6817 E3                           ex      (sp), hl            // hl has source, save Instruction Pointer
 863+ 6818 78                           ld      a, b
 864+ 6819 B1                           or      c
 865+ 681A 28 02                        jr      z, Cmove_NoMove
 866+ 681C ED B0                            ldir
 867+ 681E              Cmove_NoMove:
 868+ 681E C1                           pop     bc                  // Restore Instruction Pointer
 869+ 681F
 870+ 681F                              next
 870+ 681F DD E9       >                jp      (ix)
 871+ 6821
 872+ 6821              //  ______________________________________________________________________
 873+ 6821              //
 874+ 6821              // cmove>    a1 a2 u --
 875+ 6821              // If u > 0, moves memory content starting at address a1 for n bytes long
 876+ 6821              // storing then starting at address addr2.
 877+ 6821              // The content of a1 is moved last. See cmove.
 878+ 6821                              New_Def CMOVE_TO, "CMOVE>", is_code, is_normal
 878+ 6821             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 878+ 6821             >
 878+ 6821             >                // dummy db directives used to calculate length of namec
 878+ 6821 43 4D 4F 56 >                db      "CMOVE>"
 878+ 6825 45 3E       >
 878+ 6827             >len_NFA         defl    $ - temp_NFA
 878+ 6827             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 878+ 6821             >
 878+ 6821 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 878+ 6822 43 4D 4F 56 >                db      "CMOVE>"               // name string in 7-bit ascii, but
 878+ 6826 45 3E       >
 878+ 6828             >                org     $-1                 // alter last byte of Name just above to set
 878+ 6827 BE          >                db      {b $} | END_BIT     // msb as name end
 878+ 6828             >
 878+ 6828 09 68       >                dw      last_NFA            // Link to previous definition Name
 878+ 682A             >CMOVE_TO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 878+ 682A ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 878+ 682A             >                else
 878+ 682A 2C 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 878+ 682C             >                endif           ; ok        // for other definitions it "points" the correct handler
 878+ 682C             >                // Use of "; ok" to suppress "warning[fwdref]"
 878+ 682C             >
 878+ 682C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 879+ 682C 60                           ld      h, b
 880+ 682D 69                           ld      l, c
 881+ 682E
 882+ 682E C1                           pop     bc                  // bc has counter
 883+ 682F D1                           pop     de                  // de has dest
 884+ 6830 E3                           ex      (sp), hl            // hl has source, save Instruction Pointer
 885+ 6831 78                           ld      a, b
 886+ 6832 B1                           or      c
 887+ 6833 28 08                        jr      z, CmoveV_NoMove
 888+ 6835 EB                               ex      de, hl              // compute address to
 889+ 6836 09                               add     hl, bc              // operate backward
 890+ 6837 2B                               dec     hl
 891+ 6838 EB                               ex      de, hl
 892+ 6839 09                               add     hl, bc
 893+ 683A 2B                               dec     hl
 894+ 683B ED B8                            lddr                        // backward
 895+ 683D              CmoveV_NoMove:
 896+ 683D C1                           pop     bc                  // Restore Instruction Pointer
 897+ 683E
 898+ 683E                              next
 898+ 683E DD E9       >                jp      (ix)
 899+ 6840
 900+ 6840              //  ______________________________________________________________________
 901+ 6840              //
 902+ 6840              // um*      u1 u2 -- ud
 903+ 6840              // Unsigned multiplication
 904+ 6840              // A double-integer is kept in CPU registers as DEHL then pushed on stack.
 905+ 6840              // On the stack a double number is treated as two single numbers
 906+ 6840              // where DE is on the top of the stack and HL is the second from top,
 907+ 6840              // Instead, in 2VARIABLE a double number is stored as EDLH.
 908+ 6840              // this definition could use "MUL" Z80N new op-code.
 909+ 6840                              New_Def UM_MUL, "UM*", is_code, is_normal
 909+ 6840             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 909+ 6840             >
 909+ 6840             >                // dummy db directives used to calculate length of namec
 909+ 6840 55 4D 2A    >                db      "UM*"
 909+ 6843             >len_NFA         defl    $ - temp_NFA
 909+ 6843             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 909+ 6840             >
 909+ 6840 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 909+ 6841 55 4D 2A    >                db      "UM*"               // name string in 7-bit ascii, but
 909+ 6844             >                org     $-1                 // alter last byte of Name just above to set
 909+ 6843 AA          >                db      {b $} | END_BIT     // msb as name end
 909+ 6844             >
 909+ 6844 21 68       >                dw      last_NFA            // Link to previous definition Name
 909+ 6846             >UM_MUL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 909+ 6846 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 909+ 6846             >                else
 909+ 6846 48 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 909+ 6848             >                endif           ; ok        // for other definitions it "points" the correct handler
 909+ 6848             >                // Use of "; ok" to suppress "warning[fwdref]"
 909+ 6848             >
 909+ 6848             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 910+ 6848 D1                           pop     de                    // de has u2 operand
 911+ 6849 E1                           pop     hl                    // hl has u1 operand
 912+ 684A C5                           push    bc                    // Save Instruction Pointer
 913+ 684B 45                           ld      b, l
 914+ 684C 4B                           ld      c, e
 915+ 684D 5D                           ld      e, l
 916+ 684E 6A                           ld      l, d
 917+ 684F E5                           push    hl
 918+ 6850 69                           ld      l, c
 919+ 6851 ED 30                        mul
 920+ 6853 EB                           ex      de, hl
 921+ 6854 ED 30                        mul
 922+ 6856 AF                           xor     a
 923+ 6857 19                           add     hl, de
 924+ 6858 8F                           adc     a
 925+ 6859 59                           ld      e, c
 926+ 685A 50                           ld      d, b
 927+ 685B ED 30                        mul
 928+ 685D 47                           ld      b, a
 929+ 685E 4C                           ld      c, h
 930+ 685F 7A                           ld      a, d
 931+ 6860 85                           add     l
 932+ 6861 67                           ld      h, a
 933+ 6862 6B                           ld      l, e
 934+ 6863 D1                           pop     de
 935+ 6864 ED 30                        mul
 936+ 6866 EB                           ex      de, hl
 937+ 6867 ED 4A                        adc     hl, bc
 938+ 6869 C1                           pop     bc
 939+ 686A D5                           push    de
 940+ 686B E5                           push    hl
 941+ 686C                              next
 941+ 686C DD E9       >                jp      (ix)
 942+ 686E
 943+ 686E              //  ______________________________________________________________________
 944+ 686E              //
 945+ 686E              // um/mod      ud u1 -- q r
 946+ 686E              // divides ud into u1 giving quotient q and remainder r
 947+ 686E              // algorithm takes 16 bit at a time starting from msb
 948+ 686E              // DE grows from lsb upward with quotient result
 949+ 686E              // HL keeps the remainder at each stage of division
 950+ 686E              // each loop 'lowers' the next binary digit to form the current dividend
 951+ 686E                              New_Def UMDIVMOD, "UM/MOD", is_code, is_normal
 951+ 686E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 951+ 686E             >
 951+ 686E             >                // dummy db directives used to calculate length of namec
 951+ 686E 55 4D 2F 4D >                db      "UM/MOD"
 951+ 6872 4F 44       >
 951+ 6874             >len_NFA         defl    $ - temp_NFA
 951+ 6874             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 951+ 686E             >
 951+ 686E 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 951+ 686F 55 4D 2F 4D >                db      "UM/MOD"               // name string in 7-bit ascii, but
 951+ 6873 4F 44       >
 951+ 6875             >                org     $-1                 // alter last byte of Name just above to set
 951+ 6874 C4          >                db      {b $} | END_BIT     // msb as name end
 951+ 6875             >
 951+ 6875 40 68       >                dw      last_NFA            // Link to previous definition Name
 951+ 6877             >UMDIVMOD:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 951+ 6877 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 951+ 6877             >                else
 951+ 6877 79 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 951+ 6879             >                endif           ; ok        // for other definitions it "points" the correct handler
 951+ 6879             >                // Use of "; ok" to suppress "warning[fwdref]"
 951+ 6879             >
 951+ 6879             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 952+ 6879 60                           ld      h, b
 953+ 687A 69                           ld      l, c                    // Save Instruction Pointer
 954+ 687B
 955+ 687B C1                           pop     bc                      // divisor
 956+ 687C
 957+ 687C D1                           pop     de                      // < high part
 958+ 687D E3                           ex      (sp), hl                // < low part and > save bc
 959+ 687E EB                           ex      de, hl                  //
 960+ 687F 7D                           ld      a, l                    // check without changing arguments
 961+ 6880 91                           sub     c                       // if divisor is greater than high part
 962+ 6881 7C                           ld      a, h                    // so quotient will be in range
 963+ 6882 98                           sbc     a, b
 964+ 6883 30 23                        jr      nc, Um_DivMod_OutOfRange
 965+ 6885 3E 10                            ld      a, 16
 966+ 6887              Um_DivMod_Loop:
 967+ 6887 A7                                   and     a
 968+ 6888 CB 13                                rl      e
 969+ 688A CB 12                                rl      d
 970+ 688C CB 15                                rl      l
 971+ 688E CB 14                                rl      h
 972+ 6890 30 05                                jr      nc, Um_DivMod_Carry
 973+ 6892 A7                                       and     a
 974+ 6893 ED 42                                    sbc     hl, bc
 975+ 6895 18 07                                jr      Um_DivMod_Endif    // else
 976+ 6897              Um_DivMod_Carry:
 977+ 6897 A7                                       and     a
 978+ 6898 ED 42                                    sbc     hl, bc
 979+ 689A 30 02                                    jr      nc, Um_DivMod_Endif
 980+ 689C 09                                           add     hl, bc
 981+ 689D 1B                                           dec     de
 982+ 689E              Um_DivMod_Endif:                                   // endif
 983+ 689E 13                                   inc     de
 984+ 689F 3D                                   dec     a
 985+ 68A0 20 E5                            jr      nz, Um_DivMod_Loop
 986+ 68A2 EB                               ex      de, hl
 987+ 68A3              Um_DivMod_Bailout:
 988+ 68A3 C1                               pop     bc                  // restore Instruction Pointer
 989+ 68A4 D5                               push    de                  // de := remanider
 990+ 68A5 E5                               push    hl                  // hl := quotient
 991+ 68A6                                  next
 991+ 68A6 DD E9       >                jp      (ix)
 992+ 68A8
 993+ 68A8              Um_DivMod_OutOfRange:
 994+ 68A8 21 FF FF                     ld      hl, -1
 995+ 68AB 54                           ld      d, h
 996+ 68AC 5D                           ld      e, l
 997+ 68AD 18 F4                        jr      Um_DivMod_Bailout
 998+ 68AF
 999+ 68AF              //  ______________________________________________________________________
1000+ 68AF              //
1001+ 68AF              // and          n1 n2 -- n3
1002+ 68AF              // bit logical AND. Returns n3 as n1 & n2
1003+ 68AF                              New_Def AND_OP, "AND", is_code, is_normal
1003+ 68AF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1003+ 68AF             >
1003+ 68AF             >                // dummy db directives used to calculate length of namec
1003+ 68AF 41 4E 44    >                db      "AND"
1003+ 68B2             >len_NFA         defl    $ - temp_NFA
1003+ 68B2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1003+ 68AF             >
1003+ 68AF 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1003+ 68B0 41 4E 44    >                db      "AND"               // name string in 7-bit ascii, but
1003+ 68B3             >                org     $-1                 // alter last byte of Name just above to set
1003+ 68B2 C4          >                db      {b $} | END_BIT     // msb as name end
1003+ 68B3             >
1003+ 68B3 6E 68       >                dw      last_NFA            // Link to previous definition Name
1003+ 68B5             >AND_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1003+ 68B5 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1003+ 68B5             >                else
1003+ 68B5 B7 68       >                dw      $ + 2   ; ok        // is pointed by CFA
1003+ 68B7             >                endif           ; ok        // for other definitions it "points" the correct handler
1003+ 68B7             >                // Use of "; ok" to suppress "warning[fwdref]"
1003+ 68B7             >
1003+ 68B7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1004+ 68B7 D1                           pop     de
1005+ 68B8 E1                           pop     hl
1006+ 68B9 7B                           ld      a, e
1007+ 68BA A5                           and     l
1008+ 68BB 6F                           ld      l, a
1009+ 68BC 7A                           ld      a, d
1010+ 68BD A4                           and     h
1011+ 68BE 67                           ld      h, a
1012+ 68BF
1013+ 68BF                              psh1
1013+ 68BF E5          >                push    hl
1013+ 68C0 DD E9       >                jp      (ix)
1014+ 68C2
1015+ 68C2              //  ______________________________________________________________________
1016+ 68C2              //
1017+ 68C2              // or           n1 n2 -- n3
1018+ 68C2              // bit logical OR. Returns n3 as n1 | n2
1019+ 68C2                              New_Def OR_OP, "OR", is_code, is_normal
1019+ 68C2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1019+ 68C2             >
1019+ 68C2             >                // dummy db directives used to calculate length of namec
1019+ 68C2 4F 52       >                db      "OR"
1019+ 68C4             >len_NFA         defl    $ - temp_NFA
1019+ 68C4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1019+ 68C2             >
1019+ 68C2 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1019+ 68C3 4F 52       >                db      "OR"               // name string in 7-bit ascii, but
1019+ 68C5             >                org     $-1                 // alter last byte of Name just above to set
1019+ 68C4 D2          >                db      {b $} | END_BIT     // msb as name end
1019+ 68C5             >
1019+ 68C5 AF 68       >                dw      last_NFA            // Link to previous definition Name
1019+ 68C7             >OR_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1019+ 68C7 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1019+ 68C7             >                else
1019+ 68C7 C9 68       >                dw      $ + 2   ; ok        // is pointed by CFA
1019+ 68C9             >                endif           ; ok        // for other definitions it "points" the correct handler
1019+ 68C9             >                // Use of "; ok" to suppress "warning[fwdref]"
1019+ 68C9             >
1019+ 68C9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1020+ 68C9 D1                           pop     de
1021+ 68CA E1                           pop     hl
1022+ 68CB 7B                           ld      a, e
1023+ 68CC B5                           or      l
1024+ 68CD 6F                           ld      l, a
1025+ 68CE 7A                           ld      a, d
1026+ 68CF B4                           or      h
1027+ 68D0 67                           ld      h, a
1028+ 68D1
1029+ 68D1                              psh1
1029+ 68D1 E5          >                push    hl
1029+ 68D2 DD E9       >                jp      (ix)
1030+ 68D4
1031+ 68D4              //  ______________________________________________________________________
1032+ 68D4              //
1033+ 68D4              // xor          n1 n2 -- n3
1034+ 68D4              // bit logical OR. Returns n3 as n1 ^ n2
1035+ 68D4                              New_Def XOR_OP, "XOR", is_code, is_normal
1035+ 68D4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1035+ 68D4             >
1035+ 68D4             >                // dummy db directives used to calculate length of namec
1035+ 68D4 58 4F 52    >                db      "XOR"
1035+ 68D7             >len_NFA         defl    $ - temp_NFA
1035+ 68D7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1035+ 68D4             >
1035+ 68D4 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1035+ 68D5 58 4F 52    >                db      "XOR"               // name string in 7-bit ascii, but
1035+ 68D8             >                org     $-1                 // alter last byte of Name just above to set
1035+ 68D7 D2          >                db      {b $} | END_BIT     // msb as name end
1035+ 68D8             >
1035+ 68D8 C2 68       >                dw      last_NFA            // Link to previous definition Name
1035+ 68DA             >XOR_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1035+ 68DA ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1035+ 68DA             >                else
1035+ 68DA DC 68       >                dw      $ + 2   ; ok        // is pointed by CFA
1035+ 68DC             >                endif           ; ok        // for other definitions it "points" the correct handler
1035+ 68DC             >                // Use of "; ok" to suppress "warning[fwdref]"
1035+ 68DC             >
1035+ 68DC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1036+ 68DC D1                           pop     de
1037+ 68DD E1                           pop     hl
1038+ 68DE 7B                           ld      a, e
1039+ 68DF AD                           xor     l
1040+ 68E0 6F                           ld      l, a
1041+ 68E1 7A                           ld      a, d
1042+ 68E2 AC                           xor     h
1043+ 68E3 67                           ld      h, a
1044+ 68E4
1045+ 68E4                              psh1
1045+ 68E4 E5          >                push    hl
1045+ 68E5 DD E9       >                jp      (ix)
1046+ 68E7
1047+ 68E7              //  ______________________________________________________________________
1048+ 68E7              //
1049+ 68E7              // sp@      -- a
1050+ 68E7              // returns on top of stack the value of SP before execution
1051+ 68E7                              New_Def SPFETCH, "SP@", is_code, is_normal
1051+ 68E7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1051+ 68E7             >
1051+ 68E7             >                // dummy db directives used to calculate length of namec
1051+ 68E7 53 50 40    >                db      "SP@"
1051+ 68EA             >len_NFA         defl    $ - temp_NFA
1051+ 68EA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1051+ 68E7             >
1051+ 68E7 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1051+ 68E8 53 50 40    >                db      "SP@"               // name string in 7-bit ascii, but
1051+ 68EB             >                org     $-1                 // alter last byte of Name just above to set
1051+ 68EA C0          >                db      {b $} | END_BIT     // msb as name end
1051+ 68EB             >
1051+ 68EB D4 68       >                dw      last_NFA            // Link to previous definition Name
1051+ 68ED             >SPFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1051+ 68ED ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1051+ 68ED             >                else
1051+ 68ED EF 68       >                dw      $ + 2   ; ok        // is pointed by CFA
1051+ 68EF             >                endif           ; ok        // for other definitions it "points" the correct handler
1051+ 68EF             >                // Use of "; ok" to suppress "warning[fwdref]"
1051+ 68EF             >
1051+ 68EF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1052+ 68EF
1053+ 68EF 21 00 00                     ld      hl, 0
1054+ 68F2 39                           add     hl, sp
1055+ 68F3
1056+ 68F3                              psh1
1056+ 68F3 E5          >                push    hl
1056+ 68F4 DD E9       >                jp      (ix)
1057+ 68F6
1058+ 68F6              //  ______________________________________________________________________
1059+ 68F6              //
1060+ 68F6              // sp!      a --
1061+ 68F6              // restore SP to the initial value passed
1062+ 68F6              // normally it is S0, i.e. the word at offset 6 and 7 of user variabiles area.
1063+ 68F6                              New_Def SPSTORE, "SP!", is_code, is_normal
1063+ 68F6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1063+ 68F6             >
1063+ 68F6             >                // dummy db directives used to calculate length of namec
1063+ 68F6 53 50 21    >                db      "SP!"
1063+ 68F9             >len_NFA         defl    $ - temp_NFA
1063+ 68F9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1063+ 68F6             >
1063+ 68F6 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1063+ 68F7 53 50 21    >                db      "SP!"               // name string in 7-bit ascii, but
1063+ 68FA             >                org     $-1                 // alter last byte of Name just above to set
1063+ 68F9 A1          >                db      {b $} | END_BIT     // msb as name end
1063+ 68FA             >
1063+ 68FA E7 68       >                dw      last_NFA            // Link to previous definition Name
1063+ 68FC             >SPSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1063+ 68FC ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1063+ 68FC             >                else
1063+ 68FC FE 68       >                dw      $ + 2   ; ok        // is pointed by CFA
1063+ 68FE             >                endif           ; ok        // for other definitions it "points" the correct handler
1063+ 68FE             >                // Use of "; ok" to suppress "warning[fwdref]"
1063+ 68FE             >
1063+ 68FE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1064+ 68FE E1                           pop     hl
1065+ 68FF F9                           ld      sp, hl
1066+ 6900
1067+ 6900                              next
1067+ 6900 DD E9       >                jp      (ix)
1068+ 6902
1069+ 6902              //  ______________________________________________________________________
1070+ 6902              //
1071+ 6902              // rp@      -- a
1072+ 6902              // returns on top of stack the value of Return-Pointer
1073+ 6902                              New_Def RPFETCH, "RP@", is_code, is_normal
1073+ 6902             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1073+ 6902             >
1073+ 6902             >                // dummy db directives used to calculate length of namec
1073+ 6902 52 50 40    >                db      "RP@"
1073+ 6905             >len_NFA         defl    $ - temp_NFA
1073+ 6905             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1073+ 6902             >
1073+ 6902 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1073+ 6903 52 50 40    >                db      "RP@"               // name string in 7-bit ascii, but
1073+ 6906             >                org     $-1                 // alter last byte of Name just above to set
1073+ 6905 C0          >                db      {b $} | END_BIT     // msb as name end
1073+ 6906             >
1073+ 6906 F6 68       >                dw      last_NFA            // Link to previous definition Name
1073+ 6908             >RPFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1073+ 6908 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1073+ 6908             >                else
1073+ 6908 0A 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1073+ 690A             >                endif           ; ok        // for other definitions it "points" the correct handler
1073+ 690A             >                // Use of "; ok" to suppress "warning[fwdref]"
1073+ 690A             >
1073+ 690A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1074+ 690A
1075+ 690A                              ldhlrp
1075+ 690A 2A 96 63    >                ld      hl,(RP_Pointer)
1076+ 690D
1077+ 690D                              psh1
1077+ 690D E5          >                push    hl
1077+ 690E DD E9       >                jp      (ix)
1078+ 6910
1079+ 6910              //  ______________________________________________________________________
1080+ 6910              //
1081+ 6910              // rp!      a --
1082+ 6910              // restore RP to the initial value passed
1083+ 6910              // normally it is R0 @, i.e. the word at offset 8 of user variabiles area.
1084+ 6910                              New_Def RPSTORE, "RP!", is_code, is_normal
1084+ 6910             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1084+ 6910             >
1084+ 6910             >                // dummy db directives used to calculate length of namec
1084+ 6910 52 50 21    >                db      "RP!"
1084+ 6913             >len_NFA         defl    $ - temp_NFA
1084+ 6913             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1084+ 6910             >
1084+ 6910 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1084+ 6911 52 50 21    >                db      "RP!"               // name string in 7-bit ascii, but
1084+ 6914             >                org     $-1                 // alter last byte of Name just above to set
1084+ 6913 A1          >                db      {b $} | END_BIT     // msb as name end
1084+ 6914             >
1084+ 6914 02 69       >                dw      last_NFA            // Link to previous definition Name
1084+ 6916             >RPSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1084+ 6916 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1084+ 6916             >                else
1084+ 6916 18 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1084+ 6918             >                endif           ; ok        // for other definitions it "points" the correct handler
1084+ 6918             >                // Use of "; ok" to suppress "warning[fwdref]"
1084+ 6918             >
1084+ 6918             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1085+ 6918 E1                           pop     hl
1086+ 6919                              ldrphl
1086+ 6919 22 96 63    >                ld      (RP_Pointer),hl
1087+ 691C
1088+ 691C                              next
1088+ 691C DD E9       >                jp      (ix)
1089+ 691E
1090+ 691E              //  ______________________________________________________________________
1091+ 691E              //
1092+ 691E              // ;s      --
1093+ 691E              // exits back to the caller word
1094+ 691E                              New_Def EXIT, ";S", is_code, is_normal
1094+ 691E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1094+ 691E             >
1094+ 691E             >                // dummy db directives used to calculate length of namec
1094+ 691E 3B 53       >                db      ";S"
1094+ 6920             >len_NFA         defl    $ - temp_NFA
1094+ 6920             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1094+ 691E             >
1094+ 691E 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1094+ 691F 3B 53       >                db      ";S"               // name string in 7-bit ascii, but
1094+ 6921             >                org     $-1                 // alter last byte of Name just above to set
1094+ 6920 D3          >                db      {b $} | END_BIT     // msb as name end
1094+ 6921             >
1094+ 6921 10 69       >                dw      last_NFA            // Link to previous definition Name
1094+ 6923             >EXIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1094+ 6923 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1094+ 6923             >                else
1094+ 6923 25 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1094+ 6925             >                endif           ; ok        // for other definitions it "points" the correct handler
1094+ 6925             >                // Use of "; ok" to suppress "warning[fwdref]"
1094+ 6925             >
1094+ 6925             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1095+ 6925                              ldhlrp                      // Get Return Stack Pointer
1095+ 6925 2A 96 63    >                ld      hl,(RP_Pointer)
1096+ 6928 4E                           ld      c, (hl)             // pop Instruction Pointer
1097+ 6929 23                           inc     hl                  // from Return Stack
1098+ 692A 46                           ld      b, (hl)
1099+ 692B 23                           inc     hl
1100+ 692C                              ldrphl                      // Set Return Stack Pointer
1100+ 692C 22 96 63    >                ld      (RP_Pointer),hl
1101+ 692F                              next
1101+ 692F DD E9       >                jp      (ix)
1102+ 6931
1103+ 6931              //  ______________________________________________________________________
1104+ 6931              //
1105+ 6931              // leave        --
1106+ 6931              // set the limit-of-loop equal to the current index
1107+ 6931              // this forces to leave from loop at the end of the current iteration
1108+ 6931                              New_Def LEAVE, "LEAVE", is_code, is_normal
1108+ 6931             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1108+ 6931             >
1108+ 6931             >                // dummy db directives used to calculate length of namec
1108+ 6931 4C 45 41 56 >                db      "LEAVE"
1108+ 6935 45          >
1108+ 6936             >len_NFA         defl    $ - temp_NFA
1108+ 6936             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1108+ 6931             >
1108+ 6931 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1108+ 6932 4C 45 41 56 >                db      "LEAVE"               // name string in 7-bit ascii, but
1108+ 6936 45          >
1108+ 6937             >                org     $-1                 // alter last byte of Name just above to set
1108+ 6936 C5          >                db      {b $} | END_BIT     // msb as name end
1108+ 6937             >
1108+ 6937 1E 69       >                dw      last_NFA            // Link to previous definition Name
1108+ 6939             >LEAVE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1108+ 6939 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1108+ 6939             >                else
1108+ 6939 3B 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1108+ 693B             >                endif           ; ok        // for other definitions it "points" the correct handler
1108+ 693B             >                // Use of "; ok" to suppress "warning[fwdref]"
1108+ 693B             >
1108+ 693B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1109+ 693B
1110+ 693B                              ldhlrp
1110+ 693B 2A 96 63    >                ld      hl,(RP_Pointer)
1111+ 693E 5E                           ld      e, (hl)
1112+ 693F 23                           inc     hl
1113+ 6940 56                           ld      d, (hl)
1114+ 6941 23                           inc     hl
1115+ 6942 73                           ld      (hl), e
1116+ 6943 23                           inc     hl
1117+ 6944 72                           ld      (hl), d
1118+ 6945
1119+ 6945                              next
1119+ 6945 DD E9       >                jp      (ix)
1120+ 6947
1121+ 6947              //  ______________________________________________________________________
1122+ 6947              //
1123+ 6947              // >r      n --
1124+ 6947              // pop from calculator-stack and push into return-stack
1125+ 6947                              New_Def TO_R, ">R", is_code, is_normal
1125+ 6947             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1125+ 6947             >
1125+ 6947             >                // dummy db directives used to calculate length of namec
1125+ 6947 3E 52       >                db      ">R"
1125+ 6949             >len_NFA         defl    $ - temp_NFA
1125+ 6949             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1125+ 6947             >
1125+ 6947 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1125+ 6948 3E 52       >                db      ">R"               // name string in 7-bit ascii, but
1125+ 694A             >                org     $-1                 // alter last byte of Name just above to set
1125+ 6949 D2          >                db      {b $} | END_BIT     // msb as name end
1125+ 694A             >
1125+ 694A 31 69       >                dw      last_NFA            // Link to previous definition Name
1125+ 694C             >TO_R:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1125+ 694C ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1125+ 694C             >                else
1125+ 694C 4E 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1125+ 694E             >                endif           ; ok        // for other definitions it "points" the correct handler
1125+ 694E             >                // Use of "; ok" to suppress "warning[fwdref]"
1125+ 694E             >
1125+ 694E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1126+ 694E D1                           pop     de
1127+ 694F                              ldhlrp
1127+ 694F 2A 96 63    >                ld      hl,(RP_Pointer)
1128+ 6952 2B                           dec     hl
1129+ 6953 72                           ld      (hl), d             // store current TOS
1130+ 6954 2B                           dec     hl                  // to Return Stack
1131+ 6955 73                           ld      (hl), e
1132+ 6956                              ldrphl
1132+ 6956 22 96 63    >                ld      (RP_Pointer),hl
1133+ 6959
1134+ 6959                              next
1134+ 6959 DD E9       >                jp      (ix)
1135+ 695B
1136+ 695B              //  ______________________________________________________________________
1137+ 695B              //
1138+ 695B              // r>      -- n
1139+ 695B              // pop from return-stack and push into calculator-stack
1140+ 695B                              New_Def R_TO, "R>", is_code, is_normal
1140+ 695B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1140+ 695B             >
1140+ 695B             >                // dummy db directives used to calculate length of namec
1140+ 695B 52 3E       >                db      "R>"
1140+ 695D             >len_NFA         defl    $ - temp_NFA
1140+ 695D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1140+ 695B             >
1140+ 695B 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1140+ 695C 52 3E       >                db      "R>"               // name string in 7-bit ascii, but
1140+ 695E             >                org     $-1                 // alter last byte of Name just above to set
1140+ 695D BE          >                db      {b $} | END_BIT     // msb as name end
1140+ 695E             >
1140+ 695E 47 69       >                dw      last_NFA            // Link to previous definition Name
1140+ 6960             >R_TO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1140+ 6960 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1140+ 6960             >                else
1140+ 6960 62 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1140+ 6962             >                endif           ; ok        // for other definitions it "points" the correct handler
1140+ 6962             >                // Use of "; ok" to suppress "warning[fwdref]"
1140+ 6962             >
1140+ 6962             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1141+ 6962
1142+ 6962                              ldhlrp
1142+ 6962 2A 96 63    >                ld      hl,(RP_Pointer)
1143+ 6965 5E                           ld      e, (hl)             // retrieve from Return Stack
1144+ 6966 23                           inc     hl
1145+ 6967 56                           ld      d, (hl)
1146+ 6968 23                           inc     hl
1147+ 6969                              ldrphl
1147+ 6969 22 96 63    >                ld      (RP_Pointer),hl
1148+ 696C D5                           push    de
1149+ 696D                              next
1149+ 696D DD E9       >                jp      (ix)
1150+ 696F
1151+ 696F              //  ______________________________________________________________________
1152+ 696F              //
1153+ 696F              // r            -- n
1154+ 696F              // return on top of stack the value of top of return-stack
1155+ 696F              // Since this is the same as I, we alter R's CFA to jump there
1156+ 696F                              New_Def R_OP, "R@", I_Ptr, is_normal
1156+ 696F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1156+ 696F             >
1156+ 696F             >                // dummy db directives used to calculate length of namec
1156+ 696F 52 40       >                db      "R@"
1156+ 6971             >len_NFA         defl    $ - temp_NFA
1156+ 6971             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1156+ 696F             >
1156+ 696F 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1156+ 6970 52 40       >                db      "R@"               // name string in 7-bit ascii, but
1156+ 6972             >                org     $-1                 // alter last byte of Name just above to set
1156+ 6971 C0          >                db      {b $} | END_BIT     // msb as name end
1156+ 6972             >
1156+ 6972 5B 69       >                dw      last_NFA            // Link to previous definition Name
1156+ 6974             >R_OP:          if I_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1156+ 6974 78 64       >                dw      I_Ptr ; ok        // for primitive definitions  actual code
1156+ 6976             >                else
1156+ 6976 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1156+ 6976             >                endif           ; ok        // for other definitions it "points" the correct handler
1156+ 6976             >                // Use of "; ok" to suppress "warning[fwdref]"
1156+ 6976             >
1156+ 6976             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1157+ 6976
1158+ 6976              //  ______________________________________________________________________
1159+ 6976              //
1160+ 6976              // r            -- n
1161+ 6976              // return on top of stack the value of top of return-stack
1162+ 6976              // Since this is the same as I, we alter R's CFA to jump there
1163+ 6976                              New_Def R_OLD, "R", I_Ptr, is_normal
1163+ 6976             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1163+ 6976             >
1163+ 6976             >                // dummy db directives used to calculate length of namec
1163+ 6976 52          >                db      "R"
1163+ 6977             >len_NFA         defl    $ - temp_NFA
1163+ 6977             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1163+ 6976             >
1163+ 6976 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1163+ 6977 52          >                db      "R"               // name string in 7-bit ascii, but
1163+ 6978             >                org     $-1                 // alter last byte of Name just above to set
1163+ 6977 D2          >                db      {b $} | END_BIT     // msb as name end
1163+ 6978             >
1163+ 6978 6F 69       >                dw      last_NFA            // Link to previous definition Name
1163+ 697A             >R_OLD:          if I_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1163+ 697A 78 64       >                dw      I_Ptr ; ok        // for primitive definitions  actual code
1163+ 697C             >                else
1163+ 697C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1163+ 697C             >                endif           ; ok        // for other definitions it "points" the correct handler
1163+ 697C             >                // Use of "; ok" to suppress "warning[fwdref]"
1163+ 697C             >
1163+ 697C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1164+ 697C
1165+ 697C              //  ______________________________________________________________________
1166+ 697C              //
1167+ 697C              // 0=           n -- f
1168+ 697C              // true (non zero) if n is zero, false (0) elsewere
1169+ 697C                              New_Def ZEQUAL, "0=", is_code, is_normal
1169+ 697C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1169+ 697C             >
1169+ 697C             >                // dummy db directives used to calculate length of namec
1169+ 697C 30 3D       >                db      "0="
1169+ 697E             >len_NFA         defl    $ - temp_NFA
1169+ 697E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1169+ 697C             >
1169+ 697C 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1169+ 697D 30 3D       >                db      "0="               // name string in 7-bit ascii, but
1169+ 697F             >                org     $-1                 // alter last byte of Name just above to set
1169+ 697E BD          >                db      {b $} | END_BIT     // msb as name end
1169+ 697F             >
1169+ 697F 76 69       >                dw      last_NFA            // Link to previous definition Name
1169+ 6981             >ZEQUAL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1169+ 6981 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1169+ 6981             >                else
1169+ 6981 83 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1169+ 6983             >                endif           ; ok        // for other definitions it "points" the correct handler
1169+ 6983             >                // Use of "; ok" to suppress "warning[fwdref]"
1169+ 6983             >
1169+ 6983             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1170+ 6983              Zero_Equal:
1171+ 6983 E1                           pop     hl
1172+ 6984 7D                           ld      a, l
1173+ 6985 B4                           or      h
1174+ 6986 21 00 00                     ld      hl, FALSE_FLAG
1175+ 6989 20 01                        jr      nz, ZEqual_Skip
1176+ 698B 2C                               inc     l
1177+ 698C              ZEqual_Skip:
1178+ 698C                              psh1
1178+ 698C E5          >                push    hl
1178+ 698D DD E9       >                jp      (ix)
1179+ 698F
1180+ 698F              //  ______________________________________________________________________
1181+ 698F              //
1182+ 698F              // not         a1 -- a2
1183+ 698F              // increment by 2 top of stack
1184+ 698F                              New_Def NOT_OP, "NOT", Zero_Equal, is_normal
1184+ 698F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1184+ 698F             >
1184+ 698F             >                // dummy db directives used to calculate length of namec
1184+ 698F 4E 4F 54    >                db      "NOT"
1184+ 6992             >len_NFA         defl    $ - temp_NFA
1184+ 6992             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1184+ 698F             >
1184+ 698F 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1184+ 6990 4E 4F 54    >                db      "NOT"               // name string in 7-bit ascii, but
1184+ 6993             >                org     $-1                 // alter last byte of Name just above to set
1184+ 6992 D4          >                db      {b $} | END_BIT     // msb as name end
1184+ 6993             >
1184+ 6993 7C 69       >                dw      last_NFA            // Link to previous definition Name
1184+ 6995             >NOT_OP:          if Zero_Equal != 0 ; ok        // This is the start address of the direct jp(hl)
1184+ 6995 83 69       >                dw      Zero_Equal ; ok        // for primitive definitions  actual code
1184+ 6997             >                else
1184+ 6997 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1184+ 6997             >                endif           ; ok        // for other definitions it "points" the correct handler
1184+ 6997             >                // Use of "; ok" to suppress "warning[fwdref]"
1184+ 6997             >
1184+ 6997             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1185+ 6997
1186+ 6997              //  ______________________________________________________________________
1187+ 6997              //
1188+ 6997              // 0<           n -- f
1189+ 6997              // true (non zero) if n is less than zero, false (0) elsewere
1190+ 6997                              New_Def ZLESS, "0<", is_code, is_normal
1190+ 6997             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1190+ 6997             >
1190+ 6997             >                // dummy db directives used to calculate length of namec
1190+ 6997 30 3C       >                db      "0<"
1190+ 6999             >len_NFA         defl    $ - temp_NFA
1190+ 6999             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1190+ 6997             >
1190+ 6997 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1190+ 6998 30 3C       >                db      "0<"               // name string in 7-bit ascii, but
1190+ 699A             >                org     $-1                 // alter last byte of Name just above to set
1190+ 6999 BC          >                db      {b $} | END_BIT     // msb as name end
1190+ 699A             >
1190+ 699A 8F 69       >                dw      last_NFA            // Link to previous definition Name
1190+ 699C             >ZLESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1190+ 699C ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1190+ 699C             >                else
1190+ 699C 9E 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1190+ 699E             >                endif           ; ok        // for other definitions it "points" the correct handler
1190+ 699E             >                // Use of "; ok" to suppress "warning[fwdref]"
1190+ 699E             >
1190+ 699E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1191+ 699E E1                           pop     hl
1192+ 699F 29                           add     hl, hl
1193+ 69A0 21 00 00                     ld      hl, 0
1194+ 69A3 30 01                        jr      nc, ZLess_Skip
1195+ 69A5 2C                               inc     l
1196+ 69A6              ZLess_Skip:
1197+ 69A6                              psh1
1197+ 69A6 E5          >                push    hl
1197+ 69A7 DD E9       >                jp      (ix)
1198+ 69A9
1199+ 69A9              //  ______________________________________________________________________
1200+ 69A9              //
1201+ 69A9              // 0>           n -- f
1202+ 69A9              // true (non zero) if n is less than zero, false (0) elsewere
1203+ 69A9                              New_Def ZGREATER, "0>", is_code, is_normal
1203+ 69A9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1203+ 69A9             >
1203+ 69A9             >                // dummy db directives used to calculate length of namec
1203+ 69A9 30 3E       >                db      "0>"
1203+ 69AB             >len_NFA         defl    $ - temp_NFA
1203+ 69AB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1203+ 69A9             >
1203+ 69A9 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1203+ 69AA 30 3E       >                db      "0>"               // name string in 7-bit ascii, but
1203+ 69AC             >                org     $-1                 // alter last byte of Name just above to set
1203+ 69AB BE          >                db      {b $} | END_BIT     // msb as name end
1203+ 69AC             >
1203+ 69AC 97 69       >                dw      last_NFA            // Link to previous definition Name
1203+ 69AE             >ZGREATER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1203+ 69AE ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1203+ 69AE             >                else
1203+ 69AE B0 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1203+ 69B0             >                endif           ; ok        // for other definitions it "points" the correct handler
1203+ 69B0             >                // Use of "; ok" to suppress "warning[fwdref]"
1203+ 69B0             >
1203+ 69B0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1204+ 69B0 E1                           pop     hl
1205+ 69B1 7D                           ld      a, l
1206+ 69B2 B4                           or      h
1207+ 69B3 29                           add     hl, hl
1208+ 69B4 21 00 00                     ld      hl, FALSE_FLAG
1209+ 69B7 38 04                        jr      c, ZGreater_Skip
1210+ 69B9 A7                               and     a
1211+ 69BA 28 01                            jr      z, ZGreater_Skip
1212+ 69BC 2C                                   inc     l
1213+ 69BD              ZGreater_Skip:
1214+ 69BD                              psh1
1214+ 69BD E5          >                push    hl
1214+ 69BE DD E9       >                jp      (ix)
1215+ 69C0
1216+ 69C0              //  ______________________________________________________________________
1217+ 69C0              //
1218+ 69C0              // +            n1 n2 -- n3
1219+ 69C0              // returns the unsigned sum of two top values
1220+ 69C0                              New_Def PLUS, "+", is_code, is_normal
1220+ 69C0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1220+ 69C0             >
1220+ 69C0             >                // dummy db directives used to calculate length of namec
1220+ 69C0 2B          >                db      "+"
1220+ 69C1             >len_NFA         defl    $ - temp_NFA
1220+ 69C1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1220+ 69C0             >
1220+ 69C0 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1220+ 69C1 2B          >                db      "+"               // name string in 7-bit ascii, but
1220+ 69C2             >                org     $-1                 // alter last byte of Name just above to set
1220+ 69C1 AB          >                db      {b $} | END_BIT     // msb as name end
1220+ 69C2             >
1220+ 69C2 A9 69       >                dw      last_NFA            // Link to previous definition Name
1220+ 69C4             >PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1220+ 69C4 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1220+ 69C4             >                else
1220+ 69C4 C6 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1220+ 69C6             >                endif           ; ok        // for other definitions it "points" the correct handler
1220+ 69C6             >                // Use of "; ok" to suppress "warning[fwdref]"
1220+ 69C6             >
1220+ 69C6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1221+ 69C6 E1                           pop     hl
1222+ 69C7 D1                           pop     de
1223+ 69C8 19                           add     hl, de
1224+ 69C9
1225+ 69C9                              psh1
1225+ 69C9 E5          >                push    hl
1225+ 69CA DD E9       >                jp      (ix)
1226+ 69CC
1227+ 69CC
1228+ 69CC              //  ______________________________________________________________________
1229+ 69CC              //
1230+ 69CC              // d+           d1 d2 -- d3
1231+ 69CC              // returns the unsigned sum of two top double-numbers
1232+ 69CC              //      d2  d1
1233+ 69CC              //      h l h l
1234+ 69CC              // SP   LHEDLHED
1235+ 69CC              // SP  +01234567
1236+ 69CC                              New_Def DPLUS, "D+", is_code, is_normal
1236+ 69CC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1236+ 69CC             >
1236+ 69CC             >                // dummy db directives used to calculate length of namec
1236+ 69CC 44 2B       >                db      "D+"
1236+ 69CE             >len_NFA         defl    $ - temp_NFA
1236+ 69CE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1236+ 69CC             >
1236+ 69CC 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1236+ 69CD 44 2B       >                db      "D+"               // name string in 7-bit ascii, but
1236+ 69CF             >                org     $-1                 // alter last byte of Name just above to set
1236+ 69CE AB          >                db      {b $} | END_BIT     // msb as name end
1236+ 69CF             >
1236+ 69CF C0 69       >                dw      last_NFA            // Link to previous definition Name
1236+ 69D1             >DPLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1236+ 69D1 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1236+ 69D1             >                else
1236+ 69D1 D3 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1236+ 69D3             >                endif           ; ok        // for other definitions it "points" the correct handler
1236+ 69D3             >                // Use of "; ok" to suppress "warning[fwdref]"
1236+ 69D3             >
1236+ 69D3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1237+ 69D3
1238+ 69D3 21 07 00                     ld      hl, 7
1239+ 69D6 39                           add     hl, sp
1240+ 69D7 56                           ld      d, (hl)
1241+ 69D8 70                           ld      (hl), b             // Save IP
1242+ 69D9 2B                           dec     hl
1243+ 69DA 5E                           ld      e, (hl)
1244+ 69DB 71                           ld      (hl), c             // de := d1.L
1245+ 69DC C1                           pop     bc                  // bc := d2.H
1246+ 69DD E1                           pop     hl                  // hl := d2.L
1247+ 69DE 19                           add     hl, de              // hl := d2.L + d1.L
1248+ 69DF EB                           ex      de, hl              // de := lower
1249+ 69E0 E1                           pop     hl                  // d1.H
1250+ 69E1 ED 4A                        adc     hl, bc              // d1.H + d2.H
1251+ 69E3 C1                           pop     bc                  // Restore IP
1252+ 69E4
1253+ 69E4
1254+ 69E4                              psh2
1254+ 69E4 D5          >                push    de
1254+ 69E5 E5          >                push    hl
1254+ 69E6 DD E9       >                jp      (ix)
1255+ 69E8
1256+ 69E8              //  ______________________________________________________________________
1257+ 69E8              //
1258+ 69E8              // 1+           n1 -- n2
1259+ 69E8              // increment by 1 top of stack
1260+ 69E8                              New_Def ONE_PLUS, "1+", is_code, is_normal
1260+ 69E8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1260+ 69E8             >
1260+ 69E8             >                // dummy db directives used to calculate length of namec
1260+ 69E8 31 2B       >                db      "1+"
1260+ 69EA             >len_NFA         defl    $ - temp_NFA
1260+ 69EA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1260+ 69E8             >
1260+ 69E8 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1260+ 69E9 31 2B       >                db      "1+"               // name string in 7-bit ascii, but
1260+ 69EB             >                org     $-1                 // alter last byte of Name just above to set
1260+ 69EA AB          >                db      {b $} | END_BIT     // msb as name end
1260+ 69EB             >
1260+ 69EB CC 69       >                dw      last_NFA            // Link to previous definition Name
1260+ 69ED             >ONE_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1260+ 69ED ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1260+ 69ED             >                else
1260+ 69ED EF 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1260+ 69EF             >                endif           ; ok        // for other definitions it "points" the correct handler
1260+ 69EF             >                // Use of "; ok" to suppress "warning[fwdref]"
1260+ 69EF             >
1260+ 69EF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1261+ 69EF E1                           pop     hl
1262+ 69F0 23                           inc     hl
1263+ 69F1
1264+ 69F1                              psh1
1264+ 69F1 E5          >                push    hl
1264+ 69F2 DD E9       >                jp      (ix)
1265+ 69F4
1266+ 69F4              //  ______________________________________________________________________
1267+ 69F4              //
1268+ 69F4              // 1-           n1 -- n2
1269+ 69F4              // decrement by 1 top of stack
1270+ 69F4                              New_Def ONE_SUBTRACT, "1-", is_code, is_normal
1270+ 69F4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1270+ 69F4             >
1270+ 69F4             >                // dummy db directives used to calculate length of namec
1270+ 69F4 31 2D       >                db      "1-"
1270+ 69F6             >len_NFA         defl    $ - temp_NFA
1270+ 69F6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1270+ 69F4             >
1270+ 69F4 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1270+ 69F5 31 2D       >                db      "1-"               // name string in 7-bit ascii, but
1270+ 69F7             >                org     $-1                 // alter last byte of Name just above to set
1270+ 69F6 AD          >                db      {b $} | END_BIT     // msb as name end
1270+ 69F7             >
1270+ 69F7 E8 69       >                dw      last_NFA            // Link to previous definition Name
1270+ 69F9             >ONE_SUBTRACT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1270+ 69F9 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1270+ 69F9             >                else
1270+ 69F9 FB 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1270+ 69FB             >                endif           ; ok        // for other definitions it "points" the correct handler
1270+ 69FB             >                // Use of "; ok" to suppress "warning[fwdref]"
1270+ 69FB             >
1270+ 69FB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1271+ 69FB E1                           pop     hl
1272+ 69FC 2B                           dec     hl
1273+ 69FD
1274+ 69FD                              psh1
1274+ 69FD E5          >                push    hl
1274+ 69FE DD E9       >                jp      (ix)
1275+ 6A00
1276+ 6A00              //  ______________________________________________________________________
1277+ 6A00              //
1278+ 6A00              // 2+           n1 -- n2
1279+ 6A00              // increment by 2 top of stack
1280+ 6A00                              New_Def TWO_PLUS, "2+", is_code, is_normal
1280+ 6A00             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1280+ 6A00             >
1280+ 6A00             >                // dummy db directives used to calculate length of namec
1280+ 6A00 32 2B       >                db      "2+"
1280+ 6A02             >len_NFA         defl    $ - temp_NFA
1280+ 6A02             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1280+ 6A00             >
1280+ 6A00 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1280+ 6A01 32 2B       >                db      "2+"               // name string in 7-bit ascii, but
1280+ 6A03             >                org     $-1                 // alter last byte of Name just above to set
1280+ 6A02 AB          >                db      {b $} | END_BIT     // msb as name end
1280+ 6A03             >
1280+ 6A03 F4 69       >                dw      last_NFA            // Link to previous definition Name
1280+ 6A05             >TWO_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1280+ 6A05 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1280+ 6A05             >                else
1280+ 6A05 07 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1280+ 6A07             >                endif           ; ok        // for other definitions it "points" the correct handler
1280+ 6A07             >                // Use of "; ok" to suppress "warning[fwdref]"
1280+ 6A07             >
1280+ 6A07             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1281+ 6A07              Two_Plus:
1282+ 6A07 E1                           pop     hl
1283+ 6A08 23                           inc     hl
1284+ 6A09 23                           inc     hl
1285+ 6A0A
1286+ 6A0A                              psh1
1286+ 6A0A E5          >                push    hl
1286+ 6A0B DD E9       >                jp      (ix)
1287+ 6A0D
1288+ 6A0D              //  ______________________________________________________________________
1289+ 6A0D              //
1290+ 6A0D              // cell+        a1 -- a2
1291+ 6A0D              // increment by 2 top of stack
1292+ 6A0D                              New_Def CELL_PLUS, "CELL+", Two_Plus, is_normal
1292+ 6A0D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1292+ 6A0D             >
1292+ 6A0D             >                // dummy db directives used to calculate length of namec
1292+ 6A0D 43 45 4C 4C >                db      "CELL+"
1292+ 6A11 2B          >
1292+ 6A12             >len_NFA         defl    $ - temp_NFA
1292+ 6A12             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1292+ 6A0D             >
1292+ 6A0D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1292+ 6A0E 43 45 4C 4C >                db      "CELL+"               // name string in 7-bit ascii, but
1292+ 6A12 2B          >
1292+ 6A13             >                org     $-1                 // alter last byte of Name just above to set
1292+ 6A12 AB          >                db      {b $} | END_BIT     // msb as name end
1292+ 6A13             >
1292+ 6A13 00 6A       >                dw      last_NFA            // Link to previous definition Name
1292+ 6A15             >CELL_PLUS:          if Two_Plus != 0 ; ok        // This is the start address of the direct jp(hl)
1292+ 6A15 07 6A       >                dw      Two_Plus ; ok        // for primitive definitions  actual code
1292+ 6A17             >                else
1292+ 6A17 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1292+ 6A17             >                endif           ; ok        // for other definitions it "points" the correct handler
1292+ 6A17             >                // Use of "; ok" to suppress "warning[fwdref]"
1292+ 6A17             >
1292+ 6A17             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1293+ 6A17
1294+ 6A17              //  ______________________________________________________________________
1295+ 6A17              //
1296+ 6A17              // align        a1 -- a2
1297+ 6A17              // align memory : not used
1298+ 6A17              //              New_Def ALIGN_ADDR, "ALIGN", is_code, is_normal
1299+ 6A17              //            next
1300+ 6A17
1301+ 6A17              //  ______________________________________________________________________
1302+ 6A17              //
1303+ 6A17              // cell-        a1 -- a2
1304+ 6A17              // decrement by 2 top of stack
1305+ 6A17                              New_Def CELL_MINUS, "CELL-", is_code, is_normal
1305+ 6A17             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1305+ 6A17             >
1305+ 6A17             >                // dummy db directives used to calculate length of namec
1305+ 6A17 43 45 4C 4C >                db      "CELL-"
1305+ 6A1B 2D          >
1305+ 6A1C             >len_NFA         defl    $ - temp_NFA
1305+ 6A1C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1305+ 6A17             >
1305+ 6A17 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1305+ 6A18 43 45 4C 4C >                db      "CELL-"               // name string in 7-bit ascii, but
1305+ 6A1C 2D          >
1305+ 6A1D             >                org     $-1                 // alter last byte of Name just above to set
1305+ 6A1C AD          >                db      {b $} | END_BIT     // msb as name end
1305+ 6A1D             >
1305+ 6A1D 0D 6A       >                dw      last_NFA            // Link to previous definition Name
1305+ 6A1F             >CELL_MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1305+ 6A1F ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1305+ 6A1F             >                else
1305+ 6A1F 21 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1305+ 6A21             >                endif           ; ok        // for other definitions it "points" the correct handler
1305+ 6A21             >                // Use of "; ok" to suppress "warning[fwdref]"
1305+ 6A21             >
1305+ 6A21             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1306+ 6A21              CellMinus:
1307+ 6A21 E1                           pop     hl
1308+ 6A22 2B                           dec     hl
1309+ 6A23 2B                           dec     hl
1310+ 6A24
1311+ 6A24                              psh1
1311+ 6A24 E5          >                push    hl
1311+ 6A25 DD E9       >                jp      (ix)
1312+ 6A27
1313+ 6A27              //  ______________________________________________________________________
1314+ 6A27              //
1315+ 6A27              // 2-           a1 -- a2
1316+ 6A27              // decrement by 2 top of stack
1317+ 6A27                              New_Def TWO_MINUS, "2-", CellMinus, is_normal
1317+ 6A27             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1317+ 6A27             >
1317+ 6A27             >                // dummy db directives used to calculate length of namec
1317+ 6A27 32 2D       >                db      "2-"
1317+ 6A29             >len_NFA         defl    $ - temp_NFA
1317+ 6A29             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1317+ 6A27             >
1317+ 6A27 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1317+ 6A28 32 2D       >                db      "2-"               // name string in 7-bit ascii, but
1317+ 6A2A             >                org     $-1                 // alter last byte of Name just above to set
1317+ 6A29 AD          >                db      {b $} | END_BIT     // msb as name end
1317+ 6A2A             >
1317+ 6A2A 17 6A       >                dw      last_NFA            // Link to previous definition Name
1317+ 6A2C             >TWO_MINUS:          if CellMinus != 0 ; ok        // This is the start address of the direct jp(hl)
1317+ 6A2C 21 6A       >                dw      CellMinus ; ok        // for primitive definitions  actual code
1317+ 6A2E             >                else
1317+ 6A2E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1317+ 6A2E             >                endif           ; ok        // for other definitions it "points" the correct handler
1317+ 6A2E             >                // Use of "; ok" to suppress "warning[fwdref]"
1317+ 6A2E             >
1317+ 6A2E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1318+ 6A2E
1319+ 6A2E              //  ______________________________________________________________________
1320+ 6A2E              //
1321+ 6A2E              // negate        n1 -- n2
1322+ 6A2E              // change the sign of number
1323+ 6A2E                              New_Def MINUS, "NEGATE", is_code, is_normal
1323+ 6A2E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1323+ 6A2E             >
1323+ 6A2E             >                // dummy db directives used to calculate length of namec
1323+ 6A2E 4E 45 47 41 >                db      "NEGATE"
1323+ 6A32 54 45       >
1323+ 6A34             >len_NFA         defl    $ - temp_NFA
1323+ 6A34             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1323+ 6A2E             >
1323+ 6A2E 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1323+ 6A2F 4E 45 47 41 >                db      "NEGATE"               // name string in 7-bit ascii, but
1323+ 6A33 54 45       >
1323+ 6A35             >                org     $-1                 // alter last byte of Name just above to set
1323+ 6A34 C5          >                db      {b $} | END_BIT     // msb as name end
1323+ 6A35             >
1323+ 6A35 27 6A       >                dw      last_NFA            // Link to previous definition Name
1323+ 6A37             >MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1323+ 6A37 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1323+ 6A37             >                else
1323+ 6A37 39 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1323+ 6A39             >                endif           ; ok        // for other definitions it "points" the correct handler
1323+ 6A39             >                // Use of "; ok" to suppress "warning[fwdref]"
1323+ 6A39             >
1323+ 6A39             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1324+ 6A39 21 00 00                     ld      hl, 0               // subtract from 0
1325+ 6A3C D1                           pop     de
1326+ 6A3D B7                           or      a
1327+ 6A3E ED 52                        sbc     hl, de
1328+ 6A40
1329+ 6A40                              psh1
1329+ 6A40 E5          >                push    hl
1329+ 6A41 DD E9       >                jp      (ix)
1330+ 6A43
1331+ 6A43              //  ______________________________________________________________________
1332+ 6A43              //
1333+ 6A43              // dminus       d1 -- d2
1334+ 6A43              // change the sign of a double number
1335+ 6A43                              New_Def DMINUS, "DNEGATE", is_code, is_normal
1335+ 6A43             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1335+ 6A43             >
1335+ 6A43             >                // dummy db directives used to calculate length of namec
1335+ 6A43 44 4E 45 47 >                db      "DNEGATE"
1335+ 6A47 41 54 45    >
1335+ 6A4A             >len_NFA         defl    $ - temp_NFA
1335+ 6A4A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1335+ 6A43             >
1335+ 6A43 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1335+ 6A44 44 4E 45 47 >                db      "DNEGATE"               // name string in 7-bit ascii, but
1335+ 6A48 41 54 45    >
1335+ 6A4B             >                org     $-1                 // alter last byte of Name just above to set
1335+ 6A4A C5          >                db      {b $} | END_BIT     // msb as name end
1335+ 6A4B             >
1335+ 6A4B 2E 6A       >                dw      last_NFA            // Link to previous definition Name
1335+ 6A4D             >DMINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1335+ 6A4D ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1335+ 6A4D             >                else
1335+ 6A4D 4F 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1335+ 6A4F             >                endif           ; ok        // for other definitions it "points" the correct handler
1335+ 6A4F             >                // Use of "; ok" to suppress "warning[fwdref]"
1335+ 6A4F             >
1335+ 6A4F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1336+ 6A4F E1                           pop     hl                  // d1.H
1337+ 6A50 D1                           pop     de                  // d1.L
1338+ 6A51 C5                           push    bc                  // Save Instruction Pointer
1339+ 6A52 44                           ld      b, h
1340+ 6A53 4D                           ld      c, l                // bc := d1.L
1341+ 6A54 AF                           xor     a
1342+ 6A55 67                           ld      h, a
1343+ 6A56 6F                           ld      l, a
1344+ 6A57 ED 52                        sbc     hl, de              // subtact from zero
1345+ 6A59 D1                           pop     de                  // Retrieve Instruction Pointer
1346+ 6A5A E5                           push    hl                  // > d2-L
1347+ 6A5B 67                           ld      h, a
1348+ 6A5C 6F                           ld      l, a
1349+ 6A5D ED 42                        sbc     hl, bc              // subtract from zero with carry
1350+ 6A5F                                                          // > d2-H
1351+ 6A5F 42                           ld      b, d
1352+ 6A60 4B                           ld      c, e
1353+ 6A61                              psh1
1353+ 6A61 E5          >                push    hl
1353+ 6A62 DD E9       >                jp      (ix)
1354+ 6A64
1355+ 6A64              //  ______________________________________________________________________
1356+ 6A64              //
1357+ 6A64              // over         n1 n2 -- n1 n2 n1
1358+ 6A64              // copy the second value of stack and put it on top.
1359+ 6A64                              New_Def OVER, "OVER", is_code, is_normal
1359+ 6A64             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1359+ 6A64             >
1359+ 6A64             >                // dummy db directives used to calculate length of namec
1359+ 6A64 4F 56 45 52 >                db      "OVER"
1359+ 6A68             >len_NFA         defl    $ - temp_NFA
1359+ 6A68             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1359+ 6A64             >
1359+ 6A64 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1359+ 6A65 4F 56 45 52 >                db      "OVER"               // name string in 7-bit ascii, but
1359+ 6A69             >                org     $-1                 // alter last byte of Name just above to set
1359+ 6A68 D2          >                db      {b $} | END_BIT     // msb as name end
1359+ 6A69             >
1359+ 6A69 43 6A       >                dw      last_NFA            // Link to previous definition Name
1359+ 6A6B             >OVER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1359+ 6A6B ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1359+ 6A6B             >                else
1359+ 6A6B 6D 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1359+ 6A6D             >                endif           ; ok        // for other definitions it "points" the correct handler
1359+ 6A6D             >                // Use of "; ok" to suppress "warning[fwdref]"
1359+ 6A6D             >
1359+ 6A6D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1360+ 6A6D D1                           pop     de                  //   n2
1361+ 6A6E E1                           pop     hl                  // < n1
1362+ 6A6F E5                           push    hl                  // > n1
1363+ 6A70 D5                           push    de                  // > n2
1364+ 6A71 E5                           push    hl                  // > n1
1365+ 6A72                              next
1365+ 6A72 DD E9       >                jp      (ix)
1366+ 6A74
1367+ 6A74              //  ______________________________________________________________________
1368+ 6A74              //
1369+ 6A74              // drop         n1 --
1370+ 6A74              // drops the top of stack
1371+ 6A74                              New_Def DROP, "DROP", is_code, is_normal
1371+ 6A74             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1371+ 6A74             >
1371+ 6A74             >                // dummy db directives used to calculate length of namec
1371+ 6A74 44 52 4F 50 >                db      "DROP"
1371+ 6A78             >len_NFA         defl    $ - temp_NFA
1371+ 6A78             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1371+ 6A74             >
1371+ 6A74 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1371+ 6A75 44 52 4F 50 >                db      "DROP"               // name string in 7-bit ascii, but
1371+ 6A79             >                org     $-1                 // alter last byte of Name just above to set
1371+ 6A78 D0          >                db      {b $} | END_BIT     // msb as name end
1371+ 6A79             >
1371+ 6A79 64 6A       >                dw      last_NFA            // Link to previous definition Name
1371+ 6A7B             >DROP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1371+ 6A7B ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1371+ 6A7B             >                else
1371+ 6A7B 7D 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1371+ 6A7D             >                endif           ; ok        // for other definitions it "points" the correct handler
1371+ 6A7D             >                // Use of "; ok" to suppress "warning[fwdref]"
1371+ 6A7D             >
1371+ 6A7D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1372+ 6A7D E1                           pop     hl                  // < n1 and discard previous TOS
1373+ 6A7E                              next
1373+ 6A7E DD E9       >                jp      (ix)
1374+ 6A80
1375+ 6A80              //  ______________________________________________________________________
1376+ 6A80              //
1377+ 6A80              // nip          n1 n2 -- n2
1378+ 6A80              // drops the second elemento on the stack
1379+ 6A80                              New_Def NIP, "NIP", is_code, is_normal
1379+ 6A80             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1379+ 6A80             >
1379+ 6A80             >                // dummy db directives used to calculate length of namec
1379+ 6A80 4E 49 50    >                db      "NIP"
1379+ 6A83             >len_NFA         defl    $ - temp_NFA
1379+ 6A83             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1379+ 6A80             >
1379+ 6A80 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1379+ 6A81 4E 49 50    >                db      "NIP"               // name string in 7-bit ascii, but
1379+ 6A84             >                org     $-1                 // alter last byte of Name just above to set
1379+ 6A83 D0          >                db      {b $} | END_BIT     // msb as name end
1379+ 6A84             >
1379+ 6A84 74 6A       >                dw      last_NFA            // Link to previous definition Name
1379+ 6A86             >NIP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1379+ 6A86 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1379+ 6A86             >                else
1379+ 6A86 88 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1379+ 6A88             >                endif           ; ok        // for other definitions it "points" the correct handler
1379+ 6A88             >                // Use of "; ok" to suppress "warning[fwdref]"
1379+ 6A88             >
1379+ 6A88             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1380+ 6A88
1381+ 6A88 E1                           pop     hl                  // < n1 discarded
1382+ 6A89 E3                           ex      (sp), hl
1383+ 6A8A                              next
1383+ 6A8A DD E9       >                jp      (ix)
1384+ 6A8C
1385+ 6A8C              //  ______________________________________________________________________
1386+ 6A8C              //
1387+ 6A8C              // tuck         n1 n2 -- n2 n1 n2
1388+ 6A8C              // copy the top element after the second.
1389+ 6A8C                              New_Def TUCK, "TUCK", is_code, is_normal
1389+ 6A8C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1389+ 6A8C             >
1389+ 6A8C             >                // dummy db directives used to calculate length of namec
1389+ 6A8C 54 55 43 4B >                db      "TUCK"
1389+ 6A90             >len_NFA         defl    $ - temp_NFA
1389+ 6A90             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1389+ 6A8C             >
1389+ 6A8C 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1389+ 6A8D 54 55 43 4B >                db      "TUCK"               // name string in 7-bit ascii, but
1389+ 6A91             >                org     $-1                 // alter last byte of Name just above to set
1389+ 6A90 CB          >                db      {b $} | END_BIT     // msb as name end
1389+ 6A91             >
1389+ 6A91 80 6A       >                dw      last_NFA            // Link to previous definition Name
1389+ 6A93             >TUCK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1389+ 6A93 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1389+ 6A93             >                else
1389+ 6A93 95 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1389+ 6A95             >                endif           ; ok        // for other definitions it "points" the correct handler
1389+ 6A95             >                // Use of "; ok" to suppress "warning[fwdref]"
1389+ 6A95             >
1389+ 6A95             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1390+ 6A95 E1                           pop     hl
1391+ 6A96 D1                           pop     de                  // < n1
1392+ 6A97 E5                           push    hl                  // > n2  and TOS
1393+ 6A98 D5                           push    de                  // > n1
1394+ 6A99 E5                           push    hl
1395+ 6A9A                              next
1395+ 6A9A DD E9       >                jp      (ix)
1396+ 6A9C
1397+ 6A9C              //  ______________________________________________________________________
1398+ 6A9C              //
1399+ 6A9C              // swap         n1 n2 -- n2 n1
1400+ 6A9C              // swaps the two values on top of stack
1401+ 6A9C                              New_Def SWAP, "SWAP", is_code, is_normal
1401+ 6A9C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1401+ 6A9C             >
1401+ 6A9C             >                // dummy db directives used to calculate length of namec
1401+ 6A9C 53 57 41 50 >                db      "SWAP"
1401+ 6AA0             >len_NFA         defl    $ - temp_NFA
1401+ 6AA0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1401+ 6A9C             >
1401+ 6A9C 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1401+ 6A9D 53 57 41 50 >                db      "SWAP"               // name string in 7-bit ascii, but
1401+ 6AA1             >                org     $-1                 // alter last byte of Name just above to set
1401+ 6AA0 D0          >                db      {b $} | END_BIT     // msb as name end
1401+ 6AA1             >
1401+ 6AA1 8C 6A       >                dw      last_NFA            // Link to previous definition Name
1401+ 6AA3             >SWAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1401+ 6AA3 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1401+ 6AA3             >                else
1401+ 6AA3 A5 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1401+ 6AA5             >                endif           ; ok        // for other definitions it "points" the correct handler
1401+ 6AA5             >                // Use of "; ok" to suppress "warning[fwdref]"
1401+ 6AA5             >
1401+ 6AA5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1402+ 6AA5 E1                           pop     hl                  // < n1
1403+ 6AA6 E3                           ex      (sp),hl             // > n2
1404+ 6AA7 E5                           push    hl                  // copy n1 to TOS
1405+ 6AA8                              next
1405+ 6AA8 DD E9       >                jp      (ix)
1406+ 6AAA
1407+ 6AAA              //  ______________________________________________________________________
1408+ 6AAA              //
1409+ 6AAA              // dup         n -- n n
1410+ 6AAA              // duplicates the top value of stack
1411+ 6AAA                              New_Def DUP, "DUP", is_code, is_normal
1411+ 6AAA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1411+ 6AAA             >
1411+ 6AAA             >                // dummy db directives used to calculate length of namec
1411+ 6AAA 44 55 50    >                db      "DUP"
1411+ 6AAD             >len_NFA         defl    $ - temp_NFA
1411+ 6AAD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1411+ 6AAA             >
1411+ 6AAA 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1411+ 6AAB 44 55 50    >                db      "DUP"               // name string in 7-bit ascii, but
1411+ 6AAE             >                org     $-1                 // alter last byte of Name just above to set
1411+ 6AAD D0          >                db      {b $} | END_BIT     // msb as name end
1411+ 6AAE             >
1411+ 6AAE 9C 6A       >                dw      last_NFA            // Link to previous definition Name
1411+ 6AB0             >DUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1411+ 6AB0 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1411+ 6AB0             >                else
1411+ 6AB0 B2 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1411+ 6AB2             >                endif           ; ok        // for other definitions it "points" the correct handler
1411+ 6AB2             >                // Use of "; ok" to suppress "warning[fwdref]"
1411+ 6AB2             >
1411+ 6AB2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1412+ 6AB2 E1                           pop     hl
1413+ 6AB3 E5                           push    hl                  // > n duplicate TOS
1414+ 6AB4 E5                           push    hl
1415+ 6AB5                              next
1415+ 6AB5 DD E9       >                jp      (ix)
1416+ 6AB7
1417+ 6AB7              //  ______________________________________________________________________
1418+ 6AB7              //
1419+ 6AB7              // rot         n1 n2 n3 -- n2 n3 n1
1420+ 6AB7              // Rotates the 3 top values of stack by picking the 3rd in access-order
1421+ 6AB7              // and putting it on top. The other two are shifted down one place.
1422+ 6AB7                              New_Def ROT, "ROT", is_code, is_normal
1422+ 6AB7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1422+ 6AB7             >
1422+ 6AB7             >                // dummy db directives used to calculate length of namec
1422+ 6AB7 52 4F 54    >                db      "ROT"
1422+ 6ABA             >len_NFA         defl    $ - temp_NFA
1422+ 6ABA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1422+ 6AB7             >
1422+ 6AB7 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1422+ 6AB8 52 4F 54    >                db      "ROT"               // name string in 7-bit ascii, but
1422+ 6ABB             >                org     $-1                 // alter last byte of Name just above to set
1422+ 6ABA D4          >                db      {b $} | END_BIT     // msb as name end
1422+ 6ABB             >
1422+ 6ABB AA 6A       >                dw      last_NFA            // Link to previous definition Name
1422+ 6ABD             >ROT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1422+ 6ABD ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1422+ 6ABD             >                else
1422+ 6ABD BF 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1422+ 6ABF             >                endif           ; ok        // for other definitions it "points" the correct handler
1422+ 6ABF             >                // Use of "; ok" to suppress "warning[fwdref]"
1422+ 6ABF             >
1422+ 6ABF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1423+ 6ABF D1                           pop     de                  // < n3
1424+ 6AC0 E1                           pop     hl                  // < n2
1425+ 6AC1 E3                           ex      (sp),hl             // > n2 < n1
1426+ 6AC2 D5                           push    de                  // > n3
1427+ 6AC3 E5                           push    hl                  // copy n1 to TOS
1428+ 6AC4                              next
1428+ 6AC4 DD E9       >                jp      (ix)
1429+ 6AC6
1430+ 6AC6              //  ______________________________________________________________________
1431+ 6AC6              //
1432+ 6AC6              // -rot         n1 n2 n3 -- n3 n1 n2
1433+ 6AC6              // Rotates the 3 top values of stack by picking the 1st in access-order
1434+ 6AC6              // and putting back to 3rd place. The other two are shifted down one place.
1435+ 6AC6                              New_Def DASH_ROT, "-ROT", is_code, is_normal
1435+ 6AC6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1435+ 6AC6             >
1435+ 6AC6             >                // dummy db directives used to calculate length of namec
1435+ 6AC6 2D 52 4F 54 >                db      "-ROT"
1435+ 6ACA             >len_NFA         defl    $ - temp_NFA
1435+ 6ACA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1435+ 6AC6             >
1435+ 6AC6 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1435+ 6AC7 2D 52 4F 54 >                db      "-ROT"               // name string in 7-bit ascii, but
1435+ 6ACB             >                org     $-1                 // alter last byte of Name just above to set
1435+ 6ACA D4          >                db      {b $} | END_BIT     // msb as name end
1435+ 6ACB             >
1435+ 6ACB B7 6A       >                dw      last_NFA            // Link to previous definition Name
1435+ 6ACD             >DASH_ROT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1435+ 6ACD ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1435+ 6ACD             >                else
1435+ 6ACD CF 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1435+ 6ACF             >                endif           ; ok        // for other definitions it "points" the correct handler
1435+ 6ACF             >                // Use of "; ok" to suppress "warning[fwdref]"
1435+ 6ACF             >
1435+ 6ACF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1436+ 6ACF E1                           pop     hl                  // < n3
1437+ 6AD0 D1                           pop     de                  // < n2
1438+ 6AD1 E3                           ex      (sp),hl             // > n3 < n1
1439+ 6AD2 E5                           push    hl                  // > n1
1440+ 6AD3 D5                           push    de                  // copy n3 to TOS
1441+ 6AD4                              next
1441+ 6AD4 DD E9       >                jp      (ix)
1442+ 6AD6
1443+ 6AD6              //  ______________________________________________________________________
1444+ 6AD6              //
1445+ 6AD6              // pick        n1 -- nx
1446+ 6AD6              // picks the nth element from TOS
1447+ 6AD6                              New_Def PICK, "PICK", is_code, is_normal
1447+ 6AD6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1447+ 6AD6             >
1447+ 6AD6             >                // dummy db directives used to calculate length of namec
1447+ 6AD6 50 49 43 4B >                db      "PICK"
1447+ 6ADA             >len_NFA         defl    $ - temp_NFA
1447+ 6ADA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1447+ 6AD6             >
1447+ 6AD6 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1447+ 6AD7 50 49 43 4B >                db      "PICK"               // name string in 7-bit ascii, but
1447+ 6ADB             >                org     $-1                 // alter last byte of Name just above to set
1447+ 6ADA CB          >                db      {b $} | END_BIT     // msb as name end
1447+ 6ADB             >
1447+ 6ADB C6 6A       >                dw      last_NFA            // Link to previous definition Name
1447+ 6ADD             >PICK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1447+ 6ADD ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1447+ 6ADD             >                else
1447+ 6ADD DF 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1447+ 6ADF             >                endif           ; ok        // for other definitions it "points" the correct handler
1447+ 6ADF             >                // Use of "; ok" to suppress "warning[fwdref]"
1447+ 6ADF             >
1447+ 6ADF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1448+ 6ADF E1                           pop     hl                  // take TOS as index
1449+ 6AE0 29                           add     hl, hl              // as cells
1450+ 6AE1 39                           add     hl, sp              // from Stack Pointer
1451+ 6AE2 7E                           ld      a, (hl)             // replace TOS
1452+ 6AE3 23                           inc     hl
1453+ 6AE4 66                           ld      h, (hl)
1454+ 6AE5 6F                           ld      l, a
1455+ 6AE6
1456+ 6AE6                              psh1
1456+ 6AE6 E5          >                push    hl
1456+ 6AE7 DD E9       >                jp      (ix)
1457+ 6AE9
1458+ 6AE9
1459+ 6AE9              //  ______________________________________________________________________
1460+ 6AE9              //
1461+ 6AE9              // 2over        d1 d2 -- d1 d2 d1
1462+ 6AE9              //              n1 n2 n3 n4 -- n1 n2 n3 n4 n1 n2
1463+ 6AE9              // copy the second double of stack and put on top.
1464+ 6AE9              //              New_Def TWO_OVER, "2OVER", is_code, is_normal
1465+ 6AE9              //
1466+ 6AE9              //              ld      hl, 7
1467+ 6AE9              //              add     hl, sp
1468+ 6AE9              //              ld      d, (hl)
1469+ 6AE9              //              dec     hl
1470+ 6AE9              //              ld      e, (hl)             // d1-L
1471+ 6AE9              //              push    de
1472+ 6AE9              //              dec     hl
1473+ 6AE9              //              ld      d, (hl)
1474+ 6AE9              //              dec     hl
1475+ 6AE9              //              ld      e, (hl)             // d1-H
1476+ 6AE9              //              push    de
1477+ 6AE9              //              next
1478+ 6AE9
1479+ 6AE9              //  ______________________________________________________________________
1480+ 6AE9              //
1481+ 6AE9              // 2drop        d --
1482+ 6AE9              //              n1 n2 --
1483+ 6AE9              // drops the top double from stack
1484+ 6AE9                              New_Def TWO_DROP, "2DROP", is_code, is_normal
1484+ 6AE9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1484+ 6AE9             >
1484+ 6AE9             >                // dummy db directives used to calculate length of namec
1484+ 6AE9 32 44 52 4F >                db      "2DROP"
1484+ 6AED 50          >
1484+ 6AEE             >len_NFA         defl    $ - temp_NFA
1484+ 6AEE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1484+ 6AE9             >
1484+ 6AE9 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1484+ 6AEA 32 44 52 4F >                db      "2DROP"               // name string in 7-bit ascii, but
1484+ 6AEE 50          >
1484+ 6AEF             >                org     $-1                 // alter last byte of Name just above to set
1484+ 6AEE D0          >                db      {b $} | END_BIT     // msb as name end
1484+ 6AEF             >
1484+ 6AEF D6 6A       >                dw      last_NFA            // Link to previous definition Name
1484+ 6AF1             >TWO_DROP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1484+ 6AF1 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1484+ 6AF1             >                else
1484+ 6AF1 F3 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1484+ 6AF3             >                endif           ; ok        // for other definitions it "points" the correct handler
1484+ 6AF3             >                // Use of "; ok" to suppress "warning[fwdref]"
1484+ 6AF3             >
1484+ 6AF3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1485+ 6AF3 E1                           pop     hl
1486+ 6AF4 E1                           pop     hl
1487+ 6AF5                              next
1487+ 6AF5 DD E9       >                jp      (ix)
1488+ 6AF7
1489+ 6AF7              //  ______________________________________________________________________
1490+ 6AF7              //
1491+ 6AF7              // 2nip         d1 d2 -- d2
1492+ 6AF7              //              n1 n2 n3 n4 -- n3 n4
1493+ 6AF7              // drops the second double on the stack
1494+ 6AF7              //              New_Def TWO_NIP, 4, "2nip"
1495+ 6AF7              //              ...
1496+ 6AF7
1497+ 6AF7              //  ______________________________________________________________________
1498+ 6AF7              //
1499+ 6AF7              // 2tuck         d1 d2 -- d2 d1 d2
1500+ 6AF7              // copy the top element after the second.
1501+ 6AF7              //              New_Def TWO_TUCK, 5, "2tuck"
1502+ 6AF7              //              ...
1503+ 6AF7
1504+ 6AF7              //  ______________________________________________________________________
1505+ 6AF7              //
1506+ 6AF7              // 2swap         d1 d2 -- d2 d1
1507+ 6AF7              //               n1 n2 n3 n4 -- n3 n4 n1 n2
1508+ 6AF7              // swaps the two doubles on top of stack
1509+ 6AF7                              New_Def TWO_SWAP, "2SWAP", is_code, is_normal
1509+ 6AF7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1509+ 6AF7             >
1509+ 6AF7             >                // dummy db directives used to calculate length of namec
1509+ 6AF7 32 53 57 41 >                db      "2SWAP"
1509+ 6AFB 50          >
1509+ 6AFC             >len_NFA         defl    $ - temp_NFA
1509+ 6AFC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1509+ 6AF7             >
1509+ 6AF7 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1509+ 6AF8 32 53 57 41 >                db      "2SWAP"               // name string in 7-bit ascii, but
1509+ 6AFC 50          >
1509+ 6AFD             >                org     $-1                 // alter last byte of Name just above to set
1509+ 6AFC D0          >                db      {b $} | END_BIT     // msb as name end
1509+ 6AFD             >
1509+ 6AFD E9 6A       >                dw      last_NFA            // Link to previous definition Name
1509+ 6AFF             >TWO_SWAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1509+ 6AFF ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1509+ 6AFF             >                else
1509+ 6AFF 01 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1509+ 6B01             >                endif           ; ok        // for other definitions it "points" the correct handler
1509+ 6B01             >                // Use of "; ok" to suppress "warning[fwdref]"
1509+ 6B01             >
1509+ 6B01             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1510+ 6B01 F1                           pop     af                  //   d2-H
1511+ 6B02 E1                           pop     hl                  // < d2-L
1512+ 6B03 D1                           pop     de                  // < d1-H
1513+ 6B04 E3                           ex      (sp), hl            // < d1-L > d2-L
1514+ 6B05 F5                           push    af                  // > d2-H
1515+ 6B06 E5                           push    hl                  // > d1-L
1516+ 6B07 D5                           push    de
1517+ 6B08
1518+ 6B08                              next
1518+ 6B08 DD E9       >                jp      (ix)
1519+ 6B0A
1520+ 6B0A              //  ______________________________________________________________________
1521+ 6B0A              //
1522+ 6B0A              // 2dup         d -- d d
1523+ 6B0A              //              n1 n2 -- n1 n2 n1 n2
1524+ 6B0A              // duplicates the top double of stack
1525+ 6B0A                              New_Def TWO_DUP, "2DUP", is_code, is_normal
1525+ 6B0A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1525+ 6B0A             >
1525+ 6B0A             >                // dummy db directives used to calculate length of namec
1525+ 6B0A 32 44 55 50 >                db      "2DUP"
1525+ 6B0E             >len_NFA         defl    $ - temp_NFA
1525+ 6B0E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1525+ 6B0A             >
1525+ 6B0A 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1525+ 6B0B 32 44 55 50 >                db      "2DUP"               // name string in 7-bit ascii, but
1525+ 6B0F             >                org     $-1                 // alter last byte of Name just above to set
1525+ 6B0E D0          >                db      {b $} | END_BIT     // msb as name end
1525+ 6B0F             >
1525+ 6B0F F7 6A       >                dw      last_NFA            // Link to previous definition Name
1525+ 6B11             >TWO_DUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1525+ 6B11 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1525+ 6B11             >                else
1525+ 6B11 13 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1525+ 6B13             >                endif           ; ok        // for other definitions it "points" the correct handler
1525+ 6B13             >                // Use of "; ok" to suppress "warning[fwdref]"
1525+ 6B13             >
1525+ 6B13             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1526+ 6B13 E1                           pop     hl                  // < d-H
1527+ 6B14 D1                           pop     de                  // < d-L
1528+ 6B15 D5                           push    de                  // < d-L
1529+ 6B16 E5                           push    hl                  // > d-H
1530+ 6B17 D5                           push    de                  // > d-L
1531+ 6B18 E5                           push    hl                  // > d-H
1532+ 6B19                              next
1532+ 6B19 DD E9       >                jp      (ix)
1533+ 6B1B
1534+ 6B1B              //  ______________________________________________________________________
1535+ 6B1B              //
1536+ 6B1B              // 2rot         d1 d2 d3 -- d2 d3 d1
1537+ 6B1B              //              n1 n2 n3 n4 n5 n6 -- n3 n4 n5 n6 n1 n2
1538+ 6B1B              // Rotates the 3 top doubles of stack by picking the 3rd in access-order
1539+ 6B1B              // and putting it on top. The other two are shifted down one place.
1540+ 6B1B              //              New_Def TWO?ROT, 4, "2rot"
1541+ 6B1B              //              ...
1542+ 6B1B              //              New_Def TWO_ROT, "2ROT", is_code, is_normal
1543+ 6B1B              //
1544+ 6B1B              //      d3  |d2  |d1  |
1545+ 6B1B              //      h l |h l |h l |
1546+ 6B1B              // SP   LHED|LHED|LHED|
1547+ 6B1B              // SP  +0123|4567|89ab|
1548+ 6B1B              //              ld      hl, $000B
1549+ 6B1B              //              add     hl, sp
1550+ 6B1B              //              ld      d, (hl)
1551+ 6B1B              //              dec     hl
1552+ 6B1B              //              ld      e, (hl)
1553+ 6B1B              //              dec     hl
1554+ 6B1B              //              push    de
1555+ 6B1B              //              ld      d, (hl)
1556+ 6B1B              //              dec     hl
1557+ 6B1B              //              ld      e, (hl)
1558+ 6B1B              //              dec     hl
1559+ 6B1B              //              push    de
1560+ 6B1B
1561+ 6B1B              //      d1  |d3  |d2  |d1  |
1562+ 6B1B              //      h l |h l |h l |h l |
1563+ 6B1B              // SP   LHED|LHED|LHED|LHED|
1564+ 6B1B              // SP       +0123|4567|89ab|
1565+ 6B1B
1566+ 6B1B              //              ld      d, h
1567+ 6B1B              //              ld      e, l
1568+ 6B1B              //              inc     de
1569+ 6B1B              //              inc     de
1570+ 6B1B              //              inc     de
1571+ 6B1B              //              inc     de
1572+ 6B1B              //              push    bc
1573+ 6B1B              //              ld      bc, $000C
1574+ 6B1B              //              lddr
1575+ 6B1B              //              pop     bc
1576+ 6B1B              //              pop     de
1577+ 6B1B              //              pop     de
1578+ 6B1B              //
1579+ 6B1B              //              next
1580+ 6B1B
1581+ 6B1B
1582+ 6B1B              //  ______________________________________________________________________
1583+ 6B1B              //
1584+ 6B1B              // +!           n a --
1585+ 6B1B              // Sums to the content of address a the number n.
1586+ 6B1B              // It is the same of  a @ n + a !
1587+ 6B1B                              New_Def PLUSSTORE, "+!", is_code, is_normal
1587+ 6B1B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1587+ 6B1B             >
1587+ 6B1B             >                // dummy db directives used to calculate length of namec
1587+ 6B1B 2B 21       >                db      "+!"
1587+ 6B1D             >len_NFA         defl    $ - temp_NFA
1587+ 6B1D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1587+ 6B1B             >
1587+ 6B1B 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1587+ 6B1C 2B 21       >                db      "+!"               // name string in 7-bit ascii, but
1587+ 6B1E             >                org     $-1                 // alter last byte of Name just above to set
1587+ 6B1D A1          >                db      {b $} | END_BIT     // msb as name end
1587+ 6B1E             >
1587+ 6B1E 0A 6B       >                dw      last_NFA            // Link to previous definition Name
1587+ 6B20             >PLUSSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1587+ 6B20 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1587+ 6B20             >                else
1587+ 6B20 22 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1587+ 6B22             >                endif           ; ok        // for other definitions it "points" the correct handler
1587+ 6B22             >                // Use of "; ok" to suppress "warning[fwdref]"
1587+ 6B22             >
1587+ 6B22             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1588+ 6B22 E1                           pop     hl                  // hl is the address
1589+ 6B23 D1                           pop     de                  // de is the number
1590+ 6B24 7E                           ld      a, (hl)
1591+ 6B25 83                           add     e
1592+ 6B26 77                           ld      (hl), a
1593+ 6B27 23                           inc     hl
1594+ 6B28 7E                           ld      a, (hl)
1595+ 6B29 8A                           adc     d
1596+ 6B2A 77                           ld      (hl), a
1597+ 6B2B
1598+ 6B2B                              next
1598+ 6B2B DD E9       >                jp      (ix)
1599+ 6B2D
1600+ 6B2D              //  ______________________________________________________________________
1601+ 6B2D              //
1602+ 6B2D              // toggle       a n --
1603+ 6B2D              // Complements (xor) the byte at addrress  a  with the model n.
1604+ 6B2D                              New_Def TOGGLE, "TOGGLE", is_code, is_normal
1604+ 6B2D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1604+ 6B2D             >
1604+ 6B2D             >                // dummy db directives used to calculate length of namec
1604+ 6B2D 54 4F 47 47 >                db      "TOGGLE"
1604+ 6B31 4C 45       >
1604+ 6B33             >len_NFA         defl    $ - temp_NFA
1604+ 6B33             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1604+ 6B2D             >
1604+ 6B2D 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1604+ 6B2E 54 4F 47 47 >                db      "TOGGLE"               // name string in 7-bit ascii, but
1604+ 6B32 4C 45       >
1604+ 6B34             >                org     $-1                 // alter last byte of Name just above to set
1604+ 6B33 C5          >                db      {b $} | END_BIT     // msb as name end
1604+ 6B34             >
1604+ 6B34 1B 6B       >                dw      last_NFA            // Link to previous definition Name
1604+ 6B36             >TOGGLE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1604+ 6B36 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1604+ 6B36             >                else
1604+ 6B36 38 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1604+ 6B38             >                endif           ; ok        // for other definitions it "points" the correct handler
1604+ 6B38             >                // Use of "; ok" to suppress "warning[fwdref]"
1604+ 6B38             >
1604+ 6B38             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1605+ 6B38 D1                           pop     de
1606+ 6B39 E1                           pop     hl
1607+ 6B3A 7E                           ld      a, (hl)
1608+ 6B3B AB                           xor     e
1609+ 6B3C 77                           ld      (hl), a
1610+ 6B3D
1611+ 6B3D                              next
1611+ 6B3D DD E9       >                jp      (ix)
1612+ 6B3F
1613+ 6B3F              //  ______________________________________________________________________
1614+ 6B3F              //
1615+ 6B3F              // @            a -- n
1616+ 6B3F              // fetch 16 bit number n from address a. Z80 keeps high byte is in high memory
1617+ 6B3F                              New_Def FETCH, "@", is_code, is_normal
1617+ 6B3F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1617+ 6B3F             >
1617+ 6B3F             >                // dummy db directives used to calculate length of namec
1617+ 6B3F 40          >                db      "@"
1617+ 6B40             >len_NFA         defl    $ - temp_NFA
1617+ 6B40             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1617+ 6B3F             >
1617+ 6B3F 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1617+ 6B40 40          >                db      "@"               // name string in 7-bit ascii, but
1617+ 6B41             >                org     $-1                 // alter last byte of Name just above to set
1617+ 6B40 C0          >                db      {b $} | END_BIT     // msb as name end
1617+ 6B41             >
1617+ 6B41 2D 6B       >                dw      last_NFA            // Link to previous definition Name
1617+ 6B43             >FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1617+ 6B43 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1617+ 6B43             >                else
1617+ 6B43 45 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1617+ 6B45             >                endif           ; ok        // for other definitions it "points" the correct handler
1617+ 6B45             >                // Use of "; ok" to suppress "warning[fwdref]"
1617+ 6B45             >
1617+ 6B45             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1618+ 6B45 E1                           pop     hl
1619+ 6B46 5E                           ld      e, (hl)             // low-byte
1620+ 6B47 23                           inc     hl
1621+ 6B48 56                           ld      d, (hl)             // high-byte
1622+ 6B49 D5                           push    de
1623+ 6B4A                              next
1623+ 6B4A DD E9       >                jp      (ix)
1624+ 6B4C
1625+ 6B4C              //  ______________________________________________________________________
1626+ 6B4C              //
1627+ 6B4C              // !            n a --
1628+ 6B4C              // store 16 bit number n from address a. Z80 keeps high byte is in high memory
1629+ 6B4C                              New_Def STORE, "!", is_code, is_normal
1629+ 6B4C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1629+ 6B4C             >
1629+ 6B4C             >                // dummy db directives used to calculate length of namec
1629+ 6B4C 21          >                db      "!"
1629+ 6B4D             >len_NFA         defl    $ - temp_NFA
1629+ 6B4D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1629+ 6B4C             >
1629+ 6B4C 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1629+ 6B4D 21          >                db      "!"               // name string in 7-bit ascii, but
1629+ 6B4E             >                org     $-1                 // alter last byte of Name just above to set
1629+ 6B4D A1          >                db      {b $} | END_BIT     // msb as name end
1629+ 6B4E             >
1629+ 6B4E 3F 6B       >                dw      last_NFA            // Link to previous definition Name
1629+ 6B50             >STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1629+ 6B50 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1629+ 6B50             >                else
1629+ 6B50 52 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1629+ 6B52             >                endif           ; ok        // for other definitions it "points" the correct handler
1629+ 6B52             >                // Use of "; ok" to suppress "warning[fwdref]"
1629+ 6B52             >
1629+ 6B52             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1630+ 6B52 E1                           pop     hl                  // address
1631+ 6B53 D1                           pop     de                  // < n
1632+ 6B54 73                           ld      (hl), e             // low-byte
1633+ 6B55 23                           inc     hl
1634+ 6B56 72                           ld      (hl), d             // high-byte
1635+ 6B57
1636+ 6B57                              next
1636+ 6B57 DD E9       >                jp      (ix)
1637+ 6B59
1638+ 6B59              //  ______________________________________________________________________
1639+ 6B59              //
1640+ 6B59              // c@           a -- c
1641+ 6B59              // fetch a character n from address a
1642+ 6B59                              New_Def CFETCH, "C@", is_code, is_normal
1642+ 6B59             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1642+ 6B59             >
1642+ 6B59             >                // dummy db directives used to calculate length of namec
1642+ 6B59 43 40       >                db      "C@"
1642+ 6B5B             >len_NFA         defl    $ - temp_NFA
1642+ 6B5B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1642+ 6B59             >
1642+ 6B59 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1642+ 6B5A 43 40       >                db      "C@"               // name string in 7-bit ascii, but
1642+ 6B5C             >                org     $-1                 // alter last byte of Name just above to set
1642+ 6B5B C0          >                db      {b $} | END_BIT     // msb as name end
1642+ 6B5C             >
1642+ 6B5C 4C 6B       >                dw      last_NFA            // Link to previous definition Name
1642+ 6B5E             >CFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1642+ 6B5E ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1642+ 6B5E             >                else
1642+ 6B5E 60 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1642+ 6B60             >                endif           ; ok        // for other definitions it "points" the correct handler
1642+ 6B60             >                // Use of "; ok" to suppress "warning[fwdref]"
1642+ 6B60             >
1642+ 6B60             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1643+ 6B60 E1                           pop     hl
1644+ 6B61 6E                           ld      l, (hl)             // low-byte
1645+ 6B62 26 00                        ld      h, 0
1646+ 6B64
1647+ 6B64                              psh1
1647+ 6B64 E5          >                push    hl
1647+ 6B65 DD E9       >                jp      (ix)
1648+ 6B67
1649+ 6B67              //  ______________________________________________________________________
1650+ 6B67              //
1651+ 6B67              // c!           c a --
1652+ 6B67              // fetch 16 bit number n from address a. Z80 keeps high byte is in high memory
1653+ 6B67                              New_Def CSTORE, "C!", is_code, is_normal
1653+ 6B67             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1653+ 6B67             >
1653+ 6B67             >                // dummy db directives used to calculate length of namec
1653+ 6B67 43 21       >                db      "C!"
1653+ 6B69             >len_NFA         defl    $ - temp_NFA
1653+ 6B69             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1653+ 6B67             >
1653+ 6B67 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1653+ 6B68 43 21       >                db      "C!"               // name string in 7-bit ascii, but
1653+ 6B6A             >                org     $-1                 // alter last byte of Name just above to set
1653+ 6B69 A1          >                db      {b $} | END_BIT     // msb as name end
1653+ 6B6A             >
1653+ 6B6A 59 6B       >                dw      last_NFA            // Link to previous definition Name
1653+ 6B6C             >CSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1653+ 6B6C ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1653+ 6B6C             >                else
1653+ 6B6C 6E 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1653+ 6B6E             >                endif           ; ok        // for other definitions it "points" the correct handler
1653+ 6B6E             >                // Use of "; ok" to suppress "warning[fwdref]"
1653+ 6B6E             >
1653+ 6B6E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1654+ 6B6E E1                           pop     hl                  // < address
1655+ 6B6F D1                           pop     de
1656+ 6B70 73                           ld      (hl), e             // low-byte
1657+ 6B71
1658+ 6B71                              next
1658+ 6B71 DD E9       >                jp      (ix)
1659+ 6B73
1660+ 6B73              //  ______________________________________________________________________
1661+ 6B73              //
1662+ 6B73              // 2@           a -- d
1663+ 6B73              // fetch a 32 bits number d from address a and leaves it on top of the
1664+ 6B73              // stack as two single numbers, high part as top of the stack.
1665+ 6B73              // A double number is normally kept in CPU registers as HLDE.
1666+ 6B73              // On stack a double number is treated as two single numbers
1667+ 6B73              // where BC is on the top of the stack and HL is the second from top,
1668+ 6B73              // so the sign of the number can be checked on top of stack
1669+ 6B73              // and in the stack memory it appears as LHED.
1670+ 6B73              // Instead, a 32 bits number d is kept in memory as EDLH
1671+ 6B73              // with the lowest significant word in the lower location
1672+ 6B73              // and the highest significant word in the higher location.
1673+ 6B73              // fetch 32 bit number n from address a.
1674+ 6B73                              New_Def TWO_FETCH, "2@", is_code, is_normal
1674+ 6B73             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1674+ 6B73             >
1674+ 6B73             >                // dummy db directives used to calculate length of namec
1674+ 6B73 32 40       >                db      "2@"
1674+ 6B75             >len_NFA         defl    $ - temp_NFA
1674+ 6B75             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1674+ 6B73             >
1674+ 6B73 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1674+ 6B74 32 40       >                db      "2@"               // name string in 7-bit ascii, but
1674+ 6B76             >                org     $-1                 // alter last byte of Name just above to set
1674+ 6B75 C0          >                db      {b $} | END_BIT     // msb as name end
1674+ 6B76             >
1674+ 6B76 67 6B       >                dw      last_NFA            // Link to previous definition Name
1674+ 6B78             >TWO_FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1674+ 6B78 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1674+ 6B78             >                else
1674+ 6B78 7A 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1674+ 6B7A             >                endif           ; ok        // for other definitions it "points" the correct handler
1674+ 6B7A             >                // Use of "; ok" to suppress "warning[fwdref]"
1674+ 6B7A             >
1674+ 6B7A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1675+ 6B7A E1                           pop     hl                  // address
1676+ 6B7B 5E                           ld      e, (hl)             // low-byte
1677+ 6B7C 23                           inc     hl
1678+ 6B7D 56                           ld      d, (hl)             // high-byte
1679+ 6B7E
1680+ 6B7E 23                           inc     hl
1681+ 6B7F 7E                           ld      a, (hl)             // low-byte
1682+ 6B80 23                           inc     hl
1683+ 6B81 66                           ld      h, (hl)             // high-byte
1684+ 6B82 6F                           ld      l, a
1685+ 6B83                              psh2
1685+ 6B83 D5          >                push    de
1685+ 6B84 E5          >                push    hl
1685+ 6B85 DD E9       >                jp      (ix)
1686+ 6B87
1687+ 6B87              //  ______________________________________________________________________
1688+ 6B87              //
1689+ 6B87              // 2!           d a --
1690+ 6B87              // stores a 32 bits number d from address a and leaves it on top of the
1691+ 6B87              // stack as two single numbers, high part as top of the stack.
1692+ 6B87              // A double number is normally kept in CPU registers as HLDE.
1693+ 6B87              // On stack a double number is treated as two single numbers
1694+ 6B87              // where BC is on the top of the stack and HL is the second from top,
1695+ 6B87              // so the sign of the number can be checked on top of stack
1696+ 6B87              // and in the stack memory it appears as LHED.
1697+ 6B87              // Instead, a 32 bits number d is kept in memory as EDLH
1698+ 6B87              // with the lowest significant word in the lower location
1699+ 6B87              // and the highest significant word in the higher location.
1700+ 6B87              // fetch 32 bit number n from address a.
1701+ 6B87                              New_Def TWO_STORE, "2!", is_code, is_normal
1701+ 6B87             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1701+ 6B87             >
1701+ 6B87             >                // dummy db directives used to calculate length of namec
1701+ 6B87 32 21       >                db      "2!"
1701+ 6B89             >len_NFA         defl    $ - temp_NFA
1701+ 6B89             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1701+ 6B87             >
1701+ 6B87 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1701+ 6B88 32 21       >                db      "2!"               // name string in 7-bit ascii, but
1701+ 6B8A             >                org     $-1                 // alter last byte of Name just above to set
1701+ 6B89 A1          >                db      {b $} | END_BIT     // msb as name end
1701+ 6B8A             >
1701+ 6B8A 73 6B       >                dw      last_NFA            // Link to previous definition Name
1701+ 6B8C             >TWO_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1701+ 6B8C ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1701+ 6B8C             >                else
1701+ 6B8C 8E 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1701+ 6B8E             >                endif           ; ok        // for other definitions it "points" the correct handler
1701+ 6B8E             >                // Use of "; ok" to suppress "warning[fwdref]"
1701+ 6B8E             >
1701+ 6B8E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1702+ 6B8E 60                           ld      h, b
1703+ 6B8F 69                           ld      l, c
1704+ 6B90 D1                           pop     de                  // de has address
1705+ 6B91 C1                           pop     bc                  // < high-part
1706+ 6B92 E3                           ex      (sp), hl            // < low-part > Instruction Pointer
1707+ 6B93 EB                           ex      de, hl
1708+ 6B94 73                           ld      (hl), e
1709+ 6B95 23                           inc     hl
1710+ 6B96 72                           ld      (hl), d
1711+ 6B97 23                           inc     hl
1712+ 6B98 71                           ld      (hl), c
1713+ 6B99 23                           inc     hl
1714+ 6B9A 70                           ld      (hl), b
1715+ 6B9B C1                           pop     bc                  // Restore Instruction Pointer
1716+ 6B9C
1717+ 6B9C                              next
1717+ 6B9C DD E9       >                jp      (ix)
1718+ 6B9E
1719+ 6B9E              //  ______________________________________________________________________
1720+ 6B9E              //
1721+ 6B9E              // p@           a -- c
1722+ 6B9E              // Read one byte from port a and leave the result on top of stack
1723+ 6B9E                              New_Def PFETCH, "P@", is_code, is_normal
1723+ 6B9E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1723+ 6B9E             >
1723+ 6B9E             >                // dummy db directives used to calculate length of namec
1723+ 6B9E 50 40       >                db      "P@"
1723+ 6BA0             >len_NFA         defl    $ - temp_NFA
1723+ 6BA0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1723+ 6B9E             >
1723+ 6B9E 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1723+ 6B9F 50 40       >                db      "P@"               // name string in 7-bit ascii, but
1723+ 6BA1             >                org     $-1                 // alter last byte of Name just above to set
1723+ 6BA0 C0          >                db      {b $} | END_BIT     // msb as name end
1723+ 6BA1             >
1723+ 6BA1 87 6B       >                dw      last_NFA            // Link to previous definition Name
1723+ 6BA3             >PFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1723+ 6BA3 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1723+ 6BA3             >                else
1723+ 6BA3 A5 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1723+ 6BA5             >                endif           ; ok        // for other definitions it "points" the correct handler
1723+ 6BA5             >                // Use of "; ok" to suppress "warning[fwdref]"
1723+ 6BA5             >
1723+ 6BA5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1724+ 6BA5 50                           ld      d, b
1725+ 6BA6 59                           ld      e, c
1726+ 6BA7
1727+ 6BA7 C1                           pop     bc
1728+ 6BA8 26 00                        ld      h, 0
1729+ 6BAA ED 68                        in      l, (c)
1730+ 6BAC 42                           ld      b, d
1731+ 6BAD 4B                           ld      c, e
1732+ 6BAE                              psh1
1732+ 6BAE E5          >                push    hl
1732+ 6BAF DD E9       >                jp      (ix)
1733+ 6BB1
1734+ 6BB1              //  ______________________________________________________________________
1735+ 6BB1              //
1736+ 6BB1              // p!           c a --
1737+ 6BB1              // Send one byte (top of stack) to port a
1738+ 6BB1                              New_Def PSTORE, "P!", is_code, is_normal
1738+ 6BB1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1738+ 6BB1             >
1738+ 6BB1             >                // dummy db directives used to calculate length of namec
1738+ 6BB1 50 21       >                db      "P!"
1738+ 6BB3             >len_NFA         defl    $ - temp_NFA
1738+ 6BB3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1738+ 6BB1             >
1738+ 6BB1 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1738+ 6BB2 50 21       >                db      "P!"               // name string in 7-bit ascii, but
1738+ 6BB4             >                org     $-1                 // alter last byte of Name just above to set
1738+ 6BB3 A1          >                db      {b $} | END_BIT     // msb as name end
1738+ 6BB4             >
1738+ 6BB4 9E 6B       >                dw      last_NFA            // Link to previous definition Name
1738+ 6BB6             >PSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1738+ 6BB6 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1738+ 6BB6             >                else
1738+ 6BB6 B8 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1738+ 6BB8             >                endif           ; ok        // for other definitions it "points" the correct handler
1738+ 6BB8             >                // Use of "; ok" to suppress "warning[fwdref]"
1738+ 6BB8             >
1738+ 6BB8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1739+ 6BB8 50                           ld      d, b
1740+ 6BB9 59                           ld      e, c
1741+ 6BBA
1742+ 6BBA C1                           pop     bc
1743+ 6BBB E1                           pop     hl                  // < c
1744+ 6BBC ED 69                        out     (c), l              // low-byte
1745+ 6BBE 42                           ld      b, d
1746+ 6BBF 4B                           ld      c, e
1747+ 6BC0
1748+ 6BC0                              next
1748+ 6BC0 DD E9       >                jp      (ix)
1749+ 6BC2
1750+ 6BC2
1751+ 6BC2              //  ______________________________________________________________________
1752+ 6BC2              //
1753+ 6BC2              // 2*           n1 -- n2
1754+ 6BC2              // doubles the number at top of stack
1755+ 6BC2                              New_Def TWO_MUL, "2*", is_code, is_normal
1755+ 6BC2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1755+ 6BC2             >
1755+ 6BC2             >                // dummy db directives used to calculate length of namec
1755+ 6BC2 32 2A       >                db      "2*"
1755+ 6BC4             >len_NFA         defl    $ - temp_NFA
1755+ 6BC4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1755+ 6BC2             >
1755+ 6BC2 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1755+ 6BC3 32 2A       >                db      "2*"               // name string in 7-bit ascii, but
1755+ 6BC5             >                org     $-1                 // alter last byte of Name just above to set
1755+ 6BC4 AA          >                db      {b $} | END_BIT     // msb as name end
1755+ 6BC5             >
1755+ 6BC5 B1 6B       >                dw      last_NFA            // Link to previous definition Name
1755+ 6BC7             >TWO_MUL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1755+ 6BC7 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1755+ 6BC7             >                else
1755+ 6BC7 C9 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1755+ 6BC9             >                endif           ; ok        // for other definitions it "points" the correct handler
1755+ 6BC9             >                // Use of "; ok" to suppress "warning[fwdref]"
1755+ 6BC9             >
1755+ 6BC9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1756+ 6BC9              Two_Mul_Ptr:
1757+ 6BC9 E1                           pop     hl
1758+ 6BCA 29                           add     hl, hl
1759+ 6BCB
1760+ 6BCB                              psh1
1760+ 6BCB E5          >                push    hl
1760+ 6BCC DD E9       >                jp      (ix)
1761+ 6BCE
1762+ 6BCE              //  ______________________________________________________________________
1763+ 6BCE              //
1764+ 6BCE              // 2/           n1 -- n2
1765+ 6BCE              // halves the top of stack, sign is unchanged
1766+ 6BCE                              New_Def TWO_DIV, "2/", is_code, is_normal
1766+ 6BCE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1766+ 6BCE             >
1766+ 6BCE             >                // dummy db directives used to calculate length of namec
1766+ 6BCE 32 2F       >                db      "2/"
1766+ 6BD0             >len_NFA         defl    $ - temp_NFA
1766+ 6BD0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1766+ 6BCE             >
1766+ 6BCE 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1766+ 6BCF 32 2F       >                db      "2/"               // name string in 7-bit ascii, but
1766+ 6BD1             >                org     $-1                 // alter last byte of Name just above to set
1766+ 6BD0 AF          >                db      {b $} | END_BIT     // msb as name end
1766+ 6BD1             >
1766+ 6BD1 C2 6B       >                dw      last_NFA            // Link to previous definition Name
1766+ 6BD3             >TWO_DIV:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1766+ 6BD3 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1766+ 6BD3             >                else
1766+ 6BD3 D5 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1766+ 6BD5             >                endif           ; ok        // for other definitions it "points" the correct handler
1766+ 6BD5             >                // Use of "; ok" to suppress "warning[fwdref]"
1766+ 6BD5             >
1766+ 6BD5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1767+ 6BD5 E1                           pop     hl
1768+ 6BD6 CB 2C                        sra     h
1769+ 6BD8 CB 1D                        rr      l
1770+ 6BDA
1771+ 6BDA                              psh1
1771+ 6BDA E5          >                push    hl
1771+ 6BDB DD E9       >                jp      (ix)
1772+ 6BDD
1773+ 6BDD              //  ______________________________________________________________________
1774+ 6BDD              //
1775+ 6BDD              // lshift       n1 u -- n2
1776+ 6BDD              // bit left shift of u bits
1777+ 6BDD                              New_Def LSHIFT, "LSHIFT", is_code, is_normal
1777+ 6BDD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1777+ 6BDD             >
1777+ 6BDD             >                // dummy db directives used to calculate length of namec
1777+ 6BDD 4C 53 48 49 >                db      "LSHIFT"
1777+ 6BE1 46 54       >
1777+ 6BE3             >len_NFA         defl    $ - temp_NFA
1777+ 6BE3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1777+ 6BDD             >
1777+ 6BDD 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1777+ 6BDE 4C 53 48 49 >                db      "LSHIFT"               // name string in 7-bit ascii, but
1777+ 6BE2 46 54       >
1777+ 6BE4             >                org     $-1                 // alter last byte of Name just above to set
1777+ 6BE3 D4          >                db      {b $} | END_BIT     // msb as name end
1777+ 6BE4             >
1777+ 6BE4 CE 6B       >                dw      last_NFA            // Link to previous definition Name
1777+ 6BE6             >LSHIFT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1777+ 6BE6 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1777+ 6BE6             >                else
1777+ 6BE6 E8 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1777+ 6BE8             >                endif           ; ok        // for other definitions it "points" the correct handler
1777+ 6BE8             >                // Use of "; ok" to suppress "warning[fwdref]"
1777+ 6BE8             >
1777+ 6BE8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1778+ 6BE8 D1                           pop     de
1779+ 6BE9
1780+ 6BE9 E1                           pop     hl
1781+ 6BEA 7B                           ld      a, e
1782+ 6BEB B7                           or      a
1783+ 6BEC 28 04                        jr      z, Lshift_Zero
1784+ 6BEE              Lshift_Loop:
1785+ 6BEE 29                                   add     hl, hl
1786+ 6BEF 3D                                   dec     a
1787+ 6BF0 20 FC                            jr      nz, Lshift_Loop
1788+ 6BF2              Lshift_Zero:
1789+ 6BF2
1790+ 6BF2
1791+ 6BF2                              psh1
1791+ 6BF2 E5          >                push    hl
1791+ 6BF3 DD E9       >                jp      (ix)
1792+ 6BF5
1793+ 6BF5              //  ______________________________________________________________________
1794+ 6BF5              //
1795+ 6BF5              // rshift       n1 u -- n2
1796+ 6BF5              // bit right shift of u bits
1797+ 6BF5                              New_Def RSHIFT, "RSHIFT", is_code, is_normal
1797+ 6BF5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1797+ 6BF5             >
1797+ 6BF5             >                // dummy db directives used to calculate length of namec
1797+ 6BF5 52 53 48 49 >                db      "RSHIFT"
1797+ 6BF9 46 54       >
1797+ 6BFB             >len_NFA         defl    $ - temp_NFA
1797+ 6BFB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1797+ 6BF5             >
1797+ 6BF5 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1797+ 6BF6 52 53 48 49 >                db      "RSHIFT"               // name string in 7-bit ascii, but
1797+ 6BFA 46 54       >
1797+ 6BFC             >                org     $-1                 // alter last byte of Name just above to set
1797+ 6BFB D4          >                db      {b $} | END_BIT     // msb as name end
1797+ 6BFC             >
1797+ 6BFC DD 6B       >                dw      last_NFA            // Link to previous definition Name
1797+ 6BFE             >RSHIFT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1797+ 6BFE ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1797+ 6BFE             >                else
1797+ 6BFE 00 6C       >                dw      $ + 2   ; ok        // is pointed by CFA
1797+ 6C00             >                endif           ; ok        // for other definitions it "points" the correct handler
1797+ 6C00             >                // Use of "; ok" to suppress "warning[fwdref]"
1797+ 6C00             >
1797+ 6C00             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1798+ 6C00 D1                           pop     de
1799+ 6C01
1800+ 6C01 E1                           pop     hl
1801+ 6C02 7B                           ld      a, e
1802+ 6C03 B7                           or      a
1803+ 6C04 28 07                        jr      z, Rshift_Zero
1804+ 6C06              Rshift_Loop:
1805+ 6C06 CB 3C                                srl     h
1806+ 6C08 CB 1D                                rr      l
1807+ 6C0A 3D                                   dec     a
1808+ 6C0B 20 F9                            jr      nz, Rshift_Loop
1809+ 6C0D              Rshift_Zero:
1810+ 6C0D
1811+ 6C0D
1812+ 6C0D                              psh1
1812+ 6C0D E5          >                push    hl
1812+ 6C0E DD E9       >                jp      (ix)
1813+ 6C10
1814+ 6C10              //  ______________________________________________________________________
1815+ 6C10              //
1816+ 6C10              // cells        n1 -- n2
1817+ 6C10              // decrement by 2 top of stack
1818+ 6C10                              New_Def CELLS, "CELLS", Two_Mul_Ptr, is_normal
1818+ 6C10             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1818+ 6C10             >
1818+ 6C10             >                // dummy db directives used to calculate length of namec
1818+ 6C10 43 45 4C 4C >                db      "CELLS"
1818+ 6C14 53          >
1818+ 6C15             >len_NFA         defl    $ - temp_NFA
1818+ 6C15             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1818+ 6C10             >
1818+ 6C10 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1818+ 6C11 43 45 4C 4C >                db      "CELLS"               // name string in 7-bit ascii, but
1818+ 6C15 53          >
1818+ 6C16             >                org     $-1                 // alter last byte of Name just above to set
1818+ 6C15 D3          >                db      {b $} | END_BIT     // msb as name end
1818+ 6C16             >
1818+ 6C16 F5 6B       >                dw      last_NFA            // Link to previous definition Name
1818+ 6C18             >CELLS:          if Two_Mul_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1818+ 6C18 C9 6B       >                dw      Two_Mul_Ptr ; ok        // for primitive definitions  actual code
1818+ 6C1A             >                else
1818+ 6C1A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1818+ 6C1A             >                endif           ; ok        // for other definitions it "points" the correct handler
1818+ 6C1A             >                // Use of "; ok" to suppress "warning[fwdref]"
1818+ 6C1A             >
1818+ 6C1A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1819+ 6C1A
1820+ 6C1A
1821+ 6C1A              //  ______________________________________________________________________
1822+ 6C1A
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L0.asm
 109  6C1A                              include "L1.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L1.asm
   1+ 6C1A              //  ______________________________________________________________________
   2+ 6C1A              //
   3+ 6C1A              //  L1.asm
   4+ 6C1A              //
   5+ 6C1A              //  Level-1 definitions and derivate
   6+ 6C1A              //  ______________________________________________________________________
   7+ 6C1A
   8+ 6C1A              //  ______________________________________________________________________
   9+ 6C1A              //
  10+ 6C1A              // :            -- cccc     ( compile time )
  11+ 6C1A              //              i*x -- j*x  ( run time )
  12+ 6C1A              // Colon Definition
  13+ 6C1A                              Colon_Def COLON, ":", is_immediate      // has forward-ref
  13+ 6C1A             >                New_Def  COLON, ":", Enter_Ptr, is_immediate ; ok
  13+ 6C1A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13+ 6C1A             >
  13+ 6C1A             >                // dummy db directives used to calculate length of namec
  13+ 6C1A 3A          >                db      ":"
  13+ 6C1B             >len_NFA         defl    $ - temp_NFA
  13+ 6C1B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13+ 6C1A             >
  13+ 6C1A C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
  13+ 6C1B 3A          >                db      ":"               // name string in 7-bit ascii, but
  13+ 6C1C             >                org     $-1                 // alter last byte of Name just above to set
  13+ 6C1B BA          >                db      {b $} | END_BIT     // msb as name end
  13+ 6C1C             >
  13+ 6C1C 10 6C       >                dw      last_NFA            // Link to previous definition Name
  13+ 6C1E             >COLON:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  13+ 6C1E 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  13+ 6C20             >                else
  13+ 6C20 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  13+ 6C20             >                endif           ; ok        // for other definitions it "points" the correct handler
  13+ 6C20             >                // Use of "; ok" to suppress "warning[fwdref]"
  13+ 6C20             >
  13+ 6C20             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14+ 6C20
  15+ 6C20 7E 70                        dw      QEXEC                   // ?exec
  16+ 6C22 39 70                        dw      STORE_CSP               // !csp
  17+ 6C24 EF 6D 43 6B                  dw      CURRENT, FETCH          // current @
  18+ 6C28 E2 6D 50 6B                  dw      CONTEXT, STORE          // context !
  19+ 6C2C 25 76                        dw      CREATE                  // create  ( forward )
  20+ 6C2E 2B 71                        dw      SMUDGE                  // dmudge
  21+ 6C30 16 71                        dw      SQUARED_CLOSE           // ]
  22+ 6C32 81 71                        dw      C_SEMICOLON_CODE        // ;code ( change the 3-bytes CFA of defining word to call Enter_Ptr )
  23+ 6C34                                                              // ... immediate
  24+ 6C34              Enter_Ptr:
  25+ 6C34                              // via call coded in CFA
  26+ 6C34                              ldhlrp
  26+ 6C34 2A 96 63    >                ld      hl,(RP_Pointer)
  27+ 6C37 2B                           dec     hl                  // push on Return-Stack current Instruction-Pointer
  28+ 6C38 70                           ld      (hl), b
  29+ 6C39 2B                           dec     hl
  30+ 6C3A 71                           ld      (hl), c
  31+ 6C3B                              ldrphl
  31+ 6C3B 22 96 63    >                ld      (RP_Pointer),hl
  32+ 6C3E 13                           inc     de
  33+ 6C3F 4B                           ld      c, e
  34+ 6C40 42                           ld      b, d
  35+ 6C41                              next
  35+ 6C41 DD E9       >                jp      (ix)
  36+ 6C43
  37+ 6C43              //  ______________________________________________________________________
  38+ 6C43              //
  39+ 6C43              // ;            --
  40+ 6C43              // Semicolon. End of Colon-Definition. Stack must be balanced.
  41+ 6C43                              Colon_Def SEMICOLON, ";", is_immediate   // has forward-ref
  41+ 6C43             >                New_Def  SEMICOLON, ";", Enter_Ptr, is_immediate ; ok
  41+ 6C43             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  41+ 6C43             >
  41+ 6C43             >                // dummy db directives used to calculate length of namec
  41+ 6C43 3B          >                db      ";"
  41+ 6C44             >len_NFA         defl    $ - temp_NFA
  41+ 6C44             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  41+ 6C43             >
  41+ 6C43 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
  41+ 6C44 3B          >                db      ";"               // name string in 7-bit ascii, but
  41+ 6C45             >                org     $-1                 // alter last byte of Name just above to set
  41+ 6C44 BB          >                db      {b $} | END_BIT     // msb as name end
  41+ 6C45             >
  41+ 6C45 1A 6C       >                dw      last_NFA            // Link to previous definition Name
  41+ 6C47             >SEMICOLON:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  41+ 6C47 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  41+ 6C49             >                else
  41+ 6C49 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  41+ 6C49             >                endif           ; ok        // for other definitions it "points" the correct handler
  41+ 6C49             >                // Use of "; ok" to suppress "warning[fwdref]"
  41+ 6C49             >
  41+ 6C49             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  42+ 6C49
  43+ 6C49 A8 70                        dw      QCSP                    // ?csp
  44+ 6C4B DF 70 23 69                  dw      COMPILE, EXIT           // [compile] ;s
  45+ 6C4F 2B 71                        dw      SMUDGE                  // smudge
  46+ 6C51 08 71                        dw      SQUARED_OPEN            // [
  47+ 6C53 23 69                        dw      EXIT                    // ; immediate
  48+ 6C55
  49+ 6C55              //  ______________________________________________________________________
  50+ 6C55              //
  51+ 6C55              // noop         --
  52+ 6C55
  53+ 6C55                              Colon_Def NOOP, "NOOP", is_normal
  53+ 6C55             >                New_Def  NOOP, "NOOP", Enter_Ptr, is_normal ; ok
  53+ 6C55             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  53+ 6C55             >
  53+ 6C55             >                // dummy db directives used to calculate length of namec
  53+ 6C55 4E 4F 4F 50 >                db      "NOOP"
  53+ 6C59             >len_NFA         defl    $ - temp_NFA
  53+ 6C59             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  53+ 6C55             >
  53+ 6C55 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  53+ 6C56 4E 4F 4F 50 >                db      "NOOP"               // name string in 7-bit ascii, but
  53+ 6C5A             >                org     $-1                 // alter last byte of Name just above to set
  53+ 6C59 D0          >                db      {b $} | END_BIT     // msb as name end
  53+ 6C5A             >
  53+ 6C5A 43 6C       >                dw      last_NFA            // Link to previous definition Name
  53+ 6C5C             >NOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  53+ 6C5C 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  53+ 6C5E             >                else
  53+ 6C5E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  53+ 6C5E             >                endif           ; ok        // for other definitions it "points" the correct handler
  53+ 6C5E             >                // Use of "; ok" to suppress "warning[fwdref]"
  53+ 6C5E             >
  53+ 6C5E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  54+ 6C5E 23 69                        dw      EXIT
  55+ 6C60
  56+ 6C60              //  ______________________________________________________________________
  57+ 6C60              //
  58+ 6C60              // constant     n -- cccc     ( compile time )
  59+ 6C60              //              -- n          ( run time )
  60+ 6C60              // Constant definition.
  61+ 6C60                              Colon_Def CONSTANT, "CONSTANT", is_normal   // has forward-ref
  61+ 6C60             >                New_Def  CONSTANT, "CONSTANT", Enter_Ptr, is_normal ; ok
  61+ 6C60             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  61+ 6C60             >
  61+ 6C60             >                // dummy db directives used to calculate length of namec
  61+ 6C60 43 4F 4E 53 >                db      "CONSTANT"
  61+ 6C64 54 41 4E 54 >
  61+ 6C68             >len_NFA         defl    $ - temp_NFA
  61+ 6C68             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  61+ 6C60             >
  61+ 6C60 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  61+ 6C61 43 4F 4E 53 >                db      "CONSTANT"               // name string in 7-bit ascii, but
  61+ 6C65 54 41 4E 54 >
  61+ 6C69             >                org     $-1                 // alter last byte of Name just above to set
  61+ 6C68 D4          >                db      {b $} | END_BIT     // msb as name end
  61+ 6C69             >
  61+ 6C69 55 6C       >                dw      last_NFA            // Link to previous definition Name
  61+ 6C6B             >CONSTANT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  61+ 6C6B 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  61+ 6C6D             >                else
  61+ 6C6D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  61+ 6C6D             >                endif           ; ok        // for other definitions it "points" the correct handler
  61+ 6C6D             >                // Use of "; ok" to suppress "warning[fwdref]"
  61+ 6C6D             >
  61+ 6C6D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  62+ 6C6D
  63+ 6C6D 25 76                        dw      CREATE                  // create
  64+ 6C6F 9D 6E                        dw      COMMA                   // ,    ( at PFA then, store the value )
  65+ 6C71 81 71                        dw      C_SEMICOLON_CODE        // ;code (  changes the 3-bytes CFA to call Constant_Ptr )
  66+ 6C73              Constant_Ptr:
  67+ 6C73
  68+ 6C73 13                           inc     de
  69+ 6C74 EB                           ex      de, hl
  70+ 6C75
  71+ 6C75 5E                           ld      e, (hl)
  72+ 6C76 23                           inc     hl
  73+ 6C77 56                           ld      d, (hl)
  74+ 6C78 D5                           push    de
  75+ 6C79                              next
  75+ 6C79 DD E9       >                jp      (ix)
  76+ 6C7B
  77+ 6C7B              //  ______________________________________________________________________
  78+ 6C7B              //
  79+ 6C7B              // variable     n -- cccc     ( compile time )
  80+ 6C7B              //              -- a          ( run time )
  81+ 6C7B              // Variable definition, n is the initial value.
  82+ 6C7B                              Colon_Def VARIABLE, "VARIABLE", is_normal   // has forward-ref
  82+ 6C7B             >                New_Def  VARIABLE, "VARIABLE", Enter_Ptr, is_normal ; ok
  82+ 6C7B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  82+ 6C7B             >
  82+ 6C7B             >                // dummy db directives used to calculate length of namec
  82+ 6C7B 56 41 52 49 >                db      "VARIABLE"
  82+ 6C7F 41 42 4C 45 >
  82+ 6C83             >len_NFA         defl    $ - temp_NFA
  82+ 6C83             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  82+ 6C7B             >
  82+ 6C7B 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  82+ 6C7C 56 41 52 49 >                db      "VARIABLE"               // name string in 7-bit ascii, but
  82+ 6C80 41 42 4C 45 >
  82+ 6C84             >                org     $-1                 // alter last byte of Name just above to set
  82+ 6C83 C5          >                db      {b $} | END_BIT     // msb as name end
  82+ 6C84             >
  82+ 6C84 60 6C       >                dw      last_NFA            // Link to previous definition Name
  82+ 6C86             >VARIABLE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  82+ 6C86 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  82+ 6C88             >                else
  82+ 6C88 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  82+ 6C88             >                endif           ; ok        // for other definitions it "points" the correct handler
  82+ 6C88             >                // Use of "; ok" to suppress "warning[fwdref]"
  82+ 6C88             >
  82+ 6C88             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  83+ 6C88
  84+ 6C88 6B 6C                        dw      CONSTANT                // constant
  85+ 6C8A 81 71                        dw      C_SEMICOLON_CODE        // ;code ( changes the 3-bytes CFA to call Variable_Ptr )
  86+ 6C8C              Variable_Ptr:
  87+ 6C8C
  88+ 6C8C 13                           inc     de
  89+ 6C8D D5                           push    de                  // balance TOS before overwrite it
  90+ 6C8E
  91+ 6C8E                              next
  91+ 6C8E DD E9       >                jp      (ix)
  92+ 6C90
  93+ 6C90              //  ______________________________________________________________________
  94+ 6C90              //
  95+ 6C90              // user         b -- cccc     ( compile time )
  96+ 6C90              //              -- a          ( run time )
  97+ 6C90              // User variable definition
  98+ 6C90                              Colon_Def USER, "USER", is_normal
  98+ 6C90             >                New_Def  USER, "USER", Enter_Ptr, is_normal ; ok
  98+ 6C90             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  98+ 6C90             >
  98+ 6C90             >                // dummy db directives used to calculate length of namec
  98+ 6C90 55 53 45 52 >                db      "USER"
  98+ 6C94             >len_NFA         defl    $ - temp_NFA
  98+ 6C94             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  98+ 6C90             >
  98+ 6C90 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  98+ 6C91 55 53 45 52 >                db      "USER"               // name string in 7-bit ascii, but
  98+ 6C95             >                org     $-1                 // alter last byte of Name just above to set
  98+ 6C94 D2          >                db      {b $} | END_BIT     // msb as name end
  98+ 6C95             >
  98+ 6C95 7B 6C       >                dw      last_NFA            // Link to previous definition Name
  98+ 6C97             >USER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  98+ 6C97 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  98+ 6C99             >                else
  98+ 6C99 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  98+ 6C99             >                endif           ; ok        // for other definitions it "points" the correct handler
  98+ 6C99             >                // Use of "; ok" to suppress "warning[fwdref]"
  98+ 6C99             >
  98+ 6C99             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  99+ 6C99
 100+ 6C99 25 76                        dw      CREATE                  // create
 101+ 6C9B AE 6E                        dw      CCOMMA                  // c,
 102+ 6C9D 81 71                        dw      C_SEMICOLON_CODE        // ;code () changes the 3-bytes CFA to call User_Ptr )
 103+ 6C9F
 104+ 6C9F
 105+ 6C9F              User_Ptr:
 106+ 6C9F                              // via call coded in CFA
 107+ 6C9F 13                           inc     de
 108+ 6CA0 EB                           ex      de, hl
 109+ 6CA1 5E                           ld      e, (hl)
 110+ 6CA2 16 00                        ld      d, 0
 111+ 6CA4 2A 94 63                     ld      hl, (USER_Pointer)
 112+ 6CA7 19                           add     hl, de
 113+ 6CA8
 114+ 6CA8                              psh1
 114+ 6CA8 E5          >                push    hl
 114+ 6CA9 DD E9       >                jp      (ix)
 115+ 6CAB
 116+ 6CAB              //  ______________________________________________________________________
 117+ 6CAB              //
 118+ 6CAB                              Constant_Def ZERO       ,   "0"     ,   0
 118+ 6CAB             >                New_Def  ZERO, "0", Constant_Ptr, is_normal
 118+ 6CAB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 118+ 6CAB             >
 118+ 6CAB             >                // dummy db directives used to calculate length of namec
 118+ 6CAB 30          >                db      "0"
 118+ 6CAC             >len_NFA         defl    $ - temp_NFA
 118+ 6CAC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 118+ 6CAB             >
 118+ 6CAB 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 118+ 6CAC 30          >                db      "0"               // name string in 7-bit ascii, but
 118+ 6CAD             >                org     $-1                 // alter last byte of Name just above to set
 118+ 6CAC B0          >                db      {b $} | END_BIT     // msb as name end
 118+ 6CAD             >
 118+ 6CAD 90 6C       >                dw      last_NFA            // Link to previous definition Name
 118+ 6CAF             >ZERO:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 118+ 6CAF 73 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 118+ 6CB1             >                else
 118+ 6CB1 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 118+ 6CB1             >                endif           ; ok        // for other definitions it "points" the correct handler
 118+ 6CB1             >                // Use of "; ok" to suppress "warning[fwdref]"
 118+ 6CB1             >
 118+ 6CB1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 118+ 6CB1 00 00       >                dw      0
 119+ 6CB3                              Constant_Def ONE        ,   "1"     ,   1
 119+ 6CB3             >                New_Def  ONE, "1", Constant_Ptr, is_normal
 119+ 6CB3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 119+ 6CB3             >
 119+ 6CB3             >                // dummy db directives used to calculate length of namec
 119+ 6CB3 31          >                db      "1"
 119+ 6CB4             >len_NFA         defl    $ - temp_NFA
 119+ 6CB4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 119+ 6CB3             >
 119+ 6CB3 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 119+ 6CB4 31          >                db      "1"               // name string in 7-bit ascii, but
 119+ 6CB5             >                org     $-1                 // alter last byte of Name just above to set
 119+ 6CB4 B1          >                db      {b $} | END_BIT     // msb as name end
 119+ 6CB5             >
 119+ 6CB5 AB 6C       >                dw      last_NFA            // Link to previous definition Name
 119+ 6CB7             >ONE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 119+ 6CB7 73 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 119+ 6CB9             >                else
 119+ 6CB9 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 119+ 6CB9             >                endif           ; ok        // for other definitions it "points" the correct handler
 119+ 6CB9             >                // Use of "; ok" to suppress "warning[fwdref]"
 119+ 6CB9             >
 119+ 6CB9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 119+ 6CB9 01 00       >                dw      1
 120+ 6CBB                              Constant_Def TWO        ,   "2"     ,   2
 120+ 6CBB             >                New_Def  TWO, "2", Constant_Ptr, is_normal
 120+ 6CBB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 120+ 6CBB             >
 120+ 6CBB             >                // dummy db directives used to calculate length of namec
 120+ 6CBB 32          >                db      "2"
 120+ 6CBC             >len_NFA         defl    $ - temp_NFA
 120+ 6CBC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 120+ 6CBB             >
 120+ 6CBB 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 120+ 6CBC 32          >                db      "2"               // name string in 7-bit ascii, but
 120+ 6CBD             >                org     $-1                 // alter last byte of Name just above to set
 120+ 6CBC B2          >                db      {b $} | END_BIT     // msb as name end
 120+ 6CBD             >
 120+ 6CBD B3 6C       >                dw      last_NFA            // Link to previous definition Name
 120+ 6CBF             >TWO:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 120+ 6CBF 73 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 120+ 6CC1             >                else
 120+ 6CC1 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 120+ 6CC1             >                endif           ; ok        // for other definitions it "points" the correct handler
 120+ 6CC1             >                // Use of "; ok" to suppress "warning[fwdref]"
 120+ 6CC1             >
 120+ 6CC1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 120+ 6CC1 02 00       >                dw      2
 121+ 6CC3                              Constant_Def THREE      ,   "3"     ,   3
 121+ 6CC3             >                New_Def  THREE, "3", Constant_Ptr, is_normal
 121+ 6CC3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 121+ 6CC3             >
 121+ 6CC3             >                // dummy db directives used to calculate length of namec
 121+ 6CC3 33          >                db      "3"
 121+ 6CC4             >len_NFA         defl    $ - temp_NFA
 121+ 6CC4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 121+ 6CC3             >
 121+ 6CC3 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 121+ 6CC4 33          >                db      "3"               // name string in 7-bit ascii, but
 121+ 6CC5             >                org     $-1                 // alter last byte of Name just above to set
 121+ 6CC4 B3          >                db      {b $} | END_BIT     // msb as name end
 121+ 6CC5             >
 121+ 6CC5 BB 6C       >                dw      last_NFA            // Link to previous definition Name
 121+ 6CC7             >THREE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 121+ 6CC7 73 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 121+ 6CC9             >                else
 121+ 6CC9 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 121+ 6CC9             >                endif           ; ok        // for other definitions it "points" the correct handler
 121+ 6CC9             >                // Use of "; ok" to suppress "warning[fwdref]"
 121+ 6CC9             >
 121+ 6CC9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 121+ 6CC9 03 00       >                dw      3
 122+ 6CCB                              Constant_Def NEG_ONE    ,   "-1"    ,  -1
 122+ 6CCB             >                New_Def  NEG_ONE, "-1", Constant_Ptr, is_normal
 122+ 6CCB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 122+ 6CCB             >
 122+ 6CCB             >                // dummy db directives used to calculate length of namec
 122+ 6CCB 2D 31       >                db      "-1"
 122+ 6CCD             >len_NFA         defl    $ - temp_NFA
 122+ 6CCD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 122+ 6CCB             >
 122+ 6CCB 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 122+ 6CCC 2D 31       >                db      "-1"               // name string in 7-bit ascii, but
 122+ 6CCE             >                org     $-1                 // alter last byte of Name just above to set
 122+ 6CCD B1          >                db      {b $} | END_BIT     // msb as name end
 122+ 6CCE             >
 122+ 6CCE C3 6C       >                dw      last_NFA            // Link to previous definition Name
 122+ 6CD0             >NEG_ONE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 122+ 6CD0 73 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 122+ 6CD2             >                else
 122+ 6CD2 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 122+ 6CD2             >                endif           ; ok        // for other definitions it "points" the correct handler
 122+ 6CD2             >                // Use of "; ok" to suppress "warning[fwdref]"
 122+ 6CD2             >
 122+ 6CD2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 122+ 6CD2 FF FF       >                dw      -1
 123+ 6CD4                              Constant_Def BL         ,   "BL"    , $20
 123+ 6CD4             >                New_Def  BL, "BL", Constant_Ptr, is_normal
 123+ 6CD4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 123+ 6CD4             >
 123+ 6CD4             >                // dummy db directives used to calculate length of namec
 123+ 6CD4 42 4C       >                db      "BL"
 123+ 6CD6             >len_NFA         defl    $ - temp_NFA
 123+ 6CD6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 123+ 6CD4             >
 123+ 6CD4 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 123+ 6CD5 42 4C       >                db      "BL"               // name string in 7-bit ascii, but
 123+ 6CD7             >                org     $-1                 // alter last byte of Name just above to set
 123+ 6CD6 CC          >                db      {b $} | END_BIT     // msb as name end
 123+ 6CD7             >
 123+ 6CD7 CB 6C       >                dw      last_NFA            // Link to previous definition Name
 123+ 6CD9             >BL:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 123+ 6CD9 73 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 123+ 6CDB             >                else
 123+ 6CDB ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 123+ 6CDB             >                endif           ; ok        // for other definitions it "points" the correct handler
 123+ 6CDB             >                // Use of "; ok" to suppress "warning[fwdref]"
 123+ 6CDB             >
 123+ 6CDB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 123+ 6CDB 20 00       >                dw      $20
 124+ 6CDD                              Constant_Def CL         ,   "C/L"   ,  64
 124+ 6CDD             >                New_Def  CL, "C/L", Constant_Ptr, is_normal
 124+ 6CDD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 124+ 6CDD             >
 124+ 6CDD             >                // dummy db directives used to calculate length of namec
 124+ 6CDD 43 2F 4C    >                db      "C/L"
 124+ 6CE0             >len_NFA         defl    $ - temp_NFA
 124+ 6CE0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 124+ 6CDD             >
 124+ 6CDD 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 124+ 6CDE 43 2F 4C    >                db      "C/L"               // name string in 7-bit ascii, but
 124+ 6CE1             >                org     $-1                 // alter last byte of Name just above to set
 124+ 6CE0 CC          >                db      {b $} | END_BIT     // msb as name end
 124+ 6CE1             >
 124+ 6CE1 D4 6C       >                dw      last_NFA            // Link to previous definition Name
 124+ 6CE3             >CL:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 124+ 6CE3 73 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 124+ 6CE5             >                else
 124+ 6CE5 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 124+ 6CE5             >                endif           ; ok        // for other definitions it "points" the correct handler
 124+ 6CE5             >                // Use of "; ok" to suppress "warning[fwdref]"
 124+ 6CE5             >
 124+ 6CE5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 124+ 6CE5 40 00       >                dw      64
 125+ 6CE7                              Constant_Def BBUF       ,   "B/BUF" , 512
 125+ 6CE7             >                New_Def  BBUF, "B/BUF", Constant_Ptr, is_normal
 125+ 6CE7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 125+ 6CE7             >
 125+ 6CE7             >                // dummy db directives used to calculate length of namec
 125+ 6CE7 42 2F 42 55 >                db      "B/BUF"
 125+ 6CEB 46          >
 125+ 6CEC             >len_NFA         defl    $ - temp_NFA
 125+ 6CEC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 125+ 6CE7             >
 125+ 6CE7 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 125+ 6CE8 42 2F 42 55 >                db      "B/BUF"               // name string in 7-bit ascii, but
 125+ 6CEC 46          >
 125+ 6CED             >                org     $-1                 // alter last byte of Name just above to set
 125+ 6CEC C6          >                db      {b $} | END_BIT     // msb as name end
 125+ 6CED             >
 125+ 6CED DD 6C       >                dw      last_NFA            // Link to previous definition Name
 125+ 6CEF             >BBUF:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 125+ 6CEF 73 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 125+ 6CF1             >                else
 125+ 6CF1 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 125+ 6CF1             >                endif           ; ok        // for other definitions it "points" the correct handler
 125+ 6CF1             >                // Use of "; ok" to suppress "warning[fwdref]"
 125+ 6CF1             >
 125+ 6CF1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 125+ 6CF1 00 02       >                dw      512
 126+ 6CF3                              Constant_Def BSCR       ,   "B/SCR" ,   2
 126+ 6CF3             >                New_Def  BSCR, "B/SCR", Constant_Ptr, is_normal
 126+ 6CF3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 126+ 6CF3             >
 126+ 6CF3             >                // dummy db directives used to calculate length of namec
 126+ 6CF3 42 2F 53 43 >                db      "B/SCR"
 126+ 6CF7 52          >
 126+ 6CF8             >len_NFA         defl    $ - temp_NFA
 126+ 6CF8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 126+ 6CF3             >
 126+ 6CF3 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 126+ 6CF4 42 2F 53 43 >                db      "B/SCR"               // name string in 7-bit ascii, but
 126+ 6CF8 52          >
 126+ 6CF9             >                org     $-1                 // alter last byte of Name just above to set
 126+ 6CF8 D2          >                db      {b $} | END_BIT     // msb as name end
 126+ 6CF9             >
 126+ 6CF9 E7 6C       >                dw      last_NFA            // Link to previous definition Name
 126+ 6CFB             >BSCR:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 126+ 6CFB 73 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 126+ 6CFD             >                else
 126+ 6CFD ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 126+ 6CFD             >                endif           ; ok        // for other definitions it "points" the correct handler
 126+ 6CFD             >                // Use of "; ok" to suppress "warning[fwdref]"
 126+ 6CFD             >
 126+ 6CFD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 126+ 6CFD 02 00       >                dw      2
 127+ 6CFF                              Constant_Def LSCR       ,   "L/SCR" ,  16
 127+ 6CFF             >                New_Def  LSCR, "L/SCR", Constant_Ptr, is_normal
 127+ 6CFF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 127+ 6CFF             >
 127+ 6CFF             >                // dummy db directives used to calculate length of namec
 127+ 6CFF 4C 2F 53 43 >                db      "L/SCR"
 127+ 6D03 52          >
 127+ 6D04             >len_NFA         defl    $ - temp_NFA
 127+ 6D04             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 127+ 6CFF             >
 127+ 6CFF 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 127+ 6D00 4C 2F 53 43 >                db      "L/SCR"               // name string in 7-bit ascii, but
 127+ 6D04 52          >
 127+ 6D05             >                org     $-1                 // alter last byte of Name just above to set
 127+ 6D04 D2          >                db      {b $} | END_BIT     // msb as name end
 127+ 6D05             >
 127+ 6D05 F3 6C       >                dw      last_NFA            // Link to previous definition Name
 127+ 6D07             >LSCR:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 127+ 6D07 73 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 127+ 6D09             >                else
 127+ 6D09 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 127+ 6D09             >                endif           ; ok        // for other definitions it "points" the correct handler
 127+ 6D09             >                // Use of "; ok" to suppress "warning[fwdref]"
 127+ 6D09             >
 127+ 6D09             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 127+ 6D09 10 00       >                dw      16
 128+ 6D0B
 129+ 6D0B              //  ______________________________________________________________________
 130+ 6D0B              //
 131+ 6D0B              // +origin         --
 132+ 6D0B                              Colon_Def PLUS_ORIGIN, "+ORIGIN", is_normal
 132+ 6D0B             >                New_Def  PLUS_ORIGIN, "+ORIGIN", Enter_Ptr, is_normal ; ok
 132+ 6D0B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 132+ 6D0B             >
 132+ 6D0B             >                // dummy db directives used to calculate length of namec
 132+ 6D0B 2B 4F 52 49 >                db      "+ORIGIN"
 132+ 6D0F 47 49 4E    >
 132+ 6D12             >len_NFA         defl    $ - temp_NFA
 132+ 6D12             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 132+ 6D0B             >
 132+ 6D0B 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 132+ 6D0C 2B 4F 52 49 >                db      "+ORIGIN"               // name string in 7-bit ascii, but
 132+ 6D10 47 49 4E    >
 132+ 6D13             >                org     $-1                 // alter last byte of Name just above to set
 132+ 6D12 CE          >                db      {b $} | END_BIT     // msb as name end
 132+ 6D13             >
 132+ 6D13 FF 6C       >                dw      last_NFA            // Link to previous definition Name
 132+ 6D15             >PLUS_ORIGIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 132+ 6D15 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 132+ 6D17             >                else
 132+ 6D17 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 132+ 6D17             >                endif           ; ok        // for other definitions it "points" the correct handler
 132+ 6D17             >                // Use of "; ok" to suppress "warning[fwdref]"
 132+ 6D17             >
 132+ 6D17             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 133+ 6D17 A9 63 66 63                  dw      LIT, Cold_origin        // [ hex 6366 ] literal
 134+ 6D1B C4 69                        dw      PLUS                    // +
 135+ 6D1D 23 69                        dw      EXIT                    // ;
 136+ 6D1F
 137+ 6D1F              //  ______________________________________________________________________
 138+ 6D1F              //
 139+ 6D1F                              Constant_Def CNEXT      ,   "(NEXT)", Next_Ptr
 139+ 6D1F             >                New_Def  CNEXT, "(NEXT)", Constant_Ptr, is_normal
 139+ 6D1F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 139+ 6D1F             >
 139+ 6D1F             >                // dummy db directives used to calculate length of namec
 139+ 6D1F 28 4E 45 58 >                db      "(NEXT)"
 139+ 6D23 54 29       >
 139+ 6D25             >len_NFA         defl    $ - temp_NFA
 139+ 6D25             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 139+ 6D1F             >
 139+ 6D1F 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 139+ 6D20 28 4E 45 58 >                db      "(NEXT)"               // name string in 7-bit ascii, but
 139+ 6D24 54 29       >
 139+ 6D26             >                org     $-1                 // alter last byte of Name just above to set
 139+ 6D25 A9          >                db      {b $} | END_BIT     // msb as name end
 139+ 6D26             >
 139+ 6D26 0B 6D       >                dw      last_NFA            // Link to previous definition Name
 139+ 6D28             >CNEXT:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 139+ 6D28 73 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 139+ 6D2A             >                else
 139+ 6D2A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 139+ 6D2A             >                endif           ; ok        // for other definitions it "points" the correct handler
 139+ 6D2A             >                // Use of "; ok" to suppress "warning[fwdref]"
 139+ 6D2A             >
 139+ 6D2A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 139+ 6D2A 98 63       >                dw      Next_Ptr
 140+ 6D2C
 141+ 6D2C              //  ______________________________________________________________________
 142+ 6D2C              //
 143+ 6D2C
 144+ 6D2C                              User_Def S0         , "S0"        , 06 // starting value of Stack-Pointer
 144+ 6D2C             >                New_Def  S0, "S0", User_Ptr, is_normal
 144+ 6D2C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 144+ 6D2C             >
 144+ 6D2C             >                // dummy db directives used to calculate length of namec
 144+ 6D2C 53 30       >                db      "S0"
 144+ 6D2E             >len_NFA         defl    $ - temp_NFA
 144+ 6D2E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 144+ 6D2C             >
 144+ 6D2C 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 144+ 6D2D 53 30       >                db      "S0"               // name string in 7-bit ascii, but
 144+ 6D2F             >                org     $-1                 // alter last byte of Name just above to set
 144+ 6D2E B0          >                db      {b $} | END_BIT     // msb as name end
 144+ 6D2F             >
 144+ 6D2F 1F 6D       >                dw      last_NFA            // Link to previous definition Name
 144+ 6D31             >S0:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 144+ 6D31 9F 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 144+ 6D33             >                else
 144+ 6D33 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 144+ 6D33             >                endif           ; ok        // for other definitions it "points" the correct handler
 144+ 6D33             >                // Use of "; ok" to suppress "warning[fwdref]"
 144+ 6D33             >
 144+ 6D33             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 144+ 6D33 06          >                db      06
 145+ 6D34                              User_Def R0         , "R0"        , 08 // starting value of Return-Pointer
 145+ 6D34             >                New_Def  R0, "R0", User_Ptr, is_normal
 145+ 6D34             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 145+ 6D34             >
 145+ 6D34             >                // dummy db directives used to calculate length of namec
 145+ 6D34 52 30       >                db      "R0"
 145+ 6D36             >len_NFA         defl    $ - temp_NFA
 145+ 6D36             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 145+ 6D34             >
 145+ 6D34 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 145+ 6D35 52 30       >                db      "R0"               // name string in 7-bit ascii, but
 145+ 6D37             >                org     $-1                 // alter last byte of Name just above to set
 145+ 6D36 B0          >                db      {b $} | END_BIT     // msb as name end
 145+ 6D37             >
 145+ 6D37 2C 6D       >                dw      last_NFA            // Link to previous definition Name
 145+ 6D39             >R0:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 145+ 6D39 9F 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 145+ 6D3B             >                else
 145+ 6D3B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 145+ 6D3B             >                endif           ; ok        // for other definitions it "points" the correct handler
 145+ 6D3B             >                // Use of "; ok" to suppress "warning[fwdref]"
 145+ 6D3B             >
 145+ 6D3B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 145+ 6D3B 08          >                db      08
 146+ 6D3C                              User_Def TIB        , "TIB"       , 10 // input terminal buffer address
 146+ 6D3C             >                New_Def  TIB, "TIB", User_Ptr, is_normal
 146+ 6D3C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 146+ 6D3C             >
 146+ 6D3C             >                // dummy db directives used to calculate length of namec
 146+ 6D3C 54 49 42    >                db      "TIB"
 146+ 6D3F             >len_NFA         defl    $ - temp_NFA
 146+ 6D3F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 146+ 6D3C             >
 146+ 6D3C 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 146+ 6D3D 54 49 42    >                db      "TIB"               // name string in 7-bit ascii, but
 146+ 6D40             >                org     $-1                 // alter last byte of Name just above to set
 146+ 6D3F C2          >                db      {b $} | END_BIT     // msb as name end
 146+ 6D40             >
 146+ 6D40 34 6D       >                dw      last_NFA            // Link to previous definition Name
 146+ 6D42             >TIB:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 146+ 6D42 9F 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 146+ 6D44             >                else
 146+ 6D44 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 146+ 6D44             >                endif           ; ok        // for other definitions it "points" the correct handler
 146+ 6D44             >                // Use of "; ok" to suppress "warning[fwdref]"
 146+ 6D44             >
 146+ 6D44             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 146+ 6D44 0A          >                db      10
 147+ 6D45                              User_Def WIDTH      , "WIDTH"     , 12 // maximum number of characters for a word name
 147+ 6D45             >                New_Def  WIDTH, "WIDTH", User_Ptr, is_normal
 147+ 6D45             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 147+ 6D45             >
 147+ 6D45             >                // dummy db directives used to calculate length of namec
 147+ 6D45 57 49 44 54 >                db      "WIDTH"
 147+ 6D49 48          >
 147+ 6D4A             >len_NFA         defl    $ - temp_NFA
 147+ 6D4A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 147+ 6D45             >
 147+ 6D45 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 147+ 6D46 57 49 44 54 >                db      "WIDTH"               // name string in 7-bit ascii, but
 147+ 6D4A 48          >
 147+ 6D4B             >                org     $-1                 // alter last byte of Name just above to set
 147+ 6D4A C8          >                db      {b $} | END_BIT     // msb as name end
 147+ 6D4B             >
 147+ 6D4B 3C 6D       >                dw      last_NFA            // Link to previous definition Name
 147+ 6D4D             >WIDTH:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 147+ 6D4D 9F 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 147+ 6D4F             >                else
 147+ 6D4F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 147+ 6D4F             >                endif           ; ok        // for other definitions it "points" the correct handler
 147+ 6D4F             >                // Use of "; ok" to suppress "warning[fwdref]"
 147+ 6D4F             >
 147+ 6D4F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 147+ 6D4F 0C          >                db      12
 148+ 6D50                              User_Def WARNING    , "WARNING"   , 14 // error reporting method: 0 base, 1 verbose
 148+ 6D50             >                New_Def  WARNING, "WARNING", User_Ptr, is_normal
 148+ 6D50             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 148+ 6D50             >
 148+ 6D50             >                // dummy db directives used to calculate length of namec
 148+ 6D50 57 41 52 4E >                db      "WARNING"
 148+ 6D54 49 4E 47    >
 148+ 6D57             >len_NFA         defl    $ - temp_NFA
 148+ 6D57             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 148+ 6D50             >
 148+ 6D50 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 148+ 6D51 57 41 52 4E >                db      "WARNING"               // name string in 7-bit ascii, but
 148+ 6D55 49 4E 47    >
 148+ 6D58             >                org     $-1                 // alter last byte of Name just above to set
 148+ 6D57 C7          >                db      {b $} | END_BIT     // msb as name end
 148+ 6D58             >
 148+ 6D58 45 6D       >                dw      last_NFA            // Link to previous definition Name
 148+ 6D5A             >WARNING:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 148+ 6D5A 9F 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 148+ 6D5C             >                else
 148+ 6D5C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 148+ 6D5C             >                endif           ; ok        // for other definitions it "points" the correct handler
 148+ 6D5C             >                // Use of "; ok" to suppress "warning[fwdref]"
 148+ 6D5C             >
 148+ 6D5C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 148+ 6D5C 0E          >                db      14
 149+ 6D5D                              User_Def FENCE      , "FENCE"     , 16 // minimum address where FORGET can work
 149+ 6D5D             >                New_Def  FENCE, "FENCE", User_Ptr, is_normal
 149+ 6D5D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 149+ 6D5D             >
 149+ 6D5D             >                // dummy db directives used to calculate length of namec
 149+ 6D5D 46 45 4E 43 >                db      "FENCE"
 149+ 6D61 45          >
 149+ 6D62             >len_NFA         defl    $ - temp_NFA
 149+ 6D62             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 149+ 6D5D             >
 149+ 6D5D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 149+ 6D5E 46 45 4E 43 >                db      "FENCE"               // name string in 7-bit ascii, but
 149+ 6D62 45          >
 149+ 6D63             >                org     $-1                 // alter last byte of Name just above to set
 149+ 6D62 C5          >                db      {b $} | END_BIT     // msb as name end
 149+ 6D63             >
 149+ 6D63 50 6D       >                dw      last_NFA            // Link to previous definition Name
 149+ 6D65             >FENCE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 149+ 6D65 9F 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 149+ 6D67             >                else
 149+ 6D67 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 149+ 6D67             >                endif           ; ok        // for other definitions it "points" the correct handler
 149+ 6D67             >                // Use of "; ok" to suppress "warning[fwdref]"
 149+ 6D67             >
 149+ 6D67             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 149+ 6D67 10          >                db      16
 150+ 6D68                              User_Def DP         , "DP"        , 18 // Dictionary Pointer
 150+ 6D68             >                New_Def  DP, "DP", User_Ptr, is_normal
 150+ 6D68             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 150+ 6D68             >
 150+ 6D68             >                // dummy db directives used to calculate length of namec
 150+ 6D68 44 50       >                db      "DP"
 150+ 6D6A             >len_NFA         defl    $ - temp_NFA
 150+ 6D6A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 150+ 6D68             >
 150+ 6D68 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 150+ 6D69 44 50       >                db      "DP"               // name string in 7-bit ascii, but
 150+ 6D6B             >                org     $-1                 // alter last byte of Name just above to set
 150+ 6D6A D0          >                db      {b $} | END_BIT     // msb as name end
 150+ 6D6B             >
 150+ 6D6B 5D 6D       >                dw      last_NFA            // Link to previous definition Name
 150+ 6D6D             >DP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 150+ 6D6D 9F 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 150+ 6D6F             >                else
 150+ 6D6F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 150+ 6D6F             >                endif           ; ok        // for other definitions it "points" the correct handler
 150+ 6D6F             >                // Use of "; ok" to suppress "warning[fwdref]"
 150+ 6D6F             >
 150+ 6D6F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 150+ 6D6F 12          >                db      18
 151+ 6D70                              User_Def VOC_LINK   , "VOC-LINK"  , 20 // pointer to the latest vocabulary
 151+ 6D70             >                New_Def  VOC_LINK, "VOC-LINK", User_Ptr, is_normal
 151+ 6D70             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 151+ 6D70             >
 151+ 6D70             >                // dummy db directives used to calculate length of namec
 151+ 6D70 56 4F 43 2D >                db      "VOC-LINK"
 151+ 6D74 4C 49 4E 4B >
 151+ 6D78             >len_NFA         defl    $ - temp_NFA
 151+ 6D78             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 151+ 6D70             >
 151+ 6D70 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 151+ 6D71 56 4F 43 2D >                db      "VOC-LINK"               // name string in 7-bit ascii, but
 151+ 6D75 4C 49 4E 4B >
 151+ 6D79             >                org     $-1                 // alter last byte of Name just above to set
 151+ 6D78 CB          >                db      {b $} | END_BIT     // msb as name end
 151+ 6D79             >
 151+ 6D79 68 6D       >                dw      last_NFA            // Link to previous definition Name
 151+ 6D7B             >VOC_LINK:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 151+ 6D7B 9F 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 151+ 6D7D             >                else
 151+ 6D7D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 151+ 6D7D             >                endif           ; ok        // for other definitions it "points" the correct handler
 151+ 6D7D             >                // Use of "; ok" to suppress "warning[fwdref]"
 151+ 6D7D             >
 151+ 6D7D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 151+ 6D7D 14          >                db      20
 152+ 6D7E                              User_Def FIRST      , "FIRST"     , 22 // address of first buffer
 152+ 6D7E             >                New_Def  FIRST, "FIRST", User_Ptr, is_normal
 152+ 6D7E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 152+ 6D7E             >
 152+ 6D7E             >                // dummy db directives used to calculate length of namec
 152+ 6D7E 46 49 52 53 >                db      "FIRST"
 152+ 6D82 54          >
 152+ 6D83             >len_NFA         defl    $ - temp_NFA
 152+ 6D83             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 152+ 6D7E             >
 152+ 6D7E 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 152+ 6D7F 46 49 52 53 >                db      "FIRST"               // name string in 7-bit ascii, but
 152+ 6D83 54          >
 152+ 6D84             >                org     $-1                 // alter last byte of Name just above to set
 152+ 6D83 D4          >                db      {b $} | END_BIT     // msb as name end
 152+ 6D84             >
 152+ 6D84 70 6D       >                dw      last_NFA            // Link to previous definition Name
 152+ 6D86             >FIRST:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 152+ 6D86 9F 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 152+ 6D88             >                else
 152+ 6D88 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 152+ 6D88             >                endif           ; ok        // for other definitions it "points" the correct handler
 152+ 6D88             >                // Use of "; ok" to suppress "warning[fwdref]"
 152+ 6D88             >
 152+ 6D88             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 152+ 6D88 16          >                db      22
 153+ 6D89                              User_Def LIMIT      , "LIMIT"     , 24 // address of last buffer
 153+ 6D89             >                New_Def  LIMIT, "LIMIT", User_Ptr, is_normal
 153+ 6D89             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 153+ 6D89             >
 153+ 6D89             >                // dummy db directives used to calculate length of namec
 153+ 6D89 4C 49 4D 49 >                db      "LIMIT"
 153+ 6D8D 54          >
 153+ 6D8E             >len_NFA         defl    $ - temp_NFA
 153+ 6D8E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 153+ 6D89             >
 153+ 6D89 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 153+ 6D8A 4C 49 4D 49 >                db      "LIMIT"               // name string in 7-bit ascii, but
 153+ 6D8E 54          >
 153+ 6D8F             >                org     $-1                 // alter last byte of Name just above to set
 153+ 6D8E D4          >                db      {b $} | END_BIT     // msb as name end
 153+ 6D8F             >
 153+ 6D8F 7E 6D       >                dw      last_NFA            // Link to previous definition Name
 153+ 6D91             >LIMIT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 153+ 6D91 9F 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 153+ 6D93             >                else
 153+ 6D93 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 153+ 6D93             >                endif           ; ok        // for other definitions it "points" the correct handler
 153+ 6D93             >                // Use of "; ok" to suppress "warning[fwdref]"
 153+ 6D93             >
 153+ 6D93             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 153+ 6D93 18          >                db      24
 154+ 6D94                              User_Def EXP        , "EXP"       , 26 // keeps the exponent in number conversion
 154+ 6D94             >                New_Def  EXP, "EXP", User_Ptr, is_normal
 154+ 6D94             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 154+ 6D94             >
 154+ 6D94             >                // dummy db directives used to calculate length of namec
 154+ 6D94 45 58 50    >                db      "EXP"
 154+ 6D97             >len_NFA         defl    $ - temp_NFA
 154+ 6D97             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 154+ 6D94             >
 154+ 6D94 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 154+ 6D95 45 58 50    >                db      "EXP"               // name string in 7-bit ascii, but
 154+ 6D98             >                org     $-1                 // alter last byte of Name just above to set
 154+ 6D97 D0          >                db      {b $} | END_BIT     // msb as name end
 154+ 6D98             >
 154+ 6D98 89 6D       >                dw      last_NFA            // Link to previous definition Name
 154+ 6D9A             >EXP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 154+ 6D9A 9F 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 154+ 6D9C             >                else
 154+ 6D9C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 154+ 6D9C             >                endif           ; ok        // for other definitions it "points" the correct handler
 154+ 6D9C             >                // Use of "; ok" to suppress "warning[fwdref]"
 154+ 6D9C             >
 154+ 6D9C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 154+ 6D9C 1A          >                db      26
 155+ 6D9D                              User_Def NMODE      , "NMODE"     , 28 // number mode: 0 integer, 1 floating point
 155+ 6D9D             >                New_Def  NMODE, "NMODE", User_Ptr, is_normal
 155+ 6D9D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 155+ 6D9D             >
 155+ 6D9D             >                // dummy db directives used to calculate length of namec
 155+ 6D9D 4E 4D 4F 44 >                db      "NMODE"
 155+ 6DA1 45          >
 155+ 6DA2             >len_NFA         defl    $ - temp_NFA
 155+ 6DA2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 155+ 6D9D             >
 155+ 6D9D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 155+ 6D9E 4E 4D 4F 44 >                db      "NMODE"               // name string in 7-bit ascii, but
 155+ 6DA2 45          >
 155+ 6DA3             >                org     $-1                 // alter last byte of Name just above to set
 155+ 6DA2 C5          >                db      {b $} | END_BIT     // msb as name end
 155+ 6DA3             >
 155+ 6DA3 94 6D       >                dw      last_NFA            // Link to previous definition Name
 155+ 6DA5             >NMODE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 155+ 6DA5 9F 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 155+ 6DA7             >                else
 155+ 6DA7 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 155+ 6DA7             >                endif           ; ok        // for other definitions it "points" the correct handler
 155+ 6DA7             >                // Use of "; ok" to suppress "warning[fwdref]"
 155+ 6DA7             >
 155+ 6DA7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 155+ 6DA7 1C          >                db      28
 156+ 6DA8                              User_Def BLK        , "BLK"       , 30 // block number to be interpreted. 0 for terminal
 156+ 6DA8             >                New_Def  BLK, "BLK", User_Ptr, is_normal
 156+ 6DA8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 156+ 6DA8             >
 156+ 6DA8             >                // dummy db directives used to calculate length of namec
 156+ 6DA8 42 4C 4B    >                db      "BLK"
 156+ 6DAB             >len_NFA         defl    $ - temp_NFA
 156+ 6DAB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 156+ 6DA8             >
 156+ 6DA8 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 156+ 6DA9 42 4C 4B    >                db      "BLK"               // name string in 7-bit ascii, but
 156+ 6DAC             >                org     $-1                 // alter last byte of Name just above to set
 156+ 6DAB CB          >                db      {b $} | END_BIT     // msb as name end
 156+ 6DAC             >
 156+ 6DAC 9D 6D       >                dw      last_NFA            // Link to previous definition Name
 156+ 6DAE             >BLK:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 156+ 6DAE 9F 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 156+ 6DB0             >                else
 156+ 6DB0 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 156+ 6DB0             >                endif           ; ok        // for other definitions it "points" the correct handler
 156+ 6DB0             >                // Use of "; ok" to suppress "warning[fwdref]"
 156+ 6DB0             >
 156+ 6DB0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 156+ 6DB0 1E          >                db      30
 157+ 6DB1                              User_Def TO_IN      , ">IN"       , 32 // incremented when consuming input buffer
 157+ 6DB1             >                New_Def  TO_IN, ">IN", User_Ptr, is_normal
 157+ 6DB1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 157+ 6DB1             >
 157+ 6DB1             >                // dummy db directives used to calculate length of namec
 157+ 6DB1 3E 49 4E    >                db      ">IN"
 157+ 6DB4             >len_NFA         defl    $ - temp_NFA
 157+ 6DB4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 157+ 6DB1             >
 157+ 6DB1 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 157+ 6DB2 3E 49 4E    >                db      ">IN"               // name string in 7-bit ascii, but
 157+ 6DB5             >                org     $-1                 // alter last byte of Name just above to set
 157+ 6DB4 CE          >                db      {b $} | END_BIT     // msb as name end
 157+ 6DB5             >
 157+ 6DB5 A8 6D       >                dw      last_NFA            // Link to previous definition Name
 157+ 6DB7             >TO_IN:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 157+ 6DB7 9F 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 157+ 6DB9             >                else
 157+ 6DB9 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 157+ 6DB9             >                endif           ; ok        // for other definitions it "points" the correct handler
 157+ 6DB9             >                // Use of "; ok" to suppress "warning[fwdref]"
 157+ 6DB9             >
 157+ 6DB9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 157+ 6DB9 20          >                db      32
 158+ 6DBA                              User_Def OUT        , "OUT"       , 34 // incremented when sending to output
 158+ 6DBA             >                New_Def  OUT, "OUT", User_Ptr, is_normal
 158+ 6DBA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 158+ 6DBA             >
 158+ 6DBA             >                // dummy db directives used to calculate length of namec
 158+ 6DBA 4F 55 54    >                db      "OUT"
 158+ 6DBD             >len_NFA         defl    $ - temp_NFA
 158+ 6DBD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 158+ 6DBA             >
 158+ 6DBA 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 158+ 6DBB 4F 55 54    >                db      "OUT"               // name string in 7-bit ascii, but
 158+ 6DBE             >                org     $-1                 // alter last byte of Name just above to set
 158+ 6DBD D4          >                db      {b $} | END_BIT     // msb as name end
 158+ 6DBE             >
 158+ 6DBE B1 6D       >                dw      last_NFA            // Link to previous definition Name
 158+ 6DC0             >OUT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 158+ 6DC0 9F 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 158+ 6DC2             >                else
 158+ 6DC2 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 158+ 6DC2             >                endif           ; ok        // for other definitions it "points" the correct handler
 158+ 6DC2             >                // Use of "; ok" to suppress "warning[fwdref]"
 158+ 6DC2             >
 158+ 6DC2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 158+ 6DC2 22          >                db      34
 159+ 6DC3                              User_Def SCR        , "SCR"       , 36 // latest screen retreieved by LIST
 159+ 6DC3             >                New_Def  SCR, "SCR", User_Ptr, is_normal
 159+ 6DC3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 159+ 6DC3             >
 159+ 6DC3             >                // dummy db directives used to calculate length of namec
 159+ 6DC3 53 43 52    >                db      "SCR"
 159+ 6DC6             >len_NFA         defl    $ - temp_NFA
 159+ 6DC6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 159+ 6DC3             >
 159+ 6DC3 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 159+ 6DC4 53 43 52    >                db      "SCR"               // name string in 7-bit ascii, but
 159+ 6DC7             >                org     $-1                 // alter last byte of Name just above to set
 159+ 6DC6 D2          >                db      {b $} | END_BIT     // msb as name end
 159+ 6DC7             >
 159+ 6DC7 BA 6D       >                dw      last_NFA            // Link to previous definition Name
 159+ 6DC9             >SCR:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 159+ 6DC9 9F 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 159+ 6DCB             >                else
 159+ 6DCB ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 159+ 6DCB             >                endif           ; ok        // for other definitions it "points" the correct handler
 159+ 6DCB             >                // Use of "; ok" to suppress "warning[fwdref]"
 159+ 6DCB             >
 159+ 6DCB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 159+ 6DCB 24          >                db      36
 160+ 6DCC                              User_Def OFFSET     , "OFFSET"    , 38 //
 160+ 6DCC             >                New_Def  OFFSET, "OFFSET", User_Ptr, is_normal
 160+ 6DCC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 160+ 6DCC             >
 160+ 6DCC             >                // dummy db directives used to calculate length of namec
 160+ 6DCC 4F 46 46 53 >                db      "OFFSET"
 160+ 6DD0 45 54       >
 160+ 6DD2             >len_NFA         defl    $ - temp_NFA
 160+ 6DD2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 160+ 6DCC             >
 160+ 6DCC 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 160+ 6DCD 4F 46 46 53 >                db      "OFFSET"               // name string in 7-bit ascii, but
 160+ 6DD1 45 54       >
 160+ 6DD3             >                org     $-1                 // alter last byte of Name just above to set
 160+ 6DD2 D4          >                db      {b $} | END_BIT     // msb as name end
 160+ 6DD3             >
 160+ 6DD3 C3 6D       >                dw      last_NFA            // Link to previous definition Name
 160+ 6DD5             >OFFSET:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 160+ 6DD5 9F 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 160+ 6DD7             >                else
 160+ 6DD7 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 160+ 6DD7             >                endif           ; ok        // for other definitions it "points" the correct handler
 160+ 6DD7             >                // Use of "; ok" to suppress "warning[fwdref]"
 160+ 6DD7             >
 160+ 6DD7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 160+ 6DD7 26          >                db      38
 161+ 6DD8                              User_Def CONTEXT    , "CONTEXT"   , 40 // pointer to the vocabulary where search begins
 161+ 6DD8             >                New_Def  CONTEXT, "CONTEXT", User_Ptr, is_normal
 161+ 6DD8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 161+ 6DD8             >
 161+ 6DD8             >                // dummy db directives used to calculate length of namec
 161+ 6DD8 43 4F 4E 54 >                db      "CONTEXT"
 161+ 6DDC 45 58 54    >
 161+ 6DDF             >len_NFA         defl    $ - temp_NFA
 161+ 6DDF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 161+ 6DD8             >
 161+ 6DD8 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 161+ 6DD9 43 4F 4E 54 >                db      "CONTEXT"               // name string in 7-bit ascii, but
 161+ 6DDD 45 58 54    >
 161+ 6DE0             >                org     $-1                 // alter last byte of Name just above to set
 161+ 6DDF D4          >                db      {b $} | END_BIT     // msb as name end
 161+ 6DE0             >
 161+ 6DE0 CC 6D       >                dw      last_NFA            // Link to previous definition Name
 161+ 6DE2             >CONTEXT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 161+ 6DE2 9F 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 161+ 6DE4             >                else
 161+ 6DE4 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 161+ 6DE4             >                endif           ; ok        // for other definitions it "points" the correct handler
 161+ 6DE4             >                // Use of "; ok" to suppress "warning[fwdref]"
 161+ 6DE4             >
 161+ 6DE4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 161+ 6DE4 28          >                db      40
 162+ 6DE5                              User_Def CURRENT    , "CURRENT"   , 42 // pointer to the vocabulary where search continues
 162+ 6DE5             >                New_Def  CURRENT, "CURRENT", User_Ptr, is_normal
 162+ 6DE5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 162+ 6DE5             >
 162+ 6DE5             >                // dummy db directives used to calculate length of namec
 162+ 6DE5 43 55 52 52 >                db      "CURRENT"
 162+ 6DE9 45 4E 54    >
 162+ 6DEC             >len_NFA         defl    $ - temp_NFA
 162+ 6DEC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 162+ 6DE5             >
 162+ 6DE5 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 162+ 6DE6 43 55 52 52 >                db      "CURRENT"               // name string in 7-bit ascii, but
 162+ 6DEA 45 4E 54    >
 162+ 6DED             >                org     $-1                 // alter last byte of Name just above to set
 162+ 6DEC D4          >                db      {b $} | END_BIT     // msb as name end
 162+ 6DED             >
 162+ 6DED D8 6D       >                dw      last_NFA            // Link to previous definition Name
 162+ 6DEF             >CURRENT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 162+ 6DEF 9F 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 162+ 6DF1             >                else
 162+ 6DF1 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 162+ 6DF1             >                endif           ; ok        // for other definitions it "points" the correct handler
 162+ 6DF1             >                // Use of "; ok" to suppress "warning[fwdref]"
 162+ 6DF1             >
 162+ 6DF1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 162+ 6DF1 2A          >                db      42
 163+ 6DF2                              User_Def STATE      , "STATE"     , 44 // compilation status. 0 interpreting.
 163+ 6DF2             >                New_Def  STATE, "STATE", User_Ptr, is_normal
 163+ 6DF2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 163+ 6DF2             >
 163+ 6DF2             >                // dummy db directives used to calculate length of namec
 163+ 6DF2 53 54 41 54 >                db      "STATE"
 163+ 6DF6 45          >
 163+ 6DF7             >len_NFA         defl    $ - temp_NFA
 163+ 6DF7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 163+ 6DF2             >
 163+ 6DF2 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 163+ 6DF3 53 54 41 54 >                db      "STATE"               // name string in 7-bit ascii, but
 163+ 6DF7 45          >
 163+ 6DF8             >                org     $-1                 // alter last byte of Name just above to set
 163+ 6DF7 C5          >                db      {b $} | END_BIT     // msb as name end
 163+ 6DF8             >
 163+ 6DF8 E5 6D       >                dw      last_NFA            // Link to previous definition Name
 163+ 6DFA             >STATE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 163+ 6DFA 9F 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 163+ 6DFC             >                else
 163+ 6DFC ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 163+ 6DFC             >                endif           ; ok        // for other definitions it "points" the correct handler
 163+ 6DFC             >                // Use of "; ok" to suppress "warning[fwdref]"
 163+ 6DFC             >
 163+ 6DFC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 163+ 6DFC 2C          >                db      44
 164+ 6DFD                              User_Def BASE       , "BASE"      , 46 //
 164+ 6DFD             >                New_Def  BASE, "BASE", User_Ptr, is_normal
 164+ 6DFD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 164+ 6DFD             >
 164+ 6DFD             >                // dummy db directives used to calculate length of namec
 164+ 6DFD 42 41 53 45 >                db      "BASE"
 164+ 6E01             >len_NFA         defl    $ - temp_NFA
 164+ 6E01             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 164+ 6DFD             >
 164+ 6DFD 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 164+ 6DFE 42 41 53 45 >                db      "BASE"               // name string in 7-bit ascii, but
 164+ 6E02             >                org     $-1                 // alter last byte of Name just above to set
 164+ 6E01 C5          >                db      {b $} | END_BIT     // msb as name end
 164+ 6E02             >
 164+ 6E02 F2 6D       >                dw      last_NFA            // Link to previous definition Name
 164+ 6E04             >BASE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 164+ 6E04 9F 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 164+ 6E06             >                else
 164+ 6E06 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 164+ 6E06             >                endif           ; ok        // for other definitions it "points" the correct handler
 164+ 6E06             >                // Use of "; ok" to suppress "warning[fwdref]"
 164+ 6E06             >
 164+ 6E06             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 164+ 6E06 2E          >                db      46
 165+ 6E07                              User_Def DPL        , "DPL"       , 48 // number of digits after decimal point in conversion
 165+ 6E07             >                New_Def  DPL, "DPL", User_Ptr, is_normal
 165+ 6E07             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 165+ 6E07             >
 165+ 6E07             >                // dummy db directives used to calculate length of namec
 165+ 6E07 44 50 4C    >                db      "DPL"
 165+ 6E0A             >len_NFA         defl    $ - temp_NFA
 165+ 6E0A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 165+ 6E07             >
 165+ 6E07 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 165+ 6E08 44 50 4C    >                db      "DPL"               // name string in 7-bit ascii, but
 165+ 6E0B             >                org     $-1                 // alter last byte of Name just above to set
 165+ 6E0A CC          >                db      {b $} | END_BIT     // msb as name end
 165+ 6E0B             >
 165+ 6E0B FD 6D       >                dw      last_NFA            // Link to previous definition Name
 165+ 6E0D             >DPL:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 165+ 6E0D 9F 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 165+ 6E0F             >                else
 165+ 6E0F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 165+ 6E0F             >                endif           ; ok        // for other definitions it "points" the correct handler
 165+ 6E0F             >                // Use of "; ok" to suppress "warning[fwdref]"
 165+ 6E0F             >
 165+ 6E0F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 165+ 6E0F 30          >                db      48
 166+ 6E10                              User_Def FLD        , "FLD"       , 50 // output field width
 166+ 6E10             >                New_Def  FLD, "FLD", User_Ptr, is_normal
 166+ 6E10             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 166+ 6E10             >
 166+ 6E10             >                // dummy db directives used to calculate length of namec
 166+ 6E10 46 4C 44    >                db      "FLD"
 166+ 6E13             >len_NFA         defl    $ - temp_NFA
 166+ 6E13             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 166+ 6E10             >
 166+ 6E10 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 166+ 6E11 46 4C 44    >                db      "FLD"               // name string in 7-bit ascii, but
 166+ 6E14             >                org     $-1                 // alter last byte of Name just above to set
 166+ 6E13 C4          >                db      {b $} | END_BIT     // msb as name end
 166+ 6E14             >
 166+ 6E14 07 6E       >                dw      last_NFA            // Link to previous definition Name
 166+ 6E16             >FLD:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 166+ 6E16 9F 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 166+ 6E18             >                else
 166+ 6E18 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 166+ 6E18             >                endif           ; ok        // for other definitions it "points" the correct handler
 166+ 6E18             >                // Use of "; ok" to suppress "warning[fwdref]"
 166+ 6E18             >
 166+ 6E18             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 166+ 6E18 32          >                db      50
 167+ 6E19                              User_Def CSP        , "CSP"       , 52 // used to temporary store Stack-Pointer value
 167+ 6E19             >                New_Def  CSP, "CSP", User_Ptr, is_normal
 167+ 6E19             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 167+ 6E19             >
 167+ 6E19             >                // dummy db directives used to calculate length of namec
 167+ 6E19 43 53 50    >                db      "CSP"
 167+ 6E1C             >len_NFA         defl    $ - temp_NFA
 167+ 6E1C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 167+ 6E19             >
 167+ 6E19 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 167+ 6E1A 43 53 50    >                db      "CSP"               // name string in 7-bit ascii, but
 167+ 6E1D             >                org     $-1                 // alter last byte of Name just above to set
 167+ 6E1C D0          >                db      {b $} | END_BIT     // msb as name end
 167+ 6E1D             >
 167+ 6E1D 10 6E       >                dw      last_NFA            // Link to previous definition Name
 167+ 6E1F             >CSP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 167+ 6E1F 9F 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 167+ 6E21             >                else
 167+ 6E21 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 167+ 6E21             >                endif           ; ok        // for other definitions it "points" the correct handler
 167+ 6E21             >                // Use of "; ok" to suppress "warning[fwdref]"
 167+ 6E21             >
 167+ 6E21             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 167+ 6E21 34          >                db      52
 168+ 6E22                              User_Def RSHARP     , "R#"        , 54 // location of editing cursor
 168+ 6E22             >                New_Def  RSHARP, "R#", User_Ptr, is_normal
 168+ 6E22             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 168+ 6E22             >
 168+ 6E22             >                // dummy db directives used to calculate length of namec
 168+ 6E22 52 23       >                db      "R#"
 168+ 6E24             >len_NFA         defl    $ - temp_NFA
 168+ 6E24             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 168+ 6E22             >
 168+ 6E22 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 168+ 6E23 52 23       >                db      "R#"               // name string in 7-bit ascii, but
 168+ 6E25             >                org     $-1                 // alter last byte of Name just above to set
 168+ 6E24 A3          >                db      {b $} | END_BIT     // msb as name end
 168+ 6E25             >
 168+ 6E25 19 6E       >                dw      last_NFA            // Link to previous definition Name
 168+ 6E27             >RSHARP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 168+ 6E27 9F 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 168+ 6E29             >                else
 168+ 6E29 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 168+ 6E29             >                endif           ; ok        // for other definitions it "points" the correct handler
 168+ 6E29             >                // Use of "; ok" to suppress "warning[fwdref]"
 168+ 6E29             >
 168+ 6E29             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 168+ 6E29 36          >                db      54
 169+ 6E2A                              User_Def HLD        , "HLD"       , 56 // last character during a number conversion output
 169+ 6E2A             >                New_Def  HLD, "HLD", User_Ptr, is_normal
 169+ 6E2A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 169+ 6E2A             >
 169+ 6E2A             >                // dummy db directives used to calculate length of namec
 169+ 6E2A 48 4C 44    >                db      "HLD"
 169+ 6E2D             >len_NFA         defl    $ - temp_NFA
 169+ 6E2D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 169+ 6E2A             >
 169+ 6E2A 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 169+ 6E2B 48 4C 44    >                db      "HLD"               // name string in 7-bit ascii, but
 169+ 6E2E             >                org     $-1                 // alter last byte of Name just above to set
 169+ 6E2D C4          >                db      {b $} | END_BIT     // msb as name end
 169+ 6E2E             >
 169+ 6E2E 22 6E       >                dw      last_NFA            // Link to previous definition Name
 169+ 6E30             >HLD:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 169+ 6E30 9F 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 169+ 6E32             >                else
 169+ 6E32 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 169+ 6E32             >                endif           ; ok        // for other definitions it "points" the correct handler
 169+ 6E32             >                // Use of "; ok" to suppress "warning[fwdref]"
 169+ 6E32             >
 169+ 6E32             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 169+ 6E32 38          >                db      56
 170+ 6E33                              User_Def USE        , "USE"       , 58 // address of last used block
 170+ 6E33             >                New_Def  USE, "USE", User_Ptr, is_normal
 170+ 6E33             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 170+ 6E33             >
 170+ 6E33             >                // dummy db directives used to calculate length of namec
 170+ 6E33 55 53 45    >                db      "USE"
 170+ 6E36             >len_NFA         defl    $ - temp_NFA
 170+ 6E36             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 170+ 6E33             >
 170+ 6E33 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 170+ 6E34 55 53 45    >                db      "USE"               // name string in 7-bit ascii, but
 170+ 6E37             >                org     $-1                 // alter last byte of Name just above to set
 170+ 6E36 C5          >                db      {b $} | END_BIT     // msb as name end
 170+ 6E37             >
 170+ 6E37 2A 6E       >                dw      last_NFA            // Link to previous definition Name
 170+ 6E39             >USE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 170+ 6E39 9F 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 170+ 6E3B             >                else
 170+ 6E3B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 170+ 6E3B             >                endif           ; ok        // for other definitions it "points" the correct handler
 170+ 6E3B             >                // Use of "; ok" to suppress "warning[fwdref]"
 170+ 6E3B             >
 170+ 6E3B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 170+ 6E3B 3A          >                db      58
 171+ 6E3C                              User_Def PREV       , "PREV"      , 60 // address of previous used block
 171+ 6E3C             >                New_Def  PREV, "PREV", User_Ptr, is_normal
 171+ 6E3C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 171+ 6E3C             >
 171+ 6E3C             >                // dummy db directives used to calculate length of namec
 171+ 6E3C 50 52 45 56 >                db      "PREV"
 171+ 6E40             >len_NFA         defl    $ - temp_NFA
 171+ 6E40             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 171+ 6E3C             >
 171+ 6E3C 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 171+ 6E3D 50 52 45 56 >                db      "PREV"               // name string in 7-bit ascii, but
 171+ 6E41             >                org     $-1                 // alter last byte of Name just above to set
 171+ 6E40 D6          >                db      {b $} | END_BIT     // msb as name end
 171+ 6E41             >
 171+ 6E41 33 6E       >                dw      last_NFA            // Link to previous definition Name
 171+ 6E43             >PREV:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 171+ 6E43 9F 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 171+ 6E45             >                else
 171+ 6E45 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 171+ 6E45             >                endif           ; ok        // for other definitions it "points" the correct handler
 171+ 6E45             >                // Use of "; ok" to suppress "warning[fwdref]"
 171+ 6E45             >
 171+ 6E45             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 171+ 6E45 3C          >                db      60
 172+ 6E46                              User_Def LP         , "LP"        , 62 // line printer (not used)
 172+ 6E46             >                New_Def  LP, "LP", User_Ptr, is_normal
 172+ 6E46             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 172+ 6E46             >
 172+ 6E46             >                // dummy db directives used to calculate length of namec
 172+ 6E46 4C 50       >                db      "LP"
 172+ 6E48             >len_NFA         defl    $ - temp_NFA
 172+ 6E48             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 172+ 6E46             >
 172+ 6E46 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 172+ 6E47 4C 50       >                db      "LP"               // name string in 7-bit ascii, but
 172+ 6E49             >                org     $-1                 // alter last byte of Name just above to set
 172+ 6E48 D0          >                db      {b $} | END_BIT     // msb as name end
 172+ 6E49             >
 172+ 6E49 3C 6E       >                dw      last_NFA            // Link to previous definition Name
 172+ 6E4B             >LP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 172+ 6E4B 9F 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 172+ 6E4D             >                else
 172+ 6E4D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 172+ 6E4D             >                endif           ; ok        // for other definitions it "points" the correct handler
 172+ 6E4D             >                // Use of "; ok" to suppress "warning[fwdref]"
 172+ 6E4D             >
 172+ 6E4D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 172+ 6E4D 3E          >                db      62
 173+ 6E4E                              User_Def PLACE      , "PLACE"     , 64 // number of digits after decimal point in output
 173+ 6E4E             >                New_Def  PLACE, "PLACE", User_Ptr, is_normal
 173+ 6E4E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 173+ 6E4E             >
 173+ 6E4E             >                // dummy db directives used to calculate length of namec
 173+ 6E4E 50 4C 41 43 >                db      "PLACE"
 173+ 6E52 45          >
 173+ 6E53             >len_NFA         defl    $ - temp_NFA
 173+ 6E53             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 173+ 6E4E             >
 173+ 6E4E 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 173+ 6E4F 50 4C 41 43 >                db      "PLACE"               // name string in 7-bit ascii, but
 173+ 6E53 45          >
 173+ 6E54             >                org     $-1                 // alter last byte of Name just above to set
 173+ 6E53 C5          >                db      {b $} | END_BIT     // msb as name end
 173+ 6E54             >
 173+ 6E54 46 6E       >                dw      last_NFA            // Link to previous definition Name
 173+ 6E56             >PLACE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 173+ 6E56 9F 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 173+ 6E58             >                else
 173+ 6E58 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 173+ 6E58             >                endif           ; ok        // for other definitions it "points" the correct handler
 173+ 6E58             >                // Use of "; ok" to suppress "warning[fwdref]"
 173+ 6E58             >
 173+ 6E58             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 173+ 6E58 40          >                db      64
 174+ 6E59                              User_Def SOURCE_ID  , "SOURCE-ID" , 66 // data-stream number in INCLUDE and LOAD-
 174+ 6E59             >                New_Def  SOURCE_ID, "SOURCE-ID", User_Ptr, is_normal
 174+ 6E59             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 174+ 6E59             >
 174+ 6E59             >                // dummy db directives used to calculate length of namec
 174+ 6E59 53 4F 55 52 >                db      "SOURCE-ID"
 174+ 6E5D 43 45 2D 49 >
 174+ 6E61 44          >
 174+ 6E62             >len_NFA         defl    $ - temp_NFA
 174+ 6E62             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 174+ 6E59             >
 174+ 6E59 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 174+ 6E5A 53 4F 55 52 >                db      "SOURCE-ID"               // name string in 7-bit ascii, but
 174+ 6E5E 43 45 2D 49 >
 174+ 6E62 44          >
 174+ 6E63             >                org     $-1                 // alter last byte of Name just above to set
 174+ 6E62 C4          >                db      {b $} | END_BIT     // msb as name end
 174+ 6E63             >
 174+ 6E63 4E 6E       >                dw      last_NFA            // Link to previous definition Name
 174+ 6E65             >SOURCE_ID:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 174+ 6E65 9F 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 174+ 6E67             >                else
 174+ 6E67 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 174+ 6E67             >                endif           ; ok        // for other definitions it "points" the correct handler
 174+ 6E67             >                // Use of "; ok" to suppress "warning[fwdref]"
 174+ 6E67             >
 174+ 6E67             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 174+ 6E67 42          >                db      66
 175+ 6E68                              User_Def SPAN       , "SPAN"      , 68 // number of character of last EXPECT
 175+ 6E68             >                New_Def  SPAN, "SPAN", User_Ptr, is_normal
 175+ 6E68             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 175+ 6E68             >
 175+ 6E68             >                // dummy db directives used to calculate length of namec
 175+ 6E68 53 50 41 4E >                db      "SPAN"
 175+ 6E6C             >len_NFA         defl    $ - temp_NFA
 175+ 6E6C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 175+ 6E68             >
 175+ 6E68 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 175+ 6E69 53 50 41 4E >                db      "SPAN"               // name string in 7-bit ascii, but
 175+ 6E6D             >                org     $-1                 // alter last byte of Name just above to set
 175+ 6E6C CE          >                db      {b $} | END_BIT     // msb as name end
 175+ 6E6D             >
 175+ 6E6D 59 6E       >                dw      last_NFA            // Link to previous definition Name
 175+ 6E6F             >SPAN:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 175+ 6E6F 9F 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 175+ 6E71             >                else
 175+ 6E71 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 175+ 6E71             >                endif           ; ok        // for other definitions it "points" the correct handler
 175+ 6E71             >                // Use of "; ok" to suppress "warning[fwdref]"
 175+ 6E71             >
 175+ 6E71             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 175+ 6E71 44          >                db      68
 176+ 6E72                              User_Def HP         , "HP"        , 70 // heap-pointer address
 176+ 6E72             >                New_Def  HP, "HP", User_Ptr, is_normal
 176+ 6E72             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 176+ 6E72             >
 176+ 6E72             >                // dummy db directives used to calculate length of namec
 176+ 6E72 48 50       >                db      "HP"
 176+ 6E74             >len_NFA         defl    $ - temp_NFA
 176+ 6E74             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 176+ 6E72             >
 176+ 6E72 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 176+ 6E73 48 50       >                db      "HP"               // name string in 7-bit ascii, but
 176+ 6E75             >                org     $-1                 // alter last byte of Name just above to set
 176+ 6E74 D0          >                db      {b $} | END_BIT     // msb as name end
 176+ 6E75             >
 176+ 6E75 68 6E       >                dw      last_NFA            // Link to previous definition Name
 176+ 6E77             >HP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 176+ 6E77 9F 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 176+ 6E79             >                else
 176+ 6E79 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 176+ 6E79             >                endif           ; ok        // for other definitions it "points" the correct handler
 176+ 6E79             >                // Use of "; ok" to suppress "warning[fwdref]"
 176+ 6E79             >
 176+ 6E79             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 176+ 6E79 46          >                db      70
 177+ 6E7A
 178+ 6E7A              //  ______________________________________________________________________
 179+ 6E7A              //
 180+ 6E7A              // here         -- a
 181+ 6E7A                              Colon_Def HERE, "HERE", is_normal
 181+ 6E7A             >                New_Def  HERE, "HERE", Enter_Ptr, is_normal ; ok
 181+ 6E7A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 181+ 6E7A             >
 181+ 6E7A             >                // dummy db directives used to calculate length of namec
 181+ 6E7A 48 45 52 45 >                db      "HERE"
 181+ 6E7E             >len_NFA         defl    $ - temp_NFA
 181+ 6E7E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 181+ 6E7A             >
 181+ 6E7A 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 181+ 6E7B 48 45 52 45 >                db      "HERE"               // name string in 7-bit ascii, but
 181+ 6E7F             >                org     $-1                 // alter last byte of Name just above to set
 181+ 6E7E C5          >                db      {b $} | END_BIT     // msb as name end
 181+ 6E7F             >
 181+ 6E7F 72 6E       >                dw      last_NFA            // Link to previous definition Name
 181+ 6E81             >HERE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 181+ 6E81 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 181+ 6E83             >                else
 181+ 6E83 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 181+ 6E83             >                endif           ; ok        // for other definitions it "points" the correct handler
 181+ 6E83             >                // Use of "; ok" to suppress "warning[fwdref]"
 181+ 6E83             >
 181+ 6E83             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 182+ 6E83 6D 6D 43 6B                  dw      DP, FETCH               // dp @
 183+ 6E87 23 69                        dw      EXIT                    // ;
 184+ 6E89
 185+ 6E89              //  ______________________________________________________________________
 186+ 6E89              //
 187+ 6E89              // allot        n --
 188+ 6E89                              Colon_Def ALLOT, "ALLOT", is_normal
 188+ 6E89             >                New_Def  ALLOT, "ALLOT", Enter_Ptr, is_normal ; ok
 188+ 6E89             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 188+ 6E89             >
 188+ 6E89             >                // dummy db directives used to calculate length of namec
 188+ 6E89 41 4C 4C 4F >                db      "ALLOT"
 188+ 6E8D 54          >
 188+ 6E8E             >len_NFA         defl    $ - temp_NFA
 188+ 6E8E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 188+ 6E89             >
 188+ 6E89 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 188+ 6E8A 41 4C 4C 4F >                db      "ALLOT"               // name string in 7-bit ascii, but
 188+ 6E8E 54          >
 188+ 6E8F             >                org     $-1                 // alter last byte of Name just above to set
 188+ 6E8E D4          >                db      {b $} | END_BIT     // msb as name end
 188+ 6E8F             >
 188+ 6E8F 7A 6E       >                dw      last_NFA            // Link to previous definition Name
 188+ 6E91             >ALLOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 188+ 6E91 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 188+ 6E93             >                else
 188+ 6E93 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 188+ 6E93             >                endif           ; ok        // for other definitions it "points" the correct handler
 188+ 6E93             >                // Use of "; ok" to suppress "warning[fwdref]"
 188+ 6E93             >
 188+ 6E93             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 189+ 6E93 6D 6D 20 6B                  dw      DP,  PLUSSTORE          // dp +!
 190+ 6E97 23 69                        dw      EXIT                    // ;
 191+ 6E99
 192+ 6E99              //  ______________________________________________________________________
 193+ 6E99              //
 194+ 6E99              // comma        n --
 195+ 6E99                              Colon_Def COMMA, ",", is_normal
 195+ 6E99             >                New_Def  COMMA, ",", Enter_Ptr, is_normal ; ok
 195+ 6E99             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 195+ 6E99             >
 195+ 6E99             >                // dummy db directives used to calculate length of namec
 195+ 6E99 2C          >                db      ","
 195+ 6E9A             >len_NFA         defl    $ - temp_NFA
 195+ 6E9A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 195+ 6E99             >
 195+ 6E99 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 195+ 6E9A 2C          >                db      ","               // name string in 7-bit ascii, but
 195+ 6E9B             >                org     $-1                 // alter last byte of Name just above to set
 195+ 6E9A AC          >                db      {b $} | END_BIT     // msb as name end
 195+ 6E9B             >
 195+ 6E9B 89 6E       >                dw      last_NFA            // Link to previous definition Name
 195+ 6E9D             >COMMA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 195+ 6E9D 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 195+ 6E9F             >                else
 195+ 6E9F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 195+ 6E9F             >                endif           ; ok        // for other definitions it "points" the correct handler
 195+ 6E9F             >                // Use of "; ok" to suppress "warning[fwdref]"
 195+ 6E9F             >
 195+ 6E9F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 196+ 6E9F 81 6E 50 6B                  dw      HERE, STORE             // here !
 197+ 6EA3 BF 6C 91 6E                  dw      TWO, ALLOT              // 2 allot
 198+ 6EA7 23 69                        dw      EXIT                    // ;
 199+ 6EA9
 200+ 6EA9              //  ______________________________________________________________________
 201+ 6EA9              //
 202+ 6EA9              // ccomma       c --
 203+ 6EA9                              Colon_Def CCOMMA, "C,", is_normal
 203+ 6EA9             >                New_Def  CCOMMA, "C,", Enter_Ptr, is_normal ; ok
 203+ 6EA9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 203+ 6EA9             >
 203+ 6EA9             >                // dummy db directives used to calculate length of namec
 203+ 6EA9 43 2C       >                db      "C,"
 203+ 6EAB             >len_NFA         defl    $ - temp_NFA
 203+ 6EAB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 203+ 6EA9             >
 203+ 6EA9 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 203+ 6EAA 43 2C       >                db      "C,"               // name string in 7-bit ascii, but
 203+ 6EAC             >                org     $-1                 // alter last byte of Name just above to set
 203+ 6EAB AC          >                db      {b $} | END_BIT     // msb as name end
 203+ 6EAC             >
 203+ 6EAC 99 6E       >                dw      last_NFA            // Link to previous definition Name
 203+ 6EAE             >CCOMMA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 203+ 6EAE 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 203+ 6EB0             >                else
 203+ 6EB0 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 203+ 6EB0             >                endif           ; ok        // for other definitions it "points" the correct handler
 203+ 6EB0             >                // Use of "; ok" to suppress "warning[fwdref]"
 203+ 6EB0             >
 203+ 6EB0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 204+ 6EB0 81 6E 6C 6B                  dw      HERE, CSTORE            // here c!
 205+ 6EB4 B7 6C 91 6E                  dw      ONE, ALLOT              // 1 allot
 206+ 6EB8 23 69                        dw      EXIT                    // ;
 207+ 6EBA
 208+ 6EBA              //  ______________________________________________________________________
 209+ 6EBA              //
 210+ 6EBA              // s->d         n -- d
 211+ 6EBA              // converts a single precision integer in a double precision
 212+ 6EBA                              New_Def S_TO_D, "S->D", is_code, is_normal
 212+ 6EBA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 212+ 6EBA             >
 212+ 6EBA             >                // dummy db directives used to calculate length of namec
 212+ 6EBA 53 2D 3E 44 >                db      "S->D"
 212+ 6EBE             >len_NFA         defl    $ - temp_NFA
 212+ 6EBE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 212+ 6EBA             >
 212+ 6EBA 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 212+ 6EBB 53 2D 3E 44 >                db      "S->D"               // name string in 7-bit ascii, but
 212+ 6EBF             >                org     $-1                 // alter last byte of Name just above to set
 212+ 6EBE C4          >                db      {b $} | END_BIT     // msb as name end
 212+ 6EBF             >
 212+ 6EBF A9 6E       >                dw      last_NFA            // Link to previous definition Name
 212+ 6EC1             >S_TO_D:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 212+ 6EC1 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 212+ 6EC1             >                else
 212+ 6EC1 C3 6E       >                dw      $ + 2   ; ok        // is pointed by CFA
 212+ 6EC3             >                endif           ; ok        // for other definitions it "points" the correct handler
 212+ 6EC3             >                // Use of "; ok" to suppress "warning[fwdref]"
 212+ 6EC3             >
 212+ 6EC3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 213+ 6EC3 D1                           pop     de
 214+ 6EC4 21 00 00                     ld      hl, 0
 215+ 6EC7 7A                           ld      a, d
 216+ 6EC8 E6 80                        and     $80
 217+ 6ECA 28 01                        jr      z, S_to_D_Skip
 218+ 6ECC 2B                           dec     hl                  // $FFFF
 219+ 6ECD              S_to_D_Skip:
 220+ 6ECD D5                           push    de
 221+ 6ECE E5                           push    hl
 222+ 6ECF                              next
 222+ 6ECF DD E9       >                jp      (ix)
 223+ 6ED1
 224+ 6ED1              //  ______________________________________________________________________
 225+ 6ED1              //
 226+ 6ED1              // -            n1 n2 -- n3
 227+ 6ED1              // subtraction
 228+ 6ED1                              New_Def SUBTRACT, "-", is_code, is_normal
 228+ 6ED1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 228+ 6ED1             >
 228+ 6ED1             >                // dummy db directives used to calculate length of namec
 228+ 6ED1 2D          >                db      "-"
 228+ 6ED2             >len_NFA         defl    $ - temp_NFA
 228+ 6ED2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 228+ 6ED1             >
 228+ 6ED1 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 228+ 6ED2 2D          >                db      "-"               // name string in 7-bit ascii, but
 228+ 6ED3             >                org     $-1                 // alter last byte of Name just above to set
 228+ 6ED2 AD          >                db      {b $} | END_BIT     // msb as name end
 228+ 6ED3             >
 228+ 6ED3 BA 6E       >                dw      last_NFA            // Link to previous definition Name
 228+ 6ED5             >SUBTRACT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 228+ 6ED5 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 228+ 6ED5             >                else
 228+ 6ED5 D7 6E       >                dw      $ + 2   ; ok        // is pointed by CFA
 228+ 6ED7             >                endif           ; ok        // for other definitions it "points" the correct handler
 228+ 6ED7             >                // Use of "; ok" to suppress "warning[fwdref]"
 228+ 6ED7             >
 228+ 6ED7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 229+ 6ED7 D1                           pop     de
 230+ 6ED8 E1                           pop     hl
 231+ 6ED9 A7                           and     a
 232+ 6EDA ED 52                        sbc     hl, de
 233+ 6EDC
 234+ 6EDC                              psh1
 234+ 6EDC E5          >                push    hl
 234+ 6EDD DD E9       >                jp      (ix)
 235+ 6EDF
 236+ 6EDF              //  ______________________________________________________________________
 237+ 6EDF              //
 238+ 6EDF              // =            n1 n2 -- n3
 239+ 6EDF              // equals
 240+ 6EDF                              Colon_Def EQUALS, "=", is_normal
 240+ 6EDF             >                New_Def  EQUALS, "=", Enter_Ptr, is_normal ; ok
 240+ 6EDF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 240+ 6EDF             >
 240+ 6EDF             >                // dummy db directives used to calculate length of namec
 240+ 6EDF 3D          >                db      "="
 240+ 6EE0             >len_NFA         defl    $ - temp_NFA
 240+ 6EE0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 240+ 6EDF             >
 240+ 6EDF 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 240+ 6EE0 3D          >                db      "="               // name string in 7-bit ascii, but
 240+ 6EE1             >                org     $-1                 // alter last byte of Name just above to set
 240+ 6EE0 BD          >                db      {b $} | END_BIT     // msb as name end
 240+ 6EE1             >
 240+ 6EE1 D1 6E       >                dw      last_NFA            // Link to previous definition Name
 240+ 6EE3             >EQUALS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 240+ 6EE3 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 240+ 6EE5             >                else
 240+ 6EE5 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 240+ 6EE5             >                endif           ; ok        // for other definitions it "points" the correct handler
 240+ 6EE5             >                // Use of "; ok" to suppress "warning[fwdref]"
 240+ 6EE5             >
 240+ 6EE5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 241+ 6EE5 D5 6E 81 69                  dw      SUBTRACT, ZEQUAL        // - 0=
 242+ 6EE9 23 69                        dw      EXIT                    // ;
 243+ 6EEB
 244+ 6EEB              //  ______________________________________________________________________
 245+ 6EEB              //
 246+ 6EEB              // u<           u1 u2 -- u3
 247+ 6EEB              // unsigned less-than
 248+ 6EEB                              New_Def ULESS, "U<", is_code, is_normal
 248+ 6EEB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 248+ 6EEB             >
 248+ 6EEB             >                // dummy db directives used to calculate length of namec
 248+ 6EEB 55 3C       >                db      "U<"
 248+ 6EED             >len_NFA         defl    $ - temp_NFA
 248+ 6EED             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 248+ 6EEB             >
 248+ 6EEB 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 248+ 6EEC 55 3C       >                db      "U<"               // name string in 7-bit ascii, but
 248+ 6EEE             >                org     $-1                 // alter last byte of Name just above to set
 248+ 6EED BC          >                db      {b $} | END_BIT     // msb as name end
 248+ 6EEE             >
 248+ 6EEE DF 6E       >                dw      last_NFA            // Link to previous definition Name
 248+ 6EF0             >ULESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 248+ 6EF0 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 248+ 6EF0             >                else
 248+ 6EF0 F2 6E       >                dw      $ + 2   ; ok        // is pointed by CFA
 248+ 6EF2             >                endif           ; ok        // for other definitions it "points" the correct handler
 248+ 6EF2             >                // Use of "; ok" to suppress "warning[fwdref]"
 248+ 6EF2             >
 248+ 6EF2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 249+ 6EF2 D1                           pop     de
 250+ 6EF3 E1                           pop     hl
 251+ 6EF4 A7                           and     a
 252+ 6EF5 ED 52                        sbc     hl, de
 253+ 6EF7 21 01 00                     ld      hl, 1
 254+ 6EFA 38 01                        jr      c, ULess_Skip
 255+ 6EFC 2D                               dec     l
 256+ 6EFD              ULess_Skip:
 257+ 6EFD
 258+ 6EFD                              psh1
 258+ 6EFD E5          >                push    hl
 258+ 6EFE DD E9       >                jp      (ix)
 259+ 6F00
 260+ 6F00              //  ______________________________________________________________________
 261+ 6F00              //
 262+ 6F00              // <           n1 n2 -- n3
 263+ 6F00              // less-than
 264+ 6F00                              New_Def LESS, "<", is_code, is_normal
 264+ 6F00             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 264+ 6F00             >
 264+ 6F00             >                // dummy db directives used to calculate length of namec
 264+ 6F00 3C          >                db      "<"
 264+ 6F01             >len_NFA         defl    $ - temp_NFA
 264+ 6F01             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 264+ 6F00             >
 264+ 6F00 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 264+ 6F01 3C          >                db      "<"               // name string in 7-bit ascii, but
 264+ 6F02             >                org     $-1                 // alter last byte of Name just above to set
 264+ 6F01 BC          >                db      {b $} | END_BIT     // msb as name end
 264+ 6F02             >
 264+ 6F02 EB 6E       >                dw      last_NFA            // Link to previous definition Name
 264+ 6F04             >LESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 264+ 6F04 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 264+ 6F04             >                else
 264+ 6F04 06 6F       >                dw      $ + 2   ; ok        // is pointed by CFA
 264+ 6F06             >                endif           ; ok        // for other definitions it "points" the correct handler
 264+ 6F06             >                // Use of "; ok" to suppress "warning[fwdref]"
 264+ 6F06             >
 264+ 6F06             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 265+ 6F06 D1                           pop     de
 266+ 6F07 E1                           pop     hl
 267+ 6F08 7C                           ld      a, h
 268+ 6F09 EE 80                        xor     $80
 269+ 6F0B 67                           ld      h, a
 270+ 6F0C 7A                           ld      a, d
 271+ 6F0D EE 80                        xor     $80
 272+ 6F0F 57                           ld      d, a
 273+ 6F10 A7                           and     a
 274+ 6F11 ED 52                        sbc     hl, de
 275+ 6F13 21 01 00                     ld      hl, 1
 276+ 6F16 38 01                        jr      c, Less_Skip
 277+ 6F18 2D                               dec     l
 278+ 6F19              Less_Skip:
 279+ 6F19
 280+ 6F19                              psh1
 280+ 6F19 E5          >                push    hl
 280+ 6F1A DD E9       >                jp      (ix)
 281+ 6F1C
 282+ 6F1C              //  ______________________________________________________________________
 283+ 6F1C              //
 284+ 6F1C              // >            n1 n2 -- n3
 285+ 6F1C              // greater than
 286+ 6F1C                              Colon_Def GREATER, ">", is_normal
 286+ 6F1C             >                New_Def  GREATER, ">", Enter_Ptr, is_normal ; ok
 286+ 6F1C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 286+ 6F1C             >
 286+ 6F1C             >                // dummy db directives used to calculate length of namec
 286+ 6F1C 3E          >                db      ">"
 286+ 6F1D             >len_NFA         defl    $ - temp_NFA
 286+ 6F1D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 286+ 6F1C             >
 286+ 6F1C 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 286+ 6F1D 3E          >                db      ">"               // name string in 7-bit ascii, but
 286+ 6F1E             >                org     $-1                 // alter last byte of Name just above to set
 286+ 6F1D BE          >                db      {b $} | END_BIT     // msb as name end
 286+ 6F1E             >
 286+ 6F1E 00 6F       >                dw      last_NFA            // Link to previous definition Name
 286+ 6F20             >GREATER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 286+ 6F20 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 286+ 6F22             >                else
 286+ 6F22 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 286+ 6F22             >                endif           ; ok        // for other definitions it "points" the correct handler
 286+ 6F22             >                // Use of "; ok" to suppress "warning[fwdref]"
 286+ 6F22             >
 286+ 6F22             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 287+ 6F22 A3 6A 04 6F                  dw      SWAP, LESS              // swap <
 288+ 6F26 23 69                        dw      EXIT                    // ;
 289+ 6F28              //  ______________________________________________________________________
 290+ 6F28              //
 291+ 6F28              // min          n1 n2 -- n3
 292+ 6F28              // minimum between n1 and n2
 293+ 6F28                              Colon_Def MIN, "MIN" , is_normal
 293+ 6F28             >                New_Def  MIN, "MIN", Enter_Ptr, is_normal ; ok
 293+ 6F28             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 293+ 6F28             >
 293+ 6F28             >                // dummy db directives used to calculate length of namec
 293+ 6F28 4D 49 4E    >                db      "MIN"
 293+ 6F2B             >len_NFA         defl    $ - temp_NFA
 293+ 6F2B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 293+ 6F28             >
 293+ 6F28 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 293+ 6F29 4D 49 4E    >                db      "MIN"               // name string in 7-bit ascii, but
 293+ 6F2C             >                org     $-1                 // alter last byte of Name just above to set
 293+ 6F2B CE          >                db      {b $} | END_BIT     // msb as name end
 293+ 6F2C             >
 293+ 6F2C 1C 6F       >                dw      last_NFA            // Link to previous definition Name
 293+ 6F2E             >MIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 293+ 6F2E 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 293+ 6F30             >                else
 293+ 6F30 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 293+ 6F30             >                endif           ; ok        // for other definitions it "points" the correct handler
 293+ 6F30             >                // Use of "; ok" to suppress "warning[fwdref]"
 293+ 6F30             >
 293+ 6F30             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 294+ 6F30 11 6B                        dw      TWO_DUP                 // 2dup
 295+ 6F32 20 6F                        dw      GREATER                 // >
 296+ 6F34 E3 63                        dw      ZBRANCH
 297+ 6F36 04 00                        dw      Min_Skip - $   // if
 298+ 6F38 A3 6A                        dw          SWAP                //      swap
 299+ 6F3A              Min_Skip:                                       // endif
 300+ 6F3A 7B 6A                        dw      DROP                    // drop
 301+ 6F3C 23 69                        dw      EXIT                    // ;
 302+ 6F3E
 303+ 6F3E              //  ______________________________________________________________________
 304+ 6F3E              //
 305+ 6F3E              // max          n1 n2 -- n3
 306+ 6F3E              // maximum between n1 and n2
 307+ 6F3E                              Colon_Def MAX, "MAX", is_normal
 307+ 6F3E             >                New_Def  MAX, "MAX", Enter_Ptr, is_normal ; ok
 307+ 6F3E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 307+ 6F3E             >
 307+ 6F3E             >                // dummy db directives used to calculate length of namec
 307+ 6F3E 4D 41 58    >                db      "MAX"
 307+ 6F41             >len_NFA         defl    $ - temp_NFA
 307+ 6F41             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 307+ 6F3E             >
 307+ 6F3E 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 307+ 6F3F 4D 41 58    >                db      "MAX"               // name string in 7-bit ascii, but
 307+ 6F42             >                org     $-1                 // alter last byte of Name just above to set
 307+ 6F41 D8          >                db      {b $} | END_BIT     // msb as name end
 307+ 6F42             >
 307+ 6F42 28 6F       >                dw      last_NFA            // Link to previous definition Name
 307+ 6F44             >MAX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 307+ 6F44 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 307+ 6F46             >                else
 307+ 6F46 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 307+ 6F46             >                endif           ; ok        // for other definitions it "points" the correct handler
 307+ 6F46             >                // Use of "; ok" to suppress "warning[fwdref]"
 307+ 6F46             >
 307+ 6F46             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 308+ 6F46 11 6B                        dw      TWO_DUP                 // 2dup
 309+ 6F48 04 6F                        dw      LESS                    // <
 310+ 6F4A E3 63                        dw      ZBRANCH
 311+ 6F4C 04 00                        dw      Max_Skip - $   // if
 312+ 6F4E A3 6A                        dw          SWAP                //      swap
 313+ 6F50              Max_Skip:                                       // endif
 314+ 6F50 7B 6A                        dw      DROP                    // drop
 315+ 6F52 23 69                        dw      EXIT                    // ;
 316+ 6F54
 317+ 6F54              //  ______________________________________________________________________
 318+ 6F54              //
 319+ 6F54              // ?dup         n -- 0 | n n
 320+ 6F54              // duplicate if not zero
 321+ 6F54                              New_Def QDUP, "?DUP", is_code, is_normal
 321+ 6F54             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 321+ 6F54             >
 321+ 6F54             >                // dummy db directives used to calculate length of namec
 321+ 6F54 3F 44 55 50 >                db      "?DUP"
 321+ 6F58             >len_NFA         defl    $ - temp_NFA
 321+ 6F58             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 321+ 6F54             >
 321+ 6F54 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 321+ 6F55 3F 44 55 50 >                db      "?DUP"               // name string in 7-bit ascii, but
 321+ 6F59             >                org     $-1                 // alter last byte of Name just above to set
 321+ 6F58 D0          >                db      {b $} | END_BIT     // msb as name end
 321+ 6F59             >
 321+ 6F59 3E 6F       >                dw      last_NFA            // Link to previous definition Name
 321+ 6F5B             >QDUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 321+ 6F5B ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 321+ 6F5B             >                else
 321+ 6F5B 5D 6F       >                dw      $ + 2   ; ok        // is pointed by CFA
 321+ 6F5D             >                endif           ; ok        // for other definitions it "points" the correct handler
 321+ 6F5D             >                // Use of "; ok" to suppress "warning[fwdref]"
 321+ 6F5D             >
 321+ 6F5D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 322+ 6F5D              QDup_Ptr:
 323+ 6F5D E1                           pop     hl
 324+ 6F5E 7C                           ld      a, h
 325+ 6F5F B5                           or      l
 326+ 6F60 28 01                        jr      z, QDup_Skip
 327+ 6F62 E5                               push    hl
 328+ 6F63              QDup_Skip:
 329+ 6F63                              psh1
 329+ 6F63 E5          >                push    hl
 329+ 6F64 DD E9       >                jp      (ix)
 330+ 6F66
 331+ 6F66              //  ______________________________________________________________________
 332+ 6F66              //
 333+ 6F66              // -dup         n -- 0 | n n
 334+ 6F66              // duplicate if not zero
 335+ 6F66                              New_Def LDUP, "-DUP", QDup_Ptr, is_normal
 335+ 6F66             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 335+ 6F66             >
 335+ 6F66             >                // dummy db directives used to calculate length of namec
 335+ 6F66 2D 44 55 50 >                db      "-DUP"
 335+ 6F6A             >len_NFA         defl    $ - temp_NFA
 335+ 6F6A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 335+ 6F66             >
 335+ 6F66 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 335+ 6F67 2D 44 55 50 >                db      "-DUP"               // name string in 7-bit ascii, but
 335+ 6F6B             >                org     $-1                 // alter last byte of Name just above to set
 335+ 6F6A D0          >                db      {b $} | END_BIT     // msb as name end
 335+ 6F6B             >
 335+ 6F6B 54 6F       >                dw      last_NFA            // Link to previous definition Name
 335+ 6F6D             >LDUP:          if QDup_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 335+ 6F6D 5D 6F       >                dw      QDup_Ptr ; ok        // for primitive definitions  actual code
 335+ 6F6F             >                else
 335+ 6F6F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 335+ 6F6F             >                endif           ; ok        // for other definitions it "points" the correct handler
 335+ 6F6F             >                // Use of "; ok" to suppress "warning[fwdref]"
 335+ 6F6F             >
 335+ 6F6F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 336+ 6F6F
 337+ 6F6F              //  ______________________________________________________________________
 338+ 6F6F              //
 339+ 6F6F              // emit         c --
 340+ 6F6F                              Colon_Def EMIT, "EMIT", is_normal
 340+ 6F6F             >                New_Def  EMIT, "EMIT", Enter_Ptr, is_normal ; ok
 340+ 6F6F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 340+ 6F6F             >
 340+ 6F6F             >                // dummy db directives used to calculate length of namec
 340+ 6F6F 45 4D 49 54 >                db      "EMIT"
 340+ 6F73             >len_NFA         defl    $ - temp_NFA
 340+ 6F73             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 340+ 6F6F             >
 340+ 6F6F 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 340+ 6F70 45 4D 49 54 >                db      "EMIT"               // name string in 7-bit ascii, but
 340+ 6F74             >                org     $-1                 // alter last byte of Name just above to set
 340+ 6F73 D4          >                db      {b $} | END_BIT     // msb as name end
 340+ 6F74             >
 340+ 6F74 66 6F       >                dw      last_NFA            // Link to previous definition Name
 340+ 6F76             >EMIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 340+ 6F76 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 340+ 6F78             >                else
 340+ 6F78 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 340+ 6F78             >                endif           ; ok        // for other definitions it "points" the correct handler
 340+ 6F78             >                // Use of "; ok" to suppress "warning[fwdref]"
 340+ 6F78             >
 340+ 6F78             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 341+ 6F78 1F 66                        dw      C_EMIT                      // (?emit)
 342+ 6F7A 5B 6F                        dw      QDUP                        // ?dup
 343+ 6F7C                                                                  // if
 344+ 6F7C E3 63                        dw      ZBRANCH
 345+ 6F7E 0A 00                        dw      Emit_Skip - $
 346+ 6F80 EB 65                        dw          EMITC                   //      emitc
 347+ 6F82 B7 6C                        dw          ONE                     //      1
 348+ 6F84 C0 6D 20 6B                  dw          OUT, PLUSSTORE        //      out +!
 349+ 6F88              Emit_Skip:                                          // endif
 350+ 6F88 23 69                        dw      EXIT                        // ;
 351+ 6F8A
 352+ 6F8A              //  ______________________________________________________________________
 353+ 6F8A              //
 354+ 6F8A              // space        --
 355+ 6F8A                              Colon_Def SPACE, "SPACE", is_normal
 355+ 6F8A             >                New_Def  SPACE, "SPACE", Enter_Ptr, is_normal ; ok
 355+ 6F8A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 355+ 6F8A             >
 355+ 6F8A             >                // dummy db directives used to calculate length of namec
 355+ 6F8A 53 50 41 43 >                db      "SPACE"
 355+ 6F8E 45          >
 355+ 6F8F             >len_NFA         defl    $ - temp_NFA
 355+ 6F8F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 355+ 6F8A             >
 355+ 6F8A 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 355+ 6F8B 53 50 41 43 >                db      "SPACE"               // name string in 7-bit ascii, but
 355+ 6F8F 45          >
 355+ 6F90             >                org     $-1                 // alter last byte of Name just above to set
 355+ 6F8F C5          >                db      {b $} | END_BIT     // msb as name end
 355+ 6F90             >
 355+ 6F90 6F 6F       >                dw      last_NFA            // Link to previous definition Name
 355+ 6F92             >SPACE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 355+ 6F92 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 355+ 6F94             >                else
 355+ 6F94 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 355+ 6F94             >                endif           ; ok        // for other definitions it "points" the correct handler
 355+ 6F94             >                // Use of "; ok" to suppress "warning[fwdref]"
 355+ 6F94             >
 355+ 6F94             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 356+ 6F94 D9 6C 76 6F                  dw      BL, EMIT                // bl emit
 357+ 6F98 23 69                        dw      EXIT                    // ;
 358+ 6F9A
 359+ 6F9A              //  ______________________________________________________________________
 360+ 6F9A              //
 361+ 6F9A              // traverse     a n -- a
 362+ 6F9A              // A dictionary entry is structured as follows
 363+ 6F9A              // NFA: +0   one byte of word-length (n<32) | some flags (immediate, smudge) | $80
 364+ 6F9A              //      +1   word name, last character is toggled with $80
 365+ 6F9A              // LFA: +1+n link to NFA ofprevious  dictionary entry.
 366+ 6F9A              // CFA: +3+n routine address. Colon definitions here have pointer to code
 367+ 6F9A              // PFA: +5+n "is_code", definitions have no PFA.
 368+ 6F9A              //
 369+ 6F9A                              Colon_Def TRAVERSE, "TRAVERSE", is_normal
 369+ 6F9A             >                New_Def  TRAVERSE, "TRAVERSE", Enter_Ptr, is_normal ; ok
 369+ 6F9A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 369+ 6F9A             >
 369+ 6F9A             >                // dummy db directives used to calculate length of namec
 369+ 6F9A 54 52 41 56 >                db      "TRAVERSE"
 369+ 6F9E 45 52 53 45 >
 369+ 6FA2             >len_NFA         defl    $ - temp_NFA
 369+ 6FA2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 369+ 6F9A             >
 369+ 6F9A 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 369+ 6F9B 54 52 41 56 >                db      "TRAVERSE"               // name string in 7-bit ascii, but
 369+ 6F9F 45 52 53 45 >
 369+ 6FA3             >                org     $-1                 // alter last byte of Name just above to set
 369+ 6FA2 C5          >                db      {b $} | END_BIT     // msb as name end
 369+ 6FA3             >
 369+ 6FA3 8A 6F       >                dw      last_NFA            // Link to previous definition Name
 369+ 6FA5             >TRAVERSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 369+ 6FA5 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 369+ 6FA7             >                else
 369+ 6FA7 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 369+ 6FA7             >                endif           ; ok        // for other definitions it "points" the correct handler
 369+ 6FA7             >                // Use of "; ok" to suppress "warning[fwdref]"
 369+ 6FA7             >
 369+ 6FA7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 370+ 6FA7 A3 6A                        dw      SWAP                    // swap
 371+ 6FA9              Traverse_Begin:                                 // begin
 372+ 6FA9 6B 6A C4 69                  dw          OVER, PLUS          //      over +
 373+ 6FAD A9 63 7F 00                  dw          LIT, 127            //      127
 374+ 6FB1 6B 6A 5E 6B                  dw          OVER, CFETCH        //      over @
 375+ 6FB5 04 6F                        dw          LESS                //      <
 376+ 6FB7                                                              // until
 377+ 6FB7 E3 63                        dw      ZBRANCH
 378+ 6FB9 F0 FF                        dw      Traverse_Begin - $
 379+ 6FBB 86 6A                        dw      NIP                     //  nip
 380+ 6FBD 23 69                        dw      EXIT                    //  ;
 381+ 6FBF
 382+ 6FBF              //  ______________________________________________________________________
 383+ 6FBF              //
 384+ 6FBF              // latest       -- nfa
 385+ 6FBF                              Colon_Def LATEST, "LATEST", is_normal
 385+ 6FBF             >                New_Def  LATEST, "LATEST", Enter_Ptr, is_normal ; ok
 385+ 6FBF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 385+ 6FBF             >
 385+ 6FBF             >                // dummy db directives used to calculate length of namec
 385+ 6FBF 4C 41 54 45 >                db      "LATEST"
 385+ 6FC3 53 54       >
 385+ 6FC5             >len_NFA         defl    $ - temp_NFA
 385+ 6FC5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 385+ 6FBF             >
 385+ 6FBF 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 385+ 6FC0 4C 41 54 45 >                db      "LATEST"               // name string in 7-bit ascii, but
 385+ 6FC4 53 54       >
 385+ 6FC6             >                org     $-1                 // alter last byte of Name just above to set
 385+ 6FC5 D4          >                db      {b $} | END_BIT     // msb as name end
 385+ 6FC6             >
 385+ 6FC6 9A 6F       >                dw      last_NFA            // Link to previous definition Name
 385+ 6FC8             >LATEST:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 385+ 6FC8 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 385+ 6FCA             >                else
 385+ 6FCA ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 385+ 6FCA             >                endif           ; ok        // for other definitions it "points" the correct handler
 385+ 6FCA             >                // Use of "; ok" to suppress "warning[fwdref]"
 385+ 6FCA             >
 385+ 6FCA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 386+ 6FCA EF 6D                        dw      CURRENT                 // current
 387+ 6FCC 43 6B 43 6B                  dw      FETCH, FETCH            // @ @
 388+ 6FD0 23 69                        dw      EXIT                    // ;
 389+ 6FD2
 390+ 6FD2              //  ______________________________________________________________________
 391+ 6FD2              //
 392+ 6FD2              // lfa          pfa -- lfa
 393+ 6FD2                              Colon_Def LFA, "LFA", is_normal
 393+ 6FD2             >                New_Def  LFA, "LFA", Enter_Ptr, is_normal ; ok
 393+ 6FD2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 393+ 6FD2             >
 393+ 6FD2             >                // dummy db directives used to calculate length of namec
 393+ 6FD2 4C 46 41    >                db      "LFA"
 393+ 6FD5             >len_NFA         defl    $ - temp_NFA
 393+ 6FD5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 393+ 6FD2             >
 393+ 6FD2 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 393+ 6FD3 4C 46 41    >                db      "LFA"               // name string in 7-bit ascii, but
 393+ 6FD6             >                org     $-1                 // alter last byte of Name just above to set
 393+ 6FD5 C1          >                db      {b $} | END_BIT     // msb as name end
 393+ 6FD6             >
 393+ 6FD6 BF 6F       >                dw      last_NFA            // Link to previous definition Name
 393+ 6FD8             >LFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 393+ 6FD8 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 393+ 6FDA             >                else
 393+ 6FDA ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 393+ 6FDA             >                endif           ; ok        // for other definitions it "points" the correct handler
 393+ 6FDA             >                // Use of "; ok" to suppress "warning[fwdref]"
 393+ 6FDA             >
 393+ 6FDA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 394+ 6FDA 1F 6A                        dw      CELL_MINUS              // cell-
 395+ 6FDC 1F 6A                        dw      CELL_MINUS              // cell-
 396+ 6FDE 23 69                        dw      EXIT                    // ;
 397+ 6FE0
 398+ 6FE0              //  ______________________________________________________________________
 399+ 6FE0              //
 400+ 6FE0              // cfa          pfa -- cfa
 401+ 6FE0                              Colon_Def CFA, "CFA", is_normal
 401+ 6FE0             >                New_Def  CFA, "CFA", Enter_Ptr, is_normal ; ok
 401+ 6FE0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 401+ 6FE0             >
 401+ 6FE0             >                // dummy db directives used to calculate length of namec
 401+ 6FE0 43 46 41    >                db      "CFA"
 401+ 6FE3             >len_NFA         defl    $ - temp_NFA
 401+ 6FE3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 401+ 6FE0             >
 401+ 6FE0 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 401+ 6FE1 43 46 41    >                db      "CFA"               // name string in 7-bit ascii, but
 401+ 6FE4             >                org     $-1                 // alter last byte of Name just above to set
 401+ 6FE3 C1          >                db      {b $} | END_BIT     // msb as name end
 401+ 6FE4             >
 401+ 6FE4 D2 6F       >                dw      last_NFA            // Link to previous definition Name
 401+ 6FE6             >CFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 401+ 6FE6 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 401+ 6FE8             >                else
 401+ 6FE8 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 401+ 6FE8             >                endif           ; ok        // for other definitions it "points" the correct handler
 401+ 6FE8             >                // Use of "; ok" to suppress "warning[fwdref]"
 401+ 6FE8             >
 401+ 6FE8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 402+ 6FE8 1F 6A                        dw      CELL_MINUS              // cell-
 403+ 6FEA 23 69                        dw      EXIT                    // ;
 404+ 6FEC
 405+ 6FEC              //  ______________________________________________________________________
 406+ 6FEC              //
 407+ 6FEC              // nfa          pfa -- nfa
 408+ 6FEC                              Colon_Def NFA, "NFA", is_normal
 408+ 6FEC             >                New_Def  NFA, "NFA", Enter_Ptr, is_normal ; ok
 408+ 6FEC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 408+ 6FEC             >
 408+ 6FEC             >                // dummy db directives used to calculate length of namec
 408+ 6FEC 4E 46 41    >                db      "NFA"
 408+ 6FEF             >len_NFA         defl    $ - temp_NFA
 408+ 6FEF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 408+ 6FEC             >
 408+ 6FEC 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 408+ 6FED 4E 46 41    >                db      "NFA"               // name string in 7-bit ascii, but
 408+ 6FF0             >                org     $-1                 // alter last byte of Name just above to set
 408+ 6FEF C1          >                db      {b $} | END_BIT     // msb as name end
 408+ 6FF0             >
 408+ 6FF0 E0 6F       >                dw      last_NFA            // Link to previous definition Name
 408+ 6FF2             >NFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 408+ 6FF2 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 408+ 6FF4             >                else
 408+ 6FF4 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 408+ 6FF4             >                endif           ; ok        // for other definitions it "points" the correct handler
 408+ 6FF4             >                // Use of "; ok" to suppress "warning[fwdref]"
 408+ 6FF4             >
 408+ 6FF4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 409+ 6FF4 A9 63 05 00                  dw      LIT, 5                  // 5
 410+ 6FF8 D5 6E                        dw      SUBTRACT                // -
 411+ 6FFA D0 6C                        dw      NEG_ONE                 // -1
 412+ 6FFC A5 6F                        dw      TRAVERSE                // traverse
 413+ 6FFE 23 69                        dw      EXIT                    // ;
 414+ 7000
 415+ 7000              //  ______________________________________________________________________
 416+ 7000              //
 417+ 7000              // pfa          nfa -- pfa
 418+ 7000                              Colon_Def PFA, "PFA", is_normal
 418+ 7000             >                New_Def  PFA, "PFA", Enter_Ptr, is_normal ; ok
 418+ 7000             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 418+ 7000             >
 418+ 7000             >                // dummy db directives used to calculate length of namec
 418+ 7000 50 46 41    >                db      "PFA"
 418+ 7003             >len_NFA         defl    $ - temp_NFA
 418+ 7003             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 418+ 7000             >
 418+ 7000 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 418+ 7001 50 46 41    >                db      "PFA"               // name string in 7-bit ascii, but
 418+ 7004             >                org     $-1                 // alter last byte of Name just above to set
 418+ 7003 C1          >                db      {b $} | END_BIT     // msb as name end
 418+ 7004             >
 418+ 7004 EC 6F       >                dw      last_NFA            // Link to previous definition Name
 418+ 7006             >PFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 418+ 7006 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 418+ 7008             >                else
 418+ 7008 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 418+ 7008             >                endif           ; ok        // for other definitions it "points" the correct handler
 418+ 7008             >                // Use of "; ok" to suppress "warning[fwdref]"
 418+ 7008             >
 418+ 7008             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 419+ 7008 B7 6C                        dw      ONE                     // 1
 420+ 700A A5 6F                        dw      TRAVERSE                // traverse
 421+ 700C A9 63 05 00                  dw      LIT, 5                  // 6
 422+ 7010 C4 69                        dw      PLUS                    // +
 423+ 7012 23 69                        dw      EXIT                    // ;
 424+ 7014
 425+ 7014              //  ______________________________________________________________________
 426+ 7014              //
 427+ 7014              // >body        cfa -- pfa
 428+ 7014                              Colon_Def TO_BODY, ">BODY", is_normal
 428+ 7014             >                New_Def  TO_BODY, ">BODY", Enter_Ptr, is_normal ; ok
 428+ 7014             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 428+ 7014             >
 428+ 7014             >                // dummy db directives used to calculate length of namec
 428+ 7014 3E 42 4F 44 >                db      ">BODY"
 428+ 7018 59          >
 428+ 7019             >len_NFA         defl    $ - temp_NFA
 428+ 7019             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 428+ 7014             >
 428+ 7014 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 428+ 7015 3E 42 4F 44 >                db      ">BODY"               // name string in 7-bit ascii, but
 428+ 7019 59          >
 428+ 701A             >                org     $-1                 // alter last byte of Name just above to set
 428+ 7019 D9          >                db      {b $} | END_BIT     // msb as name end
 428+ 701A             >
 428+ 701A 00 70       >                dw      last_NFA            // Link to previous definition Name
 428+ 701C             >TO_BODY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 428+ 701C 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 428+ 701E             >                else
 428+ 701E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 428+ 701E             >                endif           ; ok        // for other definitions it "points" the correct handler
 428+ 701E             >                // Use of "; ok" to suppress "warning[fwdref]"
 428+ 701E             >
 428+ 701E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 429+ 701E 15 6A                        dw      CELL_PLUS               // cell+
 430+ 7020 23 69                        dw      EXIT                    // ;
 431+ 7022
 432+ 7022              //  ______________________________________________________________________
 433+ 7022              //
 434+ 7022              // <name        cfa -- nfa
 435+ 7022                              Colon_Def TO_NAME, "<NAME", is_normal
 435+ 7022             >                New_Def  TO_NAME, "<NAME", Enter_Ptr, is_normal ; ok
 435+ 7022             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 435+ 7022             >
 435+ 7022             >                // dummy db directives used to calculate length of namec
 435+ 7022 3C 4E 41 4D >                db      "<NAME"
 435+ 7026 45          >
 435+ 7027             >len_NFA         defl    $ - temp_NFA
 435+ 7027             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 435+ 7022             >
 435+ 7022 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 435+ 7023 3C 4E 41 4D >                db      "<NAME"               // name string in 7-bit ascii, but
 435+ 7027 45          >
 435+ 7028             >                org     $-1                 // alter last byte of Name just above to set
 435+ 7027 C5          >                db      {b $} | END_BIT     // msb as name end
 435+ 7028             >
 435+ 7028 14 70       >                dw      last_NFA            // Link to previous definition Name
 435+ 702A             >TO_NAME:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 435+ 702A 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 435+ 702C             >                else
 435+ 702C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 435+ 702C             >                endif           ; ok        // for other definitions it "points" the correct handler
 435+ 702C             >                // Use of "; ok" to suppress "warning[fwdref]"
 435+ 702C             >
 435+ 702C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 436+ 702C 1C 70                        dw      TO_BODY                 // >body
 437+ 702E F2 6F                        dw      NFA                     // nfa
 438+ 7030 23 69                        dw      EXIT                    // ;
 439+ 7032
 440+ 7032              //  ______________________________________________________________________
 441+ 7032              //
 442+ 7032              // !csp         --
 443+ 7032              // store in user variable CSP current value of SP. Used at compile-time for syntax checkng
 444+ 7032                              Colon_Def STORE_CSP, "!CSP", is_normal
 444+ 7032             >                New_Def  STORE_CSP, "!CSP", Enter_Ptr, is_normal ; ok
 444+ 7032             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 444+ 7032             >
 444+ 7032             >                // dummy db directives used to calculate length of namec
 444+ 7032 21 43 53 50 >                db      "!CSP"
 444+ 7036             >len_NFA         defl    $ - temp_NFA
 444+ 7036             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 444+ 7032             >
 444+ 7032 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 444+ 7033 21 43 53 50 >                db      "!CSP"               // name string in 7-bit ascii, but
 444+ 7037             >                org     $-1                 // alter last byte of Name just above to set
 444+ 7036 D0          >                db      {b $} | END_BIT     // msb as name end
 444+ 7037             >
 444+ 7037 22 70       >                dw      last_NFA            // Link to previous definition Name
 444+ 7039             >STORE_CSP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 444+ 7039 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 444+ 703B             >                else
 444+ 703B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 444+ 703B             >                endif           ; ok        // for other definitions it "points" the correct handler
 444+ 703B             >                // Use of "; ok" to suppress "warning[fwdref]"
 444+ 703B             >
 444+ 703B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 445+ 703B ED 68                        dw      SPFETCH                 // sp@
 446+ 703D 1F 6E 50 6B                  dw      CSP, STORE              // csp !
 447+ 7041 23 69                        dw      EXIT                    // ;
 448+ 7043
 449+ 7043              //  ______________________________________________________________________
 450+ 7043              //
 451+ 7043              // ?error       f n --
 452+ 7043              // rase error n if flag f it true
 453+ 7043                              Colon_Def QERROR, "?ERROR", is_normal
 453+ 7043             >                New_Def  QERROR, "?ERROR", Enter_Ptr, is_normal ; ok
 453+ 7043             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 453+ 7043             >
 453+ 7043             >                // dummy db directives used to calculate length of namec
 453+ 7043 3F 45 52 52 >                db      "?ERROR"
 453+ 7047 4F 52       >
 453+ 7049             >len_NFA         defl    $ - temp_NFA
 453+ 7049             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 453+ 7043             >
 453+ 7043 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 453+ 7044 3F 45 52 52 >                db      "?ERROR"               // name string in 7-bit ascii, but
 453+ 7048 4F 52       >
 453+ 704A             >                org     $-1                 // alter last byte of Name just above to set
 453+ 7049 D2          >                db      {b $} | END_BIT     // msb as name end
 453+ 704A             >
 453+ 704A 32 70       >                dw      last_NFA            // Link to previous definition Name
 453+ 704C             >QERROR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 453+ 704C 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 453+ 704E             >                else
 453+ 704E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 453+ 704E             >                endif           ; ok        // for other definitions it "points" the correct handler
 453+ 704E             >                // Use of "; ok" to suppress "warning[fwdref]"
 453+ 704E             >
 453+ 704E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 454+ 704E A3 6A                        dw      SWAP                    // swap
 455+ 7050                                                              // if
 456+ 7050 E3 63                        dw      ZBRANCH
 457+ 7052 08 00                        dw      QError_Else - $
 458+ 7054 62 75                        dw          ERROR               //      error  ( is a forward-ref )
 459+ 7056                                                              // else
 460+ 7056 CC 63                        dw      BRANCH
 461+ 7058 04 00                        dw      QError_Endif - $
 462+ 705A              QError_Else:
 463+ 705A 7B 6A                        dw          DROP                //      drop
 464+ 705C              QError_Endif:                                   // endif
 465+ 705C 23 69                        dw      EXIT                    // ;
 466+ 705E
 467+ 705E              //  ______________________________________________________________________
 468+ 705E              //
 469+ 705E              // ?comp       --
 470+ 705E              // raise msg #17 if not compiling
 471+ 705E                              Colon_Def QCOMP, "?COMP", is_normal
 471+ 705E             >                New_Def  QCOMP, "?COMP", Enter_Ptr, is_normal ; ok
 471+ 705E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 471+ 705E             >
 471+ 705E             >                // dummy db directives used to calculate length of namec
 471+ 705E 3F 43 4F 4D >                db      "?COMP"
 471+ 7062 50          >
 471+ 7063             >len_NFA         defl    $ - temp_NFA
 471+ 7063             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 471+ 705E             >
 471+ 705E 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 471+ 705F 3F 43 4F 4D >                db      "?COMP"               // name string in 7-bit ascii, but
 471+ 7063 50          >
 471+ 7064             >                org     $-1                 // alter last byte of Name just above to set
 471+ 7063 D0          >                db      {b $} | END_BIT     // msb as name end
 471+ 7064             >
 471+ 7064 43 70       >                dw      last_NFA            // Link to previous definition Name
 471+ 7066             >QCOMP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 471+ 7066 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 471+ 7068             >                else
 471+ 7068 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 471+ 7068             >                endif           ; ok        // for other definitions it "points" the correct handler
 471+ 7068             >                // Use of "; ok" to suppress "warning[fwdref]"
 471+ 7068             >
 471+ 7068             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 472+ 7068 FA 6D 43 6B                  dw      STATE, FETCH            // state @
 473+ 706C 81 69                        dw      ZEQUAL                  // 0=
 474+ 706E A9 63 11 00                  dw      LIT, 17                 // 17  ( can't be executed )
 475+ 7072 4C 70                        dw      QERROR                  // ?error
 476+ 7074 23 69                        dw      EXIT                    // ;
 477+ 7076
 478+ 7076              //  ______________________________________________________________________
 479+ 7076              //
 480+ 7076              // ?exec       --
 481+ 7076              // raise msg #18 if compiling
 482+ 7076                              Colon_Def QEXEC, "?EXEC", is_normal
 482+ 7076             >                New_Def  QEXEC, "?EXEC", Enter_Ptr, is_normal ; ok
 482+ 7076             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 482+ 7076             >
 482+ 7076             >                // dummy db directives used to calculate length of namec
 482+ 7076 3F 45 58 45 >                db      "?EXEC"
 482+ 707A 43          >
 482+ 707B             >len_NFA         defl    $ - temp_NFA
 482+ 707B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 482+ 7076             >
 482+ 7076 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 482+ 7077 3F 45 58 45 >                db      "?EXEC"               // name string in 7-bit ascii, but
 482+ 707B 43          >
 482+ 707C             >                org     $-1                 // alter last byte of Name just above to set
 482+ 707B C3          >                db      {b $} | END_BIT     // msb as name end
 482+ 707C             >
 482+ 707C 5E 70       >                dw      last_NFA            // Link to previous definition Name
 482+ 707E             >QEXEC:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 482+ 707E 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 482+ 7080             >                else
 482+ 7080 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 482+ 7080             >                endif           ; ok        // for other definitions it "points" the correct handler
 482+ 7080             >                // Use of "; ok" to suppress "warning[fwdref]"
 482+ 7080             >
 482+ 7080             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 483+ 7080 FA 6D 43 6B                  dw      STATE, FETCH            // state @
 484+ 7084 A9 63 12 00                  dw      LIT, 18                 // 18  ( can't be compiled )
 485+ 7088 4C 70                        dw      QERROR                  // ?error
 486+ 708A 23 69                        dw      EXIT                    // ;
 487+ 708C
 488+ 708C              //  ______________________________________________________________________
 489+ 708C              //
 490+ 708C              // ?pairs       n1 n2 --
 491+ 708C              // raise msg #19 if n1 != n2. Compiler pushes some placeholder to stack for syntax checking
 492+ 708C                              Colon_Def QPAIRS, "?PAIRS", is_normal
 492+ 708C             >                New_Def  QPAIRS, "?PAIRS", Enter_Ptr, is_normal ; ok
 492+ 708C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 492+ 708C             >
 492+ 708C             >                // dummy db directives used to calculate length of namec
 492+ 708C 3F 50 41 49 >                db      "?PAIRS"
 492+ 7090 52 53       >
 492+ 7092             >len_NFA         defl    $ - temp_NFA
 492+ 7092             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 492+ 708C             >
 492+ 708C 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 492+ 708D 3F 50 41 49 >                db      "?PAIRS"               // name string in 7-bit ascii, but
 492+ 7091 52 53       >
 492+ 7093             >                org     $-1                 // alter last byte of Name just above to set
 492+ 7092 D3          >                db      {b $} | END_BIT     // msb as name end
 492+ 7093             >
 492+ 7093 76 70       >                dw      last_NFA            // Link to previous definition Name
 492+ 7095             >QPAIRS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 492+ 7095 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 492+ 7097             >                else
 492+ 7097 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 492+ 7097             >                endif           ; ok        // for other definitions it "points" the correct handler
 492+ 7097             >                // Use of "; ok" to suppress "warning[fwdref]"
 492+ 7097             >
 492+ 7097             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 493+ 7097 D5 6E                        dw      SUBTRACT                // -
 494+ 7099 A9 63 13 00                  dw      LIT, 19                 // 18  ( syntax error )
 495+ 709D 4C 70                        dw      QERROR                  // ?error
 496+ 709F 23 69                        dw      EXIT                    // ;
 497+ 70A1
 498+ 70A1              //  ______________________________________________________________________
 499+ 70A1              //
 500+ 70A1              // ?csp       --
 501+ 70A1              // raise msg #20 if surrent SP in not what previously saved in CSP.
 502+ 70A1              // Compiler relies on that for  syntax checking of structures
 503+ 70A1                              Colon_Def QCSP, "?CSP", is_normal
 503+ 70A1             >                New_Def  QCSP, "?CSP", Enter_Ptr, is_normal ; ok
 503+ 70A1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 503+ 70A1             >
 503+ 70A1             >                // dummy db directives used to calculate length of namec
 503+ 70A1 3F 43 53 50 >                db      "?CSP"
 503+ 70A5             >len_NFA         defl    $ - temp_NFA
 503+ 70A5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 503+ 70A1             >
 503+ 70A1 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 503+ 70A2 3F 43 53 50 >                db      "?CSP"               // name string in 7-bit ascii, but
 503+ 70A6             >                org     $-1                 // alter last byte of Name just above to set
 503+ 70A5 D0          >                db      {b $} | END_BIT     // msb as name end
 503+ 70A6             >
 503+ 70A6 8C 70       >                dw      last_NFA            // Link to previous definition Name
 503+ 70A8             >QCSP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 503+ 70A8 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 503+ 70AA             >                else
 503+ 70AA ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 503+ 70AA             >                endif           ; ok        // for other definitions it "points" the correct handler
 503+ 70AA             >                // Use of "; ok" to suppress "warning[fwdref]"
 503+ 70AA             >
 503+ 70AA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 504+ 70AA ED 68                        dw      SPFETCH                 // sp@
 505+ 70AC 1F 6E 43 6B                  dw      CSP, FETCH              // csp @
 506+ 70B0 D5 6E                        dw      SUBTRACT                // -
 507+ 70B2 A9 63 14 00                  dw      LIT, 20                 // 20  ( bad definition end )
 508+ 70B6 4C 70                        dw      QERROR                  // ?error
 509+ 70B8 23 69                        dw      EXIT                    // ;
 510+ 70BA
 511+ 70BA              //  ______________________________________________________________________
 512+ 70BA              //
 513+ 70BA              // ?loading      --
 514+ 70BA              // raise msg #22 if not loading
 515+ 70BA                              Colon_Def QLOADING, "?LOADING", is_normal
 515+ 70BA             >                New_Def  QLOADING, "?LOADING", Enter_Ptr, is_normal ; ok
 515+ 70BA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 515+ 70BA             >
 515+ 70BA             >                // dummy db directives used to calculate length of namec
 515+ 70BA 3F 4C 4F 41 >                db      "?LOADING"
 515+ 70BE 44 49 4E 47 >
 515+ 70C2             >len_NFA         defl    $ - temp_NFA
 515+ 70C2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 515+ 70BA             >
 515+ 70BA 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 515+ 70BB 3F 4C 4F 41 >                db      "?LOADING"               // name string in 7-bit ascii, but
 515+ 70BF 44 49 4E 47 >
 515+ 70C3             >                org     $-1                 // alter last byte of Name just above to set
 515+ 70C2 C7          >                db      {b $} | END_BIT     // msb as name end
 515+ 70C3             >
 515+ 70C3 A1 70       >                dw      last_NFA            // Link to previous definition Name
 515+ 70C5             >QLOADING:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 515+ 70C5 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 515+ 70C7             >                else
 515+ 70C7 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 515+ 70C7             >                endif           ; ok        // for other definitions it "points" the correct handler
 515+ 70C7             >                // Use of "; ok" to suppress "warning[fwdref]"
 515+ 70C7             >
 515+ 70C7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 516+ 70C7 AE 6D 43 6B                  dw      BLK, FETCH              // blk @
 517+ 70CB 81 69                        dw      ZEQUAL                  // 0=
 518+ 70CD A9 63 16 00                  dw      LIT, 22                 // 22  ( aren't loading now )
 519+ 70D1 4C 70                        dw      QERROR                  // ?error
 520+ 70D3 23 69                        dw      EXIT                    // ;
 521+ 70D5
 522+ 70D5              //  ______________________________________________________________________
 523+ 70D5              //
 524+ 70D5              // compile      --
 525+ 70D5              // compiles the following word
 526+ 70D5                              Colon_Def COMPILE, "COMPILE", is_normal
 526+ 70D5             >                New_Def  COMPILE, "COMPILE", Enter_Ptr, is_normal ; ok
 526+ 70D5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 526+ 70D5             >
 526+ 70D5             >                // dummy db directives used to calculate length of namec
 526+ 70D5 43 4F 4D 50 >                db      "COMPILE"
 526+ 70D9 49 4C 45    >
 526+ 70DC             >len_NFA         defl    $ - temp_NFA
 526+ 70DC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 526+ 70D5             >
 526+ 70D5 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 526+ 70D6 43 4F 4D 50 >                db      "COMPILE"               // name string in 7-bit ascii, but
 526+ 70DA 49 4C 45    >
 526+ 70DD             >                org     $-1                 // alter last byte of Name just above to set
 526+ 70DC C5          >                db      {b $} | END_BIT     // msb as name end
 526+ 70DD             >
 526+ 70DD BA 70       >                dw      last_NFA            // Link to previous definition Name
 526+ 70DF             >COMPILE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 526+ 70DF 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 526+ 70E1             >                else
 526+ 70E1 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 526+ 70E1             >                endif           ; ok        // for other definitions it "points" the correct handler
 526+ 70E1             >                // Use of "; ok" to suppress "warning[fwdref]"
 526+ 70E1             >
 526+ 70E1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 527+ 70E1 66 70                        dw      QCOMP                   // ?comp
 528+ 70E3 60 69                        dw      R_TO                    // r>
 529+ 70E5 B0 6A 15 6A                  dw      DUP, CELL_PLUS          // dup, cell+
 530+ 70E9 4C 69                        dw      TO_R                    // >r
 531+ 70EB 43 6B 9D 6E                  dw      FETCH, COMMA            // @ ,
 532+ 70EF 23 69                        dw      EXIT                    // ;
 533+ 70F1
 534+ 70F1              //  ______________________________________________________________________
 535+ 70F1              //
 536+ 70F1              // compile,     --
 537+ 70F1              // compiles the following word
 538+ 70F1                              Colon_Def COMPILE_XT, "COMPILE,", is_normal
 538+ 70F1             >                New_Def  COMPILE_XT, "COMPILE,", Enter_Ptr, is_normal ; ok
 538+ 70F1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 538+ 70F1             >
 538+ 70F1             >                // dummy db directives used to calculate length of namec
 538+ 70F1 43 4F 4D 50 >                db      "COMPILE,"
 538+ 70F5 49 4C 45 2C >
 538+ 70F9             >len_NFA         defl    $ - temp_NFA
 538+ 70F9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 538+ 70F1             >
 538+ 70F1 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 538+ 70F2 43 4F 4D 50 >                db      "COMPILE,"               // name string in 7-bit ascii, but
 538+ 70F6 49 4C 45 2C >
 538+ 70FA             >                org     $-1                 // alter last byte of Name just above to set
 538+ 70F9 AC          >                db      {b $} | END_BIT     // msb as name end
 538+ 70FA             >
 538+ 70FA D5 70       >                dw      last_NFA            // Link to previous definition Name
 538+ 70FC             >COMPILE_XT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 538+ 70FC 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 538+ 70FE             >                else
 538+ 70FE ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 538+ 70FE             >                endif           ; ok        // for other definitions it "points" the correct handler
 538+ 70FE             >                // Use of "; ok" to suppress "warning[fwdref]"
 538+ 70FE             >
 538+ 70FE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 539+ 70FE 66 70                        dw      QCOMP                   // ?comp
 540+ 7100 9D 6E                        dw      COMMA                   // ,
 541+ 7102 23 69                        dw      EXIT                    // ;
 542+ 7104
 543+ 7104              //  ______________________________________________________________________
 544+ 7104              //
 545+ 7104              // [            --
 546+ 7104              // stop compilation
 547+ 7104                              Colon_Def SQUARED_OPEN, "[", is_immediate
 547+ 7104             >                New_Def  SQUARED_OPEN, "[", Enter_Ptr, is_immediate ; ok
 547+ 7104             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 547+ 7104             >
 547+ 7104             >                // dummy db directives used to calculate length of namec
 547+ 7104 5B          >                db      "["
 547+ 7105             >len_NFA         defl    $ - temp_NFA
 547+ 7105             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 547+ 7104             >
 547+ 7104 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 547+ 7105 5B          >                db      "["               // name string in 7-bit ascii, but
 547+ 7106             >                org     $-1                 // alter last byte of Name just above to set
 547+ 7105 DB          >                db      {b $} | END_BIT     // msb as name end
 547+ 7106             >
 547+ 7106 F1 70       >                dw      last_NFA            // Link to previous definition Name
 547+ 7108             >SQUARED_OPEN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 547+ 7108 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 547+ 710A             >                else
 547+ 710A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 547+ 710A             >                endif           ; ok        // for other definitions it "points" the correct handler
 547+ 710A             >                // Use of "; ok" to suppress "warning[fwdref]"
 547+ 710A             >
 547+ 710A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 548+ 710A AF 6C                        dw      ZERO                    // 0
 549+ 710C FA 6D 50 6B                  dw      STATE, STORE            // state !
 550+ 7110 23 69                        dw      EXIT                    // ; immediate
 551+ 7112
 552+ 7112              //  ______________________________________________________________________
 553+ 7112              //
 554+ 7112              // ]            --
 555+ 7112              // start compilation
 556+ 7112                              Colon_Def SQUARED_CLOSE, "]", is_normal
 556+ 7112             >                New_Def  SQUARED_CLOSE, "]", Enter_Ptr, is_normal ; ok
 556+ 7112             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 556+ 7112             >
 556+ 7112             >                // dummy db directives used to calculate length of namec
 556+ 7112 5D          >                db      "]"
 556+ 7113             >len_NFA         defl    $ - temp_NFA
 556+ 7113             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 556+ 7112             >
 556+ 7112 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 556+ 7113 5D          >                db      "]"               // name string in 7-bit ascii, but
 556+ 7114             >                org     $-1                 // alter last byte of Name just above to set
 556+ 7113 DD          >                db      {b $} | END_BIT     // msb as name end
 556+ 7114             >
 556+ 7114 04 71       >                dw      last_NFA            // Link to previous definition Name
 556+ 7116             >SQUARED_CLOSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 556+ 7116 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 556+ 7118             >                else
 556+ 7118 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 556+ 7118             >                endif           ; ok        // for other definitions it "points" the correct handler
 556+ 7118             >                // Use of "; ok" to suppress "warning[fwdref]"
 556+ 7118             >
 556+ 7118             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 557+ 7118 A9 63 C0 00                  dw      LIT, $C0                // 192
 558+ 711C FA 6D 50 6B                  dw      STATE, STORE            // state !
 559+ 7120 23 69                        dw      EXIT                    // ;
 560+ 7122
 561+ 7122              //  ______________________________________________________________________
 562+ 7122              //
 563+ 7122              // smudge       --
 564+ 7122              // toggle smudge bit of latest definition
 565+ 7122                              Colon_Def SMUDGE, "SMUDGE", is_normal
 565+ 7122             >                New_Def  SMUDGE, "SMUDGE", Enter_Ptr, is_normal ; ok
 565+ 7122             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 565+ 7122             >
 565+ 7122             >                // dummy db directives used to calculate length of namec
 565+ 7122 53 4D 55 44 >                db      "SMUDGE"
 565+ 7126 47 45       >
 565+ 7128             >len_NFA         defl    $ - temp_NFA
 565+ 7128             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 565+ 7122             >
 565+ 7122 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 565+ 7123 53 4D 55 44 >                db      "SMUDGE"               // name string in 7-bit ascii, but
 565+ 7127 47 45       >
 565+ 7129             >                org     $-1                 // alter last byte of Name just above to set
 565+ 7128 C5          >                db      {b $} | END_BIT     // msb as name end
 565+ 7129             >
 565+ 7129 12 71       >                dw      last_NFA            // Link to previous definition Name
 565+ 712B             >SMUDGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 565+ 712B 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 565+ 712D             >                else
 565+ 712D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 565+ 712D             >                endif           ; ok        // for other definitions it "points" the correct handler
 565+ 712D             >                // Use of "; ok" to suppress "warning[fwdref]"
 565+ 712D             >
 565+ 712D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 566+ 712D C8 6F                        dw      LATEST                  // latest
 567+ 712F A9 63 20 00                  dw      LIT, SMUDGE_BIT         // 32
 568+ 7133 36 6B                        dw      TOGGLE                  // toggle
 569+ 7135 23 69                        dw      EXIT                    // ;
 570+ 7137
 571+ 7137              //  ______________________________________________________________________
 572+ 7137              //
 573+ 7137              // immediate    --
 574+ 7137              // make immediate the latest definition
 575+ 7137                              Colon_Def IMMEDIATE, "IMMEDIATE", is_normal
 575+ 7137             >                New_Def  IMMEDIATE, "IMMEDIATE", Enter_Ptr, is_normal ; ok
 575+ 7137             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 575+ 7137             >
 575+ 7137             >                // dummy db directives used to calculate length of namec
 575+ 7137 49 4D 4D 45 >                db      "IMMEDIATE"
 575+ 713B 44 49 41 54 >
 575+ 713F 45          >
 575+ 7140             >len_NFA         defl    $ - temp_NFA
 575+ 7140             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 575+ 7137             >
 575+ 7137 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 575+ 7138 49 4D 4D 45 >                db      "IMMEDIATE"               // name string in 7-bit ascii, but
 575+ 713C 44 49 41 54 >
 575+ 7140 45          >
 575+ 7141             >                org     $-1                 // alter last byte of Name just above to set
 575+ 7140 C5          >                db      {b $} | END_BIT     // msb as name end
 575+ 7141             >
 575+ 7141 22 71       >                dw      last_NFA            // Link to previous definition Name
 575+ 7143             >IMMEDIATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 575+ 7143 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 575+ 7145             >                else
 575+ 7145 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 575+ 7145             >                endif           ; ok        // for other definitions it "points" the correct handler
 575+ 7145             >                // Use of "; ok" to suppress "warning[fwdref]"
 575+ 7145             >
 575+ 7145             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 576+ 7145 C8 6F                        dw      LATEST                  // latest
 577+ 7147 A9 63 40 00                  dw      LIT, $40                // 64
 578+ 714B 36 6B                        dw      TOGGLE                  // toggle
 579+ 714D 23 69                        dw      EXIT                    // ;
 580+ 714F
 581+ 714F              //  ______________________________________________________________________
 582+ 714F              //
 583+ 714F              // hex          --
 584+ 714F              // change numeration base
 585+ 714F                              Colon_Def HEX, "HEX", is_normal
 585+ 714F             >                New_Def  HEX, "HEX", Enter_Ptr, is_normal ; ok
 585+ 714F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 585+ 714F             >
 585+ 714F             >                // dummy db directives used to calculate length of namec
 585+ 714F 48 45 58    >                db      "HEX"
 585+ 7152             >len_NFA         defl    $ - temp_NFA
 585+ 7152             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 585+ 714F             >
 585+ 714F 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 585+ 7150 48 45 58    >                db      "HEX"               // name string in 7-bit ascii, but
 585+ 7153             >                org     $-1                 // alter last byte of Name just above to set
 585+ 7152 D8          >                db      {b $} | END_BIT     // msb as name end
 585+ 7153             >
 585+ 7153 37 71       >                dw      last_NFA            // Link to previous definition Name
 585+ 7155             >HEX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 585+ 7155 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 585+ 7157             >                else
 585+ 7157 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 585+ 7157             >                endif           ; ok        // for other definitions it "points" the correct handler
 585+ 7157             >                // Use of "; ok" to suppress "warning[fwdref]"
 585+ 7157             >
 585+ 7157             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 586+ 7157 A9 63 10 00                  dw      LIT, 16                 // 16
 587+ 715B 04 6E 50 6B                  dw      BASE, STORE             // base !
 588+ 715F 23 69                        dw      EXIT                    // ;
 589+ 7161
 590+ 7161              //  ______________________________________________________________________
 591+ 7161              //
 592+ 7161              // decimal      --
 593+ 7161              // change numeration base
 594+ 7161                              Colon_Def DECIMAL, "DECIMAL", is_normal
 594+ 7161             >                New_Def  DECIMAL, "DECIMAL", Enter_Ptr, is_normal ; ok
 594+ 7161             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 594+ 7161             >
 594+ 7161             >                // dummy db directives used to calculate length of namec
 594+ 7161 44 45 43 49 >                db      "DECIMAL"
 594+ 7165 4D 41 4C    >
 594+ 7168             >len_NFA         defl    $ - temp_NFA
 594+ 7168             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 594+ 7161             >
 594+ 7161 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 594+ 7162 44 45 43 49 >                db      "DECIMAL"               // name string in 7-bit ascii, but
 594+ 7166 4D 41 4C    >
 594+ 7169             >                org     $-1                 // alter last byte of Name just above to set
 594+ 7168 CC          >                db      {b $} | END_BIT     // msb as name end
 594+ 7169             >
 594+ 7169 4F 71       >                dw      last_NFA            // Link to previous definition Name
 594+ 716B             >DECIMAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 594+ 716B 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 594+ 716D             >                else
 594+ 716D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 594+ 716D             >                endif           ; ok        // for other definitions it "points" the correct handler
 594+ 716D             >                // Use of "; ok" to suppress "warning[fwdref]"
 594+ 716D             >
 594+ 716D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 595+ 716D A9 63 0A 00                  dw      LIT, 10                 // 10
 596+ 7171 04 6E 50 6B                  dw      BASE, STORE             // base !
 597+ 7175 23 69                        dw      EXIT                    // ;
 598+ 7177
 599+ 7177              //  ______________________________________________________________________
 600+ 7177              //
 601+ 7177              // (;code)       --
 602+ 7177              // patch to CFA to call/jump to the "following code"
 603+ 7177                              Colon_Def C_SEMICOLON_CODE, "(;CODE)", is_normal
 603+ 7177             >                New_Def  C_SEMICOLON_CODE, "(;CODE)", Enter_Ptr, is_normal ; ok
 603+ 7177             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 603+ 7177             >
 603+ 7177             >                // dummy db directives used to calculate length of namec
 603+ 7177 28 3B 43 4F >                db      "(;CODE)"
 603+ 717B 44 45 29    >
 603+ 717E             >len_NFA         defl    $ - temp_NFA
 603+ 717E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 603+ 7177             >
 603+ 7177 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 603+ 7178 28 3B 43 4F >                db      "(;CODE)"               // name string in 7-bit ascii, but
 603+ 717C 44 45 29    >
 603+ 717F             >                org     $-1                 // alter last byte of Name just above to set
 603+ 717E A9          >                db      {b $} | END_BIT     // msb as name end
 603+ 717F             >
 603+ 717F 61 71       >                dw      last_NFA            // Link to previous definition Name
 603+ 7181             >C_SEMICOLON_CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 603+ 7181 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 603+ 7183             >                else
 603+ 7183 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 603+ 7183             >                endif           ; ok        // for other definitions it "points" the correct handler
 603+ 7183             >                // Use of "; ok" to suppress "warning[fwdref]"
 603+ 7183             >
 603+ 7183             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 604+ 7183 60 69                        dw      R_TO                    // r>       ( Return Stack has IP to caller's next cell )
 605+ 7185 C8 6F                        dw      LATEST                  // latest   ( Word being defined in this moment )
 606+ 7187 06 70 E6 6F                  dw      PFA, CFA                // pfa cfa  ( cfa of latest word )
 607+ 718B
 608+ 718B
 609+ 718B
 610+ 718B
 611+ 718B
 612+ 718B 50 6B                        dw      STORE                   // !
 613+ 718D 23 69                        dw      EXIT                    // ;
 614+ 718F
 615+ 718F              //  ______________________________________________________________________
 616+ 718F              //
 617+ 718F              // ;code        --
 618+ 718F                              Colon_Def SEMICOLON_CODE, ";CODE", is_immediate
 618+ 718F             >                New_Def  SEMICOLON_CODE, ";CODE", Enter_Ptr, is_immediate ; ok
 618+ 718F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 618+ 718F             >
 618+ 718F             >                // dummy db directives used to calculate length of namec
 618+ 718F 3B 43 4F 44 >                db      ";CODE"
 618+ 7193 45          >
 618+ 7194             >len_NFA         defl    $ - temp_NFA
 618+ 7194             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 618+ 718F             >
 618+ 718F C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 618+ 7190 3B 43 4F 44 >                db      ";CODE"               // name string in 7-bit ascii, but
 618+ 7194 45          >
 618+ 7195             >                org     $-1                 // alter last byte of Name just above to set
 618+ 7194 C5          >                db      {b $} | END_BIT     // msb as name end
 618+ 7195             >
 618+ 7195 77 71       >                dw      last_NFA            // Link to previous definition Name
 618+ 7197             >SEMICOLON_CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 618+ 7197 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 618+ 7199             >                else
 618+ 7199 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 618+ 7199             >                endif           ; ok        // for other definitions it "points" the correct handler
 618+ 7199             >                // Use of "; ok" to suppress "warning[fwdref]"
 618+ 7199             >
 618+ 7199             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 619+ 7199 A8 70                        dw      QCSP                    // ?csp
 620+ 719B DF 70                        dw      COMPILE                 // compile
 621+ 719D 81 71                        dw      C_SEMICOLON_CODE        // (;code)
 622+ 719F 08 71                        dw      SQUARED_OPEN            // [
 623+ 71A1 5C 6C                        dw      NOOP                    // noop () can be patched later to ASSEMBLER... )
 624+ 71A3 23 69                        dw      EXIT                    // ; immediate
 625+ 71A5
 626+ 71A5              //  ______________________________________________________________________
 627+ 71A5              //
 628+ 71A5              // <builds      --
 629+ 71A5                              Colon_Def CBUILDS, "<BUILDS", is_normal
 629+ 71A5             >                New_Def  CBUILDS, "<BUILDS", Enter_Ptr, is_normal ; ok
 629+ 71A5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 629+ 71A5             >
 629+ 71A5             >                // dummy db directives used to calculate length of namec
 629+ 71A5 3C 42 55 49 >                db      "<BUILDS"
 629+ 71A9 4C 44 53    >
 629+ 71AC             >len_NFA         defl    $ - temp_NFA
 629+ 71AC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 629+ 71A5             >
 629+ 71A5 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 629+ 71A6 3C 42 55 49 >                db      "<BUILDS"               // name string in 7-bit ascii, but
 629+ 71AA 4C 44 53    >
 629+ 71AD             >                org     $-1                 // alter last byte of Name just above to set
 629+ 71AC D3          >                db      {b $} | END_BIT     // msb as name end
 629+ 71AD             >
 629+ 71AD 8F 71       >                dw      last_NFA            // Link to previous definition Name
 629+ 71AF             >CBUILDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 629+ 71AF 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 629+ 71B1             >                else
 629+ 71B1 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 629+ 71B1             >                endif           ; ok        // for other definitions it "points" the correct handler
 629+ 71B1             >                // Use of "; ok" to suppress "warning[fwdref]"
 629+ 71B1             >
 629+ 71B1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 630+ 71B1 AF 6C                        dw      ZERO                    // 0
 631+ 71B3 6B 6C                        dw      CONSTANT                // constant
 632+ 71B5 23 69                        dw      EXIT                    // ;
 633+ 71B7
 634+ 71B7              //  ______________________________________________________________________
 635+ 71B7              //
 636+ 71B7              // recurse      --
 637+ 71B7              //              Colon_Def RECURSE, "RECURSE", is_immediate
 638+ 71B7              //              dw      QCOMP                   // ?comp
 639+ 71B7              //              dw      LATEST                  // latest
 640+ 71B7              //              dw      PFA, CFA                // pfa cfa
 641+ 71B7              //              dw      COMMA                   // ,
 642+ 71B7              //              dw      EXIT                    // ; immediate
 643+ 71B7
 644+ 71B7              //  ______________________________________________________________________
 645+ 71B7              //
 646+ 71B7              // does>     --
 647+ 71B7                              Colon_Def DOES_TO, "DOES>", is_normal
 647+ 71B7             >                New_Def  DOES_TO, "DOES>", Enter_Ptr, is_normal ; ok
 647+ 71B7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 647+ 71B7             >
 647+ 71B7             >                // dummy db directives used to calculate length of namec
 647+ 71B7 44 4F 45 53 >                db      "DOES>"
 647+ 71BB 3E          >
 647+ 71BC             >len_NFA         defl    $ - temp_NFA
 647+ 71BC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 647+ 71B7             >
 647+ 71B7 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 647+ 71B8 44 4F 45 53 >                db      "DOES>"               // name string in 7-bit ascii, but
 647+ 71BC 3E          >
 647+ 71BD             >                org     $-1                 // alter last byte of Name just above to set
 647+ 71BC BE          >                db      {b $} | END_BIT     // msb as name end
 647+ 71BD             >
 647+ 71BD A5 71       >                dw      last_NFA            // Link to previous definition Name
 647+ 71BF             >DOES_TO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 647+ 71BF 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 647+ 71C1             >                else
 647+ 71C1 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 647+ 71C1             >                endif           ; ok        // for other definitions it "points" the correct handler
 647+ 71C1             >                // Use of "; ok" to suppress "warning[fwdref]"
 647+ 71C1             >
 647+ 71C1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 648+ 71C1 60 69                        dw      R_TO                    // r>
 649+ 71C3 C8 6F                        dw      LATEST                  // latest
 650+ 71C5 06 70                        dw      PFA                     // pfa
 651+ 71C7 50 6B                        dw      STORE                   // !
 652+ 71C9 81 71                        dw      C_SEMICOLON_CODE        // ;code
 653+ 71CB              Does_Ptr:
 654+ 71CB                              // via call coded in CFA
 655+ 71CB                              ldhlrp
 655+ 71CB 2A 96 63    >                ld      hl,(RP_Pointer)
 656+ 71CE 2B                           dec     hl                  // push on Return-Stack current Instruction-Pointer
 657+ 71CF 70                           ld      (hl), b
 658+ 71D0 2B                           dec     hl
 659+ 71D1 71                           ld      (hl), c
 660+ 71D2                              ldrphl
 660+ 71D2 22 96 63    >                ld      (RP_Pointer),hl
 661+ 71D5 13                           inc     de
 662+ 71D6 EB                           ex      de, hl
 663+ 71D7 4E                           ld      c, (hl)
 664+ 71D8 23                           inc     hl
 665+ 71D9 46                           ld      b, (hl)
 666+ 71DA 23                           inc     hl
 667+ 71DB
 668+ 71DB                              psh1
 668+ 71DB E5          >                push    hl
 668+ 71DC DD E9       >                jp      (ix)
 669+ 71DE                              // SMUDGE !
 670+ 71DE
 671+ 71DE              //  ______________________________________________________________________
 672+ 71DE              //
 673+ 71DE              // count        a -- a2 n
 674+ 71DE              // expects a counted string at address a, returns string address and counter
 675+ 71DE                              Colon_Def COUNT, "COUNT", is_normal
 675+ 71DE             >                New_Def  COUNT, "COUNT", Enter_Ptr, is_normal ; ok
 675+ 71DE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 675+ 71DE             >
 675+ 71DE             >                // dummy db directives used to calculate length of namec
 675+ 71DE 43 4F 55 4E >                db      "COUNT"
 675+ 71E2 54          >
 675+ 71E3             >len_NFA         defl    $ - temp_NFA
 675+ 71E3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 675+ 71DE             >
 675+ 71DE 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 675+ 71DF 43 4F 55 4E >                db      "COUNT"               // name string in 7-bit ascii, but
 675+ 71E3 54          >
 675+ 71E4             >                org     $-1                 // alter last byte of Name just above to set
 675+ 71E3 D4          >                db      {b $} | END_BIT     // msb as name end
 675+ 71E4             >
 675+ 71E4 B7 71       >                dw      last_NFA            // Link to previous definition Name
 675+ 71E6             >COUNT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 675+ 71E6 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 675+ 71E8             >                else
 675+ 71E8 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 675+ 71E8             >                endif           ; ok        // for other definitions it "points" the correct handler
 675+ 71E8             >                // Use of "; ok" to suppress "warning[fwdref]"
 675+ 71E8             >
 675+ 71E8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 676+ 71E8 B0 6A                        dw      DUP                     // dup
 677+ 71EA ED 69                        dw      ONE_PLUS                // 1+
 678+ 71EC A3 6A 5E 6B                  dw      SWAP, CFETCH             // swap @
 679+ 71F0 23 69                        dw      EXIT                    // ;
 680+ 71F2
 681+ 71F2              //  ______________________________________________________________________
 682+ 71F2              //
 683+ 71F2              // bounds       a n -- a+n n
 684+ 71F2              // given an address and a length ( a n ) calculate the bound addresses
 685+ 71F2              // suitable for DO-LOOP
 686+ 71F2                              Colon_Def BOUNDS, "BOUNDS", is_normal
 686+ 71F2             >                New_Def  BOUNDS, "BOUNDS", Enter_Ptr, is_normal ; ok
 686+ 71F2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 686+ 71F2             >
 686+ 71F2             >                // dummy db directives used to calculate length of namec
 686+ 71F2 42 4F 55 4E >                db      "BOUNDS"
 686+ 71F6 44 53       >
 686+ 71F8             >len_NFA         defl    $ - temp_NFA
 686+ 71F8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 686+ 71F2             >
 686+ 71F2 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 686+ 71F3 42 4F 55 4E >                db      "BOUNDS"               // name string in 7-bit ascii, but
 686+ 71F7 44 53       >
 686+ 71F9             >                org     $-1                 // alter last byte of Name just above to set
 686+ 71F8 D3          >                db      {b $} | END_BIT     // msb as name end
 686+ 71F9             >
 686+ 71F9 DE 71       >                dw      last_NFA            // Link to previous definition Name
 686+ 71FB             >BOUNDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 686+ 71FB 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 686+ 71FD             >                else
 686+ 71FD ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 686+ 71FD             >                endif           ; ok        // for other definitions it "points" the correct handler
 686+ 71FD             >                // Use of "; ok" to suppress "warning[fwdref]"
 686+ 71FD             >
 686+ 71FD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 687+ 71FD 6B 6A C4 69                  dw      OVER, PLUS, SWAP        // over + swap
 687+ 7201 A3 6A
 688+ 7203 23 69                        dw      EXIT                    // ;
 689+ 7205
 690+ 7205              //  ______________________________________________________________________
 691+ 7205              //
 692+ 7205              // type         a n --
 693+ 7205              // Sends to current output channel n characters starting at address a.
 694+ 7205                              Colon_Def TYPE, "TYPE", is_normal
 694+ 7205             >                New_Def  TYPE, "TYPE", Enter_Ptr, is_normal ; ok
 694+ 7205             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 694+ 7205             >
 694+ 7205             >                // dummy db directives used to calculate length of namec
 694+ 7205 54 59 50 45 >                db      "TYPE"
 694+ 7209             >len_NFA         defl    $ - temp_NFA
 694+ 7209             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 694+ 7205             >
 694+ 7205 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 694+ 7206 54 59 50 45 >                db      "TYPE"               // name string in 7-bit ascii, but
 694+ 720A             >                org     $-1                 // alter last byte of Name just above to set
 694+ 7209 C5          >                db      {b $} | END_BIT     // msb as name end
 694+ 720A             >
 694+ 720A F2 71       >                dw      last_NFA            // Link to previous definition Name
 694+ 720C             >TYPE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 694+ 720C 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 694+ 720E             >                else
 694+ 720E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 694+ 720E             >                endif           ; ok        // for other definitions it "points" the correct handler
 694+ 720E             >                // Use of "; ok" to suppress "warning[fwdref]"
 694+ 720E             >
 694+ 720E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 695+ 720E FB 71                        dw      BOUNDS                  // bounds
 696+ 7210 3D 64                        dw      C_Q_DO                  // ?do
 697+ 7212 0C 00                        dw      Type_Skip - $
 698+ 7214              Type_Loop:
 699+ 7214 76 64 5E 6B                  dw          I, CFETCH           //      i c@
 700+ 7218 76 6F                        dw          EMIT                //      emit
 701+ 721A F8 63                        dw      C_LOOP                  // loop
 702+ 721C F8 FF                        dw      Type_Loop - $
 703+ 721E              Type_Skip:
 704+ 721E 23 69                        dw      EXIT                    // ;
 705+ 7220
 706+ 7220              //  ______________________________________________________________________
 707+ 7220              //
 708+ 7220              // -trailing    a n1 -- a n2
 709+ 7220              // Assumes that an n1 bytes-long string is stored at address a
 710+ 7220              // and the string contains a space delimited word,
 711+ 7220              // Finds n2 as the position of the first character after the word.
 712+ 7220                              Colon_Def LTRAILING, "-TRAILING", is_normal
 712+ 7220             >                New_Def  LTRAILING, "-TRAILING", Enter_Ptr, is_normal ; ok
 712+ 7220             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 712+ 7220             >
 712+ 7220             >                // dummy db directives used to calculate length of namec
 712+ 7220 2D 54 52 41 >                db      "-TRAILING"
 712+ 7224 49 4C 49 4E >
 712+ 7228 47          >
 712+ 7229             >len_NFA         defl    $ - temp_NFA
 712+ 7229             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 712+ 7220             >
 712+ 7220 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 712+ 7221 2D 54 52 41 >                db      "-TRAILING"               // name string in 7-bit ascii, but
 712+ 7225 49 4C 49 4E >
 712+ 7229 47          >
 712+ 722A             >                org     $-1                 // alter last byte of Name just above to set
 712+ 7229 C7          >                db      {b $} | END_BIT     // msb as name end
 712+ 722A             >
 712+ 722A 05 72       >                dw      last_NFA            // Link to previous definition Name
 712+ 722C             >LTRAILING:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 712+ 722C 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 712+ 722E             >                else
 712+ 722E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 712+ 722E             >                endif           ; ok        // for other definitions it "points" the correct handler
 712+ 722E             >                // Use of "; ok" to suppress "warning[fwdref]"
 712+ 722E             >
 712+ 722E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 713+ 722E B0 6A AF 6C                  dw      DUP, ZERO               // dup 0
 714+ 7232                                                              // do
 715+ 7232 6B 64                        dw      C_DO
 716+ 7234              LTrailing_Loop:
 717+ 7234 11 6B C4 69                  dw          TWO_DUP, PLUS       //      2dup +
 718+ 7238 F9 69                        dw          ONE_SUBTRACT        //      1-
 719+ 723A 5E 6B                        dw          CFETCH              //      c@
 720+ 723C D9 6C D5 6E                  dw          BL, SUBTRACT        //      bl -
 721+ 7240                                                              //      if
 722+ 7240 E3 63                        dw          ZBRANCH
 723+ 7242 08 00                        dw          LTrailing_Else - $
 724+ 7244 39 69                        dw              LEAVE           //          leave
 725+ 7246 CC 63                        dw          BRANCH              //      else
 726+ 7248 04 00                        dw          LTrailing_Endif - $
 727+ 724A              LTrailing_Else:
 728+ 724A F9 69                        dw              ONE_SUBTRACT    //          1-
 729+ 724C              LTrailing_Endif:                                //      endif
 730+ 724C                                                              // loop
 731+ 724C F8 63                        dw      C_LOOP
 732+ 724E E6 FF                        dw      LTrailing_Loop - $
 733+ 7250 23 69                        dw      EXIT                    // ;
 734+ 7252
 735+ 7252              //  ______________________________________________________________________
 736+ 7252              //
 737+ 7252              // accept       a n1 -- n2
 738+ 7252              // Accepts at most n1 characters from terminal and stores them at address a
 739+ 7252              // CR stops input. A 'nul' is added as trailer.
 740+ 7252              // n2 is the string length. n2 is kept in span user variable also.
 741+ 7252                              Colon_Def ACCEPT, "ACCEPT", is_normal
 741+ 7252             >                New_Def  ACCEPT, "ACCEPT", Enter_Ptr, is_normal ; ok
 741+ 7252             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 741+ 7252             >
 741+ 7252             >                // dummy db directives used to calculate length of namec
 741+ 7252 41 43 43 45 >                db      "ACCEPT"
 741+ 7256 50 54       >
 741+ 7258             >len_NFA         defl    $ - temp_NFA
 741+ 7258             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 741+ 7252             >
 741+ 7252 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 741+ 7253 41 43 43 45 >                db      "ACCEPT"               // name string in 7-bit ascii, but
 741+ 7257 50 54       >
 741+ 7259             >                org     $-1                 // alter last byte of Name just above to set
 741+ 7258 D4          >                db      {b $} | END_BIT     // msb as name end
 741+ 7259             >
 741+ 7259 20 72       >                dw      last_NFA            // Link to previous definition Name
 741+ 725B             >ACCEPT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 741+ 725B 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 741+ 725D             >                else
 741+ 725D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 741+ 725D             >                endif           ; ok        // for other definitions it "points" the correct handler
 741+ 725D             >                // Use of "; ok" to suppress "warning[fwdref]"
 741+ 725D             >
 741+ 725D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 742+ 725D 6B 6A C4 69                  dw      OVER, PLUS, OVER        //                      ( a  n1+a  a )
 742+ 7261 6B 6A
 743+ 7263 AF 6C CD 6A                  dw      ZERO, DASH_ROT          //                      ( a  0     a+n1  a )
 744+ 7267                                                              // do
 745+ 7267 6B 64                        dw      C_DO                    //                      ( a  0 )
 746+ 7269              Accept_Loop:
 747+ 7269 7B 6A 85 66                  dw          DROP, KEY           //      drop key        ( a  c )
 748+ 726D B0 6A                        dw          DUP                 //      dup             ( a  c  c )
 749+ 726F A9 63 0E 00                  dw          LIT, $0E            //      0E
 750+ 7273 15 6D                        dw          PLUS_ORIGIN         //      +origin
 751+ 7275 43 6B                        dw          FETCH               //      @               ( a  c  c  del )
 752+ 7277 E3 6E                        dw          EQUALS              //      =               ( a  c  c==del )
 753+ 7279                                                              //      if
 754+ 7279 E3 63                        dw          ZBRANCH
 755+ 727B 2A 00                        dw          Accept_Else_0 - $
 756+ 727D 7B 6A                        dw              DROP            //          drop        ( a  )
 757+ 727F B0 6A 76 64                  dw              DUP, I, EQUALS  //          dup i =     ( a  a==i )
 757+ 7283 E3 6E
 758+ 7285 B0 6A                        dw              DUP             //          dup         ( a  a==i  a==i )
 759+ 7287 60 69                        dw              R_TO            //          r> 2 - + r>
 760+ 7289 BF 6C D5 6E                  dw              TWO, SUBTRACT, PLUS //      ( decrement index by 1 or 2 )
 760+ 728D C4 69
 761+ 728F 4C 69                        dw              TO_R            //
 762+ 7291                                                              //          if
 763+ 7291 E3 63                        dw              ZBRANCH
 764+ 7293 0A 00                        dw              Accept_Else_1 - $
 765+ 7295 A9 63 07 00                  dw                  LIT, 7      //              7       ( a  7 )
 766+ 7299                                                              //          else
 767+ 7299 CC 63                        dw              BRANCH
 768+ 729B 06 00                        dw              Accept_Endif_1 - $
 769+ 729D              Accept_Else_1:
 770+ 729D A9 63 08 00                  dw                  LIT, 8      //              8       ( a  8 )
 771+ 72A1              Accept_Endif_1:                                 //          endif
 772+ 72A1 CC 63                        dw          BRANCH
 773+ 72A3 30 00                        dw          Accept_Endif_0 - $
 774+ 72A5              Accept_Else_0:                                  //      else
 775+ 72A5 B0 6A                        dw              DUP             //          dup         ( a  c  c )
 776+ 72A7 A9 63 0D 00                  dw              LIT, 13         //          13
 777+ 72AB E3 6E                        dw              EQUALS          //          =           ( a  c  c==CR )
 778+ 72AD                                                              //          if
 779+ 72AD E3 63                        dw              ZBRANCH
 780+ 72AF 0E 00                        dw              Accept_Else_2 - $
 781+ 72B1 7B 6A D9 6C                  dw                  DROP, BL    //              drop bl ( a  bl )
 782+ 72B5 AF 6C                        dw                  ZERO        //              0       ( a  c  0 )
 783+ 72B7 39 69                        dw                  LEAVE       //              leave
 784+ 72B9                                                              //          else
 785+ 72B9 CC 63                        dw              BRANCH
 786+ 72BB 04 00                        dw              Accept_Endif_2 - $
 787+ 72BD              Accept_Else_2:
 788+ 72BD B0 6A                        dw                  DUP         //              dup     ( a  c  c )
 789+ 72BF                                                              //          endif
 790+ 72BF              Accept_Endif_2:
 791+ 72BF 76 64 6C 6B                  dw              I, CSTORE       //          i           ( a  c )
 792+ 72C3 B0 6A D9 6C                  dw              DUP, BL, LESS   //          dup bl <    ( a  c  c<BL )
 792+ 72C7 04 6F
 793+ 72C9                                                              //          if
 794+ 72C9 E3 63                        dw              ZBRANCH
 795+ 72CB 08 00                        dw              Accept_Endif_3 - $
 796+ 72CD 60 69                        dw                  R_TO        //              r>
 797+ 72CF F9 69                        dw                  ONE_SUBTRACT//              1-
 798+ 72D1 4C 69                        dw                  TO_R        //              >r
 799+ 72D3                                                              //          endif
 800+ 72D3              Accept_Endif_3:
 801+ 72D3              Accept_Endif_0:                                 //      endif
 802+ 72D3 76 6F                        dw          EMIT                //      emit
 803+ 72D5 AF 6C 76 64                  dw          ZERO, I, ONE_PLUS   //      0 i 1+ !
 803+ 72D9 ED 69
 804+ 72DB 50 6B                        dw          STORE               //          ( zero pad )
 805+ 72DD 76 64                        dw          I                   //      i
 806+ 72DF                                                              // loop
 807+ 72DF F8 63                        dw      C_LOOP
 808+ 72E1 88 FF                        dw      Accept_Loop - $
 809+ 72E3 A3 6A D5 6E                  dw      SWAP, SUBTRACT          // swap -
 810+ 72E7 ED 69                        dw      ONE_PLUS                // 1+
 811+ 72E9 B0 6A 6F 6E                  dw      DUP, SPAN, STORE        // dup span !
 811+ 72ED 50 6B
 812+ 72EF 23 69                        dw      EXIT                    // ;
 813+ 72F1
 814+ 72F1              //  ______________________________________________________________________
 815+ 72F1              //
 816+ 72F1              // expect      a n --
 817+ 72F1              // Accepts at most n1 characters from terminal and stores them at address a
 818+ 72F1              // CR stops input. A 'nul' is added as trailer.
 819+ 72F1              // n2 is the string length. n2 is kept in span user variable also.
 820+ 72F1              //              Colon_Def EXPECT, "EXPECT", is_normal
 821+ 72F1              //              dw      ACCEPT, DROP            // accept drop
 822+ 72F1              //              dw      EXIT                    // ;
 823+ 72F1
 824+ 72F1              //  ______________________________________________________________________
 825+ 72F1              //
 826+ 72F1              // query        --
 827+ 72F1              // Accept at most 80 character from console. CR stops.
 828+ 72F1              // Text is stored in TIB. Variable IN is zeroed.
 829+ 72F1                              Colon_Def QUERY, "QUERY", is_normal
 829+ 72F1             >                New_Def  QUERY, "QUERY", Enter_Ptr, is_normal ; ok
 829+ 72F1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 829+ 72F1             >
 829+ 72F1             >                // dummy db directives used to calculate length of namec
 829+ 72F1 51 55 45 52 >                db      "QUERY"
 829+ 72F5 59          >
 829+ 72F6             >len_NFA         defl    $ - temp_NFA
 829+ 72F6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 829+ 72F1             >
 829+ 72F1 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 829+ 72F2 51 55 45 52 >                db      "QUERY"               // name string in 7-bit ascii, but
 829+ 72F6 59          >
 829+ 72F7             >                org     $-1                 // alter last byte of Name just above to set
 829+ 72F6 D9          >                db      {b $} | END_BIT     // msb as name end
 829+ 72F7             >
 829+ 72F7 52 72       >                dw      last_NFA            // Link to previous definition Name
 829+ 72F9             >QUERY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 829+ 72F9 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 829+ 72FB             >                else
 829+ 72FB ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 829+ 72FB             >                endif           ; ok        // for other definitions it "points" the correct handler
 829+ 72FB             >                // Use of "; ok" to suppress "warning[fwdref]"
 829+ 72FB             >
 829+ 72FB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 830+ 72FB 42 6D 43 6B                  dw      TIB, FETCH              // tib @
 831+ 72FF A9 63 50 00                  dw      LIT, 80                 // 80
 832+ 7303 5B 72 7B 6A                  dw      ACCEPT, DROP            // accept drop
 833+ 7307 AF 6C B7 6D                  dw      ZERO, TO_IN, STORE      // 0 >in !
 833+ 730B 50 6B
 834+ 730D 23 69                        dw      EXIT                    // ;
 835+ 730F
 836+ 730F              //  ______________________________________________________________________
 837+ 730F              //
 838+ 730F              // fill        a n c --
 839+ 730F              // If n > 0, fills n locations starting from address a with the value c.
 840+ 730F                              New_Def FILL, "FILL", is_code, is_normal
 840+ 730F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 840+ 730F             >
 840+ 730F             >                // dummy db directives used to calculate length of namec
 840+ 730F 46 49 4C 4C >                db      "FILL"
 840+ 7313             >len_NFA         defl    $ - temp_NFA
 840+ 7313             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 840+ 730F             >
 840+ 730F 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 840+ 7310 46 49 4C 4C >                db      "FILL"               // name string in 7-bit ascii, but
 840+ 7314             >                org     $-1                 // alter last byte of Name just above to set
 840+ 7313 CC          >                db      {b $} | END_BIT     // msb as name end
 840+ 7314             >
 840+ 7314 F1 72       >                dw      last_NFA            // Link to previous definition Name
 840+ 7316             >FILL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 840+ 7316 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 840+ 7316             >                else
 840+ 7316 18 73       >                dw      $ + 2   ; ok        // is pointed by CFA
 840+ 7318             >                endif           ; ok        // for other definitions it "points" the correct handler
 840+ 7318             >                // Use of "; ok" to suppress "warning[fwdref]"
 840+ 7318             >
 840+ 7318             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 841+ 7318 69                           ld      l, c
 842+ 7319 60                           ld      h, b
 843+ 731A D1                           pop     de                  // de has character
 844+ 731B C1                           pop     bc                  // bc has counter
 845+ 731C E3                           ex      (sp), hl            // hl has address, save Instruction Pointer
 846+ 731D              Fill_Loop:
 847+ 731D 78                               ld      a, b
 848+ 731E B1                               or      c
 849+ 731F 28 05                        jr      z, Fill_While_End
 850+ 7321 73                               ld      (hl), e
 851+ 7322 0B                               dec     bc
 852+ 7323 23                               inc     hl
 853+ 7324 18 F7                        jr      Fill_Loop
 854+ 7326              Fill_While_End:
 855+ 7326 C1                           pop     bc                  // Restore Instruction Pointer
 856+ 7327
 857+ 7327                              next
 857+ 7327 DD E9       >                jp      (ix)
 858+ 7329
 859+ 7329              //  ______________________________________________________________________
 860+ 7329              //
 861+ 7329              // erase        a n --
 862+ 7329              // If n > 0, fills n locations starting from address a with 'nul' characters.
 863+ 7329                              Colon_Def ERASE, "ERASE", is_normal
 863+ 7329             >                New_Def  ERASE, "ERASE", Enter_Ptr, is_normal ; ok
 863+ 7329             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 863+ 7329             >
 863+ 7329             >                // dummy db directives used to calculate length of namec
 863+ 7329 45 52 41 53 >                db      "ERASE"
 863+ 732D 45          >
 863+ 732E             >len_NFA         defl    $ - temp_NFA
 863+ 732E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 863+ 7329             >
 863+ 7329 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 863+ 732A 45 52 41 53 >                db      "ERASE"               // name string in 7-bit ascii, but
 863+ 732E 45          >
 863+ 732F             >                org     $-1                 // alter last byte of Name just above to set
 863+ 732E C5          >                db      {b $} | END_BIT     // msb as name end
 863+ 732F             >
 863+ 732F 0F 73       >                dw      last_NFA            // Link to previous definition Name
 863+ 7331             >ERASE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 863+ 7331 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 863+ 7333             >                else
 863+ 7333 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 863+ 7333             >                endif           ; ok        // for other definitions it "points" the correct handler
 863+ 7333             >                // Use of "; ok" to suppress "warning[fwdref]"
 863+ 7333             >
 863+ 7333             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 864+ 7333 AF 6C 16 73                  dw      ZERO, FILL              // 0 fill
 865+ 7337 23 69                        dw      EXIT                    // ;
 866+ 7339
 867+ 7339              //  ______________________________________________________________________
 868+ 7339              //
 869+ 7339              // blanks       a n --
 870+ 7339              // If n > 0, fills n locations starting from address a with 'nul' characters.
 871+ 7339                              Colon_Def BLANKS, "BLANKS", is_normal
 871+ 7339             >                New_Def  BLANKS, "BLANKS", Enter_Ptr, is_normal ; ok
 871+ 7339             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 871+ 7339             >
 871+ 7339             >                // dummy db directives used to calculate length of namec
 871+ 7339 42 4C 41 4E >                db      "BLANKS"
 871+ 733D 4B 53       >
 871+ 733F             >len_NFA         defl    $ - temp_NFA
 871+ 733F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 871+ 7339             >
 871+ 7339 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 871+ 733A 42 4C 41 4E >                db      "BLANKS"               // name string in 7-bit ascii, but
 871+ 733E 4B 53       >
 871+ 7340             >                org     $-1                 // alter last byte of Name just above to set
 871+ 733F D3          >                db      {b $} | END_BIT     // msb as name end
 871+ 7340             >
 871+ 7340 29 73       >                dw      last_NFA            // Link to previous definition Name
 871+ 7342             >BLANKS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 871+ 7342 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 871+ 7344             >                else
 871+ 7344 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 871+ 7344             >                endif           ; ok        // for other definitions it "points" the correct handler
 871+ 7344             >                // Use of "; ok" to suppress "warning[fwdref]"
 871+ 7344             >
 871+ 7344             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 872+ 7344 D9 6C 16 73                  dw      BL, FILL                // bl fill
 873+ 7348 23 69                        dw      EXIT                    // ;
 874+ 734A
 875+ 734A              //  ______________________________________________________________________
 876+ 734A              //
 877+ 734A              // hold         c --
 878+ 734A              // Used between <# and #> to insert a character c in numeric formatting.
 879+ 734A                              Colon_Def HOLD, "HOLD", is_normal
 879+ 734A             >                New_Def  HOLD, "HOLD", Enter_Ptr, is_normal ; ok
 879+ 734A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 879+ 734A             >
 879+ 734A             >                // dummy db directives used to calculate length of namec
 879+ 734A 48 4F 4C 44 >                db      "HOLD"
 879+ 734E             >len_NFA         defl    $ - temp_NFA
 879+ 734E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 879+ 734A             >
 879+ 734A 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 879+ 734B 48 4F 4C 44 >                db      "HOLD"               // name string in 7-bit ascii, but
 879+ 734F             >                org     $-1                 // alter last byte of Name just above to set
 879+ 734E C4          >                db      {b $} | END_BIT     // msb as name end
 879+ 734F             >
 879+ 734F 39 73       >                dw      last_NFA            // Link to previous definition Name
 879+ 7351             >HOLD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 879+ 7351 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 879+ 7353             >                else
 879+ 7353 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 879+ 7353             >                endif           ; ok        // for other definitions it "points" the correct handler
 879+ 7353             >                // Use of "; ok" to suppress "warning[fwdref]"
 879+ 7353             >
 879+ 7353             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 880+ 7353 D0 6C                        dw      NEG_ONE                 // -1
 881+ 7355 30 6E 20 6B                  dw      HLD, PLUSSTORE          // hld +!
 882+ 7359 30 6E 43 6B                  dw      HLD, FETCH, CSTORE      // hld @ c!
 882+ 735D 6C 6B
 883+ 735F 23 69                        dw      EXIT                    // ;
 884+ 7361
 885+ 7361              //  ______________________________________________________________________
 886+ 7361              //
 887+ 7361              // pad         -- a
 888+ 7361              // leaves the buffer text address. This is at a fixed distance over HERE.
 889+ 7361                              Colon_Def PAD, "PAD", is_normal
 889+ 7361             >                New_Def  PAD, "PAD", Enter_Ptr, is_normal ; ok
 889+ 7361             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 889+ 7361             >
 889+ 7361             >                // dummy db directives used to calculate length of namec
 889+ 7361 50 41 44    >                db      "PAD"
 889+ 7364             >len_NFA         defl    $ - temp_NFA
 889+ 7364             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 889+ 7361             >
 889+ 7361 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 889+ 7362 50 41 44    >                db      "PAD"               // name string in 7-bit ascii, but
 889+ 7365             >                org     $-1                 // alter last byte of Name just above to set
 889+ 7364 C4          >                db      {b $} | END_BIT     // msb as name end
 889+ 7365             >
 889+ 7365 4A 73       >                dw      last_NFA            // Link to previous definition Name
 889+ 7367             >PAD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 889+ 7367 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 889+ 7369             >                else
 889+ 7369 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 889+ 7369             >                endif           ; ok        // for other definitions it "points" the correct handler
 889+ 7369             >                // Use of "; ok" to suppress "warning[fwdref]"
 889+ 7369             >
 889+ 7369             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 890+ 7369 81 6E                        dw      HERE                    // here
 891+ 736B A9 63 44 00                  dw      LIT, 68                 // 68
 892+ 736F C4 69                        dw      PLUS                    // +
 893+ 7371 23 69                        dw      EXIT                    // ;
 894+ 7373
 895+ 7373              //  ______________________________________________________________________
 896+ 7373              //
 897+ 7373              // word         c -- a
 898+ 7373              // reads characters from input streams until it encouners a c delimiter.
 899+ 7373              // Stores that packet so it starts from HERE
 900+ 7373              // WORD leaves a counter as first byte and ends the packet with two spaces.
 901+ 7373              // Other occurrences of c are ignored.
 902+ 7373              // If BLK is zero, text is taken from terminal buffer TIB.
 903+ 7373              // Otherwise text is taken from the disk-block given by BLK.
 904+ 7373              // "in" variable is incremented of the number of character read.
 905+ 7373              // The number of characters read is given by ENCLOSE.
 906+ 7373                              Colon_Def WORD, "WORD", is_normal
 906+ 7373             >                New_Def  WORD, "WORD", Enter_Ptr, is_normal ; ok
 906+ 7373             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 906+ 7373             >
 906+ 7373             >                // dummy db directives used to calculate length of namec
 906+ 7373 57 4F 52 44 >                db      "WORD"
 906+ 7377             >len_NFA         defl    $ - temp_NFA
 906+ 7377             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 906+ 7373             >
 906+ 7373 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 906+ 7374 57 4F 52 44 >                db      "WORD"               // name string in 7-bit ascii, but
 906+ 7378             >                org     $-1                 // alter last byte of Name just above to set
 906+ 7377 C4          >                db      {b $} | END_BIT     // msb as name end
 906+ 7378             >
 906+ 7378 61 73       >                dw      last_NFA            // Link to previous definition Name
 906+ 737A             >WORD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 906+ 737A 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 906+ 737C             >                else
 906+ 737C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 906+ 737C             >                endif           ; ok        // for other definitions it "points" the correct handler
 906+ 737C             >                // Use of "; ok" to suppress "warning[fwdref]"
 906+ 737C             >
 906+ 737C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 907+ 737C AE 6D 43 6B                  dw      BLK, FETCH              // blk @
 908+ 7380                                                              // if
 909+ 7380 E3 63                        dw      ZBRANCH
 910+ 7382 0C 00                        dw      Word_Else - $
 911+ 7384 AE 6D 43 6B                  dw          BLK, FETCH          //      blk @
 912+ 7388 D5 7C                        dw          BLOCK               //      block ( forward )
 913+ 738A                                                              // else
 914+ 738A CC 63                        dw      BRANCH
 915+ 738C 06 00                        dw      Word_Endif - $
 916+ 738E              Word_Else:
 917+ 738E 42 6D 43 6B                  dw         TIB, FETCH           //      tib @
 918+ 7392              Word_Endif:                                     // endif
 919+ 7392 B7 6D 43 6B                  dw      TO_IN, FETCH, PLUS      // >in @ +
 919+ 7396 C4 69
 920+ 7398 A3 6A 56 65                  dw      SWAP, ENCLOSE           // swap enclose
 921+ 739C 81 6E A9 63                  dw      HERE, LIT, 34, BLANKS   // here 34 blanks
 921+ 73A0 22 00 42 73
 922+ 73A4 B7 6D 20 6B                  dw      TO_IN, PLUSSTORE        // >in @ +
 923+ 73A8 6B 6A D5 6E                  dw      OVER, SUBTRACT, TO_R    // over - >r
 923+ 73AC 4C 69
 924+ 73AE 74 69 81 6E                  dw      R_OP, HERE, CSTORE      // r here c!
 924+ 73B2 6C 6B
 925+ 73B4 C4 69                        dw      PLUS                    // +
 926+ 73B6 81 6E ED 69                  dw      HERE, ONE_PLUS, R_TO    // here 1+ r>
 926+ 73BA 60 69
 927+ 73BC 11 68                        dw      CMOVE                   // cmove
 928+ 73BE 81 6E                        dw      HERE                    // here
 929+ 73C0 23 69                        dw      EXIT                    // ;
 930+ 73C2
 931+ 73C2              //  ______________________________________________________________________
 932+ 73C2              //
 933+ 73C2              // (.")         --
 934+ 73C2              // Direct procedure compiled by ." and  .(  It executes TYPE.
 935+ 73C2                              Colon_Def C_DOT_QUOTE, '(.")', is_normal
 935+ 73C2             >                New_Def  C_DOT_QUOTE, '(.")', Enter_Ptr, is_normal ; ok
 935+ 73C2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 935+ 73C2             >
 935+ 73C2             >                // dummy db directives used to calculate length of namec
 935+ 73C2 28 2E 22 29 >                db      '(.")'
 935+ 73C6             >len_NFA         defl    $ - temp_NFA
 935+ 73C6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 935+ 73C2             >
 935+ 73C2 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 935+ 73C3 28 2E 22 29 >                db      '(.")'               // name string in 7-bit ascii, but
 935+ 73C7             >                org     $-1                 // alter last byte of Name just above to set
 935+ 73C6 A9          >                db      {b $} | END_BIT     // msb as name end
 935+ 73C7             >
 935+ 73C7 73 73       >                dw      last_NFA            // Link to previous definition Name
 935+ 73C9             >C_DOT_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 935+ 73C9 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 935+ 73CB             >                else
 935+ 73CB ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 935+ 73CB             >                endif           ; ok        // for other definitions it "points" the correct handler
 935+ 73CB             >                // Use of "; ok" to suppress "warning[fwdref]"
 935+ 73CB             >
 935+ 73CB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 936+ 73CB 74 69 E6 71                  dw      R_OP, COUNT             // r count
 937+ 73CF B0 6A ED 69                  dw      DUP, ONE_PLUS           // dup 1+
 938+ 73D3 60 69 C4 69                  dw      R_TO, PLUS, TO_R        // r> + >r  ( advance IP )
 938+ 73D7 4C 69
 939+ 73D9 0C 72                        dw      TYPE                    // type
 940+ 73DB 23 69                        dw      EXIT                    // ;
 941+ 73DD
 942+ 73DD              //  ______________________________________________________________________
 943+ 73DD              //
 944+ 73DD              // char         -- c
 945+ 73DD              // get first character from next input word
 946+ 73DD                              Colon_Def CHAR,  "CHAR", is_normal
 946+ 73DD             >                New_Def  CHAR, "CHAR", Enter_Ptr, is_normal ; ok
 946+ 73DD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 946+ 73DD             >
 946+ 73DD             >                // dummy db directives used to calculate length of namec
 946+ 73DD 43 48 41 52 >                db      "CHAR"
 946+ 73E1             >len_NFA         defl    $ - temp_NFA
 946+ 73E1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 946+ 73DD             >
 946+ 73DD 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 946+ 73DE 43 48 41 52 >                db      "CHAR"               // name string in 7-bit ascii, but
 946+ 73E2             >                org     $-1                 // alter last byte of Name just above to set
 946+ 73E1 D2          >                db      {b $} | END_BIT     // msb as name end
 946+ 73E2             >
 946+ 73E2 C2 73       >                dw      last_NFA            // Link to previous definition Name
 946+ 73E4             >CHAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 946+ 73E4 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 946+ 73E6             >                else
 946+ 73E6 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 946+ 73E6             >                endif           ; ok        // for other definitions it "points" the correct handler
 946+ 73E6             >                // Use of "; ok" to suppress "warning[fwdref]"
 946+ 73E6             >
 946+ 73E6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 947+ 73E6 D9 6C 7A 73                  dw      BL, WORD                // bl word
 948+ 73EA ED 69 5E 6B                  dw      ONE_PLUS, CFETCH        // 1+ c@
 949+ 73EE 23 69                        dw      EXIT                    // ;
 950+ 73F0
 951+ 73F0              //  ______________________________________________________________________
 952+ 73F0              //
 953+ 73F0              // ,"           --
 954+ 73F0              // compiles a string terminated by " as a counted string from next input stream
 955+ 73F0                              Colon_Def COMMA_QUOTE,  ',"', is_normal
 955+ 73F0             >                New_Def  COMMA_QUOTE, ',"', Enter_Ptr, is_normal ; ok
 955+ 73F0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 955+ 73F0             >
 955+ 73F0             >                // dummy db directives used to calculate length of namec
 955+ 73F0 2C 22       >                db      ',"'
 955+ 73F2             >len_NFA         defl    $ - temp_NFA
 955+ 73F2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 955+ 73F0             >
 955+ 73F0 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 955+ 73F1 2C 22       >                db      ',"'               // name string in 7-bit ascii, but
 955+ 73F3             >                org     $-1                 // alter last byte of Name just above to set
 955+ 73F2 A2          >                db      {b $} | END_BIT     // msb as name end
 955+ 73F3             >
 955+ 73F3 DD 73       >                dw      last_NFA            // Link to previous definition Name
 955+ 73F5             >COMMA_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 955+ 73F5 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 955+ 73F7             >                else
 955+ 73F7 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 955+ 73F7             >                endif           ; ok        // for other definitions it "points" the correct handler
 955+ 73F7             >                // Use of "; ok" to suppress "warning[fwdref]"
 955+ 73F7             >
 955+ 73F7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 956+ 73F7 A9 63 22 00                  dw      LIT, DQUOTE_CHAR        // [char] "
 957+ 73FB 7A 73                        dw      WORD                    // word
 958+ 73FD 5E 6B ED 69                  dw      CFETCH, ONE_PLUS        // c@ 1+
 959+ 7401 91 6E                        dw      ALLOT                   // allot
 960+ 7403 AF 6C AE 6E                  dw      ZERO, CCOMMA            // 0 c,  ( nul-terminated string - useful anyway )
 961+ 7407 23 69                        dw      EXIT
 962+ 7409
 963+ 7409              //  ______________________________________________________________________
 964+ 7409              //
 965+ 7409              // .c           c --
 966+ 7409              // intermediate general purpose string builder, used by ." and .(
 967+ 7409                              Colon_Def DOT_C,  ".C", is_immediate
 967+ 7409             >                New_Def  DOT_C, ".C", Enter_Ptr, is_immediate ; ok
 967+ 7409             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 967+ 7409             >
 967+ 7409             >                // dummy db directives used to calculate length of namec
 967+ 7409 2E 43       >                db      ".C"
 967+ 740B             >len_NFA         defl    $ - temp_NFA
 967+ 740B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 967+ 7409             >
 967+ 7409 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 967+ 740A 2E 43       >                db      ".C"               // name string in 7-bit ascii, but
 967+ 740C             >                org     $-1                 // alter last byte of Name just above to set
 967+ 740B C3          >                db      {b $} | END_BIT     // msb as name end
 967+ 740C             >
 967+ 740C F0 73       >                dw      last_NFA            // Link to previous definition Name
 967+ 740E             >DOT_C:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 967+ 740E 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 967+ 7410             >                else
 967+ 7410 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 967+ 7410             >                endif           ; ok        // for other definitions it "points" the correct handler
 967+ 7410             >                // Use of "; ok" to suppress "warning[fwdref]"
 967+ 7410             >
 967+ 7410             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 968+ 7410 FA 6D 43 6B                  dw      STATE, FETCH            // state @
 969+ 7414                                                              // if
 970+ 7414 E3 63                        dw      ZBRANCH
 971+ 7416 12 00                        dw      Dot_C_Else - $
 972+ 7418 DF 70 C9 73                  dw          COMPILE, C_DOT_QUOTE //     compile (.")
 973+ 741C 7A 73 5E 6B                  dw          WORD, CFETCH        //      word c@
 974+ 7420 ED 69 91 6E                  dw          ONE_PLUS, ALLOT     //      1+ allot
 975+ 7424                                                              // else
 976+ 7424 CC 63                        dw      BRANCH
 977+ 7426 08 00                        dw      Dot_C_Endif - $
 978+ 7428              Dot_C_Else:
 979+ 7428 7A 73 E6 71                  dw          WORD, COUNT, TYPE   //      word count type
 979+ 742C 0C 72
 980+ 742E              Dot_C_Endif:                                    // endif
 981+ 742E 23 69                        dw      EXIT                    ;
 982+ 7430
 983+ 7430              //  ______________________________________________________________________
 984+ 7430              //
 985+ 7430              // ."           c --
 986+ 7430                              Colon_Def DOT_QUOTE,  '."', is_immediate
 986+ 7430             >                New_Def  DOT_QUOTE, '."', Enter_Ptr, is_immediate ; ok
 986+ 7430             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 986+ 7430             >
 986+ 7430             >                // dummy db directives used to calculate length of namec
 986+ 7430 2E 22       >                db      '."'
 986+ 7432             >len_NFA         defl    $ - temp_NFA
 986+ 7432             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 986+ 7430             >
 986+ 7430 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 986+ 7431 2E 22       >                db      '."'               // name string in 7-bit ascii, but
 986+ 7433             >                org     $-1                 // alter last byte of Name just above to set
 986+ 7432 A2          >                db      {b $} | END_BIT     // msb as name end
 986+ 7433             >
 986+ 7433 09 74       >                dw      last_NFA            // Link to previous definition Name
 986+ 7435             >DOT_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 986+ 7435 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 986+ 7437             >                else
 986+ 7437 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 986+ 7437             >                endif           ; ok        // for other definitions it "points" the correct handler
 986+ 7437             >                // Use of "; ok" to suppress "warning[fwdref]"
 986+ 7437             >
 986+ 7437             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 987+ 7437 A9 63 22 00                  dw      LIT, DQUOTE_CHAR        // [char] "
 988+ 743B 0E 74                        dw      DOT_C                   // [compile] .c
 989+ 743D 23 69                        dw      EXIT                    // ; immediate
 990+ 743F
 991+ 743F              //  ______________________________________________________________________
 992+ 743F              //
 993+ 743F              // .(           c --
 994+ 743F                              Colon_Def DOT_BRACKET,  ".(", is_immediate
 994+ 743F             >                New_Def  DOT_BRACKET, ".(", Enter_Ptr, is_immediate ; ok
 994+ 743F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 994+ 743F             >
 994+ 743F             >                // dummy db directives used to calculate length of namec
 994+ 743F 2E 28       >                db      ".("
 994+ 7441             >len_NFA         defl    $ - temp_NFA
 994+ 7441             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 994+ 743F             >
 994+ 743F C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 994+ 7440 2E 28       >                db      ".("               // name string in 7-bit ascii, but
 994+ 7442             >                org     $-1                 // alter last byte of Name just above to set
 994+ 7441 A8          >                db      {b $} | END_BIT     // msb as name end
 994+ 7442             >
 994+ 7442 30 74       >                dw      last_NFA            // Link to previous definition Name
 994+ 7444             >DOT_BRACKET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 994+ 7444 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 994+ 7446             >                else
 994+ 7446 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 994+ 7446             >                endif           ; ok        // for other definitions it "points" the correct handler
 994+ 7446             >                // Use of "; ok" to suppress "warning[fwdref]"
 994+ 7446             >
 994+ 7446             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 995+ 7446 A9 63 29 00                  dw      LIT, ")"                // [char] )
 996+ 744A 0E 74                        dw      DOT_C                   // [compile] .c
 997+ 744C 23 69                        dw      EXIT                    // ; immediate
 998+ 744E
 999+ 744E              //  ______________________________________________________________________
1000+ 744E              //
1001+ 744E              // (sgn)        a -- a f
1002+ 744E              // determines if char in addr a is a sign (+ or -), and in that case increments
1003+ 744E              // a flag. Returns f as the sign, true for negative, false for positive.
1004+ 744E              // called by NUMBER and (EXP)
1005+ 744E                              Colon_Def CSGN,  "(SGN)", is_normal
1005+ 744E             >                New_Def  CSGN, "(SGN)", Enter_Ptr, is_normal ; ok
1005+ 744E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1005+ 744E             >
1005+ 744E             >                // dummy db directives used to calculate length of namec
1005+ 744E 28 53 47 4E >                db      "(SGN)"
1005+ 7452 29          >
1005+ 7453             >len_NFA         defl    $ - temp_NFA
1005+ 7453             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1005+ 744E             >
1005+ 744E 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1005+ 744F 28 53 47 4E >                db      "(SGN)"               // name string in 7-bit ascii, but
1005+ 7453 29          >
1005+ 7454             >                org     $-1                 // alter last byte of Name just above to set
1005+ 7453 A9          >                db      {b $} | END_BIT     // msb as name end
1005+ 7454             >
1005+ 7454 3F 74       >                dw      last_NFA            // Link to previous definition Name
1005+ 7456             >CSGN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1005+ 7456 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1005+ 7458             >                else
1005+ 7458 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1005+ 7458             >                endif           ; ok        // for other definitions it "points" the correct handler
1005+ 7458             >                // Use of "; ok" to suppress "warning[fwdref]"
1005+ 7458             >
1005+ 7458             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1006+ 7458 B0 6A ED 69                  dw      DUP, ONE_PLUS, CFETCH   // dup 1+ c@
1006+ 745C 5E 6B
1007+ 745E B0 6A A9 63                  dw      DUP, LIT, "-", EQUALS   // dup [char] - =
1007+ 7462 2D 00 E3 6E
1008+ 7466                                                              // if
1009+ 7466 E3 63                        dw      ZBRANCH
1010+ 7468 12 00                        dw      CSgn_Else_0 - $
1011+ 746A 7B 6A                        dw          DROP                //      drop
1012+ 746C ED 69                        dw          ONE_PLUS            //      1+
1013+ 746E B7 6C 0D 6E                  dw          ONE, DPL, PLUSSTORE //      1 dpl +!
1013+ 7472 20 6B
1014+ 7474 B7 6C                        dw          ONE                 //      1
1015+ 7476                                                              // else
1016+ 7476 CC 63                        dw      BRANCH
1017+ 7478 16 00                        dw      CSgn_Endif_0 - $
1018+ 747A              CSgn_Else_0:
1019+ 747A A9 63 2B 00                  dw          LIT, "+", EQUALS    //      [char] + =
1019+ 747E E3 6E
1020+ 7480                                                              //      if
1021+ 7480 E3 63                        dw          ZBRANCH
1022+ 7482 0A 00                        dw          CSgn_Endif_1 - $
1023+ 7484 ED 69                        dw              ONE_PLUS        //          1+
1024+ 7486 B7 6C 0D 6E                  dw              ONE, DPL        //          1 dpl
1025+ 748A 20 6B                        dw              PLUSSTORE       //          +!
1026+ 748C              CSgn_Endif_1                                    //      endif
1027+ 748C AF 6C                        dw          ZERO                //      0
1028+ 748E              CSgn_Endif_0:                                   // endif
1029+ 748E 23 69                        dw      EXIT
1030+ 7490
1031+ 7490              //  ______________________________________________________________________
1032+ 7490              //
1033+ 7490              // (number)     d a -- d1 a1
1034+ 7490              // using the current BASE parse characters stored in address a
1035+ 7490              // accumulating a double precision integer d
1036+ 7490              // the process stops at the first not-convertible character
1037+ 7490              // A double-number is kept in CPU registers as HLDE.
1038+ 7490              // On the stack a double number is treated as two single numbers
1039+ 7490              // where HL is on the top of the stack and DE is the second from top,
1040+ 7490              // so in the stack memory it appears as LHED.
1041+ 7490              // Instead, in 2VARIABLE a double number is stored as EDLH.
1042+ 7490                              Colon_Def CNUMBER,  "(NUMBER)", is_normal
1042+ 7490             >                New_Def  CNUMBER, "(NUMBER)", Enter_Ptr, is_normal ; ok
1042+ 7490             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1042+ 7490             >
1042+ 7490             >                // dummy db directives used to calculate length of namec
1042+ 7490 28 4E 55 4D >                db      "(NUMBER)"
1042+ 7494 42 45 52 29 >
1042+ 7498             >len_NFA         defl    $ - temp_NFA
1042+ 7498             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1042+ 7490             >
1042+ 7490 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1042+ 7491 28 4E 55 4D >                db      "(NUMBER)"               // name string in 7-bit ascii, but
1042+ 7495 42 45 52 29 >
1042+ 7499             >                org     $-1                 // alter last byte of Name just above to set
1042+ 7498 A9          >                db      {b $} | END_BIT     // msb as name end
1042+ 7499             >
1042+ 7499 4E 74       >                dw      last_NFA            // Link to previous definition Name
1042+ 749B             >CNUMBER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1042+ 749B 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1042+ 749D             >                else
1042+ 749D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1042+ 749D             >                endif           ; ok        // for other definitions it "points" the correct handler
1042+ 749D             >                // Use of "; ok" to suppress "warning[fwdref]"
1042+ 749D             >
1042+ 749D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1043+ 749D                                                              // begin
1044+ 749D              CNumber_Begin:
1045+ 749D ED 69                        dw          ONE_PLUS            //      1+
1046+ 749F B0 6A 4C 69                  dw          DUP, TO_R           //      dup >r
1047+ 74A3 5E 6B                        dw          CFETCH              //      @
1048+ 74A5 04 6E 43 6B                  dw          BASE, FETCH         //      base @
1049+ 74A9 89 64                        dw          DIGIT               //      digit
1050+ 74AB                                                              // while
1051+ 74AB E3 63                        dw      ZBRANCH
1052+ 74AD 2C 00                        dw      CNumber_While_end - $
1053+ 74AF A3 6A                        dw          SWAP                //      swap
1054+ 74B1 04 6E 43 6B                  dw          BASE, FETCH         //      base @
1055+ 74B5 46 68                        dw          UM_MUL              //      um*
1056+ 74B7 7B 6A BD 6A                  dw          DROP, ROT           //      drop rot
1057+ 74BB 04 6E 43 6B                  dw          BASE, FETCH         //      base @
1058+ 74BF 46 68                        dw          UM_MUL              //      um*
1059+ 74C1 D1 69                        dw          DPLUS               //      d+
1060+ 74C3 0D 6E 43 6B                  dw          DPL, FETCH          //      dpl @
1061+ 74C7 ED 69                        dw          ONE_PLUS            //      1+
1062+ 74C9                                                              //      if
1063+ 74C9 E3 63                        dw          ZBRANCH
1064+ 74CB 08 00                        dw          CNumber_Endif - $
1065+ 74CD B7 6C 0D 6E                  dw              ONE, DPL        //          1 dpl
1066+ 74D1 20 6B                        dw              PLUSSTORE       //          +!
1067+ 74D3              CNumber_Endif:                                  //      endif
1068+ 74D3 60 69                        dw             R_TO             //      r>  ( balance rp )
1069+ 74D5 CC 63                        dw      BRANCH
1070+ 74D7 C6 FF                        dw      CNumber_Begin - $
1071+ 74D9              CNumber_While_end:                              // repeat
1072+ 74D9 60 69                        dw      R_TO                    // r>  ( balance rp on exit while-repeat )
1073+ 74DB 23 69                        dw      EXIT                    // ;
1074+ 74DD
1075+ 74DD              //  ______________________________________________________________________
1076+ 74DD              //
1077+ 74DD              // number       a -- d
1078+ 74DD                              Colon_Def NUMBER,  "NUMBER", is_normal
1078+ 74DD             >                New_Def  NUMBER, "NUMBER", Enter_Ptr, is_normal ; ok
1078+ 74DD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1078+ 74DD             >
1078+ 74DD             >                // dummy db directives used to calculate length of namec
1078+ 74DD 4E 55 4D 42 >                db      "NUMBER"
1078+ 74E1 45 52       >
1078+ 74E3             >len_NFA         defl    $ - temp_NFA
1078+ 74E3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1078+ 74DD             >
1078+ 74DD 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1078+ 74DE 4E 55 4D 42 >                db      "NUMBER"               // name string in 7-bit ascii, but
1078+ 74E2 45 52       >
1078+ 74E4             >                org     $-1                 // alter last byte of Name just above to set
1078+ 74E3 D2          >                db      {b $} | END_BIT     // msb as name end
1078+ 74E4             >
1078+ 74E4 90 74       >                dw      last_NFA            // Link to previous definition Name
1078+ 74E6             >NUMBER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1078+ 74E6 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1078+ 74E8             >                else
1078+ 74E8 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1078+ 74E8             >                endif           ; ok        // for other definitions it "points" the correct handler
1078+ 74E8             >                // Use of "; ok" to suppress "warning[fwdref]"
1078+ 74E8             >
1078+ 74E8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1079+ 74E8 AF 6C AF 6C                  dw      ZERO, ZERO              // 0 0
1080+ 74EC BD 6A                        dw      ROT                     // rot
1081+ 74EE 56 74 4C 69                  dw      CSGN, TO_R              // (sgn) >r
1082+ 74F2 D0 6C 0D 6E                  dw      NEG_ONE, DPL, STORE     // -1 dpl !
1082+ 74F6 50 6B
1083+ 74F8 9B 74                        dw      CNUMBER                 // (number)
1084+ 74FA B0 6A 5E 6B                  dw      DUP, CFETCH             // dup c@
1085+ 74FE A9 63 2E 00                  dw      LIT, 46, EQUALS         // [char] . =  ( decimal point )
1085+ 7502 E3 6E
1086+ 7504                                                              // if
1087+ 7504 E3 63                        dw      ZBRANCH
1088+ 7506 0A 00                        dw      Number_Endif_1 - $
1089+ 7508 AF 6C 0D 6E                  dw          ZERO, DPL, STORE    //      0 dpl !
1089+ 750C 50 6B
1090+ 750E 9B 74                        dw          CNUMBER             //      (number)
1091+ 7510              Number_Endif_1:                                 // endif
1092+ 7510 5E 6B D9 6C                  dw      CFETCH, BL              // c@ bl
1093+ 7514 D5 6E AF 6C                  dw      SUBTRACT, ZERO, QERROR  // - 0 ?error
1093+ 7518 4C 70
1094+ 751A 60 69                        dw      R_TO                    // r>
1095+ 751C                                                              // if
1096+ 751C E3 63                        dw      ZBRANCH
1097+ 751E 04 00                        dw      Number_Endif_2 - $
1098+ 7520 4D 6A                        dw          DMINUS              //      dminus
1099+ 7522              Number_Endif_2:                                 // endif
1100+ 7522 23 69                        dw      EXIT                    // ;
1101+ 7524
1102+ 7524              //  ______________________________________________________________________
1103+ 7524              //
1104+ 7524              // -find        a -- d
1105+ 7524                              Colon_Def LFIND,  "-FIND", is_normal
1105+ 7524             >                New_Def  LFIND, "-FIND", Enter_Ptr, is_normal ; ok
1105+ 7524             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1105+ 7524             >
1105+ 7524             >                // dummy db directives used to calculate length of namec
1105+ 7524 2D 46 49 4E >                db      "-FIND"
1105+ 7528 44          >
1105+ 7529             >len_NFA         defl    $ - temp_NFA
1105+ 7529             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1105+ 7524             >
1105+ 7524 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1105+ 7525 2D 46 49 4E >                db      "-FIND"               // name string in 7-bit ascii, but
1105+ 7529 44          >
1105+ 752A             >                org     $-1                 // alter last byte of Name just above to set
1105+ 7529 C4          >                db      {b $} | END_BIT     // msb as name end
1105+ 752A             >
1105+ 752A DD 74       >                dw      last_NFA            // Link to previous definition Name
1105+ 752C             >LFIND:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1105+ 752C 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1105+ 752E             >                else
1105+ 752E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1105+ 752E             >                endif           ; ok        // for other definitions it "points" the correct handler
1105+ 752E             >                // Use of "; ok" to suppress "warning[fwdref]"
1105+ 752E             >
1105+ 752E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1106+ 752E D9 6C 7A 73                  dw      BL, WORD                // bl word
1107+ 7532 E2 6D 43 6B                  dw      CONTEXT, FETCH, FETCH   // context @ @
1107+ 7536 43 6B
1108+ 7538 FE 64                        dw      C_FIND                  // (find)
1109+ 753A 5B 6F                        dw      QDUP                    // ?dup
1110+ 753C 81 69                        dw      ZEQUAL                  // 0=
1111+ 753E                                                              // if
1112+ 753E E3 63                        dw      ZBRANCH
1113+ 7540 08 00                        dw      LFind_Endif - $
1114+ 7542 81 6E                        dw          HERE                //      here
1115+ 7544 C8 6F                        dw          LATEST              //      latest
1116+ 7546 FE 64                        dw          C_FIND              //      (find)
1117+ 7548              LFind_Endif:                                    // endif
1118+ 7548 23 69                        dw      EXIT                    // ;
1119+ 754A
1120+ 754A              //  ______________________________________________________________________
1121+ 754A              //
1122+ 754A              // (abort)      --
1123+ 754A                              Colon_Def CABORT,  "(ABORT)", is_normal
1123+ 754A             >                New_Def  CABORT, "(ABORT)", Enter_Ptr, is_normal ; ok
1123+ 754A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1123+ 754A             >
1123+ 754A             >                // dummy db directives used to calculate length of namec
1123+ 754A 28 41 42 4F >                db      "(ABORT)"
1123+ 754E 52 54 29    >
1123+ 7551             >len_NFA         defl    $ - temp_NFA
1123+ 7551             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1123+ 754A             >
1123+ 754A 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1123+ 754B 28 41 42 4F >                db      "(ABORT)"               // name string in 7-bit ascii, but
1123+ 754F 52 54 29    >
1123+ 7552             >                org     $-1                 // alter last byte of Name just above to set
1123+ 7551 A9          >                db      {b $} | END_BIT     // msb as name end
1123+ 7552             >
1123+ 7552 24 75       >                dw      last_NFA            // Link to previous definition Name
1123+ 7554             >CABORT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1123+ 7554 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1123+ 7556             >                else
1123+ 7556 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1123+ 7556             >                endif           ; ok        // for other definitions it "points" the correct handler
1123+ 7556             >                // Use of "; ok" to suppress "warning[fwdref]"
1123+ 7556             >
1123+ 7556             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1124+ 7556 1B 78                        dw      ABORT                   // abort
1125+ 7558 23 69                        dw      EXIT                    // ;
1126+ 755A
1127+ 755A              //  ______________________________________________________________________
1128+ 755A              //
1129+ 755A              // error        n --
1130+ 755A              // raise an error
1131+ 755A              // if WARNING is 0, prints "MSG#n".
1132+ 755A              // if WARNING is 1, prints line n of screen 4.
1133+ 755A              // if WARNING is -1 does (ABORT) that normally does ABORT
1134+ 755A              // value can be negative or beyond block 4.
1135+ 755A                              Colon_Def ERROR,  "ERROR", is_normal
1135+ 755A             >                New_Def  ERROR, "ERROR", Enter_Ptr, is_normal ; ok
1135+ 755A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1135+ 755A             >
1135+ 755A             >                // dummy db directives used to calculate length of namec
1135+ 755A 45 52 52 4F >                db      "ERROR"
1135+ 755E 52          >
1135+ 755F             >len_NFA         defl    $ - temp_NFA
1135+ 755F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1135+ 755A             >
1135+ 755A 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1135+ 755B 45 52 52 4F >                db      "ERROR"               // name string in 7-bit ascii, but
1135+ 755F 52          >
1135+ 7560             >                org     $-1                 // alter last byte of Name just above to set
1135+ 755F D2          >                db      {b $} | END_BIT     // msb as name end
1135+ 7560             >
1135+ 7560 4A 75       >                dw      last_NFA            // Link to previous definition Name
1135+ 7562             >ERROR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1135+ 7562 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1135+ 7564             >                else
1135+ 7564 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1135+ 7564             >                endif           ; ok        // for other definitions it "points" the correct handler
1135+ 7564             >                // Use of "; ok" to suppress "warning[fwdref]"
1135+ 7564             >
1135+ 7564             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1136+ 7564 5A 6D 43 6B                  dw      WARNING, FETCH, ZLESS   // warning @ 0<
1136+ 7568 9C 69
1137+ 756A                                                              // if
1138+ 756A E3 63                        dw      ZBRANCH
1139+ 756C 04 00                        dw      Error_Endif_1 - $
1140+ 756E 54 75                        dw          CABORT              //      (abort)
1141+ 7570              Error_Endif_1:                                  // endif
1142+ 7570 81 6E E6 71                  dw      HERE, COUNT, TYPE       // here count type
1142+ 7574 0C 72
1143+ 7576 C9 73                        dw      C_DOT_QUOTE             // .( ? )
1144+ 7578 02 3F 20                     db      2, "? "
1145+ 757B 00 7A                        dw      MESSAGE                 // message  ( forward )
1146+ 757D 31 6D 43 6B                  dw      S0, FETCH, SPSTORE      // s0 @ sp!
1146+ 7581 FC 68
1147+ 7583 AE 6D 43 6B                  dw      BLK, FETCH, QDUP        // blk @ ?dup
1147+ 7587 5B 6F
1148+ 7589                                                              // if
1149+ 7589 E3 63                        dw      ZBRANCH
1150+ 758B 08 00                        dw      Error_Endif_2 - $
1151+ 758D B7 6D 43 6B                  dw          TO_IN, FETCH, SWAP  //      >in @ swap
1151+ 7591 A3 6A
1152+ 7593              Error_Endif_2:                                  // endif
1153+ 7593 DA 77                        dw      QUIT                    // quit ( forward )
1154+ 7595 23 69                        dw      EXIT                    // ;
1155+ 7597              //  ______________________________________________________________________
1156+ 7597              //
1157+ 7597              // id.          nfa --
1158+ 7597                              Colon_Def ID_DOT,  "ID.", is_normal
1158+ 7597             >                New_Def  ID_DOT, "ID.", Enter_Ptr, is_normal ; ok
1158+ 7597             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1158+ 7597             >
1158+ 7597             >                // dummy db directives used to calculate length of namec
1158+ 7597 49 44 2E    >                db      "ID."
1158+ 759A             >len_NFA         defl    $ - temp_NFA
1158+ 759A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1158+ 7597             >
1158+ 7597 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1158+ 7598 49 44 2E    >                db      "ID."               // name string in 7-bit ascii, but
1158+ 759B             >                org     $-1                 // alter last byte of Name just above to set
1158+ 759A AE          >                db      {b $} | END_BIT     // msb as name end
1158+ 759B             >
1158+ 759B 5A 75       >                dw      last_NFA            // Link to previous definition Name
1158+ 759D             >ID_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1158+ 759D 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1158+ 759F             >                else
1158+ 759F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1158+ 759F             >                endif           ; ok        // for other definitions it "points" the correct handler
1158+ 759F             >                // Use of "; ok" to suppress "warning[fwdref]"
1158+ 759F             >
1158+ 759F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1159+ 759F 67 73 A9 63                  dw      PAD, LIT, 32, LIT, 96   // pad 32 96
1159+ 75A3 20 00 A9 63
1159+ 75A7 60 00
1160+ 75A9 16 73                        dw      FILL                    // fill
1161+ 75AB B0 6A 06 70                  dw      DUP, PFA, LFA           // dup pfa lfa
1161+ 75AF D8 6F
1162+ 75B1 6B 6A D5 6E                  dw      OVER, SUBTRACT          // over -
1163+ 75B5 67 73 A3 6A                  dw      PAD, SWAP               // pad swap
1164+ 75B9 11 68                        dw      CMOVE                   // cmove
1165+ 75BB 67 73 E6 71                  dw      PAD, COUNT, LIT, $1F    // pad count 01F
1165+ 75BF A9 63 1F 00
1166+ 75C3 B5 68                        dw      AND_OP                  // and  ( use only lower bits )
1167+ 75C5 0C 72 92 6F                  dw      TYPE, SPACE             // type
1168+ 75C9 23 69                        dw      EXIT                    // ;
1169+ 75CB
1170+ 75CB              //  ______________________________________________________________________
1171+ 75CB              //
1172+ 75CB              // code         -- cccc
1173+ 75CB                              Colon_Def CODE,  "CODE", is_normal
1173+ 75CB             >                New_Def  CODE, "CODE", Enter_Ptr, is_normal ; ok
1173+ 75CB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1173+ 75CB             >
1173+ 75CB             >                // dummy db directives used to calculate length of namec
1173+ 75CB 43 4F 44 45 >                db      "CODE"
1173+ 75CF             >len_NFA         defl    $ - temp_NFA
1173+ 75CF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1173+ 75CB             >
1173+ 75CB 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1173+ 75CC 43 4F 44 45 >                db      "CODE"               // name string in 7-bit ascii, but
1173+ 75D0             >                org     $-1                 // alter last byte of Name just above to set
1173+ 75CF C5          >                db      {b $} | END_BIT     // msb as name end
1173+ 75D0             >
1173+ 75D0 97 75       >                dw      last_NFA            // Link to previous definition Name
1173+ 75D2             >CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1173+ 75D2 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1173+ 75D4             >                else
1173+ 75D4 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1173+ 75D4             >                endif           ; ok        // for other definitions it "points" the correct handler
1173+ 75D4             >                // Use of "; ok" to suppress "warning[fwdref]"
1173+ 75D4             >
1173+ 75D4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1174+ 75D4 2C 75                        dw      LFIND                   // -find
1175+ 75D6                                                              // if
1176+ 75D6 E3 63                        dw      ZBRANCH
1177+ 75D8 10 00                        dw      Code_Endif - $
1178+ 75DA 7B 6A                        dw          DROP                //      drop
1179+ 75DC 2A 70 9D 75                  dw          TO_NAME, ID_DOT     //      >name id.
1180+ 75E0 A9 63 04 00                  dw          LIT, 4, MESSAGE     //      4 message
1180+ 75E4 00 7A
1181+ 75E6 92 6F                        dw          SPACE               //      space
1182+ 75E8              Code_Endif:                                     // endif
1183+ 75E8 81 6E                        dw      HERE                    // here
1184+ 75EA                                                              // ( ---- here begins NFA ---- )
1185+ 75EA B0 6A 5E 6B                  dw      DUP, CFETCH             // dup c@
1186+ 75EE 4D 6D 43 6B                  dw      WIDTH, FETCH, MIN       // width @ min  ( max 31 character length )
1186+ 75F2 2E 6F
1187+ 75F4 ED 69 91 6E                  dw      ONE_PLUS, ALLOT         // 1+ allot
1188+ 75F8 B0 6A                        dw      DUP                     // dup
1189+ 75FA A9 63                        dw      LIT
1190+ 75FC A0 00                        dw      SMUDGE_BIT | END_BIT    // 160
1191+ 75FE 36 6B                        dw      TOGGLE                  // toggle
1192+ 7600 81 6E F9 69                  dw      HERE, ONE_SUBTRACT     // here 1- ( last character )
1193+ 7604 A9 63 80 00                  dw      LIT, END_BIT, TOGGLE    // 128 toggle
1193+ 7608 36 6B
1194+ 760A                                                              // ( ---- here is LFA ---- )
1195+ 760A C8 6F 9D 6E                  dw      LATEST, COMMA           // latest ,
1196+ 760E EF 6D 43 6B                  dw      CURRENT, FETCH, STORE   // current @ ! ( save this word as the latest )
1196+ 7612 50 6B
1197+ 7614 81 6E 15 6A                  dw      HERE, CELL_PLUS, COMMA  // ( CFA point PFA )
1197+ 7618 9D 6E
1198+ 761A 23 69                        dw      EXIT                    // ;
1199+ 761C
1200+ 761C              //  ______________________________________________________________________
1201+ 761C              //
1202+ 761C              // create       -- cccc     ( compile time )
1203+ 761C              //              -- a        ( run time )
1204+ 761C                              Colon_Def CREATE,  "CREATE", is_normal
1204+ 761C             >                New_Def  CREATE, "CREATE", Enter_Ptr, is_normal ; ok
1204+ 761C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1204+ 761C             >
1204+ 761C             >                // dummy db directives used to calculate length of namec
1204+ 761C 43 52 45 41 >                db      "CREATE"
1204+ 7620 54 45       >
1204+ 7622             >len_NFA         defl    $ - temp_NFA
1204+ 7622             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1204+ 761C             >
1204+ 761C 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1204+ 761D 43 52 45 41 >                db      "CREATE"               // name string in 7-bit ascii, but
1204+ 7621 54 45       >
1204+ 7623             >                org     $-1                 // alter last byte of Name just above to set
1204+ 7622 C5          >                db      {b $} | END_BIT     // msb as name end
1204+ 7623             >
1204+ 7623 CB 75       >                dw      last_NFA            // Link to previous definition Name
1204+ 7625             >CREATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1204+ 7625 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1204+ 7627             >                else
1204+ 7627 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1204+ 7627             >                endif           ; ok        // for other definitions it "points" the correct handler
1204+ 7627             >                // Use of "; ok" to suppress "warning[fwdref]"
1204+ 7627             >
1204+ 7627             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1205+ 7627 D2 75 2B 71                  dw      CODE, SMUDGE        // code smudge
1206+ 762B
1207+ 762B
1208+ 762B 81 71                        dw      C_SEMICOLON_CODE
1209+ 762D                              // this routine is called from the call coded in CFA
1210+ 762D              Create_Ptr:
1211+ 762D 13                           inc     de
1212+ 762E D5                           push    de                  // balance TOS before overwrite it
1213+ 762F
1214+ 762F                              next
1214+ 762F DD E9       >                jp      (ix)
1215+ 7631
1216+ 7631              //  ______________________________________________________________________
1217+ 7631              //
1218+ 7631              // [compile]    -- cccc     ( compile time )
1219+ 7631                              Colon_Def COMPILE_IMMEDIATE,  "[COMPILE]", is_immediate
1219+ 7631             >                New_Def  COMPILE_IMMEDIATE, "[COMPILE]", Enter_Ptr, is_immediate ; ok
1219+ 7631             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1219+ 7631             >
1219+ 7631             >                // dummy db directives used to calculate length of namec
1219+ 7631 5B 43 4F 4D >                db      "[COMPILE]"
1219+ 7635 50 49 4C 45 >
1219+ 7639 5D          >
1219+ 763A             >len_NFA         defl    $ - temp_NFA
1219+ 763A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1219+ 7631             >
1219+ 7631 C9          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1219+ 7632 5B 43 4F 4D >                db      "[COMPILE]"               // name string in 7-bit ascii, but
1219+ 7636 50 49 4C 45 >
1219+ 763A 5D          >
1219+ 763B             >                org     $-1                 // alter last byte of Name just above to set
1219+ 763A DD          >                db      {b $} | END_BIT     // msb as name end
1219+ 763B             >
1219+ 763B 1C 76       >                dw      last_NFA            // Link to previous definition Name
1219+ 763D             >COMPILE_IMMEDIATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1219+ 763D 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1219+ 763F             >                else
1219+ 763F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1219+ 763F             >                endif           ; ok        // for other definitions it "points" the correct handler
1219+ 763F             >                // Use of "; ok" to suppress "warning[fwdref]"
1219+ 763F             >
1219+ 763F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1220+ 763F 2C 75                        dw      LFIND                   // -find      (  cfa  b  f  )
1221+ 7641 81 69                        dw      ZEQUAL                  // 0=         (  cfa  b  )
1222+ 7643 AF 6C 4C 70                  dw      ZERO, QERROR            // 0 ?error
1223+ 7647 7B 6A                        dw      DROP                    // drop       (  cfa  )
1224+ 7649 9D 6E                        dw      COMMA                   // ,
1225+ 764B 23 69                        dw      EXIT                    // ; immediate
1226+ 764D
1227+ 764D              //  ______________________________________________________________________
1228+ 764D              //
1229+ 764D              // literal      n --      ( compile time )
1230+ 764D                              Colon_Def LITERAL,  "LITERAL", is_immediate
1230+ 764D             >                New_Def  LITERAL, "LITERAL", Enter_Ptr, is_immediate ; ok
1230+ 764D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1230+ 764D             >
1230+ 764D             >                // dummy db directives used to calculate length of namec
1230+ 764D 4C 49 54 45 >                db      "LITERAL"
1230+ 7651 52 41 4C    >
1230+ 7654             >len_NFA         defl    $ - temp_NFA
1230+ 7654             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1230+ 764D             >
1230+ 764D C7          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1230+ 764E 4C 49 54 45 >                db      "LITERAL"               // name string in 7-bit ascii, but
1230+ 7652 52 41 4C    >
1230+ 7655             >                org     $-1                 // alter last byte of Name just above to set
1230+ 7654 CC          >                db      {b $} | END_BIT     // msb as name end
1230+ 7655             >
1230+ 7655 31 76       >                dw      last_NFA            // Link to previous definition Name
1230+ 7657             >LITERAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1230+ 7657 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1230+ 7659             >                else
1230+ 7659 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1230+ 7659             >                endif           ; ok        // for other definitions it "points" the correct handler
1230+ 7659             >                // Use of "; ok" to suppress "warning[fwdref]"
1230+ 7659             >
1230+ 7659             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1231+ 7659 FA 6D 43 6B                  dw      STATE, FETCH            // state @
1232+ 765D                                                              // if
1233+ 765D E3 63                        dw      ZBRANCH
1234+ 765F 08 00                        dw      Literal_Endif - $
1235+ 7661 DF 70 A9 63                  dw          COMPILE, LIT        //      compile lit
1236+ 7665 9D 6E                        dw          COMMA               //      ,
1237+ 7667              Literal_Endif:                                  // endif
1238+ 7667 23 69                        dw      EXIT                    // ; immediate
1239+ 7669
1240+ 7669              //  ______________________________________________________________________
1241+ 7669              //
1242+ 7669              // dliteral     n --      ( compile time )
1243+ 7669                              Colon_Def DLITERAL,  "DLITERAL", is_immediate
1243+ 7669             >                New_Def  DLITERAL, "DLITERAL", Enter_Ptr, is_immediate ; ok
1243+ 7669             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1243+ 7669             >
1243+ 7669             >                // dummy db directives used to calculate length of namec
1243+ 7669 44 4C 49 54 >                db      "DLITERAL"
1243+ 766D 45 52 41 4C >
1243+ 7671             >len_NFA         defl    $ - temp_NFA
1243+ 7671             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1243+ 7669             >
1243+ 7669 C8          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1243+ 766A 44 4C 49 54 >                db      "DLITERAL"               // name string in 7-bit ascii, but
1243+ 766E 45 52 41 4C >
1243+ 7672             >                org     $-1                 // alter last byte of Name just above to set
1243+ 7671 CC          >                db      {b $} | END_BIT     // msb as name end
1243+ 7672             >
1243+ 7672 4D 76       >                dw      last_NFA            // Link to previous definition Name
1243+ 7674             >DLITERAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1243+ 7674 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1243+ 7676             >                else
1243+ 7676 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1243+ 7676             >                endif           ; ok        // for other definitions it "points" the correct handler
1243+ 7676             >                // Use of "; ok" to suppress "warning[fwdref]"
1243+ 7676             >
1243+ 7676             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1244+ 7676 FA 6D 43 6B                  dw      STATE, FETCH            // state @
1245+ 767A                                                              // if
1246+ 767A E3 63                        dw      ZBRANCH
1247+ 767C 08 00                        dw      DLiteral_Endif - $
1248+ 767E A3 6A                        dw          SWAP                //      swap
1249+ 7680 57 76 57 76                  dw          LITERAL,  LITERAL   //      [compile] literal [compile] literal
1250+ 7684              DLiteral_Endif:                                 // endif
1251+ 7684 23 69                        dw      EXIT                    // ; immediate
1252+ 7686
1253+ 7686              //  ______________________________________________________________________
1254+ 7686              //
1255+ 7686              // [char]       n --      ( compile time )
1256+ 7686              // inside colon definition, gets first character from next input word
1257+ 7686              // and compiles it as literal.
1258+ 7686                              Colon_Def COMPILE_CHAR,  "[CHAR]", is_immediate
1258+ 7686             >                New_Def  COMPILE_CHAR, "[CHAR]", Enter_Ptr, is_immediate ; ok
1258+ 7686             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1258+ 7686             >
1258+ 7686             >                // dummy db directives used to calculate length of namec
1258+ 7686 5B 43 48 41 >                db      "[CHAR]"
1258+ 768A 52 5D       >
1258+ 768C             >len_NFA         defl    $ - temp_NFA
1258+ 768C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1258+ 7686             >
1258+ 7686 C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1258+ 7687 5B 43 48 41 >                db      "[CHAR]"               // name string in 7-bit ascii, but
1258+ 768B 52 5D       >
1258+ 768D             >                org     $-1                 // alter last byte of Name just above to set
1258+ 768C DD          >                db      {b $} | END_BIT     // msb as name end
1258+ 768D             >
1258+ 768D 69 76       >                dw      last_NFA            // Link to previous definition Name
1258+ 768F             >COMPILE_CHAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1258+ 768F 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1258+ 7691             >                else
1258+ 7691 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1258+ 7691             >                endif           ; ok        // for other definitions it "points" the correct handler
1258+ 7691             >                // Use of "; ok" to suppress "warning[fwdref]"
1258+ 7691             >
1258+ 7691             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1259+ 7691 E4 73 57 76                  dw      CHAR, LITERAL           // char [compile] literal
1260+ 7695 23 69                        dw      EXIT                    // ; immediate
1261+ 7697
1262+ 7697              //  ______________________________________________________________________
1263+ 7697              //
1264+ 7697              // 0x00         n --      ( compile time )
1265+ 7697                              Colon_Def NUL_WORD,  $00, is_immediate
1265+ 7697             >                New_Def  NUL_WORD, $00, Enter_Ptr, is_immediate ; ok
1265+ 7697             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1265+ 7697             >
1265+ 7697             >                // dummy db directives used to calculate length of namec
1265+ 7697 00          >                db      $00
1265+ 7698             >len_NFA         defl    $ - temp_NFA
1265+ 7698             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1265+ 7697             >
1265+ 7697 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1265+ 7698 00          >                db      $00               // name string in 7-bit ascii, but
1265+ 7699             >                org     $-1                 // alter last byte of Name just above to set
1265+ 7698 80          >                db      {b $} | END_BIT     // msb as name end
1265+ 7699             >
1265+ 7699 86 76       >                dw      last_NFA            // Link to previous definition Name
1265+ 769B             >NUL_WORD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1265+ 769B 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1265+ 769D             >                else
1265+ 769D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1265+ 769D             >                endif           ; ok        // for other definitions it "points" the correct handler
1265+ 769D             >                // Use of "; ok" to suppress "warning[fwdref]"
1265+ 769D             >
1265+ 769D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1266+ 769D AE 6D 43 6B                  dw      BLK, FETCH, ONE         // blk @ 1
1266+ 76A1 B7 6C
1267+ 76A3 20 6F                        dw      GREATER                 // > if
1268+ 76A5                                                              // if
1269+ 76A5 E3 63                        dw      ZBRANCH
1270+ 76A7 28 00                        dw      Nul_Else_1 - $
1271+ 76A9 B7 6C AE 6D                  dw          ONE, BLK, PLUSSTORE //      1 blk +!
1271+ 76AD 20 6B
1272+ 76AF AF 6C B7 6D                  dw          ZERO, TO_IN, STORE  //      0 >in !
1272+ 76B3 50 6B
1273+ 76B5 AE 6D 43 6B                  dw          BLK, FETCH          //      blk @
1274+ 76B9 FB 6C                        dw          BSCR                //      b/scr
1275+ 76BB F9 69                        dw          ONE_SUBTRACT        //      1 -
1276+ 76BD B5 68                        dw          AND_OP              //      and  ( this is tricky )
1277+ 76BF 81 69                        dw          ZEQUAL              //      0=
1278+ 76C1                                                              //      if
1279+ 76C1 E3 63                        dw          ZBRANCH
1280+ 76C3 08 00                        dw          Nul_Endif_2 - $
1281+ 76C5 7E 70                        dw              QEXEC           //          ?exec
1282+ 76C7 60 69 7B 6A                  dw              R_TO, DROP      //          r> drop
1283+ 76CB              Nul_Endif_2:                                    //      endif
1284+ 76CB CC 63                        dw      BRANCH
1285+ 76CD 06 00                        dw      Nul_Endif_1 - $
1286+ 76CF              Nul_Else_1:                                     // else
1287+ 76CF 60 69 7B 6A                  dw          R_TO, DROP          //      r> drop
1288+ 76D3              Nul_Endif_1:                                    // endif
1289+ 76D3 23 69                        dw      EXIT                    // ;
1290+ 76D5
1291+ 76D5              //  ______________________________________________________________________
1292+ 76D5              //
1293+ 76D5              // ?stack       --
1294+ 76D5              // Raise error #1 if stack is empty and you pop it
1295+ 76D5              // Raise error #7 if stack is full.
1296+ 76D5              // This means SP must always stay between HERE and FFFF
1297+ 76D5              // For 128K BANK paging purpose SP must be <= BFE0 and 50 words room
1298+ 76D5              // for Next 8K MMU paging this is $DOE8
1299+ 76D5                              Colon_Def QSTACK, "?STACK", is_normal
1299+ 76D5             >                New_Def  QSTACK, "?STACK", Enter_Ptr, is_normal ; ok
1299+ 76D5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1299+ 76D5             >
1299+ 76D5             >                // dummy db directives used to calculate length of namec
1299+ 76D5 3F 53 54 41 >                db      "?STACK"
1299+ 76D9 43 4B       >
1299+ 76DB             >len_NFA         defl    $ - temp_NFA
1299+ 76DB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1299+ 76D5             >
1299+ 76D5 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1299+ 76D6 3F 53 54 41 >                db      "?STACK"               // name string in 7-bit ascii, but
1299+ 76DA 43 4B       >
1299+ 76DC             >                org     $-1                 // alter last byte of Name just above to set
1299+ 76DB CB          >                db      {b $} | END_BIT     // msb as name end
1299+ 76DC             >
1299+ 76DC 97 76       >                dw      last_NFA            // Link to previous definition Name
1299+ 76DE             >QSTACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1299+ 76DE 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1299+ 76E0             >                else
1299+ 76E0 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1299+ 76E0             >                endif           ; ok        // for other definitions it "points" the correct handler
1299+ 76E0             >                // Use of "; ok" to suppress "warning[fwdref]"
1299+ 76E0             >
1299+ 76E0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1300+ 76E0 ED 68                        dw      SPFETCH                 // sp@
1301+ 76E2 31 6D 43 6B                  dw      S0, FETCH               // s0 @
1302+ 76E6 A3 6A F0 6E                  dw      SWAP, ULESS             // swap u<
1303+ 76EA B7 6C 4C 70                  dw      ONE, QERROR             // 1 ?error
1304+ 76EE 81 6E                        dw      HERE                    // here
1305+ 76F0 31 6D 43 6B                  dw      S0, FETCH, LESS         // s0 @ <
1305+ 76F4 04 6F
1306+ 76F6                                                              // if
1307+ 76F6 E3 63                        dw      ZBRANCH
1308+ 76F8 14 00                        dw      QStack_Endif - $
1309+ 76FA ED 68                        dw          SPFETCH             //      sp@
1310+ 76FC 81 6E A9 63                  dw          HERE, LIT, 128      //      here 128
1310+ 7700 80 00
1311+ 7702 C4 69 F0 6E                  dw          PLUS, ULESS         //      plus u<
1312+ 7706 A9 63 07 00                  dw          LIT, 7, QERROR      //      7 Cerror
1312+ 770A 4C 70
1313+ 770C              QStack_Endif:                                   // endif
1314+ 770C 23 69                        dw      EXIT                    // ;
1315+ 770E
1316+ 770E
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L1.asm
 110  770E                              include "L2.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L2.asm
   1+ 770E              //  ______________________________________________________________________
   2+ 770E              //
   3+ 770E              //  L2.asm
   4+ 770E              //
   5+ 770E              //  Level-2
   6+ 770E              //  the Forth interpreter, vocabulary, cold/warm start and quit from Forth.
   7+ 770E              //  ______________________________________________________________________
   8+ 770E
   9+ 770E
  10+ 770E              //  ______________________________________________________________________
  11+ 770E              //
  12+ 770E              // interpret    --
  13+ 770E              // This is the text interpreter.
  14+ 770E              // It executes or compiles, depending on STATE, the text coming from
  15+ 770E              // current input stream.
  16+ 770E              // If the word search fails after parsing CONTEXT and CURRENT vocabulary,
  17+ 770E              // the word is interpreted as numeric and converted, using current BASE,
  18+ 770E              // leaving on top of stack a single or double precision number, depending
  19+ 770E              // on the presence of a decimal point.
  20+ 770E              // If the number conversion fails, the terminal is notified with ? followed
  21+ 770E              // by the offending word.
  22+ 770E                              Colon_Def INTERPRET, "INTERPRET", is_normal
  22+ 770E             >                New_Def  INTERPRET, "INTERPRET", Enter_Ptr, is_normal ; ok
  22+ 770E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  22+ 770E             >
  22+ 770E             >                // dummy db directives used to calculate length of namec
  22+ 770E 49 4E 54 45 >                db      "INTERPRET"
  22+ 7712 52 50 52 45 >
  22+ 7716 54          >
  22+ 7717             >len_NFA         defl    $ - temp_NFA
  22+ 7717             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  22+ 770E             >
  22+ 770E 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  22+ 770F 49 4E 54 45 >                db      "INTERPRET"               // name string in 7-bit ascii, but
  22+ 7713 52 50 52 45 >
  22+ 7717 54          >
  22+ 7718             >                org     $-1                 // alter last byte of Name just above to set
  22+ 7717 D4          >                db      {b $} | END_BIT     // msb as name end
  22+ 7718             >
  22+ 7718 D5 76       >                dw      last_NFA            // Link to previous definition Name
  22+ 771A             >INTERPRET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  22+ 771A 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  22+ 771C             >                else
  22+ 771C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  22+ 771C             >                endif           ; ok        // for other definitions it "points" the correct handler
  22+ 771C             >                // Use of "; ok" to suppress "warning[fwdref]"
  22+ 771C             >
  22+ 771C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  23+ 771C
  24+ 771C              Interpret_Begin:                                        // begin
  25+ 771C 2C 75                        dw          LFIND                       //      -find
  26+ 771E                                                                      //      if
  27+ 771E E3 63                        dw          ZBRANCH
  28+ 7720 1A 00                        dw          Interpret_Else_1 - $
  29+ 7722 FA 6D 43 6B                  dw              STATE, FETCH, LESS      //          state @ <
  29+ 7726 04 6F
  30+ 7728                                                                      //          if
  31+ 7728 E3 63                        dw              ZBRANCH
  32+ 772A 08 00                        dw              Interpret_Else_2 - $
  33+ 772C FC 70                        dw                  COMPILE_XT          //              compile,
  34+ 772E                                                                      //          else
  35+ 772E CC 63                        dw              BRANCH
  36+ 7730 06 00                        dw              Interpret_Endif_2 - $
  37+ 7732              Interpret_Else_2:
  38+ 7732 BE 63 5C 6C                  dw                  EXECUTE, NOOP       //              execute nooop
  39+ 7736              Interpret_Endif_2:                                      //          endif
  40+ 7736                                                                      //      else
  41+ 7736 CC 63                        dw          BRANCH
  42+ 7738 1A 00                        dw          Interpret_Endif_1 - $
  43+ 773A              Interpret_Else_1:
  44+ 773A 81 6E E6 74                  dw              HERE, NUMBER            //          here number
  45+ 773E 0D 6E 43 6B                  dw              DPL, FETCH, ONE_PLUS    //          dpl @ 1+
  45+ 7742 ED 69
  46+ 7744                                                                      //          if
  47+ 7744 E3 63                        dw              ZBRANCH
  48+ 7746 08 00                        dw              Interpret_Else_3 - $
  49+ 7748              //              dw                  NMODE, FETCH        //              nmode @
  50+ 7748              //                                                      //              if
  51+ 7748              //              dw                  ZBRANCH
  52+ 7748              //              dw                  Interpret_Endif_4 - $
  53+ 7748              //              dw                      ONE, ZERO       //                  1 0
  54+ 7748              //              dw                      TWO_DROP        //                  2drop
  55+ 7748              //Interpret_Endif_4:                                      //              endif
  56+ 7748 74 76                        dw                  DLITERAL            //              [compile] dliteral
  57+ 774A                                                                      //          else
  58+ 774A CC 63                        dw              BRANCH
  59+ 774C 06 00                        dw              Interpret_Endif_3 - $
  60+ 774E              Interpret_Else_3:
  61+ 774E 7B 6A                        dw                  DROP                //              drop
  62+ 7750 57 76                        dw                  LITERAL             //              [compile]  literal
  63+ 7752              Interpret_Endif_3:                                      //          endif
  64+ 7752              Interpret_Endif_1:                                      //      endif
  65+ 7752 DE 76                        dw          QSTACK                      //      ?stack
  66+ 7754 0C 67                        dw          QTERMINAL                   //      ?terminal
  67+ 7756                                                                      //      if
  68+ 7756 E3 63                        dw          ZBRANCH
  69+ 7758 04 00                        dw          Interpret_Endif_5 - $
  70+ 775A 54 75                        dw              CABORT                  //          (abort)
  71+ 775C              Interpret_Endif_5:                                      //      endif
  72+ 775C CC 63                        dw      BRANCH
  73+ 775E BE FF                        dw      Interpret_Begin - $
  74+ 7760 23 69                        dw      EXIT                            // ;
  75+ 7762
  76+ 7762              //  ______________________________________________________________________
  77+ 7762              //
  78+ 7762              // vocabulary   -- cccc     ( compile time )
  79+ 7762              // Defining word used in the form   VOCABULARY cccc
  80+ 7762              // creates the word  cccc  that gives the name to the vocabulary.
  81+ 7762              // Giving  cccc  makes the vocabulary CONTEXT so its words are executed first
  82+ 7762              // Giving  cccc DEFINITIONS makes  the vocabulary  CURRENT
  83+ 7762              // so new definitions can be inserted in that vocabulary.
  84+ 7762                              Colon_Def VOCABULARY, "VOCABULARY", is_normal
  84+ 7762             >                New_Def  VOCABULARY, "VOCABULARY", Enter_Ptr, is_normal ; ok
  84+ 7762             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  84+ 7762             >
  84+ 7762             >                // dummy db directives used to calculate length of namec
  84+ 7762 56 4F 43 41 >                db      "VOCABULARY"
  84+ 7766 42 55 4C 41 >
  84+ 776A 52 59       >
  84+ 776C             >len_NFA         defl    $ - temp_NFA
  84+ 776C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  84+ 7762             >
  84+ 7762 8A          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  84+ 7763 56 4F 43 41 >                db      "VOCABULARY"               // name string in 7-bit ascii, but
  84+ 7767 42 55 4C 41 >
  84+ 776B 52 59       >
  84+ 776D             >                org     $-1                 // alter last byte of Name just above to set
  84+ 776C D9          >                db      {b $} | END_BIT     // msb as name end
  84+ 776D             >
  84+ 776D 0E 77       >                dw      last_NFA            // Link to previous definition Name
  84+ 776F             >VOCABULARY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  84+ 776F 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  84+ 7771             >                else
  84+ 7771 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  84+ 7771             >                endif           ; ok        // for other definitions it "points" the correct handler
  84+ 7771             >                // Use of "; ok" to suppress "warning[fwdref]"
  84+ 7771             >
  84+ 7771             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  85+ 7771
  86+ 7771 AF 71                        dw      CBUILDS
  87+ 7773
  88+ 7773 A9 63 81 A0                  dw      LIT, $A081, COMMA       // $81A0 ,
  88+ 7777 9D 6E
  89+ 7779 EF 6D 43 6B                  dw      CURRENT, FETCH          // current @
  90+ 777D 1F 6A 9D 6E                  dw      CELL_MINUS, COMMA       // cell- ,
  91+ 7781 81 6E                        dw      HERE                    // here
  92+ 7783 7B 6D 43 6B                  dw      VOC_LINK, FETCH, COMMA  // voc-link @ ,
  92+ 7787 9D 6E
  93+ 7789 7B 6D 50 6B                  dw      VOC_LINK, STORE         // voc-link !
  94+ 778D
  95+ 778D BF 71                        dw      DOES_TO                 // does>
  96+ 778F              Vocabulary_Does:
  97+ 778F 15 6A                        dw      CELL_PLUS               // cell+
  98+ 7791 E2 6D 50 6B                  dw      CONTEXT, STORE          // context !
  99+ 7795 23 69                        dw      EXIT                    // ;
 100+ 7797
 101+ 7797              //  ______________________________________________________________________
 102+ 7797              //
 103+ 7797              // forth        --
 104+ 7797              // Name of the first vocabulary.
 105+ 7797              // It makes FORTH the CONTEXT vocabulary.
 106+ 7797              // Until new user vocabulary are defined, new colon-definitions becomes
 107+ 7797              // part of FORTH. It is immediate, so it will executed during the creation
 108+ 7797              // of a colon definition to be able to select the vocabulary.
 109+ 7797
 110+ 7797                              New_Def FORTH, "FORTH", Does_Ptr, is_immediate
 110+ 7797             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 110+ 7797             >
 110+ 7797             >                // dummy db directives used to calculate length of namec
 110+ 7797 46 4F 52 54 >                db      "FORTH"
 110+ 779B 48          >
 110+ 779C             >len_NFA         defl    $ - temp_NFA
 110+ 779C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 110+ 7797             >
 110+ 7797 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 110+ 7798 46 4F 52 54 >                db      "FORTH"               // name string in 7-bit ascii, but
 110+ 779C 48          >
 110+ 779D             >                org     $-1                 // alter last byte of Name just above to set
 110+ 779C C8          >                db      {b $} | END_BIT     // msb as name end
 110+ 779D             >
 110+ 779D 62 77       >                dw      last_NFA            // Link to previous definition Name
 110+ 779F             >FORTH:          if Does_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 110+ 779F CB 71       >                dw      Does_Ptr ; ok        // for primitive definitions  actual code
 110+ 77A1             >                else
 110+ 77A1 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 110+ 77A1             >                endif           ; ok        // for other definitions it "points" the correct handler
 110+ 77A1             >                // Use of "; ok" to suppress "warning[fwdref]"
 110+ 77A1             >
 110+ 77A1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 111+ 77A1 8F 77                        dw      Vocabulary_Does
 112+ 77A3 81 A0                        db      $81, $A0
 113+ 77A5              Forth_Latest_Ptr:
 114+ 77A5 99 86                        dw      Here_Dictionary // Fence_Word // Latest_Definition
 115+ 77A7              Voclink_Ptr:
 116+ 77A7 00 00                        dw      0
 117+ 77A9              // Any new vocabulary is structured as follow:
 118+ 77A9              // PFA+0 points to DOES> part of VOCABULARY to perform CELL+ CONTEXT !
 119+ 77A9              // PFA+2 is 81,A0 i.e. a null-word used as LATEST in the new vocabulary
 120+ 77A9              // PFA+4 always contains the LATEST word of this VOCABULARY.
 121+ 77A9              //       at creations it points to the null-word of its parent vocabulary
 122+ 77A9              //       that is normally FORTH, For example ASSEMBLER points FORTH's null-word
 123+ 77A9              // PFA+6 is the pointer that builds up the vocabulary linked list.
 124+ 77A9              //       FORTH has 0 here to signal the end of the list and user's variable
 125+ 77A9              //       VOC-LINK points to PFA+6 of the newest vocabulary created.
 126+ 77A9              //       While FORTH is the only vocabulary, VOC-LINK points to FORTH's PFA+6
 127+ 77A9              //       When ASSEMBLER is created, its PFA+6 points to FORTH's PFA+6, and so on
 128+ 77A9
 129+ 77A9              //  ______________________________________________________________________
 130+ 77A9              //
 131+ 77A9              // definitions  --
 132+ 77A9              // Used in the form  cccc DEFINITIONS
 133+ 77A9              // set the CURRENT vocabulary at CONTEXT to insert new definitions in
 134+ 77A9              // vocabulary cccc.
 135+ 77A9                              Colon_Def DEFINITIONS, "DEFINITIONS", is_normal
 135+ 77A9             >                New_Def  DEFINITIONS, "DEFINITIONS", Enter_Ptr, is_normal ; ok
 135+ 77A9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 135+ 77A9             >
 135+ 77A9             >                // dummy db directives used to calculate length of namec
 135+ 77A9 44 45 46 49 >                db      "DEFINITIONS"
 135+ 77AD 4E 49 54 49 >
 135+ 77B1 4F 4E 53    >
 135+ 77B4             >len_NFA         defl    $ - temp_NFA
 135+ 77B4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 135+ 77A9             >
 135+ 77A9 8B          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 135+ 77AA 44 45 46 49 >                db      "DEFINITIONS"               // name string in 7-bit ascii, but
 135+ 77AE 4E 49 54 49 >
 135+ 77B2 4F 4E 53    >
 135+ 77B5             >                org     $-1                 // alter last byte of Name just above to set
 135+ 77B4 D3          >                db      {b $} | END_BIT     // msb as name end
 135+ 77B5             >
 135+ 77B5 97 77       >                dw      last_NFA            // Link to previous definition Name
 135+ 77B7             >DEFINITIONS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 135+ 77B7 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 135+ 77B9             >                else
 135+ 77B9 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 135+ 77B9             >                endif           ; ok        // for other definitions it "points" the correct handler
 135+ 77B9             >                // Use of "; ok" to suppress "warning[fwdref]"
 135+ 77B9             >
 135+ 77B9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 136+ 77B9 E2 6D 43 6B                  dw      CONTEXT, FETCH          // context @
 137+ 77BD EF 6D 50 6B                  dw      CURRENT, STORE          // current !
 138+ 77C1 23 69                        dw      EXIT                    // ;
 139+ 77C3
 140+ 77C3              //  ______________________________________________________________________
 141+ 77C3              //
 142+ 77C3              // (            -- cccc )
 143+ 77C3              // the following text is interpreted as a comment until a closing )
 144+ 77C3                              Colon_Def COMMENT_BRAKET, "(", is_immediate
 144+ 77C3             >                New_Def  COMMENT_BRAKET, "(", Enter_Ptr, is_immediate ; ok
 144+ 77C3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 144+ 77C3             >
 144+ 77C3             >                // dummy db directives used to calculate length of namec
 144+ 77C3 28          >                db      "("
 144+ 77C4             >len_NFA         defl    $ - temp_NFA
 144+ 77C4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 144+ 77C3             >
 144+ 77C3 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 144+ 77C4 28          >                db      "("               // name string in 7-bit ascii, but
 144+ 77C5             >                org     $-1                 // alter last byte of Name just above to set
 144+ 77C4 A8          >                db      {b $} | END_BIT     // msb as name end
 144+ 77C5             >
 144+ 77C5 A9 77       >                dw      last_NFA            // Link to previous definition Name
 144+ 77C7             >COMMENT_BRAKET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 144+ 77C7 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 144+ 77C9             >                else
 144+ 77C9 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 144+ 77C9             >                endif           ; ok        // for other definitions it "points" the correct handler
 144+ 77C9             >                // Use of "; ok" to suppress "warning[fwdref]"
 144+ 77C9             >
 144+ 77C9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 145+ 77C9 A9 63 29 00                  dw      LIT, ")"                // [char] )
 146+ 77CD 7A 73 7B 6A                  dw      WORD, DROP              // word drop
 147+ 77D1 23 69                        dw      EXIT                    // ;
 148+ 77D3
 149+ 77D3              //  ______________________________________________________________________
 150+ 77D3              //
 151+ 77D3              // quit         --
 152+ 77D3              // \ Erase the return-stack, stop any compilation and give controlo to the console. No message is issued.
 153+ 77D3                              Colon_Def QUIT, "QUIT", is_normal
 153+ 77D3             >                New_Def  QUIT, "QUIT", Enter_Ptr, is_normal ; ok
 153+ 77D3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 153+ 77D3             >
 153+ 77D3             >                // dummy db directives used to calculate length of namec
 153+ 77D3 51 55 49 54 >                db      "QUIT"
 153+ 77D7             >len_NFA         defl    $ - temp_NFA
 153+ 77D7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 153+ 77D3             >
 153+ 77D3 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 153+ 77D4 51 55 49 54 >                db      "QUIT"               // name string in 7-bit ascii, but
 153+ 77D8             >                org     $-1                 // alter last byte of Name just above to set
 153+ 77D7 D4          >                db      {b $} | END_BIT     // msb as name end
 153+ 77D8             >
 153+ 77D8 C3 77       >                dw      last_NFA            // Link to previous definition Name
 153+ 77DA             >QUIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 153+ 77DA 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 153+ 77DC             >                else
 153+ 77DC ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 153+ 77DC             >                endif           ; ok        // for other definitions it "points" the correct handler
 153+ 77DC             >                // Use of "; ok" to suppress "warning[fwdref]"
 153+ 77DC             >
 153+ 77DC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 154+ 77DC
 155+ 77DC 65 6E 43 6B                  dw      SOURCE_ID, FETCH        // source-id @
 156+ 77E0 AF 67 7B 6A                  dw      F_CLOSE, DROP           // f_close drop
 157+ 77E4 AF 6C 65 6E                  dw      ZERO, SOURCE_ID, STORE  // 0 source-id !
 157+ 77E8 50 6B
 158+ 77EA AF 6C AE 6D                  dw      ZERO, BLK, STORE        // 0 blk !
 158+ 77EE 50 6B
 159+ 77F0 08 71                        dw      SQUARED_OPEN            // [compile] [
 160+ 77F2                                                              // begin
 161+ 77F2              Quit_Begin:
 162+ 77F2 39 6D 43 6B                  dw      R0, FETCH, RPSTORE      //      r0 @ rp!
 162+ 77F6 16 69
 163+ 77F8 02 68                        dw      CR                      //      cr
 164+ 77FA F9 72                        dw      QUERY                   //      query
 165+ 77FC              Next_Breakpoint_1:
 166+ 77FC 1A 77                        dw      INTERPRET               //      interpret
 167+ 77FE FA 6D 43 6B                  dw      STATE, FETCH, ZEQUAL    //      state @ 0=
 167+ 7802 81 69
 168+ 7804                                                              //      if
 169+ 7804 E3 63                        dw      ZBRANCH
 170+ 7806 07 00                        dw      Quit_Endif - $
 171+ 7808 C9 73                        dw          C_DOT_QUOTE
 172+ 780A 02 6F 6B                     db          2, "ok"             //          .( ok)
 173+ 780D              Quit_Endif:                                     //      else
 174+ 780D                                                              // again
 175+ 780D CC 63                        dw      BRANCH
 176+ 780F E3 FF                        dw      Quit_Begin - $
 177+ 7811 23 69                        dw      EXIT                    // ;
 178+ 7813
 179+ 7813              //  ______________________________________________________________________
 180+ 7813              //
 181+ 7813              // abort        --
 182+ 7813                              Colon_Def ABORT, "ABORT", is_normal
 182+ 7813             >                New_Def  ABORT, "ABORT", Enter_Ptr, is_normal ; ok
 182+ 7813             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 182+ 7813             >
 182+ 7813             >                // dummy db directives used to calculate length of namec
 182+ 7813 41 42 4F 52 >                db      "ABORT"
 182+ 7817 54          >
 182+ 7818             >len_NFA         defl    $ - temp_NFA
 182+ 7818             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 182+ 7813             >
 182+ 7813 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 182+ 7814 41 42 4F 52 >                db      "ABORT"               // name string in 7-bit ascii, but
 182+ 7818 54          >
 182+ 7819             >                org     $-1                 // alter last byte of Name just above to set
 182+ 7818 D4          >                db      {b $} | END_BIT     // msb as name end
 182+ 7819             >
 182+ 7819 D3 77       >                dw      last_NFA            // Link to previous definition Name
 182+ 781B             >ABORT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 182+ 781B 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 182+ 781D             >                else
 182+ 781D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 182+ 781D             >                endif           ; ok        // for other definitions it "points" the correct handler
 182+ 781D             >                // Use of "; ok" to suppress "warning[fwdref]"
 182+ 781D             >
 182+ 781D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 183+ 781D 31 6D 43 6B                  dw      S0, FETCH, SPSTORE      // s0 @ sp!
 183+ 7821 FC 68
 184+ 7823 6B 71                        dw      DECIMAL                 // decimal
 185+ 7825 9F 77                        dw      FORTH                   // [compile] forth
 186+ 7827 B7 77                        dw      DEFINITIONS             // definitions
 187+ 7829              Autoexec_Ptr:
 188+ 7829 B7 84                        dw      AUTOEXEC                // autoexec, patched to noop
 189+ 782B DA 77                        dw      QUIT                    // quit
 190+ 782D 23 69                        dw      EXIT                    // ;
 191+ 782F
 192+ 782F              //  ______________________________________________________________________
 193+ 782F              //
 194+ 782F              // warm         --
 195+ 782F                              Colon_Def WARM, "WARM", is_normal
 195+ 782F             >                New_Def  WARM, "WARM", Enter_Ptr, is_normal ; ok
 195+ 782F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 195+ 782F             >
 195+ 782F             >                // dummy db directives used to calculate length of namec
 195+ 782F 57 41 52 4D >                db      "WARM"
 195+ 7833             >len_NFA         defl    $ - temp_NFA
 195+ 7833             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 195+ 782F             >
 195+ 782F 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 195+ 7830 57 41 52 4D >                db      "WARM"               // name string in 7-bit ascii, but
 195+ 7834             >                org     $-1                 // alter last byte of Name just above to set
 195+ 7833 CD          >                db      {b $} | END_BIT     // msb as name end
 195+ 7834             >
 195+ 7834 13 78       >                dw      last_NFA            // Link to previous definition Name
 195+ 7836             >WARM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 195+ 7836 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 195+ 7838             >                else
 195+ 7838 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 195+ 7838             >                endif           ; ok        // for other definitions it "points" the correct handler
 195+ 7838             >                // Use of "; ok" to suppress "warning[fwdref]"
 195+ 7838             >
 195+ 7838             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 196+ 7838 BD 7B                        dw      BLK_INIT                // blk-init
 197+ 783A 81 83                        dw      SPLASH                  // splash
 198+ 783C A9 63 07 00                  dw      LIT, 7, EMIT            // 7 emit
 198+ 7840 76 6F
 199+ 7842 1B 78                        dw      ABORT                   // abort
 200+ 7844 23 69                        dw      EXIT                    // exit
 201+ 7846
 202+ 7846              //  ______________________________________________________________________
 203+ 7846              //
 204+ 7846              // cold         --
 205+ 7846                              Colon_Def COLD, "COLD", is_normal
 205+ 7846             >                New_Def  COLD, "COLD", Enter_Ptr, is_normal ; ok
 205+ 7846             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 205+ 7846             >
 205+ 7846             >                // dummy db directives used to calculate length of namec
 205+ 7846 43 4F 4C 44 >                db      "COLD"
 205+ 784A             >len_NFA         defl    $ - temp_NFA
 205+ 784A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 205+ 7846             >
 205+ 7846 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 205+ 7847 43 4F 4C 44 >                db      "COLD"               // name string in 7-bit ascii, but
 205+ 784B             >                org     $-1                 // alter last byte of Name just above to set
 205+ 784A C4          >                db      {b $} | END_BIT     // msb as name end
 205+ 784B             >
 205+ 784B 2F 78       >                dw      last_NFA            // Link to previous definition Name
 205+ 784D             >COLD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 205+ 784D 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 205+ 784F             >                else
 205+ 784F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 205+ 784F             >                endif           ; ok        // for other definitions it "points" the correct handler
 205+ 784F             >                // Use of "; ok" to suppress "warning[fwdref]"
 205+ 784F             >
 205+ 784F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 206+ 784F A9 63 78 63                  dw      LIT, S0_origin          // [ hex $12 +origin ] Literal
 207+ 7853 A9 63 94 63                  dw      LIT, USER_Pointer       // [ hex $3E +origin ] literal
 208+ 7857 43 6B                        dw      FETCH                   // @
 209+ 7859 A9 63 06 00                  dw      LIT, 6, PLUS            // 6 +
 209+ 785D C4 69
 210+ 785F A9 63 14 00                  dw      LIT, 20                 // 20
 211+ 7863 11 68                        dw      CMOVE
 212+ 7865 A9 63 72 63                  dw      LIT, Latest_origin      // [ hex 0C +origin ] literal
 213+ 7869 43 6B                        dw      FETCH                   // @
 214+ 786B A9 63 A5 77                  dw      LIT, Forth_Latest_Ptr   // [ ' forth >body 4 + ] Literal
 215+ 786F 50 6B                        dw      STORE                   // !
 216+ 7871 AF 6C A5 6D                  dw      ZERO, NMODE, STORE      // 0 nmode !
 216+ 7875 50 6B
 217+ 7877 86 6D 43 6B                  dw      FIRST, FETCH, DUP       // first @ dup
 217+ 787B B0 6A
 218+ 787D 39 6E 50 6B                  dw      USE, STORE              // use !
 219+ 7881 43 6E 50 6B                  dw      PREV, STORE             // prev !
 220+ 7885 A9 63 04 00                  dw      LIT, 4, PLACE, STORE    // 4 place !
 220+ 7889 56 6E 50 6B
 221+ 788D              //              dw      LIT, 8
 222+ 788D              //              dw      LIT, FLAGS2, CSTORE     // 8 5C6A c!
 223+ 788D BF 6C 77 6E                  dw      TWO, HP, STORE          // 2 hp !
 223+ 7891 50 6B
 224+ 7893 36 78        Warm_Start:     dw      WARM
 225+ 7895 4D 78        Cold_Start:     dw      COLD
 226+ 7897 23 69                        dw      EXIT
 227+ 7899
 228+ 7899              //  ______________________________________________________________________
 229+ 7899              WarmRoutine:
 230+ 7899              ColdRoutine:
 231+ 7899 DD 21 98 63                  ld      ix, Next_Ptr
 232+ 789D D9                           exx
 233+ 789E E5                           push    hl
 234+ 789F D9                           exx
 235+ 78A0
 236+ 78A0 ED 73 6E 63                  ld      (SP_Basic), sp
 237+ 78A4 ED 7B 78 63                  ld      sp, (S0_origin)
 238+ 78A8              //              nop
 239+ 78A8 2A 7A 63                     ld      hl, (R0_origin)
 240+ 78AB              //              nop
 241+ 78AB                              ldrphl
 241+ 78AB 22 96 63    >                ld      (RP_Pointer),hl
 242+ 78AE 01 93 78                     ld      bc, Warm_Start
 243+ 78B1 38 02                        jr      c, Warm_Skip
 244+ 78B3 03                           inc     bc
 245+ 78B4 03                           inc     bc
 246+ 78B5              Warm_Skip:
 247+ 78B5                              next
 247+ 78B5 DD E9       >                jp      (ix)
 248+ 78B7
 249+ 78B7              //  ______________________________________________________________________
 250+ 78B7              //
 251+ 78B7              // basic        --
 252+ 78B7                              New_Def BASIC, "BASIC", is_code, is_normal
 252+ 78B7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 252+ 78B7             >
 252+ 78B7             >                // dummy db directives used to calculate length of namec
 252+ 78B7 42 41 53 49 >                db      "BASIC"
 252+ 78BB 43          >
 252+ 78BC             >len_NFA         defl    $ - temp_NFA
 252+ 78BC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 252+ 78B7             >
 252+ 78B7 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 252+ 78B8 42 41 53 49 >                db      "BASIC"               // name string in 7-bit ascii, but
 252+ 78BC 43          >
 252+ 78BD             >                org     $-1                 // alter last byte of Name just above to set
 252+ 78BC C3          >                db      {b $} | END_BIT     // msb as name end
 252+ 78BD             >
 252+ 78BD 46 78       >                dw      last_NFA            // Link to previous definition Name
 252+ 78BF             >BASIC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 252+ 78BF ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 252+ 78BF             >                else
 252+ 78BF C1 78       >                dw      $ + 2   ; ok        // is pointed by CFA
 252+ 78C1             >                endif           ; ok        // for other definitions it "points" the correct handler
 252+ 78C1             >                // Use of "; ok" to suppress "warning[fwdref]"
 252+ 78C1             >
 252+ 78C1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 253+ 78C1 C1                           pop     bc
 254+ 78C2 21 00 00                     ld      hl, 0
 255+ 78C5 39                           add     hl, sp
 256+ 78C6 ED 7B 6E 63                  ld      sp, (SP_Basic)
 257+ 78CA              //              nop
 258+ 78CA 22 6E 63                     ld      (SP_Basic),hl
 259+ 78CD D9                           exx
 260+ 78CE E1                           pop     hl
 261+ 78CF D9                           exx
 262+ 78D0 C9                           ret     // to Basic
 263+ 78D1
 264+ 78D1              //  ______________________________________________________________________
 265+ 78D1              //
 266+ 78D1              // +-           n1 n2 -- n3
 267+ 78D1              // leaves n1 with the sign of n2 as n3.
 268+ 78D1                              Colon_Def PLUS_MINUS, "+-", is_normal
 268+ 78D1             >                New_Def  PLUS_MINUS, "+-", Enter_Ptr, is_normal ; ok
 268+ 78D1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 268+ 78D1             >
 268+ 78D1             >                // dummy db directives used to calculate length of namec
 268+ 78D1 2B 2D       >                db      "+-"
 268+ 78D3             >len_NFA         defl    $ - temp_NFA
 268+ 78D3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 268+ 78D1             >
 268+ 78D1 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 268+ 78D2 2B 2D       >                db      "+-"               // name string in 7-bit ascii, but
 268+ 78D4             >                org     $-1                 // alter last byte of Name just above to set
 268+ 78D3 AD          >                db      {b $} | END_BIT     // msb as name end
 268+ 78D4             >
 268+ 78D4 B7 78       >                dw      last_NFA            // Link to previous definition Name
 268+ 78D6             >PLUS_MINUS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 268+ 78D6 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 268+ 78D8             >                else
 268+ 78D8 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 268+ 78D8             >                endif           ; ok        // for other definitions it "points" the correct handler
 268+ 78D8             >                // Use of "; ok" to suppress "warning[fwdref]"
 268+ 78D8             >
 268+ 78D8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 269+ 78D8 9C 69                        dw      ZLESS                   // 0<
 270+ 78DA                                                              // if
 271+ 78DA E3 63                        dw      ZBRANCH
 272+ 78DC 04 00                        dw      Plus_Minus_Endif - $
 273+ 78DE 37 6A                        dw          MINUS               //      minus
 274+ 78E0              Plus_Minus_Endif:                               // endif
 275+ 78E0 23 69                        dw      EXIT                    // ;
 276+ 78E2
 277+ 78E2              //  ______________________________________________________________________
 278+ 78E2              //
 279+ 78E2              // d+-          d1 n -- d2
 280+ 78E2              // leaves d1 with the sign of n as d2.
 281+ 78E2                              Colon_Def DPLUS_MINUS, "D+-", is_normal
 281+ 78E2             >                New_Def  DPLUS_MINUS, "D+-", Enter_Ptr, is_normal ; ok
 281+ 78E2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 281+ 78E2             >
 281+ 78E2             >                // dummy db directives used to calculate length of namec
 281+ 78E2 44 2B 2D    >                db      "D+-"
 281+ 78E5             >len_NFA         defl    $ - temp_NFA
 281+ 78E5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 281+ 78E2             >
 281+ 78E2 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 281+ 78E3 44 2B 2D    >                db      "D+-"               // name string in 7-bit ascii, but
 281+ 78E6             >                org     $-1                 // alter last byte of Name just above to set
 281+ 78E5 AD          >                db      {b $} | END_BIT     // msb as name end
 281+ 78E6             >
 281+ 78E6 D1 78       >                dw      last_NFA            // Link to previous definition Name
 281+ 78E8             >DPLUS_MINUS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 281+ 78E8 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 281+ 78EA             >                else
 281+ 78EA ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 281+ 78EA             >                endif           ; ok        // for other definitions it "points" the correct handler
 281+ 78EA             >                // Use of "; ok" to suppress "warning[fwdref]"
 281+ 78EA             >
 281+ 78EA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 282+ 78EA 9C 69                        dw      ZLESS                   // 0<
 283+ 78EC                                                              // if
 284+ 78EC E3 63                        dw      ZBRANCH
 285+ 78EE 04 00                        dw      DPlus_Minus_Endif - $
 286+ 78F0 4D 6A                        dw          DMINUS              //      dminus
 287+ 78F2              DPlus_Minus_Endif:                              // endif
 288+ 78F2 23 69                        dw      EXIT                    // ;
 289+ 78F4
 290+ 78F4              //  ______________________________________________________________________
 291+ 78F4              //
 292+ 78F4              // abs          n1 -- n2
 293+ 78F4                              Colon_Def ABS_OP, "ABS", is_normal
 293+ 78F4             >                New_Def  ABS_OP, "ABS", Enter_Ptr, is_normal ; ok
 293+ 78F4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 293+ 78F4             >
 293+ 78F4             >                // dummy db directives used to calculate length of namec
 293+ 78F4 41 42 53    >                db      "ABS"
 293+ 78F7             >len_NFA         defl    $ - temp_NFA
 293+ 78F7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 293+ 78F4             >
 293+ 78F4 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 293+ 78F5 41 42 53    >                db      "ABS"               // name string in 7-bit ascii, but
 293+ 78F8             >                org     $-1                 // alter last byte of Name just above to set
 293+ 78F7 D3          >                db      {b $} | END_BIT     // msb as name end
 293+ 78F8             >
 293+ 78F8 E2 78       >                dw      last_NFA            // Link to previous definition Name
 293+ 78FA             >ABS_OP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 293+ 78FA 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 293+ 78FC             >                else
 293+ 78FC ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 293+ 78FC             >                endif           ; ok        // for other definitions it "points" the correct handler
 293+ 78FC             >                // Use of "; ok" to suppress "warning[fwdref]"
 293+ 78FC             >
 293+ 78FC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 294+ 78FC B0 6A                        dw      DUP                     // dup
 295+ 78FE D6 78                        dw      PLUS_MINUS              // +-
 296+ 7900 23 69                        dw      EXIT                    // ;
 297+ 7902
 298+ 7902              //  ______________________________________________________________________
 299+ 7902              //
 300+ 7902              // dabs         d1 -- d2
 301+ 7902                              Colon_Def DABS, "DABS", is_normal
 301+ 7902             >                New_Def  DABS, "DABS", Enter_Ptr, is_normal ; ok
 301+ 7902             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 301+ 7902             >
 301+ 7902             >                // dummy db directives used to calculate length of namec
 301+ 7902 44 41 42 53 >                db      "DABS"
 301+ 7906             >len_NFA         defl    $ - temp_NFA
 301+ 7906             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 301+ 7902             >
 301+ 7902 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 301+ 7903 44 41 42 53 >                db      "DABS"               // name string in 7-bit ascii, but
 301+ 7907             >                org     $-1                 // alter last byte of Name just above to set
 301+ 7906 D3          >                db      {b $} | END_BIT     // msb as name end
 301+ 7907             >
 301+ 7907 F4 78       >                dw      last_NFA            // Link to previous definition Name
 301+ 7909             >DABS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 301+ 7909 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 301+ 790B             >                else
 301+ 790B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 301+ 790B             >                endif           ; ok        // for other definitions it "points" the correct handler
 301+ 790B             >                // Use of "; ok" to suppress "warning[fwdref]"
 301+ 790B             >
 301+ 790B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 302+ 790B B0 6A                        dw      DUP                     // dup
 303+ 790D E8 78                        dw      DPLUS_MINUS             // d+-
 304+ 790F 23 69                        dw      EXIT                    // ;
 305+ 7911
 306+ 7911              //  ______________________________________________________________________
 307+ 7911              //
 308+ 7911              // m*           n1 n2 -- d
 309+ 7911              // multiply two integer giving a double
 310+ 7911                              Colon_Def MMUL, "M*", is_normal
 310+ 7911             >                New_Def  MMUL, "M*", Enter_Ptr, is_normal ; ok
 310+ 7911             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 310+ 7911             >
 310+ 7911             >                // dummy db directives used to calculate length of namec
 310+ 7911 4D 2A       >                db      "M*"
 310+ 7913             >len_NFA         defl    $ - temp_NFA
 310+ 7913             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 310+ 7911             >
 310+ 7911 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 310+ 7912 4D 2A       >                db      "M*"               // name string in 7-bit ascii, but
 310+ 7914             >                org     $-1                 // alter last byte of Name just above to set
 310+ 7913 AA          >                db      {b $} | END_BIT     // msb as name end
 310+ 7914             >
 310+ 7914 02 79       >                dw      last_NFA            // Link to previous definition Name
 310+ 7916             >MMUL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 310+ 7916 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 310+ 7918             >                else
 310+ 7918 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 310+ 7918             >                endif           ; ok        // for other definitions it "points" the correct handler
 310+ 7918             >                // Use of "; ok" to suppress "warning[fwdref]"
 310+ 7918             >
 310+ 7918             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 311+ 7918 11 6B DA 68                  dw      TWO_DUP, XOR_OP, TO_R   // 2dup xor >r
 311+ 791C 4C 69
 312+ 791E FA 78 A3 6A                  dw      ABS_OP, SWAP            // abs swap
 313+ 7922 FA 78 46 68                  dw      ABS_OP, UM_MUL          // abs um*
 314+ 7926 60 69 E8 78                  dw      R_TO, DPLUS_MINUS       // r> d+-
 315+ 792A 23 69                        dw      EXIT                    // ;
 316+ 792C
 317+ 792C              //  ______________________________________________________________________
 318+ 792C              //
 319+ 792C              // m/mod        d n -- q r
 320+ 792C              // multiply two integer giving a double
 321+ 792C                              Colon_Def MDIVM, "M/MOD", is_normal
 321+ 792C             >                New_Def  MDIVM, "M/MOD", Enter_Ptr, is_normal ; ok
 321+ 792C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 321+ 792C             >
 321+ 792C             >                // dummy db directives used to calculate length of namec
 321+ 792C 4D 2F 4D 4F >                db      "M/MOD"
 321+ 7930 44          >
 321+ 7931             >len_NFA         defl    $ - temp_NFA
 321+ 7931             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 321+ 792C             >
 321+ 792C 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 321+ 792D 4D 2F 4D 4F >                db      "M/MOD"               // name string in 7-bit ascii, but
 321+ 7931 44          >
 321+ 7932             >                org     $-1                 // alter last byte of Name just above to set
 321+ 7931 C4          >                db      {b $} | END_BIT     // msb as name end
 321+ 7932             >
 321+ 7932 11 79       >                dw      last_NFA            // Link to previous definition Name
 321+ 7934             >MDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 321+ 7934 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 321+ 7936             >                else
 321+ 7936 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 321+ 7936             >                endif           ; ok        // for other definitions it "points" the correct handler
 321+ 7936             >                // Use of "; ok" to suppress "warning[fwdref]"
 321+ 7936             >
 321+ 7936             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 322+ 7936 6B 6A 4C 69                  dw      OVER, TO_R, TO_R        // over >r >r
 322+ 793A 4C 69
 323+ 793C 09 79 74 69                  dw      DABS, R_OP, ABS_OP      // dabs r abs
 323+ 7940 FA 78
 324+ 7942 77 68                        dw      UMDIVMOD                // um/mod
 325+ 7944 60 69                        dw      R_TO                    // r>
 326+ 7946 74 69 DA 68                  dw      R_OP, XOR_OP            // r xor
 327+ 794A D6 78 A3 6A                  dw      PLUS_MINUS, SWAP        // +- swap
 328+ 794E 60 69                        dw      R_TO                    // r>
 329+ 7950 D6 78 A3 6A                  dw      PLUS_MINUS, SWAP        // +- swap
 330+ 7954 23 69                        dw      EXIT                    // ;
 331+ 7956
 332+ 7956              //  ______________________________________________________________________
 333+ 7956              //
 334+ 7956              // m/           d n -- q
 335+ 7956              // multiply two integer giving a double
 336+ 7956                              Colon_Def MDIV, "M/", is_normal
 336+ 7956             >                New_Def  MDIV, "M/", Enter_Ptr, is_normal ; ok
 336+ 7956             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 336+ 7956             >
 336+ 7956             >                // dummy db directives used to calculate length of namec
 336+ 7956 4D 2F       >                db      "M/"
 336+ 7958             >len_NFA         defl    $ - temp_NFA
 336+ 7958             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 336+ 7956             >
 336+ 7956 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 336+ 7957 4D 2F       >                db      "M/"               // name string in 7-bit ascii, but
 336+ 7959             >                org     $-1                 // alter last byte of Name just above to set
 336+ 7958 AF          >                db      {b $} | END_BIT     // msb as name end
 336+ 7959             >
 336+ 7959 2C 79       >                dw      last_NFA            // Link to previous definition Name
 336+ 795B             >MDIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 336+ 795B 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 336+ 795D             >                else
 336+ 795D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 336+ 795D             >                endif           ; ok        // for other definitions it "points" the correct handler
 336+ 795D             >                // Use of "; ok" to suppress "warning[fwdref]"
 336+ 795D             >
 336+ 795D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 337+ 795D 34 79 86 6A                  dw      MDIVM, NIP
 338+ 7961 23 69                        dw      EXIT                    // ;
 339+ 7963
 340+ 7963              //  ______________________________________________________________________
 341+ 7963              //
 342+ 7963              // *            n1 n2 -- n3
 343+ 7963              // multiply two integer
 344+ 7963                              Colon_Def MUL, "*", is_normal
 344+ 7963             >                New_Def  MUL, "*", Enter_Ptr, is_normal ; ok
 344+ 7963             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 344+ 7963             >
 344+ 7963             >                // dummy db directives used to calculate length of namec
 344+ 7963 2A          >                db      "*"
 344+ 7964             >len_NFA         defl    $ - temp_NFA
 344+ 7964             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 344+ 7963             >
 344+ 7963 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 344+ 7964 2A          >                db      "*"               // name string in 7-bit ascii, but
 344+ 7965             >                org     $-1                 // alter last byte of Name just above to set
 344+ 7964 AA          >                db      {b $} | END_BIT     // msb as name end
 344+ 7965             >
 344+ 7965 56 79       >                dw      last_NFA            // Link to previous definition Name
 344+ 7967             >MUL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 344+ 7967 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 344+ 7969             >                else
 344+ 7969 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 344+ 7969             >                endif           ; ok        // for other definitions it "points" the correct handler
 344+ 7969             >                // Use of "; ok" to suppress "warning[fwdref]"
 344+ 7969             >
 344+ 7969             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 345+ 7969 16 79 7B 6A                  dw      MMUL, DROP              // m* drop
 346+ 796D 23 69                        dw      EXIT                    // ;
 347+ 796F
 348+ 796F              //  ______________________________________________________________________
 349+ 796F              //
 350+ 796F              // /mod         n1 n2 -- n3 n4
 351+ 796F              // leaves quotient n4 and remainder n3 of the integer division n1 / n2.
 352+ 796F              // The remainder has the sign of n1
 353+ 796F                              Colon_Def DIVMOD, "/MOD", is_normal
 353+ 796F             >                New_Def  DIVMOD, "/MOD", Enter_Ptr, is_normal ; ok
 353+ 796F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 353+ 796F             >
 353+ 796F             >                // dummy db directives used to calculate length of namec
 353+ 796F 2F 4D 4F 44 >                db      "/MOD"
 353+ 7973             >len_NFA         defl    $ - temp_NFA
 353+ 7973             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 353+ 796F             >
 353+ 796F 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 353+ 7970 2F 4D 4F 44 >                db      "/MOD"               // name string in 7-bit ascii, but
 353+ 7974             >                org     $-1                 // alter last byte of Name just above to set
 353+ 7973 C4          >                db      {b $} | END_BIT     // msb as name end
 353+ 7974             >
 353+ 7974 63 79       >                dw      last_NFA            // Link to previous definition Name
 353+ 7976             >DIVMOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 353+ 7976 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 353+ 7978             >                else
 353+ 7978 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 353+ 7978             >                endif           ; ok        // for other definitions it "points" the correct handler
 353+ 7978             >                // Use of "; ok" to suppress "warning[fwdref]"
 353+ 7978             >
 353+ 7978             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 354+ 7978 4C 69 C1 6E                  dw      TO_R, S_TO_D, R_TO      // >r s->d r>
 354+ 797C 60 69
 355+ 797E 34 79                        dw      MDIVM                   // m/mod
 356+ 7980 23 69                        dw      EXIT                    // ;
 357+ 7982
 358+ 7982              //  ______________________________________________________________________
 359+ 7982              //
 360+ 7982              // /            n1 n2 -- n3
 361+ 7982              // division
 362+ 7982                              Colon_Def DIV, "/", is_normal
 362+ 7982             >                New_Def  DIV, "/", Enter_Ptr, is_normal ; ok
 362+ 7982             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 362+ 7982             >
 362+ 7982             >                // dummy db directives used to calculate length of namec
 362+ 7982 2F          >                db      "/"
 362+ 7983             >len_NFA         defl    $ - temp_NFA
 362+ 7983             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 362+ 7982             >
 362+ 7982 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 362+ 7983 2F          >                db      "/"               // name string in 7-bit ascii, but
 362+ 7984             >                org     $-1                 // alter last byte of Name just above to set
 362+ 7983 AF          >                db      {b $} | END_BIT     // msb as name end
 362+ 7984             >
 362+ 7984 6F 79       >                dw      last_NFA            // Link to previous definition Name
 362+ 7986             >DIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 362+ 7986 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 362+ 7988             >                else
 362+ 7988 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 362+ 7988             >                endif           ; ok        // for other definitions it "points" the correct handler
 362+ 7988             >                // Use of "; ok" to suppress "warning[fwdref]"
 362+ 7988             >
 362+ 7988             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 363+ 7988 76 79 86 6A                  dw      DIVMOD, NIP             // /mod nip
 364+ 798C 23 69                        dw      EXIT                    // ;
 365+ 798E
 366+ 798E              //  ______________________________________________________________________
 367+ 798E              //
 368+ 798E              // mod          n1 n2 -- n3
 369+ 798E                              Colon_Def MOD, "MOD", is_normal
 369+ 798E             >                New_Def  MOD, "MOD", Enter_Ptr, is_normal ; ok
 369+ 798E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 369+ 798E             >
 369+ 798E             >                // dummy db directives used to calculate length of namec
 369+ 798E 4D 4F 44    >                db      "MOD"
 369+ 7991             >len_NFA         defl    $ - temp_NFA
 369+ 7991             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 369+ 798E             >
 369+ 798E 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 369+ 798F 4D 4F 44    >                db      "MOD"               // name string in 7-bit ascii, but
 369+ 7992             >                org     $-1                 // alter last byte of Name just above to set
 369+ 7991 C4          >                db      {b $} | END_BIT     // msb as name end
 369+ 7992             >
 369+ 7992 82 79       >                dw      last_NFA            // Link to previous definition Name
 369+ 7994             >MOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 369+ 7994 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 369+ 7996             >                else
 369+ 7996 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 369+ 7996             >                endif           ; ok        // for other definitions it "points" the correct handler
 369+ 7996             >                // Use of "; ok" to suppress "warning[fwdref]"
 369+ 7996             >
 369+ 7996             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 370+ 7996 76 79 7B 6A                  dw      DIVMOD, DROP            // /mod drop
 371+ 799A 23 69                        dw      EXIT                    // ;
 372+ 799C
 373+ 799C              //  ______________________________________________________________________
 374+ 799C              //
 375+ 799C              // */mod        n1 n2 n3 -- n4 n5
 376+ 799C              // leaves the quotient n5 and the remainder n4 of the operation
 377+ 799C              // (n1 * n2) / n3. The intermediate passage through a double number
 378+ 799C              // avoids loss of precision
 379+ 799C                              Colon_Def MUL_DIV_MOD, "*/MOD", is_normal
 379+ 799C             >                New_Def  MUL_DIV_MOD, "*/MOD", Enter_Ptr, is_normal ; ok
 379+ 799C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 379+ 799C             >
 379+ 799C             >                // dummy db directives used to calculate length of namec
 379+ 799C 2A 2F 4D 4F >                db      "*/MOD"
 379+ 79A0 44          >
 379+ 79A1             >len_NFA         defl    $ - temp_NFA
 379+ 79A1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 379+ 799C             >
 379+ 799C 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 379+ 799D 2A 2F 4D 4F >                db      "*/MOD"               // name string in 7-bit ascii, but
 379+ 79A1 44          >
 379+ 79A2             >                org     $-1                 // alter last byte of Name just above to set
 379+ 79A1 C4          >                db      {b $} | END_BIT     // msb as name end
 379+ 79A2             >
 379+ 79A2 8E 79       >                dw      last_NFA            // Link to previous definition Name
 379+ 79A4             >MUL_DIV_MOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 379+ 79A4 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 379+ 79A6             >                else
 379+ 79A6 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 379+ 79A6             >                endif           ; ok        // for other definitions it "points" the correct handler
 379+ 79A6             >                // Use of "; ok" to suppress "warning[fwdref]"
 379+ 79A6             >
 379+ 79A6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 380+ 79A6 4C 69 16 79                  dw      TO_R, MMUL              // >r  m*
 381+ 79AA 60 69 34 79                  dw      R_TO, MDIVM             // r>  m/mod
 382+ 79AE 23 69                        dw      EXIT                    // ;
 383+ 79B0
 384+ 79B0              //  ______________________________________________________________________
 385+ 79B0              //
 386+ 79B0              // */          n1 n2 n3 -- n4
 387+ 79B0              // (n1 * n2) / n3. The intermediate passage through a double number avoids loss of precision
 388+ 79B0                              Colon_Def MUL_DIV, "*/", is_normal
 388+ 79B0             >                New_Def  MUL_DIV, "*/", Enter_Ptr, is_normal ; ok
 388+ 79B0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 388+ 79B0             >
 388+ 79B0             >                // dummy db directives used to calculate length of namec
 388+ 79B0 2A 2F       >                db      "*/"
 388+ 79B2             >len_NFA         defl    $ - temp_NFA
 388+ 79B2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 388+ 79B0             >
 388+ 79B0 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 388+ 79B1 2A 2F       >                db      "*/"               // name string in 7-bit ascii, but
 388+ 79B3             >                org     $-1                 // alter last byte of Name just above to set
 388+ 79B2 AF          >                db      {b $} | END_BIT     // msb as name end
 388+ 79B3             >
 388+ 79B3 9C 79       >                dw      last_NFA            // Link to previous definition Name
 388+ 79B5             >MUL_DIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 388+ 79B5 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 388+ 79B7             >                else
 388+ 79B7 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 388+ 79B7             >                endif           ; ok        // for other definitions it "points" the correct handler
 388+ 79B7             >                // Use of "; ok" to suppress "warning[fwdref]"
 388+ 79B7             >
 388+ 79B7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 389+ 79B7 A4 79                        dw     MUL_DIV_MOD              // */mod
 390+ 79B9 86 6A                        dw     NIP                      // nip
 391+ 79BB 23 69                        dw     EXIT                     // ;
 392+ 79BD
 393+ 79BD
 394+ 79BD              //  ______________________________________________________________________
 395+ 79BD              //
 396+ 79BD              // m/mod        ud1 u2 -- u3 ud4
 397+ 79BD              // mixed operation: it leaves the remainder u3 and the quotient ud4 of ud1 / u1.
 398+ 79BD              // All terms are unsigned.
 399+ 79BD              //              Colon_Def MDIV_MOD, "M/MOD", is_normal
 400+ 79BD              //              dw      TO_R                    // >r           ( ud1 )
 401+ 79BD              //              dw      ZERO, R_OP, UMDIVMOD    // 0 r um/mod   ( l rem1 h/r )
 402+ 79BD              //              dw      R_TO, SWAP, TO_R        // r> swap >r   ( l rem )
 403+ 79BD              //              dw      UMDIVMOD                // um/mod       ( rem2 l/r )
 404+ 79BD              //              dw      R_TO                    // r>           ( rem2 l/r h/r )
 405+ 79BD              //              dw      EXIT                    // ;
 406+ 79BD
 407+ 79BD              //  ______________________________________________________________________
 408+ 79BD              //
 409+ 79BD              // (line)       n1 n2 -- a b
 410+ 79BD              // sends the line n1 of block n2 to the disk buffer.
 411+ 79BD              // it returns the address a and ca counter b = C/L meaning a whole line.
 412+ 79BD                              Colon_Def CLINE, "(LINE)", is_normal
 412+ 79BD             >                New_Def  CLINE, "(LINE)", Enter_Ptr, is_normal ; ok
 412+ 79BD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 412+ 79BD             >
 412+ 79BD             >                // dummy db directives used to calculate length of namec
 412+ 79BD 28 4C 49 4E >                db      "(LINE)"
 412+ 79C1 45 29       >
 412+ 79C3             >len_NFA         defl    $ - temp_NFA
 412+ 79C3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 412+ 79BD             >
 412+ 79BD 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 412+ 79BE 28 4C 49 4E >                db      "(LINE)"               // name string in 7-bit ascii, but
 412+ 79C2 45 29       >
 412+ 79C4             >                org     $-1                 // alter last byte of Name just above to set
 412+ 79C3 A9          >                db      {b $} | END_BIT     // msb as name end
 412+ 79C4             >
 412+ 79C4 B0 79       >                dw      last_NFA            // Link to previous definition Name
 412+ 79C6             >CLINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 412+ 79C6 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 412+ 79C8             >                else
 412+ 79C8 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 412+ 79C8             >                endif           ; ok        // for other definitions it "points" the correct handler
 412+ 79C8             >                // Use of "; ok" to suppress "warning[fwdref]"
 412+ 79C8             >
 412+ 79C8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 413+ 79C8 4C 69                        dw      TO_R                    // >r
 414+ 79CA 5C 6C                        dw      NOOP                    // noop
 415+ 79CC E3 6C                        dw      CL                      // c/l
 416+ 79CE EF 6C A4 79                  dw      BBUF, MUL_DIV_MOD       // */mod
 417+ 79D2 60 69                        dw      R_TO                    // r>
 418+ 79D4 FB 6C 67 79                  dw      BSCR, MUL, PLUS         // b/scr * +
 418+ 79D8 C4 69
 419+ 79DA D5 7C                        dw      BLOCK                   // block   ( forward )
 420+ 79DC C4 69                        dw      PLUS                    // +
 421+ 79DE 5C 6C                        dw      NOOP                    // noop
 422+ 79E0 E3 6C                        dw      CL                      // c/l
 423+ 79E2 23 69                        dw      EXIT                    // ;
 424+ 79E4
 425+ 79E4              //  ______________________________________________________________________
 426+ 79E4              //
 427+ 79E4              // .line        n1 n2 --
 428+ 79E4              // Sends to output line  n1  of screen n2.
 429+ 79E4                              Colon_Def DOT_LINE, ".LINE", is_normal
 429+ 79E4             >                New_Def  DOT_LINE, ".LINE", Enter_Ptr, is_normal ; ok
 429+ 79E4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 429+ 79E4             >
 429+ 79E4             >                // dummy db directives used to calculate length of namec
 429+ 79E4 2E 4C 49 4E >                db      ".LINE"
 429+ 79E8 45          >
 429+ 79E9             >len_NFA         defl    $ - temp_NFA
 429+ 79E9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 429+ 79E4             >
 429+ 79E4 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 429+ 79E5 2E 4C 49 4E >                db      ".LINE"               // name string in 7-bit ascii, but
 429+ 79E9 45          >
 429+ 79EA             >                org     $-1                 // alter last byte of Name just above to set
 429+ 79E9 C5          >                db      {b $} | END_BIT     // msb as name end
 429+ 79EA             >
 429+ 79EA BD 79       >                dw      last_NFA            // Link to previous definition Name
 429+ 79EC             >DOT_LINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 429+ 79EC 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 429+ 79EE             >                else
 429+ 79EE ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 429+ 79EE             >                endif           ; ok        // for other definitions it "points" the correct handler
 429+ 79EE             >                // Use of "; ok" to suppress "warning[fwdref]"
 429+ 79EE             >
 429+ 79EE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 430+ 79EE C6 79 2C 72                  dw      CLINE, LTRAILING, TYPE  // (line) -trailing type
 430+ 79F2 0C 72
 431+ 79F4 23 69                        dw      EXIT                    // ;
 432+ 79F6
 433+ 79F6              //  ______________________________________________________________________
 434+ 79F6              //
 435+ 79F6              // message       n1 n2 --
 436+ 79F6              // prints error message to current channel.
 437+ 79F6              // if WARNING is 0, prints "MSG#n".
 438+ 79F6              // if WARNING is 1, prints line n of screen 4.
 439+ 79F6              // if WARNING is -1, see ERROR
 440+ 79F6              // value can be negative or beyond block 4.
 441+ 79F6                              Colon_Def MESSAGE, "MESSAGE", is_normal
 441+ 79F6             >                New_Def  MESSAGE, "MESSAGE", Enter_Ptr, is_normal ; ok
 441+ 79F6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 441+ 79F6             >
 441+ 79F6             >                // dummy db directives used to calculate length of namec
 441+ 79F6 4D 45 53 53 >                db      "MESSAGE"
 441+ 79FA 41 47 45    >
 441+ 79FD             >len_NFA         defl    $ - temp_NFA
 441+ 79FD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 441+ 79F6             >
 441+ 79F6 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 441+ 79F7 4D 45 53 53 >                db      "MESSAGE"               // name string in 7-bit ascii, but
 441+ 79FB 41 47 45    >
 441+ 79FE             >                org     $-1                 // alter last byte of Name just above to set
 441+ 79FD C5          >                db      {b $} | END_BIT     // msb as name end
 441+ 79FE             >
 441+ 79FE E4 79       >                dw      last_NFA            // Link to previous definition Name
 441+ 7A00             >MESSAGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 441+ 7A00 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 441+ 7A02             >                else
 441+ 7A02 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 441+ 7A02             >                endif           ; ok        // for other definitions it "points" the correct handler
 441+ 7A02             >                // Use of "; ok" to suppress "warning[fwdref]"
 441+ 7A02             >
 441+ 7A02             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 442+ 7A02 5A 6D 43 6B                  dw      WARNING, FETCH          // warning @
 443+ 7A06                                                              // if
 444+ 7A06 E3 63                        dw      ZBRANCH
 445+ 7A08 18 00                        dw      Message_Else - $
 446+ 7A0A A9 63 04 00                  dw          LIT, 4              //      4
 447+ 7A0E D5 6D 43 6B                  dw          OFFSET, FETCH       //      offset @
 448+ 7A12 FB 6C 86 79                  dw          BSCR, DIV, SUBTRACT //      b/scr / -
 448+ 7A16 D5 6E
 449+ 7A18 EC 79                        dw          DOT_LINE            //      .line
 450+ 7A1A 92 6F                        dw          SPACE               //      space
 451+ 7A1C                                                              // else
 452+ 7A1C
 453+ 7A1C CC 63                        dw      BRANCH
 454+ 7A1E 0B 00                        dw      Message_ENdif - $
 455+ 7A20              Message_Else:
 456+ 7A20 C9 73                        dw          C_DOT_QUOTE         //      .( msg#)
 457+ 7A22 04 6D 73 67                  db          4, "msg#"
 457+ 7A26 23
 458+ 7A27 80 82                        dw          DOT                 //      .  ( forward )
 459+ 7A29              Message_ENdif:                                  // endif
 460+ 7A29 23 69                        dw      EXIT                    // ;
 461+ 7A2B
 462+ 7A2B
 463+ 7A2B              //  ______________________________________________________________________
 464+ 7A2B              //
 465+ 7A2B              // device
 466+ 7A2B                              Variable_Def DEVICE,   "DEVICE",   2
 466+ 7A2B             >                New_Def  DEVICE, "DEVICE", Variable_Ptr, is_normal
 466+ 7A2B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 466+ 7A2B             >
 466+ 7A2B             >                // dummy db directives used to calculate length of namec
 466+ 7A2B 44 45 56 49 >                db      "DEVICE"
 466+ 7A2F 43 45       >
 466+ 7A31             >len_NFA         defl    $ - temp_NFA
 466+ 7A31             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 466+ 7A2B             >
 466+ 7A2B 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 466+ 7A2C 44 45 56 49 >                db      "DEVICE"               // name string in 7-bit ascii, but
 466+ 7A30 43 45       >
 466+ 7A32             >                org     $-1                 // alter last byte of Name just above to set
 466+ 7A31 C5          >                db      {b $} | END_BIT     // msb as name end
 466+ 7A32             >
 466+ 7A32 F6 79       >                dw      last_NFA            // Link to previous definition Name
 466+ 7A34             >DEVICE:          if Variable_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 466+ 7A34 8C 6C       >                dw      Variable_Ptr ; ok        // for primitive definitions  actual code
 466+ 7A36             >                else
 466+ 7A36 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 466+ 7A36             >                endif           ; ok        // for other definitions it "points" the correct handler
 466+ 7A36             >                // Use of "; ok" to suppress "warning[fwdref]"
 466+ 7A36             >
 466+ 7A36             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 466+ 7A36 02 00       >                dw      2
 467+ 7A38
 468+ 7A38              //  ______________________________________________________________________
 469+ 7A38              //
 470+ 7A38              // inkey        -- c | 0
 471+ 7A38              // call ROM inkey$ routine, returns c or "zero".
 472+ 7A38
 473+ 7A38                              New_Def INKEY, "INKEY", is_code, is_normal
 473+ 7A38             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 473+ 7A38             >
 473+ 7A38             >                // dummy db directives used to calculate length of namec
 473+ 7A38 49 4E 4B 45 >                db      "INKEY"
 473+ 7A3C 59          >
 473+ 7A3D             >len_NFA         defl    $ - temp_NFA
 473+ 7A3D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 473+ 7A38             >
 473+ 7A38 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 473+ 7A39 49 4E 4B 45 >                db      "INKEY"               // name string in 7-bit ascii, but
 473+ 7A3D 59          >
 473+ 7A3E             >                org     $-1                 // alter last byte of Name just above to set
 473+ 7A3D D9          >                db      {b $} | END_BIT     // msb as name end
 473+ 7A3E             >
 473+ 7A3E 2B 7A       >                dw      last_NFA            // Link to previous definition Name
 473+ 7A40             >INKEY:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 473+ 7A40 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 473+ 7A40             >                else
 473+ 7A40 42 7A       >                dw      $ + 2   ; ok        // is pointed by CFA
 473+ 7A42             >                endif           ; ok        // for other definitions it "points" the correct handler
 473+ 7A42             >                // Use of "; ok" to suppress "warning[fwdref]"
 473+ 7A42             >
 473+ 7A42             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 474+ 7A42
 475+ 7A42 C5                           push    bc
 476+ 7A43 ED 73 92 63                  ld      (SP_Saved), sp
 477+ 7A47 31 61 63                     ld      sp, Cold_origin - 5
 478+ 7A4A DD E5                        push    ix
 479+ 7A4C CD E6 15                     call    $15E6                   // instead of 15E9
 480+ 7A4F DD E1                        pop     ix
 481+ 7A51 ED 7B 92 63                  ld      sp, (SP_Saved)
 482+ 7A55 6F                           ld      l, a
 483+ 7A56 26 00                        ld      h, 0
 484+ 7A58 C1                           pop     bc
 485+ 7A59                              psh1
 485+ 7A59 E5          >                push    hl
 485+ 7A5A DD E9       >                jp      (ix)
 486+ 7A5C
 487+ 7A5C              //  ______________________________________________________________________
 488+ 7A5C              //
 489+ 7A5C              // select      n --
 490+ 7A5C              // selects the given channel number
 491+ 7A5C
 492+ 7A5C                              New_Def SELECT, "SELECT", is_code, is_normal
 492+ 7A5C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 492+ 7A5C             >
 492+ 7A5C             >                // dummy db directives used to calculate length of namec
 492+ 7A5C 53 45 4C 45 >                db      "SELECT"
 492+ 7A60 43 54       >
 492+ 7A62             >len_NFA         defl    $ - temp_NFA
 492+ 7A62             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 492+ 7A5C             >
 492+ 7A5C 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 492+ 7A5D 53 45 4C 45 >                db      "SELECT"               // name string in 7-bit ascii, but
 492+ 7A61 43 54       >
 492+ 7A63             >                org     $-1                 // alter last byte of Name just above to set
 492+ 7A62 D4          >                db      {b $} | END_BIT     // msb as name end
 492+ 7A63             >
 492+ 7A63 38 7A       >                dw      last_NFA            // Link to previous definition Name
 492+ 7A65             >SELECT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 492+ 7A65 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 492+ 7A65             >                else
 492+ 7A65 67 7A       >                dw      $ + 2   ; ok        // is pointed by CFA
 492+ 7A67             >                endif           ; ok        // for other definitions it "points" the correct handler
 492+ 7A67             >                // Use of "; ok" to suppress "warning[fwdref]"
 492+ 7A67             >
 492+ 7A67             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 493+ 7A67 E1                           pop     hl
 494+ 7A68 C5                           push    bc
 495+ 7A69 7D                           ld      a, l
 496+ 7A6A ED 73 92 63                  ld      (SP_Saved), sp
 497+ 7A6E 31 61 63                     ld      sp, Cold_origin - 5
 498+ 7A71 DD E5                        push    ix
 499+ 7A73 CD 01 16                     call    $1601
 500+ 7A76 DD E1                        pop     ix
 501+ 7A78 ED 7B 92 63                  ld      sp, (SP_Saved)
 502+ 7A7C C1                           pop     bc
 503+ 7A7D
 504+ 7A7D                              next
 504+ 7A7D DD E9       >                jp      (ix)
 505+ 7A7F
 506+ 7A7F              //  ______________________________________________________________________
 507+ 7A7F
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L2.asm
 111  7A7F                              include "next-opt1.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/next-opt1.asm
   1+ 7A7F              //  ______________________________________________________________________
   2+ 7A7F              //
   3+ 7A7F              //  next-opt.asm
   4+ 7A7F              //
   5+ 7A7F              //  ZX Spectrum Next - peculiar definitions
   6+ 7A7F              //  ______________________________________________________________________
   7+ 7A7F
   8+ 7A7F              //  ______________________________________________________________________
   9+ 7A7F              //
  10+ 7A7F              // reg@         n -- b
  11+ 7A7F              // read Next REGister n giving byte b
  12+ 7A7F
  13+ 7A7F                              Colon_Def REG_FETCH, "REG@", is_normal
  13+ 7A7F             >                New_Def  REG_FETCH, "REG@", Enter_Ptr, is_normal ; ok
  13+ 7A7F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13+ 7A7F             >
  13+ 7A7F             >                // dummy db directives used to calculate length of namec
  13+ 7A7F 52 45 47 40 >                db      "REG@"
  13+ 7A83             >len_NFA         defl    $ - temp_NFA
  13+ 7A83             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13+ 7A7F             >
  13+ 7A7F 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  13+ 7A80 52 45 47 40 >                db      "REG@"               // name string in 7-bit ascii, but
  13+ 7A84             >                org     $-1                 // alter last byte of Name just above to set
  13+ 7A83 C0          >                db      {b $} | END_BIT     // msb as name end
  13+ 7A84             >
  13+ 7A84 5C 7A       >                dw      last_NFA            // Link to previous definition Name
  13+ 7A86             >REG_FETCH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  13+ 7A86 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  13+ 7A88             >                else
  13+ 7A88 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  13+ 7A88             >                endif           ; ok        // for other definitions it "points" the correct handler
  13+ 7A88             >                // Use of "; ok" to suppress "warning[fwdref]"
  13+ 7A88             >
  13+ 7A88             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14+ 7A88 A9 63 3B 24                  dw      LIT, $243B
  15+ 7A8C B6 6B                        dw      PSTORE
  16+ 7A8E A9 63 3B 25                  dw      LIT, $253B
  17+ 7A92 A3 6B                        dw      PFETCH
  18+ 7A94 23 69                        dw      EXIT
  19+ 7A96
  20+ 7A96              //  ______________________________________________________________________
  21+ 7A96              //
  22+ 7A96              // reg!         b n --
  23+ 7A96              // write value b to Next REGister n
  24+ 7A96
  25+ 7A96                              Colon_Def REG_STORE, "REG!", is_normal
  25+ 7A96             >                New_Def  REG_STORE, "REG!", Enter_Ptr, is_normal ; ok
  25+ 7A96             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  25+ 7A96             >
  25+ 7A96             >                // dummy db directives used to calculate length of namec
  25+ 7A96 52 45 47 21 >                db      "REG!"
  25+ 7A9A             >len_NFA         defl    $ - temp_NFA
  25+ 7A9A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  25+ 7A96             >
  25+ 7A96 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  25+ 7A97 52 45 47 21 >                db      "REG!"               // name string in 7-bit ascii, but
  25+ 7A9B             >                org     $-1                 // alter last byte of Name just above to set
  25+ 7A9A A1          >                db      {b $} | END_BIT     // msb as name end
  25+ 7A9B             >
  25+ 7A9B 7F 7A       >                dw      last_NFA            // Link to previous definition Name
  25+ 7A9D             >REG_STORE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  25+ 7A9D 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  25+ 7A9F             >                else
  25+ 7A9F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  25+ 7A9F             >                endif           ; ok        // for other definitions it "points" the correct handler
  25+ 7A9F             >                // Use of "; ok" to suppress "warning[fwdref]"
  25+ 7A9F             >
  25+ 7A9F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  26+ 7A9F A9 63 3B 24                  dw      LIT, $243B
  27+ 7AA3 B6 6B                        dw      PSTORE
  28+ 7AA5 A9 63 3B 25                  dw      LIT, $253B
  29+ 7AA9 B6 6B                        dw      PSTORE
  30+ 7AAB 23 69                        dw      EXIT
  31+ 7AAD
  32+ 7AAD              //  ______________________________________________________________________
  33+ 7AAD              //
  34+ 7AAD              // mmu7@        -- n
  35+ 7AAD              // query current page in MMU7 8K-RAM : 0 and 223
  36+ 7AAD
  37+ 7AAD                              Colon_Def MMU7_FETCH, "MMU7@", is_normal
  37+ 7AAD             >                New_Def  MMU7_FETCH, "MMU7@", Enter_Ptr, is_normal ; ok
  37+ 7AAD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  37+ 7AAD             >
  37+ 7AAD             >                // dummy db directives used to calculate length of namec
  37+ 7AAD 4D 4D 55 37 >                db      "MMU7@"
  37+ 7AB1 40          >
  37+ 7AB2             >len_NFA         defl    $ - temp_NFA
  37+ 7AB2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  37+ 7AAD             >
  37+ 7AAD 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  37+ 7AAE 4D 4D 55 37 >                db      "MMU7@"               // name string in 7-bit ascii, but
  37+ 7AB2 40          >
  37+ 7AB3             >                org     $-1                 // alter last byte of Name just above to set
  37+ 7AB2 C0          >                db      {b $} | END_BIT     // msb as name end
  37+ 7AB3             >
  37+ 7AB3 96 7A       >                dw      last_NFA            // Link to previous definition Name
  37+ 7AB5             >MMU7_FETCH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  37+ 7AB5 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  37+ 7AB7             >                else
  37+ 7AB7 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  37+ 7AB7             >                endif           ; ok        // for other definitions it "points" the correct handler
  37+ 7AB7             >                // Use of "; ok" to suppress "warning[fwdref]"
  37+ 7AB7             >
  37+ 7AB7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  38+ 7AB7 A9 63 57 00                  dw      LIT, 87, REG_FETCH
  38+ 7ABB 86 7A
  39+ 7ABD 23 69                        dw      EXIT
  40+ 7ABF
  41+ 7ABF              //  ______________________________________________________________________
  42+ 7ABF              //
  43+ 7ABF              // mmu7!        n --
  44+ 7ABF              // set MMU7 8K-RAM page to n given between 0 and 223
  45+ 7ABF              // optimized version that uses NEXTREG n,A Z80n op-code.
  46+ 7ABF
  47+ 7ABF                              New_Def MMU7_STORE, "MMU7!", is_code, is_normal
  47+ 7ABF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  47+ 7ABF             >
  47+ 7ABF             >                // dummy db directives used to calculate length of namec
  47+ 7ABF 4D 4D 55 37 >                db      "MMU7!"
  47+ 7AC3 21          >
  47+ 7AC4             >len_NFA         defl    $ - temp_NFA
  47+ 7AC4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  47+ 7ABF             >
  47+ 7ABF 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  47+ 7AC0 4D 4D 55 37 >                db      "MMU7!"               // name string in 7-bit ascii, but
  47+ 7AC4 21          >
  47+ 7AC5             >                org     $-1                 // alter last byte of Name just above to set
  47+ 7AC4 A1          >                db      {b $} | END_BIT     // msb as name end
  47+ 7AC5             >
  47+ 7AC5 AD 7A       >                dw      last_NFA            // Link to previous definition Name
  47+ 7AC7             >MMU7_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  47+ 7AC7 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  47+ 7AC7             >                else
  47+ 7AC7 C9 7A       >                dw      $ + 2   ; ok        // is pointed by CFA
  47+ 7AC9             >                endif           ; ok        // for other definitions it "points" the correct handler
  47+ 7AC9             >                // Use of "; ok" to suppress "warning[fwdref]"
  47+ 7AC9             >
  47+ 7AC9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  48+ 7AC9 E1                           pop     hl
  49+ 7ACA 7D                           ld      a, l
  50+ 7ACB ED 92 57                     nextreg 87, a
  51+ 7ACE
  52+ 7ACE                              next
  52+ 7ACE DD E9       >                jp      (ix)
  53+ 7AD0
  54+ 7AD0              //  ______________________________________________________________________
  55+ 7AD0              //
  56+ 7AD0              // >far         ha -- a n
  57+ 7AD0              // decode bits 765 of H as one of the 8K-page between 64 and 71 (40h-47h)
  58+ 7AD0              // take lower bits of H and L as an offset from E000h
  59+ 7AD0              // then return address  a  between E000h-FFFFh
  60+ 7AD0              // and page number n  between 64-71 (40h-47h)
  61+ 7AD0              // For example, in hex:
  62+ 7AD0              //   0000 >FAR  gives  40.E000
  63+ 7AD0              //   1FFF >FAR  gives  40.FFFF
  64+ 7AD0              //   2000 >FAR  gives  41.E000
  65+ 7AD0              //   3FFF >FAR  gives  41.FFFF
  66+ 7AD0              //   EFFF >FAR  gives  47.EFFF
  67+ 7AD0              //   FFFF >FAR  gives  47.FFFF
  68+ 7AD0              //                New_Def TO_FAR, ">FAR", is_code, is_normal
  69+ 7AD0              //                pop     de
  70+ 7AD0              //                ld      a, d
  71+ 7AD0              //                and     $E0
  72+ 7AD0              //                rlca
  73+ 7AD0              //                rlca
  74+ 7AD0              //                rlca
  75+ 7AD0              //                add     $40
  76+ 7AD0              //                ld      l, a
  77+ 7AD0              //                ld      h, 0
  78+ 7AD0              //                ld      a, d
  79+ 7AD0              //                or      $E0
  80+ 7AD0              //                ld      d, a
  81+ 7AD0              //                push    hl
  82+ 7AD0              //                push    de
  83+ 7AD0              //                next
  84+ 7AD0
  85+ 7AD0              //  ______________________________________________________________________
  86+ 7AD0              //
  87+ 7AD0              // <far         a n  -- ha
  88+ 7AD0              // given an address E000-FFFF and a page number n (64-71 or 40h-47h)
  89+ 7AD0              // reverse of >FAR: encodes a FAR address compressing
  90+ 7AD0              // to bits 765 of H, lower bits of HL address offset from E000h
  91+ 7AD0              //                New_Def FROM_FAR, "<FAR", is_code, is_normal
  92+ 7AD0              //                pop     de                  // page number in e
  93+ 7AD0              //                pop     hl                  // address in hl
  94+ 7AD0              //                ld      a, e
  95+ 7AD0              //                sub     $40                 // reduced to 0-7
  96+ 7AD0              //                rrca
  97+ 7AD0              //                rrca
  98+ 7AD0              //                rrca
  99+ 7AD0              //                ld      d, a                // save to d bits 765
 100+ 7AD0              //                ld      a, h                // drops
 101+ 7AD0              //                and     $1F
 102+ 7AD0              //                or      d
 103+ 7AD0              //                ld      h, a
 104+ 7AD0              //
 105+ 7AD0              //                psh1
 106+ 7AD0
 107+ 7AD0              //  ______________________________________________________________________
 108+ 7AD0              //
 109+ 7AD0              // m_p3dos      n1 n2 n3 n4 a -- n5 n6 n7 n8  f
 110+ 7AD0              // NextZXOS call wrapper.
 111+ 7AD0              //  n1 = hl register parameter value
 112+ 7AD0              //  n2 = de register parameter value
 113+ 7AD0              //  n3 = bc register parameter value
 114+ 7AD0              //  n4 =  a register parameter value
 115+ 7AD0              //   a = routine address in ROM 3
 116+ 7AD0              // ----
 117+ 7AD0              //  n5 = hl returned value
 118+ 7AD0              //  n6 = de returned value
 119+ 7AD0              //  n7 = bc returned value
 120+ 7AD0              //  n8 =  a returned value
 121+ 7AD0              //   f
 122+ 7AD0                              New_Def M_P3DOS, "M_P3DOS", is_code, is_normal
 122+ 7AD0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 122+ 7AD0             >
 122+ 7AD0             >                // dummy db directives used to calculate length of namec
 122+ 7AD0 4D 5F 50 33 >                db      "M_P3DOS"
 122+ 7AD4 44 4F 53    >
 122+ 7AD7             >len_NFA         defl    $ - temp_NFA
 122+ 7AD7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 122+ 7AD0             >
 122+ 7AD0 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 122+ 7AD1 4D 5F 50 33 >                db      "M_P3DOS"               // name string in 7-bit ascii, but
 122+ 7AD5 44 4F 53    >
 122+ 7AD8             >                org     $-1                 // alter last byte of Name just above to set
 122+ 7AD7 D3          >                db      {b $} | END_BIT     // msb as name end
 122+ 7AD8             >
 122+ 7AD8 BF 7A       >                dw      last_NFA            // Link to previous definition Name
 122+ 7ADA             >M_P3DOS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 122+ 7ADA ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 122+ 7ADA             >                else
 122+ 7ADA DC 7A       >                dw      $ + 2   ; ok        // is pointed by CFA
 122+ 7ADC             >                endif           ; ok        // for other definitions it "points" the correct handler
 122+ 7ADC             >                // Use of "; ok" to suppress "warning[fwdref]"
 122+ 7ADC             >
 122+ 7ADC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 123+ 7ADC D1                           pop     de                  // dos call entry address in de
 124+ 7ADD E1                           pop     hl                  // a register
 125+ 7ADE 7D                           ld      a, l
 126+ 7ADF D9                           exx
 127+ 7AE0 C1                           pop     bc
 128+ 7AE1 D1                           pop     de
 129+ 7AE2 E1                           pop     hl
 130+ 7AE3 D9                           exx
 131+ 7AE4
 132+ 7AE4 C5                           push    bc
 133+ 7AE5 DD E5                        push    ix
 134+ 7AE7
 135+ 7AE7 ED 73 92 63                  ld      (SP_Saved), sp
 136+ 7AEB 31 61 63                     ld      sp, Cold_origin - 5
 137+ 7AEE 0E 07                        ld      c, 7                // use 7 RAM Bank
 138+ 7AF0
 139+ 7AF0 CF                           rst     08
 140+ 7AF1 94                           db      $94
 141+ 7AF2
 142+ 7AF2 ED 7B 92 63                  ld      sp, (SP_Saved)
 143+ 7AF6 DD E5                        push    ix
 144+ 7AF8 E1                           pop     hl
 145+ 7AF9 22 90 63                     ld      (IX_Echo), hl
 146+ 7AFC              //              nop
 147+ 7AFC DD E1                        pop     ix
 148+ 7AFE E3                           ex      (sp), hl            // hl argument and retrieve bc
 149+ 7AFF D5                           push    de
 150+ 7B00 C5                           push    bc
 151+ 7B01 4D                           ld      c, l
 152+ 7B02 44                           ld      b, h
 153+ 7B03
 154+ 7B03 26 00                        ld      h, 0
 155+ 7B05 6F                           ld      l, a
 156+ 7B06 E5                           push    hl
 157+ 7B07 ED 62                        sbc     hl, hl              // -1 for OK ; 0 for KO but now...
 158+ 7B09 23                           inc     hl                  //  0 for OK ; 1 for ko
 159+ 7B0A
 160+ 7B0A                              psh1
 160+ 7B0A E5          >                push    hl
 160+ 7B0B DD E9       >                jp      (ix)
 161+ 7B0D
 162+ 7B0D              //  ______________________________________________________________________
 163+ 7B0D              //
 164+ 7B0D              // blk-fh
 165+ 7B0D                              Variable_Def BLK_FH,   "BLK-FH",   1
 165+ 7B0D             >                New_Def  BLK_FH, "BLK-FH", Variable_Ptr, is_normal
 165+ 7B0D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 165+ 7B0D             >
 165+ 7B0D             >                // dummy db directives used to calculate length of namec
 165+ 7B0D 42 4C 4B 2D >                db      "BLK-FH"
 165+ 7B11 46 48       >
 165+ 7B13             >len_NFA         defl    $ - temp_NFA
 165+ 7B13             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 165+ 7B0D             >
 165+ 7B0D 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 165+ 7B0E 42 4C 4B 2D >                db      "BLK-FH"               // name string in 7-bit ascii, but
 165+ 7B12 46 48       >
 165+ 7B14             >                org     $-1                 // alter last byte of Name just above to set
 165+ 7B13 C8          >                db      {b $} | END_BIT     // msb as name end
 165+ 7B14             >
 165+ 7B14 D0 7A       >                dw      last_NFA            // Link to previous definition Name
 165+ 7B16             >BLK_FH:          if Variable_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 165+ 7B16 8C 6C       >                dw      Variable_Ptr ; ok        // for primitive definitions  actual code
 165+ 7B18             >                else
 165+ 7B18 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 165+ 7B18             >                endif           ; ok        // for other definitions it "points" the correct handler
 165+ 7B18             >                // Use of "; ok" to suppress "warning[fwdref]"
 165+ 7B18             >
 165+ 7B18             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 165+ 7B18 01 00       >                dw      1
 166+ 7B1A
 167+ 7B1A                              New_Def BLK_FNAME,   "BLK-FNAME", Create_Ptr, is_normal
 167+ 7B1A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 167+ 7B1A             >
 167+ 7B1A             >                // dummy db directives used to calculate length of namec
 167+ 7B1A 42 4C 4B 2D >                db      "BLK-FNAME"
 167+ 7B1E 46 4E 41 4D >
 167+ 7B22 45          >
 167+ 7B23             >len_NFA         defl    $ - temp_NFA
 167+ 7B23             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 167+ 7B1A             >
 167+ 7B1A 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 167+ 7B1B 42 4C 4B 2D >                db      "BLK-FNAME"               // name string in 7-bit ascii, but
 167+ 7B1F 46 4E 41 4D >
 167+ 7B23 45          >
 167+ 7B24             >                org     $-1                 // alter last byte of Name just above to set
 167+ 7B23 C5          >                db      {b $} | END_BIT     // msb as name end
 167+ 7B24             >
 167+ 7B24 0D 7B       >                dw      last_NFA            // Link to previous definition Name
 167+ 7B26             >BLK_FNAME:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 167+ 7B26 2D 76       >                dw      Create_Ptr ; ok        // for primitive definitions  actual code
 167+ 7B28             >                else
 167+ 7B28 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 167+ 7B28             >                endif           ; ok        // for other definitions it "points" the correct handler
 167+ 7B28             >                // Use of "; ok" to suppress "warning[fwdref]"
 167+ 7B28             >
 167+ 7B28             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 168+ 7B28 0E 21 42 6C                  db      14, "!Blocks-64.bin", 0
 168+ 7B2C 6F 63 6B 73
 168+ 7B30 2D 36 34 2E
 168+ 7B34 62 69 6E 00
 169+ 7B38 00 00 00...                  ds      24
 170+ 7B50
 171+ 7B50              //  ______________________________________________________________________
 172+ 7B50              //
 173+ 7B50              // blk-seek     n --
 174+ 7B50              // seek block n  within blocks!.bin  file
 175+ 7B50                              Colon_Def BLK_SEEK, "BLK-SEEK", is_normal
 175+ 7B50             >                New_Def  BLK_SEEK, "BLK-SEEK", Enter_Ptr, is_normal ; ok
 175+ 7B50             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 175+ 7B50             >
 175+ 7B50             >                // dummy db directives used to calculate length of namec
 175+ 7B50 42 4C 4B 2D >                db      "BLK-SEEK"
 175+ 7B54 53 45 45 4B >
 175+ 7B58             >len_NFA         defl    $ - temp_NFA
 175+ 7B58             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 175+ 7B50             >
 175+ 7B50 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 175+ 7B51 42 4C 4B 2D >                db      "BLK-SEEK"               // name string in 7-bit ascii, but
 175+ 7B55 53 45 45 4B >
 175+ 7B59             >                org     $-1                 // alter last byte of Name just above to set
 175+ 7B58 CB          >                db      {b $} | END_BIT     // msb as name end
 175+ 7B59             >
 175+ 7B59 1A 7B       >                dw      last_NFA            // Link to previous definition Name
 175+ 7B5B             >BLK_SEEK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 175+ 7B5B 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 175+ 7B5D             >                else
 175+ 7B5D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 175+ 7B5D             >                endif           ; ok        // for other definitions it "points" the correct handler
 175+ 7B5D             >                // Use of "; ok" to suppress "warning[fwdref]"
 175+ 7B5D             >
 175+ 7B5D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 176+ 7B5D EF 6C 16 79                  dw  BBUF, MMUL
 177+ 7B61 16 7B 43 6B                  dw  BLK_FH, FETCH
 178+ 7B65 2E 67                        dw  F_SEEK
 179+ 7B67 A9 63 2D 00                  dw  LIT, $2D, QERROR
 179+ 7B6B 4C 70
 180+ 7B6D 23 69                        dw  EXIT
 181+ 7B6F
 182+ 7B6F              //  ______________________________________________________________________
 183+ 7B6F              //
 184+ 7B6F              // blk-read     n --
 185+ 7B6F              // seek block n  within blocks!.bin  file
 186+ 7B6F                              Colon_Def BLK_READ, "BLK-READ", is_normal
 186+ 7B6F             >                New_Def  BLK_READ, "BLK-READ", Enter_Ptr, is_normal ; ok
 186+ 7B6F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 186+ 7B6F             >
 186+ 7B6F             >                // dummy db directives used to calculate length of namec
 186+ 7B6F 42 4C 4B 2D >                db      "BLK-READ"
 186+ 7B73 52 45 41 44 >
 186+ 7B77             >len_NFA         defl    $ - temp_NFA
 186+ 7B77             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 186+ 7B6F             >
 186+ 7B6F 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 186+ 7B70 42 4C 4B 2D >                db      "BLK-READ"               // name string in 7-bit ascii, but
 186+ 7B74 52 45 41 44 >
 186+ 7B78             >                org     $-1                 // alter last byte of Name just above to set
 186+ 7B77 C4          >                db      {b $} | END_BIT     // msb as name end
 186+ 7B78             >
 186+ 7B78 50 7B       >                dw      last_NFA            // Link to previous definition Name
 186+ 7B7A             >BLK_READ:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 186+ 7B7A 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 186+ 7B7C             >                else
 186+ 7B7C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 186+ 7B7C             >                endif           ; ok        // for other definitions it "points" the correct handler
 186+ 7B7C             >                // Use of "; ok" to suppress "warning[fwdref]"
 186+ 7B7C             >
 186+ 7B7C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 187+ 7B7C 5B 7B                        dw  BLK_SEEK
 188+ 7B7E EF 6C                        dw  BBUF
 189+ 7B80 16 7B 43 6B                  dw  BLK_FH, FETCH
 190+ 7B84 71 67                        dw  F_READ
 191+ 7B86 A9 63 2E 00                  dw  LIT, $2E, QERROR
 191+ 7B8A 4C 70
 192+ 7B8C 7B 6A                        dw  DROP
 193+ 7B8E 23 69                        dw  EXIT
 194+ 7B90
 195+ 7B90              //  ______________________________________________________________________
 196+ 7B90              //
 197+ 7B90              // blk-write     n --
 198+ 7B90              // seek block n  within blocks!.bin  file
 199+ 7B90                              Colon_Def BLK_WRITE, "BLK-WRITE", is_normal
 199+ 7B90             >                New_Def  BLK_WRITE, "BLK-WRITE", Enter_Ptr, is_normal ; ok
 199+ 7B90             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 199+ 7B90             >
 199+ 7B90             >                // dummy db directives used to calculate length of namec
 199+ 7B90 42 4C 4B 2D >                db      "BLK-WRITE"
 199+ 7B94 57 52 49 54 >
 199+ 7B98 45          >
 199+ 7B99             >len_NFA         defl    $ - temp_NFA
 199+ 7B99             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 199+ 7B90             >
 199+ 7B90 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 199+ 7B91 42 4C 4B 2D >                db      "BLK-WRITE"               // name string in 7-bit ascii, but
 199+ 7B95 57 52 49 54 >
 199+ 7B99 45          >
 199+ 7B9A             >                org     $-1                 // alter last byte of Name just above to set
 199+ 7B99 C5          >                db      {b $} | END_BIT     // msb as name end
 199+ 7B9A             >
 199+ 7B9A 6F 7B       >                dw      last_NFA            // Link to previous definition Name
 199+ 7B9C             >BLK_WRITE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 199+ 7B9C 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 199+ 7B9E             >                else
 199+ 7B9E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 199+ 7B9E             >                endif           ; ok        // for other definitions it "points" the correct handler
 199+ 7B9E             >                // Use of "; ok" to suppress "warning[fwdref]"
 199+ 7B9E             >
 199+ 7B9E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 200+ 7B9E 5B 7B                        dw  BLK_SEEK
 201+ 7BA0 EF 6C                        dw  BBUF
 202+ 7BA2 16 7B 43 6B                  dw  BLK_FH, FETCH
 203+ 7BA6 90 67                        dw  F_WRITE
 204+ 7BA8 A9 63 2F 00                  dw  LIT, $2F, QERROR
 204+ 7BAC 4C 70
 205+ 7BAE 7B 6A                        dw  DROP
 206+ 7BB0 23 69                        dw  EXIT
 207+ 7BB2
 208+ 7BB2              //  ______________________________________________________________________
 209+ 7BB2              //
 210+ 7BB2              // blk-init     n --
 211+ 7BB2              // seek block n  within blocks!.bin  file
 212+ 7BB2                              Colon_Def BLK_INIT, "BLK-INIT", is_normal
 212+ 7BB2             >                New_Def  BLK_INIT, "BLK-INIT", Enter_Ptr, is_normal ; ok
 212+ 7BB2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 212+ 7BB2             >
 212+ 7BB2             >                // dummy db directives used to calculate length of namec
 212+ 7BB2 42 4C 4B 2D >                db      "BLK-INIT"
 212+ 7BB6 49 4E 49 54 >
 212+ 7BBA             >len_NFA         defl    $ - temp_NFA
 212+ 7BBA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 212+ 7BB2             >
 212+ 7BB2 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 212+ 7BB3 42 4C 4B 2D >                db      "BLK-INIT"               // name string in 7-bit ascii, but
 212+ 7BB7 49 4E 49 54 >
 212+ 7BBB             >                org     $-1                 // alter last byte of Name just above to set
 212+ 7BBA D4          >                db      {b $} | END_BIT     // msb as name end
 212+ 7BBB             >
 212+ 7BBB 90 7B       >                dw      last_NFA            // Link to previous definition Name
 212+ 7BBD             >BLK_INIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 212+ 7BBD 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 212+ 7BBF             >                else
 212+ 7BBF ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 212+ 7BBF             >                endif           ; ok        // for other definitions it "points" the correct handler
 212+ 7BBF             >                // Use of "; ok" to suppress "warning[fwdref]"
 212+ 7BBF             >
 212+ 7BBF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 213+ 7BBF 16 7B 43 6B                  dw  BLK_FH, FETCH, F_CLOSE, DROP
 213+ 7BC3 AF 67 7B 6A
 214+ 7BC7 26 7B ED 69                  dw  BLK_FNAME, ONE_PLUS
 215+ 7BCB 81 6E C7 6C                  dw  HERE, THREE, F_OPEN         // open for update (read+write)
 215+ 7BCF C9 67
 216+ 7BD1 A9 63 2C 00                  dw  LIT, $2C, QERROR
 216+ 7BD5 4C 70
 217+ 7BD7 16 7B 50 6B                  dw  BLK_FH, STORE
 218+ 7BDB 23 69                        dw  EXIT
 219+ 7BDD
 220+ 7BDD              //  ______________________________________________________________________
 221+ 7BDD              //
 222+ 7BDD              // #sec
 223+ 7BDD              // number of 512 Byte "sector" available on thie sysstem.
 224+ 7BDD              // it addd up to 16 MByte of data that can be used as source or pool for almost anything.
 225+ 7BDD
 226+ 7BDD                              Constant_Def NSEC , "#SEC", 32767
 226+ 7BDD             >                New_Def  NSEC, "#SEC", Constant_Ptr, is_normal
 226+ 7BDD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 226+ 7BDD             >
 226+ 7BDD             >                // dummy db directives used to calculate length of namec
 226+ 7BDD 23 53 45 43 >                db      "#SEC"
 226+ 7BE1             >len_NFA         defl    $ - temp_NFA
 226+ 7BE1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 226+ 7BDD             >
 226+ 7BDD 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 226+ 7BDE 23 53 45 43 >                db      "#SEC"               // name string in 7-bit ascii, but
 226+ 7BE2             >                org     $-1                 // alter last byte of Name just above to set
 226+ 7BE1 C3          >                db      {b $} | END_BIT     // msb as name end
 226+ 7BE2             >
 226+ 7BE2 B2 7B       >                dw      last_NFA            // Link to previous definition Name
 226+ 7BE4             >NSEC:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 226+ 7BE4 73 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 226+ 7BE6             >                else
 226+ 7BE6 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 226+ 7BE6             >                endif           ; ok        // for other definitions it "points" the correct handler
 226+ 7BE6             >                // Use of "; ok" to suppress "warning[fwdref]"
 226+ 7BE6             >
 226+ 7BE6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 226+ 7BE6 FF 7F       >                dw      32767
 227+ 7BE8
 228+ 7BE8              //  ______________________________________________________________________
 229+ 7BE8
 230+ 7BE8
 231+ 7BE8
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/next-opt1.asm
 112  7BE8                              include "L3.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L3.asm
   1+ 7BE8              //  ______________________________________________________________________
   2+ 7BE8              //
   3+ 7BE8              //  L3.asm
   4+ 7BE8              //
   5+ 7BE8              //  Continuation of L2.asm
   6+ 7BE8              //  I/O Block definitions
   7+ 7BE8              //  ______________________________________________________________________
   8+ 7BE8
   9+ 7BE8
  10+ 7BE8              //  ______________________________________________________________________
  11+ 7BE8              //
  12+ 7BE8              // r/w          a n f --
  13+ 7BE8              // read/write block n depending on flag f, true-flag means read, false-flag means write.
  14+ 7BE8                              Colon_Def READ_WRITE, "R/W", is_normal
  14+ 7BE8             >                New_Def  READ_WRITE, "R/W", Enter_Ptr, is_normal ; ok
  14+ 7BE8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  14+ 7BE8             >
  14+ 7BE8             >                // dummy db directives used to calculate length of namec
  14+ 7BE8 52 2F 57    >                db      "R/W"
  14+ 7BEB             >len_NFA         defl    $ - temp_NFA
  14+ 7BEB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  14+ 7BE8             >
  14+ 7BE8 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  14+ 7BE9 52 2F 57    >                db      "R/W"               // name string in 7-bit ascii, but
  14+ 7BEC             >                org     $-1                 // alter last byte of Name just above to set
  14+ 7BEB D7          >                db      {b $} | END_BIT     // msb as name end
  14+ 7BEC             >
  14+ 7BEC DD 7B       >                dw      last_NFA            // Link to previous definition Name
  14+ 7BEE             >READ_WRITE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  14+ 7BEE 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  14+ 7BF0             >                else
  14+ 7BF0 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  14+ 7BF0             >                endif           ; ok        // for other definitions it "points" the correct handler
  14+ 7BF0             >                // Use of "; ok" to suppress "warning[fwdref]"
  14+ 7BF0             >
  14+ 7BF0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  15+ 7BF0 4C 69                        dw      TO_R                    // >r
  16+ 7BF2 F9 69                        dw      ONE_SUBTRACT            // 1-
  17+ 7BF4 B0 6A 9C 69                  dw      DUP, ZLESS              // dup 0<
  18+ 7BF8 6B 6A E4 7B                  dw      OVER, NSEC              // over #sec
  19+ 7BFC F9 69 20 6F                  dw      ONE_SUBTRACT, GREATER   // 1- >
  20+ 7C00 C7 68                        dw      OR_OP                   // or
  21+ 7C02 A9 63 06 00                  dw      LIT, 6, QERROR          // 6 ?error
  21+ 7C06 4C 70
  22+ 7C08 60 69                        dw      R_TO                    // r>
  23+ 7C0A                                                              // if
  24+ 7C0A E3 63                        dw      ZBRANCH
  25+ 7C0C 08 00                        dw      Read_Write_Else - $
  26+ 7C0E 7A 7B                        dw          BLK_READ            //      blk-read
  27+ 7C10 CC 63                        dw      BRANCH
  28+ 7C12 04 00                        dw      Read_Write_Endif - $
  29+ 7C14              Read_Write_Else:                                // else
  30+ 7C14 9C 7B                        dw          BLK_WRITE           //      blk-write
  31+ 7C16              Read_Write_Endif:                               // endif
  32+ 7C16 23 69                        dw      EXIT                    // ;
  33+ 7C18
  34+ 7C18
  35+ 7C18              //  ______________________________________________________________________
  36+ 7C18              //
  37+ 7C18              // +buf        a1 -- a2 f
  38+ 7C18              // advences to next buffer, cyclically rotating along them
  39+ 7C18                              Colon_Def PBUF, "+BUF", is_normal
  39+ 7C18             >                New_Def  PBUF, "+BUF", Enter_Ptr, is_normal ; ok
  39+ 7C18             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  39+ 7C18             >
  39+ 7C18             >                // dummy db directives used to calculate length of namec
  39+ 7C18 2B 42 55 46 >                db      "+BUF"
  39+ 7C1C             >len_NFA         defl    $ - temp_NFA
  39+ 7C1C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  39+ 7C18             >
  39+ 7C18 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  39+ 7C19 2B 42 55 46 >                db      "+BUF"               // name string in 7-bit ascii, but
  39+ 7C1D             >                org     $-1                 // alter last byte of Name just above to set
  39+ 7C1C C6          >                db      {b $} | END_BIT     // msb as name end
  39+ 7C1D             >
  39+ 7C1D E8 7B       >                dw      last_NFA            // Link to previous definition Name
  39+ 7C1F             >PBUF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  39+ 7C1F 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  39+ 7C21             >                else
  39+ 7C21 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  39+ 7C21             >                endif           ; ok        // for other definitions it "points" the correct handler
  39+ 7C21             >                // Use of "; ok" to suppress "warning[fwdref]"
  39+ 7C21             >
  39+ 7C21             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  40+ 7C21 A9 63 04 02                  dw      LIT, 516, PLUS          // 516 +
  40+ 7C25 C4 69
  41+ 7C27 B0 6A 91 6D                  dw      DUP, LIMIT, FETCH       // dup limit @
  41+ 7C2B 43 6B
  42+ 7C2D E3 6E                        dw      EQUALS                  // =
  43+ 7C2F                                                              // if
  44+ 7C2F E3 63                        dw      ZBRANCH
  45+ 7C31 08 00                        dw      PBuf_Endif - $
  46+ 7C33 7B 6A                        dw          DROP                //      drop
  47+ 7C35 86 6D 43 6B                  dw          FIRST, FETCH        //      first @
  48+ 7C39              PBuf_Endif:                                     // endif
  49+ 7C39 B0 6A 43 6E                  dw      DUP, PREV, FETCH        // dup prev @
  49+ 7C3D 43 6B
  50+ 7C3F D5 6E                        dw      SUBTRACT                // -
  51+ 7C41 23 69                        dw      EXIT                    // ;
  52+ 7C43
  53+ 7C43              //  ______________________________________________________________________
  54+ 7C43              //
  55+ 7C43              // update       --
  56+ 7C43              // mark the last used block to be written to disk
  57+ 7C43                              Colon_Def UPDATE, "UPDATE", is_normal
  57+ 7C43             >                New_Def  UPDATE, "UPDATE", Enter_Ptr, is_normal ; ok
  57+ 7C43             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  57+ 7C43             >
  57+ 7C43             >                // dummy db directives used to calculate length of namec
  57+ 7C43 55 50 44 41 >                db      "UPDATE"
  57+ 7C47 54 45       >
  57+ 7C49             >len_NFA         defl    $ - temp_NFA
  57+ 7C49             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  57+ 7C43             >
  57+ 7C43 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  57+ 7C44 55 50 44 41 >                db      "UPDATE"               // name string in 7-bit ascii, but
  57+ 7C48 54 45       >
  57+ 7C4A             >                org     $-1                 // alter last byte of Name just above to set
  57+ 7C49 C5          >                db      {b $} | END_BIT     // msb as name end
  57+ 7C4A             >
  57+ 7C4A 18 7C       >                dw      last_NFA            // Link to previous definition Name
  57+ 7C4C             >UPDATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  57+ 7C4C 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  57+ 7C4E             >                else
  57+ 7C4E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  57+ 7C4E             >                endif           ; ok        // for other definitions it "points" the correct handler
  57+ 7C4E             >                // Use of "; ok" to suppress "warning[fwdref]"
  57+ 7C4E             >
  57+ 7C4E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  58+ 7C4E 43 6E 43 6B                  dw      PREV, FETCH, FETCH      // prev @ @
  58+ 7C52 43 6B
  59+ 7C54 A9 63 00 80                  dw      LIT, $8000, OR_OP       // $8000, or
  59+ 7C58 C7 68
  60+ 7C5A 43 6E 43 6B                  dw      PREV, FETCH, STORE      // prev @ !
  60+ 7C5E 50 6B
  61+ 7C60 23 69                        dw      EXIT                    // ;
  62+ 7C62
  63+ 7C62
  64+ 7C62              //  ______________________________________________________________________
  65+ 7C62              //
  66+ 7C62              // empty-buffers --
  67+ 7C62                              Colon_Def EMPTY_BUFFERS, "EMPTY-BUFFERS", is_normal
  67+ 7C62             >                New_Def  EMPTY_BUFFERS, "EMPTY-BUFFERS", Enter_Ptr, is_normal ; ok
  67+ 7C62             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  67+ 7C62             >
  67+ 7C62             >                // dummy db directives used to calculate length of namec
  67+ 7C62 45 4D 50 54 >                db      "EMPTY-BUFFERS"
  67+ 7C66 59 2D 42 55 >
  67+ 7C6A 46 46 45 52 >
  67+ 7C6E 53          >
  67+ 7C6F             >len_NFA         defl    $ - temp_NFA
  67+ 7C6F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  67+ 7C62             >
  67+ 7C62 8D          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  67+ 7C63 45 4D 50 54 >                db      "EMPTY-BUFFERS"               // name string in 7-bit ascii, but
  67+ 7C67 59 2D 42 55 >
  67+ 7C6B 46 46 45 52 >
  67+ 7C6F 53          >
  67+ 7C70             >                org     $-1                 // alter last byte of Name just above to set
  67+ 7C6F D3          >                db      {b $} | END_BIT     // msb as name end
  67+ 7C70             >
  67+ 7C70 43 7C       >                dw      last_NFA            // Link to previous definition Name
  67+ 7C72             >EMPTY_BUFFERS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  67+ 7C72 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  67+ 7C74             >                else
  67+ 7C74 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  67+ 7C74             >                endif           ; ok        // for other definitions it "points" the correct handler
  67+ 7C74             >                // Use of "; ok" to suppress "warning[fwdref]"
  67+ 7C74             >
  67+ 7C74             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  68+ 7C74 86 6D 43 6B                  dw      FIRST, FETCH            // first @
  69+ 7C78 91 6D 43 6B                  dw      LIMIT, FETCH            // limit @
  70+ 7C7C 6B 6A D5 6E                  dw      OVER, SUBTRACT, ERASE   // over - erase
  70+ 7C80 31 73
  71+ 7C82 23 69                        dw      EXIT                    // ;
  72+ 7C84
  73+ 7C84              //  ______________________________________________________________________
  74+ 7C84              //
  75+ 7C84              // buffer       n -- a
  76+ 7C84              // read block n and gives the address to a buffer
  77+ 7C84              // any block previously inside the buffer, if modified, is rewritten to
  78+ 7C84              // disk before reading the block n.
  79+ 7C84
  80+ 7C84                              Colon_Def BUFFER, "BUFFER", is_normal
  80+ 7C84             >                New_Def  BUFFER, "BUFFER", Enter_Ptr, is_normal ; ok
  80+ 7C84             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  80+ 7C84             >
  80+ 7C84             >                // dummy db directives used to calculate length of namec
  80+ 7C84 42 55 46 46 >                db      "BUFFER"
  80+ 7C88 45 52       >
  80+ 7C8A             >len_NFA         defl    $ - temp_NFA
  80+ 7C8A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  80+ 7C84             >
  80+ 7C84 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  80+ 7C85 42 55 46 46 >                db      "BUFFER"               // name string in 7-bit ascii, but
  80+ 7C89 45 52       >
  80+ 7C8B             >                org     $-1                 // alter last byte of Name just above to set
  80+ 7C8A D2          >                db      {b $} | END_BIT     // msb as name end
  80+ 7C8B             >
  80+ 7C8B 62 7C       >                dw      last_NFA            // Link to previous definition Name
  80+ 7C8D             >BUFFER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  80+ 7C8D 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  80+ 7C8F             >                else
  80+ 7C8F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  80+ 7C8F             >                endif           ; ok        // for other definitions it "points" the correct handler
  80+ 7C8F             >                // Use of "; ok" to suppress "warning[fwdref]"
  80+ 7C8F             >
  80+ 7C8F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  81+ 7C8F 39 6E 43 6B                  dw      USE, FETCH              // use @
  82+ 7C93 B0 6A 4C 69                  dw      DUP, TO_R               // dup >r
  83+ 7C97                                                              // begin
  84+ 7C97              Buffer_Begin:
  85+ 7C97 1F 7C                        dw          PBUF                //      +buf
  86+ 7C99                                                              // until
  87+ 7C99 E3 63                        dw      ZBRANCH
  88+ 7C9B FC FF                        dw      Buffer_Begin - $
  89+ 7C9D 39 6E 50 6B                  dw      USE, STORE              // use !
  90+ 7CA1 74 69 43 6B                  dw      R_OP, FETCH, ZLESS      // r @ 0<
  90+ 7CA5 9C 69
  91+ 7CA7                                                              // if
  92+ 7CA7 E3 63                        dw      ZBRANCH
  93+ 7CA9 14 00                        dw      Buffer_Endif - $
  94+ 7CAB 74 69 15 6A                  dw          R_OP, CELL_PLUS     //      r cell+
  95+ 7CAF 74 69 43 6B                  dw          R_OP, FETCH         //      r fetch
  96+ 7CB3 A9 63 FF 7F                  dw          LIT, $7FFF          //      7FFF
  97+ 7CB7 B5 68                        dw          AND_OP              //      and
  98+ 7CB9 AF 6C EE 7B                  dw          ZERO, READ_WRITE    //      0 r/w
  99+ 7CBD              Buffer_Endif:                                   // endif
 100+ 7CBD 74 69 50 6B                  dw      R_OP, STORE             // r !
 101+ 7CC1 74 69 43 6E                  dw      R_OP, PREV, STORE       // r prev !
 101+ 7CC5 50 6B
 102+ 7CC7 60 69 15 6A                  dw      R_TO, CELL_PLUS         // r> cell+
 103+ 7CCB 23 69                        dw      EXIT                    // ;
 104+ 7CCD
 105+ 7CCD              //  ______________________________________________________________________
 106+ 7CCD              //
 107+ 7CCD              // block        n -- a
 108+ 7CCD              // Leaves the buffer address that contains the block n.
 109+ 7CCD              // If the block is not already present, it will be loaded from disk
 110+ 7CCD              // The block previously inside the buffer, if modified, is rewritten to
 111+ 7CCD              // disk before reading the block n.
 112+ 7CCD              // See also BUFFER, R/W, UPDATE, FLUSH.
 113+ 7CCD
 114+ 7CCD                              Colon_Def BLOCK, "BLOCK", is_normal
 114+ 7CCD             >                New_Def  BLOCK, "BLOCK", Enter_Ptr, is_normal ; ok
 114+ 7CCD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 114+ 7CCD             >
 114+ 7CCD             >                // dummy db directives used to calculate length of namec
 114+ 7CCD 42 4C 4F 43 >                db      "BLOCK"
 114+ 7CD1 4B          >
 114+ 7CD2             >len_NFA         defl    $ - temp_NFA
 114+ 7CD2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 114+ 7CCD             >
 114+ 7CCD 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 114+ 7CCE 42 4C 4F 43 >                db      "BLOCK"               // name string in 7-bit ascii, but
 114+ 7CD2 4B          >
 114+ 7CD3             >                org     $-1                 // alter last byte of Name just above to set
 114+ 7CD2 CB          >                db      {b $} | END_BIT     // msb as name end
 114+ 7CD3             >
 114+ 7CD3 84 7C       >                dw      last_NFA            // Link to previous definition Name
 114+ 7CD5             >BLOCK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 114+ 7CD5 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 114+ 7CD7             >                else
 114+ 7CD7 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 114+ 7CD7             >                endif           ; ok        // for other definitions it "points" the correct handler
 114+ 7CD7             >                // Use of "; ok" to suppress "warning[fwdref]"
 114+ 7CD7             >
 114+ 7CD7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 115+ 7CD7 D5 6D 43 6B                  dw      OFFSET, FETCH           // offset @
 116+ 7CDB C4 69 4C 69                  dw      PLUS, TO_R              // + >r
 117+ 7CDF 43 6E 43 6B                  dw      PREV, FETCH             // prev @
 118+ 7CE3 B0 6A 43 6B                  dw      DUP, FETCH              // dup @
 119+ 7CE7 74 69 D5 6E                  dw      R_OP, SUBTRACT          // r -
 120+ 7CEB B0 6A C4 69                  dw      DUP, PLUS               // dup +  ( trick: check equality without most significant bit )
 121+ 7CEF                                                              // if
 122+ 7CEF E3 63                        dw        ZBRANCH
 123+ 7CF1 34 00                        dw        Block_Endif_1 - $
 124+ 7CF3              Block_Begin:                                    //      begin
 125+ 7CF3 1F 7C 81 69                  dw          PBUF, ZEQUAL        //          +buf 0
 126+ 7CF7                                                              //          if
 127+ 7CF7 E3 63                        dw          ZBRANCH
 128+ 7CF9 14 00                        dw          Block_Endif_2 - $
 129+ 7CFB 7B 6A                        dw              DROP            //              drop
 130+ 7CFD 74 69 8D 7C                  dw              R_OP, BUFFER    //              r buffer
 131+ 7D01 B0 6A                        dw              DUP             //              dup
 132+ 7D03 74 69 B7 6C                  dw              R_OP, ONE       //              r 1
 133+ 7D07 EE 7B                        dw              READ_WRITE      //              r/w
 134+ 7D09 BF 6C D5 6E                  dw              TWO, SUBTRACT   //              2 -
 135+ 7D0D              Block_Endif_2:                                  //          endif
 136+ 7D0D B0 6A 43 6B                  dw          DUP, FETCH, R_OP    //          dup @ r
 136+ 7D11 74 69
 137+ 7D13 D5 6E B0 6A                  dw          SUBTRACT, DUP       //          - dup
 138+ 7D17 C4 69 81 69                  dw          PLUS, ZEQUAL        //          + 0=
 139+ 7D1B                                                              //      until
 140+ 7D1B E3 63                        dw        ZBRANCH
 141+ 7D1D D6 FF                        dw        Block_Begin - $
 142+ 7D1F B0 6A 43 6E                  dw        DUP, PREV, STORE      //      dup prev !
 142+ 7D23 50 6B
 143+ 7D25              Block_Endif_1:                                  // endif
 144+ 7D25 60 69 7B 6A                  dw      R_TO, DROP, CELL_PLUS   // r> drop cell+
 144+ 7D29 15 6A
 145+ 7D2B 23 69                        dw      EXIT                    // ;
 146+ 7D2D
 147+ 7D2D              //  ______________________________________________________________________
 148+ 7D2D              //
 149+ 7D2D              // #buff        -- n
 150+ 7D2D              // number of buffers available. must be the difference between LIMIT and FIRST divided by 516
 151+ 7D2D                              Constant_Def NBUFF,   "#BUFF", 7
 151+ 7D2D             >                New_Def  NBUFF, "#BUFF", Constant_Ptr, is_normal
 151+ 7D2D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 151+ 7D2D             >
 151+ 7D2D             >                // dummy db directives used to calculate length of namec
 151+ 7D2D 23 42 55 46 >                db      "#BUFF"
 151+ 7D31 46          >
 151+ 7D32             >len_NFA         defl    $ - temp_NFA
 151+ 7D32             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 151+ 7D2D             >
 151+ 7D2D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 151+ 7D2E 23 42 55 46 >                db      "#BUFF"               // name string in 7-bit ascii, but
 151+ 7D32 46          >
 151+ 7D33             >                org     $-1                 // alter last byte of Name just above to set
 151+ 7D32 C6          >                db      {b $} | END_BIT     // msb as name end
 151+ 7D33             >
 151+ 7D33 CD 7C       >                dw      last_NFA            // Link to previous definition Name
 151+ 7D35             >NBUFF:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 151+ 7D35 73 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 151+ 7D37             >                else
 151+ 7D37 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 151+ 7D37             >                endif           ; ok        // for other definitions it "points" the correct handler
 151+ 7D37             >                // Use of "; ok" to suppress "warning[fwdref]"
 151+ 7D37             >
 151+ 7D37             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 151+ 7D37 07 00       >                dw      7
 152+ 7D39
 153+ 7D39              //  ______________________________________________________________________
 154+ 7D39              //
 155+ 7D39              // flush        --
 156+ 7D39                              Colon_Def FLUSH, "FLUSH", is_normal
 156+ 7D39             >                New_Def  FLUSH, "FLUSH", Enter_Ptr, is_normal ; ok
 156+ 7D39             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 156+ 7D39             >
 156+ 7D39             >                // dummy db directives used to calculate length of namec
 156+ 7D39 46 4C 55 53 >                db      "FLUSH"
 156+ 7D3D 48          >
 156+ 7D3E             >len_NFA         defl    $ - temp_NFA
 156+ 7D3E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 156+ 7D39             >
 156+ 7D39 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 156+ 7D3A 46 4C 55 53 >                db      "FLUSH"               // name string in 7-bit ascii, but
 156+ 7D3E 48          >
 156+ 7D3F             >                org     $-1                 // alter last byte of Name just above to set
 156+ 7D3E C8          >                db      {b $} | END_BIT     // msb as name end
 156+ 7D3F             >
 156+ 7D3F 2D 7D       >                dw      last_NFA            // Link to previous definition Name
 156+ 7D41             >FLUSH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 156+ 7D41 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 156+ 7D43             >                else
 156+ 7D43 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 156+ 7D43             >                endif           ; ok        // for other definitions it "points" the correct handler
 156+ 7D43             >                // Use of "; ok" to suppress "warning[fwdref]"
 156+ 7D43             >
 156+ 7D43             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 157+ 7D43 35 7D ED 69                  dw      NBUFF, ONE_PLUS, ZERO   // #buff 1+ 0
 157+ 7D47 AF 6C
 158+ 7D49              Flush_Do:                                       // do
 159+ 7D49 6B 64                        dw      C_DO
 160+ 7D4B AF 6C 8D 7C                  dw      ZERO, BUFFER, DROP      //      0 buffer drop
 160+ 7D4F 7B 6A
 161+ 7D51                                                              // loop
 162+ 7D51 F8 63 F8 FF                  dw      C_LOOP, Flush_Do - $
 163+ 7D55 16 7B 43 6B                  dw      BLK_FH, FETCH           // blk-fh @     ( ZX-Next dependance )
 164+ 7D59 EC 67 7B 6A                  dw      F_SYNC, DROP            // f_sync drop
 165+ 7D5D 23 69                        dw      EXIT                    // exit
 166+ 7D5F
 167+ 7D5F              //  ______________________________________________________________________
 168+ 7D5F              //
 169+ 7D5F              // f_getline    a m fh -- n
 170+ 7D5F              // Given an open filehandle read next line (terminated with $0D or $0A)
 171+ 7D5F              // Address a is left for subsequent processing
 172+ 7D5F              // and n as the actual number of byte read, that is the length of line
 173+ 7D5F                              Colon_Def F_GETLINE, "F_GETLINE", is_normal
 173+ 7D5F             >                New_Def  F_GETLINE, "F_GETLINE", Enter_Ptr, is_normal ; ok
 173+ 7D5F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 173+ 7D5F             >
 173+ 7D5F             >                // dummy db directives used to calculate length of namec
 173+ 7D5F 46 5F 47 45 >                db      "F_GETLINE"
 173+ 7D63 54 4C 49 4E >
 173+ 7D67 45          >
 173+ 7D68             >len_NFA         defl    $ - temp_NFA
 173+ 7D68             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 173+ 7D5F             >
 173+ 7D5F 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 173+ 7D60 46 5F 47 45 >                db      "F_GETLINE"               // name string in 7-bit ascii, but
 173+ 7D64 54 4C 49 4E >
 173+ 7D68 45          >
 173+ 7D69             >                org     $-1                 // alter last byte of Name just above to set
 173+ 7D68 C5          >                db      {b $} | END_BIT     // msb as name end
 173+ 7D69             >
 173+ 7D69 39 7D       >                dw      last_NFA            // Link to previous definition Name
 173+ 7D6B             >F_GETLINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 173+ 7D6B 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 173+ 7D6D             >                else
 173+ 7D6D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 173+ 7D6D             >                endif           ; ok        // for other definitions it "points" the correct handler
 173+ 7D6D             >                // Use of "; ok" to suppress "warning[fwdref]"
 173+ 7D6D             >
 173+ 7D6D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 174+ 7D6D 4C 69                        dw      TO_R                    // >r               ( a  m  )     \  fh
 175+ 7D6F 93 6A                        dw      TUCK                    // tuck             ( m a m )
 176+ 7D71 74 69 53 67                  dw      R_OP, F_FGETPOS         // r f_fgetpos      ( m a m d f )
 177+ 7D75 A9 63 2C 00                  dw      LIT, 44, QERROR         // 44 ?error        ( m a m d )
 177+ 7D79 4C 70
 178+ 7D7B
 179+ 7D7B FF 6A 6B 6A                  dw      TWO_SWAP, OVER          // 2swap over       ( m d a m )
 180+ 7D7F ED 69 A3 6A                  dw      ONE_PLUS, SWAP          // 1+ swap          ( m d a a+1 m )
 181+ 7D83
 182+ 7D83 74 69 71 67                  dw      R_OP, F_READ            // r f_read         ( m d a n f )
 183+ 7D87 A9 63 2E 00                  dw      LIT, 46, QERROR         // 46 ?error        ( m d a n )
 183+ 7D8B 4C 70
 184+ 7D8D                                                              // if ( at least 1 chr was read )  \  fh
 185+ 7D8D E3 63                        dw      ZBRANCH
 186+ 7D8F 36 00                        dw      FGetline_Else - $
 187+ 7D91 A9 63 0A 00                  dw          LIT, 10, ENCLOSE    //      10 enclose       ( m d a x b x )
 187+ 7D95 56 65
 188+ 7D97 7B 6A 86 6A                  dw          DROP, NIP           //      drop nip         ( m d a b )
 189+ 7D9B A3 6A                        dw          SWAP                //      drop swap        ( m d b a )
 190+ 7D9D A9 63 0D 00                  dw          LIT, 13, ENCLOSE    //      13 enclose       ( m d b a x c x )
 190+ 7DA1 56 65
 191+ 7DA3 7B 6A 86 6A                  dw          DROP, NIP           //      drop nip         ( m d b a c )
 192+ 7DA7 BD 6A 2E 6F                  dw          ROT, MIN            //      rot min          ( m d a n )
 193+ 7DAB B0 6A 4C 69                  dw          DUP, TO_R           //      dup >r           ( m d a n )      \ fh n
 194+ 7DAF FF 6A 60 69                  dw          TWO_SWAP, R_TO      //      2swap r>         ( m a n d n )    \ fh
 195+ 7DB3 AF 6C D1 69                  dw          ZERO, DPLUS         //      0 d+             ( m a n d+n )
 196+ 7DB7 60 69 2E 67                  dw          R_TO, F_SEEK        //      r> f_seek        ( m a n f )
 197+ 7DBB A9 63 2D 00                  dw          LIT, 45, QERROR     //      45 ?error        ( m a n )
 197+ 7DBF 4C 70
 198+ 7DC1                                                              // else
 199+ 7DC1 CC 63                        dw      BRANCH
 200+ 7DC3 0C 00                        dw      FGetline_Endif - $
 201+ 7DC5              FGetline_Else:
 202+ 7DC5 60 69                        dw          R_TO                //      r>              ( m d a fh )
 203+ 7DC7 FF 6A F1 6A                  dw          TWO_SWAP, TWO_DROP  //      2swap 2drop     ( m a fh )
 204+ 7DCB 7B 6A AF 6C                  dw          DROP, ZERO          //      drop, 0         ( m a 0 )
 205+ 7DCF              FGetline_Endif:                                 // endif
 206+ 7DCF 4C 69 B0 6A                  dw      TO_R, DUP, DUP          // >r dup dup           ( m a a a )
 206+ 7DD3 B0 6A
 207+ 7DD5 ED 69 A3 6A                  dw      ONE_PLUS, SWAP          // 1+ swap              ( m a a+1 a )
 208+ 7DD9 74 69 11 68                  dw      R_OP, CMOVE             // r cmove              ( m a )
 209+ 7DDD 11 6B C4 69                  dw      TWO_DUP, PLUS           // 2dup +               ( m a m+a )
 210+ 7DE1 AF 6C A3 6A                  dw      ZERO, SWAP              // 0 swap
 211+ 7DE5 1F 6A 50 6B                  dw      CELL_MINUS,  STORE      // cell-  !             ( m a )
 212+ 7DE9 74 69 C4 69                  dw      R_OP, PLUS, ONE_SUBTRACT// r + 1-               ( m a+n1 )
 212+ 7DED F9 69
 213+ 7DEF A3 6A 74 69                  dw      SWAP, R_OP, SUBTRACT    // swap r -             ( a+n+1 m-n )
 213+ 7DF3 D5 6E
 214+ 7DF5 42 73                        dw      BLANKS                  // blanks
 215+ 7DF7 60 69                        dw      R_TO                    // r>                   ( n )
 216+ 7DF9 23 69                        dw      EXIT                    // ;
 217+ 7DFB
 218+ 7DFB              //  ______________________________________________________________________
 219+ 7DFB              //
 220+ 7DFB              // f_include    fh --
 221+ 7DFB              // Given a filehandle includes the source from file
 222+ 7DFB                              Colon_Def F_INCLUDE, "F_INCLUDE", is_normal
 222+ 7DFB             >                New_Def  F_INCLUDE, "F_INCLUDE", Enter_Ptr, is_normal ; ok
 222+ 7DFB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 222+ 7DFB             >
 222+ 7DFB             >                // dummy db directives used to calculate length of namec
 222+ 7DFB 46 5F 49 4E >                db      "F_INCLUDE"
 222+ 7DFF 43 4C 55 44 >
 222+ 7E03 45          >
 222+ 7E04             >len_NFA         defl    $ - temp_NFA
 222+ 7E04             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 222+ 7DFB             >
 222+ 7DFB 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 222+ 7DFC 46 5F 49 4E >                db      "F_INCLUDE"               // name string in 7-bit ascii, but
 222+ 7E00 43 4C 55 44 >
 222+ 7E04 45          >
 222+ 7E05             >                org     $-1                 // alter last byte of Name just above to set
 222+ 7E04 C5          >                db      {b $} | END_BIT     // msb as name end
 222+ 7E05             >
 222+ 7E05 5F 7D       >                dw      last_NFA            // Link to previous definition Name
 222+ 7E07             >F_INCLUDE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 222+ 7E07 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 222+ 7E09             >                else
 222+ 7E09 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 222+ 7E09             >                endif           ; ok        // for other definitions it "points" the correct handler
 222+ 7E09             >                // Use of "; ok" to suppress "warning[fwdref]"
 222+ 7E09             >
 222+ 7E09             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 223+ 7E09 AE 6D 43 6B                  dw      BLK, FETCH, TO_R        // blk @ >r
 223+ 7E0D 4C 69
 224+ 7E0F B7 6D 43 6B                  dw      TO_IN, FETCH, TO_R      // >in @ >r
 224+ 7E13 4C 69
 225+ 7E15 65 6E 43 6B                  dw      SOURCE_ID, FETCH, TO_R  // source-id @ >r
 225+ 7E19 4C 69
 226+ 7E1B 74 69                        dw      R_OP                    // r
 227+ 7E1D                                                              // if
 228+ 7E1D E3 63                        dw      ZBRANCH
 229+ 7E1F 10 00                        dw      FInclude_Else_1 - $
 230+ 7E21 74 69 53 67                  dw          R_OP, F_FGETPOS     //      r f_getpos
 231+ 7E25 A9 63 2C 00                  dw          LIT, 44, QERROR     //      44 ?error
 231+ 7E29 4C 70
 232+ 7E2B                                                              // else
 233+ 7E2B CC 63                        dw      BRANCH
 234+ 7E2D 06 00                        dw      FInclude_Endif_1 - $
 235+ 7E2F              FInclude_Else_1:
 236+ 7E2F AF 6C AF 6C                  dw          ZERO, ZERO          //      0 0
 237+ 7E33                                                              // endif
 238+ 7E33              FInclude_Endif_1:
 239+ 7E33 4C 69 4C 69                  dw      TO_R, TO_R              // >r >r
 240+ 7E37 65 6E 50 6B                  dw      SOURCE_ID, STORE        // source-id !
 241+ 7E3B              FInclude_Begin:                                 // begin
 242+ 7E3B B7 6C D5 7C                  dw          ONE, BLOCK, BBUF    //      1 block b/buf
 242+ 7E3F EF 6C
 243+ 7E41 11 6B 42 73                  dw          TWO_DUP, BLANKS     //      2dup blanks
 244+ 7E45 A3 6A ED 69                  dw          SWAP, ONE_PLUS      //      swap 1+
 245+ 7E49 A3 6A 1F 6A                  dw          SWAP, CELL_MINUS    //      swap cell-
 246+ 7E4D 65 6E 43 6B                  dw          SOURCE_ID, FETCH    //      source-id @
 247+ 7E51 6B 7D                        dw          F_GETLINE           //      f_getline
 248+ 7E53                                                              // while
 249+ 7E53 E3 63                        dw      ZBRANCH
 250+ 7E55 14 00                        dw      FInclude_Repeat - $
 251+ 7E57 B7 6C AE 6D                  dw          ONE, BLK, STORE     //      1 blk !
 251+ 7E5B 50 6B
 252+ 7E5D AF 6C B7 6D                  dw          ZERO, TO_IN, STORE  //      0 >in !
 252+ 7E61 50 6B
 253+ 7E63 1A 77                        dw          INTERPRET           //      interpret
 254+ 7E65 CC 63                        dw      BRANCH
 255+ 7E67 D4 FF                        dw      FInclude_Begin - $
 256+ 7E69              FInclude_Repeat:                                // repeat
 257+ 7E69 65 6E 43 6B                  dw      SOURCE_ID, FETCH        // source-id @
 258+ 7E6D AF 6C 65 6E                  dw      ZERO, SOURCE_ID, STORE  // 0 source-id !
 258+ 7E71 50 6B
 259+ 7E73 AF 67                        dw      F_CLOSE                 // f_close
 260+ 7E75 A9 63 2A 00                  dw      LIT, 42, QERROR         // 42 ?error
 260+ 7E79 4C 70
 261+ 7E7B 60 69 60 69                  dw      R_TO, R_TO, R_TO        // r> r> r>
 261+ 7E7F 60 69
 262+ 7E81 B0 6A 65 6E                  dw      DUP, SOURCE_ID, STORE   // dup source-id !
 262+ 7E85 50 6B
 263+ 7E87                                                              // if
 264+ 7E87 E3 63                        dw      ZBRANCH
 265+ 7E89 12 00                        dw      FInclude_Else_2 - $
 266+ 7E8B 65 6E 43 6B                  dw          SOURCE_ID, FETCH    //      source-id @
 267+ 7E8F 2E 67                        dw          F_SEEK              //      f_seek
 268+ 7E91 A9 63 2B 00                  dw          LIT, 43, QERROR     //      43, ?error
 268+ 7E95 4C 70
 269+ 7E97                                                              // else
 270+ 7E97 CC 63                        dw      BRANCH
 271+ 7E99 04 00                        dw      FInclude_Endif_2 - $
 272+ 7E9B              FInclude_Else_2:
 273+ 7E9B F1 6A                        dw          TWO_DROP            //      2drop
 274+ 7E9D              FInclude_Endif_2:                               // endif
 275+ 7E9D 60 69 B7 6D                  dw      R_TO, TO_IN, STORE      // r> >in !
 275+ 7EA1 50 6B
 276+ 7EA3 60 69 AE 6D                  dw      R_TO, BLK, STORE        // r> blk !
 276+ 7EA7 50 6B
 277+ 7EA9 23 69                        dw      EXIT                    // ;
 278+ 7EAB
 279+ 7EAB              //  ______________________________________________________________________
 280+ 7EAB              //
 281+ 7EAB              // open<         -- fh
 282+ 7EAB              // Open the following filename and return it file-handle
 283+ 7EAB              // Used in the form OPEN CCCC
 284+ 7EAB                              Colon_Def OPEN_FH, "OPEN<", is_normal
 284+ 7EAB             >                New_Def  OPEN_FH, "OPEN<", Enter_Ptr, is_normal ; ok
 284+ 7EAB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 284+ 7EAB             >
 284+ 7EAB             >                // dummy db directives used to calculate length of namec
 284+ 7EAB 4F 50 45 4E >                db      "OPEN<"
 284+ 7EAF 3C          >
 284+ 7EB0             >len_NFA         defl    $ - temp_NFA
 284+ 7EB0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 284+ 7EAB             >
 284+ 7EAB 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 284+ 7EAC 4F 50 45 4E >                db      "OPEN<"               // name string in 7-bit ascii, but
 284+ 7EB0 3C          >
 284+ 7EB1             >                org     $-1                 // alter last byte of Name just above to set
 284+ 7EB0 BC          >                db      {b $} | END_BIT     // msb as name end
 284+ 7EB1             >
 284+ 7EB1 FB 7D       >                dw      last_NFA            // Link to previous definition Name
 284+ 7EB3             >OPEN_FH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 284+ 7EB3 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 284+ 7EB5             >                else
 284+ 7EB5 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 284+ 7EB5             >                endif           ; ok        // for other definitions it "points" the correct handler
 284+ 7EB5             >                // Use of "; ok" to suppress "warning[fwdref]"
 284+ 7EB5             >
 284+ 7EB5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 285+ 7EB5 D9 6C                        dw      BL
 286+ 7EB7 7A 73 E6 71                  dw      WORD, COUNT, OVER       // bl word count over
 286+ 7EBB 6B 6A
 287+ 7EBD C4 69 AF 6C                  dw      PLUS, ZERO, SWAP, STORE // + 0 swap !
 287+ 7EC1 A3 6A 50 6B
 288+ 7EC5 67 73 B7 6C                  dw      PAD, ONE, F_OPEN        // pad 1 f_open
 288+ 7EC9 C9 67
 289+ 7ECB A9 63 2B 00                  dw      LIT, 43                 // 43
 290+ 7ECF 4C 70                        dw      QERROR                  // ?error
 291+ 7ED1 23 69                        dw      EXIT                    // ;
 292+ 7ED3
 293+ 7ED3              //  ______________________________________________________________________
 294+ 7ED3              //
 295+ 7ED3              // include      -- cccc
 296+ 7ED3              // Include the following filename
 297+ 7ED3                              Colon_Def INCLUDE, "INCLUDE", is_normal
 297+ 7ED3             >                New_Def  INCLUDE, "INCLUDE", Enter_Ptr, is_normal ; ok
 297+ 7ED3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 297+ 7ED3             >
 297+ 7ED3             >                // dummy db directives used to calculate length of namec
 297+ 7ED3 49 4E 43 4C >                db      "INCLUDE"
 297+ 7ED7 55 44 45    >
 297+ 7EDA             >len_NFA         defl    $ - temp_NFA
 297+ 7EDA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 297+ 7ED3             >
 297+ 7ED3 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 297+ 7ED4 49 4E 43 4C >                db      "INCLUDE"               // name string in 7-bit ascii, but
 297+ 7ED8 55 44 45    >
 297+ 7EDB             >                org     $-1                 // alter last byte of Name just above to set
 297+ 7EDA C5          >                db      {b $} | END_BIT     // msb as name end
 297+ 7EDB             >
 297+ 7EDB AB 7E       >                dw      last_NFA            // Link to previous definition Name
 297+ 7EDD             >INCLUDE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 297+ 7EDD 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 297+ 7EDF             >                else
 297+ 7EDF ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 297+ 7EDF             >                endif           ; ok        // for other definitions it "points" the correct handler
 297+ 7EDF             >                // Use of "; ok" to suppress "warning[fwdref]"
 297+ 7EDF             >
 297+ 7EDF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 298+ 7EDF B3 7E                        dw      OPEN_FH                 // open
 299+ 7EE1 B0 6A 07 7E                  dw      DUP, F_INCLUDE          // dup f_include
 300+ 7EE5 AF 67 7B 6A                  dw      F_CLOSE, DROP           // f_close drop
 301+ 7EE9 23 69                        dw      EXIT                    // ;
 302+ 7EEB
 303+ 7EEB              //  ______________________________________________________________________
 304+ 7EEB              //
 305+ 7EEB              // needs
 306+ 7EEB              // check for cccc exists in vocabulary
 307+ 7EEB              // if it doesn't then  INCLUDE  inc/cccc.F
 308+ 7EEB
 309+ 7EEB              // temp filename cccc.f as counted string zero-padded
 310+ 7EEB                              New_Def NEEDS_W,   "NEEDS-W", Create_Ptr, is_normal
 310+ 7EEB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 310+ 7EEB             >
 310+ 7EEB             >                // dummy db directives used to calculate length of namec
 310+ 7EEB 4E 45 45 44 >                db      "NEEDS-W"
 310+ 7EEF 53 2D 57    >
 310+ 7EF2             >len_NFA         defl    $ - temp_NFA
 310+ 7EF2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 310+ 7EEB             >
 310+ 7EEB 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 310+ 7EEC 4E 45 45 44 >                db      "NEEDS-W"               // name string in 7-bit ascii, but
 310+ 7EF0 53 2D 57    >
 310+ 7EF3             >                org     $-1                 // alter last byte of Name just above to set
 310+ 7EF2 D7          >                db      {b $} | END_BIT     // msb as name end
 310+ 7EF3             >
 310+ 7EF3 D3 7E       >                dw      last_NFA            // Link to previous definition Name
 310+ 7EF5             >NEEDS_W:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 310+ 7EF5 2D 76       >                dw      Create_Ptr ; ok        // for primitive definitions  actual code
 310+ 7EF7             >                else
 310+ 7EF7 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 310+ 7EF7             >                endif           ; ok        // for other definitions it "points" the correct handler
 310+ 7EF7             >                // Use of "; ok" to suppress "warning[fwdref]"
 310+ 7EF7             >
 310+ 7EF7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 311+ 7EF7 00 00 00...                  ds      35                      // 32 + .f + 0x00 = len 35
 312+ 7F1A              // temp complete path+filename
 313+ 7F1A                              New_Def NEEDS_FN,  "NEEDS-FN", Create_Ptr, is_normal
 313+ 7F1A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 313+ 7F1A             >
 313+ 7F1A             >                // dummy db directives used to calculate length of namec
 313+ 7F1A 4E 45 45 44 >                db      "NEEDS-FN"
 313+ 7F1E 53 2D 46 4E >
 313+ 7F22             >len_NFA         defl    $ - temp_NFA
 313+ 7F22             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 313+ 7F1A             >
 313+ 7F1A 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 313+ 7F1B 4E 45 45 44 >                db      "NEEDS-FN"               // name string in 7-bit ascii, but
 313+ 7F1F 53 2D 46 4E >
 313+ 7F23             >                org     $-1                 // alter last byte of Name just above to set
 313+ 7F22 CE          >                db      {b $} | END_BIT     // msb as name end
 313+ 7F23             >
 313+ 7F23 EB 7E       >                dw      last_NFA            // Link to previous definition Name
 313+ 7F25             >NEEDS_FN:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 313+ 7F25 2D 76       >                dw      Create_Ptr ; ok        // for primitive definitions  actual code
 313+ 7F27             >                else
 313+ 7F27 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 313+ 7F27             >                endif           ; ok        // for other definitions it "points" the correct handler
 313+ 7F27             >                // Use of "; ok" to suppress "warning[fwdref]"
 313+ 7F27             >
 313+ 7F27             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 314+ 7F27 00 00 00...                  ds      40
 315+ 7F4F              // constant path
 316+ 7F4F                              New_Def NEEDS_INC,  "NEEDS-INC", Create_Ptr, is_normal
 316+ 7F4F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 316+ 7F4F             >
 316+ 7F4F             >                // dummy db directives used to calculate length of namec
 316+ 7F4F 4E 45 45 44 >                db      "NEEDS-INC"
 316+ 7F53 53 2D 49 4E >
 316+ 7F57 43          >
 316+ 7F58             >len_NFA         defl    $ - temp_NFA
 316+ 7F58             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 316+ 7F4F             >
 316+ 7F4F 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 316+ 7F50 4E 45 45 44 >                db      "NEEDS-INC"               // name string in 7-bit ascii, but
 316+ 7F54 53 2D 49 4E >
 316+ 7F58 43          >
 316+ 7F59             >                org     $-1                 // alter last byte of Name just above to set
 316+ 7F58 C3          >                db      {b $} | END_BIT     // msb as name end
 316+ 7F59             >
 316+ 7F59 1A 7F       >                dw      last_NFA            // Link to previous definition Name
 316+ 7F5B             >NEEDS_INC:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 316+ 7F5B 2D 76       >                dw      Create_Ptr ; ok        // for primitive definitions  actual code
 316+ 7F5D             >                else
 316+ 7F5D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 316+ 7F5D             >                endif           ; ok        // for other definitions it "points" the correct handler
 316+ 7F5D             >                // Use of "; ok" to suppress "warning[fwdref]"
 316+ 7F5D             >
 316+ 7F5D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 317+ 7F5D 04 69 6E 63                  db      4, "inc/", 0
 317+ 7F61 2F 00
 318+ 7F63                              New_Def NEEDS_LIB,  "NEEDS-LIB", Create_Ptr, is_normal
 318+ 7F63             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 318+ 7F63             >
 318+ 7F63             >                // dummy db directives used to calculate length of namec
 318+ 7F63 4E 45 45 44 >                db      "NEEDS-LIB"
 318+ 7F67 53 2D 4C 49 >
 318+ 7F6B 42          >
 318+ 7F6C             >len_NFA         defl    $ - temp_NFA
 318+ 7F6C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 318+ 7F63             >
 318+ 7F63 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 318+ 7F64 4E 45 45 44 >                db      "NEEDS-LIB"               // name string in 7-bit ascii, but
 318+ 7F68 53 2D 4C 49 >
 318+ 7F6C 42          >
 318+ 7F6D             >                org     $-1                 // alter last byte of Name just above to set
 318+ 7F6C C2          >                db      {b $} | END_BIT     // msb as name end
 318+ 7F6D             >
 318+ 7F6D 4F 7F       >                dw      last_NFA            // Link to previous definition Name
 318+ 7F6F             >NEEDS_LIB:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 318+ 7F6F 2D 76       >                dw      Create_Ptr ; ok        // for primitive definitions  actual code
 318+ 7F71             >                else
 318+ 7F71 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 318+ 7F71             >                endif           ; ok        // for other definitions it "points" the correct handler
 318+ 7F71             >                // Use of "; ok" to suppress "warning[fwdref]"
 318+ 7F71             >
 318+ 7F71             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 319+ 7F71 04 6C 69 62                  db      4, "lib/", 0
 319+ 7F75 2F 00
 320+ 7F77
 321+ 7F77              // Concatenate path at a and filename and include it
 322+ 7F77              // No error is issued if filename doesn't exist.
 323+ 7F77                              Colon_Def NEEDS_SLASH, "NEEDS/", is_normal
 323+ 7F77             >                New_Def  NEEDS_SLASH, "NEEDS/", Enter_Ptr, is_normal ; ok
 323+ 7F77             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 323+ 7F77             >
 323+ 7F77             >                // dummy db directives used to calculate length of namec
 323+ 7F77 4E 45 45 44 >                db      "NEEDS/"
 323+ 7F7B 53 2F       >
 323+ 7F7D             >len_NFA         defl    $ - temp_NFA
 323+ 7F7D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 323+ 7F77             >
 323+ 7F77 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 323+ 7F78 4E 45 45 44 >                db      "NEEDS/"               // name string in 7-bit ascii, but
 323+ 7F7C 53 2F       >
 323+ 7F7E             >                org     $-1                 // alter last byte of Name just above to set
 323+ 7F7D AF          >                db      {b $} | END_BIT     // msb as name end
 323+ 7F7E             >
 323+ 7F7E 63 7F       >                dw      last_NFA            // Link to previous definition Name
 323+ 7F80             >NEEDS_SLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 323+ 7F80 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 323+ 7F82             >                else
 323+ 7F82 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 323+ 7F82             >                endif           ; ok        // for other definitions it "points" the correct handler
 323+ 7F82             >                // Use of "; ok" to suppress "warning[fwdref]"
 323+ 7F82             >
 323+ 7F82             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 324+ 7F82 E6 71 93 6A                  dw      COUNT, TUCK             // n a n
 325+ 7F86 25 7F A3 6A                  dw      NEEDS_FN, SWAP, CMOVE   // n        \ Path
 325+ 7F8A 11 68
 326+ 7F8C 25 7F C4 69                  dw      NEEDS_FN, PLUS          // a1+n     \ Concat
 327+ 7F90 F5 7E ED 69                  dw      NEEDS_W, ONE_PLUS, SWAP
 327+ 7F94 A3 6A
 328+ 7F96 A9 63 23 00                  dw      LIT, 35
 329+ 7F9A 11 68                        dw      CMOVE
 330+ 7F9C 25 7F                        dw      NEEDS_FN
 331+ 7F9E 67 73 B7 6C                  dw      PAD, ONE, F_OPEN
 331+ 7FA2 C9 67
 332+ 7FA4 81 69                        dw      ZEQUAL
 333+ 7FA6 E3 63                        dw      ZBRANCH
 334+ 7FA8 08 00                        dw      Needs_1 - $
 335+ 7FAA 07 7E                        dw          F_INCLUDE
 336+ 7FAC CC 63                        dw      BRANCH
 337+ 7FAE 04 00                        dw      Needs_2 - $
 338+ 7FB0              Needs_1:
 339+ 7FB0              //              dw          NEEDS_W, COUNT, TYPE, SPACE
 340+ 7FB0              //              dw          LIT, 43, MESSAGE
 341+ 7FB0 7B 6A                        dw          DROP
 342+ 7FB2              Needs_2:
 343+ 7FB2 23 69                        dw      EXIT                    // ;
 344+ 7FB4
 345+ 7FB4
 346+ 7FB4                              New_Def NCDM,   "NCDM", Create_Ptr, is_normal
 346+ 7FB4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 346+ 7FB4             >
 346+ 7FB4             >                // dummy db directives used to calculate length of namec
 346+ 7FB4 4E 43 44 4D >                db      "NCDM"
 346+ 7FB8             >len_NFA         defl    $ - temp_NFA
 346+ 7FB8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 346+ 7FB4             >
 346+ 7FB4 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 346+ 7FB5 4E 43 44 4D >                db      "NCDM"               // name string in 7-bit ascii, but
 346+ 7FB9             >                org     $-1                 // alter last byte of Name just above to set
 346+ 7FB8 CD          >                db      {b $} | END_BIT     // msb as name end
 346+ 7FB9             >
 346+ 7FB9 77 7F       >                dw      last_NFA            // Link to previous definition Name
 346+ 7FBB             >NCDM:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 346+ 7FBB 2D 76       >                dw      Create_Ptr ; ok        // for primitive definitions  actual code
 346+ 7FBD             >                else
 346+ 7FBD ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 346+ 7FBD             >                endif           ; ok        // for other definitions it "points" the correct handler
 346+ 7FBD             >                // Use of "; ok" to suppress "warning[fwdref]"
 346+ 7FBD             >
 346+ 7FBD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 347+ 7FBD 25 5E 25 26                  db $25, $5E, $25, $26, $24, $5F, $7B, $7D, $7E
 347+ 7FC1 24 5F 7B 7D
 347+ 7FC5 7E
 348+ 7FC6
 349+ 7FC6                              New_Def NDOM,   "NDOM", Create_Ptr, is_normal
 349+ 7FC6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 349+ 7FC6             >
 349+ 7FC6             >                // dummy db directives used to calculate length of namec
 349+ 7FC6 4E 44 4F 4D >                db      "NDOM"
 349+ 7FCA             >len_NFA         defl    $ - temp_NFA
 349+ 7FCA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 349+ 7FC6             >
 349+ 7FC6 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 349+ 7FC7 4E 44 4F 4D >                db      "NDOM"               // name string in 7-bit ascii, but
 349+ 7FCB             >                org     $-1                 // alter last byte of Name just above to set
 349+ 7FCA CD          >                db      {b $} | END_BIT     // msb as name end
 349+ 7FCB             >
 349+ 7FCB B4 7F       >                dw      last_NFA            // Link to previous definition Name
 349+ 7FCD             >NDOM:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 349+ 7FCD 2D 76       >                dw      Create_Ptr ; ok        // for primitive definitions  actual code
 349+ 7FCF             >                else
 349+ 7FCF ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 349+ 7FCF             >                endif           ; ok        // for other definitions it "points" the correct handler
 349+ 7FCF             >                // Use of "; ok" to suppress "warning[fwdref]"
 349+ 7FCF             >
 349+ 7FCF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 350+ 7FCF 3A 3F 2F 2A                  db $3A, $3F, $2F, $2A, $7C, $5C, $3C, $3E, $22
 350+ 7FD3 7C 5C 3C 3E
 350+ 7FD7 22
 351+ 7FD8
 352+ 7FD8
 353+ 7FD8              // Replace illegal character in filename using the map here above
 354+ 7FD8              // at the moment we need only  "
 355+ 7FD8                              Colon_Def NEEDS_CHECK, "NEEDS-CH", is_normal
 355+ 7FD8             >                New_Def  NEEDS_CHECK, "NEEDS-CH", Enter_Ptr, is_normal ; ok
 355+ 7FD8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 355+ 7FD8             >
 355+ 7FD8             >                // dummy db directives used to calculate length of namec
 355+ 7FD8 4E 45 45 44 >                db      "NEEDS-CH"
 355+ 7FDC 53 2D 43 48 >
 355+ 7FE0             >len_NFA         defl    $ - temp_NFA
 355+ 7FE0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 355+ 7FD8             >
 355+ 7FD8 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 355+ 7FD9 4E 45 45 44 >                db      "NEEDS-CH"               // name string in 7-bit ascii, but
 355+ 7FDD 53 2D 43 48 >
 355+ 7FE1             >                org     $-1                 // alter last byte of Name just above to set
 355+ 7FE0 C8          >                db      {b $} | END_BIT     // msb as name end
 355+ 7FE1             >
 355+ 7FE1 C6 7F       >                dw      last_NFA            // Link to previous definition Name
 355+ 7FE3             >NEEDS_CHECK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 355+ 7FE3 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 355+ 7FE5             >                else
 355+ 7FE5 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 355+ 7FE5             >                endif           ; ok        // for other definitions it "points" the correct handler
 355+ 7FE5             >                // Use of "; ok" to suppress "warning[fwdref]"
 355+ 7FE5             >
 355+ 7FE5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 356+ 7FE5 E6 71 FB 71                  dw      COUNT, BOUNDS
 357+ 7FE9 6B 64                        dw      C_DO
 358+ 7FEB              Needs_3:
 359+ 7FEB BB 7F CD 7F                  dw          NCDM, NDOM, LIT, 9
 359+ 7FEF A9 63 09 00
 360+ 7FF3 76 64 5E 6B                  dw          I, CFETCH
 361+ 7FF7 90 65                        dw          C_MAP
 362+ 7FF9 76 64 6C 6B                  dw          I, CSTORE
 363+ 7FFD              Needs_4:
 364+ 7FFD F8 63                        dw      C_LOOP
 365+ 7FFF EC FF                        dw      Needs_3 - $
 366+ 8001 23 69                        dw      EXIT
 367+ 8003
 368+ 8003
 369+ 8003              // include  "path/cccc.f" if cccc is not defined
 370+ 8003              // filename cccc.f is temporary stored at NEEDS-W
 371+ 8003                              Colon_Def NEEDS_PATH, "NEEDS-F", is_normal
 371+ 8003             >                New_Def  NEEDS_PATH, "NEEDS-F", Enter_Ptr, is_normal ; ok
 371+ 8003             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 371+ 8003             >
 371+ 8003             >                // dummy db directives used to calculate length of namec
 371+ 8003 4E 45 45 44 >                db      "NEEDS-F"
 371+ 8007 53 2D 46    >
 371+ 800A             >len_NFA         defl    $ - temp_NFA
 371+ 800A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 371+ 8003             >
 371+ 8003 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 371+ 8004 4E 45 45 44 >                db      "NEEDS-F"               // name string in 7-bit ascii, but
 371+ 8008 53 2D 46    >
 371+ 800B             >                org     $-1                 // alter last byte of Name just above to set
 371+ 800A C6          >                db      {b $} | END_BIT     // msb as name end
 371+ 800B             >
 371+ 800B D8 7F       >                dw      last_NFA            // Link to previous definition Name
 371+ 800D             >NEEDS_PATH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 371+ 800D 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 371+ 800F             >                else
 371+ 800F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 371+ 800F             >                endif           ; ok        // for other definitions it "points" the correct handler
 371+ 800F             >                // Use of "; ok" to suppress "warning[fwdref]"
 371+ 800F             >
 371+ 800F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 372+ 800F 2C 75                        dw      LFIND
 373+ 8011 E3 63                        dw      ZBRANCH
 374+ 8013 0A 00                        dw      Needs_5 - $
 375+ 8015
 376+ 8015 7B 6A F1 6A                  dw          DROP, TWO_DROP
 377+ 8019 CC 63                        dw      BRANCH
 378+ 801B 2C 00                        dw      Needs_6 - $
 379+ 801D              Needs_5:
 380+ 801D F5 7E                        dw          NEEDS_W
 381+ 801F A9 63 23 00                  dw          LIT, 35
 382+ 8023 31 73                        dw          ERASE                   // a
 383+ 8025 81 6E 5E 6B                  dw          HERE, CFETCH, ONE_PLUS  // a n
 383+ 8029 ED 69
 384+ 802B 81 6E 6B 6A                  dw          HERE, OVER              // a n here n
 385+ 802F F5 7E A3 6A                  dw          NEEDS_W, SWAP, CMOVE    // a n
 385+ 8033 11 68
 386+ 8035 F5 7E E3 7F                  dw          NEEDS_W, NEEDS_CHECK
 387+ 8039 F5 7E C4 69                  dw          NEEDS_W, PLUS           // a a1+1
 388+ 803D A9 63 2E 66                  dw          LIT, $662E              // a a1+1 ".F"
 389+ 8041 A3 6A 50 6B                  dw          SWAP, STORE             // a
 390+ 8045 80 7F                        dw          NEEDS_SLASH
 391+ 8047              Needs_6:
 392+ 8047 23 69                        dw      EXIT
 393+ 8049
 394+ 8049
 395+ 8049              // check for cccc exists in vocabulary
 396+ 8049              // if it doesn't then  INCLUDE  inc/cccc.F
 397+ 8049              // search in inc subdirectory
 398+ 8049                              Colon_Def NEEDS, "NEEDS", is_normal
 398+ 8049             >                New_Def  NEEDS, "NEEDS", Enter_Ptr, is_normal ; ok
 398+ 8049             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 398+ 8049             >
 398+ 8049             >                // dummy db directives used to calculate length of namec
 398+ 8049 4E 45 45 44 >                db      "NEEDS"
 398+ 804D 53          >
 398+ 804E             >len_NFA         defl    $ - temp_NFA
 398+ 804E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 398+ 8049             >
 398+ 8049 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 398+ 804A 4E 45 45 44 >                db      "NEEDS"               // name string in 7-bit ascii, but
 398+ 804E 53          >
 398+ 804F             >                org     $-1                 // alter last byte of Name just above to set
 398+ 804E D3          >                db      {b $} | END_BIT     // msb as name end
 398+ 804F             >
 398+ 804F 03 80       >                dw      last_NFA            // Link to previous definition Name
 398+ 8051             >NEEDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 398+ 8051 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 398+ 8053             >                else
 398+ 8053 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 398+ 8053             >                endif           ; ok        // for other definitions it "points" the correct handler
 398+ 8053             >                // Use of "; ok" to suppress "warning[fwdref]"
 398+ 8053             >
 398+ 8053             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 399+ 8053 B7 6D 43 6B                  dw      TO_IN, FETCH
 400+ 8057 B0 6A                        dw      DUP
 401+ 8059 5B 7F 0D 80                  dw      NEEDS_INC, NEEDS_PATH
 402+ 805D B7 6D 50 6B                  dw      TO_IN, STORE
 403+ 8061 6F 7F 0D 80                  dw      NEEDS_LIB, NEEDS_PATH
 404+ 8065 B7 6D 50 6B                  dw      TO_IN, STORE
 405+ 8069 2C 75                        dw      LFIND
 406+ 806B E3 63                        dw      ZBRANCH
 407+ 806D 08 00                        dw      Needs_10 - $
 408+ 806F F1 6A                        dw          TWO_DROP
 409+ 8071 CC 63                        dw      BRANCH
 410+ 8073 10 00                        dw      Needs_11 - $
 411+ 8075              Needs_10:
 412+ 8075 F5 7E E6 71                  dw      NEEDS_W, COUNT, TYPE, SPACE
 412+ 8079 0C 72 92 6F
 413+ 807D A9 63 2B 00                  dw      LIT, 43, MESSAGE
 413+ 8081 00 7A
 414+ 8083              Needs_11:
 415+ 8083 23 69                        dw      EXIT
 416+ 8085
 417+ 8085
 418+ 8085              //  ______________________________________________________________________
 419+ 8085              //
 420+ 8085              // load+        n --
 421+ 8085                              Colon_Def LOAD_P, "LOAD+", is_normal
 421+ 8085             >                New_Def  LOAD_P, "LOAD+", Enter_Ptr, is_normal ; ok
 421+ 8085             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 421+ 8085             >
 421+ 8085             >                // dummy db directives used to calculate length of namec
 421+ 8085 4C 4F 41 44 >                db      "LOAD+"
 421+ 8089 2B          >
 421+ 808A             >len_NFA         defl    $ - temp_NFA
 421+ 808A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 421+ 8085             >
 421+ 8085 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 421+ 8086 4C 4F 41 44 >                db      "LOAD+"               // name string in 7-bit ascii, but
 421+ 808A 2B          >
 421+ 808B             >                org     $-1                 // alter last byte of Name just above to set
 421+ 808A AB          >                db      {b $} | END_BIT     // msb as name end
 421+ 808B             >
 421+ 808B 49 80       >                dw      last_NFA            // Link to previous definition Name
 421+ 808D             >LOAD_P:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 421+ 808D 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 421+ 808F             >                else
 421+ 808F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 421+ 808F             >                endif           ; ok        // for other definitions it "points" the correct handler
 421+ 808F             >                // Use of "; ok" to suppress "warning[fwdref]"
 421+ 808F             >
 421+ 808F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 422+ 808F AE 6D 43 6B                  dw      BLK, FETCH, TO_R        // blk @ >r
 422+ 8093 4C 69
 423+ 8095 B7 6D 43 6B                  dw      TO_IN, FETCH, TO_R      // >in @ >r
 423+ 8099 4C 69
 424+ 809B
 425+ 809B AF 6C B7 6D                  dw      ZERO, TO_IN, STORE      // 0 >in !
 425+ 809F 50 6B
 426+ 80A1 FB 6C 67 79                  dw      BSCR, MUL, BLK, STORE   // b/scr * blk !
 426+ 80A5 AE 6D 50 6B
 427+ 80A9 1A 77                        dw      INTERPRET               // interpret
 428+ 80AB
 429+ 80AB 60 69 B7 6D                  dw      R_TO, TO_IN, STORE      // r> >in !
 429+ 80AF 50 6B
 430+ 80B1 60 69 AE 6D                  dw      R_TO, BLK, STORE        // r> blk !
 430+ 80B5 50 6B
 431+ 80B7 23 69                        dw      EXIT                    // ;
 432+ 80B9
 433+ 80B9              //  ______________________________________________________________________
 434+ 80B9              //
 435+ 80B9              // -->          --
 436+ 80B9                              Colon_Def LOAD_NEXT, "-->", is_immediate
 436+ 80B9             >                New_Def  LOAD_NEXT, "-->", Enter_Ptr, is_immediate ; ok
 436+ 80B9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 436+ 80B9             >
 436+ 80B9             >                // dummy db directives used to calculate length of namec
 436+ 80B9 2D 2D 3E    >                db      "-->"
 436+ 80BC             >len_NFA         defl    $ - temp_NFA
 436+ 80BC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 436+ 80B9             >
 436+ 80B9 C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 436+ 80BA 2D 2D 3E    >                db      "-->"               // name string in 7-bit ascii, but
 436+ 80BD             >                org     $-1                 // alter last byte of Name just above to set
 436+ 80BC BE          >                db      {b $} | END_BIT     // msb as name end
 436+ 80BD             >
 436+ 80BD 85 80       >                dw      last_NFA            // Link to previous definition Name
 436+ 80BF             >LOAD_NEXT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 436+ 80BF 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 436+ 80C1             >                else
 436+ 80C1 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 436+ 80C1             >                endif           ; ok        // for other definitions it "points" the correct handler
 436+ 80C1             >                // Use of "; ok" to suppress "warning[fwdref]"
 436+ 80C1             >
 436+ 80C1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 437+ 80C1 C5 70                        dw      QLOADING                // ?loading
 438+ 80C3 AF 6C B7 6D                  dw      ZERO, TO_IN, STORE      // 0 >in !
 438+ 80C7 50 6B
 439+ 80C9 FB 6C                        dw      BSCR                    // b/scr
 440+ 80CB AE 6D 43 6B                  dw      BLK, FETCH              // blk @
 441+ 80CF 6B 6A                        dw      OVER                    // over
 442+ 80D1 94 79                        dw      MOD                     // mod
 443+ 80D3 D5 6E                        dw      SUBTRACT                // -
 444+ 80D5 AE 6D 20 6B                  dw      BLK, PLUSSTORE          // +!
 445+ 80D9 23 69                        dw      EXIT                    // ;
 446+ 80DB
 447+ 80DB              //  ______________________________________________________________________
 448+ 80DB              //
 449+ 80DB              // '            -- xt
 450+ 80DB                              Colon_Def TICK, "'", is_normal
 450+ 80DB             >                New_Def  TICK, "'", Enter_Ptr, is_normal ; ok
 450+ 80DB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 450+ 80DB             >
 450+ 80DB             >                // dummy db directives used to calculate length of namec
 450+ 80DB 27          >                db      "'"
 450+ 80DC             >len_NFA         defl    $ - temp_NFA
 450+ 80DC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 450+ 80DB             >
 450+ 80DB 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 450+ 80DC 27          >                db      "'"               // name string in 7-bit ascii, but
 450+ 80DD             >                org     $-1                 // alter last byte of Name just above to set
 450+ 80DC A7          >                db      {b $} | END_BIT     // msb as name end
 450+ 80DD             >
 450+ 80DD B9 80       >                dw      last_NFA            // Link to previous definition Name
 450+ 80DF             >TICK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 450+ 80DF 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 450+ 80E1             >                else
 450+ 80E1 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 450+ 80E1             >                endif           ; ok        // for other definitions it "points" the correct handler
 450+ 80E1             >                // Use of "; ok" to suppress "warning[fwdref]"
 450+ 80E1             >
 450+ 80E1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 451+ 80E1 2C 75                        dw      LFIND                   // -find
 452+ 80E3 81 69                        dw      ZEQUAL                  // 0=
 453+ 80E5 AF 6C 4C 70                  dw      ZERO, QERROR            // 0 ?error
 454+ 80E9 7B 6A                        dw      DROP                    // drop
 455+ 80EB 23 69                        dw      EXIT                    // ;
 456+ 80ED
 457+ 80ED              //  ______________________________________________________________________
 458+ 80ED              //
 459+ 80ED              // forget       -- cccc
 460+ 80ED                              Colon_Def FORGET, "FORGET", is_normal
 460+ 80ED             >                New_Def  FORGET, "FORGET", Enter_Ptr, is_normal ; ok
 460+ 80ED             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 460+ 80ED             >
 460+ 80ED             >                // dummy db directives used to calculate length of namec
 460+ 80ED 46 4F 52 47 >                db      "FORGET"
 460+ 80F1 45 54       >
 460+ 80F3             >len_NFA         defl    $ - temp_NFA
 460+ 80F3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 460+ 80ED             >
 460+ 80ED 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 460+ 80EE 46 4F 52 47 >                db      "FORGET"               // name string in 7-bit ascii, but
 460+ 80F2 45 54       >
 460+ 80F4             >                org     $-1                 // alter last byte of Name just above to set
 460+ 80F3 D4          >                db      {b $} | END_BIT     // msb as name end
 460+ 80F4             >
 460+ 80F4 DB 80       >                dw      last_NFA            // Link to previous definition Name
 460+ 80F6             >FORGET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 460+ 80F6 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 460+ 80F8             >                else
 460+ 80F8 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 460+ 80F8             >                endif           ; ok        // for other definitions it "points" the correct handler
 460+ 80F8             >                // Use of "; ok" to suppress "warning[fwdref]"
 460+ 80F8             >
 460+ 80F8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 461+ 80F8 EF 6D 43 6B                  dw      CURRENT, FETCH          // current @
 462+ 80FC E2 6D 43 6B                  dw      CONTEXT, FETCH          // context @
 463+ 8100 D5 6E A9 63                  dw      SUBTRACT, LIT, 23, QERROR // - 23 ?error
 463+ 8104 17 00 4C 70
 464+ 8108 DF 80 1C 70                  dw      TICK, TO_BODY           // ' >body
 465+ 810C B0 6A 65 6D                  dw      DUP, FENCE, FETCH       // dup fence @
 465+ 8110 43 6B
 466+ 8112 F0 6E A9 63                  dw      ULESS, LIT, 21, QERROR  // u< 21 ?error
 466+ 8116 15 00 4C 70
 467+ 811A B0 6A F2 6F                  dw      DUP, NFA, DP, STORE     // dup nfa dp !
 467+ 811E 6D 6D 50 6B
 468+ 8122 D8 6F 43 6B                  dw      LFA, FETCH              // lfa @
 469+ 8126 E2 6D 43 6B                  dw      CONTEXT, FETCH, STORE   // context @ !
 469+ 812A 50 6B
 470+ 812C 23 69                        dw      EXIT                    // ;
 471+ 812E
 472+ 812E              //  ______________________________________________________________________
 473+ 812E              //
 474+ 812E              // marker       -- cccc
 475+ 812E                              Colon_Def MARKER, "MARKER", is_immediate
 475+ 812E             >                New_Def  MARKER, "MARKER", Enter_Ptr, is_immediate ; ok
 475+ 812E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 475+ 812E             >
 475+ 812E             >                // dummy db directives used to calculate length of namec
 475+ 812E 4D 41 52 4B >                db      "MARKER"
 475+ 8132 45 52       >
 475+ 8134             >len_NFA         defl    $ - temp_NFA
 475+ 8134             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 475+ 812E             >
 475+ 812E C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 475+ 812F 4D 41 52 4B >                db      "MARKER"               // name string in 7-bit ascii, but
 475+ 8133 45 52       >
 475+ 8135             >                org     $-1                 // alter last byte of Name just above to set
 475+ 8134 D2          >                db      {b $} | END_BIT     // msb as name end
 475+ 8135             >
 475+ 8135 ED 80       >                dw      last_NFA            // Link to previous definition Name
 475+ 8137             >MARKER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 475+ 8137 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 475+ 8139             >                else
 475+ 8139 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 475+ 8139             >                endif           ; ok        // for other definitions it "points" the correct handler
 475+ 8139             >                // Use of "; ok" to suppress "warning[fwdref]"
 475+ 8139             >
 475+ 8139             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 476+ 8139 AF 71                        dw      CBUILDS
 477+ 813B 7B 6D 43 6B                  dw      VOC_LINK, FETCH, COMMA
 477+ 813F 9D 6E
 478+ 8141 EF 6D 43 6B                  dw      CURRENT, FETCH, COMMA
 478+ 8145 9D 6E
 479+ 8147 E2 6D 43 6B                  dw      CONTEXT, FETCH, COMMA
 479+ 814B 9D 6E
 480+ 814D C8 6F 9D 6E                  dw      LATEST, COMMA
 481+ 8151 C8 6F 06 70                  dw      LATEST, PFA, LFA, FETCH, COMMA
 481+ 8155 D8 6F 43 6B
 481+ 8159 9D 6E
 482+ 815B BF 71                        dw      DOES_TO
 483+ 815D B0 6A 43 6B                  dw      DUP, FETCH, VOC_LINK, STORE, CELL_PLUS
 483+ 8161 7B 6D 50 6B
 483+ 8165 15 6A
 484+ 8167 B0 6A 43 6B                  dw      DUP, FETCH, CURRENT, STORE, CELL_PLUS
 484+ 816B EF 6D 50 6B
 484+ 816F 15 6A
 485+ 8171 B0 6A 43 6B                  dw      DUP, FETCH, CONTEXT, STORE, CELL_PLUS
 485+ 8175 E2 6D 50 6B
 485+ 8179 15 6A
 486+ 817B B0 6A 43 6B                  dw      DUP, FETCH, DP, STORE, CELL_PLUS
 486+ 817F 6D 6D 50 6B
 486+ 8183 15 6A
 487+ 8185 43 6B EF 6D                  dw           FETCH, CURRENT, FETCH, STORE
 487+ 8189 43 6B 50 6B
 488+ 818D 23 69                        dw      EXIT
 489+ 818F
 490+ 818F              //  ______________________________________________________________________
 491+ 818F              //
 492+ 818F              // spaces       n --
 493+ 818F                              Colon_Def SPACES, "SPACES", is_normal
 493+ 818F             >                New_Def  SPACES, "SPACES", Enter_Ptr, is_normal ; ok
 493+ 818F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 493+ 818F             >
 493+ 818F             >                // dummy db directives used to calculate length of namec
 493+ 818F 53 50 41 43 >                db      "SPACES"
 493+ 8193 45 53       >
 493+ 8195             >len_NFA         defl    $ - temp_NFA
 493+ 8195             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 493+ 818F             >
 493+ 818F 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 493+ 8190 53 50 41 43 >                db      "SPACES"               // name string in 7-bit ascii, but
 493+ 8194 45 53       >
 493+ 8196             >                org     $-1                 // alter last byte of Name just above to set
 493+ 8195 D3          >                db      {b $} | END_BIT     // msb as name end
 493+ 8196             >
 493+ 8196 2E 81       >                dw      last_NFA            // Link to previous definition Name
 493+ 8198             >SPACES:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 493+ 8198 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 493+ 819A             >                else
 493+ 819A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 493+ 819A             >                endif           ; ok        // for other definitions it "points" the correct handler
 493+ 819A             >                // Use of "; ok" to suppress "warning[fwdref]"
 493+ 819A             >
 493+ 819A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 494+ 819A AF 6C 44 6F                  dw      ZERO, MAX
 495+ 819E AF 6C 3D 64                  dw      ZERO, C_Q_DO
 496+ 81A2 08 00                        dw      Spaces_Leave - $
 497+ 81A4              Spaces_Loop:
 498+ 81A4 92 6F                        dw          SPACE
 499+ 81A6 F8 63                        dw      C_LOOP
 500+ 81A8 FC FF                        dw      Spaces_Loop - $
 501+ 81AA              Spaces_Leave:
 502+ 81AA 23 69                        dw      EXIT                    // ;
 503+ 81AC
 504+ 81AC              //  ______________________________________________________________________
 505+ 81AC              //
 506+ 81AC              // <#           --
 507+ 81AC                              Colon_Def BEGIN_DASH, "<#", is_normal
 507+ 81AC             >                New_Def  BEGIN_DASH, "<#", Enter_Ptr, is_normal ; ok
 507+ 81AC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 507+ 81AC             >
 507+ 81AC             >                // dummy db directives used to calculate length of namec
 507+ 81AC 3C 23       >                db      "<#"
 507+ 81AE             >len_NFA         defl    $ - temp_NFA
 507+ 81AE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 507+ 81AC             >
 507+ 81AC 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 507+ 81AD 3C 23       >                db      "<#"               // name string in 7-bit ascii, but
 507+ 81AF             >                org     $-1                 // alter last byte of Name just above to set
 507+ 81AE A3          >                db      {b $} | END_BIT     // msb as name end
 507+ 81AF             >
 507+ 81AF 8F 81       >                dw      last_NFA            // Link to previous definition Name
 507+ 81B1             >BEGIN_DASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 507+ 81B1 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 507+ 81B3             >                else
 507+ 81B3 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 507+ 81B3             >                endif           ; ok        // for other definitions it "points" the correct handler
 507+ 81B3             >                // Use of "; ok" to suppress "warning[fwdref]"
 507+ 81B3             >
 507+ 81B3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 508+ 81B3 67 73 30 6E                  dw      PAD, HLD, STORE
 508+ 81B7 50 6B
 509+ 81B9 23 69                        dw      EXIT
 510+ 81BB
 511+ 81BB              //  ______________________________________________________________________
 512+ 81BB              //
 513+ 81BB              // #>           --
 514+ 81BB                              Colon_Def DASH_END, "#>", is_normal
 514+ 81BB             >                New_Def  DASH_END, "#>", Enter_Ptr, is_normal ; ok
 514+ 81BB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 514+ 81BB             >
 514+ 81BB             >                // dummy db directives used to calculate length of namec
 514+ 81BB 23 3E       >                db      "#>"
 514+ 81BD             >len_NFA         defl    $ - temp_NFA
 514+ 81BD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 514+ 81BB             >
 514+ 81BB 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 514+ 81BC 23 3E       >                db      "#>"               // name string in 7-bit ascii, but
 514+ 81BE             >                org     $-1                 // alter last byte of Name just above to set
 514+ 81BD BE          >                db      {b $} | END_BIT     // msb as name end
 514+ 81BE             >
 514+ 81BE AC 81       >                dw      last_NFA            // Link to previous definition Name
 514+ 81C0             >DASH_END:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 514+ 81C0 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 514+ 81C2             >                else
 514+ 81C2 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 514+ 81C2             >                endif           ; ok        // for other definitions it "points" the correct handler
 514+ 81C2             >                // Use of "; ok" to suppress "warning[fwdref]"
 514+ 81C2             >
 514+ 81C2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 515+ 81C2 F1 6A                        dw      TWO_DROP
 516+ 81C4 30 6E 43 6B                  dw      HLD, FETCH, PAD, OVER, SUBTRACT
 516+ 81C8 67 73 6B 6A
 516+ 81CC D5 6E
 517+ 81CE 23 69                        dw      EXIT
 518+ 81D0
 519+ 81D0              //  ______________________________________________________________________
 520+ 81D0              //
 521+ 81D0              // sign         n d -- d
 522+ 81D0                              Colon_Def SIGN, "SIGN", is_normal
 522+ 81D0             >                New_Def  SIGN, "SIGN", Enter_Ptr, is_normal ; ok
 522+ 81D0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 522+ 81D0             >
 522+ 81D0             >                // dummy db directives used to calculate length of namec
 522+ 81D0 53 49 47 4E >                db      "SIGN"
 522+ 81D4             >len_NFA         defl    $ - temp_NFA
 522+ 81D4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 522+ 81D0             >
 522+ 81D0 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 522+ 81D1 53 49 47 4E >                db      "SIGN"               // name string in 7-bit ascii, but
 522+ 81D5             >                org     $-1                 // alter last byte of Name just above to set
 522+ 81D4 CE          >                db      {b $} | END_BIT     // msb as name end
 522+ 81D5             >
 522+ 81D5 BB 81       >                dw      last_NFA            // Link to previous definition Name
 522+ 81D7             >SIGN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 522+ 81D7 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 522+ 81D9             >                else
 522+ 81D9 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 522+ 81D9             >                endif           ; ok        // for other definitions it "points" the correct handler
 522+ 81D9             >                // Use of "; ok" to suppress "warning[fwdref]"
 522+ 81D9             >
 522+ 81D9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 523+ 81D9 BD 6A 9C 69                  dw      ROT, ZLESS
 524+ 81DD E3 63                        dw      ZBRANCH
 525+ 81DF 08 00                        dw      Sign_Endif - $
 526+ 81E1 A9 63 2D 00                  dw          LIT, 45, HOLD
 526+ 81E5 51 73
 527+ 81E7              Sign_Endif:
 528+ 81E7 23 69                        dw      EXIT
 529+ 81E9
 530+ 81E9              //  ______________________________________________________________________
 531+ 81E9              //
 532+ 81E9              // #           d1 -- d2
 533+ 81E9                              Colon_Def DASH, "#", is_normal
 533+ 81E9             >                New_Def  DASH, "#", Enter_Ptr, is_normal ; ok
 533+ 81E9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 533+ 81E9             >
 533+ 81E9             >                // dummy db directives used to calculate length of namec
 533+ 81E9 23          >                db      "#"
 533+ 81EA             >len_NFA         defl    $ - temp_NFA
 533+ 81EA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 533+ 81E9             >
 533+ 81E9 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 533+ 81EA 23          >                db      "#"               // name string in 7-bit ascii, but
 533+ 81EB             >                org     $-1                 // alter last byte of Name just above to set
 533+ 81EA A3          >                db      {b $} | END_BIT     // msb as name end
 533+ 81EB             >
 533+ 81EB D0 81       >                dw      last_NFA            // Link to previous definition Name
 533+ 81ED             >DASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 533+ 81ED 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 533+ 81EF             >                else
 533+ 81EF ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 533+ 81EF             >                endif           ; ok        // for other definitions it "points" the correct handler
 533+ 81EF             >                // Use of "; ok" to suppress "warning[fwdref]"
 533+ 81EF             >
 533+ 81EF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 534+ 81EF 04 6E 43 6B                  dw      BASE, FETCH
 535+ 81F3
 536+ 81F3 4C 69                        dw      TO_R                    // >r           ( ud1 )
 537+ 81F5 AF 6C 74 69                  dw      ZERO, R_OP, UMDIVMOD    // 0 r um/mod   ( l rem1 h/r )
 537+ 81F9 77 68
 538+ 81FB 60 69 A3 6A                  dw      R_TO, SWAP, TO_R        // r> swap >r   ( l rem )
 538+ 81FF 4C 69
 539+ 8201 77 68                        dw      UMDIVMOD                // um/mod       ( rem2 l/r )
 540+ 8203 60 69                        dw      R_TO                    // r>           ( rem2 l/r h/r )
 541+ 8205
 542+ 8205 BD 6A                        dw      ROT
 543+ 8207 A9 63 09 00                  dw      LIT, 9, OVER, LESS
 543+ 820B 6B 6A 04 6F
 544+ 820F E3 63                        dw      ZBRANCH
 545+ 8211 08 00                        dw      Dash_Endif - $
 546+ 8213 A9 63 07 00                  dw          LIT, 7, PLUS
 546+ 8217 C4 69
 547+ 8219              Dash_Endif:
 548+ 8219
 549+ 8219 A9 63 30 00                  dw      LIT, 48, PLUS, HOLD
 549+ 821D C4 69 51 73
 550+ 8221 23 69                        dw      EXIT
 551+ 8223
 552+ 8223              //  ______________________________________________________________________
 553+ 8223              //
 554+ 8223              // #s           d1 -- d2
 555+ 8223                              Colon_Def DASHES, "#S", is_normal
 555+ 8223             >                New_Def  DASHES, "#S", Enter_Ptr, is_normal ; ok
 555+ 8223             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 555+ 8223             >
 555+ 8223             >                // dummy db directives used to calculate length of namec
 555+ 8223 23 53       >                db      "#S"
 555+ 8225             >len_NFA         defl    $ - temp_NFA
 555+ 8225             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 555+ 8223             >
 555+ 8223 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 555+ 8224 23 53       >                db      "#S"               // name string in 7-bit ascii, but
 555+ 8226             >                org     $-1                 // alter last byte of Name just above to set
 555+ 8225 D3          >                db      {b $} | END_BIT     // msb as name end
 555+ 8226             >
 555+ 8226 E9 81       >                dw      last_NFA            // Link to previous definition Name
 555+ 8228             >DASHES:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 555+ 8228 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 555+ 822A             >                else
 555+ 822A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 555+ 822A             >                endif           ; ok        // for other definitions it "points" the correct handler
 555+ 822A             >                // Use of "; ok" to suppress "warning[fwdref]"
 555+ 822A             >
 555+ 822A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 556+ 822A              Dashes_Begin:
 557+ 822A ED 81 11 6B                  dw      DASH, TWO_DUP
 558+ 822E C7 68 81 69                  dw          OR_OP, ZEQUAL
 559+ 8232 E3 63                        dw      ZBRANCH
 560+ 8234 F6 FF                        dw      Dashes_Begin - $
 561+ 8236 23 69                        dw      EXIT
 562+ 8238
 563+ 8238              //  ______________________________________________________________________
 564+ 8238              //
 565+ 8238              // d.r          d n --
 566+ 8238                              Colon_Def D_DOT_R, "D.R", is_normal
 566+ 8238             >                New_Def  D_DOT_R, "D.R", Enter_Ptr, is_normal ; ok
 566+ 8238             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 566+ 8238             >
 566+ 8238             >                // dummy db directives used to calculate length of namec
 566+ 8238 44 2E 52    >                db      "D.R"
 566+ 823B             >len_NFA         defl    $ - temp_NFA
 566+ 823B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 566+ 8238             >
 566+ 8238 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 566+ 8239 44 2E 52    >                db      "D.R"               // name string in 7-bit ascii, but
 566+ 823C             >                org     $-1                 // alter last byte of Name just above to set
 566+ 823B D2          >                db      {b $} | END_BIT     // msb as name end
 566+ 823C             >
 566+ 823C 23 82       >                dw      last_NFA            // Link to previous definition Name
 566+ 823E             >D_DOT_R:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 566+ 823E 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 566+ 8240             >                else
 566+ 8240 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 566+ 8240             >                endif           ; ok        // for other definitions it "points" the correct handler
 566+ 8240             >                // Use of "; ok" to suppress "warning[fwdref]"
 566+ 8240             >
 566+ 8240             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 567+ 8240 4C 69                        dw      TO_R
 568+ 8242 A3 6A 6B 6A                  dw      SWAP, OVER, DABS
 568+ 8246 09 79
 569+ 8248 B1 81 28 82                  dw      BEGIN_DASH, DASHES, SIGN, DASH_END
 569+ 824C D7 81 C0 81
 570+ 8250 60 69                        dw      R_TO
 571+ 8252 6B 6A D5 6E                  dw      OVER, SUBTRACT, SPACES, TYPE
 571+ 8256 98 81 0C 72
 572+ 825A 23 69                        dw      EXIT
 573+ 825C
 574+ 825C              //  ______________________________________________________________________
 575+ 825C              //
 576+ 825C              // .r           n1 n2 --
 577+ 825C                              Colon_Def DOT_R, ".R", is_normal
 577+ 825C             >                New_Def  DOT_R, ".R", Enter_Ptr, is_normal ; ok
 577+ 825C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 577+ 825C             >
 577+ 825C             >                // dummy db directives used to calculate length of namec
 577+ 825C 2E 52       >                db      ".R"
 577+ 825E             >len_NFA         defl    $ - temp_NFA
 577+ 825E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 577+ 825C             >
 577+ 825C 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 577+ 825D 2E 52       >                db      ".R"               // name string in 7-bit ascii, but
 577+ 825F             >                org     $-1                 // alter last byte of Name just above to set
 577+ 825E D2          >                db      {b $} | END_BIT     // msb as name end
 577+ 825F             >
 577+ 825F 38 82       >                dw      last_NFA            // Link to previous definition Name
 577+ 8261             >DOT_R:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 577+ 8261 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 577+ 8263             >                else
 577+ 8263 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 577+ 8263             >                endif           ; ok        // for other definitions it "points" the correct handler
 577+ 8263             >                // Use of "; ok" to suppress "warning[fwdref]"
 577+ 8263             >
 577+ 8263             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 578+ 8263 4C 69                        dw      TO_R
 579+ 8265 C1 6E 60 69                  dw      S_TO_D, R_TO
 580+ 8269 3E 82                        dw      D_DOT_R
 581+ 826B 23 69                        dw      EXIT
 582+ 826D
 583+ 826D              //  ______________________________________________________________________
 584+ 826D              //
 585+ 826D              // d.           d --
 586+ 826D                              Colon_Def D_DOT, "D.", is_normal
 586+ 826D             >                New_Def  D_DOT, "D.", Enter_Ptr, is_normal ; ok
 586+ 826D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 586+ 826D             >
 586+ 826D             >                // dummy db directives used to calculate length of namec
 586+ 826D 44 2E       >                db      "D."
 586+ 826F             >len_NFA         defl    $ - temp_NFA
 586+ 826F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 586+ 826D             >
 586+ 826D 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 586+ 826E 44 2E       >                db      "D."               // name string in 7-bit ascii, but
 586+ 8270             >                org     $-1                 // alter last byte of Name just above to set
 586+ 826F AE          >                db      {b $} | END_BIT     // msb as name end
 586+ 8270             >
 586+ 8270 5C 82       >                dw      last_NFA            // Link to previous definition Name
 586+ 8272             >D_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 586+ 8272 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 586+ 8274             >                else
 586+ 8274 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 586+ 8274             >                endif           ; ok        // for other definitions it "points" the correct handler
 586+ 8274             >                // Use of "; ok" to suppress "warning[fwdref]"
 586+ 8274             >
 586+ 8274             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 587+ 8274 AF 6C 3E 82                  dw      ZERO, D_DOT_R, SPACE
 587+ 8278 92 6F
 588+ 827A 23 69                        dw      EXIT
 589+ 827C
 590+ 827C              //  ______________________________________________________________________
 591+ 827C              //
 592+ 827C              // .            n --
 593+ 827C                              Colon_Def DOT, ".", is_normal
 593+ 827C             >                New_Def  DOT, ".", Enter_Ptr, is_normal ; ok
 593+ 827C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 593+ 827C             >
 593+ 827C             >                // dummy db directives used to calculate length of namec
 593+ 827C 2E          >                db      "."
 593+ 827D             >len_NFA         defl    $ - temp_NFA
 593+ 827D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 593+ 827C             >
 593+ 827C 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 593+ 827D 2E          >                db      "."               // name string in 7-bit ascii, but
 593+ 827E             >                org     $-1                 // alter last byte of Name just above to set
 593+ 827D AE          >                db      {b $} | END_BIT     // msb as name end
 593+ 827E             >
 593+ 827E 6D 82       >                dw      last_NFA            // Link to previous definition Name
 593+ 8280             >DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 593+ 8280 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 593+ 8282             >                else
 593+ 8282 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 593+ 8282             >                endif           ; ok        // for other definitions it "points" the correct handler
 593+ 8282             >                // Use of "; ok" to suppress "warning[fwdref]"
 593+ 8282             >
 593+ 8282             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 594+ 8282 C1 6E 72 82                  dw      S_TO_D, D_DOT
 595+ 8286 23 69                        dw      EXIT
 596+ 8288
 597+ 8288              //  ______________________________________________________________________
 598+ 8288              //
 599+ 8288              // ?            n --
 600+ 8288                              Colon_Def QUESTION, "?", is_normal
 600+ 8288             >                New_Def  QUESTION, "?", Enter_Ptr, is_normal ; ok
 600+ 8288             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 600+ 8288             >
 600+ 8288             >                // dummy db directives used to calculate length of namec
 600+ 8288 3F          >                db      "?"
 600+ 8289             >len_NFA         defl    $ - temp_NFA
 600+ 8289             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 600+ 8288             >
 600+ 8288 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 600+ 8289 3F          >                db      "?"               // name string in 7-bit ascii, but
 600+ 828A             >                org     $-1                 // alter last byte of Name just above to set
 600+ 8289 BF          >                db      {b $} | END_BIT     // msb as name end
 600+ 828A             >
 600+ 828A 7C 82       >                dw      last_NFA            // Link to previous definition Name
 600+ 828C             >QUESTION:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 600+ 828C 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 600+ 828E             >                else
 600+ 828E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 600+ 828E             >                endif           ; ok        // for other definitions it "points" the correct handler
 600+ 828E             >                // Use of "; ok" to suppress "warning[fwdref]"
 600+ 828E             >
 600+ 828E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 601+ 828E 43 6B 80 82                  dw      FETCH, DOT
 602+ 8292 23 69                        dw      EXIT
 603+ 8294
 604+ 8294              //  ______________________________________________________________________
 605+ 8294              //
 606+ 8294              // u.           u --
 607+ 8294                              Colon_Def U_DOT, "U.", is_normal
 607+ 8294             >                New_Def  U_DOT, "U.", Enter_Ptr, is_normal ; ok
 607+ 8294             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 607+ 8294             >
 607+ 8294             >                // dummy db directives used to calculate length of namec
 607+ 8294 55 2E       >                db      "U."
 607+ 8296             >len_NFA         defl    $ - temp_NFA
 607+ 8296             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 607+ 8294             >
 607+ 8294 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 607+ 8295 55 2E       >                db      "U."               // name string in 7-bit ascii, but
 607+ 8297             >                org     $-1                 // alter last byte of Name just above to set
 607+ 8296 AE          >                db      {b $} | END_BIT     // msb as name end
 607+ 8297             >
 607+ 8297 88 82       >                dw      last_NFA            // Link to previous definition Name
 607+ 8299             >U_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 607+ 8299 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 607+ 829B             >                else
 607+ 829B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 607+ 829B             >                endif           ; ok        // for other definitions it "points" the correct handler
 607+ 829B             >                // Use of "; ok" to suppress "warning[fwdref]"
 607+ 829B             >
 607+ 829B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 608+ 829B AF 6C 72 82                  dw      ZERO, D_DOT
 609+ 829F 23 69                        dw      EXIT
 610+ 82A1
 611+ 82A1              //  ______________________________________________________________________
 612+ 82A1              //
 613+ 82A1              // words        --
 614+ 82A1                              Colon_Def WORDS, "WORDS", is_normal
 614+ 82A1             >                New_Def  WORDS, "WORDS", Enter_Ptr, is_normal ; ok
 614+ 82A1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 614+ 82A1             >
 614+ 82A1             >                // dummy db directives used to calculate length of namec
 614+ 82A1 57 4F 52 44 >                db      "WORDS"
 614+ 82A5 53          >
 614+ 82A6             >len_NFA         defl    $ - temp_NFA
 614+ 82A6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 614+ 82A1             >
 614+ 82A1 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 614+ 82A2 57 4F 52 44 >                db      "WORDS"               // name string in 7-bit ascii, but
 614+ 82A6 53          >
 614+ 82A7             >                org     $-1                 // alter last byte of Name just above to set
 614+ 82A6 D3          >                db      {b $} | END_BIT     // msb as name end
 614+ 82A7             >
 614+ 82A7 94 82       >                dw      last_NFA            // Link to previous definition Name
 614+ 82A9             >WORDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 614+ 82A9 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 614+ 82AB             >                else
 614+ 82AB ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 614+ 82AB             >                endif           ; ok        // for other definitions it "points" the correct handler
 614+ 82AB             >                // Use of "; ok" to suppress "warning[fwdref]"
 614+ 82AB             >
 614+ 82AB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 615+ 82AB A9 63 80 00                  dw      LIT, 128, OUT, STORE
 615+ 82AF C0 6D 50 6B
 616+ 82B3 E2 6D 43 6B                  dw      CONTEXT, FETCH, FETCH
 616+ 82B7 43 6B
 617+ 82B9              Words_Begin:
 618+ 82B9 B0 6A 5E 6B                  dw          DUP, CFETCH, LIT, $1F, AND_OP
 618+ 82BD A9 63 1F 00
 618+ 82C1 B5 68
 619+ 82C3 C0 6D 43 6B                  dw          OUT, FETCH, PLUS
 619+ 82C7 C4 69
 620+ 82C9 E3 6C 04 6F                  dw          CL, LESS, ZEQUAL
 620+ 82CD 81 69
 621+ 82CF E3 63                        dw          ZBRANCH
 622+ 82D1 0A 00                        dw          Words_Endif - $
 623+ 82D3 02 68 AF 6C                  dw              CR, ZERO, OUT, STORE
 623+ 82D7 C0 6D 50 6B
 624+ 82DB              Words_Endif:
 625+ 82DB B0 6A 9D 75                  dw          DUP, ID_DOT
 626+ 82DF 06 70 D8 6F                  dw          PFA, LFA, FETCH
 626+ 82E3 43 6B
 627+ 82E5 B0 6A 81 69                  dw          DUP, ZEQUAL
 628+ 82E9 0C 67 C7 68                  dw          QTERMINAL, OR_OP
 629+ 82ED E3 63                        dw      ZBRANCH
 630+ 82EF CA FF                        dw      Words_Begin - $
 631+ 82F1 7B 6A                        dw      DROP
 632+ 82F3 23 69                        dw      EXIT
 633+ 82F5
 634+ 82F5              //  ______________________________________________________________________
 635+ 82F5              //
 636+ 82F5              // list         n --
 637+ 82F5                              Colon_Def LIST, "LIST", is_normal
 637+ 82F5             >                New_Def  LIST, "LIST", Enter_Ptr, is_normal ; ok
 637+ 82F5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 637+ 82F5             >
 637+ 82F5             >                // dummy db directives used to calculate length of namec
 637+ 82F5 4C 49 53 54 >                db      "LIST"
 637+ 82F9             >len_NFA         defl    $ - temp_NFA
 637+ 82F9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 637+ 82F5             >
 637+ 82F5 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 637+ 82F6 4C 49 53 54 >                db      "LIST"               // name string in 7-bit ascii, but
 637+ 82FA             >                org     $-1                 // alter last byte of Name just above to set
 637+ 82F9 D4          >                db      {b $} | END_BIT     // msb as name end
 637+ 82FA             >
 637+ 82FA A1 82       >                dw      last_NFA            // Link to previous definition Name
 637+ 82FC             >LIST:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 637+ 82FC 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 637+ 82FE             >                else
 637+ 82FE ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 637+ 82FE             >                endif           ; ok        // for other definitions it "points" the correct handler
 637+ 82FE             >                // Use of "; ok" to suppress "warning[fwdref]"
 637+ 82FE             >
 637+ 82FE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 638+ 82FE 6B 71 02 68                  dw      DECIMAL, CR
 639+ 8302 B0 6A C9 6D                  dw      DUP, SCR, STORE
 639+ 8306 50 6B
 640+ 8308 C9 73                        dw      C_DOT_QUOTE
 641+ 830A 05 53 63 72                  db      5, "Scr# "
 641+ 830E 23 20
 642+ 8310 80 82                        dw      DOT
 643+ 8312 07 6D AF 6C                  dw      LSCR, ZERO, C_DO
 643+ 8316 6B 64
 644+ 8318              List_Loop:
 645+ 8318 02 68                        dw          CR
 646+ 831A 76 64 C7 6C                  dw          I, THREE
 647+ 831E 61 82 92 6F                  dw          DOT_R, SPACE
 648+ 8322 76 64 C9 6D                  dw          I, SCR, FETCH, DOT_LINE
 648+ 8326 43 6B EC 79
 649+ 832A 0C 67                        dw          QTERMINAL
 650+ 832C E3 63                        dw          ZBRANCH
 651+ 832E 04 00                        dw          List_Endif - $
 652+ 8330 39 69                        dw              LEAVE
 653+ 8332              List_Endif:
 654+ 8332 F8 63                        dw      C_LOOP
 655+ 8334 E4 FF                        dw      List_Loop - $
 656+ 8336 02 68                        dw      CR
 657+ 8338 23 69                        dw      EXIT
 658+ 833A
 659+ 833A              //  ______________________________________________________________________
 660+ 833A              //
 661+ 833A              // index        n1 n2 --
 662+ 833A                              Colon_Def INDEX, "INDEX", is_normal
 662+ 833A             >                New_Def  INDEX, "INDEX", Enter_Ptr, is_normal ; ok
 662+ 833A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 662+ 833A             >
 662+ 833A             >                // dummy db directives used to calculate length of namec
 662+ 833A 49 4E 44 45 >                db      "INDEX"
 662+ 833E 58          >
 662+ 833F             >len_NFA         defl    $ - temp_NFA
 662+ 833F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 662+ 833A             >
 662+ 833A 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 662+ 833B 49 4E 44 45 >                db      "INDEX"               // name string in 7-bit ascii, but
 662+ 833F 58          >
 662+ 8340             >                org     $-1                 // alter last byte of Name just above to set
 662+ 833F D8          >                db      {b $} | END_BIT     // msb as name end
 662+ 8340             >
 662+ 8340 F5 82       >                dw      last_NFA            // Link to previous definition Name
 662+ 8342             >INDEX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 662+ 8342 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 662+ 8344             >                else
 662+ 8344 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 662+ 8344             >                endif           ; ok        // for other definitions it "points" the correct handler
 662+ 8344             >                // Use of "; ok" to suppress "warning[fwdref]"
 662+ 8344             >
 662+ 8344             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 663+ 8344 ED 69 A3 6A                  dw      ONE_PLUS, SWAP, C_DO
 663+ 8348 6B 64
 664+ 834A              Index_Loop:
 665+ 834A 02 68 76 64                  dw          CR, I, THREE
 665+ 834E C7 6C
 666+ 8350 61 82 92 6F                  dw          DOT_R, SPACE
 667+ 8354 AF 6C 76 64                  dw          ZERO, I, DOT_LINE
 667+ 8358 EC 79
 668+ 835A 0C 67                        dw          QTERMINAL
 669+ 835C E3 63                        dw          ZBRANCH
 670+ 835E 04 00                        dw          Index_Endif - $
 671+ 8360 39 69                        dw              LEAVE
 672+ 8362              Index_Endif:
 673+ 8362 F8 63                        dw      C_LOOP
 674+ 8364 E6 FF                        dw      Index_Loop - $
 675+ 8366 23 69                        dw      EXIT
 676+ 8368
 677+ 8368              //  ______________________________________________________________________
 678+ 8368              //
 679+ 8368              // cls          --
 680+ 8368                              Colon_Def CLS, "CLS", is_normal
 680+ 8368             >                New_Def  CLS, "CLS", Enter_Ptr, is_normal ; ok
 680+ 8368             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 680+ 8368             >
 680+ 8368             >                // dummy db directives used to calculate length of namec
 680+ 8368 43 4C 53    >                db      "CLS"
 680+ 836B             >len_NFA         defl    $ - temp_NFA
 680+ 836B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 680+ 8368             >
 680+ 8368 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 680+ 8369 43 4C 53    >                db      "CLS"               // name string in 7-bit ascii, but
 680+ 836C             >                org     $-1                 // alter last byte of Name just above to set
 680+ 836B D3          >                db      {b $} | END_BIT     // msb as name end
 680+ 836C             >
 680+ 836C 3A 83       >                dw      last_NFA            // Link to previous definition Name
 680+ 836E             >CLS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 680+ 836E 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 680+ 8370             >                else
 680+ 8370 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 680+ 8370             >                endif           ; ok        // for other definitions it "points" the correct handler
 680+ 8370             >                // Use of "; ok" to suppress "warning[fwdref]"
 680+ 8370             >
 680+ 8370             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 681+ 8370 A9 63 0E 00                  dw      LIT, $0E, EMITC
 681+ 8374 EB 65
 682+ 8376 23 69                        dw      EXIT
 683+ 8378
 684+ 8378              //  ______________________________________________________________________
 685+ 8378              //
 686+ 8378              // splash       --
 687+ 8378                              Colon_Def SPLASH, "SPLASH", is_normal
 687+ 8378             >                New_Def  SPLASH, "SPLASH", Enter_Ptr, is_normal ; ok
 687+ 8378             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 687+ 8378             >
 687+ 8378             >                // dummy db directives used to calculate length of namec
 687+ 8378 53 50 4C 41 >                db      "SPLASH"
 687+ 837C 53 48       >
 687+ 837E             >len_NFA         defl    $ - temp_NFA
 687+ 837E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 687+ 8378             >
 687+ 8378 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 687+ 8379 53 50 4C 41 >                db      "SPLASH"               // name string in 7-bit ascii, but
 687+ 837D 53 48       >
 687+ 837F             >                org     $-1                 // alter last byte of Name just above to set
 687+ 837E C8          >                db      {b $} | END_BIT     // msb as name end
 687+ 837F             >
 687+ 837F 68 83       >                dw      last_NFA            // Link to previous definition Name
 687+ 8381             >SPLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 687+ 8381 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 687+ 8383             >                else
 687+ 8383 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 687+ 8383             >                endif           ; ok        // for other definitions it "points" the correct handler
 687+ 8383             >                // Use of "; ok" to suppress "warning[fwdref]"
 687+ 8383             >
 687+ 8383             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 688+ 8383 6E 83                        dw      CLS
 689+ 8385 C9 73                        dw      C_DOT_QUOTE
 690+ 8387 45                           db      69
 691+ 8388 76 2D 46 6F                  db      "v-Forth 1.5 NextZXOS version", 13
 691+ 838C 72 74 68 20
 691+ 8390 31 2E 35 20
 691+ 8394 4E 65 78 74
 691+ 8398 5A 58 4F 53
 691+ 839C 20 76 65 72
 691+ 83A0 73 69 6F 6E
 691+ 83A4 0D
 692+ 83A5 62 75 69 6C                  db      "build 20210719", 13
 692+ 83A9 64 20 32 30
 692+ 83AD 32 31 30 37
 692+ 83B1 31 39 0D
 693+ 83B4 31 39 39 30                  db      "1990-2021 Matteo Vitturi", 13
 693+ 83B8 2D 32 30 32
 693+ 83BC 31 20 4D 61
 693+ 83C0 74 74 65 6F
 693+ 83C4 20 56 69 74
 693+ 83C8 74 75 72 69
 693+ 83CC 0D
 694+ 83CD 23 69                        dw      EXIT
 695+ 83CF
 696+ 83CF              //  ______________________________________________________________________
 697+ 83CF              //
 698+ 83CF              // video        --
 699+ 83CF                              Colon_Def VIDEO, "VIDEO", is_normal
 699+ 83CF             >                New_Def  VIDEO, "VIDEO", Enter_Ptr, is_normal ; ok
 699+ 83CF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 699+ 83CF             >
 699+ 83CF             >                // dummy db directives used to calculate length of namec
 699+ 83CF 56 49 44 45 >                db      "VIDEO"
 699+ 83D3 4F          >
 699+ 83D4             >len_NFA         defl    $ - temp_NFA
 699+ 83D4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 699+ 83CF             >
 699+ 83CF 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 699+ 83D0 56 49 44 45 >                db      "VIDEO"               // name string in 7-bit ascii, but
 699+ 83D4 4F          >
 699+ 83D5             >                org     $-1                 // alter last byte of Name just above to set
 699+ 83D4 CF          >                db      {b $} | END_BIT     // msb as name end
 699+ 83D5             >
 699+ 83D5 78 83       >                dw      last_NFA            // Link to previous definition Name
 699+ 83D7             >VIDEO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 699+ 83D7 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 699+ 83D9             >                else
 699+ 83D9 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 699+ 83D9             >                endif           ; ok        // for other definitions it "points" the correct handler
 699+ 83D9             >                // Use of "; ok" to suppress "warning[fwdref]"
 699+ 83D9             >
 699+ 83D9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 700+ 83D9 BF 6C B0 6A                  dw      TWO, DUP, DEVICE, STORE
 700+ 83DD 34 7A 50 6B
 701+ 83E1 65 7A                        dw      SELECT
 702+ 83E3 23 69                        dw      EXIT
 703+ 83E5
 704+ 83E5              //  ______________________________________________________________________
 705+ 83E5              //
 706+ 83E5              // accept-      a n1 -- n2
 707+ 83E5                              Colon_Def ACCEPT_N, "ACCEPT-", is_normal
 707+ 83E5             >                New_Def  ACCEPT_N, "ACCEPT-", Enter_Ptr, is_normal ; ok
 707+ 83E5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 707+ 83E5             >
 707+ 83E5             >                // dummy db directives used to calculate length of namec
 707+ 83E5 41 43 43 45 >                db      "ACCEPT-"
 707+ 83E9 50 54 2D    >
 707+ 83EC             >len_NFA         defl    $ - temp_NFA
 707+ 83EC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 707+ 83E5             >
 707+ 83E5 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 707+ 83E6 41 43 43 45 >                db      "ACCEPT-"               // name string in 7-bit ascii, but
 707+ 83EA 50 54 2D    >
 707+ 83ED             >                org     $-1                 // alter last byte of Name just above to set
 707+ 83EC AD          >                db      {b $} | END_BIT     // msb as name end
 707+ 83ED             >
 707+ 83ED CF 83       >                dw      last_NFA            // Link to previous definition Name
 707+ 83EF             >ACCEPT_N:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 707+ 83EF 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 707+ 83F1             >                else
 707+ 83F1 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 707+ 83F1             >                endif           ; ok        // for other definitions it "points" the correct handler
 707+ 83F1             >                // Use of "; ok" to suppress "warning[fwdref]"
 707+ 83F1             >
 707+ 83F1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 708+ 83F1 4C 69                        dw      TO_R
 709+ 83F3 AF 6C                        dw      ZERO
 710+ 83F5 A3 6A                        dw      SWAP
 711+ 83F7 B0 6A                        dw      DUP
 712+ 83F9 60 69                        dw      R_TO
 713+ 83FB C4 69                        dw      PLUS
 714+ 83FD A3 6A                        dw      SWAP
 715+ 83FF 6B 64                        dw      C_DO
 716+ 8401              AcceptN_Loop:
 717+ 8401 B5 7A                        dw          MMU7_FETCH
 718+ 8403 40 7A                        dw          INKEY
 719+ 8405 A3 6A C7 7A                  dw          SWAP, MMU7_STORE
 720+ 8409 B0 6A 81 69                  dw          DUP, ZEQUAL
 721+ 840D E3 63                        dw          ZBRANCH
 722+ 840F 06 00                        dw          AcceptN_Endif_1 - $
 723+ 8411 D7 83 DA 77                  dw              VIDEO, QUIT
 724+ 8415              AcceptN_Endif_1:
 725+ 8415 B0 6A A9 63                  dw          DUP, LIT, 13, EQUALS
 725+ 8419 0D 00 E3 6E
 726+ 841D E3 63                        dw          ZBRANCH
 727+ 841F 06 00                        dw          AcceptN_Endif_2 - $
 728+ 8421 7B 6A AF 6C                  dw              DROP, ZERO
 729+ 8425              AcceptN_Endif_2:
 730+ 8425 B0 6A A9 63                  dw          DUP, LIT, 10, EQUALS
 730+ 8429 0A 00 E3 6E
 731+ 842D E3 63                        dw          ZBRANCH
 732+ 842F 06 00                        dw          AcceptN_Endif_3 - $
 733+ 8431 7B 6A AF 6C                  dw              DROP, ZERO
 734+ 8435              AcceptN_Endif_3:
 735+ 8435 B0 6A 81 69                  dw          DUP, ZEQUAL
 736+ 8439 E3 63                        dw          ZBRANCH
 737+ 843B 04 00                        dw          AcceptN_Endif_4 - $
 738+ 843D 39 69                        dw              LEAVE
 739+ 843F              AcceptN_Endif_4:
 740+ 843F 76 64 6C 6B                  dw          I, CSTORE, ONE_PLUS
 740+ 8443 ED 69
 741+ 8445 F8 63                        dw      C_LOOP
 742+ 8447 BA FF                        dw      AcceptN_Loop -$
 743+ 8449 23 69                        dw      EXIT
 744+ 844B
 745+ 844B              //  ______________________________________________________________________
 746+ 844B              //
 747+ 844B              // load-        n --
 748+ 844B              // Provided that a stream n is OPEN# via the standart BASIC
 749+ 844B              // it accepts text from stream #n to the normal INTERPRET
 750+ 844B              // up to now, text-file must end with QUIT
 751+ 844B                              Colon_Def LOAD_N, "LOAD-", is_normal
 751+ 844B             >                New_Def  LOAD_N, "LOAD-", Enter_Ptr, is_normal ; ok
 751+ 844B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 751+ 844B             >
 751+ 844B             >                // dummy db directives used to calculate length of namec
 751+ 844B 4C 4F 41 44 >                db      "LOAD-"
 751+ 844F 2D          >
 751+ 8450             >len_NFA         defl    $ - temp_NFA
 751+ 8450             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 751+ 844B             >
 751+ 844B 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 751+ 844C 4C 4F 41 44 >                db      "LOAD-"               // name string in 7-bit ascii, but
 751+ 8450 2D          >
 751+ 8451             >                org     $-1                 // alter last byte of Name just above to set
 751+ 8450 AD          >                db      {b $} | END_BIT     // msb as name end
 751+ 8451             >
 751+ 8451 E5 83       >                dw      last_NFA            // Link to previous definition Name
 751+ 8453             >LOAD_N:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 751+ 8453 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 751+ 8455             >                else
 751+ 8455 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 751+ 8455             >                endif           ; ok        // for other definitions it "points" the correct handler
 751+ 8455             >                // Use of "; ok" to suppress "warning[fwdref]"
 751+ 8455             >
 751+ 8455             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 752+ 8455 65 6E 50 6B                  dw      SOURCE_ID, STORE
 753+ 8459              Load_N_Begin:
 754+ 8459 42 6D 43 6B                  dw          TIB, FETCH
 755+ 845D B0 6A A9 63                  dw          DUP, LIT, 80
 755+ 8461 50 00
 756+ 8463 11 6B 42 73                  dw          TWO_DUP, BLANKS
 757+ 8467 65 6E 43 6B                  dw          SOURCE_ID, FETCH
 758+ 846B FA 78 B0 6A                  dw          ABS_OP, DUP, DEVICE, STORE
 758+ 846F 34 7A 50 6B
 759+ 8473 65 7A                        dw          SELECT
 760+ 8475 EF 83                        dw          ACCEPT_N
 761+ 8477 D7 83                        dw          VIDEO
 762+ 8479 F1 6A                        dw          TWO_DROP
 763+ 847B AF 6C AE 6D                  dw          ZERO, BLK, STORE
 763+ 847F 50 6B
 764+ 8481 AF 6C B7 6D                  dw          ZERO, TO_IN, STORE
 764+ 8485 50 6B
 765+ 8487 1A 77                        dw          INTERPRET
 766+ 8489 0C 67                        dw          QTERMINAL
 767+ 848B E3 63                        dw      ZBRANCH
 768+ 848D CC FF                        dw      Load_N_Begin - $
 769+ 848F 23 69                        dw      EXIT
 770+ 8491
 771+ 8491              //  ______________________________________________________________________
 772+ 8491              //
 773+ 8491              // load         n --
 774+ 8491              // if n is positive, it loads screen #n (as usual)
 775+ 8491              // if n is negative, it connects stream #n to the normal INTERPRET
 776+ 8491              // this second way is useful if you want to load any kind of file
 777+ 8491              // provied that it is OPEN# the usual BASIC way.
 778+ 8491                              Colon_Def LOAD, "LOAD", is_normal
 778+ 8491             >                New_Def  LOAD, "LOAD", Enter_Ptr, is_normal ; ok
 778+ 8491             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 778+ 8491             >
 778+ 8491             >                // dummy db directives used to calculate length of namec
 778+ 8491 4C 4F 41 44 >                db      "LOAD"
 778+ 8495             >len_NFA         defl    $ - temp_NFA
 778+ 8495             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 778+ 8491             >
 778+ 8491 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 778+ 8492 4C 4F 41 44 >                db      "LOAD"               // name string in 7-bit ascii, but
 778+ 8496             >                org     $-1                 // alter last byte of Name just above to set
 778+ 8495 C4          >                db      {b $} | END_BIT     // msb as name end
 778+ 8496             >
 778+ 8496 4B 84       >                dw      last_NFA            // Link to previous definition Name
 778+ 8498             >LOAD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 778+ 8498 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 778+ 849A             >                else
 778+ 849A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 778+ 849A             >                endif           ; ok        // for other definitions it "points" the correct handler
 778+ 849A             >                // Use of "; ok" to suppress "warning[fwdref]"
 778+ 849A             >
 778+ 849A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 779+ 849A B0 6A 9C 69                  dw      DUP, ZLESS
 780+ 849E E3 63                        dw      ZBRANCH
 781+ 84A0 08 00                        dw      Load_Else - $
 782+ 84A2 53 84                        dw          LOAD_N
 783+ 84A4 CC 63                        dw      BRANCH
 784+ 84A6 04 00                        dw      Load_Endif - $
 785+ 84A8              Load_Else:
 786+ 84A8 8D 80                        dw          LOAD_P
 787+ 84AA              Load_Endif:
 788+ 84AA 23 69                        dw      EXIT
 789+ 84AC
 790+ 84AC
 791+ 84AC              //  ______________________________________________________________________
 792+ 84AC              //
 793+ 84AC              // autoexec     --
 794+ 84AC              // this word is called the first time the Forth system boot to
 795+ 84AC              // load Screen# 1. Once called it patches itself to prevent furhter runs.
 796+ 84AC                              Colon_Def AUTOEXEC, "AUTOEXEC", is_normal
 796+ 84AC             >                New_Def  AUTOEXEC, "AUTOEXEC", Enter_Ptr, is_normal ; ok
 796+ 84AC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 796+ 84AC             >
 796+ 84AC             >                // dummy db directives used to calculate length of namec
 796+ 84AC 41 55 54 4F >                db      "AUTOEXEC"
 796+ 84B0 45 58 45 43 >
 796+ 84B4             >len_NFA         defl    $ - temp_NFA
 796+ 84B4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 796+ 84AC             >
 796+ 84AC 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 796+ 84AD 41 55 54 4F >                db      "AUTOEXEC"               // name string in 7-bit ascii, but
 796+ 84B1 45 58 45 43 >
 796+ 84B5             >                org     $-1                 // alter last byte of Name just above to set
 796+ 84B4 C3          >                db      {b $} | END_BIT     // msb as name end
 796+ 84B5             >
 796+ 84B5 91 84       >                dw      last_NFA            // Link to previous definition Name
 796+ 84B7             >AUTOEXEC:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 796+ 84B7 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 796+ 84B9             >                else
 796+ 84B9 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 796+ 84B9             >                endif           ; ok        // for other definitions it "points" the correct handler
 796+ 84B9             >                // Use of "; ok" to suppress "warning[fwdref]"
 796+ 84B9             >
 796+ 84B9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 797+ 84B9 A9 63 0B 00                  dw      LIT, 11
 798+ 84BD A9 63 5C 6C                  dw      LIT, NOOP
 799+ 84C1 A9 63 29 78                  dw      LIT, Autoexec_Ptr
 800+ 84C5 50 6B                        dw      STORE
 801+ 84C7 98 84                        dw      LOAD
 802+ 84C9 DA 77                        dw      QUIT
 803+ 84CB 23 69                        dw      EXIT
 804+ 84CD
 805+ 84CD
 806+ 84CD              //  ______________________________________________________________________
 807+ 84CD              //
 808+ 84CD              // bye     --
 809+ 84CD              //
 810+ 84CD                              Colon_Def BYE, "BYE", is_normal
 810+ 84CD             >                New_Def  BYE, "BYE", Enter_Ptr, is_normal ; ok
 810+ 84CD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 810+ 84CD             >
 810+ 84CD             >                // dummy db directives used to calculate length of namec
 810+ 84CD 42 59 45    >                db      "BYE"
 810+ 84D0             >len_NFA         defl    $ - temp_NFA
 810+ 84D0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 810+ 84CD             >
 810+ 84CD 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 810+ 84CE 42 59 45    >                db      "BYE"               // name string in 7-bit ascii, but
 810+ 84D1             >                org     $-1                 // alter last byte of Name just above to set
 810+ 84D0 C5          >                db      {b $} | END_BIT     // msb as name end
 810+ 84D1             >
 810+ 84D1 AC 84       >                dw      last_NFA            // Link to previous definition Name
 810+ 84D3             >BYE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 810+ 84D3 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 810+ 84D5             >                else
 810+ 84D5 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 810+ 84D5             >                endif           ; ok        // for other definitions it "points" the correct handler
 810+ 84D5             >                // Use of "; ok" to suppress "warning[fwdref]"
 810+ 84D5             >
 810+ 84D5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 811+ 84D5 41 7D                        dw      FLUSH
 812+ 84D7 72 7C                        dw      EMPTY_BUFFERS
 813+ 84D9 16 7B 43 6B                  dw      BLK_FH, FETCH, F_CLOSE, DROP
 813+ 84DD AF 67 7B 6A
 814+ 84E1 AF 6C 15 6D                  dw      ZERO, PLUS_ORIGIN
 815+ 84E5 BF 78                        dw      BASIC
 816+ 84E7
 817+ 84E7              //  ______________________________________________________________________
 818+ 84E7              //
 819+ 84E7              // invv     --
 820+ 84E7              //
 821+ 84E7              //              Colon_Def INVV, "INVV", is_normal
 822+ 84E7              //              dw      LIT, 20, EMITC, ONE, EMITC
 823+ 84E7              //              dw      EXIT
 824+ 84E7
 825+ 84E7              //  ______________________________________________________________________
 826+ 84E7              //
 827+ 84E7              // truv     --
 828+ 84E7              //
 829+ 84E7              //              Colon_Def TRUV, "TRUV", is_normal
 830+ 84E7              //              dw      LIT, 20, EMITC, ZERO, EMITC
 831+ 84E7              //              dw      EXIT
 832+ 84E7
 833+ 84E7              //  ______________________________________________________________________
 834+ 84E7              //
 835+ 84E7              // mark     --
 836+ 84E7              //
 837+ 84E7              //              Colon_Def MARK, "MARK", is_normal
 838+ 84E7              //              dw      INVV, TYPE, TRUV
 839+ 84E7              //              dw      EXIT
 840+ 84E7
 841+ 84E7              //  ______________________________________________________________________
 842+ 84E7              //
 843+ 84E7              // back     --
 844+ 84E7              //
 845+ 84E7                              Colon_Def BACK, "BACK", is_normal
 845+ 84E7             >                New_Def  BACK, "BACK", Enter_Ptr, is_normal ; ok
 845+ 84E7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 845+ 84E7             >
 845+ 84E7             >                // dummy db directives used to calculate length of namec
 845+ 84E7 42 41 43 4B >                db      "BACK"
 845+ 84EB             >len_NFA         defl    $ - temp_NFA
 845+ 84EB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 845+ 84E7             >
 845+ 84E7 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 845+ 84E8 42 41 43 4B >                db      "BACK"               // name string in 7-bit ascii, but
 845+ 84EC             >                org     $-1                 // alter last byte of Name just above to set
 845+ 84EB CB          >                db      {b $} | END_BIT     // msb as name end
 845+ 84EC             >
 845+ 84EC CD 84       >                dw      last_NFA            // Link to previous definition Name
 845+ 84EE             >BACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 845+ 84EE 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 845+ 84F0             >                else
 845+ 84F0 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 845+ 84F0             >                endif           ; ok        // for other definitions it "points" the correct handler
 845+ 84F0             >                // Use of "; ok" to suppress "warning[fwdref]"
 845+ 84F0             >
 845+ 84F0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 846+ 84F0 81 6E D5 6E                  dw      HERE, SUBTRACT, COMMA
 846+ 84F4 9D 6E
 847+ 84F6 23 69                        dw      EXIT
 848+ 84F8
 849+ 84F8              //  ______________________________________________________________________
 850+ 84F8              //
 851+ 84F8              // if          ( -- a 2 ) \ compile-time
 852+ 84F8              // IF ... THEN
 853+ 84F8              // IF ... ELSE ... ENDIF
 854+ 84F8                              Colon_Def IF, "IF", is_immediate
 854+ 84F8             >                New_Def  IF, "IF", Enter_Ptr, is_immediate ; ok
 854+ 84F8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 854+ 84F8             >
 854+ 84F8             >                // dummy db directives used to calculate length of namec
 854+ 84F8 49 46       >                db      "IF"
 854+ 84FA             >len_NFA         defl    $ - temp_NFA
 854+ 84FA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 854+ 84F8             >
 854+ 84F8 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 854+ 84F9 49 46       >                db      "IF"               // name string in 7-bit ascii, but
 854+ 84FB             >                org     $-1                 // alter last byte of Name just above to set
 854+ 84FA C6          >                db      {b $} | END_BIT     // msb as name end
 854+ 84FB             >
 854+ 84FB E7 84       >                dw      last_NFA            // Link to previous definition Name
 854+ 84FD             >IF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 854+ 84FD 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 854+ 84FF             >                else
 854+ 84FF ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 854+ 84FF             >                endif           ; ok        // for other definitions it "points" the correct handler
 854+ 84FF             >                // Use of "; ok" to suppress "warning[fwdref]"
 854+ 84FF             >
 854+ 84FF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 855+ 84FF DF 70 E3 63                  dw      COMPILE, ZBRANCH
 856+ 8503 81 6E AF 6C                  dw      HERE, ZERO, COMMA
 856+ 8507 9D 6E
 857+ 8509 BF 6C                        dw      TWO
 858+ 850B 23 69                        dw      EXIT
 859+ 850D
 860+ 850D              //  ______________________________________________________________________
 861+ 850D              //
 862+ 850D              // endif        ( a 2 -- ) \ compile-time
 863+ 850D              //
 864+ 850D                              Colon_Def ENDIF, "ENDIF", is_immediate
 864+ 850D             >                New_Def  ENDIF, "ENDIF", Enter_Ptr, is_immediate ; ok
 864+ 850D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 864+ 850D             >
 864+ 850D             >                // dummy db directives used to calculate length of namec
 864+ 850D 45 4E 44 49 >                db      "ENDIF"
 864+ 8511 46          >
 864+ 8512             >len_NFA         defl    $ - temp_NFA
 864+ 8512             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 864+ 850D             >
 864+ 850D C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 864+ 850E 45 4E 44 49 >                db      "ENDIF"               // name string in 7-bit ascii, but
 864+ 8512 46          >
 864+ 8513             >                org     $-1                 // alter last byte of Name just above to set
 864+ 8512 C6          >                db      {b $} | END_BIT     // msb as name end
 864+ 8513             >
 864+ 8513 F8 84       >                dw      last_NFA            // Link to previous definition Name
 864+ 8515             >ENDIF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 864+ 8515 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 864+ 8517             >                else
 864+ 8517 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 864+ 8517             >                endif           ; ok        // for other definitions it "points" the correct handler
 864+ 8517             >                // Use of "; ok" to suppress "warning[fwdref]"
 864+ 8517             >
 864+ 8517             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 865+ 8517 66 70                        dw      QCOMP
 866+ 8519 BF 6C 95 70                  dw      TWO, QPAIRS
 867+ 851D 81 6E 6B 6A                  dw      HERE, OVER, SUBTRACT, SWAP, STORE
 867+ 8521 D5 6E A3 6A
 867+ 8525 50 6B
 868+ 8527 23 69                        dw      EXIT
 869+ 8529
 870+ 8529              //  ______________________________________________________________________
 871+ 8529              //
 872+ 8529              // then        ( a 2 -- ) \ compile-time
 873+ 8529              //
 874+ 8529                              Colon_Def THEN, "THEN", is_immediate
 874+ 8529             >                New_Def  THEN, "THEN", Enter_Ptr, is_immediate ; ok
 874+ 8529             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 874+ 8529             >
 874+ 8529             >                // dummy db directives used to calculate length of namec
 874+ 8529 54 48 45 4E >                db      "THEN"
 874+ 852D             >len_NFA         defl    $ - temp_NFA
 874+ 852D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 874+ 8529             >
 874+ 8529 C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 874+ 852A 54 48 45 4E >                db      "THEN"               // name string in 7-bit ascii, but
 874+ 852E             >                org     $-1                 // alter last byte of Name just above to set
 874+ 852D CE          >                db      {b $} | END_BIT     // msb as name end
 874+ 852E             >
 874+ 852E 0D 85       >                dw      last_NFA            // Link to previous definition Name
 874+ 8530             >THEN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 874+ 8530 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 874+ 8532             >                else
 874+ 8532 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 874+ 8532             >                endif           ; ok        // for other definitions it "points" the correct handler
 874+ 8532             >                // Use of "; ok" to suppress "warning[fwdref]"
 874+ 8532             >
 874+ 8532             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 875+ 8532 15 85                        dw      ENDIF
 876+ 8534 23 69                        dw      EXIT
 877+ 8536
 878+ 8536              //  ______________________________________________________________________
 879+ 8536              //
 880+ 8536              // else        ( a1 2 -- a2 2 ) \ compile-time
 881+ 8536              //
 882+ 8536                              Colon_Def ELSE, "ELSE", is_immediate
 882+ 8536             >                New_Def  ELSE, "ELSE", Enter_Ptr, is_immediate ; ok
 882+ 8536             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 882+ 8536             >
 882+ 8536             >                // dummy db directives used to calculate length of namec
 882+ 8536 45 4C 53 45 >                db      "ELSE"
 882+ 853A             >len_NFA         defl    $ - temp_NFA
 882+ 853A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 882+ 8536             >
 882+ 8536 C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 882+ 8537 45 4C 53 45 >                db      "ELSE"               // name string in 7-bit ascii, but
 882+ 853B             >                org     $-1                 // alter last byte of Name just above to set
 882+ 853A C5          >                db      {b $} | END_BIT     // msb as name end
 882+ 853B             >
 882+ 853B 29 85       >                dw      last_NFA            // Link to previous definition Name
 882+ 853D             >ELSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 882+ 853D 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 882+ 853F             >                else
 882+ 853F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 882+ 853F             >                endif           ; ok        // for other definitions it "points" the correct handler
 882+ 853F             >                // Use of "; ok" to suppress "warning[fwdref]"
 882+ 853F             >
 882+ 853F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 883+ 853F 66 70                        dw      QCOMP
 884+ 8541 BF 6C 95 70                  dw      TWO, QPAIRS
 885+ 8545 DF 70 CC 63                  dw      COMPILE, BRANCH
 886+ 8549 81 6E AF 6C                  dw      HERE, ZERO, COMMA
 886+ 854D 9D 6E
 887+ 854F A3 6A BF 6C                  dw      SWAP, TWO, ENDIF
 887+ 8553 15 85
 888+ 8555 BF 6C                        dw      TWO
 889+ 8557 23 69                        dw      EXIT
 890+ 8559
 891+ 8559              //  ______________________________________________________________________
 892+ 8559              //
 893+ 8559              // begin        ( -- a 1 ) \ compile-time
 894+ 8559              // BEGIN ... AGAIN
 895+ 8559              // BEGIN ... f UNTIL
 896+ 8559              // BEGIN ... f WHILE ... REPEAT
 897+ 8559                              Colon_Def BEGIN, "BEGIN", is_immediate
 897+ 8559             >                New_Def  BEGIN, "BEGIN", Enter_Ptr, is_immediate ; ok
 897+ 8559             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 897+ 8559             >
 897+ 8559             >                // dummy db directives used to calculate length of namec
 897+ 8559 42 45 47 49 >                db      "BEGIN"
 897+ 855D 4E          >
 897+ 855E             >len_NFA         defl    $ - temp_NFA
 897+ 855E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 897+ 8559             >
 897+ 8559 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 897+ 855A 42 45 47 49 >                db      "BEGIN"               // name string in 7-bit ascii, but
 897+ 855E 4E          >
 897+ 855F             >                org     $-1                 // alter last byte of Name just above to set
 897+ 855E CE          >                db      {b $} | END_BIT     // msb as name end
 897+ 855F             >
 897+ 855F 36 85       >                dw      last_NFA            // Link to previous definition Name
 897+ 8561             >BEGIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 897+ 8561 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 897+ 8563             >                else
 897+ 8563 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 897+ 8563             >                endif           ; ok        // for other definitions it "points" the correct handler
 897+ 8563             >                // Use of "; ok" to suppress "warning[fwdref]"
 897+ 8563             >
 897+ 8563             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 898+ 8563 66 70                        dw      QCOMP
 899+ 8565 81 6E                        dw      HERE
 900+ 8567 B7 6C                        dw      ONE
 901+ 8569 23 69                        dw      EXIT
 902+ 856B
 903+ 856B              //  ______________________________________________________________________
 904+ 856B              //
 905+ 856B              // again        ( a 1 -- ) \ compile-time
 906+ 856B                              Colon_Def AGAIN, "AGAIN", is_immediate
 906+ 856B             >                New_Def  AGAIN, "AGAIN", Enter_Ptr, is_immediate ; ok
 906+ 856B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 906+ 856B             >
 906+ 856B             >                // dummy db directives used to calculate length of namec
 906+ 856B 41 47 41 49 >                db      "AGAIN"
 906+ 856F 4E          >
 906+ 8570             >len_NFA         defl    $ - temp_NFA
 906+ 8570             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 906+ 856B             >
 906+ 856B C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 906+ 856C 41 47 41 49 >                db      "AGAIN"               // name string in 7-bit ascii, but
 906+ 8570 4E          >
 906+ 8571             >                org     $-1                 // alter last byte of Name just above to set
 906+ 8570 CE          >                db      {b $} | END_BIT     // msb as name end
 906+ 8571             >
 906+ 8571 59 85       >                dw      last_NFA            // Link to previous definition Name
 906+ 8573             >AGAIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 906+ 8573 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 906+ 8575             >                else
 906+ 8575 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 906+ 8575             >                endif           ; ok        // for other definitions it "points" the correct handler
 906+ 8575             >                // Use of "; ok" to suppress "warning[fwdref]"
 906+ 8575             >
 906+ 8575             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 907+ 8575 66 70                        dw      QCOMP
 908+ 8577 B7 6C 95 70                  dw      ONE, QPAIRS
 909+ 857B DF 70 CC 63                  dw      COMPILE, BRANCH
 910+ 857F EE 84                        dw      BACK
 911+ 8581 23 69                        dw      EXIT
 912+ 8583
 913+ 8583              //  ______________________________________________________________________
 914+ 8583              //
 915+ 8583              // until        ( a 1 -- ) \ compile-time
 916+ 8583                              Colon_Def UNTIL, "UNTIL", is_immediate
 916+ 8583             >                New_Def  UNTIL, "UNTIL", Enter_Ptr, is_immediate ; ok
 916+ 8583             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 916+ 8583             >
 916+ 8583             >                // dummy db directives used to calculate length of namec
 916+ 8583 55 4E 54 49 >                db      "UNTIL"
 916+ 8587 4C          >
 916+ 8588             >len_NFA         defl    $ - temp_NFA
 916+ 8588             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 916+ 8583             >
 916+ 8583 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 916+ 8584 55 4E 54 49 >                db      "UNTIL"               // name string in 7-bit ascii, but
 916+ 8588 4C          >
 916+ 8589             >                org     $-1                 // alter last byte of Name just above to set
 916+ 8588 CC          >                db      {b $} | END_BIT     // msb as name end
 916+ 8589             >
 916+ 8589 6B 85       >                dw      last_NFA            // Link to previous definition Name
 916+ 858B             >UNTIL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 916+ 858B 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 916+ 858D             >                else
 916+ 858D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 916+ 858D             >                endif           ; ok        // for other definitions it "points" the correct handler
 916+ 858D             >                // Use of "; ok" to suppress "warning[fwdref]"
 916+ 858D             >
 916+ 858D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 917+ 858D 66 70                        dw      QCOMP
 918+ 858F B7 6C 95 70                  dw      ONE, QPAIRS
 919+ 8593 DF 70 E3 63                  dw      COMPILE, ZBRANCH
 920+ 8597 EE 84                        dw      BACK
 921+ 8599 23 69                        dw      EXIT
 922+ 859B
 923+ 859B              //  ______________________________________________________________________
 924+ 859B              //
 925+ 859B              // end          ( a 1 -- ) \ compile-time
 926+ 859B                              Colon_Def END, "END", is_immediate
 926+ 859B             >                New_Def  END, "END", Enter_Ptr, is_immediate ; ok
 926+ 859B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 926+ 859B             >
 926+ 859B             >                // dummy db directives used to calculate length of namec
 926+ 859B 45 4E 44    >                db      "END"
 926+ 859E             >len_NFA         defl    $ - temp_NFA
 926+ 859E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 926+ 859B             >
 926+ 859B C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 926+ 859C 45 4E 44    >                db      "END"               // name string in 7-bit ascii, but
 926+ 859F             >                org     $-1                 // alter last byte of Name just above to set
 926+ 859E C4          >                db      {b $} | END_BIT     // msb as name end
 926+ 859F             >
 926+ 859F 83 85       >                dw      last_NFA            // Link to previous definition Name
 926+ 85A1             >END:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 926+ 85A1 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 926+ 85A3             >                else
 926+ 85A3 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 926+ 85A3             >                endif           ; ok        // for other definitions it "points" the correct handler
 926+ 85A3             >                // Use of "; ok" to suppress "warning[fwdref]"
 926+ 85A3             >
 926+ 85A3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 927+ 85A3 8B 85                        dw      UNTIL
 928+ 85A5 23 69                        dw      EXIT
 929+ 85A7
 930+ 85A7              //  ______________________________________________________________________
 931+ 85A7              //
 932+ 85A7              // while        ( a1 1 -- a1 1 a2 4 ) \ compile-time
 933+ 85A7                              Colon_Def WHILE, "WHILE", is_immediate
 933+ 85A7             >                New_Def  WHILE, "WHILE", Enter_Ptr, is_immediate ; ok
 933+ 85A7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 933+ 85A7             >
 933+ 85A7             >                // dummy db directives used to calculate length of namec
 933+ 85A7 57 48 49 4C >                db      "WHILE"
 933+ 85AB 45          >
 933+ 85AC             >len_NFA         defl    $ - temp_NFA
 933+ 85AC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 933+ 85A7             >
 933+ 85A7 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 933+ 85A8 57 48 49 4C >                db      "WHILE"               // name string in 7-bit ascii, but
 933+ 85AC 45          >
 933+ 85AD             >                org     $-1                 // alter last byte of Name just above to set
 933+ 85AC C5          >                db      {b $} | END_BIT     // msb as name end
 933+ 85AD             >
 933+ 85AD 9B 85       >                dw      last_NFA            // Link to previous definition Name
 933+ 85AF             >WHILE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 933+ 85AF 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 933+ 85B1             >                else
 933+ 85B1 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 933+ 85B1             >                endif           ; ok        // for other definitions it "points" the correct handler
 933+ 85B1             >                // Use of "; ok" to suppress "warning[fwdref]"
 933+ 85B1             >
 933+ 85B1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 934+ 85B1 FD 84                        dw      IF
 935+ 85B3 05 6A                        dw      TWO_PLUS // ( that is 4 )
 936+ 85B5 23 69                        dw      EXIT
 937+ 85B7
 938+ 85B7              //  ______________________________________________________________________
 939+ 85B7              //
 940+ 85B7              // repeat       ( a1 1 a2 4 -- ) \ compile-time
 941+ 85B7                              Colon_Def REPEAT, "REPEAT", is_immediate
 941+ 85B7             >                New_Def  REPEAT, "REPEAT", Enter_Ptr, is_immediate ; ok
 941+ 85B7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 941+ 85B7             >
 941+ 85B7             >                // dummy db directives used to calculate length of namec
 941+ 85B7 52 45 50 45 >                db      "REPEAT"
 941+ 85BB 41 54       >
 941+ 85BD             >len_NFA         defl    $ - temp_NFA
 941+ 85BD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 941+ 85B7             >
 941+ 85B7 C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 941+ 85B8 52 45 50 45 >                db      "REPEAT"               // name string in 7-bit ascii, but
 941+ 85BC 41 54       >
 941+ 85BE             >                org     $-1                 // alter last byte of Name just above to set
 941+ 85BD D4          >                db      {b $} | END_BIT     // msb as name end
 941+ 85BE             >
 941+ 85BE A7 85       >                dw      last_NFA            // Link to previous definition Name
 941+ 85C0             >REPEAT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 941+ 85C0 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 941+ 85C2             >                else
 941+ 85C2 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 941+ 85C2             >                endif           ; ok        // for other definitions it "points" the correct handler
 941+ 85C2             >                // Use of "; ok" to suppress "warning[fwdref]"
 941+ 85C2             >
 941+ 85C2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 942+ 85C2 FF 6A                        dw      TWO_SWAP
 943+ 85C4 73 85                        dw      AGAIN
 944+ 85C6 BF 6C D5 6E                  dw      TWO, SUBTRACT
 945+ 85CA 15 85                        dw      ENDIF
 946+ 85CC 23 69                        dw      EXIT
 947+ 85CE
 948+ 85CE              //  ______________________________________________________________________
 949+ 85CE              //
 950+ 85CE              // ?do-
 951+ 85CE              // special version of "BACK" used by ?DO and LOOP
 952+ 85CE                              Colon_Def C_DO_BACK, "?DO-", is_normal
 952+ 85CE             >                New_Def  C_DO_BACK, "?DO-", Enter_Ptr, is_normal ; ok
 952+ 85CE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 952+ 85CE             >
 952+ 85CE             >                // dummy db directives used to calculate length of namec
 952+ 85CE 3F 44 4F 2D >                db      "?DO-"
 952+ 85D2             >len_NFA         defl    $ - temp_NFA
 952+ 85D2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 952+ 85CE             >
 952+ 85CE 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 952+ 85CF 3F 44 4F 2D >                db      "?DO-"               // name string in 7-bit ascii, but
 952+ 85D3             >                org     $-1                 // alter last byte of Name just above to set
 952+ 85D2 AD          >                db      {b $} | END_BIT     // msb as name end
 952+ 85D3             >
 952+ 85D3 B7 85       >                dw      last_NFA            // Link to previous definition Name
 952+ 85D5             >C_DO_BACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 952+ 85D5 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 952+ 85D7             >                else
 952+ 85D7 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 952+ 85D7             >                endif           ; ok        // for other definitions it "points" the correct handler
 952+ 85D7             >                // Use of "; ok" to suppress "warning[fwdref]"
 952+ 85D7             >
 952+ 85D7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 953+ 85D7 EE 84                        dw      BACK
 954+ 85D9 ED 68 1F 6E                  dw      SPFETCH, CSP, FETCH, SUBTRACT
 954+ 85DD 43 6B D5 6E
 955+ 85E1 E3 63                        dw      ZBRANCH
 956+ 85E3 06 00                        dw      CDoBack_Endif - $
 957+ 85E5 05 6A 15 85                  dw          TWO_PLUS, ENDIF
 958+ 85E9              CDoBack_Endif:
 959+ 85E9 A8 70 1F 6E                  dw      QCSP, CSP, STORE
 959+ 85ED 50 6B
 960+ 85EF 23 69                        dw      EXIT
 961+ 85F1
 962+ 85F1              //  ______________________________________________________________________
 963+ 85F1              //
 964+ 85F1              // do
 965+ 85F1              // DO  ... LOOP
 966+ 85F1              // DO  ... n +LOOP
 967+ 85F1              // ?DO ... LOOP
 968+ 85F1              // ?DO ... n +LOOP
 969+ 85F1                              Colon_Def DO, "DO", is_immediate
 969+ 85F1             >                New_Def  DO, "DO", Enter_Ptr, is_immediate ; ok
 969+ 85F1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 969+ 85F1             >
 969+ 85F1             >                // dummy db directives used to calculate length of namec
 969+ 85F1 44 4F       >                db      "DO"
 969+ 85F3             >len_NFA         defl    $ - temp_NFA
 969+ 85F3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 969+ 85F1             >
 969+ 85F1 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 969+ 85F2 44 4F       >                db      "DO"               // name string in 7-bit ascii, but
 969+ 85F4             >                org     $-1                 // alter last byte of Name just above to set
 969+ 85F3 CF          >                db      {b $} | END_BIT     // msb as name end
 969+ 85F4             >
 969+ 85F4 CE 85       >                dw      last_NFA            // Link to previous definition Name
 969+ 85F6             >DO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 969+ 85F6 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 969+ 85F8             >                else
 969+ 85F8 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 969+ 85F8             >                endif           ; ok        // for other definitions it "points" the correct handler
 969+ 85F8             >                // Use of "; ok" to suppress "warning[fwdref]"
 969+ 85F8             >
 969+ 85F8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 970+ 85F8 DF 70 6B 64                  dw      COMPILE, C_DO
 971+ 85FC 1F 6E 43 6B                  dw      CSP, FETCH, STORE_CSP
 971+ 8600 39 70
 972+ 8602 81 6E C7 6C                  dw      HERE, THREE
 973+ 8606 23 69                        dw      EXIT
 974+ 8608
 975+ 8608              //  ______________________________________________________________________
 976+ 8608              //
 977+ 8608              // loop
 978+ 8608                              Colon_Def LOOP, "LOOP", is_immediate
 978+ 8608             >                New_Def  LOOP, "LOOP", Enter_Ptr, is_immediate ; ok
 978+ 8608             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 978+ 8608             >
 978+ 8608             >                // dummy db directives used to calculate length of namec
 978+ 8608 4C 4F 4F 50 >                db      "LOOP"
 978+ 860C             >len_NFA         defl    $ - temp_NFA
 978+ 860C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 978+ 8608             >
 978+ 8608 C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 978+ 8609 4C 4F 4F 50 >                db      "LOOP"               // name string in 7-bit ascii, but
 978+ 860D             >                org     $-1                 // alter last byte of Name just above to set
 978+ 860C D0          >                db      {b $} | END_BIT     // msb as name end
 978+ 860D             >
 978+ 860D F1 85       >                dw      last_NFA            // Link to previous definition Name
 978+ 860F             >LOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 978+ 860F 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 978+ 8611             >                else
 978+ 8611 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 978+ 8611             >                endif           ; ok        // for other definitions it "points" the correct handler
 978+ 8611             >                // Use of "; ok" to suppress "warning[fwdref]"
 978+ 8611             >
 978+ 8611             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 979+ 8611 C7 6C 95 70                  dw      THREE, QPAIRS
 980+ 8615 DF 70 F8 63                  dw      COMPILE, C_LOOP
 981+ 8619 D5 85                        dw      C_DO_BACK
 982+ 861B 23 69                        dw      EXIT
 983+ 861D
 984+ 861D              //  ______________________________________________________________________
 985+ 861D              //
 986+ 861D              // +loop
 987+ 861D                              Colon_Def PLOOP, "+LOOP", is_immediate
 987+ 861D             >                New_Def  PLOOP, "+LOOP", Enter_Ptr, is_immediate ; ok
 987+ 861D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 987+ 861D             >
 987+ 861D             >                // dummy db directives used to calculate length of namec
 987+ 861D 2B 4C 4F 4F >                db      "+LOOP"
 987+ 8621 50          >
 987+ 8622             >len_NFA         defl    $ - temp_NFA
 987+ 8622             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 987+ 861D             >
 987+ 861D C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 987+ 861E 2B 4C 4F 4F >                db      "+LOOP"               // name string in 7-bit ascii, but
 987+ 8622 50          >
 987+ 8623             >                org     $-1                 // alter last byte of Name just above to set
 987+ 8622 D0          >                db      {b $} | END_BIT     // msb as name end
 987+ 8623             >
 987+ 8623 08 86       >                dw      last_NFA            // Link to previous definition Name
 987+ 8625             >PLOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 987+ 8625 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 987+ 8627             >                else
 987+ 8627 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 987+ 8627             >                endif           ; ok        // for other definitions it "points" the correct handler
 987+ 8627             >                // Use of "; ok" to suppress "warning[fwdref]"
 987+ 8627             >
 987+ 8627             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 988+ 8627 C7 6C 95 70                  dw      THREE, QPAIRS
 989+ 862B DF 70 2F 64                  dw      COMPILE, C_PLOOP
 990+ 862F D5 85                        dw      C_DO_BACK
 991+ 8631 23 69                        dw      EXIT
 992+ 8633
 993+ 8633              //  ______________________________________________________________________
 994+ 8633              //
 995+ 8633              // ?do
 996+ 8633                              Colon_Def QDO, "?DO", is_immediate
 996+ 8633             >                New_Def  QDO, "?DO", Enter_Ptr, is_immediate ; ok
 996+ 8633             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 996+ 8633             >
 996+ 8633             >                // dummy db directives used to calculate length of namec
 996+ 8633 3F 44 4F    >                db      "?DO"
 996+ 8636             >len_NFA         defl    $ - temp_NFA
 996+ 8636             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 996+ 8633             >
 996+ 8633 C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 996+ 8634 3F 44 4F    >                db      "?DO"               // name string in 7-bit ascii, but
 996+ 8637             >                org     $-1                 // alter last byte of Name just above to set
 996+ 8636 CF          >                db      {b $} | END_BIT     // msb as name end
 996+ 8637             >
 996+ 8637 1D 86       >                dw      last_NFA            // Link to previous definition Name
 996+ 8639             >QDO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 996+ 8639 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 996+ 863B             >                else
 996+ 863B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 996+ 863B             >                endif           ; ok        // for other definitions it "points" the correct handler
 996+ 863B             >                // Use of "; ok" to suppress "warning[fwdref]"
 996+ 863B             >
 996+ 863B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 997+ 863B DF 70 3D 64                  dw      COMPILE, C_Q_DO
 998+ 863F 1F 6E 43 6B                  dw      CSP, FETCH, STORE_CSP
 998+ 8643 39 70
 999+ 8645 81 6E AF 6C                  dw      HERE, ZERO, COMMA, ZERO
 999+ 8649 9D 6E AF 6C
1000+ 864D 81 6E C7 6C                  dw      HERE, THREE
1001+ 8651 23 69                        dw      EXIT
1002+ 8653
1003+ 8653              Latest_Definition:
1004+ 8653              //  ______________________________________________________________________
1005+ 8653              //
1006+ 8653              // \
1007+ 8653                              Colon_Def BACKSLASH, "\\", is_immediate  // this is a single back-slash
1007+ 8653             >                New_Def  BACKSLASH, "\\", Enter_Ptr, is_immediate ; ok
1007+ 8653             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1007+ 8653             >
1007+ 8653             >                // dummy db directives used to calculate length of namec
1007+ 8653 5C          >                db      "\\"
1007+ 8654             >len_NFA         defl    $ - temp_NFA
1007+ 8654             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1007+ 8653             >
1007+ 8653 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1007+ 8654 5C          >                db      "\\"               // name string in 7-bit ascii, but
1007+ 8655             >                org     $-1                 // alter last byte of Name just above to set
1007+ 8654 DC          >                db      {b $} | END_BIT     // msb as name end
1007+ 8655             >
1007+ 8655 33 86       >                dw      last_NFA            // Link to previous definition Name
1007+ 8657             >BACKSLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1007+ 8657 34 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1007+ 8659             >                else
1007+ 8659 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1007+ 8659             >                endif           ; ok        // for other definitions it "points" the correct handler
1007+ 8659             >                // Use of "; ok" to suppress "warning[fwdref]"
1007+ 8659             >
1007+ 8659             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1008+ 8659 AE 6D 43 6B                  dw      BLK, FETCH
1009+ 865D E3 63                        dw      ZBRANCH
1010+ 865F 30 00                        dw      Backslash_Else_1 - $
1011+ 8661 AE 6D 43 6B                  dw          BLK, FETCH, ONE, GREATER  // BLOCK 1 is used as temp-line in INCLUDE file
1011+ 8665 B7 6C 20 6F
1012+ 8669 E3 63                        dw          ZBRANCH
1013+ 866B 18 00                        dw          Backslash_Else_2 - $
1014+ 866D B7 6D 43 6B                  dw              TO_IN, FETCH, CL, MOD, CL
1014+ 8671 E3 6C 94 79
1014+ 8675 E3 6C
1015+ 8677 A3 6A D5 6E                  dw              SWAP, SUBTRACT, TO_IN, PLUSSTORE
1015+ 867B B7 6D 20 6B
1016+ 867F CC 63                        dw          BRANCH
1017+ 8681 0A 00                        dw          Backslash_Endif_2 - $
1018+ 8683              Backslash_Else_2:
1019+ 8683 EF 6C 1F 6A                  dw              BBUF, CELL_MINUS, TO_IN, STORE
1019+ 8687 B7 6D 50 6B
1020+ 868B              Backslash_Endif_2:
1021+ 868B CC 63                        dw      BRANCH
1022+ 868D 0A 00                        dw      Backslash_Endif_1 - $
1023+ 868F              Backslash_Else_1:
1024+ 868F A9 63 50 00                  dw          LIT, 80, TO_IN, STORE
1024+ 8693 B7 6D 50 6B
1025+ 8697              Backslash_Endif_1:
1026+ 8697 23 69                        dw      EXIT
1027+ 8699
1028+ 8699              Fence_Word:
1029+ 8699              //  ______________________________________________________________________
1030+ 8699              //
1031+ 8699
1032+ 8699 00           Here_Dictionary db      0
1033+ 869A
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L3.asm
 113  869A
 114  869A              // now we save the compiled file so we can either run it or debug it
 115  869A                              SAVENEX OPEN "output/main.nex", ORIGIN
 116  869A                              SAVENEX CORE 3, 0, 0                                // Next core 3.0.0 required as minimum
 117  869A                              SAVENEX CFG  0
 118  869A                              SAVENEX BANK 2, 0
 119  869A                              SAVENEX AUTO
 120  869A                              SAVENEX CLOSE
 121  869A
 122  869A              //              PAGE 7 ;set 7 page to current slot
 123  869A              //              SAVEBIN "ram7.bin",$C000,$4000 ;- save 4000h begin from C000h of RAM to file
 124  869A              //              SAVEBIN "output/ram2.bin", $8000, 9800 ;- save 3000h begin from 8000h of RAM to file
 125  869A
 126  869A              //              SAVETAP "output/F15j.tap", CODE, "forth15j", $6400, 9000
 127  869A
 128  869A                              SAVEBIN "output/forth15j.bin", ORIGIN, 9400
 129  869A
 130  869A                              END
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/main.asm
