# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/main.asm
   1  0000              //  ______________________________________________________________________
   2  0000              //
   3  0000              //  main.asm
   4  0000              //  ______________________________________________________________________
   5  0000              //
   6  0000              // v-Forth 1.6 NextZXOS version
   7  0000              // build 20210320
   8  0000              //
   9  0000              //
  10  0000              //  NextZXOS version
  11  0000              //  ______________________________________________________________________
  12  0000              //
  13  0000              //  This work is available as-is with no whatsoever warranty.
  14  0000              //  Copying, modifying and distributing this software is allowed
  15  0000              //  provided that the copyright notice is kept.
  16  0000              //  ______________________________________________________________________
  17  0000              //
  18  0000              //  by Matteo Vitturi, 1990-2021
  19  0000              //
  20  0000              //  https://sites.google.com/view/vforth/vforth15-next
  21  0000              //  https://www.oocities.org/matteo_vitturi/english/index.htm
  22  0000              //
  23  0000              //  This is the complete compiler for v.Forth for SINCLAIR ZX Spectrum Next.
  24  0000              //  Each line of this source list mustn't exceed 80 bytes.
  25  0000              //  Z80N (ZX Spectrum Next) extension is available.
  26  0000              //
  27  0000              //  This list has been tested using the following configuration:
  28  0000              //      - CSpect emulator V.2.12.30
  29  0000              //  ______________________________________________________________________
  30  0000              //
  31  0000              //  Z80 Registers usage map
  32  0000              //
  33  0000              //  AF
  34  0000              //  BC - Instruction Pointer: should be preserved during ROM/OS calls
  35  0000              //  DE - Top of Stack element. The second from top is pointed by SP
  36  0000              //  HL - Working
  37  0000              //
  38  0000              //  AF'- Sometime used for backup purpose
  39  0000              //  BC'- Not used
  40  0000              //  DE'- Not used
  41  0000              //  HL'- Not used: (saved at startup)
  42  0000              //
  43  0000              //  SP - Calculator Stack Pointer
  44  0000              //  IX - Inner interpreter "next" address pointer. This way jp (ix) is 2T-state faster than JP next
  45  0000              //  IY - (ZX System: must be preserved to interact with standard ROM)
  46  0000              //
  47  0000              //  ______________________________________________________________________
  48  0000              //
  49  0000              //  _________________
  50  0000              //
  51  0000              //  FORTH DEFINITIONS
  52  0000              //  _________________
  53  0000
  54  0000                              OPT     --zxnext
  55  0000
  56  0000              DEBUGGING       equ     0                       // this controls some debugging code in L0.asm
  57  0000              //ORIGIN          equ     $6400
  58  0000              ORIGIN          equ     $6380                   // for binary comparison
  59  0000              //ORIGIN          equ     $8400                   // for DeZog
  60  0000
  61  0000
  62  0000                              DEVICE  ZXSPECTRUMNEXT
  63  0000              //              DEVICE  NONE
  64  0000
  65  0000                              ORG     ORIGIN
  66  6380 00 00 00...                  ds 128
  67  6400
  68  6400              //  ______________________________________________________________________
  69  6400              //
  70  6400              //  Naming convention for Label vs Forth correspondance
  71  6400              //  Forth words are named as they are named for real with some exception to avoid assembler syntax errors.
  72  6400              //    - Leading "0" is converted into "Z_"
  73  6400              //    - Leading "(" is converted into "C_", closing bracket is omitted
  74  6400              //    - Leading numbers are converted in letters: ONE_  TWO_ etc.
  75  6400              //    - Question mark "?" is converted into "Q" or omitted if needed / useful.
  76  6400              //    - Plus sign "+" is converted in _PLUS or ADD_ depending.
  77  6400              //    - Minus sign "-" in L (for Line), MINUS or SUBTRACT depending
  78  6400              //    - Greater-Than sign ">" in _GREATER or TO_ depending
  79  6400              //    - Equal sign "=" is converted in EQUAL
  80  6400              //    - Less-Than sign "<" in _LESS or FROM_ (or TO_ again) depending
  81  6400              //    - Asterisk sign "*" is converted in _MUL or STAR
  82  6400              //    - Slash "/" is converted in _DIV or omitted if it is clear what it means
  83  6400              //    - Exclamation mark "!" is converted in STORE
  84  6400              //    - At-Sign "@" is converted in FETCH
  85  6400              //    - Words that collides with Assembler are normally suffixed with "_OP"
  86  6400
  87  6400                              include "system.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/system.asm
   1+ 6400              //  ______________________________________________________________________
   2+ 6400              //
   3+ 6400              //  system.asm
   4+ 6400              //  ______________________________________________________________________
   5+ 6400
   6+ 6400              // Registers:
   7+ 6400              //
   8+ 6400              //      BC: Instruction Pointer
   9+ 6400              //      DE:
  10+ 6400              //      HL: W register
  11+ 6400              //      SP: Calc stack Pointer
  12+ 6400              //      IX: Inner-Interpreter Address
  13+ 6400
  14+ 6400              //  ______________________________________________________________________
  15+ 6400              //
  16+ 6400              // ZX-Spectrum standard system variables
  17+ 6400              SCR_CT          equ     $5C8C                   // SCR-CT system variable
  18+ 6400              LASTK           equ     $5C08                   // LASTK system variable
  19+ 6400              BORDCR          equ     $5C48                   // BORDCR system variable
  20+ 6400              FLAGS2          equ     $5C6A                   // for caps-lock
  21+ 6400
  22+ 6400              //  ______________________________________________________________________
  23+ 6400              //
  24+ 6400              // Flag constants
  25+ 6400              TRUE_FLAG       equ     $FFFF
  26+ 6400              FALSE_FLAG      equ     $0000
  27+ 6400
  28+ 6400              //  ______________________________________________________________________
  29+ 6400              //
  30+ 6400              // Ascii char constants
  31+ 6400              NUL_CHAR        equ     $00
  32+ 6400              COMMA_CHAR      equ     $06
  33+ 6400              BACKSPACE_CHAR  equ     $08
  34+ 6400              CR_CHAR         equ     $0D
  35+ 6400              BLANK_CHAR      equ     $20
  36+ 6400              QUOTE_CHAR      equ     "'"
  37+ 6400              DQUOTE_CHAR     equ     '"'
  38+ 6400              UNDERSCORE_CHAR equ     $5F
  39+ 6400              SOLIDBLOCK_CHAR equ     $8F
  40+ 6400              HALFBLOCK_CHAR  equ     $8C
  41+ 6400              LC_A_CHAR       equ     $61                 // lower-case "a"
  42+ 6400              LC_Z_CHAR       equ     $7A                 // lower-case "z"
  43+ 6400
  44+ 6400
  45+ 6400              //  ______________________________________________________________________
  46+ 6400              //
  47+ 6400
  48+ 6400                              // emulate something like:  ld hl,rp
  49+ 6400              ldhlrp          macro
  50+ 6400 ~                            ld      hl,(RP_Pointer)
  51+ 6400                              endm
  52+ 6400
  53+ 6400                              // emulate something like:  ld rp,hl
  54+ 6400              ldrphl          macro
  55+ 6400 ~                            ld      (RP_Pointer),hl
  56+ 6400                              endm
  57+ 6400
  58+ 6400              //  ______________________________________________________________________
  59+ 6400              //
  60+ 6400              //  Inner interpreter next-address pointer. This is 2T-state faster than "jp address"
  61+ 6400              next            macro
  62+ 6400 ~                            jp      (ix)
  63+ 6400                              endm
  64+ 6400
  65+ 6400              psh1            macro
  66+ 6400 ~                            push    hl
  67+ 6400 ~                            jp      (ix)
  68+ 6400                              endm
  69+ 6400
  70+ 6400              psh2            macro
  71+ 6400 ~                            push    de
  72+ 6400 ~                            push    hl
  73+ 6400 ~                            jp      (ix)
  74+ 6400                              endm
  75+ 6400
  76+ 6400              //  ______________________________________________________________________
  77+ 6400              //
  78+ 6400              // Bit constants in length-byte
  79+ 6400
  80+ 6400              SMUDGE_BIT      equ     %00100000               // $20
  81+ 6400              IMMEDIATE_BIT   equ     %01000000               // $40
  82+ 6400              END_BIT         equ     %10000000               // $80
  83+ 6400
  84+ 6400
  85+ 6400              //  ______________________________________________________________________
  86+ 6400              //
  87+ 6400              //  To create Forth words using this (nice) Assembler, we have to use the two following
  88+ 6400              //  pointers
  89+ 6400              temp_NFA        defl    0
  90+ 6400              last_NFA        defl    0
  91+ 6400              len_NFA         defl    0
  92+ 6400
  93+ 6400              is_code         equ     0                   // so the direct machine-code starts at CFA
  94+ 6400              is_normal       equ     0                   // so the direct machine-code starts at CFA
  95+ 6400              is_immediate    equ     IMMEDIATE_BIT       // $40 - the definition is IMMEDIATE.
  96+ 6400
  97+ 6400              //  ______________________________________________________________________
  98+ 6400              //
  99+ 6400              //  Create a new "low-level" definition
 100+ 6400              //  This macro is used in the form  Create FORTH_NAME,n,"forth_name"
 101+ 6400              //  to create a new Forth Dictionary entry the same way Forth itself would do.
 102+ 6400              //  A word begins with a Length-Byte in range 1-31. Top 3 msb are used as flags
 103+ 6400              //  see SMUDGE_BIT and IMMEDIATE_BIT constant above.
 104+ 6400              //  It is followed by the Name of the word, i.e. a string expressed in 7-bit Ascii.
 105+ 6400              //  The last character of the Name must have the msb set to signal the end of it (END_BIT)
 106+ 6400              //  This macro acts much like the standard Forth definition CREATE
 107+ 6400
 108+ 6400              New_Def         macro   label, namec, runcode, bits
 109+ 6400 ~            temp_NFA        defl    $                   // save this NFA address to temp_NFA
 110+ 6400 ~
 111+ 6400 ~                            // dummy db directives used to calculate length of namec
 112+ 6400 ~                            db      namec
 113+ 6400 ~            len_NFA         defl    $ - temp_NFA
 114+ 6400 ~                            org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 115+ 6400 ~
 116+ 6400 ~                            db      len_NFA | END_BIT | bits  // The start of NFA must have msb set to signal the beginning of the sounted string
 117+ 6400 ~                            db      namec               // name string in 7-bit ascii, but
 118+ 6400 ~                            org     $-1                 // alter last byte of Name just above to set
 119+ 6400 ~                            db      {b $} | END_BIT     // msb as name end
 120+ 6400 ~
 121+ 6400 ~                            dw      last_NFA            // Link to previous definition Name
 122+ 6400 ~            label:          if runcode != 0 ; ok        // This is the start address of the direct jp(hl)
 123+ 6400 ~                            dw      runcode ; ok        // for primitive definitions  actual code
 124+ 6400 ~                            else
 125+ 6400 ~                            dw      $ + 2   ; ok        // is pointed by CFA
 126+ 6400 ~                            endif           ; ok        // for other definitions it "points" the correct handler
 127+ 6400 ~                            // Use of "; ok" to suppress "warning[fwdref]"
 128+ 6400 ~
 129+ 6400 ~            last_NFA        defl    temp_NFA            // keep track of NFA saved above
 130+ 6400                              endm
 131+ 6400
 132+ 6400              //  ______________________________________________________________________
 133+ 6400              //
 134+ 6400              // Create a "constant"
 135+ 6400              // The constant value is compiled in first PFA cell
 136+ 6400              Constant_Def    macro   label, namec, constant_value
 137+ 6400 ~                            New_Def  label, namec, Constant_Ptr, is_normal
 138+ 6400 ~                            dw      constant_value
 139+ 6400                              endm
 140+ 6400
 141+ 6400              //  ______________________________________________________________________
 142+ 6400              //
 143+ 6400              // Create a "variable"
 144+ 6400              // The when invoked, a variable returns a pointer, the address of first PFA cell
 145+ 6400              // this allow creation of "variables" which content is  of any length
 146+ 6400              Variable_Def    macro   label, namec, initial_value
 147+ 6400 ~                            New_Def  label, namec, Variable_Ptr, is_normal
 148+ 6400 ~                            dw      initial_value
 149+ 6400                              endm
 150+ 6400
 151+ 6400              //  ______________________________________________________________________
 152+ 6400              //
 153+ 6400              // Create a "user"
 154+ 6400              // It uses a single byte as offset to calculate the address of the variable
 155+ 6400              User_Def        macro   label, namec, offset_value
 156+ 6400 ~                            New_Def  label, namec, User_Ptr, is_normal
 157+ 6400 ~                            db      offset_value
 158+ 6400                              endm
 159+ 6400
 160+ 6400              //  ______________________________________________________________________
 161+ 6400              //
 162+ 6400              // Create a "colon-definition"
 163+ 6400              // The CFA contains a small routine i.e. "call Enter_Ptr".
 164+ 6400              // The PFA, three bytes later, contains the actual Forth definition
 165+ 6400              Colon_Def       macro   label, namec, bits
 166+ 6400 ~                            New_Def  label, namec, Enter_Ptr, bits ; ok
 167+ 6400                              endm
 168+ 6400
 169+ 6400              //  ______________________________________________________________________
 170+ 6400              //
 171+ 6400
 172+ 6400              S0_system:      equ     $D0E8               // Address of top of Calc Stack
 173+ 6400              TIB_system      equ     $D0E8               // TIB grows upwards, Return-Stack downward.
 174+ 6400              R0_system:      equ     $D188               // Address of top of Return Stack. This is S0 + $00A0
 175+ 6400              USER_system:    equ     $D188               // User variables zone.
 176+ 6400              FIRST_system:   equ     $D1E4               // Address of first BUFFER
 177+ 6400              LIMIT_system:   equ     $E000               // Address of first byte beyond last BUFFER
 178+ 6400
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/system.asm
  88  6400                              include "L0.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L0.asm
   1+ 6400              //  ______________________________________________________________________
   2+ 6400              //
   3+ 6400              //  L0.asm
   4+ 6400              //
   5+ 6400              //  Origin-Area and Level-0 definitions
   6+ 6400              //  ______________________________________________________________________
   7+ 6400
   8+ 6400
   9+ 6400              Cold_origin:
  10+ 6400 A7                           and     a
  11+ 6401 C3 3F 79                     jp      ColdRoutine
  12+ 6404              Warm_origin:
  13+ 6404 37                           scf
  14+ 6405 C3 3F 79                     jp      WarmRoutine
  15+ 6408
  16+ 6408              // +008
  17+ 6408 E8 D0        SP_Basic:       dw      $D0E8               // These are bits with some "standard" meaning... 0101
  18+ 640A
  19+ 640A              // +00A
  20+ 640A 00 0E                        dw      $0E00
  21+ 640C
  22+ 640C              // +00C
  23+ 640C 5F 86        Latest_origin:  dw      Latest_Definition   // Latest word (used in Cold_Start)
  24+ 640E
  25+ 640E              // +00E
  26+ 640E 0C 00        DEL_Char_Ptr:   dw      $000C               // This is the characther used as "Back-Space"
  27+ 6410
  28+ 6410              // +010
  29+ 6410 50 B2        CPU_Id          dw      $B250               // Z80 expressed in base 36
  30+ 6412
  31+ 6412              // +012
  32+ 6412 E8 D0        S0_origin:      dw      S0_system
  33+ 6414 88 D1        R0_origin:      dw      R0_system
  34+ 6416 E8 D0        TIB_origin:     dw      TIB_system
  35+ 6418 1F 00        WIDTH_origin:   dw      31
  36+ 641A 01 00        WARNING_origin: dw      1
  37+ 641C 84 86        FENCE_origin:   dw      Fence_Word
  38+ 641E 84 86        DP_origin       dw      Fence_Word
  39+ 6420 55 78        VOCLINK_origin: dw      Voclink_Ptr
  40+ 6422 E4 D1                        dw      FIRST_system
  41+ 6424 00 E0                        dw      LIMIT_system
  42+ 6426
  43+ 6426              // +026
  44+ 6426 8F           Block_Face:     db      SOLIDBLOCK_CHAR     // Caps-Lock   Cursor face
  45+ 6427 8C           Half_Face:      db      HALFBLOCK_CHAR      // Caps-unlock Cursor face
  46+ 6428 5F           Underscore_Face:db      UNDERSCORE_CHAR     // Underscore  Cursor face
  47+ 6429 00                           db      0
  48+ 642A
  49+ 642A              // +02A
  50+ 642A 00 00        IX_Echo:        dw      0                   // Echo IX after NextOS call
  51+ 642C
  52+ 642C              // +02C
  53+ 642C 00 00        SP_Saved:       dw      0                   // Saved SP dufing NextOS call
  54+ 642E
  55+ 642E              // +02E
  56+ 642E 88 D1        USER_Pointer:   dw      USER_system
  57+ 6430
  58+ 6430              // +030
  59+ 6430 88 D1        RP_Pointer:     dw      R0_system
  60+ 6432
  61+ 6432              // +32
  62+ 6432              // SP_Basic        dw      0
  63+ 6432
  64+ 6432
  65+ 6432              //  ______________________________________________________________________
  66+ 6432
  67+ 6432              // from this point we can use LDHLRP and LDRPHL Assembler macros
  68+ 6432              // instead of their equivalent long sequences.
  69+ 6432
  70+ 6432              //  ______________________________________________________________________
  71+ 6432
  72+ 6432              // address for "next" - inner interpreter
  73+ 6432              // This address must always be pointed by IX
  74+ 6432              // "next" macro simply does a  jp(ix)  instruction
  75+ 6432
  76+ 6432 D5           Psh2_Ptr:       push    de
  77+ 6433 E5           Psh1_Ptr:       push    hl
  78+ 6434
  79+ 6434              Next_Ptr:       // This address must always be kept in IX: "next" relies on that
  80+ 6434
  81+ 6434                              if DEBUGGING != 0
  82+ 6434 ~                            ld      hl, Next_Breakpoint_1
  83+ 6434 ~                            and     a
  84+ 6434 ~                            sbc     hl, bc
  85+ 6434 ~                            jr      nz, Next_Continue
  86+ 6434 ~                            nop // This is where you have to put a real breakpoint to intercept BC values...
  87+ 6434                              endif
  88+ 6434
  89+ 6434              Next_Continue:
  90+ 6434 0A                           ld      a, (bc)
  91+ 6435 03                           inc     bc
  92+ 6436 6F                           ld      l, a
  93+ 6437 0A                           ld      a, (bc)
  94+ 6438 03                           inc     bc
  95+ 6439 67                           ld      h, a                // hl contains a CFA (xt) of word being executed
  96+ 643A
  97+ 643A              // Execute xt i.e. CFA held in HL
  98+ 643A              Exec_Ptr:
  99+ 643A 5E                           ld      e, (hl)
 100+ 643B 23                           inc     hl
 101+ 643C 56                           ld      d, (hl)
 102+ 643D EB                           ex      de, hl
 103+ 643E E9                           jp      (hl)                // and jump to it
 104+ 643F                                                          // there you'll find the real code or a CALL to a ;code part
 105+ 643F
 106+ 643F              //  ______________________________________________________________________
 107+ 643F              //
 108+ 643F              // lit          -- x
 109+ 643F              // puts on top of stack the value of the following word.
 110+ 643F              // it is compiled in colon definition before a literal number
 111+ 643F
 112+ 643F                              New_Def  LIT, "LIT", is_code, is_normal
 112+ 643F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 112+ 643F             >
 112+ 643F             >                // dummy db directives used to calculate length of namec
 112+ 643F 4C 49 54    >                db      "LIT"
 112+ 6442             >len_NFA         defl    $ - temp_NFA
 112+ 6442             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 112+ 643F             >
 112+ 643F 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 112+ 6440 4C 49 54    >                db      "LIT"               // name string in 7-bit ascii, but
 112+ 6443             >                org     $-1                 // alter last byte of Name just above to set
 112+ 6442 D4          >                db      {b $} | END_BIT     // msb as name end
 112+ 6443             >
 112+ 6443 00 00       >                dw      last_NFA            // Link to previous definition Name
 112+ 6445             >LIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 112+ 6445 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 112+ 6445             >                else
 112+ 6445 47 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 112+ 6447             >                endif           ; ok        // for other definitions it "points" the correct handler
 112+ 6447             >                // Use of "; ok" to suppress "warning[fwdref]"
 112+ 6447             >
 112+ 6447             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 113+ 6447
 114+ 6447 0A                           ld      a, (bc)
 115+ 6448 03                           inc     bc
 116+ 6449 6F                           ld      l, a
 117+ 644A 0A                           ld      a, (bc)
 118+ 644B 03                           inc     bc
 119+ 644C 67                           ld      h, a
 120+ 644D                              psh1
 120+ 644D E5          >                push    hl
 120+ 644E DD E9       >                jp      (ix)
 121+ 6450
 122+ 6450              //  ______________________________________________________________________
 123+ 6450              //
 124+ 6450              // execute      i*x xt -- j*x
 125+ 6450              // execution token. usually xt is given by CFA
 126+ 6450
 127+ 6450                              New_Def  EXECUTE, "EXECUTE", is_code, is_normal
 127+ 6450             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 127+ 6450             >
 127+ 6450             >                // dummy db directives used to calculate length of namec
 127+ 6450 45 58 45 43 >                db      "EXECUTE"
 127+ 6454 55 54 45    >
 127+ 6457             >len_NFA         defl    $ - temp_NFA
 127+ 6457             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 127+ 6450             >
 127+ 6450 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 127+ 6451 45 58 45 43 >                db      "EXECUTE"               // name string in 7-bit ascii, but
 127+ 6455 55 54 45    >
 127+ 6458             >                org     $-1                 // alter last byte of Name just above to set
 127+ 6457 C5          >                db      {b $} | END_BIT     // msb as name end
 127+ 6458             >
 127+ 6458 3F 64       >                dw      last_NFA            // Link to previous definition Name
 127+ 645A             >EXECUTE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 127+ 645A ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 127+ 645A             >                else
 127+ 645A 5C 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 127+ 645C             >                endif           ; ok        // for other definitions it "points" the correct handler
 127+ 645C             >                // Use of "; ok" to suppress "warning[fwdref]"
 127+ 645C             >
 127+ 645C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 128+ 645C E1                           pop     hl
 129+ 645D 18 DB                        jr      Exec_Ptr
 130+ 645F
 131+ 645F
 132+ 645F              //  ______________________________________________________________________
 133+ 645F              //
 134+ 645F              // branch       --
 135+ 645F              // unconditional branch in colon definition using the following cell as an offset from current IP value
 136+ 645F              // compiled by ELSE, AGAIN and some other immediate words
 137+ 645F
 138+ 645F                              New_Def BRANCH, "BRANCH", is_code, is_normal
 138+ 645F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 138+ 645F             >
 138+ 645F             >                // dummy db directives used to calculate length of namec
 138+ 645F 42 52 41 4E >                db      "BRANCH"
 138+ 6463 43 48       >
 138+ 6465             >len_NFA         defl    $ - temp_NFA
 138+ 6465             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 138+ 645F             >
 138+ 645F 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 138+ 6460 42 52 41 4E >                db      "BRANCH"               // name string in 7-bit ascii, but
 138+ 6464 43 48       >
 138+ 6466             >                org     $-1                 // alter last byte of Name just above to set
 138+ 6465 C8          >                db      {b $} | END_BIT     // msb as name end
 138+ 6466             >
 138+ 6466 50 64       >                dw      last_NFA            // Link to previous definition Name
 138+ 6468             >BRANCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 138+ 6468 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 138+ 6468             >                else
 138+ 6468 6A 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 138+ 646A             >                endif           ; ok        // for other definitions it "points" the correct handler
 138+ 646A             >                // Use of "; ok" to suppress "warning[fwdref]"
 138+ 646A             >
 138+ 646A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 139+ 646A              Branch_Ptr:
 140+ 646A 60                           ld      h, b
 141+ 646B 69                           ld      l, c
 142+ 646C 5E                           ld      e, (hl)
 143+ 646D 23                           inc     hl
 144+ 646E 56                           ld      d, (hl)
 145+ 646F 2B                           dec     hl                  // offset is calculated from current IP
 146+ 6470 19                           add     hl, de
 147+ 6471 4D                           ld      c, l
 148+ 6472 44                           ld      b, h
 149+ 6473                              next
 149+ 6473 DD E9       >                jp      (ix)
 150+ 6475
 151+ 6475
 152+ 6475              //  ______________________________________________________________________
 153+ 6475              //
 154+ 6475              // 0branch      f --
 155+ 6475              // conditional branch if the top-of-stack is ZERO or FALSE.
 156+ 6475              // compiled by IF, UNTIL and some other immediate words
 157+ 6475
 158+ 6475                              New_Def ZBRANCH, "0BRANCH", is_code, is_normal
 158+ 6475             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 158+ 6475             >
 158+ 6475             >                // dummy db directives used to calculate length of namec
 158+ 6475 30 42 52 41 >                db      "0BRANCH"
 158+ 6479 4E 43 48    >
 158+ 647C             >len_NFA         defl    $ - temp_NFA
 158+ 647C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 158+ 6475             >
 158+ 6475 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 158+ 6476 30 42 52 41 >                db      "0BRANCH"               // name string in 7-bit ascii, but
 158+ 647A 4E 43 48    >
 158+ 647D             >                org     $-1                 // alter last byte of Name just above to set
 158+ 647C C8          >                db      {b $} | END_BIT     // msb as name end
 158+ 647D             >
 158+ 647D 5F 64       >                dw      last_NFA            // Link to previous definition Name
 158+ 647F             >ZBRANCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 158+ 647F ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 158+ 647F             >                else
 158+ 647F 81 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 158+ 6481             >                endif           ; ok        // for other definitions it "points" the correct handler
 158+ 6481             >                // Use of "; ok" to suppress "warning[fwdref]"
 158+ 6481             >
 158+ 6481             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 159+ 6481              ZBranch_Ptr:
 160+ 6481 E1                           pop     hl
 161+ 6482 7D                           ld      a, l
 162+ 6483 B4                           or      h
 163+ 6484 CA 6A 64                     jp      z, Branch_Ptr
 164+ 6487 03                           inc     bc                  // if not branch, skip offset cell.
 165+ 6488 03                           inc     bc
 166+ 6489                              next
 166+ 6489 DD E9       >                jp      (ix)
 167+ 648B
 168+ 648B              //  ______________________________________________________________________
 169+ 648B              //
 170+ 648B              // (loop)       --
 171+ 648B              // compiled by +LOOP. it uses the top two values of return-stack to
 172+ 648B              // keep track of index and limit
 173+ 648B                              New_Def C_LOOP, "(LOOP)", is_code, is_normal
 173+ 648B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 173+ 648B             >
 173+ 648B             >                // dummy db directives used to calculate length of namec
 173+ 648B 28 4C 4F 4F >                db      "(LOOP)"
 173+ 648F 50 29       >
 173+ 6491             >len_NFA         defl    $ - temp_NFA
 173+ 6491             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 173+ 648B             >
 173+ 648B 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 173+ 648C 28 4C 4F 4F >                db      "(LOOP)"               // name string in 7-bit ascii, but
 173+ 6490 50 29       >
 173+ 6492             >                org     $-1                 // alter last byte of Name just above to set
 173+ 6491 A9          >                db      {b $} | END_BIT     // msb as name end
 173+ 6492             >
 173+ 6492 75 64       >                dw      last_NFA            // Link to previous definition Name
 173+ 6494             >C_LOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 173+ 6494 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 173+ 6494             >                else
 173+ 6494 96 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 173+ 6496             >                endif           ; ok        // for other definitions it "points" the correct handler
 173+ 6496             >                // Use of "; ok" to suppress "warning[fwdref]"
 173+ 6496             >
 173+ 6496             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 174+ 6496
 175+ 6496
 176+ 6496 11 01 00                     ld      de, 1               // bc contains increment of 1
 177+ 6499
 178+ 6499
 179+ 6499
 180+ 6499
 181+ 6499
 182+ 6499
 183+ 6499
 184+ 6499
 185+ 6499              Loop_Ptr:
 186+ 6499                              ldhlrp                      // ld hl,rp macro 30h +Origin
 186+ 6499 2A 30 64    >                ld      hl,(RP_Pointer)
 187+ 649C 7E                           ld      a, (hl)             // hl points to loop-index, add increment de to it.
 188+ 649D 83                           add     e
 189+ 649E 77                           ld      (hl), a
 190+ 649F 5F                           ld      e, a
 191+ 64A0 23                           inc     hl
 192+ 64A1 7E                           ld      a, (hl)
 193+ 64A2 8A                           adc     d
 194+ 64A3 77                           ld      (hl),a
 195+ 64A4 23                           inc     hl                  // hl now points to loop-limit
 196+ 64A5 CB 7A                        bit     7, d                // keep increment-sign just before overwriting d
 197+ 64A7 57                           ld      d, a
 198+ 64A8 20 07                        jr      nz, Loop_NegativeIncrement
 199+ 64AA
 200+ 64AA 7B                               ld      a, e
 201+ 64AB 96                               sub     (hl)
 202+ 64AC 7A                               ld      a, d
 203+ 64AD 23                               inc     hl
 204+ 64AE 9E                               sbc     (hl)
 205+ 64AF 18 05                        jr      Loop_Endif              // else
 206+ 64B1              Loop_NegativeIncrement:
 207+ 64B1 7E                               ld      a, (hl)
 208+ 64B2 93                               sub     e
 209+ 64B3 23                               inc     hl
 210+ 64B4 7E                               ld      a, (hl)
 211+ 64B5 9A                               sbc     d
 212+ 64B6              Loop_Endif:
 213+ 64B6
 214+ 64B6 FA 6A 64                     jp      m, Branch_Ptr       // perform branch consuming following cell
 215+ 64B9
 216+ 64B9 23                           inc     hl
 217+ 64BA                              ldrphl                      // ld rp,hl macro 30h +Origin
 217+ 64BA 22 30 64    >                ld      (RP_Pointer),hl
 218+ 64BD
 219+ 64BD 03                           inc     bc                  // skip branch-style offset
 220+ 64BE 03                           inc     bc
 221+ 64BF                              next
 221+ 64BF DD E9       >                jp      (ix)
 222+ 64C1
 223+ 64C1              //  ______________________________________________________________________
 224+ 64C1              //
 225+ 64C1              // (+loop)       n --
 226+ 64C1              // same as (LOOP) but index is incremented by n (instead of just 1)
 227+ 64C1              // compiled by +LOOP.
 228+ 64C1                              New_Def C_PLOOP, "(+LOOP)", is_code, is_normal
 228+ 64C1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 228+ 64C1             >
 228+ 64C1             >                // dummy db directives used to calculate length of namec
 228+ 64C1 28 2B 4C 4F >                db      "(+LOOP)"
 228+ 64C5 4F 50 29    >
 228+ 64C8             >len_NFA         defl    $ - temp_NFA
 228+ 64C8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 228+ 64C1             >
 228+ 64C1 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 228+ 64C2 28 2B 4C 4F >                db      "(+LOOP)"               // name string in 7-bit ascii, but
 228+ 64C6 4F 50 29    >
 228+ 64C9             >                org     $-1                 // alter last byte of Name just above to set
 228+ 64C8 A9          >                db      {b $} | END_BIT     // msb as name end
 228+ 64C9             >
 228+ 64C9 8B 64       >                dw      last_NFA            // Link to previous definition Name
 228+ 64CB             >C_PLOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 228+ 64CB ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 228+ 64CB             >                else
 228+ 64CB CD 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 228+ 64CD             >                endif           ; ok        // for other definitions it "points" the correct handler
 228+ 64CD             >                // Use of "; ok" to suppress "warning[fwdref]"
 228+ 64CD             >
 228+ 64CD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 229+ 64CD D1                           pop     de
 230+ 64CE C3 99 64                     jp      Loop_Ptr
 231+ 64D1
 232+ 64D1              //  ______________________________________________________________________
 233+ 64D1              //
 234+ 64D1              // (?do)        lim ind --
 235+ 64D1              // compiled by ?DO to make a loop checking for lim == ind first
 236+ 64D1              // at run-time (?DO) must be followed by a BRANCH offset
 237+ 64D1              // used to skip the loop if lim == ind
 238+ 64D1                              New_Def C_Q_DO, "(?DO)", is_code, is_normal
 238+ 64D1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 238+ 64D1             >
 238+ 64D1             >                // dummy db directives used to calculate length of namec
 238+ 64D1 28 3F 44 4F >                db      "(?DO)"
 238+ 64D5 29          >
 238+ 64D6             >len_NFA         defl    $ - temp_NFA
 238+ 64D6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 238+ 64D1             >
 238+ 64D1 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 238+ 64D2 28 3F 44 4F >                db      "(?DO)"               // name string in 7-bit ascii, but
 238+ 64D6 29          >
 238+ 64D7             >                org     $-1                 // alter last byte of Name just above to set
 238+ 64D6 A9          >                db      {b $} | END_BIT     // msb as name end
 238+ 64D7             >
 238+ 64D7 C1 64       >                dw      last_NFA            // Link to previous definition Name
 238+ 64D9             >C_Q_DO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 238+ 64D9 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 238+ 64D9             >                else
 238+ 64D9 DB 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 238+ 64DB             >                endif           ; ok        // for other definitions it "points" the correct handler
 238+ 64DB             >                // Use of "; ok" to suppress "warning[fwdref]"
 238+ 64DB             >
 238+ 64DB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 239+ 64DB D1                           pop     de                  // de has the index
 240+ 64DC E1                           pop     hl                  // hl has the limit
 241+ 64DD E5                           push    hl
 242+ 64DE D5                           push    de
 243+ 64DF A7                           and     a                   // reset carry flag
 244+ 64E0 ED 52                        sbc     hl, de              // compute limit - index
 245+ 64E2 20 05                        jr      nz, Do_Ptr          // if zero then don't even begin loop
 246+ 64E4 D1                               pop     de
 247+ 64E5 E1                               pop     hl
 248+ 64E6
 249+ 64E6 C3 6A 64                         jp      Branch_Ptr          // perform branch consuming following cell
 250+ 64E9              Do_Ptr:
 251+ 64E9                              ldhlrp                      // prepare RP
 251+ 64E9 2A 30 64    >                ld      hl,(RP_Pointer)
 252+ 64EC 2B                           dec     hl
 253+ 64ED 2B                           dec     hl
 254+ 64EE 2B                           dec     hl
 255+ 64EF 2B                           dec     hl
 256+ 64F0                              ldrphl
 256+ 64F0 22 30 64    >                ld      (RP_Pointer),hl
 257+ 64F3
 258+ 64F3                              // store index as top RP
 259+ 64F3 D1                           pop     de
 260+ 64F4 73                           ld      (hl), e
 261+ 64F5 23                           inc     hl
 262+ 64F6 72                           ld      (hl), d
 263+ 64F7 23                           inc     hl
 264+ 64F8                              // stores lim as second from top RP
 265+ 64F8 D1                           pop     de
 266+ 64F9 73                           ld      (hl), e
 267+ 64FA 23                           inc     hl
 268+ 64FB 72                           ld      (hl), d
 269+ 64FC
 270+ 64FC                              // skip branch-style offseet
 271+ 64FC 03                           inc     bc
 272+ 64FD 03                           inc     bc
 273+ 64FE                              next
 273+ 64FE DD E9       >                jp      (ix)
 274+ 6500
 275+ 6500              //  ______________________________________________________________________
 276+ 6500              //
 277+ 6500              // (do)        lim ind --
 278+ 6500              // compiled by DO to make a loop checking for lim == ind first
 279+ 6500              // this is a simpler version of (?DO)
 280+ 6500                              New_Def C_DO, "(DO)", is_code, is_normal
 280+ 6500             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 280+ 6500             >
 280+ 6500             >                // dummy db directives used to calculate length of namec
 280+ 6500 28 44 4F 29 >                db      "(DO)"
 280+ 6504             >len_NFA         defl    $ - temp_NFA
 280+ 6504             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 280+ 6500             >
 280+ 6500 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 280+ 6501 28 44 4F 29 >                db      "(DO)"               // name string in 7-bit ascii, but
 280+ 6505             >                org     $-1                 // alter last byte of Name just above to set
 280+ 6504 A9          >                db      {b $} | END_BIT     // msb as name end
 280+ 6505             >
 280+ 6505 D1 64       >                dw      last_NFA            // Link to previous definition Name
 280+ 6507             >C_DO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 280+ 6507 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 280+ 6507             >                else
 280+ 6507 09 65       >                dw      $ + 2   ; ok        // is pointed by CFA
 280+ 6509             >                endif           ; ok        // for other definitions it "points" the correct handler
 280+ 6509             >                // Use of "; ok" to suppress "warning[fwdref]"
 280+ 6509             >
 280+ 6509             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 281+ 6509 0B                           dec     bc                  // prepare IP beforehand
 282+ 650A 0B                           dec     bc                  // to balance the two final inc bc in (?do)
 283+ 650B C3 E9 64                     jp      Do_Ptr
 284+ 650E
 285+ 650E              //  ______________________________________________________________________
 286+ 650E              //
 287+ 650E              // i            -- n
 288+ 650E              // used between DO and LOOP or between DO e +LOOP to copy on top of stack
 289+ 650E              // the current value of the index-loop
 290+ 650E                              New_Def I, "I", is_code, is_normal
 290+ 650E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 290+ 650E             >
 290+ 650E             >                // dummy db directives used to calculate length of namec
 290+ 650E 49          >                db      "I"
 290+ 650F             >len_NFA         defl    $ - temp_NFA
 290+ 650F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 290+ 650E             >
 290+ 650E 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 290+ 650F 49          >                db      "I"               // name string in 7-bit ascii, but
 290+ 6510             >                org     $-1                 // alter last byte of Name just above to set
 290+ 650F C9          >                db      {b $} | END_BIT     // msb as name end
 290+ 6510             >
 290+ 6510 00 65       >                dw      last_NFA            // Link to previous definition Name
 290+ 6512             >I:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 290+ 6512 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 290+ 6512             >                else
 290+ 6512 14 65       >                dw      $ + 2   ; ok        // is pointed by CFA
 290+ 6514             >                endif           ; ok        // for other definitions it "points" the correct handler
 290+ 6514             >                // Use of "; ok" to suppress "warning[fwdref]"
 290+ 6514             >
 290+ 6514             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 291+ 6514              I_Ptr:
 292+ 6514
 293+ 6514                              ldhlrp
 293+ 6514 2A 30 64    >                ld      hl,(RP_Pointer)
 294+ 6517 5E                           ld      e, (hl)
 295+ 6518 23                           inc     hl
 296+ 6519 56                           ld      d, (hl)
 297+ 651A D5                           push    de
 298+ 651B                              next
 298+ 651B DD E9       >                jp      (ix)
 299+ 651D
 300+ 651D              //  ______________________________________________________________________
 301+ 651D              //
 302+ 651D              // digit        c n -- u 1  |  0
 303+ 651D              // convert a character c using base n
 304+ 651D              // returns a unsigned number and a true flag
 305+ 651D              // or just a false flag if the conversion fails
 306+ 651D                              New_Def DIGIT, "DIGIT", is_code, is_normal
 306+ 651D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 306+ 651D             >
 306+ 651D             >                // dummy db directives used to calculate length of namec
 306+ 651D 44 49 47 49 >                db      "DIGIT"
 306+ 6521 54          >
 306+ 6522             >len_NFA         defl    $ - temp_NFA
 306+ 6522             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 306+ 651D             >
 306+ 651D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 306+ 651E 44 49 47 49 >                db      "DIGIT"               // name string in 7-bit ascii, but
 306+ 6522 54          >
 306+ 6523             >                org     $-1                 // alter last byte of Name just above to set
 306+ 6522 D4          >                db      {b $} | END_BIT     // msb as name end
 306+ 6523             >
 306+ 6523 0E 65       >                dw      last_NFA            // Link to previous definition Name
 306+ 6525             >DIGIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 306+ 6525 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 306+ 6525             >                else
 306+ 6525 27 65       >                dw      $ + 2   ; ok        // is pointed by CFA
 306+ 6527             >                endif           ; ok        // for other definitions it "points" the correct handler
 306+ 6527             >                // Use of "; ok" to suppress "warning[fwdref]"
 306+ 6527             >
 306+ 6527             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 307+ 6527 E1                           pop     hl                  // l has the base
 308+ 6528 D1                           pop     de                  // e has the digit
 309+ 6529 7B                           ld      a, e
 310+ 652A FE 60                        cp      $60                 // check if lowercase
 311+ 652C 38 02                        jr      c, Digit_Uppercase
 312+ 652E D6 20                            sub     $20                 // quick'n'dirty uppercase
 313+ 6530              Digit_Uppercase:
 314+ 6530 D6 30                        sub     $30
 315+ 6532 38 15                        jr      c, Digit_Fail       // fail when character < "0"
 316+ 6534 FE 0A                            cp      $0A
 317+ 6536 38 06                            jr      c, Digit_Decimal    // perhaps is not decimal
 318+ 6538 D6 07                                sub     7                   // try hex and subtract 7
 319+ 653A FE 0A                                cp      $0A
 320+ 653C 38 0B                                jr      c,  Digit_Fail      // it is not hex !
 321+ 653E
 322+ 653E              Digit_Decimal:
 323+ 653E                              // compare digit
 324+ 653E BD                           cp      l                   // compare with base
 325+ 653F
 326+ 653F 30 08                        jr      nc, Digit_Fail      // fail when greater than base
 327+ 6541 5F                               ld      e, a                // digit is returned as second from TOS
 328+ 6542 21 01 00                         ld      hl, 1
 329+ 6545
 330+ 6545                                  psh2
 330+ 6545 D5          >                push    de
 330+ 6546 E5          >                push    hl
 330+ 6547 DD E9       >                jp      (ix)
 331+ 6549              Digit_Fail:
 332+ 6549 21 00 00                     ld      hl, 0
 333+ 654C                              psh1
 333+ 654C E5          >                push    hl
 333+ 654D DD E9       >                jp      (ix)
 334+ 654F
 335+ 654F              //  ______________________________________________________________________
 336+ 654F              //
 337+ 654F              //  parametric uppercase routine
 338+ 654F              //  depending on the following op-code the routine can be by-passed
 339+ 654F              //  changing the behaviour of some callers.
 340+ 654F              //  If it is "ret" then the system is Case-Sensitive
 341+ 654F              //  If it is "Nop" then the system is Case-Insensitive
 342+ 654F              //  Only A register is touched.
 343+ 654F 00           Case_Sensitive: nop                         // Default is case-insensitive.
 344+ 6550              Case_Upper:
 345+ 6550 FE 61                        cp      LC_A_CHAR           // lower-case "a"
 346+ 6552 D8                           ret     c                   // no change if A < "a"
 347+ 6553 FE 7B                        cp      LC_Z_CHAR + 1       // lower-case "z" + 1
 348+ 6555 D0                           ret     nc                  // no change if A > "z"
 349+ 6556 D6 20                        sub     $20                 // Make uppercase if A in ["a".."z"]
 350+ 6558 C9                           ret
 351+ 6559
 352+ 6559              //  ______________________________________________________________________
 353+ 6559              //
 354+ 6559              //  caseon      --
 355+ 6559              // set system case-sensitivity on
 356+ 6559              // it patches a RET/NOP at the beginning of the uppercase-routine
 357+ 6559                              New_Def CASEON, "CASEON", is_code, is_normal
 357+ 6559             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 357+ 6559             >
 357+ 6559             >                // dummy db directives used to calculate length of namec
 357+ 6559 43 41 53 45 >                db      "CASEON"
 357+ 655D 4F 4E       >
 357+ 655F             >len_NFA         defl    $ - temp_NFA
 357+ 655F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 357+ 6559             >
 357+ 6559 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 357+ 655A 43 41 53 45 >                db      "CASEON"               // name string in 7-bit ascii, but
 357+ 655E 4F 4E       >
 357+ 6560             >                org     $-1                 // alter last byte of Name just above to set
 357+ 655F CE          >                db      {b $} | END_BIT     // msb as name end
 357+ 6560             >
 357+ 6560 1D 65       >                dw      last_NFA            // Link to previous definition Name
 357+ 6562             >CASEON:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 357+ 6562 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 357+ 6562             >                else
 357+ 6562 64 65       >                dw      $ + 2   ; ok        // is pointed by CFA
 357+ 6564             >                endif           ; ok        // for other definitions it "points" the correct handler
 357+ 6564             >                // Use of "; ok" to suppress "warning[fwdref]"
 357+ 6564             >
 357+ 6564             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 358+ 6564 3E C9                        ld      a, $C9              // "ret"
 359+ 6566 32 4F 65                     ld      (Case_Sensitive), a
 360+ 6569                              next
 360+ 6569 DD E9       >                jp      (ix)
 361+ 656B
 362+ 656B              //  ______________________________________________________________________
 363+ 656B              //
 364+ 656B              //  caseoff     --
 365+ 656B              // set system case-sensitivity on
 366+ 656B              // it patches a RET/NOP at the beginning of the uppercase-routine
 367+ 656B                              New_Def CASEOFF, "CASEOFF", is_code, is_normal
 367+ 656B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 367+ 656B             >
 367+ 656B             >                // dummy db directives used to calculate length of namec
 367+ 656B 43 41 53 45 >                db      "CASEOFF"
 367+ 656F 4F 46 46    >
 367+ 6572             >len_NFA         defl    $ - temp_NFA
 367+ 6572             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 367+ 656B             >
 367+ 656B 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 367+ 656C 43 41 53 45 >                db      "CASEOFF"               // name string in 7-bit ascii, but
 367+ 6570 4F 46 46    >
 367+ 6573             >                org     $-1                 // alter last byte of Name just above to set
 367+ 6572 C6          >                db      {b $} | END_BIT     // msb as name end
 367+ 6573             >
 367+ 6573 59 65       >                dw      last_NFA            // Link to previous definition Name
 367+ 6575             >CASEOFF:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 367+ 6575 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 367+ 6575             >                else
 367+ 6575 77 65       >                dw      $ + 2   ; ok        // is pointed by CFA
 367+ 6577             >                endif           ; ok        // for other definitions it "points" the correct handler
 367+ 6577             >                // Use of "; ok" to suppress "warning[fwdref]"
 367+ 6577             >
 367+ 6577             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 368+ 6577 3E 00                        ld      a, $00              // "nop"
 369+ 6579 32 4F 65                     ld      (Case_Sensitive), a
 370+ 657C                              next
 370+ 657C DD E9       >                jp      (ix)
 371+ 657E
 372+ 657E              //  ______________________________________________________________________
 373+ 657E              //
 374+ 657E              //  upper       c1 -- c1 | c2
 375+ 657E              // character on top of stack is forced to Uppercase.
 376+ 657E                              New_Def UPPER, "UPPER", is_code, is_normal
 376+ 657E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 376+ 657E             >
 376+ 657E             >                // dummy db directives used to calculate length of namec
 376+ 657E 55 50 50 45 >                db      "UPPER"
 376+ 6582 52          >
 376+ 6583             >len_NFA         defl    $ - temp_NFA
 376+ 6583             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 376+ 657E             >
 376+ 657E 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 376+ 657F 55 50 50 45 >                db      "UPPER"               // name string in 7-bit ascii, but
 376+ 6583 52          >
 376+ 6584             >                org     $-1                 // alter last byte of Name just above to set
 376+ 6583 D2          >                db      {b $} | END_BIT     // msb as name end
 376+ 6584             >
 376+ 6584 6B 65       >                dw      last_NFA            // Link to previous definition Name
 376+ 6586             >UPPER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 376+ 6586 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 376+ 6586             >                else
 376+ 6586 88 65       >                dw      $ + 2   ; ok        // is pointed by CFA
 376+ 6588             >                endif           ; ok        // for other definitions it "points" the correct handler
 376+ 6588             >                // Use of "; ok" to suppress "warning[fwdref]"
 376+ 6588             >
 376+ 6588             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 377+ 6588 E1                           pop     hl
 378+ 6589 7D                           ld      a, l
 379+ 658A CD 50 65                     call    Case_Upper
 380+ 658D 6F                           ld      l, a
 381+ 658E
 382+ 658E                              psh1
 382+ 658E E5          >                push    hl
 382+ 658F DD E9       >                jp      (ix)
 383+ 6591
 384+ 6591              //  ______________________________________________________________________
 385+ 6591              //
 386+ 6591              // (find)       addr voc -- addr 0 | cfa b 1
 387+ 6591              // vocabulary search,
 388+ 6591              // - voc is starting word's NFA
 389+ 6591              // - addr is the string to be searched for
 390+ 6591              // On success, it returns the CFA of found word, the first NFA byte
 391+ 6591              // (which contains length and some flags) and a true flag.
 392+ 6591              // On fail, a false flag  (no more: leaves addr unchanged)
 393+ 6591                              New_Def C_FIND, "(FIND)", is_code, is_normal
 393+ 6591             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 393+ 6591             >
 393+ 6591             >                // dummy db directives used to calculate length of namec
 393+ 6591 28 46 49 4E >                db      "(FIND)"
 393+ 6595 44 29       >
 393+ 6597             >len_NFA         defl    $ - temp_NFA
 393+ 6597             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 393+ 6591             >
 393+ 6591 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 393+ 6592 28 46 49 4E >                db      "(FIND)"               // name string in 7-bit ascii, but
 393+ 6596 44 29       >
 393+ 6598             >                org     $-1                 // alter last byte of Name just above to set
 393+ 6597 A9          >                db      {b $} | END_BIT     // msb as name end
 393+ 6598             >
 393+ 6598 7E 65       >                dw      last_NFA            // Link to previous definition Name
 393+ 659A             >C_FIND:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 393+ 659A ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 393+ 659A             >                else
 393+ 659A 9C 65       >                dw      $ + 2   ; ok        // is pointed by CFA
 393+ 659C             >                endif           ; ok        // for other definitions it "points" the correct handler
 393+ 659C             >                // Use of "; ok" to suppress "warning[fwdref]"
 393+ 659C             >
 393+ 659C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 394+ 659C                                                              // de has dictionary pointer
 395+ 659C D1                               pop     de
 396+ 659D              Find_VocabularyLoop:
 397+ 659D E1                               pop     hl                  // string pointer to search for
 398+ 659E E5                               push    hl                  // keep it on stack too for the end.
 399+ 659F 1A                               ld      a, (de)             // save NFA length byte
 400+ 65A0 08                               ex      af,af'              // for later use (!)
 401+ 65A1 1A                               ld      a, (de)             // reload NFA length byte
 402+ 65A2 AE                               xor     (hl)                // check if same length
 403+ 65A3 E6 3F                            and     $3F                 // by resetting 3 high bits (flags)
 404+ 65A5                                  // word an text haven't the same length, skip to next vocabulary entry
 405+ 65A5 20 2C                            jr      nz, Find_DifferentLenght
 406+ 65A7
 407+ 65A7              Find_ThisWord:  // begin loop
 408+ 65A7 23                                   inc     hl
 409+ 65A8 13                                   inc     de
 410+ 65A9 1A                                   ld      a, (de)
 411+ 65AA                                      // case insensitive option - begin
 412+ 65AA C5                                   push    bc
 413+ 65AB E6 80                                and     $80                 // split A in msb and the rest
 414+ 65AD 47                                   ld      b, a
 415+ 65AE 1A                                   ld      a, (de)
 416+ 65AF E6 7F                                and     $7F                 // ... the rest (lower 7 bits)
 417+ 65B1 CD 4F 65                             call    Case_Sensitive      // uppercase routine
 418+ 65B4 4F                                   ld      c, a
 419+ 65B5 7E                                   ld      a, (hl)
 420+ 65B6 CD 4F 65                             call    Case_Sensitive      // uppercase routine
 421+ 65B9 A9                                   xor     c
 422+ 65BA A8                                   xor     b
 423+ 65BB C1                                   pop     bc
 424+ 65BC                                      // case insensitive option - end
 425+ 65BC 87                                   add     a                   // ignore msb during compare
 426+ 65BD 20 12                                jr      nz, Find_DidntMatch  // jump if doesn't match (*)
 427+ 65BF
 428+ 65BF                                  // loop back until last byte msb is found set
 429+ 65BF                                  // that bit marks the ending char of this word
 430+ 65BF 30 E6                            jr      nc, Find_ThisWord
 431+ 65C1
 432+ 65C1                                  // match found !
 433+ 65C1 21 03 00                             ld      hl, 3               // 3 bytes for CFA offset to skip LFA
 434+ 65C4 19                                   add     hl, de
 435+ 65C5 E3                                   ex      (sp), hl            // CFA on stack and drop addr
 436+ 65C6 08                                   ex      af, af'             // retrieve NFA byte (!)
 437+ 65C7 5F                                   ld      e, a
 438+ 65C8 16 00                                ld      d, 0
 439+ 65CA
 440+ 65CA
 441+ 65CA 21 01 00                             ld      hl, 1
 442+ 65CD                                      psh2
 442+ 65CD D5          >                push    de
 442+ 65CE E5          >                push    hl
 442+ 65CF DD E9       >                jp      (ix)
 443+ 65D1
 444+ 65D1              Find_DidntMatch: // didn't match (*)
 445+ 65D1 38 05                            jr      c,  Find_WordEnd   // jump if not end of word (**)
 446+ 65D3
 447+ 65D3              Find_DifferentLenght:
 448+ 65D3                              // consume chars until the end of the word
 449+ 65D3                              // that is last byte msb is found set
 450+ 65D3 13                               inc     de
 451+ 65D4 1A                               ld      a, (de)
 452+ 65D5 87                               add     a, a
 453+ 65D6 30 FB                        jr      nc, Find_DifferentLenght
 454+ 65D8
 455+ 65D8              Find_WordEnd:   // word-end  found (**)
 456+ 65D8                              // take LFA and use it
 457+ 65D8 13                           inc     de
 458+ 65D9 EB                           ex      de, hl
 459+ 65DA 5E                           ld      e, (hl)
 460+ 65DB 23                           inc     hl
 461+ 65DC 56                           ld      d, (hl)
 462+ 65DD 7A                           ld      a, d
 463+ 65DE B3                           or      e
 464+ 65DF
 465+ 65DF                          // loop until end of vocabulary
 466+ 65DF 20 BC                    jr      nz, Find_VocabularyLoop
 467+ 65E1
 468+ 65E1 E1                       pop     hl              // with this, it leaves addr unchanged
 469+ 65E2 21 00 00                 ld      hl, FALSE_FLAG
 470+ 65E5
 471+ 65E5                          psh1
 471+ 65E5 E5          >                push    hl
 471+ 65E6 DD E9       >                jp      (ix)
 472+ 65E8
 473+ 65E8              //  ______________________________________________________________________
 474+ 65E8              //
 475+ 65E8              // enclose      a c -- a  n1 n2 n3
 476+ 65E8              // starting from a, using delimiter c, determines the offsets:
 477+ 65E8              //   n1   the first character non-delimiter
 478+ 65E8              //   n2   the first delimiter after the text
 479+ 65E8              //   n3   the first character non enclosed.
 480+ 65E8              // This procedure does not go beyond a 'nul' ASCII (0x00) that represents
 481+ 65E8              // an uncoditional delimiter.
 482+ 65E8              // Examples:
 483+ 65E8              //   i:	c  c  x  x  x  c  x	 -- 2  5  6
 484+ 65E8              //  ii:	c  c  x  x  x  'nul' -- 2  5  5
 485+ 65E8              // iii:	c  c  'nul'          -- 2  3  2
 486+ 65E8                              New_Def ENCLOSE, "ENCLOSE", is_code, is_normal
 486+ 65E8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 486+ 65E8             >
 486+ 65E8             >                // dummy db directives used to calculate length of namec
 486+ 65E8 45 4E 43 4C >                db      "ENCLOSE"
 486+ 65EC 4F 53 45    >
 486+ 65EF             >len_NFA         defl    $ - temp_NFA
 486+ 65EF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 486+ 65E8             >
 486+ 65E8 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 486+ 65E9 45 4E 43 4C >                db      "ENCLOSE"               // name string in 7-bit ascii, but
 486+ 65ED 4F 53 45    >
 486+ 65F0             >                org     $-1                 // alter last byte of Name just above to set
 486+ 65EF C5          >                db      {b $} | END_BIT     // msb as name end
 486+ 65F0             >
 486+ 65F0 91 65       >                dw      last_NFA            // Link to previous definition Name
 486+ 65F2             >ENCLOSE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 486+ 65F2 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 486+ 65F2             >                else
 486+ 65F2 F4 65       >                dw      $ + 2   ; ok        // is pointed by CFA
 486+ 65F4             >                endif           ; ok        // for other definitions it "points" the correct handler
 486+ 65F4             >                // Use of "; ok" to suppress "warning[fwdref]"
 486+ 65F4             >
 486+ 65F4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 487+ 65F4 D1                           pop     de                  //  e has the character
 488+ 65F5 E1                           pop     hl                  // hl has the string address
 489+ 65F6 E5                           push    hl
 490+ 65F7 7B                           ld      a, e
 491+ 65F8 11 FF FF                     ld      de, -1              // let's start from -1
 492+ 65FB 2B                           dec     hl
 493+ 65FC              Enclose_NonDelimiter:
 494+ 65FC                              // find first non delimiter
 495+ 65FC 23                               inc     hl
 496+ 65FD 13                               inc     de
 497+ 65FE BE                               cp      (hl)
 498+ 65FF 28 FB                        jr      z, Enclose_NonDelimiter
 499+ 6601 D5                           push    de
 500+ 6602
 501+ 6602 C5                           push    bc                  // save Instruction Pointer
 502+ 6603
 503+ 6603 4F                           ld      c, a                // save char
 504+ 6604 7E                           ld      a, (hl)
 505+ 6605 A7                           and     a                   // stop if 0x00
 506+ 6606 20 07                        jr      nz, Enclose_NextChar
 507+ 6608
 508+ 6608                              /// case iii. no more character in string
 509+ 6608 C1                               pop     bc                  // restore Instruction Pointer
 510+ 6609 13                               inc     de
 511+ 660A D5                               push    de
 512+ 660B 1B                               dec     de
 513+ 660C D5                               push    de
 514+ 660D                                  next
 514+ 660D DD E9       >                jp      (ix)
 515+ 660F              Enclose_NextChar:
 516+ 660F 79                               ld      a, c
 517+ 6610 23                               inc     hl
 518+ 6611 13                               inc     de
 519+ 6612 BE                               cp      (hl)
 520+ 6613 20 06                            jr      nz, Enclose_NonSeparator
 521+ 6615
 522+ 6615                                      // case i. first non enclosed
 523+ 6615 C1                                   pop     bc                  // restore Instruction Pointer
 524+ 6616 D5                                   push    de
 525+ 6617 13                                   inc     de
 526+ 6618 D5                                   push    de
 527+ 6619                                      next
 527+ 6619 DD E9       >                jp      (ix)
 528+ 661B              Enclose_NonSeparator:
 529+ 661B 7E                               ld      a, (hl)
 530+ 661C A7                               and     a
 531+ 661D 20 F0                        jr      nz, Enclose_NextChar
 532+ 661F
 533+ 661F                              // case ii. separator & terminator
 534+ 661F C1                           pop     bc                  // restore Instruction Pointer
 535+ 6620 D5                           push    de
 536+ 6621 D5                           push    de
 537+ 6622                              next
 537+ 6622 DD E9       >                jp      (ix)
 538+ 6624
 539+ 6624              //  ______________________________________________________________________
 540+ 6624              //
 541+ 6624              // (compare)    a1 a2 n -- b
 542+ 6624              // this word performs a lexicographic compare of n bytes of text at address a1
 543+ 6624              // with n bytes of text at address a2. It returns numeric a value:
 544+ 6624              //  0 : if strings are equal
 545+ 6624              // +1 : if string at a1 greater than string at a2
 546+ 6624              // -1 : if string at a1 less than string at a2
 547+ 6624              // strings can be 256 bytes in length at most.
 548+ 6624                              New_Def C_COMPARE, "(COMPARE)", is_code, is_normal
 548+ 6624             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 548+ 6624             >
 548+ 6624             >                // dummy db directives used to calculate length of namec
 548+ 6624 28 43 4F 4D >                db      "(COMPARE)"
 548+ 6628 50 41 52 45 >
 548+ 662C 29          >
 548+ 662D             >len_NFA         defl    $ - temp_NFA
 548+ 662D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 548+ 6624             >
 548+ 6624 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 548+ 6625 28 43 4F 4D >                db      "(COMPARE)"               // name string in 7-bit ascii, but
 548+ 6629 50 41 52 45 >
 548+ 662D 29          >
 548+ 662E             >                org     $-1                 // alter last byte of Name just above to set
 548+ 662D A9          >                db      {b $} | END_BIT     // msb as name end
 548+ 662E             >
 548+ 662E E8 65       >                dw      last_NFA            // Link to previous definition Name
 548+ 6630             >C_COMPARE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 548+ 6630 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 548+ 6630             >                else
 548+ 6630 32 66       >                dw      $ + 2   ; ok        // is pointed by CFA
 548+ 6632             >                endif           ; ok        // for other definitions it "points" the correct handler
 548+ 6632             >                // Use of "; ok" to suppress "warning[fwdref]"
 548+ 6632             >
 548+ 6632             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 549+ 6632 E1                           pop     hl                  // Number of bytes
 550+ 6633 7D                           ld      a, l
 551+ 6634 E1                           pop     hl                  // hl points string a2
 552+ 6635 D1                           pop     de                  // hl points string a1
 553+ 6636 C5                           push    bc                  // Instruction pointer on stack
 554+ 6637 47                           ld      b, a
 555+ 6638              C_Compare_Loop:
 556+ 6638 7E                               ld      a, (hl)
 557+ 6639 CD 4F 65                         call    Case_Sensitive
 558+ 663C 4F                               ld      c, a
 559+ 663D 1A                               ld      a, (de)
 560+ 663E CD 4F 65                         call    Case_Sensitive
 561+ 6641 B9                               cp      c
 562+ 6642 13                               inc     de
 563+ 6643 23                               inc     hl
 564+ 6644 28 0E                            jr      z, C_Compare_Equal
 565+ 6646 38 05                                jr      c, C_Compare_NotLessThan  // If LessThan
 566+ 6648 21 01 00                                 ld      hl, 1               // a1 gt a2
 567+ 664B 18 03                                jr      C_Compare_Then      // Else
 568+ 664D              C_Compare_NotLessThan:
 569+ 664D 21 FF FF                                 ld      hl, -1              // a1 lt a2
 570+ 6650              C_Compare_Then:                                 // Endif
 571+ 6650 C1                                   pop     bc              // restore Instruction Pointer
 572+ 6651
 573+ 6651                                      psh1
 573+ 6651 E5          >                push    hl
 573+ 6652 DD E9       >                jp      (ix)
 574+ 6654
 575+ 6654              C_Compare_Equal:
 576+ 6654 10 E2                        djnz    C_Compare_Loop
 577+ 6656 21 00 00                     ld      hl, 0               // a1 eq a2
 578+ 6659 C1                           pop     bc                  // restore Instruction Pointer
 579+ 665A
 580+ 665A                              psh1
 580+ 665A E5          >                push    hl
 580+ 665B DD E9       >                jp      (ix)
 581+ 665D
 582+ 665D              //  ______________________________________________________________________
 583+ 665D              //
 584+ 665D              // emitc        c --
 585+ 665D              // low level emit, calls ROM routine at #10 to send a character to
 586+ 665D              // the the current channel (see SELECT to change stream-channel)
 587+ 665D                              New_Def EMITC, "EMITC", is_code, is_normal
 587+ 665D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 587+ 665D             >
 587+ 665D             >                // dummy db directives used to calculate length of namec
 587+ 665D 45 4D 49 54 >                db      "EMITC"
 587+ 6661 43          >
 587+ 6662             >len_NFA         defl    $ - temp_NFA
 587+ 6662             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 587+ 665D             >
 587+ 665D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 587+ 665E 45 4D 49 54 >                db      "EMITC"               // name string in 7-bit ascii, but
 587+ 6662 43          >
 587+ 6663             >                org     $-1                 // alter last byte of Name just above to set
 587+ 6662 C3          >                db      {b $} | END_BIT     // msb as name end
 587+ 6663             >
 587+ 6663 24 66       >                dw      last_NFA            // Link to previous definition Name
 587+ 6665             >EMITC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 587+ 6665 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 587+ 6665             >                else
 587+ 6665 67 66       >                dw      $ + 2   ; ok        // is pointed by CFA
 587+ 6667             >                endif           ; ok        // for other definitions it "points" the correct handler
 587+ 6667             >                // Use of "; ok" to suppress "warning[fwdref]"
 587+ 6667             >
 587+ 6667             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 588+ 6667 E1                           pop     hl
 589+ 6668 7D                           ld      a, l
 590+ 6669              Emitc_Ptr:
 591+ 6669 C5                           push    bc
 592+ 666A DD E5                        push    ix
 593+ 666C D7                           rst     $10
 594+ 666D DD E1                        pop     ix
 595+ 666F C1                           pop     bc
 596+ 6670 3E FF                        ld      a, 255            // max possible
 597+ 6672 32 8C 5C                     ld      (SCR_CT), a
 598+ 6675
 599+ 6675                              next
 599+ 6675 DD E9       >                jp      (ix)
 600+ 6677
 601+ 6677              Emitc_Vec:
 602+ 6677 BC 66                        dw      C_Emit_Printable  // comma
 603+ 6679 C2 66                        dw      C_Emit_Bel        // bel
 604+ 667B BC 66                        dw      C_Emit_Printable  // bs
 605+ 667D D7 66                        dw      C_Emit_Tab        // tab
 606+ 667F BC 66                        dw      C_Emit_Printable  // cr
 607+ 6681 DD 66                        dw      C_Emit_NL         // lf (unix newline)
 608+ 6683 BC 66                        dw      C_Emit_Printable  // blank
 609+ 6685 BC 66                        dw      C_Emit_Printable  // blank
 610+ 6687
 611+ 6687              Emit_Selector_Start:
 612+ 6687 06                           db      $06                 // comma
 613+ 6688 07                           db      $07                 // bel
 614+ 6689 08                           db      $08                 // bs
 615+ 668A 09                           db      $09                 // tab
 616+ 668B 0D                           db      $0D                 // cr
 617+ 668C 0A                           db      $0A                 // lf (unix newline)
 618+ 668D 20                           db      $20
 619+ 668E              Emit_Selector_End:
 620+ 668E 20                           db      $20
 621+ 668F
 622+ 668F              //  ______________________________________________________________________
 623+ 668F              //
 624+ 668F              // (?emit)      c1 -- c2 | c1
 625+ 668F              // decode a character to be sent via EMIT
 626+ 668F              // search first the Emit_Selector table, if found jump to the corresponding routine in Emit_Vector
 627+ 668F              // the routine should resolve anything and convert the character anyway.
 628+ 668F                              New_Def C_EMIT, "(?EMIT)", is_code, is_normal
 628+ 668F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 628+ 668F             >
 628+ 668F             >                // dummy db directives used to calculate length of namec
 628+ 668F 28 3F 45 4D >                db      "(?EMIT)"
 628+ 6693 49 54 29    >
 628+ 6696             >len_NFA         defl    $ - temp_NFA
 628+ 6696             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 628+ 668F             >
 628+ 668F 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 628+ 6690 28 3F 45 4D >                db      "(?EMIT)"               // name string in 7-bit ascii, but
 628+ 6694 49 54 29    >
 628+ 6697             >                org     $-1                 // alter last byte of Name just above to set
 628+ 6696 A9          >                db      {b $} | END_BIT     // msb as name end
 628+ 6697             >
 628+ 6697 5D 66       >                dw      last_NFA            // Link to previous definition Name
 628+ 6699             >C_EMIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 628+ 6699 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 628+ 6699             >                else
 628+ 6699 9B 66       >                dw      $ + 2   ; ok        // is pointed by CFA
 628+ 669B             >                endif           ; ok        // for other definitions it "points" the correct handler
 628+ 669B             >                // Use of "; ok" to suppress "warning[fwdref]"
 628+ 669B             >
 628+ 669B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 629+ 669B D1                           pop     de
 630+ 669C 7B                           ld      a, e                //  de has c1
 631+ 669D E6 7F                        and     $7F                 // 7-bit ascii only
 632+ 669F C5                           push    bc                  // save Instruction Pointer
 633+ 66A0 01 08 00                     ld      bc, Emit_Selector_End - Emit_Selector_Start + 1
 634+ 66A3 21 8E 66                     ld      hl, Emit_Selector_End
 635+ 66A6 ED B9                        cpdr                        // search for c1 in Emit_Selector table, backward
 636+ 66A8 20 0B                        jr      nz, C_Emit_Not_Found
 637+ 66AA                                  // Found then decode it
 638+ 66AA 21 77 66                         ld      hl, Emitc_Vec
 639+ 66AD 09                               add     hl, bc
 640+ 66AE 09                               add     hl, bc
 641+ 66AF 5E                               ld      e, (hl)
 642+ 66B0 23                               inc     hl
 643+ 66B1 56                               ld      d, (hl)
 644+ 66B2 EB                               ex      de, hl
 645+ 66B3 C1                               pop     bc                  // restore Instruction Pointer
 646+ 66B4 E9                               jp      (hl)                // one of the following labels
 647+ 66B5              C_Emit_Not_Found:
 648+ 66B5 C1                           pop     bc                  // restore Instruction Pointer
 649+ 66B6 FE 20                        cp      BLANK_CHAR          // cp $20 non-printable check
 650+ 66B8 30 02                        jr      nc, C_Emit_Printable
 651+ 66BA 3E 00                            ld      a, NUL_CHAR         // NUL is never "printed"
 652+ 66BC              C_Emit_Printable:
 653+ 66BC 6F                           ld      l, a
 654+ 66BD 26 00                        ld      h, 0
 655+ 66BF
 656+ 66BF                              psh1
 656+ 66BF E5          >                push    hl
 656+ 66C0 DD E9       >                jp      (ix)
 657+ 66C2
 658+ 66C2              C_Emit_Bel:
 659+ 66C2 C5                           push    bc                  // save Instruction Pointer
 660+ 66C3 11 00 01                     ld      de, $0100
 661+ 66C6 21 00 02                     ld      hl, $0200
 662+ 66C9 DD E5                        push    ix                  // save Next Pointer
 663+ 66CB CD B6 03                     call    $03B6               // bleep Standard-ROM routine
 664+ 66CE DD E1                        pop     ix                  // restore Next Pointer
 665+ 66D0 C1                           pop     bc                  // restore Instruction Pointer
 666+ 66D1 21 00 00                     ld      hl, NUL_CHAR
 667+ 66D4
 668+ 66D4                              psh1
 668+ 66D4 E5          >                push    hl
 668+ 66D5 DD E9       >                jp      (ix)
 669+ 66D7
 670+ 66D7 21 06 00     C_Emit_Tab:     ld      hl, COMMA_CHAR
 671+ 66DA
 672+ 66DA                              psh1
 672+ 66DA E5          >                push    hl
 672+ 66DB DD E9       >                jp      (ix)
 673+ 66DD
 674+ 66DD 21 0D 00     C_Emit_NL       ld      hl, CR_CHAR           // 0x0A --> 0x0D  à la Spectrum
 675+ 66E0
 676+ 66E0                              psh1
 676+ 66E0 E5          >                push    hl
 676+ 66E1 DD E9       >                jp      (ix)
 677+ 66E3
 678+ 66E3              //  ______________________________________________________________________
 679+ 66E3
 680+ 66E3              Key_Table:
 681+ 66E3 E2                           db      $E2                 //  0: STOP  --> SYMBOL+A : ~
 682+ 66E4 C3                           db      $C3                 //  1: NOT   --> SYMBOL+S : |
 683+ 66E5 CD                           db      $CD                 //  2: STEP  --> SYMBOl+D : //
 684+ 66E6 CC                           db      $CC                 //  3: TO    --> SYMBOL+F : {
 685+ 66E7 CB                           db      $CB                 //  4: THEN  --> SYMBOL+G : }
 686+ 66E8 C6                           db      $C6                 //  5: AND   --> SYMBOL+Y : [
 687+ 66E9 C5                           db      $C5                 //  6: OR    --> SYMBOL+U : ]
 688+ 66EA AC                           db      $AC                 //  7: AT    --> SYMBOL+I : (C) copyright symbol
 689+ 66EB C7                           db      $C7                 //  8: <=
 690+ 66EC C8                           db      $C8                 //  9: >=
 691+ 66ED C9                           db      $C9                 // 10: <>    --> SYMBOL+W is the same as CAPS (toggle) SHIFT+2
 692+ 66EE              Key_MapTo:
 693+ 66EE 06                           db      $06                 // 10: SYMBOL+W is the same as CAPS (toggle) SHIFT+2
 694+ 66EF 20                           db      $20                 //  9: not used
 695+ 66F0 20                           db      $20                 //  8: not used
 696+ 66F1 7F                           db      $7F                 //  7: SYMBOL+I : (C) copyright symbol
 697+ 66F2 5D                           db      $5D                 //  6: SYMBOL+U : ]
 698+ 66F3 5B                           db      $5B                 //  5: SYMBOL+Y : [
 699+ 66F4 7D                           db      $7D                 //  4: SYMBOL+G : }
 700+ 66F5 7B                           db      $7B                 //  3: SYMBOL+F : {
 701+ 66F6 5C                           db      $5C                 //  2: SYMBOl+D : //
 702+ 66F7 7C                           db      $7C                 //  1: SYMBOL+S : |
 703+ 66F8 7E                           db      $7E                 //  0: SYMBOL+A : ~
 704+ 66F9
 705+ 66F9              //  ______________________________________________________________________
 706+ 66F9              //
 707+ 66F9              // key          -- c
 708+ 66F9              // convert a character c using base n
 709+ 66F9              // returns a unsigned number and a true flag
 710+ 66F9              // or just a false flag if the conversion fails
 711+ 66F9              // This definition need Standard ROM Interrupt to be served
 712+ 66F9
 713+ 66F9                              New_Def KEY, "KEY", is_code, is_normal
 713+ 66F9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 713+ 66F9             >
 713+ 66F9             >                // dummy db directives used to calculate length of namec
 713+ 66F9 4B 45 59    >                db      "KEY"
 713+ 66FC             >len_NFA         defl    $ - temp_NFA
 713+ 66FC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 713+ 66F9             >
 713+ 66F9 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 713+ 66FA 4B 45 59    >                db      "KEY"               // name string in 7-bit ascii, but
 713+ 66FD             >                org     $-1                 // alter last byte of Name just above to set
 713+ 66FC D9          >                db      {b $} | END_BIT     // msb as name end
 713+ 66FD             >
 713+ 66FD 8F 66       >                dw      last_NFA            // Link to previous definition Name
 713+ 66FF             >KEY:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 713+ 66FF ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 713+ 66FF             >                else
 713+ 66FF 01 67       >                dw      $ + 2   ; ok        // is pointed by CFA
 713+ 6701             >                endif           ; ok        // for other definitions it "points" the correct handler
 713+ 6701             >                // Use of "; ok" to suppress "warning[fwdref]"
 713+ 6701             >
 713+ 6701             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 714+ 6701
 715+ 6701 C5                           push    bc                  // save Instruction Pointer
 716+ 6702 DD E5                        push    ix
 717+ 6704
 718+ 6704 ED 73 2C 64                  ld      (SP_Saved), sp      // be sure to to be paged out.
 719+ 6708 31 FE 63                     ld      sp, Cold_origin - 2 // maybe $4000...
 720+ 670B FD CB 01 AE                  res     5, (iy + 1)         // FLAGS (5C3A+1)
 721+ 670F
 722+ 670F              Key_Wait:
 723+ 670F 76                               halt
 724+ 6710 3E 02                            ld      a, 2                // selec channel #2 (Upper Video)
 725+ 6712 CD 01 16                         call    $1601               // SELECT Standard-ROM Routine
 726+ 6715
 727+ 6715                                  // software-flash: flips face every 320 ms
 728+ 6715 3E 20                            ld      a, $20              // Timing based
 729+ 6717 FD A6 3E                         and     (iy + $3E)          // FRAMES (5C3A+3E)
 730+ 671A
 731+ 671A 3A 26 64                         ld      a, (Block_Face)     // see origin.asm
 732+ 671D 20 0C                            jr      nz, Key_Cursor
 733+ 671F 3A 27 64                             ld      a, (Half_Face)      // see origin.asm
 734+ 6722 FD CB 30 5E                          bit     3, (iy + $30)       // FLAGS2 (5C3A+$30)
 735+ 6726 28 03                                jr      z, Key_Cursor
 736+ 6728 3A 28 64                                 ld      a, (Underscore_Face) // see origin
 737+ 672B              Key_Cursor:
 738+ 672B D7                               rst     $10
 739+ 672C 3E 08                            ld      a, BACKSPACE_CHAR    // backspace
 740+ 672E D7                               rst     $10
 741+ 672F
 742+ 672F FD CB 01 6E                      bit     5, (iy + 1)         // FLAGS (5C3A+1)
 743+ 6733 28 DA                        jr      z, Key_Wait
 744+ 6735
 745+ 6735 76                           halt
 746+ 6736
 747+ 6736 3E 20                        ld      a, BLANK_CHAR       // space to blank cursor
 748+ 6738 D7                           rst     $10
 749+ 6739 3E 08                        ld      a, BACKSPACE_CHAR   // backspace
 750+ 673B D7                           rst     $10
 751+ 673C 3A 08 5C                     ld      a, (LASTK)          // get typed character (5C08)
 752+ 673F
 753+ 673F                              // decode character from above table
 754+ 673F 21 E3 66                     ld      hl, Key_Table
 755+ 6742 01 0B 00                     ld      bc, $000B
 756+ 6745 ED B1                        cpir
 757+ 6747 20 05                        jr      nz, Key_DontMap
 758+ 6749 21 EE 66                         ld      hl, Key_MapTo
 759+ 674C 09                               add     hl, bc
 760+ 674D 7E                               ld      a, (hl)
 761+ 674E FE 06        Key_DontMap:    cp      $06                 // CAPS-LOCK amnagement
 762+ 6750 20 09                        jr      nz, Key_NoCapsLock
 763+ 6752 21 6A 5C                         ld      hl, $5C6A           // FLAGS2
 764+ 6755 7E                               ld      a, (hl)
 765+ 6756 EE 08                            xor     $08
 766+ 6758 77                               ld      (hl), a
 767+ 6759 3E 00                            ld      a, NUL_CHAR
 768+ 675B 6F           Key_NoCapsLock: ld      l, a
 769+ 675C 26 00                        ld      h, 0                // Prepare TOS
 770+ 675E
 771+ 675E 3A 48 5C                     ld      a, ($5C48)          // BORDCR system variable
 772+ 6761 1F                           rra
 773+ 6762 1F                           rra
 774+ 6763 1F                           rra
 775+ 6764 F6 18                        or      $18                 // quick'n'dirty click
 776+ 6766 D3 FE                        out     ($fe), a
 777+ 6768 06 00                        ld      b, 0
 778+ 676A 10 FE                        djnz    $                   // wait loop
 779+ 676C EE 18                        xor     $18
 780+ 676E D3 FE                        out     ($fe), a
 781+ 6770
 782+ 6770 ED 7B 2C 64                  ld      sp, (SP_Saved)
 783+ 6774
 784+ 6774 DD E1                        pop     ix
 785+ 6776 C1                           pop     bc                  // Restore Instruction Pointer
 786+ 6777
 787+ 6777                              psh1
 787+ 6777 E5          >                push    hl
 787+ 6778 DD E9       >                jp      (ix)
 788+ 677A
 789+ 677A              //  ______________________________________________________________________
 790+ 677A              //
 791+ 677A              // ?terminal    -- FALSE | TRUE
 792+ 677A              // convert a character c using base n
 793+ 677A              // returns a unsigned number and a true flag
 794+ 677A              // or just a false flag if the conversion fails
 795+ 677A                              New_Def QTERMINAL, "?TERMINAL", is_code, is_normal
 795+ 677A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 795+ 677A             >
 795+ 677A             >                // dummy db directives used to calculate length of namec
 795+ 677A 3F 54 45 52 >                db      "?TERMINAL"
 795+ 677E 4D 49 4E 41 >
 795+ 6782 4C          >
 795+ 6783             >len_NFA         defl    $ - temp_NFA
 795+ 6783             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 795+ 677A             >
 795+ 677A 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 795+ 677B 3F 54 45 52 >                db      "?TERMINAL"               // name string in 7-bit ascii, but
 795+ 677F 4D 49 4E 41 >
 795+ 6783 4C          >
 795+ 6784             >                org     $-1                 // alter last byte of Name just above to set
 795+ 6783 CC          >                db      {b $} | END_BIT     // msb as name end
 795+ 6784             >
 795+ 6784 F9 66       >                dw      last_NFA            // Link to previous definition Name
 795+ 6786             >QTERMINAL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 795+ 6786 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 795+ 6786             >                else
 795+ 6786 88 67       >                dw      $ + 2   ; ok        // is pointed by CFA
 795+ 6788             >                endif           ; ok        // for other definitions it "points" the correct handler
 795+ 6788             >                // Use of "; ok" to suppress "warning[fwdref]"
 795+ 6788             >
 795+ 6788             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 796+ 6788 21 00 00                     ld      hl, 0
 797+ 678B ED 73 2C 64                  ld      (SP_Saved), sp
 798+ 678F 31 FE 63                     ld      sp, Cold_origin - 2
 799+ 6792 CD 54 1F                     call    $1F54
 800+ 6795 ED 7B 2C 64                  ld      sp, (SP_Saved)
 801+ 6799
 802+ 6799 38 01                        jr      c, QTerminal_NoBreak
 803+ 679B 2C                               inc     l                  // quick TRUE_FLAG
 804+ 679C              QTerminal_NoBreak:
 805+ 679C
 806+ 679C                              psh1
 806+ 679C E5          >                push    hl
 806+ 679D DD E9       >                jp      (ix)
 807+ 679F
 808+ 679F
 809+ 679F              //  ______________________________________________________________________
 810+ 679F              //
 811+ 679F              // ZX Spectrum Next - Low Level disk primitives.
 812+ 679F
 813+ 679F                              include "next-opt0.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/next-opt0.asm
   1++679F              //  ______________________________________________________________________
   2++679F              //
   3++679F              //  next-opt.asm
   4++679F              //
   5++679F              //  ZX Spectrum Next - peculiar definitions
   6++679F              //  ______________________________________________________________________
   7++679F
   8++679F              //  ______________________________________________________________________
   9++679F              //
  10++679F              // f_seek       d u -- f
  11++679F              // Seek to position d in file-handle u.
  12++679F              // Return a false-flag 0 on success, True flag on error
  13++679F                              New_Def F_SEEK, "F_SEEK", is_code, is_normal
  13++679F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13++679F             >
  13++679F             >                // dummy db directives used to calculate length of namec
  13++679F 46 5F 53 45 >                db      "F_SEEK"
  13++67A3 45 4B       >
  13++67A5             >len_NFA         defl    $ - temp_NFA
  13++67A5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13++679F             >
  13++679F 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  13++67A0 46 5F 53 45 >                db      "F_SEEK"               // name string in 7-bit ascii, but
  13++67A4 45 4B       >
  13++67A6             >                org     $-1                 // alter last byte of Name just above to set
  13++67A5 CB          >                db      {b $} | END_BIT     // msb as name end
  13++67A6             >
  13++67A6 7A 67       >                dw      last_NFA            // Link to previous definition Name
  13++67A8             >F_SEEK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  13++67A8 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  13++67A8             >                else
  13++67A8 AA 67       >                dw      $ + 2   ; ok        // is pointed by CFA
  13++67AA             >                endif           ; ok        // for other definitions it "points" the correct handler
  13++67AA             >                // Use of "; ok" to suppress "warning[fwdref]"
  13++67AA             >
  13++67AA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14++67AA E1                           pop     hl                  // file-handle
  15++67AB 7D                           ld      a, l                // file-handle
  16++67AC 60                           ld      h, b                // save Intruction Pointer
  17++67AD 69                           ld      l, c
  18++67AE C1                           pop     bc                  // bc has high-word of d
  19++67AF D1                           pop     de
  20++67B0 DD E5                        push    ix
  21++67B2 E5                           push    hl                  // save Instruction Pointer
  22++67B3 DD 21 00 00                  ld      ix, 0
  23++67B7 CF                           rst     $08
  24++67B8 9F                           db      $9F
  25++67B9 C1                           pop     bc                  // restore Instruction Pointer
  26++67BA DD E1                        pop     ix
  27++67BC ED 62                        sbc     hl, hl              // to get 0 or -1
  28++67BE
  29++67BE                              psh1
  29++67BE E5          >                push    hl
  29++67BF DD E9       >                jp      (ix)
  30++67C1
  31++67C1              //  ______________________________________________________________________
  32++67C1              //
  33++67C1              // f_fgetpos    u -- d f
  34++67C1              // Seek to position d in file-handle u.
  35++67C1              // Return a false-flag 0 on success, True flag on error
  36++67C1                              New_Def F_FGETPOS, "F_FGETPOS", is_code, is_normal
  36++67C1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  36++67C1             >
  36++67C1             >                // dummy db directives used to calculate length of namec
  36++67C1 46 5F 46 47 >                db      "F_FGETPOS"
  36++67C5 45 54 50 4F >
  36++67C9 53          >
  36++67CA             >len_NFA         defl    $ - temp_NFA
  36++67CA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  36++67C1             >
  36++67C1 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  36++67C2 46 5F 46 47 >                db      "F_FGETPOS"               // name string in 7-bit ascii, but
  36++67C6 45 54 50 4F >
  36++67CA 53          >
  36++67CB             >                org     $-1                 // alter last byte of Name just above to set
  36++67CA D3          >                db      {b $} | END_BIT     // msb as name end
  36++67CB             >
  36++67CB 9F 67       >                dw      last_NFA            // Link to previous definition Name
  36++67CD             >F_FGETPOS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  36++67CD ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  36++67CD             >                else
  36++67CD CF 67       >                dw      $ + 2   ; ok        // is pointed by CFA
  36++67CF             >                endif           ; ok        // for other definitions it "points" the correct handler
  36++67CF             >                // Use of "; ok" to suppress "warning[fwdref]"
  36++67CF             >
  36++67CF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  37++67CF E1                           pop     hl
  38++67D0 7D                           ld      a, l                // file-handle
  39++67D1 DD E5                        push    ix
  40++67D3 C5                           push    bc
  41++67D4 CF                           rst     $08
  42++67D5 A0                           db      $A0
  43++67D6 E1                           pop     hl                  // restore Instruction Pointer
  44++67D7 DD E1                        pop     ix
  45++67D9 D5                           push    de
  46++67DA C5                           push    bc
  47++67DB 44                           ld      b, h                // restore Instruction Pointer
  48++67DC 4D                           ld      c, l
  49++67DD ED 62                        sbc     hl, hl
  50++67DF
  51++67DF                              psh1
  51++67DF E5          >                push    hl
  51++67E0 DD E9       >                jp      (ix)
  52++67E2
  53++67E2              //  ______________________________________________________________________
  54++67E2              //
  55++67E2              // f_write      a b u -- n f
  56++67E2              // Write bytes currently stored at address a to file-handle u.
  57++67E2              // Return the actual n bytes written and 0 on success, True flag on error.
  58++67E2                              New_Def F_WRITE, "F_WRITE", is_code, is_normal
  58++67E2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  58++67E2             >
  58++67E2             >                // dummy db directives used to calculate length of namec
  58++67E2 46 5F 57 52 >                db      "F_WRITE"
  58++67E6 49 54 45    >
  58++67E9             >len_NFA         defl    $ - temp_NFA
  58++67E9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  58++67E2             >
  58++67E2 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  58++67E3 46 5F 57 52 >                db      "F_WRITE"               // name string in 7-bit ascii, but
  58++67E7 49 54 45    >
  58++67EA             >                org     $-1                 // alter last byte of Name just above to set
  58++67E9 C5          >                db      {b $} | END_BIT     // msb as name end
  58++67EA             >
  58++67EA C1 67       >                dw      last_NFA            // Link to previous definition Name
  58++67EC             >F_WRITE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  58++67EC ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  58++67EC             >                else
  58++67EC EE 67       >                dw      $ + 2   ; ok        // is pointed by CFA
  58++67EE             >                endif           ; ok        // for other definitions it "points" the correct handler
  58++67EE             >                // Use of "; ok" to suppress "warning[fwdref]"
  58++67EE             >
  58++67EE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  59++67EE
  60++67EE 50                           ld      d, b
  61++67EF 59                           ld      e, c
  62++67F0
  63++67F0 E1                           pop     hl
  64++67F1 7D                           ld      a, l                // file-handle
  65++67F2 C1                           pop     bc                  // bc has bytes to read
  66++67F3 DD E3                        ex      (sp), ix            // ix has address
  67++67F5 D5                           push    de                  // Save Instruction pointer
  68++67F6 CF                           rst     $08
  69++67F7 9E                           db      $9E
  70++67F8 C1                           pop     bc                  // Restore Instruction pointer
  71++67F9 DD E1                        pop     ix                  // Restore ix
  72++67FB D5                           push    de                  // bytes written
  73++67FC ED 62                        sbc     hl, hl
  74++67FE
  75++67FE                              psh1
  75++67FE E5          >                push    hl
  75++67FF DD E9       >                jp      (ix)
  76++6801
  77++6801              //  ______________________________________________________________________
  78++6801              //
  79++6801              // f_read       a b u -- n f
  80++6801              // Read b bytes from file-handle u to address a
  81++6801              // Return the actual number n of bytes read
  82++6801              // Return 0 on success, True flag on error
  83++6801                              New_Def F_READ, "F_READ", is_code, is_normal
  83++6801             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  83++6801             >
  83++6801             >                // dummy db directives used to calculate length of namec
  83++6801 46 5F 52 45 >                db      "F_READ"
  83++6805 41 44       >
  83++6807             >len_NFA         defl    $ - temp_NFA
  83++6807             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  83++6801             >
  83++6801 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  83++6802 46 5F 52 45 >                db      "F_READ"               // name string in 7-bit ascii, but
  83++6806 41 44       >
  83++6808             >                org     $-1                 // alter last byte of Name just above to set
  83++6807 C4          >                db      {b $} | END_BIT     // msb as name end
  83++6808             >
  83++6808 E2 67       >                dw      last_NFA            // Link to previous definition Name
  83++680A             >F_READ:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  83++680A ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  83++680A             >                else
  83++680A 0C 68       >                dw      $ + 2   ; ok        // is pointed by CFA
  83++680C             >                endif           ; ok        // for other definitions it "points" the correct handler
  83++680C             >                // Use of "; ok" to suppress "warning[fwdref]"
  83++680C             >
  83++680C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  84++680C
  85++680C 50                           ld      d, b
  86++680D 59                           ld      e, c
  87++680E E1                           pop     hl
  88++680F 7D                           ld      a, l                // file-handle
  89++6810 C1                           pop     bc                  // bc has bytes to read
  90++6811 DD E3                        ex      (sp), ix            // ix has address
  91++6813 D5                           push    de                  // Save Instruction pointer
  92++6814 CF                           rst     $08
  93++6815 9D                           db      $9D
  94++6816 C1                           pop     bc                  // Restore Instruction pointer
  95++6817 DD E1                        pop     ix                  // Restore ix
  96++6819 D5                           push    de                  // bytes written
  97++681A ED 62                        sbc     hl, hl
  98++681C
  99++681C                              psh1
  99++681C E5          >                push    hl
  99++681D DD E9       >                jp      (ix)
 100++681F
 101++681F              //  ______________________________________________________________________
 102++681F              //
 103++681F              // f_close      u -- f
 104++681F              // Close file-handle u.
 105++681F              // Return 0 on success, True flag on error
 106++681F
 107++681F                              New_Def F_CLOSE, "F_CLOSE", is_code, is_normal
 107++681F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 107++681F             >
 107++681F             >                // dummy db directives used to calculate length of namec
 107++681F 46 5F 43 4C >                db      "F_CLOSE"
 107++6823 4F 53 45    >
 107++6826             >len_NFA         defl    $ - temp_NFA
 107++6826             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 107++681F             >
 107++681F 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 107++6820 46 5F 43 4C >                db      "F_CLOSE"               // name string in 7-bit ascii, but
 107++6824 4F 53 45    >
 107++6827             >                org     $-1                 // alter last byte of Name just above to set
 107++6826 C5          >                db      {b $} | END_BIT     // msb as name end
 107++6827             >
 107++6827 01 68       >                dw      last_NFA            // Link to previous definition Name
 107++6829             >F_CLOSE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 107++6829 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 107++6829             >                else
 107++6829 2B 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 107++682B             >                endif           ; ok        // for other definitions it "points" the correct handler
 107++682B             >                // Use of "; ok" to suppress "warning[fwdref]"
 107++682B             >
 107++682B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 108++682B
 109++682B E1                           pop     hl
 110++682C 7D                           ld      a, l                // file-handle
 111++682D DD E5                        push    ix
 112++682F C5                           push    bc                  // Save Instruction pointer
 113++6830 CF                           rst     $08
 114++6831 9B                           db      $9B
 115++6832 C1                           pop     bc
 116++6833 DD E1                        pop     ix
 117++6835 ED 62                        sbc     hl, hl
 118++6837
 119++6837                              psh1
 119++6837 E5          >                push    hl
 119++6838 DD E9       >                jp      (ix)
 120++683A
 121++683A              //  ______________________________________________________________________
 122++683A              //
 123++683A              // f_open       a1 a2 b -- u f
 124++683A              // open a file
 125++683A              // a1 (filespec) is a null-terminated string, such as produced by ," definition
 126++683A              // a2 is address to an 8-byte header data used in some cases.
 127++683A              // b is access mode-byte, that is a combination of:
 128++683A              // any/all of:
 129++683A              //   esx_mode_read          $01 request read access
 130++683A              //   esx_mode_write         $02 request write access
 131++683A              //   esx_mode_use_header    $40 read/write +3DOS header
 132++683A              // plus one of:
 133++683A              //   esx_mode_open_exist    $00 only open existing file
 134++683A              //   esx_mode_open_creat    $08 open existing or create file
 135++683A              //   esx_mode_creat_noexist $04 create new file, error if exists
 136++683A              //   esx_mode_creat_trunc   $0c create new file, delete existing
 137++683A              // Return file-handle u and 0 on success, True flag on error
 138++683A                              New_Def F_OPEN, "F_OPEN", is_code, is_normal
 138++683A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 138++683A             >
 138++683A             >                // dummy db directives used to calculate length of namec
 138++683A 46 5F 4F 50 >                db      "F_OPEN"
 138++683E 45 4E       >
 138++6840             >len_NFA         defl    $ - temp_NFA
 138++6840             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 138++683A             >
 138++683A 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 138++683B 46 5F 4F 50 >                db      "F_OPEN"               // name string in 7-bit ascii, but
 138++683F 45 4E       >
 138++6841             >                org     $-1                 // alter last byte of Name just above to set
 138++6840 CE          >                db      {b $} | END_BIT     // msb as name end
 138++6841             >
 138++6841 1F 68       >                dw      last_NFA            // Link to previous definition Name
 138++6843             >F_OPEN:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 138++6843 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 138++6843             >                else
 138++6843 45 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 138++6845             >                endif           ; ok        // for other definitions it "points" the correct handler
 138++6845             >                // Use of "; ok" to suppress "warning[fwdref]"
 138++6845             >
 138++6845             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 139++6845 60                           ld      h, b                // Save Instruction pointer
 140++6846 69                           ld      l, c
 141++6847 C1                           pop     bc                  // file-mode
 142++6848 41                           ld      b, c                // file-mode
 143++6849 D1                           pop     de                  // 8-bytes buffer if any
 144++684A DD E3                        ex      (sp), ix            // filespec nul-terminated
 145++684C E5                           push    hl                  // Save Instruction pointer
 146++684D 3E 2A                        ld      a, "*"
 147++684F CF                           rst     $08
 148++6850 9A                           db      $9A
 149++6851 C1                           pop     bc
 150++6852 DD E1                        pop     ix
 151++6854 ED 62                        sbc     hl, hl
 152++6856 5F                           ld      e, a
 153++6857 16 00                        ld      d, 0
 154++6859
 155++6859
 156++6859                              psh2
 156++6859 D5          >                push    de
 156++685A E5          >                push    hl
 156++685B DD E9       >                jp      (ix)
 157++685D
 158++685D              //   \ CREATE FILENAME ," test.txt"   \ new Counted String
 159++685D              //   \ FILENAME 1+ PAD 1 F_OPEN
 160++685D              //   \ DROP
 161++685D              //   \ F_CLOSE
 162++685D
 163++685D              //  ______________________________________________________________________
 164++685D              //
 165++685D              // f_sync      u -- f
 166++685D              // Close file-handle u.
 167++685D              // Return 0 on success, True flag on error
 168++685D
 169++685D                              New_Def F_SYNC, "F_SYNC", is_code, is_normal
 169++685D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 169++685D             >
 169++685D             >                // dummy db directives used to calculate length of namec
 169++685D 46 5F 53 59 >                db      "F_SYNC"
 169++6861 4E 43       >
 169++6863             >len_NFA         defl    $ - temp_NFA
 169++6863             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 169++685D             >
 169++685D 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 169++685E 46 5F 53 59 >                db      "F_SYNC"               // name string in 7-bit ascii, but
 169++6862 4E 43       >
 169++6864             >                org     $-1                 // alter last byte of Name just above to set
 169++6863 C3          >                db      {b $} | END_BIT     // msb as name end
 169++6864             >
 169++6864 3A 68       >                dw      last_NFA            // Link to previous definition Name
 169++6866             >F_SYNC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 169++6866 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 169++6866             >                else
 169++6866 68 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 169++6868             >                endif           ; ok        // for other definitions it "points" the correct handler
 169++6868             >                // Use of "; ok" to suppress "warning[fwdref]"
 169++6868             >
 169++6868             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 170++6868 E1                           pop     hl
 171++6869 7D                           ld      a, l                // file-handle
 172++686A DD E5                        push    ix
 173++686C C5                           push    bc
 174++686D CF                           rst     $08
 175++686E 9C                           db      $9C
 176++686F C1                           pop     bc
 177++6870 DD E1                        pop     ix
 178++6872 ED 62                        sbc     hl, hl
 179++6874
 180++6874                              psh1
 180++6874 E5          >                push    hl
 180++6875 DD E9       >                jp      (ix)
 181++6877
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/next-opt0.asm
 814+ 6877
 815+ 6877
 816+ 6877              //  ______________________________________________________________________
 817+ 6877              //
 818+ 6877              // cr           --
 819+ 6877              // send a CR via EMITC
 820+ 6877                              New_Def CR, "CR", is_code, is_normal
 820+ 6877             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 820+ 6877             >
 820+ 6877             >                // dummy db directives used to calculate length of namec
 820+ 6877 43 52       >                db      "CR"
 820+ 6879             >len_NFA         defl    $ - temp_NFA
 820+ 6879             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 820+ 6877             >
 820+ 6877 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 820+ 6878 43 52       >                db      "CR"               // name string in 7-bit ascii, but
 820+ 687A             >                org     $-1                 // alter last byte of Name just above to set
 820+ 6879 D2          >                db      {b $} | END_BIT     // msb as name end
 820+ 687A             >
 820+ 687A 5D 68       >                dw      last_NFA            // Link to previous definition Name
 820+ 687C             >CR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 820+ 687C ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 820+ 687C             >                else
 820+ 687C 7E 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 820+ 687E             >                endif           ; ok        // for other definitions it "points" the correct handler
 820+ 687E             >                // Use of "; ok" to suppress "warning[fwdref]"
 820+ 687E             >
 820+ 687E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 821+ 687E
 822+ 687E 3E 0D                        ld      a, CR_CHAR
 823+ 6880 C3 69 66                     jp      Emitc_Ptr
 824+ 6883
 825+ 6883              //  ______________________________________________________________________
 826+ 6883              //
 827+ 6883              // cmove    a1 a2 u --
 828+ 6883              // If u > 0, moves memory content starting at address a1 for n bytes long
 829+ 6883              // storing then starting at address addr2.
 830+ 6883              // The content of a1 is moved first. See CMOVE> also.
 831+ 6883                              New_Def CMOVE, "CMOVE", is_code, is_normal
 831+ 6883             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 831+ 6883             >
 831+ 6883             >                // dummy db directives used to calculate length of namec
 831+ 6883 43 4D 4F 56 >                db      "CMOVE"
 831+ 6887 45          >
 831+ 6888             >len_NFA         defl    $ - temp_NFA
 831+ 6888             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 831+ 6883             >
 831+ 6883 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 831+ 6884 43 4D 4F 56 >                db      "CMOVE"               // name string in 7-bit ascii, but
 831+ 6888 45          >
 831+ 6889             >                org     $-1                 // alter last byte of Name just above to set
 831+ 6888 C5          >                db      {b $} | END_BIT     // msb as name end
 831+ 6889             >
 831+ 6889 77 68       >                dw      last_NFA            // Link to previous definition Name
 831+ 688B             >CMOVE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 831+ 688B ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 831+ 688B             >                else
 831+ 688B 8D 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 831+ 688D             >                endif           ; ok        // for other definitions it "points" the correct handler
 831+ 688D             >                // Use of "; ok" to suppress "warning[fwdref]"
 831+ 688D             >
 831+ 688D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 832+ 688D 60                           ld      h, b
 833+ 688E 69                           ld      l, c
 834+ 688F
 835+ 688F C1                           pop     bc                  // bc has counter
 836+ 6890 D1                           pop     de                  // de now has dest
 837+ 6891 E3                           ex      (sp), hl            // hl has source, save Instruction Pointer
 838+ 6892 78                           ld      a, b
 839+ 6893 B1                           or      c
 840+ 6894 28 02                        jr      z, Cmove_NoMove
 841+ 6896 ED B0                            ldir
 842+ 6898              Cmove_NoMove:
 843+ 6898 C1                           pop     bc                  // Restore Instruction Pointer
 844+ 6899
 845+ 6899                              next
 845+ 6899 DD E9       >                jp      (ix)
 846+ 689B
 847+ 689B              //  ______________________________________________________________________
 848+ 689B              //
 849+ 689B              // cmove>    a1 a2 u --
 850+ 689B              // If u > 0, moves memory content starting at address a1 for n bytes long
 851+ 689B              // storing then starting at address addr2.
 852+ 689B              // The content of a1 is moved last. See cmove.
 853+ 689B                              New_Def CMOVE_TO, "CMOVE>", is_code, is_normal
 853+ 689B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 853+ 689B             >
 853+ 689B             >                // dummy db directives used to calculate length of namec
 853+ 689B 43 4D 4F 56 >                db      "CMOVE>"
 853+ 689F 45 3E       >
 853+ 68A1             >len_NFA         defl    $ - temp_NFA
 853+ 68A1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 853+ 689B             >
 853+ 689B 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 853+ 689C 43 4D 4F 56 >                db      "CMOVE>"               // name string in 7-bit ascii, but
 853+ 68A0 45 3E       >
 853+ 68A2             >                org     $-1                 // alter last byte of Name just above to set
 853+ 68A1 BE          >                db      {b $} | END_BIT     // msb as name end
 853+ 68A2             >
 853+ 68A2 83 68       >                dw      last_NFA            // Link to previous definition Name
 853+ 68A4             >CMOVE_TO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 853+ 68A4 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 853+ 68A4             >                else
 853+ 68A4 A6 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 853+ 68A6             >                endif           ; ok        // for other definitions it "points" the correct handler
 853+ 68A6             >                // Use of "; ok" to suppress "warning[fwdref]"
 853+ 68A6             >
 853+ 68A6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 854+ 68A6 60                           ld      h, b
 855+ 68A7 69                           ld      l, c
 856+ 68A8
 857+ 68A8 C1                           pop     bc                  // bc has counter
 858+ 68A9 D1                           pop     de                  // de has dest
 859+ 68AA E3                           ex      (sp), hl            // hl has source, save Instruction Pointer
 860+ 68AB 78                           ld      a, b
 861+ 68AC B1                           or      c
 862+ 68AD 28 08                        jr      z, CmoveV_NoMove
 863+ 68AF EB                               ex      de, hl              // compute address to
 864+ 68B0 09                               add     hl, bc              // operate backward
 865+ 68B1 2B                               dec     hl
 866+ 68B2 EB                               ex      de, hl
 867+ 68B3 09                               add     hl, bc
 868+ 68B4 2B                               dec     hl
 869+ 68B5 ED B8                            lddr                        // backward
 870+ 68B7              CmoveV_NoMove:
 871+ 68B7 C1                           pop     bc                  // Restore Instruction Pointer
 872+ 68B8
 873+ 68B8                              next
 873+ 68B8 DD E9       >                jp      (ix)
 874+ 68BA
 875+ 68BA              //  ______________________________________________________________________
 876+ 68BA              //
 877+ 68BA              // um*      u1 u2 -- ud
 878+ 68BA              // Unsigned multiplication
 879+ 68BA              // A double-integer is kept in CPU registers as DEHL then pushed on stack.
 880+ 68BA              // On the stack a double number is treated as two single numbers
 881+ 68BA              // where DE is on the top of the stack and HL is the second from top,
 882+ 68BA              // Instead, in 2VARIABLE a double number is stored as EDLH.
 883+ 68BA              // this definition could use "MUL" Z80N new op-code.
 884+ 68BA                              New_Def UM_MUL, "UM*", is_code, is_normal
 884+ 68BA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 884+ 68BA             >
 884+ 68BA             >                // dummy db directives used to calculate length of namec
 884+ 68BA 55 4D 2A    >                db      "UM*"
 884+ 68BD             >len_NFA         defl    $ - temp_NFA
 884+ 68BD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 884+ 68BA             >
 884+ 68BA 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 884+ 68BB 55 4D 2A    >                db      "UM*"               // name string in 7-bit ascii, but
 884+ 68BE             >                org     $-1                 // alter last byte of Name just above to set
 884+ 68BD AA          >                db      {b $} | END_BIT     // msb as name end
 884+ 68BE             >
 884+ 68BE 9B 68       >                dw      last_NFA            // Link to previous definition Name
 884+ 68C0             >UM_MUL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 884+ 68C0 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 884+ 68C0             >                else
 884+ 68C0 C2 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 884+ 68C2             >                endif           ; ok        // for other definitions it "points" the correct handler
 884+ 68C2             >                // Use of "; ok" to suppress "warning[fwdref]"
 884+ 68C2             >
 884+ 68C2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 885+ 68C2 D1                           pop     de                    // de has u2 operand
 886+ 68C3 E1                           pop     hl                    // hl has u1 operand
 887+ 68C4 C5                           push    bc                    // Save Instruction Pointer
 888+ 68C5 44                           ld      b, h
 889+ 68C6 4D                           ld      c, l
 890+ 68C7 21 00 00                     ld      hl, 0
 891+ 68CA 3E 10                        ld      a, 16                   // 16 steps
 892+ 68CC              Um_Mul_Loop:
 893+ 68CC 29                               add     hl, hl                  // shift DEHL
 894+ 68CD CB 13                            rl      e                       // consuming one bit at a time
 895+ 68CF CB 12                            rl      d
 896+ 68D1 30 04                            jr      nc, Um_Mul_NoCarry      // if msb of DEHL was set then
 897+ 68D3 09                                   add     hl, bc                  // add bc to hl and carry to de
 898+ 68D4 30 01                                jr      nc, Um_Mul_NoCarry      // this carry doesn't happen before de (u1) is consumed
 899+ 68D6 13                                       inc     de                      // transfer the carry to de
 900+ 68D7              Um_Mul_NoCarry:
 901+ 68D7 3D                               dec     a
 902+ 68D8 20 F2                        jr      nz, Um_Mul_Loop
 903+ 68DA EB                           ex      de, hl
 904+ 68DB C1                           pop     bc
 905+ 68DC
 906+ 68DC
 907+ 68DC                              psh2
 907+ 68DC D5          >                push    de
 907+ 68DD E5          >                push    hl
 907+ 68DE DD E9       >                jp      (ix)
 908+ 68E0
 909+ 68E0              //  ______________________________________________________________________
 910+ 68E0              //
 911+ 68E0              // um/mod      ud u1 -- q r
 912+ 68E0              // divides ud into u1 giving quotient q and remainder r
 913+ 68E0              // algorithm takes 16 bit at a time starting from msb
 914+ 68E0              // DE grows from lsb upward with quotient result
 915+ 68E0              // HL keeps the remainder at each stage of division
 916+ 68E0              // each loop 'lowers' the next binary digit to form the current dividend
 917+ 68E0                              New_Def UMDIVMOD, "UM/MOD", is_code, is_normal
 917+ 68E0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 917+ 68E0             >
 917+ 68E0             >                // dummy db directives used to calculate length of namec
 917+ 68E0 55 4D 2F 4D >                db      "UM/MOD"
 917+ 68E4 4F 44       >
 917+ 68E6             >len_NFA         defl    $ - temp_NFA
 917+ 68E6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 917+ 68E0             >
 917+ 68E0 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 917+ 68E1 55 4D 2F 4D >                db      "UM/MOD"               // name string in 7-bit ascii, but
 917+ 68E5 4F 44       >
 917+ 68E7             >                org     $-1                 // alter last byte of Name just above to set
 917+ 68E6 C4          >                db      {b $} | END_BIT     // msb as name end
 917+ 68E7             >
 917+ 68E7 BA 68       >                dw      last_NFA            // Link to previous definition Name
 917+ 68E9             >UMDIVMOD:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 917+ 68E9 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 917+ 68E9             >                else
 917+ 68E9 EB 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 917+ 68EB             >                endif           ; ok        // for other definitions it "points" the correct handler
 917+ 68EB             >                // Use of "; ok" to suppress "warning[fwdref]"
 917+ 68EB             >
 917+ 68EB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 918+ 68EB 60                           ld      h, b
 919+ 68EC 69                           ld      l, c                    // Save Instruction Pointer
 920+ 68ED
 921+ 68ED C1                           pop     bc                      // divisor
 922+ 68EE
 923+ 68EE D1                           pop     de                      // < high part
 924+ 68EF E3                           ex      (sp), hl                // < low part and > save bc
 925+ 68F0 EB                           ex      de, hl                  //
 926+ 68F1 7D                           ld      a, l                    // check without changing arguments
 927+ 68F2 91                           sub     c                       // if divisor is greater than high part
 928+ 68F3 7C                           ld      a, h                    // so quotient will be in range
 929+ 68F4 98                           sbc     a, b
 930+ 68F5 30 23                        jr      nc, Um_DivMod_OutOfRange
 931+ 68F7 3E 10                            ld      a, 16
 932+ 68F9              Um_DivMod_Loop:
 933+ 68F9 A7                                   and     a
 934+ 68FA CB 13                                rl      e
 935+ 68FC CB 12                                rl      d
 936+ 68FE CB 15                                rl      l
 937+ 6900 CB 14                                rl      h
 938+ 6902 30 05                                jr      nc, Um_DivMod_Carry
 939+ 6904 A7                                       and     a
 940+ 6905 ED 42                                    sbc     hl, bc
 941+ 6907 18 07                                jr      Um_DivMod_Endif    // else
 942+ 6909              Um_DivMod_Carry:
 943+ 6909 A7                                       and     a
 944+ 690A ED 42                                    sbc     hl, bc
 945+ 690C 30 02                                    jr      nc, Um_DivMod_Endif
 946+ 690E 09                                           add     hl, bc
 947+ 690F 1B                                           dec     de
 948+ 6910              Um_DivMod_Endif:                                   // endif
 949+ 6910 13                                   inc     de
 950+ 6911 3D                                   dec     a
 951+ 6912 20 E5                            jr      nz, Um_DivMod_Loop
 952+ 6914 EB                               ex      de, hl
 953+ 6915              Um_DivMod_Bailout:
 954+ 6915 C1                               pop     bc                  // restore Instruction Pointer
 955+ 6916 D5                               push    de                  // de := remanider
 956+ 6917 E5                               push    hl                  // hl := quotient
 957+ 6918                                  next
 957+ 6918 DD E9       >                jp      (ix)
 958+ 691A
 959+ 691A              Um_DivMod_OutOfRange:
 960+ 691A 21 FF FF                     ld      hl, -1
 961+ 691D 54                           ld      d, h
 962+ 691E 5D                           ld      e, l
 963+ 691F 18 F4                        jr      Um_DivMod_Bailout
 964+ 6921
 965+ 6921              //  ______________________________________________________________________
 966+ 6921              //
 967+ 6921              // and          n1 n2 -- n3
 968+ 6921              // bit logical AND. Returns n3 as n1 & n2
 969+ 6921                              New_Def AND_OP, "AND", is_code, is_normal
 969+ 6921             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 969+ 6921             >
 969+ 6921             >                // dummy db directives used to calculate length of namec
 969+ 6921 41 4E 44    >                db      "AND"
 969+ 6924             >len_NFA         defl    $ - temp_NFA
 969+ 6924             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 969+ 6921             >
 969+ 6921 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 969+ 6922 41 4E 44    >                db      "AND"               // name string in 7-bit ascii, but
 969+ 6925             >                org     $-1                 // alter last byte of Name just above to set
 969+ 6924 C4          >                db      {b $} | END_BIT     // msb as name end
 969+ 6925             >
 969+ 6925 E0 68       >                dw      last_NFA            // Link to previous definition Name
 969+ 6927             >AND_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 969+ 6927 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 969+ 6927             >                else
 969+ 6927 29 69       >                dw      $ + 2   ; ok        // is pointed by CFA
 969+ 6929             >                endif           ; ok        // for other definitions it "points" the correct handler
 969+ 6929             >                // Use of "; ok" to suppress "warning[fwdref]"
 969+ 6929             >
 969+ 6929             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 970+ 6929 D1                           pop     de
 971+ 692A E1                           pop     hl
 972+ 692B 7B                           ld      a, e
 973+ 692C A5                           and     l
 974+ 692D 6F                           ld      l, a
 975+ 692E 7A                           ld      a, d
 976+ 692F A4                           and     h
 977+ 6930 67                           ld      h, a
 978+ 6931
 979+ 6931                              psh1
 979+ 6931 E5          >                push    hl
 979+ 6932 DD E9       >                jp      (ix)
 980+ 6934
 981+ 6934              //  ______________________________________________________________________
 982+ 6934              //
 983+ 6934              // or           n1 n2 -- n3
 984+ 6934              // bit logical OR. Returns n3 as n1 | n2
 985+ 6934                              New_Def OR_OP, "OR", is_code, is_normal
 985+ 6934             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 985+ 6934             >
 985+ 6934             >                // dummy db directives used to calculate length of namec
 985+ 6934 4F 52       >                db      "OR"
 985+ 6936             >len_NFA         defl    $ - temp_NFA
 985+ 6936             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 985+ 6934             >
 985+ 6934 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 985+ 6935 4F 52       >                db      "OR"               // name string in 7-bit ascii, but
 985+ 6937             >                org     $-1                 // alter last byte of Name just above to set
 985+ 6936 D2          >                db      {b $} | END_BIT     // msb as name end
 985+ 6937             >
 985+ 6937 21 69       >                dw      last_NFA            // Link to previous definition Name
 985+ 6939             >OR_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 985+ 6939 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 985+ 6939             >                else
 985+ 6939 3B 69       >                dw      $ + 2   ; ok        // is pointed by CFA
 985+ 693B             >                endif           ; ok        // for other definitions it "points" the correct handler
 985+ 693B             >                // Use of "; ok" to suppress "warning[fwdref]"
 985+ 693B             >
 985+ 693B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 986+ 693B D1                           pop     de
 987+ 693C E1                           pop     hl
 988+ 693D 7B                           ld      a, e
 989+ 693E B5                           or      l
 990+ 693F 6F                           ld      l, a
 991+ 6940 7A                           ld      a, d
 992+ 6941 B4                           or      h
 993+ 6942 67                           ld      h, a
 994+ 6943
 995+ 6943                              psh1
 995+ 6943 E5          >                push    hl
 995+ 6944 DD E9       >                jp      (ix)
 996+ 6946
 997+ 6946              //  ______________________________________________________________________
 998+ 6946              //
 999+ 6946              // xor          n1 n2 -- n3
1000+ 6946              // bit logical OR. Returns n3 as n1 ^ n2
1001+ 6946                              New_Def XOR_OP, "XOR", is_code, is_normal
1001+ 6946             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1001+ 6946             >
1001+ 6946             >                // dummy db directives used to calculate length of namec
1001+ 6946 58 4F 52    >                db      "XOR"
1001+ 6949             >len_NFA         defl    $ - temp_NFA
1001+ 6949             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1001+ 6946             >
1001+ 6946 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1001+ 6947 58 4F 52    >                db      "XOR"               // name string in 7-bit ascii, but
1001+ 694A             >                org     $-1                 // alter last byte of Name just above to set
1001+ 6949 D2          >                db      {b $} | END_BIT     // msb as name end
1001+ 694A             >
1001+ 694A 34 69       >                dw      last_NFA            // Link to previous definition Name
1001+ 694C             >XOR_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1001+ 694C ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1001+ 694C             >                else
1001+ 694C 4E 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1001+ 694E             >                endif           ; ok        // for other definitions it "points" the correct handler
1001+ 694E             >                // Use of "; ok" to suppress "warning[fwdref]"
1001+ 694E             >
1001+ 694E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1002+ 694E D1                           pop     de
1003+ 694F E1                           pop     hl
1004+ 6950 7B                           ld      a, e
1005+ 6951 AD                           xor     l
1006+ 6952 6F                           ld      l, a
1007+ 6953 7A                           ld      a, d
1008+ 6954 AC                           xor     h
1009+ 6955 67                           ld      h, a
1010+ 6956
1011+ 6956                              psh1
1011+ 6956 E5          >                push    hl
1011+ 6957 DD E9       >                jp      (ix)
1012+ 6959
1013+ 6959              //  ______________________________________________________________________
1014+ 6959              //
1015+ 6959              // sp@      -- a
1016+ 6959              // returns on top of stack the value of SP before execution
1017+ 6959                              New_Def SPFETCH, "SP@", is_code, is_normal
1017+ 6959             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1017+ 6959             >
1017+ 6959             >                // dummy db directives used to calculate length of namec
1017+ 6959 53 50 40    >                db      "SP@"
1017+ 695C             >len_NFA         defl    $ - temp_NFA
1017+ 695C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1017+ 6959             >
1017+ 6959 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1017+ 695A 53 50 40    >                db      "SP@"               // name string in 7-bit ascii, but
1017+ 695D             >                org     $-1                 // alter last byte of Name just above to set
1017+ 695C C0          >                db      {b $} | END_BIT     // msb as name end
1017+ 695D             >
1017+ 695D 46 69       >                dw      last_NFA            // Link to previous definition Name
1017+ 695F             >SPFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1017+ 695F ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1017+ 695F             >                else
1017+ 695F 61 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1017+ 6961             >                endif           ; ok        // for other definitions it "points" the correct handler
1017+ 6961             >                // Use of "; ok" to suppress "warning[fwdref]"
1017+ 6961             >
1017+ 6961             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1018+ 6961
1019+ 6961 21 00 00                     ld      hl, 0
1020+ 6964 39                           add     hl, sp
1021+ 6965
1022+ 6965                              psh1
1022+ 6965 E5          >                push    hl
1022+ 6966 DD E9       >                jp      (ix)
1023+ 6968
1024+ 6968              //  ______________________________________________________________________
1025+ 6968              //
1026+ 6968              // sp!      a --
1027+ 6968              // restore SP to the initial value passed
1028+ 6968              // normally it is S0, i.e. the word at offset 6 and 7 of user variabiles area.
1029+ 6968                              New_Def SPSTORE, "SP!", is_code, is_normal
1029+ 6968             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1029+ 6968             >
1029+ 6968             >                // dummy db directives used to calculate length of namec
1029+ 6968 53 50 21    >                db      "SP!"
1029+ 696B             >len_NFA         defl    $ - temp_NFA
1029+ 696B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1029+ 6968             >
1029+ 6968 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1029+ 6969 53 50 21    >                db      "SP!"               // name string in 7-bit ascii, but
1029+ 696C             >                org     $-1                 // alter last byte of Name just above to set
1029+ 696B A1          >                db      {b $} | END_BIT     // msb as name end
1029+ 696C             >
1029+ 696C 59 69       >                dw      last_NFA            // Link to previous definition Name
1029+ 696E             >SPSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1029+ 696E ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1029+ 696E             >                else
1029+ 696E 70 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1029+ 6970             >                endif           ; ok        // for other definitions it "points" the correct handler
1029+ 6970             >                // Use of "; ok" to suppress "warning[fwdref]"
1029+ 6970             >
1029+ 6970             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1030+ 6970 E1                           pop     hl
1031+ 6971 F9                           ld      sp, hl
1032+ 6972
1033+ 6972                              next
1033+ 6972 DD E9       >                jp      (ix)
1034+ 6974
1035+ 6974              //  ______________________________________________________________________
1036+ 6974              //
1037+ 6974              // rp@      -- a
1038+ 6974              // returns on top of stack the value of Return-Pointer
1039+ 6974                              New_Def RPFETCH, "RP@", is_code, is_normal
1039+ 6974             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1039+ 6974             >
1039+ 6974             >                // dummy db directives used to calculate length of namec
1039+ 6974 52 50 40    >                db      "RP@"
1039+ 6977             >len_NFA         defl    $ - temp_NFA
1039+ 6977             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1039+ 6974             >
1039+ 6974 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1039+ 6975 52 50 40    >                db      "RP@"               // name string in 7-bit ascii, but
1039+ 6978             >                org     $-1                 // alter last byte of Name just above to set
1039+ 6977 C0          >                db      {b $} | END_BIT     // msb as name end
1039+ 6978             >
1039+ 6978 68 69       >                dw      last_NFA            // Link to previous definition Name
1039+ 697A             >RPFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1039+ 697A ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1039+ 697A             >                else
1039+ 697A 7C 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1039+ 697C             >                endif           ; ok        // for other definitions it "points" the correct handler
1039+ 697C             >                // Use of "; ok" to suppress "warning[fwdref]"
1039+ 697C             >
1039+ 697C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1040+ 697C
1041+ 697C                              ldhlrp
1041+ 697C 2A 30 64    >                ld      hl,(RP_Pointer)
1042+ 697F
1043+ 697F                              psh1
1043+ 697F E5          >                push    hl
1043+ 6980 DD E9       >                jp      (ix)
1044+ 6982
1045+ 6982              //  ______________________________________________________________________
1046+ 6982              //
1047+ 6982              // rp!      a --
1048+ 6982              // restore RP to the initial value passed
1049+ 6982              // normally it is R0 @, i.e. the word at offset 8 of user variabiles area.
1050+ 6982                              New_Def RPSTORE, "RP!", is_code, is_normal
1050+ 6982             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1050+ 6982             >
1050+ 6982             >                // dummy db directives used to calculate length of namec
1050+ 6982 52 50 21    >                db      "RP!"
1050+ 6985             >len_NFA         defl    $ - temp_NFA
1050+ 6985             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1050+ 6982             >
1050+ 6982 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1050+ 6983 52 50 21    >                db      "RP!"               // name string in 7-bit ascii, but
1050+ 6986             >                org     $-1                 // alter last byte of Name just above to set
1050+ 6985 A1          >                db      {b $} | END_BIT     // msb as name end
1050+ 6986             >
1050+ 6986 74 69       >                dw      last_NFA            // Link to previous definition Name
1050+ 6988             >RPSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1050+ 6988 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1050+ 6988             >                else
1050+ 6988 8A 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1050+ 698A             >                endif           ; ok        // for other definitions it "points" the correct handler
1050+ 698A             >                // Use of "; ok" to suppress "warning[fwdref]"
1050+ 698A             >
1050+ 698A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1051+ 698A E1                           pop     hl
1052+ 698B                              ldrphl
1052+ 698B 22 30 64    >                ld      (RP_Pointer),hl
1053+ 698E
1054+ 698E                              next
1054+ 698E DD E9       >                jp      (ix)
1055+ 6990
1056+ 6990              //  ______________________________________________________________________
1057+ 6990              //
1058+ 6990              // ;s      --
1059+ 6990              // exits back to the caller word
1060+ 6990                              New_Def EXIT, ";S", is_code, is_normal
1060+ 6990             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1060+ 6990             >
1060+ 6990             >                // dummy db directives used to calculate length of namec
1060+ 6990 3B 53       >                db      ";S"
1060+ 6992             >len_NFA         defl    $ - temp_NFA
1060+ 6992             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1060+ 6990             >
1060+ 6990 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1060+ 6991 3B 53       >                db      ";S"               // name string in 7-bit ascii, but
1060+ 6993             >                org     $-1                 // alter last byte of Name just above to set
1060+ 6992 D3          >                db      {b $} | END_BIT     // msb as name end
1060+ 6993             >
1060+ 6993 82 69       >                dw      last_NFA            // Link to previous definition Name
1060+ 6995             >EXIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1060+ 6995 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1060+ 6995             >                else
1060+ 6995 97 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1060+ 6997             >                endif           ; ok        // for other definitions it "points" the correct handler
1060+ 6997             >                // Use of "; ok" to suppress "warning[fwdref]"
1060+ 6997             >
1060+ 6997             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1061+ 6997                              ldhlrp                      // Get Return Stack Pointer
1061+ 6997 2A 30 64    >                ld      hl,(RP_Pointer)
1062+ 699A 4E                           ld      c, (hl)             // pop Instruction Pointer
1063+ 699B 23                           inc     hl                  // from Return Stack
1064+ 699C 46                           ld      b, (hl)
1065+ 699D 23                           inc     hl
1066+ 699E                              ldrphl                      // Set Return Stack Pointer
1066+ 699E 22 30 64    >                ld      (RP_Pointer),hl
1067+ 69A1                              next
1067+ 69A1 DD E9       >                jp      (ix)
1068+ 69A3
1069+ 69A3              //  ______________________________________________________________________
1070+ 69A3              //
1071+ 69A3              // leave        --
1072+ 69A3              // set the limit-of-loop equal to the current index
1073+ 69A3              // this forces to leave from loop at the end of the current iteration
1074+ 69A3                              New_Def LEAVE, "LEAVE", is_code, is_normal
1074+ 69A3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1074+ 69A3             >
1074+ 69A3             >                // dummy db directives used to calculate length of namec
1074+ 69A3 4C 45 41 56 >                db      "LEAVE"
1074+ 69A7 45          >
1074+ 69A8             >len_NFA         defl    $ - temp_NFA
1074+ 69A8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1074+ 69A3             >
1074+ 69A3 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1074+ 69A4 4C 45 41 56 >                db      "LEAVE"               // name string in 7-bit ascii, but
1074+ 69A8 45          >
1074+ 69A9             >                org     $-1                 // alter last byte of Name just above to set
1074+ 69A8 C5          >                db      {b $} | END_BIT     // msb as name end
1074+ 69A9             >
1074+ 69A9 90 69       >                dw      last_NFA            // Link to previous definition Name
1074+ 69AB             >LEAVE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1074+ 69AB ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1074+ 69AB             >                else
1074+ 69AB AD 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1074+ 69AD             >                endif           ; ok        // for other definitions it "points" the correct handler
1074+ 69AD             >                // Use of "; ok" to suppress "warning[fwdref]"
1074+ 69AD             >
1074+ 69AD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1075+ 69AD
1076+ 69AD                              ldhlrp
1076+ 69AD 2A 30 64    >                ld      hl,(RP_Pointer)
1077+ 69B0 5E                           ld      e, (hl)
1078+ 69B1 23                           inc     hl
1079+ 69B2 56                           ld      d, (hl)
1080+ 69B3 23                           inc     hl
1081+ 69B4 73                           ld      (hl), e
1082+ 69B5 23                           inc     hl
1083+ 69B6 72                           ld      (hl), d
1084+ 69B7
1085+ 69B7                              next
1085+ 69B7 DD E9       >                jp      (ix)
1086+ 69B9
1087+ 69B9              //  ______________________________________________________________________
1088+ 69B9              //
1089+ 69B9              // >r      n --
1090+ 69B9              // pop from calculator-stack and push into return-stack
1091+ 69B9                              New_Def TO_R, ">R", is_code, is_normal
1091+ 69B9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1091+ 69B9             >
1091+ 69B9             >                // dummy db directives used to calculate length of namec
1091+ 69B9 3E 52       >                db      ">R"
1091+ 69BB             >len_NFA         defl    $ - temp_NFA
1091+ 69BB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1091+ 69B9             >
1091+ 69B9 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1091+ 69BA 3E 52       >                db      ">R"               // name string in 7-bit ascii, but
1091+ 69BC             >                org     $-1                 // alter last byte of Name just above to set
1091+ 69BB D2          >                db      {b $} | END_BIT     // msb as name end
1091+ 69BC             >
1091+ 69BC A3 69       >                dw      last_NFA            // Link to previous definition Name
1091+ 69BE             >TO_R:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1091+ 69BE ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1091+ 69BE             >                else
1091+ 69BE C0 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1091+ 69C0             >                endif           ; ok        // for other definitions it "points" the correct handler
1091+ 69C0             >                // Use of "; ok" to suppress "warning[fwdref]"
1091+ 69C0             >
1091+ 69C0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1092+ 69C0 D1                           pop     de
1093+ 69C1                              ldhlrp
1093+ 69C1 2A 30 64    >                ld      hl,(RP_Pointer)
1094+ 69C4 2B                           dec     hl
1095+ 69C5 72                           ld      (hl), d             // store current TOS
1096+ 69C6 2B                           dec     hl                  // to Return Stack
1097+ 69C7 73                           ld      (hl), e
1098+ 69C8                              ldrphl
1098+ 69C8 22 30 64    >                ld      (RP_Pointer),hl
1099+ 69CB
1100+ 69CB                              next
1100+ 69CB DD E9       >                jp      (ix)
1101+ 69CD
1102+ 69CD              //  ______________________________________________________________________
1103+ 69CD              //
1104+ 69CD              // r>      -- n
1105+ 69CD              // pop from return-stack and push into calculator-stack
1106+ 69CD                              New_Def R_TO, "R>", is_code, is_normal
1106+ 69CD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1106+ 69CD             >
1106+ 69CD             >                // dummy db directives used to calculate length of namec
1106+ 69CD 52 3E       >                db      "R>"
1106+ 69CF             >len_NFA         defl    $ - temp_NFA
1106+ 69CF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1106+ 69CD             >
1106+ 69CD 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1106+ 69CE 52 3E       >                db      "R>"               // name string in 7-bit ascii, but
1106+ 69D0             >                org     $-1                 // alter last byte of Name just above to set
1106+ 69CF BE          >                db      {b $} | END_BIT     // msb as name end
1106+ 69D0             >
1106+ 69D0 B9 69       >                dw      last_NFA            // Link to previous definition Name
1106+ 69D2             >R_TO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1106+ 69D2 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1106+ 69D2             >                else
1106+ 69D2 D4 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1106+ 69D4             >                endif           ; ok        // for other definitions it "points" the correct handler
1106+ 69D4             >                // Use of "; ok" to suppress "warning[fwdref]"
1106+ 69D4             >
1106+ 69D4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1107+ 69D4
1108+ 69D4                              ldhlrp
1108+ 69D4 2A 30 64    >                ld      hl,(RP_Pointer)
1109+ 69D7 5E                           ld      e, (hl)             // retrieve from Return Stack
1110+ 69D8 23                           inc     hl
1111+ 69D9 56                           ld      d, (hl)
1112+ 69DA 23                           inc     hl
1113+ 69DB                              ldrphl
1113+ 69DB 22 30 64    >                ld      (RP_Pointer),hl
1114+ 69DE D5                           push    de
1115+ 69DF                              next
1115+ 69DF DD E9       >                jp      (ix)
1116+ 69E1
1117+ 69E1              //  ______________________________________________________________________
1118+ 69E1              //
1119+ 69E1              // r            -- n
1120+ 69E1              // return on top of stack the value of top of return-stack
1121+ 69E1              // Since this is the same as I, we alter R's CFA to jump there
1122+ 69E1                              New_Def R_OP, "R", I_Ptr, is_normal
1122+ 69E1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1122+ 69E1             >
1122+ 69E1             >                // dummy db directives used to calculate length of namec
1122+ 69E1 52          >                db      "R"
1122+ 69E2             >len_NFA         defl    $ - temp_NFA
1122+ 69E2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1122+ 69E1             >
1122+ 69E1 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1122+ 69E2 52          >                db      "R"               // name string in 7-bit ascii, but
1122+ 69E3             >                org     $-1                 // alter last byte of Name just above to set
1122+ 69E2 D2          >                db      {b $} | END_BIT     // msb as name end
1122+ 69E3             >
1122+ 69E3 CD 69       >                dw      last_NFA            // Link to previous definition Name
1122+ 69E5             >R_OP:          if I_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1122+ 69E5 14 65       >                dw      I_Ptr ; ok        // for primitive definitions  actual code
1122+ 69E7             >                else
1122+ 69E7 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1122+ 69E7             >                endif           ; ok        // for other definitions it "points" the correct handler
1122+ 69E7             >                // Use of "; ok" to suppress "warning[fwdref]"
1122+ 69E7             >
1122+ 69E7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1123+ 69E7
1124+ 69E7              //  ______________________________________________________________________
1125+ 69E7              //
1126+ 69E7              // 0=           n -- f
1127+ 69E7              // true (non zero) if n is zero, false (0) elsewere
1128+ 69E7                              New_Def ZEQUAL, "0=", is_code, is_normal
1128+ 69E7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1128+ 69E7             >
1128+ 69E7             >                // dummy db directives used to calculate length of namec
1128+ 69E7 30 3D       >                db      "0="
1128+ 69E9             >len_NFA         defl    $ - temp_NFA
1128+ 69E9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1128+ 69E7             >
1128+ 69E7 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1128+ 69E8 30 3D       >                db      "0="               // name string in 7-bit ascii, but
1128+ 69EA             >                org     $-1                 // alter last byte of Name just above to set
1128+ 69E9 BD          >                db      {b $} | END_BIT     // msb as name end
1128+ 69EA             >
1128+ 69EA E1 69       >                dw      last_NFA            // Link to previous definition Name
1128+ 69EC             >ZEQUAL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1128+ 69EC ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1128+ 69EC             >                else
1128+ 69EC EE 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1128+ 69EE             >                endif           ; ok        // for other definitions it "points" the correct handler
1128+ 69EE             >                // Use of "; ok" to suppress "warning[fwdref]"
1128+ 69EE             >
1128+ 69EE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1129+ 69EE E1                           pop     hl
1130+ 69EF 7D                           ld      a, l
1131+ 69F0 B4                           or      h
1132+ 69F1 21 00 00                     ld      hl, FALSE_FLAG
1133+ 69F4 20 01                        jr      nz, ZEqual_Skip
1134+ 69F6 2C                               inc     l
1135+ 69F7              ZEqual_Skip:
1136+ 69F7                              psh1
1136+ 69F7 E5          >                push    hl
1136+ 69F8 DD E9       >                jp      (ix)
1137+ 69FA
1138+ 69FA              //  ______________________________________________________________________
1139+ 69FA              //
1140+ 69FA              // 0<           n -- f
1141+ 69FA              // true (non zero) if n is less than zero, false (0) elsewere
1142+ 69FA                              New_Def ZLESS, "0<", is_code, is_normal
1142+ 69FA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1142+ 69FA             >
1142+ 69FA             >                // dummy db directives used to calculate length of namec
1142+ 69FA 30 3C       >                db      "0<"
1142+ 69FC             >len_NFA         defl    $ - temp_NFA
1142+ 69FC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1142+ 69FA             >
1142+ 69FA 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1142+ 69FB 30 3C       >                db      "0<"               // name string in 7-bit ascii, but
1142+ 69FD             >                org     $-1                 // alter last byte of Name just above to set
1142+ 69FC BC          >                db      {b $} | END_BIT     // msb as name end
1142+ 69FD             >
1142+ 69FD E7 69       >                dw      last_NFA            // Link to previous definition Name
1142+ 69FF             >ZLESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1142+ 69FF ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1142+ 69FF             >                else
1142+ 69FF 01 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1142+ 6A01             >                endif           ; ok        // for other definitions it "points" the correct handler
1142+ 6A01             >                // Use of "; ok" to suppress "warning[fwdref]"
1142+ 6A01             >
1142+ 6A01             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1143+ 6A01 E1                           pop     hl
1144+ 6A02 29                           add     hl, hl
1145+ 6A03 21 00 00                     ld      hl, 0
1146+ 6A06 30 01                        jr      nc, ZLess_Skip
1147+ 6A08 2C                               inc     l
1148+ 6A09              ZLess_Skip:
1149+ 6A09                              psh1
1149+ 6A09 E5          >                push    hl
1149+ 6A0A DD E9       >                jp      (ix)
1150+ 6A0C
1151+ 6A0C              //  ______________________________________________________________________
1152+ 6A0C              //
1153+ 6A0C              // 0>           n -- f
1154+ 6A0C              // true (non zero) if n is less than zero, false (0) elsewere
1155+ 6A0C                              New_Def ZGREATER, "0>", is_code, is_normal
1155+ 6A0C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1155+ 6A0C             >
1155+ 6A0C             >                // dummy db directives used to calculate length of namec
1155+ 6A0C 30 3E       >                db      "0>"
1155+ 6A0E             >len_NFA         defl    $ - temp_NFA
1155+ 6A0E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1155+ 6A0C             >
1155+ 6A0C 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1155+ 6A0D 30 3E       >                db      "0>"               // name string in 7-bit ascii, but
1155+ 6A0F             >                org     $-1                 // alter last byte of Name just above to set
1155+ 6A0E BE          >                db      {b $} | END_BIT     // msb as name end
1155+ 6A0F             >
1155+ 6A0F FA 69       >                dw      last_NFA            // Link to previous definition Name
1155+ 6A11             >ZGREATER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1155+ 6A11 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1155+ 6A11             >                else
1155+ 6A11 13 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1155+ 6A13             >                endif           ; ok        // for other definitions it "points" the correct handler
1155+ 6A13             >                // Use of "; ok" to suppress "warning[fwdref]"
1155+ 6A13             >
1155+ 6A13             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1156+ 6A13 E1                           pop     hl
1157+ 6A14 7D                           ld      a, l
1158+ 6A15 B4                           or      h
1159+ 6A16 29                           add     hl, hl
1160+ 6A17 21 00 00                     ld      hl, FALSE_FLAG
1161+ 6A1A 38 04                        jr      c, ZGreater_Skip
1162+ 6A1C A7                               and     a
1163+ 6A1D 28 01                            jr      z, ZGreater_Skip
1164+ 6A1F 2C                                   inc     l
1165+ 6A20              ZGreater_Skip:
1166+ 6A20                              psh1
1166+ 6A20 E5          >                push    hl
1166+ 6A21 DD E9       >                jp      (ix)
1167+ 6A23
1168+ 6A23              //  ______________________________________________________________________
1169+ 6A23              //
1170+ 6A23              // +            n1 n2 -- n3
1171+ 6A23              // returns the unsigned sum of two top values
1172+ 6A23                              New_Def PLUS, "+", is_code, is_normal
1172+ 6A23             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1172+ 6A23             >
1172+ 6A23             >                // dummy db directives used to calculate length of namec
1172+ 6A23 2B          >                db      "+"
1172+ 6A24             >len_NFA         defl    $ - temp_NFA
1172+ 6A24             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1172+ 6A23             >
1172+ 6A23 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1172+ 6A24 2B          >                db      "+"               // name string in 7-bit ascii, but
1172+ 6A25             >                org     $-1                 // alter last byte of Name just above to set
1172+ 6A24 AB          >                db      {b $} | END_BIT     // msb as name end
1172+ 6A25             >
1172+ 6A25 0C 6A       >                dw      last_NFA            // Link to previous definition Name
1172+ 6A27             >PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1172+ 6A27 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1172+ 6A27             >                else
1172+ 6A27 29 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1172+ 6A29             >                endif           ; ok        // for other definitions it "points" the correct handler
1172+ 6A29             >                // Use of "; ok" to suppress "warning[fwdref]"
1172+ 6A29             >
1172+ 6A29             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1173+ 6A29 E1                           pop     hl
1174+ 6A2A D1                           pop     de
1175+ 6A2B 19                           add     hl, de
1176+ 6A2C
1177+ 6A2C                              psh1
1177+ 6A2C E5          >                push    hl
1177+ 6A2D DD E9       >                jp      (ix)
1178+ 6A2F
1179+ 6A2F
1180+ 6A2F              //  ______________________________________________________________________
1181+ 6A2F              //
1182+ 6A2F              // d+           d1 d2 -- d3
1183+ 6A2F              // returns the unsigned sum of two top double-numbers
1184+ 6A2F              //      d2  d1
1185+ 6A2F              //      h l h l
1186+ 6A2F              // SP   LHEDLHED
1187+ 6A2F              // SP  +01234567
1188+ 6A2F                              New_Def DPLUS, "D+", is_code, is_normal
1188+ 6A2F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1188+ 6A2F             >
1188+ 6A2F             >                // dummy db directives used to calculate length of namec
1188+ 6A2F 44 2B       >                db      "D+"
1188+ 6A31             >len_NFA         defl    $ - temp_NFA
1188+ 6A31             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1188+ 6A2F             >
1188+ 6A2F 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1188+ 6A30 44 2B       >                db      "D+"               // name string in 7-bit ascii, but
1188+ 6A32             >                org     $-1                 // alter last byte of Name just above to set
1188+ 6A31 AB          >                db      {b $} | END_BIT     // msb as name end
1188+ 6A32             >
1188+ 6A32 23 6A       >                dw      last_NFA            // Link to previous definition Name
1188+ 6A34             >DPLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1188+ 6A34 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1188+ 6A34             >                else
1188+ 6A34 36 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1188+ 6A36             >                endif           ; ok        // for other definitions it "points" the correct handler
1188+ 6A36             >                // Use of "; ok" to suppress "warning[fwdref]"
1188+ 6A36             >
1188+ 6A36             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1189+ 6A36
1190+ 6A36 21 07 00                     ld      hl, 7
1191+ 6A39 39                           add     hl, sp
1192+ 6A3A 56                           ld      d, (hl)
1193+ 6A3B 70                           ld      (hl), b             // Save IP
1194+ 6A3C 2B                           dec     hl
1195+ 6A3D 5E                           ld      e, (hl)
1196+ 6A3E 71                           ld      (hl), c             // de := d1.L
1197+ 6A3F C1                           pop     bc                  // bc := d2.H
1198+ 6A40 E1                           pop     hl                  // hl := d2.L
1199+ 6A41 19                           add     hl, de              // hl := d2.L + d1.L
1200+ 6A42 EB                           ex      de, hl              // de := lower
1201+ 6A43 E1                           pop     hl                  // d1.H
1202+ 6A44 ED 4A                        adc     hl, bc              // d1.H + d2.H
1203+ 6A46 C1                           pop     bc                  // Restore IP
1204+ 6A47
1205+ 6A47
1206+ 6A47                              psh2
1206+ 6A47 D5          >                push    de
1206+ 6A48 E5          >                push    hl
1206+ 6A49 DD E9       >                jp      (ix)
1207+ 6A4B
1208+ 6A4B              //  ______________________________________________________________________
1209+ 6A4B              //
1210+ 6A4B              // 1+           n1 -- n2
1211+ 6A4B              // increment by 1 top of stack
1212+ 6A4B                              New_Def ONE_PLUS, "1+", is_code, is_normal
1212+ 6A4B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1212+ 6A4B             >
1212+ 6A4B             >                // dummy db directives used to calculate length of namec
1212+ 6A4B 31 2B       >                db      "1+"
1212+ 6A4D             >len_NFA         defl    $ - temp_NFA
1212+ 6A4D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1212+ 6A4B             >
1212+ 6A4B 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1212+ 6A4C 31 2B       >                db      "1+"               // name string in 7-bit ascii, but
1212+ 6A4E             >                org     $-1                 // alter last byte of Name just above to set
1212+ 6A4D AB          >                db      {b $} | END_BIT     // msb as name end
1212+ 6A4E             >
1212+ 6A4E 2F 6A       >                dw      last_NFA            // Link to previous definition Name
1212+ 6A50             >ONE_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1212+ 6A50 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1212+ 6A50             >                else
1212+ 6A50 52 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1212+ 6A52             >                endif           ; ok        // for other definitions it "points" the correct handler
1212+ 6A52             >                // Use of "; ok" to suppress "warning[fwdref]"
1212+ 6A52             >
1212+ 6A52             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1213+ 6A52 E1                           pop     hl
1214+ 6A53 23                           inc     hl
1215+ 6A54
1216+ 6A54                              psh1
1216+ 6A54 E5          >                push    hl
1216+ 6A55 DD E9       >                jp      (ix)
1217+ 6A57
1218+ 6A57              //  ______________________________________________________________________
1219+ 6A57              //
1220+ 6A57              // 1-           n1 -- n2
1221+ 6A57              // decrement by 1 top of stack
1222+ 6A57                              New_Def ONE_SUBTRACT, "1-", is_code, is_normal
1222+ 6A57             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1222+ 6A57             >
1222+ 6A57             >                // dummy db directives used to calculate length of namec
1222+ 6A57 31 2D       >                db      "1-"
1222+ 6A59             >len_NFA         defl    $ - temp_NFA
1222+ 6A59             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1222+ 6A57             >
1222+ 6A57 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1222+ 6A58 31 2D       >                db      "1-"               // name string in 7-bit ascii, but
1222+ 6A5A             >                org     $-1                 // alter last byte of Name just above to set
1222+ 6A59 AD          >                db      {b $} | END_BIT     // msb as name end
1222+ 6A5A             >
1222+ 6A5A 4B 6A       >                dw      last_NFA            // Link to previous definition Name
1222+ 6A5C             >ONE_SUBTRACT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1222+ 6A5C ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1222+ 6A5C             >                else
1222+ 6A5C 5E 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1222+ 6A5E             >                endif           ; ok        // for other definitions it "points" the correct handler
1222+ 6A5E             >                // Use of "; ok" to suppress "warning[fwdref]"
1222+ 6A5E             >
1222+ 6A5E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1223+ 6A5E E1                           pop     hl
1224+ 6A5F 2B                           dec     hl
1225+ 6A60
1226+ 6A60                              psh1
1226+ 6A60 E5          >                push    hl
1226+ 6A61 DD E9       >                jp      (ix)
1227+ 6A63
1228+ 6A63              //  ______________________________________________________________________
1229+ 6A63              //
1230+ 6A63              // 2+           n1 -- n2
1231+ 6A63              // increment by 2 top of stack
1232+ 6A63                              New_Def TWO_PLUS, "2+", is_code, is_normal
1232+ 6A63             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1232+ 6A63             >
1232+ 6A63             >                // dummy db directives used to calculate length of namec
1232+ 6A63 32 2B       >                db      "2+"
1232+ 6A65             >len_NFA         defl    $ - temp_NFA
1232+ 6A65             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1232+ 6A63             >
1232+ 6A63 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1232+ 6A64 32 2B       >                db      "2+"               // name string in 7-bit ascii, but
1232+ 6A66             >                org     $-1                 // alter last byte of Name just above to set
1232+ 6A65 AB          >                db      {b $} | END_BIT     // msb as name end
1232+ 6A66             >
1232+ 6A66 57 6A       >                dw      last_NFA            // Link to previous definition Name
1232+ 6A68             >TWO_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1232+ 6A68 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1232+ 6A68             >                else
1232+ 6A68 6A 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1232+ 6A6A             >                endif           ; ok        // for other definitions it "points" the correct handler
1232+ 6A6A             >                // Use of "; ok" to suppress "warning[fwdref]"
1232+ 6A6A             >
1232+ 6A6A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1233+ 6A6A              Two_Plus:
1234+ 6A6A E1                           pop     hl
1235+ 6A6B 23                           inc     hl
1236+ 6A6C 23                           inc     hl
1237+ 6A6D
1238+ 6A6D                              psh1
1238+ 6A6D E5          >                push    hl
1238+ 6A6E DD E9       >                jp      (ix)
1239+ 6A70
1240+ 6A70              //  ______________________________________________________________________
1241+ 6A70              //
1242+ 6A70              // cell+        a1 -- a2
1243+ 6A70              // increment by 2 top of stack
1244+ 6A70                              New_Def CELL_PLUS, "CELL+", Two_Plus, is_normal
1244+ 6A70             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1244+ 6A70             >
1244+ 6A70             >                // dummy db directives used to calculate length of namec
1244+ 6A70 43 45 4C 4C >                db      "CELL+"
1244+ 6A74 2B          >
1244+ 6A75             >len_NFA         defl    $ - temp_NFA
1244+ 6A75             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1244+ 6A70             >
1244+ 6A70 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1244+ 6A71 43 45 4C 4C >                db      "CELL+"               // name string in 7-bit ascii, but
1244+ 6A75 2B          >
1244+ 6A76             >                org     $-1                 // alter last byte of Name just above to set
1244+ 6A75 AB          >                db      {b $} | END_BIT     // msb as name end
1244+ 6A76             >
1244+ 6A76 63 6A       >                dw      last_NFA            // Link to previous definition Name
1244+ 6A78             >CELL_PLUS:          if Two_Plus != 0 ; ok        // This is the start address of the direct jp(hl)
1244+ 6A78 6A 6A       >                dw      Two_Plus ; ok        // for primitive definitions  actual code
1244+ 6A7A             >                else
1244+ 6A7A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1244+ 6A7A             >                endif           ; ok        // for other definitions it "points" the correct handler
1244+ 6A7A             >                // Use of "; ok" to suppress "warning[fwdref]"
1244+ 6A7A             >
1244+ 6A7A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1245+ 6A7A
1246+ 6A7A              //  ______________________________________________________________________
1247+ 6A7A              //
1248+ 6A7A              // align        a1 -- a2
1249+ 6A7A              // align memory : not used
1250+ 6A7A                              New_Def ALIGN_ADDR, "ALIGN", is_code, is_normal
1250+ 6A7A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1250+ 6A7A             >
1250+ 6A7A             >                // dummy db directives used to calculate length of namec
1250+ 6A7A 41 4C 49 47 >                db      "ALIGN"
1250+ 6A7E 4E          >
1250+ 6A7F             >len_NFA         defl    $ - temp_NFA
1250+ 6A7F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1250+ 6A7A             >
1250+ 6A7A 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1250+ 6A7B 41 4C 49 47 >                db      "ALIGN"               // name string in 7-bit ascii, but
1250+ 6A7F 4E          >
1250+ 6A80             >                org     $-1                 // alter last byte of Name just above to set
1250+ 6A7F CE          >                db      {b $} | END_BIT     // msb as name end
1250+ 6A80             >
1250+ 6A80 70 6A       >                dw      last_NFA            // Link to previous definition Name
1250+ 6A82             >ALIGN_ADDR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1250+ 6A82 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1250+ 6A82             >                else
1250+ 6A82 84 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1250+ 6A84             >                endif           ; ok        // for other definitions it "points" the correct handler
1250+ 6A84             >                // Use of "; ok" to suppress "warning[fwdref]"
1250+ 6A84             >
1250+ 6A84             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1251+ 6A84                              next
1251+ 6A84 DD E9       >                jp      (ix)
1252+ 6A86
1253+ 6A86              //  ______________________________________________________________________
1254+ 6A86              //
1255+ 6A86              // cell-        a1 -- a2
1256+ 6A86              // decrement by 2 top of stack
1257+ 6A86                              New_Def CELL_MINUS, "CELL-", is_code, is_normal
1257+ 6A86             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1257+ 6A86             >
1257+ 6A86             >                // dummy db directives used to calculate length of namec
1257+ 6A86 43 45 4C 4C >                db      "CELL-"
1257+ 6A8A 2D          >
1257+ 6A8B             >len_NFA         defl    $ - temp_NFA
1257+ 6A8B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1257+ 6A86             >
1257+ 6A86 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1257+ 6A87 43 45 4C 4C >                db      "CELL-"               // name string in 7-bit ascii, but
1257+ 6A8B 2D          >
1257+ 6A8C             >                org     $-1                 // alter last byte of Name just above to set
1257+ 6A8B AD          >                db      {b $} | END_BIT     // msb as name end
1257+ 6A8C             >
1257+ 6A8C 7A 6A       >                dw      last_NFA            // Link to previous definition Name
1257+ 6A8E             >CELL_MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1257+ 6A8E ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1257+ 6A8E             >                else
1257+ 6A8E 90 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1257+ 6A90             >                endif           ; ok        // for other definitions it "points" the correct handler
1257+ 6A90             >                // Use of "; ok" to suppress "warning[fwdref]"
1257+ 6A90             >
1257+ 6A90             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1258+ 6A90 E1                           pop     hl
1259+ 6A91 2B                           dec     hl
1260+ 6A92 2B                           dec     hl
1261+ 6A93
1262+ 6A93                              psh1
1262+ 6A93 E5          >                push    hl
1262+ 6A94 DD E9       >                jp      (ix)
1263+ 6A96
1264+ 6A96              //  ______________________________________________________________________
1265+ 6A96              //
1266+ 6A96              // minus        n1 -- n2
1267+ 6A96              // change the sign of number
1268+ 6A96                              New_Def MINUS, "MINUS", is_code, is_normal
1268+ 6A96             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1268+ 6A96             >
1268+ 6A96             >                // dummy db directives used to calculate length of namec
1268+ 6A96 4D 49 4E 55 >                db      "MINUS"
1268+ 6A9A 53          >
1268+ 6A9B             >len_NFA         defl    $ - temp_NFA
1268+ 6A9B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1268+ 6A96             >
1268+ 6A96 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1268+ 6A97 4D 49 4E 55 >                db      "MINUS"               // name string in 7-bit ascii, but
1268+ 6A9B 53          >
1268+ 6A9C             >                org     $-1                 // alter last byte of Name just above to set
1268+ 6A9B D3          >                db      {b $} | END_BIT     // msb as name end
1268+ 6A9C             >
1268+ 6A9C 86 6A       >                dw      last_NFA            // Link to previous definition Name
1268+ 6A9E             >MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1268+ 6A9E ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1268+ 6A9E             >                else
1268+ 6A9E A0 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1268+ 6AA0             >                endif           ; ok        // for other definitions it "points" the correct handler
1268+ 6AA0             >                // Use of "; ok" to suppress "warning[fwdref]"
1268+ 6AA0             >
1268+ 6AA0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1269+ 6AA0 21 00 00                     ld      hl, 0               // subtract from 0
1270+ 6AA3 D1                           pop     de
1271+ 6AA4 B7                           or      a
1272+ 6AA5 ED 52                        sbc     hl, de
1273+ 6AA7
1274+ 6AA7                              psh1
1274+ 6AA7 E5          >                push    hl
1274+ 6AA8 DD E9       >                jp      (ix)
1275+ 6AAA
1276+ 6AAA              //  ______________________________________________________________________
1277+ 6AAA              //
1278+ 6AAA              // dminus       d1 -- d2
1279+ 6AAA              // change the sign of a double number
1280+ 6AAA                              New_Def DMINUS, "DMINUS", is_code, is_normal
1280+ 6AAA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1280+ 6AAA             >
1280+ 6AAA             >                // dummy db directives used to calculate length of namec
1280+ 6AAA 44 4D 49 4E >                db      "DMINUS"
1280+ 6AAE 55 53       >
1280+ 6AB0             >len_NFA         defl    $ - temp_NFA
1280+ 6AB0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1280+ 6AAA             >
1280+ 6AAA 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1280+ 6AAB 44 4D 49 4E >                db      "DMINUS"               // name string in 7-bit ascii, but
1280+ 6AAF 55 53       >
1280+ 6AB1             >                org     $-1                 // alter last byte of Name just above to set
1280+ 6AB0 D3          >                db      {b $} | END_BIT     // msb as name end
1280+ 6AB1             >
1280+ 6AB1 96 6A       >                dw      last_NFA            // Link to previous definition Name
1280+ 6AB3             >DMINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1280+ 6AB3 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1280+ 6AB3             >                else
1280+ 6AB3 B5 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1280+ 6AB5             >                endif           ; ok        // for other definitions it "points" the correct handler
1280+ 6AB5             >                // Use of "; ok" to suppress "warning[fwdref]"
1280+ 6AB5             >
1280+ 6AB5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1281+ 6AB5 E1                           pop     hl                  // d1.H
1282+ 6AB6 D1                           pop     de                  // d1.L
1283+ 6AB7 C5                           push    bc                  // Save Instruction Pointer
1284+ 6AB8 44                           ld      b, h
1285+ 6AB9 4D                           ld      c, l                // bc := d1.L
1286+ 6ABA AF                           xor     a
1287+ 6ABB 67                           ld      h, a
1288+ 6ABC 6F                           ld      l, a
1289+ 6ABD ED 52                        sbc     hl, de              // subtact from zero
1290+ 6ABF D1                           pop     de                  // Retrieve Instruction Pointer
1291+ 6AC0 E5                           push    hl                  // > d2-L
1292+ 6AC1 67                           ld      h, a
1293+ 6AC2 6F                           ld      l, a
1294+ 6AC3 ED 42                        sbc     hl, bc              // subtract from zero with carry
1295+ 6AC5                                                          // > d2-H
1296+ 6AC5 42                           ld      b, d
1297+ 6AC6 4B                           ld      c, e
1298+ 6AC7                              psh1
1298+ 6AC7 E5          >                push    hl
1298+ 6AC8 DD E9       >                jp      (ix)
1299+ 6ACA
1300+ 6ACA              //  ______________________________________________________________________
1301+ 6ACA              //
1302+ 6ACA              // over         n1 n2 -- n1 n2 n1
1303+ 6ACA              // copy the second value of stack and put it on top.
1304+ 6ACA                              New_Def OVER, "OVER", is_code, is_normal
1304+ 6ACA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1304+ 6ACA             >
1304+ 6ACA             >                // dummy db directives used to calculate length of namec
1304+ 6ACA 4F 56 45 52 >                db      "OVER"
1304+ 6ACE             >len_NFA         defl    $ - temp_NFA
1304+ 6ACE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1304+ 6ACA             >
1304+ 6ACA 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1304+ 6ACB 4F 56 45 52 >                db      "OVER"               // name string in 7-bit ascii, but
1304+ 6ACF             >                org     $-1                 // alter last byte of Name just above to set
1304+ 6ACE D2          >                db      {b $} | END_BIT     // msb as name end
1304+ 6ACF             >
1304+ 6ACF AA 6A       >                dw      last_NFA            // Link to previous definition Name
1304+ 6AD1             >OVER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1304+ 6AD1 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1304+ 6AD1             >                else
1304+ 6AD1 D3 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1304+ 6AD3             >                endif           ; ok        // for other definitions it "points" the correct handler
1304+ 6AD3             >                // Use of "; ok" to suppress "warning[fwdref]"
1304+ 6AD3             >
1304+ 6AD3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1305+ 6AD3 D1                           pop     de                  //   n2
1306+ 6AD4 E1                           pop     hl                  // < n1
1307+ 6AD5 E5                           push    hl                  // > n1
1308+ 6AD6 D5                           push    de                  // > n2
1309+ 6AD7 E5                           push    hl                  // > n1
1310+ 6AD8                              next
1310+ 6AD8 DD E9       >                jp      (ix)
1311+ 6ADA
1312+ 6ADA              //  ______________________________________________________________________
1313+ 6ADA              //
1314+ 6ADA              // drop         n1 --
1315+ 6ADA              // drops the top of stack
1316+ 6ADA                              New_Def DROP, "DROP", is_code, is_normal
1316+ 6ADA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1316+ 6ADA             >
1316+ 6ADA             >                // dummy db directives used to calculate length of namec
1316+ 6ADA 44 52 4F 50 >                db      "DROP"
1316+ 6ADE             >len_NFA         defl    $ - temp_NFA
1316+ 6ADE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1316+ 6ADA             >
1316+ 6ADA 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1316+ 6ADB 44 52 4F 50 >                db      "DROP"               // name string in 7-bit ascii, but
1316+ 6ADF             >                org     $-1                 // alter last byte of Name just above to set
1316+ 6ADE D0          >                db      {b $} | END_BIT     // msb as name end
1316+ 6ADF             >
1316+ 6ADF CA 6A       >                dw      last_NFA            // Link to previous definition Name
1316+ 6AE1             >DROP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1316+ 6AE1 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1316+ 6AE1             >                else
1316+ 6AE1 E3 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1316+ 6AE3             >                endif           ; ok        // for other definitions it "points" the correct handler
1316+ 6AE3             >                // Use of "; ok" to suppress "warning[fwdref]"
1316+ 6AE3             >
1316+ 6AE3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1317+ 6AE3 E1                           pop     hl                  // < n1 and discard previous TOS
1318+ 6AE4                              next
1318+ 6AE4 DD E9       >                jp      (ix)
1319+ 6AE6
1320+ 6AE6              //  ______________________________________________________________________
1321+ 6AE6              //
1322+ 6AE6              // nip          n1 n2 -- n2
1323+ 6AE6              // drops the second elemento on the stack
1324+ 6AE6                              New_Def NIP, "NIP", is_code, is_normal
1324+ 6AE6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1324+ 6AE6             >
1324+ 6AE6             >                // dummy db directives used to calculate length of namec
1324+ 6AE6 4E 49 50    >                db      "NIP"
1324+ 6AE9             >len_NFA         defl    $ - temp_NFA
1324+ 6AE9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1324+ 6AE6             >
1324+ 6AE6 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1324+ 6AE7 4E 49 50    >                db      "NIP"               // name string in 7-bit ascii, but
1324+ 6AEA             >                org     $-1                 // alter last byte of Name just above to set
1324+ 6AE9 D0          >                db      {b $} | END_BIT     // msb as name end
1324+ 6AEA             >
1324+ 6AEA DA 6A       >                dw      last_NFA            // Link to previous definition Name
1324+ 6AEC             >NIP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1324+ 6AEC ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1324+ 6AEC             >                else
1324+ 6AEC EE 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1324+ 6AEE             >                endif           ; ok        // for other definitions it "points" the correct handler
1324+ 6AEE             >                // Use of "; ok" to suppress "warning[fwdref]"
1324+ 6AEE             >
1324+ 6AEE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1325+ 6AEE
1326+ 6AEE E1                           pop     hl                  // < n1 discarded
1327+ 6AEF E3                           ex      (sp), hl
1328+ 6AF0                              next
1328+ 6AF0 DD E9       >                jp      (ix)
1329+ 6AF2
1330+ 6AF2              //  ______________________________________________________________________
1331+ 6AF2              //
1332+ 6AF2              // tuck         n1 n2 -- n2 n1 n2
1333+ 6AF2              // copy the top element after the second.
1334+ 6AF2                              New_Def TUCK, "TUCK", is_code, is_normal
1334+ 6AF2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1334+ 6AF2             >
1334+ 6AF2             >                // dummy db directives used to calculate length of namec
1334+ 6AF2 54 55 43 4B >                db      "TUCK"
1334+ 6AF6             >len_NFA         defl    $ - temp_NFA
1334+ 6AF6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1334+ 6AF2             >
1334+ 6AF2 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1334+ 6AF3 54 55 43 4B >                db      "TUCK"               // name string in 7-bit ascii, but
1334+ 6AF7             >                org     $-1                 // alter last byte of Name just above to set
1334+ 6AF6 CB          >                db      {b $} | END_BIT     // msb as name end
1334+ 6AF7             >
1334+ 6AF7 E6 6A       >                dw      last_NFA            // Link to previous definition Name
1334+ 6AF9             >TUCK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1334+ 6AF9 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1334+ 6AF9             >                else
1334+ 6AF9 FB 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1334+ 6AFB             >                endif           ; ok        // for other definitions it "points" the correct handler
1334+ 6AFB             >                // Use of "; ok" to suppress "warning[fwdref]"
1334+ 6AFB             >
1334+ 6AFB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1335+ 6AFB E1                           pop     hl
1336+ 6AFC D1                           pop     de                  // < n1
1337+ 6AFD E5                           push    hl                  // > n2  and TOS
1338+ 6AFE D5                           push    de                  // > n1
1339+ 6AFF E5                           push    hl
1340+ 6B00                              next
1340+ 6B00 DD E9       >                jp      (ix)
1341+ 6B02
1342+ 6B02              //  ______________________________________________________________________
1343+ 6B02              //
1344+ 6B02              // swap         n1 n2 -- n2 n1
1345+ 6B02              // swaps the two values on top of stack
1346+ 6B02                              New_Def SWAP, "SWAP", is_code, is_normal
1346+ 6B02             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1346+ 6B02             >
1346+ 6B02             >                // dummy db directives used to calculate length of namec
1346+ 6B02 53 57 41 50 >                db      "SWAP"
1346+ 6B06             >len_NFA         defl    $ - temp_NFA
1346+ 6B06             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1346+ 6B02             >
1346+ 6B02 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1346+ 6B03 53 57 41 50 >                db      "SWAP"               // name string in 7-bit ascii, but
1346+ 6B07             >                org     $-1                 // alter last byte of Name just above to set
1346+ 6B06 D0          >                db      {b $} | END_BIT     // msb as name end
1346+ 6B07             >
1346+ 6B07 F2 6A       >                dw      last_NFA            // Link to previous definition Name
1346+ 6B09             >SWAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1346+ 6B09 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1346+ 6B09             >                else
1346+ 6B09 0B 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1346+ 6B0B             >                endif           ; ok        // for other definitions it "points" the correct handler
1346+ 6B0B             >                // Use of "; ok" to suppress "warning[fwdref]"
1346+ 6B0B             >
1346+ 6B0B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1347+ 6B0B E1                           pop     hl                  // < n1
1348+ 6B0C E3                           ex      (sp),hl             // > n2
1349+ 6B0D E5                           push    hl                  // copy n1 to TOS
1350+ 6B0E                              next
1350+ 6B0E DD E9       >                jp      (ix)
1351+ 6B10
1352+ 6B10              //  ______________________________________________________________________
1353+ 6B10              //
1354+ 6B10              // dup         n -- n n
1355+ 6B10              // duplicates the top value of stack
1356+ 6B10                              New_Def DUP, "DUP", is_code, is_normal
1356+ 6B10             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1356+ 6B10             >
1356+ 6B10             >                // dummy db directives used to calculate length of namec
1356+ 6B10 44 55 50    >                db      "DUP"
1356+ 6B13             >len_NFA         defl    $ - temp_NFA
1356+ 6B13             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1356+ 6B10             >
1356+ 6B10 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1356+ 6B11 44 55 50    >                db      "DUP"               // name string in 7-bit ascii, but
1356+ 6B14             >                org     $-1                 // alter last byte of Name just above to set
1356+ 6B13 D0          >                db      {b $} | END_BIT     // msb as name end
1356+ 6B14             >
1356+ 6B14 02 6B       >                dw      last_NFA            // Link to previous definition Name
1356+ 6B16             >DUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1356+ 6B16 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1356+ 6B16             >                else
1356+ 6B16 18 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1356+ 6B18             >                endif           ; ok        // for other definitions it "points" the correct handler
1356+ 6B18             >                // Use of "; ok" to suppress "warning[fwdref]"
1356+ 6B18             >
1356+ 6B18             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1357+ 6B18 E1                           pop     hl
1358+ 6B19 E5                           push    hl                  // > n duplicate TOS
1359+ 6B1A E5                           push    hl
1360+ 6B1B                              next
1360+ 6B1B DD E9       >                jp      (ix)
1361+ 6B1D
1362+ 6B1D              //  ______________________________________________________________________
1363+ 6B1D              //
1364+ 6B1D              // rot         n1 n2 n3 -- n2 n3 n1
1365+ 6B1D              // Rotates the 3 top values of stack by picking the 3rd in access-order
1366+ 6B1D              // and putting it on top. The other two are shifted down one place.
1367+ 6B1D                              New_Def ROT, "ROT", is_code, is_normal
1367+ 6B1D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1367+ 6B1D             >
1367+ 6B1D             >                // dummy db directives used to calculate length of namec
1367+ 6B1D 52 4F 54    >                db      "ROT"
1367+ 6B20             >len_NFA         defl    $ - temp_NFA
1367+ 6B20             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1367+ 6B1D             >
1367+ 6B1D 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1367+ 6B1E 52 4F 54    >                db      "ROT"               // name string in 7-bit ascii, but
1367+ 6B21             >                org     $-1                 // alter last byte of Name just above to set
1367+ 6B20 D4          >                db      {b $} | END_BIT     // msb as name end
1367+ 6B21             >
1367+ 6B21 10 6B       >                dw      last_NFA            // Link to previous definition Name
1367+ 6B23             >ROT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1367+ 6B23 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1367+ 6B23             >                else
1367+ 6B23 25 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1367+ 6B25             >                endif           ; ok        // for other definitions it "points" the correct handler
1367+ 6B25             >                // Use of "; ok" to suppress "warning[fwdref]"
1367+ 6B25             >
1367+ 6B25             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1368+ 6B25 D1                           pop     de                  // < n2
1369+ 6B26 E1                           pop     hl                  // < n1
1370+ 6B27 E3                           ex      (sp),hl             // > n2
1371+ 6B28 D5                           push    de                  // > n3
1372+ 6B29 E5                           push    hl                  // copy n1 to TOS
1373+ 6B2A                              next
1373+ 6B2A DD E9       >                jp      (ix)
1374+ 6B2C
1375+ 6B2C              //  ______________________________________________________________________
1376+ 6B2C              //
1377+ 6B2C              // pick        n1 -- nx
1378+ 6B2C              // picks the nth element from TOS
1379+ 6B2C                              New_Def PICK, "PICK", is_code, is_normal
1379+ 6B2C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1379+ 6B2C             >
1379+ 6B2C             >                // dummy db directives used to calculate length of namec
1379+ 6B2C 50 49 43 4B >                db      "PICK"
1379+ 6B30             >len_NFA         defl    $ - temp_NFA
1379+ 6B30             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1379+ 6B2C             >
1379+ 6B2C 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1379+ 6B2D 50 49 43 4B >                db      "PICK"               // name string in 7-bit ascii, but
1379+ 6B31             >                org     $-1                 // alter last byte of Name just above to set
1379+ 6B30 CB          >                db      {b $} | END_BIT     // msb as name end
1379+ 6B31             >
1379+ 6B31 1D 6B       >                dw      last_NFA            // Link to previous definition Name
1379+ 6B33             >PICK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1379+ 6B33 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1379+ 6B33             >                else
1379+ 6B33 35 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1379+ 6B35             >                endif           ; ok        // for other definitions it "points" the correct handler
1379+ 6B35             >                // Use of "; ok" to suppress "warning[fwdref]"
1379+ 6B35             >
1379+ 6B35             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1380+ 6B35 E1                           pop     hl                  // take TOS as index
1381+ 6B36 29                           add     hl, hl              // as cells
1382+ 6B37 39                           add     hl, sp              // from Stack Pointer
1383+ 6B38 7E                           ld      a, (hl)             // replace TOS
1384+ 6B39 23                           inc     hl
1385+ 6B3A 66                           ld      h, (hl)
1386+ 6B3B 6F                           ld      l, a
1387+ 6B3C
1388+ 6B3C                              psh1
1388+ 6B3C E5          >                push    hl
1388+ 6B3D DD E9       >                jp      (ix)
1389+ 6B3F
1390+ 6B3F
1391+ 6B3F              //  ______________________________________________________________________
1392+ 6B3F              //
1393+ 6B3F              // 2over        d1 d2 -- d1 d2 d1
1394+ 6B3F              //              n1 n2 n3 n4 -- n1 n2 n3 n4 n1 n2
1395+ 6B3F              // copy the second double of stack and put on top.
1396+ 6B3F                              New_Def TWO_OVER, "2OVER", is_code, is_normal
1396+ 6B3F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1396+ 6B3F             >
1396+ 6B3F             >                // dummy db directives used to calculate length of namec
1396+ 6B3F 32 4F 56 45 >                db      "2OVER"
1396+ 6B43 52          >
1396+ 6B44             >len_NFA         defl    $ - temp_NFA
1396+ 6B44             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1396+ 6B3F             >
1396+ 6B3F 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1396+ 6B40 32 4F 56 45 >                db      "2OVER"               // name string in 7-bit ascii, but
1396+ 6B44 52          >
1396+ 6B45             >                org     $-1                 // alter last byte of Name just above to set
1396+ 6B44 D2          >                db      {b $} | END_BIT     // msb as name end
1396+ 6B45             >
1396+ 6B45 2C 6B       >                dw      last_NFA            // Link to previous definition Name
1396+ 6B47             >TWO_OVER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1396+ 6B47 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1396+ 6B47             >                else
1396+ 6B47 49 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1396+ 6B49             >                endif           ; ok        // for other definitions it "points" the correct handler
1396+ 6B49             >                // Use of "; ok" to suppress "warning[fwdref]"
1396+ 6B49             >
1396+ 6B49             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1397+ 6B49
1398+ 6B49 21 07 00                     ld      hl, 7
1399+ 6B4C 39                           add     hl, sp
1400+ 6B4D 56                           ld      d, (hl)
1401+ 6B4E 2B                           dec     hl
1402+ 6B4F 5E                           ld      e, (hl)             // d1-L
1403+ 6B50 D5                           push    de
1404+ 6B51 2B                           dec     hl
1405+ 6B52 56                           ld      d, (hl)
1406+ 6B53 2B                           dec     hl
1407+ 6B54 5E                           ld      e, (hl)             // d1-H
1408+ 6B55 D5                           push    de
1409+ 6B56                              next
1409+ 6B56 DD E9       >                jp      (ix)
1410+ 6B58
1411+ 6B58              //  ______________________________________________________________________
1412+ 6B58              //
1413+ 6B58              // 2drop        d --
1414+ 6B58              //              n1 n2 --
1415+ 6B58              // drops the top double from stack
1416+ 6B58                              New_Def TWO_DROP, "2DROP", is_code, is_normal
1416+ 6B58             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1416+ 6B58             >
1416+ 6B58             >                // dummy db directives used to calculate length of namec
1416+ 6B58 32 44 52 4F >                db      "2DROP"
1416+ 6B5C 50          >
1416+ 6B5D             >len_NFA         defl    $ - temp_NFA
1416+ 6B5D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1416+ 6B58             >
1416+ 6B58 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1416+ 6B59 32 44 52 4F >                db      "2DROP"               // name string in 7-bit ascii, but
1416+ 6B5D 50          >
1416+ 6B5E             >                org     $-1                 // alter last byte of Name just above to set
1416+ 6B5D D0          >                db      {b $} | END_BIT     // msb as name end
1416+ 6B5E             >
1416+ 6B5E 3F 6B       >                dw      last_NFA            // Link to previous definition Name
1416+ 6B60             >TWO_DROP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1416+ 6B60 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1416+ 6B60             >                else
1416+ 6B60 62 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1416+ 6B62             >                endif           ; ok        // for other definitions it "points" the correct handler
1416+ 6B62             >                // Use of "; ok" to suppress "warning[fwdref]"
1416+ 6B62             >
1416+ 6B62             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1417+ 6B62 E1                           pop     hl
1418+ 6B63 E1                           pop     hl
1419+ 6B64                              next
1419+ 6B64 DD E9       >                jp      (ix)
1420+ 6B66
1421+ 6B66              //  ______________________________________________________________________
1422+ 6B66              //
1423+ 6B66              // 2nip         d1 d2 -- d2
1424+ 6B66              //              n1 n2 n3 n4 -- n3 n4
1425+ 6B66              // drops the second double on the stack
1426+ 6B66              //              New_Def TWO_NIP, 4, "2nip"
1427+ 6B66              //              ...
1428+ 6B66
1429+ 6B66              //  ______________________________________________________________________
1430+ 6B66              //
1431+ 6B66              // 2tuck         d1 d2 -- d2 d1 d2
1432+ 6B66              // copy the top element after the second.
1433+ 6B66              //              New_Def TWO_TUCK, 5, "2tuck"
1434+ 6B66              //              ...
1435+ 6B66
1436+ 6B66              //  ______________________________________________________________________
1437+ 6B66              //
1438+ 6B66              // 2swap         d1 d2 -- d2 d1
1439+ 6B66              //               n1 n2 n3 n4 -- n3 n4 n1 n2
1440+ 6B66              // swaps the two doubles on top of stack
1441+ 6B66                              New_Def TWO_SWAP, "2SWAP", is_code, is_normal
1441+ 6B66             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1441+ 6B66             >
1441+ 6B66             >                // dummy db directives used to calculate length of namec
1441+ 6B66 32 53 57 41 >                db      "2SWAP"
1441+ 6B6A 50          >
1441+ 6B6B             >len_NFA         defl    $ - temp_NFA
1441+ 6B6B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1441+ 6B66             >
1441+ 6B66 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1441+ 6B67 32 53 57 41 >                db      "2SWAP"               // name string in 7-bit ascii, but
1441+ 6B6B 50          >
1441+ 6B6C             >                org     $-1                 // alter last byte of Name just above to set
1441+ 6B6B D0          >                db      {b $} | END_BIT     // msb as name end
1441+ 6B6C             >
1441+ 6B6C 58 6B       >                dw      last_NFA            // Link to previous definition Name
1441+ 6B6E             >TWO_SWAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1441+ 6B6E ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1441+ 6B6E             >                else
1441+ 6B6E 70 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1441+ 6B70             >                endif           ; ok        // for other definitions it "points" the correct handler
1441+ 6B70             >                // Use of "; ok" to suppress "warning[fwdref]"
1441+ 6B70             >
1441+ 6B70             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1442+ 6B70 F1                           pop     af                  //   d2-H
1443+ 6B71 E1                           pop     hl                  // < d2-L
1444+ 6B72 D1                           pop     de                  // < d1-H
1445+ 6B73 E3                           ex      (sp), hl            // < d1-L > d2-L
1446+ 6B74 F5                           push    af                  // > d2-H
1447+ 6B75 E5                           push    hl                  // > d1-L
1448+ 6B76 D5                           push    de
1449+ 6B77
1450+ 6B77                              next
1450+ 6B77 DD E9       >                jp      (ix)
1451+ 6B79
1452+ 6B79              //  ______________________________________________________________________
1453+ 6B79              //
1454+ 6B79              // 2dup         d -- d d
1455+ 6B79              //              n1 n2 -- n1 n2 n1 n2
1456+ 6B79              // duplicates the top double of stack
1457+ 6B79                              New_Def TWO_DUP, "2DUP", is_code, is_normal
1457+ 6B79             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1457+ 6B79             >
1457+ 6B79             >                // dummy db directives used to calculate length of namec
1457+ 6B79 32 44 55 50 >                db      "2DUP"
1457+ 6B7D             >len_NFA         defl    $ - temp_NFA
1457+ 6B7D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1457+ 6B79             >
1457+ 6B79 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1457+ 6B7A 32 44 55 50 >                db      "2DUP"               // name string in 7-bit ascii, but
1457+ 6B7E             >                org     $-1                 // alter last byte of Name just above to set
1457+ 6B7D D0          >                db      {b $} | END_BIT     // msb as name end
1457+ 6B7E             >
1457+ 6B7E 66 6B       >                dw      last_NFA            // Link to previous definition Name
1457+ 6B80             >TWO_DUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1457+ 6B80 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1457+ 6B80             >                else
1457+ 6B80 82 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1457+ 6B82             >                endif           ; ok        // for other definitions it "points" the correct handler
1457+ 6B82             >                // Use of "; ok" to suppress "warning[fwdref]"
1457+ 6B82             >
1457+ 6B82             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1458+ 6B82 E1                           pop     hl                  // < d-H
1459+ 6B83 D1                           pop     de                  // < d-L
1460+ 6B84 D5                           push    de                  // < d-L
1461+ 6B85 E5                           push    hl                  // > d-H
1462+ 6B86 D5                           push    de                  // > d-L
1463+ 6B87 E5                           push    hl                  // > d-H
1464+ 6B88                              next
1464+ 6B88 DD E9       >                jp      (ix)
1465+ 6B8A
1466+ 6B8A              //  ______________________________________________________________________
1467+ 6B8A              //
1468+ 6B8A              // 2rot         d1 d2 d3 -- d2 d3 d1
1469+ 6B8A              //              n1 n2 n3 n4 n5 n6 -- n3 n4 n5 n6 n1 n2
1470+ 6B8A              // Rotates the 3 top doubles of stack by picking the 3rd in access-order
1471+ 6B8A              // and putting it on top. The other two are shifted down one place.
1472+ 6B8A              //              New_Def TWO?ROT, 4, "2rot"
1473+ 6B8A              //              ...
1474+ 6B8A                              New_Def TWO_ROT, "2ROT", is_code, is_normal
1474+ 6B8A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1474+ 6B8A             >
1474+ 6B8A             >                // dummy db directives used to calculate length of namec
1474+ 6B8A 32 52 4F 54 >                db      "2ROT"
1474+ 6B8E             >len_NFA         defl    $ - temp_NFA
1474+ 6B8E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1474+ 6B8A             >
1474+ 6B8A 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1474+ 6B8B 32 52 4F 54 >                db      "2ROT"               // name string in 7-bit ascii, but
1474+ 6B8F             >                org     $-1                 // alter last byte of Name just above to set
1474+ 6B8E D4          >                db      {b $} | END_BIT     // msb as name end
1474+ 6B8F             >
1474+ 6B8F 79 6B       >                dw      last_NFA            // Link to previous definition Name
1474+ 6B91             >TWO_ROT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1474+ 6B91 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1474+ 6B91             >                else
1474+ 6B91 93 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1474+ 6B93             >                endif           ; ok        // for other definitions it "points" the correct handler
1474+ 6B93             >                // Use of "; ok" to suppress "warning[fwdref]"
1474+ 6B93             >
1474+ 6B93             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1475+ 6B93
1476+ 6B93              //      d3  |d2  |d1  |
1477+ 6B93              //      h l |h l |h l |
1478+ 6B93              // SP   LHED|LHED|LHED|
1479+ 6B93              // SP  +0123|4567|89ab|
1480+ 6B93 21 0B 00                     ld      hl, $000B
1481+ 6B96 39                           add     hl, sp
1482+ 6B97 56                           ld      d, (hl)
1483+ 6B98 2B                           dec     hl
1484+ 6B99 5E                           ld      e, (hl)
1485+ 6B9A 2B                           dec     hl
1486+ 6B9B D5                           push    de
1487+ 6B9C 56                           ld      d, (hl)
1488+ 6B9D 2B                           dec     hl
1489+ 6B9E 5E                           ld      e, (hl)
1490+ 6B9F 2B                           dec     hl
1491+ 6BA0 D5                           push    de
1492+ 6BA1
1493+ 6BA1              //      d1  |d3  |d2  |d1  |
1494+ 6BA1              //      h l |h l |h l |h l |
1495+ 6BA1              // SP   LHED|LHED|LHED|LHED|
1496+ 6BA1              // SP       +0123|4567|89ab|
1497+ 6BA1
1498+ 6BA1 54                           ld      d, h
1499+ 6BA2 5D                           ld      e, l
1500+ 6BA3 13                           inc     de
1501+ 6BA4 13                           inc     de
1502+ 6BA5 13                           inc     de
1503+ 6BA6 13                           inc     de
1504+ 6BA7 C5                           push    bc
1505+ 6BA8 01 0C 00                     ld      bc, $000C
1506+ 6BAB ED B8                        lddr
1507+ 6BAD C1                           pop     bc
1508+ 6BAE D1                           pop     de
1509+ 6BAF D1                           pop     de
1510+ 6BB0
1511+ 6BB0                              next
1511+ 6BB0 DD E9       >                jp      (ix)
1512+ 6BB2
1513+ 6BB2
1514+ 6BB2              //  ______________________________________________________________________
1515+ 6BB2              //
1516+ 6BB2              // +!           n a --
1517+ 6BB2              // Sums to the content of address a the number n.
1518+ 6BB2              // It is the same of  a @ n + a !
1519+ 6BB2                              New_Def PLUSSTORE, "+!", is_code, is_normal
1519+ 6BB2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1519+ 6BB2             >
1519+ 6BB2             >                // dummy db directives used to calculate length of namec
1519+ 6BB2 2B 21       >                db      "+!"
1519+ 6BB4             >len_NFA         defl    $ - temp_NFA
1519+ 6BB4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1519+ 6BB2             >
1519+ 6BB2 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1519+ 6BB3 2B 21       >                db      "+!"               // name string in 7-bit ascii, but
1519+ 6BB5             >                org     $-1                 // alter last byte of Name just above to set
1519+ 6BB4 A1          >                db      {b $} | END_BIT     // msb as name end
1519+ 6BB5             >
1519+ 6BB5 8A 6B       >                dw      last_NFA            // Link to previous definition Name
1519+ 6BB7             >PLUSSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1519+ 6BB7 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1519+ 6BB7             >                else
1519+ 6BB7 B9 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1519+ 6BB9             >                endif           ; ok        // for other definitions it "points" the correct handler
1519+ 6BB9             >                // Use of "; ok" to suppress "warning[fwdref]"
1519+ 6BB9             >
1519+ 6BB9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1520+ 6BB9 E1                           pop     hl                  // hl is the address
1521+ 6BBA D1                           pop     de                  // de is the number
1522+ 6BBB 7E                           ld      a, (hl)
1523+ 6BBC 83                           add     e
1524+ 6BBD 77                           ld      (hl), a
1525+ 6BBE 23                           inc     hl
1526+ 6BBF 7E                           ld      a, (hl)
1527+ 6BC0 8A                           adc     d
1528+ 6BC1 77                           ld      (hl), a
1529+ 6BC2
1530+ 6BC2                              next
1530+ 6BC2 DD E9       >                jp      (ix)
1531+ 6BC4
1532+ 6BC4              //  ______________________________________________________________________
1533+ 6BC4              //
1534+ 6BC4              // toggle       a n --
1535+ 6BC4              // Complements (xor) the byte at addrress  a  with the model n.
1536+ 6BC4                              New_Def TOGGLE, "TOGGLE", is_code, is_normal
1536+ 6BC4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1536+ 6BC4             >
1536+ 6BC4             >                // dummy db directives used to calculate length of namec
1536+ 6BC4 54 4F 47 47 >                db      "TOGGLE"
1536+ 6BC8 4C 45       >
1536+ 6BCA             >len_NFA         defl    $ - temp_NFA
1536+ 6BCA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1536+ 6BC4             >
1536+ 6BC4 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1536+ 6BC5 54 4F 47 47 >                db      "TOGGLE"               // name string in 7-bit ascii, but
1536+ 6BC9 4C 45       >
1536+ 6BCB             >                org     $-1                 // alter last byte of Name just above to set
1536+ 6BCA C5          >                db      {b $} | END_BIT     // msb as name end
1536+ 6BCB             >
1536+ 6BCB B2 6B       >                dw      last_NFA            // Link to previous definition Name
1536+ 6BCD             >TOGGLE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1536+ 6BCD ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1536+ 6BCD             >                else
1536+ 6BCD CF 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1536+ 6BCF             >                endif           ; ok        // for other definitions it "points" the correct handler
1536+ 6BCF             >                // Use of "; ok" to suppress "warning[fwdref]"
1536+ 6BCF             >
1536+ 6BCF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1537+ 6BCF D1                           pop     de
1538+ 6BD0 E1                           pop     hl
1539+ 6BD1 7E                           ld      a, (hl)
1540+ 6BD2 AB                           xor     e
1541+ 6BD3 77                           ld      (hl), a
1542+ 6BD4
1543+ 6BD4                              next
1543+ 6BD4 DD E9       >                jp      (ix)
1544+ 6BD6
1545+ 6BD6              //  ______________________________________________________________________
1546+ 6BD6              //
1547+ 6BD6              // @            a -- n
1548+ 6BD6              // fetch 16 bit number n from address a. Z80 keeps high byte is in high memory
1549+ 6BD6                              New_Def FETCH, "@", is_code, is_normal
1549+ 6BD6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1549+ 6BD6             >
1549+ 6BD6             >                // dummy db directives used to calculate length of namec
1549+ 6BD6 40          >                db      "@"
1549+ 6BD7             >len_NFA         defl    $ - temp_NFA
1549+ 6BD7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1549+ 6BD6             >
1549+ 6BD6 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1549+ 6BD7 40          >                db      "@"               // name string in 7-bit ascii, but
1549+ 6BD8             >                org     $-1                 // alter last byte of Name just above to set
1549+ 6BD7 C0          >                db      {b $} | END_BIT     // msb as name end
1549+ 6BD8             >
1549+ 6BD8 C4 6B       >                dw      last_NFA            // Link to previous definition Name
1549+ 6BDA             >FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1549+ 6BDA ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1549+ 6BDA             >                else
1549+ 6BDA DC 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1549+ 6BDC             >                endif           ; ok        // for other definitions it "points" the correct handler
1549+ 6BDC             >                // Use of "; ok" to suppress "warning[fwdref]"
1549+ 6BDC             >
1549+ 6BDC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1550+ 6BDC E1                           pop     hl
1551+ 6BDD 5E                           ld      e, (hl)             // low-byte
1552+ 6BDE 23                           inc     hl
1553+ 6BDF 56                           ld      d, (hl)             // high-byte
1554+ 6BE0 D5                           push    de
1555+ 6BE1                              next
1555+ 6BE1 DD E9       >                jp      (ix)
1556+ 6BE3
1557+ 6BE3              //  ______________________________________________________________________
1558+ 6BE3              //
1559+ 6BE3              // !            n a --
1560+ 6BE3              // store 16 bit number n from address a. Z80 keeps high byte is in high memory
1561+ 6BE3                              New_Def STORE, "!", is_code, is_normal
1561+ 6BE3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1561+ 6BE3             >
1561+ 6BE3             >                // dummy db directives used to calculate length of namec
1561+ 6BE3 21          >                db      "!"
1561+ 6BE4             >len_NFA         defl    $ - temp_NFA
1561+ 6BE4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1561+ 6BE3             >
1561+ 6BE3 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1561+ 6BE4 21          >                db      "!"               // name string in 7-bit ascii, but
1561+ 6BE5             >                org     $-1                 // alter last byte of Name just above to set
1561+ 6BE4 A1          >                db      {b $} | END_BIT     // msb as name end
1561+ 6BE5             >
1561+ 6BE5 D6 6B       >                dw      last_NFA            // Link to previous definition Name
1561+ 6BE7             >STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1561+ 6BE7 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1561+ 6BE7             >                else
1561+ 6BE7 E9 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1561+ 6BE9             >                endif           ; ok        // for other definitions it "points" the correct handler
1561+ 6BE9             >                // Use of "; ok" to suppress "warning[fwdref]"
1561+ 6BE9             >
1561+ 6BE9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1562+ 6BE9 E1                           pop     hl                  // address
1563+ 6BEA D1                           pop     de                  // < n
1564+ 6BEB 73                           ld      (hl), e             // low-byte
1565+ 6BEC 23                           inc     hl
1566+ 6BED 72                           ld      (hl), d             // high-byte
1567+ 6BEE
1568+ 6BEE                              next
1568+ 6BEE DD E9       >                jp      (ix)
1569+ 6BF0
1570+ 6BF0              //  ______________________________________________________________________
1571+ 6BF0              //
1572+ 6BF0              // c@           a -- c
1573+ 6BF0              // fetch a character n from address a
1574+ 6BF0                              New_Def CFETCH, "C@", is_code, is_normal
1574+ 6BF0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1574+ 6BF0             >
1574+ 6BF0             >                // dummy db directives used to calculate length of namec
1574+ 6BF0 43 40       >                db      "C@"
1574+ 6BF2             >len_NFA         defl    $ - temp_NFA
1574+ 6BF2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1574+ 6BF0             >
1574+ 6BF0 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1574+ 6BF1 43 40       >                db      "C@"               // name string in 7-bit ascii, but
1574+ 6BF3             >                org     $-1                 // alter last byte of Name just above to set
1574+ 6BF2 C0          >                db      {b $} | END_BIT     // msb as name end
1574+ 6BF3             >
1574+ 6BF3 E3 6B       >                dw      last_NFA            // Link to previous definition Name
1574+ 6BF5             >CFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1574+ 6BF5 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1574+ 6BF5             >                else
1574+ 6BF5 F7 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1574+ 6BF7             >                endif           ; ok        // for other definitions it "points" the correct handler
1574+ 6BF7             >                // Use of "; ok" to suppress "warning[fwdref]"
1574+ 6BF7             >
1574+ 6BF7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1575+ 6BF7 E1                           pop     hl
1576+ 6BF8 6E                           ld      l, (hl)             // low-byte
1577+ 6BF9 26 00                        ld      h, 0
1578+ 6BFB
1579+ 6BFB                              psh1
1579+ 6BFB E5          >                push    hl
1579+ 6BFC DD E9       >                jp      (ix)
1580+ 6BFE
1581+ 6BFE              //  ______________________________________________________________________
1582+ 6BFE              //
1583+ 6BFE              // c!           c a --
1584+ 6BFE              // fetch 16 bit number n from address a. Z80 keeps high byte is in high memory
1585+ 6BFE                              New_Def CSTORE, "C!", is_code, is_normal
1585+ 6BFE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1585+ 6BFE             >
1585+ 6BFE             >                // dummy db directives used to calculate length of namec
1585+ 6BFE 43 21       >                db      "C!"
1585+ 6C00             >len_NFA         defl    $ - temp_NFA
1585+ 6C00             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1585+ 6BFE             >
1585+ 6BFE 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1585+ 6BFF 43 21       >                db      "C!"               // name string in 7-bit ascii, but
1585+ 6C01             >                org     $-1                 // alter last byte of Name just above to set
1585+ 6C00 A1          >                db      {b $} | END_BIT     // msb as name end
1585+ 6C01             >
1585+ 6C01 F0 6B       >                dw      last_NFA            // Link to previous definition Name
1585+ 6C03             >CSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1585+ 6C03 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1585+ 6C03             >                else
1585+ 6C03 05 6C       >                dw      $ + 2   ; ok        // is pointed by CFA
1585+ 6C05             >                endif           ; ok        // for other definitions it "points" the correct handler
1585+ 6C05             >                // Use of "; ok" to suppress "warning[fwdref]"
1585+ 6C05             >
1585+ 6C05             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1586+ 6C05 E1                           pop     hl                  // < address
1587+ 6C06 D1                           pop     de
1588+ 6C07 73                           ld      (hl), e             // low-byte
1589+ 6C08
1590+ 6C08                              next
1590+ 6C08 DD E9       >                jp      (ix)
1591+ 6C0A
1592+ 6C0A              //  ______________________________________________________________________
1593+ 6C0A              //
1594+ 6C0A              // 2@           a -- d
1595+ 6C0A              // fetch a 32 bits number d from address a and leaves it on top of the
1596+ 6C0A              // stack as two single numbers, high part as top of the stack.
1597+ 6C0A              // A double number is normally kept in CPU registers as HLDE.
1598+ 6C0A              // On stack a double number is treated as two single numbers
1599+ 6C0A              // where BC is on the top of the stack and HL is the second from top,
1600+ 6C0A              // so the sign of the number can be checked on top of stack
1601+ 6C0A              // and in the stack memory it appears as LHED.
1602+ 6C0A              // Instead, a 32 bits number d is kept in memory as EDLH
1603+ 6C0A              // with the lowest significant word in the lower location
1604+ 6C0A              // and the highest significant word in the higher location.
1605+ 6C0A              // fetch 32 bit number n from address a.
1606+ 6C0A                              New_Def TWO_FETCH, "2@", is_code, is_normal
1606+ 6C0A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1606+ 6C0A             >
1606+ 6C0A             >                // dummy db directives used to calculate length of namec
1606+ 6C0A 32 40       >                db      "2@"
1606+ 6C0C             >len_NFA         defl    $ - temp_NFA
1606+ 6C0C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1606+ 6C0A             >
1606+ 6C0A 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1606+ 6C0B 32 40       >                db      "2@"               // name string in 7-bit ascii, but
1606+ 6C0D             >                org     $-1                 // alter last byte of Name just above to set
1606+ 6C0C C0          >                db      {b $} | END_BIT     // msb as name end
1606+ 6C0D             >
1606+ 6C0D FE 6B       >                dw      last_NFA            // Link to previous definition Name
1606+ 6C0F             >TWO_FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1606+ 6C0F ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1606+ 6C0F             >                else
1606+ 6C0F 11 6C       >                dw      $ + 2   ; ok        // is pointed by CFA
1606+ 6C11             >                endif           ; ok        // for other definitions it "points" the correct handler
1606+ 6C11             >                // Use of "; ok" to suppress "warning[fwdref]"
1606+ 6C11             >
1606+ 6C11             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1607+ 6C11 E1                           pop     hl                  // address
1608+ 6C12 5E                           ld      e, (hl)             // low-byte
1609+ 6C13 23                           inc     hl
1610+ 6C14 56                           ld      d, (hl)             // high-byte
1611+ 6C15
1612+ 6C15 23                           inc     hl
1613+ 6C16 7E                           ld      a, (hl)             // low-byte
1614+ 6C17 23                           inc     hl
1615+ 6C18 66                           ld      h, (hl)             // high-byte
1616+ 6C19 6F                           ld      l, a
1617+ 6C1A                              psh2
1617+ 6C1A D5          >                push    de
1617+ 6C1B E5          >                push    hl
1617+ 6C1C DD E9       >                jp      (ix)
1618+ 6C1E
1619+ 6C1E              //  ______________________________________________________________________
1620+ 6C1E              //
1621+ 6C1E              // 2!           d a --
1622+ 6C1E              // stores a 32 bits number d from address a and leaves it on top of the
1623+ 6C1E              // stack as two single numbers, high part as top of the stack.
1624+ 6C1E              // A double number is normally kept in CPU registers as HLDE.
1625+ 6C1E              // On stack a double number is treated as two single numbers
1626+ 6C1E              // where BC is on the top of the stack and HL is the second from top,
1627+ 6C1E              // so the sign of the number can be checked on top of stack
1628+ 6C1E              // and in the stack memory it appears as LHED.
1629+ 6C1E              // Instead, a 32 bits number d is kept in memory as EDLH
1630+ 6C1E              // with the lowest significant word in the lower location
1631+ 6C1E              // and the highest significant word in the higher location.
1632+ 6C1E              // fetch 32 bit number n from address a.
1633+ 6C1E                              New_Def TWO_STORE, "2!", is_code, is_normal
1633+ 6C1E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1633+ 6C1E             >
1633+ 6C1E             >                // dummy db directives used to calculate length of namec
1633+ 6C1E 32 21       >                db      "2!"
1633+ 6C20             >len_NFA         defl    $ - temp_NFA
1633+ 6C20             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1633+ 6C1E             >
1633+ 6C1E 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1633+ 6C1F 32 21       >                db      "2!"               // name string in 7-bit ascii, but
1633+ 6C21             >                org     $-1                 // alter last byte of Name just above to set
1633+ 6C20 A1          >                db      {b $} | END_BIT     // msb as name end
1633+ 6C21             >
1633+ 6C21 0A 6C       >                dw      last_NFA            // Link to previous definition Name
1633+ 6C23             >TWO_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1633+ 6C23 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1633+ 6C23             >                else
1633+ 6C23 25 6C       >                dw      $ + 2   ; ok        // is pointed by CFA
1633+ 6C25             >                endif           ; ok        // for other definitions it "points" the correct handler
1633+ 6C25             >                // Use of "; ok" to suppress "warning[fwdref]"
1633+ 6C25             >
1633+ 6C25             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1634+ 6C25 60                           ld      h, b
1635+ 6C26 69                           ld      l, c
1636+ 6C27 D1                           pop     de                  // de has address
1637+ 6C28 C1                           pop     bc                  // < high-part
1638+ 6C29 E3                           ex      (sp), hl            // < low-part > Instruction Pointer
1639+ 6C2A EB                           ex      de, hl
1640+ 6C2B 73                           ld      (hl), e
1641+ 6C2C 23                           inc     hl
1642+ 6C2D 72                           ld      (hl), d
1643+ 6C2E 23                           inc     hl
1644+ 6C2F 71                           ld      (hl), c
1645+ 6C30 23                           inc     hl
1646+ 6C31 70                           ld      (hl), b
1647+ 6C32 C1                           pop     bc                  // Restore Instruction Pointer
1648+ 6C33
1649+ 6C33                              next
1649+ 6C33 DD E9       >                jp      (ix)
1650+ 6C35
1651+ 6C35              //  ______________________________________________________________________
1652+ 6C35              //
1653+ 6C35              // p@           a -- c
1654+ 6C35              // Read one byte from port a and leave the result on top of stack
1655+ 6C35                              New_Def PFETCH, "P@", is_code, is_normal
1655+ 6C35             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1655+ 6C35             >
1655+ 6C35             >                // dummy db directives used to calculate length of namec
1655+ 6C35 50 40       >                db      "P@"
1655+ 6C37             >len_NFA         defl    $ - temp_NFA
1655+ 6C37             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1655+ 6C35             >
1655+ 6C35 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1655+ 6C36 50 40       >                db      "P@"               // name string in 7-bit ascii, but
1655+ 6C38             >                org     $-1                 // alter last byte of Name just above to set
1655+ 6C37 C0          >                db      {b $} | END_BIT     // msb as name end
1655+ 6C38             >
1655+ 6C38 1E 6C       >                dw      last_NFA            // Link to previous definition Name
1655+ 6C3A             >PFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1655+ 6C3A ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1655+ 6C3A             >                else
1655+ 6C3A 3C 6C       >                dw      $ + 2   ; ok        // is pointed by CFA
1655+ 6C3C             >                endif           ; ok        // for other definitions it "points" the correct handler
1655+ 6C3C             >                // Use of "; ok" to suppress "warning[fwdref]"
1655+ 6C3C             >
1655+ 6C3C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1656+ 6C3C 50                           ld      d, b
1657+ 6C3D 59                           ld      e, c
1658+ 6C3E
1659+ 6C3E C1                           pop     bc
1660+ 6C3F 26 00                        ld      h, 0
1661+ 6C41 ED 68                        in      l, (c)
1662+ 6C43 42                           ld      b, d
1663+ 6C44 4B                           ld      c, e
1664+ 6C45                              psh1
1664+ 6C45 E5          >                push    hl
1664+ 6C46 DD E9       >                jp      (ix)
1665+ 6C48
1666+ 6C48              //  ______________________________________________________________________
1667+ 6C48              //
1668+ 6C48              // p!           c a --
1669+ 6C48              // Send one byte (top of stack) to port a
1670+ 6C48                              New_Def PSTORE, "P!", is_code, is_normal
1670+ 6C48             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1670+ 6C48             >
1670+ 6C48             >                // dummy db directives used to calculate length of namec
1670+ 6C48 50 21       >                db      "P!"
1670+ 6C4A             >len_NFA         defl    $ - temp_NFA
1670+ 6C4A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1670+ 6C48             >
1670+ 6C48 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1670+ 6C49 50 21       >                db      "P!"               // name string in 7-bit ascii, but
1670+ 6C4B             >                org     $-1                 // alter last byte of Name just above to set
1670+ 6C4A A1          >                db      {b $} | END_BIT     // msb as name end
1670+ 6C4B             >
1670+ 6C4B 35 6C       >                dw      last_NFA            // Link to previous definition Name
1670+ 6C4D             >PSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1670+ 6C4D ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1670+ 6C4D             >                else
1670+ 6C4D 4F 6C       >                dw      $ + 2   ; ok        // is pointed by CFA
1670+ 6C4F             >                endif           ; ok        // for other definitions it "points" the correct handler
1670+ 6C4F             >                // Use of "; ok" to suppress "warning[fwdref]"
1670+ 6C4F             >
1670+ 6C4F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1671+ 6C4F 50                           ld      d, b
1672+ 6C50 59                           ld      e, c
1673+ 6C51
1674+ 6C51 C1                           pop     bc
1675+ 6C52 E1                           pop     hl                  // < c
1676+ 6C53 ED 69                        out     (c), l              // low-byte
1677+ 6C55 42                           ld      b, d
1678+ 6C56 4B                           ld      c, e
1679+ 6C57
1680+ 6C57                              next
1680+ 6C57 DD E9       >                jp      (ix)
1681+ 6C59
1682+ 6C59
1683+ 6C59              //  ______________________________________________________________________
1684+ 6C59              //
1685+ 6C59              // 2*           n1 -- n2
1686+ 6C59              // doubles the number at top of stack
1687+ 6C59                              New_Def TWO_MUL, "2*", is_code, is_normal
1687+ 6C59             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1687+ 6C59             >
1687+ 6C59             >                // dummy db directives used to calculate length of namec
1687+ 6C59 32 2A       >                db      "2*"
1687+ 6C5B             >len_NFA         defl    $ - temp_NFA
1687+ 6C5B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1687+ 6C59             >
1687+ 6C59 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1687+ 6C5A 32 2A       >                db      "2*"               // name string in 7-bit ascii, but
1687+ 6C5C             >                org     $-1                 // alter last byte of Name just above to set
1687+ 6C5B AA          >                db      {b $} | END_BIT     // msb as name end
1687+ 6C5C             >
1687+ 6C5C 48 6C       >                dw      last_NFA            // Link to previous definition Name
1687+ 6C5E             >TWO_MUL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1687+ 6C5E ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1687+ 6C5E             >                else
1687+ 6C5E 60 6C       >                dw      $ + 2   ; ok        // is pointed by CFA
1687+ 6C60             >                endif           ; ok        // for other definitions it "points" the correct handler
1687+ 6C60             >                // Use of "; ok" to suppress "warning[fwdref]"
1687+ 6C60             >
1687+ 6C60             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1688+ 6C60              Two_Mul_Ptr:
1689+ 6C60 E1                           pop     hl
1690+ 6C61 29                           add     hl, hl
1691+ 6C62
1692+ 6C62                              psh1
1692+ 6C62 E5          >                push    hl
1692+ 6C63 DD E9       >                jp      (ix)
1693+ 6C65
1694+ 6C65              //  ______________________________________________________________________
1695+ 6C65              //
1696+ 6C65              // 2/           n1 -- n2
1697+ 6C65              // halves the top of stack, sign is unchanged
1698+ 6C65                              New_Def TWO_DIV, "2/", is_code, is_normal
1698+ 6C65             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1698+ 6C65             >
1698+ 6C65             >                // dummy db directives used to calculate length of namec
1698+ 6C65 32 2F       >                db      "2/"
1698+ 6C67             >len_NFA         defl    $ - temp_NFA
1698+ 6C67             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1698+ 6C65             >
1698+ 6C65 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1698+ 6C66 32 2F       >                db      "2/"               // name string in 7-bit ascii, but
1698+ 6C68             >                org     $-1                 // alter last byte of Name just above to set
1698+ 6C67 AF          >                db      {b $} | END_BIT     // msb as name end
1698+ 6C68             >
1698+ 6C68 59 6C       >                dw      last_NFA            // Link to previous definition Name
1698+ 6C6A             >TWO_DIV:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1698+ 6C6A ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1698+ 6C6A             >                else
1698+ 6C6A 6C 6C       >                dw      $ + 2   ; ok        // is pointed by CFA
1698+ 6C6C             >                endif           ; ok        // for other definitions it "points" the correct handler
1698+ 6C6C             >                // Use of "; ok" to suppress "warning[fwdref]"
1698+ 6C6C             >
1698+ 6C6C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1699+ 6C6C E1                           pop     hl
1700+ 6C6D CB 2C                        sra     h
1701+ 6C6F CB 1D                        rr      l
1702+ 6C71
1703+ 6C71                              psh1
1703+ 6C71 E5          >                push    hl
1703+ 6C72 DD E9       >                jp      (ix)
1704+ 6C74
1705+ 6C74              //  ______________________________________________________________________
1706+ 6C74              //
1707+ 6C74              // lshift       n1 u -- n2
1708+ 6C74              // bit left shift of u bits
1709+ 6C74                              New_Def LSHIFT, "LSHIFT", is_code, is_normal
1709+ 6C74             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1709+ 6C74             >
1709+ 6C74             >                // dummy db directives used to calculate length of namec
1709+ 6C74 4C 53 48 49 >                db      "LSHIFT"
1709+ 6C78 46 54       >
1709+ 6C7A             >len_NFA         defl    $ - temp_NFA
1709+ 6C7A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1709+ 6C74             >
1709+ 6C74 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1709+ 6C75 4C 53 48 49 >                db      "LSHIFT"               // name string in 7-bit ascii, but
1709+ 6C79 46 54       >
1709+ 6C7B             >                org     $-1                 // alter last byte of Name just above to set
1709+ 6C7A D4          >                db      {b $} | END_BIT     // msb as name end
1709+ 6C7B             >
1709+ 6C7B 65 6C       >                dw      last_NFA            // Link to previous definition Name
1709+ 6C7D             >LSHIFT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1709+ 6C7D ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1709+ 6C7D             >                else
1709+ 6C7D 7F 6C       >                dw      $ + 2   ; ok        // is pointed by CFA
1709+ 6C7F             >                endif           ; ok        // for other definitions it "points" the correct handler
1709+ 6C7F             >                // Use of "; ok" to suppress "warning[fwdref]"
1709+ 6C7F             >
1709+ 6C7F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1710+ 6C7F D1                           pop     de
1711+ 6C80
1712+ 6C80 E1                           pop     hl
1713+ 6C81 7B                           ld      a, e
1714+ 6C82 B7                           or      a
1715+ 6C83 28 04                        jr      z, Lshift_Zero
1716+ 6C85              Lshift_Loop:
1717+ 6C85 29                                   add     hl, hl
1718+ 6C86 3D                                   dec     a
1719+ 6C87 20 FC                            jr      nz, Lshift_Loop
1720+ 6C89              Lshift_Zero:
1721+ 6C89
1722+ 6C89
1723+ 6C89                              psh1
1723+ 6C89 E5          >                push    hl
1723+ 6C8A DD E9       >                jp      (ix)
1724+ 6C8C
1725+ 6C8C              //  ______________________________________________________________________
1726+ 6C8C              //
1727+ 6C8C              // rshift       n1 u -- n2
1728+ 6C8C              // bit right shift of u bits
1729+ 6C8C                              New_Def RSHIFT, "RSHIFT", is_code, is_normal
1729+ 6C8C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1729+ 6C8C             >
1729+ 6C8C             >                // dummy db directives used to calculate length of namec
1729+ 6C8C 52 53 48 49 >                db      "RSHIFT"
1729+ 6C90 46 54       >
1729+ 6C92             >len_NFA         defl    $ - temp_NFA
1729+ 6C92             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1729+ 6C8C             >
1729+ 6C8C 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1729+ 6C8D 52 53 48 49 >                db      "RSHIFT"               // name string in 7-bit ascii, but
1729+ 6C91 46 54       >
1729+ 6C93             >                org     $-1                 // alter last byte of Name just above to set
1729+ 6C92 D4          >                db      {b $} | END_BIT     // msb as name end
1729+ 6C93             >
1729+ 6C93 74 6C       >                dw      last_NFA            // Link to previous definition Name
1729+ 6C95             >RSHIFT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1729+ 6C95 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1729+ 6C95             >                else
1729+ 6C95 97 6C       >                dw      $ + 2   ; ok        // is pointed by CFA
1729+ 6C97             >                endif           ; ok        // for other definitions it "points" the correct handler
1729+ 6C97             >                // Use of "; ok" to suppress "warning[fwdref]"
1729+ 6C97             >
1729+ 6C97             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1730+ 6C97 D1                           pop     de
1731+ 6C98
1732+ 6C98 E1                           pop     hl
1733+ 6C99 7B                           ld      a, e
1734+ 6C9A B7                           or      a
1735+ 6C9B 28 07                        jr      z, Rshift_Zero
1736+ 6C9D              Rshift_Loop:
1737+ 6C9D CB 3C                                srl     h
1738+ 6C9F CB 1D                                rr      l
1739+ 6CA1 3D                                   dec     a
1740+ 6CA2 20 F9                            jr      nz, Rshift_Loop
1741+ 6CA4              Rshift_Zero:
1742+ 6CA4
1743+ 6CA4
1744+ 6CA4                              psh1
1744+ 6CA4 E5          >                push    hl
1744+ 6CA5 DD E9       >                jp      (ix)
1745+ 6CA7
1746+ 6CA7              //  ______________________________________________________________________
1747+ 6CA7              //
1748+ 6CA7              // cells        n1 -- n2
1749+ 6CA7              // decrement by 2 top of stack
1750+ 6CA7                              New_Def CELLS, "CELLS", Two_Mul_Ptr, is_normal
1750+ 6CA7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1750+ 6CA7             >
1750+ 6CA7             >                // dummy db directives used to calculate length of namec
1750+ 6CA7 43 45 4C 4C >                db      "CELLS"
1750+ 6CAB 53          >
1750+ 6CAC             >len_NFA         defl    $ - temp_NFA
1750+ 6CAC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1750+ 6CA7             >
1750+ 6CA7 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1750+ 6CA8 43 45 4C 4C >                db      "CELLS"               // name string in 7-bit ascii, but
1750+ 6CAC 53          >
1750+ 6CAD             >                org     $-1                 // alter last byte of Name just above to set
1750+ 6CAC D3          >                db      {b $} | END_BIT     // msb as name end
1750+ 6CAD             >
1750+ 6CAD 8C 6C       >                dw      last_NFA            // Link to previous definition Name
1750+ 6CAF             >CELLS:          if Two_Mul_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1750+ 6CAF 60 6C       >                dw      Two_Mul_Ptr ; ok        // for primitive definitions  actual code
1750+ 6CB1             >                else
1750+ 6CB1 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1750+ 6CB1             >                endif           ; ok        // for other definitions it "points" the correct handler
1750+ 6CB1             >                // Use of "; ok" to suppress "warning[fwdref]"
1750+ 6CB1             >
1750+ 6CB1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1751+ 6CB1
1752+ 6CB1
1753+ 6CB1              //  ______________________________________________________________________
1754+ 6CB1
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L0.asm
  89  6CB1                              include "L1.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L1.asm
   1+ 6CB1              //  ______________________________________________________________________
   2+ 6CB1              //
   3+ 6CB1              //  L1.asm
   4+ 6CB1              //
   5+ 6CB1              //  Level-1 definitions and derivate
   6+ 6CB1              //  ______________________________________________________________________
   7+ 6CB1
   8+ 6CB1              //  ______________________________________________________________________
   9+ 6CB1              //
  10+ 6CB1              // :            -- cccc     ( compile time )
  11+ 6CB1              //              i*x -- j*x  ( run time )
  12+ 6CB1              // Colon Definition
  13+ 6CB1                              Colon_Def COLON, ":", is_immediate      // has forward-ref
  13+ 6CB1             >                New_Def  COLON, ":", Enter_Ptr, is_immediate ; ok
  13+ 6CB1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13+ 6CB1             >
  13+ 6CB1             >                // dummy db directives used to calculate length of namec
  13+ 6CB1 3A          >                db      ":"
  13+ 6CB2             >len_NFA         defl    $ - temp_NFA
  13+ 6CB2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13+ 6CB1             >
  13+ 6CB1 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
  13+ 6CB2 3A          >                db      ":"               // name string in 7-bit ascii, but
  13+ 6CB3             >                org     $-1                 // alter last byte of Name just above to set
  13+ 6CB2 BA          >                db      {b $} | END_BIT     // msb as name end
  13+ 6CB3             >
  13+ 6CB3 A7 6C       >                dw      last_NFA            // Link to previous definition Name
  13+ 6CB5             >COLON:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  13+ 6CB5 CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  13+ 6CB7             >                else
  13+ 6CB7 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  13+ 6CB7             >                endif           ; ok        // for other definitions it "points" the correct handler
  13+ 6CB7             >                // Use of "; ok" to suppress "warning[fwdref]"
  13+ 6CB7             >
  13+ 6CB7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14+ 6CB7
  15+ 6CB7 17 71                        dw      QEXEC                   // ?exec
  16+ 6CB9 D2 70                        dw      STORE_CSP               // !csp
  17+ 6CBB 86 6E DA 6B                  dw      CURRENT, FETCH          // current @
  18+ 6CBF 79 6E E7 6B                  dw      CONTEXT, STORE          // context !
  19+ 6CC3 C5 76                        dw      CREATE                  // create  ( forward )
  20+ 6CC5 B1 71                        dw      SMUDGE                  // dmudge
  21+ 6CC7 9C 71                        dw      SQUARED_CLOSE           // ]
  22+ 6CC9 07 72                        dw      C_SEMICOLON_CODE        // ;code ( change the 3-bytes CFA of defining word to call Enter_Ptr )
  23+ 6CCB                                                              // ... immediate
  24+ 6CCB              Enter_Ptr:
  25+ 6CCB                              // via call coded in CFA
  26+ 6CCB                              ldhlrp
  26+ 6CCB 2A 30 64    >                ld      hl,(RP_Pointer)
  27+ 6CCE 2B                           dec     hl                  // push on Return-Stack current Instruction-Pointer
  28+ 6CCF 70                           ld      (hl), b
  29+ 6CD0 2B                           dec     hl
  30+ 6CD1 71                           ld      (hl), c
  31+ 6CD2                              ldrphl
  31+ 6CD2 22 30 64    >                ld      (RP_Pointer),hl
  32+ 6CD5 13                           inc     de
  33+ 6CD6 4B                           ld      c, e
  34+ 6CD7 42                           ld      b, d
  35+ 6CD8                              next
  35+ 6CD8 DD E9       >                jp      (ix)
  36+ 6CDA
  37+ 6CDA              //  ______________________________________________________________________
  38+ 6CDA              //
  39+ 6CDA              // ;            --
  40+ 6CDA              // Semicolon. End of Colon-Definition. Stack must be balanced.
  41+ 6CDA                              Colon_Def SEMICOLON, ";", is_immediate   // has forward-ref
  41+ 6CDA             >                New_Def  SEMICOLON, ";", Enter_Ptr, is_immediate ; ok
  41+ 6CDA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  41+ 6CDA             >
  41+ 6CDA             >                // dummy db directives used to calculate length of namec
  41+ 6CDA 3B          >                db      ";"
  41+ 6CDB             >len_NFA         defl    $ - temp_NFA
  41+ 6CDB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  41+ 6CDA             >
  41+ 6CDA C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
  41+ 6CDB 3B          >                db      ";"               // name string in 7-bit ascii, but
  41+ 6CDC             >                org     $-1                 // alter last byte of Name just above to set
  41+ 6CDB BB          >                db      {b $} | END_BIT     // msb as name end
  41+ 6CDC             >
  41+ 6CDC B1 6C       >                dw      last_NFA            // Link to previous definition Name
  41+ 6CDE             >SEMICOLON:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  41+ 6CDE CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  41+ 6CE0             >                else
  41+ 6CE0 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  41+ 6CE0             >                endif           ; ok        // for other definitions it "points" the correct handler
  41+ 6CE0             >                // Use of "; ok" to suppress "warning[fwdref]"
  41+ 6CE0             >
  41+ 6CE0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  42+ 6CE0
  43+ 6CE0 41 71                        dw      QCSP                    // ?csp
  44+ 6CE2 78 71 95 69                  dw      COMPILE, EXIT           // [compile] ;s
  45+ 6CE6 B1 71                        dw      SMUDGE                  // smudge
  46+ 6CE8 8E 71                        dw      SQUARED_OPEN            // [
  47+ 6CEA 95 69                        dw      EXIT                    // ; immediate
  48+ 6CEC
  49+ 6CEC              //  ______________________________________________________________________
  50+ 6CEC              //
  51+ 6CEC              // noop         --
  52+ 6CEC
  53+ 6CEC                              Colon_Def NOOP, "NOOP", is_normal
  53+ 6CEC             >                New_Def  NOOP, "NOOP", Enter_Ptr, is_normal ; ok
  53+ 6CEC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  53+ 6CEC             >
  53+ 6CEC             >                // dummy db directives used to calculate length of namec
  53+ 6CEC 4E 4F 4F 50 >                db      "NOOP"
  53+ 6CF0             >len_NFA         defl    $ - temp_NFA
  53+ 6CF0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  53+ 6CEC             >
  53+ 6CEC 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  53+ 6CED 4E 4F 4F 50 >                db      "NOOP"               // name string in 7-bit ascii, but
  53+ 6CF1             >                org     $-1                 // alter last byte of Name just above to set
  53+ 6CF0 D0          >                db      {b $} | END_BIT     // msb as name end
  53+ 6CF1             >
  53+ 6CF1 DA 6C       >                dw      last_NFA            // Link to previous definition Name
  53+ 6CF3             >NOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  53+ 6CF3 CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  53+ 6CF5             >                else
  53+ 6CF5 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  53+ 6CF5             >                endif           ; ok        // for other definitions it "points" the correct handler
  53+ 6CF5             >                // Use of "; ok" to suppress "warning[fwdref]"
  53+ 6CF5             >
  53+ 6CF5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  54+ 6CF5 95 69                        dw      EXIT
  55+ 6CF7
  56+ 6CF7              //  ______________________________________________________________________
  57+ 6CF7              //
  58+ 6CF7              // constant     n -- cccc     ( compile time )
  59+ 6CF7              //              -- n          ( run time )
  60+ 6CF7              // Constant definition.
  61+ 6CF7                              Colon_Def CONSTANT, "CONSTANT", is_normal   // has forward-ref
  61+ 6CF7             >                New_Def  CONSTANT, "CONSTANT", Enter_Ptr, is_normal ; ok
  61+ 6CF7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  61+ 6CF7             >
  61+ 6CF7             >                // dummy db directives used to calculate length of namec
  61+ 6CF7 43 4F 4E 53 >                db      "CONSTANT"
  61+ 6CFB 54 41 4E 54 >
  61+ 6CFF             >len_NFA         defl    $ - temp_NFA
  61+ 6CFF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  61+ 6CF7             >
  61+ 6CF7 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  61+ 6CF8 43 4F 4E 53 >                db      "CONSTANT"               // name string in 7-bit ascii, but
  61+ 6CFC 54 41 4E 54 >
  61+ 6D00             >                org     $-1                 // alter last byte of Name just above to set
  61+ 6CFF D4          >                db      {b $} | END_BIT     // msb as name end
  61+ 6D00             >
  61+ 6D00 EC 6C       >                dw      last_NFA            // Link to previous definition Name
  61+ 6D02             >CONSTANT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  61+ 6D02 CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  61+ 6D04             >                else
  61+ 6D04 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  61+ 6D04             >                endif           ; ok        // for other definitions it "points" the correct handler
  61+ 6D04             >                // Use of "; ok" to suppress "warning[fwdref]"
  61+ 6D04             >
  61+ 6D04             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  62+ 6D04
  63+ 6D04 C5 76                        dw      CREATE                  // create
  64+ 6D06 34 6F                        dw      COMMA                   // ,    ( at PFA then, store the value )
  65+ 6D08 07 72                        dw      C_SEMICOLON_CODE        // ;code (  changes the 3-bytes CFA to call Constant_Ptr )
  66+ 6D0A              Constant_Ptr:
  67+ 6D0A
  68+ 6D0A 13                           inc     de
  69+ 6D0B EB                           ex      de, hl
  70+ 6D0C
  71+ 6D0C 5E                           ld      e, (hl)
  72+ 6D0D 23                           inc     hl
  73+ 6D0E 56                           ld      d, (hl)
  74+ 6D0F D5                           push    de
  75+ 6D10                              next
  75+ 6D10 DD E9       >                jp      (ix)
  76+ 6D12
  77+ 6D12              //  ______________________________________________________________________
  78+ 6D12              //
  79+ 6D12              // variable     n -- cccc     ( compile time )
  80+ 6D12              //              -- a          ( run time )
  81+ 6D12              // Variable definition, n is the initial value.
  82+ 6D12                              Colon_Def VARIABLE, "VARIABLE", is_normal   // has forward-ref
  82+ 6D12             >                New_Def  VARIABLE, "VARIABLE", Enter_Ptr, is_normal ; ok
  82+ 6D12             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  82+ 6D12             >
  82+ 6D12             >                // dummy db directives used to calculate length of namec
  82+ 6D12 56 41 52 49 >                db      "VARIABLE"
  82+ 6D16 41 42 4C 45 >
  82+ 6D1A             >len_NFA         defl    $ - temp_NFA
  82+ 6D1A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  82+ 6D12             >
  82+ 6D12 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  82+ 6D13 56 41 52 49 >                db      "VARIABLE"               // name string in 7-bit ascii, but
  82+ 6D17 41 42 4C 45 >
  82+ 6D1B             >                org     $-1                 // alter last byte of Name just above to set
  82+ 6D1A C5          >                db      {b $} | END_BIT     // msb as name end
  82+ 6D1B             >
  82+ 6D1B F7 6C       >                dw      last_NFA            // Link to previous definition Name
  82+ 6D1D             >VARIABLE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  82+ 6D1D CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  82+ 6D1F             >                else
  82+ 6D1F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  82+ 6D1F             >                endif           ; ok        // for other definitions it "points" the correct handler
  82+ 6D1F             >                // Use of "; ok" to suppress "warning[fwdref]"
  82+ 6D1F             >
  82+ 6D1F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  83+ 6D1F
  84+ 6D1F 02 6D                        dw      CONSTANT                // constant
  85+ 6D21 07 72                        dw      C_SEMICOLON_CODE        // ;code ( changes the 3-bytes CFA to call Variable_Ptr )
  86+ 6D23              Variable_Ptr:
  87+ 6D23
  88+ 6D23 13                           inc     de
  89+ 6D24 D5                           push    de                  // balance TOS before overwrite it
  90+ 6D25
  91+ 6D25                              next
  91+ 6D25 DD E9       >                jp      (ix)
  92+ 6D27
  93+ 6D27              //  ______________________________________________________________________
  94+ 6D27              //
  95+ 6D27              // user         b -- cccc     ( compile time )
  96+ 6D27              //              -- a          ( run time )
  97+ 6D27              // User variable definition
  98+ 6D27                              Colon_Def USER, "USER", is_normal
  98+ 6D27             >                New_Def  USER, "USER", Enter_Ptr, is_normal ; ok
  98+ 6D27             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  98+ 6D27             >
  98+ 6D27             >                // dummy db directives used to calculate length of namec
  98+ 6D27 55 53 45 52 >                db      "USER"
  98+ 6D2B             >len_NFA         defl    $ - temp_NFA
  98+ 6D2B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  98+ 6D27             >
  98+ 6D27 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  98+ 6D28 55 53 45 52 >                db      "USER"               // name string in 7-bit ascii, but
  98+ 6D2C             >                org     $-1                 // alter last byte of Name just above to set
  98+ 6D2B D2          >                db      {b $} | END_BIT     // msb as name end
  98+ 6D2C             >
  98+ 6D2C 12 6D       >                dw      last_NFA            // Link to previous definition Name
  98+ 6D2E             >USER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  98+ 6D2E CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  98+ 6D30             >                else
  98+ 6D30 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  98+ 6D30             >                endif           ; ok        // for other definitions it "points" the correct handler
  98+ 6D30             >                // Use of "; ok" to suppress "warning[fwdref]"
  98+ 6D30             >
  98+ 6D30             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  99+ 6D30
 100+ 6D30 C5 76                        dw      CREATE                  // create
 101+ 6D32 45 6F                        dw      CCOMMA                  // c,
 102+ 6D34 07 72                        dw      C_SEMICOLON_CODE        // ;code () changes the 3-bytes CFA to call User_Ptr )
 103+ 6D36
 104+ 6D36
 105+ 6D36              User_Ptr:
 106+ 6D36                              // via call coded in CFA
 107+ 6D36 13                           inc     de
 108+ 6D37 EB                           ex      de, hl
 109+ 6D38 5E                           ld      e, (hl)
 110+ 6D39 16 00                        ld      d, 0
 111+ 6D3B 2A 2E 64                     ld      hl, (USER_Pointer)
 112+ 6D3E 19                           add     hl, de
 113+ 6D3F
 114+ 6D3F                              psh1
 114+ 6D3F E5          >                push    hl
 114+ 6D40 DD E9       >                jp      (ix)
 115+ 6D42
 116+ 6D42              //  ______________________________________________________________________
 117+ 6D42              //
 118+ 6D42                              Constant_Def ZERO       ,   "0"     ,   0
 118+ 6D42             >                New_Def  ZERO, "0", Constant_Ptr, is_normal
 118+ 6D42             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 118+ 6D42             >
 118+ 6D42             >                // dummy db directives used to calculate length of namec
 118+ 6D42 30          >                db      "0"
 118+ 6D43             >len_NFA         defl    $ - temp_NFA
 118+ 6D43             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 118+ 6D42             >
 118+ 6D42 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 118+ 6D43 30          >                db      "0"               // name string in 7-bit ascii, but
 118+ 6D44             >                org     $-1                 // alter last byte of Name just above to set
 118+ 6D43 B0          >                db      {b $} | END_BIT     // msb as name end
 118+ 6D44             >
 118+ 6D44 27 6D       >                dw      last_NFA            // Link to previous definition Name
 118+ 6D46             >ZERO:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 118+ 6D46 0A 6D       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 118+ 6D48             >                else
 118+ 6D48 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 118+ 6D48             >                endif           ; ok        // for other definitions it "points" the correct handler
 118+ 6D48             >                // Use of "; ok" to suppress "warning[fwdref]"
 118+ 6D48             >
 118+ 6D48             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 118+ 6D48 00 00       >                dw      0
 119+ 6D4A                              Constant_Def ONE        ,   "1"     ,   1
 119+ 6D4A             >                New_Def  ONE, "1", Constant_Ptr, is_normal
 119+ 6D4A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 119+ 6D4A             >
 119+ 6D4A             >                // dummy db directives used to calculate length of namec
 119+ 6D4A 31          >                db      "1"
 119+ 6D4B             >len_NFA         defl    $ - temp_NFA
 119+ 6D4B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 119+ 6D4A             >
 119+ 6D4A 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 119+ 6D4B 31          >                db      "1"               // name string in 7-bit ascii, but
 119+ 6D4C             >                org     $-1                 // alter last byte of Name just above to set
 119+ 6D4B B1          >                db      {b $} | END_BIT     // msb as name end
 119+ 6D4C             >
 119+ 6D4C 42 6D       >                dw      last_NFA            // Link to previous definition Name
 119+ 6D4E             >ONE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 119+ 6D4E 0A 6D       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 119+ 6D50             >                else
 119+ 6D50 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 119+ 6D50             >                endif           ; ok        // for other definitions it "points" the correct handler
 119+ 6D50             >                // Use of "; ok" to suppress "warning[fwdref]"
 119+ 6D50             >
 119+ 6D50             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 119+ 6D50 01 00       >                dw      1
 120+ 6D52                              Constant_Def TWO        ,   "2"     ,   2
 120+ 6D52             >                New_Def  TWO, "2", Constant_Ptr, is_normal
 120+ 6D52             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 120+ 6D52             >
 120+ 6D52             >                // dummy db directives used to calculate length of namec
 120+ 6D52 32          >                db      "2"
 120+ 6D53             >len_NFA         defl    $ - temp_NFA
 120+ 6D53             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 120+ 6D52             >
 120+ 6D52 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 120+ 6D53 32          >                db      "2"               // name string in 7-bit ascii, but
 120+ 6D54             >                org     $-1                 // alter last byte of Name just above to set
 120+ 6D53 B2          >                db      {b $} | END_BIT     // msb as name end
 120+ 6D54             >
 120+ 6D54 4A 6D       >                dw      last_NFA            // Link to previous definition Name
 120+ 6D56             >TWO:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 120+ 6D56 0A 6D       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 120+ 6D58             >                else
 120+ 6D58 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 120+ 6D58             >                endif           ; ok        // for other definitions it "points" the correct handler
 120+ 6D58             >                // Use of "; ok" to suppress "warning[fwdref]"
 120+ 6D58             >
 120+ 6D58             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 120+ 6D58 02 00       >                dw      2
 121+ 6D5A                              Constant_Def THREE      ,   "3"     ,   3
 121+ 6D5A             >                New_Def  THREE, "3", Constant_Ptr, is_normal
 121+ 6D5A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 121+ 6D5A             >
 121+ 6D5A             >                // dummy db directives used to calculate length of namec
 121+ 6D5A 33          >                db      "3"
 121+ 6D5B             >len_NFA         defl    $ - temp_NFA
 121+ 6D5B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 121+ 6D5A             >
 121+ 6D5A 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 121+ 6D5B 33          >                db      "3"               // name string in 7-bit ascii, but
 121+ 6D5C             >                org     $-1                 // alter last byte of Name just above to set
 121+ 6D5B B3          >                db      {b $} | END_BIT     // msb as name end
 121+ 6D5C             >
 121+ 6D5C 52 6D       >                dw      last_NFA            // Link to previous definition Name
 121+ 6D5E             >THREE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 121+ 6D5E 0A 6D       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 121+ 6D60             >                else
 121+ 6D60 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 121+ 6D60             >                endif           ; ok        // for other definitions it "points" the correct handler
 121+ 6D60             >                // Use of "; ok" to suppress "warning[fwdref]"
 121+ 6D60             >
 121+ 6D60             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 121+ 6D60 03 00       >                dw      3
 122+ 6D62                              Constant_Def NEG_ONE    ,   "-1"    ,  -1
 122+ 6D62             >                New_Def  NEG_ONE, "-1", Constant_Ptr, is_normal
 122+ 6D62             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 122+ 6D62             >
 122+ 6D62             >                // dummy db directives used to calculate length of namec
 122+ 6D62 2D 31       >                db      "-1"
 122+ 6D64             >len_NFA         defl    $ - temp_NFA
 122+ 6D64             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 122+ 6D62             >
 122+ 6D62 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 122+ 6D63 2D 31       >                db      "-1"               // name string in 7-bit ascii, but
 122+ 6D65             >                org     $-1                 // alter last byte of Name just above to set
 122+ 6D64 B1          >                db      {b $} | END_BIT     // msb as name end
 122+ 6D65             >
 122+ 6D65 5A 6D       >                dw      last_NFA            // Link to previous definition Name
 122+ 6D67             >NEG_ONE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 122+ 6D67 0A 6D       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 122+ 6D69             >                else
 122+ 6D69 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 122+ 6D69             >                endif           ; ok        // for other definitions it "points" the correct handler
 122+ 6D69             >                // Use of "; ok" to suppress "warning[fwdref]"
 122+ 6D69             >
 122+ 6D69             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 122+ 6D69 FF FF       >                dw      -1
 123+ 6D6B                              Constant_Def BL         ,   "BL"    , $20
 123+ 6D6B             >                New_Def  BL, "BL", Constant_Ptr, is_normal
 123+ 6D6B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 123+ 6D6B             >
 123+ 6D6B             >                // dummy db directives used to calculate length of namec
 123+ 6D6B 42 4C       >                db      "BL"
 123+ 6D6D             >len_NFA         defl    $ - temp_NFA
 123+ 6D6D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 123+ 6D6B             >
 123+ 6D6B 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 123+ 6D6C 42 4C       >                db      "BL"               // name string in 7-bit ascii, but
 123+ 6D6E             >                org     $-1                 // alter last byte of Name just above to set
 123+ 6D6D CC          >                db      {b $} | END_BIT     // msb as name end
 123+ 6D6E             >
 123+ 6D6E 62 6D       >                dw      last_NFA            // Link to previous definition Name
 123+ 6D70             >BL:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 123+ 6D70 0A 6D       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 123+ 6D72             >                else
 123+ 6D72 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 123+ 6D72             >                endif           ; ok        // for other definitions it "points" the correct handler
 123+ 6D72             >                // Use of "; ok" to suppress "warning[fwdref]"
 123+ 6D72             >
 123+ 6D72             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 123+ 6D72 20 00       >                dw      $20
 124+ 6D74                              Constant_Def CL         ,   "C/L"   ,  64
 124+ 6D74             >                New_Def  CL, "C/L", Constant_Ptr, is_normal
 124+ 6D74             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 124+ 6D74             >
 124+ 6D74             >                // dummy db directives used to calculate length of namec
 124+ 6D74 43 2F 4C    >                db      "C/L"
 124+ 6D77             >len_NFA         defl    $ - temp_NFA
 124+ 6D77             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 124+ 6D74             >
 124+ 6D74 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 124+ 6D75 43 2F 4C    >                db      "C/L"               // name string in 7-bit ascii, but
 124+ 6D78             >                org     $-1                 // alter last byte of Name just above to set
 124+ 6D77 CC          >                db      {b $} | END_BIT     // msb as name end
 124+ 6D78             >
 124+ 6D78 6B 6D       >                dw      last_NFA            // Link to previous definition Name
 124+ 6D7A             >CL:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 124+ 6D7A 0A 6D       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 124+ 6D7C             >                else
 124+ 6D7C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 124+ 6D7C             >                endif           ; ok        // for other definitions it "points" the correct handler
 124+ 6D7C             >                // Use of "; ok" to suppress "warning[fwdref]"
 124+ 6D7C             >
 124+ 6D7C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 124+ 6D7C 40 00       >                dw      64
 125+ 6D7E                              Constant_Def BBUF       ,   "B/BUF" , 512
 125+ 6D7E             >                New_Def  BBUF, "B/BUF", Constant_Ptr, is_normal
 125+ 6D7E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 125+ 6D7E             >
 125+ 6D7E             >                // dummy db directives used to calculate length of namec
 125+ 6D7E 42 2F 42 55 >                db      "B/BUF"
 125+ 6D82 46          >
 125+ 6D83             >len_NFA         defl    $ - temp_NFA
 125+ 6D83             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 125+ 6D7E             >
 125+ 6D7E 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 125+ 6D7F 42 2F 42 55 >                db      "B/BUF"               // name string in 7-bit ascii, but
 125+ 6D83 46          >
 125+ 6D84             >                org     $-1                 // alter last byte of Name just above to set
 125+ 6D83 C6          >                db      {b $} | END_BIT     // msb as name end
 125+ 6D84             >
 125+ 6D84 74 6D       >                dw      last_NFA            // Link to previous definition Name
 125+ 6D86             >BBUF:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 125+ 6D86 0A 6D       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 125+ 6D88             >                else
 125+ 6D88 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 125+ 6D88             >                endif           ; ok        // for other definitions it "points" the correct handler
 125+ 6D88             >                // Use of "; ok" to suppress "warning[fwdref]"
 125+ 6D88             >
 125+ 6D88             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 125+ 6D88 00 02       >                dw      512
 126+ 6D8A                              Constant_Def BSCR       ,   "B/SCR" ,   2
 126+ 6D8A             >                New_Def  BSCR, "B/SCR", Constant_Ptr, is_normal
 126+ 6D8A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 126+ 6D8A             >
 126+ 6D8A             >                // dummy db directives used to calculate length of namec
 126+ 6D8A 42 2F 53 43 >                db      "B/SCR"
 126+ 6D8E 52          >
 126+ 6D8F             >len_NFA         defl    $ - temp_NFA
 126+ 6D8F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 126+ 6D8A             >
 126+ 6D8A 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 126+ 6D8B 42 2F 53 43 >                db      "B/SCR"               // name string in 7-bit ascii, but
 126+ 6D8F 52          >
 126+ 6D90             >                org     $-1                 // alter last byte of Name just above to set
 126+ 6D8F D2          >                db      {b $} | END_BIT     // msb as name end
 126+ 6D90             >
 126+ 6D90 7E 6D       >                dw      last_NFA            // Link to previous definition Name
 126+ 6D92             >BSCR:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 126+ 6D92 0A 6D       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 126+ 6D94             >                else
 126+ 6D94 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 126+ 6D94             >                endif           ; ok        // for other definitions it "points" the correct handler
 126+ 6D94             >                // Use of "; ok" to suppress "warning[fwdref]"
 126+ 6D94             >
 126+ 6D94             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 126+ 6D94 02 00       >                dw      2
 127+ 6D96                              Constant_Def LSCR       ,   "L/SCR" ,  16
 127+ 6D96             >                New_Def  LSCR, "L/SCR", Constant_Ptr, is_normal
 127+ 6D96             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 127+ 6D96             >
 127+ 6D96             >                // dummy db directives used to calculate length of namec
 127+ 6D96 4C 2F 53 43 >                db      "L/SCR"
 127+ 6D9A 52          >
 127+ 6D9B             >len_NFA         defl    $ - temp_NFA
 127+ 6D9B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 127+ 6D96             >
 127+ 6D96 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 127+ 6D97 4C 2F 53 43 >                db      "L/SCR"               // name string in 7-bit ascii, but
 127+ 6D9B 52          >
 127+ 6D9C             >                org     $-1                 // alter last byte of Name just above to set
 127+ 6D9B D2          >                db      {b $} | END_BIT     // msb as name end
 127+ 6D9C             >
 127+ 6D9C 8A 6D       >                dw      last_NFA            // Link to previous definition Name
 127+ 6D9E             >LSCR:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 127+ 6D9E 0A 6D       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 127+ 6DA0             >                else
 127+ 6DA0 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 127+ 6DA0             >                endif           ; ok        // for other definitions it "points" the correct handler
 127+ 6DA0             >                // Use of "; ok" to suppress "warning[fwdref]"
 127+ 6DA0             >
 127+ 6DA0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 127+ 6DA0 10 00       >                dw      16
 128+ 6DA2
 129+ 6DA2              //  ______________________________________________________________________
 130+ 6DA2              //
 131+ 6DA2              // +origin         --
 132+ 6DA2                              Colon_Def PLUS_ORIGIN, "+ORIGIN", is_normal
 132+ 6DA2             >                New_Def  PLUS_ORIGIN, "+ORIGIN", Enter_Ptr, is_normal ; ok
 132+ 6DA2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 132+ 6DA2             >
 132+ 6DA2             >                // dummy db directives used to calculate length of namec
 132+ 6DA2 2B 4F 52 49 >                db      "+ORIGIN"
 132+ 6DA6 47 49 4E    >
 132+ 6DA9             >len_NFA         defl    $ - temp_NFA
 132+ 6DA9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 132+ 6DA2             >
 132+ 6DA2 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 132+ 6DA3 2B 4F 52 49 >                db      "+ORIGIN"               // name string in 7-bit ascii, but
 132+ 6DA7 47 49 4E    >
 132+ 6DAA             >                org     $-1                 // alter last byte of Name just above to set
 132+ 6DA9 CE          >                db      {b $} | END_BIT     // msb as name end
 132+ 6DAA             >
 132+ 6DAA 96 6D       >                dw      last_NFA            // Link to previous definition Name
 132+ 6DAC             >PLUS_ORIGIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 132+ 6DAC CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 132+ 6DAE             >                else
 132+ 6DAE ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 132+ 6DAE             >                endif           ; ok        // for other definitions it "points" the correct handler
 132+ 6DAE             >                // Use of "; ok" to suppress "warning[fwdref]"
 132+ 6DAE             >
 132+ 6DAE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 133+ 6DAE 45 64 00 64                  dw      LIT, Cold_origin        // [ hex 6400 ] literal
 134+ 6DB2 27 6A                        dw      PLUS                    // +
 135+ 6DB4 95 69                        dw      EXIT                    // ;
 136+ 6DB6
 137+ 6DB6              //  ______________________________________________________________________
 138+ 6DB6              //
 139+ 6DB6                              Constant_Def CNEXT      ,   "(NEXT)", Next_Ptr
 139+ 6DB6             >                New_Def  CNEXT, "(NEXT)", Constant_Ptr, is_normal
 139+ 6DB6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 139+ 6DB6             >
 139+ 6DB6             >                // dummy db directives used to calculate length of namec
 139+ 6DB6 28 4E 45 58 >                db      "(NEXT)"
 139+ 6DBA 54 29       >
 139+ 6DBC             >len_NFA         defl    $ - temp_NFA
 139+ 6DBC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 139+ 6DB6             >
 139+ 6DB6 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 139+ 6DB7 28 4E 45 58 >                db      "(NEXT)"               // name string in 7-bit ascii, but
 139+ 6DBB 54 29       >
 139+ 6DBD             >                org     $-1                 // alter last byte of Name just above to set
 139+ 6DBC A9          >                db      {b $} | END_BIT     // msb as name end
 139+ 6DBD             >
 139+ 6DBD A2 6D       >                dw      last_NFA            // Link to previous definition Name
 139+ 6DBF             >CNEXT:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 139+ 6DBF 0A 6D       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 139+ 6DC1             >                else
 139+ 6DC1 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 139+ 6DC1             >                endif           ; ok        // for other definitions it "points" the correct handler
 139+ 6DC1             >                // Use of "; ok" to suppress "warning[fwdref]"
 139+ 6DC1             >
 139+ 6DC1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 139+ 6DC1 34 64       >                dw      Next_Ptr
 140+ 6DC3
 141+ 6DC3              //  ______________________________________________________________________
 142+ 6DC3              //
 143+ 6DC3
 144+ 6DC3                              User_Def S0         , "S0"        , 06 // starting value of Stack-Pointer
 144+ 6DC3             >                New_Def  S0, "S0", User_Ptr, is_normal
 144+ 6DC3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 144+ 6DC3             >
 144+ 6DC3             >                // dummy db directives used to calculate length of namec
 144+ 6DC3 53 30       >                db      "S0"
 144+ 6DC5             >len_NFA         defl    $ - temp_NFA
 144+ 6DC5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 144+ 6DC3             >
 144+ 6DC3 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 144+ 6DC4 53 30       >                db      "S0"               // name string in 7-bit ascii, but
 144+ 6DC6             >                org     $-1                 // alter last byte of Name just above to set
 144+ 6DC5 B0          >                db      {b $} | END_BIT     // msb as name end
 144+ 6DC6             >
 144+ 6DC6 B6 6D       >                dw      last_NFA            // Link to previous definition Name
 144+ 6DC8             >S0:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 144+ 6DC8 36 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 144+ 6DCA             >                else
 144+ 6DCA ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 144+ 6DCA             >                endif           ; ok        // for other definitions it "points" the correct handler
 144+ 6DCA             >                // Use of "; ok" to suppress "warning[fwdref]"
 144+ 6DCA             >
 144+ 6DCA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 144+ 6DCA 06          >                db      06
 145+ 6DCB                              User_Def R0         , "R0"        , 08 // starting value of Return-Pointer
 145+ 6DCB             >                New_Def  R0, "R0", User_Ptr, is_normal
 145+ 6DCB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 145+ 6DCB             >
 145+ 6DCB             >                // dummy db directives used to calculate length of namec
 145+ 6DCB 52 30       >                db      "R0"
 145+ 6DCD             >len_NFA         defl    $ - temp_NFA
 145+ 6DCD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 145+ 6DCB             >
 145+ 6DCB 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 145+ 6DCC 52 30       >                db      "R0"               // name string in 7-bit ascii, but
 145+ 6DCE             >                org     $-1                 // alter last byte of Name just above to set
 145+ 6DCD B0          >                db      {b $} | END_BIT     // msb as name end
 145+ 6DCE             >
 145+ 6DCE C3 6D       >                dw      last_NFA            // Link to previous definition Name
 145+ 6DD0             >R0:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 145+ 6DD0 36 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 145+ 6DD2             >                else
 145+ 6DD2 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 145+ 6DD2             >                endif           ; ok        // for other definitions it "points" the correct handler
 145+ 6DD2             >                // Use of "; ok" to suppress "warning[fwdref]"
 145+ 6DD2             >
 145+ 6DD2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 145+ 6DD2 08          >                db      08
 146+ 6DD3                              User_Def TIB        , "TIB"       , 10 // input terminal buffer address
 146+ 6DD3             >                New_Def  TIB, "TIB", User_Ptr, is_normal
 146+ 6DD3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 146+ 6DD3             >
 146+ 6DD3             >                // dummy db directives used to calculate length of namec
 146+ 6DD3 54 49 42    >                db      "TIB"
 146+ 6DD6             >len_NFA         defl    $ - temp_NFA
 146+ 6DD6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 146+ 6DD3             >
 146+ 6DD3 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 146+ 6DD4 54 49 42    >                db      "TIB"               // name string in 7-bit ascii, but
 146+ 6DD7             >                org     $-1                 // alter last byte of Name just above to set
 146+ 6DD6 C2          >                db      {b $} | END_BIT     // msb as name end
 146+ 6DD7             >
 146+ 6DD7 CB 6D       >                dw      last_NFA            // Link to previous definition Name
 146+ 6DD9             >TIB:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 146+ 6DD9 36 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 146+ 6DDB             >                else
 146+ 6DDB ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 146+ 6DDB             >                endif           ; ok        // for other definitions it "points" the correct handler
 146+ 6DDB             >                // Use of "; ok" to suppress "warning[fwdref]"
 146+ 6DDB             >
 146+ 6DDB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 146+ 6DDB 0A          >                db      10
 147+ 6DDC                              User_Def WIDTH      , "WIDTH"     , 12 // maximum number of characters for a word name
 147+ 6DDC             >                New_Def  WIDTH, "WIDTH", User_Ptr, is_normal
 147+ 6DDC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 147+ 6DDC             >
 147+ 6DDC             >                // dummy db directives used to calculate length of namec
 147+ 6DDC 57 49 44 54 >                db      "WIDTH"
 147+ 6DE0 48          >
 147+ 6DE1             >len_NFA         defl    $ - temp_NFA
 147+ 6DE1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 147+ 6DDC             >
 147+ 6DDC 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 147+ 6DDD 57 49 44 54 >                db      "WIDTH"               // name string in 7-bit ascii, but
 147+ 6DE1 48          >
 147+ 6DE2             >                org     $-1                 // alter last byte of Name just above to set
 147+ 6DE1 C8          >                db      {b $} | END_BIT     // msb as name end
 147+ 6DE2             >
 147+ 6DE2 D3 6D       >                dw      last_NFA            // Link to previous definition Name
 147+ 6DE4             >WIDTH:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 147+ 6DE4 36 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 147+ 6DE6             >                else
 147+ 6DE6 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 147+ 6DE6             >                endif           ; ok        // for other definitions it "points" the correct handler
 147+ 6DE6             >                // Use of "; ok" to suppress "warning[fwdref]"
 147+ 6DE6             >
 147+ 6DE6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 147+ 6DE6 0C          >                db      12
 148+ 6DE7                              User_Def WARNING    , "WARNING"   , 14 // error reporting method: 0 base, 1 verbose
 148+ 6DE7             >                New_Def  WARNING, "WARNING", User_Ptr, is_normal
 148+ 6DE7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 148+ 6DE7             >
 148+ 6DE7             >                // dummy db directives used to calculate length of namec
 148+ 6DE7 57 41 52 4E >                db      "WARNING"
 148+ 6DEB 49 4E 47    >
 148+ 6DEE             >len_NFA         defl    $ - temp_NFA
 148+ 6DEE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 148+ 6DE7             >
 148+ 6DE7 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 148+ 6DE8 57 41 52 4E >                db      "WARNING"               // name string in 7-bit ascii, but
 148+ 6DEC 49 4E 47    >
 148+ 6DEF             >                org     $-1                 // alter last byte of Name just above to set
 148+ 6DEE C7          >                db      {b $} | END_BIT     // msb as name end
 148+ 6DEF             >
 148+ 6DEF DC 6D       >                dw      last_NFA            // Link to previous definition Name
 148+ 6DF1             >WARNING:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 148+ 6DF1 36 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 148+ 6DF3             >                else
 148+ 6DF3 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 148+ 6DF3             >                endif           ; ok        // for other definitions it "points" the correct handler
 148+ 6DF3             >                // Use of "; ok" to suppress "warning[fwdref]"
 148+ 6DF3             >
 148+ 6DF3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 148+ 6DF3 0E          >                db      14
 149+ 6DF4                              User_Def FENCE      , "FENCE"     , 16 // minimum address where FORGET can work
 149+ 6DF4             >                New_Def  FENCE, "FENCE", User_Ptr, is_normal
 149+ 6DF4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 149+ 6DF4             >
 149+ 6DF4             >                // dummy db directives used to calculate length of namec
 149+ 6DF4 46 45 4E 43 >                db      "FENCE"
 149+ 6DF8 45          >
 149+ 6DF9             >len_NFA         defl    $ - temp_NFA
 149+ 6DF9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 149+ 6DF4             >
 149+ 6DF4 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 149+ 6DF5 46 45 4E 43 >                db      "FENCE"               // name string in 7-bit ascii, but
 149+ 6DF9 45          >
 149+ 6DFA             >                org     $-1                 // alter last byte of Name just above to set
 149+ 6DF9 C5          >                db      {b $} | END_BIT     // msb as name end
 149+ 6DFA             >
 149+ 6DFA E7 6D       >                dw      last_NFA            // Link to previous definition Name
 149+ 6DFC             >FENCE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 149+ 6DFC 36 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 149+ 6DFE             >                else
 149+ 6DFE ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 149+ 6DFE             >                endif           ; ok        // for other definitions it "points" the correct handler
 149+ 6DFE             >                // Use of "; ok" to suppress "warning[fwdref]"
 149+ 6DFE             >
 149+ 6DFE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 149+ 6DFE 10          >                db      16
 150+ 6DFF                              User_Def DP         , "DP"        , 18 // Dictionary Pointer
 150+ 6DFF             >                New_Def  DP, "DP", User_Ptr, is_normal
 150+ 6DFF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 150+ 6DFF             >
 150+ 6DFF             >                // dummy db directives used to calculate length of namec
 150+ 6DFF 44 50       >                db      "DP"
 150+ 6E01             >len_NFA         defl    $ - temp_NFA
 150+ 6E01             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 150+ 6DFF             >
 150+ 6DFF 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 150+ 6E00 44 50       >                db      "DP"               // name string in 7-bit ascii, but
 150+ 6E02             >                org     $-1                 // alter last byte of Name just above to set
 150+ 6E01 D0          >                db      {b $} | END_BIT     // msb as name end
 150+ 6E02             >
 150+ 6E02 F4 6D       >                dw      last_NFA            // Link to previous definition Name
 150+ 6E04             >DP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 150+ 6E04 36 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 150+ 6E06             >                else
 150+ 6E06 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 150+ 6E06             >                endif           ; ok        // for other definitions it "points" the correct handler
 150+ 6E06             >                // Use of "; ok" to suppress "warning[fwdref]"
 150+ 6E06             >
 150+ 6E06             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 150+ 6E06 12          >                db      18
 151+ 6E07                              User_Def VOC_LINK   , "VOC-LINK"  , 20 // pointer to the latest vocabulary
 151+ 6E07             >                New_Def  VOC_LINK, "VOC-LINK", User_Ptr, is_normal
 151+ 6E07             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 151+ 6E07             >
 151+ 6E07             >                // dummy db directives used to calculate length of namec
 151+ 6E07 56 4F 43 2D >                db      "VOC-LINK"
 151+ 6E0B 4C 49 4E 4B >
 151+ 6E0F             >len_NFA         defl    $ - temp_NFA
 151+ 6E0F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 151+ 6E07             >
 151+ 6E07 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 151+ 6E08 56 4F 43 2D >                db      "VOC-LINK"               // name string in 7-bit ascii, but
 151+ 6E0C 4C 49 4E 4B >
 151+ 6E10             >                org     $-1                 // alter last byte of Name just above to set
 151+ 6E0F CB          >                db      {b $} | END_BIT     // msb as name end
 151+ 6E10             >
 151+ 6E10 FF 6D       >                dw      last_NFA            // Link to previous definition Name
 151+ 6E12             >VOC_LINK:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 151+ 6E12 36 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 151+ 6E14             >                else
 151+ 6E14 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 151+ 6E14             >                endif           ; ok        // for other definitions it "points" the correct handler
 151+ 6E14             >                // Use of "; ok" to suppress "warning[fwdref]"
 151+ 6E14             >
 151+ 6E14             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 151+ 6E14 14          >                db      20
 152+ 6E15                              User_Def FIRST      , "FIRST"     , 22 // address of first buffer
 152+ 6E15             >                New_Def  FIRST, "FIRST", User_Ptr, is_normal
 152+ 6E15             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 152+ 6E15             >
 152+ 6E15             >                // dummy db directives used to calculate length of namec
 152+ 6E15 46 49 52 53 >                db      "FIRST"
 152+ 6E19 54          >
 152+ 6E1A             >len_NFA         defl    $ - temp_NFA
 152+ 6E1A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 152+ 6E15             >
 152+ 6E15 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 152+ 6E16 46 49 52 53 >                db      "FIRST"               // name string in 7-bit ascii, but
 152+ 6E1A 54          >
 152+ 6E1B             >                org     $-1                 // alter last byte of Name just above to set
 152+ 6E1A D4          >                db      {b $} | END_BIT     // msb as name end
 152+ 6E1B             >
 152+ 6E1B 07 6E       >                dw      last_NFA            // Link to previous definition Name
 152+ 6E1D             >FIRST:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 152+ 6E1D 36 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 152+ 6E1F             >                else
 152+ 6E1F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 152+ 6E1F             >                endif           ; ok        // for other definitions it "points" the correct handler
 152+ 6E1F             >                // Use of "; ok" to suppress "warning[fwdref]"
 152+ 6E1F             >
 152+ 6E1F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 152+ 6E1F 16          >                db      22
 153+ 6E20                              User_Def LIMIT      , "LIMIT"     , 24 // address of last buffer
 153+ 6E20             >                New_Def  LIMIT, "LIMIT", User_Ptr, is_normal
 153+ 6E20             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 153+ 6E20             >
 153+ 6E20             >                // dummy db directives used to calculate length of namec
 153+ 6E20 4C 49 4D 49 >                db      "LIMIT"
 153+ 6E24 54          >
 153+ 6E25             >len_NFA         defl    $ - temp_NFA
 153+ 6E25             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 153+ 6E20             >
 153+ 6E20 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 153+ 6E21 4C 49 4D 49 >                db      "LIMIT"               // name string in 7-bit ascii, but
 153+ 6E25 54          >
 153+ 6E26             >                org     $-1                 // alter last byte of Name just above to set
 153+ 6E25 D4          >                db      {b $} | END_BIT     // msb as name end
 153+ 6E26             >
 153+ 6E26 15 6E       >                dw      last_NFA            // Link to previous definition Name
 153+ 6E28             >LIMIT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 153+ 6E28 36 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 153+ 6E2A             >                else
 153+ 6E2A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 153+ 6E2A             >                endif           ; ok        // for other definitions it "points" the correct handler
 153+ 6E2A             >                // Use of "; ok" to suppress "warning[fwdref]"
 153+ 6E2A             >
 153+ 6E2A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 153+ 6E2A 18          >                db      24
 154+ 6E2B                              User_Def EXP        , "EXP"       , 26 // keeps the exponent in number conversion
 154+ 6E2B             >                New_Def  EXP, "EXP", User_Ptr, is_normal
 154+ 6E2B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 154+ 6E2B             >
 154+ 6E2B             >                // dummy db directives used to calculate length of namec
 154+ 6E2B 45 58 50    >                db      "EXP"
 154+ 6E2E             >len_NFA         defl    $ - temp_NFA
 154+ 6E2E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 154+ 6E2B             >
 154+ 6E2B 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 154+ 6E2C 45 58 50    >                db      "EXP"               // name string in 7-bit ascii, but
 154+ 6E2F             >                org     $-1                 // alter last byte of Name just above to set
 154+ 6E2E D0          >                db      {b $} | END_BIT     // msb as name end
 154+ 6E2F             >
 154+ 6E2F 20 6E       >                dw      last_NFA            // Link to previous definition Name
 154+ 6E31             >EXP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 154+ 6E31 36 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 154+ 6E33             >                else
 154+ 6E33 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 154+ 6E33             >                endif           ; ok        // for other definitions it "points" the correct handler
 154+ 6E33             >                // Use of "; ok" to suppress "warning[fwdref]"
 154+ 6E33             >
 154+ 6E33             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 154+ 6E33 1A          >                db      26
 155+ 6E34                              User_Def NMODE      , "NMODE"     , 28 // number mode: 0 integer, 1 floating point
 155+ 6E34             >                New_Def  NMODE, "NMODE", User_Ptr, is_normal
 155+ 6E34             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 155+ 6E34             >
 155+ 6E34             >                // dummy db directives used to calculate length of namec
 155+ 6E34 4E 4D 4F 44 >                db      "NMODE"
 155+ 6E38 45          >
 155+ 6E39             >len_NFA         defl    $ - temp_NFA
 155+ 6E39             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 155+ 6E34             >
 155+ 6E34 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 155+ 6E35 4E 4D 4F 44 >                db      "NMODE"               // name string in 7-bit ascii, but
 155+ 6E39 45          >
 155+ 6E3A             >                org     $-1                 // alter last byte of Name just above to set
 155+ 6E39 C5          >                db      {b $} | END_BIT     // msb as name end
 155+ 6E3A             >
 155+ 6E3A 2B 6E       >                dw      last_NFA            // Link to previous definition Name
 155+ 6E3C             >NMODE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 155+ 6E3C 36 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 155+ 6E3E             >                else
 155+ 6E3E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 155+ 6E3E             >                endif           ; ok        // for other definitions it "points" the correct handler
 155+ 6E3E             >                // Use of "; ok" to suppress "warning[fwdref]"
 155+ 6E3E             >
 155+ 6E3E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 155+ 6E3E 1C          >                db      28
 156+ 6E3F                              User_Def BLK        , "BLK"       , 30 // block number to be interpreted. 0 for terminal
 156+ 6E3F             >                New_Def  BLK, "BLK", User_Ptr, is_normal
 156+ 6E3F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 156+ 6E3F             >
 156+ 6E3F             >                // dummy db directives used to calculate length of namec
 156+ 6E3F 42 4C 4B    >                db      "BLK"
 156+ 6E42             >len_NFA         defl    $ - temp_NFA
 156+ 6E42             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 156+ 6E3F             >
 156+ 6E3F 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 156+ 6E40 42 4C 4B    >                db      "BLK"               // name string in 7-bit ascii, but
 156+ 6E43             >                org     $-1                 // alter last byte of Name just above to set
 156+ 6E42 CB          >                db      {b $} | END_BIT     // msb as name end
 156+ 6E43             >
 156+ 6E43 34 6E       >                dw      last_NFA            // Link to previous definition Name
 156+ 6E45             >BLK:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 156+ 6E45 36 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 156+ 6E47             >                else
 156+ 6E47 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 156+ 6E47             >                endif           ; ok        // for other definitions it "points" the correct handler
 156+ 6E47             >                // Use of "; ok" to suppress "warning[fwdref]"
 156+ 6E47             >
 156+ 6E47             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 156+ 6E47 1E          >                db      30
 157+ 6E48                              User_Def TO_IN      , ">IN"       , 32 // incremented when consuming input buffer
 157+ 6E48             >                New_Def  TO_IN, ">IN", User_Ptr, is_normal
 157+ 6E48             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 157+ 6E48             >
 157+ 6E48             >                // dummy db directives used to calculate length of namec
 157+ 6E48 3E 49 4E    >                db      ">IN"
 157+ 6E4B             >len_NFA         defl    $ - temp_NFA
 157+ 6E4B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 157+ 6E48             >
 157+ 6E48 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 157+ 6E49 3E 49 4E    >                db      ">IN"               // name string in 7-bit ascii, but
 157+ 6E4C             >                org     $-1                 // alter last byte of Name just above to set
 157+ 6E4B CE          >                db      {b $} | END_BIT     // msb as name end
 157+ 6E4C             >
 157+ 6E4C 3F 6E       >                dw      last_NFA            // Link to previous definition Name
 157+ 6E4E             >TO_IN:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 157+ 6E4E 36 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 157+ 6E50             >                else
 157+ 6E50 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 157+ 6E50             >                endif           ; ok        // for other definitions it "points" the correct handler
 157+ 6E50             >                // Use of "; ok" to suppress "warning[fwdref]"
 157+ 6E50             >
 157+ 6E50             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 157+ 6E50 20          >                db      32
 158+ 6E51                              User_Def OUT        , "OUT"       , 34 // incremented when sending to output
 158+ 6E51             >                New_Def  OUT, "OUT", User_Ptr, is_normal
 158+ 6E51             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 158+ 6E51             >
 158+ 6E51             >                // dummy db directives used to calculate length of namec
 158+ 6E51 4F 55 54    >                db      "OUT"
 158+ 6E54             >len_NFA         defl    $ - temp_NFA
 158+ 6E54             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 158+ 6E51             >
 158+ 6E51 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 158+ 6E52 4F 55 54    >                db      "OUT"               // name string in 7-bit ascii, but
 158+ 6E55             >                org     $-1                 // alter last byte of Name just above to set
 158+ 6E54 D4          >                db      {b $} | END_BIT     // msb as name end
 158+ 6E55             >
 158+ 6E55 48 6E       >                dw      last_NFA            // Link to previous definition Name
 158+ 6E57             >OUT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 158+ 6E57 36 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 158+ 6E59             >                else
 158+ 6E59 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 158+ 6E59             >                endif           ; ok        // for other definitions it "points" the correct handler
 158+ 6E59             >                // Use of "; ok" to suppress "warning[fwdref]"
 158+ 6E59             >
 158+ 6E59             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 158+ 6E59 22          >                db      34
 159+ 6E5A                              User_Def SCR        , "SCR"       , 36 // latest screen retreieved by LIST
 159+ 6E5A             >                New_Def  SCR, "SCR", User_Ptr, is_normal
 159+ 6E5A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 159+ 6E5A             >
 159+ 6E5A             >                // dummy db directives used to calculate length of namec
 159+ 6E5A 53 43 52    >                db      "SCR"
 159+ 6E5D             >len_NFA         defl    $ - temp_NFA
 159+ 6E5D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 159+ 6E5A             >
 159+ 6E5A 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 159+ 6E5B 53 43 52    >                db      "SCR"               // name string in 7-bit ascii, but
 159+ 6E5E             >                org     $-1                 // alter last byte of Name just above to set
 159+ 6E5D D2          >                db      {b $} | END_BIT     // msb as name end
 159+ 6E5E             >
 159+ 6E5E 51 6E       >                dw      last_NFA            // Link to previous definition Name
 159+ 6E60             >SCR:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 159+ 6E60 36 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 159+ 6E62             >                else
 159+ 6E62 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 159+ 6E62             >                endif           ; ok        // for other definitions it "points" the correct handler
 159+ 6E62             >                // Use of "; ok" to suppress "warning[fwdref]"
 159+ 6E62             >
 159+ 6E62             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 159+ 6E62 24          >                db      36
 160+ 6E63                              User_Def OFFSET     , "OFFSET"    , 38 //
 160+ 6E63             >                New_Def  OFFSET, "OFFSET", User_Ptr, is_normal
 160+ 6E63             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 160+ 6E63             >
 160+ 6E63             >                // dummy db directives used to calculate length of namec
 160+ 6E63 4F 46 46 53 >                db      "OFFSET"
 160+ 6E67 45 54       >
 160+ 6E69             >len_NFA         defl    $ - temp_NFA
 160+ 6E69             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 160+ 6E63             >
 160+ 6E63 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 160+ 6E64 4F 46 46 53 >                db      "OFFSET"               // name string in 7-bit ascii, but
 160+ 6E68 45 54       >
 160+ 6E6A             >                org     $-1                 // alter last byte of Name just above to set
 160+ 6E69 D4          >                db      {b $} | END_BIT     // msb as name end
 160+ 6E6A             >
 160+ 6E6A 5A 6E       >                dw      last_NFA            // Link to previous definition Name
 160+ 6E6C             >OFFSET:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 160+ 6E6C 36 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 160+ 6E6E             >                else
 160+ 6E6E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 160+ 6E6E             >                endif           ; ok        // for other definitions it "points" the correct handler
 160+ 6E6E             >                // Use of "; ok" to suppress "warning[fwdref]"
 160+ 6E6E             >
 160+ 6E6E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 160+ 6E6E 26          >                db      38
 161+ 6E6F                              User_Def CONTEXT    , "CONTEXT"   , 40 // pointer to the vocabulary where search begins
 161+ 6E6F             >                New_Def  CONTEXT, "CONTEXT", User_Ptr, is_normal
 161+ 6E6F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 161+ 6E6F             >
 161+ 6E6F             >                // dummy db directives used to calculate length of namec
 161+ 6E6F 43 4F 4E 54 >                db      "CONTEXT"
 161+ 6E73 45 58 54    >
 161+ 6E76             >len_NFA         defl    $ - temp_NFA
 161+ 6E76             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 161+ 6E6F             >
 161+ 6E6F 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 161+ 6E70 43 4F 4E 54 >                db      "CONTEXT"               // name string in 7-bit ascii, but
 161+ 6E74 45 58 54    >
 161+ 6E77             >                org     $-1                 // alter last byte of Name just above to set
 161+ 6E76 D4          >                db      {b $} | END_BIT     // msb as name end
 161+ 6E77             >
 161+ 6E77 63 6E       >                dw      last_NFA            // Link to previous definition Name
 161+ 6E79             >CONTEXT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 161+ 6E79 36 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 161+ 6E7B             >                else
 161+ 6E7B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 161+ 6E7B             >                endif           ; ok        // for other definitions it "points" the correct handler
 161+ 6E7B             >                // Use of "; ok" to suppress "warning[fwdref]"
 161+ 6E7B             >
 161+ 6E7B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 161+ 6E7B 28          >                db      40
 162+ 6E7C                              User_Def CURRENT    , "CURRENT"   , 42 // pointer to the vocabulary where search continues
 162+ 6E7C             >                New_Def  CURRENT, "CURRENT", User_Ptr, is_normal
 162+ 6E7C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 162+ 6E7C             >
 162+ 6E7C             >                // dummy db directives used to calculate length of namec
 162+ 6E7C 43 55 52 52 >                db      "CURRENT"
 162+ 6E80 45 4E 54    >
 162+ 6E83             >len_NFA         defl    $ - temp_NFA
 162+ 6E83             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 162+ 6E7C             >
 162+ 6E7C 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 162+ 6E7D 43 55 52 52 >                db      "CURRENT"               // name string in 7-bit ascii, but
 162+ 6E81 45 4E 54    >
 162+ 6E84             >                org     $-1                 // alter last byte of Name just above to set
 162+ 6E83 D4          >                db      {b $} | END_BIT     // msb as name end
 162+ 6E84             >
 162+ 6E84 6F 6E       >                dw      last_NFA            // Link to previous definition Name
 162+ 6E86             >CURRENT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 162+ 6E86 36 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 162+ 6E88             >                else
 162+ 6E88 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 162+ 6E88             >                endif           ; ok        // for other definitions it "points" the correct handler
 162+ 6E88             >                // Use of "; ok" to suppress "warning[fwdref]"
 162+ 6E88             >
 162+ 6E88             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 162+ 6E88 2A          >                db      42
 163+ 6E89                              User_Def STATE      , "STATE"     , 44 // compilation status. 0 interpreting.
 163+ 6E89             >                New_Def  STATE, "STATE", User_Ptr, is_normal
 163+ 6E89             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 163+ 6E89             >
 163+ 6E89             >                // dummy db directives used to calculate length of namec
 163+ 6E89 53 54 41 54 >                db      "STATE"
 163+ 6E8D 45          >
 163+ 6E8E             >len_NFA         defl    $ - temp_NFA
 163+ 6E8E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 163+ 6E89             >
 163+ 6E89 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 163+ 6E8A 53 54 41 54 >                db      "STATE"               // name string in 7-bit ascii, but
 163+ 6E8E 45          >
 163+ 6E8F             >                org     $-1                 // alter last byte of Name just above to set
 163+ 6E8E C5          >                db      {b $} | END_BIT     // msb as name end
 163+ 6E8F             >
 163+ 6E8F 7C 6E       >                dw      last_NFA            // Link to previous definition Name
 163+ 6E91             >STATE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 163+ 6E91 36 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 163+ 6E93             >                else
 163+ 6E93 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 163+ 6E93             >                endif           ; ok        // for other definitions it "points" the correct handler
 163+ 6E93             >                // Use of "; ok" to suppress "warning[fwdref]"
 163+ 6E93             >
 163+ 6E93             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 163+ 6E93 2C          >                db      44
 164+ 6E94                              User_Def BASE       , "BASE"      , 46 //
 164+ 6E94             >                New_Def  BASE, "BASE", User_Ptr, is_normal
 164+ 6E94             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 164+ 6E94             >
 164+ 6E94             >                // dummy db directives used to calculate length of namec
 164+ 6E94 42 41 53 45 >                db      "BASE"
 164+ 6E98             >len_NFA         defl    $ - temp_NFA
 164+ 6E98             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 164+ 6E94             >
 164+ 6E94 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 164+ 6E95 42 41 53 45 >                db      "BASE"               // name string in 7-bit ascii, but
 164+ 6E99             >                org     $-1                 // alter last byte of Name just above to set
 164+ 6E98 C5          >                db      {b $} | END_BIT     // msb as name end
 164+ 6E99             >
 164+ 6E99 89 6E       >                dw      last_NFA            // Link to previous definition Name
 164+ 6E9B             >BASE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 164+ 6E9B 36 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 164+ 6E9D             >                else
 164+ 6E9D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 164+ 6E9D             >                endif           ; ok        // for other definitions it "points" the correct handler
 164+ 6E9D             >                // Use of "; ok" to suppress "warning[fwdref]"
 164+ 6E9D             >
 164+ 6E9D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 164+ 6E9D 2E          >                db      46
 165+ 6E9E                              User_Def DPL        , "DPL"       , 48 // number of digits after decimal point in conversion
 165+ 6E9E             >                New_Def  DPL, "DPL", User_Ptr, is_normal
 165+ 6E9E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 165+ 6E9E             >
 165+ 6E9E             >                // dummy db directives used to calculate length of namec
 165+ 6E9E 44 50 4C    >                db      "DPL"
 165+ 6EA1             >len_NFA         defl    $ - temp_NFA
 165+ 6EA1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 165+ 6E9E             >
 165+ 6E9E 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 165+ 6E9F 44 50 4C    >                db      "DPL"               // name string in 7-bit ascii, but
 165+ 6EA2             >                org     $-1                 // alter last byte of Name just above to set
 165+ 6EA1 CC          >                db      {b $} | END_BIT     // msb as name end
 165+ 6EA2             >
 165+ 6EA2 94 6E       >                dw      last_NFA            // Link to previous definition Name
 165+ 6EA4             >DPL:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 165+ 6EA4 36 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 165+ 6EA6             >                else
 165+ 6EA6 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 165+ 6EA6             >                endif           ; ok        // for other definitions it "points" the correct handler
 165+ 6EA6             >                // Use of "; ok" to suppress "warning[fwdref]"
 165+ 6EA6             >
 165+ 6EA6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 165+ 6EA6 30          >                db      48
 166+ 6EA7                              User_Def FLD        , "FLD"       , 50 // output field width
 166+ 6EA7             >                New_Def  FLD, "FLD", User_Ptr, is_normal
 166+ 6EA7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 166+ 6EA7             >
 166+ 6EA7             >                // dummy db directives used to calculate length of namec
 166+ 6EA7 46 4C 44    >                db      "FLD"
 166+ 6EAA             >len_NFA         defl    $ - temp_NFA
 166+ 6EAA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 166+ 6EA7             >
 166+ 6EA7 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 166+ 6EA8 46 4C 44    >                db      "FLD"               // name string in 7-bit ascii, but
 166+ 6EAB             >                org     $-1                 // alter last byte of Name just above to set
 166+ 6EAA C4          >                db      {b $} | END_BIT     // msb as name end
 166+ 6EAB             >
 166+ 6EAB 9E 6E       >                dw      last_NFA            // Link to previous definition Name
 166+ 6EAD             >FLD:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 166+ 6EAD 36 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 166+ 6EAF             >                else
 166+ 6EAF ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 166+ 6EAF             >                endif           ; ok        // for other definitions it "points" the correct handler
 166+ 6EAF             >                // Use of "; ok" to suppress "warning[fwdref]"
 166+ 6EAF             >
 166+ 6EAF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 166+ 6EAF 32          >                db      50
 167+ 6EB0                              User_Def CSP        , "CSP"       , 52 // used to temporary store Stack-Pointer value
 167+ 6EB0             >                New_Def  CSP, "CSP", User_Ptr, is_normal
 167+ 6EB0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 167+ 6EB0             >
 167+ 6EB0             >                // dummy db directives used to calculate length of namec
 167+ 6EB0 43 53 50    >                db      "CSP"
 167+ 6EB3             >len_NFA         defl    $ - temp_NFA
 167+ 6EB3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 167+ 6EB0             >
 167+ 6EB0 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 167+ 6EB1 43 53 50    >                db      "CSP"               // name string in 7-bit ascii, but
 167+ 6EB4             >                org     $-1                 // alter last byte of Name just above to set
 167+ 6EB3 D0          >                db      {b $} | END_BIT     // msb as name end
 167+ 6EB4             >
 167+ 6EB4 A7 6E       >                dw      last_NFA            // Link to previous definition Name
 167+ 6EB6             >CSP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 167+ 6EB6 36 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 167+ 6EB8             >                else
 167+ 6EB8 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 167+ 6EB8             >                endif           ; ok        // for other definitions it "points" the correct handler
 167+ 6EB8             >                // Use of "; ok" to suppress "warning[fwdref]"
 167+ 6EB8             >
 167+ 6EB8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 167+ 6EB8 34          >                db      52
 168+ 6EB9                              User_Def RSHARP     , "R#"        , 54 // location of editing cursor
 168+ 6EB9             >                New_Def  RSHARP, "R#", User_Ptr, is_normal
 168+ 6EB9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 168+ 6EB9             >
 168+ 6EB9             >                // dummy db directives used to calculate length of namec
 168+ 6EB9 52 23       >                db      "R#"
 168+ 6EBB             >len_NFA         defl    $ - temp_NFA
 168+ 6EBB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 168+ 6EB9             >
 168+ 6EB9 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 168+ 6EBA 52 23       >                db      "R#"               // name string in 7-bit ascii, but
 168+ 6EBC             >                org     $-1                 // alter last byte of Name just above to set
 168+ 6EBB A3          >                db      {b $} | END_BIT     // msb as name end
 168+ 6EBC             >
 168+ 6EBC B0 6E       >                dw      last_NFA            // Link to previous definition Name
 168+ 6EBE             >RSHARP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 168+ 6EBE 36 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 168+ 6EC0             >                else
 168+ 6EC0 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 168+ 6EC0             >                endif           ; ok        // for other definitions it "points" the correct handler
 168+ 6EC0             >                // Use of "; ok" to suppress "warning[fwdref]"
 168+ 6EC0             >
 168+ 6EC0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 168+ 6EC0 36          >                db      54
 169+ 6EC1                              User_Def HLD        , "HLD"       , 56 // last character during a number conversion output
 169+ 6EC1             >                New_Def  HLD, "HLD", User_Ptr, is_normal
 169+ 6EC1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 169+ 6EC1             >
 169+ 6EC1             >                // dummy db directives used to calculate length of namec
 169+ 6EC1 48 4C 44    >                db      "HLD"
 169+ 6EC4             >len_NFA         defl    $ - temp_NFA
 169+ 6EC4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 169+ 6EC1             >
 169+ 6EC1 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 169+ 6EC2 48 4C 44    >                db      "HLD"               // name string in 7-bit ascii, but
 169+ 6EC5             >                org     $-1                 // alter last byte of Name just above to set
 169+ 6EC4 C4          >                db      {b $} | END_BIT     // msb as name end
 169+ 6EC5             >
 169+ 6EC5 B9 6E       >                dw      last_NFA            // Link to previous definition Name
 169+ 6EC7             >HLD:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 169+ 6EC7 36 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 169+ 6EC9             >                else
 169+ 6EC9 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 169+ 6EC9             >                endif           ; ok        // for other definitions it "points" the correct handler
 169+ 6EC9             >                // Use of "; ok" to suppress "warning[fwdref]"
 169+ 6EC9             >
 169+ 6EC9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 169+ 6EC9 38          >                db      56
 170+ 6ECA                              User_Def USE        , "USE"       , 58 // address of last used block
 170+ 6ECA             >                New_Def  USE, "USE", User_Ptr, is_normal
 170+ 6ECA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 170+ 6ECA             >
 170+ 6ECA             >                // dummy db directives used to calculate length of namec
 170+ 6ECA 55 53 45    >                db      "USE"
 170+ 6ECD             >len_NFA         defl    $ - temp_NFA
 170+ 6ECD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 170+ 6ECA             >
 170+ 6ECA 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 170+ 6ECB 55 53 45    >                db      "USE"               // name string in 7-bit ascii, but
 170+ 6ECE             >                org     $-1                 // alter last byte of Name just above to set
 170+ 6ECD C5          >                db      {b $} | END_BIT     // msb as name end
 170+ 6ECE             >
 170+ 6ECE C1 6E       >                dw      last_NFA            // Link to previous definition Name
 170+ 6ED0             >USE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 170+ 6ED0 36 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 170+ 6ED2             >                else
 170+ 6ED2 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 170+ 6ED2             >                endif           ; ok        // for other definitions it "points" the correct handler
 170+ 6ED2             >                // Use of "; ok" to suppress "warning[fwdref]"
 170+ 6ED2             >
 170+ 6ED2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 170+ 6ED2 3A          >                db      58
 171+ 6ED3                              User_Def PREV       , "PREV"      , 60 // address of previous used block
 171+ 6ED3             >                New_Def  PREV, "PREV", User_Ptr, is_normal
 171+ 6ED3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 171+ 6ED3             >
 171+ 6ED3             >                // dummy db directives used to calculate length of namec
 171+ 6ED3 50 52 45 56 >                db      "PREV"
 171+ 6ED7             >len_NFA         defl    $ - temp_NFA
 171+ 6ED7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 171+ 6ED3             >
 171+ 6ED3 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 171+ 6ED4 50 52 45 56 >                db      "PREV"               // name string in 7-bit ascii, but
 171+ 6ED8             >                org     $-1                 // alter last byte of Name just above to set
 171+ 6ED7 D6          >                db      {b $} | END_BIT     // msb as name end
 171+ 6ED8             >
 171+ 6ED8 CA 6E       >                dw      last_NFA            // Link to previous definition Name
 171+ 6EDA             >PREV:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 171+ 6EDA 36 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 171+ 6EDC             >                else
 171+ 6EDC ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 171+ 6EDC             >                endif           ; ok        // for other definitions it "points" the correct handler
 171+ 6EDC             >                // Use of "; ok" to suppress "warning[fwdref]"
 171+ 6EDC             >
 171+ 6EDC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 171+ 6EDC 3C          >                db      60
 172+ 6EDD                              User_Def LP         , "LP"        , 62 // line printer (not used)
 172+ 6EDD             >                New_Def  LP, "LP", User_Ptr, is_normal
 172+ 6EDD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 172+ 6EDD             >
 172+ 6EDD             >                // dummy db directives used to calculate length of namec
 172+ 6EDD 4C 50       >                db      "LP"
 172+ 6EDF             >len_NFA         defl    $ - temp_NFA
 172+ 6EDF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 172+ 6EDD             >
 172+ 6EDD 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 172+ 6EDE 4C 50       >                db      "LP"               // name string in 7-bit ascii, but
 172+ 6EE0             >                org     $-1                 // alter last byte of Name just above to set
 172+ 6EDF D0          >                db      {b $} | END_BIT     // msb as name end
 172+ 6EE0             >
 172+ 6EE0 D3 6E       >                dw      last_NFA            // Link to previous definition Name
 172+ 6EE2             >LP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 172+ 6EE2 36 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 172+ 6EE4             >                else
 172+ 6EE4 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 172+ 6EE4             >                endif           ; ok        // for other definitions it "points" the correct handler
 172+ 6EE4             >                // Use of "; ok" to suppress "warning[fwdref]"
 172+ 6EE4             >
 172+ 6EE4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 172+ 6EE4 3E          >                db      62
 173+ 6EE5                              User_Def PLACE      , "PLACE"     , 64 // number of digits after decimal point in output
 173+ 6EE5             >                New_Def  PLACE, "PLACE", User_Ptr, is_normal
 173+ 6EE5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 173+ 6EE5             >
 173+ 6EE5             >                // dummy db directives used to calculate length of namec
 173+ 6EE5 50 4C 41 43 >                db      "PLACE"
 173+ 6EE9 45          >
 173+ 6EEA             >len_NFA         defl    $ - temp_NFA
 173+ 6EEA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 173+ 6EE5             >
 173+ 6EE5 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 173+ 6EE6 50 4C 41 43 >                db      "PLACE"               // name string in 7-bit ascii, but
 173+ 6EEA 45          >
 173+ 6EEB             >                org     $-1                 // alter last byte of Name just above to set
 173+ 6EEA C5          >                db      {b $} | END_BIT     // msb as name end
 173+ 6EEB             >
 173+ 6EEB DD 6E       >                dw      last_NFA            // Link to previous definition Name
 173+ 6EED             >PLACE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 173+ 6EED 36 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 173+ 6EEF             >                else
 173+ 6EEF ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 173+ 6EEF             >                endif           ; ok        // for other definitions it "points" the correct handler
 173+ 6EEF             >                // Use of "; ok" to suppress "warning[fwdref]"
 173+ 6EEF             >
 173+ 6EEF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 173+ 6EEF 40          >                db      64
 174+ 6EF0                              User_Def SOURCE_ID  , "SOURCE-ID" , 66 // data-stream number in INCLUDE and LOAD-
 174+ 6EF0             >                New_Def  SOURCE_ID, "SOURCE-ID", User_Ptr, is_normal
 174+ 6EF0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 174+ 6EF0             >
 174+ 6EF0             >                // dummy db directives used to calculate length of namec
 174+ 6EF0 53 4F 55 52 >                db      "SOURCE-ID"
 174+ 6EF4 43 45 2D 49 >
 174+ 6EF8 44          >
 174+ 6EF9             >len_NFA         defl    $ - temp_NFA
 174+ 6EF9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 174+ 6EF0             >
 174+ 6EF0 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 174+ 6EF1 53 4F 55 52 >                db      "SOURCE-ID"               // name string in 7-bit ascii, but
 174+ 6EF5 43 45 2D 49 >
 174+ 6EF9 44          >
 174+ 6EFA             >                org     $-1                 // alter last byte of Name just above to set
 174+ 6EF9 C4          >                db      {b $} | END_BIT     // msb as name end
 174+ 6EFA             >
 174+ 6EFA E5 6E       >                dw      last_NFA            // Link to previous definition Name
 174+ 6EFC             >SOURCE_ID:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 174+ 6EFC 36 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 174+ 6EFE             >                else
 174+ 6EFE ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 174+ 6EFE             >                endif           ; ok        // for other definitions it "points" the correct handler
 174+ 6EFE             >                // Use of "; ok" to suppress "warning[fwdref]"
 174+ 6EFE             >
 174+ 6EFE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 174+ 6EFE 42          >                db      66
 175+ 6EFF                              User_Def SPAN       , "SPAN"      , 68 // number of character of last EXPECT
 175+ 6EFF             >                New_Def  SPAN, "SPAN", User_Ptr, is_normal
 175+ 6EFF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 175+ 6EFF             >
 175+ 6EFF             >                // dummy db directives used to calculate length of namec
 175+ 6EFF 53 50 41 4E >                db      "SPAN"
 175+ 6F03             >len_NFA         defl    $ - temp_NFA
 175+ 6F03             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 175+ 6EFF             >
 175+ 6EFF 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 175+ 6F00 53 50 41 4E >                db      "SPAN"               // name string in 7-bit ascii, but
 175+ 6F04             >                org     $-1                 // alter last byte of Name just above to set
 175+ 6F03 CE          >                db      {b $} | END_BIT     // msb as name end
 175+ 6F04             >
 175+ 6F04 F0 6E       >                dw      last_NFA            // Link to previous definition Name
 175+ 6F06             >SPAN:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 175+ 6F06 36 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 175+ 6F08             >                else
 175+ 6F08 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 175+ 6F08             >                endif           ; ok        // for other definitions it "points" the correct handler
 175+ 6F08             >                // Use of "; ok" to suppress "warning[fwdref]"
 175+ 6F08             >
 175+ 6F08             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 175+ 6F08 44          >                db      68
 176+ 6F09                              User_Def HP         , "HP"        , 70 // heap-pointer address
 176+ 6F09             >                New_Def  HP, "HP", User_Ptr, is_normal
 176+ 6F09             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 176+ 6F09             >
 176+ 6F09             >                // dummy db directives used to calculate length of namec
 176+ 6F09 48 50       >                db      "HP"
 176+ 6F0B             >len_NFA         defl    $ - temp_NFA
 176+ 6F0B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 176+ 6F09             >
 176+ 6F09 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 176+ 6F0A 48 50       >                db      "HP"               // name string in 7-bit ascii, but
 176+ 6F0C             >                org     $-1                 // alter last byte of Name just above to set
 176+ 6F0B D0          >                db      {b $} | END_BIT     // msb as name end
 176+ 6F0C             >
 176+ 6F0C FF 6E       >                dw      last_NFA            // Link to previous definition Name
 176+ 6F0E             >HP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 176+ 6F0E 36 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 176+ 6F10             >                else
 176+ 6F10 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 176+ 6F10             >                endif           ; ok        // for other definitions it "points" the correct handler
 176+ 6F10             >                // Use of "; ok" to suppress "warning[fwdref]"
 176+ 6F10             >
 176+ 6F10             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 176+ 6F10 46          >                db      70
 177+ 6F11
 178+ 6F11              //  ______________________________________________________________________
 179+ 6F11              //
 180+ 6F11              // here         -- a
 181+ 6F11                              Colon_Def HERE, "HERE", is_normal
 181+ 6F11             >                New_Def  HERE, "HERE", Enter_Ptr, is_normal ; ok
 181+ 6F11             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 181+ 6F11             >
 181+ 6F11             >                // dummy db directives used to calculate length of namec
 181+ 6F11 48 45 52 45 >                db      "HERE"
 181+ 6F15             >len_NFA         defl    $ - temp_NFA
 181+ 6F15             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 181+ 6F11             >
 181+ 6F11 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 181+ 6F12 48 45 52 45 >                db      "HERE"               // name string in 7-bit ascii, but
 181+ 6F16             >                org     $-1                 // alter last byte of Name just above to set
 181+ 6F15 C5          >                db      {b $} | END_BIT     // msb as name end
 181+ 6F16             >
 181+ 6F16 09 6F       >                dw      last_NFA            // Link to previous definition Name
 181+ 6F18             >HERE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 181+ 6F18 CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 181+ 6F1A             >                else
 181+ 6F1A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 181+ 6F1A             >                endif           ; ok        // for other definitions it "points" the correct handler
 181+ 6F1A             >                // Use of "; ok" to suppress "warning[fwdref]"
 181+ 6F1A             >
 181+ 6F1A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 182+ 6F1A 04 6E DA 6B                  dw      DP, FETCH               // dp @
 183+ 6F1E 95 69                        dw      EXIT                    // ;
 184+ 6F20
 185+ 6F20              //  ______________________________________________________________________
 186+ 6F20              //
 187+ 6F20              // allot        n --
 188+ 6F20                              Colon_Def ALLOT, "ALLOT", is_normal
 188+ 6F20             >                New_Def  ALLOT, "ALLOT", Enter_Ptr, is_normal ; ok
 188+ 6F20             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 188+ 6F20             >
 188+ 6F20             >                // dummy db directives used to calculate length of namec
 188+ 6F20 41 4C 4C 4F >                db      "ALLOT"
 188+ 6F24 54          >
 188+ 6F25             >len_NFA         defl    $ - temp_NFA
 188+ 6F25             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 188+ 6F20             >
 188+ 6F20 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 188+ 6F21 41 4C 4C 4F >                db      "ALLOT"               // name string in 7-bit ascii, but
 188+ 6F25 54          >
 188+ 6F26             >                org     $-1                 // alter last byte of Name just above to set
 188+ 6F25 D4          >                db      {b $} | END_BIT     // msb as name end
 188+ 6F26             >
 188+ 6F26 11 6F       >                dw      last_NFA            // Link to previous definition Name
 188+ 6F28             >ALLOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 188+ 6F28 CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 188+ 6F2A             >                else
 188+ 6F2A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 188+ 6F2A             >                endif           ; ok        // for other definitions it "points" the correct handler
 188+ 6F2A             >                // Use of "; ok" to suppress "warning[fwdref]"
 188+ 6F2A             >
 188+ 6F2A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 189+ 6F2A 04 6E B7 6B                  dw      DP,  PLUSSTORE          // dp +!
 190+ 6F2E 95 69                        dw      EXIT                    // ;
 191+ 6F30
 192+ 6F30              //  ______________________________________________________________________
 193+ 6F30              //
 194+ 6F30              // comma        n --
 195+ 6F30                              Colon_Def COMMA, ",", is_normal
 195+ 6F30             >                New_Def  COMMA, ",", Enter_Ptr, is_normal ; ok
 195+ 6F30             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 195+ 6F30             >
 195+ 6F30             >                // dummy db directives used to calculate length of namec
 195+ 6F30 2C          >                db      ","
 195+ 6F31             >len_NFA         defl    $ - temp_NFA
 195+ 6F31             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 195+ 6F30             >
 195+ 6F30 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 195+ 6F31 2C          >                db      ","               // name string in 7-bit ascii, but
 195+ 6F32             >                org     $-1                 // alter last byte of Name just above to set
 195+ 6F31 AC          >                db      {b $} | END_BIT     // msb as name end
 195+ 6F32             >
 195+ 6F32 20 6F       >                dw      last_NFA            // Link to previous definition Name
 195+ 6F34             >COMMA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 195+ 6F34 CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 195+ 6F36             >                else
 195+ 6F36 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 195+ 6F36             >                endif           ; ok        // for other definitions it "points" the correct handler
 195+ 6F36             >                // Use of "; ok" to suppress "warning[fwdref]"
 195+ 6F36             >
 195+ 6F36             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 196+ 6F36 18 6F E7 6B                  dw      HERE, STORE             // here !
 197+ 6F3A 56 6D 28 6F                  dw      TWO, ALLOT              // 2 allot
 198+ 6F3E 95 69                        dw      EXIT                    // ;
 199+ 6F40
 200+ 6F40              //  ______________________________________________________________________
 201+ 6F40              //
 202+ 6F40              // ccomma       c --
 203+ 6F40                              Colon_Def CCOMMA, "C,", is_normal
 203+ 6F40             >                New_Def  CCOMMA, "C,", Enter_Ptr, is_normal ; ok
 203+ 6F40             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 203+ 6F40             >
 203+ 6F40             >                // dummy db directives used to calculate length of namec
 203+ 6F40 43 2C       >                db      "C,"
 203+ 6F42             >len_NFA         defl    $ - temp_NFA
 203+ 6F42             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 203+ 6F40             >
 203+ 6F40 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 203+ 6F41 43 2C       >                db      "C,"               // name string in 7-bit ascii, but
 203+ 6F43             >                org     $-1                 // alter last byte of Name just above to set
 203+ 6F42 AC          >                db      {b $} | END_BIT     // msb as name end
 203+ 6F43             >
 203+ 6F43 30 6F       >                dw      last_NFA            // Link to previous definition Name
 203+ 6F45             >CCOMMA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 203+ 6F45 CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 203+ 6F47             >                else
 203+ 6F47 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 203+ 6F47             >                endif           ; ok        // for other definitions it "points" the correct handler
 203+ 6F47             >                // Use of "; ok" to suppress "warning[fwdref]"
 203+ 6F47             >
 203+ 6F47             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 204+ 6F47 18 6F 03 6C                  dw      HERE, CSTORE            // here c!
 205+ 6F4B 4E 6D 28 6F                  dw      ONE, ALLOT              // 1 allot
 206+ 6F4F 95 69                        dw      EXIT                    // ;
 207+ 6F51
 208+ 6F51              //  ______________________________________________________________________
 209+ 6F51              //
 210+ 6F51              // s->d         n -- d
 211+ 6F51              // converts a single precision integer in a double precision
 212+ 6F51                              New_Def S_TO_D, "S->D", is_code, is_normal
 212+ 6F51             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 212+ 6F51             >
 212+ 6F51             >                // dummy db directives used to calculate length of namec
 212+ 6F51 53 2D 3E 44 >                db      "S->D"
 212+ 6F55             >len_NFA         defl    $ - temp_NFA
 212+ 6F55             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 212+ 6F51             >
 212+ 6F51 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 212+ 6F52 53 2D 3E 44 >                db      "S->D"               // name string in 7-bit ascii, but
 212+ 6F56             >                org     $-1                 // alter last byte of Name just above to set
 212+ 6F55 C4          >                db      {b $} | END_BIT     // msb as name end
 212+ 6F56             >
 212+ 6F56 40 6F       >                dw      last_NFA            // Link to previous definition Name
 212+ 6F58             >S_TO_D:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 212+ 6F58 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 212+ 6F58             >                else
 212+ 6F58 5A 6F       >                dw      $ + 2   ; ok        // is pointed by CFA
 212+ 6F5A             >                endif           ; ok        // for other definitions it "points" the correct handler
 212+ 6F5A             >                // Use of "; ok" to suppress "warning[fwdref]"
 212+ 6F5A             >
 212+ 6F5A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 213+ 6F5A D1                           pop     de
 214+ 6F5B 21 00 00                     ld      hl, 0
 215+ 6F5E 7A                           ld      a, d
 216+ 6F5F E6 80                        and     $80
 217+ 6F61 28 01                        jr      z, S_to_D_Skip
 218+ 6F63 2B                           dec     hl                  // $FFFF
 219+ 6F64              S_to_D_Skip:
 220+ 6F64 D5                           push    de
 221+ 6F65 E5                           push    hl
 222+ 6F66                              next
 222+ 6F66 DD E9       >                jp      (ix)
 223+ 6F68
 224+ 6F68              //  ______________________________________________________________________
 225+ 6F68              //
 226+ 6F68              // -            n1 n2 -- n3
 227+ 6F68              // subtraction
 228+ 6F68                              New_Def SUBTRACT, "-", is_code, is_normal
 228+ 6F68             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 228+ 6F68             >
 228+ 6F68             >                // dummy db directives used to calculate length of namec
 228+ 6F68 2D          >                db      "-"
 228+ 6F69             >len_NFA         defl    $ - temp_NFA
 228+ 6F69             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 228+ 6F68             >
 228+ 6F68 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 228+ 6F69 2D          >                db      "-"               // name string in 7-bit ascii, but
 228+ 6F6A             >                org     $-1                 // alter last byte of Name just above to set
 228+ 6F69 AD          >                db      {b $} | END_BIT     // msb as name end
 228+ 6F6A             >
 228+ 6F6A 51 6F       >                dw      last_NFA            // Link to previous definition Name
 228+ 6F6C             >SUBTRACT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 228+ 6F6C ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 228+ 6F6C             >                else
 228+ 6F6C 6E 6F       >                dw      $ + 2   ; ok        // is pointed by CFA
 228+ 6F6E             >                endif           ; ok        // for other definitions it "points" the correct handler
 228+ 6F6E             >                // Use of "; ok" to suppress "warning[fwdref]"
 228+ 6F6E             >
 228+ 6F6E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 229+ 6F6E D1                           pop     de
 230+ 6F6F E1                           pop     hl
 231+ 6F70 A7                           and     a
 232+ 6F71 ED 52                        sbc     hl, de
 233+ 6F73
 234+ 6F73                              psh1
 234+ 6F73 E5          >                push    hl
 234+ 6F74 DD E9       >                jp      (ix)
 235+ 6F76
 236+ 6F76              //  ______________________________________________________________________
 237+ 6F76              //
 238+ 6F76              // =            n1 n2 -- n3
 239+ 6F76              // equals
 240+ 6F76                              Colon_Def EQUALS, "=", is_normal
 240+ 6F76             >                New_Def  EQUALS, "=", Enter_Ptr, is_normal ; ok
 240+ 6F76             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 240+ 6F76             >
 240+ 6F76             >                // dummy db directives used to calculate length of namec
 240+ 6F76 3D          >                db      "="
 240+ 6F77             >len_NFA         defl    $ - temp_NFA
 240+ 6F77             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 240+ 6F76             >
 240+ 6F76 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 240+ 6F77 3D          >                db      "="               // name string in 7-bit ascii, but
 240+ 6F78             >                org     $-1                 // alter last byte of Name just above to set
 240+ 6F77 BD          >                db      {b $} | END_BIT     // msb as name end
 240+ 6F78             >
 240+ 6F78 68 6F       >                dw      last_NFA            // Link to previous definition Name
 240+ 6F7A             >EQUALS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 240+ 6F7A CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 240+ 6F7C             >                else
 240+ 6F7C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 240+ 6F7C             >                endif           ; ok        // for other definitions it "points" the correct handler
 240+ 6F7C             >                // Use of "; ok" to suppress "warning[fwdref]"
 240+ 6F7C             >
 240+ 6F7C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 241+ 6F7C 6C 6F EC 69                  dw      SUBTRACT, ZEQUAL        // - 0=
 242+ 6F80 95 69                        dw      EXIT                    // ;
 243+ 6F82
 244+ 6F82              //  ______________________________________________________________________
 245+ 6F82              //
 246+ 6F82              // u<           u1 u2 -- u3
 247+ 6F82              // unsigned less-than
 248+ 6F82                              New_Def ULESS, "U<", is_code, is_normal
 248+ 6F82             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 248+ 6F82             >
 248+ 6F82             >                // dummy db directives used to calculate length of namec
 248+ 6F82 55 3C       >                db      "U<"
 248+ 6F84             >len_NFA         defl    $ - temp_NFA
 248+ 6F84             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 248+ 6F82             >
 248+ 6F82 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 248+ 6F83 55 3C       >                db      "U<"               // name string in 7-bit ascii, but
 248+ 6F85             >                org     $-1                 // alter last byte of Name just above to set
 248+ 6F84 BC          >                db      {b $} | END_BIT     // msb as name end
 248+ 6F85             >
 248+ 6F85 76 6F       >                dw      last_NFA            // Link to previous definition Name
 248+ 6F87             >ULESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 248+ 6F87 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 248+ 6F87             >                else
 248+ 6F87 89 6F       >                dw      $ + 2   ; ok        // is pointed by CFA
 248+ 6F89             >                endif           ; ok        // for other definitions it "points" the correct handler
 248+ 6F89             >                // Use of "; ok" to suppress "warning[fwdref]"
 248+ 6F89             >
 248+ 6F89             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 249+ 6F89 D1                           pop     de
 250+ 6F8A E1                           pop     hl
 251+ 6F8B A7                           and     a
 252+ 6F8C ED 52                        sbc     hl, de
 253+ 6F8E 21 01 00                     ld      hl, 1
 254+ 6F91 38 01                        jr      c, ULess_Skip
 255+ 6F93 2D                               dec     l
 256+ 6F94              ULess_Skip:
 257+ 6F94
 258+ 6F94                              psh1
 258+ 6F94 E5          >                push    hl
 258+ 6F95 DD E9       >                jp      (ix)
 259+ 6F97
 260+ 6F97              //  ______________________________________________________________________
 261+ 6F97              //
 262+ 6F97              // <           n1 n2 -- n3
 263+ 6F97              // less-than
 264+ 6F97                              New_Def LESS, "<", is_code, is_normal
 264+ 6F97             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 264+ 6F97             >
 264+ 6F97             >                // dummy db directives used to calculate length of namec
 264+ 6F97 3C          >                db      "<"
 264+ 6F98             >len_NFA         defl    $ - temp_NFA
 264+ 6F98             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 264+ 6F97             >
 264+ 6F97 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 264+ 6F98 3C          >                db      "<"               // name string in 7-bit ascii, but
 264+ 6F99             >                org     $-1                 // alter last byte of Name just above to set
 264+ 6F98 BC          >                db      {b $} | END_BIT     // msb as name end
 264+ 6F99             >
 264+ 6F99 82 6F       >                dw      last_NFA            // Link to previous definition Name
 264+ 6F9B             >LESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 264+ 6F9B ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 264+ 6F9B             >                else
 264+ 6F9B 9D 6F       >                dw      $ + 2   ; ok        // is pointed by CFA
 264+ 6F9D             >                endif           ; ok        // for other definitions it "points" the correct handler
 264+ 6F9D             >                // Use of "; ok" to suppress "warning[fwdref]"
 264+ 6F9D             >
 264+ 6F9D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 265+ 6F9D D1                           pop     de
 266+ 6F9E E1                           pop     hl
 267+ 6F9F 7C                           ld      a, h
 268+ 6FA0 EE 80                        xor     $80
 269+ 6FA2 67                           ld      h, a
 270+ 6FA3 7A                           ld      a, d
 271+ 6FA4 EE 80                        xor     $80
 272+ 6FA6 57                           ld      d, a
 273+ 6FA7 A7                           and     a
 274+ 6FA8 ED 52                        sbc     hl, de
 275+ 6FAA 21 01 00                     ld      hl, 1
 276+ 6FAD 38 01                        jr      c, Less_Skip
 277+ 6FAF 2D                               dec     l
 278+ 6FB0              Less_Skip:
 279+ 6FB0
 280+ 6FB0                              psh1
 280+ 6FB0 E5          >                push    hl
 280+ 6FB1 DD E9       >                jp      (ix)
 281+ 6FB3
 282+ 6FB3              //  ______________________________________________________________________
 283+ 6FB3              //
 284+ 6FB3              // >            n1 n2 -- n3
 285+ 6FB3              // greater than
 286+ 6FB3                              Colon_Def GREATER, ">", is_normal
 286+ 6FB3             >                New_Def  GREATER, ">", Enter_Ptr, is_normal ; ok
 286+ 6FB3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 286+ 6FB3             >
 286+ 6FB3             >                // dummy db directives used to calculate length of namec
 286+ 6FB3 3E          >                db      ">"
 286+ 6FB4             >len_NFA         defl    $ - temp_NFA
 286+ 6FB4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 286+ 6FB3             >
 286+ 6FB3 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 286+ 6FB4 3E          >                db      ">"               // name string in 7-bit ascii, but
 286+ 6FB5             >                org     $-1                 // alter last byte of Name just above to set
 286+ 6FB4 BE          >                db      {b $} | END_BIT     // msb as name end
 286+ 6FB5             >
 286+ 6FB5 97 6F       >                dw      last_NFA            // Link to previous definition Name
 286+ 6FB7             >GREATER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 286+ 6FB7 CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 286+ 6FB9             >                else
 286+ 6FB9 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 286+ 6FB9             >                endif           ; ok        // for other definitions it "points" the correct handler
 286+ 6FB9             >                // Use of "; ok" to suppress "warning[fwdref]"
 286+ 6FB9             >
 286+ 6FB9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 287+ 6FB9 09 6B 9B 6F                  dw      SWAP, LESS              // swap <
 288+ 6FBD 95 69                        dw      EXIT                    // ;
 289+ 6FBF              //  ______________________________________________________________________
 290+ 6FBF              //
 291+ 6FBF              // min          n1 n2 -- n3
 292+ 6FBF              // minimum between n1 and n2
 293+ 6FBF                              Colon_Def MIN, "MIN" , is_normal
 293+ 6FBF             >                New_Def  MIN, "MIN", Enter_Ptr, is_normal ; ok
 293+ 6FBF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 293+ 6FBF             >
 293+ 6FBF             >                // dummy db directives used to calculate length of namec
 293+ 6FBF 4D 49 4E    >                db      "MIN"
 293+ 6FC2             >len_NFA         defl    $ - temp_NFA
 293+ 6FC2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 293+ 6FBF             >
 293+ 6FBF 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 293+ 6FC0 4D 49 4E    >                db      "MIN"               // name string in 7-bit ascii, but
 293+ 6FC3             >                org     $-1                 // alter last byte of Name just above to set
 293+ 6FC2 CE          >                db      {b $} | END_BIT     // msb as name end
 293+ 6FC3             >
 293+ 6FC3 B3 6F       >                dw      last_NFA            // Link to previous definition Name
 293+ 6FC5             >MIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 293+ 6FC5 CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 293+ 6FC7             >                else
 293+ 6FC7 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 293+ 6FC7             >                endif           ; ok        // for other definitions it "points" the correct handler
 293+ 6FC7             >                // Use of "; ok" to suppress "warning[fwdref]"
 293+ 6FC7             >
 293+ 6FC7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 294+ 6FC7 80 6B                        dw      TWO_DUP                 // 2dup
 295+ 6FC9 B7 6F                        dw      GREATER                 // >
 296+ 6FCB 7F 64                        dw      ZBRANCH
 297+ 6FCD 04 00                        dw      Min_Skip - $   // if
 298+ 6FCF 09 6B                        dw          SWAP                //      swap
 299+ 6FD1              Min_Skip:                                       // endif
 300+ 6FD1 E1 6A                        dw      DROP                    // drop
 301+ 6FD3 95 69                        dw      EXIT                    // ;
 302+ 6FD5
 303+ 6FD5              //  ______________________________________________________________________
 304+ 6FD5              //
 305+ 6FD5              // max          n1 n2 -- n3
 306+ 6FD5              // maximum between n1 and n2
 307+ 6FD5                              Colon_Def MAX, "MAX", is_normal
 307+ 6FD5             >                New_Def  MAX, "MAX", Enter_Ptr, is_normal ; ok
 307+ 6FD5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 307+ 6FD5             >
 307+ 6FD5             >                // dummy db directives used to calculate length of namec
 307+ 6FD5 4D 41 58    >                db      "MAX"
 307+ 6FD8             >len_NFA         defl    $ - temp_NFA
 307+ 6FD8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 307+ 6FD5             >
 307+ 6FD5 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 307+ 6FD6 4D 41 58    >                db      "MAX"               // name string in 7-bit ascii, but
 307+ 6FD9             >                org     $-1                 // alter last byte of Name just above to set
 307+ 6FD8 D8          >                db      {b $} | END_BIT     // msb as name end
 307+ 6FD9             >
 307+ 6FD9 BF 6F       >                dw      last_NFA            // Link to previous definition Name
 307+ 6FDB             >MAX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 307+ 6FDB CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 307+ 6FDD             >                else
 307+ 6FDD ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 307+ 6FDD             >                endif           ; ok        // for other definitions it "points" the correct handler
 307+ 6FDD             >                // Use of "; ok" to suppress "warning[fwdref]"
 307+ 6FDD             >
 307+ 6FDD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 308+ 6FDD 80 6B                        dw      TWO_DUP                 // 2dup
 309+ 6FDF 9B 6F                        dw      LESS                    // <
 310+ 6FE1 7F 64                        dw      ZBRANCH
 311+ 6FE3 04 00                        dw      Max_Skip - $   // if
 312+ 6FE5 09 6B                        dw          SWAP                //      swap
 313+ 6FE7              Max_Skip:                                       // endif
 314+ 6FE7 E1 6A                        dw      DROP                    // drop
 315+ 6FE9 95 69                        dw      EXIT                    // ;
 316+ 6FEB
 317+ 6FEB              //  ______________________________________________________________________
 318+ 6FEB              //
 319+ 6FEB              // -dup         n -- 0 | n n
 320+ 6FEB              // duplicate if not zero
 321+ 6FEB                              New_Def LDUP, "-DUP", is_code, is_normal
 321+ 6FEB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 321+ 6FEB             >
 321+ 6FEB             >                // dummy db directives used to calculate length of namec
 321+ 6FEB 2D 44 55 50 >                db      "-DUP"
 321+ 6FEF             >len_NFA         defl    $ - temp_NFA
 321+ 6FEF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 321+ 6FEB             >
 321+ 6FEB 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 321+ 6FEC 2D 44 55 50 >                db      "-DUP"               // name string in 7-bit ascii, but
 321+ 6FF0             >                org     $-1                 // alter last byte of Name just above to set
 321+ 6FEF D0          >                db      {b $} | END_BIT     // msb as name end
 321+ 6FF0             >
 321+ 6FF0 D5 6F       >                dw      last_NFA            // Link to previous definition Name
 321+ 6FF2             >LDUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 321+ 6FF2 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 321+ 6FF2             >                else
 321+ 6FF2 F4 6F       >                dw      $ + 2   ; ok        // is pointed by CFA
 321+ 6FF4             >                endif           ; ok        // for other definitions it "points" the correct handler
 321+ 6FF4             >                // Use of "; ok" to suppress "warning[fwdref]"
 321+ 6FF4             >
 321+ 6FF4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 322+ 6FF4              QDup_Ptr:
 323+ 6FF4 E1                           pop     hl
 324+ 6FF5 7C                           ld      a, h
 325+ 6FF6 B5                           or      l
 326+ 6FF7 28 01                        jr      z, QDup_Skip
 327+ 6FF9 E5                               push    hl
 328+ 6FFA              QDup_Skip:
 329+ 6FFA                              psh1
 329+ 6FFA E5          >                push    hl
 329+ 6FFB DD E9       >                jp      (ix)
 330+ 6FFD
 331+ 6FFD              //  ______________________________________________________________________
 332+ 6FFD              //
 333+ 6FFD              // ?dup         n -- 0 | n n
 334+ 6FFD              // duplicate if not zero
 335+ 6FFD                              New_Def QDUP, "?DUP", QDup_Ptr, is_normal
 335+ 6FFD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 335+ 6FFD             >
 335+ 6FFD             >                // dummy db directives used to calculate length of namec
 335+ 6FFD 3F 44 55 50 >                db      "?DUP"
 335+ 7001             >len_NFA         defl    $ - temp_NFA
 335+ 7001             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 335+ 6FFD             >
 335+ 6FFD 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 335+ 6FFE 3F 44 55 50 >                db      "?DUP"               // name string in 7-bit ascii, but
 335+ 7002             >                org     $-1                 // alter last byte of Name just above to set
 335+ 7001 D0          >                db      {b $} | END_BIT     // msb as name end
 335+ 7002             >
 335+ 7002 EB 6F       >                dw      last_NFA            // Link to previous definition Name
 335+ 7004             >QDUP:          if QDup_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 335+ 7004 F4 6F       >                dw      QDup_Ptr ; ok        // for primitive definitions  actual code
 335+ 7006             >                else
 335+ 7006 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 335+ 7006             >                endif           ; ok        // for other definitions it "points" the correct handler
 335+ 7006             >                // Use of "; ok" to suppress "warning[fwdref]"
 335+ 7006             >
 335+ 7006             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 336+ 7006
 337+ 7006              //  ______________________________________________________________________
 338+ 7006              //
 339+ 7006              // emit         c --
 340+ 7006                              Colon_Def EMIT, "EMIT", is_normal
 340+ 7006             >                New_Def  EMIT, "EMIT", Enter_Ptr, is_normal ; ok
 340+ 7006             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 340+ 7006             >
 340+ 7006             >                // dummy db directives used to calculate length of namec
 340+ 7006 45 4D 49 54 >                db      "EMIT"
 340+ 700A             >len_NFA         defl    $ - temp_NFA
 340+ 700A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 340+ 7006             >
 340+ 7006 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 340+ 7007 45 4D 49 54 >                db      "EMIT"               // name string in 7-bit ascii, but
 340+ 700B             >                org     $-1                 // alter last byte of Name just above to set
 340+ 700A D4          >                db      {b $} | END_BIT     // msb as name end
 340+ 700B             >
 340+ 700B FD 6F       >                dw      last_NFA            // Link to previous definition Name
 340+ 700D             >EMIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 340+ 700D CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 340+ 700F             >                else
 340+ 700F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 340+ 700F             >                endif           ; ok        // for other definitions it "points" the correct handler
 340+ 700F             >                // Use of "; ok" to suppress "warning[fwdref]"
 340+ 700F             >
 340+ 700F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 341+ 700F 99 66                        dw      C_EMIT                      // (?emit)
 342+ 7011 F2 6F                        dw      LDUP                        // ?dup
 343+ 7013                                                                  // if
 344+ 7013 7F 64                        dw      ZBRANCH
 345+ 7015 0A 00                        dw      Emit_Skip - $
 346+ 7017 65 66                        dw          EMITC                   //      emitc
 347+ 7019 4E 6D                        dw          ONE                     //      1
 348+ 701B 57 6E B7 6B                  dw          OUT, PLUSSTORE        //      out +!
 349+ 701F              Emit_Skip:                                          // endif
 350+ 701F 95 69                        dw      EXIT                        // ;
 351+ 7021
 352+ 7021              //  ______________________________________________________________________
 353+ 7021              //
 354+ 7021              // space        --
 355+ 7021                              Colon_Def SPACE, "SPACE", is_normal
 355+ 7021             >                New_Def  SPACE, "SPACE", Enter_Ptr, is_normal ; ok
 355+ 7021             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 355+ 7021             >
 355+ 7021             >                // dummy db directives used to calculate length of namec
 355+ 7021 53 50 41 43 >                db      "SPACE"
 355+ 7025 45          >
 355+ 7026             >len_NFA         defl    $ - temp_NFA
 355+ 7026             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 355+ 7021             >
 355+ 7021 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 355+ 7022 53 50 41 43 >                db      "SPACE"               // name string in 7-bit ascii, but
 355+ 7026 45          >
 355+ 7027             >                org     $-1                 // alter last byte of Name just above to set
 355+ 7026 C5          >                db      {b $} | END_BIT     // msb as name end
 355+ 7027             >
 355+ 7027 06 70       >                dw      last_NFA            // Link to previous definition Name
 355+ 7029             >SPACE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 355+ 7029 CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 355+ 702B             >                else
 355+ 702B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 355+ 702B             >                endif           ; ok        // for other definitions it "points" the correct handler
 355+ 702B             >                // Use of "; ok" to suppress "warning[fwdref]"
 355+ 702B             >
 355+ 702B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 356+ 702B 70 6D 0D 70                  dw      BL, EMIT                // bl emit
 357+ 702F 95 69                        dw      EXIT                    // ;
 358+ 7031
 359+ 7031              //  ______________________________________________________________________
 360+ 7031              //
 361+ 7031              // traverse     a n -- a
 362+ 7031              // A dictionary entry is structured as follows
 363+ 7031              // NFA: +0   one byte of word-length (n<32) | some flags (immediate, smudge) | $80
 364+ 7031              //      +1   word name, last character is toggled with $80
 365+ 7031              // LFA: +1+n link to NFA ofprevious  dictionary entry.
 366+ 7031              // CFA: +3+n routine address. Colon definitions here have pointer to code
 367+ 7031              // PFA: +5+n "is_code", definitions have no PFA.
 368+ 7031              //
 369+ 7031                              Colon_Def TRAVERSE, "TRAVERSE", is_normal
 369+ 7031             >                New_Def  TRAVERSE, "TRAVERSE", Enter_Ptr, is_normal ; ok
 369+ 7031             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 369+ 7031             >
 369+ 7031             >                // dummy db directives used to calculate length of namec
 369+ 7031 54 52 41 56 >                db      "TRAVERSE"
 369+ 7035 45 52 53 45 >
 369+ 7039             >len_NFA         defl    $ - temp_NFA
 369+ 7039             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 369+ 7031             >
 369+ 7031 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 369+ 7032 54 52 41 56 >                db      "TRAVERSE"               // name string in 7-bit ascii, but
 369+ 7036 45 52 53 45 >
 369+ 703A             >                org     $-1                 // alter last byte of Name just above to set
 369+ 7039 C5          >                db      {b $} | END_BIT     // msb as name end
 369+ 703A             >
 369+ 703A 21 70       >                dw      last_NFA            // Link to previous definition Name
 369+ 703C             >TRAVERSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 369+ 703C CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 369+ 703E             >                else
 369+ 703E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 369+ 703E             >                endif           ; ok        // for other definitions it "points" the correct handler
 369+ 703E             >                // Use of "; ok" to suppress "warning[fwdref]"
 369+ 703E             >
 369+ 703E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 370+ 703E 09 6B                        dw      SWAP                    // swap
 371+ 7040              Traverse_Begin:                                 // begin
 372+ 7040 D1 6A 27 6A                  dw          OVER, PLUS          //      over +
 373+ 7044 45 64 7F 00                  dw          LIT, 127            //      127
 374+ 7048 D1 6A F5 6B                  dw          OVER, CFETCH        //      over @
 375+ 704C 9B 6F                        dw          LESS                //      <
 376+ 704E                                                              // until
 377+ 704E 7F 64                        dw      ZBRANCH
 378+ 7050 F0 FF                        dw      Traverse_Begin - $
 379+ 7052 09 6B E1 6A                  dw      SWAP, DROP              //  swap drop
 380+ 7056 95 69                        dw      EXIT                    //  ;
 381+ 7058
 382+ 7058              //  ______________________________________________________________________
 383+ 7058              //
 384+ 7058              // latest       -- nfa
 385+ 7058                              Colon_Def LATEST, "LATEST", is_normal
 385+ 7058             >                New_Def  LATEST, "LATEST", Enter_Ptr, is_normal ; ok
 385+ 7058             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 385+ 7058             >
 385+ 7058             >                // dummy db directives used to calculate length of namec
 385+ 7058 4C 41 54 45 >                db      "LATEST"
 385+ 705C 53 54       >
 385+ 705E             >len_NFA         defl    $ - temp_NFA
 385+ 705E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 385+ 7058             >
 385+ 7058 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 385+ 7059 4C 41 54 45 >                db      "LATEST"               // name string in 7-bit ascii, but
 385+ 705D 53 54       >
 385+ 705F             >                org     $-1                 // alter last byte of Name just above to set
 385+ 705E D4          >                db      {b $} | END_BIT     // msb as name end
 385+ 705F             >
 385+ 705F 31 70       >                dw      last_NFA            // Link to previous definition Name
 385+ 7061             >LATEST:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 385+ 7061 CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 385+ 7063             >                else
 385+ 7063 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 385+ 7063             >                endif           ; ok        // for other definitions it "points" the correct handler
 385+ 7063             >                // Use of "; ok" to suppress "warning[fwdref]"
 385+ 7063             >
 385+ 7063             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 386+ 7063 86 6E                        dw      CURRENT                 // current
 387+ 7065 DA 6B DA 6B                  dw      FETCH, FETCH            // @ @
 388+ 7069 95 69                        dw      EXIT                    // ;
 389+ 706B
 390+ 706B              //  ______________________________________________________________________
 391+ 706B              //
 392+ 706B              // lfa          pfa -- lfa
 393+ 706B                              Colon_Def LFA, "LFA", is_normal
 393+ 706B             >                New_Def  LFA, "LFA", Enter_Ptr, is_normal ; ok
 393+ 706B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 393+ 706B             >
 393+ 706B             >                // dummy db directives used to calculate length of namec
 393+ 706B 4C 46 41    >                db      "LFA"
 393+ 706E             >len_NFA         defl    $ - temp_NFA
 393+ 706E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 393+ 706B             >
 393+ 706B 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 393+ 706C 4C 46 41    >                db      "LFA"               // name string in 7-bit ascii, but
 393+ 706F             >                org     $-1                 // alter last byte of Name just above to set
 393+ 706E C1          >                db      {b $} | END_BIT     // msb as name end
 393+ 706F             >
 393+ 706F 58 70       >                dw      last_NFA            // Link to previous definition Name
 393+ 7071             >LFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 393+ 7071 CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 393+ 7073             >                else
 393+ 7073 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 393+ 7073             >                endif           ; ok        // for other definitions it "points" the correct handler
 393+ 7073             >                // Use of "; ok" to suppress "warning[fwdref]"
 393+ 7073             >
 393+ 7073             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 394+ 7073 8E 6A                        dw      CELL_MINUS              // cell-
 395+ 7075 8E 6A                        dw      CELL_MINUS              // cell-
 396+ 7077 95 69                        dw      EXIT                    // ;
 397+ 7079
 398+ 7079              //  ______________________________________________________________________
 399+ 7079              //
 400+ 7079              // cfa          pfa -- cfa
 401+ 7079                              Colon_Def CFA, "CFA", is_normal
 401+ 7079             >                New_Def  CFA, "CFA", Enter_Ptr, is_normal ; ok
 401+ 7079             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 401+ 7079             >
 401+ 7079             >                // dummy db directives used to calculate length of namec
 401+ 7079 43 46 41    >                db      "CFA"
 401+ 707C             >len_NFA         defl    $ - temp_NFA
 401+ 707C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 401+ 7079             >
 401+ 7079 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 401+ 707A 43 46 41    >                db      "CFA"               // name string in 7-bit ascii, but
 401+ 707D             >                org     $-1                 // alter last byte of Name just above to set
 401+ 707C C1          >                db      {b $} | END_BIT     // msb as name end
 401+ 707D             >
 401+ 707D 6B 70       >                dw      last_NFA            // Link to previous definition Name
 401+ 707F             >CFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 401+ 707F CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 401+ 7081             >                else
 401+ 7081 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 401+ 7081             >                endif           ; ok        // for other definitions it "points" the correct handler
 401+ 7081             >                // Use of "; ok" to suppress "warning[fwdref]"
 401+ 7081             >
 401+ 7081             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 402+ 7081 8E 6A                        dw      CELL_MINUS              // cell-
 403+ 7083 95 69                        dw      EXIT                    // ;
 404+ 7085
 405+ 7085              //  ______________________________________________________________________
 406+ 7085              //
 407+ 7085              // nfa          pfa -- nfa
 408+ 7085                              Colon_Def NFA, "NFA", is_normal
 408+ 7085             >                New_Def  NFA, "NFA", Enter_Ptr, is_normal ; ok
 408+ 7085             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 408+ 7085             >
 408+ 7085             >                // dummy db directives used to calculate length of namec
 408+ 7085 4E 46 41    >                db      "NFA"
 408+ 7088             >len_NFA         defl    $ - temp_NFA
 408+ 7088             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 408+ 7085             >
 408+ 7085 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 408+ 7086 4E 46 41    >                db      "NFA"               // name string in 7-bit ascii, but
 408+ 7089             >                org     $-1                 // alter last byte of Name just above to set
 408+ 7088 C1          >                db      {b $} | END_BIT     // msb as name end
 408+ 7089             >
 408+ 7089 79 70       >                dw      last_NFA            // Link to previous definition Name
 408+ 708B             >NFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 408+ 708B CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 408+ 708D             >                else
 408+ 708D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 408+ 708D             >                endif           ; ok        // for other definitions it "points" the correct handler
 408+ 708D             >                // Use of "; ok" to suppress "warning[fwdref]"
 408+ 708D             >
 408+ 708D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 409+ 708D 45 64 05 00                  dw      LIT, 5                  // 5
 410+ 7091 6C 6F                        dw      SUBTRACT                // -
 411+ 7093 67 6D                        dw      NEG_ONE                 // -1
 412+ 7095 3C 70                        dw      TRAVERSE                // traverse
 413+ 7097 95 69                        dw      EXIT                    // ;
 414+ 7099
 415+ 7099              //  ______________________________________________________________________
 416+ 7099              //
 417+ 7099              // pfa          nfa -- pfa
 418+ 7099                              Colon_Def PFA, "PFA", is_normal
 418+ 7099             >                New_Def  PFA, "PFA", Enter_Ptr, is_normal ; ok
 418+ 7099             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 418+ 7099             >
 418+ 7099             >                // dummy db directives used to calculate length of namec
 418+ 7099 50 46 41    >                db      "PFA"
 418+ 709C             >len_NFA         defl    $ - temp_NFA
 418+ 709C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 418+ 7099             >
 418+ 7099 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 418+ 709A 50 46 41    >                db      "PFA"               // name string in 7-bit ascii, but
 418+ 709D             >                org     $-1                 // alter last byte of Name just above to set
 418+ 709C C1          >                db      {b $} | END_BIT     // msb as name end
 418+ 709D             >
 418+ 709D 85 70       >                dw      last_NFA            // Link to previous definition Name
 418+ 709F             >PFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 418+ 709F CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 418+ 70A1             >                else
 418+ 70A1 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 418+ 70A1             >                endif           ; ok        // for other definitions it "points" the correct handler
 418+ 70A1             >                // Use of "; ok" to suppress "warning[fwdref]"
 418+ 70A1             >
 418+ 70A1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 419+ 70A1 4E 6D                        dw      ONE                     // 1
 420+ 70A3 3C 70                        dw      TRAVERSE                // traverse
 421+ 70A5 45 64 05 00                  dw      LIT, 5                  // 6
 422+ 70A9 27 6A                        dw      PLUS                    // +
 423+ 70AB 95 69                        dw      EXIT                    // ;
 424+ 70AD
 425+ 70AD              //  ______________________________________________________________________
 426+ 70AD              //
 427+ 70AD              // >body        cfa -- pfa
 428+ 70AD                              Colon_Def TO_BODY, ">BODY", is_normal
 428+ 70AD             >                New_Def  TO_BODY, ">BODY", Enter_Ptr, is_normal ; ok
 428+ 70AD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 428+ 70AD             >
 428+ 70AD             >                // dummy db directives used to calculate length of namec
 428+ 70AD 3E 42 4F 44 >                db      ">BODY"
 428+ 70B1 59          >
 428+ 70B2             >len_NFA         defl    $ - temp_NFA
 428+ 70B2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 428+ 70AD             >
 428+ 70AD 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 428+ 70AE 3E 42 4F 44 >                db      ">BODY"               // name string in 7-bit ascii, but
 428+ 70B2 59          >
 428+ 70B3             >                org     $-1                 // alter last byte of Name just above to set
 428+ 70B2 D9          >                db      {b $} | END_BIT     // msb as name end
 428+ 70B3             >
 428+ 70B3 99 70       >                dw      last_NFA            // Link to previous definition Name
 428+ 70B5             >TO_BODY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 428+ 70B5 CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 428+ 70B7             >                else
 428+ 70B7 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 428+ 70B7             >                endif           ; ok        // for other definitions it "points" the correct handler
 428+ 70B7             >                // Use of "; ok" to suppress "warning[fwdref]"
 428+ 70B7             >
 428+ 70B7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 429+ 70B7 78 6A                        dw      CELL_PLUS               // cell+
 430+ 70B9 95 69                        dw      EXIT                    // ;
 431+ 70BB
 432+ 70BB              //  ______________________________________________________________________
 433+ 70BB              //
 434+ 70BB              // <name        cfa -- nfa
 435+ 70BB                              Colon_Def TO_NAME, "<NAME", is_normal
 435+ 70BB             >                New_Def  TO_NAME, "<NAME", Enter_Ptr, is_normal ; ok
 435+ 70BB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 435+ 70BB             >
 435+ 70BB             >                // dummy db directives used to calculate length of namec
 435+ 70BB 3C 4E 41 4D >                db      "<NAME"
 435+ 70BF 45          >
 435+ 70C0             >len_NFA         defl    $ - temp_NFA
 435+ 70C0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 435+ 70BB             >
 435+ 70BB 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 435+ 70BC 3C 4E 41 4D >                db      "<NAME"               // name string in 7-bit ascii, but
 435+ 70C0 45          >
 435+ 70C1             >                org     $-1                 // alter last byte of Name just above to set
 435+ 70C0 C5          >                db      {b $} | END_BIT     // msb as name end
 435+ 70C1             >
 435+ 70C1 AD 70       >                dw      last_NFA            // Link to previous definition Name
 435+ 70C3             >TO_NAME:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 435+ 70C3 CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 435+ 70C5             >                else
 435+ 70C5 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 435+ 70C5             >                endif           ; ok        // for other definitions it "points" the correct handler
 435+ 70C5             >                // Use of "; ok" to suppress "warning[fwdref]"
 435+ 70C5             >
 435+ 70C5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 436+ 70C5 B5 70                        dw      TO_BODY                 // >body
 437+ 70C7 8B 70                        dw      NFA                     // nfa
 438+ 70C9 95 69                        dw      EXIT                    // ;
 439+ 70CB
 440+ 70CB              //  ______________________________________________________________________
 441+ 70CB              //
 442+ 70CB              // !csp         --
 443+ 70CB              // store in user variable CSP current value of SP. Used at compile-time for syntax checkng
 444+ 70CB                              Colon_Def STORE_CSP, "!CSP", is_normal
 444+ 70CB             >                New_Def  STORE_CSP, "!CSP", Enter_Ptr, is_normal ; ok
 444+ 70CB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 444+ 70CB             >
 444+ 70CB             >                // dummy db directives used to calculate length of namec
 444+ 70CB 21 43 53 50 >                db      "!CSP"
 444+ 70CF             >len_NFA         defl    $ - temp_NFA
 444+ 70CF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 444+ 70CB             >
 444+ 70CB 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 444+ 70CC 21 43 53 50 >                db      "!CSP"               // name string in 7-bit ascii, but
 444+ 70D0             >                org     $-1                 // alter last byte of Name just above to set
 444+ 70CF D0          >                db      {b $} | END_BIT     // msb as name end
 444+ 70D0             >
 444+ 70D0 BB 70       >                dw      last_NFA            // Link to previous definition Name
 444+ 70D2             >STORE_CSP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 444+ 70D2 CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 444+ 70D4             >                else
 444+ 70D4 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 444+ 70D4             >                endif           ; ok        // for other definitions it "points" the correct handler
 444+ 70D4             >                // Use of "; ok" to suppress "warning[fwdref]"
 444+ 70D4             >
 444+ 70D4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 445+ 70D4 5F 69                        dw      SPFETCH                 // sp@
 446+ 70D6 B6 6E E7 6B                  dw      CSP, STORE              // csp !
 447+ 70DA 95 69                        dw      EXIT                    // ;
 448+ 70DC
 449+ 70DC              //  ______________________________________________________________________
 450+ 70DC              //
 451+ 70DC              // ?error       f n --
 452+ 70DC              // rase error n if flag f it true
 453+ 70DC                              Colon_Def QERROR, "?ERROR", is_normal
 453+ 70DC             >                New_Def  QERROR, "?ERROR", Enter_Ptr, is_normal ; ok
 453+ 70DC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 453+ 70DC             >
 453+ 70DC             >                // dummy db directives used to calculate length of namec
 453+ 70DC 3F 45 52 52 >                db      "?ERROR"
 453+ 70E0 4F 52       >
 453+ 70E2             >len_NFA         defl    $ - temp_NFA
 453+ 70E2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 453+ 70DC             >
 453+ 70DC 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 453+ 70DD 3F 45 52 52 >                db      "?ERROR"               // name string in 7-bit ascii, but
 453+ 70E1 4F 52       >
 453+ 70E3             >                org     $-1                 // alter last byte of Name just above to set
 453+ 70E2 D2          >                db      {b $} | END_BIT     // msb as name end
 453+ 70E3             >
 453+ 70E3 CB 70       >                dw      last_NFA            // Link to previous definition Name
 453+ 70E5             >QERROR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 453+ 70E5 CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 453+ 70E7             >                else
 453+ 70E7 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 453+ 70E7             >                endif           ; ok        // for other definitions it "points" the correct handler
 453+ 70E7             >                // Use of "; ok" to suppress "warning[fwdref]"
 453+ 70E7             >
 453+ 70E7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 454+ 70E7 09 6B                        dw      SWAP                    // swap
 455+ 70E9                                                              // if
 456+ 70E9 7F 64                        dw      ZBRANCH
 457+ 70EB 08 00                        dw      QError_Else - $
 458+ 70ED 02 76                        dw          ERROR               //      error  ( is a forward-ref )
 459+ 70EF                                                              // else
 460+ 70EF 68 64                        dw      BRANCH
 461+ 70F1 04 00                        dw      QError_Endif - $
 462+ 70F3              QError_Else:
 463+ 70F3 E1 6A                        dw          DROP                //      drop
 464+ 70F5              QError_Endif:                                   // endif
 465+ 70F5 95 69                        dw      EXIT                    // ;
 466+ 70F7
 467+ 70F7              //  ______________________________________________________________________
 468+ 70F7              //
 469+ 70F7              // ?comp       --
 470+ 70F7              // raise msg #17 if not compiling
 471+ 70F7                              Colon_Def QCOMP, "?COMP", is_normal
 471+ 70F7             >                New_Def  QCOMP, "?COMP", Enter_Ptr, is_normal ; ok
 471+ 70F7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 471+ 70F7             >
 471+ 70F7             >                // dummy db directives used to calculate length of namec
 471+ 70F7 3F 43 4F 4D >                db      "?COMP"
 471+ 70FB 50          >
 471+ 70FC             >len_NFA         defl    $ - temp_NFA
 471+ 70FC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 471+ 70F7             >
 471+ 70F7 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 471+ 70F8 3F 43 4F 4D >                db      "?COMP"               // name string in 7-bit ascii, but
 471+ 70FC 50          >
 471+ 70FD             >                org     $-1                 // alter last byte of Name just above to set
 471+ 70FC D0          >                db      {b $} | END_BIT     // msb as name end
 471+ 70FD             >
 471+ 70FD DC 70       >                dw      last_NFA            // Link to previous definition Name
 471+ 70FF             >QCOMP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 471+ 70FF CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 471+ 7101             >                else
 471+ 7101 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 471+ 7101             >                endif           ; ok        // for other definitions it "points" the correct handler
 471+ 7101             >                // Use of "; ok" to suppress "warning[fwdref]"
 471+ 7101             >
 471+ 7101             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 472+ 7101 91 6E DA 6B                  dw      STATE, FETCH            // state @
 473+ 7105 EC 69                        dw      ZEQUAL                  // 0=
 474+ 7107 45 64 11 00                  dw      LIT, 17                 // 17  ( can't be executed )
 475+ 710B E5 70                        dw      QERROR                  // ?error
 476+ 710D 95 69                        dw      EXIT                    // ;
 477+ 710F
 478+ 710F              //  ______________________________________________________________________
 479+ 710F              //
 480+ 710F              // ?exec       --
 481+ 710F              // raise msg #18 if compiling
 482+ 710F                              Colon_Def QEXEC, "?EXEC", is_normal
 482+ 710F             >                New_Def  QEXEC, "?EXEC", Enter_Ptr, is_normal ; ok
 482+ 710F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 482+ 710F             >
 482+ 710F             >                // dummy db directives used to calculate length of namec
 482+ 710F 3F 45 58 45 >                db      "?EXEC"
 482+ 7113 43          >
 482+ 7114             >len_NFA         defl    $ - temp_NFA
 482+ 7114             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 482+ 710F             >
 482+ 710F 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 482+ 7110 3F 45 58 45 >                db      "?EXEC"               // name string in 7-bit ascii, but
 482+ 7114 43          >
 482+ 7115             >                org     $-1                 // alter last byte of Name just above to set
 482+ 7114 C3          >                db      {b $} | END_BIT     // msb as name end
 482+ 7115             >
 482+ 7115 F7 70       >                dw      last_NFA            // Link to previous definition Name
 482+ 7117             >QEXEC:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 482+ 7117 CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 482+ 7119             >                else
 482+ 7119 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 482+ 7119             >                endif           ; ok        // for other definitions it "points" the correct handler
 482+ 7119             >                // Use of "; ok" to suppress "warning[fwdref]"
 482+ 7119             >
 482+ 7119             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 483+ 7119 91 6E DA 6B                  dw      STATE, FETCH            // state @
 484+ 711D 45 64 12 00                  dw      LIT, 18                 // 18  ( can't be compiled )
 485+ 7121 E5 70                        dw      QERROR                  // ?error
 486+ 7123 95 69                        dw      EXIT                    // ;
 487+ 7125
 488+ 7125              //  ______________________________________________________________________
 489+ 7125              //
 490+ 7125              // ?pairs       n1 n2 --
 491+ 7125              // raise msg #19 if n1 != n2. Compiler pushes some placeholder to stack for syntax checking
 492+ 7125                              Colon_Def QPAIRS, "?PAIRS", is_normal
 492+ 7125             >                New_Def  QPAIRS, "?PAIRS", Enter_Ptr, is_normal ; ok
 492+ 7125             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 492+ 7125             >
 492+ 7125             >                // dummy db directives used to calculate length of namec
 492+ 7125 3F 50 41 49 >                db      "?PAIRS"
 492+ 7129 52 53       >
 492+ 712B             >len_NFA         defl    $ - temp_NFA
 492+ 712B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 492+ 7125             >
 492+ 7125 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 492+ 7126 3F 50 41 49 >                db      "?PAIRS"               // name string in 7-bit ascii, but
 492+ 712A 52 53       >
 492+ 712C             >                org     $-1                 // alter last byte of Name just above to set
 492+ 712B D3          >                db      {b $} | END_BIT     // msb as name end
 492+ 712C             >
 492+ 712C 0F 71       >                dw      last_NFA            // Link to previous definition Name
 492+ 712E             >QPAIRS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 492+ 712E CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 492+ 7130             >                else
 492+ 7130 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 492+ 7130             >                endif           ; ok        // for other definitions it "points" the correct handler
 492+ 7130             >                // Use of "; ok" to suppress "warning[fwdref]"
 492+ 7130             >
 492+ 7130             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 493+ 7130 6C 6F                        dw      SUBTRACT                // -
 494+ 7132 45 64 13 00                  dw      LIT, 19                 // 18  ( syntax error )
 495+ 7136 E5 70                        dw      QERROR                  // ?error
 496+ 7138 95 69                        dw      EXIT                    // ;
 497+ 713A
 498+ 713A              //  ______________________________________________________________________
 499+ 713A              //
 500+ 713A              // ?csp       --
 501+ 713A              // raise msg #20 if surrent SP in not what previously saved in CSP.
 502+ 713A              // Compiler relies on that for  syntax checking of structures
 503+ 713A                              Colon_Def QCSP, "?CSP", is_normal
 503+ 713A             >                New_Def  QCSP, "?CSP", Enter_Ptr, is_normal ; ok
 503+ 713A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 503+ 713A             >
 503+ 713A             >                // dummy db directives used to calculate length of namec
 503+ 713A 3F 43 53 50 >                db      "?CSP"
 503+ 713E             >len_NFA         defl    $ - temp_NFA
 503+ 713E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 503+ 713A             >
 503+ 713A 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 503+ 713B 3F 43 53 50 >                db      "?CSP"               // name string in 7-bit ascii, but
 503+ 713F             >                org     $-1                 // alter last byte of Name just above to set
 503+ 713E D0          >                db      {b $} | END_BIT     // msb as name end
 503+ 713F             >
 503+ 713F 25 71       >                dw      last_NFA            // Link to previous definition Name
 503+ 7141             >QCSP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 503+ 7141 CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 503+ 7143             >                else
 503+ 7143 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 503+ 7143             >                endif           ; ok        // for other definitions it "points" the correct handler
 503+ 7143             >                // Use of "; ok" to suppress "warning[fwdref]"
 503+ 7143             >
 503+ 7143             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 504+ 7143 5F 69                        dw      SPFETCH                 // sp@
 505+ 7145 B6 6E DA 6B                  dw      CSP, FETCH              // csp @
 506+ 7149 6C 6F                        dw      SUBTRACT                // -
 507+ 714B 45 64 14 00                  dw      LIT, 20                 // 20  ( bad definition end )
 508+ 714F E5 70                        dw      QERROR                  // ?error
 509+ 7151 95 69                        dw      EXIT                    // ;
 510+ 7153
 511+ 7153              //  ______________________________________________________________________
 512+ 7153              //
 513+ 7153              // ?loading      --
 514+ 7153              // raise msg #22 if not loading
 515+ 7153                              Colon_Def QLOADING, "?LOADING", is_normal
 515+ 7153             >                New_Def  QLOADING, "?LOADING", Enter_Ptr, is_normal ; ok
 515+ 7153             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 515+ 7153             >
 515+ 7153             >                // dummy db directives used to calculate length of namec
 515+ 7153 3F 4C 4F 41 >                db      "?LOADING"
 515+ 7157 44 49 4E 47 >
 515+ 715B             >len_NFA         defl    $ - temp_NFA
 515+ 715B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 515+ 7153             >
 515+ 7153 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 515+ 7154 3F 4C 4F 41 >                db      "?LOADING"               // name string in 7-bit ascii, but
 515+ 7158 44 49 4E 47 >
 515+ 715C             >                org     $-1                 // alter last byte of Name just above to set
 515+ 715B C7          >                db      {b $} | END_BIT     // msb as name end
 515+ 715C             >
 515+ 715C 3A 71       >                dw      last_NFA            // Link to previous definition Name
 515+ 715E             >QLOADING:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 515+ 715E CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 515+ 7160             >                else
 515+ 7160 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 515+ 7160             >                endif           ; ok        // for other definitions it "points" the correct handler
 515+ 7160             >                // Use of "; ok" to suppress "warning[fwdref]"
 515+ 7160             >
 515+ 7160             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 516+ 7160 45 6E DA 6B                  dw      BLK, FETCH              // blk @
 517+ 7164 EC 69                        dw      ZEQUAL                  // 0=
 518+ 7166 45 64 16 00                  dw      LIT, 22                 // 22  ( aren't loading now )
 519+ 716A E5 70                        dw      QERROR                  // ?error
 520+ 716C 95 69                        dw      EXIT                    // ;
 521+ 716E
 522+ 716E              //  ______________________________________________________________________
 523+ 716E              //
 524+ 716E              // compile      --
 525+ 716E              // compiles the following word
 526+ 716E                              Colon_Def COMPILE, "COMPILE", is_normal
 526+ 716E             >                New_Def  COMPILE, "COMPILE", Enter_Ptr, is_normal ; ok
 526+ 716E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 526+ 716E             >
 526+ 716E             >                // dummy db directives used to calculate length of namec
 526+ 716E 43 4F 4D 50 >                db      "COMPILE"
 526+ 7172 49 4C 45    >
 526+ 7175             >len_NFA         defl    $ - temp_NFA
 526+ 7175             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 526+ 716E             >
 526+ 716E 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 526+ 716F 43 4F 4D 50 >                db      "COMPILE"               // name string in 7-bit ascii, but
 526+ 7173 49 4C 45    >
 526+ 7176             >                org     $-1                 // alter last byte of Name just above to set
 526+ 7175 C5          >                db      {b $} | END_BIT     // msb as name end
 526+ 7176             >
 526+ 7176 53 71       >                dw      last_NFA            // Link to previous definition Name
 526+ 7178             >COMPILE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 526+ 7178 CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 526+ 717A             >                else
 526+ 717A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 526+ 717A             >                endif           ; ok        // for other definitions it "points" the correct handler
 526+ 717A             >                // Use of "; ok" to suppress "warning[fwdref]"
 526+ 717A             >
 526+ 717A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 527+ 717A FF 70                        dw      QCOMP                   // ?comp
 528+ 717C D2 69                        dw      R_TO                    // r>
 529+ 717E 16 6B 78 6A                  dw      DUP, CELL_PLUS          // dup, cell+
 530+ 7182 BE 69                        dw      TO_R                    // >r
 531+ 7184 DA 6B 34 6F                  dw      FETCH, COMMA            // @ ,
 532+ 7188 95 69                        dw      EXIT                    // ;
 533+ 718A
 534+ 718A              //  ______________________________________________________________________
 535+ 718A              //
 536+ 718A              // [            --
 537+ 718A              // stop compilation
 538+ 718A                              Colon_Def SQUARED_OPEN, "[", is_immediate
 538+ 718A             >                New_Def  SQUARED_OPEN, "[", Enter_Ptr, is_immediate ; ok
 538+ 718A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 538+ 718A             >
 538+ 718A             >                // dummy db directives used to calculate length of namec
 538+ 718A 5B          >                db      "["
 538+ 718B             >len_NFA         defl    $ - temp_NFA
 538+ 718B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 538+ 718A             >
 538+ 718A C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 538+ 718B 5B          >                db      "["               // name string in 7-bit ascii, but
 538+ 718C             >                org     $-1                 // alter last byte of Name just above to set
 538+ 718B DB          >                db      {b $} | END_BIT     // msb as name end
 538+ 718C             >
 538+ 718C 6E 71       >                dw      last_NFA            // Link to previous definition Name
 538+ 718E             >SQUARED_OPEN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 538+ 718E CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 538+ 7190             >                else
 538+ 7190 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 538+ 7190             >                endif           ; ok        // for other definitions it "points" the correct handler
 538+ 7190             >                // Use of "; ok" to suppress "warning[fwdref]"
 538+ 7190             >
 538+ 7190             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 539+ 7190 46 6D                        dw      ZERO                    // 0
 540+ 7192 91 6E E7 6B                  dw      STATE, STORE            // state !
 541+ 7196 95 69                        dw      EXIT                    // ; immediate
 542+ 7198
 543+ 7198              //  ______________________________________________________________________
 544+ 7198              //
 545+ 7198              // ]            --
 546+ 7198              // start compilation
 547+ 7198                              Colon_Def SQUARED_CLOSE, "]", is_normal
 547+ 7198             >                New_Def  SQUARED_CLOSE, "]", Enter_Ptr, is_normal ; ok
 547+ 7198             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 547+ 7198             >
 547+ 7198             >                // dummy db directives used to calculate length of namec
 547+ 7198 5D          >                db      "]"
 547+ 7199             >len_NFA         defl    $ - temp_NFA
 547+ 7199             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 547+ 7198             >
 547+ 7198 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 547+ 7199 5D          >                db      "]"               // name string in 7-bit ascii, but
 547+ 719A             >                org     $-1                 // alter last byte of Name just above to set
 547+ 7199 DD          >                db      {b $} | END_BIT     // msb as name end
 547+ 719A             >
 547+ 719A 8A 71       >                dw      last_NFA            // Link to previous definition Name
 547+ 719C             >SQUARED_CLOSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 547+ 719C CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 547+ 719E             >                else
 547+ 719E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 547+ 719E             >                endif           ; ok        // for other definitions it "points" the correct handler
 547+ 719E             >                // Use of "; ok" to suppress "warning[fwdref]"
 547+ 719E             >
 547+ 719E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 548+ 719E 45 64 C0 00                  dw      LIT, $C0                // 192
 549+ 71A2 91 6E E7 6B                  dw      STATE, STORE            // state !
 550+ 71A6 95 69                        dw      EXIT                    // ;
 551+ 71A8
 552+ 71A8              //  ______________________________________________________________________
 553+ 71A8              //
 554+ 71A8              // smudge       --
 555+ 71A8              // toggle smudge bit of latest definition
 556+ 71A8                              Colon_Def SMUDGE, "SMUDGE", is_normal
 556+ 71A8             >                New_Def  SMUDGE, "SMUDGE", Enter_Ptr, is_normal ; ok
 556+ 71A8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 556+ 71A8             >
 556+ 71A8             >                // dummy db directives used to calculate length of namec
 556+ 71A8 53 4D 55 44 >                db      "SMUDGE"
 556+ 71AC 47 45       >
 556+ 71AE             >len_NFA         defl    $ - temp_NFA
 556+ 71AE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 556+ 71A8             >
 556+ 71A8 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 556+ 71A9 53 4D 55 44 >                db      "SMUDGE"               // name string in 7-bit ascii, but
 556+ 71AD 47 45       >
 556+ 71AF             >                org     $-1                 // alter last byte of Name just above to set
 556+ 71AE C5          >                db      {b $} | END_BIT     // msb as name end
 556+ 71AF             >
 556+ 71AF 98 71       >                dw      last_NFA            // Link to previous definition Name
 556+ 71B1             >SMUDGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 556+ 71B1 CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 556+ 71B3             >                else
 556+ 71B3 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 556+ 71B3             >                endif           ; ok        // for other definitions it "points" the correct handler
 556+ 71B3             >                // Use of "; ok" to suppress "warning[fwdref]"
 556+ 71B3             >
 556+ 71B3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 557+ 71B3 61 70                        dw      LATEST                  // latest
 558+ 71B5 45 64 20 00                  dw      LIT, SMUDGE_BIT         // 32
 559+ 71B9 CD 6B                        dw      TOGGLE                  // toggle
 560+ 71BB 95 69                        dw      EXIT                    // ;
 561+ 71BD
 562+ 71BD              //  ______________________________________________________________________
 563+ 71BD              //
 564+ 71BD              // immediate    --
 565+ 71BD              // make immediate the latest definition
 566+ 71BD                              Colon_Def IMMEDIATE, "IMMEDIATE", is_normal
 566+ 71BD             >                New_Def  IMMEDIATE, "IMMEDIATE", Enter_Ptr, is_normal ; ok
 566+ 71BD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 566+ 71BD             >
 566+ 71BD             >                // dummy db directives used to calculate length of namec
 566+ 71BD 49 4D 4D 45 >                db      "IMMEDIATE"
 566+ 71C1 44 49 41 54 >
 566+ 71C5 45          >
 566+ 71C6             >len_NFA         defl    $ - temp_NFA
 566+ 71C6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 566+ 71BD             >
 566+ 71BD 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 566+ 71BE 49 4D 4D 45 >                db      "IMMEDIATE"               // name string in 7-bit ascii, but
 566+ 71C2 44 49 41 54 >
 566+ 71C6 45          >
 566+ 71C7             >                org     $-1                 // alter last byte of Name just above to set
 566+ 71C6 C5          >                db      {b $} | END_BIT     // msb as name end
 566+ 71C7             >
 566+ 71C7 A8 71       >                dw      last_NFA            // Link to previous definition Name
 566+ 71C9             >IMMEDIATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 566+ 71C9 CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 566+ 71CB             >                else
 566+ 71CB ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 566+ 71CB             >                endif           ; ok        // for other definitions it "points" the correct handler
 566+ 71CB             >                // Use of "; ok" to suppress "warning[fwdref]"
 566+ 71CB             >
 566+ 71CB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 567+ 71CB 61 70                        dw      LATEST                  // latest
 568+ 71CD 45 64 40 00                  dw      LIT, $40                // 64
 569+ 71D1 CD 6B                        dw      TOGGLE                  // toggle
 570+ 71D3 95 69                        dw      EXIT                    // ;
 571+ 71D5
 572+ 71D5              //  ______________________________________________________________________
 573+ 71D5              //
 574+ 71D5              // hex          --
 575+ 71D5              // change numeration base
 576+ 71D5                              Colon_Def HEX, "HEX", is_normal
 576+ 71D5             >                New_Def  HEX, "HEX", Enter_Ptr, is_normal ; ok
 576+ 71D5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 576+ 71D5             >
 576+ 71D5             >                // dummy db directives used to calculate length of namec
 576+ 71D5 48 45 58    >                db      "HEX"
 576+ 71D8             >len_NFA         defl    $ - temp_NFA
 576+ 71D8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 576+ 71D5             >
 576+ 71D5 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 576+ 71D6 48 45 58    >                db      "HEX"               // name string in 7-bit ascii, but
 576+ 71D9             >                org     $-1                 // alter last byte of Name just above to set
 576+ 71D8 D8          >                db      {b $} | END_BIT     // msb as name end
 576+ 71D9             >
 576+ 71D9 BD 71       >                dw      last_NFA            // Link to previous definition Name
 576+ 71DB             >HEX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 576+ 71DB CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 576+ 71DD             >                else
 576+ 71DD ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 576+ 71DD             >                endif           ; ok        // for other definitions it "points" the correct handler
 576+ 71DD             >                // Use of "; ok" to suppress "warning[fwdref]"
 576+ 71DD             >
 576+ 71DD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 577+ 71DD 45 64 10 00                  dw      LIT, 16                 // 16
 578+ 71E1 9B 6E E7 6B                  dw      BASE, STORE             // base !
 579+ 71E5 95 69                        dw      EXIT                    // ;
 580+ 71E7
 581+ 71E7              //  ______________________________________________________________________
 582+ 71E7              //
 583+ 71E7              // decimal      --
 584+ 71E7              // change numeration base
 585+ 71E7                              Colon_Def DECIMAL, "DECIMAL", is_normal
 585+ 71E7             >                New_Def  DECIMAL, "DECIMAL", Enter_Ptr, is_normal ; ok
 585+ 71E7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 585+ 71E7             >
 585+ 71E7             >                // dummy db directives used to calculate length of namec
 585+ 71E7 44 45 43 49 >                db      "DECIMAL"
 585+ 71EB 4D 41 4C    >
 585+ 71EE             >len_NFA         defl    $ - temp_NFA
 585+ 71EE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 585+ 71E7             >
 585+ 71E7 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 585+ 71E8 44 45 43 49 >                db      "DECIMAL"               // name string in 7-bit ascii, but
 585+ 71EC 4D 41 4C    >
 585+ 71EF             >                org     $-1                 // alter last byte of Name just above to set
 585+ 71EE CC          >                db      {b $} | END_BIT     // msb as name end
 585+ 71EF             >
 585+ 71EF D5 71       >                dw      last_NFA            // Link to previous definition Name
 585+ 71F1             >DECIMAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 585+ 71F1 CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 585+ 71F3             >                else
 585+ 71F3 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 585+ 71F3             >                endif           ; ok        // for other definitions it "points" the correct handler
 585+ 71F3             >                // Use of "; ok" to suppress "warning[fwdref]"
 585+ 71F3             >
 585+ 71F3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 586+ 71F3 45 64 0A 00                  dw      LIT, 10                 // 10
 587+ 71F7 9B 6E E7 6B                  dw      BASE, STORE             // base !
 588+ 71FB 95 69                        dw      EXIT                    // ;
 589+ 71FD
 590+ 71FD              //  ______________________________________________________________________
 591+ 71FD              //
 592+ 71FD              // (;code)       --
 593+ 71FD              // patch to CFA to call/jump to the "following code"
 594+ 71FD                              Colon_Def C_SEMICOLON_CODE, "(;CODE)", is_normal
 594+ 71FD             >                New_Def  C_SEMICOLON_CODE, "(;CODE)", Enter_Ptr, is_normal ; ok
 594+ 71FD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 594+ 71FD             >
 594+ 71FD             >                // dummy db directives used to calculate length of namec
 594+ 71FD 28 3B 43 4F >                db      "(;CODE)"
 594+ 7201 44 45 29    >
 594+ 7204             >len_NFA         defl    $ - temp_NFA
 594+ 7204             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 594+ 71FD             >
 594+ 71FD 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 594+ 71FE 28 3B 43 4F >                db      "(;CODE)"               // name string in 7-bit ascii, but
 594+ 7202 44 45 29    >
 594+ 7205             >                org     $-1                 // alter last byte of Name just above to set
 594+ 7204 A9          >                db      {b $} | END_BIT     // msb as name end
 594+ 7205             >
 594+ 7205 E7 71       >                dw      last_NFA            // Link to previous definition Name
 594+ 7207             >C_SEMICOLON_CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 594+ 7207 CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 594+ 7209             >                else
 594+ 7209 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 594+ 7209             >                endif           ; ok        // for other definitions it "points" the correct handler
 594+ 7209             >                // Use of "; ok" to suppress "warning[fwdref]"
 594+ 7209             >
 594+ 7209             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 595+ 7209 D2 69                        dw      R_TO                    // r>       ( Return Stack has IP to caller's next cell )
 596+ 720B 61 70                        dw      LATEST                  // latest   ( Word being defined in this moment )
 597+ 720D 9F 70 7F 70                  dw      PFA, CFA                // pfa cfa  ( cfa of latest word )
 598+ 7211
 599+ 7211
 600+ 7211
 601+ 7211
 602+ 7211
 603+ 7211 E7 6B                        dw      STORE                   // !
 604+ 7213 95 69                        dw      EXIT                    // ;
 605+ 7215
 606+ 7215              //  ______________________________________________________________________
 607+ 7215              //
 608+ 7215              // ;code        --
 609+ 7215                              Colon_Def SEMICOLON_CODE, ";CODE", is_immediate
 609+ 7215             >                New_Def  SEMICOLON_CODE, ";CODE", Enter_Ptr, is_immediate ; ok
 609+ 7215             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 609+ 7215             >
 609+ 7215             >                // dummy db directives used to calculate length of namec
 609+ 7215 3B 43 4F 44 >                db      ";CODE"
 609+ 7219 45          >
 609+ 721A             >len_NFA         defl    $ - temp_NFA
 609+ 721A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 609+ 7215             >
 609+ 7215 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 609+ 7216 3B 43 4F 44 >                db      ";CODE"               // name string in 7-bit ascii, but
 609+ 721A 45          >
 609+ 721B             >                org     $-1                 // alter last byte of Name just above to set
 609+ 721A C5          >                db      {b $} | END_BIT     // msb as name end
 609+ 721B             >
 609+ 721B FD 71       >                dw      last_NFA            // Link to previous definition Name
 609+ 721D             >SEMICOLON_CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 609+ 721D CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 609+ 721F             >                else
 609+ 721F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 609+ 721F             >                endif           ; ok        // for other definitions it "points" the correct handler
 609+ 721F             >                // Use of "; ok" to suppress "warning[fwdref]"
 609+ 721F             >
 609+ 721F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 610+ 721F 41 71                        dw      QCSP                    // ?csp
 611+ 7221 78 71                        dw      COMPILE                 // compile
 612+ 7223 07 72                        dw      C_SEMICOLON_CODE        // (;code)
 613+ 7225 8E 71                        dw      SQUARED_OPEN            // [
 614+ 7227 F3 6C                        dw      NOOP                    // noop () can be patched later to ASSEMBLER... )
 615+ 7229 95 69                        dw      EXIT                    // ; immediate
 616+ 722B
 617+ 722B              //  ______________________________________________________________________
 618+ 722B              //
 619+ 722B              // <builds      --
 620+ 722B                              Colon_Def CBUILDS, "<BUILDS", is_normal
 620+ 722B             >                New_Def  CBUILDS, "<BUILDS", Enter_Ptr, is_normal ; ok
 620+ 722B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 620+ 722B             >
 620+ 722B             >                // dummy db directives used to calculate length of namec
 620+ 722B 3C 42 55 49 >                db      "<BUILDS"
 620+ 722F 4C 44 53    >
 620+ 7232             >len_NFA         defl    $ - temp_NFA
 620+ 7232             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 620+ 722B             >
 620+ 722B 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 620+ 722C 3C 42 55 49 >                db      "<BUILDS"               // name string in 7-bit ascii, but
 620+ 7230 4C 44 53    >
 620+ 7233             >                org     $-1                 // alter last byte of Name just above to set
 620+ 7232 D3          >                db      {b $} | END_BIT     // msb as name end
 620+ 7233             >
 620+ 7233 15 72       >                dw      last_NFA            // Link to previous definition Name
 620+ 7235             >CBUILDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 620+ 7235 CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 620+ 7237             >                else
 620+ 7237 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 620+ 7237             >                endif           ; ok        // for other definitions it "points" the correct handler
 620+ 7237             >                // Use of "; ok" to suppress "warning[fwdref]"
 620+ 7237             >
 620+ 7237             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 621+ 7237 46 6D                        dw      ZERO                    // 0
 622+ 7239 02 6D                        dw      CONSTANT                // constant
 623+ 723B 95 69                        dw      EXIT                    // ;
 624+ 723D
 625+ 723D              //  ______________________________________________________________________
 626+ 723D              //
 627+ 723D              // recurse      --
 628+ 723D                              Colon_Def RECURSE, "RECURSE", is_immediate
 628+ 723D             >                New_Def  RECURSE, "RECURSE", Enter_Ptr, is_immediate ; ok
 628+ 723D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 628+ 723D             >
 628+ 723D             >                // dummy db directives used to calculate length of namec
 628+ 723D 52 45 43 55 >                db      "RECURSE"
 628+ 7241 52 53 45    >
 628+ 7244             >len_NFA         defl    $ - temp_NFA
 628+ 7244             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 628+ 723D             >
 628+ 723D C7          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 628+ 723E 52 45 43 55 >                db      "RECURSE"               // name string in 7-bit ascii, but
 628+ 7242 52 53 45    >
 628+ 7245             >                org     $-1                 // alter last byte of Name just above to set
 628+ 7244 C5          >                db      {b $} | END_BIT     // msb as name end
 628+ 7245             >
 628+ 7245 2B 72       >                dw      last_NFA            // Link to previous definition Name
 628+ 7247             >RECURSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 628+ 7247 CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 628+ 7249             >                else
 628+ 7249 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 628+ 7249             >                endif           ; ok        // for other definitions it "points" the correct handler
 628+ 7249             >                // Use of "; ok" to suppress "warning[fwdref]"
 628+ 7249             >
 628+ 7249             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 629+ 7249 FF 70                        dw      QCOMP                   // ?comp
 630+ 724B 61 70                        dw      LATEST                  // latest
 631+ 724D 9F 70 7F 70                  dw      PFA, CFA                // pfa cfa
 632+ 7251 34 6F                        dw      COMMA                   // ,
 633+ 7253 95 69                        dw      EXIT                    // ; immediate
 634+ 7255
 635+ 7255              //  ______________________________________________________________________
 636+ 7255              //
 637+ 7255              // does>     --
 638+ 7255                              Colon_Def DOES_TO, "DOES>", is_normal
 638+ 7255             >                New_Def  DOES_TO, "DOES>", Enter_Ptr, is_normal ; ok
 638+ 7255             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 638+ 7255             >
 638+ 7255             >                // dummy db directives used to calculate length of namec
 638+ 7255 44 4F 45 53 >                db      "DOES>"
 638+ 7259 3E          >
 638+ 725A             >len_NFA         defl    $ - temp_NFA
 638+ 725A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 638+ 7255             >
 638+ 7255 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 638+ 7256 44 4F 45 53 >                db      "DOES>"               // name string in 7-bit ascii, but
 638+ 725A 3E          >
 638+ 725B             >                org     $-1                 // alter last byte of Name just above to set
 638+ 725A BE          >                db      {b $} | END_BIT     // msb as name end
 638+ 725B             >
 638+ 725B 3D 72       >                dw      last_NFA            // Link to previous definition Name
 638+ 725D             >DOES_TO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 638+ 725D CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 638+ 725F             >                else
 638+ 725F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 638+ 725F             >                endif           ; ok        // for other definitions it "points" the correct handler
 638+ 725F             >                // Use of "; ok" to suppress "warning[fwdref]"
 638+ 725F             >
 638+ 725F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 639+ 725F D2 69                        dw      R_TO                    // r>
 640+ 7261 61 70                        dw      LATEST                  // latest
 641+ 7263 9F 70                        dw      PFA                     // pfa
 642+ 7265 E7 6B                        dw      STORE                   // !
 643+ 7267 07 72                        dw      C_SEMICOLON_CODE        // ;code
 644+ 7269              Does_Ptr:
 645+ 7269                              // via call coded in CFA
 646+ 7269                              ldhlrp
 646+ 7269 2A 30 64    >                ld      hl,(RP_Pointer)
 647+ 726C 2B                           dec     hl                  // push on Return-Stack current Instruction-Pointer
 648+ 726D 70                           ld      (hl), b
 649+ 726E 2B                           dec     hl
 650+ 726F 71                           ld      (hl), c
 651+ 7270                              ldrphl
 651+ 7270 22 30 64    >                ld      (RP_Pointer),hl
 652+ 7273 13                           inc     de
 653+ 7274 EB                           ex      de, hl
 654+ 7275 4E                           ld      c, (hl)
 655+ 7276 23                           inc     hl
 656+ 7277 46                           ld      b, (hl)
 657+ 7278 23                           inc     hl
 658+ 7279
 659+ 7279                              psh1
 659+ 7279 E5          >                push    hl
 659+ 727A DD E9       >                jp      (ix)
 660+ 727C                              // SMUDGE !
 661+ 727C
 662+ 727C              //  ______________________________________________________________________
 663+ 727C              //
 664+ 727C              // count        a -- a2 n
 665+ 727C              // expects a counted string at address a, returns string address and counter
 666+ 727C                              Colon_Def COUNT, "COUNT", is_normal
 666+ 727C             >                New_Def  COUNT, "COUNT", Enter_Ptr, is_normal ; ok
 666+ 727C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 666+ 727C             >
 666+ 727C             >                // dummy db directives used to calculate length of namec
 666+ 727C 43 4F 55 4E >                db      "COUNT"
 666+ 7280 54          >
 666+ 7281             >len_NFA         defl    $ - temp_NFA
 666+ 7281             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 666+ 727C             >
 666+ 727C 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 666+ 727D 43 4F 55 4E >                db      "COUNT"               // name string in 7-bit ascii, but
 666+ 7281 54          >
 666+ 7282             >                org     $-1                 // alter last byte of Name just above to set
 666+ 7281 D4          >                db      {b $} | END_BIT     // msb as name end
 666+ 7282             >
 666+ 7282 55 72       >                dw      last_NFA            // Link to previous definition Name
 666+ 7284             >COUNT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 666+ 7284 CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 666+ 7286             >                else
 666+ 7286 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 666+ 7286             >                endif           ; ok        // for other definitions it "points" the correct handler
 666+ 7286             >                // Use of "; ok" to suppress "warning[fwdref]"
 666+ 7286             >
 666+ 7286             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 667+ 7286 16 6B                        dw      DUP                     // dup
 668+ 7288 50 6A                        dw      ONE_PLUS                // 1+
 669+ 728A 09 6B F5 6B                  dw      SWAP, CFETCH             // swap @
 670+ 728E 95 69                        dw      EXIT                    // ;
 671+ 7290
 672+ 7290              //  ______________________________________________________________________
 673+ 7290              //
 674+ 7290              // type         a n --
 675+ 7290              // Sends to current output channel n characters starting at address a.
 676+ 7290                              Colon_Def TYPE, "TYPE", is_normal
 676+ 7290             >                New_Def  TYPE, "TYPE", Enter_Ptr, is_normal ; ok
 676+ 7290             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 676+ 7290             >
 676+ 7290             >                // dummy db directives used to calculate length of namec
 676+ 7290 54 59 50 45 >                db      "TYPE"
 676+ 7294             >len_NFA         defl    $ - temp_NFA
 676+ 7294             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 676+ 7290             >
 676+ 7290 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 676+ 7291 54 59 50 45 >                db      "TYPE"               // name string in 7-bit ascii, but
 676+ 7295             >                org     $-1                 // alter last byte of Name just above to set
 676+ 7294 C5          >                db      {b $} | END_BIT     // msb as name end
 676+ 7295             >
 676+ 7295 7C 72       >                dw      last_NFA            // Link to previous definition Name
 676+ 7297             >TYPE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 676+ 7297 CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 676+ 7299             >                else
 676+ 7299 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 676+ 7299             >                endif           ; ok        // for other definitions it "points" the correct handler
 676+ 7299             >                // Use of "; ok" to suppress "warning[fwdref]"
 676+ 7299             >
 676+ 7299             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 677+ 7299 D1 6A                        dw      OVER                    // over
 678+ 729B 27 6A                        dw      PLUS                    // +
 679+ 729D 09 6B                        dw      SWAP                    // swap
 680+ 729F D9 64                        dw      C_Q_DO                  // ?do
 681+ 72A1 0C 00                        dw      Type_Skip - $
 682+ 72A3              Type_Loop:
 683+ 72A3 12 65 F5 6B                  dw          I, CFETCH           //      i c@
 684+ 72A7 0D 70                        dw          EMIT                //      emit
 685+ 72A9 94 64                        dw      C_LOOP                  // loop
 686+ 72AB F8 FF                        dw      Type_Loop - $
 687+ 72AD              Type_Skip:
 688+ 72AD 95 69                        dw      EXIT                    // ;
 689+ 72AF
 690+ 72AF              //  ______________________________________________________________________
 691+ 72AF              //
 692+ 72AF              // -trailing    a n1 -- a n2
 693+ 72AF              // Assumes that an n1 bytes-long string is stored at address a
 694+ 72AF              // and the string contains a space delimited word,
 695+ 72AF              // Finds n2 as the position of the first character after the word.
 696+ 72AF                              Colon_Def LTRAILING, "-TRAILING", is_normal
 696+ 72AF             >                New_Def  LTRAILING, "-TRAILING", Enter_Ptr, is_normal ; ok
 696+ 72AF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 696+ 72AF             >
 696+ 72AF             >                // dummy db directives used to calculate length of namec
 696+ 72AF 2D 54 52 41 >                db      "-TRAILING"
 696+ 72B3 49 4C 49 4E >
 696+ 72B7 47          >
 696+ 72B8             >len_NFA         defl    $ - temp_NFA
 696+ 72B8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 696+ 72AF             >
 696+ 72AF 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 696+ 72B0 2D 54 52 41 >                db      "-TRAILING"               // name string in 7-bit ascii, but
 696+ 72B4 49 4C 49 4E >
 696+ 72B8 47          >
 696+ 72B9             >                org     $-1                 // alter last byte of Name just above to set
 696+ 72B8 C7          >                db      {b $} | END_BIT     // msb as name end
 696+ 72B9             >
 696+ 72B9 90 72       >                dw      last_NFA            // Link to previous definition Name
 696+ 72BB             >LTRAILING:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 696+ 72BB CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 696+ 72BD             >                else
 696+ 72BD ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 696+ 72BD             >                endif           ; ok        // for other definitions it "points" the correct handler
 696+ 72BD             >                // Use of "; ok" to suppress "warning[fwdref]"
 696+ 72BD             >
 696+ 72BD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 697+ 72BD 16 6B 46 6D                  dw      DUP, ZERO               // dup 0
 698+ 72C1                                                              // do
 699+ 72C1 07 65                        dw      C_DO
 700+ 72C3              LTrailing_Loop:
 701+ 72C3 80 6B 27 6A                  dw          TWO_DUP, PLUS       //      2dup +
 702+ 72C7 5C 6A                        dw          ONE_SUBTRACT        //      1-
 703+ 72C9 F5 6B                        dw          CFETCH              //      c@
 704+ 72CB 70 6D 6C 6F                  dw          BL, SUBTRACT        //      bl -
 705+ 72CF                                                              //      if
 706+ 72CF 7F 64                        dw          ZBRANCH
 707+ 72D1 08 00                        dw          LTrailing_Else - $
 708+ 72D3 AB 69                        dw              LEAVE           //          leave
 709+ 72D5 68 64                        dw          BRANCH              //      else
 710+ 72D7 04 00                        dw          LTrailing_Endif - $
 711+ 72D9              LTrailing_Else:
 712+ 72D9 5C 6A                        dw              ONE_SUBTRACT    //          1-
 713+ 72DB              LTrailing_Endif:                                //      endif
 714+ 72DB                                                              // loop
 715+ 72DB 94 64                        dw      C_LOOP
 716+ 72DD E6 FF                        dw      LTrailing_Loop - $
 717+ 72DF 95 69                        dw      EXIT                    // ;
 718+ 72E1
 719+ 72E1              //  ______________________________________________________________________
 720+ 72E1              //
 721+ 72E1              // accept       a n1 -- n2
 722+ 72E1              // Accepts at most n1 characters from terminal and stores them at address a
 723+ 72E1              // CR stops input. A 'nul' is added as trailer.
 724+ 72E1              // n2 is the string length. n2 is kept in span user variable also.
 725+ 72E1                              Colon_Def ACCEPT, "ACCEPT", is_normal
 725+ 72E1             >                New_Def  ACCEPT, "ACCEPT", Enter_Ptr, is_normal ; ok
 725+ 72E1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 725+ 72E1             >
 725+ 72E1             >                // dummy db directives used to calculate length of namec
 725+ 72E1 41 43 43 45 >                db      "ACCEPT"
 725+ 72E5 50 54       >
 725+ 72E7             >len_NFA         defl    $ - temp_NFA
 725+ 72E7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 725+ 72E1             >
 725+ 72E1 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 725+ 72E2 41 43 43 45 >                db      "ACCEPT"               // name string in 7-bit ascii, but
 725+ 72E6 50 54       >
 725+ 72E8             >                org     $-1                 // alter last byte of Name just above to set
 725+ 72E7 D4          >                db      {b $} | END_BIT     // msb as name end
 725+ 72E8             >
 725+ 72E8 AF 72       >                dw      last_NFA            // Link to previous definition Name
 725+ 72EA             >ACCEPT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 725+ 72EA CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 725+ 72EC             >                else
 725+ 72EC ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 725+ 72EC             >                endif           ; ok        // for other definitions it "points" the correct handler
 725+ 72EC             >                // Use of "; ok" to suppress "warning[fwdref]"
 725+ 72EC             >
 725+ 72EC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 726+ 72EC D1 6A 27 6A                  dw      OVER, PLUS, OVER        //                      ( a  n1+a  a )
 726+ 72F0 D1 6A
 727+ 72F2 46 6D 23 6B                  dw      ZERO, ROT, ROT          //                      ( a  0     a+n1  a )
 727+ 72F6 23 6B
 728+ 72F8                                                              // do
 729+ 72F8 07 65                        dw      C_DO                    //                      ( a  0 )
 730+ 72FA              Accept_Loop:
 731+ 72FA E1 6A FF 66                  dw          DROP, KEY           //      drop key        ( a  c )
 732+ 72FE 16 6B                        dw          DUP                 //      dup             ( a  c  c )
 733+ 7300 45 64 0E 00                  dw          LIT, $0E            //      0E
 734+ 7304 AC 6D                        dw          PLUS_ORIGIN         //      +origin
 735+ 7306 DA 6B                        dw          FETCH               //      @               ( a  c  c  del )
 736+ 7308 7A 6F                        dw          EQUALS              //      =               ( a  c  c==del )
 737+ 730A                                                              //      if
 738+ 730A 7F 64                        dw          ZBRANCH
 739+ 730C 2A 00                        dw          Accept_Else_0 - $
 740+ 730E E1 6A                        dw              DROP            //          drop        ( a  )
 741+ 7310 16 6B 12 65                  dw              DUP, I, EQUALS  //          dup i =     ( a  a==i )
 741+ 7314 7A 6F
 742+ 7316 16 6B                        dw              DUP             //          dup         ( a  a==i  a==i )
 743+ 7318 D2 69                        dw              R_TO            //          r> 2 - + r>
 744+ 731A 56 6D 6C 6F                  dw              TWO, SUBTRACT, PLUS //      ( decrement index by 1 or 2 )
 744+ 731E 27 6A
 745+ 7320 BE 69                        dw              TO_R            //
 746+ 7322                                                              //          if
 747+ 7322 7F 64                        dw              ZBRANCH
 748+ 7324 0A 00                        dw              Accept_Else_1 - $
 749+ 7326 45 64 07 00                  dw                  LIT, 7      //              7       ( a  7 )
 750+ 732A                                                              //          else
 751+ 732A 68 64                        dw              BRANCH
 752+ 732C 06 00                        dw              Accept_Endif_1 - $
 753+ 732E              Accept_Else_1:
 754+ 732E 45 64 08 00                  dw                  LIT, 8      //              8       ( a  8 )
 755+ 7332              Accept_Endif_1:                                 //          endif
 756+ 7332 68 64                        dw          BRANCH
 757+ 7334 30 00                        dw          Accept_Endif_0 - $
 758+ 7336              Accept_Else_0:                                  //      else
 759+ 7336 16 6B                        dw              DUP             //          dup         ( a  c  c )
 760+ 7338 45 64 0D 00                  dw              LIT, 13         //          13
 761+ 733C 7A 6F                        dw              EQUALS          //          =           ( a  c  c==CR )
 762+ 733E                                                              //          if
 763+ 733E 7F 64                        dw              ZBRANCH
 764+ 7340 0E 00                        dw              Accept_Else_2 - $
 765+ 7342 E1 6A 70 6D                  dw                  DROP, BL    //              drop bl ( a  bl )
 766+ 7346 46 6D                        dw                  ZERO        //              0       ( a  c  0 )
 767+ 7348 AB 69                        dw                  LEAVE       //              leave
 768+ 734A                                                              //          else
 769+ 734A 68 64                        dw              BRANCH
 770+ 734C 04 00                        dw              Accept_Endif_2 - $
 771+ 734E              Accept_Else_2:
 772+ 734E 16 6B                        dw                  DUP         //              dup     ( a  c  c )
 773+ 7350                                                              //          endif
 774+ 7350              Accept_Endif_2:
 775+ 7350 12 65 03 6C                  dw              I, CSTORE       //          i           ( a  c )
 776+ 7354 16 6B 70 6D                  dw              DUP, BL, LESS   //          dup bl <    ( a  c  c<BL )
 776+ 7358 9B 6F
 777+ 735A                                                              //          if
 778+ 735A 7F 64                        dw              ZBRANCH
 779+ 735C 08 00                        dw              Accept_Endif_3 - $
 780+ 735E D2 69                        dw                  R_TO        //              r>
 781+ 7360 5C 6A                        dw                  ONE_SUBTRACT//              1-
 782+ 7362 BE 69                        dw                  TO_R        //              >r
 783+ 7364                                                              //          endif
 784+ 7364              Accept_Endif_3:
 785+ 7364              Accept_Endif_0:                                 //      endif
 786+ 7364 0D 70                        dw          EMIT                //      emit
 787+ 7366 46 6D 12 65                  dw          ZERO, I, ONE_PLUS   //      0 i 1+ !
 787+ 736A 50 6A
 788+ 736C E7 6B                        dw          STORE               //          ( zero pad )
 789+ 736E 12 65                        dw          I                   //      i
 790+ 7370                                                              // loop
 791+ 7370 94 64                        dw      C_LOOP
 792+ 7372 88 FF                        dw      Accept_Loop - $
 793+ 7374 09 6B 6C 6F                  dw      SWAP, SUBTRACT          // swap -
 794+ 7378 50 6A                        dw      ONE_PLUS                // 1+
 795+ 737A 16 6B 06 6F                  dw      DUP, SPAN, STORE        // dup span !
 795+ 737E E7 6B
 796+ 7380 95 69                        dw      EXIT                    // ;
 797+ 7382
 798+ 7382              //  ______________________________________________________________________
 799+ 7382              //
 800+ 7382              // expect      a n --
 801+ 7382              // Accepts at most n1 characters from terminal and stores them at address a
 802+ 7382              // CR stops input. A 'nul' is added as trailer.
 803+ 7382              // n2 is the string length. n2 is kept in span user variable also.
 804+ 7382                              Colon_Def EXPECT, "EXPECT", is_normal
 804+ 7382             >                New_Def  EXPECT, "EXPECT", Enter_Ptr, is_normal ; ok
 804+ 7382             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 804+ 7382             >
 804+ 7382             >                // dummy db directives used to calculate length of namec
 804+ 7382 45 58 50 45 >                db      "EXPECT"
 804+ 7386 43 54       >
 804+ 7388             >len_NFA         defl    $ - temp_NFA
 804+ 7388             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 804+ 7382             >
 804+ 7382 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 804+ 7383 45 58 50 45 >                db      "EXPECT"               // name string in 7-bit ascii, but
 804+ 7387 43 54       >
 804+ 7389             >                org     $-1                 // alter last byte of Name just above to set
 804+ 7388 D4          >                db      {b $} | END_BIT     // msb as name end
 804+ 7389             >
 804+ 7389 E1 72       >                dw      last_NFA            // Link to previous definition Name
 804+ 738B             >EXPECT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 804+ 738B CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 804+ 738D             >                else
 804+ 738D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 804+ 738D             >                endif           ; ok        // for other definitions it "points" the correct handler
 804+ 738D             >                // Use of "; ok" to suppress "warning[fwdref]"
 804+ 738D             >
 804+ 738D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 805+ 738D EA 72 E1 6A                  dw      ACCEPT, DROP            // accept drop
 806+ 7391 95 69                        dw      EXIT                    // ;
 807+ 7393
 808+ 7393              //  ______________________________________________________________________
 809+ 7393              //
 810+ 7393              // query        --
 811+ 7393              // Accept at most 80 character from console. CR stops.
 812+ 7393              // Text is stored in TIB. Variable IN is zeroed.
 813+ 7393                              Colon_Def QUERY, "QUERY", is_normal
 813+ 7393             >                New_Def  QUERY, "QUERY", Enter_Ptr, is_normal ; ok
 813+ 7393             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 813+ 7393             >
 813+ 7393             >                // dummy db directives used to calculate length of namec
 813+ 7393 51 55 45 52 >                db      "QUERY"
 813+ 7397 59          >
 813+ 7398             >len_NFA         defl    $ - temp_NFA
 813+ 7398             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 813+ 7393             >
 813+ 7393 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 813+ 7394 51 55 45 52 >                db      "QUERY"               // name string in 7-bit ascii, but
 813+ 7398 59          >
 813+ 7399             >                org     $-1                 // alter last byte of Name just above to set
 813+ 7398 D9          >                db      {b $} | END_BIT     // msb as name end
 813+ 7399             >
 813+ 7399 82 73       >                dw      last_NFA            // Link to previous definition Name
 813+ 739B             >QUERY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 813+ 739B CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 813+ 739D             >                else
 813+ 739D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 813+ 739D             >                endif           ; ok        // for other definitions it "points" the correct handler
 813+ 739D             >                // Use of "; ok" to suppress "warning[fwdref]"
 813+ 739D             >
 813+ 739D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 814+ 739D D9 6D DA 6B                  dw      TIB, FETCH              // tib @
 815+ 73A1 45 64 50 00                  dw      LIT, 80                 // 80
 816+ 73A5 8B 73                        dw      EXPECT                  // expect
 817+ 73A7 46 6D 4E 6E                  dw      ZERO, TO_IN, STORE      // 0 >in !
 817+ 73AB E7 6B
 818+ 73AD 95 69                        dw      EXIT                    // ;
 819+ 73AF
 820+ 73AF              //  ______________________________________________________________________
 821+ 73AF              //
 822+ 73AF              // fill        a n c --
 823+ 73AF              // If n > 0, fills n locations starting from address a with the value c.
 824+ 73AF                              New_Def FILL, "FILL", is_code, is_normal
 824+ 73AF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 824+ 73AF             >
 824+ 73AF             >                // dummy db directives used to calculate length of namec
 824+ 73AF 46 49 4C 4C >                db      "FILL"
 824+ 73B3             >len_NFA         defl    $ - temp_NFA
 824+ 73B3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 824+ 73AF             >
 824+ 73AF 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 824+ 73B0 46 49 4C 4C >                db      "FILL"               // name string in 7-bit ascii, but
 824+ 73B4             >                org     $-1                 // alter last byte of Name just above to set
 824+ 73B3 CC          >                db      {b $} | END_BIT     // msb as name end
 824+ 73B4             >
 824+ 73B4 93 73       >                dw      last_NFA            // Link to previous definition Name
 824+ 73B6             >FILL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 824+ 73B6 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 824+ 73B6             >                else
 824+ 73B6 B8 73       >                dw      $ + 2   ; ok        // is pointed by CFA
 824+ 73B8             >                endif           ; ok        // for other definitions it "points" the correct handler
 824+ 73B8             >                // Use of "; ok" to suppress "warning[fwdref]"
 824+ 73B8             >
 824+ 73B8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 825+ 73B8 69                           ld      l, c
 826+ 73B9 60                           ld      h, b
 827+ 73BA D1                           pop     de                  // de has character
 828+ 73BB C1                           pop     bc                  // bc has counter
 829+ 73BC E3                           ex      (sp), hl            // hl has address, save Instruction Pointer
 830+ 73BD              Fill_Loop:
 831+ 73BD 78                               ld      a, b
 832+ 73BE B1                               or      c
 833+ 73BF 28 05                        jr      z, Fill_While_End
 834+ 73C1 73                               ld      (hl), e
 835+ 73C2 0B                               dec     bc
 836+ 73C3 23                               inc     hl
 837+ 73C4 18 F7                        jr      Fill_Loop
 838+ 73C6              Fill_While_End:
 839+ 73C6 C1                           pop     bc                  // Restore Instruction Pointer
 840+ 73C7
 841+ 73C7                              next
 841+ 73C7 DD E9       >                jp      (ix)
 842+ 73C9
 843+ 73C9              //  ______________________________________________________________________
 844+ 73C9              //
 845+ 73C9              // erase        a n --
 846+ 73C9              // If n > 0, fills n locations starting from address a with 'nul' characters.
 847+ 73C9                              Colon_Def ERASE, "ERASE", is_normal
 847+ 73C9             >                New_Def  ERASE, "ERASE", Enter_Ptr, is_normal ; ok
 847+ 73C9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 847+ 73C9             >
 847+ 73C9             >                // dummy db directives used to calculate length of namec
 847+ 73C9 45 52 41 53 >                db      "ERASE"
 847+ 73CD 45          >
 847+ 73CE             >len_NFA         defl    $ - temp_NFA
 847+ 73CE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 847+ 73C9             >
 847+ 73C9 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 847+ 73CA 45 52 41 53 >                db      "ERASE"               // name string in 7-bit ascii, but
 847+ 73CE 45          >
 847+ 73CF             >                org     $-1                 // alter last byte of Name just above to set
 847+ 73CE C5          >                db      {b $} | END_BIT     // msb as name end
 847+ 73CF             >
 847+ 73CF AF 73       >                dw      last_NFA            // Link to previous definition Name
 847+ 73D1             >ERASE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 847+ 73D1 CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 847+ 73D3             >                else
 847+ 73D3 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 847+ 73D3             >                endif           ; ok        // for other definitions it "points" the correct handler
 847+ 73D3             >                // Use of "; ok" to suppress "warning[fwdref]"
 847+ 73D3             >
 847+ 73D3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 848+ 73D3 46 6D B6 73                  dw      ZERO, FILL              // 0 fill
 849+ 73D7 95 69                        dw      EXIT                    // ;
 850+ 73D9
 851+ 73D9              //  ______________________________________________________________________
 852+ 73D9              //
 853+ 73D9              // blanks       a n --
 854+ 73D9              // If n > 0, fills n locations starting from address a with 'nul' characters.
 855+ 73D9                              Colon_Def BLANKS, "BLANKS", is_normal
 855+ 73D9             >                New_Def  BLANKS, "BLANKS", Enter_Ptr, is_normal ; ok
 855+ 73D9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 855+ 73D9             >
 855+ 73D9             >                // dummy db directives used to calculate length of namec
 855+ 73D9 42 4C 41 4E >                db      "BLANKS"
 855+ 73DD 4B 53       >
 855+ 73DF             >len_NFA         defl    $ - temp_NFA
 855+ 73DF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 855+ 73D9             >
 855+ 73D9 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 855+ 73DA 42 4C 41 4E >                db      "BLANKS"               // name string in 7-bit ascii, but
 855+ 73DE 4B 53       >
 855+ 73E0             >                org     $-1                 // alter last byte of Name just above to set
 855+ 73DF D3          >                db      {b $} | END_BIT     // msb as name end
 855+ 73E0             >
 855+ 73E0 C9 73       >                dw      last_NFA            // Link to previous definition Name
 855+ 73E2             >BLANKS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 855+ 73E2 CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 855+ 73E4             >                else
 855+ 73E4 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 855+ 73E4             >                endif           ; ok        // for other definitions it "points" the correct handler
 855+ 73E4             >                // Use of "; ok" to suppress "warning[fwdref]"
 855+ 73E4             >
 855+ 73E4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 856+ 73E4 70 6D B6 73                  dw      BL, FILL                // bl fill
 857+ 73E8 95 69                        dw      EXIT                    // ;
 858+ 73EA
 859+ 73EA              //  ______________________________________________________________________
 860+ 73EA              //
 861+ 73EA              // hold         c --
 862+ 73EA              // Used between <# and #> to insert a character c in numeric formatting.
 863+ 73EA                              Colon_Def HOLD, "HOLD", is_normal
 863+ 73EA             >                New_Def  HOLD, "HOLD", Enter_Ptr, is_normal ; ok
 863+ 73EA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 863+ 73EA             >
 863+ 73EA             >                // dummy db directives used to calculate length of namec
 863+ 73EA 48 4F 4C 44 >                db      "HOLD"
 863+ 73EE             >len_NFA         defl    $ - temp_NFA
 863+ 73EE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 863+ 73EA             >
 863+ 73EA 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 863+ 73EB 48 4F 4C 44 >                db      "HOLD"               // name string in 7-bit ascii, but
 863+ 73EF             >                org     $-1                 // alter last byte of Name just above to set
 863+ 73EE C4          >                db      {b $} | END_BIT     // msb as name end
 863+ 73EF             >
 863+ 73EF D9 73       >                dw      last_NFA            // Link to previous definition Name
 863+ 73F1             >HOLD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 863+ 73F1 CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 863+ 73F3             >                else
 863+ 73F3 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 863+ 73F3             >                endif           ; ok        // for other definitions it "points" the correct handler
 863+ 73F3             >                // Use of "; ok" to suppress "warning[fwdref]"
 863+ 73F3             >
 863+ 73F3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 864+ 73F3 67 6D                        dw      NEG_ONE                 // -1
 865+ 73F5 C7 6E B7 6B                  dw      HLD, PLUSSTORE          // hld +!
 866+ 73F9 C7 6E DA 6B                  dw      HLD, FETCH, CSTORE      // hld @ c!
 866+ 73FD 03 6C
 867+ 73FF 95 69                        dw      EXIT                    // ;
 868+ 7401
 869+ 7401              //  ______________________________________________________________________
 870+ 7401              //
 871+ 7401              // pad         -- a
 872+ 7401              // leaves the buffer text address. This is at a fixed distance over HERE.
 873+ 7401                              Colon_Def PAD, "PAD", is_normal
 873+ 7401             >                New_Def  PAD, "PAD", Enter_Ptr, is_normal ; ok
 873+ 7401             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 873+ 7401             >
 873+ 7401             >                // dummy db directives used to calculate length of namec
 873+ 7401 50 41 44    >                db      "PAD"
 873+ 7404             >len_NFA         defl    $ - temp_NFA
 873+ 7404             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 873+ 7401             >
 873+ 7401 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 873+ 7402 50 41 44    >                db      "PAD"               // name string in 7-bit ascii, but
 873+ 7405             >                org     $-1                 // alter last byte of Name just above to set
 873+ 7404 C4          >                db      {b $} | END_BIT     // msb as name end
 873+ 7405             >
 873+ 7405 EA 73       >                dw      last_NFA            // Link to previous definition Name
 873+ 7407             >PAD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 873+ 7407 CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 873+ 7409             >                else
 873+ 7409 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 873+ 7409             >                endif           ; ok        // for other definitions it "points" the correct handler
 873+ 7409             >                // Use of "; ok" to suppress "warning[fwdref]"
 873+ 7409             >
 873+ 7409             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 874+ 7409 18 6F                        dw      HERE                    // here
 875+ 740B 45 64 44 00                  dw      LIT, 68                 // 68
 876+ 740F 27 6A                        dw      PLUS                    // +
 877+ 7411 95 69                        dw      EXIT                    // ;
 878+ 7413
 879+ 7413              //  ______________________________________________________________________
 880+ 7413              //
 881+ 7413              // word         c -- a
 882+ 7413              // reads characters from input streams until it encouners a c delimiter.
 883+ 7413              // Stores that packet so it starts from HERE
 884+ 7413              // WORD leaves a counter as first byte and ends the packet with two spaces.
 885+ 7413              // Other occurrences of c are ignored.
 886+ 7413              // If BLK is zero, text is taken from terminal buffer TIB.
 887+ 7413              // Otherwise text is taken from the disk-block given by BLK.
 888+ 7413              // "in" variable is incremented of the number of character read.
 889+ 7413              // The number of characters read is given by ENCLOSE.
 890+ 7413                              Colon_Def WORD, "WORD", is_normal
 890+ 7413             >                New_Def  WORD, "WORD", Enter_Ptr, is_normal ; ok
 890+ 7413             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 890+ 7413             >
 890+ 7413             >                // dummy db directives used to calculate length of namec
 890+ 7413 57 4F 52 44 >                db      "WORD"
 890+ 7417             >len_NFA         defl    $ - temp_NFA
 890+ 7417             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 890+ 7413             >
 890+ 7413 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 890+ 7414 57 4F 52 44 >                db      "WORD"               // name string in 7-bit ascii, but
 890+ 7418             >                org     $-1                 // alter last byte of Name just above to set
 890+ 7417 C4          >                db      {b $} | END_BIT     // msb as name end
 890+ 7418             >
 890+ 7418 01 74       >                dw      last_NFA            // Link to previous definition Name
 890+ 741A             >WORD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 890+ 741A CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 890+ 741C             >                else
 890+ 741C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 890+ 741C             >                endif           ; ok        // for other definitions it "points" the correct handler
 890+ 741C             >                // Use of "; ok" to suppress "warning[fwdref]"
 890+ 741C             >
 890+ 741C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 891+ 741C 45 6E DA 6B                  dw      BLK, FETCH              // blk @
 892+ 7420                                                              // if
 893+ 7420 7F 64                        dw      ZBRANCH
 894+ 7422 0C 00                        dw      Word_Else - $
 895+ 7424 45 6E DA 6B                  dw          BLK, FETCH          //      blk @
 896+ 7428 C5 7D                        dw          BLOCK               //      block ( forward )
 897+ 742A                                                              // else
 898+ 742A 68 64                        dw      BRANCH
 899+ 742C 06 00                        dw      Word_Endif - $
 900+ 742E              Word_Else:
 901+ 742E D9 6D DA 6B                  dw         TIB, FETCH           //      tib @
 902+ 7432              Word_Endif:                                     // endif
 903+ 7432 4E 6E DA 6B                  dw      TO_IN, FETCH, PLUS      // >in @ +
 903+ 7436 27 6A
 904+ 7438 09 6B F2 65                  dw      SWAP, ENCLOSE           // swap enclose
 905+ 743C 18 6F 45 64                  dw      HERE, LIT, 34, BLANKS   // here 34 blanks
 905+ 7440 22 00 E2 73
 906+ 7444 4E 6E B7 6B                  dw      TO_IN, PLUSSTORE        // >in @ +
 907+ 7448 D1 6A 6C 6F                  dw      OVER, SUBTRACT, TO_R    // over - >r
 907+ 744C BE 69
 908+ 744E E5 69 18 6F                  dw      R_OP, HERE, CSTORE      // r here c!
 908+ 7452 03 6C
 909+ 7454 27 6A                        dw      PLUS                    // +
 910+ 7456 18 6F 50 6A                  dw      HERE, ONE_PLUS, R_TO    // here 1+ r>
 910+ 745A D2 69
 911+ 745C 8B 68                        dw      CMOVE                   // cmove
 912+ 745E 18 6F                        dw      HERE                    // here
 913+ 7460 95 69                        dw      EXIT                    // ;
 914+ 7462
 915+ 7462              //  ______________________________________________________________________
 916+ 7462              //
 917+ 7462              // (.")         --
 918+ 7462              // Direct procedure compiled by ." and  .(  It executes TYPE.
 919+ 7462                              Colon_Def C_DOT_QUOTE, '(.")', is_normal
 919+ 7462             >                New_Def  C_DOT_QUOTE, '(.")', Enter_Ptr, is_normal ; ok
 919+ 7462             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 919+ 7462             >
 919+ 7462             >                // dummy db directives used to calculate length of namec
 919+ 7462 28 2E 22 29 >                db      '(.")'
 919+ 7466             >len_NFA         defl    $ - temp_NFA
 919+ 7466             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 919+ 7462             >
 919+ 7462 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 919+ 7463 28 2E 22 29 >                db      '(.")'               // name string in 7-bit ascii, but
 919+ 7467             >                org     $-1                 // alter last byte of Name just above to set
 919+ 7466 A9          >                db      {b $} | END_BIT     // msb as name end
 919+ 7467             >
 919+ 7467 13 74       >                dw      last_NFA            // Link to previous definition Name
 919+ 7469             >C_DOT_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 919+ 7469 CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 919+ 746B             >                else
 919+ 746B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 919+ 746B             >                endif           ; ok        // for other definitions it "points" the correct handler
 919+ 746B             >                // Use of "; ok" to suppress "warning[fwdref]"
 919+ 746B             >
 919+ 746B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 920+ 746B E5 69 84 72                  dw      R_OP, COUNT             // r count
 921+ 746F 16 6B 50 6A                  dw      DUP, ONE_PLUS           // dup 1+
 922+ 7473 D2 69 27 6A                  dw      R_TO, PLUS, TO_R        // r> + >r  ( advance IP )
 922+ 7477 BE 69
 923+ 7479 97 72                        dw      TYPE                    // type
 924+ 747B 95 69                        dw      EXIT                    // ;
 925+ 747D
 926+ 747D              //  ______________________________________________________________________
 927+ 747D              //
 928+ 747D              // char         -- c
 929+ 747D              // get first character from next input word
 930+ 747D                              Colon_Def CHAR,  "CHAR", is_normal
 930+ 747D             >                New_Def  CHAR, "CHAR", Enter_Ptr, is_normal ; ok
 930+ 747D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 930+ 747D             >
 930+ 747D             >                // dummy db directives used to calculate length of namec
 930+ 747D 43 48 41 52 >                db      "CHAR"
 930+ 7481             >len_NFA         defl    $ - temp_NFA
 930+ 7481             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 930+ 747D             >
 930+ 747D 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 930+ 747E 43 48 41 52 >                db      "CHAR"               // name string in 7-bit ascii, but
 930+ 7482             >                org     $-1                 // alter last byte of Name just above to set
 930+ 7481 D2          >                db      {b $} | END_BIT     // msb as name end
 930+ 7482             >
 930+ 7482 62 74       >                dw      last_NFA            // Link to previous definition Name
 930+ 7484             >CHAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 930+ 7484 CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 930+ 7486             >                else
 930+ 7486 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 930+ 7486             >                endif           ; ok        // for other definitions it "points" the correct handler
 930+ 7486             >                // Use of "; ok" to suppress "warning[fwdref]"
 930+ 7486             >
 930+ 7486             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 931+ 7486 70 6D 1A 74                  dw      BL, WORD                // bl word
 932+ 748A 50 6A F5 6B                  dw      ONE_PLUS, CFETCH        // 1+ c@
 933+ 748E 95 69                        dw      EXIT                    // ;
 934+ 7490
 935+ 7490              //  ______________________________________________________________________
 936+ 7490              //
 937+ 7490              // ,"           --
 938+ 7490              // compiles a string terminated by " as a counted string from next input stream
 939+ 7490                              Colon_Def COMMA_QUOTE,  ',"', is_normal
 939+ 7490             >                New_Def  COMMA_QUOTE, ',"', Enter_Ptr, is_normal ; ok
 939+ 7490             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 939+ 7490             >
 939+ 7490             >                // dummy db directives used to calculate length of namec
 939+ 7490 2C 22       >                db      ',"'
 939+ 7492             >len_NFA         defl    $ - temp_NFA
 939+ 7492             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 939+ 7490             >
 939+ 7490 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 939+ 7491 2C 22       >                db      ',"'               // name string in 7-bit ascii, but
 939+ 7493             >                org     $-1                 // alter last byte of Name just above to set
 939+ 7492 A2          >                db      {b $} | END_BIT     // msb as name end
 939+ 7493             >
 939+ 7493 7D 74       >                dw      last_NFA            // Link to previous definition Name
 939+ 7495             >COMMA_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 939+ 7495 CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 939+ 7497             >                else
 939+ 7497 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 939+ 7497             >                endif           ; ok        // for other definitions it "points" the correct handler
 939+ 7497             >                // Use of "; ok" to suppress "warning[fwdref]"
 939+ 7497             >
 939+ 7497             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 940+ 7497 45 64 22 00                  dw      LIT, DQUOTE_CHAR        // [char] "
 941+ 749B 1A 74                        dw      WORD                    // word
 942+ 749D F5 6B 50 6A                  dw      CFETCH, ONE_PLUS        // c@ 1+
 943+ 74A1 28 6F                        dw      ALLOT                   // allot
 944+ 74A3 46 6D 45 6F                  dw      ZERO, CCOMMA            // 0 c,  ( nul-terminated string - useful anyway )
 945+ 74A7 95 69                        dw      EXIT
 946+ 74A9
 947+ 74A9              //  ______________________________________________________________________
 948+ 74A9              //
 949+ 74A9              // .c           c --
 950+ 74A9              // intermediate general purpose string builder, used by ." and .(
 951+ 74A9                              Colon_Def DOT_C,  ".C", is_immediate
 951+ 74A9             >                New_Def  DOT_C, ".C", Enter_Ptr, is_immediate ; ok
 951+ 74A9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 951+ 74A9             >
 951+ 74A9             >                // dummy db directives used to calculate length of namec
 951+ 74A9 2E 43       >                db      ".C"
 951+ 74AB             >len_NFA         defl    $ - temp_NFA
 951+ 74AB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 951+ 74A9             >
 951+ 74A9 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 951+ 74AA 2E 43       >                db      ".C"               // name string in 7-bit ascii, but
 951+ 74AC             >                org     $-1                 // alter last byte of Name just above to set
 951+ 74AB C3          >                db      {b $} | END_BIT     // msb as name end
 951+ 74AC             >
 951+ 74AC 90 74       >                dw      last_NFA            // Link to previous definition Name
 951+ 74AE             >DOT_C:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 951+ 74AE CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 951+ 74B0             >                else
 951+ 74B0 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 951+ 74B0             >                endif           ; ok        // for other definitions it "points" the correct handler
 951+ 74B0             >                // Use of "; ok" to suppress "warning[fwdref]"
 951+ 74B0             >
 951+ 74B0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 952+ 74B0 91 6E DA 6B                  dw      STATE, FETCH            // state @
 953+ 74B4                                                              // if
 954+ 74B4 7F 64                        dw      ZBRANCH
 955+ 74B6 12 00                        dw      Dot_C_Else - $
 956+ 74B8 78 71 69 74                  dw          COMPILE, C_DOT_QUOTE //     compile (.")
 957+ 74BC 1A 74 F5 6B                  dw          WORD, CFETCH        //      word c@
 958+ 74C0 50 6A 28 6F                  dw          ONE_PLUS, ALLOT     //      1+ allot
 959+ 74C4                                                              // else
 960+ 74C4 68 64                        dw      BRANCH
 961+ 74C6 08 00                        dw      Dot_C_Endif - $
 962+ 74C8              Dot_C_Else:
 963+ 74C8 1A 74 84 72                  dw          WORD, COUNT, TYPE   //      word count type
 963+ 74CC 97 72
 964+ 74CE              Dot_C_Endif:                                    // endif
 965+ 74CE 95 69                        dw      EXIT                    ;
 966+ 74D0
 967+ 74D0              //  ______________________________________________________________________
 968+ 74D0              //
 969+ 74D0              // ."           c --
 970+ 74D0                              Colon_Def DOT_QUOTE,  '."', is_immediate
 970+ 74D0             >                New_Def  DOT_QUOTE, '."', Enter_Ptr, is_immediate ; ok
 970+ 74D0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 970+ 74D0             >
 970+ 74D0             >                // dummy db directives used to calculate length of namec
 970+ 74D0 2E 22       >                db      '."'
 970+ 74D2             >len_NFA         defl    $ - temp_NFA
 970+ 74D2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 970+ 74D0             >
 970+ 74D0 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 970+ 74D1 2E 22       >                db      '."'               // name string in 7-bit ascii, but
 970+ 74D3             >                org     $-1                 // alter last byte of Name just above to set
 970+ 74D2 A2          >                db      {b $} | END_BIT     // msb as name end
 970+ 74D3             >
 970+ 74D3 A9 74       >                dw      last_NFA            // Link to previous definition Name
 970+ 74D5             >DOT_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 970+ 74D5 CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 970+ 74D7             >                else
 970+ 74D7 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 970+ 74D7             >                endif           ; ok        // for other definitions it "points" the correct handler
 970+ 74D7             >                // Use of "; ok" to suppress "warning[fwdref]"
 970+ 74D7             >
 970+ 74D7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 971+ 74D7 45 64 22 00                  dw      LIT, DQUOTE_CHAR        // [char] "
 972+ 74DB AE 74                        dw      DOT_C                   // [compile] .c
 973+ 74DD 95 69                        dw      EXIT                    // ; immediate
 974+ 74DF
 975+ 74DF              //  ______________________________________________________________________
 976+ 74DF              //
 977+ 74DF              // .(           c --
 978+ 74DF                              Colon_Def DOT_BRACKET,  ".(", is_immediate
 978+ 74DF             >                New_Def  DOT_BRACKET, ".(", Enter_Ptr, is_immediate ; ok
 978+ 74DF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 978+ 74DF             >
 978+ 74DF             >                // dummy db directives used to calculate length of namec
 978+ 74DF 2E 28       >                db      ".("
 978+ 74E1             >len_NFA         defl    $ - temp_NFA
 978+ 74E1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 978+ 74DF             >
 978+ 74DF C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 978+ 74E0 2E 28       >                db      ".("               // name string in 7-bit ascii, but
 978+ 74E2             >                org     $-1                 // alter last byte of Name just above to set
 978+ 74E1 A8          >                db      {b $} | END_BIT     // msb as name end
 978+ 74E2             >
 978+ 74E2 D0 74       >                dw      last_NFA            // Link to previous definition Name
 978+ 74E4             >DOT_BRACKET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 978+ 74E4 CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 978+ 74E6             >                else
 978+ 74E6 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 978+ 74E6             >                endif           ; ok        // for other definitions it "points" the correct handler
 978+ 74E6             >                // Use of "; ok" to suppress "warning[fwdref]"
 978+ 74E6             >
 978+ 74E6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 979+ 74E6 45 64 29 00                  dw      LIT, ")"                // [char] )
 980+ 74EA AE 74                        dw      DOT_C                   // [compile] .c
 981+ 74EC 95 69                        dw      EXIT                    // ; immediate
 982+ 74EE
 983+ 74EE              //  ______________________________________________________________________
 984+ 74EE              //
 985+ 74EE              // (sgn)        a -- a f
 986+ 74EE              // determines if char in addr a is a sign (+ or -), and in that case increments
 987+ 74EE              // a flag. Returns f as the sign, true for negative, false for positive.
 988+ 74EE              // called by NUMBER and (EXP)
 989+ 74EE                              Colon_Def CSGN,  "(SGN)", is_normal
 989+ 74EE             >                New_Def  CSGN, "(SGN)", Enter_Ptr, is_normal ; ok
 989+ 74EE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 989+ 74EE             >
 989+ 74EE             >                // dummy db directives used to calculate length of namec
 989+ 74EE 28 53 47 4E >                db      "(SGN)"
 989+ 74F2 29          >
 989+ 74F3             >len_NFA         defl    $ - temp_NFA
 989+ 74F3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 989+ 74EE             >
 989+ 74EE 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 989+ 74EF 28 53 47 4E >                db      "(SGN)"               // name string in 7-bit ascii, but
 989+ 74F3 29          >
 989+ 74F4             >                org     $-1                 // alter last byte of Name just above to set
 989+ 74F3 A9          >                db      {b $} | END_BIT     // msb as name end
 989+ 74F4             >
 989+ 74F4 DF 74       >                dw      last_NFA            // Link to previous definition Name
 989+ 74F6             >CSGN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 989+ 74F6 CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 989+ 74F8             >                else
 989+ 74F8 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 989+ 74F8             >                endif           ; ok        // for other definitions it "points" the correct handler
 989+ 74F8             >                // Use of "; ok" to suppress "warning[fwdref]"
 989+ 74F8             >
 989+ 74F8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 990+ 74F8 16 6B 50 6A                  dw      DUP, ONE_PLUS, CFETCH   // dup 1+ c@
 990+ 74FC F5 6B
 991+ 74FE 16 6B 45 64                  dw      DUP, LIT, "-", EQUALS   // dup [char] - =
 991+ 7502 2D 00 7A 6F
 992+ 7506                                                              // if
 993+ 7506 7F 64                        dw      ZBRANCH
 994+ 7508 12 00                        dw      CSgn_Else_0 - $
 995+ 750A E1 6A                        dw          DROP                //      drop
 996+ 750C 50 6A                        dw          ONE_PLUS            //      1+
 997+ 750E 4E 6D A4 6E                  dw          ONE, DPL, PLUSSTORE //      1 dpl +!
 997+ 7512 B7 6B
 998+ 7514 4E 6D                        dw          ONE                 //      1
 999+ 7516                                                              // else
1000+ 7516 68 64                        dw      BRANCH
1001+ 7518 16 00                        dw      CSgn_Endif_0 - $
1002+ 751A              CSgn_Else_0:
1003+ 751A 45 64 2B 00                  dw          LIT, "+", EQUALS    //      [char] + =
1003+ 751E 7A 6F
1004+ 7520                                                              //      if
1005+ 7520 7F 64                        dw          ZBRANCH
1006+ 7522 0A 00                        dw          CSgn_Endif_1 - $
1007+ 7524 50 6A                        dw              ONE_PLUS        //          1+
1008+ 7526 4E 6D A4 6E                  dw              ONE, DPL        //          1 dpl
1009+ 752A B7 6B                        dw              PLUSSTORE       //          +!
1010+ 752C              CSgn_Endif_1                                    //      endif
1011+ 752C 46 6D                        dw          ZERO                //      0
1012+ 752E              CSgn_Endif_0:                                   // endif
1013+ 752E 95 69                        dw      EXIT
1014+ 7530
1015+ 7530              //  ______________________________________________________________________
1016+ 7530              //
1017+ 7530              // (number)     d a -- d1 a1
1018+ 7530              // using the current BASE parse characters stored in address a
1019+ 7530              // accumulating a double precision integer d
1020+ 7530              // the process stops at the first not-convertible character
1021+ 7530              // A double-number is kept in CPU registers as HLDE.
1022+ 7530              // On the stack a double number is treated as two single numbers
1023+ 7530              // where HL is on the top of the stack and DE is the second from top,
1024+ 7530              // so in the stack memory it appears as LHED.
1025+ 7530              // Instead, in 2VARIABLE a double number is stored as EDLH.
1026+ 7530                              Colon_Def CNUMBER,  "(NUMBER)", is_normal
1026+ 7530             >                New_Def  CNUMBER, "(NUMBER)", Enter_Ptr, is_normal ; ok
1026+ 7530             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1026+ 7530             >
1026+ 7530             >                // dummy db directives used to calculate length of namec
1026+ 7530 28 4E 55 4D >                db      "(NUMBER)"
1026+ 7534 42 45 52 29 >
1026+ 7538             >len_NFA         defl    $ - temp_NFA
1026+ 7538             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1026+ 7530             >
1026+ 7530 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1026+ 7531 28 4E 55 4D >                db      "(NUMBER)"               // name string in 7-bit ascii, but
1026+ 7535 42 45 52 29 >
1026+ 7539             >                org     $-1                 // alter last byte of Name just above to set
1026+ 7538 A9          >                db      {b $} | END_BIT     // msb as name end
1026+ 7539             >
1026+ 7539 EE 74       >                dw      last_NFA            // Link to previous definition Name
1026+ 753B             >CNUMBER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1026+ 753B CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1026+ 753D             >                else
1026+ 753D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1026+ 753D             >                endif           ; ok        // for other definitions it "points" the correct handler
1026+ 753D             >                // Use of "; ok" to suppress "warning[fwdref]"
1026+ 753D             >
1026+ 753D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1027+ 753D                                                              // begin
1028+ 753D              CNumber_Begin:
1029+ 753D 50 6A                        dw          ONE_PLUS            //      1+
1030+ 753F 16 6B BE 69                  dw          DUP, TO_R           //      dup >r
1031+ 7543 F5 6B                        dw          CFETCH              //      @
1032+ 7545 9B 6E DA 6B                  dw          BASE, FETCH         //      base @
1033+ 7549 25 65                        dw          DIGIT               //      digit
1034+ 754B                                                              // while
1035+ 754B 7F 64                        dw      ZBRANCH
1036+ 754D 2C 00                        dw      CNumber_While_end - $
1037+ 754F 09 6B                        dw          SWAP                //      swap
1038+ 7551 9B 6E DA 6B                  dw          BASE, FETCH         //      base @
1039+ 7555 C0 68                        dw          UM_MUL              //      um*
1040+ 7557 E1 6A 23 6B                  dw          DROP, ROT           //      drop rot
1041+ 755B 9B 6E DA 6B                  dw          BASE, FETCH         //      base @
1042+ 755F C0 68                        dw          UM_MUL              //      um*
1043+ 7561 34 6A                        dw          DPLUS               //      d+
1044+ 7563 A4 6E DA 6B                  dw          DPL, FETCH          //      dpl @
1045+ 7567 50 6A                        dw          ONE_PLUS            //      1+
1046+ 7569                                                              //      if
1047+ 7569 7F 64                        dw          ZBRANCH
1048+ 756B 08 00                        dw          CNumber_Endif - $
1049+ 756D 4E 6D A4 6E                  dw              ONE, DPL        //          1 dpl
1050+ 7571 B7 6B                        dw              PLUSSTORE       //          +!
1051+ 7573              CNumber_Endif:                                  //      endif
1052+ 7573 D2 69                        dw             R_TO             //      r>  ( balance rp )
1053+ 7575 68 64                        dw      BRANCH
1054+ 7577 C6 FF                        dw      CNumber_Begin - $
1055+ 7579              CNumber_While_end:                              // repeat
1056+ 7579 D2 69                        dw      R_TO                    // r>  ( balance rp on exit while-repeat )
1057+ 757B 95 69                        dw      EXIT                    // ;
1058+ 757D
1059+ 757D              //  ______________________________________________________________________
1060+ 757D              //
1061+ 757D              // number       a -- d
1062+ 757D                              Colon_Def NUMBER,  "NUMBER", is_normal
1062+ 757D             >                New_Def  NUMBER, "NUMBER", Enter_Ptr, is_normal ; ok
1062+ 757D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1062+ 757D             >
1062+ 757D             >                // dummy db directives used to calculate length of namec
1062+ 757D 4E 55 4D 42 >                db      "NUMBER"
1062+ 7581 45 52       >
1062+ 7583             >len_NFA         defl    $ - temp_NFA
1062+ 7583             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1062+ 757D             >
1062+ 757D 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1062+ 757E 4E 55 4D 42 >                db      "NUMBER"               // name string in 7-bit ascii, but
1062+ 7582 45 52       >
1062+ 7584             >                org     $-1                 // alter last byte of Name just above to set
1062+ 7583 D2          >                db      {b $} | END_BIT     // msb as name end
1062+ 7584             >
1062+ 7584 30 75       >                dw      last_NFA            // Link to previous definition Name
1062+ 7586             >NUMBER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1062+ 7586 CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1062+ 7588             >                else
1062+ 7588 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1062+ 7588             >                endif           ; ok        // for other definitions it "points" the correct handler
1062+ 7588             >                // Use of "; ok" to suppress "warning[fwdref]"
1062+ 7588             >
1062+ 7588             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1063+ 7588 46 6D 46 6D                  dw      ZERO, ZERO              // 0 0
1064+ 758C 23 6B                        dw      ROT                     // rot
1065+ 758E F6 74 BE 69                  dw      CSGN, TO_R              // (sgn) >r
1066+ 7592 67 6D A4 6E                  dw      NEG_ONE, DPL, STORE     // -1 dpl !
1066+ 7596 E7 6B
1067+ 7598 3B 75                        dw      CNUMBER                 // (number)
1068+ 759A 16 6B F5 6B                  dw      DUP, CFETCH             // dup c@
1069+ 759E 45 64 2E 00                  dw      LIT, 46, EQUALS         // [char] . =  ( decimal point )
1069+ 75A2 7A 6F
1070+ 75A4                                                              // if
1071+ 75A4 7F 64                        dw      ZBRANCH
1072+ 75A6 0A 00                        dw      Number_Endif_1 - $
1073+ 75A8 46 6D A4 6E                  dw          ZERO, DPL, STORE    //      0 dpl !
1073+ 75AC E7 6B
1074+ 75AE 3B 75                        dw          CNUMBER             //      (number)
1075+ 75B0              Number_Endif_1:                                 // endif
1076+ 75B0 F5 6B 70 6D                  dw      CFETCH, BL              // c@ bl
1077+ 75B4 6C 6F 46 6D                  dw      SUBTRACT, ZERO, QERROR  // - 0 ?error
1077+ 75B8 E5 70
1078+ 75BA D2 69                        dw      R_TO                    // r>
1079+ 75BC                                                              // if
1080+ 75BC 7F 64                        dw      ZBRANCH
1081+ 75BE 04 00                        dw      Number_Endif_2 - $
1082+ 75C0 B3 6A                        dw          DMINUS              //      dminus
1083+ 75C2              Number_Endif_2:                                 // endif
1084+ 75C2 95 69                        dw      EXIT                    // ;
1085+ 75C4
1086+ 75C4              //  ______________________________________________________________________
1087+ 75C4              //
1088+ 75C4              // -find        a -- d
1089+ 75C4                              Colon_Def LFIND,  "-FIND", is_normal
1089+ 75C4             >                New_Def  LFIND, "-FIND", Enter_Ptr, is_normal ; ok
1089+ 75C4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1089+ 75C4             >
1089+ 75C4             >                // dummy db directives used to calculate length of namec
1089+ 75C4 2D 46 49 4E >                db      "-FIND"
1089+ 75C8 44          >
1089+ 75C9             >len_NFA         defl    $ - temp_NFA
1089+ 75C9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1089+ 75C4             >
1089+ 75C4 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1089+ 75C5 2D 46 49 4E >                db      "-FIND"               // name string in 7-bit ascii, but
1089+ 75C9 44          >
1089+ 75CA             >                org     $-1                 // alter last byte of Name just above to set
1089+ 75C9 C4          >                db      {b $} | END_BIT     // msb as name end
1089+ 75CA             >
1089+ 75CA 7D 75       >                dw      last_NFA            // Link to previous definition Name
1089+ 75CC             >LFIND:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1089+ 75CC CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1089+ 75CE             >                else
1089+ 75CE ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1089+ 75CE             >                endif           ; ok        // for other definitions it "points" the correct handler
1089+ 75CE             >                // Use of "; ok" to suppress "warning[fwdref]"
1089+ 75CE             >
1089+ 75CE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1090+ 75CE 70 6D 1A 74                  dw      BL, WORD                // bl word
1091+ 75D2 79 6E DA 6B                  dw      CONTEXT, FETCH, FETCH   // context @ @
1091+ 75D6 DA 6B
1092+ 75D8 9A 65                        dw      C_FIND                  // (find)
1093+ 75DA 04 70                        dw      QDUP                    // ?dup
1094+ 75DC EC 69                        dw      ZEQUAL                  // 0=
1095+ 75DE                                                              // if
1096+ 75DE 7F 64                        dw      ZBRANCH
1097+ 75E0 08 00                        dw      LFind_Endif - $
1098+ 75E2 18 6F                        dw          HERE                //      here
1099+ 75E4 61 70                        dw          LATEST              //      latest
1100+ 75E6 9A 65                        dw          C_FIND              //      (find)
1101+ 75E8              LFind_Endif:                                    // endif
1102+ 75E8 95 69                        dw      EXIT                    // ;
1103+ 75EA
1104+ 75EA              //  ______________________________________________________________________
1105+ 75EA              //
1106+ 75EA              // (abort)      --
1107+ 75EA                              Colon_Def CABORT,  "(ABORT)", is_normal
1107+ 75EA             >                New_Def  CABORT, "(ABORT)", Enter_Ptr, is_normal ; ok
1107+ 75EA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1107+ 75EA             >
1107+ 75EA             >                // dummy db directives used to calculate length of namec
1107+ 75EA 28 41 42 4F >                db      "(ABORT)"
1107+ 75EE 52 54 29    >
1107+ 75F1             >len_NFA         defl    $ - temp_NFA
1107+ 75F1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1107+ 75EA             >
1107+ 75EA 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1107+ 75EB 28 41 42 4F >                db      "(ABORT)"               // name string in 7-bit ascii, but
1107+ 75EF 52 54 29    >
1107+ 75F2             >                org     $-1                 // alter last byte of Name just above to set
1107+ 75F1 A9          >                db      {b $} | END_BIT     // msb as name end
1107+ 75F2             >
1107+ 75F2 C4 75       >                dw      last_NFA            // Link to previous definition Name
1107+ 75F4             >CABORT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1107+ 75F4 CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1107+ 75F6             >                else
1107+ 75F6 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1107+ 75F6             >                endif           ; ok        // for other definitions it "points" the correct handler
1107+ 75F6             >                // Use of "; ok" to suppress "warning[fwdref]"
1107+ 75F6             >
1107+ 75F6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1108+ 75F6 C1 78                        dw      ABORT                   // abort
1109+ 75F8 95 69                        dw      EXIT                    // ;
1110+ 75FA
1111+ 75FA              //  ______________________________________________________________________
1112+ 75FA              //
1113+ 75FA              // error        n --
1114+ 75FA              // raise an error
1115+ 75FA              // if WARNING is 0, prints "MSG#n".
1116+ 75FA              // if WARNING is 1, prints line n of screen 4.
1117+ 75FA              // if WARNING is -1 does (ABORT) that normally does ABORT
1118+ 75FA              // value can be negative or beyond block 4.
1119+ 75FA                              Colon_Def ERROR,  "ERROR", is_normal
1119+ 75FA             >                New_Def  ERROR, "ERROR", Enter_Ptr, is_normal ; ok
1119+ 75FA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1119+ 75FA             >
1119+ 75FA             >                // dummy db directives used to calculate length of namec
1119+ 75FA 45 52 52 4F >                db      "ERROR"
1119+ 75FE 52          >
1119+ 75FF             >len_NFA         defl    $ - temp_NFA
1119+ 75FF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1119+ 75FA             >
1119+ 75FA 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1119+ 75FB 45 52 52 4F >                db      "ERROR"               // name string in 7-bit ascii, but
1119+ 75FF 52          >
1119+ 7600             >                org     $-1                 // alter last byte of Name just above to set
1119+ 75FF D2          >                db      {b $} | END_BIT     // msb as name end
1119+ 7600             >
1119+ 7600 EA 75       >                dw      last_NFA            // Link to previous definition Name
1119+ 7602             >ERROR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1119+ 7602 CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1119+ 7604             >                else
1119+ 7604 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1119+ 7604             >                endif           ; ok        // for other definitions it "points" the correct handler
1119+ 7604             >                // Use of "; ok" to suppress "warning[fwdref]"
1119+ 7604             >
1119+ 7604             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1120+ 7604 F1 6D DA 6B                  dw      WARNING, FETCH, ZLESS   // warning @ 0<
1120+ 7608 FF 69
1121+ 760A                                                              // if
1122+ 760A 7F 64                        dw      ZBRANCH
1123+ 760C 04 00                        dw      Error_Endif_1 - $
1124+ 760E F4 75                        dw          CABORT              //      (abort)
1125+ 7610              Error_Endif_1:                                  // endif
1126+ 7610 18 6F 84 72                  dw      HERE, COUNT, TYPE       // here count type
1126+ 7614 97 72
1127+ 7616 69 74                        dw      C_DOT_QUOTE             // .( ? )
1128+ 7618 02 3F 20                     db      2, "? "
1129+ 761B B8 7A                        dw      MESSAGE                 // message  ( forward )
1130+ 761D C8 6D DA 6B                  dw      S0, FETCH, SPSTORE      // s0 @ sp!
1130+ 7621 6E 69
1131+ 7623 45 6E DA 6B                  dw      BLK, FETCH, LDUP        // blk @ -dup
1131+ 7627 F2 6F
1132+ 7629                                                              // if
1133+ 7629 7F 64                        dw      ZBRANCH
1134+ 762B 08 00                        dw      Error_Endif_2 - $
1135+ 762D 4E 6E DA 6B                  dw          TO_IN, FETCH, SWAP  //      >in @ swap
1135+ 7631 09 6B
1136+ 7633              Error_Endif_2:                                  // endif
1137+ 7633 88 78                        dw      QUIT                    // quit ( forward )
1138+ 7635 95 69                        dw      EXIT                    // ;
1139+ 7637              //  ______________________________________________________________________
1140+ 7637              //
1141+ 7637              // id.          nfa --
1142+ 7637                              Colon_Def ID_DOT,  "ID.", is_normal
1142+ 7637             >                New_Def  ID_DOT, "ID.", Enter_Ptr, is_normal ; ok
1142+ 7637             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1142+ 7637             >
1142+ 7637             >                // dummy db directives used to calculate length of namec
1142+ 7637 49 44 2E    >                db      "ID."
1142+ 763A             >len_NFA         defl    $ - temp_NFA
1142+ 763A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1142+ 7637             >
1142+ 7637 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1142+ 7638 49 44 2E    >                db      "ID."               // name string in 7-bit ascii, but
1142+ 763B             >                org     $-1                 // alter last byte of Name just above to set
1142+ 763A AE          >                db      {b $} | END_BIT     // msb as name end
1142+ 763B             >
1142+ 763B FA 75       >                dw      last_NFA            // Link to previous definition Name
1142+ 763D             >ID_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1142+ 763D CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1142+ 763F             >                else
1142+ 763F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1142+ 763F             >                endif           ; ok        // for other definitions it "points" the correct handler
1142+ 763F             >                // Use of "; ok" to suppress "warning[fwdref]"
1142+ 763F             >
1142+ 763F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1143+ 763F 07 74 45 64                  dw      PAD, LIT, 32, LIT, 96   // pad 32 96
1143+ 7643 20 00 45 64
1143+ 7647 60 00
1144+ 7649 B6 73                        dw      FILL                    // fill
1145+ 764B 16 6B 9F 70                  dw      DUP, PFA, LFA           // dup pfa lfa
1145+ 764F 71 70
1146+ 7651 D1 6A 6C 6F                  dw      OVER, SUBTRACT          // over -
1147+ 7655 07 74 09 6B                  dw      PAD, SWAP               // pad swap
1148+ 7659 8B 68                        dw      CMOVE                   // cmove
1149+ 765B 07 74 84 72                  dw      PAD, COUNT, LIT, $1F    // pad count 01F
1149+ 765F 45 64 1F 00
1150+ 7663 27 69                        dw      AND_OP                  // and  ( use only lower bits )
1151+ 7665 97 72 29 70                  dw      TYPE, SPACE             // type
1152+ 7669 95 69                        dw      EXIT                    // ;
1153+ 766B
1154+ 766B              //  ______________________________________________________________________
1155+ 766B              //
1156+ 766B              // code         -- cccc
1157+ 766B                              Colon_Def CODE,  "CODE", is_normal
1157+ 766B             >                New_Def  CODE, "CODE", Enter_Ptr, is_normal ; ok
1157+ 766B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1157+ 766B             >
1157+ 766B             >                // dummy db directives used to calculate length of namec
1157+ 766B 43 4F 44 45 >                db      "CODE"
1157+ 766F             >len_NFA         defl    $ - temp_NFA
1157+ 766F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1157+ 766B             >
1157+ 766B 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1157+ 766C 43 4F 44 45 >                db      "CODE"               // name string in 7-bit ascii, but
1157+ 7670             >                org     $-1                 // alter last byte of Name just above to set
1157+ 766F C5          >                db      {b $} | END_BIT     // msb as name end
1157+ 7670             >
1157+ 7670 37 76       >                dw      last_NFA            // Link to previous definition Name
1157+ 7672             >CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1157+ 7672 CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1157+ 7674             >                else
1157+ 7674 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1157+ 7674             >                endif           ; ok        // for other definitions it "points" the correct handler
1157+ 7674             >                // Use of "; ok" to suppress "warning[fwdref]"
1157+ 7674             >
1157+ 7674             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1158+ 7674 CC 75                        dw      LFIND                   // -find
1159+ 7676                                                              // if
1160+ 7676 7F 64                        dw      ZBRANCH
1161+ 7678 10 00                        dw      Code_Endif - $
1162+ 767A E1 6A                        dw          DROP                //      drop
1163+ 767C C3 70 3D 76                  dw          TO_NAME, ID_DOT     //      >name id.
1164+ 7680 45 64 04 00                  dw          LIT, 4, MESSAGE     //      4 message
1164+ 7684 B8 7A
1165+ 7686 29 70                        dw          SPACE               //      space
1166+ 7688              Code_Endif:                                     // endif
1167+ 7688 18 6F                        dw      HERE                    // here
1168+ 768A                                                              // ( ---- here begins NFA ---- )
1169+ 768A 16 6B F5 6B                  dw      DUP, CFETCH             // dup c@
1170+ 768E E4 6D DA 6B                  dw      WIDTH, FETCH, MIN       // width @ min  ( max 31 character length )
1170+ 7692 C5 6F
1171+ 7694 50 6A 28 6F                  dw      ONE_PLUS, ALLOT         // 1+ allot
1172+ 7698 16 6B                        dw      DUP                     // dup
1173+ 769A 45 64                        dw      LIT
1174+ 769C A0 00                        dw      SMUDGE_BIT | END_BIT    // 160
1175+ 769E CD 6B                        dw      TOGGLE                  // toggle
1176+ 76A0 18 6F 5C 6A                  dw      HERE, ONE_SUBTRACT     // here 1- ( last character )
1177+ 76A4 45 64 80 00                  dw      LIT, END_BIT, TOGGLE    // 128 toggle
1177+ 76A8 CD 6B
1178+ 76AA                                                              // ( ---- here is LFA ---- )
1179+ 76AA 61 70 34 6F                  dw      LATEST, COMMA           // latest ,
1180+ 76AE 86 6E DA 6B                  dw      CURRENT, FETCH, STORE   // current @ ! ( save this word as the latest )
1180+ 76B2 E7 6B
1181+ 76B4 18 6F 78 6A                  dw      HERE, CELL_PLUS, COMMA  // ( CFA point PFA )
1181+ 76B8 34 6F
1182+ 76BA 95 69                        dw      EXIT                    // ;
1183+ 76BC
1184+ 76BC              //  ______________________________________________________________________
1185+ 76BC              //
1186+ 76BC              // create       -- cccc     ( compile time )
1187+ 76BC              //              -- a        ( run time )
1188+ 76BC                              Colon_Def CREATE,  "CREATE", is_normal
1188+ 76BC             >                New_Def  CREATE, "CREATE", Enter_Ptr, is_normal ; ok
1188+ 76BC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1188+ 76BC             >
1188+ 76BC             >                // dummy db directives used to calculate length of namec
1188+ 76BC 43 52 45 41 >                db      "CREATE"
1188+ 76C0 54 45       >
1188+ 76C2             >len_NFA         defl    $ - temp_NFA
1188+ 76C2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1188+ 76BC             >
1188+ 76BC 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1188+ 76BD 43 52 45 41 >                db      "CREATE"               // name string in 7-bit ascii, but
1188+ 76C1 54 45       >
1188+ 76C3             >                org     $-1                 // alter last byte of Name just above to set
1188+ 76C2 C5          >                db      {b $} | END_BIT     // msb as name end
1188+ 76C3             >
1188+ 76C3 6B 76       >                dw      last_NFA            // Link to previous definition Name
1188+ 76C5             >CREATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1188+ 76C5 CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1188+ 76C7             >                else
1188+ 76C7 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1188+ 76C7             >                endif           ; ok        // for other definitions it "points" the correct handler
1188+ 76C7             >                // Use of "; ok" to suppress "warning[fwdref]"
1188+ 76C7             >
1188+ 76C7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1189+ 76C7 72 76 B1 71                  dw      CODE, SMUDGE        // code smudge
1190+ 76CB
1191+ 76CB
1192+ 76CB 07 72                        dw      C_SEMICOLON_CODE
1193+ 76CD                              // this routine is called from the call coded in CFA
1194+ 76CD              Create_Ptr:
1195+ 76CD 13                           inc     de
1196+ 76CE D5                           push    de                  // balance TOS before overwrite it
1197+ 76CF
1198+ 76CF                              next
1198+ 76CF DD E9       >                jp      (ix)
1199+ 76D1
1200+ 76D1              //  ______________________________________________________________________
1201+ 76D1              //
1202+ 76D1              // [compile]    -- cccc     ( compile time )
1203+ 76D1                              Colon_Def COMPILE_IMMEDIATE,  "[COMPILE]", is_immediate
1203+ 76D1             >                New_Def  COMPILE_IMMEDIATE, "[COMPILE]", Enter_Ptr, is_immediate ; ok
1203+ 76D1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1203+ 76D1             >
1203+ 76D1             >                // dummy db directives used to calculate length of namec
1203+ 76D1 5B 43 4F 4D >                db      "[COMPILE]"
1203+ 76D5 50 49 4C 45 >
1203+ 76D9 5D          >
1203+ 76DA             >len_NFA         defl    $ - temp_NFA
1203+ 76DA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1203+ 76D1             >
1203+ 76D1 C9          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1203+ 76D2 5B 43 4F 4D >                db      "[COMPILE]"               // name string in 7-bit ascii, but
1203+ 76D6 50 49 4C 45 >
1203+ 76DA 5D          >
1203+ 76DB             >                org     $-1                 // alter last byte of Name just above to set
1203+ 76DA DD          >                db      {b $} | END_BIT     // msb as name end
1203+ 76DB             >
1203+ 76DB BC 76       >                dw      last_NFA            // Link to previous definition Name
1203+ 76DD             >COMPILE_IMMEDIATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1203+ 76DD CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1203+ 76DF             >                else
1203+ 76DF ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1203+ 76DF             >                endif           ; ok        // for other definitions it "points" the correct handler
1203+ 76DF             >                // Use of "; ok" to suppress "warning[fwdref]"
1203+ 76DF             >
1203+ 76DF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1204+ 76DF CC 75                        dw      LFIND                   // -find      (  cfa  b  f  )
1205+ 76E1 EC 69                        dw      ZEQUAL                  // 0=         (  cfa  b  )
1206+ 76E3 46 6D E5 70                  dw      ZERO, QERROR            // 0 ?error
1207+ 76E7 E1 6A                        dw      DROP                    // drop       (  cfa  )
1208+ 76E9 34 6F                        dw      COMMA                   // ,
1209+ 76EB 95 69                        dw      EXIT                    // ; immediate
1210+ 76ED
1211+ 76ED              //  ______________________________________________________________________
1212+ 76ED              //
1213+ 76ED              // literal      n --      ( compile time )
1214+ 76ED                              Colon_Def LITERAL,  "LITERAL", is_immediate
1214+ 76ED             >                New_Def  LITERAL, "LITERAL", Enter_Ptr, is_immediate ; ok
1214+ 76ED             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1214+ 76ED             >
1214+ 76ED             >                // dummy db directives used to calculate length of namec
1214+ 76ED 4C 49 54 45 >                db      "LITERAL"
1214+ 76F1 52 41 4C    >
1214+ 76F4             >len_NFA         defl    $ - temp_NFA
1214+ 76F4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1214+ 76ED             >
1214+ 76ED C7          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1214+ 76EE 4C 49 54 45 >                db      "LITERAL"               // name string in 7-bit ascii, but
1214+ 76F2 52 41 4C    >
1214+ 76F5             >                org     $-1                 // alter last byte of Name just above to set
1214+ 76F4 CC          >                db      {b $} | END_BIT     // msb as name end
1214+ 76F5             >
1214+ 76F5 D1 76       >                dw      last_NFA            // Link to previous definition Name
1214+ 76F7             >LITERAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1214+ 76F7 CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1214+ 76F9             >                else
1214+ 76F9 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1214+ 76F9             >                endif           ; ok        // for other definitions it "points" the correct handler
1214+ 76F9             >                // Use of "; ok" to suppress "warning[fwdref]"
1214+ 76F9             >
1214+ 76F9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1215+ 76F9 91 6E DA 6B                  dw      STATE, FETCH            // state @
1216+ 76FD                                                              // if
1217+ 76FD 7F 64                        dw      ZBRANCH
1218+ 76FF 08 00                        dw      Literal_Endif - $
1219+ 7701 78 71 45 64                  dw          COMPILE, LIT        //      compile lit
1220+ 7705 34 6F                        dw          COMMA               //      ,
1221+ 7707              Literal_Endif:                                  // endif
1222+ 7707 95 69                        dw      EXIT                    // ; immediate
1223+ 7709
1224+ 7709              //  ______________________________________________________________________
1225+ 7709              //
1226+ 7709              // dliteral     n --      ( compile time )
1227+ 7709                              Colon_Def DLITERAL,  "DLITERAL", is_immediate
1227+ 7709             >                New_Def  DLITERAL, "DLITERAL", Enter_Ptr, is_immediate ; ok
1227+ 7709             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1227+ 7709             >
1227+ 7709             >                // dummy db directives used to calculate length of namec
1227+ 7709 44 4C 49 54 >                db      "DLITERAL"
1227+ 770D 45 52 41 4C >
1227+ 7711             >len_NFA         defl    $ - temp_NFA
1227+ 7711             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1227+ 7709             >
1227+ 7709 C8          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1227+ 770A 44 4C 49 54 >                db      "DLITERAL"               // name string in 7-bit ascii, but
1227+ 770E 45 52 41 4C >
1227+ 7712             >                org     $-1                 // alter last byte of Name just above to set
1227+ 7711 CC          >                db      {b $} | END_BIT     // msb as name end
1227+ 7712             >
1227+ 7712 ED 76       >                dw      last_NFA            // Link to previous definition Name
1227+ 7714             >DLITERAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1227+ 7714 CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1227+ 7716             >                else
1227+ 7716 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1227+ 7716             >                endif           ; ok        // for other definitions it "points" the correct handler
1227+ 7716             >                // Use of "; ok" to suppress "warning[fwdref]"
1227+ 7716             >
1227+ 7716             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1228+ 7716 91 6E DA 6B                  dw      STATE, FETCH            // state @
1229+ 771A                                                              // if
1230+ 771A 7F 64                        dw      ZBRANCH
1231+ 771C 08 00                        dw      DLiteral_Endif - $
1232+ 771E 09 6B                        dw          SWAP                //      swap
1233+ 7720 F7 76 F7 76                  dw          LITERAL,  LITERAL   //      [compile] literal [compile] literal
1234+ 7724              DLiteral_Endif:                                 // endif
1235+ 7724 95 69                        dw      EXIT                    // ; immediate
1236+ 7726
1237+ 7726              //  ______________________________________________________________________
1238+ 7726              //
1239+ 7726              // [char]       n --      ( compile time )
1240+ 7726              // inside colon definition, gets first character from next input word
1241+ 7726              // and compiles it as literal.
1242+ 7726                              Colon_Def COMPILE_CHAR,  "[CHAR]", is_immediate
1242+ 7726             >                New_Def  COMPILE_CHAR, "[CHAR]", Enter_Ptr, is_immediate ; ok
1242+ 7726             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1242+ 7726             >
1242+ 7726             >                // dummy db directives used to calculate length of namec
1242+ 7726 5B 43 48 41 >                db      "[CHAR]"
1242+ 772A 52 5D       >
1242+ 772C             >len_NFA         defl    $ - temp_NFA
1242+ 772C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1242+ 7726             >
1242+ 7726 C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1242+ 7727 5B 43 48 41 >                db      "[CHAR]"               // name string in 7-bit ascii, but
1242+ 772B 52 5D       >
1242+ 772D             >                org     $-1                 // alter last byte of Name just above to set
1242+ 772C DD          >                db      {b $} | END_BIT     // msb as name end
1242+ 772D             >
1242+ 772D 09 77       >                dw      last_NFA            // Link to previous definition Name
1242+ 772F             >COMPILE_CHAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1242+ 772F CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1242+ 7731             >                else
1242+ 7731 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1242+ 7731             >                endif           ; ok        // for other definitions it "points" the correct handler
1242+ 7731             >                // Use of "; ok" to suppress "warning[fwdref]"
1242+ 7731             >
1242+ 7731             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1243+ 7731 84 74 F7 76                  dw      CHAR, LITERAL           // char [compile] literal
1244+ 7735 95 69                        dw      EXIT                    // ; immediate
1245+ 7737
1246+ 7737              //  ______________________________________________________________________
1247+ 7737              //
1248+ 7737              // 0x00         n --      ( compile time )
1249+ 7737                              Colon_Def NUL_WORD,  $00, is_immediate
1249+ 7737             >                New_Def  NUL_WORD, $00, Enter_Ptr, is_immediate ; ok
1249+ 7737             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1249+ 7737             >
1249+ 7737             >                // dummy db directives used to calculate length of namec
1249+ 7737 00          >                db      $00
1249+ 7738             >len_NFA         defl    $ - temp_NFA
1249+ 7738             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1249+ 7737             >
1249+ 7737 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1249+ 7738 00          >                db      $00               // name string in 7-bit ascii, but
1249+ 7739             >                org     $-1                 // alter last byte of Name just above to set
1249+ 7738 80          >                db      {b $} | END_BIT     // msb as name end
1249+ 7739             >
1249+ 7739 26 77       >                dw      last_NFA            // Link to previous definition Name
1249+ 773B             >NUL_WORD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1249+ 773B CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1249+ 773D             >                else
1249+ 773D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1249+ 773D             >                endif           ; ok        // for other definitions it "points" the correct handler
1249+ 773D             >                // Use of "; ok" to suppress "warning[fwdref]"
1249+ 773D             >
1249+ 773D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1250+ 773D 45 6E DA 6B                  dw      BLK, FETCH, ONE         // blk @ 1
1250+ 7741 4E 6D
1251+ 7743 B7 6F                        dw      GREATER                 // > if
1252+ 7745                                                              // if
1253+ 7745 7F 64                        dw      ZBRANCH
1254+ 7747 28 00                        dw      Nul_Else_1 - $
1255+ 7749 4E 6D 45 6E                  dw          ONE, BLK, PLUSSTORE //      1 blk +!
1255+ 774D B7 6B
1256+ 774F 46 6D 4E 6E                  dw          ZERO, TO_IN, STORE  //      0 >in !
1256+ 7753 E7 6B
1257+ 7755 45 6E DA 6B                  dw          BLK, FETCH          //      blk @
1258+ 7759 92 6D                        dw          BSCR                //      b/scr
1259+ 775B 5C 6A                        dw          ONE_SUBTRACT        //      1 -
1260+ 775D 27 69                        dw          AND_OP              //      and  ( this is tricky )
1261+ 775F EC 69                        dw          ZEQUAL              //      0=
1262+ 7761                                                              //      if
1263+ 7761 7F 64                        dw          ZBRANCH
1264+ 7763 08 00                        dw          Nul_Endif_2 - $
1265+ 7765 17 71                        dw              QEXEC           //          ?exec
1266+ 7767 D2 69 E1 6A                  dw              R_TO, DROP      //          r> drop
1267+ 776B              Nul_Endif_2:                                    //      endif
1268+ 776B 68 64                        dw      BRANCH
1269+ 776D 06 00                        dw      Nul_Endif_1 - $
1270+ 776F              Nul_Else_1:                                     // else
1271+ 776F D2 69 E1 6A                  dw          R_TO, DROP          //      r> drop
1272+ 7773              Nul_Endif_1:                                    // endif
1273+ 7773 95 69                        dw      EXIT                    // ;
1274+ 7775
1275+ 7775              //  ______________________________________________________________________
1276+ 7775              //
1277+ 7775              // ?stack       --
1278+ 7775              // Raise error #1 if stack is empty and you pop it
1279+ 7775              // Raise error #7 if stack is full.
1280+ 7775              // This means SP must always stay between HERE and FFFF
1281+ 7775              // For 128K BANK paging purpose SP must be <= BFE0 and 50 words room
1282+ 7775              // for Next 8K MMU paging this is $DOE8
1283+ 7775                              Colon_Def QSTACK, "?STACK", is_normal
1283+ 7775             >                New_Def  QSTACK, "?STACK", Enter_Ptr, is_normal ; ok
1283+ 7775             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1283+ 7775             >
1283+ 7775             >                // dummy db directives used to calculate length of namec
1283+ 7775 3F 53 54 41 >                db      "?STACK"
1283+ 7779 43 4B       >
1283+ 777B             >len_NFA         defl    $ - temp_NFA
1283+ 777B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1283+ 7775             >
1283+ 7775 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1283+ 7776 3F 53 54 41 >                db      "?STACK"               // name string in 7-bit ascii, but
1283+ 777A 43 4B       >
1283+ 777C             >                org     $-1                 // alter last byte of Name just above to set
1283+ 777B CB          >                db      {b $} | END_BIT     // msb as name end
1283+ 777C             >
1283+ 777C 37 77       >                dw      last_NFA            // Link to previous definition Name
1283+ 777E             >QSTACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1283+ 777E CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1283+ 7780             >                else
1283+ 7780 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1283+ 7780             >                endif           ; ok        // for other definitions it "points" the correct handler
1283+ 7780             >                // Use of "; ok" to suppress "warning[fwdref]"
1283+ 7780             >
1283+ 7780             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1284+ 7780 5F 69                        dw      SPFETCH                 // sp@
1285+ 7782 C8 6D DA 6B                  dw      S0, FETCH               // s0 @
1286+ 7786 09 6B 87 6F                  dw      SWAP, ULESS             // swap u<
1287+ 778A 4E 6D E5 70                  dw      ONE, QERROR             // 1 ?error
1288+ 778E 18 6F                        dw      HERE                    // here
1289+ 7790 C8 6D DA 6B                  dw      S0, FETCH, LESS         // s0 @ <
1289+ 7794 9B 6F
1290+ 7796                                                              // if
1291+ 7796 7F 64                        dw      ZBRANCH
1292+ 7798 14 00                        dw      QStack_Endif - $
1293+ 779A 5F 69                        dw          SPFETCH             //      sp@
1294+ 779C 18 6F 45 64                  dw          HERE, LIT, 128      //      here 128
1294+ 77A0 80 00
1295+ 77A2 27 6A 87 6F                  dw          PLUS, ULESS         //      plus u<
1296+ 77A6 45 64 07 00                  dw          LIT, 7, QERROR      //      7 Cerror
1296+ 77AA E5 70
1297+ 77AC              QStack_Endif:                                   // endif
1298+ 77AC 95 69                        dw      EXIT                    // ;
1299+ 77AE
1300+ 77AE
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L1.asm
  90  77AE                              include "L2.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L2.asm
   1+ 77AE              //  ______________________________________________________________________
   2+ 77AE              //
   3+ 77AE              //  L2.asm
   4+ 77AE              //
   5+ 77AE              //  Level-2
   6+ 77AE              //  the Forth interpreter, vocabulary, cold/warm start and quit from Forth.
   7+ 77AE              //  ______________________________________________________________________
   8+ 77AE
   9+ 77AE
  10+ 77AE              //  ______________________________________________________________________
  11+ 77AE              //
  12+ 77AE              // interpret    --
  13+ 77AE              // This is the text interpreter.
  14+ 77AE              // It executes or compiles, depending on STATE, the text coming from
  15+ 77AE              // current input stream.
  16+ 77AE              // If the word search fails after parsing CONTEXT and CURRENT vocabulary,
  17+ 77AE              // the word is interpreted as numeric and converted, using current BASE,
  18+ 77AE              // leaving on top of stack a single or double precision number, depending
  19+ 77AE              // on the presence of a decimal point.
  20+ 77AE              // If the number conversion fails, the terminal is notified with ? followed
  21+ 77AE              // by the offending word.
  22+ 77AE                              Colon_Def INTERPRET, "INTERPRET", is_normal
  22+ 77AE             >                New_Def  INTERPRET, "INTERPRET", Enter_Ptr, is_normal ; ok
  22+ 77AE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  22+ 77AE             >
  22+ 77AE             >                // dummy db directives used to calculate length of namec
  22+ 77AE 49 4E 54 45 >                db      "INTERPRET"
  22+ 77B2 52 50 52 45 >
  22+ 77B6 54          >
  22+ 77B7             >len_NFA         defl    $ - temp_NFA
  22+ 77B7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  22+ 77AE             >
  22+ 77AE 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  22+ 77AF 49 4E 54 45 >                db      "INTERPRET"               // name string in 7-bit ascii, but
  22+ 77B3 52 50 52 45 >
  22+ 77B7 54          >
  22+ 77B8             >                org     $-1                 // alter last byte of Name just above to set
  22+ 77B7 D4          >                db      {b $} | END_BIT     // msb as name end
  22+ 77B8             >
  22+ 77B8 75 77       >                dw      last_NFA            // Link to previous definition Name
  22+ 77BA             >INTERPRET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  22+ 77BA CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  22+ 77BC             >                else
  22+ 77BC ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  22+ 77BC             >                endif           ; ok        // for other definitions it "points" the correct handler
  22+ 77BC             >                // Use of "; ok" to suppress "warning[fwdref]"
  22+ 77BC             >
  22+ 77BC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  23+ 77BC
  24+ 77BC              Interpret_Begin:                                        // begin
  25+ 77BC CC 75                        dw          LFIND                       //      -find
  26+ 77BE                                                                      //      if
  27+ 77BE 7F 64                        dw          ZBRANCH
  28+ 77C0 1A 00                        dw          Interpret_Else_1 - $
  29+ 77C2 91 6E DA 6B                  dw              STATE, FETCH, LESS      //          state @ <
  29+ 77C6 9B 6F
  30+ 77C8                                                                      //          if
  31+ 77C8 7F 64                        dw              ZBRANCH
  32+ 77CA 08 00                        dw              Interpret_Else_2 - $
  33+ 77CC 34 6F                        dw                  COMMA               //              ,
  34+ 77CE                                                                      //          else
  35+ 77CE 68 64                        dw              BRANCH
  36+ 77D0 06 00                        dw              Interpret_Endif_2 - $
  37+ 77D2              Interpret_Else_2:
  38+ 77D2 5A 64 F3 6C                  dw                  EXECUTE, NOOP       //              execute nooop
  39+ 77D6              Interpret_Endif_2:                                      //          endif
  40+ 77D6                                                                      //      else
  41+ 77D6 68 64                        dw          BRANCH
  42+ 77D8 28 00                        dw          Interpret_Endif_1 - $
  43+ 77DA              Interpret_Else_1:
  44+ 77DA 18 6F 86 75                  dw              HERE, NUMBER            //          here number
  45+ 77DE A4 6E DA 6B                  dw              DPL, FETCH, ONE_PLUS    //          dpl @ 1+
  45+ 77E2 50 6A
  46+ 77E4                                                                      //          if
  47+ 77E4 7F 64                        dw              ZBRANCH
  48+ 77E6 16 00                        dw              Interpret_Else_3 - $
  49+ 77E8 3C 6E DA 6B                  dw                  NMODE, FETCH        //              nmode @
  50+ 77EC                                                                      //              if
  51+ 77EC 7F 64                        dw                  ZBRANCH
  52+ 77EE 08 00                        dw                  Interpret_Endif_4 - $
  53+ 77F0 4E 6D 46 6D                  dw                      ONE, ZERO       //                  1 0
  54+ 77F4 60 6B                        dw                      TWO_DROP        //                  2drop
  55+ 77F6              Interpret_Endif_4:                                      //              endif
  56+ 77F6 14 77                        dw                  DLITERAL            //              [compile] dliteral
  57+ 77F8                                                                      //          else
  58+ 77F8 68 64                        dw              BRANCH
  59+ 77FA 06 00                        dw              Interpret_Endif_3 - $
  60+ 77FC              Interpret_Else_3:
  61+ 77FC E1 6A                        dw                  DROP                //              drop
  62+ 77FE F7 76                        dw                  LITERAL             //              [compile]  literal
  63+ 7800              Interpret_Endif_3:                                      //          endif
  64+ 7800              Interpret_Endif_1:                                      //      endif
  65+ 7800 7E 77                        dw          QSTACK                      //      ?stack
  66+ 7802 86 67                        dw          QTERMINAL                   //      ?terminal
  67+ 7804                                                                      //      if
  68+ 7804 7F 64                        dw          ZBRANCH
  69+ 7806 04 00                        dw          Interpret_Endif_5 - $
  70+ 7808 F4 75                        dw              CABORT                  //          (abort)
  71+ 780A              Interpret_Endif_5:                                      //      endif
  72+ 780A 68 64                        dw      BRANCH
  73+ 780C B0 FF                        dw      Interpret_Begin - $
  74+ 780E 95 69                        dw      EXIT                            // ;
  75+ 7810
  76+ 7810              //  ______________________________________________________________________
  77+ 7810              //
  78+ 7810              // vocabulary   -- cccc     ( compile time )
  79+ 7810              // Defining word used in the form   VOCABULARY cccc
  80+ 7810              // creates the word  cccc  that gives the name to the vocabulary.
  81+ 7810              // Giving  cccc  makes the vocabulary CONTEXT so its words are executed first
  82+ 7810              // Giving  cccc DEFINITIONS makes  the vocabulary  CURRENT
  83+ 7810              // so new definitions can be inserted in that vocabulary.
  84+ 7810                              Colon_Def VOCABULARY, "VOCABULARY", is_normal
  84+ 7810             >                New_Def  VOCABULARY, "VOCABULARY", Enter_Ptr, is_normal ; ok
  84+ 7810             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  84+ 7810             >
  84+ 7810             >                // dummy db directives used to calculate length of namec
  84+ 7810 56 4F 43 41 >                db      "VOCABULARY"
  84+ 7814 42 55 4C 41 >
  84+ 7818 52 59       >
  84+ 781A             >len_NFA         defl    $ - temp_NFA
  84+ 781A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  84+ 7810             >
  84+ 7810 8A          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  84+ 7811 56 4F 43 41 >                db      "VOCABULARY"               // name string in 7-bit ascii, but
  84+ 7815 42 55 4C 41 >
  84+ 7819 52 59       >
  84+ 781B             >                org     $-1                 // alter last byte of Name just above to set
  84+ 781A D9          >                db      {b $} | END_BIT     // msb as name end
  84+ 781B             >
  84+ 781B AE 77       >                dw      last_NFA            // Link to previous definition Name
  84+ 781D             >VOCABULARY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  84+ 781D CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  84+ 781F             >                else
  84+ 781F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  84+ 781F             >                endif           ; ok        // for other definitions it "points" the correct handler
  84+ 781F             >                // Use of "; ok" to suppress "warning[fwdref]"
  84+ 781F             >
  84+ 781F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  85+ 781F
  86+ 781F 35 72                        dw      CBUILDS
  87+ 7821
  88+ 7821 45 64 81 A0                  dw      LIT, $A081, COMMA       // $81A0 ,
  88+ 7825 34 6F
  89+ 7827 86 6E DA 6B                  dw      CURRENT, FETCH          // current @
  90+ 782B 8E 6A 34 6F                  dw      CELL_MINUS, COMMA       // cell- ,
  91+ 782F 18 6F                        dw      HERE                    // here
  92+ 7831 12 6E DA 6B                  dw      VOC_LINK, FETCH, COMMA  // voc-link @ ,
  92+ 7835 34 6F
  93+ 7837 12 6E E7 6B                  dw      VOC_LINK, STORE         // voc-link !
  94+ 783B
  95+ 783B 5D 72                        dw      DOES_TO                 // does>
  96+ 783D              Vocabulary_Does:
  97+ 783D 78 6A                        dw      CELL_PLUS               // cell+
  98+ 783F 79 6E E7 6B                  dw      CONTEXT, STORE          // context !
  99+ 7843 95 69                        dw      EXIT                    // ;
 100+ 7845
 101+ 7845              //  ______________________________________________________________________
 102+ 7845              //
 103+ 7845              // forth        --
 104+ 7845              // Name of the first vocabulary.
 105+ 7845              // It makes FORTH the CONTEXT vocabulary.
 106+ 7845              // Until new user vocabulary are defined, new colon-definitions becomes
 107+ 7845              // part of FORTH. It is immediate, so it will executed during the creation
 108+ 7845              // of a colon definition to be able to select the vocabulary.
 109+ 7845
 110+ 7845                              New_Def FORTH, "FORTH", Does_Ptr, is_immediate
 110+ 7845             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 110+ 7845             >
 110+ 7845             >                // dummy db directives used to calculate length of namec
 110+ 7845 46 4F 52 54 >                db      "FORTH"
 110+ 7849 48          >
 110+ 784A             >len_NFA         defl    $ - temp_NFA
 110+ 784A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 110+ 7845             >
 110+ 7845 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 110+ 7846 46 4F 52 54 >                db      "FORTH"               // name string in 7-bit ascii, but
 110+ 784A 48          >
 110+ 784B             >                org     $-1                 // alter last byte of Name just above to set
 110+ 784A C8          >                db      {b $} | END_BIT     // msb as name end
 110+ 784B             >
 110+ 784B 10 78       >                dw      last_NFA            // Link to previous definition Name
 110+ 784D             >FORTH:          if Does_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 110+ 784D 69 72       >                dw      Does_Ptr ; ok        // for primitive definitions  actual code
 110+ 784F             >                else
 110+ 784F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 110+ 784F             >                endif           ; ok        // for other definitions it "points" the correct handler
 110+ 784F             >                // Use of "; ok" to suppress "warning[fwdref]"
 110+ 784F             >
 110+ 784F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 111+ 784F 3D 78                        dw      Vocabulary_Does
 112+ 7851 81 A0                        db      $81, $A0
 113+ 7853              Forth_Latest_Ptr:
 114+ 7853 84 86                        dw      Fence_Word // Latest_Definition
 115+ 7855              Voclink_Ptr:
 116+ 7855 00 00                        dw      0
 117+ 7857              // Any new vocabulary is structured as follow:
 118+ 7857              // PFA+0 points to DOES> part of VOCABULARY to perform CELL+ CONTEXT !
 119+ 7857              // PFA+2 is 81,A0 i.e. a null-word used as LATEST in the new vocabulary
 120+ 7857              // PFA+4 always contains the LATEST word of this VOCABULARY.
 121+ 7857              //       at creations it points to the null-word of its parent vocabulary
 122+ 7857              //       that is normally FORTH, For example ASSEMBLER points FORTH's null-word
 123+ 7857              // PFA+6 is the pointer that builds up the vocabulary linked list.
 124+ 7857              //       FORTH has 0 here to signal the end of the list and user's variable
 125+ 7857              //       VOC-LINK points to PFA+6 of the newest vocabulary created.
 126+ 7857              //       While FORTH is the only vocabulary, VOC-LINK points to FORTH's PFA+6
 127+ 7857              //       When ASSEMBLER is created, its PFA+6 points to FORTH's PFA+6, and so on
 128+ 7857
 129+ 7857              //  ______________________________________________________________________
 130+ 7857              //
 131+ 7857              // definitions  --
 132+ 7857              // Used in the form  cccc DEFINITIONS
 133+ 7857              // set the CURRENT vocabulary at CONTEXT to insert new definitions in
 134+ 7857              // vocabulary cccc.
 135+ 7857                              Colon_Def DEFINITIONS, "DEFINITIONS", is_normal
 135+ 7857             >                New_Def  DEFINITIONS, "DEFINITIONS", Enter_Ptr, is_normal ; ok
 135+ 7857             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 135+ 7857             >
 135+ 7857             >                // dummy db directives used to calculate length of namec
 135+ 7857 44 45 46 49 >                db      "DEFINITIONS"
 135+ 785B 4E 49 54 49 >
 135+ 785F 4F 4E 53    >
 135+ 7862             >len_NFA         defl    $ - temp_NFA
 135+ 7862             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 135+ 7857             >
 135+ 7857 8B          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 135+ 7858 44 45 46 49 >                db      "DEFINITIONS"               // name string in 7-bit ascii, but
 135+ 785C 4E 49 54 49 >
 135+ 7860 4F 4E 53    >
 135+ 7863             >                org     $-1                 // alter last byte of Name just above to set
 135+ 7862 D3          >                db      {b $} | END_BIT     // msb as name end
 135+ 7863             >
 135+ 7863 45 78       >                dw      last_NFA            // Link to previous definition Name
 135+ 7865             >DEFINITIONS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 135+ 7865 CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 135+ 7867             >                else
 135+ 7867 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 135+ 7867             >                endif           ; ok        // for other definitions it "points" the correct handler
 135+ 7867             >                // Use of "; ok" to suppress "warning[fwdref]"
 135+ 7867             >
 135+ 7867             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 136+ 7867 79 6E DA 6B                  dw      CONTEXT, FETCH          // context @
 137+ 786B 86 6E E7 6B                  dw      CURRENT, STORE          // current !
 138+ 786F 95 69                        dw      EXIT                    // ;
 139+ 7871
 140+ 7871              //  ______________________________________________________________________
 141+ 7871              //
 142+ 7871              // (            -- cccc )
 143+ 7871              // the following text is interpreted as a comment until a closing )
 144+ 7871                              Colon_Def COMMENT_BRAKET, "(", is_immediate
 144+ 7871             >                New_Def  COMMENT_BRAKET, "(", Enter_Ptr, is_immediate ; ok
 144+ 7871             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 144+ 7871             >
 144+ 7871             >                // dummy db directives used to calculate length of namec
 144+ 7871 28          >                db      "("
 144+ 7872             >len_NFA         defl    $ - temp_NFA
 144+ 7872             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 144+ 7871             >
 144+ 7871 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 144+ 7872 28          >                db      "("               // name string in 7-bit ascii, but
 144+ 7873             >                org     $-1                 // alter last byte of Name just above to set
 144+ 7872 A8          >                db      {b $} | END_BIT     // msb as name end
 144+ 7873             >
 144+ 7873 57 78       >                dw      last_NFA            // Link to previous definition Name
 144+ 7875             >COMMENT_BRAKET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 144+ 7875 CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 144+ 7877             >                else
 144+ 7877 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 144+ 7877             >                endif           ; ok        // for other definitions it "points" the correct handler
 144+ 7877             >                // Use of "; ok" to suppress "warning[fwdref]"
 144+ 7877             >
 144+ 7877             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 145+ 7877 45 64 29 00                  dw      LIT, ")"                // [char] )
 146+ 787B 1A 74 E1 6A                  dw      WORD, DROP              // word drop
 147+ 787F 95 69                        dw      EXIT                    // ;
 148+ 7881
 149+ 7881              //  ______________________________________________________________________
 150+ 7881              //
 151+ 7881              // quit         --
 152+ 7881              // \ Erase the return-stack, stop any compilation and give controlo to the console. No message is issued.
 153+ 7881                              Colon_Def QUIT, "QUIT", is_normal
 153+ 7881             >                New_Def  QUIT, "QUIT", Enter_Ptr, is_normal ; ok
 153+ 7881             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 153+ 7881             >
 153+ 7881             >                // dummy db directives used to calculate length of namec
 153+ 7881 51 55 49 54 >                db      "QUIT"
 153+ 7885             >len_NFA         defl    $ - temp_NFA
 153+ 7885             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 153+ 7881             >
 153+ 7881 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 153+ 7882 51 55 49 54 >                db      "QUIT"               // name string in 7-bit ascii, but
 153+ 7886             >                org     $-1                 // alter last byte of Name just above to set
 153+ 7885 D4          >                db      {b $} | END_BIT     // msb as name end
 153+ 7886             >
 153+ 7886 71 78       >                dw      last_NFA            // Link to previous definition Name
 153+ 7888             >QUIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 153+ 7888 CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 153+ 788A             >                else
 153+ 788A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 153+ 788A             >                endif           ; ok        // for other definitions it "points" the correct handler
 153+ 788A             >                // Use of "; ok" to suppress "warning[fwdref]"
 153+ 788A             >
 153+ 788A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 154+ 788A
 155+ 788A 46 6D FC 6E                  dw      ZERO, SOURCE_ID, STORE  // 0 source-id !
 155+ 788E E7 6B
 156+ 7890 46 6D 45 6E                  dw      ZERO, BLK, STORE        // 0 blk !
 156+ 7894 E7 6B
 157+ 7896 8E 71                        dw      SQUARED_OPEN            // [compile] [
 158+ 7898                                                              // begin
 159+ 7898              Quit_Begin:
 160+ 7898 D0 6D DA 6B                  dw      R0, FETCH, RPSTORE      //      r0 @ rp!
 160+ 789C 88 69
 161+ 789E 7C 68                        dw      CR                      //      cr
 162+ 78A0 9B 73                        dw      QUERY                   //      query
 163+ 78A2              Next_Breakpoint_1:
 164+ 78A2 BA 77                        dw      INTERPRET               //      interpret
 165+ 78A4 91 6E DA 6B                  dw      STATE, FETCH, ZEQUAL    //      state @ 0=
 165+ 78A8 EC 69
 166+ 78AA                                                              //      if
 167+ 78AA 7F 64                        dw      ZBRANCH
 168+ 78AC 07 00                        dw      Quit_Endif - $
 169+ 78AE 69 74                        dw          C_DOT_QUOTE
 170+ 78B0 02 6F 6B                     db          2, "ok"             //          .( ok)
 171+ 78B3              Quit_Endif:                                     //      else
 172+ 78B3                                                              // again
 173+ 78B3 68 64                        dw      BRANCH
 174+ 78B5 E3 FF                        dw      Quit_Begin - $
 175+ 78B7 95 69                        dw      EXIT                    // ;
 176+ 78B9
 177+ 78B9              //  ______________________________________________________________________
 178+ 78B9              //
 179+ 78B9              // abort        --
 180+ 78B9                              Colon_Def ABORT, "ABORT", is_normal
 180+ 78B9             >                New_Def  ABORT, "ABORT", Enter_Ptr, is_normal ; ok
 180+ 78B9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 180+ 78B9             >
 180+ 78B9             >                // dummy db directives used to calculate length of namec
 180+ 78B9 41 42 4F 52 >                db      "ABORT"
 180+ 78BD 54          >
 180+ 78BE             >len_NFA         defl    $ - temp_NFA
 180+ 78BE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 180+ 78B9             >
 180+ 78B9 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 180+ 78BA 41 42 4F 52 >                db      "ABORT"               // name string in 7-bit ascii, but
 180+ 78BE 54          >
 180+ 78BF             >                org     $-1                 // alter last byte of Name just above to set
 180+ 78BE D4          >                db      {b $} | END_BIT     // msb as name end
 180+ 78BF             >
 180+ 78BF 81 78       >                dw      last_NFA            // Link to previous definition Name
 180+ 78C1             >ABORT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 180+ 78C1 CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 180+ 78C3             >                else
 180+ 78C3 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 180+ 78C3             >                endif           ; ok        // for other definitions it "points" the correct handler
 180+ 78C3             >                // Use of "; ok" to suppress "warning[fwdref]"
 180+ 78C3             >
 180+ 78C3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 181+ 78C3 C8 6D DA 6B                  dw      S0, FETCH, SPSTORE      // s0 @ sp!
 181+ 78C7 6E 69
 182+ 78C9 F1 71                        dw      DECIMAL                 // decimal
 183+ 78CB 4D 78                        dw      FORTH                   // [compile] forth
 184+ 78CD 65 78                        dw      DEFINITIONS             // definitions
 185+ 78CF              Autoexec_Ptr:
 186+ 78CF DD 83                        dw      AUTOEXEC                // autoexec, patched to noop
 187+ 78D1 88 78                        dw      QUIT                    // quit
 188+ 78D3 95 69                        dw      EXIT                    // ;
 189+ 78D5
 190+ 78D5              //  ______________________________________________________________________
 191+ 78D5              //
 192+ 78D5              // warm         --
 193+ 78D5                              Colon_Def WARM, "WARM", is_normal
 193+ 78D5             >                New_Def  WARM, "WARM", Enter_Ptr, is_normal ; ok
 193+ 78D5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 193+ 78D5             >
 193+ 78D5             >                // dummy db directives used to calculate length of namec
 193+ 78D5 57 41 52 4D >                db      "WARM"
 193+ 78D9             >len_NFA         defl    $ - temp_NFA
 193+ 78D9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 193+ 78D5             >
 193+ 78D5 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 193+ 78D6 57 41 52 4D >                db      "WARM"               // name string in 7-bit ascii, but
 193+ 78DA             >                org     $-1                 // alter last byte of Name just above to set
 193+ 78D9 CD          >                db      {b $} | END_BIT     // msb as name end
 193+ 78DA             >
 193+ 78DA B9 78       >                dw      last_NFA            // Link to previous definition Name
 193+ 78DC             >WARM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 193+ 78DC CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 193+ 78DE             >                else
 193+ 78DE ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 193+ 78DE             >                endif           ; ok        // for other definitions it "points" the correct handler
 193+ 78DE             >                // Use of "; ok" to suppress "warning[fwdref]"
 193+ 78DE             >
 193+ 78DE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 194+ 78DE AD 7C                        dw      BLK_INIT                // blk-init
 195+ 78E0 A7 82                        dw      SPLASH                  // splash
 196+ 78E2 45 64 07 00                  dw      LIT, 7, EMIT            // 7 emit
 196+ 78E6 0D 70
 197+ 78E8 C1 78                        dw      ABORT                   // abort
 198+ 78EA 95 69                        dw      EXIT                    // exit
 199+ 78EC
 200+ 78EC              //  ______________________________________________________________________
 201+ 78EC              //
 202+ 78EC              // cold         --
 203+ 78EC                              Colon_Def COLD, "COLD", is_normal
 203+ 78EC             >                New_Def  COLD, "COLD", Enter_Ptr, is_normal ; ok
 203+ 78EC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 203+ 78EC             >
 203+ 78EC             >                // dummy db directives used to calculate length of namec
 203+ 78EC 43 4F 4C 44 >                db      "COLD"
 203+ 78F0             >len_NFA         defl    $ - temp_NFA
 203+ 78F0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 203+ 78EC             >
 203+ 78EC 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 203+ 78ED 43 4F 4C 44 >                db      "COLD"               // name string in 7-bit ascii, but
 203+ 78F1             >                org     $-1                 // alter last byte of Name just above to set
 203+ 78F0 C4          >                db      {b $} | END_BIT     // msb as name end
 203+ 78F1             >
 203+ 78F1 D5 78       >                dw      last_NFA            // Link to previous definition Name
 203+ 78F3             >COLD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 203+ 78F3 CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 203+ 78F5             >                else
 203+ 78F5 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 203+ 78F5             >                endif           ; ok        // for other definitions it "points" the correct handler
 203+ 78F5             >                // Use of "; ok" to suppress "warning[fwdref]"
 203+ 78F5             >
 203+ 78F5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 204+ 78F5 45 64 12 64                  dw      LIT, S0_origin          // [ hex $12 +origin ] Literal
 205+ 78F9 45 64 2E 64                  dw      LIT, USER_Pointer       // [ hex $3E +origin ] literal
 206+ 78FD DA 6B                        dw      FETCH                   // @
 207+ 78FF 45 64 06 00                  dw      LIT, 6, PLUS            // 6 +
 207+ 7903 27 6A
 208+ 7905 45 64 14 00                  dw      LIT, 20                 // 20
 209+ 7909 8B 68                        dw      CMOVE
 210+ 790B 45 64 0C 64                  dw      LIT, Latest_origin      // [ hex 0C +origin ] literal
 211+ 790F DA 6B                        dw      FETCH                   // @
 212+ 7911 45 64 53 78                  dw      LIT, Forth_Latest_Ptr   // [ ' forth >body 4 + ] Literal
 213+ 7915 E7 6B                        dw      STORE                   // !
 214+ 7917 46 6D 3C 6E                  dw      ZERO, NMODE, STORE      // 0 nmode !
 214+ 791B E7 6B
 215+ 791D 1D 6E DA 6B                  dw      FIRST, FETCH, DUP       // first @ dup
 215+ 7921 16 6B
 216+ 7923 D0 6E E7 6B                  dw      USE, STORE              // use !
 217+ 7927 DA 6E E7 6B                  dw      PREV, STORE             // prev !
 218+ 792B 45 64 04 00                  dw      LIT, 4, PLACE, STORE    // 4 place !
 218+ 792F ED 6E E7 6B
 219+ 7933              //              dw      LIT, 8
 220+ 7933              //              dw      LIT, FLAGS2, CSTORE     // 8 5C6A c!
 221+ 7933 56 6D 0E 6F                  dw      TWO, HP, STORE          // 2 hp !
 221+ 7937 E7 6B
 222+ 7939 DC 78        Warm_Start:     dw      WARM
 223+ 793B F3 78        Cold_Start:     dw      COLD
 224+ 793D 95 69                        dw      EXIT
 225+ 793F
 226+ 793F              //  ______________________________________________________________________
 227+ 793F              WarmRoutine:
 228+ 793F              ColdRoutine:
 229+ 793F DD 21 34 64                  ld      ix, Next_Ptr
 230+ 7943 D9                           exx
 231+ 7944 E5                           push    hl
 232+ 7945 D9                           exx
 233+ 7946
 234+ 7946 ED 73 08 64                  ld      (SP_Basic), sp
 235+ 794A ED 7B 12 64                  ld      sp, (S0_origin)
 236+ 794E              //              nop
 237+ 794E 2A 14 64                     ld      hl, (R0_origin)
 238+ 7951              //              nop
 239+ 7951                              ldrphl
 239+ 7951 22 30 64    >                ld      (RP_Pointer),hl
 240+ 7954 01 39 79                     ld      bc, Warm_Start
 241+ 7957 38 02                        jr      c, Warm_Skip
 242+ 7959 03                           inc     bc
 243+ 795A 03                           inc     bc
 244+ 795B              Warm_Skip:
 245+ 795B                              next
 245+ 795B DD E9       >                jp      (ix)
 246+ 795D
 247+ 795D              //  ______________________________________________________________________
 248+ 795D              //
 249+ 795D              // basic        --
 250+ 795D                              New_Def BASIC, "BASIC", is_code, is_normal
 250+ 795D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 250+ 795D             >
 250+ 795D             >                // dummy db directives used to calculate length of namec
 250+ 795D 42 41 53 49 >                db      "BASIC"
 250+ 7961 43          >
 250+ 7962             >len_NFA         defl    $ - temp_NFA
 250+ 7962             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 250+ 795D             >
 250+ 795D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 250+ 795E 42 41 53 49 >                db      "BASIC"               // name string in 7-bit ascii, but
 250+ 7962 43          >
 250+ 7963             >                org     $-1                 // alter last byte of Name just above to set
 250+ 7962 C3          >                db      {b $} | END_BIT     // msb as name end
 250+ 7963             >
 250+ 7963 EC 78       >                dw      last_NFA            // Link to previous definition Name
 250+ 7965             >BASIC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 250+ 7965 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 250+ 7965             >                else
 250+ 7965 67 79       >                dw      $ + 2   ; ok        // is pointed by CFA
 250+ 7967             >                endif           ; ok        // for other definitions it "points" the correct handler
 250+ 7967             >                // Use of "; ok" to suppress "warning[fwdref]"
 250+ 7967             >
 250+ 7967             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 251+ 7967 C1                           pop     bc
 252+ 7968 21 00 00                     ld      hl, 0
 253+ 796B 39                           add     hl, sp
 254+ 796C ED 7B 08 64                  ld      sp, (SP_Basic)
 255+ 7970              //              nop
 256+ 7970 22 08 64                     ld      (SP_Basic),hl
 257+ 7973 D9                           exx
 258+ 7974 E1                           pop     hl
 259+ 7975 D9                           exx
 260+ 7976 C9                           ret     // to Basic
 261+ 7977
 262+ 7977              //  ______________________________________________________________________
 263+ 7977              //
 264+ 7977              // +-           n1 n2 -- n3
 265+ 7977              // leaves n1 with the sign of n2 as n3.
 266+ 7977                              Colon_Def PLUS_MINUS, "+-", is_normal
 266+ 7977             >                New_Def  PLUS_MINUS, "+-", Enter_Ptr, is_normal ; ok
 266+ 7977             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 266+ 7977             >
 266+ 7977             >                // dummy db directives used to calculate length of namec
 266+ 7977 2B 2D       >                db      "+-"
 266+ 7979             >len_NFA         defl    $ - temp_NFA
 266+ 7979             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 266+ 7977             >
 266+ 7977 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 266+ 7978 2B 2D       >                db      "+-"               // name string in 7-bit ascii, but
 266+ 797A             >                org     $-1                 // alter last byte of Name just above to set
 266+ 7979 AD          >                db      {b $} | END_BIT     // msb as name end
 266+ 797A             >
 266+ 797A 5D 79       >                dw      last_NFA            // Link to previous definition Name
 266+ 797C             >PLUS_MINUS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 266+ 797C CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 266+ 797E             >                else
 266+ 797E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 266+ 797E             >                endif           ; ok        // for other definitions it "points" the correct handler
 266+ 797E             >                // Use of "; ok" to suppress "warning[fwdref]"
 266+ 797E             >
 266+ 797E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 267+ 797E FF 69                        dw      ZLESS                   // 0<
 268+ 7980                                                              // if
 269+ 7980 7F 64                        dw      ZBRANCH
 270+ 7982 04 00                        dw      Plus_Minus_Endif - $
 271+ 7984 9E 6A                        dw          MINUS               //      minus
 272+ 7986              Plus_Minus_Endif:                               // endif
 273+ 7986 95 69                        dw      EXIT                    // ;
 274+ 7988
 275+ 7988              //  ______________________________________________________________________
 276+ 7988              //
 277+ 7988              // d+-          d1 n -- d2
 278+ 7988              // leaves d1 with the sign of n as d2.
 279+ 7988                              Colon_Def DPLUS_MINUS, "D+-", is_normal
 279+ 7988             >                New_Def  DPLUS_MINUS, "D+-", Enter_Ptr, is_normal ; ok
 279+ 7988             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 279+ 7988             >
 279+ 7988             >                // dummy db directives used to calculate length of namec
 279+ 7988 44 2B 2D    >                db      "D+-"
 279+ 798B             >len_NFA         defl    $ - temp_NFA
 279+ 798B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 279+ 7988             >
 279+ 7988 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 279+ 7989 44 2B 2D    >                db      "D+-"               // name string in 7-bit ascii, but
 279+ 798C             >                org     $-1                 // alter last byte of Name just above to set
 279+ 798B AD          >                db      {b $} | END_BIT     // msb as name end
 279+ 798C             >
 279+ 798C 77 79       >                dw      last_NFA            // Link to previous definition Name
 279+ 798E             >DPLUS_MINUS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 279+ 798E CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 279+ 7990             >                else
 279+ 7990 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 279+ 7990             >                endif           ; ok        // for other definitions it "points" the correct handler
 279+ 7990             >                // Use of "; ok" to suppress "warning[fwdref]"
 279+ 7990             >
 279+ 7990             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 280+ 7990 FF 69                        dw      ZLESS                   // 0<
 281+ 7992                                                              // if
 282+ 7992 7F 64                        dw      ZBRANCH
 283+ 7994 04 00                        dw      DPlus_Minus_Endif - $
 284+ 7996 B3 6A                        dw          DMINUS              //      dminus
 285+ 7998              DPlus_Minus_Endif:                              // endif
 286+ 7998 95 69                        dw      EXIT                    // ;
 287+ 799A
 288+ 799A              //  ______________________________________________________________________
 289+ 799A              //
 290+ 799A              // abs          n1 -- n2
 291+ 799A                              Colon_Def ABS_OP, "ABS", is_normal
 291+ 799A             >                New_Def  ABS_OP, "ABS", Enter_Ptr, is_normal ; ok
 291+ 799A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 291+ 799A             >
 291+ 799A             >                // dummy db directives used to calculate length of namec
 291+ 799A 41 42 53    >                db      "ABS"
 291+ 799D             >len_NFA         defl    $ - temp_NFA
 291+ 799D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 291+ 799A             >
 291+ 799A 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 291+ 799B 41 42 53    >                db      "ABS"               // name string in 7-bit ascii, but
 291+ 799E             >                org     $-1                 // alter last byte of Name just above to set
 291+ 799D D3          >                db      {b $} | END_BIT     // msb as name end
 291+ 799E             >
 291+ 799E 88 79       >                dw      last_NFA            // Link to previous definition Name
 291+ 79A0             >ABS_OP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 291+ 79A0 CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 291+ 79A2             >                else
 291+ 79A2 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 291+ 79A2             >                endif           ; ok        // for other definitions it "points" the correct handler
 291+ 79A2             >                // Use of "; ok" to suppress "warning[fwdref]"
 291+ 79A2             >
 291+ 79A2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 292+ 79A2 16 6B                        dw      DUP                     // dup
 293+ 79A4 7C 79                        dw      PLUS_MINUS              // +-
 294+ 79A6 95 69                        dw      EXIT                    // ;
 295+ 79A8
 296+ 79A8              //  ______________________________________________________________________
 297+ 79A8              //
 298+ 79A8              // dabs         d1 -- d2
 299+ 79A8                              Colon_Def DABS, "DABS", is_normal
 299+ 79A8             >                New_Def  DABS, "DABS", Enter_Ptr, is_normal ; ok
 299+ 79A8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 299+ 79A8             >
 299+ 79A8             >                // dummy db directives used to calculate length of namec
 299+ 79A8 44 41 42 53 >                db      "DABS"
 299+ 79AC             >len_NFA         defl    $ - temp_NFA
 299+ 79AC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 299+ 79A8             >
 299+ 79A8 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 299+ 79A9 44 41 42 53 >                db      "DABS"               // name string in 7-bit ascii, but
 299+ 79AD             >                org     $-1                 // alter last byte of Name just above to set
 299+ 79AC D3          >                db      {b $} | END_BIT     // msb as name end
 299+ 79AD             >
 299+ 79AD 9A 79       >                dw      last_NFA            // Link to previous definition Name
 299+ 79AF             >DABS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 299+ 79AF CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 299+ 79B1             >                else
 299+ 79B1 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 299+ 79B1             >                endif           ; ok        // for other definitions it "points" the correct handler
 299+ 79B1             >                // Use of "; ok" to suppress "warning[fwdref]"
 299+ 79B1             >
 299+ 79B1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 300+ 79B1 16 6B                        dw      DUP                     // dup
 301+ 79B3 8E 79                        dw      DPLUS_MINUS             // d+-
 302+ 79B5 95 69                        dw      EXIT                    // ;
 303+ 79B7
 304+ 79B7              //  ______________________________________________________________________
 305+ 79B7              //
 306+ 79B7              // m*           n1 n2 -- d
 307+ 79B7              // multiply two integer giving a double
 308+ 79B7                              Colon_Def MMUL, "M*", is_normal
 308+ 79B7             >                New_Def  MMUL, "M*", Enter_Ptr, is_normal ; ok
 308+ 79B7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 308+ 79B7             >
 308+ 79B7             >                // dummy db directives used to calculate length of namec
 308+ 79B7 4D 2A       >                db      "M*"
 308+ 79B9             >len_NFA         defl    $ - temp_NFA
 308+ 79B9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 308+ 79B7             >
 308+ 79B7 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 308+ 79B8 4D 2A       >                db      "M*"               // name string in 7-bit ascii, but
 308+ 79BA             >                org     $-1                 // alter last byte of Name just above to set
 308+ 79B9 AA          >                db      {b $} | END_BIT     // msb as name end
 308+ 79BA             >
 308+ 79BA A8 79       >                dw      last_NFA            // Link to previous definition Name
 308+ 79BC             >MMUL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 308+ 79BC CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 308+ 79BE             >                else
 308+ 79BE ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 308+ 79BE             >                endif           ; ok        // for other definitions it "points" the correct handler
 308+ 79BE             >                // Use of "; ok" to suppress "warning[fwdref]"
 308+ 79BE             >
 308+ 79BE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 309+ 79BE 80 6B 4C 69                  dw      TWO_DUP, XOR_OP, TO_R   // 2dup xor >r
 309+ 79C2 BE 69
 310+ 79C4 A0 79 09 6B                  dw      ABS_OP, SWAP            // abs swap
 311+ 79C8 A0 79 C0 68                  dw      ABS_OP, UM_MUL          // abs um*
 312+ 79CC D2 69 8E 79                  dw      R_TO, DPLUS_MINUS       // r> d+-
 313+ 79D0 95 69                        dw      EXIT                    // ;
 314+ 79D2
 315+ 79D2              //  ______________________________________________________________________
 316+ 79D2              //
 317+ 79D2              // m/         d n -- q r
 318+ 79D2              // multiply two integer giving a double
 319+ 79D2                              Colon_Def MDIV, "M/", is_normal
 319+ 79D2             >                New_Def  MDIV, "M/", Enter_Ptr, is_normal ; ok
 319+ 79D2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 319+ 79D2             >
 319+ 79D2             >                // dummy db directives used to calculate length of namec
 319+ 79D2 4D 2F       >                db      "M/"
 319+ 79D4             >len_NFA         defl    $ - temp_NFA
 319+ 79D4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 319+ 79D2             >
 319+ 79D2 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 319+ 79D3 4D 2F       >                db      "M/"               // name string in 7-bit ascii, but
 319+ 79D5             >                org     $-1                 // alter last byte of Name just above to set
 319+ 79D4 AF          >                db      {b $} | END_BIT     // msb as name end
 319+ 79D5             >
 319+ 79D5 B7 79       >                dw      last_NFA            // Link to previous definition Name
 319+ 79D7             >MDIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 319+ 79D7 CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 319+ 79D9             >                else
 319+ 79D9 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 319+ 79D9             >                endif           ; ok        // for other definitions it "points" the correct handler
 319+ 79D9             >                // Use of "; ok" to suppress "warning[fwdref]"
 319+ 79D9             >
 319+ 79D9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 320+ 79D9 D1 6A BE 69                  dw      OVER, TO_R, TO_R        // over >r >r
 320+ 79DD BE 69
 321+ 79DF AF 79 E5 69                  dw      DABS, R_OP, ABS_OP      // dabs r abs
 321+ 79E3 A0 79
 322+ 79E5 E9 68                        dw      UMDIVMOD                // um/mod
 323+ 79E7 D2 69                        dw      R_TO                    // r>
 324+ 79E9 E5 69 4C 69                  dw      R_OP, XOR_OP            // r xor
 325+ 79ED 7C 79 09 6B                  dw      PLUS_MINUS, SWAP        // +- swap
 326+ 79F1 D2 69                        dw      R_TO                    // r>
 327+ 79F3 7C 79 09 6B                  dw      PLUS_MINUS, SWAP        // +- swap
 328+ 79F7 95 69                        dw      EXIT                    // ;
 329+ 79F9
 330+ 79F9              //  ______________________________________________________________________
 331+ 79F9              //
 332+ 79F9              // *            n1 n2 -- n3
 333+ 79F9              // multiply two integer
 334+ 79F9                              Colon_Def MUL, "*", is_normal
 334+ 79F9             >                New_Def  MUL, "*", Enter_Ptr, is_normal ; ok
 334+ 79F9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 334+ 79F9             >
 334+ 79F9             >                // dummy db directives used to calculate length of namec
 334+ 79F9 2A          >                db      "*"
 334+ 79FA             >len_NFA         defl    $ - temp_NFA
 334+ 79FA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 334+ 79F9             >
 334+ 79F9 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 334+ 79FA 2A          >                db      "*"               // name string in 7-bit ascii, but
 334+ 79FB             >                org     $-1                 // alter last byte of Name just above to set
 334+ 79FA AA          >                db      {b $} | END_BIT     // msb as name end
 334+ 79FB             >
 334+ 79FB D2 79       >                dw      last_NFA            // Link to previous definition Name
 334+ 79FD             >MUL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 334+ 79FD CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 334+ 79FF             >                else
 334+ 79FF ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 334+ 79FF             >                endif           ; ok        // for other definitions it "points" the correct handler
 334+ 79FF             >                // Use of "; ok" to suppress "warning[fwdref]"
 334+ 79FF             >
 334+ 79FF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 335+ 79FF BC 79 E1 6A                  dw      MMUL, DROP              // m* drop
 336+ 7A03 95 69                        dw      EXIT                    // ;
 337+ 7A05
 338+ 7A05              //  ______________________________________________________________________
 339+ 7A05              //
 340+ 7A05              // /mod         n1 n2 -- n3 n4
 341+ 7A05              // leaves quotient n4 and remainder n3 of the integer division n1 / n2.
 342+ 7A05              // The remainder has the sign of n1
 343+ 7A05                              Colon_Def DIVMOD, "/MOD", is_normal
 343+ 7A05             >                New_Def  DIVMOD, "/MOD", Enter_Ptr, is_normal ; ok
 343+ 7A05             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 343+ 7A05             >
 343+ 7A05             >                // dummy db directives used to calculate length of namec
 343+ 7A05 2F 4D 4F 44 >                db      "/MOD"
 343+ 7A09             >len_NFA         defl    $ - temp_NFA
 343+ 7A09             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 343+ 7A05             >
 343+ 7A05 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 343+ 7A06 2F 4D 4F 44 >                db      "/MOD"               // name string in 7-bit ascii, but
 343+ 7A0A             >                org     $-1                 // alter last byte of Name just above to set
 343+ 7A09 C4          >                db      {b $} | END_BIT     // msb as name end
 343+ 7A0A             >
 343+ 7A0A F9 79       >                dw      last_NFA            // Link to previous definition Name
 343+ 7A0C             >DIVMOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 343+ 7A0C CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 343+ 7A0E             >                else
 343+ 7A0E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 343+ 7A0E             >                endif           ; ok        // for other definitions it "points" the correct handler
 343+ 7A0E             >                // Use of "; ok" to suppress "warning[fwdref]"
 343+ 7A0E             >
 343+ 7A0E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 344+ 7A0E BE 69 58 6F                  dw      TO_R, S_TO_D, R_TO      // >r s->d r>
 344+ 7A12 D2 69
 345+ 7A14 D7 79                        dw      MDIV                    // m/
 346+ 7A16 95 69                        dw      EXIT                    // ;
 347+ 7A18
 348+ 7A18              //  ______________________________________________________________________
 349+ 7A18              //
 350+ 7A18              // /            n1 n2 -- n3
 351+ 7A18              // division
 352+ 7A18                              Colon_Def DIV, "/", is_normal
 352+ 7A18             >                New_Def  DIV, "/", Enter_Ptr, is_normal ; ok
 352+ 7A18             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 352+ 7A18             >
 352+ 7A18             >                // dummy db directives used to calculate length of namec
 352+ 7A18 2F          >                db      "/"
 352+ 7A19             >len_NFA         defl    $ - temp_NFA
 352+ 7A19             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 352+ 7A18             >
 352+ 7A18 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 352+ 7A19 2F          >                db      "/"               // name string in 7-bit ascii, but
 352+ 7A1A             >                org     $-1                 // alter last byte of Name just above to set
 352+ 7A19 AF          >                db      {b $} | END_BIT     // msb as name end
 352+ 7A1A             >
 352+ 7A1A 05 7A       >                dw      last_NFA            // Link to previous definition Name
 352+ 7A1C             >DIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 352+ 7A1C CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 352+ 7A1E             >                else
 352+ 7A1E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 352+ 7A1E             >                endif           ; ok        // for other definitions it "points" the correct handler
 352+ 7A1E             >                // Use of "; ok" to suppress "warning[fwdref]"
 352+ 7A1E             >
 352+ 7A1E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 353+ 7A1E 0C 7A 09 6B                  dw      DIVMOD, SWAP, DROP      // /mod swap drop
 353+ 7A22 E1 6A
 354+ 7A24 95 69                        dw      EXIT                    // ;
 355+ 7A26
 356+ 7A26              //  ______________________________________________________________________
 357+ 7A26              //
 358+ 7A26              // mod          n1 n2 -- n3
 359+ 7A26                              Colon_Def MOD, "MOD", is_normal
 359+ 7A26             >                New_Def  MOD, "MOD", Enter_Ptr, is_normal ; ok
 359+ 7A26             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 359+ 7A26             >
 359+ 7A26             >                // dummy db directives used to calculate length of namec
 359+ 7A26 4D 4F 44    >                db      "MOD"
 359+ 7A29             >len_NFA         defl    $ - temp_NFA
 359+ 7A29             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 359+ 7A26             >
 359+ 7A26 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 359+ 7A27 4D 4F 44    >                db      "MOD"               // name string in 7-bit ascii, but
 359+ 7A2A             >                org     $-1                 // alter last byte of Name just above to set
 359+ 7A29 C4          >                db      {b $} | END_BIT     // msb as name end
 359+ 7A2A             >
 359+ 7A2A 18 7A       >                dw      last_NFA            // Link to previous definition Name
 359+ 7A2C             >MOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 359+ 7A2C CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 359+ 7A2E             >                else
 359+ 7A2E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 359+ 7A2E             >                endif           ; ok        // for other definitions it "points" the correct handler
 359+ 7A2E             >                // Use of "; ok" to suppress "warning[fwdref]"
 359+ 7A2E             >
 359+ 7A2E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 360+ 7A2E 0C 7A E1 6A                  dw      DIVMOD, DROP            // /mod drop
 361+ 7A32 95 69                        dw      EXIT                    // ;
 362+ 7A34
 363+ 7A34              //  ______________________________________________________________________
 364+ 7A34              //
 365+ 7A34              // */mod        n1 n2 n3 -- n4 n5
 366+ 7A34              // leaves the quotient n5 and the remainder n4 of the operation
 367+ 7A34              // (n1 * n2) / n3. The intermediate passage through a double number
 368+ 7A34              // avoids loss of precision
 369+ 7A34                              Colon_Def MUL_DIV_MOD, "*/MOD", is_normal
 369+ 7A34             >                New_Def  MUL_DIV_MOD, "*/MOD", Enter_Ptr, is_normal ; ok
 369+ 7A34             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 369+ 7A34             >
 369+ 7A34             >                // dummy db directives used to calculate length of namec
 369+ 7A34 2A 2F 4D 4F >                db      "*/MOD"
 369+ 7A38 44          >
 369+ 7A39             >len_NFA         defl    $ - temp_NFA
 369+ 7A39             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 369+ 7A34             >
 369+ 7A34 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 369+ 7A35 2A 2F 4D 4F >                db      "*/MOD"               // name string in 7-bit ascii, but
 369+ 7A39 44          >
 369+ 7A3A             >                org     $-1                 // alter last byte of Name just above to set
 369+ 7A39 C4          >                db      {b $} | END_BIT     // msb as name end
 369+ 7A3A             >
 369+ 7A3A 26 7A       >                dw      last_NFA            // Link to previous definition Name
 369+ 7A3C             >MUL_DIV_MOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 369+ 7A3C CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 369+ 7A3E             >                else
 369+ 7A3E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 369+ 7A3E             >                endif           ; ok        // for other definitions it "points" the correct handler
 369+ 7A3E             >                // Use of "; ok" to suppress "warning[fwdref]"
 369+ 7A3E             >
 369+ 7A3E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 370+ 7A3E BE 69 BC 79                  dw      TO_R, MMUL              // >r  m*
 371+ 7A42 D2 69 D7 79                  dw      R_TO, MDIV              // r>  m/
 372+ 7A46 95 69                        dw      EXIT                    // ;
 373+ 7A48
 374+ 7A48              //  ______________________________________________________________________
 375+ 7A48              //
 376+ 7A48              // */          n1 n2 n3 -- n4
 377+ 7A48              // (n1 * n2) / n3. The intermediate passage through a double number avoids loss of precision
 378+ 7A48                              Colon_Def MUL_DIV, "*/", is_normal
 378+ 7A48             >                New_Def  MUL_DIV, "*/", Enter_Ptr, is_normal ; ok
 378+ 7A48             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 378+ 7A48             >
 378+ 7A48             >                // dummy db directives used to calculate length of namec
 378+ 7A48 2A 2F       >                db      "*/"
 378+ 7A4A             >len_NFA         defl    $ - temp_NFA
 378+ 7A4A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 378+ 7A48             >
 378+ 7A48 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 378+ 7A49 2A 2F       >                db      "*/"               // name string in 7-bit ascii, but
 378+ 7A4B             >                org     $-1                 // alter last byte of Name just above to set
 378+ 7A4A AF          >                db      {b $} | END_BIT     // msb as name end
 378+ 7A4B             >
 378+ 7A4B 34 7A       >                dw      last_NFA            // Link to previous definition Name
 378+ 7A4D             >MUL_DIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 378+ 7A4D CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 378+ 7A4F             >                else
 378+ 7A4F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 378+ 7A4F             >                endif           ; ok        // for other definitions it "points" the correct handler
 378+ 7A4F             >                // Use of "; ok" to suppress "warning[fwdref]"
 378+ 7A4F             >
 378+ 7A4F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 379+ 7A4F 3C 7A                        dw     MUL_DIV_MOD              // */mod
 380+ 7A51 09 6B E1 6A                  dw     SWAP, DROP               // swap drop
 381+ 7A55 95 69                        dw      EXIT                    // ;
 382+ 7A57
 383+ 7A57
 384+ 7A57              //  ______________________________________________________________________
 385+ 7A57              //
 386+ 7A57              // m/mod        ud1 u2 -- u3 ud4
 387+ 7A57              // mixed operation: it leaves the remainder u3 and the quotient ud4 of ud1 / u1.
 388+ 7A57              // All terms are unsigned.
 389+ 7A57                              Colon_Def MDIV_MOD, "M/MOD", is_normal
 389+ 7A57             >                New_Def  MDIV_MOD, "M/MOD", Enter_Ptr, is_normal ; ok
 389+ 7A57             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 389+ 7A57             >
 389+ 7A57             >                // dummy db directives used to calculate length of namec
 389+ 7A57 4D 2F 4D 4F >                db      "M/MOD"
 389+ 7A5B 44          >
 389+ 7A5C             >len_NFA         defl    $ - temp_NFA
 389+ 7A5C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 389+ 7A57             >
 389+ 7A57 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 389+ 7A58 4D 2F 4D 4F >                db      "M/MOD"               // name string in 7-bit ascii, but
 389+ 7A5C 44          >
 389+ 7A5D             >                org     $-1                 // alter last byte of Name just above to set
 389+ 7A5C C4          >                db      {b $} | END_BIT     // msb as name end
 389+ 7A5D             >
 389+ 7A5D 48 7A       >                dw      last_NFA            // Link to previous definition Name
 389+ 7A5F             >MDIV_MOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 389+ 7A5F CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 389+ 7A61             >                else
 389+ 7A61 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 389+ 7A61             >                endif           ; ok        // for other definitions it "points" the correct handler
 389+ 7A61             >                // Use of "; ok" to suppress "warning[fwdref]"
 389+ 7A61             >
 389+ 7A61             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 390+ 7A61 BE 69                        dw      TO_R                    // >r           ( ud1 )
 391+ 7A63 46 6D E5 69                  dw      ZERO, R_OP, UMDIVMOD    // 0 r um/mod   ( l rem1 h/r )
 391+ 7A67 E9 68
 392+ 7A69 D2 69 09 6B                  dw      R_TO, SWAP, TO_R        // r> swap >r   ( l rem )
 392+ 7A6D BE 69
 393+ 7A6F E9 68                        dw      UMDIVMOD                // um/mod       ( rem2 l/r )
 394+ 7A71 D2 69                        dw      R_TO                    // r>           ( rem2 l/r h/r )
 395+ 7A73 95 69                        dw      EXIT                    // ;
 396+ 7A75
 397+ 7A75              //  ______________________________________________________________________
 398+ 7A75              //
 399+ 7A75              // (line)       n1 n2 -- a b
 400+ 7A75              // sends the line n1 of block n2 to the disk buffer.
 401+ 7A75              // it returns the address a and ca counter b = C/L meaning a whole line.
 402+ 7A75                              Colon_Def CLINE, "(LINE)", is_normal
 402+ 7A75             >                New_Def  CLINE, "(LINE)", Enter_Ptr, is_normal ; ok
 402+ 7A75             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 402+ 7A75             >
 402+ 7A75             >                // dummy db directives used to calculate length of namec
 402+ 7A75 28 4C 49 4E >                db      "(LINE)"
 402+ 7A79 45 29       >
 402+ 7A7B             >len_NFA         defl    $ - temp_NFA
 402+ 7A7B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 402+ 7A75             >
 402+ 7A75 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 402+ 7A76 28 4C 49 4E >                db      "(LINE)"               // name string in 7-bit ascii, but
 402+ 7A7A 45 29       >
 402+ 7A7C             >                org     $-1                 // alter last byte of Name just above to set
 402+ 7A7B A9          >                db      {b $} | END_BIT     // msb as name end
 402+ 7A7C             >
 402+ 7A7C 57 7A       >                dw      last_NFA            // Link to previous definition Name
 402+ 7A7E             >CLINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 402+ 7A7E CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 402+ 7A80             >                else
 402+ 7A80 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 402+ 7A80             >                endif           ; ok        // for other definitions it "points" the correct handler
 402+ 7A80             >                // Use of "; ok" to suppress "warning[fwdref]"
 402+ 7A80             >
 402+ 7A80             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 403+ 7A80 BE 69                        dw      TO_R                    // >r
 404+ 7A82 F3 6C                        dw      NOOP                    // noop
 405+ 7A84 7A 6D                        dw      CL                      // c/l
 406+ 7A86 86 6D 3C 7A                  dw      BBUF, MUL_DIV_MOD       // */mod
 407+ 7A8A D2 69                        dw      R_TO                    // r>
 408+ 7A8C 92 6D FD 79                  dw      BSCR, MUL, PLUS         // b/scr * +
 408+ 7A90 27 6A
 409+ 7A92 C5 7D                        dw      BLOCK                   // block   ( forward )
 410+ 7A94 27 6A                        dw      PLUS                    // +
 411+ 7A96 F3 6C                        dw      NOOP                    // noop
 412+ 7A98 7A 6D                        dw      CL                      // c/l
 413+ 7A9A 95 69                        dw      EXIT                    // ;
 414+ 7A9C
 415+ 7A9C              //  ______________________________________________________________________
 416+ 7A9C              //
 417+ 7A9C              // .line        n1 n2 --
 418+ 7A9C              // Sends to output line  n1  of screen n2.
 419+ 7A9C                              Colon_Def DOT_LINE, ".LINE", is_normal
 419+ 7A9C             >                New_Def  DOT_LINE, ".LINE", Enter_Ptr, is_normal ; ok
 419+ 7A9C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 419+ 7A9C             >
 419+ 7A9C             >                // dummy db directives used to calculate length of namec
 419+ 7A9C 2E 4C 49 4E >                db      ".LINE"
 419+ 7AA0 45          >
 419+ 7AA1             >len_NFA         defl    $ - temp_NFA
 419+ 7AA1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 419+ 7A9C             >
 419+ 7A9C 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 419+ 7A9D 2E 4C 49 4E >                db      ".LINE"               // name string in 7-bit ascii, but
 419+ 7AA1 45          >
 419+ 7AA2             >                org     $-1                 // alter last byte of Name just above to set
 419+ 7AA1 C5          >                db      {b $} | END_BIT     // msb as name end
 419+ 7AA2             >
 419+ 7AA2 75 7A       >                dw      last_NFA            // Link to previous definition Name
 419+ 7AA4             >DOT_LINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 419+ 7AA4 CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 419+ 7AA6             >                else
 419+ 7AA6 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 419+ 7AA6             >                endif           ; ok        // for other definitions it "points" the correct handler
 419+ 7AA6             >                // Use of "; ok" to suppress "warning[fwdref]"
 419+ 7AA6             >
 419+ 7AA6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 420+ 7AA6 7E 7A BB 72                  dw      CLINE, LTRAILING, TYPE  // (line) -trailing type
 420+ 7AAA 97 72
 421+ 7AAC 95 69                        dw      EXIT                    // ;
 422+ 7AAE
 423+ 7AAE              //  ______________________________________________________________________
 424+ 7AAE              //
 425+ 7AAE              // message       n1 n2 --
 426+ 7AAE              // prints error message to current channel.
 427+ 7AAE              // if WARNING is 0, prints "MSG#n".
 428+ 7AAE              // if WARNING is 1, prints line n of screen 4.
 429+ 7AAE              // if WARNING is -1, see ERROR
 430+ 7AAE              // value can be negative or beyond block 4.
 431+ 7AAE                              Colon_Def MESSAGE, "MESSAGE", is_normal
 431+ 7AAE             >                New_Def  MESSAGE, "MESSAGE", Enter_Ptr, is_normal ; ok
 431+ 7AAE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 431+ 7AAE             >
 431+ 7AAE             >                // dummy db directives used to calculate length of namec
 431+ 7AAE 4D 45 53 53 >                db      "MESSAGE"
 431+ 7AB2 41 47 45    >
 431+ 7AB5             >len_NFA         defl    $ - temp_NFA
 431+ 7AB5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 431+ 7AAE             >
 431+ 7AAE 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 431+ 7AAF 4D 45 53 53 >                db      "MESSAGE"               // name string in 7-bit ascii, but
 431+ 7AB3 41 47 45    >
 431+ 7AB6             >                org     $-1                 // alter last byte of Name just above to set
 431+ 7AB5 C5          >                db      {b $} | END_BIT     // msb as name end
 431+ 7AB6             >
 431+ 7AB6 9C 7A       >                dw      last_NFA            // Link to previous definition Name
 431+ 7AB8             >MESSAGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 431+ 7AB8 CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 431+ 7ABA             >                else
 431+ 7ABA ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 431+ 7ABA             >                endif           ; ok        // for other definitions it "points" the correct handler
 431+ 7ABA             >                // Use of "; ok" to suppress "warning[fwdref]"
 431+ 7ABA             >
 431+ 7ABA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 432+ 7ABA F1 6D DA 6B                  dw      WARNING, FETCH          // warning @
 433+ 7ABE                                                              // if
 434+ 7ABE 7F 64                        dw      ZBRANCH
 435+ 7AC0 18 00                        dw      Message_Else - $
 436+ 7AC2 45 64 04 00                  dw          LIT, 4              //      4
 437+ 7AC6 6C 6E DA 6B                  dw          OFFSET, FETCH       //      offset @
 438+ 7ACA 92 6D 1C 7A                  dw          BSCR, DIV, SUBTRACT //      b/scr / -
 438+ 7ACE 6C 6F
 439+ 7AD0 A4 7A                        dw          DOT_LINE            //      .line
 440+ 7AD2 29 70                        dw          SPACE               //      space
 441+ 7AD4                                                              // else
 442+ 7AD4
 443+ 7AD4 68 64                        dw      BRANCH
 444+ 7AD6 0B 00                        dw      Message_ENdif - $
 445+ 7AD8              Message_Else:
 446+ 7AD8 69 74                        dw          C_DOT_QUOTE         //      .( msg#)
 447+ 7ADA 04 6D 73 67                  db          4, "msg#"
 447+ 7ADE 23
 448+ 7ADF A6 81                        dw          DOT                 //      .  ( forward )
 449+ 7AE1              Message_ENdif:                                  // endif
 450+ 7AE1 95 69                        dw      EXIT                    // ;
 451+ 7AE3
 452+ 7AE3
 453+ 7AE3              //  ______________________________________________________________________
 454+ 7AE3              //
 455+ 7AE3              // device
 456+ 7AE3                              Variable_Def DEVICE,   "DEVICE",   2
 456+ 7AE3             >                New_Def  DEVICE, "DEVICE", Variable_Ptr, is_normal
 456+ 7AE3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 456+ 7AE3             >
 456+ 7AE3             >                // dummy db directives used to calculate length of namec
 456+ 7AE3 44 45 56 49 >                db      "DEVICE"
 456+ 7AE7 43 45       >
 456+ 7AE9             >len_NFA         defl    $ - temp_NFA
 456+ 7AE9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 456+ 7AE3             >
 456+ 7AE3 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 456+ 7AE4 44 45 56 49 >                db      "DEVICE"               // name string in 7-bit ascii, but
 456+ 7AE8 43 45       >
 456+ 7AEA             >                org     $-1                 // alter last byte of Name just above to set
 456+ 7AE9 C5          >                db      {b $} | END_BIT     // msb as name end
 456+ 7AEA             >
 456+ 7AEA AE 7A       >                dw      last_NFA            // Link to previous definition Name
 456+ 7AEC             >DEVICE:          if Variable_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 456+ 7AEC 23 6D       >                dw      Variable_Ptr ; ok        // for primitive definitions  actual code
 456+ 7AEE             >                else
 456+ 7AEE ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 456+ 7AEE             >                endif           ; ok        // for other definitions it "points" the correct handler
 456+ 7AEE             >                // Use of "; ok" to suppress "warning[fwdref]"
 456+ 7AEE             >
 456+ 7AEE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 456+ 7AEE 02 00       >                dw      2
 457+ 7AF0
 458+ 7AF0              //  ______________________________________________________________________
 459+ 7AF0              //
 460+ 7AF0              // inkey        -- c | 0
 461+ 7AF0              // call ROM inkey$ routine, returns c or "zero".
 462+ 7AF0
 463+ 7AF0                              New_Def INKEY, "INKEY", is_code, is_normal
 463+ 7AF0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 463+ 7AF0             >
 463+ 7AF0             >                // dummy db directives used to calculate length of namec
 463+ 7AF0 49 4E 4B 45 >                db      "INKEY"
 463+ 7AF4 59          >
 463+ 7AF5             >len_NFA         defl    $ - temp_NFA
 463+ 7AF5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 463+ 7AF0             >
 463+ 7AF0 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 463+ 7AF1 49 4E 4B 45 >                db      "INKEY"               // name string in 7-bit ascii, but
 463+ 7AF5 59          >
 463+ 7AF6             >                org     $-1                 // alter last byte of Name just above to set
 463+ 7AF5 D9          >                db      {b $} | END_BIT     // msb as name end
 463+ 7AF6             >
 463+ 7AF6 E3 7A       >                dw      last_NFA            // Link to previous definition Name
 463+ 7AF8             >INKEY:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 463+ 7AF8 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 463+ 7AF8             >                else
 463+ 7AF8 FA 7A       >                dw      $ + 2   ; ok        // is pointed by CFA
 463+ 7AFA             >                endif           ; ok        // for other definitions it "points" the correct handler
 463+ 7AFA             >                // Use of "; ok" to suppress "warning[fwdref]"
 463+ 7AFA             >
 463+ 7AFA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 464+ 7AFA
 465+ 7AFA C5                           push    bc
 466+ 7AFB ED 73 2C 64                  ld      (SP_Saved), sp
 467+ 7AFF 31 FE 63                     ld      sp, Cold_origin - 2
 468+ 7B02 DD E5                        push    ix
 469+ 7B04 CD E6 15                     call    $15E6                   // instead of 15E9
 470+ 7B07 DD E1                        pop     ix
 471+ 7B09 ED 7B 2C 64                  ld      sp, (SP_Saved)
 472+ 7B0D 6F                           ld      l, a
 473+ 7B0E 26 00                        ld      h, 0
 474+ 7B10 C1                           pop     bc
 475+ 7B11                              psh1
 475+ 7B11 E5          >                push    hl
 475+ 7B12 DD E9       >                jp      (ix)
 476+ 7B14
 477+ 7B14              //  ______________________________________________________________________
 478+ 7B14              //
 479+ 7B14              // select      n --
 480+ 7B14              // selects the given channel number
 481+ 7B14
 482+ 7B14                              New_Def SELECT, "SELECT", is_code, is_normal
 482+ 7B14             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 482+ 7B14             >
 482+ 7B14             >                // dummy db directives used to calculate length of namec
 482+ 7B14 53 45 4C 45 >                db      "SELECT"
 482+ 7B18 43 54       >
 482+ 7B1A             >len_NFA         defl    $ - temp_NFA
 482+ 7B1A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 482+ 7B14             >
 482+ 7B14 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 482+ 7B15 53 45 4C 45 >                db      "SELECT"               // name string in 7-bit ascii, but
 482+ 7B19 43 54       >
 482+ 7B1B             >                org     $-1                 // alter last byte of Name just above to set
 482+ 7B1A D4          >                db      {b $} | END_BIT     // msb as name end
 482+ 7B1B             >
 482+ 7B1B F0 7A       >                dw      last_NFA            // Link to previous definition Name
 482+ 7B1D             >SELECT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 482+ 7B1D ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 482+ 7B1D             >                else
 482+ 7B1D 1F 7B       >                dw      $ + 2   ; ok        // is pointed by CFA
 482+ 7B1F             >                endif           ; ok        // for other definitions it "points" the correct handler
 482+ 7B1F             >                // Use of "; ok" to suppress "warning[fwdref]"
 482+ 7B1F             >
 482+ 7B1F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 483+ 7B1F E1                           pop     hl
 484+ 7B20 C5                           push    bc
 485+ 7B21 7D                           ld      a, l
 486+ 7B22 ED 73 2C 64                  ld      (SP_Saved), sp
 487+ 7B26 31 FE 63                     ld      sp, Cold_origin - 2
 488+ 7B29 DD E5                        push    ix
 489+ 7B2B CD 01 16                     call    $1601
 490+ 7B2E DD E1                        pop     ix
 491+ 7B30 ED 7B 2C 64                  ld      sp, (SP_Saved)
 492+ 7B34 C1                           pop     bc
 493+ 7B35
 494+ 7B35                              next
 494+ 7B35 DD E9       >                jp      (ix)
 495+ 7B37
 496+ 7B37              //  ______________________________________________________________________
 497+ 7B37
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L2.asm
  91  7B37                              include "next-opt1.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/next-opt1.asm
   1+ 7B37              //  ______________________________________________________________________
   2+ 7B37              //
   3+ 7B37              //  next-opt.asm
   4+ 7B37              //
   5+ 7B37              //  ZX Spectrum Next - peculiar definitions
   6+ 7B37              //  ______________________________________________________________________
   7+ 7B37
   8+ 7B37              //  ______________________________________________________________________
   9+ 7B37              //
  10+ 7B37              // reg@         n -- b
  11+ 7B37              // read Next REGister n giving byte b
  12+ 7B37
  13+ 7B37                              Colon_Def REG_FETCH, "REG@", is_normal
  13+ 7B37             >                New_Def  REG_FETCH, "REG@", Enter_Ptr, is_normal ; ok
  13+ 7B37             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13+ 7B37             >
  13+ 7B37             >                // dummy db directives used to calculate length of namec
  13+ 7B37 52 45 47 40 >                db      "REG@"
  13+ 7B3B             >len_NFA         defl    $ - temp_NFA
  13+ 7B3B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13+ 7B37             >
  13+ 7B37 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  13+ 7B38 52 45 47 40 >                db      "REG@"               // name string in 7-bit ascii, but
  13+ 7B3C             >                org     $-1                 // alter last byte of Name just above to set
  13+ 7B3B C0          >                db      {b $} | END_BIT     // msb as name end
  13+ 7B3C             >
  13+ 7B3C 14 7B       >                dw      last_NFA            // Link to previous definition Name
  13+ 7B3E             >REG_FETCH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  13+ 7B3E CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  13+ 7B40             >                else
  13+ 7B40 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  13+ 7B40             >                endif           ; ok        // for other definitions it "points" the correct handler
  13+ 7B40             >                // Use of "; ok" to suppress "warning[fwdref]"
  13+ 7B40             >
  13+ 7B40             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14+ 7B40 45 64 3B 24                  dw      LIT, $243B
  15+ 7B44 4D 6C                        dw      PSTORE
  16+ 7B46 45 64 3B 25                  dw      LIT, $253B
  17+ 7B4A 3A 6C                        dw      PFETCH
  18+ 7B4C 95 69                        dw      EXIT
  19+ 7B4E
  20+ 7B4E              //  ______________________________________________________________________
  21+ 7B4E              //
  22+ 7B4E              // reg!         b n --
  23+ 7B4E              // write value b to Next REGister n
  24+ 7B4E
  25+ 7B4E                              Colon_Def REG_STORE, "REG!", is_normal
  25+ 7B4E             >                New_Def  REG_STORE, "REG!", Enter_Ptr, is_normal ; ok
  25+ 7B4E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  25+ 7B4E             >
  25+ 7B4E             >                // dummy db directives used to calculate length of namec
  25+ 7B4E 52 45 47 21 >                db      "REG!"
  25+ 7B52             >len_NFA         defl    $ - temp_NFA
  25+ 7B52             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  25+ 7B4E             >
  25+ 7B4E 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  25+ 7B4F 52 45 47 21 >                db      "REG!"               // name string in 7-bit ascii, but
  25+ 7B53             >                org     $-1                 // alter last byte of Name just above to set
  25+ 7B52 A1          >                db      {b $} | END_BIT     // msb as name end
  25+ 7B53             >
  25+ 7B53 37 7B       >                dw      last_NFA            // Link to previous definition Name
  25+ 7B55             >REG_STORE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  25+ 7B55 CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  25+ 7B57             >                else
  25+ 7B57 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  25+ 7B57             >                endif           ; ok        // for other definitions it "points" the correct handler
  25+ 7B57             >                // Use of "; ok" to suppress "warning[fwdref]"
  25+ 7B57             >
  25+ 7B57             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  26+ 7B57 45 64 3B 24                  dw      LIT, $243B
  27+ 7B5B 4D 6C                        dw      PSTORE
  28+ 7B5D 45 64 3B 25                  dw      LIT, $253B
  29+ 7B61 4D 6C                        dw      PSTORE
  30+ 7B63 95 69                        dw      EXIT
  31+ 7B65
  32+ 7B65              //  ______________________________________________________________________
  33+ 7B65              //
  34+ 7B65              // mmu7@        -- n
  35+ 7B65              // query current page in MMU7 8K-RAM : 0 and 223
  36+ 7B65
  37+ 7B65                              Colon_Def MMU7_FETCH, "MMU7@", is_normal
  37+ 7B65             >                New_Def  MMU7_FETCH, "MMU7@", Enter_Ptr, is_normal ; ok
  37+ 7B65             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  37+ 7B65             >
  37+ 7B65             >                // dummy db directives used to calculate length of namec
  37+ 7B65 4D 4D 55 37 >                db      "MMU7@"
  37+ 7B69 40          >
  37+ 7B6A             >len_NFA         defl    $ - temp_NFA
  37+ 7B6A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  37+ 7B65             >
  37+ 7B65 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  37+ 7B66 4D 4D 55 37 >                db      "MMU7@"               // name string in 7-bit ascii, but
  37+ 7B6A 40          >
  37+ 7B6B             >                org     $-1                 // alter last byte of Name just above to set
  37+ 7B6A C0          >                db      {b $} | END_BIT     // msb as name end
  37+ 7B6B             >
  37+ 7B6B 4E 7B       >                dw      last_NFA            // Link to previous definition Name
  37+ 7B6D             >MMU7_FETCH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  37+ 7B6D CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  37+ 7B6F             >                else
  37+ 7B6F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  37+ 7B6F             >                endif           ; ok        // for other definitions it "points" the correct handler
  37+ 7B6F             >                // Use of "; ok" to suppress "warning[fwdref]"
  37+ 7B6F             >
  37+ 7B6F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  38+ 7B6F 45 64 57 00                  dw      LIT, 87, REG_FETCH
  38+ 7B73 3E 7B
  39+ 7B75 95 69                        dw      EXIT
  40+ 7B77
  41+ 7B77              //  ______________________________________________________________________
  42+ 7B77              //
  43+ 7B77              // mmu7!        n --
  44+ 7B77              // set MMU7 8K-RAM page to n given between 0 and 223
  45+ 7B77              // optimized version that uses NEXTREG n,A Z80n op-code.
  46+ 7B77
  47+ 7B77                              New_Def MMU7_STORE, "MMU7!", is_code, is_normal
  47+ 7B77             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  47+ 7B77             >
  47+ 7B77             >                // dummy db directives used to calculate length of namec
  47+ 7B77 4D 4D 55 37 >                db      "MMU7!"
  47+ 7B7B 21          >
  47+ 7B7C             >len_NFA         defl    $ - temp_NFA
  47+ 7B7C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  47+ 7B77             >
  47+ 7B77 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  47+ 7B78 4D 4D 55 37 >                db      "MMU7!"               // name string in 7-bit ascii, but
  47+ 7B7C 21          >
  47+ 7B7D             >                org     $-1                 // alter last byte of Name just above to set
  47+ 7B7C A1          >                db      {b $} | END_BIT     // msb as name end
  47+ 7B7D             >
  47+ 7B7D 65 7B       >                dw      last_NFA            // Link to previous definition Name
  47+ 7B7F             >MMU7_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  47+ 7B7F ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  47+ 7B7F             >                else
  47+ 7B7F 81 7B       >                dw      $ + 2   ; ok        // is pointed by CFA
  47+ 7B81             >                endif           ; ok        // for other definitions it "points" the correct handler
  47+ 7B81             >                // Use of "; ok" to suppress "warning[fwdref]"
  47+ 7B81             >
  47+ 7B81             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  48+ 7B81 E1                           pop     hl
  49+ 7B82 7D                           ld      a, l
  50+ 7B83 ED 92 57                     nextreg 87, a
  51+ 7B86
  52+ 7B86                              next
  52+ 7B86 DD E9       >                jp      (ix)
  53+ 7B88
  54+ 7B88              //  ______________________________________________________________________
  55+ 7B88              //
  56+ 7B88              // >far         ha -- a n
  57+ 7B88              // decode bits 765 of H as one of the 8K-page between 64 and 71 (40h-47h)
  58+ 7B88              // take lower bits of H and L as an offset from E000h
  59+ 7B88              // then return address  a  between E000h-FFFFh
  60+ 7B88              // and page number n  between 64-71 (40h-47h)
  61+ 7B88              // For example, in hex:
  62+ 7B88              //   0000 >FAR  gives  40.E000
  63+ 7B88              //   1FFF >FAR  gives  40.FFFF
  64+ 7B88              //   2000 >FAR  gives  41.E000
  65+ 7B88              //   3FFF >FAR  gives  41.FFFF
  66+ 7B88              //   EFFF >FAR  gives  47.EFFF
  67+ 7B88              //   FFFF >FAR  gives  47.FFFF
  68+ 7B88                              New_Def TO_FAR, ">FAR", is_code, is_normal
  68+ 7B88             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  68+ 7B88             >
  68+ 7B88             >                // dummy db directives used to calculate length of namec
  68+ 7B88 3E 46 41 52 >                db      ">FAR"
  68+ 7B8C             >len_NFA         defl    $ - temp_NFA
  68+ 7B8C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  68+ 7B88             >
  68+ 7B88 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  68+ 7B89 3E 46 41 52 >                db      ">FAR"               // name string in 7-bit ascii, but
  68+ 7B8D             >                org     $-1                 // alter last byte of Name just above to set
  68+ 7B8C D2          >                db      {b $} | END_BIT     // msb as name end
  68+ 7B8D             >
  68+ 7B8D 77 7B       >                dw      last_NFA            // Link to previous definition Name
  68+ 7B8F             >TO_FAR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  68+ 7B8F ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  68+ 7B8F             >                else
  68+ 7B8F 91 7B       >                dw      $ + 2   ; ok        // is pointed by CFA
  68+ 7B91             >                endif           ; ok        // for other definitions it "points" the correct handler
  68+ 7B91             >                // Use of "; ok" to suppress "warning[fwdref]"
  68+ 7B91             >
  68+ 7B91             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  69+ 7B91 E1                           pop     hl
  70+ 7B92 7C                           ld      a, h
  71+ 7B93 E6 E0                        and     $E0
  72+ 7B95 07                           rlca
  73+ 7B96 07                           rlca
  74+ 7B97 07                           rlca
  75+ 7B98 F6 40                        or      $40
  76+ 7B9A 5F                           ld      e, a
  77+ 7B9B 16 00                        ld      d, 0
  78+ 7B9D 7C                           ld      a, h
  79+ 7B9E F6 E0                        or      $E0
  80+ 7BA0 67                           ld      h, a
  81+ 7BA1 EB                           ex      de, hl
  82+ 7BA2                              psh2
  82+ 7BA2 D5          >                push    de
  82+ 7BA3 E5          >                push    hl
  82+ 7BA4 DD E9       >                jp      (ix)
  83+ 7BA6
  84+ 7BA6              //  ______________________________________________________________________
  85+ 7BA6              //
  86+ 7BA6              // <far         a n  -- ha
  87+ 7BA6              // given an address E000-FFFF and a page number n (64-71 or 40h-47h)
  88+ 7BA6              // reverse of >FAR: encodes a FAR address compressing
  89+ 7BA6              // to bits 765 of H, lower bits of HL address offset from E000h
  90+ 7BA6                              New_Def FROM_FAR, "<FAR", is_code, is_normal
  90+ 7BA6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  90+ 7BA6             >
  90+ 7BA6             >                // dummy db directives used to calculate length of namec
  90+ 7BA6 3C 46 41 52 >                db      "<FAR"
  90+ 7BAA             >len_NFA         defl    $ - temp_NFA
  90+ 7BAA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  90+ 7BA6             >
  90+ 7BA6 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  90+ 7BA7 3C 46 41 52 >                db      "<FAR"               // name string in 7-bit ascii, but
  90+ 7BAB             >                org     $-1                 // alter last byte of Name just above to set
  90+ 7BAA D2          >                db      {b $} | END_BIT     // msb as name end
  90+ 7BAB             >
  90+ 7BAB 88 7B       >                dw      last_NFA            // Link to previous definition Name
  90+ 7BAD             >FROM_FAR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  90+ 7BAD ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  90+ 7BAD             >                else
  90+ 7BAD AF 7B       >                dw      $ + 2   ; ok        // is pointed by CFA
  90+ 7BAF             >                endif           ; ok        // for other definitions it "points" the correct handler
  90+ 7BAF             >                // Use of "; ok" to suppress "warning[fwdref]"
  90+ 7BAF             >
  90+ 7BAF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  91+ 7BAF D1                           pop     de                  // page number in e
  92+ 7BB0 E1                           pop     hl                  // address in hl
  93+ 7BB1 7B                           ld      a, e
  94+ 7BB2 E6 07                        and     $07                 // reduced to 0-7
  95+ 7BB4 0F                           rrca
  96+ 7BB5 0F                           rrca
  97+ 7BB6 0F                           rrca
  98+ 7BB7 57                           ld      d, a                // save to d bits 765
  99+ 7BB8 7C                           ld      a, h                // drops
 100+ 7BB9 E6 1F                        and     $1F
 101+ 7BBB B2                           or      d
 102+ 7BBC 67                           ld      h, a
 103+ 7BBD
 104+ 7BBD                              psh1
 104+ 7BBD E5          >                push    hl
 104+ 7BBE DD E9       >                jp      (ix)
 105+ 7BC0
 106+ 7BC0              //  ______________________________________________________________________
 107+ 7BC0              //
 108+ 7BC0              // m_p3dos      n1 n2 n3 n4 a -- n5 n6 n7 n8  f
 109+ 7BC0              // NextZXOS call wrapper.
 110+ 7BC0              //  n1 = hl register parameter value
 111+ 7BC0              //  n2 = de register parameter value
 112+ 7BC0              //  n3 = bc register parameter value
 113+ 7BC0              //  n4 =  a register parameter value
 114+ 7BC0              //   a = routine address in ROM 3
 115+ 7BC0              // ----
 116+ 7BC0              //  n5 = hl returned value
 117+ 7BC0              //  n6 = de returned value
 118+ 7BC0              //  n7 = bc returned value
 119+ 7BC0              //  n8 =  a returned value
 120+ 7BC0              //   f
 121+ 7BC0                              New_Def M_P3DOS, "M_P3DOS", is_code, is_normal
 121+ 7BC0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 121+ 7BC0             >
 121+ 7BC0             >                // dummy db directives used to calculate length of namec
 121+ 7BC0 4D 5F 50 33 >                db      "M_P3DOS"
 121+ 7BC4 44 4F 53    >
 121+ 7BC7             >len_NFA         defl    $ - temp_NFA
 121+ 7BC7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 121+ 7BC0             >
 121+ 7BC0 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 121+ 7BC1 4D 5F 50 33 >                db      "M_P3DOS"               // name string in 7-bit ascii, but
 121+ 7BC5 44 4F 53    >
 121+ 7BC8             >                org     $-1                 // alter last byte of Name just above to set
 121+ 7BC7 D3          >                db      {b $} | END_BIT     // msb as name end
 121+ 7BC8             >
 121+ 7BC8 A6 7B       >                dw      last_NFA            // Link to previous definition Name
 121+ 7BCA             >M_P3DOS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 121+ 7BCA ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 121+ 7BCA             >                else
 121+ 7BCA CC 7B       >                dw      $ + 2   ; ok        // is pointed by CFA
 121+ 7BCC             >                endif           ; ok        // for other definitions it "points" the correct handler
 121+ 7BCC             >                // Use of "; ok" to suppress "warning[fwdref]"
 121+ 7BCC             >
 121+ 7BCC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 122+ 7BCC D1                           pop     de                  // dos call entry address in de
 123+ 7BCD E1                           pop     hl                  // a register
 124+ 7BCE 7D                           ld      a, l
 125+ 7BCF D9                           exx
 126+ 7BD0 C1                           pop     bc
 127+ 7BD1 D1                           pop     de
 128+ 7BD2 E1                           pop     hl
 129+ 7BD3 D9                           exx
 130+ 7BD4
 131+ 7BD4 C5                           push    bc
 132+ 7BD5 DD E5                        push    ix
 133+ 7BD7
 134+ 7BD7 ED 73 2C 64                  ld      (SP_Saved), sp
 135+ 7BDB 31 FE 63                     ld      sp, Cold_origin - 2
 136+ 7BDE 0E 07                        ld      c, 7                // use 7 RAM Bank
 137+ 7BE0
 138+ 7BE0 CF                           rst     08
 139+ 7BE1 94                           db      $94
 140+ 7BE2
 141+ 7BE2 ED 7B 2C 64                  ld      sp, (SP_Saved)
 142+ 7BE6 DD E5                        push    ix
 143+ 7BE8 E1                           pop     hl
 144+ 7BE9 22 2A 64                     ld      (IX_Echo), hl
 145+ 7BEC              //              nop
 146+ 7BEC DD E1                        pop     ix
 147+ 7BEE E3                           ex      (sp), hl            // hl argument and retrieve bc
 148+ 7BEF D5                           push    de
 149+ 7BF0 C5                           push    bc
 150+ 7BF1 4D                           ld      c, l
 151+ 7BF2 44                           ld      b, h
 152+ 7BF3
 153+ 7BF3 26 00                        ld      h, 0
 154+ 7BF5 6F                           ld      l, a
 155+ 7BF6 E5                           push    hl
 156+ 7BF7 ED 62                        sbc     hl, hl              // -1 for OK ; 0 for KO but now...
 157+ 7BF9 23                           inc     hl                  //  0 for OK ; 1 for ko
 158+ 7BFA
 159+ 7BFA                              psh1
 159+ 7BFA E5          >                push    hl
 159+ 7BFB DD E9       >                jp      (ix)
 160+ 7BFD
 161+ 7BFD              //  ______________________________________________________________________
 162+ 7BFD              //
 163+ 7BFD              // blk-fh
 164+ 7BFD                              Variable_Def BLK_FH,   "BLK-FH",   1
 164+ 7BFD             >                New_Def  BLK_FH, "BLK-FH", Variable_Ptr, is_normal
 164+ 7BFD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 164+ 7BFD             >
 164+ 7BFD             >                // dummy db directives used to calculate length of namec
 164+ 7BFD 42 4C 4B 2D >                db      "BLK-FH"
 164+ 7C01 46 48       >
 164+ 7C03             >len_NFA         defl    $ - temp_NFA
 164+ 7C03             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 164+ 7BFD             >
 164+ 7BFD 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 164+ 7BFE 42 4C 4B 2D >                db      "BLK-FH"               // name string in 7-bit ascii, but
 164+ 7C02 46 48       >
 164+ 7C04             >                org     $-1                 // alter last byte of Name just above to set
 164+ 7C03 C8          >                db      {b $} | END_BIT     // msb as name end
 164+ 7C04             >
 164+ 7C04 C0 7B       >                dw      last_NFA            // Link to previous definition Name
 164+ 7C06             >BLK_FH:          if Variable_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 164+ 7C06 23 6D       >                dw      Variable_Ptr ; ok        // for primitive definitions  actual code
 164+ 7C08             >                else
 164+ 7C08 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 164+ 7C08             >                endif           ; ok        // for other definitions it "points" the correct handler
 164+ 7C08             >                // Use of "; ok" to suppress "warning[fwdref]"
 164+ 7C08             >
 164+ 7C08             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 164+ 7C08 01 00       >                dw      1
 165+ 7C0A
 166+ 7C0A                              New_Def BLK_FNAME,   "BLK-FNAME", Create_Ptr, is_normal
 166+ 7C0A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 166+ 7C0A             >
 166+ 7C0A             >                // dummy db directives used to calculate length of namec
 166+ 7C0A 42 4C 4B 2D >                db      "BLK-FNAME"
 166+ 7C0E 46 4E 41 4D >
 166+ 7C12 45          >
 166+ 7C13             >len_NFA         defl    $ - temp_NFA
 166+ 7C13             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 166+ 7C0A             >
 166+ 7C0A 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 166+ 7C0B 42 4C 4B 2D >                db      "BLK-FNAME"               // name string in 7-bit ascii, but
 166+ 7C0F 46 4E 41 4D >
 166+ 7C13 45          >
 166+ 7C14             >                org     $-1                 // alter last byte of Name just above to set
 166+ 7C13 C5          >                db      {b $} | END_BIT     // msb as name end
 166+ 7C14             >
 166+ 7C14 FD 7B       >                dw      last_NFA            // Link to previous definition Name
 166+ 7C16             >BLK_FNAME:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 166+ 7C16 CD 76       >                dw      Create_Ptr ; ok        // for primitive definitions  actual code
 166+ 7C18             >                else
 166+ 7C18 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 166+ 7C18             >                endif           ; ok        // for other definitions it "points" the correct handler
 166+ 7C18             >                // Use of "; ok" to suppress "warning[fwdref]"
 166+ 7C18             >
 166+ 7C18             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 167+ 7C18 0E 21 42 6C                  db      14, "!Blocks-64.bin", 0
 167+ 7C1C 6F 63 6B 73
 167+ 7C20 2D 36 34 2E
 167+ 7C24 62 69 6E 00
 168+ 7C28 00 00 00...                  ds      24
 169+ 7C40
 170+ 7C40              //  ______________________________________________________________________
 171+ 7C40              //
 172+ 7C40              // blk-seek     n --
 173+ 7C40              // seek block n  within blocks!.bin  file
 174+ 7C40                              Colon_Def BLK_SEEK, "BLK-SEEK", is_normal
 174+ 7C40             >                New_Def  BLK_SEEK, "BLK-SEEK", Enter_Ptr, is_normal ; ok
 174+ 7C40             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 174+ 7C40             >
 174+ 7C40             >                // dummy db directives used to calculate length of namec
 174+ 7C40 42 4C 4B 2D >                db      "BLK-SEEK"
 174+ 7C44 53 45 45 4B >
 174+ 7C48             >len_NFA         defl    $ - temp_NFA
 174+ 7C48             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 174+ 7C40             >
 174+ 7C40 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 174+ 7C41 42 4C 4B 2D >                db      "BLK-SEEK"               // name string in 7-bit ascii, but
 174+ 7C45 53 45 45 4B >
 174+ 7C49             >                org     $-1                 // alter last byte of Name just above to set
 174+ 7C48 CB          >                db      {b $} | END_BIT     // msb as name end
 174+ 7C49             >
 174+ 7C49 0A 7C       >                dw      last_NFA            // Link to previous definition Name
 174+ 7C4B             >BLK_SEEK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 174+ 7C4B CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 174+ 7C4D             >                else
 174+ 7C4D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 174+ 7C4D             >                endif           ; ok        // for other definitions it "points" the correct handler
 174+ 7C4D             >                // Use of "; ok" to suppress "warning[fwdref]"
 174+ 7C4D             >
 174+ 7C4D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 175+ 7C4D 86 6D BC 79                  dw  BBUF, MMUL
 176+ 7C51 06 7C DA 6B                  dw  BLK_FH, FETCH
 177+ 7C55 A8 67                        dw  F_SEEK
 178+ 7C57 45 64 2D 00                  dw  LIT, $2D, QERROR
 178+ 7C5B E5 70
 179+ 7C5D 95 69                        dw  EXIT
 180+ 7C5F
 181+ 7C5F              //  ______________________________________________________________________
 182+ 7C5F              //
 183+ 7C5F              // blk-read     n --
 184+ 7C5F              // seek block n  within blocks!.bin  file
 185+ 7C5F                              Colon_Def BLK_READ, "BLK-READ", is_normal
 185+ 7C5F             >                New_Def  BLK_READ, "BLK-READ", Enter_Ptr, is_normal ; ok
 185+ 7C5F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 185+ 7C5F             >
 185+ 7C5F             >                // dummy db directives used to calculate length of namec
 185+ 7C5F 42 4C 4B 2D >                db      "BLK-READ"
 185+ 7C63 52 45 41 44 >
 185+ 7C67             >len_NFA         defl    $ - temp_NFA
 185+ 7C67             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 185+ 7C5F             >
 185+ 7C5F 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 185+ 7C60 42 4C 4B 2D >                db      "BLK-READ"               // name string in 7-bit ascii, but
 185+ 7C64 52 45 41 44 >
 185+ 7C68             >                org     $-1                 // alter last byte of Name just above to set
 185+ 7C67 C4          >                db      {b $} | END_BIT     // msb as name end
 185+ 7C68             >
 185+ 7C68 40 7C       >                dw      last_NFA            // Link to previous definition Name
 185+ 7C6A             >BLK_READ:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 185+ 7C6A CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 185+ 7C6C             >                else
 185+ 7C6C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 185+ 7C6C             >                endif           ; ok        // for other definitions it "points" the correct handler
 185+ 7C6C             >                // Use of "; ok" to suppress "warning[fwdref]"
 185+ 7C6C             >
 185+ 7C6C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 186+ 7C6C 4B 7C                        dw  BLK_SEEK
 187+ 7C6E 86 6D                        dw  BBUF
 188+ 7C70 06 7C DA 6B                  dw  BLK_FH, FETCH
 189+ 7C74 0A 68                        dw  F_READ
 190+ 7C76 45 64 2E 00                  dw  LIT, $2E, QERROR
 190+ 7C7A E5 70
 191+ 7C7C E1 6A                        dw  DROP
 192+ 7C7E 95 69                        dw  EXIT
 193+ 7C80
 194+ 7C80              //  ______________________________________________________________________
 195+ 7C80              //
 196+ 7C80              // blk-write     n --
 197+ 7C80              // seek block n  within blocks!.bin  file
 198+ 7C80                              Colon_Def BLK_WRITE, "BLK-WRITE", is_normal
 198+ 7C80             >                New_Def  BLK_WRITE, "BLK-WRITE", Enter_Ptr, is_normal ; ok
 198+ 7C80             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 198+ 7C80             >
 198+ 7C80             >                // dummy db directives used to calculate length of namec
 198+ 7C80 42 4C 4B 2D >                db      "BLK-WRITE"
 198+ 7C84 57 52 49 54 >
 198+ 7C88 45          >
 198+ 7C89             >len_NFA         defl    $ - temp_NFA
 198+ 7C89             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 198+ 7C80             >
 198+ 7C80 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 198+ 7C81 42 4C 4B 2D >                db      "BLK-WRITE"               // name string in 7-bit ascii, but
 198+ 7C85 57 52 49 54 >
 198+ 7C89 45          >
 198+ 7C8A             >                org     $-1                 // alter last byte of Name just above to set
 198+ 7C89 C5          >                db      {b $} | END_BIT     // msb as name end
 198+ 7C8A             >
 198+ 7C8A 5F 7C       >                dw      last_NFA            // Link to previous definition Name
 198+ 7C8C             >BLK_WRITE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 198+ 7C8C CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 198+ 7C8E             >                else
 198+ 7C8E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 198+ 7C8E             >                endif           ; ok        // for other definitions it "points" the correct handler
 198+ 7C8E             >                // Use of "; ok" to suppress "warning[fwdref]"
 198+ 7C8E             >
 198+ 7C8E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 199+ 7C8E 4B 7C                        dw  BLK_SEEK
 200+ 7C90 86 6D                        dw  BBUF
 201+ 7C92 06 7C DA 6B                  dw  BLK_FH, FETCH
 202+ 7C96 EC 67                        dw  F_WRITE
 203+ 7C98 45 64 2F 00                  dw  LIT, $2F, QERROR
 203+ 7C9C E5 70
 204+ 7C9E E1 6A                        dw  DROP
 205+ 7CA0 95 69                        dw  EXIT
 206+ 7CA2
 207+ 7CA2              //  ______________________________________________________________________
 208+ 7CA2              //
 209+ 7CA2              // blk-init     n --
 210+ 7CA2              // seek block n  within blocks!.bin  file
 211+ 7CA2                              Colon_Def BLK_INIT, "BLK-INIT", is_normal
 211+ 7CA2             >                New_Def  BLK_INIT, "BLK-INIT", Enter_Ptr, is_normal ; ok
 211+ 7CA2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 211+ 7CA2             >
 211+ 7CA2             >                // dummy db directives used to calculate length of namec
 211+ 7CA2 42 4C 4B 2D >                db      "BLK-INIT"
 211+ 7CA6 49 4E 49 54 >
 211+ 7CAA             >len_NFA         defl    $ - temp_NFA
 211+ 7CAA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 211+ 7CA2             >
 211+ 7CA2 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 211+ 7CA3 42 4C 4B 2D >                db      "BLK-INIT"               // name string in 7-bit ascii, but
 211+ 7CA7 49 4E 49 54 >
 211+ 7CAB             >                org     $-1                 // alter last byte of Name just above to set
 211+ 7CAA D4          >                db      {b $} | END_BIT     // msb as name end
 211+ 7CAB             >
 211+ 7CAB 80 7C       >                dw      last_NFA            // Link to previous definition Name
 211+ 7CAD             >BLK_INIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 211+ 7CAD CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 211+ 7CAF             >                else
 211+ 7CAF ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 211+ 7CAF             >                endif           ; ok        // for other definitions it "points" the correct handler
 211+ 7CAF             >                // Use of "; ok" to suppress "warning[fwdref]"
 211+ 7CAF             >
 211+ 7CAF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 212+ 7CAF 06 7C DA 6B                  dw  BLK_FH, FETCH, F_CLOSE, DROP
 212+ 7CB3 29 68 E1 6A
 213+ 7CB7 16 7C 50 6A                  dw  BLK_FNAME, ONE_PLUS
 214+ 7CBB 18 6F 5E 6D                  dw  HERE, THREE, F_OPEN         // open for update (read+write)
 214+ 7CBF 43 68
 215+ 7CC1 45 64 2C 00                  dw  LIT, $2C, QERROR
 215+ 7CC5 E5 70
 216+ 7CC7 06 7C E7 6B                  dw  BLK_FH, STORE
 217+ 7CCB 95 69                        dw  EXIT
 218+ 7CCD
 219+ 7CCD              //  ______________________________________________________________________
 220+ 7CCD              //
 221+ 7CCD              // #sec
 222+ 7CCD              // number of 512 Byte "sector" available on thie sysstem.
 223+ 7CCD              // it addd up to 16 MByte of data that can be used as source or pool for almost anything.
 224+ 7CCD
 225+ 7CCD                              Constant_Def NSEC , "#SEC", 32767
 225+ 7CCD             >                New_Def  NSEC, "#SEC", Constant_Ptr, is_normal
 225+ 7CCD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 225+ 7CCD             >
 225+ 7CCD             >                // dummy db directives used to calculate length of namec
 225+ 7CCD 23 53 45 43 >                db      "#SEC"
 225+ 7CD1             >len_NFA         defl    $ - temp_NFA
 225+ 7CD1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 225+ 7CCD             >
 225+ 7CCD 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 225+ 7CCE 23 53 45 43 >                db      "#SEC"               // name string in 7-bit ascii, but
 225+ 7CD2             >                org     $-1                 // alter last byte of Name just above to set
 225+ 7CD1 C3          >                db      {b $} | END_BIT     // msb as name end
 225+ 7CD2             >
 225+ 7CD2 A2 7C       >                dw      last_NFA            // Link to previous definition Name
 225+ 7CD4             >NSEC:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 225+ 7CD4 0A 6D       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 225+ 7CD6             >                else
 225+ 7CD6 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 225+ 7CD6             >                endif           ; ok        // for other definitions it "points" the correct handler
 225+ 7CD6             >                // Use of "; ok" to suppress "warning[fwdref]"
 225+ 7CD6             >
 225+ 7CD6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 225+ 7CD6 FF 7F       >                dw      32767
 226+ 7CD8
 227+ 7CD8              //  ______________________________________________________________________
 228+ 7CD8
 229+ 7CD8
 230+ 7CD8
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/next-opt1.asm
  92  7CD8                              include "L3.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L3.asm
   1+ 7CD8              //  ______________________________________________________________________
   2+ 7CD8              //
   3+ 7CD8              //  L3.asm
   4+ 7CD8              //
   5+ 7CD8              //  Continuation of L2.asm
   6+ 7CD8              //  I/O Block definitions
   7+ 7CD8              //  ______________________________________________________________________
   8+ 7CD8
   9+ 7CD8
  10+ 7CD8              //  ______________________________________________________________________
  11+ 7CD8              //
  12+ 7CD8              // r/w          a n f --
  13+ 7CD8              // read/write block n depending on flag f, true-flag means read, false-flag means write.
  14+ 7CD8                              Colon_Def READ_WRITE, "R/W", is_normal
  14+ 7CD8             >                New_Def  READ_WRITE, "R/W", Enter_Ptr, is_normal ; ok
  14+ 7CD8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  14+ 7CD8             >
  14+ 7CD8             >                // dummy db directives used to calculate length of namec
  14+ 7CD8 52 2F 57    >                db      "R/W"
  14+ 7CDB             >len_NFA         defl    $ - temp_NFA
  14+ 7CDB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  14+ 7CD8             >
  14+ 7CD8 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  14+ 7CD9 52 2F 57    >                db      "R/W"               // name string in 7-bit ascii, but
  14+ 7CDC             >                org     $-1                 // alter last byte of Name just above to set
  14+ 7CDB D7          >                db      {b $} | END_BIT     // msb as name end
  14+ 7CDC             >
  14+ 7CDC CD 7C       >                dw      last_NFA            // Link to previous definition Name
  14+ 7CDE             >READ_WRITE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  14+ 7CDE CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  14+ 7CE0             >                else
  14+ 7CE0 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  14+ 7CE0             >                endif           ; ok        // for other definitions it "points" the correct handler
  14+ 7CE0             >                // Use of "; ok" to suppress "warning[fwdref]"
  14+ 7CE0             >
  14+ 7CE0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  15+ 7CE0 BE 69                        dw      TO_R                    // >r
  16+ 7CE2 5C 6A                        dw      ONE_SUBTRACT            // 1-
  17+ 7CE4 16 6B FF 69                  dw      DUP, ZLESS              // dup 0<
  18+ 7CE8 D1 6A D4 7C                  dw      OVER, NSEC              // over #sec
  19+ 7CEC 5C 6A B7 6F                  dw      ONE_SUBTRACT, GREATER   // 1- >
  20+ 7CF0 39 69                        dw      OR_OP                   // or
  21+ 7CF2 45 64 06 00                  dw      LIT, 6, QERROR          // 6 ?error
  21+ 7CF6 E5 70
  22+ 7CF8 D2 69                        dw      R_TO                    // r>
  23+ 7CFA                                                              // if
  24+ 7CFA 7F 64                        dw      ZBRANCH
  25+ 7CFC 08 00                        dw      Read_Write_Else - $
  26+ 7CFE 6A 7C                        dw          BLK_READ            //      blk-read
  27+ 7D00 68 64                        dw      BRANCH
  28+ 7D02 04 00                        dw      Read_Write_Endif - $
  29+ 7D04              Read_Write_Else:                                // else
  30+ 7D04 8C 7C                        dw          BLK_WRITE           //      blk-write
  31+ 7D06              Read_Write_Endif:                               // endif
  32+ 7D06 95 69                        dw      EXIT                    // ;
  33+ 7D08
  34+ 7D08
  35+ 7D08              //  ______________________________________________________________________
  36+ 7D08              //
  37+ 7D08              // +buf        a1 -- a2 f
  38+ 7D08              // advences to next buffer, cyclically rotating along them
  39+ 7D08                              Colon_Def PBUF, "+BUF", is_normal
  39+ 7D08             >                New_Def  PBUF, "+BUF", Enter_Ptr, is_normal ; ok
  39+ 7D08             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  39+ 7D08             >
  39+ 7D08             >                // dummy db directives used to calculate length of namec
  39+ 7D08 2B 42 55 46 >                db      "+BUF"
  39+ 7D0C             >len_NFA         defl    $ - temp_NFA
  39+ 7D0C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  39+ 7D08             >
  39+ 7D08 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  39+ 7D09 2B 42 55 46 >                db      "+BUF"               // name string in 7-bit ascii, but
  39+ 7D0D             >                org     $-1                 // alter last byte of Name just above to set
  39+ 7D0C C6          >                db      {b $} | END_BIT     // msb as name end
  39+ 7D0D             >
  39+ 7D0D D8 7C       >                dw      last_NFA            // Link to previous definition Name
  39+ 7D0F             >PBUF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  39+ 7D0F CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  39+ 7D11             >                else
  39+ 7D11 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  39+ 7D11             >                endif           ; ok        // for other definitions it "points" the correct handler
  39+ 7D11             >                // Use of "; ok" to suppress "warning[fwdref]"
  39+ 7D11             >
  39+ 7D11             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  40+ 7D11 45 64 04 02                  dw      LIT, 516, PLUS          // 516 +
  40+ 7D15 27 6A
  41+ 7D17 16 6B 28 6E                  dw      DUP, LIMIT, FETCH       // dup limit @
  41+ 7D1B DA 6B
  42+ 7D1D 7A 6F                        dw      EQUALS                  // =
  43+ 7D1F                                                              // if
  44+ 7D1F 7F 64                        dw      ZBRANCH
  45+ 7D21 08 00                        dw      PBuf_Endif - $
  46+ 7D23 E1 6A                        dw          DROP                //      drop
  47+ 7D25 1D 6E DA 6B                  dw          FIRST, FETCH        //      first @
  48+ 7D29              PBuf_Endif:                                     // endif
  49+ 7D29 16 6B DA 6E                  dw      DUP, PREV, FETCH        // dup prev @
  49+ 7D2D DA 6B
  50+ 7D2F 6C 6F                        dw      SUBTRACT                // -
  51+ 7D31 95 69                        dw      EXIT                    // ;
  52+ 7D33
  53+ 7D33              //  ______________________________________________________________________
  54+ 7D33              //
  55+ 7D33              // update       --
  56+ 7D33              // mark the last used block to be written to disk
  57+ 7D33                              Colon_Def UPDATE, "UPDATE", is_normal
  57+ 7D33             >                New_Def  UPDATE, "UPDATE", Enter_Ptr, is_normal ; ok
  57+ 7D33             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  57+ 7D33             >
  57+ 7D33             >                // dummy db directives used to calculate length of namec
  57+ 7D33 55 50 44 41 >                db      "UPDATE"
  57+ 7D37 54 45       >
  57+ 7D39             >len_NFA         defl    $ - temp_NFA
  57+ 7D39             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  57+ 7D33             >
  57+ 7D33 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  57+ 7D34 55 50 44 41 >                db      "UPDATE"               // name string in 7-bit ascii, but
  57+ 7D38 54 45       >
  57+ 7D3A             >                org     $-1                 // alter last byte of Name just above to set
  57+ 7D39 C5          >                db      {b $} | END_BIT     // msb as name end
  57+ 7D3A             >
  57+ 7D3A 08 7D       >                dw      last_NFA            // Link to previous definition Name
  57+ 7D3C             >UPDATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  57+ 7D3C CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  57+ 7D3E             >                else
  57+ 7D3E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  57+ 7D3E             >                endif           ; ok        // for other definitions it "points" the correct handler
  57+ 7D3E             >                // Use of "; ok" to suppress "warning[fwdref]"
  57+ 7D3E             >
  57+ 7D3E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  58+ 7D3E DA 6E DA 6B                  dw      PREV, FETCH, FETCH      // prev @ @
  58+ 7D42 DA 6B
  59+ 7D44 45 64 00 80                  dw      LIT, $8000, OR_OP       // $8000, or
  59+ 7D48 39 69
  60+ 7D4A DA 6E DA 6B                  dw      PREV, FETCH, STORE      // prev @ !
  60+ 7D4E E7 6B
  61+ 7D50 95 69                        dw      EXIT                    // ;
  62+ 7D52
  63+ 7D52
  64+ 7D52              //  ______________________________________________________________________
  65+ 7D52              //
  66+ 7D52              // empty-buffers --
  67+ 7D52                              Colon_Def EMPTY_BUFFERS, "EMPTY-BUFFERS", is_normal
  67+ 7D52             >                New_Def  EMPTY_BUFFERS, "EMPTY-BUFFERS", Enter_Ptr, is_normal ; ok
  67+ 7D52             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  67+ 7D52             >
  67+ 7D52             >                // dummy db directives used to calculate length of namec
  67+ 7D52 45 4D 50 54 >                db      "EMPTY-BUFFERS"
  67+ 7D56 59 2D 42 55 >
  67+ 7D5A 46 46 45 52 >
  67+ 7D5E 53          >
  67+ 7D5F             >len_NFA         defl    $ - temp_NFA
  67+ 7D5F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  67+ 7D52             >
  67+ 7D52 8D          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  67+ 7D53 45 4D 50 54 >                db      "EMPTY-BUFFERS"               // name string in 7-bit ascii, but
  67+ 7D57 59 2D 42 55 >
  67+ 7D5B 46 46 45 52 >
  67+ 7D5F 53          >
  67+ 7D60             >                org     $-1                 // alter last byte of Name just above to set
  67+ 7D5F D3          >                db      {b $} | END_BIT     // msb as name end
  67+ 7D60             >
  67+ 7D60 33 7D       >                dw      last_NFA            // Link to previous definition Name
  67+ 7D62             >EMPTY_BUFFERS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  67+ 7D62 CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  67+ 7D64             >                else
  67+ 7D64 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  67+ 7D64             >                endif           ; ok        // for other definitions it "points" the correct handler
  67+ 7D64             >                // Use of "; ok" to suppress "warning[fwdref]"
  67+ 7D64             >
  67+ 7D64             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  68+ 7D64 1D 6E DA 6B                  dw      FIRST, FETCH            // first @
  69+ 7D68 28 6E DA 6B                  dw      LIMIT, FETCH            // limit @
  70+ 7D6C D1 6A 6C 6F                  dw      OVER, SUBTRACT, ERASE   // over - erase
  70+ 7D70 D1 73
  71+ 7D72 95 69                        dw      EXIT                    // ;
  72+ 7D74
  73+ 7D74              //  ______________________________________________________________________
  74+ 7D74              //
  75+ 7D74              // buffer       n -- a
  76+ 7D74              // read block n and gives the address to a buffer
  77+ 7D74              // any block previously inside the buffer, if modified, is rewritten to
  78+ 7D74              // disk before reading the block n.
  79+ 7D74
  80+ 7D74                              Colon_Def BUFFER, "BUFFER", is_normal
  80+ 7D74             >                New_Def  BUFFER, "BUFFER", Enter_Ptr, is_normal ; ok
  80+ 7D74             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  80+ 7D74             >
  80+ 7D74             >                // dummy db directives used to calculate length of namec
  80+ 7D74 42 55 46 46 >                db      "BUFFER"
  80+ 7D78 45 52       >
  80+ 7D7A             >len_NFA         defl    $ - temp_NFA
  80+ 7D7A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  80+ 7D74             >
  80+ 7D74 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  80+ 7D75 42 55 46 46 >                db      "BUFFER"               // name string in 7-bit ascii, but
  80+ 7D79 45 52       >
  80+ 7D7B             >                org     $-1                 // alter last byte of Name just above to set
  80+ 7D7A D2          >                db      {b $} | END_BIT     // msb as name end
  80+ 7D7B             >
  80+ 7D7B 52 7D       >                dw      last_NFA            // Link to previous definition Name
  80+ 7D7D             >BUFFER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  80+ 7D7D CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  80+ 7D7F             >                else
  80+ 7D7F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  80+ 7D7F             >                endif           ; ok        // for other definitions it "points" the correct handler
  80+ 7D7F             >                // Use of "; ok" to suppress "warning[fwdref]"
  80+ 7D7F             >
  80+ 7D7F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  81+ 7D7F D0 6E DA 6B                  dw      USE, FETCH              // use @
  82+ 7D83 16 6B BE 69                  dw      DUP, TO_R               // dup >r
  83+ 7D87                                                              // begin
  84+ 7D87              Buffer_Begin:
  85+ 7D87 0F 7D                        dw          PBUF                //      +buf
  86+ 7D89                                                              // until
  87+ 7D89 7F 64                        dw      ZBRANCH
  88+ 7D8B FC FF                        dw      Buffer_Begin - $
  89+ 7D8D D0 6E E7 6B                  dw      USE, STORE              // use !
  90+ 7D91 E5 69 DA 6B                  dw      R_OP, FETCH, ZLESS      // r @ 0<
  90+ 7D95 FF 69
  91+ 7D97                                                              // if
  92+ 7D97 7F 64                        dw      ZBRANCH
  93+ 7D99 14 00                        dw      Buffer_Endif - $
  94+ 7D9B E5 69 78 6A                  dw          R_OP, CELL_PLUS     //      r cell+
  95+ 7D9F E5 69 DA 6B                  dw          R_OP, FETCH         //      r fetch
  96+ 7DA3 45 64 FF 7F                  dw          LIT, $7FFF          //      7FFF
  97+ 7DA7 27 69                        dw          AND_OP              //      and
  98+ 7DA9 46 6D DE 7C                  dw          ZERO, READ_WRITE    //      0 r/w
  99+ 7DAD              Buffer_Endif:                                   // endif
 100+ 7DAD E5 69 E7 6B                  dw      R_OP, STORE             // r !
 101+ 7DB1 E5 69 DA 6E                  dw      R_OP, PREV, STORE       // r prev !
 101+ 7DB5 E7 6B
 102+ 7DB7 D2 69 78 6A                  dw      R_TO, CELL_PLUS         // r> cell+
 103+ 7DBB 95 69                        dw      EXIT                    // ;
 104+ 7DBD
 105+ 7DBD              //  ______________________________________________________________________
 106+ 7DBD              //
 107+ 7DBD              // block        n -- a
 108+ 7DBD              // Leaves the buffer address that contains the block n.
 109+ 7DBD              // If the block is not already present, it will be loaded from disk
 110+ 7DBD              // The block previously inside the buffer, if modified, is rewritten to
 111+ 7DBD              // disk before reading the block n.
 112+ 7DBD              // See also BUFFER, R/W, UPDATE, FLUSH.
 113+ 7DBD
 114+ 7DBD                              Colon_Def BLOCK, "BLOCK", is_normal
 114+ 7DBD             >                New_Def  BLOCK, "BLOCK", Enter_Ptr, is_normal ; ok
 114+ 7DBD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 114+ 7DBD             >
 114+ 7DBD             >                // dummy db directives used to calculate length of namec
 114+ 7DBD 42 4C 4F 43 >                db      "BLOCK"
 114+ 7DC1 4B          >
 114+ 7DC2             >len_NFA         defl    $ - temp_NFA
 114+ 7DC2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 114+ 7DBD             >
 114+ 7DBD 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 114+ 7DBE 42 4C 4F 43 >                db      "BLOCK"               // name string in 7-bit ascii, but
 114+ 7DC2 4B          >
 114+ 7DC3             >                org     $-1                 // alter last byte of Name just above to set
 114+ 7DC2 CB          >                db      {b $} | END_BIT     // msb as name end
 114+ 7DC3             >
 114+ 7DC3 74 7D       >                dw      last_NFA            // Link to previous definition Name
 114+ 7DC5             >BLOCK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 114+ 7DC5 CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 114+ 7DC7             >                else
 114+ 7DC7 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 114+ 7DC7             >                endif           ; ok        // for other definitions it "points" the correct handler
 114+ 7DC7             >                // Use of "; ok" to suppress "warning[fwdref]"
 114+ 7DC7             >
 114+ 7DC7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 115+ 7DC7 6C 6E DA 6B                  dw      OFFSET, FETCH           // offset @
 116+ 7DCB 27 6A BE 69                  dw      PLUS, TO_R              // + >r
 117+ 7DCF DA 6E DA 6B                  dw      PREV, FETCH             // prev @
 118+ 7DD3 16 6B DA 6B                  dw      DUP, FETCH              // dup @
 119+ 7DD7 E5 69 6C 6F                  dw      R_OP, SUBTRACT          // r -
 120+ 7DDB 16 6B 27 6A                  dw      DUP, PLUS               // dup +  ( trick: check equality without most significant bit )
 121+ 7DDF                                                              // if
 122+ 7DDF 7F 64                        dw        ZBRANCH
 123+ 7DE1 34 00                        dw        Block_Endif_1 - $
 124+ 7DE3              Block_Begin:                                    //      begin
 125+ 7DE3 0F 7D EC 69                  dw          PBUF, ZEQUAL        //          +buf 0
 126+ 7DE7                                                              //          if
 127+ 7DE7 7F 64                        dw          ZBRANCH
 128+ 7DE9 14 00                        dw          Block_Endif_2 - $
 129+ 7DEB E1 6A                        dw              DROP            //              drop
 130+ 7DED E5 69 7D 7D                  dw              R_OP, BUFFER    //              r buffer
 131+ 7DF1 16 6B                        dw              DUP             //              dup
 132+ 7DF3 E5 69 4E 6D                  dw              R_OP, ONE       //              r 1
 133+ 7DF7 DE 7C                        dw              READ_WRITE      //              r/w
 134+ 7DF9 56 6D 6C 6F                  dw              TWO, SUBTRACT   //              2 -
 135+ 7DFD              Block_Endif_2:                                  //          endif
 136+ 7DFD 16 6B DA 6B                  dw          DUP, FETCH, R_OP    //          dup @ r
 136+ 7E01 E5 69
 137+ 7E03 6C 6F 16 6B                  dw          SUBTRACT, DUP       //          - dup
 138+ 7E07 27 6A EC 69                  dw          PLUS, ZEQUAL        //          + 0=
 139+ 7E0B                                                              //      until
 140+ 7E0B 7F 64                        dw        ZBRANCH
 141+ 7E0D D6 FF                        dw        Block_Begin - $
 142+ 7E0F 16 6B DA 6E                  dw        DUP, PREV, STORE      //      dup prev !
 142+ 7E13 E7 6B
 143+ 7E15              Block_Endif_1:                                  // endif
 144+ 7E15 D2 69 E1 6A                  dw      R_TO, DROP, CELL_PLUS   // r> drop cell+
 144+ 7E19 78 6A
 145+ 7E1B 95 69                        dw      EXIT                    // ;
 146+ 7E1D
 147+ 7E1D              //  ______________________________________________________________________
 148+ 7E1D              //
 149+ 7E1D              // #buff        -- n
 150+ 7E1D              // number of buffers available. must be the difference between LIMIT and FIRST divided by 516
 151+ 7E1D                              Constant_Def NBUFF,   "#BUFF", 7
 151+ 7E1D             >                New_Def  NBUFF, "#BUFF", Constant_Ptr, is_normal
 151+ 7E1D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 151+ 7E1D             >
 151+ 7E1D             >                // dummy db directives used to calculate length of namec
 151+ 7E1D 23 42 55 46 >                db      "#BUFF"
 151+ 7E21 46          >
 151+ 7E22             >len_NFA         defl    $ - temp_NFA
 151+ 7E22             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 151+ 7E1D             >
 151+ 7E1D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 151+ 7E1E 23 42 55 46 >                db      "#BUFF"               // name string in 7-bit ascii, but
 151+ 7E22 46          >
 151+ 7E23             >                org     $-1                 // alter last byte of Name just above to set
 151+ 7E22 C6          >                db      {b $} | END_BIT     // msb as name end
 151+ 7E23             >
 151+ 7E23 BD 7D       >                dw      last_NFA            // Link to previous definition Name
 151+ 7E25             >NBUFF:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 151+ 7E25 0A 6D       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 151+ 7E27             >                else
 151+ 7E27 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 151+ 7E27             >                endif           ; ok        // for other definitions it "points" the correct handler
 151+ 7E27             >                // Use of "; ok" to suppress "warning[fwdref]"
 151+ 7E27             >
 151+ 7E27             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 151+ 7E27 07 00       >                dw      7
 152+ 7E29
 153+ 7E29              //  ______________________________________________________________________
 154+ 7E29              //
 155+ 7E29              // flush        --
 156+ 7E29                              Colon_Def FLUSH, "FLUSH", is_normal
 156+ 7E29             >                New_Def  FLUSH, "FLUSH", Enter_Ptr, is_normal ; ok
 156+ 7E29             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 156+ 7E29             >
 156+ 7E29             >                // dummy db directives used to calculate length of namec
 156+ 7E29 46 4C 55 53 >                db      "FLUSH"
 156+ 7E2D 48          >
 156+ 7E2E             >len_NFA         defl    $ - temp_NFA
 156+ 7E2E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 156+ 7E29             >
 156+ 7E29 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 156+ 7E2A 46 4C 55 53 >                db      "FLUSH"               // name string in 7-bit ascii, but
 156+ 7E2E 48          >
 156+ 7E2F             >                org     $-1                 // alter last byte of Name just above to set
 156+ 7E2E C8          >                db      {b $} | END_BIT     // msb as name end
 156+ 7E2F             >
 156+ 7E2F 1D 7E       >                dw      last_NFA            // Link to previous definition Name
 156+ 7E31             >FLUSH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 156+ 7E31 CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 156+ 7E33             >                else
 156+ 7E33 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 156+ 7E33             >                endif           ; ok        // for other definitions it "points" the correct handler
 156+ 7E33             >                // Use of "; ok" to suppress "warning[fwdref]"
 156+ 7E33             >
 156+ 7E33             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 157+ 7E33 25 7E 50 6A                  dw      NBUFF, ONE_PLUS, ZERO   // #buff 1+ 0
 157+ 7E37 46 6D
 158+ 7E39              Flush_Do:                                       // do
 159+ 7E39 07 65                        dw      C_DO
 160+ 7E3B 46 6D 7D 7D                  dw      ZERO, BUFFER, DROP      //      0 buffer drop
 160+ 7E3F E1 6A
 161+ 7E41                                                              // loop
 162+ 7E41 94 64 F8 FF                  dw      C_LOOP, Flush_Do - $
 163+ 7E45 06 7C DA 6B                  dw      BLK_FH, FETCH           // blk-fh @     ( ZX-Next dependance )
 164+ 7E49 66 68 E1 6A                  dw      F_SYNC, DROP            // f_sync drop
 165+ 7E4D 95 69                        dw      EXIT                    // exit
 166+ 7E4F
 167+ 7E4F              //  ______________________________________________________________________
 168+ 7E4F              //
 169+ 7E4F              // f_getline    a fh -- a n
 170+ 7E4F              // Given an open filehandle read next line (terminated with $0D or $0A)
 171+ 7E4F              // Address a is left for subsequent processing
 172+ 7E4F              // and n as the actual number of byte read, that is the length of line
 173+ 7E4F                              Colon_Def F_GETLINE, "F_GETLINE", is_normal
 173+ 7E4F             >                New_Def  F_GETLINE, "F_GETLINE", Enter_Ptr, is_normal ; ok
 173+ 7E4F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 173+ 7E4F             >
 173+ 7E4F             >                // dummy db directives used to calculate length of namec
 173+ 7E4F 46 5F 47 45 >                db      "F_GETLINE"
 173+ 7E53 54 4C 49 4E >
 173+ 7E57 45          >
 173+ 7E58             >len_NFA         defl    $ - temp_NFA
 173+ 7E58             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 173+ 7E4F             >
 173+ 7E4F 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 173+ 7E50 46 5F 47 45 >                db      "F_GETLINE"               // name string in 7-bit ascii, but
 173+ 7E54 54 4C 49 4E >
 173+ 7E58 45          >
 173+ 7E59             >                org     $-1                 // alter last byte of Name just above to set
 173+ 7E58 C5          >                db      {b $} | END_BIT     // msb as name end
 173+ 7E59             >
 173+ 7E59 29 7E       >                dw      last_NFA            // Link to previous definition Name
 173+ 7E5B             >F_GETLINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 173+ 7E5B CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 173+ 7E5D             >                else
 173+ 7E5D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 173+ 7E5D             >                endif           ; ok        // for other definitions it "points" the correct handler
 173+ 7E5D             >                // Use of "; ok" to suppress "warning[fwdref]"
 173+ 7E5D             >
 173+ 7E5D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 174+ 7E5D 16 6B BE 69                  dw      DUP, TO_R               // dup >r           ( a  fh )  \  fh
 175+ 7E61 CD 67                        dw      F_FGETPOS               // f_fgetpos        ( a  d  f )  \  fh
 176+ 7E63 45 64 2C 00                  dw      LIT, 44, QERROR         // 44 ?error        ( a  d  )  \  fh
 176+ 7E67 E5 70
 177+ 7E69
 178+ 7E69 23 6B 16 6B                  dw      ROT, DUP, BBUF          // rot dup b/buf    ( d  a  a  512 )  \  fh
 178+ 7E6D 86 6D
 179+ 7E6F 80 6B E2 73                  dw      TWO_DUP, BLANKS         // 2dup blanks      ( d  a  a  512 )  \  fh
 180+ 7E73
 181+ 7E73 8E 6A                        dw      CELL_MINUS              //  cell-           ( d  a  a  510 )  \  fh
 182+ 7E75 09 6B 50 6A                  dw      SWAP, ONE_PLUS, SWAP    // swap 1+ swap     ( d  a  a+1  510 )  \  fh
 182+ 7E79 09 6B
 183+ 7E7B
 184+ 7E7B 5C 6A E5 69                  dw      ONE_SUBTRACT, R_OP      // 1- r             ( d  a  a+1  509  fh )  \  fh
 185+ 7E7F 0A 68                        dw      F_READ                  // f_read           ( d  a  n  f )  \  fh
 186+ 7E81 45 64 2E 00                  dw      LIT, 46, QERROR         // 46 ?error        ( d  a  n )  \  fh
 186+ 7E85 E5 70
 187+ 7E87                                                              // if ( at least 1 chr was read )  \  fh
 188+ 7E87 7F 64                        dw      ZBRANCH
 189+ 7E89 3A 00                        dw      FGetline_Else - $
 190+ 7E8B 45 64 0A 00                  dw          LIT, 10, ENCLOSE    //      10 enclose       ( d  a   i j k )  \  fh
 190+ 7E8F F2 65
 191+ 7E91 E1 6A 09 6B                  dw          DROP, SWAP, DROP    //      drop swap drop   ( d  a  j  )  \  fh
 191+ 7E95 E1 6A
 192+ 7E97 09 6B                        dw          SWAP                //      drop swap        ( d  j  a  )  \  fh
 193+ 7E99 45 64 0D 00                  dw          LIT, 13, ENCLOSE    //      13 enclose       ( d  j  a   i j k )  \  fh
 193+ 7E9D F2 65
 194+ 7E9F E1 6A 09 6B                  dw          DROP, SWAP, DROP    //      drop swap drop   ( d  jnl  a  jcr  )  \  fh
 194+ 7EA3 E1 6A
 195+ 7EA5 23 6B C5 6F                  dw          ROT, MIN            //      rot min          ( d  a  n  )  \  fh
 196+ 7EA9 16 6B BE 69                  dw          DUP, TO_R           //      dup >r           ( d  a  n  )    \  fh n
 197+ 7EAD 6E 6B D2 69                  dw          TWO_SWAP, R_TO      //      2swap r>         ( a  n  d  n  )  \  fh
 198+ 7EB1 46 6D 34 6A                  dw          ZERO, DPLUS         //      0 d+             ( a  n  d+n  )  \  fh
 199+ 7EB5 D2 69 A8 67                  dw          R_TO, F_SEEK        //      r> f_seek        ( a  n  f )
 200+ 7EB9 45 64 2D 00                  dw          LIT, 45, QERROR     //      45 ?error        ( a  n  )
 200+ 7EBD E5 70
 201+ 7EBF                                                              // else
 202+ 7EBF 68 64                        dw      BRANCH
 203+ 7EC1 0C 00                        dw      FGetline_Endif - $
 204+ 7EC3              FGetline_Else:
 205+ 7EC3 D2 69                        dw          R_TO                //      r>              ( d  a  fh  )
 206+ 7EC5 6E 6B 60 6B                  dw          TWO_SWAP, TWO_DROP  //      2swap 2drop     ( a  fh  )
 207+ 7EC9 E1 6A 46 6D                  dw          DROP, ZERO          //      drop, 0         ( a  0 )
 208+ 7ECD              FGetline_Endif:                                 // endif
 209+ 7ECD 80 6B 27 6A                  dw      TWO_DUP, PLUS, OVER     // 2dup + over          ( a  n  a+n  n )
 209+ 7ED1 D1 6A
 210+ 7ED3 86 6D 09 6B                  dw      BBUF, SWAP, SUBTRACT    // b/buf swap -         ( a  n  a+n  512-n )
 210+ 7ED7 6C 6F
 211+ 7ED9 E2 73                        dw      BLANKS                  // blanks               ( a  n )
 212+ 7EDB 80 6B 27 6A                  dw      TWO_DUP, PLUS, ZERO     // 2dup + 0             ( a  n  a+n  0 )
 212+ 7EDF 46 6D
 213+ 7EE1 09 6B 03 6C                  dw      SWAP, CSTORE            // swap c!              ( a  n )
 214+ 7EE5 95 69                        dw      EXIT                    // ;
 215+ 7EE7
 216+ 7EE7              //  ______________________________________________________________________
 217+ 7EE7              //
 218+ 7EE7              // f_include    fh --
 219+ 7EE7              // Given a filehandle includes the source from file
 220+ 7EE7                              Colon_Def F_INCLUDE, "F_INCLUDE", is_normal
 220+ 7EE7             >                New_Def  F_INCLUDE, "F_INCLUDE", Enter_Ptr, is_normal ; ok
 220+ 7EE7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 220+ 7EE7             >
 220+ 7EE7             >                // dummy db directives used to calculate length of namec
 220+ 7EE7 46 5F 49 4E >                db      "F_INCLUDE"
 220+ 7EEB 43 4C 55 44 >
 220+ 7EEF 45          >
 220+ 7EF0             >len_NFA         defl    $ - temp_NFA
 220+ 7EF0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 220+ 7EE7             >
 220+ 7EE7 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 220+ 7EE8 46 5F 49 4E >                db      "F_INCLUDE"               // name string in 7-bit ascii, but
 220+ 7EEC 43 4C 55 44 >
 220+ 7EF0 45          >
 220+ 7EF1             >                org     $-1                 // alter last byte of Name just above to set
 220+ 7EF0 C5          >                db      {b $} | END_BIT     // msb as name end
 220+ 7EF1             >
 220+ 7EF1 4F 7E       >                dw      last_NFA            // Link to previous definition Name
 220+ 7EF3             >F_INCLUDE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 220+ 7EF3 CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 220+ 7EF5             >                else
 220+ 7EF5 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 220+ 7EF5             >                endif           ; ok        // for other definitions it "points" the correct handler
 220+ 7EF5             >                // Use of "; ok" to suppress "warning[fwdref]"
 220+ 7EF5             >
 220+ 7EF5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 221+ 7EF5 45 6E DA 6B                  dw      BLK, FETCH, TO_R        // blk @ >r
 221+ 7EF9 BE 69
 222+ 7EFB 4E 6E DA 6B                  dw      TO_IN, FETCH, TO_R      // >in @ >r
 222+ 7EFF BE 69
 223+ 7F01 FC 6E DA 6B                  dw      SOURCE_ID, FETCH, TO_R  // source-id @ >r
 223+ 7F05 BE 69
 224+ 7F07 E5 69                        dw      R_OP                    // r
 225+ 7F09                                                              // if
 226+ 7F09 7F 64                        dw      ZBRANCH
 227+ 7F0B 10 00                        dw      FInclude_Else_1 - $
 228+ 7F0D E5 69 CD 67                  dw          R_OP, F_FGETPOS     //      r f_getpos
 229+ 7F11 45 64 2C 00                  dw          LIT, 44, QERROR     //      44 ?error
 229+ 7F15 E5 70
 230+ 7F17                                                              // else
 231+ 7F17 68 64                        dw      BRANCH
 232+ 7F19 06 00                        dw      FInclude_Endif_1 - $
 233+ 7F1B              FInclude_Else_1:
 234+ 7F1B 46 6D 46 6D                  dw          ZERO, ZERO          //      0 0
 235+ 7F1F                                                              // endif
 236+ 7F1F              FInclude_Endif_1:
 237+ 7F1F BE 69 BE 69                  dw      TO_R, TO_R              // >r >r
 238+ 7F23 FC 6E E7 6B                  dw      SOURCE_ID, STORE        // source-id !
 239+ 7F27              FInclude_Begin:                                 // begin
 240+ 7F27 4E 6D C5 7D                  dw          ONE, BLOCK          //      1 block
 241+ 7F2B FC 6E DA 6B                  dw          SOURCE_ID, FETCH    //      source-id @
 242+ 7F2F 5B 7E                        dw          F_GETLINE           //      f_getline
 243+ 7F31 09 6B E1 6A                  dw          SWAP, DROP          //      swap drop
 244+ 7F35                                                              // while
 245+ 7F35 7F 64                        dw      ZBRANCH
 246+ 7F37 16 00                        dw      FInclude_Repeat - $
 247+ 7F39 3C 7D                        dw          UPDATE              //      update
 248+ 7F3B 4E 6D 45 6E                  dw          ONE, BLK, STORE     //      1 blk !
 248+ 7F3F E7 6B
 249+ 7F41 46 6D 4E 6E                  dw          ZERO, TO_IN, STORE  //      0 >in !
 249+ 7F45 E7 6B
 250+ 7F47 BA 77                        dw          INTERPRET           //      interpret
 251+ 7F49 68 64                        dw      BRANCH
 252+ 7F4B DC FF                        dw      FInclude_Begin - $
 253+ 7F4D              FInclude_Repeat:                                // repeat
 254+ 7F4D FC 6E DA 6B                  dw      SOURCE_ID, FETCH        // source-id @
 255+ 7F51 46 6D FC 6E                  dw      ZERO, SOURCE_ID, STORE  // 0 source-id !
 255+ 7F55 E7 6B
 256+ 7F57 29 68                        dw      F_CLOSE                 // f_close
 257+ 7F59 45 64 2A 00                  dw      LIT, 42, QERROR         // 42 ?error
 257+ 7F5D E5 70
 258+ 7F5F D2 69 D2 69                  dw      R_TO, R_TO, R_TO        // r> r> r>
 258+ 7F63 D2 69
 259+ 7F65 16 6B FC 6E                  dw      DUP, SOURCE_ID, STORE   // dup source-id !
 259+ 7F69 E7 6B
 260+ 7F6B                                                              // if
 261+ 7F6B 7F 64                        dw      ZBRANCH
 262+ 7F6D 12 00                        dw      FInclude_Else_2 - $
 263+ 7F6F FC 6E DA 6B                  dw          SOURCE_ID, FETCH    //      source-id @
 264+ 7F73 A8 67                        dw          F_SEEK              //      f_seek
 265+ 7F75 45 64 2B 00                  dw          LIT, 43, QERROR     //      43, ?error
 265+ 7F79 E5 70
 266+ 7F7B                                                              // else
 267+ 7F7B 68 64                        dw      BRANCH
 268+ 7F7D 04 00                        dw      FInclude_Endif_2 - $
 269+ 7F7F              FInclude_Else_2:
 270+ 7F7F 60 6B                        dw          TWO_DROP            //      2drop
 271+ 7F81              FInclude_Endif_2:                               // endif
 272+ 7F81 D2 69 4E 6E                  dw      R_TO, TO_IN, STORE      // r> >in !
 272+ 7F85 E7 6B
 273+ 7F87 D2 69 45 6E                  dw      R_TO, BLK, STORE        // r> blk !
 273+ 7F8B E7 6B
 274+ 7F8D 95 69                        dw      EXIT                    // ;
 275+ 7F8F
 276+ 7F8F              //  ______________________________________________________________________
 277+ 7F8F              //
 278+ 7F8F              // include      -- cccc
 279+ 7F8F              // Include the following filename
 280+ 7F8F                              Colon_Def INCLUDE, "INCLUDE", is_normal
 280+ 7F8F             >                New_Def  INCLUDE, "INCLUDE", Enter_Ptr, is_normal ; ok
 280+ 7F8F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 280+ 7F8F             >
 280+ 7F8F             >                // dummy db directives used to calculate length of namec
 280+ 7F8F 49 4E 43 4C >                db      "INCLUDE"
 280+ 7F93 55 44 45    >
 280+ 7F96             >len_NFA         defl    $ - temp_NFA
 280+ 7F96             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 280+ 7F8F             >
 280+ 7F8F 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 280+ 7F90 49 4E 43 4C >                db      "INCLUDE"               // name string in 7-bit ascii, but
 280+ 7F94 55 44 45    >
 280+ 7F97             >                org     $-1                 // alter last byte of Name just above to set
 280+ 7F96 C5          >                db      {b $} | END_BIT     // msb as name end
 280+ 7F97             >
 280+ 7F97 E7 7E       >                dw      last_NFA            // Link to previous definition Name
 280+ 7F99             >INCLUDE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 280+ 7F99 CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 280+ 7F9B             >                else
 280+ 7F9B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 280+ 7F9B             >                endif           ; ok        // for other definitions it "points" the correct handler
 280+ 7F9B             >                // Use of "; ok" to suppress "warning[fwdref]"
 280+ 7F9B             >
 280+ 7F9B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 281+ 7F9B 70 6D 1A 74                  dw      BL, WORD, COUNT, OVER   // bl word count over
 281+ 7F9F 84 72 D1 6A
 282+ 7FA3 27 6A 46 6D                  dw      PLUS, ZERO, SWAP, STORE // + 0 swap !
 282+ 7FA7 09 6B E7 6B
 283+ 7FAB 07 74 4E 6D                  dw      PAD, ONE, F_OPEN        // pad 1 f_open
 283+ 7FAF 43 68
 284+ 7FB1 45 64 2B 00                  dw      LIT, 43, QERROR         // 43 ?error
 284+ 7FB5 E5 70
 285+ 7FB7 F3 7E                        dw      F_INCLUDE               // f_include
 286+ 7FB9 95 69                        dw      EXIT                    // ;
 287+ 7FBB
 288+ 7FBB              //  ______________________________________________________________________
 289+ 7FBB              //
 290+ 7FBB              // load+        n --
 291+ 7FBB                              Colon_Def LOAD_P, "LOAD+", is_normal
 291+ 7FBB             >                New_Def  LOAD_P, "LOAD+", Enter_Ptr, is_normal ; ok
 291+ 7FBB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 291+ 7FBB             >
 291+ 7FBB             >                // dummy db directives used to calculate length of namec
 291+ 7FBB 4C 4F 41 44 >                db      "LOAD+"
 291+ 7FBF 2B          >
 291+ 7FC0             >len_NFA         defl    $ - temp_NFA
 291+ 7FC0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 291+ 7FBB             >
 291+ 7FBB 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 291+ 7FBC 4C 4F 41 44 >                db      "LOAD+"               // name string in 7-bit ascii, but
 291+ 7FC0 2B          >
 291+ 7FC1             >                org     $-1                 // alter last byte of Name just above to set
 291+ 7FC0 AB          >                db      {b $} | END_BIT     // msb as name end
 291+ 7FC1             >
 291+ 7FC1 8F 7F       >                dw      last_NFA            // Link to previous definition Name
 291+ 7FC3             >LOAD_P:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 291+ 7FC3 CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 291+ 7FC5             >                else
 291+ 7FC5 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 291+ 7FC5             >                endif           ; ok        // for other definitions it "points" the correct handler
 291+ 7FC5             >                // Use of "; ok" to suppress "warning[fwdref]"
 291+ 7FC5             >
 291+ 7FC5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 292+ 7FC5 45 6E DA 6B                  dw      BLK, FETCH, TO_R        // blk @ >r
 292+ 7FC9 BE 69
 293+ 7FCB 4E 6E DA 6B                  dw      TO_IN, FETCH, TO_R      // >in @ >r
 293+ 7FCF BE 69
 294+ 7FD1
 295+ 7FD1 46 6D 4E 6E                  dw      ZERO, TO_IN, STORE      // 0 >in !
 295+ 7FD5 E7 6B
 296+ 7FD7 92 6D FD 79                  dw      BSCR, MUL, BLK, STORE   // b/scr * blk !
 296+ 7FDB 45 6E E7 6B
 297+ 7FDF BA 77                        dw      INTERPRET               // interpret
 298+ 7FE1
 299+ 7FE1 D2 69 4E 6E                  dw      R_TO, TO_IN, STORE      // r> >in !
 299+ 7FE5 E7 6B
 300+ 7FE7 D2 69 45 6E                  dw      R_TO, BLK, STORE        // r> blk !
 300+ 7FEB E7 6B
 301+ 7FED 95 69                        dw      EXIT                    // ;
 302+ 7FEF
 303+ 7FEF              //  ______________________________________________________________________
 304+ 7FEF              //
 305+ 7FEF              // -->          --
 306+ 7FEF                              Colon_Def LOAD_NEXT, "-->", is_immediate
 306+ 7FEF             >                New_Def  LOAD_NEXT, "-->", Enter_Ptr, is_immediate ; ok
 306+ 7FEF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 306+ 7FEF             >
 306+ 7FEF             >                // dummy db directives used to calculate length of namec
 306+ 7FEF 2D 2D 3E    >                db      "-->"
 306+ 7FF2             >len_NFA         defl    $ - temp_NFA
 306+ 7FF2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 306+ 7FEF             >
 306+ 7FEF C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 306+ 7FF0 2D 2D 3E    >                db      "-->"               // name string in 7-bit ascii, but
 306+ 7FF3             >                org     $-1                 // alter last byte of Name just above to set
 306+ 7FF2 BE          >                db      {b $} | END_BIT     // msb as name end
 306+ 7FF3             >
 306+ 7FF3 BB 7F       >                dw      last_NFA            // Link to previous definition Name
 306+ 7FF5             >LOAD_NEXT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 306+ 7FF5 CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 306+ 7FF7             >                else
 306+ 7FF7 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 306+ 7FF7             >                endif           ; ok        // for other definitions it "points" the correct handler
 306+ 7FF7             >                // Use of "; ok" to suppress "warning[fwdref]"
 306+ 7FF7             >
 306+ 7FF7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 307+ 7FF7 5E 71                        dw      QLOADING                // ?loading
 308+ 7FF9 46 6D 4E 6E                  dw      ZERO, TO_IN, STORE      // 0 >in !
 308+ 7FFD E7 6B
 309+ 7FFF 92 6D                        dw      BSCR                    // b/scr
 310+ 8001 45 6E DA 6B                  dw      BLK, FETCH              // blk @
 311+ 8005 D1 6A                        dw      OVER                    // over
 312+ 8007 2C 7A                        dw      MOD                     // mod
 313+ 8009 6C 6F                        dw      SUBTRACT                // -
 314+ 800B 45 6E B7 6B                  dw      BLK, PLUSSTORE          // +!
 315+ 800F 95 69                        dw      EXIT                    // ;
 316+ 8011
 317+ 8011              //  ______________________________________________________________________
 318+ 8011              //
 319+ 8011              // '            -- xt
 320+ 8011                              Colon_Def TICK, "'", is_normal
 320+ 8011             >                New_Def  TICK, "'", Enter_Ptr, is_normal ; ok
 320+ 8011             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 320+ 8011             >
 320+ 8011             >                // dummy db directives used to calculate length of namec
 320+ 8011 27          >                db      "'"
 320+ 8012             >len_NFA         defl    $ - temp_NFA
 320+ 8012             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 320+ 8011             >
 320+ 8011 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 320+ 8012 27          >                db      "'"               // name string in 7-bit ascii, but
 320+ 8013             >                org     $-1                 // alter last byte of Name just above to set
 320+ 8012 A7          >                db      {b $} | END_BIT     // msb as name end
 320+ 8013             >
 320+ 8013 EF 7F       >                dw      last_NFA            // Link to previous definition Name
 320+ 8015             >TICK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 320+ 8015 CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 320+ 8017             >                else
 320+ 8017 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 320+ 8017             >                endif           ; ok        // for other definitions it "points" the correct handler
 320+ 8017             >                // Use of "; ok" to suppress "warning[fwdref]"
 320+ 8017             >
 320+ 8017             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 321+ 8017 CC 75                        dw      LFIND                   // -find
 322+ 8019 EC 69                        dw      ZEQUAL                  // 0=
 323+ 801B 46 6D E5 70                  dw      ZERO, QERROR            // 0 ?error
 324+ 801F E1 6A                        dw      DROP                    // drop
 325+ 8021 95 69                        dw      EXIT                    // ;
 326+ 8023
 327+ 8023              //  ______________________________________________________________________
 328+ 8023              //
 329+ 8023              // forget       -- cccc
 330+ 8023                              Colon_Def FORGET, "FORGET", is_normal
 330+ 8023             >                New_Def  FORGET, "FORGET", Enter_Ptr, is_normal ; ok
 330+ 8023             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 330+ 8023             >
 330+ 8023             >                // dummy db directives used to calculate length of namec
 330+ 8023 46 4F 52 47 >                db      "FORGET"
 330+ 8027 45 54       >
 330+ 8029             >len_NFA         defl    $ - temp_NFA
 330+ 8029             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 330+ 8023             >
 330+ 8023 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 330+ 8024 46 4F 52 47 >                db      "FORGET"               // name string in 7-bit ascii, but
 330+ 8028 45 54       >
 330+ 802A             >                org     $-1                 // alter last byte of Name just above to set
 330+ 8029 D4          >                db      {b $} | END_BIT     // msb as name end
 330+ 802A             >
 330+ 802A 11 80       >                dw      last_NFA            // Link to previous definition Name
 330+ 802C             >FORGET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 330+ 802C CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 330+ 802E             >                else
 330+ 802E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 330+ 802E             >                endif           ; ok        // for other definitions it "points" the correct handler
 330+ 802E             >                // Use of "; ok" to suppress "warning[fwdref]"
 330+ 802E             >
 330+ 802E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 331+ 802E 86 6E DA 6B                  dw      CURRENT, FETCH          // current @
 332+ 8032 79 6E DA 6B                  dw      CONTEXT, FETCH          // context @
 333+ 8036 6C 6F 45 64                  dw      SUBTRACT, LIT, 23, QERROR // - 23 ?error
 333+ 803A 17 00 E5 70
 334+ 803E 15 80 B5 70                  dw      TICK, TO_BODY           // ' >body
 335+ 8042 16 6B FC 6D                  dw      DUP, FENCE, FETCH       // dup fence @
 335+ 8046 DA 6B
 336+ 8048 87 6F 45 64                  dw      ULESS, LIT, 21, QERROR  // u< 21 ?error
 336+ 804C 15 00 E5 70
 337+ 8050 16 6B 8B 70                  dw      DUP, NFA, DP, STORE     // dup nfa dp !
 337+ 8054 04 6E E7 6B
 338+ 8058 71 70 DA 6B                  dw      LFA, FETCH              // lfa @
 339+ 805C 79 6E DA 6B                  dw      CONTEXT, FETCH, STORE   // context @ !
 339+ 8060 E7 6B
 340+ 8062 95 69                        dw      EXIT                    // ;
 341+ 8064
 342+ 8064              //  ______________________________________________________________________
 343+ 8064              //
 344+ 8064              // marker       -- cccc
 345+ 8064                              Colon_Def MARKER, "MARKER", is_immediate
 345+ 8064             >                New_Def  MARKER, "MARKER", Enter_Ptr, is_immediate ; ok
 345+ 8064             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 345+ 8064             >
 345+ 8064             >                // dummy db directives used to calculate length of namec
 345+ 8064 4D 41 52 4B >                db      "MARKER"
 345+ 8068 45 52       >
 345+ 806A             >len_NFA         defl    $ - temp_NFA
 345+ 806A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 345+ 8064             >
 345+ 8064 C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 345+ 8065 4D 41 52 4B >                db      "MARKER"               // name string in 7-bit ascii, but
 345+ 8069 45 52       >
 345+ 806B             >                org     $-1                 // alter last byte of Name just above to set
 345+ 806A D2          >                db      {b $} | END_BIT     // msb as name end
 345+ 806B             >
 345+ 806B 23 80       >                dw      last_NFA            // Link to previous definition Name
 345+ 806D             >MARKER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 345+ 806D CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 345+ 806F             >                else
 345+ 806F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 345+ 806F             >                endif           ; ok        // for other definitions it "points" the correct handler
 345+ 806F             >                // Use of "; ok" to suppress "warning[fwdref]"
 345+ 806F             >
 345+ 806F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 346+ 806F 35 72                        dw      CBUILDS
 347+ 8071 12 6E DA 6B                  dw      VOC_LINK, FETCH, COMMA
 347+ 8075 34 6F
 348+ 8077 86 6E DA 6B                  dw      CURRENT, FETCH, COMMA
 348+ 807B 34 6F
 349+ 807D 79 6E DA 6B                  dw      CONTEXT, FETCH, COMMA
 349+ 8081 34 6F
 350+ 8083 61 70 34 6F                  dw      LATEST, COMMA
 351+ 8087 61 70 9F 70                  dw      LATEST, PFA, LFA, FETCH, COMMA
 351+ 808B 71 70 DA 6B
 351+ 808F 34 6F
 352+ 8091 5D 72                        dw      DOES_TO
 353+ 8093 16 6B DA 6B                  dw      DUP, FETCH, VOC_LINK, STORE, CELL_PLUS
 353+ 8097 12 6E E7 6B
 353+ 809B 78 6A
 354+ 809D 16 6B DA 6B                  dw      DUP, FETCH, CURRENT, STORE, CELL_PLUS
 354+ 80A1 86 6E E7 6B
 354+ 80A5 78 6A
 355+ 80A7 16 6B DA 6B                  dw      DUP, FETCH, CONTEXT, STORE, CELL_PLUS
 355+ 80AB 79 6E E7 6B
 355+ 80AF 78 6A
 356+ 80B1 16 6B DA 6B                  dw      DUP, FETCH, DP, STORE, CELL_PLUS
 356+ 80B5 04 6E E7 6B
 356+ 80B9 78 6A
 357+ 80BB DA 6B 86 6E                  dw           FETCH, CURRENT, FETCH, STORE
 357+ 80BF DA 6B E7 6B
 358+ 80C3 95 69                        dw      EXIT
 359+ 80C5
 360+ 80C5              //  ______________________________________________________________________
 361+ 80C5              //
 362+ 80C5              // spaces       n --
 363+ 80C5                              Colon_Def SPACES, "SPACES", is_normal
 363+ 80C5             >                New_Def  SPACES, "SPACES", Enter_Ptr, is_normal ; ok
 363+ 80C5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 363+ 80C5             >
 363+ 80C5             >                // dummy db directives used to calculate length of namec
 363+ 80C5 53 50 41 43 >                db      "SPACES"
 363+ 80C9 45 53       >
 363+ 80CB             >len_NFA         defl    $ - temp_NFA
 363+ 80CB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 363+ 80C5             >
 363+ 80C5 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 363+ 80C6 53 50 41 43 >                db      "SPACES"               // name string in 7-bit ascii, but
 363+ 80CA 45 53       >
 363+ 80CC             >                org     $-1                 // alter last byte of Name just above to set
 363+ 80CB D3          >                db      {b $} | END_BIT     // msb as name end
 363+ 80CC             >
 363+ 80CC 64 80       >                dw      last_NFA            // Link to previous definition Name
 363+ 80CE             >SPACES:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 363+ 80CE CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 363+ 80D0             >                else
 363+ 80D0 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 363+ 80D0             >                endif           ; ok        // for other definitions it "points" the correct handler
 363+ 80D0             >                // Use of "; ok" to suppress "warning[fwdref]"
 363+ 80D0             >
 363+ 80D0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 364+ 80D0 46 6D DB 6F                  dw      ZERO, MAX
 365+ 80D4 46 6D D9 64                  dw      ZERO, C_Q_DO
 366+ 80D8 08 00                        dw      Spaces_Leave - $
 367+ 80DA              Spaces_Loop:
 368+ 80DA 29 70                        dw          SPACE
 369+ 80DC 94 64                        dw      C_LOOP
 370+ 80DE FC FF                        dw      Spaces_Loop - $
 371+ 80E0              Spaces_Leave:
 372+ 80E0 95 69                        dw      EXIT                    // ;
 373+ 80E2
 374+ 80E2              //  ______________________________________________________________________
 375+ 80E2              //
 376+ 80E2              // <#           --
 377+ 80E2                              Colon_Def BEGIN_DASH, "<#", is_normal
 377+ 80E2             >                New_Def  BEGIN_DASH, "<#", Enter_Ptr, is_normal ; ok
 377+ 80E2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 377+ 80E2             >
 377+ 80E2             >                // dummy db directives used to calculate length of namec
 377+ 80E2 3C 23       >                db      "<#"
 377+ 80E4             >len_NFA         defl    $ - temp_NFA
 377+ 80E4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 377+ 80E2             >
 377+ 80E2 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 377+ 80E3 3C 23       >                db      "<#"               // name string in 7-bit ascii, but
 377+ 80E5             >                org     $-1                 // alter last byte of Name just above to set
 377+ 80E4 A3          >                db      {b $} | END_BIT     // msb as name end
 377+ 80E5             >
 377+ 80E5 C5 80       >                dw      last_NFA            // Link to previous definition Name
 377+ 80E7             >BEGIN_DASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 377+ 80E7 CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 377+ 80E9             >                else
 377+ 80E9 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 377+ 80E9             >                endif           ; ok        // for other definitions it "points" the correct handler
 377+ 80E9             >                // Use of "; ok" to suppress "warning[fwdref]"
 377+ 80E9             >
 377+ 80E9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 378+ 80E9 07 74 C7 6E                  dw      PAD, HLD, STORE
 378+ 80ED E7 6B
 379+ 80EF 95 69                        dw      EXIT
 380+ 80F1
 381+ 80F1              //  ______________________________________________________________________
 382+ 80F1              //
 383+ 80F1              // #>           --
 384+ 80F1                              Colon_Def DASH_END, "#>", is_normal
 384+ 80F1             >                New_Def  DASH_END, "#>", Enter_Ptr, is_normal ; ok
 384+ 80F1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 384+ 80F1             >
 384+ 80F1             >                // dummy db directives used to calculate length of namec
 384+ 80F1 23 3E       >                db      "#>"
 384+ 80F3             >len_NFA         defl    $ - temp_NFA
 384+ 80F3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 384+ 80F1             >
 384+ 80F1 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 384+ 80F2 23 3E       >                db      "#>"               // name string in 7-bit ascii, but
 384+ 80F4             >                org     $-1                 // alter last byte of Name just above to set
 384+ 80F3 BE          >                db      {b $} | END_BIT     // msb as name end
 384+ 80F4             >
 384+ 80F4 E2 80       >                dw      last_NFA            // Link to previous definition Name
 384+ 80F6             >DASH_END:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 384+ 80F6 CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 384+ 80F8             >                else
 384+ 80F8 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 384+ 80F8             >                endif           ; ok        // for other definitions it "points" the correct handler
 384+ 80F8             >                // Use of "; ok" to suppress "warning[fwdref]"
 384+ 80F8             >
 384+ 80F8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 385+ 80F8 60 6B                        dw      TWO_DROP
 386+ 80FA C7 6E DA 6B                  dw      HLD, FETCH, PAD, OVER, SUBTRACT
 386+ 80FE 07 74 D1 6A
 386+ 8102 6C 6F
 387+ 8104 95 69                        dw      EXIT
 388+ 8106
 389+ 8106              //  ______________________________________________________________________
 390+ 8106              //
 391+ 8106              // sign         n d -- d
 392+ 8106                              Colon_Def SIGN, "SIGN", is_normal
 392+ 8106             >                New_Def  SIGN, "SIGN", Enter_Ptr, is_normal ; ok
 392+ 8106             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 392+ 8106             >
 392+ 8106             >                // dummy db directives used to calculate length of namec
 392+ 8106 53 49 47 4E >                db      "SIGN"
 392+ 810A             >len_NFA         defl    $ - temp_NFA
 392+ 810A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 392+ 8106             >
 392+ 8106 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 392+ 8107 53 49 47 4E >                db      "SIGN"               // name string in 7-bit ascii, but
 392+ 810B             >                org     $-1                 // alter last byte of Name just above to set
 392+ 810A CE          >                db      {b $} | END_BIT     // msb as name end
 392+ 810B             >
 392+ 810B F1 80       >                dw      last_NFA            // Link to previous definition Name
 392+ 810D             >SIGN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 392+ 810D CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 392+ 810F             >                else
 392+ 810F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 392+ 810F             >                endif           ; ok        // for other definitions it "points" the correct handler
 392+ 810F             >                // Use of "; ok" to suppress "warning[fwdref]"
 392+ 810F             >
 392+ 810F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 393+ 810F 23 6B FF 69                  dw      ROT, ZLESS
 394+ 8113 7F 64                        dw      ZBRANCH
 395+ 8115 08 00                        dw      Sign_Endif - $
 396+ 8117 45 64 2D 00                  dw          LIT, 45, HOLD
 396+ 811B F1 73
 397+ 811D              Sign_Endif:
 398+ 811D 95 69                        dw      EXIT
 399+ 811F
 400+ 811F              //  ______________________________________________________________________
 401+ 811F              //
 402+ 811F              // #           d1 -- d2
 403+ 811F                              Colon_Def DASH, "#", is_normal
 403+ 811F             >                New_Def  DASH, "#", Enter_Ptr, is_normal ; ok
 403+ 811F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 403+ 811F             >
 403+ 811F             >                // dummy db directives used to calculate length of namec
 403+ 811F 23          >                db      "#"
 403+ 8120             >len_NFA         defl    $ - temp_NFA
 403+ 8120             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 403+ 811F             >
 403+ 811F 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 403+ 8120 23          >                db      "#"               // name string in 7-bit ascii, but
 403+ 8121             >                org     $-1                 // alter last byte of Name just above to set
 403+ 8120 A3          >                db      {b $} | END_BIT     // msb as name end
 403+ 8121             >
 403+ 8121 06 81       >                dw      last_NFA            // Link to previous definition Name
 403+ 8123             >DASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 403+ 8123 CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 403+ 8125             >                else
 403+ 8125 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 403+ 8125             >                endif           ; ok        // for other definitions it "points" the correct handler
 403+ 8125             >                // Use of "; ok" to suppress "warning[fwdref]"
 403+ 8125             >
 403+ 8125             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 404+ 8125 9B 6E DA 6B                  dw      BASE, FETCH, MDIV_MOD, ROT
 404+ 8129 5F 7A 23 6B
 405+ 812D 45 64 09 00                  dw      LIT, 9, OVER, LESS
 405+ 8131 D1 6A 9B 6F
 406+ 8135 7F 64                        dw      ZBRANCH
 407+ 8137 08 00                        dw      Dash_Endif - $
 408+ 8139 45 64 07 00                  dw          LIT, 7, PLUS
 408+ 813D 27 6A
 409+ 813F              Dash_Endif:
 410+ 813F
 411+ 813F 45 64 30 00                  dw      LIT, 48, PLUS, HOLD
 411+ 8143 27 6A F1 73
 412+ 8147 95 69                        dw      EXIT
 413+ 8149
 414+ 8149              //  ______________________________________________________________________
 415+ 8149              //
 416+ 8149              // #s           d1 -- d2
 417+ 8149                              Colon_Def DASHES, "#S", is_normal
 417+ 8149             >                New_Def  DASHES, "#S", Enter_Ptr, is_normal ; ok
 417+ 8149             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 417+ 8149             >
 417+ 8149             >                // dummy db directives used to calculate length of namec
 417+ 8149 23 53       >                db      "#S"
 417+ 814B             >len_NFA         defl    $ - temp_NFA
 417+ 814B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 417+ 8149             >
 417+ 8149 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 417+ 814A 23 53       >                db      "#S"               // name string in 7-bit ascii, but
 417+ 814C             >                org     $-1                 // alter last byte of Name just above to set
 417+ 814B D3          >                db      {b $} | END_BIT     // msb as name end
 417+ 814C             >
 417+ 814C 1F 81       >                dw      last_NFA            // Link to previous definition Name
 417+ 814E             >DASHES:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 417+ 814E CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 417+ 8150             >                else
 417+ 8150 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 417+ 8150             >                endif           ; ok        // for other definitions it "points" the correct handler
 417+ 8150             >                // Use of "; ok" to suppress "warning[fwdref]"
 417+ 8150             >
 417+ 8150             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 418+ 8150              Dashes_Begin:
 419+ 8150 23 81 80 6B                  dw      DASH, TWO_DUP
 420+ 8154 39 69 EC 69                  dw          OR_OP, ZEQUAL
 421+ 8158 7F 64                        dw      ZBRANCH
 422+ 815A F6 FF                        dw      Dashes_Begin - $
 423+ 815C 95 69                        dw      EXIT
 424+ 815E
 425+ 815E              //  ______________________________________________________________________
 426+ 815E              //
 427+ 815E              // d.r          d n --
 428+ 815E                              Colon_Def D_DOT_R, "D.R", is_normal
 428+ 815E             >                New_Def  D_DOT_R, "D.R", Enter_Ptr, is_normal ; ok
 428+ 815E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 428+ 815E             >
 428+ 815E             >                // dummy db directives used to calculate length of namec
 428+ 815E 44 2E 52    >                db      "D.R"
 428+ 8161             >len_NFA         defl    $ - temp_NFA
 428+ 8161             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 428+ 815E             >
 428+ 815E 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 428+ 815F 44 2E 52    >                db      "D.R"               // name string in 7-bit ascii, but
 428+ 8162             >                org     $-1                 // alter last byte of Name just above to set
 428+ 8161 D2          >                db      {b $} | END_BIT     // msb as name end
 428+ 8162             >
 428+ 8162 49 81       >                dw      last_NFA            // Link to previous definition Name
 428+ 8164             >D_DOT_R:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 428+ 8164 CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 428+ 8166             >                else
 428+ 8166 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 428+ 8166             >                endif           ; ok        // for other definitions it "points" the correct handler
 428+ 8166             >                // Use of "; ok" to suppress "warning[fwdref]"
 428+ 8166             >
 428+ 8166             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 429+ 8166 BE 69                        dw      TO_R
 430+ 8168 09 6B D1 6A                  dw      SWAP, OVER, DABS
 430+ 816C AF 79
 431+ 816E E7 80 4E 81                  dw      BEGIN_DASH, DASHES, SIGN, DASH_END
 431+ 8172 0D 81 F6 80
 432+ 8176 D2 69                        dw      R_TO
 433+ 8178 D1 6A 6C 6F                  dw      OVER, SUBTRACT, SPACES, TYPE
 433+ 817C CE 80 97 72
 434+ 8180 95 69                        dw      EXIT
 435+ 8182
 436+ 8182              //  ______________________________________________________________________
 437+ 8182              //
 438+ 8182              // .r           n1 n2 --
 439+ 8182                              Colon_Def DOT_R, ".R", is_normal
 439+ 8182             >                New_Def  DOT_R, ".R", Enter_Ptr, is_normal ; ok
 439+ 8182             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 439+ 8182             >
 439+ 8182             >                // dummy db directives used to calculate length of namec
 439+ 8182 2E 52       >                db      ".R"
 439+ 8184             >len_NFA         defl    $ - temp_NFA
 439+ 8184             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 439+ 8182             >
 439+ 8182 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 439+ 8183 2E 52       >                db      ".R"               // name string in 7-bit ascii, but
 439+ 8185             >                org     $-1                 // alter last byte of Name just above to set
 439+ 8184 D2          >                db      {b $} | END_BIT     // msb as name end
 439+ 8185             >
 439+ 8185 5E 81       >                dw      last_NFA            // Link to previous definition Name
 439+ 8187             >DOT_R:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 439+ 8187 CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 439+ 8189             >                else
 439+ 8189 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 439+ 8189             >                endif           ; ok        // for other definitions it "points" the correct handler
 439+ 8189             >                // Use of "; ok" to suppress "warning[fwdref]"
 439+ 8189             >
 439+ 8189             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 440+ 8189 BE 69                        dw      TO_R
 441+ 818B 58 6F D2 69                  dw      S_TO_D, R_TO
 442+ 818F 64 81                        dw      D_DOT_R
 443+ 8191 95 69                        dw      EXIT
 444+ 8193
 445+ 8193              //  ______________________________________________________________________
 446+ 8193              //
 447+ 8193              // d.           d --
 448+ 8193                              Colon_Def D_DOT, "D.", is_normal
 448+ 8193             >                New_Def  D_DOT, "D.", Enter_Ptr, is_normal ; ok
 448+ 8193             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 448+ 8193             >
 448+ 8193             >                // dummy db directives used to calculate length of namec
 448+ 8193 44 2E       >                db      "D."
 448+ 8195             >len_NFA         defl    $ - temp_NFA
 448+ 8195             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 448+ 8193             >
 448+ 8193 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 448+ 8194 44 2E       >                db      "D."               // name string in 7-bit ascii, but
 448+ 8196             >                org     $-1                 // alter last byte of Name just above to set
 448+ 8195 AE          >                db      {b $} | END_BIT     // msb as name end
 448+ 8196             >
 448+ 8196 82 81       >                dw      last_NFA            // Link to previous definition Name
 448+ 8198             >D_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 448+ 8198 CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 448+ 819A             >                else
 448+ 819A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 448+ 819A             >                endif           ; ok        // for other definitions it "points" the correct handler
 448+ 819A             >                // Use of "; ok" to suppress "warning[fwdref]"
 448+ 819A             >
 448+ 819A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 449+ 819A 46 6D 64 81                  dw      ZERO, D_DOT_R, SPACE
 449+ 819E 29 70
 450+ 81A0 95 69                        dw      EXIT
 451+ 81A2
 452+ 81A2              //  ______________________________________________________________________
 453+ 81A2              //
 454+ 81A2              // .            n --
 455+ 81A2                              Colon_Def DOT, ".", is_normal
 455+ 81A2             >                New_Def  DOT, ".", Enter_Ptr, is_normal ; ok
 455+ 81A2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 455+ 81A2             >
 455+ 81A2             >                // dummy db directives used to calculate length of namec
 455+ 81A2 2E          >                db      "."
 455+ 81A3             >len_NFA         defl    $ - temp_NFA
 455+ 81A3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 455+ 81A2             >
 455+ 81A2 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 455+ 81A3 2E          >                db      "."               // name string in 7-bit ascii, but
 455+ 81A4             >                org     $-1                 // alter last byte of Name just above to set
 455+ 81A3 AE          >                db      {b $} | END_BIT     // msb as name end
 455+ 81A4             >
 455+ 81A4 93 81       >                dw      last_NFA            // Link to previous definition Name
 455+ 81A6             >DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 455+ 81A6 CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 455+ 81A8             >                else
 455+ 81A8 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 455+ 81A8             >                endif           ; ok        // for other definitions it "points" the correct handler
 455+ 81A8             >                // Use of "; ok" to suppress "warning[fwdref]"
 455+ 81A8             >
 455+ 81A8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 456+ 81A8 58 6F 98 81                  dw      S_TO_D, D_DOT
 457+ 81AC 95 69                        dw      EXIT
 458+ 81AE
 459+ 81AE              //  ______________________________________________________________________
 460+ 81AE              //
 461+ 81AE              // ?            n --
 462+ 81AE                              Colon_Def QUESTION, "?", is_normal
 462+ 81AE             >                New_Def  QUESTION, "?", Enter_Ptr, is_normal ; ok
 462+ 81AE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 462+ 81AE             >
 462+ 81AE             >                // dummy db directives used to calculate length of namec
 462+ 81AE 3F          >                db      "?"
 462+ 81AF             >len_NFA         defl    $ - temp_NFA
 462+ 81AF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 462+ 81AE             >
 462+ 81AE 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 462+ 81AF 3F          >                db      "?"               // name string in 7-bit ascii, but
 462+ 81B0             >                org     $-1                 // alter last byte of Name just above to set
 462+ 81AF BF          >                db      {b $} | END_BIT     // msb as name end
 462+ 81B0             >
 462+ 81B0 A2 81       >                dw      last_NFA            // Link to previous definition Name
 462+ 81B2             >QUESTION:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 462+ 81B2 CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 462+ 81B4             >                else
 462+ 81B4 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 462+ 81B4             >                endif           ; ok        // for other definitions it "points" the correct handler
 462+ 81B4             >                // Use of "; ok" to suppress "warning[fwdref]"
 462+ 81B4             >
 462+ 81B4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 463+ 81B4 DA 6B A6 81                  dw      FETCH, DOT
 464+ 81B8 95 69                        dw      EXIT
 465+ 81BA
 466+ 81BA              //  ______________________________________________________________________
 467+ 81BA              //
 468+ 81BA              // u.           u --
 469+ 81BA                              Colon_Def U_DOT, "U.", is_normal
 469+ 81BA             >                New_Def  U_DOT, "U.", Enter_Ptr, is_normal ; ok
 469+ 81BA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 469+ 81BA             >
 469+ 81BA             >                // dummy db directives used to calculate length of namec
 469+ 81BA 55 2E       >                db      "U."
 469+ 81BC             >len_NFA         defl    $ - temp_NFA
 469+ 81BC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 469+ 81BA             >
 469+ 81BA 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 469+ 81BB 55 2E       >                db      "U."               // name string in 7-bit ascii, but
 469+ 81BD             >                org     $-1                 // alter last byte of Name just above to set
 469+ 81BC AE          >                db      {b $} | END_BIT     // msb as name end
 469+ 81BD             >
 469+ 81BD AE 81       >                dw      last_NFA            // Link to previous definition Name
 469+ 81BF             >U_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 469+ 81BF CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 469+ 81C1             >                else
 469+ 81C1 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 469+ 81C1             >                endif           ; ok        // for other definitions it "points" the correct handler
 469+ 81C1             >                // Use of "; ok" to suppress "warning[fwdref]"
 469+ 81C1             >
 469+ 81C1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 470+ 81C1 46 6D 98 81                  dw      ZERO, D_DOT
 471+ 81C5 95 69                        dw      EXIT
 472+ 81C7
 473+ 81C7              //  ______________________________________________________________________
 474+ 81C7              //
 475+ 81C7              // words        --
 476+ 81C7                              Colon_Def WORDS, "WORDS", is_normal
 476+ 81C7             >                New_Def  WORDS, "WORDS", Enter_Ptr, is_normal ; ok
 476+ 81C7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 476+ 81C7             >
 476+ 81C7             >                // dummy db directives used to calculate length of namec
 476+ 81C7 57 4F 52 44 >                db      "WORDS"
 476+ 81CB 53          >
 476+ 81CC             >len_NFA         defl    $ - temp_NFA
 476+ 81CC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 476+ 81C7             >
 476+ 81C7 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 476+ 81C8 57 4F 52 44 >                db      "WORDS"               // name string in 7-bit ascii, but
 476+ 81CC 53          >
 476+ 81CD             >                org     $-1                 // alter last byte of Name just above to set
 476+ 81CC D3          >                db      {b $} | END_BIT     // msb as name end
 476+ 81CD             >
 476+ 81CD BA 81       >                dw      last_NFA            // Link to previous definition Name
 476+ 81CF             >WORDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 476+ 81CF CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 476+ 81D1             >                else
 476+ 81D1 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 476+ 81D1             >                endif           ; ok        // for other definitions it "points" the correct handler
 476+ 81D1             >                // Use of "; ok" to suppress "warning[fwdref]"
 476+ 81D1             >
 476+ 81D1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 477+ 81D1 45 64 80 00                  dw      LIT, 128, OUT, STORE
 477+ 81D5 57 6E E7 6B
 478+ 81D9 79 6E DA 6B                  dw      CONTEXT, FETCH, FETCH
 478+ 81DD DA 6B
 479+ 81DF              Words_Begin:
 480+ 81DF 16 6B F5 6B                  dw          DUP, CFETCH, LIT, $1F, AND_OP
 480+ 81E3 45 64 1F 00
 480+ 81E7 27 69
 481+ 81E9 57 6E DA 6B                  dw          OUT, FETCH, PLUS
 481+ 81ED 27 6A
 482+ 81EF 7A 6D 9B 6F                  dw          CL, LESS, ZEQUAL
 482+ 81F3 EC 69
 483+ 81F5 7F 64                        dw          ZBRANCH
 484+ 81F7 0A 00                        dw          Words_Endif - $
 485+ 81F9 7C 68 46 6D                  dw              CR, ZERO, OUT, STORE
 485+ 81FD 57 6E E7 6B
 486+ 8201              Words_Endif:
 487+ 8201 16 6B 3D 76                  dw          DUP, ID_DOT
 488+ 8205 9F 70 71 70                  dw          PFA, LFA, FETCH
 488+ 8209 DA 6B
 489+ 820B 16 6B EC 69                  dw          DUP, ZEQUAL
 490+ 820F 86 67 39 69                  dw          QTERMINAL, OR_OP
 491+ 8213 7F 64                        dw      ZBRANCH
 492+ 8215 CA FF                        dw      Words_Begin - $
 493+ 8217 E1 6A                        dw      DROP
 494+ 8219 95 69                        dw      EXIT
 495+ 821B
 496+ 821B              //  ______________________________________________________________________
 497+ 821B              //
 498+ 821B              // list         n --
 499+ 821B                              Colon_Def LIST, "LIST", is_normal
 499+ 821B             >                New_Def  LIST, "LIST", Enter_Ptr, is_normal ; ok
 499+ 821B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 499+ 821B             >
 499+ 821B             >                // dummy db directives used to calculate length of namec
 499+ 821B 4C 49 53 54 >                db      "LIST"
 499+ 821F             >len_NFA         defl    $ - temp_NFA
 499+ 821F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 499+ 821B             >
 499+ 821B 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 499+ 821C 4C 49 53 54 >                db      "LIST"               // name string in 7-bit ascii, but
 499+ 8220             >                org     $-1                 // alter last byte of Name just above to set
 499+ 821F D4          >                db      {b $} | END_BIT     // msb as name end
 499+ 8220             >
 499+ 8220 C7 81       >                dw      last_NFA            // Link to previous definition Name
 499+ 8222             >LIST:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 499+ 8222 CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 499+ 8224             >                else
 499+ 8224 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 499+ 8224             >                endif           ; ok        // for other definitions it "points" the correct handler
 499+ 8224             >                // Use of "; ok" to suppress "warning[fwdref]"
 499+ 8224             >
 499+ 8224             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 500+ 8224 F1 71 7C 68                  dw      DECIMAL, CR
 501+ 8228 16 6B 60 6E                  dw      DUP, SCR, STORE
 501+ 822C E7 6B
 502+ 822E 69 74                        dw      C_DOT_QUOTE
 503+ 8230 05 53 63 72                  db      5, "Scr# "
 503+ 8234 23 20
 504+ 8236 A6 81                        dw      DOT
 505+ 8238 9E 6D 46 6D                  dw      LSCR, ZERO, C_DO
 505+ 823C 07 65
 506+ 823E              List_Loop:
 507+ 823E 7C 68                        dw          CR
 508+ 8240 12 65 5E 6D                  dw          I, THREE
 509+ 8244 87 81 29 70                  dw          DOT_R, SPACE
 510+ 8248 12 65 60 6E                  dw          I, SCR, FETCH, DOT_LINE
 510+ 824C DA 6B A4 7A
 511+ 8250 86 67                        dw          QTERMINAL
 512+ 8252 7F 64                        dw          ZBRANCH
 513+ 8254 04 00                        dw          List_Endif - $
 514+ 8256 AB 69                        dw              LEAVE
 515+ 8258              List_Endif:
 516+ 8258 94 64                        dw      C_LOOP
 517+ 825A E4 FF                        dw      List_Loop - $
 518+ 825C 7C 68                        dw      CR
 519+ 825E 95 69                        dw      EXIT
 520+ 8260
 521+ 8260              //  ______________________________________________________________________
 522+ 8260              //
 523+ 8260              // index        n1 n2 --
 524+ 8260                              Colon_Def INDEX, "INDEX", is_normal
 524+ 8260             >                New_Def  INDEX, "INDEX", Enter_Ptr, is_normal ; ok
 524+ 8260             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 524+ 8260             >
 524+ 8260             >                // dummy db directives used to calculate length of namec
 524+ 8260 49 4E 44 45 >                db      "INDEX"
 524+ 8264 58          >
 524+ 8265             >len_NFA         defl    $ - temp_NFA
 524+ 8265             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 524+ 8260             >
 524+ 8260 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 524+ 8261 49 4E 44 45 >                db      "INDEX"               // name string in 7-bit ascii, but
 524+ 8265 58          >
 524+ 8266             >                org     $-1                 // alter last byte of Name just above to set
 524+ 8265 D8          >                db      {b $} | END_BIT     // msb as name end
 524+ 8266             >
 524+ 8266 1B 82       >                dw      last_NFA            // Link to previous definition Name
 524+ 8268             >INDEX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 524+ 8268 CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 524+ 826A             >                else
 524+ 826A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 524+ 826A             >                endif           ; ok        // for other definitions it "points" the correct handler
 524+ 826A             >                // Use of "; ok" to suppress "warning[fwdref]"
 524+ 826A             >
 524+ 826A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 525+ 826A 50 6A 09 6B                  dw      ONE_PLUS, SWAP, C_DO
 525+ 826E 07 65
 526+ 8270              Index_Loop:
 527+ 8270 7C 68 12 65                  dw          CR, I, THREE
 527+ 8274 5E 6D
 528+ 8276 87 81 29 70                  dw          DOT_R, SPACE
 529+ 827A 46 6D 12 65                  dw          ZERO, I, DOT_LINE
 529+ 827E A4 7A
 530+ 8280 86 67                        dw          QTERMINAL
 531+ 8282 7F 64                        dw          ZBRANCH
 532+ 8284 04 00                        dw          Index_Endif - $
 533+ 8286 AB 69                        dw              LEAVE
 534+ 8288              Index_Endif:
 535+ 8288 94 64                        dw      C_LOOP
 536+ 828A E6 FF                        dw      Index_Loop - $
 537+ 828C 95 69                        dw      EXIT
 538+ 828E
 539+ 828E              //  ______________________________________________________________________
 540+ 828E              //
 541+ 828E              // cls          --
 542+ 828E                              Colon_Def CLS, "CLS", is_normal
 542+ 828E             >                New_Def  CLS, "CLS", Enter_Ptr, is_normal ; ok
 542+ 828E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 542+ 828E             >
 542+ 828E             >                // dummy db directives used to calculate length of namec
 542+ 828E 43 4C 53    >                db      "CLS"
 542+ 8291             >len_NFA         defl    $ - temp_NFA
 542+ 8291             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 542+ 828E             >
 542+ 828E 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 542+ 828F 43 4C 53    >                db      "CLS"               // name string in 7-bit ascii, but
 542+ 8292             >                org     $-1                 // alter last byte of Name just above to set
 542+ 8291 D3          >                db      {b $} | END_BIT     // msb as name end
 542+ 8292             >
 542+ 8292 60 82       >                dw      last_NFA            // Link to previous definition Name
 542+ 8294             >CLS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 542+ 8294 CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 542+ 8296             >                else
 542+ 8296 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 542+ 8296             >                endif           ; ok        // for other definitions it "points" the correct handler
 542+ 8296             >                // Use of "; ok" to suppress "warning[fwdref]"
 542+ 8296             >
 542+ 8296             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 543+ 8296 45 64 0E 00                  dw      LIT, $0E, EMITC
 543+ 829A 65 66
 544+ 829C 95 69                        dw      EXIT
 545+ 829E
 546+ 829E              //  ______________________________________________________________________
 547+ 829E              //
 548+ 829E              // splash       --
 549+ 829E                              Colon_Def SPLASH, "SPLASH", is_normal
 549+ 829E             >                New_Def  SPLASH, "SPLASH", Enter_Ptr, is_normal ; ok
 549+ 829E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 549+ 829E             >
 549+ 829E             >                // dummy db directives used to calculate length of namec
 549+ 829E 53 50 4C 41 >                db      "SPLASH"
 549+ 82A2 53 48       >
 549+ 82A4             >len_NFA         defl    $ - temp_NFA
 549+ 82A4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 549+ 829E             >
 549+ 829E 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 549+ 829F 53 50 4C 41 >                db      "SPLASH"               // name string in 7-bit ascii, but
 549+ 82A3 53 48       >
 549+ 82A5             >                org     $-1                 // alter last byte of Name just above to set
 549+ 82A4 C8          >                db      {b $} | END_BIT     // msb as name end
 549+ 82A5             >
 549+ 82A5 8E 82       >                dw      last_NFA            // Link to previous definition Name
 549+ 82A7             >SPLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 549+ 82A7 CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 549+ 82A9             >                else
 549+ 82A9 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 549+ 82A9             >                endif           ; ok        // for other definitions it "points" the correct handler
 549+ 82A9             >                // Use of "; ok" to suppress "warning[fwdref]"
 549+ 82A9             >
 549+ 82A9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 550+ 82A9 94 82                        dw      CLS
 551+ 82AB 69 74                        dw      C_DOT_QUOTE
 552+ 82AD 45                           db      69
 553+ 82AE 76 2D 46 6F                  db      "v-Forth 1.5 NextZXOS version", 13
 553+ 82B2 72 74 68 20
 553+ 82B6 31 2E 35 20
 553+ 82BA 4E 65 78 74
 553+ 82BE 5A 58 4F 53
 553+ 82C2 20 76 65 72
 553+ 82C6 73 69 6F 6E
 553+ 82CA 0D
 554+ 82CB 62 75 69 6C                  db      "build 20210328", 13
 554+ 82CF 64 20 32 30
 554+ 82D3 32 31 30 33
 554+ 82D7 32 38 0D
 555+ 82DA 31 39 39 30                  db      "1990-2021 Matteo Vitturi", 13
 555+ 82DE 2D 32 30 32
 555+ 82E2 31 20 4D 61
 555+ 82E6 74 74 65 6F
 555+ 82EA 20 56 69 74
 555+ 82EE 74 75 72 69
 555+ 82F2 0D
 556+ 82F3 95 69                        dw      EXIT
 557+ 82F5
 558+ 82F5              //  ______________________________________________________________________
 559+ 82F5              //
 560+ 82F5              // video        --
 561+ 82F5                              Colon_Def VIDEO, "VIDEO", is_normal
 561+ 82F5             >                New_Def  VIDEO, "VIDEO", Enter_Ptr, is_normal ; ok
 561+ 82F5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 561+ 82F5             >
 561+ 82F5             >                // dummy db directives used to calculate length of namec
 561+ 82F5 56 49 44 45 >                db      "VIDEO"
 561+ 82F9 4F          >
 561+ 82FA             >len_NFA         defl    $ - temp_NFA
 561+ 82FA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 561+ 82F5             >
 561+ 82F5 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 561+ 82F6 56 49 44 45 >                db      "VIDEO"               // name string in 7-bit ascii, but
 561+ 82FA 4F          >
 561+ 82FB             >                org     $-1                 // alter last byte of Name just above to set
 561+ 82FA CF          >                db      {b $} | END_BIT     // msb as name end
 561+ 82FB             >
 561+ 82FB 9E 82       >                dw      last_NFA            // Link to previous definition Name
 561+ 82FD             >VIDEO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 561+ 82FD CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 561+ 82FF             >                else
 561+ 82FF ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 561+ 82FF             >                endif           ; ok        // for other definitions it "points" the correct handler
 561+ 82FF             >                // Use of "; ok" to suppress "warning[fwdref]"
 561+ 82FF             >
 561+ 82FF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 562+ 82FF 56 6D 16 6B                  dw      TWO, DUP, DEVICE, STORE
 562+ 8303 EC 7A E7 6B
 563+ 8307 1D 7B                        dw      SELECT
 564+ 8309 95 69                        dw      EXIT
 565+ 830B
 566+ 830B              //  ______________________________________________________________________
 567+ 830B              //
 568+ 830B              // accept-      a n1 -- n2
 569+ 830B                              Colon_Def ACCEPT_N, "ACCEPT-", is_normal
 569+ 830B             >                New_Def  ACCEPT_N, "ACCEPT-", Enter_Ptr, is_normal ; ok
 569+ 830B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 569+ 830B             >
 569+ 830B             >                // dummy db directives used to calculate length of namec
 569+ 830B 41 43 43 45 >                db      "ACCEPT-"
 569+ 830F 50 54 2D    >
 569+ 8312             >len_NFA         defl    $ - temp_NFA
 569+ 8312             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 569+ 830B             >
 569+ 830B 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 569+ 830C 41 43 43 45 >                db      "ACCEPT-"               // name string in 7-bit ascii, but
 569+ 8310 50 54 2D    >
 569+ 8313             >                org     $-1                 // alter last byte of Name just above to set
 569+ 8312 AD          >                db      {b $} | END_BIT     // msb as name end
 569+ 8313             >
 569+ 8313 F5 82       >                dw      last_NFA            // Link to previous definition Name
 569+ 8315             >ACCEPT_N:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 569+ 8315 CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 569+ 8317             >                else
 569+ 8317 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 569+ 8317             >                endif           ; ok        // for other definitions it "points" the correct handler
 569+ 8317             >                // Use of "; ok" to suppress "warning[fwdref]"
 569+ 8317             >
 569+ 8317             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 570+ 8317 BE 69                        dw      TO_R
 571+ 8319 46 6D                        dw      ZERO
 572+ 831B 09 6B                        dw      SWAP
 573+ 831D 16 6B                        dw      DUP
 574+ 831F D2 69                        dw      R_TO
 575+ 8321 27 6A                        dw      PLUS
 576+ 8323 09 6B                        dw      SWAP
 577+ 8325 07 65                        dw      C_DO
 578+ 8327              AcceptN_Loop:
 579+ 8327 6D 7B                        dw          MMU7_FETCH
 580+ 8329 F8 7A                        dw          INKEY
 581+ 832B 09 6B 7F 7B                  dw          SWAP, MMU7_STORE
 582+ 832F 16 6B EC 69                  dw          DUP, ZEQUAL
 583+ 8333 7F 64                        dw          ZBRANCH
 584+ 8335 06 00                        dw          AcceptN_Endif_1 - $
 585+ 8337 FD 82 88 78                  dw              VIDEO, QUIT
 586+ 833B              AcceptN_Endif_1:
 587+ 833B 16 6B 45 64                  dw          DUP, LIT, 13, EQUALS
 587+ 833F 0D 00 7A 6F
 588+ 8343 7F 64                        dw          ZBRANCH
 589+ 8345 06 00                        dw          AcceptN_Endif_2 - $
 590+ 8347 E1 6A 46 6D                  dw              DROP, ZERO
 591+ 834B              AcceptN_Endif_2:
 592+ 834B 16 6B 45 64                  dw          DUP, LIT, 10, EQUALS
 592+ 834F 0A 00 7A 6F
 593+ 8353 7F 64                        dw          ZBRANCH
 594+ 8355 06 00                        dw          AcceptN_Endif_3 - $
 595+ 8357 E1 6A 46 6D                  dw              DROP, ZERO
 596+ 835B              AcceptN_Endif_3:
 597+ 835B 16 6B EC 69                  dw          DUP, ZEQUAL
 598+ 835F 7F 64                        dw          ZBRANCH
 599+ 8361 04 00                        dw          AcceptN_Endif_4 - $
 600+ 8363 AB 69                        dw              LEAVE
 601+ 8365              AcceptN_Endif_4:
 602+ 8365 12 65 03 6C                  dw          I, CSTORE, ONE_PLUS
 602+ 8369 50 6A
 603+ 836B 94 64                        dw      C_LOOP
 604+ 836D BA FF                        dw      AcceptN_Loop -$
 605+ 836F 95 69                        dw      EXIT
 606+ 8371
 607+ 8371              //  ______________________________________________________________________
 608+ 8371              //
 609+ 8371              // load-        n --
 610+ 8371              // Provided that a stream n is OPEN# via the standart BASIC
 611+ 8371              // it accepts text from stream #n to the normal INTERPRET
 612+ 8371              // up to now, text-file must end with QUIT
 613+ 8371                              Colon_Def LOAD_N, "LOAD-", is_normal
 613+ 8371             >                New_Def  LOAD_N, "LOAD-", Enter_Ptr, is_normal ; ok
 613+ 8371             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 613+ 8371             >
 613+ 8371             >                // dummy db directives used to calculate length of namec
 613+ 8371 4C 4F 41 44 >                db      "LOAD-"
 613+ 8375 2D          >
 613+ 8376             >len_NFA         defl    $ - temp_NFA
 613+ 8376             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 613+ 8371             >
 613+ 8371 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 613+ 8372 4C 4F 41 44 >                db      "LOAD-"               // name string in 7-bit ascii, but
 613+ 8376 2D          >
 613+ 8377             >                org     $-1                 // alter last byte of Name just above to set
 613+ 8376 AD          >                db      {b $} | END_BIT     // msb as name end
 613+ 8377             >
 613+ 8377 0B 83       >                dw      last_NFA            // Link to previous definition Name
 613+ 8379             >LOAD_N:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 613+ 8379 CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 613+ 837B             >                else
 613+ 837B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 613+ 837B             >                endif           ; ok        // for other definitions it "points" the correct handler
 613+ 837B             >                // Use of "; ok" to suppress "warning[fwdref]"
 613+ 837B             >
 613+ 837B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 614+ 837B FC 6E E7 6B                  dw      SOURCE_ID, STORE
 615+ 837F              Load_N_Begin:
 616+ 837F D9 6D DA 6B                  dw          TIB, FETCH
 617+ 8383 16 6B 45 64                  dw          DUP, LIT, 80
 617+ 8387 50 00
 618+ 8389 80 6B E2 73                  dw          TWO_DUP, BLANKS
 619+ 838D FC 6E DA 6B                  dw          SOURCE_ID, FETCH
 620+ 8391 A0 79 16 6B                  dw          ABS_OP, DUP, DEVICE, STORE
 620+ 8395 EC 7A E7 6B
 621+ 8399 1D 7B                        dw          SELECT
 622+ 839B 15 83                        dw          ACCEPT_N
 623+ 839D FD 82                        dw          VIDEO
 624+ 839F 60 6B                        dw          TWO_DROP
 625+ 83A1 46 6D 45 6E                  dw          ZERO, BLK, STORE
 625+ 83A5 E7 6B
 626+ 83A7 46 6D 4E 6E                  dw          ZERO, TO_IN, STORE
 626+ 83AB E7 6B
 627+ 83AD BA 77                        dw          INTERPRET
 628+ 83AF 86 67                        dw          QTERMINAL
 629+ 83B1 7F 64                        dw      ZBRANCH
 630+ 83B3 CC FF                        dw      Load_N_Begin - $
 631+ 83B5 95 69                        dw      EXIT
 632+ 83B7
 633+ 83B7              //  ______________________________________________________________________
 634+ 83B7              //
 635+ 83B7              // load         n --
 636+ 83B7              // if n is positive, it loads screen #n (as usual)
 637+ 83B7              // if n is negative, it connects stream #n to the normal INTERPRET
 638+ 83B7              // this second way is useful if you want to load any kind of file
 639+ 83B7              // provied that it is OPEN# the usual BASIC way.
 640+ 83B7                              Colon_Def LOAD, "LOAD", is_normal
 640+ 83B7             >                New_Def  LOAD, "LOAD", Enter_Ptr, is_normal ; ok
 640+ 83B7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 640+ 83B7             >
 640+ 83B7             >                // dummy db directives used to calculate length of namec
 640+ 83B7 4C 4F 41 44 >                db      "LOAD"
 640+ 83BB             >len_NFA         defl    $ - temp_NFA
 640+ 83BB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 640+ 83B7             >
 640+ 83B7 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 640+ 83B8 4C 4F 41 44 >                db      "LOAD"               // name string in 7-bit ascii, but
 640+ 83BC             >                org     $-1                 // alter last byte of Name just above to set
 640+ 83BB C4          >                db      {b $} | END_BIT     // msb as name end
 640+ 83BC             >
 640+ 83BC 71 83       >                dw      last_NFA            // Link to previous definition Name
 640+ 83BE             >LOAD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 640+ 83BE CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 640+ 83C0             >                else
 640+ 83C0 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 640+ 83C0             >                endif           ; ok        // for other definitions it "points" the correct handler
 640+ 83C0             >                // Use of "; ok" to suppress "warning[fwdref]"
 640+ 83C0             >
 640+ 83C0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 641+ 83C0 16 6B FF 69                  dw      DUP, ZLESS
 642+ 83C4 7F 64                        dw      ZBRANCH
 643+ 83C6 08 00                        dw      Load_Else - $
 644+ 83C8 79 83                        dw          LOAD_N
 645+ 83CA 68 64                        dw      BRANCH
 646+ 83CC 04 00                        dw      Load_Endif - $
 647+ 83CE              Load_Else:
 648+ 83CE C3 7F                        dw          LOAD_P
 649+ 83D0              Load_Endif:
 650+ 83D0 95 69                        dw      EXIT
 651+ 83D2
 652+ 83D2
 653+ 83D2              //  ______________________________________________________________________
 654+ 83D2              //
 655+ 83D2              // autoexec     --
 656+ 83D2              // this word is called the first time the Forth system boot to
 657+ 83D2              // load Screen# 1. Once called it patches itself to prevent furhter runs.
 658+ 83D2                              Colon_Def AUTOEXEC, "AUTOEXEC", is_normal
 658+ 83D2             >                New_Def  AUTOEXEC, "AUTOEXEC", Enter_Ptr, is_normal ; ok
 658+ 83D2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 658+ 83D2             >
 658+ 83D2             >                // dummy db directives used to calculate length of namec
 658+ 83D2 41 55 54 4F >                db      "AUTOEXEC"
 658+ 83D6 45 58 45 43 >
 658+ 83DA             >len_NFA         defl    $ - temp_NFA
 658+ 83DA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 658+ 83D2             >
 658+ 83D2 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 658+ 83D3 41 55 54 4F >                db      "AUTOEXEC"               // name string in 7-bit ascii, but
 658+ 83D7 45 58 45 43 >
 658+ 83DB             >                org     $-1                 // alter last byte of Name just above to set
 658+ 83DA C3          >                db      {b $} | END_BIT     // msb as name end
 658+ 83DB             >
 658+ 83DB B7 83       >                dw      last_NFA            // Link to previous definition Name
 658+ 83DD             >AUTOEXEC:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 658+ 83DD CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 658+ 83DF             >                else
 658+ 83DF ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 658+ 83DF             >                endif           ; ok        // for other definitions it "points" the correct handler
 658+ 83DF             >                // Use of "; ok" to suppress "warning[fwdref]"
 658+ 83DF             >
 658+ 83DF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 659+ 83DF 45 64 0B 00                  dw      LIT, 11
 660+ 83E3 45 64 F3 6C                  dw      LIT, NOOP
 661+ 83E7 45 64 CF 78                  dw      LIT, Autoexec_Ptr
 662+ 83EB E7 6B                        dw      STORE
 663+ 83ED BE 83                        dw      LOAD
 664+ 83EF 88 78                        dw      QUIT
 665+ 83F1 95 69                        dw      EXIT
 666+ 83F3
 667+ 83F3
 668+ 83F3              //  ______________________________________________________________________
 669+ 83F3              //
 670+ 83F3              // bye     --
 671+ 83F3              //
 672+ 83F3                              Colon_Def BYE, "BYE", is_normal
 672+ 83F3             >                New_Def  BYE, "BYE", Enter_Ptr, is_normal ; ok
 672+ 83F3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 672+ 83F3             >
 672+ 83F3             >                // dummy db directives used to calculate length of namec
 672+ 83F3 42 59 45    >                db      "BYE"
 672+ 83F6             >len_NFA         defl    $ - temp_NFA
 672+ 83F6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 672+ 83F3             >
 672+ 83F3 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 672+ 83F4 42 59 45    >                db      "BYE"               // name string in 7-bit ascii, but
 672+ 83F7             >                org     $-1                 // alter last byte of Name just above to set
 672+ 83F6 C5          >                db      {b $} | END_BIT     // msb as name end
 672+ 83F7             >
 672+ 83F7 D2 83       >                dw      last_NFA            // Link to previous definition Name
 672+ 83F9             >BYE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 672+ 83F9 CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 672+ 83FB             >                else
 672+ 83FB ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 672+ 83FB             >                endif           ; ok        // for other definitions it "points" the correct handler
 672+ 83FB             >                // Use of "; ok" to suppress "warning[fwdref]"
 672+ 83FB             >
 672+ 83FB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 673+ 83FB 31 7E                        dw      FLUSH
 674+ 83FD 62 7D                        dw      EMPTY_BUFFERS
 675+ 83FF 06 7C DA 6B                  dw      BLK_FH, FETCH, F_CLOSE, DROP
 675+ 8403 29 68 E1 6A
 676+ 8407 46 6D AC 6D                  dw      ZERO, PLUS_ORIGIN
 677+ 840B 65 79                        dw      BASIC
 678+ 840D
 679+ 840D              //  ______________________________________________________________________
 680+ 840D              //
 681+ 840D              // invv     --
 682+ 840D              //
 683+ 840D                              Colon_Def INVV, "INVV", is_normal
 683+ 840D             >                New_Def  INVV, "INVV", Enter_Ptr, is_normal ; ok
 683+ 840D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 683+ 840D             >
 683+ 840D             >                // dummy db directives used to calculate length of namec
 683+ 840D 49 4E 56 56 >                db      "INVV"
 683+ 8411             >len_NFA         defl    $ - temp_NFA
 683+ 8411             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 683+ 840D             >
 683+ 840D 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 683+ 840E 49 4E 56 56 >                db      "INVV"               // name string in 7-bit ascii, but
 683+ 8412             >                org     $-1                 // alter last byte of Name just above to set
 683+ 8411 D6          >                db      {b $} | END_BIT     // msb as name end
 683+ 8412             >
 683+ 8412 F3 83       >                dw      last_NFA            // Link to previous definition Name
 683+ 8414             >INVV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 683+ 8414 CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 683+ 8416             >                else
 683+ 8416 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 683+ 8416             >                endif           ; ok        // for other definitions it "points" the correct handler
 683+ 8416             >                // Use of "; ok" to suppress "warning[fwdref]"
 683+ 8416             >
 683+ 8416             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 684+ 8416 45 64 14 00                  dw      LIT, 20, EMITC, ONE, EMITC
 684+ 841A 65 66 4E 6D
 684+ 841E 65 66
 685+ 8420 95 69                        dw      EXIT
 686+ 8422
 687+ 8422              //  ______________________________________________________________________
 688+ 8422              //
 689+ 8422              // truv     --
 690+ 8422              //
 691+ 8422                              Colon_Def TRUV, "TRUV", is_normal
 691+ 8422             >                New_Def  TRUV, "TRUV", Enter_Ptr, is_normal ; ok
 691+ 8422             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 691+ 8422             >
 691+ 8422             >                // dummy db directives used to calculate length of namec
 691+ 8422 54 52 55 56 >                db      "TRUV"
 691+ 8426             >len_NFA         defl    $ - temp_NFA
 691+ 8426             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 691+ 8422             >
 691+ 8422 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 691+ 8423 54 52 55 56 >                db      "TRUV"               // name string in 7-bit ascii, but
 691+ 8427             >                org     $-1                 // alter last byte of Name just above to set
 691+ 8426 D6          >                db      {b $} | END_BIT     // msb as name end
 691+ 8427             >
 691+ 8427 0D 84       >                dw      last_NFA            // Link to previous definition Name
 691+ 8429             >TRUV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 691+ 8429 CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 691+ 842B             >                else
 691+ 842B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 691+ 842B             >                endif           ; ok        // for other definitions it "points" the correct handler
 691+ 842B             >                // Use of "; ok" to suppress "warning[fwdref]"
 691+ 842B             >
 691+ 842B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 692+ 842B 45 64 14 00                  dw      LIT, 20, EMITC, ZERO, EMITC
 692+ 842F 65 66 46 6D
 692+ 8433 65 66
 693+ 8435 95 69                        dw      EXIT
 694+ 8437
 695+ 8437              //  ______________________________________________________________________
 696+ 8437              //
 697+ 8437              // mark     --
 698+ 8437              //
 699+ 8437                              Colon_Def MARK, "MARK", is_normal
 699+ 8437             >                New_Def  MARK, "MARK", Enter_Ptr, is_normal ; ok
 699+ 8437             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 699+ 8437             >
 699+ 8437             >                // dummy db directives used to calculate length of namec
 699+ 8437 4D 41 52 4B >                db      "MARK"
 699+ 843B             >len_NFA         defl    $ - temp_NFA
 699+ 843B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 699+ 8437             >
 699+ 8437 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 699+ 8438 4D 41 52 4B >                db      "MARK"               // name string in 7-bit ascii, but
 699+ 843C             >                org     $-1                 // alter last byte of Name just above to set
 699+ 843B CB          >                db      {b $} | END_BIT     // msb as name end
 699+ 843C             >
 699+ 843C 22 84       >                dw      last_NFA            // Link to previous definition Name
 699+ 843E             >MARK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 699+ 843E CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 699+ 8440             >                else
 699+ 8440 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 699+ 8440             >                endif           ; ok        // for other definitions it "points" the correct handler
 699+ 8440             >                // Use of "; ok" to suppress "warning[fwdref]"
 699+ 8440             >
 699+ 8440             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 700+ 8440 14 84 97 72                  dw      INVV, TYPE, TRUV
 700+ 8444 29 84
 701+ 8446 95 69                        dw      EXIT
 702+ 8448
 703+ 8448              //  ______________________________________________________________________
 704+ 8448              //
 705+ 8448              // back     --
 706+ 8448              //
 707+ 8448                              Colon_Def BACK, "BACK", is_normal
 707+ 8448             >                New_Def  BACK, "BACK", Enter_Ptr, is_normal ; ok
 707+ 8448             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 707+ 8448             >
 707+ 8448             >                // dummy db directives used to calculate length of namec
 707+ 8448 42 41 43 4B >                db      "BACK"
 707+ 844C             >len_NFA         defl    $ - temp_NFA
 707+ 844C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 707+ 8448             >
 707+ 8448 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 707+ 8449 42 41 43 4B >                db      "BACK"               // name string in 7-bit ascii, but
 707+ 844D             >                org     $-1                 // alter last byte of Name just above to set
 707+ 844C CB          >                db      {b $} | END_BIT     // msb as name end
 707+ 844D             >
 707+ 844D 37 84       >                dw      last_NFA            // Link to previous definition Name
 707+ 844F             >BACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 707+ 844F CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 707+ 8451             >                else
 707+ 8451 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 707+ 8451             >                endif           ; ok        // for other definitions it "points" the correct handler
 707+ 8451             >                // Use of "; ok" to suppress "warning[fwdref]"
 707+ 8451             >
 707+ 8451             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 708+ 8451 18 6F 6C 6F                  dw      HERE, SUBTRACT, COMMA
 708+ 8455 34 6F
 709+ 8457 95 69                        dw      EXIT
 710+ 8459
 711+ 8459              //  ______________________________________________________________________
 712+ 8459              //
 713+ 8459              // if          ( -- a 2 ) \ compile-time
 714+ 8459              // IF ... THEN
 715+ 8459              // IF ... ELSE ... ENDIF
 716+ 8459                              Colon_Def IF, "IF", is_immediate
 716+ 8459             >                New_Def  IF, "IF", Enter_Ptr, is_immediate ; ok
 716+ 8459             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 716+ 8459             >
 716+ 8459             >                // dummy db directives used to calculate length of namec
 716+ 8459 49 46       >                db      "IF"
 716+ 845B             >len_NFA         defl    $ - temp_NFA
 716+ 845B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 716+ 8459             >
 716+ 8459 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 716+ 845A 49 46       >                db      "IF"               // name string in 7-bit ascii, but
 716+ 845C             >                org     $-1                 // alter last byte of Name just above to set
 716+ 845B C6          >                db      {b $} | END_BIT     // msb as name end
 716+ 845C             >
 716+ 845C 48 84       >                dw      last_NFA            // Link to previous definition Name
 716+ 845E             >IF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 716+ 845E CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 716+ 8460             >                else
 716+ 8460 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 716+ 8460             >                endif           ; ok        // for other definitions it "points" the correct handler
 716+ 8460             >                // Use of "; ok" to suppress "warning[fwdref]"
 716+ 8460             >
 716+ 8460             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 717+ 8460 78 71 7F 64                  dw      COMPILE, ZBRANCH
 718+ 8464 18 6F 46 6D                  dw      HERE, ZERO, COMMA
 718+ 8468 34 6F
 719+ 846A 56 6D                        dw      TWO
 720+ 846C 95 69                        dw      EXIT
 721+ 846E
 722+ 846E              //  ______________________________________________________________________
 723+ 846E              //
 724+ 846E              // endif        ( a 2 -- ) \ compile-time
 725+ 846E              //
 726+ 846E                              Colon_Def ENDIF, "ENDIF", is_immediate
 726+ 846E             >                New_Def  ENDIF, "ENDIF", Enter_Ptr, is_immediate ; ok
 726+ 846E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 726+ 846E             >
 726+ 846E             >                // dummy db directives used to calculate length of namec
 726+ 846E 45 4E 44 49 >                db      "ENDIF"
 726+ 8472 46          >
 726+ 8473             >len_NFA         defl    $ - temp_NFA
 726+ 8473             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 726+ 846E             >
 726+ 846E C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 726+ 846F 45 4E 44 49 >                db      "ENDIF"               // name string in 7-bit ascii, but
 726+ 8473 46          >
 726+ 8474             >                org     $-1                 // alter last byte of Name just above to set
 726+ 8473 C6          >                db      {b $} | END_BIT     // msb as name end
 726+ 8474             >
 726+ 8474 59 84       >                dw      last_NFA            // Link to previous definition Name
 726+ 8476             >ENDIF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 726+ 8476 CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 726+ 8478             >                else
 726+ 8478 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 726+ 8478             >                endif           ; ok        // for other definitions it "points" the correct handler
 726+ 8478             >                // Use of "; ok" to suppress "warning[fwdref]"
 726+ 8478             >
 726+ 8478             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 727+ 8478 FF 70                        dw      QCOMP
 728+ 847A 56 6D 2E 71                  dw      TWO, QPAIRS
 729+ 847E 18 6F D1 6A                  dw      HERE, OVER, SUBTRACT, SWAP, STORE
 729+ 8482 6C 6F 09 6B
 729+ 8486 E7 6B
 730+ 8488 95 69                        dw      EXIT
 731+ 848A
 732+ 848A              //  ______________________________________________________________________
 733+ 848A              //
 734+ 848A              // then        ( a 2 -- ) \ compile-time
 735+ 848A              //
 736+ 848A                              Colon_Def THEN, "THEN", is_immediate
 736+ 848A             >                New_Def  THEN, "THEN", Enter_Ptr, is_immediate ; ok
 736+ 848A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 736+ 848A             >
 736+ 848A             >                // dummy db directives used to calculate length of namec
 736+ 848A 54 48 45 4E >                db      "THEN"
 736+ 848E             >len_NFA         defl    $ - temp_NFA
 736+ 848E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 736+ 848A             >
 736+ 848A C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 736+ 848B 54 48 45 4E >                db      "THEN"               // name string in 7-bit ascii, but
 736+ 848F             >                org     $-1                 // alter last byte of Name just above to set
 736+ 848E CE          >                db      {b $} | END_BIT     // msb as name end
 736+ 848F             >
 736+ 848F 6E 84       >                dw      last_NFA            // Link to previous definition Name
 736+ 8491             >THEN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 736+ 8491 CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 736+ 8493             >                else
 736+ 8493 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 736+ 8493             >                endif           ; ok        // for other definitions it "points" the correct handler
 736+ 8493             >                // Use of "; ok" to suppress "warning[fwdref]"
 736+ 8493             >
 736+ 8493             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 737+ 8493 76 84                        dw      ENDIF
 738+ 8495 95 69                        dw      EXIT
 739+ 8497
 740+ 8497              //  ______________________________________________________________________
 741+ 8497              //
 742+ 8497              // else        ( a1 2 -- a2 2 ) \ compile-time
 743+ 8497              //
 744+ 8497                              Colon_Def ELSE, "ELSE", is_immediate
 744+ 8497             >                New_Def  ELSE, "ELSE", Enter_Ptr, is_immediate ; ok
 744+ 8497             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 744+ 8497             >
 744+ 8497             >                // dummy db directives used to calculate length of namec
 744+ 8497 45 4C 53 45 >                db      "ELSE"
 744+ 849B             >len_NFA         defl    $ - temp_NFA
 744+ 849B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 744+ 8497             >
 744+ 8497 C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 744+ 8498 45 4C 53 45 >                db      "ELSE"               // name string in 7-bit ascii, but
 744+ 849C             >                org     $-1                 // alter last byte of Name just above to set
 744+ 849B C5          >                db      {b $} | END_BIT     // msb as name end
 744+ 849C             >
 744+ 849C 8A 84       >                dw      last_NFA            // Link to previous definition Name
 744+ 849E             >ELSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 744+ 849E CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 744+ 84A0             >                else
 744+ 84A0 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 744+ 84A0             >                endif           ; ok        // for other definitions it "points" the correct handler
 744+ 84A0             >                // Use of "; ok" to suppress "warning[fwdref]"
 744+ 84A0             >
 744+ 84A0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 745+ 84A0 FF 70                        dw      QCOMP
 746+ 84A2 56 6D 2E 71                  dw      TWO, QPAIRS
 747+ 84A6 78 71 68 64                  dw      COMPILE, BRANCH
 748+ 84AA 18 6F 46 6D                  dw      HERE, ZERO, COMMA
 748+ 84AE 34 6F
 749+ 84B0 09 6B 56 6D                  dw      SWAP, TWO, ENDIF
 749+ 84B4 76 84
 750+ 84B6 56 6D                        dw      TWO
 751+ 84B8 95 69                        dw      EXIT
 752+ 84BA
 753+ 84BA              //  ______________________________________________________________________
 754+ 84BA              //
 755+ 84BA              // begin        ( -- a 1 ) \ compile-time
 756+ 84BA              // BEGIN ... AGAIN
 757+ 84BA              // BEGIN ... f UNTIL
 758+ 84BA              // BEGIN ... f WHILE ... REPEAT
 759+ 84BA                              Colon_Def BEGIN, "BEGIN", is_immediate
 759+ 84BA             >                New_Def  BEGIN, "BEGIN", Enter_Ptr, is_immediate ; ok
 759+ 84BA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 759+ 84BA             >
 759+ 84BA             >                // dummy db directives used to calculate length of namec
 759+ 84BA 42 45 47 49 >                db      "BEGIN"
 759+ 84BE 4E          >
 759+ 84BF             >len_NFA         defl    $ - temp_NFA
 759+ 84BF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 759+ 84BA             >
 759+ 84BA C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 759+ 84BB 42 45 47 49 >                db      "BEGIN"               // name string in 7-bit ascii, but
 759+ 84BF 4E          >
 759+ 84C0             >                org     $-1                 // alter last byte of Name just above to set
 759+ 84BF CE          >                db      {b $} | END_BIT     // msb as name end
 759+ 84C0             >
 759+ 84C0 97 84       >                dw      last_NFA            // Link to previous definition Name
 759+ 84C2             >BEGIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 759+ 84C2 CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 759+ 84C4             >                else
 759+ 84C4 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 759+ 84C4             >                endif           ; ok        // for other definitions it "points" the correct handler
 759+ 84C4             >                // Use of "; ok" to suppress "warning[fwdref]"
 759+ 84C4             >
 759+ 84C4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 760+ 84C4 FF 70                        dw      QCOMP
 761+ 84C6 18 6F                        dw      HERE
 762+ 84C8 4E 6D                        dw      ONE
 763+ 84CA 95 69                        dw      EXIT
 764+ 84CC
 765+ 84CC              //  ______________________________________________________________________
 766+ 84CC              //
 767+ 84CC              // again        ( a 1 -- ) \ compile-time
 768+ 84CC                              Colon_Def AGAIN, "AGAIN", is_immediate
 768+ 84CC             >                New_Def  AGAIN, "AGAIN", Enter_Ptr, is_immediate ; ok
 768+ 84CC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 768+ 84CC             >
 768+ 84CC             >                // dummy db directives used to calculate length of namec
 768+ 84CC 41 47 41 49 >                db      "AGAIN"
 768+ 84D0 4E          >
 768+ 84D1             >len_NFA         defl    $ - temp_NFA
 768+ 84D1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 768+ 84CC             >
 768+ 84CC C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 768+ 84CD 41 47 41 49 >                db      "AGAIN"               // name string in 7-bit ascii, but
 768+ 84D1 4E          >
 768+ 84D2             >                org     $-1                 // alter last byte of Name just above to set
 768+ 84D1 CE          >                db      {b $} | END_BIT     // msb as name end
 768+ 84D2             >
 768+ 84D2 BA 84       >                dw      last_NFA            // Link to previous definition Name
 768+ 84D4             >AGAIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 768+ 84D4 CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 768+ 84D6             >                else
 768+ 84D6 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 768+ 84D6             >                endif           ; ok        // for other definitions it "points" the correct handler
 768+ 84D6             >                // Use of "; ok" to suppress "warning[fwdref]"
 768+ 84D6             >
 768+ 84D6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 769+ 84D6 FF 70                        dw      QCOMP
 770+ 84D8 4E 6D 2E 71                  dw      ONE, QPAIRS
 771+ 84DC 78 71 68 64                  dw      COMPILE, BRANCH
 772+ 84E0 4F 84                        dw      BACK
 773+ 84E2 95 69                        dw      EXIT
 774+ 84E4
 775+ 84E4              //  ______________________________________________________________________
 776+ 84E4              //
 777+ 84E4              // until        ( a 1 -- ) \ compile-time
 778+ 84E4                              Colon_Def UNTIL, "UNTIL", is_immediate
 778+ 84E4             >                New_Def  UNTIL, "UNTIL", Enter_Ptr, is_immediate ; ok
 778+ 84E4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 778+ 84E4             >
 778+ 84E4             >                // dummy db directives used to calculate length of namec
 778+ 84E4 55 4E 54 49 >                db      "UNTIL"
 778+ 84E8 4C          >
 778+ 84E9             >len_NFA         defl    $ - temp_NFA
 778+ 84E9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 778+ 84E4             >
 778+ 84E4 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 778+ 84E5 55 4E 54 49 >                db      "UNTIL"               // name string in 7-bit ascii, but
 778+ 84E9 4C          >
 778+ 84EA             >                org     $-1                 // alter last byte of Name just above to set
 778+ 84E9 CC          >                db      {b $} | END_BIT     // msb as name end
 778+ 84EA             >
 778+ 84EA CC 84       >                dw      last_NFA            // Link to previous definition Name
 778+ 84EC             >UNTIL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 778+ 84EC CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 778+ 84EE             >                else
 778+ 84EE ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 778+ 84EE             >                endif           ; ok        // for other definitions it "points" the correct handler
 778+ 84EE             >                // Use of "; ok" to suppress "warning[fwdref]"
 778+ 84EE             >
 778+ 84EE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 779+ 84EE FF 70                        dw      QCOMP
 780+ 84F0 4E 6D 2E 71                  dw      ONE, QPAIRS
 781+ 84F4 78 71 7F 64                  dw      COMPILE, ZBRANCH
 782+ 84F8 4F 84                        dw      BACK
 783+ 84FA 95 69                        dw      EXIT
 784+ 84FC
 785+ 84FC              //  ______________________________________________________________________
 786+ 84FC              //
 787+ 84FC              // end          ( a 1 -- ) \ compile-time
 788+ 84FC                              Colon_Def END, "END", is_immediate
 788+ 84FC             >                New_Def  END, "END", Enter_Ptr, is_immediate ; ok
 788+ 84FC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 788+ 84FC             >
 788+ 84FC             >                // dummy db directives used to calculate length of namec
 788+ 84FC 45 4E 44    >                db      "END"
 788+ 84FF             >len_NFA         defl    $ - temp_NFA
 788+ 84FF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 788+ 84FC             >
 788+ 84FC C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 788+ 84FD 45 4E 44    >                db      "END"               // name string in 7-bit ascii, but
 788+ 8500             >                org     $-1                 // alter last byte of Name just above to set
 788+ 84FF C4          >                db      {b $} | END_BIT     // msb as name end
 788+ 8500             >
 788+ 8500 E4 84       >                dw      last_NFA            // Link to previous definition Name
 788+ 8502             >END:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 788+ 8502 CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 788+ 8504             >                else
 788+ 8504 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 788+ 8504             >                endif           ; ok        // for other definitions it "points" the correct handler
 788+ 8504             >                // Use of "; ok" to suppress "warning[fwdref]"
 788+ 8504             >
 788+ 8504             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 789+ 8504 EC 84                        dw      UNTIL
 790+ 8506 95 69                        dw      EXIT
 791+ 8508
 792+ 8508              //  ______________________________________________________________________
 793+ 8508              //
 794+ 8508              // while        ( a1 1 -- a1 1 a2 4 ) \ compile-time
 795+ 8508                              Colon_Def WHILE, "WHILE", is_immediate
 795+ 8508             >                New_Def  WHILE, "WHILE", Enter_Ptr, is_immediate ; ok
 795+ 8508             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 795+ 8508             >
 795+ 8508             >                // dummy db directives used to calculate length of namec
 795+ 8508 57 48 49 4C >                db      "WHILE"
 795+ 850C 45          >
 795+ 850D             >len_NFA         defl    $ - temp_NFA
 795+ 850D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 795+ 8508             >
 795+ 8508 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 795+ 8509 57 48 49 4C >                db      "WHILE"               // name string in 7-bit ascii, but
 795+ 850D 45          >
 795+ 850E             >                org     $-1                 // alter last byte of Name just above to set
 795+ 850D C5          >                db      {b $} | END_BIT     // msb as name end
 795+ 850E             >
 795+ 850E FC 84       >                dw      last_NFA            // Link to previous definition Name
 795+ 8510             >WHILE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 795+ 8510 CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 795+ 8512             >                else
 795+ 8512 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 795+ 8512             >                endif           ; ok        // for other definitions it "points" the correct handler
 795+ 8512             >                // Use of "; ok" to suppress "warning[fwdref]"
 795+ 8512             >
 795+ 8512             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 796+ 8512 5E 84                        dw      IF
 797+ 8514 68 6A                        dw      TWO_PLUS // ( that is 4 )
 798+ 8516 95 69                        dw      EXIT
 799+ 8518
 800+ 8518              //  ______________________________________________________________________
 801+ 8518              //
 802+ 8518              // repeat       ( a1 1 a2 4 -- ) \ compile-time
 803+ 8518                              Colon_Def REPEAT, "REPEAT", is_immediate
 803+ 8518             >                New_Def  REPEAT, "REPEAT", Enter_Ptr, is_immediate ; ok
 803+ 8518             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 803+ 8518             >
 803+ 8518             >                // dummy db directives used to calculate length of namec
 803+ 8518 52 45 50 45 >                db      "REPEAT"
 803+ 851C 41 54       >
 803+ 851E             >len_NFA         defl    $ - temp_NFA
 803+ 851E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 803+ 8518             >
 803+ 8518 C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 803+ 8519 52 45 50 45 >                db      "REPEAT"               // name string in 7-bit ascii, but
 803+ 851D 41 54       >
 803+ 851F             >                org     $-1                 // alter last byte of Name just above to set
 803+ 851E D4          >                db      {b $} | END_BIT     // msb as name end
 803+ 851F             >
 803+ 851F 08 85       >                dw      last_NFA            // Link to previous definition Name
 803+ 8521             >REPEAT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 803+ 8521 CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 803+ 8523             >                else
 803+ 8523 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 803+ 8523             >                endif           ; ok        // for other definitions it "points" the correct handler
 803+ 8523             >                // Use of "; ok" to suppress "warning[fwdref]"
 803+ 8523             >
 803+ 8523             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 804+ 8523 6E 6B                        dw      TWO_SWAP
 805+ 8525 D4 84                        dw      AGAIN
 806+ 8527 56 6D 6C 6F                  dw      TWO, SUBTRACT
 807+ 852B 76 84                        dw      ENDIF
 808+ 852D 95 69                        dw      EXIT
 809+ 852F
 810+ 852F              //  ______________________________________________________________________
 811+ 852F              //
 812+ 852F              // ?do-
 813+ 852F              // special version of "BACK" used by ?DO and LOOP
 814+ 852F                              Colon_Def C_DO_BACK, "?DO-", is_normal
 814+ 852F             >                New_Def  C_DO_BACK, "?DO-", Enter_Ptr, is_normal ; ok
 814+ 852F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 814+ 852F             >
 814+ 852F             >                // dummy db directives used to calculate length of namec
 814+ 852F 3F 44 4F 2D >                db      "?DO-"
 814+ 8533             >len_NFA         defl    $ - temp_NFA
 814+ 8533             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 814+ 852F             >
 814+ 852F 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 814+ 8530 3F 44 4F 2D >                db      "?DO-"               // name string in 7-bit ascii, but
 814+ 8534             >                org     $-1                 // alter last byte of Name just above to set
 814+ 8533 AD          >                db      {b $} | END_BIT     // msb as name end
 814+ 8534             >
 814+ 8534 18 85       >                dw      last_NFA            // Link to previous definition Name
 814+ 8536             >C_DO_BACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 814+ 8536 CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 814+ 8538             >                else
 814+ 8538 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 814+ 8538             >                endif           ; ok        // for other definitions it "points" the correct handler
 814+ 8538             >                // Use of "; ok" to suppress "warning[fwdref]"
 814+ 8538             >
 814+ 8538             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 815+ 8538 4F 84                        dw      BACK
 816+ 853A 5F 69 B6 6E                  dw      SPFETCH, CSP, FETCH, SUBTRACT
 816+ 853E DA 6B 6C 6F
 817+ 8542 7F 64                        dw      ZBRANCH
 818+ 8544 06 00                        dw      CDoBack_Endif - $
 819+ 8546 68 6A 76 84                  dw          TWO_PLUS, ENDIF
 820+ 854A              CDoBack_Endif:
 821+ 854A 41 71 B6 6E                  dw      QCSP, CSP, STORE
 821+ 854E E7 6B
 822+ 8550 95 69                        dw      EXIT
 823+ 8552
 824+ 8552              //  ______________________________________________________________________
 825+ 8552              //
 826+ 8552              // do
 827+ 8552              // DO  ... LOOP
 828+ 8552              // DO  ... n +LOOP
 829+ 8552              // ?DO ... LOOP
 830+ 8552              // ?DO ... n +LOOP
 831+ 8552                              Colon_Def DO, "DO", is_immediate
 831+ 8552             >                New_Def  DO, "DO", Enter_Ptr, is_immediate ; ok
 831+ 8552             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 831+ 8552             >
 831+ 8552             >                // dummy db directives used to calculate length of namec
 831+ 8552 44 4F       >                db      "DO"
 831+ 8554             >len_NFA         defl    $ - temp_NFA
 831+ 8554             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 831+ 8552             >
 831+ 8552 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 831+ 8553 44 4F       >                db      "DO"               // name string in 7-bit ascii, but
 831+ 8555             >                org     $-1                 // alter last byte of Name just above to set
 831+ 8554 CF          >                db      {b $} | END_BIT     // msb as name end
 831+ 8555             >
 831+ 8555 2F 85       >                dw      last_NFA            // Link to previous definition Name
 831+ 8557             >DO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 831+ 8557 CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 831+ 8559             >                else
 831+ 8559 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 831+ 8559             >                endif           ; ok        // for other definitions it "points" the correct handler
 831+ 8559             >                // Use of "; ok" to suppress "warning[fwdref]"
 831+ 8559             >
 831+ 8559             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 832+ 8559 78 71 07 65                  dw      COMPILE, C_DO
 833+ 855D B6 6E DA 6B                  dw      CSP, FETCH, STORE_CSP
 833+ 8561 D2 70
 834+ 8563 18 6F 5E 6D                  dw      HERE, THREE
 835+ 8567 95 69                        dw      EXIT
 836+ 8569
 837+ 8569              //  ______________________________________________________________________
 838+ 8569              //
 839+ 8569              // loop
 840+ 8569                              Colon_Def LOOP, "LOOP", is_immediate
 840+ 8569             >                New_Def  LOOP, "LOOP", Enter_Ptr, is_immediate ; ok
 840+ 8569             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 840+ 8569             >
 840+ 8569             >                // dummy db directives used to calculate length of namec
 840+ 8569 4C 4F 4F 50 >                db      "LOOP"
 840+ 856D             >len_NFA         defl    $ - temp_NFA
 840+ 856D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 840+ 8569             >
 840+ 8569 C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 840+ 856A 4C 4F 4F 50 >                db      "LOOP"               // name string in 7-bit ascii, but
 840+ 856E             >                org     $-1                 // alter last byte of Name just above to set
 840+ 856D D0          >                db      {b $} | END_BIT     // msb as name end
 840+ 856E             >
 840+ 856E 52 85       >                dw      last_NFA            // Link to previous definition Name
 840+ 8570             >LOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 840+ 8570 CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 840+ 8572             >                else
 840+ 8572 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 840+ 8572             >                endif           ; ok        // for other definitions it "points" the correct handler
 840+ 8572             >                // Use of "; ok" to suppress "warning[fwdref]"
 840+ 8572             >
 840+ 8572             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 841+ 8572 5E 6D 2E 71                  dw      THREE, QPAIRS
 842+ 8576 78 71 94 64                  dw      COMPILE, C_LOOP
 843+ 857A 36 85                        dw      C_DO_BACK
 844+ 857C 95 69                        dw      EXIT
 845+ 857E
 846+ 857E              //  ______________________________________________________________________
 847+ 857E              //
 848+ 857E              // +loop
 849+ 857E                              Colon_Def PLOOP, "+LOOP", is_immediate
 849+ 857E             >                New_Def  PLOOP, "+LOOP", Enter_Ptr, is_immediate ; ok
 849+ 857E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 849+ 857E             >
 849+ 857E             >                // dummy db directives used to calculate length of namec
 849+ 857E 2B 4C 4F 4F >                db      "+LOOP"
 849+ 8582 50          >
 849+ 8583             >len_NFA         defl    $ - temp_NFA
 849+ 8583             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 849+ 857E             >
 849+ 857E C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 849+ 857F 2B 4C 4F 4F >                db      "+LOOP"               // name string in 7-bit ascii, but
 849+ 8583 50          >
 849+ 8584             >                org     $-1                 // alter last byte of Name just above to set
 849+ 8583 D0          >                db      {b $} | END_BIT     // msb as name end
 849+ 8584             >
 849+ 8584 69 85       >                dw      last_NFA            // Link to previous definition Name
 849+ 8586             >PLOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 849+ 8586 CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 849+ 8588             >                else
 849+ 8588 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 849+ 8588             >                endif           ; ok        // for other definitions it "points" the correct handler
 849+ 8588             >                // Use of "; ok" to suppress "warning[fwdref]"
 849+ 8588             >
 849+ 8588             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 850+ 8588 5E 6D 2E 71                  dw      THREE, QPAIRS
 851+ 858C 78 71 CB 64                  dw      COMPILE, C_PLOOP
 852+ 8590 36 85                        dw      C_DO_BACK
 853+ 8592 95 69                        dw      EXIT
 854+ 8594
 855+ 8594              //  ______________________________________________________________________
 856+ 8594              //
 857+ 8594              // ?do
 858+ 8594                              Colon_Def QDO, "?DO", is_immediate
 858+ 8594             >                New_Def  QDO, "?DO", Enter_Ptr, is_immediate ; ok
 858+ 8594             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 858+ 8594             >
 858+ 8594             >                // dummy db directives used to calculate length of namec
 858+ 8594 3F 44 4F    >                db      "?DO"
 858+ 8597             >len_NFA         defl    $ - temp_NFA
 858+ 8597             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 858+ 8594             >
 858+ 8594 C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 858+ 8595 3F 44 4F    >                db      "?DO"               // name string in 7-bit ascii, but
 858+ 8598             >                org     $-1                 // alter last byte of Name just above to set
 858+ 8597 CF          >                db      {b $} | END_BIT     // msb as name end
 858+ 8598             >
 858+ 8598 7E 85       >                dw      last_NFA            // Link to previous definition Name
 858+ 859A             >QDO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 858+ 859A CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 858+ 859C             >                else
 858+ 859C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 858+ 859C             >                endif           ; ok        // for other definitions it "points" the correct handler
 858+ 859C             >                // Use of "; ok" to suppress "warning[fwdref]"
 858+ 859C             >
 858+ 859C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 859+ 859C 78 71 D9 64                  dw      COMPILE, C_Q_DO
 860+ 85A0 B6 6E DA 6B                  dw      CSP, FETCH, STORE_CSP
 860+ 85A4 D2 70
 861+ 85A6 18 6F 46 6D                  dw      HERE, ZERO, COMMA, ZERO
 861+ 85AA 34 6F 46 6D
 862+ 85AE 18 6F 5E 6D                  dw      HERE, THREE
 863+ 85B2 95 69                        dw      EXIT
 864+ 85B4
 865+ 85B4              //  ______________________________________________________________________
 866+ 85B4              //
 867+ 85B4              // \
 868+ 85B4                              Colon_Def BACKSLASH, "\\", is_immediate  // this is a single back-slash
 868+ 85B4             >                New_Def  BACKSLASH, "\\", Enter_Ptr, is_immediate ; ok
 868+ 85B4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 868+ 85B4             >
 868+ 85B4             >                // dummy db directives used to calculate length of namec
 868+ 85B4 5C          >                db      "\\"
 868+ 85B5             >len_NFA         defl    $ - temp_NFA
 868+ 85B5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 868+ 85B4             >
 868+ 85B4 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 868+ 85B5 5C          >                db      "\\"               // name string in 7-bit ascii, but
 868+ 85B6             >                org     $-1                 // alter last byte of Name just above to set
 868+ 85B5 DC          >                db      {b $} | END_BIT     // msb as name end
 868+ 85B6             >
 868+ 85B6 94 85       >                dw      last_NFA            // Link to previous definition Name
 868+ 85B8             >BACKSLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 868+ 85B8 CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 868+ 85BA             >                else
 868+ 85BA ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 868+ 85BA             >                endif           ; ok        // for other definitions it "points" the correct handler
 868+ 85BA             >                // Use of "; ok" to suppress "warning[fwdref]"
 868+ 85BA             >
 868+ 85BA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 869+ 85BA 45 6E DA 6B                  dw      BLK, FETCH
 870+ 85BE 7F 64                        dw      ZBRANCH
 871+ 85C0 30 00                        dw      Backslash_Else_1 - $
 872+ 85C2 45 6E DA 6B                  dw          BLK, FETCH, ONE, GREATER  // BLOCK 1 is used as temp-line in INCLUDE file
 872+ 85C6 4E 6D B7 6F
 873+ 85CA 7F 64                        dw          ZBRANCH
 874+ 85CC 18 00                        dw          Backslash_Else_2 - $
 875+ 85CE 4E 6E DA 6B                  dw              TO_IN, FETCH, CL, MOD, CL
 875+ 85D2 7A 6D 2C 7A
 875+ 85D6 7A 6D
 876+ 85D8 09 6B 6C 6F                  dw              SWAP, SUBTRACT, TO_IN, PLUSSTORE
 876+ 85DC 4E 6E B7 6B
 877+ 85E0 68 64                        dw          BRANCH
 878+ 85E2 0A 00                        dw          Backslash_Endif_2 - $
 879+ 85E4              Backslash_Else_2:
 880+ 85E4 86 6D 8E 6A                  dw              BBUF, CELL_MINUS, TO_IN, STORE
 880+ 85E8 4E 6E E7 6B
 881+ 85EC              Backslash_Endif_2:
 882+ 85EC 68 64                        dw      BRANCH
 883+ 85EE 0A 00                        dw      Backslash_Endif_1 - $
 884+ 85F0              Backslash_Else_1:
 885+ 85F0 45 64 50 00                  dw          LIT, 80, TO_IN, STORE
 885+ 85F4 4E 6E E7 6B
 886+ 85F8              Backslash_Endif_1:
 887+ 85F8 95 69                        dw      EXIT
 888+ 85FA
 889+ 85FA              //  ______________________________________________________________________
 890+ 85FA              //
 891+ 85FA              // rename
 892+ 85FA                              Colon_Def RENAME, "RENAME", is_normal
 892+ 85FA             >                New_Def  RENAME, "RENAME", Enter_Ptr, is_normal ; ok
 892+ 85FA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 892+ 85FA             >
 892+ 85FA             >                // dummy db directives used to calculate length of namec
 892+ 85FA 52 45 4E 41 >                db      "RENAME"
 892+ 85FE 4D 45       >
 892+ 8600             >len_NFA         defl    $ - temp_NFA
 892+ 8600             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 892+ 85FA             >
 892+ 85FA 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 892+ 85FB 52 45 4E 41 >                db      "RENAME"               // name string in 7-bit ascii, but
 892+ 85FF 4D 45       >
 892+ 8601             >                org     $-1                 // alter last byte of Name just above to set
 892+ 8600 C5          >                db      {b $} | END_BIT     // msb as name end
 892+ 8601             >
 892+ 8601 B4 85       >                dw      last_NFA            // Link to previous definition Name
 892+ 8603             >RENAME:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 892+ 8603 CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 892+ 8605             >                else
 892+ 8605 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 892+ 8605             >                endif           ; ok        // for other definitions it "points" the correct handler
 892+ 8605             >                // Use of "; ok" to suppress "warning[fwdref]"
 892+ 8605             >
 892+ 8605             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 893+ 8605 15 80 B5 70                  dw      TICK, TO_BODY, NFA
 893+ 8609 8B 70
 894+ 860B 16 6B F5 6B                  dw      DUP, CFETCH, LIT, $1F, AND_OP
 894+ 860F 45 64 1F 00
 894+ 8613 27 69
 895+ 8615 80 6B 27 6A                  dw      TWO_DUP, PLUS
 896+ 8619 BE 69                        dw      TO_R
 897+ 861B 70 6D 1A 74                  dw      BL, WORD, LIT, 32, ALLOT
 897+ 861F 45 64 20 00
 897+ 8623 28 6F
 898+ 8625 84 72 45 64                  dw      COUNT, LIT, $1F, AND_OP, ROT, MIN
 898+ 8629 1F 00 27 69
 898+ 862D 23 6B C5 6F
 899+ 8631 BE 69                        dw      TO_R
 900+ 8633 09 6B 50 6A                  dw      SWAP, ONE_PLUS
 901+ 8637 D2 69                        dw      R_TO
 902+ 8639 8B 68                        dw      CMOVE
 903+ 863B E5 69 F5 6B                  dw      R_OP, CFETCH, LIT, END_BIT, OR_OP
 903+ 863F 45 64 80 00
 903+ 8643 39 69
 904+ 8645 D2 69                        dw      R_TO
 905+ 8647 03 6C                        dw      CSTORE
 906+ 8649 45 64 E0 FF                  dw      LIT, -32, ALLOT
 906+ 864D 28 6F
 907+ 864F 95 69                        dw      EXIT
 908+ 8651
 909+ 8651              //  ______________________________________________________________________
 910+ 8651              //
 911+ 8651              // value        n cccc --
 912+ 8651                              Colon_Def VALUE, "VALUE", is_immediate
 912+ 8651             >                New_Def  VALUE, "VALUE", Enter_Ptr, is_immediate ; ok
 912+ 8651             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 912+ 8651             >
 912+ 8651             >                // dummy db directives used to calculate length of namec
 912+ 8651 56 41 4C 55 >                db      "VALUE"
 912+ 8655 45          >
 912+ 8656             >len_NFA         defl    $ - temp_NFA
 912+ 8656             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 912+ 8651             >
 912+ 8651 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 912+ 8652 56 41 4C 55 >                db      "VALUE"               // name string in 7-bit ascii, but
 912+ 8656 45          >
 912+ 8657             >                org     $-1                 // alter last byte of Name just above to set
 912+ 8656 C5          >                db      {b $} | END_BIT     // msb as name end
 912+ 8657             >
 912+ 8657 FA 85       >                dw      last_NFA            // Link to previous definition Name
 912+ 8659             >VALUE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 912+ 8659 CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 912+ 865B             >                else
 912+ 865B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 912+ 865B             >                endif           ; ok        // for other definitions it "points" the correct handler
 912+ 865B             >                // Use of "; ok" to suppress "warning[fwdref]"
 912+ 865B             >
 912+ 865B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 913+ 865B 02 6D                        dw      CONSTANT                // [compile] constant
 914+ 865D 95 69                        dw      EXIT                    // ;
 915+ 865F
 916+ 865F              Latest_Definition:
 917+ 865F              //  ______________________________________________________________________
 918+ 865F              //
 919+ 865F              // to           n -- cccc
 920+ 865F              // mixed operation: it leaves the remainder u3 and the quotient ud4 of ud1 / u1.
 921+ 865F              // All terms are unsigned.
 922+ 865F                              Colon_Def TO, "TO", is_immediate
 922+ 865F             >                New_Def  TO, "TO", Enter_Ptr, is_immediate ; ok
 922+ 865F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 922+ 865F             >
 922+ 865F             >                // dummy db directives used to calculate length of namec
 922+ 865F 54 4F       >                db      "TO"
 922+ 8661             >len_NFA         defl    $ - temp_NFA
 922+ 8661             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 922+ 865F             >
 922+ 865F C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 922+ 8660 54 4F       >                db      "TO"               // name string in 7-bit ascii, but
 922+ 8662             >                org     $-1                 // alter last byte of Name just above to set
 922+ 8661 CF          >                db      {b $} | END_BIT     // msb as name end
 922+ 8662             >
 922+ 8662 51 86       >                dw      last_NFA            // Link to previous definition Name
 922+ 8664             >TO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 922+ 8664 CB 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 922+ 8666             >                else
 922+ 8666 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 922+ 8666             >                endif           ; ok        // for other definitions it "points" the correct handler
 922+ 8666             >                // Use of "; ok" to suppress "warning[fwdref]"
 922+ 8666             >
 922+ 8666             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 923+ 8666 15 80 B5 70                  dw  TICK, TO_BODY               // ' >body'
 924+ 866A 91 6E DA 6B                  dw  STATE, FETCH                // state @
 925+ 866E                                                              // if
 926+ 866E 7F 64                        dw  ZBRANCH
 927+ 8670 10 00                        dw  To_Else - $
 928+ 8672 78 71 45 64                  dw      COMPILE, LIT            //      compile lit
 929+ 8676 34 6F                        dw      COMMA                   //      ,
 930+ 8678 78 71 E7 6B                  dw      COMPILE, STORE          //      compile !
 931+ 867C                                                      // else
 932+ 867C 68 64                        dw  BRANCH
 933+ 867E 04 00                        dw  To_Endif - $
 934+ 8680              To_Else:
 935+ 8680 E7 6B                        dw      STORE                   //      !
 936+ 8682              To_Endif:                                       // endif
 937+ 8682 95 69                        dw  EXIT                        // ;
 938+ 8684
 939+ 8684              Fence_Word:
 940+ 8684
 941+ 8684              //  ______________________________________________________________________
 942+ 8684              //
 943+ 8684              // m+           d1 n -- d2
 944+ 8684              // returns the unsigned sum of two top values
 945+ 8684                              New_Def MPLUS, "M+", is_code, is_normal
 945+ 8684             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 945+ 8684             >
 945+ 8684             >                // dummy db directives used to calculate length of namec
 945+ 8684 4D 2B       >                db      "M+"
 945+ 8686             >len_NFA         defl    $ - temp_NFA
 945+ 8686             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 945+ 8684             >
 945+ 8684 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 945+ 8685 4D 2B       >                db      "M+"               // name string in 7-bit ascii, but
 945+ 8687             >                org     $-1                 // alter last byte of Name just above to set
 945+ 8686 AB          >                db      {b $} | END_BIT     // msb as name end
 945+ 8687             >
 945+ 8687 5F 86       >                dw      last_NFA            // Link to previous definition Name
 945+ 8689             >MPLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 945+ 8689 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 945+ 8689             >                else
 945+ 8689 8B 86       >                dw      $ + 2   ; ok        // is pointed by CFA
 945+ 868B             >                endif           ; ok        // for other definitions it "points" the correct handler
 945+ 868B             >                // Use of "; ok" to suppress "warning[fwdref]"
 945+ 868B             >
 945+ 868B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 946+ 868B 60                           ld      h, b
 947+ 868C 69                           ld      l, c
 948+ 868D D1                           pop     de                  // < de := d1-H
 949+ 868E C1                           pop     bc                  // < n
 950+ 868F E3                           ex      (sp),hl             // < hl := d1-L > IP
 951+ 8690 09                           add     hl, bc
 952+ 8691 C1                           pop     bc
 953+ 8692
 954+ 8692 30 01                        jr      nc, MPlus_Skip
 955+ 8694 13                               inc     de
 956+ 8695              MPlus_Skip:
 957+ 8695 EB                           ex      de, hl
 958+ 8696                              psh2
 958+ 8696 D5          >                push    de
 958+ 8697 E5          >                push    hl
 958+ 8698 DD E9       >                jp      (ix)
 959+ 869A
 960+ 869A              //  ______________________________________________________________________
 961+ 869A              //
 962+ 869A
 963+ 869A 00           Here_Dictionary db      0
 964+ 869B
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L3.asm
  93  869B
  94  869B              // now we save the compiled file so we can either run it or debug it
  95  869B                              SAVENEX OPEN "output/main.nex", ORIGIN
  96  869B                              SAVENEX CORE 3, 0, 0                                // Next core 3.0.0 required as minimum
  97  869B                              SAVENEX CFG  0
  98  869B                              SAVENEX BANK 2, 0
  99  869B                              SAVENEX AUTO
 100  869B                              SAVENEX CLOSE
 101  869B
 102  869B              //              PAGE 7 ;set 7 page to current slot
 103  869B              //              SAVEBIN "ram7.bin",$C000,$4000 ;- save 4000h begin from C000h of RAM to file
 104  869B              //              SAVEBIN "output/ram2.bin", $8000, 9800 ;- save 3000h begin from 8000h of RAM to file
 105  869B
 106  869B              //              SAVETAP "output/F15j.tap", CODE, "forth15j", $6400, 9000
 107  869B
 108  869B                              SAVEBIN "output/forth15j.bin", ORIGIN, 9400
 109  869B
 110  869B                              END
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/main.asm
