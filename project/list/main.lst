# file opened: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/main.asm
   1  0000              //  ______________________________________________________________________
   2  0000              //
   3  0000              //  main.asm
   4  0000              //  ______________________________________________________________________
   5  0000              //
   6  0000              // v-Forth 1.6 NextZXOS version
   7  0000              // build 20210407
   8  0000              //
   9  0000              //
  10  0000              //  NextZXOS version
  11  0000              //  ______________________________________________________________________
  12  0000              //
  13  0000              //  This work is available as-is with no whatsoever warranty.
  14  0000              //  Copying, modifying and distributing this software is allowed
  15  0000              //  provided that the copyright notice is kept.
  16  0000              //  ______________________________________________________________________
  17  0000              //
  18  0000              //  by Matteo Vitturi, 1990-2021
  19  0000              //
  20  0000              //  https://sites.google.com/view/vforth/vforth15-next
  21  0000              //  https://www.oocities.org/matteo_vitturi/english/index.htm
  22  0000              //
  23  0000              //  This is the complete compiler for v.Forth for SINCLAIR ZX Spectrum Next.
  24  0000              //  Each line of this source list mustn't exceed 80 bytes.
  25  0000              //  Z80N (ZX Spectrum Next) extension is available.
  26  0000              //
  27  0000              //  This list has been tested using the following configuration:
  28  0000              //      - CSpect emulator V.2.12.30
  29  0000              //  ______________________________________________________________________
  30  0000              //
  31  0000              //  Z80 Registers usage map
  32  0000              //
  33  0000              //  AF
  34  0000              //  BC - Instruction Pointer: should be preserved during ROM/OS calls
  35  0000              //  DE - Top of Stack element. The second from top is pointed by SP
  36  0000              //  HL - Working
  37  0000              //
  38  0000              //  AF'- Sometime used for backup purpose
  39  0000              //  BC'- Not used
  40  0000              //  DE'- Not used
  41  0000              //  HL'- Not used: (saved at startup)
  42  0000              //
  43  0000              //  SP - Calculator Stack Pointer
  44  0000              //  IX - Inner interpreter "next" address pointer. This way jp (ix) is 2T-state faster than JP next
  45  0000              //  IY - (ZX System: must be preserved to interact with standard ROM)
  46  0000              //
  47  0000              //  ______________________________________________________________________
  48  0000              //
  49  0000              //  _________________
  50  0000              //
  51  0000              //  FORTH DEFINITIONS
  52  0000              //  _________________
  53  0000
  54  0000                              OPT     --zxnext
  55  0000
  56  0000              DEBUGGING       equ     0                       // this controls some debugging code in L0.asm
  57  0000              ORIGIN          equ     $8080
  58  0000              //ORIGIN          equ     $6400                   // binary
  59  0000              //ORIGIN          equ     $6380                   // for binary comparison
  60  0000              //ORIGIN          equ     $8080                   // for DeZog
  61  0000
  62  0000
  63  0000                              DEVICE  ZXSPECTRUMNEXT
  64  0000              //              DEVICE  NONE
  65  0000
  66  0000                              ORG     ORIGIN
  67  8080 00 00 00...                  ds 128                            // for binary comparison
  68  8100
  69  8100              //  ______________________________________________________________________
  70  8100              //
  71  8100              //  Naming convention for Label vs Forth correspondance
  72  8100              //  Forth words are named as they are named for real with some exception to avoid assembler syntax errors.
  73  8100              //    - Leading "0" is converted into "Z_"
  74  8100              //    - Leading "(" is converted into "C_", closing bracket is omitted
  75  8100              //    - Leading numbers are converted in letters: ONE_  TWO_ etc.
  76  8100              //    - Question mark "?" is converted into "Q" or omitted if needed / useful.
  77  8100              //    - Plus sign "+" is converted in _PLUS or ADD_ depending.
  78  8100              //    - Minus sign "-" in L (for Line), MINUS or SUBTRACT depending
  79  8100              //    - Greater-Than sign ">" in _GREATER or TO_ depending
  80  8100              //    - Equal sign "=" is converted in EQUAL
  81  8100              //    - Less-Than sign "<" in _LESS or FROM_ (or TO_ again) depending
  82  8100              //    - Asterisk sign "*" is converted in _MUL or STAR
  83  8100              //    - Slash "/" is converted in _DIV or omitted if it is clear what it means
  84  8100              //    - Exclamation mark "!" is converted in STORE
  85  8100              //    - At-Sign "@" is converted in FETCH
  86  8100              //    - Words that collides with Assembler are normally suffixed with "_OP"
  87  8100
  88  8100                              include "system.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/system.asm
   1+ 8100              //  ______________________________________________________________________
   2+ 8100              //
   3+ 8100              //  system.asm
   4+ 8100              //  ______________________________________________________________________
   5+ 8100
   6+ 8100              // Registers:
   7+ 8100              //
   8+ 8100              //      BC: Instruction Pointer
   9+ 8100              //      DE:
  10+ 8100              //      HL: W register
  11+ 8100              //      SP: Calc stack Pointer
  12+ 8100              //      IX: Inner-Interpreter Address
  13+ 8100
  14+ 8100              //  ______________________________________________________________________
  15+ 8100              //
  16+ 8100              // ZX-Spectrum standard system variables
  17+ 8100              SCR_CT          equ     $5C8C                   // SCR-CT system variable
  18+ 8100              LASTK           equ     $5C08                   // LASTK system variable
  19+ 8100              BORDCR          equ     $5C48                   // BORDCR system variable
  20+ 8100              FLAGS2          equ     $5C6A                   // for caps-lock
  21+ 8100
  22+ 8100              //  ______________________________________________________________________
  23+ 8100              //
  24+ 8100              // Flag constants
  25+ 8100              TRUE_FLAG       equ     $FFFF
  26+ 8100              FALSE_FLAG      equ     $0000
  27+ 8100
  28+ 8100              //  ______________________________________________________________________
  29+ 8100              //
  30+ 8100              // Ascii char constants
  31+ 8100              NUL_CHAR        equ     $00
  32+ 8100              COMMA_CHAR      equ     $06
  33+ 8100              BACKSPACE_CHAR  equ     $08
  34+ 8100              CR_CHAR         equ     $0D
  35+ 8100              BLANK_CHAR      equ     $20
  36+ 8100              QUOTE_CHAR      equ     "'"
  37+ 8100              DQUOTE_CHAR     equ     '"'
  38+ 8100              UNDERSCORE_CHAR equ     $5F
  39+ 8100              SOLIDBLOCK_CHAR equ     $8F
  40+ 8100              HALFBLOCK_CHAR  equ     $8C
  41+ 8100              LC_A_CHAR       equ     $61                 // lower-case "a"
  42+ 8100              LC_Z_CHAR       equ     $7A                 // lower-case "z"
  43+ 8100
  44+ 8100
  45+ 8100              //  ______________________________________________________________________
  46+ 8100              //
  47+ 8100
  48+ 8100                              // emulate something like:  ld hl,rp
  49+ 8100              ldhlrp          macro
  50+ 8100 ~                            ld      hl,(RP_Pointer)
  51+ 8100                              endm
  52+ 8100
  53+ 8100                              // emulate something like:  ld rp,hl
  54+ 8100              ldrphl          macro
  55+ 8100 ~                            ld      (RP_Pointer),hl
  56+ 8100                              endm
  57+ 8100
  58+ 8100              //  ______________________________________________________________________
  59+ 8100              //
  60+ 8100              //  Inner interpreter next-address pointer. This is 2T-state faster than "jp address"
  61+ 8100              next            macro
  62+ 8100 ~                            jp      (ix)
  63+ 8100                              endm
  64+ 8100
  65+ 8100              psh1            macro
  66+ 8100 ~                            push    hl
  67+ 8100 ~                            jp      (ix)
  68+ 8100                              endm
  69+ 8100
  70+ 8100              psh2            macro
  71+ 8100 ~                            push    de
  72+ 8100 ~                            push    hl
  73+ 8100 ~                            jp      (ix)
  74+ 8100                              endm
  75+ 8100
  76+ 8100              //  ______________________________________________________________________
  77+ 8100              //
  78+ 8100              // Bit constants in length-byte
  79+ 8100
  80+ 8100              SMUDGE_BIT      equ     %00100000               // $20
  81+ 8100              IMMEDIATE_BIT   equ     %01000000               // $40
  82+ 8100              END_BIT         equ     %10000000               // $80
  83+ 8100
  84+ 8100
  85+ 8100              //  ______________________________________________________________________
  86+ 8100              //
  87+ 8100              //  To create Forth words using this (nice) Assembler, we have to use the two following
  88+ 8100              //  pointers
  89+ 8100              temp_NFA        defl    0
  90+ 8100              last_NFA        defl    0
  91+ 8100              len_NFA         defl    0
  92+ 8100
  93+ 8100              is_code         equ     0                   // so the direct machine-code starts at CFA
  94+ 8100              is_normal       equ     0                   // so the direct machine-code starts at CFA
  95+ 8100              is_immediate    equ     IMMEDIATE_BIT       // $40 - the definition is IMMEDIATE.
  96+ 8100
  97+ 8100              //  ______________________________________________________________________
  98+ 8100              //
  99+ 8100              //  Create a new "low-level" definition
 100+ 8100              //  This macro is used in the form  Create FORTH_NAME,n,"forth_name"
 101+ 8100              //  to create a new Forth Dictionary entry the same way Forth itself would do.
 102+ 8100              //  A word begins with a Length-Byte in range 1-31. Top 3 msb are used as flags
 103+ 8100              //  see SMUDGE_BIT and IMMEDIATE_BIT constant above.
 104+ 8100              //  It is followed by the Name of the word, i.e. a string expressed in 7-bit Ascii.
 105+ 8100              //  The last character of the Name must have the msb set to signal the end of it (END_BIT)
 106+ 8100              //  This macro acts much like the standard Forth definition CREATE
 107+ 8100
 108+ 8100              New_Def         macro   label, namec, runcode, bits
 109+ 8100 ~            temp_NFA        defl    $                   // save this NFA address to temp_NFA
 110+ 8100 ~
 111+ 8100 ~                            // dummy db directives used to calculate length of namec
 112+ 8100 ~                            db      namec
 113+ 8100 ~            len_NFA         defl    $ - temp_NFA
 114+ 8100 ~                            org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 115+ 8100 ~
 116+ 8100 ~                            db      len_NFA | END_BIT | bits  // The start of NFA must have msb set to signal the beginning of the sounted string
 117+ 8100 ~                            db      namec               // name string in 7-bit ascii, but
 118+ 8100 ~                            org     $-1                 // alter last byte of Name just above to set
 119+ 8100 ~                            db      {b $} | END_BIT     // msb as name end
 120+ 8100 ~
 121+ 8100 ~                            dw      last_NFA            // Link to previous definition Name
 122+ 8100 ~            label:          if runcode != 0 ; ok        // This is the start address of the direct jp(hl)
 123+ 8100 ~                            call    runcode ; ok        // for primitive definitions  actual code
 124+ 8100 ~
 125+ 8100 ~
 126+ 8100 ~                            endif           ; ok        // for other definitions it "points" the correct handler
 127+ 8100 ~                            // Use of "; ok" to suppress "warning[fwdref]"
 128+ 8100 ~
 129+ 8100 ~            last_NFA        defl    temp_NFA            // keep track of NFA saved above
 130+ 8100                              endm
 131+ 8100
 132+ 8100              //  ______________________________________________________________________
 133+ 8100              //
 134+ 8100              // Create a "constant"
 135+ 8100              // The constant value is compiled in first PFA cell
 136+ 8100              Constant_Def    macro   label, namec, constant_value
 137+ 8100 ~                            New_Def  label, namec, Constant_Ptr, is_normal
 138+ 8100 ~                            dw      constant_value
 139+ 8100                              endm
 140+ 8100
 141+ 8100              //  ______________________________________________________________________
 142+ 8100              //
 143+ 8100              // Create a "variable"
 144+ 8100              // The when invoked, a variable returns a pointer, the address of first PFA cell
 145+ 8100              // this allow creation of "variables" which content is  of any length
 146+ 8100              Variable_Def    macro   label, namec, initial_value
 147+ 8100 ~                            New_Def  label, namec, Variable_Ptr, is_normal
 148+ 8100 ~                            dw      initial_value
 149+ 8100                              endm
 150+ 8100
 151+ 8100              //  ______________________________________________________________________
 152+ 8100              //
 153+ 8100              // Create a "user"
 154+ 8100              // It uses a single byte as offset to calculate the address of the variable
 155+ 8100              User_Def        macro   label, namec, offset_value
 156+ 8100 ~                            New_Def  label, namec, User_Ptr, is_normal
 157+ 8100 ~                            db      offset_value
 158+ 8100                              endm
 159+ 8100
 160+ 8100              //  ______________________________________________________________________
 161+ 8100              //
 162+ 8100              // Create a "colon-definition"
 163+ 8100              // The CFA contains a small routine i.e. "call Enter_Ptr".
 164+ 8100              // The PFA, three bytes later, contains the actual Forth definition
 165+ 8100              Colon_Def       macro   label, namec, bits
 166+ 8100 ~                            New_Def  label, namec, Enter_Ptr, bits ; ok
 167+ 8100                              endm
 168+ 8100
 169+ 8100              //  ______________________________________________________________________
 170+ 8100              //
 171+ 8100
 172+ 8100              S0_system:      equ     $D0E8               // Address of top of Calc Stack
 173+ 8100              TIB_system      equ     $D0E8               // TIB grows upwards, Return-Stack downward.
 174+ 8100              R0_system:      equ     $D188               // Address of top of Return Stack. This is S0 + $00A0
 175+ 8100              USER_system:    equ     $D188               // User variables zone.
 176+ 8100              FIRST_system:   equ     $D1E4               // Address of first BUFFER
 177+ 8100              LIMIT_system:   equ     $E000               // Address of first byte beyond last BUFFER
 178+ 8100
# file closed: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/system.asm
  89  8100                              include "L0.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/L0.asm
   1+ 8100              //  ______________________________________________________________________
   2+ 8100              //
   3+ 8100              //  L0.asm
   4+ 8100              //
   5+ 8100              //  Origin-Area and Level-0 definitions
   6+ 8100              //  ______________________________________________________________________
   7+ 8100
   8+ 8100
   9+ 8100              Cold_origin:
  10+ 8100 A7                           and     a
  11+ 8101 C3 17 96                     jp      ColdRoutine
  12+ 8104              Warm_origin:
  13+ 8104 37                           scf
  14+ 8105 C3 17 96                     jp      WarmRoutine
  15+ 8108
  16+ 8108              // +008
  17+ 8108 E8 D0        SP_Basic:       dw      $D0E8               // These are bits with some "standard" meaning... 0101
  18+ 810A
  19+ 810A              // +00A
  20+ 810A 00 0E                        dw      $0E00
  21+ 810C
  22+ 810C              // +00C
  23+ 810C 8B A3        Latest_origin:  dw      Latest_Definition   // Latest word (used in Cold_Start)
  24+ 810E
  25+ 810E              // +00E
  26+ 810E 0C 00        DEL_Char_Ptr:   dw      $000C               // This is the characther used as "Back-Space"
  27+ 8110
  28+ 8110              // +010
  29+ 8110 50 B2        CPU_Id          dw      $B250               // Z80 expressed in base 36
  30+ 8112
  31+ 8112              // +012
  32+ 8112 E8 D0        S0_origin:      dw      S0_system
  33+ 8114 88 D1        R0_origin:      dw      R0_system
  34+ 8116 E8 D0        TIB_origin:     dw      TIB_system
  35+ 8118 1F 00        WIDTH_origin:   dw      31
  36+ 811A 01 00        WARNING_origin: dw      1
  37+ 811C B1 A3        FENCE_origin:   dw      Fence_Word
  38+ 811E B1 A3        DP_origin       dw      Fence_Word
  39+ 8120 25 95        VOCLINK_origin: dw      Voclink_Ptr
  40+ 8122 E4 D1                        dw      FIRST_system
  41+ 8124 00 E0                        dw      LIMIT_system
  42+ 8126
  43+ 8126              // +026
  44+ 8126 8F           Block_Face:     db      SOLIDBLOCK_CHAR     // Caps-Lock   Cursor face
  45+ 8127 8C           Half_Face:      db      HALFBLOCK_CHAR      // Caps-unlock Cursor face
  46+ 8128 5F           Underscore_Face:db      UNDERSCORE_CHAR     // Underscore  Cursor face
  47+ 8129 00                           db      0
  48+ 812A
  49+ 812A              // +02A
  50+ 812A 00 00        IX_Echo:        dw      0                   // Echo IX after NextOS call
  51+ 812C
  52+ 812C              // +02C
  53+ 812C 00 00        SP_Saved:       dw      0                   // Saved SP dufing NextOS call
  54+ 812E
  55+ 812E              // +02E
  56+ 812E 88 D1        USER_Pointer:   dw      USER_system
  57+ 8130
  58+ 8130              // +030
  59+ 8130 88 D1        RP_Pointer:     dw      R0_system
  60+ 8132
  61+ 8132              // +32
  62+ 8132              // SP_Basic        dw      0
  63+ 8132
  64+ 8132
  65+ 8132              //  ______________________________________________________________________
  66+ 8132
  67+ 8132              // from this point we can use LDHLRP and LDRPHL Assembler macros
  68+ 8132              // instead of their equivalent long sequences.
  69+ 8132
  70+ 8132              //  ______________________________________________________________________
  71+ 8132
  72+ 8132              // address for "next" - inner interpreter
  73+ 8132              // This address must always be pointed by IX
  74+ 8132              // "next" macro simply does a  jp(ix)  instruction
  75+ 8132
  76+ 8132 D5           Psh2_Ptr:       push    de
  77+ 8133 E5           Psh1_Ptr:       push    hl
  78+ 8134
  79+ 8134              Next_Ptr:       // This address must always be kept in IX: "next" relies on that
  80+ 8134
  81+ 8134                              if DEBUGGING != 0
  82+ 8134 ~                            ld      hl, Next_Breakpoint_1
  83+ 8134 ~                            and     a
  84+ 8134 ~                            sbc     hl, bc
  85+ 8134 ~                            jr      nz, Next_Continue
  86+ 8134 ~                            nop // This is where you have to put a real breakpoint to intercept BC values...
  87+ 8134                              endif
  88+ 8134
  89+ 8134              Next_Continue:
  90+ 8134 0A                           ld      a, (bc)
  91+ 8135 03                           inc     bc
  92+ 8136 6F                           ld      l, a
  93+ 8137 0A                           ld      a, (bc)
  94+ 8138 03                           inc     bc
  95+ 8139 67                           ld      h, a                // hl contains a CFA (xt) of word being executed
  96+ 813A
  97+ 813A              // Execute xt i.e. CFA held in HL
  98+ 813A              Exec_Ptr:
  99+ 813A
 100+ 813A
 101+ 813A
 102+ 813A
 103+ 813A E9                           jp      (hl)                // and jump to it
 104+ 813B                                                          // there you'll find the real code or a CALL to a ;code part
 105+ 813B
 106+ 813B              //  ______________________________________________________________________
 107+ 813B              //
 108+ 813B              // lit          -- x
 109+ 813B              // puts on top of stack the value of the following word.
 110+ 813B              // it is compiled in colon definition before a literal number
 111+ 813B
 112+ 813B                              New_Def  LIT, "LIT", is_code, is_normal
 112+ 813B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 112+ 813B             >
 112+ 813B             >                // dummy db directives used to calculate length of namec
 112+ 813B 4C 49 54    >                db      "LIT"
 112+ 813E             >len_NFA         defl    $ - temp_NFA
 112+ 813E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 112+ 813B             >
 112+ 813B 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 112+ 813C 4C 49 54    >                db      "LIT"               // name string in 7-bit ascii, but
 112+ 813F             >                org     $-1                 // alter last byte of Name just above to set
 112+ 813E D4          >                db      {b $} | END_BIT     // msb as name end
 112+ 813F             >
 112+ 813F 00 00       >                dw      last_NFA            // Link to previous definition Name
 112+ 8141             >LIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 112+ 8141 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 112+ 8141 ~           >
 112+ 8141 ~           >
 112+ 8141             >                endif           ; ok        // for other definitions it "points" the correct handler
 112+ 8141             >                // Use of "; ok" to suppress "warning[fwdref]"
 112+ 8141             >
 112+ 8141             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 113+ 8141
 114+ 8141 0A                           ld      a, (bc)
 115+ 8142 03                           inc     bc
 116+ 8143 6F                           ld      l, a
 117+ 8144 0A                           ld      a, (bc)
 118+ 8145 03                           inc     bc
 119+ 8146 67                           ld      h, a
 120+ 8147                              psh1
 120+ 8147 E5          >                push    hl
 120+ 8148 DD E9       >                jp      (ix)
 121+ 814A
 122+ 814A              //  ______________________________________________________________________
 123+ 814A              //
 124+ 814A              // execute      i*x xt -- j*x
 125+ 814A              // execution token. usually xt is given by CFA
 126+ 814A
 127+ 814A                              New_Def  EXECUTE, "EXECUTE", is_code, is_normal
 127+ 814A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 127+ 814A             >
 127+ 814A             >                // dummy db directives used to calculate length of namec
 127+ 814A 45 58 45 43 >                db      "EXECUTE"
 127+ 814E 55 54 45    >
 127+ 8151             >len_NFA         defl    $ - temp_NFA
 127+ 8151             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 127+ 814A             >
 127+ 814A 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 127+ 814B 45 58 45 43 >                db      "EXECUTE"               // name string in 7-bit ascii, but
 127+ 814F 55 54 45    >
 127+ 8152             >                org     $-1                 // alter last byte of Name just above to set
 127+ 8151 C5          >                db      {b $} | END_BIT     // msb as name end
 127+ 8152             >
 127+ 8152 3B 81       >                dw      last_NFA            // Link to previous definition Name
 127+ 8154             >EXECUTE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 127+ 8154 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 127+ 8154 ~           >
 127+ 8154 ~           >
 127+ 8154             >                endif           ; ok        // for other definitions it "points" the correct handler
 127+ 8154             >                // Use of "; ok" to suppress "warning[fwdref]"
 127+ 8154             >
 127+ 8154             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 128+ 8154 E1                           pop     hl
 129+ 8155 18 E3                        jr      Exec_Ptr
 130+ 8157
 131+ 8157
 132+ 8157              //  ______________________________________________________________________
 133+ 8157              //
 134+ 8157              // branch       --
 135+ 8157              // unconditional branch in colon definition using the following cell as an offset from current IP value
 136+ 8157              // compiled by ELSE, AGAIN and some other immediate words
 137+ 8157
 138+ 8157                              New_Def BRANCH, "BRANCH", is_code, is_normal
 138+ 8157             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 138+ 8157             >
 138+ 8157             >                // dummy db directives used to calculate length of namec
 138+ 8157 42 52 41 4E >                db      "BRANCH"
 138+ 815B 43 48       >
 138+ 815D             >len_NFA         defl    $ - temp_NFA
 138+ 815D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 138+ 8157             >
 138+ 8157 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 138+ 8158 42 52 41 4E >                db      "BRANCH"               // name string in 7-bit ascii, but
 138+ 815C 43 48       >
 138+ 815E             >                org     $-1                 // alter last byte of Name just above to set
 138+ 815D C8          >                db      {b $} | END_BIT     // msb as name end
 138+ 815E             >
 138+ 815E 4A 81       >                dw      last_NFA            // Link to previous definition Name
 138+ 8160             >BRANCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 138+ 8160 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 138+ 8160 ~           >
 138+ 8160 ~           >
 138+ 8160             >                endif           ; ok        // for other definitions it "points" the correct handler
 138+ 8160             >                // Use of "; ok" to suppress "warning[fwdref]"
 138+ 8160             >
 138+ 8160             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 139+ 8160              Branch_Ptr:
 140+ 8160 60                           ld      h, b
 141+ 8161 69                           ld      l, c
 142+ 8162 5E                           ld      e, (hl)
 143+ 8163 23                           inc     hl
 144+ 8164 56                           ld      d, (hl)
 145+ 8165 2B                           dec     hl                  // offset is calculated from current IP
 146+ 8166 19                           add     hl, de
 147+ 8167 4D                           ld      c, l
 148+ 8168 44                           ld      b, h
 149+ 8169                              next
 149+ 8169 DD E9       >                jp      (ix)
 150+ 816B
 151+ 816B
 152+ 816B              //  ______________________________________________________________________
 153+ 816B              //
 154+ 816B              // 0branch      f --
 155+ 816B              // conditional branch if the top-of-stack is ZERO or FALSE.
 156+ 816B              // compiled by IF, UNTIL and some other immediate words
 157+ 816B
 158+ 816B                              New_Def ZBRANCH, "0BRANCH", is_code, is_normal
 158+ 816B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 158+ 816B             >
 158+ 816B             >                // dummy db directives used to calculate length of namec
 158+ 816B 30 42 52 41 >                db      "0BRANCH"
 158+ 816F 4E 43 48    >
 158+ 8172             >len_NFA         defl    $ - temp_NFA
 158+ 8172             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 158+ 816B             >
 158+ 816B 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 158+ 816C 30 42 52 41 >                db      "0BRANCH"               // name string in 7-bit ascii, but
 158+ 8170 4E 43 48    >
 158+ 8173             >                org     $-1                 // alter last byte of Name just above to set
 158+ 8172 C8          >                db      {b $} | END_BIT     // msb as name end
 158+ 8173             >
 158+ 8173 57 81       >                dw      last_NFA            // Link to previous definition Name
 158+ 8175             >ZBRANCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 158+ 8175 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 158+ 8175 ~           >
 158+ 8175 ~           >
 158+ 8175             >                endif           ; ok        // for other definitions it "points" the correct handler
 158+ 8175             >                // Use of "; ok" to suppress "warning[fwdref]"
 158+ 8175             >
 158+ 8175             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 159+ 8175              ZBranch_Ptr:
 160+ 8175 E1                           pop     hl
 161+ 8176 7D                           ld      a, l
 162+ 8177 B4                           or      h
 163+ 8178 CA 60 81                     jp      z, Branch_Ptr
 164+ 817B 03                           inc     bc                  // if not branch, skip offset cell.
 165+ 817C 03                           inc     bc
 166+ 817D                              next
 166+ 817D DD E9       >                jp      (ix)
 167+ 817F
 168+ 817F              //  ______________________________________________________________________
 169+ 817F              //
 170+ 817F              // (loop)       --
 171+ 817F              // compiled by +LOOP. it uses the top two values of return-stack to
 172+ 817F              // keep track of index and limit
 173+ 817F                              New_Def C_LOOP, "(LOOP)", is_code, is_normal
 173+ 817F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 173+ 817F             >
 173+ 817F             >                // dummy db directives used to calculate length of namec
 173+ 817F 28 4C 4F 4F >                db      "(LOOP)"
 173+ 8183 50 29       >
 173+ 8185             >len_NFA         defl    $ - temp_NFA
 173+ 8185             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 173+ 817F             >
 173+ 817F 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 173+ 8180 28 4C 4F 4F >                db      "(LOOP)"               // name string in 7-bit ascii, but
 173+ 8184 50 29       >
 173+ 8186             >                org     $-1                 // alter last byte of Name just above to set
 173+ 8185 A9          >                db      {b $} | END_BIT     // msb as name end
 173+ 8186             >
 173+ 8186 6B 81       >                dw      last_NFA            // Link to previous definition Name
 173+ 8188             >C_LOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 173+ 8188 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 173+ 8188 ~           >
 173+ 8188 ~           >
 173+ 8188             >                endif           ; ok        // for other definitions it "points" the correct handler
 173+ 8188             >                // Use of "; ok" to suppress "warning[fwdref]"
 173+ 8188             >
 173+ 8188             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 174+ 8188
 175+ 8188
 176+ 8188 11 01 00                     ld      de, 1               // bc contains increment of 1
 177+ 818B
 178+ 818B
 179+ 818B
 180+ 818B
 181+ 818B
 182+ 818B
 183+ 818B
 184+ 818B
 185+ 818B              Loop_Ptr:
 186+ 818B                              ldhlrp                      // ld hl,rp macro 30h +Origin
 186+ 818B 2A 30 81    >                ld      hl,(RP_Pointer)
 187+ 818E 7E                           ld      a, (hl)             // hl points to loop-index, add increment de to it.
 188+ 818F 83                           add     e
 189+ 8190 77                           ld      (hl), a
 190+ 8191 5F                           ld      e, a
 191+ 8192 23                           inc     hl
 192+ 8193 7E                           ld      a, (hl)
 193+ 8194 8A                           adc     d
 194+ 8195 77                           ld      (hl),a
 195+ 8196 23                           inc     hl                  // hl now points to loop-limit
 196+ 8197 CB 7A                        bit     7, d                // keep increment-sign just before overwriting d
 197+ 8199 57                           ld      d, a
 198+ 819A 20 07                        jr      nz, Loop_NegativeIncrement
 199+ 819C
 200+ 819C 7B                               ld      a, e
 201+ 819D 96                               sub     (hl)
 202+ 819E 7A                               ld      a, d
 203+ 819F 23                               inc     hl
 204+ 81A0 9E                               sbc     (hl)
 205+ 81A1 18 05                        jr      Loop_Endif              // else
 206+ 81A3              Loop_NegativeIncrement:
 207+ 81A3 7E                               ld      a, (hl)
 208+ 81A4 93                               sub     e
 209+ 81A5 23                               inc     hl
 210+ 81A6 7E                               ld      a, (hl)
 211+ 81A7 9A                               sbc     d
 212+ 81A8              Loop_Endif:
 213+ 81A8
 214+ 81A8 FA 60 81                     jp      m, Branch_Ptr       // perform branch consuming following cell
 215+ 81AB
 216+ 81AB 23                           inc     hl
 217+ 81AC                              ldrphl                      // ld rp,hl macro 30h +Origin
 217+ 81AC 22 30 81    >                ld      (RP_Pointer),hl
 218+ 81AF
 219+ 81AF 03                           inc     bc                  // skip branch-style offset
 220+ 81B0 03                           inc     bc
 221+ 81B1                              next
 221+ 81B1 DD E9       >                jp      (ix)
 222+ 81B3
 223+ 81B3              //  ______________________________________________________________________
 224+ 81B3              //
 225+ 81B3              // (+loop)       n --
 226+ 81B3              // same as (LOOP) but index is incremented by n (instead of just 1)
 227+ 81B3              // compiled by +LOOP.
 228+ 81B3                              New_Def C_PLOOP, "(+LOOP)", is_code, is_normal
 228+ 81B3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 228+ 81B3             >
 228+ 81B3             >                // dummy db directives used to calculate length of namec
 228+ 81B3 28 2B 4C 4F >                db      "(+LOOP)"
 228+ 81B7 4F 50 29    >
 228+ 81BA             >len_NFA         defl    $ - temp_NFA
 228+ 81BA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 228+ 81B3             >
 228+ 81B3 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 228+ 81B4 28 2B 4C 4F >                db      "(+LOOP)"               // name string in 7-bit ascii, but
 228+ 81B8 4F 50 29    >
 228+ 81BB             >                org     $-1                 // alter last byte of Name just above to set
 228+ 81BA A9          >                db      {b $} | END_BIT     // msb as name end
 228+ 81BB             >
 228+ 81BB 7F 81       >                dw      last_NFA            // Link to previous definition Name
 228+ 81BD             >C_PLOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 228+ 81BD ~           >                call    runcode ; ok        // for primitive definitions  actual code
 228+ 81BD ~           >
 228+ 81BD ~           >
 228+ 81BD             >                endif           ; ok        // for other definitions it "points" the correct handler
 228+ 81BD             >                // Use of "; ok" to suppress "warning[fwdref]"
 228+ 81BD             >
 228+ 81BD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 229+ 81BD D1                           pop     de
 230+ 81BE C3 8B 81                     jp      Loop_Ptr
 231+ 81C1
 232+ 81C1              //  ______________________________________________________________________
 233+ 81C1              //
 234+ 81C1              // (?do)        lim ind --
 235+ 81C1              // compiled by ?DO to make a loop checking for lim == ind first
 236+ 81C1              // at run-time (?DO) must be followed by a BRANCH offset
 237+ 81C1              // used to skip the loop if lim == ind
 238+ 81C1                              New_Def C_Q_DO, "(?DO)", is_code, is_normal
 238+ 81C1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 238+ 81C1             >
 238+ 81C1             >                // dummy db directives used to calculate length of namec
 238+ 81C1 28 3F 44 4F >                db      "(?DO)"
 238+ 81C5 29          >
 238+ 81C6             >len_NFA         defl    $ - temp_NFA
 238+ 81C6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 238+ 81C1             >
 238+ 81C1 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 238+ 81C2 28 3F 44 4F >                db      "(?DO)"               // name string in 7-bit ascii, but
 238+ 81C6 29          >
 238+ 81C7             >                org     $-1                 // alter last byte of Name just above to set
 238+ 81C6 A9          >                db      {b $} | END_BIT     // msb as name end
 238+ 81C7             >
 238+ 81C7 B3 81       >                dw      last_NFA            // Link to previous definition Name
 238+ 81C9             >C_Q_DO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 238+ 81C9 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 238+ 81C9 ~           >
 238+ 81C9 ~           >
 238+ 81C9             >                endif           ; ok        // for other definitions it "points" the correct handler
 238+ 81C9             >                // Use of "; ok" to suppress "warning[fwdref]"
 238+ 81C9             >
 238+ 81C9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 239+ 81C9 D1                           pop     de                  // de has the index
 240+ 81CA E1                           pop     hl                  // hl has the limit
 241+ 81CB E5                           push    hl
 242+ 81CC D5                           push    de
 243+ 81CD A7                           and     a                   // reset carry flag
 244+ 81CE ED 52                        sbc     hl, de              // compute limit - index
 245+ 81D0 20 05                        jr      nz, Do_Ptr          // if zero then don't even begin loop
 246+ 81D2 D1                               pop     de
 247+ 81D3 E1                               pop     hl
 248+ 81D4
 249+ 81D4 C3 60 81                         jp      Branch_Ptr          // perform branch consuming following cell
 250+ 81D7              Do_Ptr:
 251+ 81D7                              ldhlrp                      // prepare RP
 251+ 81D7 2A 30 81    >                ld      hl,(RP_Pointer)
 252+ 81DA 2B                           dec     hl
 253+ 81DB 2B                           dec     hl
 254+ 81DC 2B                           dec     hl
 255+ 81DD 2B                           dec     hl
 256+ 81DE                              ldrphl
 256+ 81DE 22 30 81    >                ld      (RP_Pointer),hl
 257+ 81E1
 258+ 81E1                              // store index as top RP
 259+ 81E1 D1                           pop     de
 260+ 81E2 73                           ld      (hl), e
 261+ 81E3 23                           inc     hl
 262+ 81E4 72                           ld      (hl), d
 263+ 81E5 23                           inc     hl
 264+ 81E6                              // stores lim as second from top RP
 265+ 81E6 D1                           pop     de
 266+ 81E7 73                           ld      (hl), e
 267+ 81E8 23                           inc     hl
 268+ 81E9 72                           ld      (hl), d
 269+ 81EA
 270+ 81EA                              // skip branch-style offseet
 271+ 81EA 03                           inc     bc
 272+ 81EB 03                           inc     bc
 273+ 81EC                              next
 273+ 81EC DD E9       >                jp      (ix)
 274+ 81EE
 275+ 81EE              //  ______________________________________________________________________
 276+ 81EE              //
 277+ 81EE              // (do)        lim ind --
 278+ 81EE              // compiled by DO to make a loop checking for lim == ind first
 279+ 81EE              // this is a simpler version of (?DO)
 280+ 81EE                              New_Def C_DO, "(DO)", is_code, is_normal
 280+ 81EE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 280+ 81EE             >
 280+ 81EE             >                // dummy db directives used to calculate length of namec
 280+ 81EE 28 44 4F 29 >                db      "(DO)"
 280+ 81F2             >len_NFA         defl    $ - temp_NFA
 280+ 81F2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 280+ 81EE             >
 280+ 81EE 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 280+ 81EF 28 44 4F 29 >                db      "(DO)"               // name string in 7-bit ascii, but
 280+ 81F3             >                org     $-1                 // alter last byte of Name just above to set
 280+ 81F2 A9          >                db      {b $} | END_BIT     // msb as name end
 280+ 81F3             >
 280+ 81F3 C1 81       >                dw      last_NFA            // Link to previous definition Name
 280+ 81F5             >C_DO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 280+ 81F5 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 280+ 81F5 ~           >
 280+ 81F5 ~           >
 280+ 81F5             >                endif           ; ok        // for other definitions it "points" the correct handler
 280+ 81F5             >                // Use of "; ok" to suppress "warning[fwdref]"
 280+ 81F5             >
 280+ 81F5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 281+ 81F5 0B                           dec     bc                  // prepare IP beforehand
 282+ 81F6 0B                           dec     bc                  // to balance the two final inc bc in (?do)
 283+ 81F7 C3 D7 81                     jp      Do_Ptr
 284+ 81FA
 285+ 81FA              //  ______________________________________________________________________
 286+ 81FA              //
 287+ 81FA              // i            -- n
 288+ 81FA              // used between DO and LOOP or between DO e +LOOP to copy on top of stack
 289+ 81FA              // the current value of the index-loop
 290+ 81FA                              New_Def I, "I", is_code, is_normal
 290+ 81FA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 290+ 81FA             >
 290+ 81FA             >                // dummy db directives used to calculate length of namec
 290+ 81FA 49          >                db      "I"
 290+ 81FB             >len_NFA         defl    $ - temp_NFA
 290+ 81FB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 290+ 81FA             >
 290+ 81FA 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 290+ 81FB 49          >                db      "I"               // name string in 7-bit ascii, but
 290+ 81FC             >                org     $-1                 // alter last byte of Name just above to set
 290+ 81FB C9          >                db      {b $} | END_BIT     // msb as name end
 290+ 81FC             >
 290+ 81FC EE 81       >                dw      last_NFA            // Link to previous definition Name
 290+ 81FE             >I:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 290+ 81FE ~           >                call    runcode ; ok        // for primitive definitions  actual code
 290+ 81FE ~           >
 290+ 81FE ~           >
 290+ 81FE             >                endif           ; ok        // for other definitions it "points" the correct handler
 290+ 81FE             >                // Use of "; ok" to suppress "warning[fwdref]"
 290+ 81FE             >
 290+ 81FE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 291+ 81FE              I_Ptr:
 292+ 81FE
 293+ 81FE                              ldhlrp
 293+ 81FE 2A 30 81    >                ld      hl,(RP_Pointer)
 294+ 8201 5E                           ld      e, (hl)
 295+ 8202 23                           inc     hl
 296+ 8203 56                           ld      d, (hl)
 297+ 8204 D5                           push    de
 298+ 8205                              next
 298+ 8205 DD E9       >                jp      (ix)
 299+ 8207
 300+ 8207              //  ______________________________________________________________________
 301+ 8207              //
 302+ 8207              // digit        c n -- u 1  |  0
 303+ 8207              // convert a character c using base n
 304+ 8207              // returns a unsigned number and a true flag
 305+ 8207              // or just a false flag if the conversion fails
 306+ 8207                              New_Def DIGIT, "DIGIT", is_code, is_normal
 306+ 8207             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 306+ 8207             >
 306+ 8207             >                // dummy db directives used to calculate length of namec
 306+ 8207 44 49 47 49 >                db      "DIGIT"
 306+ 820B 54          >
 306+ 820C             >len_NFA         defl    $ - temp_NFA
 306+ 820C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 306+ 8207             >
 306+ 8207 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 306+ 8208 44 49 47 49 >                db      "DIGIT"               // name string in 7-bit ascii, but
 306+ 820C 54          >
 306+ 820D             >                org     $-1                 // alter last byte of Name just above to set
 306+ 820C D4          >                db      {b $} | END_BIT     // msb as name end
 306+ 820D             >
 306+ 820D FA 81       >                dw      last_NFA            // Link to previous definition Name
 306+ 820F             >DIGIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 306+ 820F ~           >                call    runcode ; ok        // for primitive definitions  actual code
 306+ 820F ~           >
 306+ 820F ~           >
 306+ 820F             >                endif           ; ok        // for other definitions it "points" the correct handler
 306+ 820F             >                // Use of "; ok" to suppress "warning[fwdref]"
 306+ 820F             >
 306+ 820F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 307+ 820F E1                           pop     hl                  // l has the base
 308+ 8210 D1                           pop     de                  // e has the digit
 309+ 8211 7B                           ld      a, e
 310+ 8212 FE 60                        cp      $60                 // check if lowercase
 311+ 8214 38 02                        jr      c, Digit_Uppercase
 312+ 8216 D6 20                            sub     $20                 // quick'n'dirty uppercase
 313+ 8218              Digit_Uppercase:
 314+ 8218 D6 30                        sub     $30
 315+ 821A 38 15                        jr      c, Digit_Fail       // fail when character < "0"
 316+ 821C FE 0A                            cp      $0A
 317+ 821E 38 06                            jr      c, Digit_Decimal    // perhaps is not decimal
 318+ 8220 D6 07                                sub     7                   // try hex and subtract 7
 319+ 8222 FE 0A                                cp      $0A
 320+ 8224 38 0B                                jr      c,  Digit_Fail      // it is not hex !
 321+ 8226
 322+ 8226              Digit_Decimal:
 323+ 8226                              // compare digit
 324+ 8226 BD                           cp      l                   // compare with base
 325+ 8227
 326+ 8227 30 08                        jr      nc, Digit_Fail      // fail when greater than base
 327+ 8229 5F                               ld      e, a                // digit is returned as second from TOS
 328+ 822A 21 01 00                         ld      hl, 1
 329+ 822D
 330+ 822D                                  psh2
 330+ 822D D5          >                push    de
 330+ 822E E5          >                push    hl
 330+ 822F DD E9       >                jp      (ix)
 331+ 8231              Digit_Fail:
 332+ 8231 21 00 00                     ld      hl, 0
 333+ 8234                              psh1
 333+ 8234 E5          >                push    hl
 333+ 8235 DD E9       >                jp      (ix)
 334+ 8237
 335+ 8237              //  ______________________________________________________________________
 336+ 8237              //
 337+ 8237              //  parametric uppercase routine
 338+ 8237              //  depending on the following op-code the routine can be by-passed
 339+ 8237              //  changing the behaviour of some callers.
 340+ 8237              //  If it is "ret" then the system is Case-Sensitive
 341+ 8237              //  If it is "Nop" then the system is Case-Insensitive
 342+ 8237              //  Only A register is touched.
 343+ 8237 00           Case_Sensitive: nop                         // Default is case-insensitive.
 344+ 8238              Case_Upper:
 345+ 8238 FE 61                        cp      LC_A_CHAR           // lower-case "a"
 346+ 823A D8                           ret     c                   // no change if A < "a"
 347+ 823B FE 7B                        cp      LC_Z_CHAR + 1       // lower-case "z" + 1
 348+ 823D D0                           ret     nc                  // no change if A > "z"
 349+ 823E D6 20                        sub     $20                 // Make uppercase if A in ["a".."z"]
 350+ 8240 C9                           ret
 351+ 8241
 352+ 8241              //  ______________________________________________________________________
 353+ 8241              //
 354+ 8241              //  caseon      --
 355+ 8241              // set system case-sensitivity on
 356+ 8241              // it patches a RET/NOP at the beginning of the uppercase-routine
 357+ 8241                              New_Def CASEON, "CASEON", is_code, is_normal
 357+ 8241             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 357+ 8241             >
 357+ 8241             >                // dummy db directives used to calculate length of namec
 357+ 8241 43 41 53 45 >                db      "CASEON"
 357+ 8245 4F 4E       >
 357+ 8247             >len_NFA         defl    $ - temp_NFA
 357+ 8247             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 357+ 8241             >
 357+ 8241 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 357+ 8242 43 41 53 45 >                db      "CASEON"               // name string in 7-bit ascii, but
 357+ 8246 4F 4E       >
 357+ 8248             >                org     $-1                 // alter last byte of Name just above to set
 357+ 8247 CE          >                db      {b $} | END_BIT     // msb as name end
 357+ 8248             >
 357+ 8248 07 82       >                dw      last_NFA            // Link to previous definition Name
 357+ 824A             >CASEON:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 357+ 824A ~           >                call    runcode ; ok        // for primitive definitions  actual code
 357+ 824A ~           >
 357+ 824A ~           >
 357+ 824A             >                endif           ; ok        // for other definitions it "points" the correct handler
 357+ 824A             >                // Use of "; ok" to suppress "warning[fwdref]"
 357+ 824A             >
 357+ 824A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 358+ 824A 3E C9                        ld      a, $C9              // "ret"
 359+ 824C 32 37 82                     ld      (Case_Sensitive), a
 360+ 824F                              next
 360+ 824F DD E9       >                jp      (ix)
 361+ 8251
 362+ 8251              //  ______________________________________________________________________
 363+ 8251              //
 364+ 8251              //  caseoff     --
 365+ 8251              // set system case-sensitivity on
 366+ 8251              // it patches a RET/NOP at the beginning of the uppercase-routine
 367+ 8251                              New_Def CASEOFF, "CASEOFF", is_code, is_normal
 367+ 8251             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 367+ 8251             >
 367+ 8251             >                // dummy db directives used to calculate length of namec
 367+ 8251 43 41 53 45 >                db      "CASEOFF"
 367+ 8255 4F 46 46    >
 367+ 8258             >len_NFA         defl    $ - temp_NFA
 367+ 8258             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 367+ 8251             >
 367+ 8251 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 367+ 8252 43 41 53 45 >                db      "CASEOFF"               // name string in 7-bit ascii, but
 367+ 8256 4F 46 46    >
 367+ 8259             >                org     $-1                 // alter last byte of Name just above to set
 367+ 8258 C6          >                db      {b $} | END_BIT     // msb as name end
 367+ 8259             >
 367+ 8259 41 82       >                dw      last_NFA            // Link to previous definition Name
 367+ 825B             >CASEOFF:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 367+ 825B ~           >                call    runcode ; ok        // for primitive definitions  actual code
 367+ 825B ~           >
 367+ 825B ~           >
 367+ 825B             >                endif           ; ok        // for other definitions it "points" the correct handler
 367+ 825B             >                // Use of "; ok" to suppress "warning[fwdref]"
 367+ 825B             >
 367+ 825B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 368+ 825B 3E 00                        ld      a, $00              // "nop"
 369+ 825D 32 37 82                     ld      (Case_Sensitive), a
 370+ 8260                              next
 370+ 8260 DD E9       >                jp      (ix)
 371+ 8262
 372+ 8262              //  ______________________________________________________________________
 373+ 8262              //
 374+ 8262              //  upper       c1 -- c1 | c2
 375+ 8262              // character on top of stack is forced to Uppercase.
 376+ 8262                              New_Def UPPER, "UPPER", is_code, is_normal
 376+ 8262             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 376+ 8262             >
 376+ 8262             >                // dummy db directives used to calculate length of namec
 376+ 8262 55 50 50 45 >                db      "UPPER"
 376+ 8266 52          >
 376+ 8267             >len_NFA         defl    $ - temp_NFA
 376+ 8267             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 376+ 8262             >
 376+ 8262 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 376+ 8263 55 50 50 45 >                db      "UPPER"               // name string in 7-bit ascii, but
 376+ 8267 52          >
 376+ 8268             >                org     $-1                 // alter last byte of Name just above to set
 376+ 8267 D2          >                db      {b $} | END_BIT     // msb as name end
 376+ 8268             >
 376+ 8268 51 82       >                dw      last_NFA            // Link to previous definition Name
 376+ 826A             >UPPER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 376+ 826A ~           >                call    runcode ; ok        // for primitive definitions  actual code
 376+ 826A ~           >
 376+ 826A ~           >
 376+ 826A             >                endif           ; ok        // for other definitions it "points" the correct handler
 376+ 826A             >                // Use of "; ok" to suppress "warning[fwdref]"
 376+ 826A             >
 376+ 826A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 377+ 826A E1                           pop     hl
 378+ 826B 7D                           ld      a, l
 379+ 826C CD 38 82                     call    Case_Upper
 380+ 826F 6F                           ld      l, a
 381+ 8270
 382+ 8270                              psh1
 382+ 8270 E5          >                push    hl
 382+ 8271 DD E9       >                jp      (ix)
 383+ 8273
 384+ 8273              //  ______________________________________________________________________
 385+ 8273              //
 386+ 8273              // (find)       addr voc -- addr 0 | cfa b 1
 387+ 8273              // vocabulary search,
 388+ 8273              // - voc is starting word's NFA
 389+ 8273              // - addr is the string to be searched for
 390+ 8273              // On success, it returns the CFA of found word, the first NFA byte
 391+ 8273              // (which contains length and some flags) and a true flag.
 392+ 8273              // On fail, a false flag  (no more: leaves addr unchanged)
 393+ 8273                              New_Def C_FIND, "(FIND)", is_code, is_normal
 393+ 8273             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 393+ 8273             >
 393+ 8273             >                // dummy db directives used to calculate length of namec
 393+ 8273 28 46 49 4E >                db      "(FIND)"
 393+ 8277 44 29       >
 393+ 8279             >len_NFA         defl    $ - temp_NFA
 393+ 8279             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 393+ 8273             >
 393+ 8273 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 393+ 8274 28 46 49 4E >                db      "(FIND)"               // name string in 7-bit ascii, but
 393+ 8278 44 29       >
 393+ 827A             >                org     $-1                 // alter last byte of Name just above to set
 393+ 8279 A9          >                db      {b $} | END_BIT     // msb as name end
 393+ 827A             >
 393+ 827A 62 82       >                dw      last_NFA            // Link to previous definition Name
 393+ 827C             >C_FIND:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 393+ 827C ~           >                call    runcode ; ok        // for primitive definitions  actual code
 393+ 827C ~           >
 393+ 827C ~           >
 393+ 827C             >                endif           ; ok        // for other definitions it "points" the correct handler
 393+ 827C             >                // Use of "; ok" to suppress "warning[fwdref]"
 393+ 827C             >
 393+ 827C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 394+ 827C                                                              // de has dictionary pointer
 395+ 827C D1                               pop     de
 396+ 827D              Find_VocabularyLoop:
 397+ 827D E1                               pop     hl                  // string pointer to search for
 398+ 827E E5                               push    hl                  // keep it on stack too for the end.
 399+ 827F 1A                               ld      a, (de)             // save NFA length byte
 400+ 8280 08                               ex      af,af'              // for later use (!)
 401+ 8281 1A                               ld      a, (de)             // reload NFA length byte
 402+ 8282 AE                               xor     (hl)                // check if same length
 403+ 8283 E6 3F                            and     $3F                 // by resetting 3 high bits (flags)
 404+ 8285                                  // word an text haven't the same length, skip to next vocabulary entry
 405+ 8285 20 2C                            jr      nz, Find_DifferentLenght
 406+ 8287
 407+ 8287              Find_ThisWord:  // begin loop
 408+ 8287 23                                   inc     hl
 409+ 8288 13                                   inc     de
 410+ 8289 1A                                   ld      a, (de)
 411+ 828A                                      // case insensitive option - begin
 412+ 828A C5                                   push    bc
 413+ 828B E6 80                                and     $80                 // split A in msb and the rest
 414+ 828D 47                                   ld      b, a
 415+ 828E 1A                                   ld      a, (de)
 416+ 828F E6 7F                                and     $7F                 // ... the rest (lower 7 bits)
 417+ 8291 CD 37 82                             call    Case_Sensitive      // uppercase routine
 418+ 8294 4F                                   ld      c, a
 419+ 8295 7E                                   ld      a, (hl)
 420+ 8296 CD 37 82                             call    Case_Sensitive      // uppercase routine
 421+ 8299 A9                                   xor     c
 422+ 829A A8                                   xor     b
 423+ 829B C1                                   pop     bc
 424+ 829C                                      // case insensitive option - end
 425+ 829C 87                                   add     a                   // ignore msb during compare
 426+ 829D 20 12                                jr      nz, Find_DidntMatch  // jump if doesn't match (*)
 427+ 829F
 428+ 829F                                  // loop back until last byte msb is found set
 429+ 829F                                  // that bit marks the ending char of this word
 430+ 829F 30 E6                            jr      nc, Find_ThisWord
 431+ 82A1
 432+ 82A1                                  // match found !
 433+ 82A1 21 03 00                             ld      hl, 3               // 3 bytes for CFA offset to skip LFA
 434+ 82A4 19                                   add     hl, de
 435+ 82A5 E3                                   ex      (sp), hl            // CFA on stack and drop addr
 436+ 82A6 08                                   ex      af, af'             // retrieve NFA byte (!)
 437+ 82A7 5F                                   ld      e, a
 438+ 82A8 16 00                                ld      d, 0
 439+ 82AA
 440+ 82AA
 441+ 82AA 21 01 00                             ld      hl, 1
 442+ 82AD                                      psh2
 442+ 82AD D5          >                push    de
 442+ 82AE E5          >                push    hl
 442+ 82AF DD E9       >                jp      (ix)
 443+ 82B1
 444+ 82B1              Find_DidntMatch: // didn't match (*)
 445+ 82B1 38 05                            jr      c,  Find_WordEnd   // jump if not end of word (**)
 446+ 82B3
 447+ 82B3              Find_DifferentLenght:
 448+ 82B3                              // consume chars until the end of the word
 449+ 82B3                              // that is last byte msb is found set
 450+ 82B3 13                               inc     de
 451+ 82B4 1A                               ld      a, (de)
 452+ 82B5 87                               add     a, a
 453+ 82B6 30 FB                        jr      nc, Find_DifferentLenght
 454+ 82B8
 455+ 82B8              Find_WordEnd:   // word-end  found (**)
 456+ 82B8                              // take LFA and use it
 457+ 82B8 13                           inc     de
 458+ 82B9 EB                           ex      de, hl
 459+ 82BA 5E                           ld      e, (hl)
 460+ 82BB 23                           inc     hl
 461+ 82BC 56                           ld      d, (hl)
 462+ 82BD 7A                           ld      a, d
 463+ 82BE B3                           or      e
 464+ 82BF
 465+ 82BF                          // loop until end of vocabulary
 466+ 82BF 20 BC                    jr      nz, Find_VocabularyLoop
 467+ 82C1
 468+ 82C1 E1                       pop     hl              // with this, it leaves addr unchanged
 469+ 82C2 21 00 00                 ld      hl, FALSE_FLAG
 470+ 82C5
 471+ 82C5                          psh1
 471+ 82C5 E5          >                push    hl
 471+ 82C6 DD E9       >                jp      (ix)
 472+ 82C8
 473+ 82C8              //  ______________________________________________________________________
 474+ 82C8              //
 475+ 82C8              // enclose      a c -- a  n1 n2 n3
 476+ 82C8              // starting from a, using delimiter c, determines the offsets:
 477+ 82C8              //   n1   the first character non-delimiter
 478+ 82C8              //   n2   the first delimiter after the text
 479+ 82C8              //   n3   the first character non enclosed.
 480+ 82C8              // This procedure does not go beyond a 'nul' ASCII (0x00) that represents
 481+ 82C8              // an uncoditional delimiter.
 482+ 82C8              // Examples:
 483+ 82C8              //   i:	c  c  x  x  x  c  x	 -- 2  5  6
 484+ 82C8              //  ii:	c  c  x  x  x  'nul' -- 2  5  5
 485+ 82C8              // iii:	c  c  'nul'          -- 2  3  2
 486+ 82C8                              New_Def ENCLOSE, "ENCLOSE", is_code, is_normal
 486+ 82C8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 486+ 82C8             >
 486+ 82C8             >                // dummy db directives used to calculate length of namec
 486+ 82C8 45 4E 43 4C >                db      "ENCLOSE"
 486+ 82CC 4F 53 45    >
 486+ 82CF             >len_NFA         defl    $ - temp_NFA
 486+ 82CF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 486+ 82C8             >
 486+ 82C8 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 486+ 82C9 45 4E 43 4C >                db      "ENCLOSE"               // name string in 7-bit ascii, but
 486+ 82CD 4F 53 45    >
 486+ 82D0             >                org     $-1                 // alter last byte of Name just above to set
 486+ 82CF C5          >                db      {b $} | END_BIT     // msb as name end
 486+ 82D0             >
 486+ 82D0 73 82       >                dw      last_NFA            // Link to previous definition Name
 486+ 82D2             >ENCLOSE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 486+ 82D2 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 486+ 82D2 ~           >
 486+ 82D2 ~           >
 486+ 82D2             >                endif           ; ok        // for other definitions it "points" the correct handler
 486+ 82D2             >                // Use of "; ok" to suppress "warning[fwdref]"
 486+ 82D2             >
 486+ 82D2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 487+ 82D2 D1                           pop     de                  //  e has the character
 488+ 82D3 E1                           pop     hl                  // hl has the string address
 489+ 82D4 E5                           push    hl
 490+ 82D5 7B                           ld      a, e
 491+ 82D6 11 FF FF                     ld      de, -1              // let's start from -1
 492+ 82D9 2B                           dec     hl
 493+ 82DA              Enclose_NonDelimiter:
 494+ 82DA                              // find first non delimiter
 495+ 82DA 23                               inc     hl
 496+ 82DB 13                               inc     de
 497+ 82DC BE                               cp      (hl)
 498+ 82DD 28 FB                        jr      z, Enclose_NonDelimiter
 499+ 82DF D5                           push    de
 500+ 82E0
 501+ 82E0 C5                           push    bc                  // save Instruction Pointer
 502+ 82E1
 503+ 82E1 4F                           ld      c, a                // save char
 504+ 82E2 7E                           ld      a, (hl)
 505+ 82E3 A7                           and     a                   // stop if 0x00
 506+ 82E4 20 07                        jr      nz, Enclose_NextChar
 507+ 82E6
 508+ 82E6                              /// case iii. no more character in string
 509+ 82E6 C1                               pop     bc                  // restore Instruction Pointer
 510+ 82E7 13                               inc     de
 511+ 82E8 D5                               push    de
 512+ 82E9 1B                               dec     de
 513+ 82EA D5                               push    de
 514+ 82EB                                  next
 514+ 82EB DD E9       >                jp      (ix)
 515+ 82ED              Enclose_NextChar:
 516+ 82ED 79                               ld      a, c
 517+ 82EE 23                               inc     hl
 518+ 82EF 13                               inc     de
 519+ 82F0 BE                               cp      (hl)
 520+ 82F1 20 06                            jr      nz, Enclose_NonSeparator
 521+ 82F3
 522+ 82F3                                      // case i. first non enclosed
 523+ 82F3 C1                                   pop     bc                  // restore Instruction Pointer
 524+ 82F4 D5                                   push    de
 525+ 82F5 13                                   inc     de
 526+ 82F6 D5                                   push    de
 527+ 82F7                                      next
 527+ 82F7 DD E9       >                jp      (ix)
 528+ 82F9              Enclose_NonSeparator:
 529+ 82F9 7E                               ld      a, (hl)
 530+ 82FA A7                               and     a
 531+ 82FB 20 F0                        jr      nz, Enclose_NextChar
 532+ 82FD
 533+ 82FD                              // case ii. separator & terminator
 534+ 82FD C1                           pop     bc                  // restore Instruction Pointer
 535+ 82FE D5                           push    de
 536+ 82FF D5                           push    de
 537+ 8300                              next
 537+ 8300 DD E9       >                jp      (ix)
 538+ 8302
 539+ 8302              //  ______________________________________________________________________
 540+ 8302              //
 541+ 8302              // (compare)    a1 a2 n -- b
 542+ 8302              // this word performs a lexicographic compare of n bytes of text at address a1
 543+ 8302              // with n bytes of text at address a2. It returns numeric a value:
 544+ 8302              //  0 : if strings are equal
 545+ 8302              // +1 : if string at a1 greater than string at a2
 546+ 8302              // -1 : if string at a1 less than string at a2
 547+ 8302              // strings can be 256 bytes in length at most.
 548+ 8302                              New_Def C_COMPARE, "(COMPARE)", is_code, is_normal
 548+ 8302             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 548+ 8302             >
 548+ 8302             >                // dummy db directives used to calculate length of namec
 548+ 8302 28 43 4F 4D >                db      "(COMPARE)"
 548+ 8306 50 41 52 45 >
 548+ 830A 29          >
 548+ 830B             >len_NFA         defl    $ - temp_NFA
 548+ 830B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 548+ 8302             >
 548+ 8302 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 548+ 8303 28 43 4F 4D >                db      "(COMPARE)"               // name string in 7-bit ascii, but
 548+ 8307 50 41 52 45 >
 548+ 830B 29          >
 548+ 830C             >                org     $-1                 // alter last byte of Name just above to set
 548+ 830B A9          >                db      {b $} | END_BIT     // msb as name end
 548+ 830C             >
 548+ 830C C8 82       >                dw      last_NFA            // Link to previous definition Name
 548+ 830E             >C_COMPARE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 548+ 830E ~           >                call    runcode ; ok        // for primitive definitions  actual code
 548+ 830E ~           >
 548+ 830E ~           >
 548+ 830E             >                endif           ; ok        // for other definitions it "points" the correct handler
 548+ 830E             >                // Use of "; ok" to suppress "warning[fwdref]"
 548+ 830E             >
 548+ 830E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 549+ 830E E1                           pop     hl                  // Number of bytes
 550+ 830F 7D                           ld      a, l
 551+ 8310 E1                           pop     hl                  // hl points string a2
 552+ 8311 D1                           pop     de                  // hl points string a1
 553+ 8312 C5                           push    bc                  // Instruction pointer on stack
 554+ 8313 47                           ld      b, a
 555+ 8314              C_Compare_Loop:
 556+ 8314 7E                               ld      a, (hl)
 557+ 8315 CD 37 82                         call    Case_Sensitive
 558+ 8318 4F                               ld      c, a
 559+ 8319 1A                               ld      a, (de)
 560+ 831A CD 37 82                         call    Case_Sensitive
 561+ 831D B9                               cp      c
 562+ 831E 13                               inc     de
 563+ 831F 23                               inc     hl
 564+ 8320 28 0E                            jr      z, C_Compare_Equal
 565+ 8322 38 05                                jr      c, C_Compare_NotLessThan  // If LessThan
 566+ 8324 21 01 00                                 ld      hl, 1               // a1 gt a2
 567+ 8327 18 03                                jr      C_Compare_Then      // Else
 568+ 8329              C_Compare_NotLessThan:
 569+ 8329 21 FF FF                                 ld      hl, -1              // a1 lt a2
 570+ 832C              C_Compare_Then:                                 // Endif
 571+ 832C C1                                   pop     bc              // restore Instruction Pointer
 572+ 832D
 573+ 832D                                      psh1
 573+ 832D E5          >                push    hl
 573+ 832E DD E9       >                jp      (ix)
 574+ 8330
 575+ 8330              C_Compare_Equal:
 576+ 8330 10 E2                        djnz    C_Compare_Loop
 577+ 8332 21 00 00                     ld      hl, 0               // a1 eq a2
 578+ 8335 C1                           pop     bc                  // restore Instruction Pointer
 579+ 8336
 580+ 8336                              psh1
 580+ 8336 E5          >                push    hl
 580+ 8337 DD E9       >                jp      (ix)
 581+ 8339
 582+ 8339              //  ______________________________________________________________________
 583+ 8339              //
 584+ 8339              // emitc        c --
 585+ 8339              // low level emit, calls ROM routine at #10 to send a character to
 586+ 8339              // the the current channel (see SELECT to change stream-channel)
 587+ 8339                              New_Def EMITC, "EMITC", is_code, is_normal
 587+ 8339             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 587+ 8339             >
 587+ 8339             >                // dummy db directives used to calculate length of namec
 587+ 8339 45 4D 49 54 >                db      "EMITC"
 587+ 833D 43          >
 587+ 833E             >len_NFA         defl    $ - temp_NFA
 587+ 833E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 587+ 8339             >
 587+ 8339 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 587+ 833A 45 4D 49 54 >                db      "EMITC"               // name string in 7-bit ascii, but
 587+ 833E 43          >
 587+ 833F             >                org     $-1                 // alter last byte of Name just above to set
 587+ 833E C3          >                db      {b $} | END_BIT     // msb as name end
 587+ 833F             >
 587+ 833F 02 83       >                dw      last_NFA            // Link to previous definition Name
 587+ 8341             >EMITC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 587+ 8341 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 587+ 8341 ~           >
 587+ 8341 ~           >
 587+ 8341             >                endif           ; ok        // for other definitions it "points" the correct handler
 587+ 8341             >                // Use of "; ok" to suppress "warning[fwdref]"
 587+ 8341             >
 587+ 8341             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 588+ 8341 E1                           pop     hl
 589+ 8342 7D                           ld      a, l
 590+ 8343              Emitc_Ptr:
 591+ 8343 C5                           push    bc
 592+ 8344 DD E5                        push    ix
 593+ 8346 D7                           rst     $10
 594+ 8347 DD E1                        pop     ix
 595+ 8349 C1                           pop     bc
 596+ 834A 3E FF                        ld      a, 255            // max possible
 597+ 834C 32 8C 5C                     ld      (SCR_CT), a
 598+ 834F
 599+ 834F                              next
 599+ 834F DD E9       >                jp      (ix)
 600+ 8351
 601+ 8351              Emitc_Vec:
 602+ 8351 94 83                        dw      C_Emit_Printable  // comma
 603+ 8353 9A 83                        dw      C_Emit_Bel        // bel
 604+ 8355 94 83                        dw      C_Emit_Printable  // bs
 605+ 8357 AF 83                        dw      C_Emit_Tab        // tab
 606+ 8359 94 83                        dw      C_Emit_Printable  // cr
 607+ 835B B5 83                        dw      C_Emit_NL         // lf (unix newline)
 608+ 835D 94 83                        dw      C_Emit_Printable  // blank
 609+ 835F 94 83                        dw      C_Emit_Printable  // blank
 610+ 8361
 611+ 8361              Emit_Selector_Start:
 612+ 8361 06                           db      $06                 // comma
 613+ 8362 07                           db      $07                 // bel
 614+ 8363 08                           db      $08                 // bs
 615+ 8364 09                           db      $09                 // tab
 616+ 8365 0D                           db      $0D                 // cr
 617+ 8366 0A                           db      $0A                 // lf (unix newline)
 618+ 8367 20                           db      $20
 619+ 8368              Emit_Selector_End:
 620+ 8368 20                           db      $20
 621+ 8369
 622+ 8369              //  ______________________________________________________________________
 623+ 8369              //
 624+ 8369              // (?emit)      c1 -- c2 | c1
 625+ 8369              // decode a character to be sent via EMIT
 626+ 8369              // search first the Emit_Selector table, if found jump to the corresponding routine in Emit_Vector
 627+ 8369              // the routine should resolve anything and convert the character anyway.
 628+ 8369                              New_Def C_EMIT, "(?EMIT)", is_code, is_normal
 628+ 8369             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 628+ 8369             >
 628+ 8369             >                // dummy db directives used to calculate length of namec
 628+ 8369 28 3F 45 4D >                db      "(?EMIT)"
 628+ 836D 49 54 29    >
 628+ 8370             >len_NFA         defl    $ - temp_NFA
 628+ 8370             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 628+ 8369             >
 628+ 8369 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 628+ 836A 28 3F 45 4D >                db      "(?EMIT)"               // name string in 7-bit ascii, but
 628+ 836E 49 54 29    >
 628+ 8371             >                org     $-1                 // alter last byte of Name just above to set
 628+ 8370 A9          >                db      {b $} | END_BIT     // msb as name end
 628+ 8371             >
 628+ 8371 39 83       >                dw      last_NFA            // Link to previous definition Name
 628+ 8373             >C_EMIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 628+ 8373 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 628+ 8373 ~           >
 628+ 8373 ~           >
 628+ 8373             >                endif           ; ok        // for other definitions it "points" the correct handler
 628+ 8373             >                // Use of "; ok" to suppress "warning[fwdref]"
 628+ 8373             >
 628+ 8373             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 629+ 8373 D1                           pop     de
 630+ 8374 7B                           ld      a, e                //  de has c1
 631+ 8375 E6 7F                        and     $7F                 // 7-bit ascii only
 632+ 8377 C5                           push    bc                  // save Instruction Pointer
 633+ 8378 01 08 00                     ld      bc, Emit_Selector_End - Emit_Selector_Start + 1
 634+ 837B 21 68 83                     ld      hl, Emit_Selector_End
 635+ 837E ED B9                        cpdr                        // search for c1 in Emit_Selector table, backward
 636+ 8380 20 0B                        jr      nz, C_Emit_Not_Found
 637+ 8382                                  // Found then decode it
 638+ 8382 21 51 83                         ld      hl, Emitc_Vec
 639+ 8385 09                               add     hl, bc
 640+ 8386 09                               add     hl, bc
 641+ 8387 5E                               ld      e, (hl)
 642+ 8388 23                               inc     hl
 643+ 8389 56                               ld      d, (hl)
 644+ 838A EB                               ex      de, hl
 645+ 838B C1                               pop     bc                  // restore Instruction Pointer
 646+ 838C E9                               jp      (hl)                // one of the following labels
 647+ 838D              C_Emit_Not_Found:
 648+ 838D C1                           pop     bc                  // restore Instruction Pointer
 649+ 838E FE 20                        cp      BLANK_CHAR          // cp $20 non-printable check
 650+ 8390 30 02                        jr      nc, C_Emit_Printable
 651+ 8392 3E 00                            ld      a, NUL_CHAR         // NUL is never "printed"
 652+ 8394              C_Emit_Printable:
 653+ 8394 6F                           ld      l, a
 654+ 8395 26 00                        ld      h, 0
 655+ 8397
 656+ 8397                              psh1
 656+ 8397 E5          >                push    hl
 656+ 8398 DD E9       >                jp      (ix)
 657+ 839A
 658+ 839A              C_Emit_Bel:
 659+ 839A C5                           push    bc                  // save Instruction Pointer
 660+ 839B 11 00 01                     ld      de, $0100
 661+ 839E 21 00 02                     ld      hl, $0200
 662+ 83A1 DD E5                        push    ix                  // save Next Pointer
 663+ 83A3 CD B6 03                     call    $03B6               // bleep Standard-ROM routine
 664+ 83A6 DD E1                        pop     ix                  // restore Next Pointer
 665+ 83A8 C1                           pop     bc                  // restore Instruction Pointer
 666+ 83A9 21 00 00                     ld      hl, NUL_CHAR
 667+ 83AC
 668+ 83AC                              psh1
 668+ 83AC E5          >                push    hl
 668+ 83AD DD E9       >                jp      (ix)
 669+ 83AF
 670+ 83AF 21 06 00     C_Emit_Tab:     ld      hl, COMMA_CHAR
 671+ 83B2
 672+ 83B2                              psh1
 672+ 83B2 E5          >                push    hl
 672+ 83B3 DD E9       >                jp      (ix)
 673+ 83B5
 674+ 83B5 21 0D 00     C_Emit_NL       ld      hl, CR_CHAR           // 0x0A --> 0x0D  à la Spectrum
 675+ 83B8
 676+ 83B8                              psh1
 676+ 83B8 E5          >                push    hl
 676+ 83B9 DD E9       >                jp      (ix)
 677+ 83BB
 678+ 83BB              //  ______________________________________________________________________
 679+ 83BB
 680+ 83BB              Key_Table:
 681+ 83BB E2                           db      $E2                 //  0: STOP  --> SYMBOL+A : ~
 682+ 83BC C3                           db      $C3                 //  1: NOT   --> SYMBOL+S : |
 683+ 83BD CD                           db      $CD                 //  2: STEP  --> SYMBOl+D : //
 684+ 83BE CC                           db      $CC                 //  3: TO    --> SYMBOL+F : {
 685+ 83BF CB                           db      $CB                 //  4: THEN  --> SYMBOL+G : }
 686+ 83C0 C6                           db      $C6                 //  5: AND   --> SYMBOL+Y : [
 687+ 83C1 C5                           db      $C5                 //  6: OR    --> SYMBOL+U : ]
 688+ 83C2 AC                           db      $AC                 //  7: AT    --> SYMBOL+I : (C) copyright symbol
 689+ 83C3 C7                           db      $C7                 //  8: <=
 690+ 83C4 C8                           db      $C8                 //  9: >=
 691+ 83C5 C9                           db      $C9                 // 10: <>    --> SYMBOL+W is the same as CAPS (toggle) SHIFT+2
 692+ 83C6              Key_MapTo:
 693+ 83C6 06                           db      $06                 // 10: SYMBOL+W is the same as CAPS (toggle) SHIFT+2
 694+ 83C7 20                           db      $20                 //  9: not used
 695+ 83C8 20                           db      $20                 //  8: not used
 696+ 83C9 7F                           db      $7F                 //  7: SYMBOL+I : (C) copyright symbol
 697+ 83CA 5D                           db      $5D                 //  6: SYMBOL+U : ]
 698+ 83CB 5B                           db      $5B                 //  5: SYMBOL+Y : [
 699+ 83CC 7D                           db      $7D                 //  4: SYMBOL+G : }
 700+ 83CD 7B                           db      $7B                 //  3: SYMBOL+F : {
 701+ 83CE 5C                           db      $5C                 //  2: SYMBOl+D : //
 702+ 83CF 7C                           db      $7C                 //  1: SYMBOL+S : |
 703+ 83D0 7E                           db      $7E                 //  0: SYMBOL+A : ~
 704+ 83D1
 705+ 83D1              //  ______________________________________________________________________
 706+ 83D1              //
 707+ 83D1              // key          -- c
 708+ 83D1              // convert a character c using base n
 709+ 83D1              // returns a unsigned number and a true flag
 710+ 83D1              // or just a false flag if the conversion fails
 711+ 83D1              // This definition need Standard ROM Interrupt to be served
 712+ 83D1
 713+ 83D1                              New_Def KEY, "KEY", is_code, is_normal
 713+ 83D1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 713+ 83D1             >
 713+ 83D1             >                // dummy db directives used to calculate length of namec
 713+ 83D1 4B 45 59    >                db      "KEY"
 713+ 83D4             >len_NFA         defl    $ - temp_NFA
 713+ 83D4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 713+ 83D1             >
 713+ 83D1 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 713+ 83D2 4B 45 59    >                db      "KEY"               // name string in 7-bit ascii, but
 713+ 83D5             >                org     $-1                 // alter last byte of Name just above to set
 713+ 83D4 D9          >                db      {b $} | END_BIT     // msb as name end
 713+ 83D5             >
 713+ 83D5 69 83       >                dw      last_NFA            // Link to previous definition Name
 713+ 83D7             >KEY:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 713+ 83D7 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 713+ 83D7 ~           >
 713+ 83D7 ~           >
 713+ 83D7             >                endif           ; ok        // for other definitions it "points" the correct handler
 713+ 83D7             >                // Use of "; ok" to suppress "warning[fwdref]"
 713+ 83D7             >
 713+ 83D7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 714+ 83D7
 715+ 83D7 C5                           push    bc                  // save Instruction Pointer
 716+ 83D8 DD E5                        push    ix
 717+ 83DA
 718+ 83DA ED 73 2C 81                  ld      (SP_Saved), sp      // be sure to to be paged out.
 719+ 83DE 31 FE 80                     ld      sp, Cold_origin - 2 // maybe $4000...
 720+ 83E1 FD CB 01 AE                  res     5, (iy + 1)         // FLAGS (5C3A+1)
 721+ 83E5
 722+ 83E5              Key_Wait:
 723+ 83E5 76                               halt
 724+ 83E6 3E 02                            ld      a, 2                // selec channel #2 (Upper Video)
 725+ 83E8 CD 01 16                         call    $1601               // SELECT Standard-ROM Routine
 726+ 83EB
 727+ 83EB                                  // software-flash: flips face every 320 ms
 728+ 83EB 3E 20                            ld      a, $20              // Timing based
 729+ 83ED FD A6 3E                         and     (iy + $3E)          // FRAMES (5C3A+3E)
 730+ 83F0
 731+ 83F0 3A 26 81                         ld      a, (Block_Face)     // see origin.asm
 732+ 83F3 20 0C                            jr      nz, Key_Cursor
 733+ 83F5 3A 27 81                             ld      a, (Half_Face)      // see origin.asm
 734+ 83F8 FD CB 30 5E                          bit     3, (iy + $30)       // FLAGS2 (5C3A+$30)
 735+ 83FC 28 03                                jr      z, Key_Cursor
 736+ 83FE 3A 28 81                                 ld      a, (Underscore_Face) // see origin
 737+ 8401              Key_Cursor:
 738+ 8401 D7                               rst     $10
 739+ 8402 3E 08                            ld      a, BACKSPACE_CHAR    // backspace
 740+ 8404 D7                               rst     $10
 741+ 8405
 742+ 8405 FD CB 01 6E                      bit     5, (iy + 1)         // FLAGS (5C3A+1)
 743+ 8409 28 DA                        jr      z, Key_Wait
 744+ 840B
 745+ 840B 76                           halt
 746+ 840C
 747+ 840C 3E 20                        ld      a, BLANK_CHAR       // space to blank cursor
 748+ 840E D7                           rst     $10
 749+ 840F 3E 08                        ld      a, BACKSPACE_CHAR   // backspace
 750+ 8411 D7                           rst     $10
 751+ 8412 3A 08 5C                     ld      a, (LASTK)          // get typed character (5C08)
 752+ 8415
 753+ 8415                              // decode character from above table
 754+ 8415 21 BB 83                     ld      hl, Key_Table
 755+ 8418 01 0B 00                     ld      bc, $000B
 756+ 841B ED B1                        cpir
 757+ 841D 20 05                        jr      nz, Key_DontMap
 758+ 841F 21 C6 83                         ld      hl, Key_MapTo
 759+ 8422 09                               add     hl, bc
 760+ 8423 7E                               ld      a, (hl)
 761+ 8424 FE 06        Key_DontMap:    cp      $06                 // CAPS-LOCK amnagement
 762+ 8426 20 09                        jr      nz, Key_NoCapsLock
 763+ 8428 21 6A 5C                         ld      hl, $5C6A           // FLAGS2
 764+ 842B 7E                               ld      a, (hl)
 765+ 842C EE 08                            xor     $08
 766+ 842E 77                               ld      (hl), a
 767+ 842F 3E 00                            ld      a, NUL_CHAR
 768+ 8431 6F           Key_NoCapsLock: ld      l, a
 769+ 8432 26 00                        ld      h, 0                // Prepare TOS
 770+ 8434
 771+ 8434 3A 48 5C                     ld      a, ($5C48)          // BORDCR system variable
 772+ 8437 1F                           rra
 773+ 8438 1F                           rra
 774+ 8439 1F                           rra
 775+ 843A F6 18                        or      $18                 // quick'n'dirty click
 776+ 843C D3 FE                        out     ($fe), a
 777+ 843E 06 00                        ld      b, 0
 778+ 8440 10 FE                        djnz    $                   // wait loop
 779+ 8442 EE 18                        xor     $18
 780+ 8444 D3 FE                        out     ($fe), a
 781+ 8446
 782+ 8446 ED 7B 2C 81                  ld      sp, (SP_Saved)
 783+ 844A
 784+ 844A DD E1                        pop     ix
 785+ 844C C1                           pop     bc                  // Restore Instruction Pointer
 786+ 844D
 787+ 844D                              psh1
 787+ 844D E5          >                push    hl
 787+ 844E DD E9       >                jp      (ix)
 788+ 8450
 789+ 8450              //  ______________________________________________________________________
 790+ 8450              //
 791+ 8450              // ?terminal    -- FALSE | TRUE
 792+ 8450              // convert a character c using base n
 793+ 8450              // returns a unsigned number and a true flag
 794+ 8450              // or just a false flag if the conversion fails
 795+ 8450                              New_Def QTERMINAL, "?TERMINAL", is_code, is_normal
 795+ 8450             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 795+ 8450             >
 795+ 8450             >                // dummy db directives used to calculate length of namec
 795+ 8450 3F 54 45 52 >                db      "?TERMINAL"
 795+ 8454 4D 49 4E 41 >
 795+ 8458 4C          >
 795+ 8459             >len_NFA         defl    $ - temp_NFA
 795+ 8459             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 795+ 8450             >
 795+ 8450 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 795+ 8451 3F 54 45 52 >                db      "?TERMINAL"               // name string in 7-bit ascii, but
 795+ 8455 4D 49 4E 41 >
 795+ 8459 4C          >
 795+ 845A             >                org     $-1                 // alter last byte of Name just above to set
 795+ 8459 CC          >                db      {b $} | END_BIT     // msb as name end
 795+ 845A             >
 795+ 845A D1 83       >                dw      last_NFA            // Link to previous definition Name
 795+ 845C             >QTERMINAL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 795+ 845C ~           >                call    runcode ; ok        // for primitive definitions  actual code
 795+ 845C ~           >
 795+ 845C ~           >
 795+ 845C             >                endif           ; ok        // for other definitions it "points" the correct handler
 795+ 845C             >                // Use of "; ok" to suppress "warning[fwdref]"
 795+ 845C             >
 795+ 845C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 796+ 845C 21 00 00                     ld      hl, 0
 797+ 845F ED 73 2C 81                  ld      (SP_Saved), sp
 798+ 8463 31 FE 80                     ld      sp, Cold_origin - 2
 799+ 8466 CD 54 1F                     call    $1F54
 800+ 8469 ED 7B 2C 81                  ld      sp, (SP_Saved)
 801+ 846D
 802+ 846D 38 01                        jr      c, QTerminal_NoBreak
 803+ 846F 2C                               inc     l                  // quick TRUE_FLAG
 804+ 8470              QTerminal_NoBreak:
 805+ 8470
 806+ 8470                              psh1
 806+ 8470 E5          >                push    hl
 806+ 8471 DD E9       >                jp      (ix)
 807+ 8473
 808+ 8473
 809+ 8473              //  ______________________________________________________________________
 810+ 8473              //
 811+ 8473              // ZX Spectrum Next - Low Level disk primitives.
 812+ 8473
 813+ 8473                              include "next-opt0.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/next-opt0.asm
   1++8473              //  ______________________________________________________________________
   2++8473              //
   3++8473              //  next-opt.asm
   4++8473              //
   5++8473              //  ZX Spectrum Next - peculiar definitions
   6++8473              //  ______________________________________________________________________
   7++8473
   8++8473              //  ______________________________________________________________________
   9++8473              //
  10++8473              // f_seek       d u -- f
  11++8473              // Seek to position d in file-handle u.
  12++8473              // Return a false-flag 0 on success, True flag on error
  13++8473                              New_Def F_SEEK, "F_SEEK", is_code, is_normal
  13++8473             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13++8473             >
  13++8473             >                // dummy db directives used to calculate length of namec
  13++8473 46 5F 53 45 >                db      "F_SEEK"
  13++8477 45 4B       >
  13++8479             >len_NFA         defl    $ - temp_NFA
  13++8479             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13++8473             >
  13++8473 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  13++8474 46 5F 53 45 >                db      "F_SEEK"               // name string in 7-bit ascii, but
  13++8478 45 4B       >
  13++847A             >                org     $-1                 // alter last byte of Name just above to set
  13++8479 CB          >                db      {b $} | END_BIT     // msb as name end
  13++847A             >
  13++847A 50 84       >                dw      last_NFA            // Link to previous definition Name
  13++847C             >F_SEEK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  13++847C ~           >                call    runcode ; ok        // for primitive definitions  actual code
  13++847C ~           >
  13++847C ~           >
  13++847C             >                endif           ; ok        // for other definitions it "points" the correct handler
  13++847C             >                // Use of "; ok" to suppress "warning[fwdref]"
  13++847C             >
  13++847C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14++847C E1                           pop     hl                  // file-handle
  15++847D 7D                           ld      a, l                // file-handle
  16++847E 60                           ld      h, b                // save Intruction Pointer
  17++847F 69                           ld      l, c
  18++8480 C1                           pop     bc                  // bc has high-word of d
  19++8481 D1                           pop     de
  20++8482 DD E5                        push    ix
  21++8484 E5                           push    hl                  // save Instruction Pointer
  22++8485 DD 21 00 00                  ld      ix, 0
  23++8489 CF                           rst     $08
  24++848A 9F                           db      $9F
  25++848B C1                           pop     bc                  // restore Instruction Pointer
  26++848C DD E1                        pop     ix
  27++848E ED 62                        sbc     hl, hl              // to get 0 or -1
  28++8490
  29++8490                              psh1
  29++8490 E5          >                push    hl
  29++8491 DD E9       >                jp      (ix)
  30++8493
  31++8493              //  ______________________________________________________________________
  32++8493              //
  33++8493              // f_fgetpos    u -- d f
  34++8493              // Seek to position d in file-handle u.
  35++8493              // Return a false-flag 0 on success, True flag on error
  36++8493                              New_Def F_FGETPOS, "F_FGETPOS", is_code, is_normal
  36++8493             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  36++8493             >
  36++8493             >                // dummy db directives used to calculate length of namec
  36++8493 46 5F 46 47 >                db      "F_FGETPOS"
  36++8497 45 54 50 4F >
  36++849B 53          >
  36++849C             >len_NFA         defl    $ - temp_NFA
  36++849C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  36++8493             >
  36++8493 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  36++8494 46 5F 46 47 >                db      "F_FGETPOS"               // name string in 7-bit ascii, but
  36++8498 45 54 50 4F >
  36++849C 53          >
  36++849D             >                org     $-1                 // alter last byte of Name just above to set
  36++849C D3          >                db      {b $} | END_BIT     // msb as name end
  36++849D             >
  36++849D 73 84       >                dw      last_NFA            // Link to previous definition Name
  36++849F             >F_FGETPOS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  36++849F ~           >                call    runcode ; ok        // for primitive definitions  actual code
  36++849F ~           >
  36++849F ~           >
  36++849F             >                endif           ; ok        // for other definitions it "points" the correct handler
  36++849F             >                // Use of "; ok" to suppress "warning[fwdref]"
  36++849F             >
  36++849F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  37++849F E1                           pop     hl
  38++84A0 7D                           ld      a, l                // file-handle
  39++84A1 DD E5                        push    ix
  40++84A3 C5                           push    bc
  41++84A4 CF                           rst     $08
  42++84A5 A0                           db      $A0
  43++84A6 E1                           pop     hl                  // restore Instruction Pointer
  44++84A7 DD E1                        pop     ix
  45++84A9 D5                           push    de
  46++84AA C5                           push    bc
  47++84AB 44                           ld      b, h                // restore Instruction Pointer
  48++84AC 4D                           ld      c, l
  49++84AD ED 62                        sbc     hl, hl
  50++84AF
  51++84AF                              psh1
  51++84AF E5          >                push    hl
  51++84B0 DD E9       >                jp      (ix)
  52++84B2
  53++84B2              //  ______________________________________________________________________
  54++84B2              //
  55++84B2              // f_read       a b u -- n f
  56++84B2              // Read b bytes from file-handle u to address a
  57++84B2              // Return the actual number n of bytes read
  58++84B2              // Return 0 on success, True flag on error
  59++84B2                              New_Def F_READ, "F_READ", is_code, is_normal
  59++84B2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  59++84B2             >
  59++84B2             >                // dummy db directives used to calculate length of namec
  59++84B2 46 5F 52 45 >                db      "F_READ"
  59++84B6 41 44       >
  59++84B8             >len_NFA         defl    $ - temp_NFA
  59++84B8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  59++84B2             >
  59++84B2 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  59++84B3 46 5F 52 45 >                db      "F_READ"               // name string in 7-bit ascii, but
  59++84B7 41 44       >
  59++84B9             >                org     $-1                 // alter last byte of Name just above to set
  59++84B8 C4          >                db      {b $} | END_BIT     // msb as name end
  59++84B9             >
  59++84B9 93 84       >                dw      last_NFA            // Link to previous definition Name
  59++84BB             >F_READ:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  59++84BB ~           >                call    runcode ; ok        // for primitive definitions  actual code
  59++84BB ~           >
  59++84BB ~           >
  59++84BB             >                endif           ; ok        // for other definitions it "points" the correct handler
  59++84BB             >                // Use of "; ok" to suppress "warning[fwdref]"
  59++84BB             >
  59++84BB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  60++84BB
  61++84BB 50                           ld      d, b
  62++84BC 59                           ld      e, c
  63++84BD E1                           pop     hl
  64++84BE 7D                           ld      a, l                // file-handle
  65++84BF C1                           pop     bc                  // bc has bytes to read
  66++84C0 DD E3                        ex      (sp), ix            // ix has address
  67++84C2 D5                           push    de                  // Save Instruction pointer
  68++84C3 CF                           rst     $08
  69++84C4 9D                           db      $9D
  70++84C5 C1                           pop     bc                  // Restore Instruction pointer
  71++84C6 DD E1                        pop     ix                  // Restore ix
  72++84C8 D5                           push    de                  // bytes written
  73++84C9 ED 62                        sbc     hl, hl
  74++84CB
  75++84CB                              psh1
  75++84CB E5          >                push    hl
  75++84CC DD E9       >                jp      (ix)
  76++84CE
  77++84CE              //  ______________________________________________________________________
  78++84CE              //
  79++84CE              // f_write      a b u -- n f
  80++84CE              // Write bytes currently stored at address a to file-handle u.
  81++84CE              // Return the actual n bytes written and 0 on success, True flag on error.
  82++84CE                              New_Def F_WRITE, "F_WRITE", is_code, is_normal
  82++84CE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  82++84CE             >
  82++84CE             >                // dummy db directives used to calculate length of namec
  82++84CE 46 5F 57 52 >                db      "F_WRITE"
  82++84D2 49 54 45    >
  82++84D5             >len_NFA         defl    $ - temp_NFA
  82++84D5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  82++84CE             >
  82++84CE 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  82++84CF 46 5F 57 52 >                db      "F_WRITE"               // name string in 7-bit ascii, but
  82++84D3 49 54 45    >
  82++84D6             >                org     $-1                 // alter last byte of Name just above to set
  82++84D5 C5          >                db      {b $} | END_BIT     // msb as name end
  82++84D6             >
  82++84D6 B2 84       >                dw      last_NFA            // Link to previous definition Name
  82++84D8             >F_WRITE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  82++84D8 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  82++84D8 ~           >
  82++84D8 ~           >
  82++84D8             >                endif           ; ok        // for other definitions it "points" the correct handler
  82++84D8             >                // Use of "; ok" to suppress "warning[fwdref]"
  82++84D8             >
  82++84D8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  83++84D8
  84++84D8 50                           ld      d, b
  85++84D9 59                           ld      e, c
  86++84DA E1                           pop     hl
  87++84DB 7D                           ld      a, l                // file-handle
  88++84DC C1                           pop     bc                  // bc has bytes to read
  89++84DD DD E3                        ex      (sp), ix            // ix has address
  90++84DF D5                           push    de                  // Save Instruction pointer
  91++84E0 CF                           rst     $08
  92++84E1 9E                           db      $9E
  93++84E2 C1                           pop     bc                  // Restore Instruction pointer
  94++84E3 DD E1                        pop     ix                  // Restore ix
  95++84E5 D5                           push    de                  // bytes written
  96++84E6 ED 62                        sbc     hl, hl
  97++84E8
  98++84E8                              psh1
  98++84E8 E5          >                push    hl
  98++84E9 DD E9       >                jp      (ix)
  99++84EB
 100++84EB              //  ______________________________________________________________________
 101++84EB              //
 102++84EB              // f_close      u -- f
 103++84EB              // Close file-handle u.
 104++84EB              // Return 0 on success, True flag on error
 105++84EB
 106++84EB                              New_Def F_CLOSE, "F_CLOSE", is_code, is_normal
 106++84EB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 106++84EB             >
 106++84EB             >                // dummy db directives used to calculate length of namec
 106++84EB 46 5F 43 4C >                db      "F_CLOSE"
 106++84EF 4F 53 45    >
 106++84F2             >len_NFA         defl    $ - temp_NFA
 106++84F2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 106++84EB             >
 106++84EB 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 106++84EC 46 5F 43 4C >                db      "F_CLOSE"               // name string in 7-bit ascii, but
 106++84F0 4F 53 45    >
 106++84F3             >                org     $-1                 // alter last byte of Name just above to set
 106++84F2 C5          >                db      {b $} | END_BIT     // msb as name end
 106++84F3             >
 106++84F3 CE 84       >                dw      last_NFA            // Link to previous definition Name
 106++84F5             >F_CLOSE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 106++84F5 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 106++84F5 ~           >
 106++84F5 ~           >
 106++84F5             >                endif           ; ok        // for other definitions it "points" the correct handler
 106++84F5             >                // Use of "; ok" to suppress "warning[fwdref]"
 106++84F5             >
 106++84F5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 107++84F5
 108++84F5 E1                           pop     hl
 109++84F6 7D                           ld      a, l                // file-handle
 110++84F7 DD E5                        push    ix
 111++84F9 C5                           push    bc                  // Save Instruction pointer
 112++84FA CF                           rst     $08
 113++84FB 9B                           db      $9B
 114++84FC C1                           pop     bc
 115++84FD DD E1                        pop     ix
 116++84FF ED 62                        sbc     hl, hl
 117++8501
 118++8501                              psh1
 118++8501 E5          >                push    hl
 118++8502 DD E9       >                jp      (ix)
 119++8504
 120++8504              //  ______________________________________________________________________
 121++8504              //
 122++8504              // f_open       a1 a2 b -- u f
 123++8504              // open a file
 124++8504              // a1 (filespec) is a null-terminated string, such as produced by ," definition
 125++8504              // a2 is address to an 8-byte header data used in some cases.
 126++8504              // b is access mode-byte, that is a combination of:
 127++8504              // any/all of:
 128++8504              //   esx_mode_read          $01 request read access
 129++8504              //   esx_mode_write         $02 request write access
 130++8504              //   esx_mode_use_header    $40 read/write +3DOS header
 131++8504              // plus one of:
 132++8504              //   esx_mode_open_exist    $00 only open existing file
 133++8504              //   esx_mode_open_creat    $08 open existing or create file
 134++8504              //   esx_mode_creat_noexist $04 create new file, error if exists
 135++8504              //   esx_mode_creat_trunc   $0c create new file, delete existing
 136++8504              // Return file-handle u and 0 on success, True flag on error
 137++8504                              New_Def F_OPEN, "F_OPEN", is_code, is_normal
 137++8504             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 137++8504             >
 137++8504             >                // dummy db directives used to calculate length of namec
 137++8504 46 5F 4F 50 >                db      "F_OPEN"
 137++8508 45 4E       >
 137++850A             >len_NFA         defl    $ - temp_NFA
 137++850A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 137++8504             >
 137++8504 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 137++8505 46 5F 4F 50 >                db      "F_OPEN"               // name string in 7-bit ascii, but
 137++8509 45 4E       >
 137++850B             >                org     $-1                 // alter last byte of Name just above to set
 137++850A CE          >                db      {b $} | END_BIT     // msb as name end
 137++850B             >
 137++850B EB 84       >                dw      last_NFA            // Link to previous definition Name
 137++850D             >F_OPEN:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 137++850D ~           >                call    runcode ; ok        // for primitive definitions  actual code
 137++850D ~           >
 137++850D ~           >
 137++850D             >                endif           ; ok        // for other definitions it "points" the correct handler
 137++850D             >                // Use of "; ok" to suppress "warning[fwdref]"
 137++850D             >
 137++850D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 138++850D 60                           ld      h, b                // Save Instruction pointer
 139++850E 69                           ld      l, c
 140++850F C1                           pop     bc                  // file-mode
 141++8510 41                           ld      b, c                // file-mode
 142++8511 D1                           pop     de                  // 8-bytes buffer if any
 143++8512 DD E3                        ex      (sp), ix            // filespec nul-terminated
 144++8514 E5                           push    hl                  // Save Instruction pointer
 145++8515 3E 2A                        ld      a, "*"
 146++8517 CF                           rst     $08
 147++8518 9A                           db      $9A
 148++8519 C1                           pop     bc
 149++851A DD E1                        pop     ix
 150++851C ED 62                        sbc     hl, hl
 151++851E 5F                           ld      e, a
 152++851F 16 00                        ld      d, 0
 153++8521
 154++8521
 155++8521                              psh2
 155++8521 D5          >                push    de
 155++8522 E5          >                push    hl
 155++8523 DD E9       >                jp      (ix)
 156++8525
 157++8525              //   \ CREATE FILENAME ," test.txt"   \ new Counted String
 158++8525              //   \ FILENAME 1+ PAD 1 F_OPEN
 159++8525              //   \ DROP
 160++8525              //   \ F_CLOSE
 161++8525
 162++8525              //  ______________________________________________________________________
 163++8525              //
 164++8525              // f_sync      u -- f
 165++8525              // Close file-handle u.
 166++8525              // Return 0 on success, True flag on error
 167++8525
 168++8525                              New_Def F_SYNC, "F_SYNC", is_code, is_normal
 168++8525             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 168++8525             >
 168++8525             >                // dummy db directives used to calculate length of namec
 168++8525 46 5F 53 59 >                db      "F_SYNC"
 168++8529 4E 43       >
 168++852B             >len_NFA         defl    $ - temp_NFA
 168++852B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 168++8525             >
 168++8525 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 168++8526 46 5F 53 59 >                db      "F_SYNC"               // name string in 7-bit ascii, but
 168++852A 4E 43       >
 168++852C             >                org     $-1                 // alter last byte of Name just above to set
 168++852B C3          >                db      {b $} | END_BIT     // msb as name end
 168++852C             >
 168++852C 04 85       >                dw      last_NFA            // Link to previous definition Name
 168++852E             >F_SYNC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 168++852E ~           >                call    runcode ; ok        // for primitive definitions  actual code
 168++852E ~           >
 168++852E ~           >
 168++852E             >                endif           ; ok        // for other definitions it "points" the correct handler
 168++852E             >                // Use of "; ok" to suppress "warning[fwdref]"
 168++852E             >
 168++852E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 169++852E E1                           pop     hl
 170++852F 7D                           ld      a, l                // file-handle
 171++8530 DD E5                        push    ix
 172++8532 C5                           push    bc
 173++8533 CF                           rst     $08
 174++8534 9C                           db      $9C
 175++8535 C1                           pop     bc
 176++8536 DD E1                        pop     ix
 177++8538 ED 62                        sbc     hl, hl
 178++853A
 179++853A                              psh1
 179++853A E5          >                push    hl
 179++853B DD E9       >                jp      (ix)
 180++853D
# file closed: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/next-opt0.asm
 814+ 853D
 815+ 853D
 816+ 853D              //  ______________________________________________________________________
 817+ 853D              //
 818+ 853D              // cr           --
 819+ 853D              // send a CR via EMITC
 820+ 853D                              New_Def CR, "CR", is_code, is_normal
 820+ 853D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 820+ 853D             >
 820+ 853D             >                // dummy db directives used to calculate length of namec
 820+ 853D 43 52       >                db      "CR"
 820+ 853F             >len_NFA         defl    $ - temp_NFA
 820+ 853F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 820+ 853D             >
 820+ 853D 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 820+ 853E 43 52       >                db      "CR"               // name string in 7-bit ascii, but
 820+ 8540             >                org     $-1                 // alter last byte of Name just above to set
 820+ 853F D2          >                db      {b $} | END_BIT     // msb as name end
 820+ 8540             >
 820+ 8540 25 85       >                dw      last_NFA            // Link to previous definition Name
 820+ 8542             >CR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 820+ 8542 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 820+ 8542 ~           >
 820+ 8542 ~           >
 820+ 8542             >                endif           ; ok        // for other definitions it "points" the correct handler
 820+ 8542             >                // Use of "; ok" to suppress "warning[fwdref]"
 820+ 8542             >
 820+ 8542             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 821+ 8542
 822+ 8542 3E 0D                        ld      a, CR_CHAR
 823+ 8544 C3 43 83                     jp      Emitc_Ptr
 824+ 8547
 825+ 8547              //  ______________________________________________________________________
 826+ 8547              //
 827+ 8547              // cmove    a1 a2 u --
 828+ 8547              // If u > 0, moves memory content starting at address a1 for n bytes long
 829+ 8547              // storing then starting at address addr2.
 830+ 8547              // The content of a1 is moved first. See CMOVE> also.
 831+ 8547                              New_Def CMOVE, "CMOVE", is_code, is_normal
 831+ 8547             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 831+ 8547             >
 831+ 8547             >                // dummy db directives used to calculate length of namec
 831+ 8547 43 4D 4F 56 >                db      "CMOVE"
 831+ 854B 45          >
 831+ 854C             >len_NFA         defl    $ - temp_NFA
 831+ 854C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 831+ 8547             >
 831+ 8547 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 831+ 8548 43 4D 4F 56 >                db      "CMOVE"               // name string in 7-bit ascii, but
 831+ 854C 45          >
 831+ 854D             >                org     $-1                 // alter last byte of Name just above to set
 831+ 854C C5          >                db      {b $} | END_BIT     // msb as name end
 831+ 854D             >
 831+ 854D 3D 85       >                dw      last_NFA            // Link to previous definition Name
 831+ 854F             >CMOVE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 831+ 854F ~           >                call    runcode ; ok        // for primitive definitions  actual code
 831+ 854F ~           >
 831+ 854F ~           >
 831+ 854F             >                endif           ; ok        // for other definitions it "points" the correct handler
 831+ 854F             >                // Use of "; ok" to suppress "warning[fwdref]"
 831+ 854F             >
 831+ 854F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 832+ 854F 60                           ld      h, b
 833+ 8550 69                           ld      l, c
 834+ 8551
 835+ 8551 C1                           pop     bc                  // bc has counter
 836+ 8552 D1                           pop     de                  // de now has dest
 837+ 8553 E3                           ex      (sp), hl            // hl has source, save Instruction Pointer
 838+ 8554 78                           ld      a, b
 839+ 8555 B1                           or      c
 840+ 8556 28 02                        jr      z, Cmove_NoMove
 841+ 8558 ED B0                            ldir
 842+ 855A              Cmove_NoMove:
 843+ 855A C1                           pop     bc                  // Restore Instruction Pointer
 844+ 855B
 845+ 855B                              next
 845+ 855B DD E9       >                jp      (ix)
 846+ 855D
 847+ 855D              //  ______________________________________________________________________
 848+ 855D              //
 849+ 855D              // cmove>    a1 a2 u --
 850+ 855D              // If u > 0, moves memory content starting at address a1 for n bytes long
 851+ 855D              // storing then starting at address addr2.
 852+ 855D              // The content of a1 is moved last. See cmove.
 853+ 855D                              New_Def CMOVE_TO, "CMOVE>", is_code, is_normal
 853+ 855D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 853+ 855D             >
 853+ 855D             >                // dummy db directives used to calculate length of namec
 853+ 855D 43 4D 4F 56 >                db      "CMOVE>"
 853+ 8561 45 3E       >
 853+ 8563             >len_NFA         defl    $ - temp_NFA
 853+ 8563             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 853+ 855D             >
 853+ 855D 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 853+ 855E 43 4D 4F 56 >                db      "CMOVE>"               // name string in 7-bit ascii, but
 853+ 8562 45 3E       >
 853+ 8564             >                org     $-1                 // alter last byte of Name just above to set
 853+ 8563 BE          >                db      {b $} | END_BIT     // msb as name end
 853+ 8564             >
 853+ 8564 47 85       >                dw      last_NFA            // Link to previous definition Name
 853+ 8566             >CMOVE_TO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 853+ 8566 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 853+ 8566 ~           >
 853+ 8566 ~           >
 853+ 8566             >                endif           ; ok        // for other definitions it "points" the correct handler
 853+ 8566             >                // Use of "; ok" to suppress "warning[fwdref]"
 853+ 8566             >
 853+ 8566             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 854+ 8566 60                           ld      h, b
 855+ 8567 69                           ld      l, c
 856+ 8568
 857+ 8568 C1                           pop     bc                  // bc has counter
 858+ 8569 D1                           pop     de                  // de has dest
 859+ 856A E3                           ex      (sp), hl            // hl has source, save Instruction Pointer
 860+ 856B 78                           ld      a, b
 861+ 856C B1                           or      c
 862+ 856D 28 08                        jr      z, CmoveV_NoMove
 863+ 856F EB                               ex      de, hl              // compute address to
 864+ 8570 09                               add     hl, bc              // operate backward
 865+ 8571 2B                               dec     hl
 866+ 8572 EB                               ex      de, hl
 867+ 8573 09                               add     hl, bc
 868+ 8574 2B                               dec     hl
 869+ 8575 ED B8                            lddr                        // backward
 870+ 8577              CmoveV_NoMove:
 871+ 8577 C1                           pop     bc                  // Restore Instruction Pointer
 872+ 8578
 873+ 8578                              next
 873+ 8578 DD E9       >                jp      (ix)
 874+ 857A
 875+ 857A              //  ______________________________________________________________________
 876+ 857A              //
 877+ 857A              // um*      u1 u2 -- ud
 878+ 857A              // Unsigned multiplication
 879+ 857A              // A double-integer is kept in CPU registers as DEHL then pushed on stack.
 880+ 857A              // On the stack a double number is treated as two single numbers
 881+ 857A              // where DE is on the top of the stack and HL is the second from top,
 882+ 857A              // Instead, in 2VARIABLE a double number is stored as EDLH.
 883+ 857A              // this definition could use "MUL" Z80N new op-code.
 884+ 857A                              New_Def UM_MUL, "UM*", is_code, is_normal
 884+ 857A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 884+ 857A             >
 884+ 857A             >                // dummy db directives used to calculate length of namec
 884+ 857A 55 4D 2A    >                db      "UM*"
 884+ 857D             >len_NFA         defl    $ - temp_NFA
 884+ 857D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 884+ 857A             >
 884+ 857A 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 884+ 857B 55 4D 2A    >                db      "UM*"               // name string in 7-bit ascii, but
 884+ 857E             >                org     $-1                 // alter last byte of Name just above to set
 884+ 857D AA          >                db      {b $} | END_BIT     // msb as name end
 884+ 857E             >
 884+ 857E 5D 85       >                dw      last_NFA            // Link to previous definition Name
 884+ 8580             >UM_MUL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 884+ 8580 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 884+ 8580 ~           >
 884+ 8580 ~           >
 884+ 8580             >                endif           ; ok        // for other definitions it "points" the correct handler
 884+ 8580             >                // Use of "; ok" to suppress "warning[fwdref]"
 884+ 8580             >
 884+ 8580             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 885+ 8580 D1                           pop     de                    // de has u2 operand
 886+ 8581 E1                           pop     hl                    // hl has u1 operand
 887+ 8582 C5                           push    bc                    // Save Instruction Pointer
 888+ 8583 44                           ld      b, h
 889+ 8584 4D                           ld      c, l
 890+ 8585 21 00 00                     ld      hl, 0
 891+ 8588 3E 10                        ld      a, 16                   // 16 steps
 892+ 858A              Um_Mul_Loop:
 893+ 858A 29                               add     hl, hl                  // shift DEHL
 894+ 858B CB 13                            rl      e                       // consuming one bit at a time
 895+ 858D CB 12                            rl      d
 896+ 858F 30 04                            jr      nc, Um_Mul_NoCarry      // if msb of DEHL was set then
 897+ 8591 09                                   add     hl, bc                  // add bc to hl and carry to de
 898+ 8592 30 01                                jr      nc, Um_Mul_NoCarry      // this carry doesn't happen before de (u1) is consumed
 899+ 8594 13                                       inc     de                      // transfer the carry to de
 900+ 8595              Um_Mul_NoCarry:
 901+ 8595 3D                               dec     a
 902+ 8596 20 F2                        jr      nz, Um_Mul_Loop
 903+ 8598 EB                           ex      de, hl
 904+ 8599 C1                           pop     bc
 905+ 859A
 906+ 859A
 907+ 859A                              psh2
 907+ 859A D5          >                push    de
 907+ 859B E5          >                push    hl
 907+ 859C DD E9       >                jp      (ix)
 908+ 859E
 909+ 859E              //  ______________________________________________________________________
 910+ 859E              //
 911+ 859E              // um/mod      ud u1 -- q r
 912+ 859E              // divides ud into u1 giving quotient q and remainder r
 913+ 859E              // algorithm takes 16 bit at a time starting from msb
 914+ 859E              // DE grows from lsb upward with quotient result
 915+ 859E              // HL keeps the remainder at each stage of division
 916+ 859E              // each loop 'lowers' the next binary digit to form the current dividend
 917+ 859E                              New_Def UMDIVMOD, "UM/MOD", is_code, is_normal
 917+ 859E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 917+ 859E             >
 917+ 859E             >                // dummy db directives used to calculate length of namec
 917+ 859E 55 4D 2F 4D >                db      "UM/MOD"
 917+ 85A2 4F 44       >
 917+ 85A4             >len_NFA         defl    $ - temp_NFA
 917+ 85A4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 917+ 859E             >
 917+ 859E 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 917+ 859F 55 4D 2F 4D >                db      "UM/MOD"               // name string in 7-bit ascii, but
 917+ 85A3 4F 44       >
 917+ 85A5             >                org     $-1                 // alter last byte of Name just above to set
 917+ 85A4 C4          >                db      {b $} | END_BIT     // msb as name end
 917+ 85A5             >
 917+ 85A5 7A 85       >                dw      last_NFA            // Link to previous definition Name
 917+ 85A7             >UMDIVMOD:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 917+ 85A7 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 917+ 85A7 ~           >
 917+ 85A7 ~           >
 917+ 85A7             >                endif           ; ok        // for other definitions it "points" the correct handler
 917+ 85A7             >                // Use of "; ok" to suppress "warning[fwdref]"
 917+ 85A7             >
 917+ 85A7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 918+ 85A7 60                           ld      h, b
 919+ 85A8 69                           ld      l, c                    // Save Instruction Pointer
 920+ 85A9
 921+ 85A9 C1                           pop     bc                      // divisor
 922+ 85AA
 923+ 85AA D1                           pop     de                      // < high part
 924+ 85AB E3                           ex      (sp), hl                // < low part and > save bc
 925+ 85AC EB                           ex      de, hl                  //
 926+ 85AD 7D                           ld      a, l                    // check without changing arguments
 927+ 85AE 91                           sub     c                       // if divisor is greater than high part
 928+ 85AF 7C                           ld      a, h                    // so quotient will be in range
 929+ 85B0 98                           sbc     a, b
 930+ 85B1 30 23                        jr      nc, Um_DivMod_OutOfRange
 931+ 85B3 3E 10                            ld      a, 16
 932+ 85B5              Um_DivMod_Loop:
 933+ 85B5 A7                                   and     a
 934+ 85B6 CB 13                                rl      e
 935+ 85B8 CB 12                                rl      d
 936+ 85BA CB 15                                rl      l
 937+ 85BC CB 14                                rl      h
 938+ 85BE 30 05                                jr      nc, Um_DivMod_Carry
 939+ 85C0 A7                                       and     a
 940+ 85C1 ED 42                                    sbc     hl, bc
 941+ 85C3 18 07                                jr      Um_DivMod_Endif    // else
 942+ 85C5              Um_DivMod_Carry:
 943+ 85C5 A7                                       and     a
 944+ 85C6 ED 42                                    sbc     hl, bc
 945+ 85C8 30 02                                    jr      nc, Um_DivMod_Endif
 946+ 85CA 09                                           add     hl, bc
 947+ 85CB 1B                                           dec     de
 948+ 85CC              Um_DivMod_Endif:                                   // endif
 949+ 85CC 13                                   inc     de
 950+ 85CD 3D                                   dec     a
 951+ 85CE 20 E5                            jr      nz, Um_DivMod_Loop
 952+ 85D0 EB                               ex      de, hl
 953+ 85D1              Um_DivMod_Bailout:
 954+ 85D1 C1                               pop     bc                  // restore Instruction Pointer
 955+ 85D2 D5                               push    de                  // de := remanider
 956+ 85D3 E5                               push    hl                  // hl := quotient
 957+ 85D4                                  next
 957+ 85D4 DD E9       >                jp      (ix)
 958+ 85D6
 959+ 85D6              Um_DivMod_OutOfRange:
 960+ 85D6 21 FF FF                     ld      hl, -1
 961+ 85D9 54                           ld      d, h
 962+ 85DA 5D                           ld      e, l
 963+ 85DB 18 F4                        jr      Um_DivMod_Bailout
 964+ 85DD
 965+ 85DD              //  ______________________________________________________________________
 966+ 85DD              //
 967+ 85DD              // and          n1 n2 -- n3
 968+ 85DD              // bit logical AND. Returns n3 as n1 & n2
 969+ 85DD                              New_Def AND_OP, "AND", is_code, is_normal
 969+ 85DD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 969+ 85DD             >
 969+ 85DD             >                // dummy db directives used to calculate length of namec
 969+ 85DD 41 4E 44    >                db      "AND"
 969+ 85E0             >len_NFA         defl    $ - temp_NFA
 969+ 85E0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 969+ 85DD             >
 969+ 85DD 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 969+ 85DE 41 4E 44    >                db      "AND"               // name string in 7-bit ascii, but
 969+ 85E1             >                org     $-1                 // alter last byte of Name just above to set
 969+ 85E0 C4          >                db      {b $} | END_BIT     // msb as name end
 969+ 85E1             >
 969+ 85E1 9E 85       >                dw      last_NFA            // Link to previous definition Name
 969+ 85E3             >AND_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 969+ 85E3 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 969+ 85E3 ~           >
 969+ 85E3 ~           >
 969+ 85E3             >                endif           ; ok        // for other definitions it "points" the correct handler
 969+ 85E3             >                // Use of "; ok" to suppress "warning[fwdref]"
 969+ 85E3             >
 969+ 85E3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 970+ 85E3 D1                           pop     de
 971+ 85E4 E1                           pop     hl
 972+ 85E5 7B                           ld      a, e
 973+ 85E6 A5                           and     l
 974+ 85E7 6F                           ld      l, a
 975+ 85E8 7A                           ld      a, d
 976+ 85E9 A4                           and     h
 977+ 85EA 67                           ld      h, a
 978+ 85EB
 979+ 85EB                              psh1
 979+ 85EB E5          >                push    hl
 979+ 85EC DD E9       >                jp      (ix)
 980+ 85EE
 981+ 85EE              //  ______________________________________________________________________
 982+ 85EE              //
 983+ 85EE              // or           n1 n2 -- n3
 984+ 85EE              // bit logical OR. Returns n3 as n1 | n2
 985+ 85EE                              New_Def OR_OP, "OR", is_code, is_normal
 985+ 85EE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 985+ 85EE             >
 985+ 85EE             >                // dummy db directives used to calculate length of namec
 985+ 85EE 4F 52       >                db      "OR"
 985+ 85F0             >len_NFA         defl    $ - temp_NFA
 985+ 85F0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 985+ 85EE             >
 985+ 85EE 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 985+ 85EF 4F 52       >                db      "OR"               // name string in 7-bit ascii, but
 985+ 85F1             >                org     $-1                 // alter last byte of Name just above to set
 985+ 85F0 D2          >                db      {b $} | END_BIT     // msb as name end
 985+ 85F1             >
 985+ 85F1 DD 85       >                dw      last_NFA            // Link to previous definition Name
 985+ 85F3             >OR_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 985+ 85F3 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 985+ 85F3 ~           >
 985+ 85F3 ~           >
 985+ 85F3             >                endif           ; ok        // for other definitions it "points" the correct handler
 985+ 85F3             >                // Use of "; ok" to suppress "warning[fwdref]"
 985+ 85F3             >
 985+ 85F3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 986+ 85F3 D1                           pop     de
 987+ 85F4 E1                           pop     hl
 988+ 85F5 7B                           ld      a, e
 989+ 85F6 B5                           or      l
 990+ 85F7 6F                           ld      l, a
 991+ 85F8 7A                           ld      a, d
 992+ 85F9 B4                           or      h
 993+ 85FA 67                           ld      h, a
 994+ 85FB
 995+ 85FB                              psh1
 995+ 85FB E5          >                push    hl
 995+ 85FC DD E9       >                jp      (ix)
 996+ 85FE
 997+ 85FE              //  ______________________________________________________________________
 998+ 85FE              //
 999+ 85FE              // xor          n1 n2 -- n3
1000+ 85FE              // bit logical OR. Returns n3 as n1 ^ n2
1001+ 85FE                              New_Def XOR_OP, "XOR", is_code, is_normal
1001+ 85FE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1001+ 85FE             >
1001+ 85FE             >                // dummy db directives used to calculate length of namec
1001+ 85FE 58 4F 52    >                db      "XOR"
1001+ 8601             >len_NFA         defl    $ - temp_NFA
1001+ 8601             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1001+ 85FE             >
1001+ 85FE 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1001+ 85FF 58 4F 52    >                db      "XOR"               // name string in 7-bit ascii, but
1001+ 8602             >                org     $-1                 // alter last byte of Name just above to set
1001+ 8601 D2          >                db      {b $} | END_BIT     // msb as name end
1001+ 8602             >
1001+ 8602 EE 85       >                dw      last_NFA            // Link to previous definition Name
1001+ 8604             >XOR_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1001+ 8604 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1001+ 8604 ~           >
1001+ 8604 ~           >
1001+ 8604             >                endif           ; ok        // for other definitions it "points" the correct handler
1001+ 8604             >                // Use of "; ok" to suppress "warning[fwdref]"
1001+ 8604             >
1001+ 8604             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1002+ 8604 D1                           pop     de
1003+ 8605 E1                           pop     hl
1004+ 8606 7B                           ld      a, e
1005+ 8607 AD                           xor     l
1006+ 8608 6F                           ld      l, a
1007+ 8609 7A                           ld      a, d
1008+ 860A AC                           xor     h
1009+ 860B 67                           ld      h, a
1010+ 860C
1011+ 860C                              psh1
1011+ 860C E5          >                push    hl
1011+ 860D DD E9       >                jp      (ix)
1012+ 860F
1013+ 860F              //  ______________________________________________________________________
1014+ 860F              //
1015+ 860F              // sp@      -- a
1016+ 860F              // returns on top of stack the value of SP before execution
1017+ 860F                              New_Def SPFETCH, "SP@", is_code, is_normal
1017+ 860F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1017+ 860F             >
1017+ 860F             >                // dummy db directives used to calculate length of namec
1017+ 860F 53 50 40    >                db      "SP@"
1017+ 8612             >len_NFA         defl    $ - temp_NFA
1017+ 8612             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1017+ 860F             >
1017+ 860F 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1017+ 8610 53 50 40    >                db      "SP@"               // name string in 7-bit ascii, but
1017+ 8613             >                org     $-1                 // alter last byte of Name just above to set
1017+ 8612 C0          >                db      {b $} | END_BIT     // msb as name end
1017+ 8613             >
1017+ 8613 FE 85       >                dw      last_NFA            // Link to previous definition Name
1017+ 8615             >SPFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1017+ 8615 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1017+ 8615 ~           >
1017+ 8615 ~           >
1017+ 8615             >                endif           ; ok        // for other definitions it "points" the correct handler
1017+ 8615             >                // Use of "; ok" to suppress "warning[fwdref]"
1017+ 8615             >
1017+ 8615             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1018+ 8615
1019+ 8615 21 00 00                     ld      hl, 0
1020+ 8618 39                           add     hl, sp
1021+ 8619
1022+ 8619                              psh1
1022+ 8619 E5          >                push    hl
1022+ 861A DD E9       >                jp      (ix)
1023+ 861C
1024+ 861C              //  ______________________________________________________________________
1025+ 861C              //
1026+ 861C              // sp!      a --
1027+ 861C              // restore SP to the initial value passed
1028+ 861C              // normally it is S0, i.e. the word at offset 6 and 7 of user variabiles area.
1029+ 861C                              New_Def SPSTORE, "SP!", is_code, is_normal
1029+ 861C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1029+ 861C             >
1029+ 861C             >                // dummy db directives used to calculate length of namec
1029+ 861C 53 50 21    >                db      "SP!"
1029+ 861F             >len_NFA         defl    $ - temp_NFA
1029+ 861F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1029+ 861C             >
1029+ 861C 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1029+ 861D 53 50 21    >                db      "SP!"               // name string in 7-bit ascii, but
1029+ 8620             >                org     $-1                 // alter last byte of Name just above to set
1029+ 861F A1          >                db      {b $} | END_BIT     // msb as name end
1029+ 8620             >
1029+ 8620 0F 86       >                dw      last_NFA            // Link to previous definition Name
1029+ 8622             >SPSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1029+ 8622 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1029+ 8622 ~           >
1029+ 8622 ~           >
1029+ 8622             >                endif           ; ok        // for other definitions it "points" the correct handler
1029+ 8622             >                // Use of "; ok" to suppress "warning[fwdref]"
1029+ 8622             >
1029+ 8622             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1030+ 8622 E1                           pop     hl
1031+ 8623 F9                           ld      sp, hl
1032+ 8624
1033+ 8624                              next
1033+ 8624 DD E9       >                jp      (ix)
1034+ 8626
1035+ 8626              //  ______________________________________________________________________
1036+ 8626              //
1037+ 8626              // rp@      -- a
1038+ 8626              // returns on top of stack the value of Return-Pointer
1039+ 8626                              New_Def RPFETCH, "RP@", is_code, is_normal
1039+ 8626             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1039+ 8626             >
1039+ 8626             >                // dummy db directives used to calculate length of namec
1039+ 8626 52 50 40    >                db      "RP@"
1039+ 8629             >len_NFA         defl    $ - temp_NFA
1039+ 8629             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1039+ 8626             >
1039+ 8626 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1039+ 8627 52 50 40    >                db      "RP@"               // name string in 7-bit ascii, but
1039+ 862A             >                org     $-1                 // alter last byte of Name just above to set
1039+ 8629 C0          >                db      {b $} | END_BIT     // msb as name end
1039+ 862A             >
1039+ 862A 1C 86       >                dw      last_NFA            // Link to previous definition Name
1039+ 862C             >RPFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1039+ 862C ~           >                call    runcode ; ok        // for primitive definitions  actual code
1039+ 862C ~           >
1039+ 862C ~           >
1039+ 862C             >                endif           ; ok        // for other definitions it "points" the correct handler
1039+ 862C             >                // Use of "; ok" to suppress "warning[fwdref]"
1039+ 862C             >
1039+ 862C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1040+ 862C
1041+ 862C                              ldhlrp
1041+ 862C 2A 30 81    >                ld      hl,(RP_Pointer)
1042+ 862F
1043+ 862F                              psh1
1043+ 862F E5          >                push    hl
1043+ 8630 DD E9       >                jp      (ix)
1044+ 8632
1045+ 8632              //  ______________________________________________________________________
1046+ 8632              //
1047+ 8632              // rp!      a --
1048+ 8632              // restore RP to the initial value passed
1049+ 8632              // normally it is R0 @, i.e. the word at offset 8 of user variabiles area.
1050+ 8632                              New_Def RPSTORE, "RP!", is_code, is_normal
1050+ 8632             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1050+ 8632             >
1050+ 8632             >                // dummy db directives used to calculate length of namec
1050+ 8632 52 50 21    >                db      "RP!"
1050+ 8635             >len_NFA         defl    $ - temp_NFA
1050+ 8635             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1050+ 8632             >
1050+ 8632 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1050+ 8633 52 50 21    >                db      "RP!"               // name string in 7-bit ascii, but
1050+ 8636             >                org     $-1                 // alter last byte of Name just above to set
1050+ 8635 A1          >                db      {b $} | END_BIT     // msb as name end
1050+ 8636             >
1050+ 8636 26 86       >                dw      last_NFA            // Link to previous definition Name
1050+ 8638             >RPSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1050+ 8638 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1050+ 8638 ~           >
1050+ 8638 ~           >
1050+ 8638             >                endif           ; ok        // for other definitions it "points" the correct handler
1050+ 8638             >                // Use of "; ok" to suppress "warning[fwdref]"
1050+ 8638             >
1050+ 8638             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1051+ 8638 E1                           pop     hl
1052+ 8639                              ldrphl
1052+ 8639 22 30 81    >                ld      (RP_Pointer),hl
1053+ 863C
1054+ 863C                              next
1054+ 863C DD E9       >                jp      (ix)
1055+ 863E
1056+ 863E              //  ______________________________________________________________________
1057+ 863E              //
1058+ 863E              // ;s      --
1059+ 863E              // exits back to the caller word
1060+ 863E                              New_Def EXIT, ";S", is_code, is_normal
1060+ 863E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1060+ 863E             >
1060+ 863E             >                // dummy db directives used to calculate length of namec
1060+ 863E 3B 53       >                db      ";S"
1060+ 8640             >len_NFA         defl    $ - temp_NFA
1060+ 8640             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1060+ 863E             >
1060+ 863E 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1060+ 863F 3B 53       >                db      ";S"               // name string in 7-bit ascii, but
1060+ 8641             >                org     $-1                 // alter last byte of Name just above to set
1060+ 8640 D3          >                db      {b $} | END_BIT     // msb as name end
1060+ 8641             >
1060+ 8641 32 86       >                dw      last_NFA            // Link to previous definition Name
1060+ 8643             >EXIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1060+ 8643 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1060+ 8643 ~           >
1060+ 8643 ~           >
1060+ 8643             >                endif           ; ok        // for other definitions it "points" the correct handler
1060+ 8643             >                // Use of "; ok" to suppress "warning[fwdref]"
1060+ 8643             >
1060+ 8643             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1061+ 8643                              ldhlrp                      // Get Return Stack Pointer
1061+ 8643 2A 30 81    >                ld      hl,(RP_Pointer)
1062+ 8646 4E                           ld      c, (hl)             // pop Instruction Pointer
1063+ 8647 23                           inc     hl                  // from Return Stack
1064+ 8648 46                           ld      b, (hl)
1065+ 8649 23                           inc     hl
1066+ 864A                              ldrphl                      // Set Return Stack Pointer
1066+ 864A 22 30 81    >                ld      (RP_Pointer),hl
1067+ 864D                              next
1067+ 864D DD E9       >                jp      (ix)
1068+ 864F
1069+ 864F              //  ______________________________________________________________________
1070+ 864F              //
1071+ 864F              // leave        --
1072+ 864F              // set the limit-of-loop equal to the current index
1073+ 864F              // this forces to leave from loop at the end of the current iteration
1074+ 864F                              New_Def LEAVE, "LEAVE", is_code, is_normal
1074+ 864F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1074+ 864F             >
1074+ 864F             >                // dummy db directives used to calculate length of namec
1074+ 864F 4C 45 41 56 >                db      "LEAVE"
1074+ 8653 45          >
1074+ 8654             >len_NFA         defl    $ - temp_NFA
1074+ 8654             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1074+ 864F             >
1074+ 864F 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1074+ 8650 4C 45 41 56 >                db      "LEAVE"               // name string in 7-bit ascii, but
1074+ 8654 45          >
1074+ 8655             >                org     $-1                 // alter last byte of Name just above to set
1074+ 8654 C5          >                db      {b $} | END_BIT     // msb as name end
1074+ 8655             >
1074+ 8655 3E 86       >                dw      last_NFA            // Link to previous definition Name
1074+ 8657             >LEAVE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1074+ 8657 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1074+ 8657 ~           >
1074+ 8657 ~           >
1074+ 8657             >                endif           ; ok        // for other definitions it "points" the correct handler
1074+ 8657             >                // Use of "; ok" to suppress "warning[fwdref]"
1074+ 8657             >
1074+ 8657             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1075+ 8657
1076+ 8657                              ldhlrp
1076+ 8657 2A 30 81    >                ld      hl,(RP_Pointer)
1077+ 865A 5E                           ld      e, (hl)
1078+ 865B 23                           inc     hl
1079+ 865C 56                           ld      d, (hl)
1080+ 865D 23                           inc     hl
1081+ 865E 73                           ld      (hl), e
1082+ 865F 23                           inc     hl
1083+ 8660 72                           ld      (hl), d
1084+ 8661
1085+ 8661                              next
1085+ 8661 DD E9       >                jp      (ix)
1086+ 8663
1087+ 8663              //  ______________________________________________________________________
1088+ 8663              //
1089+ 8663              // >r      n --
1090+ 8663              // pop from calculator-stack and push into return-stack
1091+ 8663                              New_Def TO_R, ">R", is_code, is_normal
1091+ 8663             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1091+ 8663             >
1091+ 8663             >                // dummy db directives used to calculate length of namec
1091+ 8663 3E 52       >                db      ">R"
1091+ 8665             >len_NFA         defl    $ - temp_NFA
1091+ 8665             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1091+ 8663             >
1091+ 8663 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1091+ 8664 3E 52       >                db      ">R"               // name string in 7-bit ascii, but
1091+ 8666             >                org     $-1                 // alter last byte of Name just above to set
1091+ 8665 D2          >                db      {b $} | END_BIT     // msb as name end
1091+ 8666             >
1091+ 8666 4F 86       >                dw      last_NFA            // Link to previous definition Name
1091+ 8668             >TO_R:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1091+ 8668 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1091+ 8668 ~           >
1091+ 8668 ~           >
1091+ 8668             >                endif           ; ok        // for other definitions it "points" the correct handler
1091+ 8668             >                // Use of "; ok" to suppress "warning[fwdref]"
1091+ 8668             >
1091+ 8668             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1092+ 8668 D1                           pop     de
1093+ 8669                              ldhlrp
1093+ 8669 2A 30 81    >                ld      hl,(RP_Pointer)
1094+ 866C 2B                           dec     hl
1095+ 866D 72                           ld      (hl), d             // store current TOS
1096+ 866E 2B                           dec     hl                  // to Return Stack
1097+ 866F 73                           ld      (hl), e
1098+ 8670                              ldrphl
1098+ 8670 22 30 81    >                ld      (RP_Pointer),hl
1099+ 8673
1100+ 8673                              next
1100+ 8673 DD E9       >                jp      (ix)
1101+ 8675
1102+ 8675              //  ______________________________________________________________________
1103+ 8675              //
1104+ 8675              // r>      -- n
1105+ 8675              // pop from return-stack and push into calculator-stack
1106+ 8675                              New_Def R_TO, "R>", is_code, is_normal
1106+ 8675             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1106+ 8675             >
1106+ 8675             >                // dummy db directives used to calculate length of namec
1106+ 8675 52 3E       >                db      "R>"
1106+ 8677             >len_NFA         defl    $ - temp_NFA
1106+ 8677             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1106+ 8675             >
1106+ 8675 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1106+ 8676 52 3E       >                db      "R>"               // name string in 7-bit ascii, but
1106+ 8678             >                org     $-1                 // alter last byte of Name just above to set
1106+ 8677 BE          >                db      {b $} | END_BIT     // msb as name end
1106+ 8678             >
1106+ 8678 63 86       >                dw      last_NFA            // Link to previous definition Name
1106+ 867A             >R_TO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1106+ 867A ~           >                call    runcode ; ok        // for primitive definitions  actual code
1106+ 867A ~           >
1106+ 867A ~           >
1106+ 867A             >                endif           ; ok        // for other definitions it "points" the correct handler
1106+ 867A             >                // Use of "; ok" to suppress "warning[fwdref]"
1106+ 867A             >
1106+ 867A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1107+ 867A
1108+ 867A                              ldhlrp
1108+ 867A 2A 30 81    >                ld      hl,(RP_Pointer)
1109+ 867D 5E                           ld      e, (hl)             // retrieve from Return Stack
1110+ 867E 23                           inc     hl
1111+ 867F 56                           ld      d, (hl)
1112+ 8680 23                           inc     hl
1113+ 8681                              ldrphl
1113+ 8681 22 30 81    >                ld      (RP_Pointer),hl
1114+ 8684 D5                           push    de
1115+ 8685                              next
1115+ 8685 DD E9       >                jp      (ix)
1116+ 8687
1117+ 8687              //  ______________________________________________________________________
1118+ 8687              //
1119+ 8687              // r            -- n
1120+ 8687              // return on top of stack the value of top of return-stack
1121+ 8687              // Since this is the same as I, we alter R's CFA to jump there
1122+ 8687                              New_Def R_OP, "R", I_Ptr, is_normal
1122+ 8687             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1122+ 8687             >
1122+ 8687             >                // dummy db directives used to calculate length of namec
1122+ 8687 52          >                db      "R"
1122+ 8688             >len_NFA         defl    $ - temp_NFA
1122+ 8688             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1122+ 8687             >
1122+ 8687 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1122+ 8688 52          >                db      "R"               // name string in 7-bit ascii, but
1122+ 8689             >                org     $-1                 // alter last byte of Name just above to set
1122+ 8688 D2          >                db      {b $} | END_BIT     // msb as name end
1122+ 8689             >
1122+ 8689 75 86       >                dw      last_NFA            // Link to previous definition Name
1122+ 868B             >R_OP:          if I_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1122+ 868B CD FE 81    >                call    I_Ptr ; ok        // for primitive definitions  actual code
1122+ 868E             >
1122+ 868E             >
1122+ 868E             >                endif           ; ok        // for other definitions it "points" the correct handler
1122+ 868E             >                // Use of "; ok" to suppress "warning[fwdref]"
1122+ 868E             >
1122+ 868E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1123+ 868E
1124+ 868E              //  ______________________________________________________________________
1125+ 868E              //
1126+ 868E              // 0=           n -- f
1127+ 868E              // true (non zero) if n is zero, false (0) elsewere
1128+ 868E                              New_Def ZEQUAL, "0=", is_code, is_normal
1128+ 868E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1128+ 868E             >
1128+ 868E             >                // dummy db directives used to calculate length of namec
1128+ 868E 30 3D       >                db      "0="
1128+ 8690             >len_NFA         defl    $ - temp_NFA
1128+ 8690             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1128+ 868E             >
1128+ 868E 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1128+ 868F 30 3D       >                db      "0="               // name string in 7-bit ascii, but
1128+ 8691             >                org     $-1                 // alter last byte of Name just above to set
1128+ 8690 BD          >                db      {b $} | END_BIT     // msb as name end
1128+ 8691             >
1128+ 8691 87 86       >                dw      last_NFA            // Link to previous definition Name
1128+ 8693             >ZEQUAL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1128+ 8693 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1128+ 8693 ~           >
1128+ 8693 ~           >
1128+ 8693             >                endif           ; ok        // for other definitions it "points" the correct handler
1128+ 8693             >                // Use of "; ok" to suppress "warning[fwdref]"
1128+ 8693             >
1128+ 8693             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1129+ 8693 E1                           pop     hl
1130+ 8694 7D                           ld      a, l
1131+ 8695 B4                           or      h
1132+ 8696 21 00 00                     ld      hl, FALSE_FLAG
1133+ 8699 20 01                        jr      nz, ZEqual_Skip
1134+ 869B 2C                               inc     l
1135+ 869C              ZEqual_Skip:
1136+ 869C                              psh1
1136+ 869C E5          >                push    hl
1136+ 869D DD E9       >                jp      (ix)
1137+ 869F
1138+ 869F              //  ______________________________________________________________________
1139+ 869F              //
1140+ 869F              // 0<           n -- f
1141+ 869F              // true (non zero) if n is less than zero, false (0) elsewere
1142+ 869F                              New_Def ZLESS, "0<", is_code, is_normal
1142+ 869F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1142+ 869F             >
1142+ 869F             >                // dummy db directives used to calculate length of namec
1142+ 869F 30 3C       >                db      "0<"
1142+ 86A1             >len_NFA         defl    $ - temp_NFA
1142+ 86A1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1142+ 869F             >
1142+ 869F 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1142+ 86A0 30 3C       >                db      "0<"               // name string in 7-bit ascii, but
1142+ 86A2             >                org     $-1                 // alter last byte of Name just above to set
1142+ 86A1 BC          >                db      {b $} | END_BIT     // msb as name end
1142+ 86A2             >
1142+ 86A2 8E 86       >                dw      last_NFA            // Link to previous definition Name
1142+ 86A4             >ZLESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1142+ 86A4 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1142+ 86A4 ~           >
1142+ 86A4 ~           >
1142+ 86A4             >                endif           ; ok        // for other definitions it "points" the correct handler
1142+ 86A4             >                // Use of "; ok" to suppress "warning[fwdref]"
1142+ 86A4             >
1142+ 86A4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1143+ 86A4 E1                           pop     hl
1144+ 86A5 29                           add     hl, hl
1145+ 86A6 21 00 00                     ld      hl, 0
1146+ 86A9 30 01                        jr      nc, ZLess_Skip
1147+ 86AB 2C                               inc     l
1148+ 86AC              ZLess_Skip:
1149+ 86AC                              psh1
1149+ 86AC E5          >                push    hl
1149+ 86AD DD E9       >                jp      (ix)
1150+ 86AF
1151+ 86AF              //  ______________________________________________________________________
1152+ 86AF              //
1153+ 86AF              // 0>           n -- f
1154+ 86AF              // true (non zero) if n is less than zero, false (0) elsewere
1155+ 86AF                              New_Def ZGREATER, "0>", is_code, is_normal
1155+ 86AF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1155+ 86AF             >
1155+ 86AF             >                // dummy db directives used to calculate length of namec
1155+ 86AF 30 3E       >                db      "0>"
1155+ 86B1             >len_NFA         defl    $ - temp_NFA
1155+ 86B1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1155+ 86AF             >
1155+ 86AF 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1155+ 86B0 30 3E       >                db      "0>"               // name string in 7-bit ascii, but
1155+ 86B2             >                org     $-1                 // alter last byte of Name just above to set
1155+ 86B1 BE          >                db      {b $} | END_BIT     // msb as name end
1155+ 86B2             >
1155+ 86B2 9F 86       >                dw      last_NFA            // Link to previous definition Name
1155+ 86B4             >ZGREATER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1155+ 86B4 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1155+ 86B4 ~           >
1155+ 86B4 ~           >
1155+ 86B4             >                endif           ; ok        // for other definitions it "points" the correct handler
1155+ 86B4             >                // Use of "; ok" to suppress "warning[fwdref]"
1155+ 86B4             >
1155+ 86B4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1156+ 86B4 E1                           pop     hl
1157+ 86B5 7D                           ld      a, l
1158+ 86B6 B4                           or      h
1159+ 86B7 29                           add     hl, hl
1160+ 86B8 21 00 00                     ld      hl, FALSE_FLAG
1161+ 86BB 38 04                        jr      c, ZGreater_Skip
1162+ 86BD A7                               and     a
1163+ 86BE 28 01                            jr      z, ZGreater_Skip
1164+ 86C0 2C                                   inc     l
1165+ 86C1              ZGreater_Skip:
1166+ 86C1                              psh1
1166+ 86C1 E5          >                push    hl
1166+ 86C2 DD E9       >                jp      (ix)
1167+ 86C4
1168+ 86C4              //  ______________________________________________________________________
1169+ 86C4              //
1170+ 86C4              // +            n1 n2 -- n3
1171+ 86C4              // returns the unsigned sum of two top values
1172+ 86C4                              New_Def PLUS, "+", is_code, is_normal
1172+ 86C4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1172+ 86C4             >
1172+ 86C4             >                // dummy db directives used to calculate length of namec
1172+ 86C4 2B          >                db      "+"
1172+ 86C5             >len_NFA         defl    $ - temp_NFA
1172+ 86C5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1172+ 86C4             >
1172+ 86C4 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1172+ 86C5 2B          >                db      "+"               // name string in 7-bit ascii, but
1172+ 86C6             >                org     $-1                 // alter last byte of Name just above to set
1172+ 86C5 AB          >                db      {b $} | END_BIT     // msb as name end
1172+ 86C6             >
1172+ 86C6 AF 86       >                dw      last_NFA            // Link to previous definition Name
1172+ 86C8             >PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1172+ 86C8 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1172+ 86C8 ~           >
1172+ 86C8 ~           >
1172+ 86C8             >                endif           ; ok        // for other definitions it "points" the correct handler
1172+ 86C8             >                // Use of "; ok" to suppress "warning[fwdref]"
1172+ 86C8             >
1172+ 86C8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1173+ 86C8 E1                           pop     hl
1174+ 86C9 D1                           pop     de
1175+ 86CA 19                           add     hl, de
1176+ 86CB
1177+ 86CB                              psh1
1177+ 86CB E5          >                push    hl
1177+ 86CC DD E9       >                jp      (ix)
1178+ 86CE
1179+ 86CE
1180+ 86CE              //  ______________________________________________________________________
1181+ 86CE              //
1182+ 86CE              // d+           d1 d2 -- d3
1183+ 86CE              // returns the unsigned sum of two top double-numbers
1184+ 86CE              //      d2  d1
1185+ 86CE              //      h l h l
1186+ 86CE              // SP   LHEDLHED
1187+ 86CE              // SP  +01234567
1188+ 86CE                              New_Def DPLUS, "D+", is_code, is_normal
1188+ 86CE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1188+ 86CE             >
1188+ 86CE             >                // dummy db directives used to calculate length of namec
1188+ 86CE 44 2B       >                db      "D+"
1188+ 86D0             >len_NFA         defl    $ - temp_NFA
1188+ 86D0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1188+ 86CE             >
1188+ 86CE 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1188+ 86CF 44 2B       >                db      "D+"               // name string in 7-bit ascii, but
1188+ 86D1             >                org     $-1                 // alter last byte of Name just above to set
1188+ 86D0 AB          >                db      {b $} | END_BIT     // msb as name end
1188+ 86D1             >
1188+ 86D1 C4 86       >                dw      last_NFA            // Link to previous definition Name
1188+ 86D3             >DPLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1188+ 86D3 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1188+ 86D3 ~           >
1188+ 86D3 ~           >
1188+ 86D3             >                endif           ; ok        // for other definitions it "points" the correct handler
1188+ 86D3             >                // Use of "; ok" to suppress "warning[fwdref]"
1188+ 86D3             >
1188+ 86D3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1189+ 86D3
1190+ 86D3 21 07 00                     ld      hl, 7
1191+ 86D6 39                           add     hl, sp
1192+ 86D7 56                           ld      d, (hl)
1193+ 86D8 70                           ld      (hl), b             // Save IP
1194+ 86D9 2B                           dec     hl
1195+ 86DA 5E                           ld      e, (hl)
1196+ 86DB 71                           ld      (hl), c             // de := d1.L
1197+ 86DC C1                           pop     bc                  // bc := d2.H
1198+ 86DD E1                           pop     hl                  // hl := d2.L
1199+ 86DE 19                           add     hl, de              // hl := d2.L + d1.L
1200+ 86DF EB                           ex      de, hl              // de := lower
1201+ 86E0 E1                           pop     hl                  // d1.H
1202+ 86E1 ED 4A                        adc     hl, bc              // d1.H + d2.H
1203+ 86E3 C1                           pop     bc                  // Restore IP
1204+ 86E4
1205+ 86E4
1206+ 86E4                              psh2
1206+ 86E4 D5          >                push    de
1206+ 86E5 E5          >                push    hl
1206+ 86E6 DD E9       >                jp      (ix)
1207+ 86E8
1208+ 86E8              //  ______________________________________________________________________
1209+ 86E8              //
1210+ 86E8              // 1+           n1 -- n2
1211+ 86E8              // increment by 1 top of stack
1212+ 86E8                              New_Def ONE_PLUS, "1+", is_code, is_normal
1212+ 86E8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1212+ 86E8             >
1212+ 86E8             >                // dummy db directives used to calculate length of namec
1212+ 86E8 31 2B       >                db      "1+"
1212+ 86EA             >len_NFA         defl    $ - temp_NFA
1212+ 86EA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1212+ 86E8             >
1212+ 86E8 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1212+ 86E9 31 2B       >                db      "1+"               // name string in 7-bit ascii, but
1212+ 86EB             >                org     $-1                 // alter last byte of Name just above to set
1212+ 86EA AB          >                db      {b $} | END_BIT     // msb as name end
1212+ 86EB             >
1212+ 86EB CE 86       >                dw      last_NFA            // Link to previous definition Name
1212+ 86ED             >ONE_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1212+ 86ED ~           >                call    runcode ; ok        // for primitive definitions  actual code
1212+ 86ED ~           >
1212+ 86ED ~           >
1212+ 86ED             >                endif           ; ok        // for other definitions it "points" the correct handler
1212+ 86ED             >                // Use of "; ok" to suppress "warning[fwdref]"
1212+ 86ED             >
1212+ 86ED             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1213+ 86ED E1                           pop     hl
1214+ 86EE 23                           inc     hl
1215+ 86EF
1216+ 86EF                              psh1
1216+ 86EF E5          >                push    hl
1216+ 86F0 DD E9       >                jp      (ix)
1217+ 86F2
1218+ 86F2              //  ______________________________________________________________________
1219+ 86F2              //
1220+ 86F2              // 1-           n1 -- n2
1221+ 86F2              // decrement by 1 top of stack
1222+ 86F2                              New_Def ONE_SUBTRACT, "1-", is_code, is_normal
1222+ 86F2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1222+ 86F2             >
1222+ 86F2             >                // dummy db directives used to calculate length of namec
1222+ 86F2 31 2D       >                db      "1-"
1222+ 86F4             >len_NFA         defl    $ - temp_NFA
1222+ 86F4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1222+ 86F2             >
1222+ 86F2 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1222+ 86F3 31 2D       >                db      "1-"               // name string in 7-bit ascii, but
1222+ 86F5             >                org     $-1                 // alter last byte of Name just above to set
1222+ 86F4 AD          >                db      {b $} | END_BIT     // msb as name end
1222+ 86F5             >
1222+ 86F5 E8 86       >                dw      last_NFA            // Link to previous definition Name
1222+ 86F7             >ONE_SUBTRACT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1222+ 86F7 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1222+ 86F7 ~           >
1222+ 86F7 ~           >
1222+ 86F7             >                endif           ; ok        // for other definitions it "points" the correct handler
1222+ 86F7             >                // Use of "; ok" to suppress "warning[fwdref]"
1222+ 86F7             >
1222+ 86F7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1223+ 86F7 E1                           pop     hl
1224+ 86F8 2B                           dec     hl
1225+ 86F9
1226+ 86F9                              psh1
1226+ 86F9 E5          >                push    hl
1226+ 86FA DD E9       >                jp      (ix)
1227+ 86FC
1228+ 86FC              //  ______________________________________________________________________
1229+ 86FC              //
1230+ 86FC              // 2+           n1 -- n2
1231+ 86FC              // increment by 2 top of stack
1232+ 86FC                              New_Def TWO_PLUS, "2+", is_code, is_normal
1232+ 86FC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1232+ 86FC             >
1232+ 86FC             >                // dummy db directives used to calculate length of namec
1232+ 86FC 32 2B       >                db      "2+"
1232+ 86FE             >len_NFA         defl    $ - temp_NFA
1232+ 86FE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1232+ 86FC             >
1232+ 86FC 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1232+ 86FD 32 2B       >                db      "2+"               // name string in 7-bit ascii, but
1232+ 86FF             >                org     $-1                 // alter last byte of Name just above to set
1232+ 86FE AB          >                db      {b $} | END_BIT     // msb as name end
1232+ 86FF             >
1232+ 86FF F2 86       >                dw      last_NFA            // Link to previous definition Name
1232+ 8701             >TWO_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1232+ 8701 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1232+ 8701 ~           >
1232+ 8701 ~           >
1232+ 8701             >                endif           ; ok        // for other definitions it "points" the correct handler
1232+ 8701             >                // Use of "; ok" to suppress "warning[fwdref]"
1232+ 8701             >
1232+ 8701             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1233+ 8701              Two_Plus:
1234+ 8701 E1                           pop     hl
1235+ 8702 23                           inc     hl
1236+ 8703 23                           inc     hl
1237+ 8704
1238+ 8704                              psh1
1238+ 8704 E5          >                push    hl
1238+ 8705 DD E9       >                jp      (ix)
1239+ 8707
1240+ 8707              //  ______________________________________________________________________
1241+ 8707              //
1242+ 8707              // cell+        a1 -- a2
1243+ 8707              // increment by 2 top of stack
1244+ 8707                              New_Def CELL_PLUS, "CELL+", Two_Plus, is_normal
1244+ 8707             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1244+ 8707             >
1244+ 8707             >                // dummy db directives used to calculate length of namec
1244+ 8707 43 45 4C 4C >                db      "CELL+"
1244+ 870B 2B          >
1244+ 870C             >len_NFA         defl    $ - temp_NFA
1244+ 870C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1244+ 8707             >
1244+ 8707 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1244+ 8708 43 45 4C 4C >                db      "CELL+"               // name string in 7-bit ascii, but
1244+ 870C 2B          >
1244+ 870D             >                org     $-1                 // alter last byte of Name just above to set
1244+ 870C AB          >                db      {b $} | END_BIT     // msb as name end
1244+ 870D             >
1244+ 870D FC 86       >                dw      last_NFA            // Link to previous definition Name
1244+ 870F             >CELL_PLUS:          if Two_Plus != 0 ; ok        // This is the start address of the direct jp(hl)
1244+ 870F CD 01 87    >                call    Two_Plus ; ok        // for primitive definitions  actual code
1244+ 8712             >
1244+ 8712             >
1244+ 8712             >                endif           ; ok        // for other definitions it "points" the correct handler
1244+ 8712             >                // Use of "; ok" to suppress "warning[fwdref]"
1244+ 8712             >
1244+ 8712             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1245+ 8712
1246+ 8712              //  ______________________________________________________________________
1247+ 8712              //
1248+ 8712              // align        a1 -- a2
1249+ 8712              // align memory : not used
1250+ 8712                              New_Def ALIGN_ADDR, "ALIGN", is_code, is_normal
1250+ 8712             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1250+ 8712             >
1250+ 8712             >                // dummy db directives used to calculate length of namec
1250+ 8712 41 4C 49 47 >                db      "ALIGN"
1250+ 8716 4E          >
1250+ 8717             >len_NFA         defl    $ - temp_NFA
1250+ 8717             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1250+ 8712             >
1250+ 8712 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1250+ 8713 41 4C 49 47 >                db      "ALIGN"               // name string in 7-bit ascii, but
1250+ 8717 4E          >
1250+ 8718             >                org     $-1                 // alter last byte of Name just above to set
1250+ 8717 CE          >                db      {b $} | END_BIT     // msb as name end
1250+ 8718             >
1250+ 8718 07 87       >                dw      last_NFA            // Link to previous definition Name
1250+ 871A             >ALIGN_ADDR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1250+ 871A ~           >                call    runcode ; ok        // for primitive definitions  actual code
1250+ 871A ~           >
1250+ 871A ~           >
1250+ 871A             >                endif           ; ok        // for other definitions it "points" the correct handler
1250+ 871A             >                // Use of "; ok" to suppress "warning[fwdref]"
1250+ 871A             >
1250+ 871A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1251+ 871A                              next
1251+ 871A DD E9       >                jp      (ix)
1252+ 871C
1253+ 871C              //  ______________________________________________________________________
1254+ 871C              //
1255+ 871C              // cell-        a1 -- a2
1256+ 871C              // decrement by 2 top of stack
1257+ 871C                              New_Def CELL_MINUS, "CELL-", is_code, is_normal
1257+ 871C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1257+ 871C             >
1257+ 871C             >                // dummy db directives used to calculate length of namec
1257+ 871C 43 45 4C 4C >                db      "CELL-"
1257+ 8720 2D          >
1257+ 8721             >len_NFA         defl    $ - temp_NFA
1257+ 8721             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1257+ 871C             >
1257+ 871C 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1257+ 871D 43 45 4C 4C >                db      "CELL-"               // name string in 7-bit ascii, but
1257+ 8721 2D          >
1257+ 8722             >                org     $-1                 // alter last byte of Name just above to set
1257+ 8721 AD          >                db      {b $} | END_BIT     // msb as name end
1257+ 8722             >
1257+ 8722 12 87       >                dw      last_NFA            // Link to previous definition Name
1257+ 8724             >CELL_MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1257+ 8724 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1257+ 8724 ~           >
1257+ 8724 ~           >
1257+ 8724             >                endif           ; ok        // for other definitions it "points" the correct handler
1257+ 8724             >                // Use of "; ok" to suppress "warning[fwdref]"
1257+ 8724             >
1257+ 8724             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1258+ 8724 E1                           pop     hl
1259+ 8725 2B                           dec     hl
1260+ 8726 2B                           dec     hl
1261+ 8727
1262+ 8727                              psh1
1262+ 8727 E5          >                push    hl
1262+ 8728 DD E9       >                jp      (ix)
1263+ 872A
1264+ 872A              //  ______________________________________________________________________
1265+ 872A              //
1266+ 872A              // minus        n1 -- n2
1267+ 872A              // change the sign of number
1268+ 872A                              New_Def MINUS, "MINUS", is_code, is_normal
1268+ 872A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1268+ 872A             >
1268+ 872A             >                // dummy db directives used to calculate length of namec
1268+ 872A 4D 49 4E 55 >                db      "MINUS"
1268+ 872E 53          >
1268+ 872F             >len_NFA         defl    $ - temp_NFA
1268+ 872F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1268+ 872A             >
1268+ 872A 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1268+ 872B 4D 49 4E 55 >                db      "MINUS"               // name string in 7-bit ascii, but
1268+ 872F 53          >
1268+ 8730             >                org     $-1                 // alter last byte of Name just above to set
1268+ 872F D3          >                db      {b $} | END_BIT     // msb as name end
1268+ 8730             >
1268+ 8730 1C 87       >                dw      last_NFA            // Link to previous definition Name
1268+ 8732             >MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1268+ 8732 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1268+ 8732 ~           >
1268+ 8732 ~           >
1268+ 8732             >                endif           ; ok        // for other definitions it "points" the correct handler
1268+ 8732             >                // Use of "; ok" to suppress "warning[fwdref]"
1268+ 8732             >
1268+ 8732             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1269+ 8732 21 00 00                     ld      hl, 0               // subtract from 0
1270+ 8735 D1                           pop     de
1271+ 8736 B7                           or      a
1272+ 8737 ED 52                        sbc     hl, de
1273+ 8739
1274+ 8739                              psh1
1274+ 8739 E5          >                push    hl
1274+ 873A DD E9       >                jp      (ix)
1275+ 873C
1276+ 873C              //  ______________________________________________________________________
1277+ 873C              //
1278+ 873C              // dminus       d1 -- d2
1279+ 873C              // change the sign of a double number
1280+ 873C                              New_Def DMINUS, "DMINUS", is_code, is_normal
1280+ 873C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1280+ 873C             >
1280+ 873C             >                // dummy db directives used to calculate length of namec
1280+ 873C 44 4D 49 4E >                db      "DMINUS"
1280+ 8740 55 53       >
1280+ 8742             >len_NFA         defl    $ - temp_NFA
1280+ 8742             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1280+ 873C             >
1280+ 873C 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1280+ 873D 44 4D 49 4E >                db      "DMINUS"               // name string in 7-bit ascii, but
1280+ 8741 55 53       >
1280+ 8743             >                org     $-1                 // alter last byte of Name just above to set
1280+ 8742 D3          >                db      {b $} | END_BIT     // msb as name end
1280+ 8743             >
1280+ 8743 2A 87       >                dw      last_NFA            // Link to previous definition Name
1280+ 8745             >DMINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1280+ 8745 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1280+ 8745 ~           >
1280+ 8745 ~           >
1280+ 8745             >                endif           ; ok        // for other definitions it "points" the correct handler
1280+ 8745             >                // Use of "; ok" to suppress "warning[fwdref]"
1280+ 8745             >
1280+ 8745             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1281+ 8745 E1                           pop     hl                  // d1.H
1282+ 8746 D1                           pop     de                  // d1.L
1283+ 8747 C5                           push    bc                  // Save Instruction Pointer
1284+ 8748 44                           ld      b, h
1285+ 8749 4D                           ld      c, l                // bc := d1.L
1286+ 874A AF                           xor     a
1287+ 874B 67                           ld      h, a
1288+ 874C 6F                           ld      l, a
1289+ 874D ED 52                        sbc     hl, de              // subtact from zero
1290+ 874F D1                           pop     de                  // Retrieve Instruction Pointer
1291+ 8750 E5                           push    hl                  // > d2-L
1292+ 8751 67                           ld      h, a
1293+ 8752 6F                           ld      l, a
1294+ 8753 ED 42                        sbc     hl, bc              // subtract from zero with carry
1295+ 8755                                                          // > d2-H
1296+ 8755 42                           ld      b, d
1297+ 8756 4B                           ld      c, e
1298+ 8757                              psh1
1298+ 8757 E5          >                push    hl
1298+ 8758 DD E9       >                jp      (ix)
1299+ 875A
1300+ 875A              //  ______________________________________________________________________
1301+ 875A              //
1302+ 875A              // over         n1 n2 -- n1 n2 n1
1303+ 875A              // copy the second value of stack and put it on top.
1304+ 875A                              New_Def OVER, "OVER", is_code, is_normal
1304+ 875A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1304+ 875A             >
1304+ 875A             >                // dummy db directives used to calculate length of namec
1304+ 875A 4F 56 45 52 >                db      "OVER"
1304+ 875E             >len_NFA         defl    $ - temp_NFA
1304+ 875E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1304+ 875A             >
1304+ 875A 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1304+ 875B 4F 56 45 52 >                db      "OVER"               // name string in 7-bit ascii, but
1304+ 875F             >                org     $-1                 // alter last byte of Name just above to set
1304+ 875E D2          >                db      {b $} | END_BIT     // msb as name end
1304+ 875F             >
1304+ 875F 3C 87       >                dw      last_NFA            // Link to previous definition Name
1304+ 8761             >OVER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1304+ 8761 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1304+ 8761 ~           >
1304+ 8761 ~           >
1304+ 8761             >                endif           ; ok        // for other definitions it "points" the correct handler
1304+ 8761             >                // Use of "; ok" to suppress "warning[fwdref]"
1304+ 8761             >
1304+ 8761             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1305+ 8761 D1                           pop     de                  //   n2
1306+ 8762 E1                           pop     hl                  // < n1
1307+ 8763 E5                           push    hl                  // > n1
1308+ 8764 D5                           push    de                  // > n2
1309+ 8765 E5                           push    hl                  // > n1
1310+ 8766                              next
1310+ 8766 DD E9       >                jp      (ix)
1311+ 8768
1312+ 8768              //  ______________________________________________________________________
1313+ 8768              //
1314+ 8768              // drop         n1 --
1315+ 8768              // drops the top of stack
1316+ 8768                              New_Def DROP, "DROP", is_code, is_normal
1316+ 8768             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1316+ 8768             >
1316+ 8768             >                // dummy db directives used to calculate length of namec
1316+ 8768 44 52 4F 50 >                db      "DROP"
1316+ 876C             >len_NFA         defl    $ - temp_NFA
1316+ 876C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1316+ 8768             >
1316+ 8768 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1316+ 8769 44 52 4F 50 >                db      "DROP"               // name string in 7-bit ascii, but
1316+ 876D             >                org     $-1                 // alter last byte of Name just above to set
1316+ 876C D0          >                db      {b $} | END_BIT     // msb as name end
1316+ 876D             >
1316+ 876D 5A 87       >                dw      last_NFA            // Link to previous definition Name
1316+ 876F             >DROP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1316+ 876F ~           >                call    runcode ; ok        // for primitive definitions  actual code
1316+ 876F ~           >
1316+ 876F ~           >
1316+ 876F             >                endif           ; ok        // for other definitions it "points" the correct handler
1316+ 876F             >                // Use of "; ok" to suppress "warning[fwdref]"
1316+ 876F             >
1316+ 876F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1317+ 876F E1                           pop     hl                  // < n1 and discard previous TOS
1318+ 8770                              next
1318+ 8770 DD E9       >                jp      (ix)
1319+ 8772
1320+ 8772              //  ______________________________________________________________________
1321+ 8772              //
1322+ 8772              // nip          n1 n2 -- n2
1323+ 8772              // drops the second elemento on the stack
1324+ 8772                              New_Def NIP, "NIP", is_code, is_normal
1324+ 8772             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1324+ 8772             >
1324+ 8772             >                // dummy db directives used to calculate length of namec
1324+ 8772 4E 49 50    >                db      "NIP"
1324+ 8775             >len_NFA         defl    $ - temp_NFA
1324+ 8775             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1324+ 8772             >
1324+ 8772 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1324+ 8773 4E 49 50    >                db      "NIP"               // name string in 7-bit ascii, but
1324+ 8776             >                org     $-1                 // alter last byte of Name just above to set
1324+ 8775 D0          >                db      {b $} | END_BIT     // msb as name end
1324+ 8776             >
1324+ 8776 68 87       >                dw      last_NFA            // Link to previous definition Name
1324+ 8778             >NIP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1324+ 8778 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1324+ 8778 ~           >
1324+ 8778 ~           >
1324+ 8778             >                endif           ; ok        // for other definitions it "points" the correct handler
1324+ 8778             >                // Use of "; ok" to suppress "warning[fwdref]"
1324+ 8778             >
1324+ 8778             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1325+ 8778
1326+ 8778 E1                           pop     hl                  // < n1 discarded
1327+ 8779 E3                           ex      (sp), hl
1328+ 877A                              next
1328+ 877A DD E9       >                jp      (ix)
1329+ 877C
1330+ 877C              //  ______________________________________________________________________
1331+ 877C              //
1332+ 877C              // tuck         n1 n2 -- n2 n1 n2
1333+ 877C              // copy the top element after the second.
1334+ 877C                              New_Def TUCK, "TUCK", is_code, is_normal
1334+ 877C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1334+ 877C             >
1334+ 877C             >                // dummy db directives used to calculate length of namec
1334+ 877C 54 55 43 4B >                db      "TUCK"
1334+ 8780             >len_NFA         defl    $ - temp_NFA
1334+ 8780             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1334+ 877C             >
1334+ 877C 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1334+ 877D 54 55 43 4B >                db      "TUCK"               // name string in 7-bit ascii, but
1334+ 8781             >                org     $-1                 // alter last byte of Name just above to set
1334+ 8780 CB          >                db      {b $} | END_BIT     // msb as name end
1334+ 8781             >
1334+ 8781 72 87       >                dw      last_NFA            // Link to previous definition Name
1334+ 8783             >TUCK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1334+ 8783 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1334+ 8783 ~           >
1334+ 8783 ~           >
1334+ 8783             >                endif           ; ok        // for other definitions it "points" the correct handler
1334+ 8783             >                // Use of "; ok" to suppress "warning[fwdref]"
1334+ 8783             >
1334+ 8783             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1335+ 8783 E1                           pop     hl
1336+ 8784 D1                           pop     de                  // < n1
1337+ 8785 E5                           push    hl                  // > n2  and TOS
1338+ 8786 D5                           push    de                  // > n1
1339+ 8787 E5                           push    hl
1340+ 8788                              next
1340+ 8788 DD E9       >                jp      (ix)
1341+ 878A
1342+ 878A              //  ______________________________________________________________________
1343+ 878A              //
1344+ 878A              // swap         n1 n2 -- n2 n1
1345+ 878A              // swaps the two values on top of stack
1346+ 878A                              New_Def SWAP, "SWAP", is_code, is_normal
1346+ 878A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1346+ 878A             >
1346+ 878A             >                // dummy db directives used to calculate length of namec
1346+ 878A 53 57 41 50 >                db      "SWAP"
1346+ 878E             >len_NFA         defl    $ - temp_NFA
1346+ 878E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1346+ 878A             >
1346+ 878A 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1346+ 878B 53 57 41 50 >                db      "SWAP"               // name string in 7-bit ascii, but
1346+ 878F             >                org     $-1                 // alter last byte of Name just above to set
1346+ 878E D0          >                db      {b $} | END_BIT     // msb as name end
1346+ 878F             >
1346+ 878F 7C 87       >                dw      last_NFA            // Link to previous definition Name
1346+ 8791             >SWAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1346+ 8791 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1346+ 8791 ~           >
1346+ 8791 ~           >
1346+ 8791             >                endif           ; ok        // for other definitions it "points" the correct handler
1346+ 8791             >                // Use of "; ok" to suppress "warning[fwdref]"
1346+ 8791             >
1346+ 8791             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1347+ 8791 E1                           pop     hl                  // < n1
1348+ 8792 E3                           ex      (sp),hl             // > n2
1349+ 8793 E5                           push    hl                  // copy n1 to TOS
1350+ 8794                              next
1350+ 8794 DD E9       >                jp      (ix)
1351+ 8796
1352+ 8796              //  ______________________________________________________________________
1353+ 8796              //
1354+ 8796              // dup         n -- n n
1355+ 8796              // duplicates the top value of stack
1356+ 8796                              New_Def DUP, "DUP", is_code, is_normal
1356+ 8796             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1356+ 8796             >
1356+ 8796             >                // dummy db directives used to calculate length of namec
1356+ 8796 44 55 50    >                db      "DUP"
1356+ 8799             >len_NFA         defl    $ - temp_NFA
1356+ 8799             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1356+ 8796             >
1356+ 8796 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1356+ 8797 44 55 50    >                db      "DUP"               // name string in 7-bit ascii, but
1356+ 879A             >                org     $-1                 // alter last byte of Name just above to set
1356+ 8799 D0          >                db      {b $} | END_BIT     // msb as name end
1356+ 879A             >
1356+ 879A 8A 87       >                dw      last_NFA            // Link to previous definition Name
1356+ 879C             >DUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1356+ 879C ~           >                call    runcode ; ok        // for primitive definitions  actual code
1356+ 879C ~           >
1356+ 879C ~           >
1356+ 879C             >                endif           ; ok        // for other definitions it "points" the correct handler
1356+ 879C             >                // Use of "; ok" to suppress "warning[fwdref]"
1356+ 879C             >
1356+ 879C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1357+ 879C E1                           pop     hl
1358+ 879D E5                           push    hl                  // > n duplicate TOS
1359+ 879E E5                           push    hl
1360+ 879F                              next
1360+ 879F DD E9       >                jp      (ix)
1361+ 87A1
1362+ 87A1              //  ______________________________________________________________________
1363+ 87A1              //
1364+ 87A1              // rot         n1 n2 n3 -- n2 n3 n1
1365+ 87A1              // Rotates the 3 top values of stack by picking the 3rd in access-order
1366+ 87A1              // and putting it on top. The other two are shifted down one place.
1367+ 87A1                              New_Def ROT, "ROT", is_code, is_normal
1367+ 87A1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1367+ 87A1             >
1367+ 87A1             >                // dummy db directives used to calculate length of namec
1367+ 87A1 52 4F 54    >                db      "ROT"
1367+ 87A4             >len_NFA         defl    $ - temp_NFA
1367+ 87A4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1367+ 87A1             >
1367+ 87A1 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1367+ 87A2 52 4F 54    >                db      "ROT"               // name string in 7-bit ascii, but
1367+ 87A5             >                org     $-1                 // alter last byte of Name just above to set
1367+ 87A4 D4          >                db      {b $} | END_BIT     // msb as name end
1367+ 87A5             >
1367+ 87A5 96 87       >                dw      last_NFA            // Link to previous definition Name
1367+ 87A7             >ROT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1367+ 87A7 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1367+ 87A7 ~           >
1367+ 87A7 ~           >
1367+ 87A7             >                endif           ; ok        // for other definitions it "points" the correct handler
1367+ 87A7             >                // Use of "; ok" to suppress "warning[fwdref]"
1367+ 87A7             >
1367+ 87A7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1368+ 87A7 D1                           pop     de                  // < n2
1369+ 87A8 E1                           pop     hl                  // < n1
1370+ 87A9 E3                           ex      (sp),hl             // > n2
1371+ 87AA D5                           push    de                  // > n3
1372+ 87AB E5                           push    hl                  // copy n1 to TOS
1373+ 87AC                              next
1373+ 87AC DD E9       >                jp      (ix)
1374+ 87AE
1375+ 87AE              //  ______________________________________________________________________
1376+ 87AE              //
1377+ 87AE              // pick        n1 -- nx
1378+ 87AE              // picks the nth element from TOS
1379+ 87AE                              New_Def PICK, "PICK", is_code, is_normal
1379+ 87AE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1379+ 87AE             >
1379+ 87AE             >                // dummy db directives used to calculate length of namec
1379+ 87AE 50 49 43 4B >                db      "PICK"
1379+ 87B2             >len_NFA         defl    $ - temp_NFA
1379+ 87B2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1379+ 87AE             >
1379+ 87AE 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1379+ 87AF 50 49 43 4B >                db      "PICK"               // name string in 7-bit ascii, but
1379+ 87B3             >                org     $-1                 // alter last byte of Name just above to set
1379+ 87B2 CB          >                db      {b $} | END_BIT     // msb as name end
1379+ 87B3             >
1379+ 87B3 A1 87       >                dw      last_NFA            // Link to previous definition Name
1379+ 87B5             >PICK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1379+ 87B5 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1379+ 87B5 ~           >
1379+ 87B5 ~           >
1379+ 87B5             >                endif           ; ok        // for other definitions it "points" the correct handler
1379+ 87B5             >                // Use of "; ok" to suppress "warning[fwdref]"
1379+ 87B5             >
1379+ 87B5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1380+ 87B5 E1                           pop     hl                  // take TOS as index
1381+ 87B6 29                           add     hl, hl              // as cells
1382+ 87B7 39                           add     hl, sp              // from Stack Pointer
1383+ 87B8 7E                           ld      a, (hl)             // replace TOS
1384+ 87B9 23                           inc     hl
1385+ 87BA 66                           ld      h, (hl)
1386+ 87BB 6F                           ld      l, a
1387+ 87BC
1388+ 87BC                              psh1
1388+ 87BC E5          >                push    hl
1388+ 87BD DD E9       >                jp      (ix)
1389+ 87BF
1390+ 87BF
1391+ 87BF              //  ______________________________________________________________________
1392+ 87BF              //
1393+ 87BF              // 2over        d1 d2 -- d1 d2 d1
1394+ 87BF              //              n1 n2 n3 n4 -- n1 n2 n3 n4 n1 n2
1395+ 87BF              // copy the second double of stack and put on top.
1396+ 87BF                              New_Def TWO_OVER, "2OVER", is_code, is_normal
1396+ 87BF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1396+ 87BF             >
1396+ 87BF             >                // dummy db directives used to calculate length of namec
1396+ 87BF 32 4F 56 45 >                db      "2OVER"
1396+ 87C3 52          >
1396+ 87C4             >len_NFA         defl    $ - temp_NFA
1396+ 87C4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1396+ 87BF             >
1396+ 87BF 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1396+ 87C0 32 4F 56 45 >                db      "2OVER"               // name string in 7-bit ascii, but
1396+ 87C4 52          >
1396+ 87C5             >                org     $-1                 // alter last byte of Name just above to set
1396+ 87C4 D2          >                db      {b $} | END_BIT     // msb as name end
1396+ 87C5             >
1396+ 87C5 AE 87       >                dw      last_NFA            // Link to previous definition Name
1396+ 87C7             >TWO_OVER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1396+ 87C7 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1396+ 87C7 ~           >
1396+ 87C7 ~           >
1396+ 87C7             >                endif           ; ok        // for other definitions it "points" the correct handler
1396+ 87C7             >                // Use of "; ok" to suppress "warning[fwdref]"
1396+ 87C7             >
1396+ 87C7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1397+ 87C7
1398+ 87C7 21 07 00                     ld      hl, 7
1399+ 87CA 39                           add     hl, sp
1400+ 87CB 56                           ld      d, (hl)
1401+ 87CC 2B                           dec     hl
1402+ 87CD 5E                           ld      e, (hl)             // d1-L
1403+ 87CE D5                           push    de
1404+ 87CF 2B                           dec     hl
1405+ 87D0 56                           ld      d, (hl)
1406+ 87D1 2B                           dec     hl
1407+ 87D2 5E                           ld      e, (hl)             // d1-H
1408+ 87D3 D5                           push    de
1409+ 87D4                              next
1409+ 87D4 DD E9       >                jp      (ix)
1410+ 87D6
1411+ 87D6              //  ______________________________________________________________________
1412+ 87D6              //
1413+ 87D6              // 2drop        d --
1414+ 87D6              //              n1 n2 --
1415+ 87D6              // drops the top double from stack
1416+ 87D6                              New_Def TWO_DROP, "2DROP", is_code, is_normal
1416+ 87D6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1416+ 87D6             >
1416+ 87D6             >                // dummy db directives used to calculate length of namec
1416+ 87D6 32 44 52 4F >                db      "2DROP"
1416+ 87DA 50          >
1416+ 87DB             >len_NFA         defl    $ - temp_NFA
1416+ 87DB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1416+ 87D6             >
1416+ 87D6 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1416+ 87D7 32 44 52 4F >                db      "2DROP"               // name string in 7-bit ascii, but
1416+ 87DB 50          >
1416+ 87DC             >                org     $-1                 // alter last byte of Name just above to set
1416+ 87DB D0          >                db      {b $} | END_BIT     // msb as name end
1416+ 87DC             >
1416+ 87DC BF 87       >                dw      last_NFA            // Link to previous definition Name
1416+ 87DE             >TWO_DROP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1416+ 87DE ~           >                call    runcode ; ok        // for primitive definitions  actual code
1416+ 87DE ~           >
1416+ 87DE ~           >
1416+ 87DE             >                endif           ; ok        // for other definitions it "points" the correct handler
1416+ 87DE             >                // Use of "; ok" to suppress "warning[fwdref]"
1416+ 87DE             >
1416+ 87DE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1417+ 87DE E1                           pop     hl
1418+ 87DF E1                           pop     hl
1419+ 87E0                              next
1419+ 87E0 DD E9       >                jp      (ix)
1420+ 87E2
1421+ 87E2              //  ______________________________________________________________________
1422+ 87E2              //
1423+ 87E2              // 2nip         d1 d2 -- d2
1424+ 87E2              //              n1 n2 n3 n4 -- n3 n4
1425+ 87E2              // drops the second double on the stack
1426+ 87E2              //              New_Def TWO_NIP, 4, "2nip"
1427+ 87E2              //              ...
1428+ 87E2
1429+ 87E2              //  ______________________________________________________________________
1430+ 87E2              //
1431+ 87E2              // 2tuck         d1 d2 -- d2 d1 d2
1432+ 87E2              // copy the top element after the second.
1433+ 87E2              //              New_Def TWO_TUCK, 5, "2tuck"
1434+ 87E2              //              ...
1435+ 87E2
1436+ 87E2              //  ______________________________________________________________________
1437+ 87E2              //
1438+ 87E2              // 2swap         d1 d2 -- d2 d1
1439+ 87E2              //               n1 n2 n3 n4 -- n3 n4 n1 n2
1440+ 87E2              // swaps the two doubles on top of stack
1441+ 87E2                              New_Def TWO_SWAP, "2SWAP", is_code, is_normal
1441+ 87E2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1441+ 87E2             >
1441+ 87E2             >                // dummy db directives used to calculate length of namec
1441+ 87E2 32 53 57 41 >                db      "2SWAP"
1441+ 87E6 50          >
1441+ 87E7             >len_NFA         defl    $ - temp_NFA
1441+ 87E7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1441+ 87E2             >
1441+ 87E2 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1441+ 87E3 32 53 57 41 >                db      "2SWAP"               // name string in 7-bit ascii, but
1441+ 87E7 50          >
1441+ 87E8             >                org     $-1                 // alter last byte of Name just above to set
1441+ 87E7 D0          >                db      {b $} | END_BIT     // msb as name end
1441+ 87E8             >
1441+ 87E8 D6 87       >                dw      last_NFA            // Link to previous definition Name
1441+ 87EA             >TWO_SWAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1441+ 87EA ~           >                call    runcode ; ok        // for primitive definitions  actual code
1441+ 87EA ~           >
1441+ 87EA ~           >
1441+ 87EA             >                endif           ; ok        // for other definitions it "points" the correct handler
1441+ 87EA             >                // Use of "; ok" to suppress "warning[fwdref]"
1441+ 87EA             >
1441+ 87EA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1442+ 87EA F1                           pop     af                  //   d2-H
1443+ 87EB E1                           pop     hl                  // < d2-L
1444+ 87EC D1                           pop     de                  // < d1-H
1445+ 87ED E3                           ex      (sp), hl            // < d1-L > d2-L
1446+ 87EE F5                           push    af                  // > d2-H
1447+ 87EF E5                           push    hl                  // > d1-L
1448+ 87F0 D5                           push    de
1449+ 87F1
1450+ 87F1                              next
1450+ 87F1 DD E9       >                jp      (ix)
1451+ 87F3
1452+ 87F3              //  ______________________________________________________________________
1453+ 87F3              //
1454+ 87F3              // 2dup         d -- d d
1455+ 87F3              //              n1 n2 -- n1 n2 n1 n2
1456+ 87F3              // duplicates the top double of stack
1457+ 87F3                              New_Def TWO_DUP, "2DUP", is_code, is_normal
1457+ 87F3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1457+ 87F3             >
1457+ 87F3             >                // dummy db directives used to calculate length of namec
1457+ 87F3 32 44 55 50 >                db      "2DUP"
1457+ 87F7             >len_NFA         defl    $ - temp_NFA
1457+ 87F7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1457+ 87F3             >
1457+ 87F3 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1457+ 87F4 32 44 55 50 >                db      "2DUP"               // name string in 7-bit ascii, but
1457+ 87F8             >                org     $-1                 // alter last byte of Name just above to set
1457+ 87F7 D0          >                db      {b $} | END_BIT     // msb as name end
1457+ 87F8             >
1457+ 87F8 E2 87       >                dw      last_NFA            // Link to previous definition Name
1457+ 87FA             >TWO_DUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1457+ 87FA ~           >                call    runcode ; ok        // for primitive definitions  actual code
1457+ 87FA ~           >
1457+ 87FA ~           >
1457+ 87FA             >                endif           ; ok        // for other definitions it "points" the correct handler
1457+ 87FA             >                // Use of "; ok" to suppress "warning[fwdref]"
1457+ 87FA             >
1457+ 87FA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1458+ 87FA E1                           pop     hl                  // < d-H
1459+ 87FB D1                           pop     de                  // < d-L
1460+ 87FC D5                           push    de                  // < d-L
1461+ 87FD E5                           push    hl                  // > d-H
1462+ 87FE D5                           push    de                  // > d-L
1463+ 87FF E5                           push    hl                  // > d-H
1464+ 8800                              next
1464+ 8800 DD E9       >                jp      (ix)
1465+ 8802
1466+ 8802              //  ______________________________________________________________________
1467+ 8802              //
1468+ 8802              // 2rot         d1 d2 d3 -- d2 d3 d1
1469+ 8802              //              n1 n2 n3 n4 n5 n6 -- n3 n4 n5 n6 n1 n2
1470+ 8802              // Rotates the 3 top doubles of stack by picking the 3rd in access-order
1471+ 8802              // and putting it on top. The other two are shifted down one place.
1472+ 8802              //              New_Def TWO?ROT, 4, "2rot"
1473+ 8802              //              ...
1474+ 8802                              New_Def TWO_ROT, "2ROT", is_code, is_normal
1474+ 8802             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1474+ 8802             >
1474+ 8802             >                // dummy db directives used to calculate length of namec
1474+ 8802 32 52 4F 54 >                db      "2ROT"
1474+ 8806             >len_NFA         defl    $ - temp_NFA
1474+ 8806             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1474+ 8802             >
1474+ 8802 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1474+ 8803 32 52 4F 54 >                db      "2ROT"               // name string in 7-bit ascii, but
1474+ 8807             >                org     $-1                 // alter last byte of Name just above to set
1474+ 8806 D4          >                db      {b $} | END_BIT     // msb as name end
1474+ 8807             >
1474+ 8807 F3 87       >                dw      last_NFA            // Link to previous definition Name
1474+ 8809             >TWO_ROT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1474+ 8809 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1474+ 8809 ~           >
1474+ 8809 ~           >
1474+ 8809             >                endif           ; ok        // for other definitions it "points" the correct handler
1474+ 8809             >                // Use of "; ok" to suppress "warning[fwdref]"
1474+ 8809             >
1474+ 8809             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1475+ 8809
1476+ 8809              //      d3  |d2  |d1  |
1477+ 8809              //      h l |h l |h l |
1478+ 8809              // SP   LHED|LHED|LHED|
1479+ 8809              // SP  +0123|4567|89ab|
1480+ 8809 21 0B 00                     ld      hl, $000B
1481+ 880C 39                           add     hl, sp
1482+ 880D 56                           ld      d, (hl)
1483+ 880E 2B                           dec     hl
1484+ 880F 5E                           ld      e, (hl)
1485+ 8810 2B                           dec     hl
1486+ 8811 D5                           push    de
1487+ 8812 56                           ld      d, (hl)
1488+ 8813 2B                           dec     hl
1489+ 8814 5E                           ld      e, (hl)
1490+ 8815 2B                           dec     hl
1491+ 8816 D5                           push    de
1492+ 8817
1493+ 8817              //      d1  |d3  |d2  |d1  |
1494+ 8817              //      h l |h l |h l |h l |
1495+ 8817              // SP   LHED|LHED|LHED|LHED|
1496+ 8817              // SP       +0123|4567|89ab|
1497+ 8817
1498+ 8817 54                           ld      d, h
1499+ 8818 5D                           ld      e, l
1500+ 8819 13                           inc     de
1501+ 881A 13                           inc     de
1502+ 881B 13                           inc     de
1503+ 881C 13                           inc     de
1504+ 881D C5                           push    bc
1505+ 881E 01 0C 00                     ld      bc, $000C
1506+ 8821 ED B8                        lddr
1507+ 8823 C1                           pop     bc
1508+ 8824 D1                           pop     de
1509+ 8825 D1                           pop     de
1510+ 8826
1511+ 8826                              next
1511+ 8826 DD E9       >                jp      (ix)
1512+ 8828
1513+ 8828
1514+ 8828              //  ______________________________________________________________________
1515+ 8828              //
1516+ 8828              // +!           n a --
1517+ 8828              // Sums to the content of address a the number n.
1518+ 8828              // It is the same of  a @ n + a !
1519+ 8828                              New_Def PLUSSTORE, "+!", is_code, is_normal
1519+ 8828             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1519+ 8828             >
1519+ 8828             >                // dummy db directives used to calculate length of namec
1519+ 8828 2B 21       >                db      "+!"
1519+ 882A             >len_NFA         defl    $ - temp_NFA
1519+ 882A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1519+ 8828             >
1519+ 8828 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1519+ 8829 2B 21       >                db      "+!"               // name string in 7-bit ascii, but
1519+ 882B             >                org     $-1                 // alter last byte of Name just above to set
1519+ 882A A1          >                db      {b $} | END_BIT     // msb as name end
1519+ 882B             >
1519+ 882B 02 88       >                dw      last_NFA            // Link to previous definition Name
1519+ 882D             >PLUSSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1519+ 882D ~           >                call    runcode ; ok        // for primitive definitions  actual code
1519+ 882D ~           >
1519+ 882D ~           >
1519+ 882D             >                endif           ; ok        // for other definitions it "points" the correct handler
1519+ 882D             >                // Use of "; ok" to suppress "warning[fwdref]"
1519+ 882D             >
1519+ 882D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1520+ 882D E1                           pop     hl                  // hl is the address
1521+ 882E D1                           pop     de                  // de is the number
1522+ 882F 7E                           ld      a, (hl)
1523+ 8830 83                           add     e
1524+ 8831 77                           ld      (hl), a
1525+ 8832 23                           inc     hl
1526+ 8833 7E                           ld      a, (hl)
1527+ 8834 8A                           adc     d
1528+ 8835 77                           ld      (hl), a
1529+ 8836
1530+ 8836                              next
1530+ 8836 DD E9       >                jp      (ix)
1531+ 8838
1532+ 8838              //  ______________________________________________________________________
1533+ 8838              //
1534+ 8838              // toggle       a n --
1535+ 8838              // Complements (xor) the byte at addrress  a  with the model n.
1536+ 8838                              New_Def TOGGLE, "TOGGLE", is_code, is_normal
1536+ 8838             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1536+ 8838             >
1536+ 8838             >                // dummy db directives used to calculate length of namec
1536+ 8838 54 4F 47 47 >                db      "TOGGLE"
1536+ 883C 4C 45       >
1536+ 883E             >len_NFA         defl    $ - temp_NFA
1536+ 883E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1536+ 8838             >
1536+ 8838 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1536+ 8839 54 4F 47 47 >                db      "TOGGLE"               // name string in 7-bit ascii, but
1536+ 883D 4C 45       >
1536+ 883F             >                org     $-1                 // alter last byte of Name just above to set
1536+ 883E C5          >                db      {b $} | END_BIT     // msb as name end
1536+ 883F             >
1536+ 883F 28 88       >                dw      last_NFA            // Link to previous definition Name
1536+ 8841             >TOGGLE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1536+ 8841 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1536+ 8841 ~           >
1536+ 8841 ~           >
1536+ 8841             >                endif           ; ok        // for other definitions it "points" the correct handler
1536+ 8841             >                // Use of "; ok" to suppress "warning[fwdref]"
1536+ 8841             >
1536+ 8841             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1537+ 8841 D1                           pop     de
1538+ 8842 E1                           pop     hl
1539+ 8843 7E                           ld      a, (hl)
1540+ 8844 AB                           xor     e
1541+ 8845 77                           ld      (hl), a
1542+ 8846
1543+ 8846                              next
1543+ 8846 DD E9       >                jp      (ix)
1544+ 8848
1545+ 8848              //  ______________________________________________________________________
1546+ 8848              //
1547+ 8848              // @            a -- n
1548+ 8848              // fetch 16 bit number n from address a. Z80 keeps high byte is in high memory
1549+ 8848                              New_Def FETCH, "@", is_code, is_normal
1549+ 8848             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1549+ 8848             >
1549+ 8848             >                // dummy db directives used to calculate length of namec
1549+ 8848 40          >                db      "@"
1549+ 8849             >len_NFA         defl    $ - temp_NFA
1549+ 8849             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1549+ 8848             >
1549+ 8848 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1549+ 8849 40          >                db      "@"               // name string in 7-bit ascii, but
1549+ 884A             >                org     $-1                 // alter last byte of Name just above to set
1549+ 8849 C0          >                db      {b $} | END_BIT     // msb as name end
1549+ 884A             >
1549+ 884A 38 88       >                dw      last_NFA            // Link to previous definition Name
1549+ 884C             >FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1549+ 884C ~           >                call    runcode ; ok        // for primitive definitions  actual code
1549+ 884C ~           >
1549+ 884C ~           >
1549+ 884C             >                endif           ; ok        // for other definitions it "points" the correct handler
1549+ 884C             >                // Use of "; ok" to suppress "warning[fwdref]"
1549+ 884C             >
1549+ 884C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1550+ 884C E1                           pop     hl
1551+ 884D 5E                           ld      e, (hl)             // low-byte
1552+ 884E 23                           inc     hl
1553+ 884F 56                           ld      d, (hl)             // high-byte
1554+ 8850 D5                           push    de
1555+ 8851                              next
1555+ 8851 DD E9       >                jp      (ix)
1556+ 8853
1557+ 8853              //  ______________________________________________________________________
1558+ 8853              //
1559+ 8853              // !            n a --
1560+ 8853              // store 16 bit number n from address a. Z80 keeps high byte is in high memory
1561+ 8853                              New_Def STORE, "!", is_code, is_normal
1561+ 8853             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1561+ 8853             >
1561+ 8853             >                // dummy db directives used to calculate length of namec
1561+ 8853 21          >                db      "!"
1561+ 8854             >len_NFA         defl    $ - temp_NFA
1561+ 8854             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1561+ 8853             >
1561+ 8853 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1561+ 8854 21          >                db      "!"               // name string in 7-bit ascii, but
1561+ 8855             >                org     $-1                 // alter last byte of Name just above to set
1561+ 8854 A1          >                db      {b $} | END_BIT     // msb as name end
1561+ 8855             >
1561+ 8855 48 88       >                dw      last_NFA            // Link to previous definition Name
1561+ 8857             >STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1561+ 8857 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1561+ 8857 ~           >
1561+ 8857 ~           >
1561+ 8857             >                endif           ; ok        // for other definitions it "points" the correct handler
1561+ 8857             >                // Use of "; ok" to suppress "warning[fwdref]"
1561+ 8857             >
1561+ 8857             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1562+ 8857 E1                           pop     hl                  // address
1563+ 8858 D1                           pop     de                  // < n
1564+ 8859 73                           ld      (hl), e             // low-byte
1565+ 885A 23                           inc     hl
1566+ 885B 72                           ld      (hl), d             // high-byte
1567+ 885C
1568+ 885C                              next
1568+ 885C DD E9       >                jp      (ix)
1569+ 885E
1570+ 885E              //  ______________________________________________________________________
1571+ 885E              //
1572+ 885E              // c@           a -- c
1573+ 885E              // fetch a character n from address a
1574+ 885E                              New_Def CFETCH, "C@", is_code, is_normal
1574+ 885E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1574+ 885E             >
1574+ 885E             >                // dummy db directives used to calculate length of namec
1574+ 885E 43 40       >                db      "C@"
1574+ 8860             >len_NFA         defl    $ - temp_NFA
1574+ 8860             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1574+ 885E             >
1574+ 885E 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1574+ 885F 43 40       >                db      "C@"               // name string in 7-bit ascii, but
1574+ 8861             >                org     $-1                 // alter last byte of Name just above to set
1574+ 8860 C0          >                db      {b $} | END_BIT     // msb as name end
1574+ 8861             >
1574+ 8861 53 88       >                dw      last_NFA            // Link to previous definition Name
1574+ 8863             >CFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1574+ 8863 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1574+ 8863 ~           >
1574+ 8863 ~           >
1574+ 8863             >                endif           ; ok        // for other definitions it "points" the correct handler
1574+ 8863             >                // Use of "; ok" to suppress "warning[fwdref]"
1574+ 8863             >
1574+ 8863             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1575+ 8863 E1                           pop     hl
1576+ 8864 6E                           ld      l, (hl)             // low-byte
1577+ 8865 26 00                        ld      h, 0
1578+ 8867
1579+ 8867                              psh1
1579+ 8867 E5          >                push    hl
1579+ 8868 DD E9       >                jp      (ix)
1580+ 886A
1581+ 886A              //  ______________________________________________________________________
1582+ 886A              //
1583+ 886A              // c!           c a --
1584+ 886A              // fetch 16 bit number n from address a. Z80 keeps high byte is in high memory
1585+ 886A                              New_Def CSTORE, "C!", is_code, is_normal
1585+ 886A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1585+ 886A             >
1585+ 886A             >                // dummy db directives used to calculate length of namec
1585+ 886A 43 21       >                db      "C!"
1585+ 886C             >len_NFA         defl    $ - temp_NFA
1585+ 886C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1585+ 886A             >
1585+ 886A 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1585+ 886B 43 21       >                db      "C!"               // name string in 7-bit ascii, but
1585+ 886D             >                org     $-1                 // alter last byte of Name just above to set
1585+ 886C A1          >                db      {b $} | END_BIT     // msb as name end
1585+ 886D             >
1585+ 886D 5E 88       >                dw      last_NFA            // Link to previous definition Name
1585+ 886F             >CSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1585+ 886F ~           >                call    runcode ; ok        // for primitive definitions  actual code
1585+ 886F ~           >
1585+ 886F ~           >
1585+ 886F             >                endif           ; ok        // for other definitions it "points" the correct handler
1585+ 886F             >                // Use of "; ok" to suppress "warning[fwdref]"
1585+ 886F             >
1585+ 886F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1586+ 886F E1                           pop     hl                  // < address
1587+ 8870 D1                           pop     de
1588+ 8871 73                           ld      (hl), e             // low-byte
1589+ 8872
1590+ 8872                              next
1590+ 8872 DD E9       >                jp      (ix)
1591+ 8874
1592+ 8874              //  ______________________________________________________________________
1593+ 8874              //
1594+ 8874              // 2@           a -- d
1595+ 8874              // fetch a 32 bits number d from address a and leaves it on top of the
1596+ 8874              // stack as two single numbers, high part as top of the stack.
1597+ 8874              // A double number is normally kept in CPU registers as HLDE.
1598+ 8874              // On stack a double number is treated as two single numbers
1599+ 8874              // where BC is on the top of the stack and HL is the second from top,
1600+ 8874              // so the sign of the number can be checked on top of stack
1601+ 8874              // and in the stack memory it appears as LHED.
1602+ 8874              // Instead, a 32 bits number d is kept in memory as EDLH
1603+ 8874              // with the lowest significant word in the lower location
1604+ 8874              // and the highest significant word in the higher location.
1605+ 8874              // fetch 32 bit number n from address a.
1606+ 8874                              New_Def TWO_FETCH, "2@", is_code, is_normal
1606+ 8874             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1606+ 8874             >
1606+ 8874             >                // dummy db directives used to calculate length of namec
1606+ 8874 32 40       >                db      "2@"
1606+ 8876             >len_NFA         defl    $ - temp_NFA
1606+ 8876             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1606+ 8874             >
1606+ 8874 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1606+ 8875 32 40       >                db      "2@"               // name string in 7-bit ascii, but
1606+ 8877             >                org     $-1                 // alter last byte of Name just above to set
1606+ 8876 C0          >                db      {b $} | END_BIT     // msb as name end
1606+ 8877             >
1606+ 8877 6A 88       >                dw      last_NFA            // Link to previous definition Name
1606+ 8879             >TWO_FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1606+ 8879 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1606+ 8879 ~           >
1606+ 8879 ~           >
1606+ 8879             >                endif           ; ok        // for other definitions it "points" the correct handler
1606+ 8879             >                // Use of "; ok" to suppress "warning[fwdref]"
1606+ 8879             >
1606+ 8879             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1607+ 8879 E1                           pop     hl                  // address
1608+ 887A 5E                           ld      e, (hl)             // low-byte
1609+ 887B 23                           inc     hl
1610+ 887C 56                           ld      d, (hl)             // high-byte
1611+ 887D
1612+ 887D 23                           inc     hl
1613+ 887E 7E                           ld      a, (hl)             // low-byte
1614+ 887F 23                           inc     hl
1615+ 8880 66                           ld      h, (hl)             // high-byte
1616+ 8881 6F                           ld      l, a
1617+ 8882                              psh2
1617+ 8882 D5          >                push    de
1617+ 8883 E5          >                push    hl
1617+ 8884 DD E9       >                jp      (ix)
1618+ 8886
1619+ 8886              //  ______________________________________________________________________
1620+ 8886              //
1621+ 8886              // 2!           d a --
1622+ 8886              // stores a 32 bits number d from address a and leaves it on top of the
1623+ 8886              // stack as two single numbers, high part as top of the stack.
1624+ 8886              // A double number is normally kept in CPU registers as HLDE.
1625+ 8886              // On stack a double number is treated as two single numbers
1626+ 8886              // where BC is on the top of the stack and HL is the second from top,
1627+ 8886              // so the sign of the number can be checked on top of stack
1628+ 8886              // and in the stack memory it appears as LHED.
1629+ 8886              // Instead, a 32 bits number d is kept in memory as EDLH
1630+ 8886              // with the lowest significant word in the lower location
1631+ 8886              // and the highest significant word in the higher location.
1632+ 8886              // fetch 32 bit number n from address a.
1633+ 8886                              New_Def TWO_STORE, "2!", is_code, is_normal
1633+ 8886             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1633+ 8886             >
1633+ 8886             >                // dummy db directives used to calculate length of namec
1633+ 8886 32 21       >                db      "2!"
1633+ 8888             >len_NFA         defl    $ - temp_NFA
1633+ 8888             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1633+ 8886             >
1633+ 8886 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1633+ 8887 32 21       >                db      "2!"               // name string in 7-bit ascii, but
1633+ 8889             >                org     $-1                 // alter last byte of Name just above to set
1633+ 8888 A1          >                db      {b $} | END_BIT     // msb as name end
1633+ 8889             >
1633+ 8889 74 88       >                dw      last_NFA            // Link to previous definition Name
1633+ 888B             >TWO_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1633+ 888B ~           >                call    runcode ; ok        // for primitive definitions  actual code
1633+ 888B ~           >
1633+ 888B ~           >
1633+ 888B             >                endif           ; ok        // for other definitions it "points" the correct handler
1633+ 888B             >                // Use of "; ok" to suppress "warning[fwdref]"
1633+ 888B             >
1633+ 888B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1634+ 888B 60                           ld      h, b
1635+ 888C 69                           ld      l, c
1636+ 888D D1                           pop     de                  // de has address
1637+ 888E C1                           pop     bc                  // < high-part
1638+ 888F E3                           ex      (sp), hl            // < low-part > Instruction Pointer
1639+ 8890 EB                           ex      de, hl
1640+ 8891 73                           ld      (hl), e
1641+ 8892 23                           inc     hl
1642+ 8893 72                           ld      (hl), d
1643+ 8894 23                           inc     hl
1644+ 8895 71                           ld      (hl), c
1645+ 8896 23                           inc     hl
1646+ 8897 70                           ld      (hl), b
1647+ 8898 C1                           pop     bc                  // Restore Instruction Pointer
1648+ 8899
1649+ 8899                              next
1649+ 8899 DD E9       >                jp      (ix)
1650+ 889B
1651+ 889B              //  ______________________________________________________________________
1652+ 889B              //
1653+ 889B              // p@           a -- c
1654+ 889B              // Read one byte from port a and leave the result on top of stack
1655+ 889B                              New_Def PFETCH, "P@", is_code, is_normal
1655+ 889B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1655+ 889B             >
1655+ 889B             >                // dummy db directives used to calculate length of namec
1655+ 889B 50 40       >                db      "P@"
1655+ 889D             >len_NFA         defl    $ - temp_NFA
1655+ 889D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1655+ 889B             >
1655+ 889B 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1655+ 889C 50 40       >                db      "P@"               // name string in 7-bit ascii, but
1655+ 889E             >                org     $-1                 // alter last byte of Name just above to set
1655+ 889D C0          >                db      {b $} | END_BIT     // msb as name end
1655+ 889E             >
1655+ 889E 86 88       >                dw      last_NFA            // Link to previous definition Name
1655+ 88A0             >PFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1655+ 88A0 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1655+ 88A0 ~           >
1655+ 88A0 ~           >
1655+ 88A0             >                endif           ; ok        // for other definitions it "points" the correct handler
1655+ 88A0             >                // Use of "; ok" to suppress "warning[fwdref]"
1655+ 88A0             >
1655+ 88A0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1656+ 88A0 50                           ld      d, b
1657+ 88A1 59                           ld      e, c
1658+ 88A2
1659+ 88A2 C1                           pop     bc
1660+ 88A3 26 00                        ld      h, 0
1661+ 88A5 ED 68                        in      l, (c)
1662+ 88A7 42                           ld      b, d
1663+ 88A8 4B                           ld      c, e
1664+ 88A9                              psh1
1664+ 88A9 E5          >                push    hl
1664+ 88AA DD E9       >                jp      (ix)
1665+ 88AC
1666+ 88AC              //  ______________________________________________________________________
1667+ 88AC              //
1668+ 88AC              // p!           c a --
1669+ 88AC              // Send one byte (top of stack) to port a
1670+ 88AC                              New_Def PSTORE, "P!", is_code, is_normal
1670+ 88AC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1670+ 88AC             >
1670+ 88AC             >                // dummy db directives used to calculate length of namec
1670+ 88AC 50 21       >                db      "P!"
1670+ 88AE             >len_NFA         defl    $ - temp_NFA
1670+ 88AE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1670+ 88AC             >
1670+ 88AC 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1670+ 88AD 50 21       >                db      "P!"               // name string in 7-bit ascii, but
1670+ 88AF             >                org     $-1                 // alter last byte of Name just above to set
1670+ 88AE A1          >                db      {b $} | END_BIT     // msb as name end
1670+ 88AF             >
1670+ 88AF 9B 88       >                dw      last_NFA            // Link to previous definition Name
1670+ 88B1             >PSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1670+ 88B1 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1670+ 88B1 ~           >
1670+ 88B1 ~           >
1670+ 88B1             >                endif           ; ok        // for other definitions it "points" the correct handler
1670+ 88B1             >                // Use of "; ok" to suppress "warning[fwdref]"
1670+ 88B1             >
1670+ 88B1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1671+ 88B1 50                           ld      d, b
1672+ 88B2 59                           ld      e, c
1673+ 88B3
1674+ 88B3 C1                           pop     bc
1675+ 88B4 E1                           pop     hl                  // < c
1676+ 88B5 ED 69                        out     (c), l              // low-byte
1677+ 88B7 42                           ld      b, d
1678+ 88B8 4B                           ld      c, e
1679+ 88B9
1680+ 88B9                              next
1680+ 88B9 DD E9       >                jp      (ix)
1681+ 88BB
1682+ 88BB
1683+ 88BB              //  ______________________________________________________________________
1684+ 88BB              //
1685+ 88BB              // 2*           n1 -- n2
1686+ 88BB              // doubles the number at top of stack
1687+ 88BB                              New_Def TWO_MUL, "2*", is_code, is_normal
1687+ 88BB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1687+ 88BB             >
1687+ 88BB             >                // dummy db directives used to calculate length of namec
1687+ 88BB 32 2A       >                db      "2*"
1687+ 88BD             >len_NFA         defl    $ - temp_NFA
1687+ 88BD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1687+ 88BB             >
1687+ 88BB 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1687+ 88BC 32 2A       >                db      "2*"               // name string in 7-bit ascii, but
1687+ 88BE             >                org     $-1                 // alter last byte of Name just above to set
1687+ 88BD AA          >                db      {b $} | END_BIT     // msb as name end
1687+ 88BE             >
1687+ 88BE AC 88       >                dw      last_NFA            // Link to previous definition Name
1687+ 88C0             >TWO_MUL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1687+ 88C0 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1687+ 88C0 ~           >
1687+ 88C0 ~           >
1687+ 88C0             >                endif           ; ok        // for other definitions it "points" the correct handler
1687+ 88C0             >                // Use of "; ok" to suppress "warning[fwdref]"
1687+ 88C0             >
1687+ 88C0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1688+ 88C0              Two_Mul_Ptr:
1689+ 88C0 E1                           pop     hl
1690+ 88C1 29                           add     hl, hl
1691+ 88C2
1692+ 88C2                              psh1
1692+ 88C2 E5          >                push    hl
1692+ 88C3 DD E9       >                jp      (ix)
1693+ 88C5
1694+ 88C5              //  ______________________________________________________________________
1695+ 88C5              //
1696+ 88C5              // 2/           n1 -- n2
1697+ 88C5              // halves the top of stack, sign is unchanged
1698+ 88C5                              New_Def TWO_DIV, "2/", is_code, is_normal
1698+ 88C5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1698+ 88C5             >
1698+ 88C5             >                // dummy db directives used to calculate length of namec
1698+ 88C5 32 2F       >                db      "2/"
1698+ 88C7             >len_NFA         defl    $ - temp_NFA
1698+ 88C7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1698+ 88C5             >
1698+ 88C5 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1698+ 88C6 32 2F       >                db      "2/"               // name string in 7-bit ascii, but
1698+ 88C8             >                org     $-1                 // alter last byte of Name just above to set
1698+ 88C7 AF          >                db      {b $} | END_BIT     // msb as name end
1698+ 88C8             >
1698+ 88C8 BB 88       >                dw      last_NFA            // Link to previous definition Name
1698+ 88CA             >TWO_DIV:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1698+ 88CA ~           >                call    runcode ; ok        // for primitive definitions  actual code
1698+ 88CA ~           >
1698+ 88CA ~           >
1698+ 88CA             >                endif           ; ok        // for other definitions it "points" the correct handler
1698+ 88CA             >                // Use of "; ok" to suppress "warning[fwdref]"
1698+ 88CA             >
1698+ 88CA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1699+ 88CA E1                           pop     hl
1700+ 88CB CB 2C                        sra     h
1701+ 88CD CB 1D                        rr      l
1702+ 88CF
1703+ 88CF                              psh1
1703+ 88CF E5          >                push    hl
1703+ 88D0 DD E9       >                jp      (ix)
1704+ 88D2
1705+ 88D2              //  ______________________________________________________________________
1706+ 88D2              //
1707+ 88D2              // lshift       n1 u -- n2
1708+ 88D2              // bit left shift of u bits
1709+ 88D2                              New_Def LSHIFT, "LSHIFT", is_code, is_normal
1709+ 88D2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1709+ 88D2             >
1709+ 88D2             >                // dummy db directives used to calculate length of namec
1709+ 88D2 4C 53 48 49 >                db      "LSHIFT"
1709+ 88D6 46 54       >
1709+ 88D8             >len_NFA         defl    $ - temp_NFA
1709+ 88D8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1709+ 88D2             >
1709+ 88D2 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1709+ 88D3 4C 53 48 49 >                db      "LSHIFT"               // name string in 7-bit ascii, but
1709+ 88D7 46 54       >
1709+ 88D9             >                org     $-1                 // alter last byte of Name just above to set
1709+ 88D8 D4          >                db      {b $} | END_BIT     // msb as name end
1709+ 88D9             >
1709+ 88D9 C5 88       >                dw      last_NFA            // Link to previous definition Name
1709+ 88DB             >LSHIFT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1709+ 88DB ~           >                call    runcode ; ok        // for primitive definitions  actual code
1709+ 88DB ~           >
1709+ 88DB ~           >
1709+ 88DB             >                endif           ; ok        // for other definitions it "points" the correct handler
1709+ 88DB             >                // Use of "; ok" to suppress "warning[fwdref]"
1709+ 88DB             >
1709+ 88DB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1710+ 88DB D1                           pop     de
1711+ 88DC
1712+ 88DC E1                           pop     hl
1713+ 88DD 7B                           ld      a, e
1714+ 88DE B7                           or      a
1715+ 88DF 28 04                        jr      z, Lshift_Zero
1716+ 88E1              Lshift_Loop:
1717+ 88E1 29                                   add     hl, hl
1718+ 88E2 3D                                   dec     a
1719+ 88E3 20 FC                            jr      nz, Lshift_Loop
1720+ 88E5              Lshift_Zero:
1721+ 88E5
1722+ 88E5
1723+ 88E5                              psh1
1723+ 88E5 E5          >                push    hl
1723+ 88E6 DD E9       >                jp      (ix)
1724+ 88E8
1725+ 88E8              //  ______________________________________________________________________
1726+ 88E8              //
1727+ 88E8              // rshift       n1 u -- n2
1728+ 88E8              // bit right shift of u bits
1729+ 88E8                              New_Def RSHIFT, "RSHIFT", is_code, is_normal
1729+ 88E8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1729+ 88E8             >
1729+ 88E8             >                // dummy db directives used to calculate length of namec
1729+ 88E8 52 53 48 49 >                db      "RSHIFT"
1729+ 88EC 46 54       >
1729+ 88EE             >len_NFA         defl    $ - temp_NFA
1729+ 88EE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1729+ 88E8             >
1729+ 88E8 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1729+ 88E9 52 53 48 49 >                db      "RSHIFT"               // name string in 7-bit ascii, but
1729+ 88ED 46 54       >
1729+ 88EF             >                org     $-1                 // alter last byte of Name just above to set
1729+ 88EE D4          >                db      {b $} | END_BIT     // msb as name end
1729+ 88EF             >
1729+ 88EF D2 88       >                dw      last_NFA            // Link to previous definition Name
1729+ 88F1             >RSHIFT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1729+ 88F1 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1729+ 88F1 ~           >
1729+ 88F1 ~           >
1729+ 88F1             >                endif           ; ok        // for other definitions it "points" the correct handler
1729+ 88F1             >                // Use of "; ok" to suppress "warning[fwdref]"
1729+ 88F1             >
1729+ 88F1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1730+ 88F1 D1                           pop     de
1731+ 88F2
1732+ 88F2 E1                           pop     hl
1733+ 88F3 7B                           ld      a, e
1734+ 88F4 B7                           or      a
1735+ 88F5 28 07                        jr      z, Rshift_Zero
1736+ 88F7              Rshift_Loop:
1737+ 88F7 CB 3C                                srl     h
1738+ 88F9 CB 1D                                rr      l
1739+ 88FB 3D                                   dec     a
1740+ 88FC 20 F9                            jr      nz, Rshift_Loop
1741+ 88FE              Rshift_Zero:
1742+ 88FE
1743+ 88FE
1744+ 88FE                              psh1
1744+ 88FE E5          >                push    hl
1744+ 88FF DD E9       >                jp      (ix)
1745+ 8901
1746+ 8901              //  ______________________________________________________________________
1747+ 8901              //
1748+ 8901              // cells        n1 -- n2
1749+ 8901              // decrement by 2 top of stack
1750+ 8901                              New_Def CELLS, "CELLS", Two_Mul_Ptr, is_normal
1750+ 8901             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1750+ 8901             >
1750+ 8901             >                // dummy db directives used to calculate length of namec
1750+ 8901 43 45 4C 4C >                db      "CELLS"
1750+ 8905 53          >
1750+ 8906             >len_NFA         defl    $ - temp_NFA
1750+ 8906             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1750+ 8901             >
1750+ 8901 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1750+ 8902 43 45 4C 4C >                db      "CELLS"               // name string in 7-bit ascii, but
1750+ 8906 53          >
1750+ 8907             >                org     $-1                 // alter last byte of Name just above to set
1750+ 8906 D3          >                db      {b $} | END_BIT     // msb as name end
1750+ 8907             >
1750+ 8907 E8 88       >                dw      last_NFA            // Link to previous definition Name
1750+ 8909             >CELLS:          if Two_Mul_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1750+ 8909 CD C0 88    >                call    Two_Mul_Ptr ; ok        // for primitive definitions  actual code
1750+ 890C             >
1750+ 890C             >
1750+ 890C             >                endif           ; ok        // for other definitions it "points" the correct handler
1750+ 890C             >                // Use of "; ok" to suppress "warning[fwdref]"
1750+ 890C             >
1750+ 890C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1751+ 890C
1752+ 890C
1753+ 890C              //  ______________________________________________________________________
1754+ 890C
# file closed: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/L0.asm
  90  890C                              include "L1.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/L1.asm
   1+ 890C              //  ______________________________________________________________________
   2+ 890C              //
   3+ 890C              //  L1.asm
   4+ 890C              //
   5+ 890C              //  Level-1 definitions and derivate
   6+ 890C              //  ______________________________________________________________________
   7+ 890C
   8+ 890C              //  ______________________________________________________________________
   9+ 890C              //
  10+ 890C              // :            -- cccc     ( compile time )
  11+ 890C              //              i*x -- j*x  ( run time )
  12+ 890C              // Colon Definition
  13+ 890C                              Colon_Def COLON, ":", is_immediate      // has forward-ref
  13+ 890C             >                New_Def  COLON, ":", Enter_Ptr, is_immediate ; ok
  13+ 890C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13+ 890C             >
  13+ 890C             >                // dummy db directives used to calculate length of namec
  13+ 890C 3A          >                db      ":"
  13+ 890D             >len_NFA         defl    $ - temp_NFA
  13+ 890D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13+ 890C             >
  13+ 890C C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
  13+ 890D 3A          >                db      ":"               // name string in 7-bit ascii, but
  13+ 890E             >                org     $-1                 // alter last byte of Name just above to set
  13+ 890D BA          >                db      {b $} | END_BIT     // msb as name end
  13+ 890E             >
  13+ 890E 01 89       >                dw      last_NFA            // Link to previous definition Name
  13+ 8910             >COLON:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  13+ 8910 CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  13+ 8913             >
  13+ 8913             >
  13+ 8913             >                endif           ; ok        // for other definitions it "points" the correct handler
  13+ 8913             >                // Use of "; ok" to suppress "warning[fwdref]"
  13+ 8913             >
  13+ 8913             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14+ 8913
  15+ 8913 AF 8D                        dw      QEXEC                   // ?exec
  16+ 8915 67 8D                        dw      STORE_CSP               // !csp
  17+ 8917 FF 8A 4C 88                  dw      CURRENT, FETCH          // current @
  18+ 891B F1 8A 57 88                  dw      CONTEXT, STORE          // context !
  19+ 891F 8D 93                        dw      CREATE                  // create  ( forward )
  20+ 8921 50 8E                        dw      SMUDGE                  // dmudge
  21+ 8923 3A 8E                        dw      SQUARED_CLOSE           // ]
  22+ 8925 AA 8E                        dw      C_SEMICOLON_CODE        // ;code ( change the 3-bytes CFA of defining word to call Enter_Ptr )
  23+ 8927                                                              // ... immediate
  24+ 8927              Enter_Ptr:
  25+ 8927                              // via call coded in CFA
  26+ 8927                              ldhlrp
  26+ 8927 2A 30 81    >                ld      hl,(RP_Pointer)
  27+ 892A 2B                           dec     hl                  // push on Return-Stack current Instruction-Pointer
  28+ 892B 70                           ld      (hl), b
  29+ 892C 2B                           dec     hl
  30+ 892D 71                           ld      (hl), c
  31+ 892E                              ldrphl
  31+ 892E 22 30 81    >                ld      (RP_Pointer),hl
  32+ 8931
  33+ 8931
  34+ 8931 C1                           pop     bc                  // points to PFA of "this" word
  35+ 8932                              next
  35+ 8932 DD E9       >                jp      (ix)
  36+ 8934
  37+ 8934              //  ______________________________________________________________________
  38+ 8934              //
  39+ 8934              // ;            --
  40+ 8934              // Semicolon. End of Colon-Definition. Stack must be balanced.
  41+ 8934                              Colon_Def SEMICOLON, ";", is_immediate   // has forward-ref
  41+ 8934             >                New_Def  SEMICOLON, ";", Enter_Ptr, is_immediate ; ok
  41+ 8934             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  41+ 8934             >
  41+ 8934             >                // dummy db directives used to calculate length of namec
  41+ 8934 3B          >                db      ";"
  41+ 8935             >len_NFA         defl    $ - temp_NFA
  41+ 8935             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  41+ 8934             >
  41+ 8934 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
  41+ 8935 3B          >                db      ";"               // name string in 7-bit ascii, but
  41+ 8936             >                org     $-1                 // alter last byte of Name just above to set
  41+ 8935 BB          >                db      {b $} | END_BIT     // msb as name end
  41+ 8936             >
  41+ 8936 0C 89       >                dw      last_NFA            // Link to previous definition Name
  41+ 8938             >SEMICOLON:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  41+ 8938 CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  41+ 893B             >
  41+ 893B             >
  41+ 893B             >                endif           ; ok        // for other definitions it "points" the correct handler
  41+ 893B             >                // Use of "; ok" to suppress "warning[fwdref]"
  41+ 893B             >
  41+ 893B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  42+ 893B
  43+ 893B DB 8D                        dw      QCSP                    // ?csp
  44+ 893D 14 8E 43 86                  dw      COMPILE, EXIT           // [compile] ;s
  45+ 8941 50 8E                        dw      SMUDGE                  // smudge
  46+ 8943 2B 8E                        dw      SQUARED_OPEN            // [
  47+ 8945 43 86                        dw      EXIT                    // ; immediate
  48+ 8947
  49+ 8947              //  ______________________________________________________________________
  50+ 8947              //
  51+ 8947              // noop         --
  52+ 8947
  53+ 8947                              Colon_Def NOOP, "NOOP", is_normal
  53+ 8947             >                New_Def  NOOP, "NOOP", Enter_Ptr, is_normal ; ok
  53+ 8947             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  53+ 8947             >
  53+ 8947             >                // dummy db directives used to calculate length of namec
  53+ 8947 4E 4F 4F 50 >                db      "NOOP"
  53+ 894B             >len_NFA         defl    $ - temp_NFA
  53+ 894B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  53+ 8947             >
  53+ 8947 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  53+ 8948 4E 4F 4F 50 >                db      "NOOP"               // name string in 7-bit ascii, but
  53+ 894C             >                org     $-1                 // alter last byte of Name just above to set
  53+ 894B D0          >                db      {b $} | END_BIT     // msb as name end
  53+ 894C             >
  53+ 894C 34 89       >                dw      last_NFA            // Link to previous definition Name
  53+ 894E             >NOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  53+ 894E CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  53+ 8951             >
  53+ 8951             >
  53+ 8951             >                endif           ; ok        // for other definitions it "points" the correct handler
  53+ 8951             >                // Use of "; ok" to suppress "warning[fwdref]"
  53+ 8951             >
  53+ 8951             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  54+ 8951 43 86                        dw      EXIT
  55+ 8953
  56+ 8953              //  ______________________________________________________________________
  57+ 8953              //
  58+ 8953              // constant     n -- cccc     ( compile time )
  59+ 8953              //              -- n          ( run time )
  60+ 8953              // Constant definition.
  61+ 8953                              Colon_Def CONSTANT, "CONSTANT", is_normal   // has forward-ref
  61+ 8953             >                New_Def  CONSTANT, "CONSTANT", Enter_Ptr, is_normal ; ok
  61+ 8953             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  61+ 8953             >
  61+ 8953             >                // dummy db directives used to calculate length of namec
  61+ 8953 43 4F 4E 53 >                db      "CONSTANT"
  61+ 8957 54 41 4E 54 >
  61+ 895B             >len_NFA         defl    $ - temp_NFA
  61+ 895B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  61+ 8953             >
  61+ 8953 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  61+ 8954 43 4F 4E 53 >                db      "CONSTANT"               // name string in 7-bit ascii, but
  61+ 8958 54 41 4E 54 >
  61+ 895C             >                org     $-1                 // alter last byte of Name just above to set
  61+ 895B D4          >                db      {b $} | END_BIT     // msb as name end
  61+ 895C             >
  61+ 895C 47 89       >                dw      last_NFA            // Link to previous definition Name
  61+ 895E             >CONSTANT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  61+ 895E CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  61+ 8961             >
  61+ 8961             >
  61+ 8961             >                endif           ; ok        // for other definitions it "points" the correct handler
  61+ 8961             >                // Use of "; ok" to suppress "warning[fwdref]"
  61+ 8961             >
  61+ 8961             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  62+ 8961
  63+ 8961 8D 93                        dw      CREATE                  // create
  64+ 8963 BE 8B                        dw      COMMA                   // ,    ( at PFA then, store the value )
  65+ 8965 AA 8E                        dw      C_SEMICOLON_CODE        // ;code (  changes the 3-bytes CFA to call Constant_Ptr )
  66+ 8967              Constant_Ptr:
  67+ 8967
  68+ 8967
  69+ 8967 E1                           pop     hl
  70+ 8968
  71+ 8968 5E                           ld      e, (hl)
  72+ 8969 23                           inc     hl
  73+ 896A 56                           ld      d, (hl)
  74+ 896B D5                           push    de
  75+ 896C                              next
  75+ 896C DD E9       >                jp      (ix)
  76+ 896E
  77+ 896E              //  ______________________________________________________________________
  78+ 896E              //
  79+ 896E              // variable     n -- cccc     ( compile time )
  80+ 896E              //              -- a          ( run time )
  81+ 896E              // Variable definition, n is the initial value.
  82+ 896E                              Colon_Def VARIABLE, "VARIABLE", is_normal   // has forward-ref
  82+ 896E             >                New_Def  VARIABLE, "VARIABLE", Enter_Ptr, is_normal ; ok
  82+ 896E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  82+ 896E             >
  82+ 896E             >                // dummy db directives used to calculate length of namec
  82+ 896E 56 41 52 49 >                db      "VARIABLE"
  82+ 8972 41 42 4C 45 >
  82+ 8976             >len_NFA         defl    $ - temp_NFA
  82+ 8976             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  82+ 896E             >
  82+ 896E 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  82+ 896F 56 41 52 49 >                db      "VARIABLE"               // name string in 7-bit ascii, but
  82+ 8973 41 42 4C 45 >
  82+ 8977             >                org     $-1                 // alter last byte of Name just above to set
  82+ 8976 C5          >                db      {b $} | END_BIT     // msb as name end
  82+ 8977             >
  82+ 8977 53 89       >                dw      last_NFA            // Link to previous definition Name
  82+ 8979             >VARIABLE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  82+ 8979 CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  82+ 897C             >
  82+ 897C             >
  82+ 897C             >                endif           ; ok        // for other definitions it "points" the correct handler
  82+ 897C             >                // Use of "; ok" to suppress "warning[fwdref]"
  82+ 897C             >
  82+ 897C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  83+ 897C
  84+ 897C 5E 89                        dw      CONSTANT                // constant
  85+ 897E AA 8E                        dw      C_SEMICOLON_CODE        // ;code ( changes the 3-bytes CFA to call Variable_Ptr )
  86+ 8980              Variable_Ptr:
  87+ 8980
  88+ 8980
  89+ 8980
  90+ 8980
  91+ 8980                              next
  91+ 8980 DD E9       >                jp      (ix)
  92+ 8982
  93+ 8982              //  ______________________________________________________________________
  94+ 8982              //
  95+ 8982              // user         b -- cccc     ( compile time )
  96+ 8982              //              -- a          ( run time )
  97+ 8982              // User variable definition
  98+ 8982                              Colon_Def USER, "USER", is_normal
  98+ 8982             >                New_Def  USER, "USER", Enter_Ptr, is_normal ; ok
  98+ 8982             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  98+ 8982             >
  98+ 8982             >                // dummy db directives used to calculate length of namec
  98+ 8982 55 53 45 52 >                db      "USER"
  98+ 8986             >len_NFA         defl    $ - temp_NFA
  98+ 8986             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  98+ 8982             >
  98+ 8982 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  98+ 8983 55 53 45 52 >                db      "USER"               // name string in 7-bit ascii, but
  98+ 8987             >                org     $-1                 // alter last byte of Name just above to set
  98+ 8986 D2          >                db      {b $} | END_BIT     // msb as name end
  98+ 8987             >
  98+ 8987 6E 89       >                dw      last_NFA            // Link to previous definition Name
  98+ 8989             >USER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  98+ 8989 CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  98+ 898C             >
  98+ 898C             >
  98+ 898C             >                endif           ; ok        // for other definitions it "points" the correct handler
  98+ 898C             >                // Use of "; ok" to suppress "warning[fwdref]"
  98+ 898C             >
  98+ 898C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  99+ 898C
 100+ 898C 8D 93                        dw      CREATE                  // create
 101+ 898E D0 8B                        dw      CCOMMA                  // c,
 102+ 8990 AA 8E                        dw      C_SEMICOLON_CODE        // ;code () changes the 3-bytes CFA to call User_Ptr )
 103+ 8992
 104+ 8992
 105+ 8992              User_Ptr:
 106+ 8992                              // via call coded in CFA
 107+ 8992 E1                           pop     hl
 108+ 8993
 109+ 8993 5E                           ld      e, (hl)
 110+ 8994 16 00                        ld      d, 0
 111+ 8996 2A 2E 81                     ld      hl, (USER_Pointer)
 112+ 8999 19                           add     hl, de
 113+ 899A
 114+ 899A                              psh1
 114+ 899A E5          >                push    hl
 114+ 899B DD E9       >                jp      (ix)
 115+ 899D
 116+ 899D              //  ______________________________________________________________________
 117+ 899D              //
 118+ 899D                              Constant_Def ZERO       ,   "0"     ,   0
 118+ 899D             >                New_Def  ZERO, "0", Constant_Ptr, is_normal
 118+ 899D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 118+ 899D             >
 118+ 899D             >                // dummy db directives used to calculate length of namec
 118+ 899D 30          >                db      "0"
 118+ 899E             >len_NFA         defl    $ - temp_NFA
 118+ 899E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 118+ 899D             >
 118+ 899D 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 118+ 899E 30          >                db      "0"               // name string in 7-bit ascii, but
 118+ 899F             >                org     $-1                 // alter last byte of Name just above to set
 118+ 899E B0          >                db      {b $} | END_BIT     // msb as name end
 118+ 899F             >
 118+ 899F 82 89       >                dw      last_NFA            // Link to previous definition Name
 118+ 89A1             >ZERO:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 118+ 89A1 CD 67 89    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 118+ 89A4             >
 118+ 89A4             >
 118+ 89A4             >                endif           ; ok        // for other definitions it "points" the correct handler
 118+ 89A4             >                // Use of "; ok" to suppress "warning[fwdref]"
 118+ 89A4             >
 118+ 89A4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 118+ 89A4 00 00       >                dw      0
 119+ 89A6                              Constant_Def ONE        ,   "1"     ,   1
 119+ 89A6             >                New_Def  ONE, "1", Constant_Ptr, is_normal
 119+ 89A6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 119+ 89A6             >
 119+ 89A6             >                // dummy db directives used to calculate length of namec
 119+ 89A6 31          >                db      "1"
 119+ 89A7             >len_NFA         defl    $ - temp_NFA
 119+ 89A7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 119+ 89A6             >
 119+ 89A6 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 119+ 89A7 31          >                db      "1"               // name string in 7-bit ascii, but
 119+ 89A8             >                org     $-1                 // alter last byte of Name just above to set
 119+ 89A7 B1          >                db      {b $} | END_BIT     // msb as name end
 119+ 89A8             >
 119+ 89A8 9D 89       >                dw      last_NFA            // Link to previous definition Name
 119+ 89AA             >ONE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 119+ 89AA CD 67 89    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 119+ 89AD             >
 119+ 89AD             >
 119+ 89AD             >                endif           ; ok        // for other definitions it "points" the correct handler
 119+ 89AD             >                // Use of "; ok" to suppress "warning[fwdref]"
 119+ 89AD             >
 119+ 89AD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 119+ 89AD 01 00       >                dw      1
 120+ 89AF                              Constant_Def TWO        ,   "2"     ,   2
 120+ 89AF             >                New_Def  TWO, "2", Constant_Ptr, is_normal
 120+ 89AF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 120+ 89AF             >
 120+ 89AF             >                // dummy db directives used to calculate length of namec
 120+ 89AF 32          >                db      "2"
 120+ 89B0             >len_NFA         defl    $ - temp_NFA
 120+ 89B0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 120+ 89AF             >
 120+ 89AF 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 120+ 89B0 32          >                db      "2"               // name string in 7-bit ascii, but
 120+ 89B1             >                org     $-1                 // alter last byte of Name just above to set
 120+ 89B0 B2          >                db      {b $} | END_BIT     // msb as name end
 120+ 89B1             >
 120+ 89B1 A6 89       >                dw      last_NFA            // Link to previous definition Name
 120+ 89B3             >TWO:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 120+ 89B3 CD 67 89    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 120+ 89B6             >
 120+ 89B6             >
 120+ 89B6             >                endif           ; ok        // for other definitions it "points" the correct handler
 120+ 89B6             >                // Use of "; ok" to suppress "warning[fwdref]"
 120+ 89B6             >
 120+ 89B6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 120+ 89B6 02 00       >                dw      2
 121+ 89B8                              Constant_Def THREE      ,   "3"     ,   3
 121+ 89B8             >                New_Def  THREE, "3", Constant_Ptr, is_normal
 121+ 89B8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 121+ 89B8             >
 121+ 89B8             >                // dummy db directives used to calculate length of namec
 121+ 89B8 33          >                db      "3"
 121+ 89B9             >len_NFA         defl    $ - temp_NFA
 121+ 89B9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 121+ 89B8             >
 121+ 89B8 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 121+ 89B9 33          >                db      "3"               // name string in 7-bit ascii, but
 121+ 89BA             >                org     $-1                 // alter last byte of Name just above to set
 121+ 89B9 B3          >                db      {b $} | END_BIT     // msb as name end
 121+ 89BA             >
 121+ 89BA AF 89       >                dw      last_NFA            // Link to previous definition Name
 121+ 89BC             >THREE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 121+ 89BC CD 67 89    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 121+ 89BF             >
 121+ 89BF             >
 121+ 89BF             >                endif           ; ok        // for other definitions it "points" the correct handler
 121+ 89BF             >                // Use of "; ok" to suppress "warning[fwdref]"
 121+ 89BF             >
 121+ 89BF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 121+ 89BF 03 00       >                dw      3
 122+ 89C1                              Constant_Def NEG_ONE    ,   "-1"    ,  -1
 122+ 89C1             >                New_Def  NEG_ONE, "-1", Constant_Ptr, is_normal
 122+ 89C1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 122+ 89C1             >
 122+ 89C1             >                // dummy db directives used to calculate length of namec
 122+ 89C1 2D 31       >                db      "-1"
 122+ 89C3             >len_NFA         defl    $ - temp_NFA
 122+ 89C3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 122+ 89C1             >
 122+ 89C1 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 122+ 89C2 2D 31       >                db      "-1"               // name string in 7-bit ascii, but
 122+ 89C4             >                org     $-1                 // alter last byte of Name just above to set
 122+ 89C3 B1          >                db      {b $} | END_BIT     // msb as name end
 122+ 89C4             >
 122+ 89C4 B8 89       >                dw      last_NFA            // Link to previous definition Name
 122+ 89C6             >NEG_ONE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 122+ 89C6 CD 67 89    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 122+ 89C9             >
 122+ 89C9             >
 122+ 89C9             >                endif           ; ok        // for other definitions it "points" the correct handler
 122+ 89C9             >                // Use of "; ok" to suppress "warning[fwdref]"
 122+ 89C9             >
 122+ 89C9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 122+ 89C9 FF FF       >                dw      -1
 123+ 89CB                              Constant_Def BL         ,   "BL"    , $20
 123+ 89CB             >                New_Def  BL, "BL", Constant_Ptr, is_normal
 123+ 89CB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 123+ 89CB             >
 123+ 89CB             >                // dummy db directives used to calculate length of namec
 123+ 89CB 42 4C       >                db      "BL"
 123+ 89CD             >len_NFA         defl    $ - temp_NFA
 123+ 89CD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 123+ 89CB             >
 123+ 89CB 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 123+ 89CC 42 4C       >                db      "BL"               // name string in 7-bit ascii, but
 123+ 89CE             >                org     $-1                 // alter last byte of Name just above to set
 123+ 89CD CC          >                db      {b $} | END_BIT     // msb as name end
 123+ 89CE             >
 123+ 89CE C1 89       >                dw      last_NFA            // Link to previous definition Name
 123+ 89D0             >BL:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 123+ 89D0 CD 67 89    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 123+ 89D3             >
 123+ 89D3             >
 123+ 89D3             >                endif           ; ok        // for other definitions it "points" the correct handler
 123+ 89D3             >                // Use of "; ok" to suppress "warning[fwdref]"
 123+ 89D3             >
 123+ 89D3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 123+ 89D3 20 00       >                dw      $20
 124+ 89D5                              Constant_Def CL         ,   "C/L"   ,  64
 124+ 89D5             >                New_Def  CL, "C/L", Constant_Ptr, is_normal
 124+ 89D5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 124+ 89D5             >
 124+ 89D5             >                // dummy db directives used to calculate length of namec
 124+ 89D5 43 2F 4C    >                db      "C/L"
 124+ 89D8             >len_NFA         defl    $ - temp_NFA
 124+ 89D8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 124+ 89D5             >
 124+ 89D5 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 124+ 89D6 43 2F 4C    >                db      "C/L"               // name string in 7-bit ascii, but
 124+ 89D9             >                org     $-1                 // alter last byte of Name just above to set
 124+ 89D8 CC          >                db      {b $} | END_BIT     // msb as name end
 124+ 89D9             >
 124+ 89D9 CB 89       >                dw      last_NFA            // Link to previous definition Name
 124+ 89DB             >CL:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 124+ 89DB CD 67 89    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 124+ 89DE             >
 124+ 89DE             >
 124+ 89DE             >                endif           ; ok        // for other definitions it "points" the correct handler
 124+ 89DE             >                // Use of "; ok" to suppress "warning[fwdref]"
 124+ 89DE             >
 124+ 89DE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 124+ 89DE 40 00       >                dw      64
 125+ 89E0                              Constant_Def BBUF       ,   "B/BUF" , 512
 125+ 89E0             >                New_Def  BBUF, "B/BUF", Constant_Ptr, is_normal
 125+ 89E0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 125+ 89E0             >
 125+ 89E0             >                // dummy db directives used to calculate length of namec
 125+ 89E0 42 2F 42 55 >                db      "B/BUF"
 125+ 89E4 46          >
 125+ 89E5             >len_NFA         defl    $ - temp_NFA
 125+ 89E5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 125+ 89E0             >
 125+ 89E0 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 125+ 89E1 42 2F 42 55 >                db      "B/BUF"               // name string in 7-bit ascii, but
 125+ 89E5 46          >
 125+ 89E6             >                org     $-1                 // alter last byte of Name just above to set
 125+ 89E5 C6          >                db      {b $} | END_BIT     // msb as name end
 125+ 89E6             >
 125+ 89E6 D5 89       >                dw      last_NFA            // Link to previous definition Name
 125+ 89E8             >BBUF:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 125+ 89E8 CD 67 89    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 125+ 89EB             >
 125+ 89EB             >
 125+ 89EB             >                endif           ; ok        // for other definitions it "points" the correct handler
 125+ 89EB             >                // Use of "; ok" to suppress "warning[fwdref]"
 125+ 89EB             >
 125+ 89EB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 125+ 89EB 00 02       >                dw      512
 126+ 89ED                              Constant_Def BSCR       ,   "B/SCR" ,   2
 126+ 89ED             >                New_Def  BSCR, "B/SCR", Constant_Ptr, is_normal
 126+ 89ED             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 126+ 89ED             >
 126+ 89ED             >                // dummy db directives used to calculate length of namec
 126+ 89ED 42 2F 53 43 >                db      "B/SCR"
 126+ 89F1 52          >
 126+ 89F2             >len_NFA         defl    $ - temp_NFA
 126+ 89F2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 126+ 89ED             >
 126+ 89ED 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 126+ 89EE 42 2F 53 43 >                db      "B/SCR"               // name string in 7-bit ascii, but
 126+ 89F2 52          >
 126+ 89F3             >                org     $-1                 // alter last byte of Name just above to set
 126+ 89F2 D2          >                db      {b $} | END_BIT     // msb as name end
 126+ 89F3             >
 126+ 89F3 E0 89       >                dw      last_NFA            // Link to previous definition Name
 126+ 89F5             >BSCR:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 126+ 89F5 CD 67 89    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 126+ 89F8             >
 126+ 89F8             >
 126+ 89F8             >                endif           ; ok        // for other definitions it "points" the correct handler
 126+ 89F8             >                // Use of "; ok" to suppress "warning[fwdref]"
 126+ 89F8             >
 126+ 89F8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 126+ 89F8 02 00       >                dw      2
 127+ 89FA                              Constant_Def LSCR       ,   "L/SCR" ,  16
 127+ 89FA             >                New_Def  LSCR, "L/SCR", Constant_Ptr, is_normal
 127+ 89FA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 127+ 89FA             >
 127+ 89FA             >                // dummy db directives used to calculate length of namec
 127+ 89FA 4C 2F 53 43 >                db      "L/SCR"
 127+ 89FE 52          >
 127+ 89FF             >len_NFA         defl    $ - temp_NFA
 127+ 89FF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 127+ 89FA             >
 127+ 89FA 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 127+ 89FB 4C 2F 53 43 >                db      "L/SCR"               // name string in 7-bit ascii, but
 127+ 89FF 52          >
 127+ 8A00             >                org     $-1                 // alter last byte of Name just above to set
 127+ 89FF D2          >                db      {b $} | END_BIT     // msb as name end
 127+ 8A00             >
 127+ 8A00 ED 89       >                dw      last_NFA            // Link to previous definition Name
 127+ 8A02             >LSCR:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 127+ 8A02 CD 67 89    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 127+ 8A05             >
 127+ 8A05             >
 127+ 8A05             >                endif           ; ok        // for other definitions it "points" the correct handler
 127+ 8A05             >                // Use of "; ok" to suppress "warning[fwdref]"
 127+ 8A05             >
 127+ 8A05             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 127+ 8A05 10 00       >                dw      16
 128+ 8A07
 129+ 8A07              //  ______________________________________________________________________
 130+ 8A07              //
 131+ 8A07              // +origin         --
 132+ 8A07                              Colon_Def PLUS_ORIGIN, "+ORIGIN", is_normal
 132+ 8A07             >                New_Def  PLUS_ORIGIN, "+ORIGIN", Enter_Ptr, is_normal ; ok
 132+ 8A07             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 132+ 8A07             >
 132+ 8A07             >                // dummy db directives used to calculate length of namec
 132+ 8A07 2B 4F 52 49 >                db      "+ORIGIN"
 132+ 8A0B 47 49 4E    >
 132+ 8A0E             >len_NFA         defl    $ - temp_NFA
 132+ 8A0E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 132+ 8A07             >
 132+ 8A07 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 132+ 8A08 2B 4F 52 49 >                db      "+ORIGIN"               // name string in 7-bit ascii, but
 132+ 8A0C 47 49 4E    >
 132+ 8A0F             >                org     $-1                 // alter last byte of Name just above to set
 132+ 8A0E CE          >                db      {b $} | END_BIT     // msb as name end
 132+ 8A0F             >
 132+ 8A0F FA 89       >                dw      last_NFA            // Link to previous definition Name
 132+ 8A11             >PLUS_ORIGIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 132+ 8A11 CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 132+ 8A14             >
 132+ 8A14             >
 132+ 8A14             >                endif           ; ok        // for other definitions it "points" the correct handler
 132+ 8A14             >                // Use of "; ok" to suppress "warning[fwdref]"
 132+ 8A14             >
 132+ 8A14             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 133+ 8A14 41 81 00 81                  dw      LIT, Cold_origin        // [ hex 6400 ] literal
 134+ 8A18 C8 86                        dw      PLUS                    // +
 135+ 8A1A 43 86                        dw      EXIT                    // ;
 136+ 8A1C
 137+ 8A1C              //  ______________________________________________________________________
 138+ 8A1C              //
 139+ 8A1C                              Constant_Def CNEXT      ,   "(NEXT)", Next_Ptr
 139+ 8A1C             >                New_Def  CNEXT, "(NEXT)", Constant_Ptr, is_normal
 139+ 8A1C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 139+ 8A1C             >
 139+ 8A1C             >                // dummy db directives used to calculate length of namec
 139+ 8A1C 28 4E 45 58 >                db      "(NEXT)"
 139+ 8A20 54 29       >
 139+ 8A22             >len_NFA         defl    $ - temp_NFA
 139+ 8A22             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 139+ 8A1C             >
 139+ 8A1C 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 139+ 8A1D 28 4E 45 58 >                db      "(NEXT)"               // name string in 7-bit ascii, but
 139+ 8A21 54 29       >
 139+ 8A23             >                org     $-1                 // alter last byte of Name just above to set
 139+ 8A22 A9          >                db      {b $} | END_BIT     // msb as name end
 139+ 8A23             >
 139+ 8A23 07 8A       >                dw      last_NFA            // Link to previous definition Name
 139+ 8A25             >CNEXT:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 139+ 8A25 CD 67 89    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 139+ 8A28             >
 139+ 8A28             >
 139+ 8A28             >                endif           ; ok        // for other definitions it "points" the correct handler
 139+ 8A28             >                // Use of "; ok" to suppress "warning[fwdref]"
 139+ 8A28             >
 139+ 8A28             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 139+ 8A28 34 81       >                dw      Next_Ptr
 140+ 8A2A
 141+ 8A2A              //  ______________________________________________________________________
 142+ 8A2A              //
 143+ 8A2A
 144+ 8A2A                              User_Def S0         , "S0"        , 06 // starting value of Stack-Pointer
 144+ 8A2A             >                New_Def  S0, "S0", User_Ptr, is_normal
 144+ 8A2A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 144+ 8A2A             >
 144+ 8A2A             >                // dummy db directives used to calculate length of namec
 144+ 8A2A 53 30       >                db      "S0"
 144+ 8A2C             >len_NFA         defl    $ - temp_NFA
 144+ 8A2C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 144+ 8A2A             >
 144+ 8A2A 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 144+ 8A2B 53 30       >                db      "S0"               // name string in 7-bit ascii, but
 144+ 8A2D             >                org     $-1                 // alter last byte of Name just above to set
 144+ 8A2C B0          >                db      {b $} | END_BIT     // msb as name end
 144+ 8A2D             >
 144+ 8A2D 1C 8A       >                dw      last_NFA            // Link to previous definition Name
 144+ 8A2F             >S0:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 144+ 8A2F CD 92 89    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 144+ 8A32             >
 144+ 8A32             >
 144+ 8A32             >                endif           ; ok        // for other definitions it "points" the correct handler
 144+ 8A32             >                // Use of "; ok" to suppress "warning[fwdref]"
 144+ 8A32             >
 144+ 8A32             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 144+ 8A32 06          >                db      06
 145+ 8A33                              User_Def R0         , "R0"        , 08 // starting value of Return-Pointer
 145+ 8A33             >                New_Def  R0, "R0", User_Ptr, is_normal
 145+ 8A33             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 145+ 8A33             >
 145+ 8A33             >                // dummy db directives used to calculate length of namec
 145+ 8A33 52 30       >                db      "R0"
 145+ 8A35             >len_NFA         defl    $ - temp_NFA
 145+ 8A35             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 145+ 8A33             >
 145+ 8A33 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 145+ 8A34 52 30       >                db      "R0"               // name string in 7-bit ascii, but
 145+ 8A36             >                org     $-1                 // alter last byte of Name just above to set
 145+ 8A35 B0          >                db      {b $} | END_BIT     // msb as name end
 145+ 8A36             >
 145+ 8A36 2A 8A       >                dw      last_NFA            // Link to previous definition Name
 145+ 8A38             >R0:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 145+ 8A38 CD 92 89    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 145+ 8A3B             >
 145+ 8A3B             >
 145+ 8A3B             >                endif           ; ok        // for other definitions it "points" the correct handler
 145+ 8A3B             >                // Use of "; ok" to suppress "warning[fwdref]"
 145+ 8A3B             >
 145+ 8A3B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 145+ 8A3B 08          >                db      08
 146+ 8A3C                              User_Def TIB        , "TIB"       , 10 // input terminal buffer address
 146+ 8A3C             >                New_Def  TIB, "TIB", User_Ptr, is_normal
 146+ 8A3C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 146+ 8A3C             >
 146+ 8A3C             >                // dummy db directives used to calculate length of namec
 146+ 8A3C 54 49 42    >                db      "TIB"
 146+ 8A3F             >len_NFA         defl    $ - temp_NFA
 146+ 8A3F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 146+ 8A3C             >
 146+ 8A3C 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 146+ 8A3D 54 49 42    >                db      "TIB"               // name string in 7-bit ascii, but
 146+ 8A40             >                org     $-1                 // alter last byte of Name just above to set
 146+ 8A3F C2          >                db      {b $} | END_BIT     // msb as name end
 146+ 8A40             >
 146+ 8A40 33 8A       >                dw      last_NFA            // Link to previous definition Name
 146+ 8A42             >TIB:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 146+ 8A42 CD 92 89    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 146+ 8A45             >
 146+ 8A45             >
 146+ 8A45             >                endif           ; ok        // for other definitions it "points" the correct handler
 146+ 8A45             >                // Use of "; ok" to suppress "warning[fwdref]"
 146+ 8A45             >
 146+ 8A45             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 146+ 8A45 0A          >                db      10
 147+ 8A46                              User_Def WIDTH      , "WIDTH"     , 12 // maximum number of characters for a word name
 147+ 8A46             >                New_Def  WIDTH, "WIDTH", User_Ptr, is_normal
 147+ 8A46             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 147+ 8A46             >
 147+ 8A46             >                // dummy db directives used to calculate length of namec
 147+ 8A46 57 49 44 54 >                db      "WIDTH"
 147+ 8A4A 48          >
 147+ 8A4B             >len_NFA         defl    $ - temp_NFA
 147+ 8A4B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 147+ 8A46             >
 147+ 8A46 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 147+ 8A47 57 49 44 54 >                db      "WIDTH"               // name string in 7-bit ascii, but
 147+ 8A4B 48          >
 147+ 8A4C             >                org     $-1                 // alter last byte of Name just above to set
 147+ 8A4B C8          >                db      {b $} | END_BIT     // msb as name end
 147+ 8A4C             >
 147+ 8A4C 3C 8A       >                dw      last_NFA            // Link to previous definition Name
 147+ 8A4E             >WIDTH:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 147+ 8A4E CD 92 89    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 147+ 8A51             >
 147+ 8A51             >
 147+ 8A51             >                endif           ; ok        // for other definitions it "points" the correct handler
 147+ 8A51             >                // Use of "; ok" to suppress "warning[fwdref]"
 147+ 8A51             >
 147+ 8A51             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 147+ 8A51 0C          >                db      12
 148+ 8A52                              User_Def WARNING    , "WARNING"   , 14 // error reporting method: 0 base, 1 verbose
 148+ 8A52             >                New_Def  WARNING, "WARNING", User_Ptr, is_normal
 148+ 8A52             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 148+ 8A52             >
 148+ 8A52             >                // dummy db directives used to calculate length of namec
 148+ 8A52 57 41 52 4E >                db      "WARNING"
 148+ 8A56 49 4E 47    >
 148+ 8A59             >len_NFA         defl    $ - temp_NFA
 148+ 8A59             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 148+ 8A52             >
 148+ 8A52 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 148+ 8A53 57 41 52 4E >                db      "WARNING"               // name string in 7-bit ascii, but
 148+ 8A57 49 4E 47    >
 148+ 8A5A             >                org     $-1                 // alter last byte of Name just above to set
 148+ 8A59 C7          >                db      {b $} | END_BIT     // msb as name end
 148+ 8A5A             >
 148+ 8A5A 46 8A       >                dw      last_NFA            // Link to previous definition Name
 148+ 8A5C             >WARNING:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 148+ 8A5C CD 92 89    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 148+ 8A5F             >
 148+ 8A5F             >
 148+ 8A5F             >                endif           ; ok        // for other definitions it "points" the correct handler
 148+ 8A5F             >                // Use of "; ok" to suppress "warning[fwdref]"
 148+ 8A5F             >
 148+ 8A5F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 148+ 8A5F 0E          >                db      14
 149+ 8A60                              User_Def FENCE      , "FENCE"     , 16 // minimum address where FORGET can work
 149+ 8A60             >                New_Def  FENCE, "FENCE", User_Ptr, is_normal
 149+ 8A60             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 149+ 8A60             >
 149+ 8A60             >                // dummy db directives used to calculate length of namec
 149+ 8A60 46 45 4E 43 >                db      "FENCE"
 149+ 8A64 45          >
 149+ 8A65             >len_NFA         defl    $ - temp_NFA
 149+ 8A65             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 149+ 8A60             >
 149+ 8A60 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 149+ 8A61 46 45 4E 43 >                db      "FENCE"               // name string in 7-bit ascii, but
 149+ 8A65 45          >
 149+ 8A66             >                org     $-1                 // alter last byte of Name just above to set
 149+ 8A65 C5          >                db      {b $} | END_BIT     // msb as name end
 149+ 8A66             >
 149+ 8A66 52 8A       >                dw      last_NFA            // Link to previous definition Name
 149+ 8A68             >FENCE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 149+ 8A68 CD 92 89    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 149+ 8A6B             >
 149+ 8A6B             >
 149+ 8A6B             >                endif           ; ok        // for other definitions it "points" the correct handler
 149+ 8A6B             >                // Use of "; ok" to suppress "warning[fwdref]"
 149+ 8A6B             >
 149+ 8A6B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 149+ 8A6B 10          >                db      16
 150+ 8A6C                              User_Def DP         , "DP"        , 18 // Dictionary Pointer
 150+ 8A6C             >                New_Def  DP, "DP", User_Ptr, is_normal
 150+ 8A6C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 150+ 8A6C             >
 150+ 8A6C             >                // dummy db directives used to calculate length of namec
 150+ 8A6C 44 50       >                db      "DP"
 150+ 8A6E             >len_NFA         defl    $ - temp_NFA
 150+ 8A6E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 150+ 8A6C             >
 150+ 8A6C 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 150+ 8A6D 44 50       >                db      "DP"               // name string in 7-bit ascii, but
 150+ 8A6F             >                org     $-1                 // alter last byte of Name just above to set
 150+ 8A6E D0          >                db      {b $} | END_BIT     // msb as name end
 150+ 8A6F             >
 150+ 8A6F 60 8A       >                dw      last_NFA            // Link to previous definition Name
 150+ 8A71             >DP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 150+ 8A71 CD 92 89    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 150+ 8A74             >
 150+ 8A74             >
 150+ 8A74             >                endif           ; ok        // for other definitions it "points" the correct handler
 150+ 8A74             >                // Use of "; ok" to suppress "warning[fwdref]"
 150+ 8A74             >
 150+ 8A74             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 150+ 8A74 12          >                db      18
 151+ 8A75                              User_Def VOC_LINK   , "VOC-LINK"  , 20 // pointer to the latest vocabulary
 151+ 8A75             >                New_Def  VOC_LINK, "VOC-LINK", User_Ptr, is_normal
 151+ 8A75             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 151+ 8A75             >
 151+ 8A75             >                // dummy db directives used to calculate length of namec
 151+ 8A75 56 4F 43 2D >                db      "VOC-LINK"
 151+ 8A79 4C 49 4E 4B >
 151+ 8A7D             >len_NFA         defl    $ - temp_NFA
 151+ 8A7D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 151+ 8A75             >
 151+ 8A75 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 151+ 8A76 56 4F 43 2D >                db      "VOC-LINK"               // name string in 7-bit ascii, but
 151+ 8A7A 4C 49 4E 4B >
 151+ 8A7E             >                org     $-1                 // alter last byte of Name just above to set
 151+ 8A7D CB          >                db      {b $} | END_BIT     // msb as name end
 151+ 8A7E             >
 151+ 8A7E 6C 8A       >                dw      last_NFA            // Link to previous definition Name
 151+ 8A80             >VOC_LINK:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 151+ 8A80 CD 92 89    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 151+ 8A83             >
 151+ 8A83             >
 151+ 8A83             >                endif           ; ok        // for other definitions it "points" the correct handler
 151+ 8A83             >                // Use of "; ok" to suppress "warning[fwdref]"
 151+ 8A83             >
 151+ 8A83             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 151+ 8A83 14          >                db      20
 152+ 8A84                              User_Def FIRST      , "FIRST"     , 22 // address of first buffer
 152+ 8A84             >                New_Def  FIRST, "FIRST", User_Ptr, is_normal
 152+ 8A84             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 152+ 8A84             >
 152+ 8A84             >                // dummy db directives used to calculate length of namec
 152+ 8A84 46 49 52 53 >                db      "FIRST"
 152+ 8A88 54          >
 152+ 8A89             >len_NFA         defl    $ - temp_NFA
 152+ 8A89             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 152+ 8A84             >
 152+ 8A84 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 152+ 8A85 46 49 52 53 >                db      "FIRST"               // name string in 7-bit ascii, but
 152+ 8A89 54          >
 152+ 8A8A             >                org     $-1                 // alter last byte of Name just above to set
 152+ 8A89 D4          >                db      {b $} | END_BIT     // msb as name end
 152+ 8A8A             >
 152+ 8A8A 75 8A       >                dw      last_NFA            // Link to previous definition Name
 152+ 8A8C             >FIRST:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 152+ 8A8C CD 92 89    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 152+ 8A8F             >
 152+ 8A8F             >
 152+ 8A8F             >                endif           ; ok        // for other definitions it "points" the correct handler
 152+ 8A8F             >                // Use of "; ok" to suppress "warning[fwdref]"
 152+ 8A8F             >
 152+ 8A8F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 152+ 8A8F 16          >                db      22
 153+ 8A90                              User_Def LIMIT      , "LIMIT"     , 24 // address of last buffer
 153+ 8A90             >                New_Def  LIMIT, "LIMIT", User_Ptr, is_normal
 153+ 8A90             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 153+ 8A90             >
 153+ 8A90             >                // dummy db directives used to calculate length of namec
 153+ 8A90 4C 49 4D 49 >                db      "LIMIT"
 153+ 8A94 54          >
 153+ 8A95             >len_NFA         defl    $ - temp_NFA
 153+ 8A95             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 153+ 8A90             >
 153+ 8A90 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 153+ 8A91 4C 49 4D 49 >                db      "LIMIT"               // name string in 7-bit ascii, but
 153+ 8A95 54          >
 153+ 8A96             >                org     $-1                 // alter last byte of Name just above to set
 153+ 8A95 D4          >                db      {b $} | END_BIT     // msb as name end
 153+ 8A96             >
 153+ 8A96 84 8A       >                dw      last_NFA            // Link to previous definition Name
 153+ 8A98             >LIMIT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 153+ 8A98 CD 92 89    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 153+ 8A9B             >
 153+ 8A9B             >
 153+ 8A9B             >                endif           ; ok        // for other definitions it "points" the correct handler
 153+ 8A9B             >                // Use of "; ok" to suppress "warning[fwdref]"
 153+ 8A9B             >
 153+ 8A9B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 153+ 8A9B 18          >                db      24
 154+ 8A9C                              User_Def EXP        , "EXP"       , 26 // keeps the exponent in number conversion
 154+ 8A9C             >                New_Def  EXP, "EXP", User_Ptr, is_normal
 154+ 8A9C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 154+ 8A9C             >
 154+ 8A9C             >                // dummy db directives used to calculate length of namec
 154+ 8A9C 45 58 50    >                db      "EXP"
 154+ 8A9F             >len_NFA         defl    $ - temp_NFA
 154+ 8A9F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 154+ 8A9C             >
 154+ 8A9C 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 154+ 8A9D 45 58 50    >                db      "EXP"               // name string in 7-bit ascii, but
 154+ 8AA0             >                org     $-1                 // alter last byte of Name just above to set
 154+ 8A9F D0          >                db      {b $} | END_BIT     // msb as name end
 154+ 8AA0             >
 154+ 8AA0 90 8A       >                dw      last_NFA            // Link to previous definition Name
 154+ 8AA2             >EXP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 154+ 8AA2 CD 92 89    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 154+ 8AA5             >
 154+ 8AA5             >
 154+ 8AA5             >                endif           ; ok        // for other definitions it "points" the correct handler
 154+ 8AA5             >                // Use of "; ok" to suppress "warning[fwdref]"
 154+ 8AA5             >
 154+ 8AA5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 154+ 8AA5 1A          >                db      26
 155+ 8AA6                              User_Def NMODE      , "NMODE"     , 28 // number mode: 0 integer, 1 floating point
 155+ 8AA6             >                New_Def  NMODE, "NMODE", User_Ptr, is_normal
 155+ 8AA6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 155+ 8AA6             >
 155+ 8AA6             >                // dummy db directives used to calculate length of namec
 155+ 8AA6 4E 4D 4F 44 >                db      "NMODE"
 155+ 8AAA 45          >
 155+ 8AAB             >len_NFA         defl    $ - temp_NFA
 155+ 8AAB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 155+ 8AA6             >
 155+ 8AA6 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 155+ 8AA7 4E 4D 4F 44 >                db      "NMODE"               // name string in 7-bit ascii, but
 155+ 8AAB 45          >
 155+ 8AAC             >                org     $-1                 // alter last byte of Name just above to set
 155+ 8AAB C5          >                db      {b $} | END_BIT     // msb as name end
 155+ 8AAC             >
 155+ 8AAC 9C 8A       >                dw      last_NFA            // Link to previous definition Name
 155+ 8AAE             >NMODE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 155+ 8AAE CD 92 89    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 155+ 8AB1             >
 155+ 8AB1             >
 155+ 8AB1             >                endif           ; ok        // for other definitions it "points" the correct handler
 155+ 8AB1             >                // Use of "; ok" to suppress "warning[fwdref]"
 155+ 8AB1             >
 155+ 8AB1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 155+ 8AB1 1C          >                db      28
 156+ 8AB2                              User_Def BLK        , "BLK"       , 30 // block number to be interpreted. 0 for terminal
 156+ 8AB2             >                New_Def  BLK, "BLK", User_Ptr, is_normal
 156+ 8AB2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 156+ 8AB2             >
 156+ 8AB2             >                // dummy db directives used to calculate length of namec
 156+ 8AB2 42 4C 4B    >                db      "BLK"
 156+ 8AB5             >len_NFA         defl    $ - temp_NFA
 156+ 8AB5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 156+ 8AB2             >
 156+ 8AB2 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 156+ 8AB3 42 4C 4B    >                db      "BLK"               // name string in 7-bit ascii, but
 156+ 8AB6             >                org     $-1                 // alter last byte of Name just above to set
 156+ 8AB5 CB          >                db      {b $} | END_BIT     // msb as name end
 156+ 8AB6             >
 156+ 8AB6 A6 8A       >                dw      last_NFA            // Link to previous definition Name
 156+ 8AB8             >BLK:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 156+ 8AB8 CD 92 89    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 156+ 8ABB             >
 156+ 8ABB             >
 156+ 8ABB             >                endif           ; ok        // for other definitions it "points" the correct handler
 156+ 8ABB             >                // Use of "; ok" to suppress "warning[fwdref]"
 156+ 8ABB             >
 156+ 8ABB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 156+ 8ABB 1E          >                db      30
 157+ 8ABC                              User_Def TO_IN      , ">IN"       , 32 // incremented when consuming input buffer
 157+ 8ABC             >                New_Def  TO_IN, ">IN", User_Ptr, is_normal
 157+ 8ABC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 157+ 8ABC             >
 157+ 8ABC             >                // dummy db directives used to calculate length of namec
 157+ 8ABC 3E 49 4E    >                db      ">IN"
 157+ 8ABF             >len_NFA         defl    $ - temp_NFA
 157+ 8ABF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 157+ 8ABC             >
 157+ 8ABC 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 157+ 8ABD 3E 49 4E    >                db      ">IN"               // name string in 7-bit ascii, but
 157+ 8AC0             >                org     $-1                 // alter last byte of Name just above to set
 157+ 8ABF CE          >                db      {b $} | END_BIT     // msb as name end
 157+ 8AC0             >
 157+ 8AC0 B2 8A       >                dw      last_NFA            // Link to previous definition Name
 157+ 8AC2             >TO_IN:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 157+ 8AC2 CD 92 89    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 157+ 8AC5             >
 157+ 8AC5             >
 157+ 8AC5             >                endif           ; ok        // for other definitions it "points" the correct handler
 157+ 8AC5             >                // Use of "; ok" to suppress "warning[fwdref]"
 157+ 8AC5             >
 157+ 8AC5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 157+ 8AC5 20          >                db      32
 158+ 8AC6                              User_Def OUT        , "OUT"       , 34 // incremented when sending to output
 158+ 8AC6             >                New_Def  OUT, "OUT", User_Ptr, is_normal
 158+ 8AC6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 158+ 8AC6             >
 158+ 8AC6             >                // dummy db directives used to calculate length of namec
 158+ 8AC6 4F 55 54    >                db      "OUT"
 158+ 8AC9             >len_NFA         defl    $ - temp_NFA
 158+ 8AC9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 158+ 8AC6             >
 158+ 8AC6 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 158+ 8AC7 4F 55 54    >                db      "OUT"               // name string in 7-bit ascii, but
 158+ 8ACA             >                org     $-1                 // alter last byte of Name just above to set
 158+ 8AC9 D4          >                db      {b $} | END_BIT     // msb as name end
 158+ 8ACA             >
 158+ 8ACA BC 8A       >                dw      last_NFA            // Link to previous definition Name
 158+ 8ACC             >OUT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 158+ 8ACC CD 92 89    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 158+ 8ACF             >
 158+ 8ACF             >
 158+ 8ACF             >                endif           ; ok        // for other definitions it "points" the correct handler
 158+ 8ACF             >                // Use of "; ok" to suppress "warning[fwdref]"
 158+ 8ACF             >
 158+ 8ACF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 158+ 8ACF 22          >                db      34
 159+ 8AD0                              User_Def SCR        , "SCR"       , 36 // latest screen retreieved by LIST
 159+ 8AD0             >                New_Def  SCR, "SCR", User_Ptr, is_normal
 159+ 8AD0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 159+ 8AD0             >
 159+ 8AD0             >                // dummy db directives used to calculate length of namec
 159+ 8AD0 53 43 52    >                db      "SCR"
 159+ 8AD3             >len_NFA         defl    $ - temp_NFA
 159+ 8AD3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 159+ 8AD0             >
 159+ 8AD0 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 159+ 8AD1 53 43 52    >                db      "SCR"               // name string in 7-bit ascii, but
 159+ 8AD4             >                org     $-1                 // alter last byte of Name just above to set
 159+ 8AD3 D2          >                db      {b $} | END_BIT     // msb as name end
 159+ 8AD4             >
 159+ 8AD4 C6 8A       >                dw      last_NFA            // Link to previous definition Name
 159+ 8AD6             >SCR:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 159+ 8AD6 CD 92 89    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 159+ 8AD9             >
 159+ 8AD9             >
 159+ 8AD9             >                endif           ; ok        // for other definitions it "points" the correct handler
 159+ 8AD9             >                // Use of "; ok" to suppress "warning[fwdref]"
 159+ 8AD9             >
 159+ 8AD9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 159+ 8AD9 24          >                db      36
 160+ 8ADA                              User_Def OFFSET     , "OFFSET"    , 38 //
 160+ 8ADA             >                New_Def  OFFSET, "OFFSET", User_Ptr, is_normal
 160+ 8ADA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 160+ 8ADA             >
 160+ 8ADA             >                // dummy db directives used to calculate length of namec
 160+ 8ADA 4F 46 46 53 >                db      "OFFSET"
 160+ 8ADE 45 54       >
 160+ 8AE0             >len_NFA         defl    $ - temp_NFA
 160+ 8AE0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 160+ 8ADA             >
 160+ 8ADA 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 160+ 8ADB 4F 46 46 53 >                db      "OFFSET"               // name string in 7-bit ascii, but
 160+ 8ADF 45 54       >
 160+ 8AE1             >                org     $-1                 // alter last byte of Name just above to set
 160+ 8AE0 D4          >                db      {b $} | END_BIT     // msb as name end
 160+ 8AE1             >
 160+ 8AE1 D0 8A       >                dw      last_NFA            // Link to previous definition Name
 160+ 8AE3             >OFFSET:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 160+ 8AE3 CD 92 89    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 160+ 8AE6             >
 160+ 8AE6             >
 160+ 8AE6             >                endif           ; ok        // for other definitions it "points" the correct handler
 160+ 8AE6             >                // Use of "; ok" to suppress "warning[fwdref]"
 160+ 8AE6             >
 160+ 8AE6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 160+ 8AE6 26          >                db      38
 161+ 8AE7                              User_Def CONTEXT    , "CONTEXT"   , 40 // pointer to the vocabulary where search begins
 161+ 8AE7             >                New_Def  CONTEXT, "CONTEXT", User_Ptr, is_normal
 161+ 8AE7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 161+ 8AE7             >
 161+ 8AE7             >                // dummy db directives used to calculate length of namec
 161+ 8AE7 43 4F 4E 54 >                db      "CONTEXT"
 161+ 8AEB 45 58 54    >
 161+ 8AEE             >len_NFA         defl    $ - temp_NFA
 161+ 8AEE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 161+ 8AE7             >
 161+ 8AE7 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 161+ 8AE8 43 4F 4E 54 >                db      "CONTEXT"               // name string in 7-bit ascii, but
 161+ 8AEC 45 58 54    >
 161+ 8AEF             >                org     $-1                 // alter last byte of Name just above to set
 161+ 8AEE D4          >                db      {b $} | END_BIT     // msb as name end
 161+ 8AEF             >
 161+ 8AEF DA 8A       >                dw      last_NFA            // Link to previous definition Name
 161+ 8AF1             >CONTEXT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 161+ 8AF1 CD 92 89    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 161+ 8AF4             >
 161+ 8AF4             >
 161+ 8AF4             >                endif           ; ok        // for other definitions it "points" the correct handler
 161+ 8AF4             >                // Use of "; ok" to suppress "warning[fwdref]"
 161+ 8AF4             >
 161+ 8AF4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 161+ 8AF4 28          >                db      40
 162+ 8AF5                              User_Def CURRENT    , "CURRENT"   , 42 // pointer to the vocabulary where search continues
 162+ 8AF5             >                New_Def  CURRENT, "CURRENT", User_Ptr, is_normal
 162+ 8AF5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 162+ 8AF5             >
 162+ 8AF5             >                // dummy db directives used to calculate length of namec
 162+ 8AF5 43 55 52 52 >                db      "CURRENT"
 162+ 8AF9 45 4E 54    >
 162+ 8AFC             >len_NFA         defl    $ - temp_NFA
 162+ 8AFC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 162+ 8AF5             >
 162+ 8AF5 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 162+ 8AF6 43 55 52 52 >                db      "CURRENT"               // name string in 7-bit ascii, but
 162+ 8AFA 45 4E 54    >
 162+ 8AFD             >                org     $-1                 // alter last byte of Name just above to set
 162+ 8AFC D4          >                db      {b $} | END_BIT     // msb as name end
 162+ 8AFD             >
 162+ 8AFD E7 8A       >                dw      last_NFA            // Link to previous definition Name
 162+ 8AFF             >CURRENT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 162+ 8AFF CD 92 89    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 162+ 8B02             >
 162+ 8B02             >
 162+ 8B02             >                endif           ; ok        // for other definitions it "points" the correct handler
 162+ 8B02             >                // Use of "; ok" to suppress "warning[fwdref]"
 162+ 8B02             >
 162+ 8B02             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 162+ 8B02 2A          >                db      42
 163+ 8B03                              User_Def STATE      , "STATE"     , 44 // compilation status. 0 interpreting.
 163+ 8B03             >                New_Def  STATE, "STATE", User_Ptr, is_normal
 163+ 8B03             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 163+ 8B03             >
 163+ 8B03             >                // dummy db directives used to calculate length of namec
 163+ 8B03 53 54 41 54 >                db      "STATE"
 163+ 8B07 45          >
 163+ 8B08             >len_NFA         defl    $ - temp_NFA
 163+ 8B08             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 163+ 8B03             >
 163+ 8B03 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 163+ 8B04 53 54 41 54 >                db      "STATE"               // name string in 7-bit ascii, but
 163+ 8B08 45          >
 163+ 8B09             >                org     $-1                 // alter last byte of Name just above to set
 163+ 8B08 C5          >                db      {b $} | END_BIT     // msb as name end
 163+ 8B09             >
 163+ 8B09 F5 8A       >                dw      last_NFA            // Link to previous definition Name
 163+ 8B0B             >STATE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 163+ 8B0B CD 92 89    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 163+ 8B0E             >
 163+ 8B0E             >
 163+ 8B0E             >                endif           ; ok        // for other definitions it "points" the correct handler
 163+ 8B0E             >                // Use of "; ok" to suppress "warning[fwdref]"
 163+ 8B0E             >
 163+ 8B0E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 163+ 8B0E 2C          >                db      44
 164+ 8B0F                              User_Def BASE       , "BASE"      , 46 //
 164+ 8B0F             >                New_Def  BASE, "BASE", User_Ptr, is_normal
 164+ 8B0F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 164+ 8B0F             >
 164+ 8B0F             >                // dummy db directives used to calculate length of namec
 164+ 8B0F 42 41 53 45 >                db      "BASE"
 164+ 8B13             >len_NFA         defl    $ - temp_NFA
 164+ 8B13             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 164+ 8B0F             >
 164+ 8B0F 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 164+ 8B10 42 41 53 45 >                db      "BASE"               // name string in 7-bit ascii, but
 164+ 8B14             >                org     $-1                 // alter last byte of Name just above to set
 164+ 8B13 C5          >                db      {b $} | END_BIT     // msb as name end
 164+ 8B14             >
 164+ 8B14 03 8B       >                dw      last_NFA            // Link to previous definition Name
 164+ 8B16             >BASE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 164+ 8B16 CD 92 89    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 164+ 8B19             >
 164+ 8B19             >
 164+ 8B19             >                endif           ; ok        // for other definitions it "points" the correct handler
 164+ 8B19             >                // Use of "; ok" to suppress "warning[fwdref]"
 164+ 8B19             >
 164+ 8B19             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 164+ 8B19 2E          >                db      46
 165+ 8B1A                              User_Def DPL        , "DPL"       , 48 // number of digits after decimal point in conversion
 165+ 8B1A             >                New_Def  DPL, "DPL", User_Ptr, is_normal
 165+ 8B1A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 165+ 8B1A             >
 165+ 8B1A             >                // dummy db directives used to calculate length of namec
 165+ 8B1A 44 50 4C    >                db      "DPL"
 165+ 8B1D             >len_NFA         defl    $ - temp_NFA
 165+ 8B1D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 165+ 8B1A             >
 165+ 8B1A 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 165+ 8B1B 44 50 4C    >                db      "DPL"               // name string in 7-bit ascii, but
 165+ 8B1E             >                org     $-1                 // alter last byte of Name just above to set
 165+ 8B1D CC          >                db      {b $} | END_BIT     // msb as name end
 165+ 8B1E             >
 165+ 8B1E 0F 8B       >                dw      last_NFA            // Link to previous definition Name
 165+ 8B20             >DPL:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 165+ 8B20 CD 92 89    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 165+ 8B23             >
 165+ 8B23             >
 165+ 8B23             >                endif           ; ok        // for other definitions it "points" the correct handler
 165+ 8B23             >                // Use of "; ok" to suppress "warning[fwdref]"
 165+ 8B23             >
 165+ 8B23             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 165+ 8B23 30          >                db      48
 166+ 8B24                              User_Def FLD        , "FLD"       , 50 // output field width
 166+ 8B24             >                New_Def  FLD, "FLD", User_Ptr, is_normal
 166+ 8B24             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 166+ 8B24             >
 166+ 8B24             >                // dummy db directives used to calculate length of namec
 166+ 8B24 46 4C 44    >                db      "FLD"
 166+ 8B27             >len_NFA         defl    $ - temp_NFA
 166+ 8B27             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 166+ 8B24             >
 166+ 8B24 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 166+ 8B25 46 4C 44    >                db      "FLD"               // name string in 7-bit ascii, but
 166+ 8B28             >                org     $-1                 // alter last byte of Name just above to set
 166+ 8B27 C4          >                db      {b $} | END_BIT     // msb as name end
 166+ 8B28             >
 166+ 8B28 1A 8B       >                dw      last_NFA            // Link to previous definition Name
 166+ 8B2A             >FLD:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 166+ 8B2A CD 92 89    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 166+ 8B2D             >
 166+ 8B2D             >
 166+ 8B2D             >                endif           ; ok        // for other definitions it "points" the correct handler
 166+ 8B2D             >                // Use of "; ok" to suppress "warning[fwdref]"
 166+ 8B2D             >
 166+ 8B2D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 166+ 8B2D 32          >                db      50
 167+ 8B2E                              User_Def CSP        , "CSP"       , 52 // used to temporary store Stack-Pointer value
 167+ 8B2E             >                New_Def  CSP, "CSP", User_Ptr, is_normal
 167+ 8B2E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 167+ 8B2E             >
 167+ 8B2E             >                // dummy db directives used to calculate length of namec
 167+ 8B2E 43 53 50    >                db      "CSP"
 167+ 8B31             >len_NFA         defl    $ - temp_NFA
 167+ 8B31             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 167+ 8B2E             >
 167+ 8B2E 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 167+ 8B2F 43 53 50    >                db      "CSP"               // name string in 7-bit ascii, but
 167+ 8B32             >                org     $-1                 // alter last byte of Name just above to set
 167+ 8B31 D0          >                db      {b $} | END_BIT     // msb as name end
 167+ 8B32             >
 167+ 8B32 24 8B       >                dw      last_NFA            // Link to previous definition Name
 167+ 8B34             >CSP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 167+ 8B34 CD 92 89    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 167+ 8B37             >
 167+ 8B37             >
 167+ 8B37             >                endif           ; ok        // for other definitions it "points" the correct handler
 167+ 8B37             >                // Use of "; ok" to suppress "warning[fwdref]"
 167+ 8B37             >
 167+ 8B37             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 167+ 8B37 34          >                db      52
 168+ 8B38                              User_Def RSHARP     , "R#"        , 54 // location of editing cursor
 168+ 8B38             >                New_Def  RSHARP, "R#", User_Ptr, is_normal
 168+ 8B38             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 168+ 8B38             >
 168+ 8B38             >                // dummy db directives used to calculate length of namec
 168+ 8B38 52 23       >                db      "R#"
 168+ 8B3A             >len_NFA         defl    $ - temp_NFA
 168+ 8B3A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 168+ 8B38             >
 168+ 8B38 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 168+ 8B39 52 23       >                db      "R#"               // name string in 7-bit ascii, but
 168+ 8B3B             >                org     $-1                 // alter last byte of Name just above to set
 168+ 8B3A A3          >                db      {b $} | END_BIT     // msb as name end
 168+ 8B3B             >
 168+ 8B3B 2E 8B       >                dw      last_NFA            // Link to previous definition Name
 168+ 8B3D             >RSHARP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 168+ 8B3D CD 92 89    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 168+ 8B40             >
 168+ 8B40             >
 168+ 8B40             >                endif           ; ok        // for other definitions it "points" the correct handler
 168+ 8B40             >                // Use of "; ok" to suppress "warning[fwdref]"
 168+ 8B40             >
 168+ 8B40             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 168+ 8B40 36          >                db      54
 169+ 8B41                              User_Def HLD        , "HLD"       , 56 // last character during a number conversion output
 169+ 8B41             >                New_Def  HLD, "HLD", User_Ptr, is_normal
 169+ 8B41             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 169+ 8B41             >
 169+ 8B41             >                // dummy db directives used to calculate length of namec
 169+ 8B41 48 4C 44    >                db      "HLD"
 169+ 8B44             >len_NFA         defl    $ - temp_NFA
 169+ 8B44             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 169+ 8B41             >
 169+ 8B41 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 169+ 8B42 48 4C 44    >                db      "HLD"               // name string in 7-bit ascii, but
 169+ 8B45             >                org     $-1                 // alter last byte of Name just above to set
 169+ 8B44 C4          >                db      {b $} | END_BIT     // msb as name end
 169+ 8B45             >
 169+ 8B45 38 8B       >                dw      last_NFA            // Link to previous definition Name
 169+ 8B47             >HLD:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 169+ 8B47 CD 92 89    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 169+ 8B4A             >
 169+ 8B4A             >
 169+ 8B4A             >                endif           ; ok        // for other definitions it "points" the correct handler
 169+ 8B4A             >                // Use of "; ok" to suppress "warning[fwdref]"
 169+ 8B4A             >
 169+ 8B4A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 169+ 8B4A 38          >                db      56
 170+ 8B4B                              User_Def USE        , "USE"       , 58 // address of last used block
 170+ 8B4B             >                New_Def  USE, "USE", User_Ptr, is_normal
 170+ 8B4B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 170+ 8B4B             >
 170+ 8B4B             >                // dummy db directives used to calculate length of namec
 170+ 8B4B 55 53 45    >                db      "USE"
 170+ 8B4E             >len_NFA         defl    $ - temp_NFA
 170+ 8B4E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 170+ 8B4B             >
 170+ 8B4B 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 170+ 8B4C 55 53 45    >                db      "USE"               // name string in 7-bit ascii, but
 170+ 8B4F             >                org     $-1                 // alter last byte of Name just above to set
 170+ 8B4E C5          >                db      {b $} | END_BIT     // msb as name end
 170+ 8B4F             >
 170+ 8B4F 41 8B       >                dw      last_NFA            // Link to previous definition Name
 170+ 8B51             >USE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 170+ 8B51 CD 92 89    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 170+ 8B54             >
 170+ 8B54             >
 170+ 8B54             >                endif           ; ok        // for other definitions it "points" the correct handler
 170+ 8B54             >                // Use of "; ok" to suppress "warning[fwdref]"
 170+ 8B54             >
 170+ 8B54             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 170+ 8B54 3A          >                db      58
 171+ 8B55                              User_Def PREV       , "PREV"      , 60 // address of previous used block
 171+ 8B55             >                New_Def  PREV, "PREV", User_Ptr, is_normal
 171+ 8B55             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 171+ 8B55             >
 171+ 8B55             >                // dummy db directives used to calculate length of namec
 171+ 8B55 50 52 45 56 >                db      "PREV"
 171+ 8B59             >len_NFA         defl    $ - temp_NFA
 171+ 8B59             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 171+ 8B55             >
 171+ 8B55 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 171+ 8B56 50 52 45 56 >                db      "PREV"               // name string in 7-bit ascii, but
 171+ 8B5A             >                org     $-1                 // alter last byte of Name just above to set
 171+ 8B59 D6          >                db      {b $} | END_BIT     // msb as name end
 171+ 8B5A             >
 171+ 8B5A 4B 8B       >                dw      last_NFA            // Link to previous definition Name
 171+ 8B5C             >PREV:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 171+ 8B5C CD 92 89    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 171+ 8B5F             >
 171+ 8B5F             >
 171+ 8B5F             >                endif           ; ok        // for other definitions it "points" the correct handler
 171+ 8B5F             >                // Use of "; ok" to suppress "warning[fwdref]"
 171+ 8B5F             >
 171+ 8B5F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 171+ 8B5F 3C          >                db      60
 172+ 8B60                              User_Def LP         , "LP"        , 62 // line printer (not used)
 172+ 8B60             >                New_Def  LP, "LP", User_Ptr, is_normal
 172+ 8B60             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 172+ 8B60             >
 172+ 8B60             >                // dummy db directives used to calculate length of namec
 172+ 8B60 4C 50       >                db      "LP"
 172+ 8B62             >len_NFA         defl    $ - temp_NFA
 172+ 8B62             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 172+ 8B60             >
 172+ 8B60 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 172+ 8B61 4C 50       >                db      "LP"               // name string in 7-bit ascii, but
 172+ 8B63             >                org     $-1                 // alter last byte of Name just above to set
 172+ 8B62 D0          >                db      {b $} | END_BIT     // msb as name end
 172+ 8B63             >
 172+ 8B63 55 8B       >                dw      last_NFA            // Link to previous definition Name
 172+ 8B65             >LP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 172+ 8B65 CD 92 89    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 172+ 8B68             >
 172+ 8B68             >
 172+ 8B68             >                endif           ; ok        // for other definitions it "points" the correct handler
 172+ 8B68             >                // Use of "; ok" to suppress "warning[fwdref]"
 172+ 8B68             >
 172+ 8B68             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 172+ 8B68 3E          >                db      62
 173+ 8B69                              User_Def PLACE      , "PLACE"     , 64 // number of digits after decimal point in output
 173+ 8B69             >                New_Def  PLACE, "PLACE", User_Ptr, is_normal
 173+ 8B69             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 173+ 8B69             >
 173+ 8B69             >                // dummy db directives used to calculate length of namec
 173+ 8B69 50 4C 41 43 >                db      "PLACE"
 173+ 8B6D 45          >
 173+ 8B6E             >len_NFA         defl    $ - temp_NFA
 173+ 8B6E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 173+ 8B69             >
 173+ 8B69 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 173+ 8B6A 50 4C 41 43 >                db      "PLACE"               // name string in 7-bit ascii, but
 173+ 8B6E 45          >
 173+ 8B6F             >                org     $-1                 // alter last byte of Name just above to set
 173+ 8B6E C5          >                db      {b $} | END_BIT     // msb as name end
 173+ 8B6F             >
 173+ 8B6F 60 8B       >                dw      last_NFA            // Link to previous definition Name
 173+ 8B71             >PLACE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 173+ 8B71 CD 92 89    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 173+ 8B74             >
 173+ 8B74             >
 173+ 8B74             >                endif           ; ok        // for other definitions it "points" the correct handler
 173+ 8B74             >                // Use of "; ok" to suppress "warning[fwdref]"
 173+ 8B74             >
 173+ 8B74             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 173+ 8B74 40          >                db      64
 174+ 8B75                              User_Def SOURCE_ID  , "SOURCE-ID" , 66 // data-stream number in INCLUDE and LOAD-
 174+ 8B75             >                New_Def  SOURCE_ID, "SOURCE-ID", User_Ptr, is_normal
 174+ 8B75             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 174+ 8B75             >
 174+ 8B75             >                // dummy db directives used to calculate length of namec
 174+ 8B75 53 4F 55 52 >                db      "SOURCE-ID"
 174+ 8B79 43 45 2D 49 >
 174+ 8B7D 44          >
 174+ 8B7E             >len_NFA         defl    $ - temp_NFA
 174+ 8B7E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 174+ 8B75             >
 174+ 8B75 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 174+ 8B76 53 4F 55 52 >                db      "SOURCE-ID"               // name string in 7-bit ascii, but
 174+ 8B7A 43 45 2D 49 >
 174+ 8B7E 44          >
 174+ 8B7F             >                org     $-1                 // alter last byte of Name just above to set
 174+ 8B7E C4          >                db      {b $} | END_BIT     // msb as name end
 174+ 8B7F             >
 174+ 8B7F 69 8B       >                dw      last_NFA            // Link to previous definition Name
 174+ 8B81             >SOURCE_ID:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 174+ 8B81 CD 92 89    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 174+ 8B84             >
 174+ 8B84             >
 174+ 8B84             >                endif           ; ok        // for other definitions it "points" the correct handler
 174+ 8B84             >                // Use of "; ok" to suppress "warning[fwdref]"
 174+ 8B84             >
 174+ 8B84             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 174+ 8B84 42          >                db      66
 175+ 8B85                              User_Def SPAN       , "SPAN"      , 68 // number of character of last EXPECT
 175+ 8B85             >                New_Def  SPAN, "SPAN", User_Ptr, is_normal
 175+ 8B85             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 175+ 8B85             >
 175+ 8B85             >                // dummy db directives used to calculate length of namec
 175+ 8B85 53 50 41 4E >                db      "SPAN"
 175+ 8B89             >len_NFA         defl    $ - temp_NFA
 175+ 8B89             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 175+ 8B85             >
 175+ 8B85 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 175+ 8B86 53 50 41 4E >                db      "SPAN"               // name string in 7-bit ascii, but
 175+ 8B8A             >                org     $-1                 // alter last byte of Name just above to set
 175+ 8B89 CE          >                db      {b $} | END_BIT     // msb as name end
 175+ 8B8A             >
 175+ 8B8A 75 8B       >                dw      last_NFA            // Link to previous definition Name
 175+ 8B8C             >SPAN:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 175+ 8B8C CD 92 89    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 175+ 8B8F             >
 175+ 8B8F             >
 175+ 8B8F             >                endif           ; ok        // for other definitions it "points" the correct handler
 175+ 8B8F             >                // Use of "; ok" to suppress "warning[fwdref]"
 175+ 8B8F             >
 175+ 8B8F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 175+ 8B8F 44          >                db      68
 176+ 8B90                              User_Def HP         , "HP"        , 70 // heap-pointer address
 176+ 8B90             >                New_Def  HP, "HP", User_Ptr, is_normal
 176+ 8B90             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 176+ 8B90             >
 176+ 8B90             >                // dummy db directives used to calculate length of namec
 176+ 8B90 48 50       >                db      "HP"
 176+ 8B92             >len_NFA         defl    $ - temp_NFA
 176+ 8B92             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 176+ 8B90             >
 176+ 8B90 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 176+ 8B91 48 50       >                db      "HP"               // name string in 7-bit ascii, but
 176+ 8B93             >                org     $-1                 // alter last byte of Name just above to set
 176+ 8B92 D0          >                db      {b $} | END_BIT     // msb as name end
 176+ 8B93             >
 176+ 8B93 85 8B       >                dw      last_NFA            // Link to previous definition Name
 176+ 8B95             >HP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 176+ 8B95 CD 92 89    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 176+ 8B98             >
 176+ 8B98             >
 176+ 8B98             >                endif           ; ok        // for other definitions it "points" the correct handler
 176+ 8B98             >                // Use of "; ok" to suppress "warning[fwdref]"
 176+ 8B98             >
 176+ 8B98             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 176+ 8B98 46          >                db      70
 177+ 8B99
 178+ 8B99              //  ______________________________________________________________________
 179+ 8B99              //
 180+ 8B99              // here         -- a
 181+ 8B99                              Colon_Def HERE, "HERE", is_normal
 181+ 8B99             >                New_Def  HERE, "HERE", Enter_Ptr, is_normal ; ok
 181+ 8B99             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 181+ 8B99             >
 181+ 8B99             >                // dummy db directives used to calculate length of namec
 181+ 8B99 48 45 52 45 >                db      "HERE"
 181+ 8B9D             >len_NFA         defl    $ - temp_NFA
 181+ 8B9D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 181+ 8B99             >
 181+ 8B99 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 181+ 8B9A 48 45 52 45 >                db      "HERE"               // name string in 7-bit ascii, but
 181+ 8B9E             >                org     $-1                 // alter last byte of Name just above to set
 181+ 8B9D C5          >                db      {b $} | END_BIT     // msb as name end
 181+ 8B9E             >
 181+ 8B9E 90 8B       >                dw      last_NFA            // Link to previous definition Name
 181+ 8BA0             >HERE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 181+ 8BA0 CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 181+ 8BA3             >
 181+ 8BA3             >
 181+ 8BA3             >                endif           ; ok        // for other definitions it "points" the correct handler
 181+ 8BA3             >                // Use of "; ok" to suppress "warning[fwdref]"
 181+ 8BA3             >
 181+ 8BA3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 182+ 8BA3 71 8A 4C 88                  dw      DP, FETCH               // dp @
 183+ 8BA7 43 86                        dw      EXIT                    // ;
 184+ 8BA9
 185+ 8BA9              //  ______________________________________________________________________
 186+ 8BA9              //
 187+ 8BA9              // allot        n --
 188+ 8BA9                              Colon_Def ALLOT, "ALLOT", is_normal
 188+ 8BA9             >                New_Def  ALLOT, "ALLOT", Enter_Ptr, is_normal ; ok
 188+ 8BA9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 188+ 8BA9             >
 188+ 8BA9             >                // dummy db directives used to calculate length of namec
 188+ 8BA9 41 4C 4C 4F >                db      "ALLOT"
 188+ 8BAD 54          >
 188+ 8BAE             >len_NFA         defl    $ - temp_NFA
 188+ 8BAE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 188+ 8BA9             >
 188+ 8BA9 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 188+ 8BAA 41 4C 4C 4F >                db      "ALLOT"               // name string in 7-bit ascii, but
 188+ 8BAE 54          >
 188+ 8BAF             >                org     $-1                 // alter last byte of Name just above to set
 188+ 8BAE D4          >                db      {b $} | END_BIT     // msb as name end
 188+ 8BAF             >
 188+ 8BAF 99 8B       >                dw      last_NFA            // Link to previous definition Name
 188+ 8BB1             >ALLOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 188+ 8BB1 CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 188+ 8BB4             >
 188+ 8BB4             >
 188+ 8BB4             >                endif           ; ok        // for other definitions it "points" the correct handler
 188+ 8BB4             >                // Use of "; ok" to suppress "warning[fwdref]"
 188+ 8BB4             >
 188+ 8BB4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 189+ 8BB4 71 8A 2D 88                  dw      DP,  PLUSSTORE          // dp +!
 190+ 8BB8 43 86                        dw      EXIT                    // ;
 191+ 8BBA
 192+ 8BBA              //  ______________________________________________________________________
 193+ 8BBA              //
 194+ 8BBA              // comma        n --
 195+ 8BBA                              Colon_Def COMMA, ",", is_normal
 195+ 8BBA             >                New_Def  COMMA, ",", Enter_Ptr, is_normal ; ok
 195+ 8BBA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 195+ 8BBA             >
 195+ 8BBA             >                // dummy db directives used to calculate length of namec
 195+ 8BBA 2C          >                db      ","
 195+ 8BBB             >len_NFA         defl    $ - temp_NFA
 195+ 8BBB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 195+ 8BBA             >
 195+ 8BBA 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 195+ 8BBB 2C          >                db      ","               // name string in 7-bit ascii, but
 195+ 8BBC             >                org     $-1                 // alter last byte of Name just above to set
 195+ 8BBB AC          >                db      {b $} | END_BIT     // msb as name end
 195+ 8BBC             >
 195+ 8BBC A9 8B       >                dw      last_NFA            // Link to previous definition Name
 195+ 8BBE             >COMMA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 195+ 8BBE CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 195+ 8BC1             >
 195+ 8BC1             >
 195+ 8BC1             >                endif           ; ok        // for other definitions it "points" the correct handler
 195+ 8BC1             >                // Use of "; ok" to suppress "warning[fwdref]"
 195+ 8BC1             >
 195+ 8BC1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 196+ 8BC1 A0 8B 57 88                  dw      HERE, STORE             // here !
 197+ 8BC5 B3 89 B1 8B                  dw      TWO, ALLOT              // 2 allot
 198+ 8BC9 43 86                        dw      EXIT                    // ;
 199+ 8BCB
 200+ 8BCB              //  ______________________________________________________________________
 201+ 8BCB              //
 202+ 8BCB              // ccomma       c --
 203+ 8BCB                              Colon_Def CCOMMA, "C,", is_normal
 203+ 8BCB             >                New_Def  CCOMMA, "C,", Enter_Ptr, is_normal ; ok
 203+ 8BCB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 203+ 8BCB             >
 203+ 8BCB             >                // dummy db directives used to calculate length of namec
 203+ 8BCB 43 2C       >                db      "C,"
 203+ 8BCD             >len_NFA         defl    $ - temp_NFA
 203+ 8BCD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 203+ 8BCB             >
 203+ 8BCB 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 203+ 8BCC 43 2C       >                db      "C,"               // name string in 7-bit ascii, but
 203+ 8BCE             >                org     $-1                 // alter last byte of Name just above to set
 203+ 8BCD AC          >                db      {b $} | END_BIT     // msb as name end
 203+ 8BCE             >
 203+ 8BCE BA 8B       >                dw      last_NFA            // Link to previous definition Name
 203+ 8BD0             >CCOMMA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 203+ 8BD0 CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 203+ 8BD3             >
 203+ 8BD3             >
 203+ 8BD3             >                endif           ; ok        // for other definitions it "points" the correct handler
 203+ 8BD3             >                // Use of "; ok" to suppress "warning[fwdref]"
 203+ 8BD3             >
 203+ 8BD3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 204+ 8BD3 A0 8B 6F 88                  dw      HERE, CSTORE            // here c!
 205+ 8BD7 AA 89 B1 8B                  dw      ONE, ALLOT              // 1 allot
 206+ 8BDB 43 86                        dw      EXIT                    // ;
 207+ 8BDD
 208+ 8BDD              //  ______________________________________________________________________
 209+ 8BDD              //
 210+ 8BDD              // s->d         n -- d
 211+ 8BDD              // converts a single precision integer in a double precision
 212+ 8BDD                              New_Def S_TO_D, "S->D", is_code, is_normal
 212+ 8BDD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 212+ 8BDD             >
 212+ 8BDD             >                // dummy db directives used to calculate length of namec
 212+ 8BDD 53 2D 3E 44 >                db      "S->D"
 212+ 8BE1             >len_NFA         defl    $ - temp_NFA
 212+ 8BE1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 212+ 8BDD             >
 212+ 8BDD 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 212+ 8BDE 53 2D 3E 44 >                db      "S->D"               // name string in 7-bit ascii, but
 212+ 8BE2             >                org     $-1                 // alter last byte of Name just above to set
 212+ 8BE1 C4          >                db      {b $} | END_BIT     // msb as name end
 212+ 8BE2             >
 212+ 8BE2 CB 8B       >                dw      last_NFA            // Link to previous definition Name
 212+ 8BE4             >S_TO_D:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 212+ 8BE4 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 212+ 8BE4 ~           >
 212+ 8BE4 ~           >
 212+ 8BE4             >                endif           ; ok        // for other definitions it "points" the correct handler
 212+ 8BE4             >                // Use of "; ok" to suppress "warning[fwdref]"
 212+ 8BE4             >
 212+ 8BE4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 213+ 8BE4 D1                           pop     de
 214+ 8BE5 21 00 00                     ld      hl, 0
 215+ 8BE8 7A                           ld      a, d
 216+ 8BE9 E6 80                        and     $80
 217+ 8BEB 28 01                        jr      z, S_to_D_Skip
 218+ 8BED 2B                           dec     hl                  // $FFFF
 219+ 8BEE              S_to_D_Skip:
 220+ 8BEE D5                           push    de
 221+ 8BEF E5                           push    hl
 222+ 8BF0                              next
 222+ 8BF0 DD E9       >                jp      (ix)
 223+ 8BF2
 224+ 8BF2              //  ______________________________________________________________________
 225+ 8BF2              //
 226+ 8BF2              // -            n1 n2 -- n3
 227+ 8BF2              // subtraction
 228+ 8BF2                              New_Def SUBTRACT, "-", is_code, is_normal
 228+ 8BF2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 228+ 8BF2             >
 228+ 8BF2             >                // dummy db directives used to calculate length of namec
 228+ 8BF2 2D          >                db      "-"
 228+ 8BF3             >len_NFA         defl    $ - temp_NFA
 228+ 8BF3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 228+ 8BF2             >
 228+ 8BF2 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 228+ 8BF3 2D          >                db      "-"               // name string in 7-bit ascii, but
 228+ 8BF4             >                org     $-1                 // alter last byte of Name just above to set
 228+ 8BF3 AD          >                db      {b $} | END_BIT     // msb as name end
 228+ 8BF4             >
 228+ 8BF4 DD 8B       >                dw      last_NFA            // Link to previous definition Name
 228+ 8BF6             >SUBTRACT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 228+ 8BF6 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 228+ 8BF6 ~           >
 228+ 8BF6 ~           >
 228+ 8BF6             >                endif           ; ok        // for other definitions it "points" the correct handler
 228+ 8BF6             >                // Use of "; ok" to suppress "warning[fwdref]"
 228+ 8BF6             >
 228+ 8BF6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 229+ 8BF6 D1                           pop     de
 230+ 8BF7 E1                           pop     hl
 231+ 8BF8 A7                           and     a
 232+ 8BF9 ED 52                        sbc     hl, de
 233+ 8BFB
 234+ 8BFB                              psh1
 234+ 8BFB E5          >                push    hl
 234+ 8BFC DD E9       >                jp      (ix)
 235+ 8BFE
 236+ 8BFE              //  ______________________________________________________________________
 237+ 8BFE              //
 238+ 8BFE              // =            n1 n2 -- n3
 239+ 8BFE              // equals
 240+ 8BFE                              Colon_Def EQUALS, "=", is_normal
 240+ 8BFE             >                New_Def  EQUALS, "=", Enter_Ptr, is_normal ; ok
 240+ 8BFE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 240+ 8BFE             >
 240+ 8BFE             >                // dummy db directives used to calculate length of namec
 240+ 8BFE 3D          >                db      "="
 240+ 8BFF             >len_NFA         defl    $ - temp_NFA
 240+ 8BFF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 240+ 8BFE             >
 240+ 8BFE 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 240+ 8BFF 3D          >                db      "="               // name string in 7-bit ascii, but
 240+ 8C00             >                org     $-1                 // alter last byte of Name just above to set
 240+ 8BFF BD          >                db      {b $} | END_BIT     // msb as name end
 240+ 8C00             >
 240+ 8C00 F2 8B       >                dw      last_NFA            // Link to previous definition Name
 240+ 8C02             >EQUALS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 240+ 8C02 CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 240+ 8C05             >
 240+ 8C05             >
 240+ 8C05             >                endif           ; ok        // for other definitions it "points" the correct handler
 240+ 8C05             >                // Use of "; ok" to suppress "warning[fwdref]"
 240+ 8C05             >
 240+ 8C05             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 241+ 8C05 F6 8B 93 86                  dw      SUBTRACT, ZEQUAL        // - 0=
 242+ 8C09 43 86                        dw      EXIT                    // ;
 243+ 8C0B
 244+ 8C0B              //  ______________________________________________________________________
 245+ 8C0B              //
 246+ 8C0B              // u<           u1 u2 -- u3
 247+ 8C0B              // unsigned less-than
 248+ 8C0B                              New_Def ULESS, "U<", is_code, is_normal
 248+ 8C0B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 248+ 8C0B             >
 248+ 8C0B             >                // dummy db directives used to calculate length of namec
 248+ 8C0B 55 3C       >                db      "U<"
 248+ 8C0D             >len_NFA         defl    $ - temp_NFA
 248+ 8C0D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 248+ 8C0B             >
 248+ 8C0B 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 248+ 8C0C 55 3C       >                db      "U<"               // name string in 7-bit ascii, but
 248+ 8C0E             >                org     $-1                 // alter last byte of Name just above to set
 248+ 8C0D BC          >                db      {b $} | END_BIT     // msb as name end
 248+ 8C0E             >
 248+ 8C0E FE 8B       >                dw      last_NFA            // Link to previous definition Name
 248+ 8C10             >ULESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 248+ 8C10 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 248+ 8C10 ~           >
 248+ 8C10 ~           >
 248+ 8C10             >                endif           ; ok        // for other definitions it "points" the correct handler
 248+ 8C10             >                // Use of "; ok" to suppress "warning[fwdref]"
 248+ 8C10             >
 248+ 8C10             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 249+ 8C10 D1                           pop     de
 250+ 8C11 E1                           pop     hl
 251+ 8C12 A7                           and     a
 252+ 8C13 ED 52                        sbc     hl, de
 253+ 8C15 21 01 00                     ld      hl, 1
 254+ 8C18 38 01                        jr      c, ULess_Skip
 255+ 8C1A 2D                               dec     l
 256+ 8C1B              ULess_Skip:
 257+ 8C1B
 258+ 8C1B                              psh1
 258+ 8C1B E5          >                push    hl
 258+ 8C1C DD E9       >                jp      (ix)
 259+ 8C1E
 260+ 8C1E              //  ______________________________________________________________________
 261+ 8C1E              //
 262+ 8C1E              // <           n1 n2 -- n3
 263+ 8C1E              // less-than
 264+ 8C1E                              New_Def LESS, "<", is_code, is_normal
 264+ 8C1E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 264+ 8C1E             >
 264+ 8C1E             >                // dummy db directives used to calculate length of namec
 264+ 8C1E 3C          >                db      "<"
 264+ 8C1F             >len_NFA         defl    $ - temp_NFA
 264+ 8C1F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 264+ 8C1E             >
 264+ 8C1E 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 264+ 8C1F 3C          >                db      "<"               // name string in 7-bit ascii, but
 264+ 8C20             >                org     $-1                 // alter last byte of Name just above to set
 264+ 8C1F BC          >                db      {b $} | END_BIT     // msb as name end
 264+ 8C20             >
 264+ 8C20 0B 8C       >                dw      last_NFA            // Link to previous definition Name
 264+ 8C22             >LESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 264+ 8C22 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 264+ 8C22 ~           >
 264+ 8C22 ~           >
 264+ 8C22             >                endif           ; ok        // for other definitions it "points" the correct handler
 264+ 8C22             >                // Use of "; ok" to suppress "warning[fwdref]"
 264+ 8C22             >
 264+ 8C22             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 265+ 8C22 D1                           pop     de
 266+ 8C23 E1                           pop     hl
 267+ 8C24 7C                           ld      a, h
 268+ 8C25 EE 80                        xor     $80
 269+ 8C27 67                           ld      h, a
 270+ 8C28 7A                           ld      a, d
 271+ 8C29 EE 80                        xor     $80
 272+ 8C2B 57                           ld      d, a
 273+ 8C2C A7                           and     a
 274+ 8C2D ED 52                        sbc     hl, de
 275+ 8C2F 21 01 00                     ld      hl, 1
 276+ 8C32 38 01                        jr      c, Less_Skip
 277+ 8C34 2D                               dec     l
 278+ 8C35              Less_Skip:
 279+ 8C35
 280+ 8C35                              psh1
 280+ 8C35 E5          >                push    hl
 280+ 8C36 DD E9       >                jp      (ix)
 281+ 8C38
 282+ 8C38              //  ______________________________________________________________________
 283+ 8C38              //
 284+ 8C38              // >            n1 n2 -- n3
 285+ 8C38              // greater than
 286+ 8C38                              Colon_Def GREATER, ">", is_normal
 286+ 8C38             >                New_Def  GREATER, ">", Enter_Ptr, is_normal ; ok
 286+ 8C38             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 286+ 8C38             >
 286+ 8C38             >                // dummy db directives used to calculate length of namec
 286+ 8C38 3E          >                db      ">"
 286+ 8C39             >len_NFA         defl    $ - temp_NFA
 286+ 8C39             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 286+ 8C38             >
 286+ 8C38 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 286+ 8C39 3E          >                db      ">"               // name string in 7-bit ascii, but
 286+ 8C3A             >                org     $-1                 // alter last byte of Name just above to set
 286+ 8C39 BE          >                db      {b $} | END_BIT     // msb as name end
 286+ 8C3A             >
 286+ 8C3A 1E 8C       >                dw      last_NFA            // Link to previous definition Name
 286+ 8C3C             >GREATER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 286+ 8C3C CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 286+ 8C3F             >
 286+ 8C3F             >
 286+ 8C3F             >                endif           ; ok        // for other definitions it "points" the correct handler
 286+ 8C3F             >                // Use of "; ok" to suppress "warning[fwdref]"
 286+ 8C3F             >
 286+ 8C3F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 287+ 8C3F 91 87 22 8C                  dw      SWAP, LESS              // swap <
 288+ 8C43 43 86                        dw      EXIT                    // ;
 289+ 8C45              //  ______________________________________________________________________
 290+ 8C45              //
 291+ 8C45              // min          n1 n2 -- n3
 292+ 8C45              // minimum between n1 and n2
 293+ 8C45                              Colon_Def MIN, "MIN" , is_normal
 293+ 8C45             >                New_Def  MIN, "MIN", Enter_Ptr, is_normal ; ok
 293+ 8C45             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 293+ 8C45             >
 293+ 8C45             >                // dummy db directives used to calculate length of namec
 293+ 8C45 4D 49 4E    >                db      "MIN"
 293+ 8C48             >len_NFA         defl    $ - temp_NFA
 293+ 8C48             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 293+ 8C45             >
 293+ 8C45 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 293+ 8C46 4D 49 4E    >                db      "MIN"               // name string in 7-bit ascii, but
 293+ 8C49             >                org     $-1                 // alter last byte of Name just above to set
 293+ 8C48 CE          >                db      {b $} | END_BIT     // msb as name end
 293+ 8C49             >
 293+ 8C49 38 8C       >                dw      last_NFA            // Link to previous definition Name
 293+ 8C4B             >MIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 293+ 8C4B CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 293+ 8C4E             >
 293+ 8C4E             >
 293+ 8C4E             >                endif           ; ok        // for other definitions it "points" the correct handler
 293+ 8C4E             >                // Use of "; ok" to suppress "warning[fwdref]"
 293+ 8C4E             >
 293+ 8C4E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 294+ 8C4E FA 87                        dw      TWO_DUP                 // 2dup
 295+ 8C50 3C 8C                        dw      GREATER                 // >
 296+ 8C52 75 81                        dw      ZBRANCH
 297+ 8C54 04 00                        dw      Min_Skip - $   // if
 298+ 8C56 91 87                        dw          SWAP                //      swap
 299+ 8C58              Min_Skip:                                       // endif
 300+ 8C58 6F 87                        dw      DROP                    // drop
 301+ 8C5A 43 86                        dw      EXIT                    // ;
 302+ 8C5C
 303+ 8C5C              //  ______________________________________________________________________
 304+ 8C5C              //
 305+ 8C5C              // max          n1 n2 -- n3
 306+ 8C5C              // maximum between n1 and n2
 307+ 8C5C                              Colon_Def MAX, "MAX", is_normal
 307+ 8C5C             >                New_Def  MAX, "MAX", Enter_Ptr, is_normal ; ok
 307+ 8C5C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 307+ 8C5C             >
 307+ 8C5C             >                // dummy db directives used to calculate length of namec
 307+ 8C5C 4D 41 58    >                db      "MAX"
 307+ 8C5F             >len_NFA         defl    $ - temp_NFA
 307+ 8C5F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 307+ 8C5C             >
 307+ 8C5C 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 307+ 8C5D 4D 41 58    >                db      "MAX"               // name string in 7-bit ascii, but
 307+ 8C60             >                org     $-1                 // alter last byte of Name just above to set
 307+ 8C5F D8          >                db      {b $} | END_BIT     // msb as name end
 307+ 8C60             >
 307+ 8C60 45 8C       >                dw      last_NFA            // Link to previous definition Name
 307+ 8C62             >MAX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 307+ 8C62 CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 307+ 8C65             >
 307+ 8C65             >
 307+ 8C65             >                endif           ; ok        // for other definitions it "points" the correct handler
 307+ 8C65             >                // Use of "; ok" to suppress "warning[fwdref]"
 307+ 8C65             >
 307+ 8C65             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 308+ 8C65 FA 87                        dw      TWO_DUP                 // 2dup
 309+ 8C67 22 8C                        dw      LESS                    // <
 310+ 8C69 75 81                        dw      ZBRANCH
 311+ 8C6B 04 00                        dw      Max_Skip - $   // if
 312+ 8C6D 91 87                        dw          SWAP                //      swap
 313+ 8C6F              Max_Skip:                                       // endif
 314+ 8C6F 6F 87                        dw      DROP                    // drop
 315+ 8C71 43 86                        dw      EXIT                    // ;
 316+ 8C73
 317+ 8C73              //  ______________________________________________________________________
 318+ 8C73              //
 319+ 8C73              // -dup         n -- 0 | n n
 320+ 8C73              // duplicate if not zero
 321+ 8C73                              New_Def LDUP, "-DUP", is_code, is_normal
 321+ 8C73             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 321+ 8C73             >
 321+ 8C73             >                // dummy db directives used to calculate length of namec
 321+ 8C73 2D 44 55 50 >                db      "-DUP"
 321+ 8C77             >len_NFA         defl    $ - temp_NFA
 321+ 8C77             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 321+ 8C73             >
 321+ 8C73 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 321+ 8C74 2D 44 55 50 >                db      "-DUP"               // name string in 7-bit ascii, but
 321+ 8C78             >                org     $-1                 // alter last byte of Name just above to set
 321+ 8C77 D0          >                db      {b $} | END_BIT     // msb as name end
 321+ 8C78             >
 321+ 8C78 5C 8C       >                dw      last_NFA            // Link to previous definition Name
 321+ 8C7A             >LDUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 321+ 8C7A ~           >                call    runcode ; ok        // for primitive definitions  actual code
 321+ 8C7A ~           >
 321+ 8C7A ~           >
 321+ 8C7A             >                endif           ; ok        // for other definitions it "points" the correct handler
 321+ 8C7A             >                // Use of "; ok" to suppress "warning[fwdref]"
 321+ 8C7A             >
 321+ 8C7A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 322+ 8C7A              QDup_Ptr:
 323+ 8C7A E1                           pop     hl
 324+ 8C7B 7C                           ld      a, h
 325+ 8C7C B5                           or      l
 326+ 8C7D 28 01                        jr      z, QDup_Skip
 327+ 8C7F E5                               push    hl
 328+ 8C80              QDup_Skip:
 329+ 8C80                              psh1
 329+ 8C80 E5          >                push    hl
 329+ 8C81 DD E9       >                jp      (ix)
 330+ 8C83
 331+ 8C83              //  ______________________________________________________________________
 332+ 8C83              //
 333+ 8C83              // ?dup         n -- 0 | n n
 334+ 8C83              // duplicate if not zero
 335+ 8C83                              New_Def QDUP, "?DUP", QDup_Ptr, is_normal
 335+ 8C83             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 335+ 8C83             >
 335+ 8C83             >                // dummy db directives used to calculate length of namec
 335+ 8C83 3F 44 55 50 >                db      "?DUP"
 335+ 8C87             >len_NFA         defl    $ - temp_NFA
 335+ 8C87             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 335+ 8C83             >
 335+ 8C83 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 335+ 8C84 3F 44 55 50 >                db      "?DUP"               // name string in 7-bit ascii, but
 335+ 8C88             >                org     $-1                 // alter last byte of Name just above to set
 335+ 8C87 D0          >                db      {b $} | END_BIT     // msb as name end
 335+ 8C88             >
 335+ 8C88 73 8C       >                dw      last_NFA            // Link to previous definition Name
 335+ 8C8A             >QDUP:          if QDup_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 335+ 8C8A CD 7A 8C    >                call    QDup_Ptr ; ok        // for primitive definitions  actual code
 335+ 8C8D             >
 335+ 8C8D             >
 335+ 8C8D             >                endif           ; ok        // for other definitions it "points" the correct handler
 335+ 8C8D             >                // Use of "; ok" to suppress "warning[fwdref]"
 335+ 8C8D             >
 335+ 8C8D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 336+ 8C8D
 337+ 8C8D              //  ______________________________________________________________________
 338+ 8C8D              //
 339+ 8C8D              // emit         c --
 340+ 8C8D                              Colon_Def EMIT, "EMIT", is_normal
 340+ 8C8D             >                New_Def  EMIT, "EMIT", Enter_Ptr, is_normal ; ok
 340+ 8C8D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 340+ 8C8D             >
 340+ 8C8D             >                // dummy db directives used to calculate length of namec
 340+ 8C8D 45 4D 49 54 >                db      "EMIT"
 340+ 8C91             >len_NFA         defl    $ - temp_NFA
 340+ 8C91             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 340+ 8C8D             >
 340+ 8C8D 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 340+ 8C8E 45 4D 49 54 >                db      "EMIT"               // name string in 7-bit ascii, but
 340+ 8C92             >                org     $-1                 // alter last byte of Name just above to set
 340+ 8C91 D4          >                db      {b $} | END_BIT     // msb as name end
 340+ 8C92             >
 340+ 8C92 83 8C       >                dw      last_NFA            // Link to previous definition Name
 340+ 8C94             >EMIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 340+ 8C94 CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 340+ 8C97             >
 340+ 8C97             >
 340+ 8C97             >                endif           ; ok        // for other definitions it "points" the correct handler
 340+ 8C97             >                // Use of "; ok" to suppress "warning[fwdref]"
 340+ 8C97             >
 340+ 8C97             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 341+ 8C97 73 83                        dw      C_EMIT                      // (?emit)
 342+ 8C99 7A 8C                        dw      LDUP                        // ?dup
 343+ 8C9B                                                                  // if
 344+ 8C9B 75 81                        dw      ZBRANCH
 345+ 8C9D 0A 00                        dw      Emit_Skip - $
 346+ 8C9F 41 83                        dw          EMITC                   //      emitc
 347+ 8CA1 AA 89                        dw          ONE                     //      1
 348+ 8CA3 CC 8A 2D 88                  dw          OUT, PLUSSTORE        //      out +!
 349+ 8CA7              Emit_Skip:                                          // endif
 350+ 8CA7 43 86                        dw      EXIT                        // ;
 351+ 8CA9
 352+ 8CA9              //  ______________________________________________________________________
 353+ 8CA9              //
 354+ 8CA9              // space        --
 355+ 8CA9                              Colon_Def SPACE, "SPACE", is_normal
 355+ 8CA9             >                New_Def  SPACE, "SPACE", Enter_Ptr, is_normal ; ok
 355+ 8CA9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 355+ 8CA9             >
 355+ 8CA9             >                // dummy db directives used to calculate length of namec
 355+ 8CA9 53 50 41 43 >                db      "SPACE"
 355+ 8CAD 45          >
 355+ 8CAE             >len_NFA         defl    $ - temp_NFA
 355+ 8CAE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 355+ 8CA9             >
 355+ 8CA9 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 355+ 8CAA 53 50 41 43 >                db      "SPACE"               // name string in 7-bit ascii, but
 355+ 8CAE 45          >
 355+ 8CAF             >                org     $-1                 // alter last byte of Name just above to set
 355+ 8CAE C5          >                db      {b $} | END_BIT     // msb as name end
 355+ 8CAF             >
 355+ 8CAF 8D 8C       >                dw      last_NFA            // Link to previous definition Name
 355+ 8CB1             >SPACE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 355+ 8CB1 CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 355+ 8CB4             >
 355+ 8CB4             >
 355+ 8CB4             >                endif           ; ok        // for other definitions it "points" the correct handler
 355+ 8CB4             >                // Use of "; ok" to suppress "warning[fwdref]"
 355+ 8CB4             >
 355+ 8CB4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 356+ 8CB4 D0 89 94 8C                  dw      BL, EMIT                // bl emit
 357+ 8CB8 43 86                        dw      EXIT                    // ;
 358+ 8CBA
 359+ 8CBA              //  ______________________________________________________________________
 360+ 8CBA              //
 361+ 8CBA              // traverse     a n -- a
 362+ 8CBA              // A dictionary entry is structured as follows
 363+ 8CBA              // NFA: +0   one byte of word-length (n<32) | some flags (immediate, smudge) | $80
 364+ 8CBA              //      +1   word name, last character is toggled with $80
 365+ 8CBA              // LFA: +1+n link to NFA ofprevious  dictionary entry.
 366+ 8CBA              // CFA: +3+n routine address. Colon definitions here have a CALL aa
 367+ 8CBA              // PFA: +6+n "is_code", definitions have no PFA. // +5
 368+ 8CBA              //
 369+ 8CBA                              Colon_Def TRAVERSE, "TRAVERSE", is_normal
 369+ 8CBA             >                New_Def  TRAVERSE, "TRAVERSE", Enter_Ptr, is_normal ; ok
 369+ 8CBA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 369+ 8CBA             >
 369+ 8CBA             >                // dummy db directives used to calculate length of namec
 369+ 8CBA 54 52 41 56 >                db      "TRAVERSE"
 369+ 8CBE 45 52 53 45 >
 369+ 8CC2             >len_NFA         defl    $ - temp_NFA
 369+ 8CC2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 369+ 8CBA             >
 369+ 8CBA 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 369+ 8CBB 54 52 41 56 >                db      "TRAVERSE"               // name string in 7-bit ascii, but
 369+ 8CBF 45 52 53 45 >
 369+ 8CC3             >                org     $-1                 // alter last byte of Name just above to set
 369+ 8CC2 C5          >                db      {b $} | END_BIT     // msb as name end
 369+ 8CC3             >
 369+ 8CC3 A9 8C       >                dw      last_NFA            // Link to previous definition Name
 369+ 8CC5             >TRAVERSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 369+ 8CC5 CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 369+ 8CC8             >
 369+ 8CC8             >
 369+ 8CC8             >                endif           ; ok        // for other definitions it "points" the correct handler
 369+ 8CC8             >                // Use of "; ok" to suppress "warning[fwdref]"
 369+ 8CC8             >
 369+ 8CC8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 370+ 8CC8 91 87                        dw      SWAP                    // swap
 371+ 8CCA              Traverse_Begin:                                 // begin
 372+ 8CCA 61 87 C8 86                  dw          OVER, PLUS          //      over +
 373+ 8CCE 41 81 7F 00                  dw          LIT, 127            //      127
 374+ 8CD2 61 87 63 88                  dw          OVER, CFETCH        //      over @
 375+ 8CD6 22 8C                        dw          LESS                //      <
 376+ 8CD8                                                              // until
 377+ 8CD8 75 81                        dw      ZBRANCH
 378+ 8CDA F0 FF                        dw      Traverse_Begin - $
 379+ 8CDC 91 87 6F 87                  dw      SWAP, DROP              //  swap drop
 380+ 8CE0 43 86                        dw      EXIT                    //  ;
 381+ 8CE2
 382+ 8CE2              //  ______________________________________________________________________
 383+ 8CE2              //
 384+ 8CE2              // latest       -- nfa
 385+ 8CE2                              Colon_Def LATEST, "LATEST", is_normal
 385+ 8CE2             >                New_Def  LATEST, "LATEST", Enter_Ptr, is_normal ; ok
 385+ 8CE2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 385+ 8CE2             >
 385+ 8CE2             >                // dummy db directives used to calculate length of namec
 385+ 8CE2 4C 41 54 45 >                db      "LATEST"
 385+ 8CE6 53 54       >
 385+ 8CE8             >len_NFA         defl    $ - temp_NFA
 385+ 8CE8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 385+ 8CE2             >
 385+ 8CE2 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 385+ 8CE3 4C 41 54 45 >                db      "LATEST"               // name string in 7-bit ascii, but
 385+ 8CE7 53 54       >
 385+ 8CE9             >                org     $-1                 // alter last byte of Name just above to set
 385+ 8CE8 D4          >                db      {b $} | END_BIT     // msb as name end
 385+ 8CE9             >
 385+ 8CE9 BA 8C       >                dw      last_NFA            // Link to previous definition Name
 385+ 8CEB             >LATEST:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 385+ 8CEB CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 385+ 8CEE             >
 385+ 8CEE             >
 385+ 8CEE             >                endif           ; ok        // for other definitions it "points" the correct handler
 385+ 8CEE             >                // Use of "; ok" to suppress "warning[fwdref]"
 385+ 8CEE             >
 385+ 8CEE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 386+ 8CEE FF 8A                        dw      CURRENT                 // current
 387+ 8CF0 4C 88 4C 88                  dw      FETCH, FETCH            // @ @
 388+ 8CF4 43 86                        dw      EXIT                    // ;
 389+ 8CF6
 390+ 8CF6              //  ______________________________________________________________________
 391+ 8CF6              //
 392+ 8CF6              // lfa          pfa -- lfa
 393+ 8CF6                              Colon_Def LFA, "LFA", is_normal
 393+ 8CF6             >                New_Def  LFA, "LFA", Enter_Ptr, is_normal ; ok
 393+ 8CF6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 393+ 8CF6             >
 393+ 8CF6             >                // dummy db directives used to calculate length of namec
 393+ 8CF6 4C 46 41    >                db      "LFA"
 393+ 8CF9             >len_NFA         defl    $ - temp_NFA
 393+ 8CF9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 393+ 8CF6             >
 393+ 8CF6 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 393+ 8CF7 4C 46 41    >                db      "LFA"               // name string in 7-bit ascii, but
 393+ 8CFA             >                org     $-1                 // alter last byte of Name just above to set
 393+ 8CF9 C1          >                db      {b $} | END_BIT     // msb as name end
 393+ 8CFA             >
 393+ 8CFA E2 8C       >                dw      last_NFA            // Link to previous definition Name
 393+ 8CFC             >LFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 393+ 8CFC CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 393+ 8CFF             >
 393+ 8CFF             >
 393+ 8CFF             >                endif           ; ok        // for other definitions it "points" the correct handler
 393+ 8CFF             >                // Use of "; ok" to suppress "warning[fwdref]"
 393+ 8CFF             >
 393+ 8CFF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 394+ 8CFF 41 81 05 00                  dw      LIT, 5                  // cell- --> 5
 395+ 8D03 F6 8B                        dw      SUBTRACT                // cell- --> -
 396+ 8D05 43 86                        dw      EXIT                    // ;
 397+ 8D07
 398+ 8D07              //  ______________________________________________________________________
 399+ 8D07              //
 400+ 8D07              // cfa          pfa -- cfa
 401+ 8D07                              Colon_Def CFA, "CFA", is_normal
 401+ 8D07             >                New_Def  CFA, "CFA", Enter_Ptr, is_normal ; ok
 401+ 8D07             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 401+ 8D07             >
 401+ 8D07             >                // dummy db directives used to calculate length of namec
 401+ 8D07 43 46 41    >                db      "CFA"
 401+ 8D0A             >len_NFA         defl    $ - temp_NFA
 401+ 8D0A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 401+ 8D07             >
 401+ 8D07 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 401+ 8D08 43 46 41    >                db      "CFA"               // name string in 7-bit ascii, but
 401+ 8D0B             >                org     $-1                 // alter last byte of Name just above to set
 401+ 8D0A C1          >                db      {b $} | END_BIT     // msb as name end
 401+ 8D0B             >
 401+ 8D0B F6 8C       >                dw      last_NFA            // Link to previous definition Name
 401+ 8D0D             >CFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 401+ 8D0D CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 401+ 8D10             >
 401+ 8D10             >
 401+ 8D10             >                endif           ; ok        // for other definitions it "points" the correct handler
 401+ 8D10             >                // Use of "; ok" to suppress "warning[fwdref]"
 401+ 8D10             >
 401+ 8D10             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 402+ 8D10 24 87                        dw      CELL_MINUS              // cell-
 403+ 8D12 43 86                        dw      EXIT                    // ;
 404+ 8D14
 405+ 8D14              //  ______________________________________________________________________
 406+ 8D14              //
 407+ 8D14              // nfa          pfa -- nfa
 408+ 8D14                              Colon_Def NFA, "NFA", is_normal
 408+ 8D14             >                New_Def  NFA, "NFA", Enter_Ptr, is_normal ; ok
 408+ 8D14             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 408+ 8D14             >
 408+ 8D14             >                // dummy db directives used to calculate length of namec
 408+ 8D14 4E 46 41    >                db      "NFA"
 408+ 8D17             >len_NFA         defl    $ - temp_NFA
 408+ 8D17             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 408+ 8D14             >
 408+ 8D14 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 408+ 8D15 4E 46 41    >                db      "NFA"               // name string in 7-bit ascii, but
 408+ 8D18             >                org     $-1                 // alter last byte of Name just above to set
 408+ 8D17 C1          >                db      {b $} | END_BIT     // msb as name end
 408+ 8D18             >
 408+ 8D18 07 8D       >                dw      last_NFA            // Link to previous definition Name
 408+ 8D1A             >NFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 408+ 8D1A CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 408+ 8D1D             >
 408+ 8D1D             >
 408+ 8D1D             >                endif           ; ok        // for other definitions it "points" the correct handler
 408+ 8D1D             >                // Use of "; ok" to suppress "warning[fwdref]"
 408+ 8D1D             >
 408+ 8D1D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 409+ 8D1D 41 81 06 00                  dw      LIT, 6                  // 5 --> 6
 410+ 8D21 F6 8B                        dw      SUBTRACT                // -
 411+ 8D23 C6 89                        dw      NEG_ONE                 // -1
 412+ 8D25 C5 8C                        dw      TRAVERSE                // traverse
 413+ 8D27 43 86                        dw      EXIT                    // ;
 414+ 8D29
 415+ 8D29              //  ______________________________________________________________________
 416+ 8D29              //
 417+ 8D29              // pfa          nfa -- pfa
 418+ 8D29                              Colon_Def PFA, "PFA", is_normal
 418+ 8D29             >                New_Def  PFA, "PFA", Enter_Ptr, is_normal ; ok
 418+ 8D29             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 418+ 8D29             >
 418+ 8D29             >                // dummy db directives used to calculate length of namec
 418+ 8D29 50 46 41    >                db      "PFA"
 418+ 8D2C             >len_NFA         defl    $ - temp_NFA
 418+ 8D2C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 418+ 8D29             >
 418+ 8D29 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 418+ 8D2A 50 46 41    >                db      "PFA"               // name string in 7-bit ascii, but
 418+ 8D2D             >                org     $-1                 // alter last byte of Name just above to set
 418+ 8D2C C1          >                db      {b $} | END_BIT     // msb as name end
 418+ 8D2D             >
 418+ 8D2D 14 8D       >                dw      last_NFA            // Link to previous definition Name
 418+ 8D2F             >PFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 418+ 8D2F CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 418+ 8D32             >
 418+ 8D32             >
 418+ 8D32             >                endif           ; ok        // for other definitions it "points" the correct handler
 418+ 8D32             >                // Use of "; ok" to suppress "warning[fwdref]"
 418+ 8D32             >
 418+ 8D32             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 419+ 8D32 AA 89                        dw      ONE                     // 1
 420+ 8D34 C5 8C                        dw      TRAVERSE                // traverse
 421+ 8D36 41 81 06 00                  dw      LIT, 6                  // 5 --> 6
 422+ 8D3A C8 86                        dw      PLUS                    // +
 423+ 8D3C 43 86                        dw      EXIT                    // ;
 424+ 8D3E
 425+ 8D3E              //  ______________________________________________________________________
 426+ 8D3E              //
 427+ 8D3E              // >body        cfa -- pfa
 428+ 8D3E                              Colon_Def TO_BODY, ">BODY", is_normal
 428+ 8D3E             >                New_Def  TO_BODY, ">BODY", Enter_Ptr, is_normal ; ok
 428+ 8D3E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 428+ 8D3E             >
 428+ 8D3E             >                // dummy db directives used to calculate length of namec
 428+ 8D3E 3E 42 4F 44 >                db      ">BODY"
 428+ 8D42 59          >
 428+ 8D43             >len_NFA         defl    $ - temp_NFA
 428+ 8D43             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 428+ 8D3E             >
 428+ 8D3E 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 428+ 8D3F 3E 42 4F 44 >                db      ">BODY"               // name string in 7-bit ascii, but
 428+ 8D43 59          >
 428+ 8D44             >                org     $-1                 // alter last byte of Name just above to set
 428+ 8D43 D9          >                db      {b $} | END_BIT     // msb as name end
 428+ 8D44             >
 428+ 8D44 29 8D       >                dw      last_NFA            // Link to previous definition Name
 428+ 8D46             >TO_BODY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 428+ 8D46 CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 428+ 8D49             >
 428+ 8D49             >
 428+ 8D49             >                endif           ; ok        // for other definitions it "points" the correct handler
 428+ 8D49             >                // Use of "; ok" to suppress "warning[fwdref]"
 428+ 8D49             >
 428+ 8D49             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 429+ 8D49 BC 89 C8 86                  dw      THREE, PLUS             // cell+ --> 3 +
 430+ 8D4D 43 86                        dw      EXIT                    // ;
 431+ 8D4F
 432+ 8D4F              //  ______________________________________________________________________
 433+ 8D4F              //
 434+ 8D4F              // <name        cfa -- nfa
 435+ 8D4F                              Colon_Def TO_NAME, "<NAME", is_normal
 435+ 8D4F             >                New_Def  TO_NAME, "<NAME", Enter_Ptr, is_normal ; ok
 435+ 8D4F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 435+ 8D4F             >
 435+ 8D4F             >                // dummy db directives used to calculate length of namec
 435+ 8D4F 3C 4E 41 4D >                db      "<NAME"
 435+ 8D53 45          >
 435+ 8D54             >len_NFA         defl    $ - temp_NFA
 435+ 8D54             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 435+ 8D4F             >
 435+ 8D4F 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 435+ 8D50 3C 4E 41 4D >                db      "<NAME"               // name string in 7-bit ascii, but
 435+ 8D54 45          >
 435+ 8D55             >                org     $-1                 // alter last byte of Name just above to set
 435+ 8D54 C5          >                db      {b $} | END_BIT     // msb as name end
 435+ 8D55             >
 435+ 8D55 3E 8D       >                dw      last_NFA            // Link to previous definition Name
 435+ 8D57             >TO_NAME:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 435+ 8D57 CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 435+ 8D5A             >
 435+ 8D5A             >
 435+ 8D5A             >                endif           ; ok        // for other definitions it "points" the correct handler
 435+ 8D5A             >                // Use of "; ok" to suppress "warning[fwdref]"
 435+ 8D5A             >
 435+ 8D5A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 436+ 8D5A 46 8D                        dw      TO_BODY                 // >body
 437+ 8D5C 1A 8D                        dw      NFA                     // nfa
 438+ 8D5E 43 86                        dw      EXIT                    // ;
 439+ 8D60
 440+ 8D60              //  ______________________________________________________________________
 441+ 8D60              //
 442+ 8D60              // !csp         --
 443+ 8D60              // store in user variable CSP current value of SP. Used at compile-time for syntax checkng
 444+ 8D60                              Colon_Def STORE_CSP, "!CSP", is_normal
 444+ 8D60             >                New_Def  STORE_CSP, "!CSP", Enter_Ptr, is_normal ; ok
 444+ 8D60             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 444+ 8D60             >
 444+ 8D60             >                // dummy db directives used to calculate length of namec
 444+ 8D60 21 43 53 50 >                db      "!CSP"
 444+ 8D64             >len_NFA         defl    $ - temp_NFA
 444+ 8D64             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 444+ 8D60             >
 444+ 8D60 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 444+ 8D61 21 43 53 50 >                db      "!CSP"               // name string in 7-bit ascii, but
 444+ 8D65             >                org     $-1                 // alter last byte of Name just above to set
 444+ 8D64 D0          >                db      {b $} | END_BIT     // msb as name end
 444+ 8D65             >
 444+ 8D65 4F 8D       >                dw      last_NFA            // Link to previous definition Name
 444+ 8D67             >STORE_CSP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 444+ 8D67 CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 444+ 8D6A             >
 444+ 8D6A             >
 444+ 8D6A             >                endif           ; ok        // for other definitions it "points" the correct handler
 444+ 8D6A             >                // Use of "; ok" to suppress "warning[fwdref]"
 444+ 8D6A             >
 444+ 8D6A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 445+ 8D6A 15 86                        dw      SPFETCH                 // sp@
 446+ 8D6C 34 8B 57 88                  dw      CSP, STORE              // csp !
 447+ 8D70 43 86                        dw      EXIT                    // ;
 448+ 8D72
 449+ 8D72              //  ______________________________________________________________________
 450+ 8D72              //
 451+ 8D72              // ?error       f n --
 452+ 8D72              // rase error n if flag f it true
 453+ 8D72                              Colon_Def QERROR, "?ERROR", is_normal
 453+ 8D72             >                New_Def  QERROR, "?ERROR", Enter_Ptr, is_normal ; ok
 453+ 8D72             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 453+ 8D72             >
 453+ 8D72             >                // dummy db directives used to calculate length of namec
 453+ 8D72 3F 45 52 52 >                db      "?ERROR"
 453+ 8D76 4F 52       >
 453+ 8D78             >len_NFA         defl    $ - temp_NFA
 453+ 8D78             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 453+ 8D72             >
 453+ 8D72 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 453+ 8D73 3F 45 52 52 >                db      "?ERROR"               // name string in 7-bit ascii, but
 453+ 8D77 4F 52       >
 453+ 8D79             >                org     $-1                 // alter last byte of Name just above to set
 453+ 8D78 D2          >                db      {b $} | END_BIT     // msb as name end
 453+ 8D79             >
 453+ 8D79 60 8D       >                dw      last_NFA            // Link to previous definition Name
 453+ 8D7B             >QERROR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 453+ 8D7B CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 453+ 8D7E             >
 453+ 8D7E             >
 453+ 8D7E             >                endif           ; ok        // for other definitions it "points" the correct handler
 453+ 8D7E             >                // Use of "; ok" to suppress "warning[fwdref]"
 453+ 8D7E             >
 453+ 8D7E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 454+ 8D7E 91 87                        dw      SWAP                    // swap
 455+ 8D80                                                              // if
 456+ 8D80 75 81                        dw      ZBRANCH
 457+ 8D82 08 00                        dw      QError_Else - $
 458+ 8D84 C7 92                        dw          ERROR               //      error  ( is a forward-ref )
 459+ 8D86                                                              // else
 460+ 8D86 60 81                        dw      BRANCH
 461+ 8D88 04 00                        dw      QError_Endif - $
 462+ 8D8A              QError_Else:
 463+ 8D8A 6F 87                        dw          DROP                //      drop
 464+ 8D8C              QError_Endif:                                   // endif
 465+ 8D8C 43 86                        dw      EXIT                    // ;
 466+ 8D8E
 467+ 8D8E              //  ______________________________________________________________________
 468+ 8D8E              //
 469+ 8D8E              // ?comp       --
 470+ 8D8E              // raise msg #17 if not compiling
 471+ 8D8E                              Colon_Def QCOMP, "?COMP", is_normal
 471+ 8D8E             >                New_Def  QCOMP, "?COMP", Enter_Ptr, is_normal ; ok
 471+ 8D8E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 471+ 8D8E             >
 471+ 8D8E             >                // dummy db directives used to calculate length of namec
 471+ 8D8E 3F 43 4F 4D >                db      "?COMP"
 471+ 8D92 50          >
 471+ 8D93             >len_NFA         defl    $ - temp_NFA
 471+ 8D93             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 471+ 8D8E             >
 471+ 8D8E 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 471+ 8D8F 3F 43 4F 4D >                db      "?COMP"               // name string in 7-bit ascii, but
 471+ 8D93 50          >
 471+ 8D94             >                org     $-1                 // alter last byte of Name just above to set
 471+ 8D93 D0          >                db      {b $} | END_BIT     // msb as name end
 471+ 8D94             >
 471+ 8D94 72 8D       >                dw      last_NFA            // Link to previous definition Name
 471+ 8D96             >QCOMP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 471+ 8D96 CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 471+ 8D99             >
 471+ 8D99             >
 471+ 8D99             >                endif           ; ok        // for other definitions it "points" the correct handler
 471+ 8D99             >                // Use of "; ok" to suppress "warning[fwdref]"
 471+ 8D99             >
 471+ 8D99             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 472+ 8D99 0B 8B 4C 88                  dw      STATE, FETCH            // state @
 473+ 8D9D 93 86                        dw      ZEQUAL                  // 0=
 474+ 8D9F 41 81 11 00                  dw      LIT, 17                 // 17  ( can't be executed )
 475+ 8DA3 7B 8D                        dw      QERROR                  // ?error
 476+ 8DA5 43 86                        dw      EXIT                    // ;
 477+ 8DA7
 478+ 8DA7              //  ______________________________________________________________________
 479+ 8DA7              //
 480+ 8DA7              // ?exec       --
 481+ 8DA7              // raise msg #18 if compiling
 482+ 8DA7                              Colon_Def QEXEC, "?EXEC", is_normal
 482+ 8DA7             >                New_Def  QEXEC, "?EXEC", Enter_Ptr, is_normal ; ok
 482+ 8DA7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 482+ 8DA7             >
 482+ 8DA7             >                // dummy db directives used to calculate length of namec
 482+ 8DA7 3F 45 58 45 >                db      "?EXEC"
 482+ 8DAB 43          >
 482+ 8DAC             >len_NFA         defl    $ - temp_NFA
 482+ 8DAC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 482+ 8DA7             >
 482+ 8DA7 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 482+ 8DA8 3F 45 58 45 >                db      "?EXEC"               // name string in 7-bit ascii, but
 482+ 8DAC 43          >
 482+ 8DAD             >                org     $-1                 // alter last byte of Name just above to set
 482+ 8DAC C3          >                db      {b $} | END_BIT     // msb as name end
 482+ 8DAD             >
 482+ 8DAD 8E 8D       >                dw      last_NFA            // Link to previous definition Name
 482+ 8DAF             >QEXEC:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 482+ 8DAF CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 482+ 8DB2             >
 482+ 8DB2             >
 482+ 8DB2             >                endif           ; ok        // for other definitions it "points" the correct handler
 482+ 8DB2             >                // Use of "; ok" to suppress "warning[fwdref]"
 482+ 8DB2             >
 482+ 8DB2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 483+ 8DB2 0B 8B 4C 88                  dw      STATE, FETCH            // state @
 484+ 8DB6 41 81 12 00                  dw      LIT, 18                 // 18  ( can't be compiled )
 485+ 8DBA 7B 8D                        dw      QERROR                  // ?error
 486+ 8DBC 43 86                        dw      EXIT                    // ;
 487+ 8DBE
 488+ 8DBE              //  ______________________________________________________________________
 489+ 8DBE              //
 490+ 8DBE              // ?pairs       n1 n2 --
 491+ 8DBE              // raise msg #19 if n1 != n2. Compiler pushes some placeholder to stack for syntax checking
 492+ 8DBE                              Colon_Def QPAIRS, "?PAIRS", is_normal
 492+ 8DBE             >                New_Def  QPAIRS, "?PAIRS", Enter_Ptr, is_normal ; ok
 492+ 8DBE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 492+ 8DBE             >
 492+ 8DBE             >                // dummy db directives used to calculate length of namec
 492+ 8DBE 3F 50 41 49 >                db      "?PAIRS"
 492+ 8DC2 52 53       >
 492+ 8DC4             >len_NFA         defl    $ - temp_NFA
 492+ 8DC4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 492+ 8DBE             >
 492+ 8DBE 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 492+ 8DBF 3F 50 41 49 >                db      "?PAIRS"               // name string in 7-bit ascii, but
 492+ 8DC3 52 53       >
 492+ 8DC5             >                org     $-1                 // alter last byte of Name just above to set
 492+ 8DC4 D3          >                db      {b $} | END_BIT     // msb as name end
 492+ 8DC5             >
 492+ 8DC5 A7 8D       >                dw      last_NFA            // Link to previous definition Name
 492+ 8DC7             >QPAIRS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 492+ 8DC7 CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 492+ 8DCA             >
 492+ 8DCA             >
 492+ 8DCA             >                endif           ; ok        // for other definitions it "points" the correct handler
 492+ 8DCA             >                // Use of "; ok" to suppress "warning[fwdref]"
 492+ 8DCA             >
 492+ 8DCA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 493+ 8DCA F6 8B                        dw      SUBTRACT                // -
 494+ 8DCC 41 81 13 00                  dw      LIT, 19                 // 18  ( syntax error )
 495+ 8DD0 7B 8D                        dw      QERROR                  // ?error
 496+ 8DD2 43 86                        dw      EXIT                    // ;
 497+ 8DD4
 498+ 8DD4              //  ______________________________________________________________________
 499+ 8DD4              //
 500+ 8DD4              // ?csp       --
 501+ 8DD4              // raise msg #20 if surrent SP in not what previously saved in CSP.
 502+ 8DD4              // Compiler relies on that for  syntax checking of structures
 503+ 8DD4                              Colon_Def QCSP, "?CSP", is_normal
 503+ 8DD4             >                New_Def  QCSP, "?CSP", Enter_Ptr, is_normal ; ok
 503+ 8DD4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 503+ 8DD4             >
 503+ 8DD4             >                // dummy db directives used to calculate length of namec
 503+ 8DD4 3F 43 53 50 >                db      "?CSP"
 503+ 8DD8             >len_NFA         defl    $ - temp_NFA
 503+ 8DD8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 503+ 8DD4             >
 503+ 8DD4 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 503+ 8DD5 3F 43 53 50 >                db      "?CSP"               // name string in 7-bit ascii, but
 503+ 8DD9             >                org     $-1                 // alter last byte of Name just above to set
 503+ 8DD8 D0          >                db      {b $} | END_BIT     // msb as name end
 503+ 8DD9             >
 503+ 8DD9 BE 8D       >                dw      last_NFA            // Link to previous definition Name
 503+ 8DDB             >QCSP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 503+ 8DDB CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 503+ 8DDE             >
 503+ 8DDE             >
 503+ 8DDE             >                endif           ; ok        // for other definitions it "points" the correct handler
 503+ 8DDE             >                // Use of "; ok" to suppress "warning[fwdref]"
 503+ 8DDE             >
 503+ 8DDE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 504+ 8DDE 15 86                        dw      SPFETCH                 // sp@
 505+ 8DE0 34 8B 4C 88                  dw      CSP, FETCH              // csp @
 506+ 8DE4 F6 8B                        dw      SUBTRACT                // -
 507+ 8DE6 41 81 14 00                  dw      LIT, 20                 // 20  ( bad definition end )
 508+ 8DEA 7B 8D                        dw      QERROR                  // ?error
 509+ 8DEC 43 86                        dw      EXIT                    // ;
 510+ 8DEE
 511+ 8DEE              //  ______________________________________________________________________
 512+ 8DEE              //
 513+ 8DEE              // ?loading      --
 514+ 8DEE              // raise msg #22 if not loading
 515+ 8DEE                              Colon_Def QLOADING, "?LOADING", is_normal
 515+ 8DEE             >                New_Def  QLOADING, "?LOADING", Enter_Ptr, is_normal ; ok
 515+ 8DEE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 515+ 8DEE             >
 515+ 8DEE             >                // dummy db directives used to calculate length of namec
 515+ 8DEE 3F 4C 4F 41 >                db      "?LOADING"
 515+ 8DF2 44 49 4E 47 >
 515+ 8DF6             >len_NFA         defl    $ - temp_NFA
 515+ 8DF6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 515+ 8DEE             >
 515+ 8DEE 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 515+ 8DEF 3F 4C 4F 41 >                db      "?LOADING"               // name string in 7-bit ascii, but
 515+ 8DF3 44 49 4E 47 >
 515+ 8DF7             >                org     $-1                 // alter last byte of Name just above to set
 515+ 8DF6 C7          >                db      {b $} | END_BIT     // msb as name end
 515+ 8DF7             >
 515+ 8DF7 D4 8D       >                dw      last_NFA            // Link to previous definition Name
 515+ 8DF9             >QLOADING:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 515+ 8DF9 CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 515+ 8DFC             >
 515+ 8DFC             >
 515+ 8DFC             >                endif           ; ok        // for other definitions it "points" the correct handler
 515+ 8DFC             >                // Use of "; ok" to suppress "warning[fwdref]"
 515+ 8DFC             >
 515+ 8DFC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 516+ 8DFC B8 8A 4C 88                  dw      BLK, FETCH              // blk @
 517+ 8E00 93 86                        dw      ZEQUAL                  // 0=
 518+ 8E02 41 81 16 00                  dw      LIT, 22                 // 22  ( aren't loading now )
 519+ 8E06 7B 8D                        dw      QERROR                  // ?error
 520+ 8E08 43 86                        dw      EXIT                    // ;
 521+ 8E0A
 522+ 8E0A              //  ______________________________________________________________________
 523+ 8E0A              //
 524+ 8E0A              // compile      --
 525+ 8E0A              // compiles the following word
 526+ 8E0A                              Colon_Def COMPILE, "COMPILE", is_normal
 526+ 8E0A             >                New_Def  COMPILE, "COMPILE", Enter_Ptr, is_normal ; ok
 526+ 8E0A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 526+ 8E0A             >
 526+ 8E0A             >                // dummy db directives used to calculate length of namec
 526+ 8E0A 43 4F 4D 50 >                db      "COMPILE"
 526+ 8E0E 49 4C 45    >
 526+ 8E11             >len_NFA         defl    $ - temp_NFA
 526+ 8E11             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 526+ 8E0A             >
 526+ 8E0A 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 526+ 8E0B 43 4F 4D 50 >                db      "COMPILE"               // name string in 7-bit ascii, but
 526+ 8E0F 49 4C 45    >
 526+ 8E12             >                org     $-1                 // alter last byte of Name just above to set
 526+ 8E11 C5          >                db      {b $} | END_BIT     // msb as name end
 526+ 8E12             >
 526+ 8E12 EE 8D       >                dw      last_NFA            // Link to previous definition Name
 526+ 8E14             >COMPILE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 526+ 8E14 CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 526+ 8E17             >
 526+ 8E17             >
 526+ 8E17             >                endif           ; ok        // for other definitions it "points" the correct handler
 526+ 8E17             >                // Use of "; ok" to suppress "warning[fwdref]"
 526+ 8E17             >
 526+ 8E17             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 527+ 8E17 96 8D                        dw      QCOMP                   // ?comp
 528+ 8E19 7A 86                        dw      R_TO                    // r>
 529+ 8E1B 9C 87 0F 87                  dw      DUP, CELL_PLUS          // dup, cell+
 530+ 8E1F 68 86                        dw      TO_R                    // >r
 531+ 8E21 4C 88 BE 8B                  dw      FETCH, COMMA            // @ ,
 532+ 8E25 43 86                        dw      EXIT                    // ;
 533+ 8E27
 534+ 8E27              //  ______________________________________________________________________
 535+ 8E27              //
 536+ 8E27              // [            --
 537+ 8E27              // stop compilation
 538+ 8E27                              Colon_Def SQUARED_OPEN, "[", is_immediate
 538+ 8E27             >                New_Def  SQUARED_OPEN, "[", Enter_Ptr, is_immediate ; ok
 538+ 8E27             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 538+ 8E27             >
 538+ 8E27             >                // dummy db directives used to calculate length of namec
 538+ 8E27 5B          >                db      "["
 538+ 8E28             >len_NFA         defl    $ - temp_NFA
 538+ 8E28             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 538+ 8E27             >
 538+ 8E27 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 538+ 8E28 5B          >                db      "["               // name string in 7-bit ascii, but
 538+ 8E29             >                org     $-1                 // alter last byte of Name just above to set
 538+ 8E28 DB          >                db      {b $} | END_BIT     // msb as name end
 538+ 8E29             >
 538+ 8E29 0A 8E       >                dw      last_NFA            // Link to previous definition Name
 538+ 8E2B             >SQUARED_OPEN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 538+ 8E2B CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 538+ 8E2E             >
 538+ 8E2E             >
 538+ 8E2E             >                endif           ; ok        // for other definitions it "points" the correct handler
 538+ 8E2E             >                // Use of "; ok" to suppress "warning[fwdref]"
 538+ 8E2E             >
 538+ 8E2E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 539+ 8E2E A1 89                        dw      ZERO                    // 0
 540+ 8E30 0B 8B 57 88                  dw      STATE, STORE            // state !
 541+ 8E34 43 86                        dw      EXIT                    // ; immediate
 542+ 8E36
 543+ 8E36              //  ______________________________________________________________________
 544+ 8E36              //
 545+ 8E36              // ]            --
 546+ 8E36              // start compilation
 547+ 8E36                              Colon_Def SQUARED_CLOSE, "]", is_normal
 547+ 8E36             >                New_Def  SQUARED_CLOSE, "]", Enter_Ptr, is_normal ; ok
 547+ 8E36             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 547+ 8E36             >
 547+ 8E36             >                // dummy db directives used to calculate length of namec
 547+ 8E36 5D          >                db      "]"
 547+ 8E37             >len_NFA         defl    $ - temp_NFA
 547+ 8E37             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 547+ 8E36             >
 547+ 8E36 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 547+ 8E37 5D          >                db      "]"               // name string in 7-bit ascii, but
 547+ 8E38             >                org     $-1                 // alter last byte of Name just above to set
 547+ 8E37 DD          >                db      {b $} | END_BIT     // msb as name end
 547+ 8E38             >
 547+ 8E38 27 8E       >                dw      last_NFA            // Link to previous definition Name
 547+ 8E3A             >SQUARED_CLOSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 547+ 8E3A CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 547+ 8E3D             >
 547+ 8E3D             >
 547+ 8E3D             >                endif           ; ok        // for other definitions it "points" the correct handler
 547+ 8E3D             >                // Use of "; ok" to suppress "warning[fwdref]"
 547+ 8E3D             >
 547+ 8E3D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 548+ 8E3D 41 81 C0 00                  dw      LIT, $C0                // 192
 549+ 8E41 0B 8B 57 88                  dw      STATE, STORE            // state !
 550+ 8E45 43 86                        dw      EXIT                    // ;
 551+ 8E47
 552+ 8E47              //  ______________________________________________________________________
 553+ 8E47              //
 554+ 8E47              // smudge       --
 555+ 8E47              // toggle smudge bit of latest definition
 556+ 8E47                              Colon_Def SMUDGE, "SMUDGE", is_normal
 556+ 8E47             >                New_Def  SMUDGE, "SMUDGE", Enter_Ptr, is_normal ; ok
 556+ 8E47             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 556+ 8E47             >
 556+ 8E47             >                // dummy db directives used to calculate length of namec
 556+ 8E47 53 4D 55 44 >                db      "SMUDGE"
 556+ 8E4B 47 45       >
 556+ 8E4D             >len_NFA         defl    $ - temp_NFA
 556+ 8E4D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 556+ 8E47             >
 556+ 8E47 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 556+ 8E48 53 4D 55 44 >                db      "SMUDGE"               // name string in 7-bit ascii, but
 556+ 8E4C 47 45       >
 556+ 8E4E             >                org     $-1                 // alter last byte of Name just above to set
 556+ 8E4D C5          >                db      {b $} | END_BIT     // msb as name end
 556+ 8E4E             >
 556+ 8E4E 36 8E       >                dw      last_NFA            // Link to previous definition Name
 556+ 8E50             >SMUDGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 556+ 8E50 CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 556+ 8E53             >
 556+ 8E53             >
 556+ 8E53             >                endif           ; ok        // for other definitions it "points" the correct handler
 556+ 8E53             >                // Use of "; ok" to suppress "warning[fwdref]"
 556+ 8E53             >
 556+ 8E53             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 557+ 8E53 EB 8C                        dw      LATEST                  // latest
 558+ 8E55 41 81 20 00                  dw      LIT, SMUDGE_BIT         // 32
 559+ 8E59 41 88                        dw      TOGGLE                  // toggle
 560+ 8E5B 43 86                        dw      EXIT                    // ;
 561+ 8E5D
 562+ 8E5D              //  ______________________________________________________________________
 563+ 8E5D              //
 564+ 8E5D              // immediate    --
 565+ 8E5D              // make immediate the latest definition
 566+ 8E5D                              Colon_Def IMMEDIATE, "IMMEDIATE", is_normal
 566+ 8E5D             >                New_Def  IMMEDIATE, "IMMEDIATE", Enter_Ptr, is_normal ; ok
 566+ 8E5D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 566+ 8E5D             >
 566+ 8E5D             >                // dummy db directives used to calculate length of namec
 566+ 8E5D 49 4D 4D 45 >                db      "IMMEDIATE"
 566+ 8E61 44 49 41 54 >
 566+ 8E65 45          >
 566+ 8E66             >len_NFA         defl    $ - temp_NFA
 566+ 8E66             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 566+ 8E5D             >
 566+ 8E5D 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 566+ 8E5E 49 4D 4D 45 >                db      "IMMEDIATE"               // name string in 7-bit ascii, but
 566+ 8E62 44 49 41 54 >
 566+ 8E66 45          >
 566+ 8E67             >                org     $-1                 // alter last byte of Name just above to set
 566+ 8E66 C5          >                db      {b $} | END_BIT     // msb as name end
 566+ 8E67             >
 566+ 8E67 47 8E       >                dw      last_NFA            // Link to previous definition Name
 566+ 8E69             >IMMEDIATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 566+ 8E69 CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 566+ 8E6C             >
 566+ 8E6C             >
 566+ 8E6C             >                endif           ; ok        // for other definitions it "points" the correct handler
 566+ 8E6C             >                // Use of "; ok" to suppress "warning[fwdref]"
 566+ 8E6C             >
 566+ 8E6C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 567+ 8E6C EB 8C                        dw      LATEST                  // latest
 568+ 8E6E 41 81 40 00                  dw      LIT, $40                // 64
 569+ 8E72 41 88                        dw      TOGGLE                  // toggle
 570+ 8E74 43 86                        dw      EXIT                    // ;
 571+ 8E76
 572+ 8E76              //  ______________________________________________________________________
 573+ 8E76              //
 574+ 8E76              // hex          --
 575+ 8E76              // change numeration base
 576+ 8E76                              Colon_Def HEX, "HEX", is_normal
 576+ 8E76             >                New_Def  HEX, "HEX", Enter_Ptr, is_normal ; ok
 576+ 8E76             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 576+ 8E76             >
 576+ 8E76             >                // dummy db directives used to calculate length of namec
 576+ 8E76 48 45 58    >                db      "HEX"
 576+ 8E79             >len_NFA         defl    $ - temp_NFA
 576+ 8E79             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 576+ 8E76             >
 576+ 8E76 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 576+ 8E77 48 45 58    >                db      "HEX"               // name string in 7-bit ascii, but
 576+ 8E7A             >                org     $-1                 // alter last byte of Name just above to set
 576+ 8E79 D8          >                db      {b $} | END_BIT     // msb as name end
 576+ 8E7A             >
 576+ 8E7A 5D 8E       >                dw      last_NFA            // Link to previous definition Name
 576+ 8E7C             >HEX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 576+ 8E7C CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 576+ 8E7F             >
 576+ 8E7F             >
 576+ 8E7F             >                endif           ; ok        // for other definitions it "points" the correct handler
 576+ 8E7F             >                // Use of "; ok" to suppress "warning[fwdref]"
 576+ 8E7F             >
 576+ 8E7F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 577+ 8E7F 41 81 10 00                  dw      LIT, 16                 // 16
 578+ 8E83 16 8B 57 88                  dw      BASE, STORE             // base !
 579+ 8E87 43 86                        dw      EXIT                    // ;
 580+ 8E89
 581+ 8E89              //  ______________________________________________________________________
 582+ 8E89              //
 583+ 8E89              // decimal      --
 584+ 8E89              // change numeration base
 585+ 8E89                              Colon_Def DECIMAL, "DECIMAL", is_normal
 585+ 8E89             >                New_Def  DECIMAL, "DECIMAL", Enter_Ptr, is_normal ; ok
 585+ 8E89             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 585+ 8E89             >
 585+ 8E89             >                // dummy db directives used to calculate length of namec
 585+ 8E89 44 45 43 49 >                db      "DECIMAL"
 585+ 8E8D 4D 41 4C    >
 585+ 8E90             >len_NFA         defl    $ - temp_NFA
 585+ 8E90             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 585+ 8E89             >
 585+ 8E89 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 585+ 8E8A 44 45 43 49 >                db      "DECIMAL"               // name string in 7-bit ascii, but
 585+ 8E8E 4D 41 4C    >
 585+ 8E91             >                org     $-1                 // alter last byte of Name just above to set
 585+ 8E90 CC          >                db      {b $} | END_BIT     // msb as name end
 585+ 8E91             >
 585+ 8E91 76 8E       >                dw      last_NFA            // Link to previous definition Name
 585+ 8E93             >DECIMAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 585+ 8E93 CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 585+ 8E96             >
 585+ 8E96             >
 585+ 8E96             >                endif           ; ok        // for other definitions it "points" the correct handler
 585+ 8E96             >                // Use of "; ok" to suppress "warning[fwdref]"
 585+ 8E96             >
 585+ 8E96             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 586+ 8E96 41 81 0A 00                  dw      LIT, 10                 // 10
 587+ 8E9A 16 8B 57 88                  dw      BASE, STORE             // base !
 588+ 8E9E 43 86                        dw      EXIT                    // ;
 589+ 8EA0
 590+ 8EA0              //  ______________________________________________________________________
 591+ 8EA0              //
 592+ 8EA0              // (;code)       --
 593+ 8EA0              // patch to CFA to call/jump to the "following code"
 594+ 8EA0                              Colon_Def C_SEMICOLON_CODE, "(;CODE)", is_normal
 594+ 8EA0             >                New_Def  C_SEMICOLON_CODE, "(;CODE)", Enter_Ptr, is_normal ; ok
 594+ 8EA0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 594+ 8EA0             >
 594+ 8EA0             >                // dummy db directives used to calculate length of namec
 594+ 8EA0 28 3B 43 4F >                db      "(;CODE)"
 594+ 8EA4 44 45 29    >
 594+ 8EA7             >len_NFA         defl    $ - temp_NFA
 594+ 8EA7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 594+ 8EA0             >
 594+ 8EA0 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 594+ 8EA1 28 3B 43 4F >                db      "(;CODE)"               // name string in 7-bit ascii, but
 594+ 8EA5 44 45 29    >
 594+ 8EA8             >                org     $-1                 // alter last byte of Name just above to set
 594+ 8EA7 A9          >                db      {b $} | END_BIT     // msb as name end
 594+ 8EA8             >
 594+ 8EA8 89 8E       >                dw      last_NFA            // Link to previous definition Name
 594+ 8EAA             >C_SEMICOLON_CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 594+ 8EAA CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 594+ 8EAD             >
 594+ 8EAD             >
 594+ 8EAD             >                endif           ; ok        // for other definitions it "points" the correct handler
 594+ 8EAD             >                // Use of "; ok" to suppress "warning[fwdref]"
 594+ 8EAD             >
 594+ 8EAD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 595+ 8EAD 7A 86                        dw      R_TO                    // r>       ( Return Stack has IP to caller's next cell )
 596+ 8EAF EB 8C                        dw      LATEST                  // latest   ( Word being defined in this moment )
 597+ 8EB1 2F 8D 0D 8D                  dw      PFA, CFA                // pfa cfa  ( cfa of latest word )
 598+ 8EB5
 599+ 8EB5 41 81 CD 00                  dw      LIT, $CD                // $CD      ( At Latest CFA put "call" op-code )
 600+ 8EB9 61 87 6F 88                  dw      OVER, CSTORE            // over !   ( can't use comma because CFA was already ALLOTted by create )
 601+ 8EBD ED 86                        dw      ONE_PLUS                // 1+       ( At Latest CFA+1 put address for call. )
 602+ 8EBF
 603+ 8EBF 57 88                        dw      STORE                   // !
 604+ 8EC1 43 86                        dw      EXIT                    // ;
 605+ 8EC3
 606+ 8EC3              //  ______________________________________________________________________
 607+ 8EC3              //
 608+ 8EC3              // ;code        --
 609+ 8EC3                              Colon_Def SEMICOLON_CODE, ";CODE", is_immediate
 609+ 8EC3             >                New_Def  SEMICOLON_CODE, ";CODE", Enter_Ptr, is_immediate ; ok
 609+ 8EC3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 609+ 8EC3             >
 609+ 8EC3             >                // dummy db directives used to calculate length of namec
 609+ 8EC3 3B 43 4F 44 >                db      ";CODE"
 609+ 8EC7 45          >
 609+ 8EC8             >len_NFA         defl    $ - temp_NFA
 609+ 8EC8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 609+ 8EC3             >
 609+ 8EC3 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 609+ 8EC4 3B 43 4F 44 >                db      ";CODE"               // name string in 7-bit ascii, but
 609+ 8EC8 45          >
 609+ 8EC9             >                org     $-1                 // alter last byte of Name just above to set
 609+ 8EC8 C5          >                db      {b $} | END_BIT     // msb as name end
 609+ 8EC9             >
 609+ 8EC9 A0 8E       >                dw      last_NFA            // Link to previous definition Name
 609+ 8ECB             >SEMICOLON_CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 609+ 8ECB CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 609+ 8ECE             >
 609+ 8ECE             >
 609+ 8ECE             >                endif           ; ok        // for other definitions it "points" the correct handler
 609+ 8ECE             >                // Use of "; ok" to suppress "warning[fwdref]"
 609+ 8ECE             >
 609+ 8ECE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 610+ 8ECE DB 8D                        dw      QCSP                    // ?csp
 611+ 8ED0 14 8E                        dw      COMPILE                 // compile
 612+ 8ED2 AA 8E                        dw      C_SEMICOLON_CODE        // (;code)
 613+ 8ED4 2B 8E                        dw      SQUARED_OPEN            // [
 614+ 8ED6 4E 89                        dw      NOOP                    // noop () can be patched later to ASSEMBLER... )
 615+ 8ED8 43 86                        dw      EXIT                    // ; immediate
 616+ 8EDA
 617+ 8EDA              //  ______________________________________________________________________
 618+ 8EDA              //
 619+ 8EDA              // <builds      --
 620+ 8EDA                              Colon_Def CBUILDS, "<BUILDS", is_normal
 620+ 8EDA             >                New_Def  CBUILDS, "<BUILDS", Enter_Ptr, is_normal ; ok
 620+ 8EDA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 620+ 8EDA             >
 620+ 8EDA             >                // dummy db directives used to calculate length of namec
 620+ 8EDA 3C 42 55 49 >                db      "<BUILDS"
 620+ 8EDE 4C 44 53    >
 620+ 8EE1             >len_NFA         defl    $ - temp_NFA
 620+ 8EE1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 620+ 8EDA             >
 620+ 8EDA 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 620+ 8EDB 3C 42 55 49 >                db      "<BUILDS"               // name string in 7-bit ascii, but
 620+ 8EDF 4C 44 53    >
 620+ 8EE2             >                org     $-1                 // alter last byte of Name just above to set
 620+ 8EE1 D3          >                db      {b $} | END_BIT     // msb as name end
 620+ 8EE2             >
 620+ 8EE2 C3 8E       >                dw      last_NFA            // Link to previous definition Name
 620+ 8EE4             >CBUILDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 620+ 8EE4 CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 620+ 8EE7             >
 620+ 8EE7             >
 620+ 8EE7             >                endif           ; ok        // for other definitions it "points" the correct handler
 620+ 8EE7             >                // Use of "; ok" to suppress "warning[fwdref]"
 620+ 8EE7             >
 620+ 8EE7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 621+ 8EE7 A1 89                        dw      ZERO                    // 0
 622+ 8EE9 5E 89                        dw      CONSTANT                // constant
 623+ 8EEB 43 86                        dw      EXIT                    // ;
 624+ 8EED
 625+ 8EED              //  ______________________________________________________________________
 626+ 8EED              //
 627+ 8EED              // recurse      --
 628+ 8EED                              Colon_Def RECURSE, "RECURSE", is_immediate
 628+ 8EED             >                New_Def  RECURSE, "RECURSE", Enter_Ptr, is_immediate ; ok
 628+ 8EED             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 628+ 8EED             >
 628+ 8EED             >                // dummy db directives used to calculate length of namec
 628+ 8EED 52 45 43 55 >                db      "RECURSE"
 628+ 8EF1 52 53 45    >
 628+ 8EF4             >len_NFA         defl    $ - temp_NFA
 628+ 8EF4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 628+ 8EED             >
 628+ 8EED C7          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 628+ 8EEE 52 45 43 55 >                db      "RECURSE"               // name string in 7-bit ascii, but
 628+ 8EF2 52 53 45    >
 628+ 8EF5             >                org     $-1                 // alter last byte of Name just above to set
 628+ 8EF4 C5          >                db      {b $} | END_BIT     // msb as name end
 628+ 8EF5             >
 628+ 8EF5 DA 8E       >                dw      last_NFA            // Link to previous definition Name
 628+ 8EF7             >RECURSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 628+ 8EF7 CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 628+ 8EFA             >
 628+ 8EFA             >
 628+ 8EFA             >                endif           ; ok        // for other definitions it "points" the correct handler
 628+ 8EFA             >                // Use of "; ok" to suppress "warning[fwdref]"
 628+ 8EFA             >
 628+ 8EFA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 629+ 8EFA 96 8D                        dw      QCOMP                   // ?comp
 630+ 8EFC EB 8C                        dw      LATEST                  // latest
 631+ 8EFE 2F 8D 0D 8D                  dw      PFA, CFA                // pfa cfa
 632+ 8F02 BE 8B                        dw      COMMA                   // ,
 633+ 8F04 43 86                        dw      EXIT                    // ; immediate
 634+ 8F06
 635+ 8F06              //  ______________________________________________________________________
 636+ 8F06              //
 637+ 8F06              // does>     --
 638+ 8F06                              Colon_Def DOES_TO, "DOES>", is_normal
 638+ 8F06             >                New_Def  DOES_TO, "DOES>", Enter_Ptr, is_normal ; ok
 638+ 8F06             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 638+ 8F06             >
 638+ 8F06             >                // dummy db directives used to calculate length of namec
 638+ 8F06 44 4F 45 53 >                db      "DOES>"
 638+ 8F0A 3E          >
 638+ 8F0B             >len_NFA         defl    $ - temp_NFA
 638+ 8F0B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 638+ 8F06             >
 638+ 8F06 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 638+ 8F07 44 4F 45 53 >                db      "DOES>"               // name string in 7-bit ascii, but
 638+ 8F0B 3E          >
 638+ 8F0C             >                org     $-1                 // alter last byte of Name just above to set
 638+ 8F0B BE          >                db      {b $} | END_BIT     // msb as name end
 638+ 8F0C             >
 638+ 8F0C ED 8E       >                dw      last_NFA            // Link to previous definition Name
 638+ 8F0E             >DOES_TO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 638+ 8F0E CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 638+ 8F11             >
 638+ 8F11             >
 638+ 8F11             >                endif           ; ok        // for other definitions it "points" the correct handler
 638+ 8F11             >                // Use of "; ok" to suppress "warning[fwdref]"
 638+ 8F11             >
 638+ 8F11             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 639+ 8F11 7A 86                        dw      R_TO                    // r>
 640+ 8F13 EB 8C                        dw      LATEST                  // latest
 641+ 8F15 2F 8D                        dw      PFA                     // pfa
 642+ 8F17 57 88                        dw      STORE                   // !
 643+ 8F19 AA 8E                        dw      C_SEMICOLON_CODE        // ;code
 644+ 8F1B              Does_Ptr:
 645+ 8F1B                              // via call coded in CFA
 646+ 8F1B                              ldhlrp
 646+ 8F1B 2A 30 81    >                ld      hl,(RP_Pointer)
 647+ 8F1E 2B                           dec     hl                  // push on Return-Stack current Instruction-Pointer
 648+ 8F1F 70                           ld      (hl), b
 649+ 8F20 2B                           dec     hl
 650+ 8F21 71                           ld      (hl), c
 651+ 8F22                              ldrphl
 651+ 8F22 22 30 81    >                ld      (RP_Pointer),hl
 652+ 8F25 E1                           pop     hl                  // CFA has a call to this, so PFA -> IP
 653+ 8F26
 654+ 8F26 4E                           ld      c, (hl)
 655+ 8F27 23                           inc     hl
 656+ 8F28 46                           ld      b, (hl)
 657+ 8F29 23                           inc     hl
 658+ 8F2A
 659+ 8F2A                              psh1
 659+ 8F2A E5          >                push    hl
 659+ 8F2B DD E9       >                jp      (ix)
 660+ 8F2D                              // SMUDGE !
 661+ 8F2D
 662+ 8F2D              //  ______________________________________________________________________
 663+ 8F2D              //
 664+ 8F2D              // count        a -- a2 n
 665+ 8F2D              // expects a counted string at address a, returns string address and counter
 666+ 8F2D                              Colon_Def COUNT, "COUNT", is_normal
 666+ 8F2D             >                New_Def  COUNT, "COUNT", Enter_Ptr, is_normal ; ok
 666+ 8F2D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 666+ 8F2D             >
 666+ 8F2D             >                // dummy db directives used to calculate length of namec
 666+ 8F2D 43 4F 55 4E >                db      "COUNT"
 666+ 8F31 54          >
 666+ 8F32             >len_NFA         defl    $ - temp_NFA
 666+ 8F32             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 666+ 8F2D             >
 666+ 8F2D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 666+ 8F2E 43 4F 55 4E >                db      "COUNT"               // name string in 7-bit ascii, but
 666+ 8F32 54          >
 666+ 8F33             >                org     $-1                 // alter last byte of Name just above to set
 666+ 8F32 D4          >                db      {b $} | END_BIT     // msb as name end
 666+ 8F33             >
 666+ 8F33 06 8F       >                dw      last_NFA            // Link to previous definition Name
 666+ 8F35             >COUNT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 666+ 8F35 CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 666+ 8F38             >
 666+ 8F38             >
 666+ 8F38             >                endif           ; ok        // for other definitions it "points" the correct handler
 666+ 8F38             >                // Use of "; ok" to suppress "warning[fwdref]"
 666+ 8F38             >
 666+ 8F38             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 667+ 8F38 9C 87                        dw      DUP                     // dup
 668+ 8F3A ED 86                        dw      ONE_PLUS                // 1+
 669+ 8F3C 91 87 63 88                  dw      SWAP, CFETCH             // swap @
 670+ 8F40 43 86                        dw      EXIT                    // ;
 671+ 8F42
 672+ 8F42              //  ______________________________________________________________________
 673+ 8F42              //
 674+ 8F42              // type         a n --
 675+ 8F42              // Sends to current output channel n characters starting at address a.
 676+ 8F42                              Colon_Def TYPE, "TYPE", is_normal
 676+ 8F42             >                New_Def  TYPE, "TYPE", Enter_Ptr, is_normal ; ok
 676+ 8F42             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 676+ 8F42             >
 676+ 8F42             >                // dummy db directives used to calculate length of namec
 676+ 8F42 54 59 50 45 >                db      "TYPE"
 676+ 8F46             >len_NFA         defl    $ - temp_NFA
 676+ 8F46             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 676+ 8F42             >
 676+ 8F42 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 676+ 8F43 54 59 50 45 >                db      "TYPE"               // name string in 7-bit ascii, but
 676+ 8F47             >                org     $-1                 // alter last byte of Name just above to set
 676+ 8F46 C5          >                db      {b $} | END_BIT     // msb as name end
 676+ 8F47             >
 676+ 8F47 2D 8F       >                dw      last_NFA            // Link to previous definition Name
 676+ 8F49             >TYPE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 676+ 8F49 CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 676+ 8F4C             >
 676+ 8F4C             >
 676+ 8F4C             >                endif           ; ok        // for other definitions it "points" the correct handler
 676+ 8F4C             >                // Use of "; ok" to suppress "warning[fwdref]"
 676+ 8F4C             >
 676+ 8F4C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 677+ 8F4C 61 87                        dw      OVER                    // over
 678+ 8F4E C8 86                        dw      PLUS                    // +
 679+ 8F50 91 87                        dw      SWAP                    // swap
 680+ 8F52 C9 81                        dw      C_Q_DO                  // ?do
 681+ 8F54 0C 00                        dw      Type_Skip - $
 682+ 8F56              Type_Loop:
 683+ 8F56 FE 81 63 88                  dw          I, CFETCH           //      i c@
 684+ 8F5A 94 8C                        dw          EMIT                //      emit
 685+ 8F5C 88 81                        dw      C_LOOP                  // loop
 686+ 8F5E F8 FF                        dw      Type_Loop - $
 687+ 8F60              Type_Skip:
 688+ 8F60 43 86                        dw      EXIT                    // ;
 689+ 8F62
 690+ 8F62              //  ______________________________________________________________________
 691+ 8F62              //
 692+ 8F62              // -trailing    a n1 -- a n2
 693+ 8F62              // Assumes that an n1 bytes-long string is stored at address a
 694+ 8F62              // and the string contains a space delimited word,
 695+ 8F62              // Finds n2 as the position of the first character after the word.
 696+ 8F62                              Colon_Def LTRAILING, "-TRAILING", is_normal
 696+ 8F62             >                New_Def  LTRAILING, "-TRAILING", Enter_Ptr, is_normal ; ok
 696+ 8F62             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 696+ 8F62             >
 696+ 8F62             >                // dummy db directives used to calculate length of namec
 696+ 8F62 2D 54 52 41 >                db      "-TRAILING"
 696+ 8F66 49 4C 49 4E >
 696+ 8F6A 47          >
 696+ 8F6B             >len_NFA         defl    $ - temp_NFA
 696+ 8F6B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 696+ 8F62             >
 696+ 8F62 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 696+ 8F63 2D 54 52 41 >                db      "-TRAILING"               // name string in 7-bit ascii, but
 696+ 8F67 49 4C 49 4E >
 696+ 8F6B 47          >
 696+ 8F6C             >                org     $-1                 // alter last byte of Name just above to set
 696+ 8F6B C7          >                db      {b $} | END_BIT     // msb as name end
 696+ 8F6C             >
 696+ 8F6C 42 8F       >                dw      last_NFA            // Link to previous definition Name
 696+ 8F6E             >LTRAILING:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 696+ 8F6E CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 696+ 8F71             >
 696+ 8F71             >
 696+ 8F71             >                endif           ; ok        // for other definitions it "points" the correct handler
 696+ 8F71             >                // Use of "; ok" to suppress "warning[fwdref]"
 696+ 8F71             >
 696+ 8F71             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 697+ 8F71 9C 87 A1 89                  dw      DUP, ZERO               // dup 0
 698+ 8F75                                                              // do
 699+ 8F75 F5 81                        dw      C_DO
 700+ 8F77              LTrailing_Loop:
 701+ 8F77 FA 87 C8 86                  dw          TWO_DUP, PLUS       //      2dup +
 702+ 8F7B F7 86                        dw          ONE_SUBTRACT        //      1-
 703+ 8F7D 63 88                        dw          CFETCH              //      c@
 704+ 8F7F D0 89 F6 8B                  dw          BL, SUBTRACT        //      bl -
 705+ 8F83                                                              //      if
 706+ 8F83 75 81                        dw          ZBRANCH
 707+ 8F85 08 00                        dw          LTrailing_Else - $
 708+ 8F87 57 86                        dw              LEAVE           //          leave
 709+ 8F89 60 81                        dw          BRANCH              //      else
 710+ 8F8B 04 00                        dw          LTrailing_Endif - $
 711+ 8F8D              LTrailing_Else:
 712+ 8F8D F7 86                        dw              ONE_SUBTRACT    //          1-
 713+ 8F8F              LTrailing_Endif:                                //      endif
 714+ 8F8F                                                              // loop
 715+ 8F8F 88 81                        dw      C_LOOP
 716+ 8F91 E6 FF                        dw      LTrailing_Loop - $
 717+ 8F93 43 86                        dw      EXIT                    // ;
 718+ 8F95
 719+ 8F95              //  ______________________________________________________________________
 720+ 8F95              //
 721+ 8F95              // accept       a n1 -- n2
 722+ 8F95              // Accepts at most n1 characters from terminal and stores them at address a
 723+ 8F95              // CR stops input. A 'nul' is added as trailer.
 724+ 8F95              // n2 is the string length. n2 is kept in span user variable also.
 725+ 8F95                              Colon_Def ACCEPT, "ACCEPT", is_normal
 725+ 8F95             >                New_Def  ACCEPT, "ACCEPT", Enter_Ptr, is_normal ; ok
 725+ 8F95             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 725+ 8F95             >
 725+ 8F95             >                // dummy db directives used to calculate length of namec
 725+ 8F95 41 43 43 45 >                db      "ACCEPT"
 725+ 8F99 50 54       >
 725+ 8F9B             >len_NFA         defl    $ - temp_NFA
 725+ 8F9B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 725+ 8F95             >
 725+ 8F95 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 725+ 8F96 41 43 43 45 >                db      "ACCEPT"               // name string in 7-bit ascii, but
 725+ 8F9A 50 54       >
 725+ 8F9C             >                org     $-1                 // alter last byte of Name just above to set
 725+ 8F9B D4          >                db      {b $} | END_BIT     // msb as name end
 725+ 8F9C             >
 725+ 8F9C 62 8F       >                dw      last_NFA            // Link to previous definition Name
 725+ 8F9E             >ACCEPT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 725+ 8F9E CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 725+ 8FA1             >
 725+ 8FA1             >
 725+ 8FA1             >                endif           ; ok        // for other definitions it "points" the correct handler
 725+ 8FA1             >                // Use of "; ok" to suppress "warning[fwdref]"
 725+ 8FA1             >
 725+ 8FA1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 726+ 8FA1 61 87 C8 86                  dw      OVER, PLUS, OVER        //                      ( a  n1+a  a )
 726+ 8FA5 61 87
 727+ 8FA7 A1 89 A7 87                  dw      ZERO, ROT, ROT          //                      ( a  0     a+n1  a )
 727+ 8FAB A7 87
 728+ 8FAD                                                              // do
 729+ 8FAD              // Next_Breakpoint_5:
 730+ 8FAD F5 81                        dw      C_DO                    //                      ( a  0 )
 731+ 8FAF              Accept_Loop:
 732+ 8FAF 6F 87 D7 83                  dw          DROP, KEY           //      drop key        ( a  c )
 733+ 8FB3 9C 87                        dw          DUP                 //      dup             ( a  c  c )
 734+ 8FB5 41 81 0E 00                  dw          LIT, $0E            //      0E
 735+ 8FB9 11 8A                        dw          PLUS_ORIGIN         //      +origin
 736+ 8FBB 4C 88                        dw          FETCH               //      @               ( a  c  c  del )
 737+ 8FBD 02 8C                        dw          EQUALS              //      =               ( a  c  c==del )
 738+ 8FBF                                                              //      if
 739+ 8FBF 75 81                        dw          ZBRANCH
 740+ 8FC1 2A 00                        dw          Accept_Else_0 - $
 741+ 8FC3 6F 87                        dw              DROP            //          drop        ( a  )
 742+ 8FC5 9C 87 FE 81                  dw              DUP, I, EQUALS  //          dup i =     ( a  a==i )
 742+ 8FC9 02 8C
 743+ 8FCB 9C 87                        dw              DUP             //          dup         ( a  a==i  a==i )
 744+ 8FCD 7A 86                        dw              R_TO            //          r> 2 - + r>
 745+ 8FCF B3 89 F6 8B                  dw              TWO, SUBTRACT, PLUS //      ( decrement index by 1 or 2 )
 745+ 8FD3 C8 86
 746+ 8FD5 68 86                        dw              TO_R            //
 747+ 8FD7                                                              //          if
 748+ 8FD7 75 81                        dw              ZBRANCH
 749+ 8FD9 0A 00                        dw              Accept_Else_1 - $
 750+ 8FDB 41 81 07 00                  dw                  LIT, 7      //              7       ( a  7 )
 751+ 8FDF                                                              //          else
 752+ 8FDF 60 81                        dw              BRANCH
 753+ 8FE1 06 00                        dw              Accept_Endif_1 - $
 754+ 8FE3              Accept_Else_1:
 755+ 8FE3 41 81 08 00                  dw                  LIT, 8      //              8       ( a  8 )
 756+ 8FE7              Accept_Endif_1:                                 //          endif
 757+ 8FE7 60 81                        dw          BRANCH
 758+ 8FE9 30 00                        dw          Accept_Endif_0 - $
 759+ 8FEB              Accept_Else_0:                                  //      else
 760+ 8FEB 9C 87                        dw              DUP             //          dup         ( a  c  c )
 761+ 8FED 41 81 0D 00                  dw              LIT, 13         //          13
 762+ 8FF1 02 8C                        dw              EQUALS          //          =           ( a  c  c==CR )
 763+ 8FF3                                                              //          if
 764+ 8FF3 75 81                        dw              ZBRANCH
 765+ 8FF5 0E 00                        dw              Accept_Else_2 - $
 766+ 8FF7 6F 87 D0 89                  dw                  DROP, BL    //              drop bl ( a  bl )
 767+ 8FFB A1 89                        dw                  ZERO        //              0       ( a  c  0 )
 768+ 8FFD 57 86                        dw                  LEAVE       //              leave
 769+ 8FFF                                                              //          else
 770+ 8FFF 60 81                        dw              BRANCH
 771+ 9001 04 00                        dw              Accept_Endif_2 - $
 772+ 9003              Accept_Else_2:
 773+ 9003 9C 87                        dw                  DUP         //              dup     ( a  c  c )
 774+ 9005                                                              //          endif
 775+ 9005              Accept_Endif_2:
 776+ 9005 FE 81 6F 88                  dw              I, CSTORE       //          i           ( a  c )
 777+ 9009 9C 87 D0 89                  dw              DUP, BL, LESS   //          dup bl <    ( a  c  c<BL )
 777+ 900D 22 8C
 778+ 900F                                                              //          if
 779+ 900F 75 81                        dw              ZBRANCH
 780+ 9011 08 00                        dw              Accept_Endif_3 - $
 781+ 9013 7A 86                        dw                  R_TO        //              r>
 782+ 9015 F7 86                        dw                  ONE_SUBTRACT//              1-
 783+ 9017 68 86                        dw                  TO_R        //              >r
 784+ 9019                                                              //          endif
 785+ 9019              Accept_Endif_3:
 786+ 9019              Accept_Endif_0:                                 //      endif
 787+ 9019 94 8C                        dw          EMIT                //      emit
 788+ 901B A1 89 FE 81                  dw          ZERO, I, ONE_PLUS   //      0 i 1+ !
 788+ 901F ED 86
 789+ 9021 57 88                        dw          STORE               //          ( zero pad )
 790+ 9023 FE 81                        dw          I                   //      i
 791+ 9025                                                              // loop
 792+ 9025 88 81                        dw      C_LOOP
 793+ 9027 88 FF                        dw      Accept_Loop - $
 794+ 9029 91 87 F6 8B                  dw      SWAP, SUBTRACT          // swap -
 795+ 902D ED 86                        dw      ONE_PLUS                // 1+
 796+ 902F 9C 87 8C 8B                  dw      DUP, SPAN, STORE        // dup span !
 796+ 9033 57 88
 797+ 9035 43 86                        dw      EXIT                    // ;
 798+ 9037
 799+ 9037              //  ______________________________________________________________________
 800+ 9037              //
 801+ 9037              // expect      a n --
 802+ 9037              // Accepts at most n1 characters from terminal and stores them at address a
 803+ 9037              // CR stops input. A 'nul' is added as trailer.
 804+ 9037              // n2 is the string length. n2 is kept in span user variable also.
 805+ 9037                              Colon_Def EXPECT, "EXPECT", is_normal
 805+ 9037             >                New_Def  EXPECT, "EXPECT", Enter_Ptr, is_normal ; ok
 805+ 9037             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 805+ 9037             >
 805+ 9037             >                // dummy db directives used to calculate length of namec
 805+ 9037 45 58 50 45 >                db      "EXPECT"
 805+ 903B 43 54       >
 805+ 903D             >len_NFA         defl    $ - temp_NFA
 805+ 903D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 805+ 9037             >
 805+ 9037 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 805+ 9038 45 58 50 45 >                db      "EXPECT"               // name string in 7-bit ascii, but
 805+ 903C 43 54       >
 805+ 903E             >                org     $-1                 // alter last byte of Name just above to set
 805+ 903D D4          >                db      {b $} | END_BIT     // msb as name end
 805+ 903E             >
 805+ 903E 95 8F       >                dw      last_NFA            // Link to previous definition Name
 805+ 9040             >EXPECT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 805+ 9040 CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 805+ 9043             >
 805+ 9043             >
 805+ 9043             >                endif           ; ok        // for other definitions it "points" the correct handler
 805+ 9043             >                // Use of "; ok" to suppress "warning[fwdref]"
 805+ 9043             >
 805+ 9043             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 806+ 9043 9E 8F 6F 87                  dw      ACCEPT, DROP            // accept drop
 807+ 9047 43 86                        dw      EXIT                    // ;
 808+ 9049
 809+ 9049              //  ______________________________________________________________________
 810+ 9049              //
 811+ 9049              // query        --
 812+ 9049              // Accept at most 80 character from console. CR stops.
 813+ 9049              // Text is stored in TIB. Variable IN is zeroed.
 814+ 9049                              Colon_Def QUERY, "QUERY", is_normal
 814+ 9049             >                New_Def  QUERY, "QUERY", Enter_Ptr, is_normal ; ok
 814+ 9049             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 814+ 9049             >
 814+ 9049             >                // dummy db directives used to calculate length of namec
 814+ 9049 51 55 45 52 >                db      "QUERY"
 814+ 904D 59          >
 814+ 904E             >len_NFA         defl    $ - temp_NFA
 814+ 904E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 814+ 9049             >
 814+ 9049 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 814+ 904A 51 55 45 52 >                db      "QUERY"               // name string in 7-bit ascii, but
 814+ 904E 59          >
 814+ 904F             >                org     $-1                 // alter last byte of Name just above to set
 814+ 904E D9          >                db      {b $} | END_BIT     // msb as name end
 814+ 904F             >
 814+ 904F 37 90       >                dw      last_NFA            // Link to previous definition Name
 814+ 9051             >QUERY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 814+ 9051 CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 814+ 9054             >
 814+ 9054             >
 814+ 9054             >                endif           ; ok        // for other definitions it "points" the correct handler
 814+ 9054             >                // Use of "; ok" to suppress "warning[fwdref]"
 814+ 9054             >
 814+ 9054             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 815+ 9054 42 8A 4C 88                  dw      TIB, FETCH              // tib @
 816+ 9058 41 81 50 00                  dw      LIT, 80                 // 80
 817+ 905C 40 90                        dw      EXPECT                  // expect
 818+ 905E A1 89 C2 8A                  dw      ZERO, TO_IN, STORE      // 0 >in !
 818+ 9062 57 88
 819+ 9064 43 86                        dw      EXIT                    // ;
 820+ 9066
 821+ 9066              //  ______________________________________________________________________
 822+ 9066              //
 823+ 9066              // fill        a n c --
 824+ 9066              // If n > 0, fills n locations starting from address a with the value c.
 825+ 9066                              New_Def FILL, "FILL", is_code, is_normal
 825+ 9066             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 825+ 9066             >
 825+ 9066             >                // dummy db directives used to calculate length of namec
 825+ 9066 46 49 4C 4C >                db      "FILL"
 825+ 906A             >len_NFA         defl    $ - temp_NFA
 825+ 906A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 825+ 9066             >
 825+ 9066 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 825+ 9067 46 49 4C 4C >                db      "FILL"               // name string in 7-bit ascii, but
 825+ 906B             >                org     $-1                 // alter last byte of Name just above to set
 825+ 906A CC          >                db      {b $} | END_BIT     // msb as name end
 825+ 906B             >
 825+ 906B 49 90       >                dw      last_NFA            // Link to previous definition Name
 825+ 906D             >FILL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 825+ 906D ~           >                call    runcode ; ok        // for primitive definitions  actual code
 825+ 906D ~           >
 825+ 906D ~           >
 825+ 906D             >                endif           ; ok        // for other definitions it "points" the correct handler
 825+ 906D             >                // Use of "; ok" to suppress "warning[fwdref]"
 825+ 906D             >
 825+ 906D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 826+ 906D 69                           ld      l, c
 827+ 906E 60                           ld      h, b
 828+ 906F D1                           pop     de                  // de has character
 829+ 9070 C1                           pop     bc                  // bc has counter
 830+ 9071 E3                           ex      (sp), hl            // hl has address, save Instruction Pointer
 831+ 9072              Fill_Loop:
 832+ 9072 78                               ld      a, b
 833+ 9073 B1                               or      c
 834+ 9074 28 05                        jr      z, Fill_While_End
 835+ 9076 73                               ld      (hl), e
 836+ 9077 0B                               dec     bc
 837+ 9078 23                               inc     hl
 838+ 9079 18 F7                        jr      Fill_Loop
 839+ 907B              Fill_While_End:
 840+ 907B C1                           pop     bc                  // Restore Instruction Pointer
 841+ 907C
 842+ 907C                              next
 842+ 907C DD E9       >                jp      (ix)
 843+ 907E
 844+ 907E              //  ______________________________________________________________________
 845+ 907E              //
 846+ 907E              // erase        a n --
 847+ 907E              // If n > 0, fills n locations starting from address a with 'nul' characters.
 848+ 907E                              Colon_Def ERASE, "ERASE", is_normal
 848+ 907E             >                New_Def  ERASE, "ERASE", Enter_Ptr, is_normal ; ok
 848+ 907E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 848+ 907E             >
 848+ 907E             >                // dummy db directives used to calculate length of namec
 848+ 907E 45 52 41 53 >                db      "ERASE"
 848+ 9082 45          >
 848+ 9083             >len_NFA         defl    $ - temp_NFA
 848+ 9083             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 848+ 907E             >
 848+ 907E 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 848+ 907F 45 52 41 53 >                db      "ERASE"               // name string in 7-bit ascii, but
 848+ 9083 45          >
 848+ 9084             >                org     $-1                 // alter last byte of Name just above to set
 848+ 9083 C5          >                db      {b $} | END_BIT     // msb as name end
 848+ 9084             >
 848+ 9084 66 90       >                dw      last_NFA            // Link to previous definition Name
 848+ 9086             >ERASE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 848+ 9086 CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 848+ 9089             >
 848+ 9089             >
 848+ 9089             >                endif           ; ok        // for other definitions it "points" the correct handler
 848+ 9089             >                // Use of "; ok" to suppress "warning[fwdref]"
 848+ 9089             >
 848+ 9089             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 849+ 9089 A1 89 6D 90                  dw      ZERO, FILL              // 0 fill
 850+ 908D 43 86                        dw      EXIT                    // ;
 851+ 908F
 852+ 908F              //  ______________________________________________________________________
 853+ 908F              //
 854+ 908F              // blanks       a n --
 855+ 908F              // If n > 0, fills n locations starting from address a with 'nul' characters.
 856+ 908F                              Colon_Def BLANKS, "BLANKS", is_normal
 856+ 908F             >                New_Def  BLANKS, "BLANKS", Enter_Ptr, is_normal ; ok
 856+ 908F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 856+ 908F             >
 856+ 908F             >                // dummy db directives used to calculate length of namec
 856+ 908F 42 4C 41 4E >                db      "BLANKS"
 856+ 9093 4B 53       >
 856+ 9095             >len_NFA         defl    $ - temp_NFA
 856+ 9095             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 856+ 908F             >
 856+ 908F 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 856+ 9090 42 4C 41 4E >                db      "BLANKS"               // name string in 7-bit ascii, but
 856+ 9094 4B 53       >
 856+ 9096             >                org     $-1                 // alter last byte of Name just above to set
 856+ 9095 D3          >                db      {b $} | END_BIT     // msb as name end
 856+ 9096             >
 856+ 9096 7E 90       >                dw      last_NFA            // Link to previous definition Name
 856+ 9098             >BLANKS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 856+ 9098 CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 856+ 909B             >
 856+ 909B             >
 856+ 909B             >                endif           ; ok        // for other definitions it "points" the correct handler
 856+ 909B             >                // Use of "; ok" to suppress "warning[fwdref]"
 856+ 909B             >
 856+ 909B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 857+ 909B D0 89 6D 90                  dw      BL, FILL                // bl fill
 858+ 909F 43 86                        dw      EXIT                    // ;
 859+ 90A1
 860+ 90A1              //  ______________________________________________________________________
 861+ 90A1              //
 862+ 90A1              // hold         c --
 863+ 90A1              // Used between <# and #> to insert a character c in numeric formatting.
 864+ 90A1                              Colon_Def HOLD, "HOLD", is_normal
 864+ 90A1             >                New_Def  HOLD, "HOLD", Enter_Ptr, is_normal ; ok
 864+ 90A1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 864+ 90A1             >
 864+ 90A1             >                // dummy db directives used to calculate length of namec
 864+ 90A1 48 4F 4C 44 >                db      "HOLD"
 864+ 90A5             >len_NFA         defl    $ - temp_NFA
 864+ 90A5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 864+ 90A1             >
 864+ 90A1 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 864+ 90A2 48 4F 4C 44 >                db      "HOLD"               // name string in 7-bit ascii, but
 864+ 90A6             >                org     $-1                 // alter last byte of Name just above to set
 864+ 90A5 C4          >                db      {b $} | END_BIT     // msb as name end
 864+ 90A6             >
 864+ 90A6 8F 90       >                dw      last_NFA            // Link to previous definition Name
 864+ 90A8             >HOLD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 864+ 90A8 CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 864+ 90AB             >
 864+ 90AB             >
 864+ 90AB             >                endif           ; ok        // for other definitions it "points" the correct handler
 864+ 90AB             >                // Use of "; ok" to suppress "warning[fwdref]"
 864+ 90AB             >
 864+ 90AB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 865+ 90AB C6 89                        dw      NEG_ONE                 // -1
 866+ 90AD 47 8B 2D 88                  dw      HLD, PLUSSTORE          // hld +!
 867+ 90B1 47 8B 4C 88                  dw      HLD, FETCH, CSTORE      // hld @ c!
 867+ 90B5 6F 88
 868+ 90B7 43 86                        dw      EXIT                    // ;
 869+ 90B9
 870+ 90B9              //  ______________________________________________________________________
 871+ 90B9              //
 872+ 90B9              // pad         -- a
 873+ 90B9              // leaves the buffer text address. This is at a fixed distance over HERE.
 874+ 90B9                              Colon_Def PAD, "PAD", is_normal
 874+ 90B9             >                New_Def  PAD, "PAD", Enter_Ptr, is_normal ; ok
 874+ 90B9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 874+ 90B9             >
 874+ 90B9             >                // dummy db directives used to calculate length of namec
 874+ 90B9 50 41 44    >                db      "PAD"
 874+ 90BC             >len_NFA         defl    $ - temp_NFA
 874+ 90BC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 874+ 90B9             >
 874+ 90B9 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 874+ 90BA 50 41 44    >                db      "PAD"               // name string in 7-bit ascii, but
 874+ 90BD             >                org     $-1                 // alter last byte of Name just above to set
 874+ 90BC C4          >                db      {b $} | END_BIT     // msb as name end
 874+ 90BD             >
 874+ 90BD A1 90       >                dw      last_NFA            // Link to previous definition Name
 874+ 90BF             >PAD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 874+ 90BF CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 874+ 90C2             >
 874+ 90C2             >
 874+ 90C2             >                endif           ; ok        // for other definitions it "points" the correct handler
 874+ 90C2             >                // Use of "; ok" to suppress "warning[fwdref]"
 874+ 90C2             >
 874+ 90C2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 875+ 90C2 A0 8B                        dw      HERE                    // here
 876+ 90C4 41 81 44 00                  dw      LIT, 68                 // 68
 877+ 90C8 C8 86                        dw      PLUS                    // +
 878+ 90CA 43 86                        dw      EXIT                    // ;
 879+ 90CC
 880+ 90CC              //  ______________________________________________________________________
 881+ 90CC              //
 882+ 90CC              // word         c -- a
 883+ 90CC              // reads characters from input streams until it encouners a c delimiter.
 884+ 90CC              // Stores that packet so it starts from HERE
 885+ 90CC              // WORD leaves a counter as first byte and ends the packet with two spaces.
 886+ 90CC              // Other occurrences of c are ignored.
 887+ 90CC              // If BLK is zero, text is taken from terminal buffer TIB.
 888+ 90CC              // Otherwise text is taken from the disk-block given by BLK.
 889+ 90CC              // "in" variable is incremented of the number of character read.
 890+ 90CC              // The number of characters read is given by ENCLOSE.
 891+ 90CC                              Colon_Def WORD, "WORD", is_normal
 891+ 90CC             >                New_Def  WORD, "WORD", Enter_Ptr, is_normal ; ok
 891+ 90CC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 891+ 90CC             >
 891+ 90CC             >                // dummy db directives used to calculate length of namec
 891+ 90CC 57 4F 52 44 >                db      "WORD"
 891+ 90D0             >len_NFA         defl    $ - temp_NFA
 891+ 90D0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 891+ 90CC             >
 891+ 90CC 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 891+ 90CD 57 4F 52 44 >                db      "WORD"               // name string in 7-bit ascii, but
 891+ 90D1             >                org     $-1                 // alter last byte of Name just above to set
 891+ 90D0 C4          >                db      {b $} | END_BIT     // msb as name end
 891+ 90D1             >
 891+ 90D1 B9 90       >                dw      last_NFA            // Link to previous definition Name
 891+ 90D3             >WORD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 891+ 90D3 CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 891+ 90D6             >
 891+ 90D6             >
 891+ 90D6             >                endif           ; ok        // for other definitions it "points" the correct handler
 891+ 90D6             >                // Use of "; ok" to suppress "warning[fwdref]"
 891+ 90D6             >
 891+ 90D6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 892+ 90D6 B8 8A 4C 88                  dw      BLK, FETCH              // blk @
 893+ 90DA                                                              // if
 894+ 90DA 75 81                        dw      ZBRANCH
 895+ 90DC 0C 00                        dw      Word_Else - $
 896+ 90DE B8 8A 4C 88                  dw          BLK, FETCH          //      blk @
 897+ 90E2 AF 9A                        dw          BLOCK               //      block ( forward )
 898+ 90E4                                                              // else
 899+ 90E4 60 81                        dw      BRANCH
 900+ 90E6 06 00                        dw      Word_Endif - $
 901+ 90E8              Word_Else:
 902+ 90E8 42 8A 4C 88                  dw         TIB, FETCH           //      tib @
 903+ 90EC              Word_Endif:                                     // endif
 904+ 90EC C2 8A 4C 88                  dw      TO_IN, FETCH, PLUS      // >in @ +
 904+ 90F0 C8 86
 905+ 90F2 91 87 D2 82                  dw      SWAP, ENCLOSE           // swap enclose
 906+ 90F6 A0 8B 41 81                  dw      HERE, LIT, 34, BLANKS   // here 34 blanks
 906+ 90FA 22 00 98 90
 907+ 90FE C2 8A 2D 88                  dw      TO_IN, PLUSSTORE        // >in @ +
 908+ 9102 61 87 F6 8B                  dw      OVER, SUBTRACT, TO_R    // over - >r
 908+ 9106 68 86
 909+ 9108 8B 86 A0 8B                  dw      R_OP, HERE, CSTORE      // r here c!
 909+ 910C 6F 88
 910+ 910E C8 86                        dw      PLUS                    // +
 911+ 9110 A0 8B ED 86                  dw      HERE, ONE_PLUS, R_TO    // here 1+ r>
 911+ 9114 7A 86
 912+ 9116 4F 85                        dw      CMOVE                   // cmove
 913+ 9118 A0 8B                        dw      HERE                    // here
 914+ 911A 43 86                        dw      EXIT                    // ;
 915+ 911C
 916+ 911C              //  ______________________________________________________________________
 917+ 911C              //
 918+ 911C              // (.")         --
 919+ 911C              // Direct procedure compiled by ." and  .(  It executes TYPE.
 920+ 911C                              Colon_Def C_DOT_QUOTE, '(.")', is_normal
 920+ 911C             >                New_Def  C_DOT_QUOTE, '(.")', Enter_Ptr, is_normal ; ok
 920+ 911C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 920+ 911C             >
 920+ 911C             >                // dummy db directives used to calculate length of namec
 920+ 911C 28 2E 22 29 >                db      '(.")'
 920+ 9120             >len_NFA         defl    $ - temp_NFA
 920+ 9120             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 920+ 911C             >
 920+ 911C 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 920+ 911D 28 2E 22 29 >                db      '(.")'               // name string in 7-bit ascii, but
 920+ 9121             >                org     $-1                 // alter last byte of Name just above to set
 920+ 9120 A9          >                db      {b $} | END_BIT     // msb as name end
 920+ 9121             >
 920+ 9121 CC 90       >                dw      last_NFA            // Link to previous definition Name
 920+ 9123             >C_DOT_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 920+ 9123 CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 920+ 9126             >
 920+ 9126             >
 920+ 9126             >                endif           ; ok        // for other definitions it "points" the correct handler
 920+ 9126             >                // Use of "; ok" to suppress "warning[fwdref]"
 920+ 9126             >
 920+ 9126             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 921+ 9126 8B 86 35 8F                  dw      R_OP, COUNT             // r count
 922+ 912A 9C 87 ED 86                  dw      DUP, ONE_PLUS           // dup 1+
 923+ 912E 7A 86 C8 86                  dw      R_TO, PLUS, TO_R        // r> + >r  ( advance IP )
 923+ 9132 68 86
 924+ 9134 49 8F                        dw      TYPE                    // type
 925+ 9136 43 86                        dw      EXIT                    // ;
 926+ 9138
 927+ 9138              //  ______________________________________________________________________
 928+ 9138              //
 929+ 9138              // char         -- c
 930+ 9138              // get first character from next input word
 931+ 9138                              Colon_Def CHAR,  "CHAR", is_normal
 931+ 9138             >                New_Def  CHAR, "CHAR", Enter_Ptr, is_normal ; ok
 931+ 9138             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 931+ 9138             >
 931+ 9138             >                // dummy db directives used to calculate length of namec
 931+ 9138 43 48 41 52 >                db      "CHAR"
 931+ 913C             >len_NFA         defl    $ - temp_NFA
 931+ 913C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 931+ 9138             >
 931+ 9138 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 931+ 9139 43 48 41 52 >                db      "CHAR"               // name string in 7-bit ascii, but
 931+ 913D             >                org     $-1                 // alter last byte of Name just above to set
 931+ 913C D2          >                db      {b $} | END_BIT     // msb as name end
 931+ 913D             >
 931+ 913D 1C 91       >                dw      last_NFA            // Link to previous definition Name
 931+ 913F             >CHAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 931+ 913F CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 931+ 9142             >
 931+ 9142             >
 931+ 9142             >                endif           ; ok        // for other definitions it "points" the correct handler
 931+ 9142             >                // Use of "; ok" to suppress "warning[fwdref]"
 931+ 9142             >
 931+ 9142             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 932+ 9142 D0 89 D3 90                  dw      BL, WORD                // bl word
 933+ 9146 ED 86 63 88                  dw      ONE_PLUS, CFETCH        // 1+ c@
 934+ 914A 43 86                        dw      EXIT                    // ;
 935+ 914C
 936+ 914C              //  ______________________________________________________________________
 937+ 914C              //
 938+ 914C              // ,"           --
 939+ 914C              // compiles a string terminated by " as a counted string from next input stream
 940+ 914C                              Colon_Def COMMA_QUOTE,  ',"', is_normal
 940+ 914C             >                New_Def  COMMA_QUOTE, ',"', Enter_Ptr, is_normal ; ok
 940+ 914C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 940+ 914C             >
 940+ 914C             >                // dummy db directives used to calculate length of namec
 940+ 914C 2C 22       >                db      ',"'
 940+ 914E             >len_NFA         defl    $ - temp_NFA
 940+ 914E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 940+ 914C             >
 940+ 914C 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 940+ 914D 2C 22       >                db      ',"'               // name string in 7-bit ascii, but
 940+ 914F             >                org     $-1                 // alter last byte of Name just above to set
 940+ 914E A2          >                db      {b $} | END_BIT     // msb as name end
 940+ 914F             >
 940+ 914F 38 91       >                dw      last_NFA            // Link to previous definition Name
 940+ 9151             >COMMA_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 940+ 9151 CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 940+ 9154             >
 940+ 9154             >
 940+ 9154             >                endif           ; ok        // for other definitions it "points" the correct handler
 940+ 9154             >                // Use of "; ok" to suppress "warning[fwdref]"
 940+ 9154             >
 940+ 9154             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 941+ 9154 41 81 22 00                  dw      LIT, DQUOTE_CHAR        // [char] "
 942+ 9158 D3 90                        dw      WORD                    // word
 943+ 915A 63 88 ED 86                  dw      CFETCH, ONE_PLUS        // c@ 1+
 944+ 915E B1 8B                        dw      ALLOT                   // allot
 945+ 9160 A1 89 D0 8B                  dw      ZERO, CCOMMA            // 0 c,  ( nul-terminated string - useful anyway )
 946+ 9164 43 86                        dw      EXIT
 947+ 9166
 948+ 9166              //  ______________________________________________________________________
 949+ 9166              //
 950+ 9166              // .c           c --
 951+ 9166              // intermediate general purpose string builder, used by ." and .(
 952+ 9166                              Colon_Def DOT_C,  ".C", is_immediate
 952+ 9166             >                New_Def  DOT_C, ".C", Enter_Ptr, is_immediate ; ok
 952+ 9166             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 952+ 9166             >
 952+ 9166             >                // dummy db directives used to calculate length of namec
 952+ 9166 2E 43       >                db      ".C"
 952+ 9168             >len_NFA         defl    $ - temp_NFA
 952+ 9168             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 952+ 9166             >
 952+ 9166 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 952+ 9167 2E 43       >                db      ".C"               // name string in 7-bit ascii, but
 952+ 9169             >                org     $-1                 // alter last byte of Name just above to set
 952+ 9168 C3          >                db      {b $} | END_BIT     // msb as name end
 952+ 9169             >
 952+ 9169 4C 91       >                dw      last_NFA            // Link to previous definition Name
 952+ 916B             >DOT_C:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 952+ 916B CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 952+ 916E             >
 952+ 916E             >
 952+ 916E             >                endif           ; ok        // for other definitions it "points" the correct handler
 952+ 916E             >                // Use of "; ok" to suppress "warning[fwdref]"
 952+ 916E             >
 952+ 916E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 953+ 916E 0B 8B 4C 88                  dw      STATE, FETCH            // state @
 954+ 9172                                                              // if
 955+ 9172 75 81                        dw      ZBRANCH
 956+ 9174 12 00                        dw      Dot_C_Else - $
 957+ 9176 14 8E 23 91                  dw          COMPILE, C_DOT_QUOTE //     compile (.")
 958+ 917A D3 90 63 88                  dw          WORD, CFETCH        //      word c@
 959+ 917E ED 86 B1 8B                  dw          ONE_PLUS, ALLOT     //      1+ allot
 960+ 9182                                                              // else
 961+ 9182 60 81                        dw      BRANCH
 962+ 9184 08 00                        dw      Dot_C_Endif - $
 963+ 9186              Dot_C_Else:
 964+ 9186 D3 90 35 8F                  dw          WORD, COUNT, TYPE   //      word count type
 964+ 918A 49 8F
 965+ 918C              Dot_C_Endif:                                    // endif
 966+ 918C 43 86                        dw      EXIT                    ;
 967+ 918E
 968+ 918E              //  ______________________________________________________________________
 969+ 918E              //
 970+ 918E              // ."           c --
 971+ 918E                              Colon_Def DOT_QUOTE,  '."', is_immediate
 971+ 918E             >                New_Def  DOT_QUOTE, '."', Enter_Ptr, is_immediate ; ok
 971+ 918E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 971+ 918E             >
 971+ 918E             >                // dummy db directives used to calculate length of namec
 971+ 918E 2E 22       >                db      '."'
 971+ 9190             >len_NFA         defl    $ - temp_NFA
 971+ 9190             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 971+ 918E             >
 971+ 918E C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 971+ 918F 2E 22       >                db      '."'               // name string in 7-bit ascii, but
 971+ 9191             >                org     $-1                 // alter last byte of Name just above to set
 971+ 9190 A2          >                db      {b $} | END_BIT     // msb as name end
 971+ 9191             >
 971+ 9191 66 91       >                dw      last_NFA            // Link to previous definition Name
 971+ 9193             >DOT_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 971+ 9193 CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 971+ 9196             >
 971+ 9196             >
 971+ 9196             >                endif           ; ok        // for other definitions it "points" the correct handler
 971+ 9196             >                // Use of "; ok" to suppress "warning[fwdref]"
 971+ 9196             >
 971+ 9196             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 972+ 9196 41 81 22 00                  dw      LIT, DQUOTE_CHAR        // [char] "
 973+ 919A 6B 91                        dw      DOT_C                   // [compile] .c
 974+ 919C 43 86                        dw      EXIT                    // ; immediate
 975+ 919E
 976+ 919E              //  ______________________________________________________________________
 977+ 919E              //
 978+ 919E              // .(           c --
 979+ 919E                              Colon_Def DOT_BRACKET,  ".(", is_immediate
 979+ 919E             >                New_Def  DOT_BRACKET, ".(", Enter_Ptr, is_immediate ; ok
 979+ 919E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 979+ 919E             >
 979+ 919E             >                // dummy db directives used to calculate length of namec
 979+ 919E 2E 28       >                db      ".("
 979+ 91A0             >len_NFA         defl    $ - temp_NFA
 979+ 91A0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 979+ 919E             >
 979+ 919E C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 979+ 919F 2E 28       >                db      ".("               // name string in 7-bit ascii, but
 979+ 91A1             >                org     $-1                 // alter last byte of Name just above to set
 979+ 91A0 A8          >                db      {b $} | END_BIT     // msb as name end
 979+ 91A1             >
 979+ 91A1 8E 91       >                dw      last_NFA            // Link to previous definition Name
 979+ 91A3             >DOT_BRACKET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 979+ 91A3 CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 979+ 91A6             >
 979+ 91A6             >
 979+ 91A6             >                endif           ; ok        // for other definitions it "points" the correct handler
 979+ 91A6             >                // Use of "; ok" to suppress "warning[fwdref]"
 979+ 91A6             >
 979+ 91A6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 980+ 91A6 41 81 29 00                  dw      LIT, ")"                // [char] )
 981+ 91AA 6B 91                        dw      DOT_C                   // [compile] .c
 982+ 91AC 43 86                        dw      EXIT                    // ; immediate
 983+ 91AE
 984+ 91AE              //  ______________________________________________________________________
 985+ 91AE              //
 986+ 91AE              // (sgn)        a -- a f
 987+ 91AE              // determines if char in addr a is a sign (+ or -), and in that case increments
 988+ 91AE              // a flag. Returns f as the sign, true for negative, false for positive.
 989+ 91AE              // called by NUMBER and (EXP)
 990+ 91AE                              Colon_Def CSGN,  "(SGN)", is_normal
 990+ 91AE             >                New_Def  CSGN, "(SGN)", Enter_Ptr, is_normal ; ok
 990+ 91AE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 990+ 91AE             >
 990+ 91AE             >                // dummy db directives used to calculate length of namec
 990+ 91AE 28 53 47 4E >                db      "(SGN)"
 990+ 91B2 29          >
 990+ 91B3             >len_NFA         defl    $ - temp_NFA
 990+ 91B3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 990+ 91AE             >
 990+ 91AE 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 990+ 91AF 28 53 47 4E >                db      "(SGN)"               // name string in 7-bit ascii, but
 990+ 91B3 29          >
 990+ 91B4             >                org     $-1                 // alter last byte of Name just above to set
 990+ 91B3 A9          >                db      {b $} | END_BIT     // msb as name end
 990+ 91B4             >
 990+ 91B4 9E 91       >                dw      last_NFA            // Link to previous definition Name
 990+ 91B6             >CSGN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 990+ 91B6 CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 990+ 91B9             >
 990+ 91B9             >
 990+ 91B9             >                endif           ; ok        // for other definitions it "points" the correct handler
 990+ 91B9             >                // Use of "; ok" to suppress "warning[fwdref]"
 990+ 91B9             >
 990+ 91B9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 991+ 91B9 9C 87 ED 86                  dw      DUP, ONE_PLUS, CFETCH   // dup 1+ c@
 991+ 91BD 63 88
 992+ 91BF 9C 87 41 81                  dw      DUP, LIT, "-", EQUALS   // dup [char] - =
 992+ 91C3 2D 00 02 8C
 993+ 91C7                                                              // if
 994+ 91C7 75 81                        dw      ZBRANCH
 995+ 91C9 12 00                        dw      CSgn_Else_0 - $
 996+ 91CB 6F 87                        dw          DROP                //      drop
 997+ 91CD ED 86                        dw          ONE_PLUS            //      1+
 998+ 91CF AA 89 20 8B                  dw          ONE, DPL, PLUSSTORE //      1 dpl +!
 998+ 91D3 2D 88
 999+ 91D5 AA 89                        dw          ONE                 //      1
1000+ 91D7                                                              // else
1001+ 91D7 60 81                        dw      BRANCH
1002+ 91D9 16 00                        dw      CSgn_Endif_0 - $
1003+ 91DB              CSgn_Else_0:
1004+ 91DB 41 81 2B 00                  dw          LIT, "+", EQUALS    //      [char] + =
1004+ 91DF 02 8C
1005+ 91E1                                                              //      if
1006+ 91E1 75 81                        dw          ZBRANCH
1007+ 91E3 0A 00                        dw          CSgn_Endif_1 - $
1008+ 91E5 ED 86                        dw              ONE_PLUS        //          1+
1009+ 91E7 AA 89 20 8B                  dw              ONE, DPL        //          1 dpl
1010+ 91EB 2D 88                        dw              PLUSSTORE       //          +!
1011+ 91ED              CSgn_Endif_1                                    //      endif
1012+ 91ED A1 89                        dw          ZERO                //      0
1013+ 91EF              CSgn_Endif_0:                                   // endif
1014+ 91EF 43 86                        dw      EXIT
1015+ 91F1
1016+ 91F1              //  ______________________________________________________________________
1017+ 91F1              //
1018+ 91F1              // (number)     d a -- d1 a1
1019+ 91F1              // using the current BASE parse characters stored in address a
1020+ 91F1              // accumulating a double precision integer d
1021+ 91F1              // the process stops at the first not-convertible character
1022+ 91F1              // A double-number is kept in CPU registers as HLDE.
1023+ 91F1              // On the stack a double number is treated as two single numbers
1024+ 91F1              // where HL is on the top of the stack and DE is the second from top,
1025+ 91F1              // so in the stack memory it appears as LHED.
1026+ 91F1              // Instead, in 2VARIABLE a double number is stored as EDLH.
1027+ 91F1                              Colon_Def CNUMBER,  "(NUMBER)", is_normal
1027+ 91F1             >                New_Def  CNUMBER, "(NUMBER)", Enter_Ptr, is_normal ; ok
1027+ 91F1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1027+ 91F1             >
1027+ 91F1             >                // dummy db directives used to calculate length of namec
1027+ 91F1 28 4E 55 4D >                db      "(NUMBER)"
1027+ 91F5 42 45 52 29 >
1027+ 91F9             >len_NFA         defl    $ - temp_NFA
1027+ 91F9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1027+ 91F1             >
1027+ 91F1 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1027+ 91F2 28 4E 55 4D >                db      "(NUMBER)"               // name string in 7-bit ascii, but
1027+ 91F6 42 45 52 29 >
1027+ 91FA             >                org     $-1                 // alter last byte of Name just above to set
1027+ 91F9 A9          >                db      {b $} | END_BIT     // msb as name end
1027+ 91FA             >
1027+ 91FA AE 91       >                dw      last_NFA            // Link to previous definition Name
1027+ 91FC             >CNUMBER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1027+ 91FC CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1027+ 91FF             >
1027+ 91FF             >
1027+ 91FF             >                endif           ; ok        // for other definitions it "points" the correct handler
1027+ 91FF             >                // Use of "; ok" to suppress "warning[fwdref]"
1027+ 91FF             >
1027+ 91FF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1028+ 91FF                                                              // begin
1029+ 91FF              CNumber_Begin:
1030+ 91FF ED 86                        dw          ONE_PLUS            //      1+
1031+ 9201 9C 87 68 86                  dw          DUP, TO_R           //      dup >r
1032+ 9205 63 88                        dw          CFETCH              //      @
1033+ 9207 16 8B 4C 88                  dw          BASE, FETCH         //      base @
1034+ 920B 0F 82                        dw          DIGIT               //      digit
1035+ 920D                                                              // while
1036+ 920D 75 81                        dw      ZBRANCH
1037+ 920F 2C 00                        dw      CNumber_While_end - $
1038+ 9211 91 87                        dw          SWAP                //      swap
1039+ 9213 16 8B 4C 88                  dw          BASE, FETCH         //      base @
1040+ 9217 80 85                        dw          UM_MUL              //      um*
1041+ 9219 6F 87 A7 87                  dw          DROP, ROT           //      drop rot
1042+ 921D 16 8B 4C 88                  dw          BASE, FETCH         //      base @
1043+ 9221 80 85                        dw          UM_MUL              //      um*
1044+ 9223 D3 86                        dw          DPLUS               //      d+
1045+ 9225 20 8B 4C 88                  dw          DPL, FETCH          //      dpl @
1046+ 9229 ED 86                        dw          ONE_PLUS            //      1+
1047+ 922B                                                              //      if
1048+ 922B 75 81                        dw          ZBRANCH
1049+ 922D 08 00                        dw          CNumber_Endif - $
1050+ 922F AA 89 20 8B                  dw              ONE, DPL        //          1 dpl
1051+ 9233 2D 88                        dw              PLUSSTORE       //          +!
1052+ 9235              CNumber_Endif:                                  //      endif
1053+ 9235 7A 86                        dw             R_TO             //      r>  ( balance rp )
1054+ 9237 60 81                        dw      BRANCH
1055+ 9239 C6 FF                        dw      CNumber_Begin - $
1056+ 923B              CNumber_While_end:                              // repeat
1057+ 923B 7A 86                        dw      R_TO                    // r>  ( balance rp on exit while-repeat )
1058+ 923D 43 86                        dw      EXIT                    // ;
1059+ 923F
1060+ 923F              //  ______________________________________________________________________
1061+ 923F              //
1062+ 923F              // number       a -- d
1063+ 923F                              Colon_Def NUMBER,  "NUMBER", is_normal
1063+ 923F             >                New_Def  NUMBER, "NUMBER", Enter_Ptr, is_normal ; ok
1063+ 923F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1063+ 923F             >
1063+ 923F             >                // dummy db directives used to calculate length of namec
1063+ 923F 4E 55 4D 42 >                db      "NUMBER"
1063+ 9243 45 52       >
1063+ 9245             >len_NFA         defl    $ - temp_NFA
1063+ 9245             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1063+ 923F             >
1063+ 923F 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1063+ 9240 4E 55 4D 42 >                db      "NUMBER"               // name string in 7-bit ascii, but
1063+ 9244 45 52       >
1063+ 9246             >                org     $-1                 // alter last byte of Name just above to set
1063+ 9245 D2          >                db      {b $} | END_BIT     // msb as name end
1063+ 9246             >
1063+ 9246 F1 91       >                dw      last_NFA            // Link to previous definition Name
1063+ 9248             >NUMBER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1063+ 9248 CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1063+ 924B             >
1063+ 924B             >
1063+ 924B             >                endif           ; ok        // for other definitions it "points" the correct handler
1063+ 924B             >                // Use of "; ok" to suppress "warning[fwdref]"
1063+ 924B             >
1063+ 924B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1064+ 924B A1 89 A1 89                  dw      ZERO, ZERO              // 0 0
1065+ 924F A7 87                        dw      ROT                     // rot
1066+ 9251 B6 91 68 86                  dw      CSGN, TO_R              // (sgn) >r
1067+ 9255 C6 89 20 8B                  dw      NEG_ONE, DPL, STORE     // -1 dpl !
1067+ 9259 57 88
1068+ 925B FC 91                        dw      CNUMBER                 // (number)
1069+ 925D 9C 87 63 88                  dw      DUP, CFETCH             // dup c@
1070+ 9261 41 81 2E 00                  dw      LIT, 46, EQUALS         // [char] . =  ( decimal point )
1070+ 9265 02 8C
1071+ 9267                                                              // if
1072+ 9267 75 81                        dw      ZBRANCH
1073+ 9269 0A 00                        dw      Number_Endif_1 - $
1074+ 926B A1 89 20 8B                  dw          ZERO, DPL, STORE    //      0 dpl !
1074+ 926F 57 88
1075+ 9271 FC 91                        dw          CNUMBER             //      (number)
1076+ 9273              Number_Endif_1:                                 // endif
1077+ 9273 63 88 D0 89                  dw      CFETCH, BL              // c@ bl
1078+ 9277 F6 8B A1 89                  dw      SUBTRACT, ZERO, QERROR  // - 0 ?error
1078+ 927B 7B 8D
1079+ 927D 7A 86                        dw      R_TO                    // r>
1080+ 927F                                                              // if
1081+ 927F 75 81                        dw      ZBRANCH
1082+ 9281 04 00                        dw      Number_Endif_2 - $
1083+ 9283 45 87                        dw          DMINUS              //      dminus
1084+ 9285              Number_Endif_2:                                 // endif
1085+ 9285 43 86                        dw      EXIT                    // ;
1086+ 9287
1087+ 9287              //  ______________________________________________________________________
1088+ 9287              //
1089+ 9287              // -find        a -- d
1090+ 9287                              Colon_Def LFIND,  "-FIND", is_normal
1090+ 9287             >                New_Def  LFIND, "-FIND", Enter_Ptr, is_normal ; ok
1090+ 9287             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1090+ 9287             >
1090+ 9287             >                // dummy db directives used to calculate length of namec
1090+ 9287 2D 46 49 4E >                db      "-FIND"
1090+ 928B 44          >
1090+ 928C             >len_NFA         defl    $ - temp_NFA
1090+ 928C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1090+ 9287             >
1090+ 9287 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1090+ 9288 2D 46 49 4E >                db      "-FIND"               // name string in 7-bit ascii, but
1090+ 928C 44          >
1090+ 928D             >                org     $-1                 // alter last byte of Name just above to set
1090+ 928C C4          >                db      {b $} | END_BIT     // msb as name end
1090+ 928D             >
1090+ 928D 3F 92       >                dw      last_NFA            // Link to previous definition Name
1090+ 928F             >LFIND:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1090+ 928F CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1090+ 9292             >
1090+ 9292             >
1090+ 9292             >                endif           ; ok        // for other definitions it "points" the correct handler
1090+ 9292             >                // Use of "; ok" to suppress "warning[fwdref]"
1090+ 9292             >
1090+ 9292             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1091+ 9292 D0 89 D3 90                  dw      BL, WORD                // bl word
1092+ 9296 F1 8A 4C 88                  dw      CONTEXT, FETCH, FETCH   // context @ @
1092+ 929A 4C 88
1093+ 929C 7C 82                        dw      C_FIND                  // (find)
1094+ 929E 8A 8C                        dw      QDUP                    // ?dup
1095+ 92A0 93 86                        dw      ZEQUAL                  // 0=
1096+ 92A2                                                              // if
1097+ 92A2 75 81                        dw      ZBRANCH
1098+ 92A4 08 00                        dw      LFind_Endif - $
1099+ 92A6 A0 8B                        dw          HERE                //      here
1100+ 92A8 EB 8C                        dw          LATEST              //      latest
1101+ 92AA 7C 82                        dw          C_FIND              //      (find)
1102+ 92AC              LFind_Endif:                                    // endif
1103+ 92AC 43 86                        dw      EXIT                    // ;
1104+ 92AE
1105+ 92AE              //  ______________________________________________________________________
1106+ 92AE              //
1107+ 92AE              // (abort)      --
1108+ 92AE                              Colon_Def CABORT,  "(ABORT)", is_normal
1108+ 92AE             >                New_Def  CABORT, "(ABORT)", Enter_Ptr, is_normal ; ok
1108+ 92AE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1108+ 92AE             >
1108+ 92AE             >                // dummy db directives used to calculate length of namec
1108+ 92AE 28 41 42 4F >                db      "(ABORT)"
1108+ 92B2 52 54 29    >
1108+ 92B5             >len_NFA         defl    $ - temp_NFA
1108+ 92B5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1108+ 92AE             >
1108+ 92AE 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1108+ 92AF 28 41 42 4F >                db      "(ABORT)"               // name string in 7-bit ascii, but
1108+ 92B3 52 54 29    >
1108+ 92B6             >                org     $-1                 // alter last byte of Name just above to set
1108+ 92B5 A9          >                db      {b $} | END_BIT     // msb as name end
1108+ 92B6             >
1108+ 92B6 87 92       >                dw      last_NFA            // Link to previous definition Name
1108+ 92B8             >CABORT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1108+ 92B8 CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1108+ 92BB             >
1108+ 92BB             >
1108+ 92BB             >                endif           ; ok        // for other definitions it "points" the correct handler
1108+ 92BB             >                // Use of "; ok" to suppress "warning[fwdref]"
1108+ 92BB             >
1108+ 92BB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1109+ 92BB 94 95                        dw      ABORT                   // abort
1110+ 92BD 43 86                        dw      EXIT                    // ;
1111+ 92BF
1112+ 92BF              //  ______________________________________________________________________
1113+ 92BF              //
1114+ 92BF              // error        n --
1115+ 92BF              // raise an error
1116+ 92BF              // if WARNING is 0, prints "MSG#n".
1117+ 92BF              // if WARNING is 1, prints line n of screen 4.
1118+ 92BF              // if WARNING is -1 does (ABORT) that normally does ABORT
1119+ 92BF              // value can be negative or beyond block 4.
1120+ 92BF                              Colon_Def ERROR,  "ERROR", is_normal
1120+ 92BF             >                New_Def  ERROR, "ERROR", Enter_Ptr, is_normal ; ok
1120+ 92BF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1120+ 92BF             >
1120+ 92BF             >                // dummy db directives used to calculate length of namec
1120+ 92BF 45 52 52 4F >                db      "ERROR"
1120+ 92C3 52          >
1120+ 92C4             >len_NFA         defl    $ - temp_NFA
1120+ 92C4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1120+ 92BF             >
1120+ 92BF 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1120+ 92C0 45 52 52 4F >                db      "ERROR"               // name string in 7-bit ascii, but
1120+ 92C4 52          >
1120+ 92C5             >                org     $-1                 // alter last byte of Name just above to set
1120+ 92C4 D2          >                db      {b $} | END_BIT     // msb as name end
1120+ 92C5             >
1120+ 92C5 AE 92       >                dw      last_NFA            // Link to previous definition Name
1120+ 92C7             >ERROR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1120+ 92C7 CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1120+ 92CA             >
1120+ 92CA             >
1120+ 92CA             >                endif           ; ok        // for other definitions it "points" the correct handler
1120+ 92CA             >                // Use of "; ok" to suppress "warning[fwdref]"
1120+ 92CA             >
1120+ 92CA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1121+ 92CA 5C 8A 4C 88                  dw      WARNING, FETCH, ZLESS   // warning @ 0<
1121+ 92CE A4 86
1122+ 92D0                                                              // if
1123+ 92D0 75 81                        dw      ZBRANCH
1124+ 92D2 04 00                        dw      Error_Endif_1 - $
1125+ 92D4 B8 92                        dw          CABORT              //      (abort)
1126+ 92D6              Error_Endif_1:                                  // endif
1127+ 92D6 A0 8B 35 8F                  dw      HERE, COUNT, TYPE       // here count type
1127+ 92DA 49 8F
1128+ 92DC 23 91                        dw      C_DOT_QUOTE             // .( ? )
1129+ 92DE 02 3F 20                     db      2, "? "
1130+ 92E1 9D 97                        dw      MESSAGE                 // message  ( forward )
1131+ 92E3 2F 8A 4C 88                  dw      S0, FETCH, SPSTORE      // s0 @ sp!
1131+ 92E7 22 86
1132+ 92E9 B8 8A 4C 88                  dw      BLK, FETCH, LDUP        // blk @ -dup
1132+ 92ED 7A 8C
1133+ 92EF                                                              // if
1134+ 92EF 75 81                        dw      ZBRANCH
1135+ 92F1 08 00                        dw      Error_Endif_2 - $
1136+ 92F3 C2 8A 4C 88                  dw          TO_IN, FETCH, SWAP  //      >in @ swap
1136+ 92F7 91 87
1137+ 92F9              Error_Endif_2:                                  // endif
1138+ 92F9 5A 95                        dw      QUIT                    // quit ( forward )
1139+ 92FB 43 86                        dw      EXIT                    // ;
1140+ 92FD              //  ______________________________________________________________________
1141+ 92FD              //
1142+ 92FD              // id.          nfa --
1143+ 92FD                              Colon_Def ID_DOT,  "ID.", is_normal
1143+ 92FD             >                New_Def  ID_DOT, "ID.", Enter_Ptr, is_normal ; ok
1143+ 92FD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1143+ 92FD             >
1143+ 92FD             >                // dummy db directives used to calculate length of namec
1143+ 92FD 49 44 2E    >                db      "ID."
1143+ 9300             >len_NFA         defl    $ - temp_NFA
1143+ 9300             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1143+ 92FD             >
1143+ 92FD 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1143+ 92FE 49 44 2E    >                db      "ID."               // name string in 7-bit ascii, but
1143+ 9301             >                org     $-1                 // alter last byte of Name just above to set
1143+ 9300 AE          >                db      {b $} | END_BIT     // msb as name end
1143+ 9301             >
1143+ 9301 BF 92       >                dw      last_NFA            // Link to previous definition Name
1143+ 9303             >ID_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1143+ 9303 CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1143+ 9306             >
1143+ 9306             >
1143+ 9306             >                endif           ; ok        // for other definitions it "points" the correct handler
1143+ 9306             >                // Use of "; ok" to suppress "warning[fwdref]"
1143+ 9306             >
1143+ 9306             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1144+ 9306 BF 90 41 81                  dw      PAD, LIT, 32, LIT, 96   // pad 32 96
1144+ 930A 20 00 41 81
1144+ 930E 60 00
1145+ 9310 6D 90                        dw      FILL                    // fill
1146+ 9312 9C 87 2F 8D                  dw      DUP, PFA, LFA           // dup pfa lfa
1146+ 9316 FC 8C
1147+ 9318 61 87 F6 8B                  dw      OVER, SUBTRACT          // over -
1148+ 931C BF 90 91 87                  dw      PAD, SWAP               // pad swap
1149+ 9320 4F 85                        dw      CMOVE                   // cmove
1150+ 9322 BF 90 35 8F                  dw      PAD, COUNT, LIT, $1F    // pad count 01F
1150+ 9326 41 81 1F 00
1151+ 932A E3 85                        dw      AND_OP                  // and  ( use only lower bits )
1152+ 932C 49 8F B1 8C                  dw      TYPE, SPACE             // type
1153+ 9330 43 86                        dw      EXIT                    // ;
1154+ 9332
1155+ 9332              //  ______________________________________________________________________
1156+ 9332              //
1157+ 9332              // code         -- cccc
1158+ 9332                              Colon_Def CODE,  "CODE", is_normal
1158+ 9332             >                New_Def  CODE, "CODE", Enter_Ptr, is_normal ; ok
1158+ 9332             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1158+ 9332             >
1158+ 9332             >                // dummy db directives used to calculate length of namec
1158+ 9332 43 4F 44 45 >                db      "CODE"
1158+ 9336             >len_NFA         defl    $ - temp_NFA
1158+ 9336             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1158+ 9332             >
1158+ 9332 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1158+ 9333 43 4F 44 45 >                db      "CODE"               // name string in 7-bit ascii, but
1158+ 9337             >                org     $-1                 // alter last byte of Name just above to set
1158+ 9336 C5          >                db      {b $} | END_BIT     // msb as name end
1158+ 9337             >
1158+ 9337 FD 92       >                dw      last_NFA            // Link to previous definition Name
1158+ 9339             >CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1158+ 9339 CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1158+ 933C             >
1158+ 933C             >
1158+ 933C             >                endif           ; ok        // for other definitions it "points" the correct handler
1158+ 933C             >                // Use of "; ok" to suppress "warning[fwdref]"
1158+ 933C             >
1158+ 933C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1159+ 933C 8F 92                        dw      LFIND                   // -find
1160+ 933E                                                              // if
1161+ 933E 75 81                        dw      ZBRANCH
1162+ 9340 10 00                        dw      Code_Endif - $
1163+ 9342 6F 87                        dw          DROP                //      drop
1164+ 9344 57 8D 03 93                  dw          TO_NAME, ID_DOT     //      >name id.
1165+ 9348 41 81 04 00                  dw          LIT, 4, MESSAGE     //      4 message
1165+ 934C 9D 97
1166+ 934E B1 8C                        dw          SPACE               //      space
1167+ 9350              Code_Endif:                                     // endif
1168+ 9350 A0 8B                        dw      HERE                    // here
1169+ 9352                                                              // ( ---- here begins NFA ---- )
1170+ 9352 9C 87 63 88                  dw      DUP, CFETCH             // dup c@
1171+ 9356 4E 8A 4C 88                  dw      WIDTH, FETCH, MIN       // width @ min  ( max 31 character length )
1171+ 935A 4B 8C
1172+ 935C ED 86 B1 8B                  dw      ONE_PLUS, ALLOT         // 1+ allot
1173+ 9360 9C 87                        dw      DUP                     // dup
1174+ 9362 41 81                        dw      LIT
1175+ 9364 A0 00                        dw      SMUDGE_BIT | END_BIT    // 160
1176+ 9366 41 88                        dw      TOGGLE                  // toggle
1177+ 9368 A0 8B F7 86                  dw      HERE, ONE_SUBTRACT      // here 1- ( last character )
1178+ 936C 41 81 80 00                  dw      LIT, END_BIT, TOGGLE    // 128 toggle
1178+ 9370 41 88
1179+ 9372                                                              // ( ---- here is LFA ---- )
1180+ 9372 EB 8C BE 8B                  dw      LATEST, COMMA           // latest ,
1181+ 9376 FF 8A 4C 88                  dw      CURRENT, FETCH, STORE   // current @ ! ( save this word as the latest )
1181+ 937A 57 88
1182+ 937C A0 8B 0F 87                  dw      HERE, CELL_PLUS, COMMA  // ( CFA point PFA )
1182+ 9380 BE 8B
1183+ 9382 43 86                        dw      EXIT                    // ;
1184+ 9384
1185+ 9384              //  ______________________________________________________________________
1186+ 9384              //
1187+ 9384              // create       -- cccc     ( compile time )
1188+ 9384              //              -- a        ( run time )
1189+ 9384                              Colon_Def CREATE,  "CREATE", is_normal
1189+ 9384             >                New_Def  CREATE, "CREATE", Enter_Ptr, is_normal ; ok
1189+ 9384             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1189+ 9384             >
1189+ 9384             >                // dummy db directives used to calculate length of namec
1189+ 9384 43 52 45 41 >                db      "CREATE"
1189+ 9388 54 45       >
1189+ 938A             >len_NFA         defl    $ - temp_NFA
1189+ 938A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1189+ 9384             >
1189+ 9384 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1189+ 9385 43 52 45 41 >                db      "CREATE"               // name string in 7-bit ascii, but
1189+ 9389 54 45       >
1189+ 938B             >                org     $-1                 // alter last byte of Name just above to set
1189+ 938A C5          >                db      {b $} | END_BIT     // msb as name end
1189+ 938B             >
1189+ 938B 32 93       >                dw      last_NFA            // Link to previous definition Name
1189+ 938D             >CREATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1189+ 938D CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1189+ 9390             >
1189+ 9390             >
1189+ 9390             >                endif           ; ok        // for other definitions it "points" the correct handler
1189+ 9390             >                // Use of "; ok" to suppress "warning[fwdref]"
1189+ 9390             >
1189+ 9390             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1190+ 9390 39 93 50 8E                  dw      CODE, SMUDGE        // code smudge
1191+ 9394
1192+ 9394
1193+ 9394 AA 8E                        dw      C_SEMICOLON_CODE
1194+ 9396                              // this routine is called from the call coded in CFA
1195+ 9396              Create_Ptr:
1196+ 9396
1197+ 9396
1198+ 9396
1199+ 9396                              next
1199+ 9396 DD E9       >                jp      (ix)
1200+ 9398
1201+ 9398              //  ______________________________________________________________________
1202+ 9398              //
1203+ 9398              // [compile]    -- cccc     ( compile time )
1204+ 9398                              Colon_Def COMPILE_IMMEDIATE,  "[COMPILE]", is_immediate
1204+ 9398             >                New_Def  COMPILE_IMMEDIATE, "[COMPILE]", Enter_Ptr, is_immediate ; ok
1204+ 9398             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1204+ 9398             >
1204+ 9398             >                // dummy db directives used to calculate length of namec
1204+ 9398 5B 43 4F 4D >                db      "[COMPILE]"
1204+ 939C 50 49 4C 45 >
1204+ 93A0 5D          >
1204+ 93A1             >len_NFA         defl    $ - temp_NFA
1204+ 93A1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1204+ 9398             >
1204+ 9398 C9          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1204+ 9399 5B 43 4F 4D >                db      "[COMPILE]"               // name string in 7-bit ascii, but
1204+ 939D 50 49 4C 45 >
1204+ 93A1 5D          >
1204+ 93A2             >                org     $-1                 // alter last byte of Name just above to set
1204+ 93A1 DD          >                db      {b $} | END_BIT     // msb as name end
1204+ 93A2             >
1204+ 93A2 84 93       >                dw      last_NFA            // Link to previous definition Name
1204+ 93A4             >COMPILE_IMMEDIATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1204+ 93A4 CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1204+ 93A7             >
1204+ 93A7             >
1204+ 93A7             >                endif           ; ok        // for other definitions it "points" the correct handler
1204+ 93A7             >                // Use of "; ok" to suppress "warning[fwdref]"
1204+ 93A7             >
1204+ 93A7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1205+ 93A7 8F 92                        dw      LFIND                   // -find      (  cfa  b  f  )
1206+ 93A9 93 86                        dw      ZEQUAL                  // 0=         (  cfa  b  )
1207+ 93AB A1 89 7B 8D                  dw      ZERO, QERROR            // 0 ?error
1208+ 93AF 6F 87                        dw      DROP                    // drop       (  cfa  )
1209+ 93B1 BE 8B                        dw      COMMA                   // ,
1210+ 93B3 43 86                        dw      EXIT                    // ; immediate
1211+ 93B5
1212+ 93B5              //  ______________________________________________________________________
1213+ 93B5              //
1214+ 93B5              // literal      n --      ( compile time )
1215+ 93B5                              Colon_Def LITERAL,  "LITERAL", is_immediate
1215+ 93B5             >                New_Def  LITERAL, "LITERAL", Enter_Ptr, is_immediate ; ok
1215+ 93B5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1215+ 93B5             >
1215+ 93B5             >                // dummy db directives used to calculate length of namec
1215+ 93B5 4C 49 54 45 >                db      "LITERAL"
1215+ 93B9 52 41 4C    >
1215+ 93BC             >len_NFA         defl    $ - temp_NFA
1215+ 93BC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1215+ 93B5             >
1215+ 93B5 C7          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1215+ 93B6 4C 49 54 45 >                db      "LITERAL"               // name string in 7-bit ascii, but
1215+ 93BA 52 41 4C    >
1215+ 93BD             >                org     $-1                 // alter last byte of Name just above to set
1215+ 93BC CC          >                db      {b $} | END_BIT     // msb as name end
1215+ 93BD             >
1215+ 93BD 98 93       >                dw      last_NFA            // Link to previous definition Name
1215+ 93BF             >LITERAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1215+ 93BF CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1215+ 93C2             >
1215+ 93C2             >
1215+ 93C2             >                endif           ; ok        // for other definitions it "points" the correct handler
1215+ 93C2             >                // Use of "; ok" to suppress "warning[fwdref]"
1215+ 93C2             >
1215+ 93C2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1216+ 93C2 0B 8B 4C 88                  dw      STATE, FETCH            // state @
1217+ 93C6                                                              // if
1218+ 93C6 75 81                        dw      ZBRANCH
1219+ 93C8 08 00                        dw      Literal_Endif - $
1220+ 93CA 14 8E 41 81                  dw          COMPILE, LIT        //      compile lit
1221+ 93CE BE 8B                        dw          COMMA               //      ,
1222+ 93D0              Literal_Endif:                                  // endif
1223+ 93D0 43 86                        dw      EXIT                    // ; immediate
1224+ 93D2
1225+ 93D2              //  ______________________________________________________________________
1226+ 93D2              //
1227+ 93D2              // dliteral     n --      ( compile time )
1228+ 93D2                              Colon_Def DLITERAL,  "DLITERAL", is_immediate
1228+ 93D2             >                New_Def  DLITERAL, "DLITERAL", Enter_Ptr, is_immediate ; ok
1228+ 93D2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1228+ 93D2             >
1228+ 93D2             >                // dummy db directives used to calculate length of namec
1228+ 93D2 44 4C 49 54 >                db      "DLITERAL"
1228+ 93D6 45 52 41 4C >
1228+ 93DA             >len_NFA         defl    $ - temp_NFA
1228+ 93DA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1228+ 93D2             >
1228+ 93D2 C8          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1228+ 93D3 44 4C 49 54 >                db      "DLITERAL"               // name string in 7-bit ascii, but
1228+ 93D7 45 52 41 4C >
1228+ 93DB             >                org     $-1                 // alter last byte of Name just above to set
1228+ 93DA CC          >                db      {b $} | END_BIT     // msb as name end
1228+ 93DB             >
1228+ 93DB B5 93       >                dw      last_NFA            // Link to previous definition Name
1228+ 93DD             >DLITERAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1228+ 93DD CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1228+ 93E0             >
1228+ 93E0             >
1228+ 93E0             >                endif           ; ok        // for other definitions it "points" the correct handler
1228+ 93E0             >                // Use of "; ok" to suppress "warning[fwdref]"
1228+ 93E0             >
1228+ 93E0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1229+ 93E0 0B 8B 4C 88                  dw      STATE, FETCH            // state @
1230+ 93E4                                                              // if
1231+ 93E4 75 81                        dw      ZBRANCH
1232+ 93E6 08 00                        dw      DLiteral_Endif - $
1233+ 93E8 91 87                        dw          SWAP                //      swap
1234+ 93EA BF 93 BF 93                  dw          LITERAL,  LITERAL   //      [compile] literal [compile] literal
1235+ 93EE              DLiteral_Endif:                                 // endif
1236+ 93EE 43 86                        dw      EXIT                    // ; immediate
1237+ 93F0
1238+ 93F0              //  ______________________________________________________________________
1239+ 93F0              //
1240+ 93F0              // [char]       n --      ( compile time )
1241+ 93F0              // inside colon definition, gets first character from next input word
1242+ 93F0              // and compiles it as literal.
1243+ 93F0                              Colon_Def COMPILE_CHAR,  "[CHAR]", is_immediate
1243+ 93F0             >                New_Def  COMPILE_CHAR, "[CHAR]", Enter_Ptr, is_immediate ; ok
1243+ 93F0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1243+ 93F0             >
1243+ 93F0             >                // dummy db directives used to calculate length of namec
1243+ 93F0 5B 43 48 41 >                db      "[CHAR]"
1243+ 93F4 52 5D       >
1243+ 93F6             >len_NFA         defl    $ - temp_NFA
1243+ 93F6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1243+ 93F0             >
1243+ 93F0 C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1243+ 93F1 5B 43 48 41 >                db      "[CHAR]"               // name string in 7-bit ascii, but
1243+ 93F5 52 5D       >
1243+ 93F7             >                org     $-1                 // alter last byte of Name just above to set
1243+ 93F6 DD          >                db      {b $} | END_BIT     // msb as name end
1243+ 93F7             >
1243+ 93F7 D2 93       >                dw      last_NFA            // Link to previous definition Name
1243+ 93F9             >COMPILE_CHAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1243+ 93F9 CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1243+ 93FC             >
1243+ 93FC             >
1243+ 93FC             >                endif           ; ok        // for other definitions it "points" the correct handler
1243+ 93FC             >                // Use of "; ok" to suppress "warning[fwdref]"
1243+ 93FC             >
1243+ 93FC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1244+ 93FC 3F 91 BF 93                  dw      CHAR, LITERAL           // char [compile] literal
1245+ 9400 43 86                        dw      EXIT                    // ; immediate
1246+ 9402
1247+ 9402              //  ______________________________________________________________________
1248+ 9402              //
1249+ 9402              // 0x00         n --      ( compile time )
1250+ 9402                              Colon_Def NUL_WORD,  $00, is_immediate
1250+ 9402             >                New_Def  NUL_WORD, $00, Enter_Ptr, is_immediate ; ok
1250+ 9402             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1250+ 9402             >
1250+ 9402             >                // dummy db directives used to calculate length of namec
1250+ 9402 00          >                db      $00
1250+ 9403             >len_NFA         defl    $ - temp_NFA
1250+ 9403             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1250+ 9402             >
1250+ 9402 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1250+ 9403 00          >                db      $00               // name string in 7-bit ascii, but
1250+ 9404             >                org     $-1                 // alter last byte of Name just above to set
1250+ 9403 80          >                db      {b $} | END_BIT     // msb as name end
1250+ 9404             >
1250+ 9404 F0 93       >                dw      last_NFA            // Link to previous definition Name
1250+ 9406             >NUL_WORD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1250+ 9406 CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1250+ 9409             >
1250+ 9409             >
1250+ 9409             >                endif           ; ok        // for other definitions it "points" the correct handler
1250+ 9409             >                // Use of "; ok" to suppress "warning[fwdref]"
1250+ 9409             >
1250+ 9409             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1251+ 9409 B8 8A 4C 88                  dw      BLK, FETCH, ONE         // blk @ 1
1251+ 940D AA 89
1252+ 940F 3C 8C                        dw      GREATER                 // > if
1253+ 9411                                                              // if
1254+ 9411 75 81                        dw      ZBRANCH
1255+ 9413 28 00                        dw      Nul_Else_1 - $
1256+ 9415 AA 89 B8 8A                  dw          ONE, BLK, PLUSSTORE //      1 blk +!
1256+ 9419 2D 88
1257+ 941B A1 89 C2 8A                  dw          ZERO, TO_IN, STORE  //      0 >in !
1257+ 941F 57 88
1258+ 9421 B8 8A 4C 88                  dw          BLK, FETCH          //      blk @
1259+ 9425 F5 89                        dw          BSCR                //      b/scr
1260+ 9427 F7 86                        dw          ONE_SUBTRACT        //      1 -
1261+ 9429 E3 85                        dw          AND_OP              //      and  ( this is tricky )
1262+ 942B 93 86                        dw          ZEQUAL              //      0=
1263+ 942D                                                              //      if
1264+ 942D 75 81                        dw          ZBRANCH
1265+ 942F 08 00                        dw          Nul_Endif_2 - $
1266+ 9431 AF 8D                        dw              QEXEC           //          ?exec
1267+ 9433 7A 86 6F 87                  dw              R_TO, DROP      //          r> drop
1268+ 9437              Nul_Endif_2:                                    //      endif
1269+ 9437 60 81                        dw      BRANCH
1270+ 9439 06 00                        dw      Nul_Endif_1 - $
1271+ 943B              Nul_Else_1:                                     // else
1272+ 943B 7A 86 6F 87                  dw          R_TO, DROP          //      r> drop
1273+ 943F              Nul_Endif_1:                                    // endif
1274+ 943F 43 86                        dw      EXIT                    // ;
1275+ 9441
1276+ 9441              //  ______________________________________________________________________
1277+ 9441              //
1278+ 9441              // ?stack       --
1279+ 9441              // Raise error #1 if stack is empty and you pop it
1280+ 9441              // Raise error #7 if stack is full.
1281+ 9441              // This means SP must always stay between HERE and FFFF
1282+ 9441              // For 128K BANK paging purpose SP must be <= BFE0 and 50 words room
1283+ 9441              // for Next 8K MMU paging this is $DOE8
1284+ 9441                              Colon_Def QSTACK, "?STACK", is_normal
1284+ 9441             >                New_Def  QSTACK, "?STACK", Enter_Ptr, is_normal ; ok
1284+ 9441             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1284+ 9441             >
1284+ 9441             >                // dummy db directives used to calculate length of namec
1284+ 9441 3F 53 54 41 >                db      "?STACK"
1284+ 9445 43 4B       >
1284+ 9447             >len_NFA         defl    $ - temp_NFA
1284+ 9447             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1284+ 9441             >
1284+ 9441 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1284+ 9442 3F 53 54 41 >                db      "?STACK"               // name string in 7-bit ascii, but
1284+ 9446 43 4B       >
1284+ 9448             >                org     $-1                 // alter last byte of Name just above to set
1284+ 9447 CB          >                db      {b $} | END_BIT     // msb as name end
1284+ 9448             >
1284+ 9448 02 94       >                dw      last_NFA            // Link to previous definition Name
1284+ 944A             >QSTACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1284+ 944A CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1284+ 944D             >
1284+ 944D             >
1284+ 944D             >                endif           ; ok        // for other definitions it "points" the correct handler
1284+ 944D             >                // Use of "; ok" to suppress "warning[fwdref]"
1284+ 944D             >
1284+ 944D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1285+ 944D 15 86                        dw      SPFETCH                 // sp@
1286+ 944F 2F 8A 4C 88                  dw      S0, FETCH               // s0 @
1287+ 9453 91 87 10 8C                  dw      SWAP, ULESS             // swap u<
1288+ 9457 AA 89 7B 8D                  dw      ONE, QERROR             // 1 ?error
1289+ 945B A0 8B                        dw      HERE                    // here
1290+ 945D 2F 8A 4C 88                  dw      S0, FETCH, LESS         // s0 @ <
1290+ 9461 22 8C
1291+ 9463                                                              // if
1292+ 9463 75 81                        dw      ZBRANCH
1293+ 9465 14 00                        dw      QStack_Endif - $
1294+ 9467 15 86                        dw          SPFETCH             //      sp@
1295+ 9469 A0 8B 41 81                  dw          HERE, LIT, 128      //      here 128
1295+ 946D 80 00
1296+ 946F C8 86 10 8C                  dw          PLUS, ULESS         //      plus u<
1297+ 9473 41 81 07 00                  dw          LIT, 7, QERROR      //      7 Cerror
1297+ 9477 7B 8D
1298+ 9479              QStack_Endif:                                   // endif
1299+ 9479 43 86                        dw      EXIT                    // ;
1300+ 947B
1301+ 947B
# file closed: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/L1.asm
  91  947B                              include "L2.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/L2.asm
   1+ 947B              //  ______________________________________________________________________
   2+ 947B              //
   3+ 947B              //  L2.asm
   4+ 947B              //
   5+ 947B              //  Level-2
   6+ 947B              //  the Forth interpreter, vocabulary, cold/warm start and quit from Forth.
   7+ 947B              //  ______________________________________________________________________
   8+ 947B
   9+ 947B
  10+ 947B              //  ______________________________________________________________________
  11+ 947B              //
  12+ 947B              // interpret    --
  13+ 947B              // This is the text interpreter.
  14+ 947B              // It executes or compiles, depending on STATE, the text coming from
  15+ 947B              // current input stream.
  16+ 947B              // If the word search fails after parsing CONTEXT and CURRENT vocabulary,
  17+ 947B              // the word is interpreted as numeric and converted, using current BASE,
  18+ 947B              // leaving on top of stack a single or double precision number, depending
  19+ 947B              // on the presence of a decimal point.
  20+ 947B              // If the number conversion fails, the terminal is notified with ? followed
  21+ 947B              // by the offending word.
  22+ 947B                              Colon_Def INTERPRET, "INTERPRET", is_normal
  22+ 947B             >                New_Def  INTERPRET, "INTERPRET", Enter_Ptr, is_normal ; ok
  22+ 947B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  22+ 947B             >
  22+ 947B             >                // dummy db directives used to calculate length of namec
  22+ 947B 49 4E 54 45 >                db      "INTERPRET"
  22+ 947F 52 50 52 45 >
  22+ 9483 54          >
  22+ 9484             >len_NFA         defl    $ - temp_NFA
  22+ 9484             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  22+ 947B             >
  22+ 947B 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  22+ 947C 49 4E 54 45 >                db      "INTERPRET"               // name string in 7-bit ascii, but
  22+ 9480 52 50 52 45 >
  22+ 9484 54          >
  22+ 9485             >                org     $-1                 // alter last byte of Name just above to set
  22+ 9484 D4          >                db      {b $} | END_BIT     // msb as name end
  22+ 9485             >
  22+ 9485 41 94       >                dw      last_NFA            // Link to previous definition Name
  22+ 9487             >INTERPRET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  22+ 9487 CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  22+ 948A             >
  22+ 948A             >
  22+ 948A             >                endif           ; ok        // for other definitions it "points" the correct handler
  22+ 948A             >                // Use of "; ok" to suppress "warning[fwdref]"
  22+ 948A             >
  22+ 948A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  23+ 948A
  24+ 948A              Interpret_Begin:                                        // begin
  25+ 948A 8F 92                        dw          LFIND                       //      -find
  26+ 948C                                                                      //      if
  27+ 948C 75 81                        dw          ZBRANCH
  28+ 948E 1A 00                        dw          Interpret_Else_1 - $
  29+ 9490 0B 8B 4C 88                  dw              STATE, FETCH, LESS      //          state @ <
  29+ 9494 22 8C
  30+ 9496                                                                      //          if
  31+ 9496 75 81                        dw              ZBRANCH
  32+ 9498 08 00                        dw              Interpret_Else_2 - $
  33+ 949A BE 8B                        dw                  COMMA               //              ,
  34+ 949C                                                                      //          else
  35+ 949C 60 81                        dw              BRANCH
  36+ 949E 06 00                        dw              Interpret_Endif_2 - $
  37+ 94A0              Interpret_Else_2:
  38+ 94A0 54 81 4E 89                  dw                  EXECUTE, NOOP       //              execute nooop
  39+ 94A4              Interpret_Endif_2:                                      //          endif
  40+ 94A4                                                                      //      else
  41+ 94A4 60 81                        dw          BRANCH
  42+ 94A6 28 00                        dw          Interpret_Endif_1 - $
  43+ 94A8              Interpret_Else_1:
  44+ 94A8 A0 8B 48 92                  dw              HERE, NUMBER            //          here number
  45+ 94AC 20 8B 4C 88                  dw              DPL, FETCH, ONE_PLUS    //          dpl @ 1+
  45+ 94B0 ED 86
  46+ 94B2                                                                      //          if
  47+ 94B2 75 81                        dw              ZBRANCH
  48+ 94B4 16 00                        dw              Interpret_Else_3 - $
  49+ 94B6 AE 8A 4C 88                  dw                  NMODE, FETCH        //              nmode @
  50+ 94BA                                                                      //              if
  51+ 94BA 75 81                        dw                  ZBRANCH
  52+ 94BC 08 00                        dw                  Interpret_Endif_4 - $
  53+ 94BE AA 89 A1 89                  dw                      ONE, ZERO       //                  1 0
  54+ 94C2 DE 87                        dw                      TWO_DROP        //                  2drop
  55+ 94C4              Interpret_Endif_4:                                      //              endif
  56+ 94C4 DD 93                        dw                  DLITERAL            //              [compile] dliteral
  57+ 94C6                                                                      //          else
  58+ 94C6 60 81                        dw              BRANCH
  59+ 94C8 06 00                        dw              Interpret_Endif_3 - $
  60+ 94CA              Interpret_Else_3:
  61+ 94CA 6F 87                        dw                  DROP                //              drop
  62+ 94CC BF 93                        dw                  LITERAL             //              [compile]  literal
  63+ 94CE              Interpret_Endif_3:                                      //          endif
  64+ 94CE              Interpret_Endif_1:                                      //      endif
  65+ 94CE 4A 94                        dw          QSTACK                      //      ?stack
  66+ 94D0 5C 84                        dw          QTERMINAL                   //      ?terminal
  67+ 94D2                                                                      //      if
  68+ 94D2 75 81                        dw          ZBRANCH
  69+ 94D4 04 00                        dw          Interpret_Endif_5 - $
  70+ 94D6 B8 92                        dw              CABORT                  //          (abort)
  71+ 94D8              Interpret_Endif_5:                                      //      endif
  72+ 94D8 60 81                        dw      BRANCH
  73+ 94DA B0 FF                        dw      Interpret_Begin - $
  74+ 94DC 43 86                        dw      EXIT                            // ;
  75+ 94DE
  76+ 94DE              //  ______________________________________________________________________
  77+ 94DE              //
  78+ 94DE              // vocabulary   -- cccc     ( compile time )
  79+ 94DE              // Defining word used in the form   VOCABULARY cccc
  80+ 94DE              // creates the word  cccc  that gives the name to the vocabulary.
  81+ 94DE              // Giving  cccc  makes the vocabulary CONTEXT so its words are executed first
  82+ 94DE              // Giving  cccc DEFINITIONS makes  the vocabulary  CURRENT
  83+ 94DE              // so new definitions can be inserted in that vocabulary.
  84+ 94DE                              Colon_Def VOCABULARY, "VOCABULARY", is_normal
  84+ 94DE             >                New_Def  VOCABULARY, "VOCABULARY", Enter_Ptr, is_normal ; ok
  84+ 94DE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  84+ 94DE             >
  84+ 94DE             >                // dummy db directives used to calculate length of namec
  84+ 94DE 56 4F 43 41 >                db      "VOCABULARY"
  84+ 94E2 42 55 4C 41 >
  84+ 94E6 52 59       >
  84+ 94E8             >len_NFA         defl    $ - temp_NFA
  84+ 94E8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  84+ 94DE             >
  84+ 94DE 8A          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  84+ 94DF 56 4F 43 41 >                db      "VOCABULARY"               // name string in 7-bit ascii, but
  84+ 94E3 42 55 4C 41 >
  84+ 94E7 52 59       >
  84+ 94E9             >                org     $-1                 // alter last byte of Name just above to set
  84+ 94E8 D9          >                db      {b $} | END_BIT     // msb as name end
  84+ 94E9             >
  84+ 94E9 7B 94       >                dw      last_NFA            // Link to previous definition Name
  84+ 94EB             >VOCABULARY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  84+ 94EB CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  84+ 94EE             >
  84+ 94EE             >
  84+ 94EE             >                endif           ; ok        // for other definitions it "points" the correct handler
  84+ 94EE             >                // Use of "; ok" to suppress "warning[fwdref]"
  84+ 94EE             >
  84+ 94EE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  85+ 94EE
  86+ 94EE E4 8E                        dw      CBUILDS
  87+ 94F0
  88+ 94F0 41 81 81 A0                  dw      LIT, $A081, COMMA       // $81A0 ,
  88+ 94F4 BE 8B
  89+ 94F6 FF 8A 4C 88                  dw      CURRENT, FETCH          // current @
  90+ 94FA 24 87 BE 8B                  dw      CELL_MINUS, COMMA       // cell- ,
  91+ 94FE A0 8B                        dw      HERE                    // here
  92+ 9500 80 8A 4C 88                  dw      VOC_LINK, FETCH, COMMA  // voc-link @ ,
  92+ 9504 BE 8B
  93+ 9506 80 8A 57 88                  dw      VOC_LINK, STORE         // voc-link !
  94+ 950A
  95+ 950A 0E 8F                        dw      DOES_TO                 // does>
  96+ 950C              Vocabulary_Does:
  97+ 950C 0F 87                        dw      CELL_PLUS               // cell+
  98+ 950E F1 8A 57 88                  dw      CONTEXT, STORE          // context !
  99+ 9512 43 86                        dw      EXIT                    // ;
 100+ 9514
 101+ 9514              //  ______________________________________________________________________
 102+ 9514              //
 103+ 9514              // forth        --
 104+ 9514              // Name of the first vocabulary.
 105+ 9514              // It makes FORTH the CONTEXT vocabulary.
 106+ 9514              // Until new user vocabulary are defined, new colon-definitions becomes
 107+ 9514              // part of FORTH. It is immediate, so it will executed during the creation
 108+ 9514              // of a colon definition to be able to select the vocabulary.
 109+ 9514
 110+ 9514                              New_Def FORTH, "FORTH", Does_Ptr, is_immediate
 110+ 9514             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 110+ 9514             >
 110+ 9514             >                // dummy db directives used to calculate length of namec
 110+ 9514 46 4F 52 54 >                db      "FORTH"
 110+ 9518 48          >
 110+ 9519             >len_NFA         defl    $ - temp_NFA
 110+ 9519             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 110+ 9514             >
 110+ 9514 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 110+ 9515 46 4F 52 54 >                db      "FORTH"               // name string in 7-bit ascii, but
 110+ 9519 48          >
 110+ 951A             >                org     $-1                 // alter last byte of Name just above to set
 110+ 9519 C8          >                db      {b $} | END_BIT     // msb as name end
 110+ 951A             >
 110+ 951A DE 94       >                dw      last_NFA            // Link to previous definition Name
 110+ 951C             >FORTH:          if Does_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 110+ 951C CD 1B 8F    >                call    Does_Ptr ; ok        // for primitive definitions  actual code
 110+ 951F             >
 110+ 951F             >
 110+ 951F             >                endif           ; ok        // for other definitions it "points" the correct handler
 110+ 951F             >                // Use of "; ok" to suppress "warning[fwdref]"
 110+ 951F             >
 110+ 951F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 111+ 951F 0C 95                        dw      Vocabulary_Does
 112+ 9521 81 A0                        db      $81, $A0
 113+ 9523              Forth_Latest_Ptr:
 114+ 9523 B1 A3                        dw      Fence_Word // Latest_Definition
 115+ 9525              Voclink_Ptr:
 116+ 9525 00 00                        dw      0
 117+ 9527              // Any new vocabulary is structured as follow:
 118+ 9527              // PFA+0 points to DOES> part of VOCABULARY to perform CELL+ CONTEXT !
 119+ 9527              // PFA+2 is 81,A0 i.e. a null-word used as LATEST in the new vocabulary
 120+ 9527              // PFA+4 always contains the LATEST word of this VOCABULARY.
 121+ 9527              //       at creations it points to the null-word of its parent vocabulary
 122+ 9527              //       that is normally FORTH, For example ASSEMBLER points FORTH's null-word
 123+ 9527              // PFA+6 is the pointer that builds up the vocabulary linked list.
 124+ 9527              //       FORTH has 0 here to signal the end of the list and user's variable
 125+ 9527              //       VOC-LINK points to PFA+6 of the newest vocabulary created.
 126+ 9527              //       While FORTH is the only vocabulary, VOC-LINK points to FORTH's PFA+6
 127+ 9527              //       When ASSEMBLER is created, its PFA+6 points to FORTH's PFA+6, and so on
 128+ 9527
 129+ 9527              //  ______________________________________________________________________
 130+ 9527              //
 131+ 9527              // definitions  --
 132+ 9527              // Used in the form  cccc DEFINITIONS
 133+ 9527              // set the CURRENT vocabulary at CONTEXT to insert new definitions in
 134+ 9527              // vocabulary cccc.
 135+ 9527                              Colon_Def DEFINITIONS, "DEFINITIONS", is_normal
 135+ 9527             >                New_Def  DEFINITIONS, "DEFINITIONS", Enter_Ptr, is_normal ; ok
 135+ 9527             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 135+ 9527             >
 135+ 9527             >                // dummy db directives used to calculate length of namec
 135+ 9527 44 45 46 49 >                db      "DEFINITIONS"
 135+ 952B 4E 49 54 49 >
 135+ 952F 4F 4E 53    >
 135+ 9532             >len_NFA         defl    $ - temp_NFA
 135+ 9532             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 135+ 9527             >
 135+ 9527 8B          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 135+ 9528 44 45 46 49 >                db      "DEFINITIONS"               // name string in 7-bit ascii, but
 135+ 952C 4E 49 54 49 >
 135+ 9530 4F 4E 53    >
 135+ 9533             >                org     $-1                 // alter last byte of Name just above to set
 135+ 9532 D3          >                db      {b $} | END_BIT     // msb as name end
 135+ 9533             >
 135+ 9533 14 95       >                dw      last_NFA            // Link to previous definition Name
 135+ 9535             >DEFINITIONS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 135+ 9535 CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 135+ 9538             >
 135+ 9538             >
 135+ 9538             >                endif           ; ok        // for other definitions it "points" the correct handler
 135+ 9538             >                // Use of "; ok" to suppress "warning[fwdref]"
 135+ 9538             >
 135+ 9538             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 136+ 9538 F1 8A 4C 88                  dw      CONTEXT, FETCH          // context @
 137+ 953C FF 8A 57 88                  dw      CURRENT, STORE          // current !
 138+ 9540 43 86                        dw      EXIT                    // ;
 139+ 9542
 140+ 9542              //  ______________________________________________________________________
 141+ 9542              //
 142+ 9542              // (            -- cccc )
 143+ 9542              // the following text is interpreted as a comment until a closing )
 144+ 9542                              Colon_Def COMMENT_BRAKET, "(", is_immediate
 144+ 9542             >                New_Def  COMMENT_BRAKET, "(", Enter_Ptr, is_immediate ; ok
 144+ 9542             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 144+ 9542             >
 144+ 9542             >                // dummy db directives used to calculate length of namec
 144+ 9542 28          >                db      "("
 144+ 9543             >len_NFA         defl    $ - temp_NFA
 144+ 9543             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 144+ 9542             >
 144+ 9542 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 144+ 9543 28          >                db      "("               // name string in 7-bit ascii, but
 144+ 9544             >                org     $-1                 // alter last byte of Name just above to set
 144+ 9543 A8          >                db      {b $} | END_BIT     // msb as name end
 144+ 9544             >
 144+ 9544 27 95       >                dw      last_NFA            // Link to previous definition Name
 144+ 9546             >COMMENT_BRAKET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 144+ 9546 CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 144+ 9549             >
 144+ 9549             >
 144+ 9549             >                endif           ; ok        // for other definitions it "points" the correct handler
 144+ 9549             >                // Use of "; ok" to suppress "warning[fwdref]"
 144+ 9549             >
 144+ 9549             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 145+ 9549 41 81 29 00                  dw      LIT, ")"                // [char] )
 146+ 954D D3 90 6F 87                  dw      WORD, DROP              // word drop
 147+ 9551 43 86                        dw      EXIT                    // ;
 148+ 9553
 149+ 9553              //  ______________________________________________________________________
 150+ 9553              //
 151+ 9553              // quit         --
 152+ 9553              // \ Erase the return-stack, stop any compilation and give controlo to the console. No message is issued.
 153+ 9553                              Colon_Def QUIT, "QUIT", is_normal
 153+ 9553             >                New_Def  QUIT, "QUIT", Enter_Ptr, is_normal ; ok
 153+ 9553             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 153+ 9553             >
 153+ 9553             >                // dummy db directives used to calculate length of namec
 153+ 9553 51 55 49 54 >                db      "QUIT"
 153+ 9557             >len_NFA         defl    $ - temp_NFA
 153+ 9557             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 153+ 9553             >
 153+ 9553 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 153+ 9554 51 55 49 54 >                db      "QUIT"               // name string in 7-bit ascii, but
 153+ 9558             >                org     $-1                 // alter last byte of Name just above to set
 153+ 9557 D4          >                db      {b $} | END_BIT     // msb as name end
 153+ 9558             >
 153+ 9558 42 95       >                dw      last_NFA            // Link to previous definition Name
 153+ 955A             >QUIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 153+ 955A CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 153+ 955D             >
 153+ 955D             >
 153+ 955D             >                endif           ; ok        // for other definitions it "points" the correct handler
 153+ 955D             >                // Use of "; ok" to suppress "warning[fwdref]"
 153+ 955D             >
 153+ 955D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 154+ 955D
 155+ 955D A1 89 81 8B                  dw      ZERO, SOURCE_ID, STORE  // 0 source-id !
 155+ 9561 57 88
 156+ 9563 A1 89 B8 8A                  dw      ZERO, BLK, STORE        // 0 blk !
 156+ 9567 57 88
 157+ 9569 2B 8E                        dw      SQUARED_OPEN            // [compile] [
 158+ 956B                                                              // begin
 159+ 956B              Quit_Begin:
 160+ 956B 38 8A 4C 88                  dw      R0, FETCH, RPSTORE      //      r0 @ rp!
 160+ 956F 38 86
 161+ 9571 42 85                        dw      CR                      //      cr
 162+ 9573              // Next_Breakpoint_3:
 163+ 9573
 164+ 9573 51 90                        dw      QUERY                   //      query
 165+ 9575              Next_Breakpoint_1:
 166+ 9575 87 94                        dw      INTERPRET               //      interpret
 167+ 9577 0B 8B 4C 88                  dw      STATE, FETCH, ZEQUAL    //      state @ 0=
 167+ 957B 93 86
 168+ 957D                                                              //      if
 169+ 957D 75 81                        dw      ZBRANCH
 170+ 957F 07 00                        dw      Quit_Endif - $
 171+ 9581 23 91                        dw          C_DOT_QUOTE
 172+ 9583 02 6F 6B                     db          2, "ok"             //          .( ok)
 173+ 9586              Quit_Endif:                                     //      else
 174+ 9586                                                              // again
 175+ 9586 60 81                        dw      BRANCH
 176+ 9588 E3 FF                        dw      Quit_Begin - $
 177+ 958A 43 86                        dw      EXIT                    // ;
 178+ 958C
 179+ 958C              //  ______________________________________________________________________
 180+ 958C              //
 181+ 958C              // abort        --
 182+ 958C                              Colon_Def ABORT, "ABORT", is_normal
 182+ 958C             >                New_Def  ABORT, "ABORT", Enter_Ptr, is_normal ; ok
 182+ 958C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 182+ 958C             >
 182+ 958C             >                // dummy db directives used to calculate length of namec
 182+ 958C 41 42 4F 52 >                db      "ABORT"
 182+ 9590 54          >
 182+ 9591             >len_NFA         defl    $ - temp_NFA
 182+ 9591             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 182+ 958C             >
 182+ 958C 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 182+ 958D 41 42 4F 52 >                db      "ABORT"               // name string in 7-bit ascii, but
 182+ 9591 54          >
 182+ 9592             >                org     $-1                 // alter last byte of Name just above to set
 182+ 9591 D4          >                db      {b $} | END_BIT     // msb as name end
 182+ 9592             >
 182+ 9592 53 95       >                dw      last_NFA            // Link to previous definition Name
 182+ 9594             >ABORT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 182+ 9594 CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 182+ 9597             >
 182+ 9597             >
 182+ 9597             >                endif           ; ok        // for other definitions it "points" the correct handler
 182+ 9597             >                // Use of "; ok" to suppress "warning[fwdref]"
 182+ 9597             >
 182+ 9597             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 183+ 9597 2F 8A 4C 88                  dw      S0, FETCH, SPSTORE      // s0 @ sp!
 183+ 959B 22 86
 184+ 959D 93 8E                        dw      DECIMAL                 // decimal
 185+ 959F 1C 95                        dw      FORTH                   // [compile] forth
 186+ 95A1 35 95                        dw      DEFINITIONS             // definitions
 187+ 95A3              Autoexec_Ptr:
 188+ 95A3 F1 A0                        dw      AUTOEXEC                // autoexec, patched to noop
 189+ 95A5              Next_Breakpoint_2:
 190+ 95A5 5A 95                        dw      QUIT                    // quit
 191+ 95A7 43 86                        dw      EXIT                    // ;
 192+ 95A9
 193+ 95A9              //  ______________________________________________________________________
 194+ 95A9              //
 195+ 95A9              // warm         --
 196+ 95A9                              Colon_Def WARM, "WARM", is_normal
 196+ 95A9             >                New_Def  WARM, "WARM", Enter_Ptr, is_normal ; ok
 196+ 95A9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 196+ 95A9             >
 196+ 95A9             >                // dummy db directives used to calculate length of namec
 196+ 95A9 57 41 52 4D >                db      "WARM"
 196+ 95AD             >len_NFA         defl    $ - temp_NFA
 196+ 95AD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 196+ 95A9             >
 196+ 95A9 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 196+ 95AA 57 41 52 4D >                db      "WARM"               // name string in 7-bit ascii, but
 196+ 95AE             >                org     $-1                 // alter last byte of Name just above to set
 196+ 95AD CD          >                db      {b $} | END_BIT     // msb as name end
 196+ 95AE             >
 196+ 95AE 8C 95       >                dw      last_NFA            // Link to previous definition Name
 196+ 95B0             >WARM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 196+ 95B0 CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 196+ 95B3             >
 196+ 95B3             >
 196+ 95B3             >                endif           ; ok        // for other definitions it "points" the correct handler
 196+ 95B3             >                // Use of "; ok" to suppress "warning[fwdref]"
 196+ 95B3             >
 196+ 95B3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 197+ 95B3 90 99                        dw      BLK_INIT                // blk-init
 198+ 95B5 AC 9F                        dw      SPLASH                  // splash
 199+ 95B7 41 81 07 00                  dw      LIT, 7, EMIT            // 7 emit
 199+ 95BB 94 8C
 200+ 95BD 94 95                        dw      ABORT                   // abort
 201+ 95BF 43 86                        dw      EXIT                    // exit
 202+ 95C1
 203+ 95C1              //  ______________________________________________________________________
 204+ 95C1              //
 205+ 95C1              // cold         --
 206+ 95C1                              Colon_Def COLD, "COLD", is_normal
 206+ 95C1             >                New_Def  COLD, "COLD", Enter_Ptr, is_normal ; ok
 206+ 95C1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 206+ 95C1             >
 206+ 95C1             >                // dummy db directives used to calculate length of namec
 206+ 95C1 43 4F 4C 44 >                db      "COLD"
 206+ 95C5             >len_NFA         defl    $ - temp_NFA
 206+ 95C5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 206+ 95C1             >
 206+ 95C1 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 206+ 95C2 43 4F 4C 44 >                db      "COLD"               // name string in 7-bit ascii, but
 206+ 95C6             >                org     $-1                 // alter last byte of Name just above to set
 206+ 95C5 C4          >                db      {b $} | END_BIT     // msb as name end
 206+ 95C6             >
 206+ 95C6 A9 95       >                dw      last_NFA            // Link to previous definition Name
 206+ 95C8             >COLD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 206+ 95C8 CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 206+ 95CB             >
 206+ 95CB             >
 206+ 95CB             >                endif           ; ok        // for other definitions it "points" the correct handler
 206+ 95CB             >                // Use of "; ok" to suppress "warning[fwdref]"
 206+ 95CB             >
 206+ 95CB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 207+ 95CB 41 81 12 81                  dw      LIT, S0_origin          // [ hex $12 +origin ] Literal
 208+ 95CF 41 81 2E 81                  dw      LIT, USER_Pointer       // [ hex $3E +origin ] literal
 209+ 95D3 4C 88                        dw      FETCH                   // @
 210+ 95D5 41 81 06 00                  dw      LIT, 6, PLUS            // 6 +
 210+ 95D9 C8 86
 211+ 95DB 41 81 14 00                  dw      LIT, 20                 // 20
 212+ 95DF 4F 85                        dw      CMOVE
 213+ 95E1 41 81 0C 81                  dw      LIT, Latest_origin      // [ hex 0C +origin ] literal
 214+ 95E5 4C 88                        dw      FETCH                   // @
 215+ 95E7 41 81 23 95                  dw      LIT, Forth_Latest_Ptr   // [ ' forth >body 4 + ] Literal
 216+ 95EB 57 88                        dw      STORE                   // !
 217+ 95ED A1 89 AE 8A                  dw      ZERO, NMODE, STORE      // 0 nmode !
 217+ 95F1 57 88
 218+ 95F3 8C 8A 4C 88                  dw      FIRST, FETCH, DUP       // first @ dup
 218+ 95F7 9C 87
 219+ 95F9 51 8B 57 88                  dw      USE, STORE              // use !
 220+ 95FD 5C 8B 57 88                  dw      PREV, STORE             // prev !
 221+ 9601 41 81 04 00                  dw      LIT, 4, PLACE, STORE    // 4 place !
 221+ 9605 71 8B 57 88
 222+ 9609              //              dw      LIT, 8
 223+ 9609              //              dw      LIT, FLAGS2, CSTORE     // 8 5C6A c!
 224+ 9609 B3 89 95 8B                  dw      TWO, HP, STORE          // 2 hp !
 224+ 960D 57 88
 225+ 960F
 226+ 960F 4A 9A                        dw      EMPTY_BUFFERS
 227+ 9611 B0 95        Warm_Start:     dw      WARM
 228+ 9613 C8 95        Cold_Start:     dw      COLD
 229+ 9615 43 86                        dw      EXIT
 230+ 9617
 231+ 9617              //  ______________________________________________________________________
 232+ 9617              WarmRoutine:
 233+ 9617              ColdRoutine:
 234+ 9617 DD 21 34 81                  ld      ix, Next_Ptr
 235+ 961B D9                           exx
 236+ 961C E5                           push    hl
 237+ 961D D9                           exx
 238+ 961E
 239+ 961E ED 73 08 81                  ld      (SP_Basic), sp
 240+ 9622 ED 7B 12 81                  ld      sp, (S0_origin)
 241+ 9626              //              nop
 242+ 9626 2A 14 81                     ld      hl, (R0_origin)
 243+ 9629              //              nop
 244+ 9629                              ldrphl
 244+ 9629 22 30 81    >                ld      (RP_Pointer),hl
 245+ 962C 01 11 96                     ld      bc, Warm_Start
 246+ 962F 38 02                        jr      c, Warm_Skip
 247+ 9631 03                           inc     bc
 248+ 9632 03                           inc     bc
 249+ 9633              Warm_Skip:
 250+ 9633                              next
 250+ 9633 DD E9       >                jp      (ix)
 251+ 9635
 252+ 9635              //  ______________________________________________________________________
 253+ 9635              //
 254+ 9635              // basic        --
 255+ 9635                              New_Def BASIC, "BASIC", is_code, is_normal
 255+ 9635             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 255+ 9635             >
 255+ 9635             >                // dummy db directives used to calculate length of namec
 255+ 9635 42 41 53 49 >                db      "BASIC"
 255+ 9639 43          >
 255+ 963A             >len_NFA         defl    $ - temp_NFA
 255+ 963A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 255+ 9635             >
 255+ 9635 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 255+ 9636 42 41 53 49 >                db      "BASIC"               // name string in 7-bit ascii, but
 255+ 963A 43          >
 255+ 963B             >                org     $-1                 // alter last byte of Name just above to set
 255+ 963A C3          >                db      {b $} | END_BIT     // msb as name end
 255+ 963B             >
 255+ 963B C1 95       >                dw      last_NFA            // Link to previous definition Name
 255+ 963D             >BASIC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 255+ 963D ~           >                call    runcode ; ok        // for primitive definitions  actual code
 255+ 963D ~           >
 255+ 963D ~           >
 255+ 963D             >                endif           ; ok        // for other definitions it "points" the correct handler
 255+ 963D             >                // Use of "; ok" to suppress "warning[fwdref]"
 255+ 963D             >
 255+ 963D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 256+ 963D C1                           pop     bc
 257+ 963E 21 00 00                     ld      hl, 0
 258+ 9641 39                           add     hl, sp
 259+ 9642 ED 7B 08 81                  ld      sp, (SP_Basic)
 260+ 9646              //              nop
 261+ 9646 22 08 81                     ld      (SP_Basic),hl
 262+ 9649 D9                           exx
 263+ 964A E1                           pop     hl
 264+ 964B D9                           exx
 265+ 964C C9                           ret     // to Basic
 266+ 964D
 267+ 964D              //  ______________________________________________________________________
 268+ 964D              //
 269+ 964D              // +-           n1 n2 -- n3
 270+ 964D              // leaves n1 with the sign of n2 as n3.
 271+ 964D                              Colon_Def PLUS_MINUS, "+-", is_normal
 271+ 964D             >                New_Def  PLUS_MINUS, "+-", Enter_Ptr, is_normal ; ok
 271+ 964D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 271+ 964D             >
 271+ 964D             >                // dummy db directives used to calculate length of namec
 271+ 964D 2B 2D       >                db      "+-"
 271+ 964F             >len_NFA         defl    $ - temp_NFA
 271+ 964F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 271+ 964D             >
 271+ 964D 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 271+ 964E 2B 2D       >                db      "+-"               // name string in 7-bit ascii, but
 271+ 9650             >                org     $-1                 // alter last byte of Name just above to set
 271+ 964F AD          >                db      {b $} | END_BIT     // msb as name end
 271+ 9650             >
 271+ 9650 35 96       >                dw      last_NFA            // Link to previous definition Name
 271+ 9652             >PLUS_MINUS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 271+ 9652 CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 271+ 9655             >
 271+ 9655             >
 271+ 9655             >                endif           ; ok        // for other definitions it "points" the correct handler
 271+ 9655             >                // Use of "; ok" to suppress "warning[fwdref]"
 271+ 9655             >
 271+ 9655             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 272+ 9655 A4 86                        dw      ZLESS                   // 0<
 273+ 9657                                                              // if
 274+ 9657 75 81                        dw      ZBRANCH
 275+ 9659 04 00                        dw      Plus_Minus_Endif - $
 276+ 965B 32 87                        dw          MINUS               //      minus
 277+ 965D              Plus_Minus_Endif:                               // endif
 278+ 965D 43 86                        dw      EXIT                    // ;
 279+ 965F
 280+ 965F              //  ______________________________________________________________________
 281+ 965F              //
 282+ 965F              // d+-          d1 n -- d2
 283+ 965F              // leaves d1 with the sign of n as d2.
 284+ 965F                              Colon_Def DPLUS_MINUS, "D+-", is_normal
 284+ 965F             >                New_Def  DPLUS_MINUS, "D+-", Enter_Ptr, is_normal ; ok
 284+ 965F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 284+ 965F             >
 284+ 965F             >                // dummy db directives used to calculate length of namec
 284+ 965F 44 2B 2D    >                db      "D+-"
 284+ 9662             >len_NFA         defl    $ - temp_NFA
 284+ 9662             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 284+ 965F             >
 284+ 965F 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 284+ 9660 44 2B 2D    >                db      "D+-"               // name string in 7-bit ascii, but
 284+ 9663             >                org     $-1                 // alter last byte of Name just above to set
 284+ 9662 AD          >                db      {b $} | END_BIT     // msb as name end
 284+ 9663             >
 284+ 9663 4D 96       >                dw      last_NFA            // Link to previous definition Name
 284+ 9665             >DPLUS_MINUS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 284+ 9665 CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 284+ 9668             >
 284+ 9668             >
 284+ 9668             >                endif           ; ok        // for other definitions it "points" the correct handler
 284+ 9668             >                // Use of "; ok" to suppress "warning[fwdref]"
 284+ 9668             >
 284+ 9668             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 285+ 9668 A4 86                        dw      ZLESS                   // 0<
 286+ 966A                                                              // if
 287+ 966A 75 81                        dw      ZBRANCH
 288+ 966C 04 00                        dw      DPlus_Minus_Endif - $
 289+ 966E 45 87                        dw          DMINUS              //      dminus
 290+ 9670              DPlus_Minus_Endif:                              // endif
 291+ 9670 43 86                        dw      EXIT                    // ;
 292+ 9672
 293+ 9672              //  ______________________________________________________________________
 294+ 9672              //
 295+ 9672              // abs          n1 -- n2
 296+ 9672                              Colon_Def ABS_OP, "ABS", is_normal
 296+ 9672             >                New_Def  ABS_OP, "ABS", Enter_Ptr, is_normal ; ok
 296+ 9672             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 296+ 9672             >
 296+ 9672             >                // dummy db directives used to calculate length of namec
 296+ 9672 41 42 53    >                db      "ABS"
 296+ 9675             >len_NFA         defl    $ - temp_NFA
 296+ 9675             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 296+ 9672             >
 296+ 9672 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 296+ 9673 41 42 53    >                db      "ABS"               // name string in 7-bit ascii, but
 296+ 9676             >                org     $-1                 // alter last byte of Name just above to set
 296+ 9675 D3          >                db      {b $} | END_BIT     // msb as name end
 296+ 9676             >
 296+ 9676 5F 96       >                dw      last_NFA            // Link to previous definition Name
 296+ 9678             >ABS_OP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 296+ 9678 CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 296+ 967B             >
 296+ 967B             >
 296+ 967B             >                endif           ; ok        // for other definitions it "points" the correct handler
 296+ 967B             >                // Use of "; ok" to suppress "warning[fwdref]"
 296+ 967B             >
 296+ 967B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 297+ 967B 9C 87                        dw      DUP                     // dup
 298+ 967D 52 96                        dw      PLUS_MINUS              // +-
 299+ 967F 43 86                        dw      EXIT                    // ;
 300+ 9681
 301+ 9681              //  ______________________________________________________________________
 302+ 9681              //
 303+ 9681              // dabs         d1 -- d2
 304+ 9681                              Colon_Def DABS, "DABS", is_normal
 304+ 9681             >                New_Def  DABS, "DABS", Enter_Ptr, is_normal ; ok
 304+ 9681             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 304+ 9681             >
 304+ 9681             >                // dummy db directives used to calculate length of namec
 304+ 9681 44 41 42 53 >                db      "DABS"
 304+ 9685             >len_NFA         defl    $ - temp_NFA
 304+ 9685             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 304+ 9681             >
 304+ 9681 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 304+ 9682 44 41 42 53 >                db      "DABS"               // name string in 7-bit ascii, but
 304+ 9686             >                org     $-1                 // alter last byte of Name just above to set
 304+ 9685 D3          >                db      {b $} | END_BIT     // msb as name end
 304+ 9686             >
 304+ 9686 72 96       >                dw      last_NFA            // Link to previous definition Name
 304+ 9688             >DABS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 304+ 9688 CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 304+ 968B             >
 304+ 968B             >
 304+ 968B             >                endif           ; ok        // for other definitions it "points" the correct handler
 304+ 968B             >                // Use of "; ok" to suppress "warning[fwdref]"
 304+ 968B             >
 304+ 968B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 305+ 968B 9C 87                        dw      DUP                     // dup
 306+ 968D 65 96                        dw      DPLUS_MINUS             // d+-
 307+ 968F 43 86                        dw      EXIT                    // ;
 308+ 9691
 309+ 9691              //  ______________________________________________________________________
 310+ 9691              //
 311+ 9691              // m*           n1 n2 -- d
 312+ 9691              // multiply two integer giving a double
 313+ 9691                              Colon_Def MMUL, "M*", is_normal
 313+ 9691             >                New_Def  MMUL, "M*", Enter_Ptr, is_normal ; ok
 313+ 9691             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 313+ 9691             >
 313+ 9691             >                // dummy db directives used to calculate length of namec
 313+ 9691 4D 2A       >                db      "M*"
 313+ 9693             >len_NFA         defl    $ - temp_NFA
 313+ 9693             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 313+ 9691             >
 313+ 9691 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 313+ 9692 4D 2A       >                db      "M*"               // name string in 7-bit ascii, but
 313+ 9694             >                org     $-1                 // alter last byte of Name just above to set
 313+ 9693 AA          >                db      {b $} | END_BIT     // msb as name end
 313+ 9694             >
 313+ 9694 81 96       >                dw      last_NFA            // Link to previous definition Name
 313+ 9696             >MMUL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 313+ 9696 CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 313+ 9699             >
 313+ 9699             >
 313+ 9699             >                endif           ; ok        // for other definitions it "points" the correct handler
 313+ 9699             >                // Use of "; ok" to suppress "warning[fwdref]"
 313+ 9699             >
 313+ 9699             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 314+ 9699 FA 87 04 86                  dw      TWO_DUP, XOR_OP, TO_R   // 2dup xor >r
 314+ 969D 68 86
 315+ 969F 78 96 91 87                  dw      ABS_OP, SWAP            // abs swap
 316+ 96A3 78 96 80 85                  dw      ABS_OP, UM_MUL          // abs um*
 317+ 96A7 7A 86 65 96                  dw      R_TO, DPLUS_MINUS       // r> d+-
 318+ 96AB 43 86                        dw      EXIT                    // ;
 319+ 96AD
 320+ 96AD              //  ______________________________________________________________________
 321+ 96AD              //
 322+ 96AD              // m/         d n -- q r
 323+ 96AD              // multiply two integer giving a double
 324+ 96AD                              Colon_Def MDIV, "M/", is_normal
 324+ 96AD             >                New_Def  MDIV, "M/", Enter_Ptr, is_normal ; ok
 324+ 96AD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 324+ 96AD             >
 324+ 96AD             >                // dummy db directives used to calculate length of namec
 324+ 96AD 4D 2F       >                db      "M/"
 324+ 96AF             >len_NFA         defl    $ - temp_NFA
 324+ 96AF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 324+ 96AD             >
 324+ 96AD 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 324+ 96AE 4D 2F       >                db      "M/"               // name string in 7-bit ascii, but
 324+ 96B0             >                org     $-1                 // alter last byte of Name just above to set
 324+ 96AF AF          >                db      {b $} | END_BIT     // msb as name end
 324+ 96B0             >
 324+ 96B0 91 96       >                dw      last_NFA            // Link to previous definition Name
 324+ 96B2             >MDIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 324+ 96B2 CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 324+ 96B5             >
 324+ 96B5             >
 324+ 96B5             >                endif           ; ok        // for other definitions it "points" the correct handler
 324+ 96B5             >                // Use of "; ok" to suppress "warning[fwdref]"
 324+ 96B5             >
 324+ 96B5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 325+ 96B5 61 87 68 86                  dw      OVER, TO_R, TO_R        // over >r >r
 325+ 96B9 68 86
 326+ 96BB 88 96 8B 86                  dw      DABS, R_OP, ABS_OP      // dabs r abs
 326+ 96BF 78 96
 327+ 96C1 A7 85                        dw      UMDIVMOD                // um/mod
 328+ 96C3 7A 86                        dw      R_TO                    // r>
 329+ 96C5 8B 86 04 86                  dw      R_OP, XOR_OP            // r xor
 330+ 96C9 52 96 91 87                  dw      PLUS_MINUS, SWAP        // +- swap
 331+ 96CD 7A 86                        dw      R_TO                    // r>
 332+ 96CF 52 96 91 87                  dw      PLUS_MINUS, SWAP        // +- swap
 333+ 96D3 43 86                        dw      EXIT                    // ;
 334+ 96D5
 335+ 96D5              //  ______________________________________________________________________
 336+ 96D5              //
 337+ 96D5              // *            n1 n2 -- n3
 338+ 96D5              // multiply two integer
 339+ 96D5                              Colon_Def MUL, "*", is_normal
 339+ 96D5             >                New_Def  MUL, "*", Enter_Ptr, is_normal ; ok
 339+ 96D5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 339+ 96D5             >
 339+ 96D5             >                // dummy db directives used to calculate length of namec
 339+ 96D5 2A          >                db      "*"
 339+ 96D6             >len_NFA         defl    $ - temp_NFA
 339+ 96D6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 339+ 96D5             >
 339+ 96D5 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 339+ 96D6 2A          >                db      "*"               // name string in 7-bit ascii, but
 339+ 96D7             >                org     $-1                 // alter last byte of Name just above to set
 339+ 96D6 AA          >                db      {b $} | END_BIT     // msb as name end
 339+ 96D7             >
 339+ 96D7 AD 96       >                dw      last_NFA            // Link to previous definition Name
 339+ 96D9             >MUL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 339+ 96D9 CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 339+ 96DC             >
 339+ 96DC             >
 339+ 96DC             >                endif           ; ok        // for other definitions it "points" the correct handler
 339+ 96DC             >                // Use of "; ok" to suppress "warning[fwdref]"
 339+ 96DC             >
 339+ 96DC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 340+ 96DC 96 96 6F 87                  dw      MMUL, DROP              // m* drop
 341+ 96E0 43 86                        dw      EXIT                    // ;
 342+ 96E2
 343+ 96E2              //  ______________________________________________________________________
 344+ 96E2              //
 345+ 96E2              // /mod         n1 n2 -- n3 n4
 346+ 96E2              // leaves quotient n4 and remainder n3 of the integer division n1 / n2.
 347+ 96E2              // The remainder has the sign of n1
 348+ 96E2                              Colon_Def DIVMOD, "/MOD", is_normal
 348+ 96E2             >                New_Def  DIVMOD, "/MOD", Enter_Ptr, is_normal ; ok
 348+ 96E2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 348+ 96E2             >
 348+ 96E2             >                // dummy db directives used to calculate length of namec
 348+ 96E2 2F 4D 4F 44 >                db      "/MOD"
 348+ 96E6             >len_NFA         defl    $ - temp_NFA
 348+ 96E6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 348+ 96E2             >
 348+ 96E2 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 348+ 96E3 2F 4D 4F 44 >                db      "/MOD"               // name string in 7-bit ascii, but
 348+ 96E7             >                org     $-1                 // alter last byte of Name just above to set
 348+ 96E6 C4          >                db      {b $} | END_BIT     // msb as name end
 348+ 96E7             >
 348+ 96E7 D5 96       >                dw      last_NFA            // Link to previous definition Name
 348+ 96E9             >DIVMOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 348+ 96E9 CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 348+ 96EC             >
 348+ 96EC             >
 348+ 96EC             >                endif           ; ok        // for other definitions it "points" the correct handler
 348+ 96EC             >                // Use of "; ok" to suppress "warning[fwdref]"
 348+ 96EC             >
 348+ 96EC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 349+ 96EC 68 86 E4 8B                  dw      TO_R, S_TO_D, R_TO      // >r s->d r>
 349+ 96F0 7A 86
 350+ 96F2 B2 96                        dw      MDIV                    // m/
 351+ 96F4 43 86                        dw      EXIT                    // ;
 352+ 96F6
 353+ 96F6              //  ______________________________________________________________________
 354+ 96F6              //
 355+ 96F6              // /            n1 n2 -- n3
 356+ 96F6              // division
 357+ 96F6                              Colon_Def DIV, "/", is_normal
 357+ 96F6             >                New_Def  DIV, "/", Enter_Ptr, is_normal ; ok
 357+ 96F6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 357+ 96F6             >
 357+ 96F6             >                // dummy db directives used to calculate length of namec
 357+ 96F6 2F          >                db      "/"
 357+ 96F7             >len_NFA         defl    $ - temp_NFA
 357+ 96F7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 357+ 96F6             >
 357+ 96F6 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 357+ 96F7 2F          >                db      "/"               // name string in 7-bit ascii, but
 357+ 96F8             >                org     $-1                 // alter last byte of Name just above to set
 357+ 96F7 AF          >                db      {b $} | END_BIT     // msb as name end
 357+ 96F8             >
 357+ 96F8 E2 96       >                dw      last_NFA            // Link to previous definition Name
 357+ 96FA             >DIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 357+ 96FA CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 357+ 96FD             >
 357+ 96FD             >
 357+ 96FD             >                endif           ; ok        // for other definitions it "points" the correct handler
 357+ 96FD             >                // Use of "; ok" to suppress "warning[fwdref]"
 357+ 96FD             >
 357+ 96FD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 358+ 96FD E9 96 91 87                  dw      DIVMOD, SWAP, DROP      // /mod swap drop
 358+ 9701 6F 87
 359+ 9703 43 86                        dw      EXIT                    // ;
 360+ 9705
 361+ 9705              //  ______________________________________________________________________
 362+ 9705              //
 363+ 9705              // mod          n1 n2 -- n3
 364+ 9705                              Colon_Def MOD, "MOD", is_normal
 364+ 9705             >                New_Def  MOD, "MOD", Enter_Ptr, is_normal ; ok
 364+ 9705             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 364+ 9705             >
 364+ 9705             >                // dummy db directives used to calculate length of namec
 364+ 9705 4D 4F 44    >                db      "MOD"
 364+ 9708             >len_NFA         defl    $ - temp_NFA
 364+ 9708             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 364+ 9705             >
 364+ 9705 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 364+ 9706 4D 4F 44    >                db      "MOD"               // name string in 7-bit ascii, but
 364+ 9709             >                org     $-1                 // alter last byte of Name just above to set
 364+ 9708 C4          >                db      {b $} | END_BIT     // msb as name end
 364+ 9709             >
 364+ 9709 F6 96       >                dw      last_NFA            // Link to previous definition Name
 364+ 970B             >MOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 364+ 970B CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 364+ 970E             >
 364+ 970E             >
 364+ 970E             >                endif           ; ok        // for other definitions it "points" the correct handler
 364+ 970E             >                // Use of "; ok" to suppress "warning[fwdref]"
 364+ 970E             >
 364+ 970E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 365+ 970E E9 96 6F 87                  dw      DIVMOD, DROP            // /mod drop
 366+ 9712 43 86                        dw      EXIT                    // ;
 367+ 9714
 368+ 9714              //  ______________________________________________________________________
 369+ 9714              //
 370+ 9714              // */mod        n1 n2 n3 -- n4 n5
 371+ 9714              // leaves the quotient n5 and the remainder n4 of the operation
 372+ 9714              // (n1 * n2) / n3. The intermediate passage through a double number
 373+ 9714              // avoids loss of precision
 374+ 9714                              Colon_Def MUL_DIV_MOD, "*/MOD", is_normal
 374+ 9714             >                New_Def  MUL_DIV_MOD, "*/MOD", Enter_Ptr, is_normal ; ok
 374+ 9714             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 374+ 9714             >
 374+ 9714             >                // dummy db directives used to calculate length of namec
 374+ 9714 2A 2F 4D 4F >                db      "*/MOD"
 374+ 9718 44          >
 374+ 9719             >len_NFA         defl    $ - temp_NFA
 374+ 9719             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 374+ 9714             >
 374+ 9714 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 374+ 9715 2A 2F 4D 4F >                db      "*/MOD"               // name string in 7-bit ascii, but
 374+ 9719 44          >
 374+ 971A             >                org     $-1                 // alter last byte of Name just above to set
 374+ 9719 C4          >                db      {b $} | END_BIT     // msb as name end
 374+ 971A             >
 374+ 971A 05 97       >                dw      last_NFA            // Link to previous definition Name
 374+ 971C             >MUL_DIV_MOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 374+ 971C CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 374+ 971F             >
 374+ 971F             >
 374+ 971F             >                endif           ; ok        // for other definitions it "points" the correct handler
 374+ 971F             >                // Use of "; ok" to suppress "warning[fwdref]"
 374+ 971F             >
 374+ 971F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 375+ 971F 68 86 96 96                  dw      TO_R, MMUL              // >r  m*
 376+ 9723 7A 86 B2 96                  dw      R_TO, MDIV              // r>  m/
 377+ 9727 43 86                        dw      EXIT                    // ;
 378+ 9729
 379+ 9729              //  ______________________________________________________________________
 380+ 9729              //
 381+ 9729              // */          n1 n2 n3 -- n4
 382+ 9729              // (n1 * n2) / n3. The intermediate passage through a double number avoids loss of precision
 383+ 9729                              Colon_Def MUL_DIV, "*/", is_normal
 383+ 9729             >                New_Def  MUL_DIV, "*/", Enter_Ptr, is_normal ; ok
 383+ 9729             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 383+ 9729             >
 383+ 9729             >                // dummy db directives used to calculate length of namec
 383+ 9729 2A 2F       >                db      "*/"
 383+ 972B             >len_NFA         defl    $ - temp_NFA
 383+ 972B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 383+ 9729             >
 383+ 9729 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 383+ 972A 2A 2F       >                db      "*/"               // name string in 7-bit ascii, but
 383+ 972C             >                org     $-1                 // alter last byte of Name just above to set
 383+ 972B AF          >                db      {b $} | END_BIT     // msb as name end
 383+ 972C             >
 383+ 972C 14 97       >                dw      last_NFA            // Link to previous definition Name
 383+ 972E             >MUL_DIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 383+ 972E CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 383+ 9731             >
 383+ 9731             >
 383+ 9731             >                endif           ; ok        // for other definitions it "points" the correct handler
 383+ 9731             >                // Use of "; ok" to suppress "warning[fwdref]"
 383+ 9731             >
 383+ 9731             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 384+ 9731 1C 97                        dw     MUL_DIV_MOD              // */mod
 385+ 9733 91 87 6F 87                  dw     SWAP, DROP               // swap drop
 386+ 9737 43 86                        dw      EXIT                    // ;
 387+ 9739
 388+ 9739
 389+ 9739              //  ______________________________________________________________________
 390+ 9739              //
 391+ 9739              // m/mod        ud1 u2 -- u3 ud4
 392+ 9739              // mixed operation: it leaves the remainder u3 and the quotient ud4 of ud1 / u1.
 393+ 9739              // All terms are unsigned.
 394+ 9739                              Colon_Def MDIV_MOD, "M/MOD", is_normal
 394+ 9739             >                New_Def  MDIV_MOD, "M/MOD", Enter_Ptr, is_normal ; ok
 394+ 9739             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 394+ 9739             >
 394+ 9739             >                // dummy db directives used to calculate length of namec
 394+ 9739 4D 2F 4D 4F >                db      "M/MOD"
 394+ 973D 44          >
 394+ 973E             >len_NFA         defl    $ - temp_NFA
 394+ 973E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 394+ 9739             >
 394+ 9739 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 394+ 973A 4D 2F 4D 4F >                db      "M/MOD"               // name string in 7-bit ascii, but
 394+ 973E 44          >
 394+ 973F             >                org     $-1                 // alter last byte of Name just above to set
 394+ 973E C4          >                db      {b $} | END_BIT     // msb as name end
 394+ 973F             >
 394+ 973F 29 97       >                dw      last_NFA            // Link to previous definition Name
 394+ 9741             >MDIV_MOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 394+ 9741 CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 394+ 9744             >
 394+ 9744             >
 394+ 9744             >                endif           ; ok        // for other definitions it "points" the correct handler
 394+ 9744             >                // Use of "; ok" to suppress "warning[fwdref]"
 394+ 9744             >
 394+ 9744             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 395+ 9744 68 86                        dw      TO_R                    // >r           ( ud1 )
 396+ 9746 A1 89 8B 86                  dw      ZERO, R_OP, UMDIVMOD    // 0 r um/mod   ( l rem1 h/r )
 396+ 974A A7 85
 397+ 974C 7A 86 91 87                  dw      R_TO, SWAP, TO_R        // r> swap >r   ( l rem )
 397+ 9750 68 86
 398+ 9752 A7 85                        dw      UMDIVMOD                // um/mod       ( rem2 l/r )
 399+ 9754 7A 86                        dw      R_TO                    // r>           ( rem2 l/r h/r )
 400+ 9756 43 86                        dw      EXIT                    // ;
 401+ 9758
 402+ 9758              //  ______________________________________________________________________
 403+ 9758              //
 404+ 9758              // (line)       n1 n2 -- a b
 405+ 9758              // sends the line n1 of block n2 to the disk buffer.
 406+ 9758              // it returns the address a and ca counter b = C/L meaning a whole line.
 407+ 9758                              Colon_Def CLINE, "(LINE)", is_normal
 407+ 9758             >                New_Def  CLINE, "(LINE)", Enter_Ptr, is_normal ; ok
 407+ 9758             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 407+ 9758             >
 407+ 9758             >                // dummy db directives used to calculate length of namec
 407+ 9758 28 4C 49 4E >                db      "(LINE)"
 407+ 975C 45 29       >
 407+ 975E             >len_NFA         defl    $ - temp_NFA
 407+ 975E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 407+ 9758             >
 407+ 9758 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 407+ 9759 28 4C 49 4E >                db      "(LINE)"               // name string in 7-bit ascii, but
 407+ 975D 45 29       >
 407+ 975F             >                org     $-1                 // alter last byte of Name just above to set
 407+ 975E A9          >                db      {b $} | END_BIT     // msb as name end
 407+ 975F             >
 407+ 975F 39 97       >                dw      last_NFA            // Link to previous definition Name
 407+ 9761             >CLINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 407+ 9761 CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 407+ 9764             >
 407+ 9764             >
 407+ 9764             >                endif           ; ok        // for other definitions it "points" the correct handler
 407+ 9764             >                // Use of "; ok" to suppress "warning[fwdref]"
 407+ 9764             >
 407+ 9764             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 408+ 9764 68 86                        dw      TO_R                    // >r
 409+ 9766 4E 89                        dw      NOOP                    // noop
 410+ 9768 DB 89                        dw      CL                      // c/l
 411+ 976A E8 89 1C 97                  dw      BBUF, MUL_DIV_MOD       // */mod
 412+ 976E 7A 86                        dw      R_TO                    // r>
 413+ 9770 F5 89 D9 96                  dw      BSCR, MUL, PLUS         // b/scr * +
 413+ 9774 C8 86
 414+ 9776 AF 9A                        dw      BLOCK                   // block   ( forward )
 415+ 9778 C8 86                        dw      PLUS                    // +
 416+ 977A 4E 89                        dw      NOOP                    // noop
 417+ 977C DB 89                        dw      CL                      // c/l
 418+ 977E 43 86                        dw      EXIT                    // ;
 419+ 9780
 420+ 9780              //  ______________________________________________________________________
 421+ 9780              //
 422+ 9780              // .line        n1 n2 --
 423+ 9780              // Sends to output line  n1  of screen n2.
 424+ 9780                              Colon_Def DOT_LINE, ".LINE", is_normal
 424+ 9780             >                New_Def  DOT_LINE, ".LINE", Enter_Ptr, is_normal ; ok
 424+ 9780             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 424+ 9780             >
 424+ 9780             >                // dummy db directives used to calculate length of namec
 424+ 9780 2E 4C 49 4E >                db      ".LINE"
 424+ 9784 45          >
 424+ 9785             >len_NFA         defl    $ - temp_NFA
 424+ 9785             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 424+ 9780             >
 424+ 9780 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 424+ 9781 2E 4C 49 4E >                db      ".LINE"               // name string in 7-bit ascii, but
 424+ 9785 45          >
 424+ 9786             >                org     $-1                 // alter last byte of Name just above to set
 424+ 9785 C5          >                db      {b $} | END_BIT     // msb as name end
 424+ 9786             >
 424+ 9786 58 97       >                dw      last_NFA            // Link to previous definition Name
 424+ 9788             >DOT_LINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 424+ 9788 CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 424+ 978B             >
 424+ 978B             >
 424+ 978B             >                endif           ; ok        // for other definitions it "points" the correct handler
 424+ 978B             >                // Use of "; ok" to suppress "warning[fwdref]"
 424+ 978B             >
 424+ 978B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 425+ 978B 61 97 6E 8F                  dw      CLINE, LTRAILING, TYPE  // (line) -trailing type
 425+ 978F 49 8F
 426+ 9791 43 86                        dw      EXIT                    // ;
 427+ 9793
 428+ 9793              //  ______________________________________________________________________
 429+ 9793              //
 430+ 9793              // message       n1 n2 --
 431+ 9793              // prints error message to current channel.
 432+ 9793              // if WARNING is 0, prints "MSG#n".
 433+ 9793              // if WARNING is 1, prints line n of screen 4.
 434+ 9793              // if WARNING is -1, see ERROR
 435+ 9793              // value can be negative or beyond block 4.
 436+ 9793                              Colon_Def MESSAGE, "MESSAGE", is_normal
 436+ 9793             >                New_Def  MESSAGE, "MESSAGE", Enter_Ptr, is_normal ; ok
 436+ 9793             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 436+ 9793             >
 436+ 9793             >                // dummy db directives used to calculate length of namec
 436+ 9793 4D 45 53 53 >                db      "MESSAGE"
 436+ 9797 41 47 45    >
 436+ 979A             >len_NFA         defl    $ - temp_NFA
 436+ 979A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 436+ 9793             >
 436+ 9793 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 436+ 9794 4D 45 53 53 >                db      "MESSAGE"               // name string in 7-bit ascii, but
 436+ 9798 41 47 45    >
 436+ 979B             >                org     $-1                 // alter last byte of Name just above to set
 436+ 979A C5          >                db      {b $} | END_BIT     // msb as name end
 436+ 979B             >
 436+ 979B 80 97       >                dw      last_NFA            // Link to previous definition Name
 436+ 979D             >MESSAGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 436+ 979D CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 436+ 97A0             >
 436+ 97A0             >
 436+ 97A0             >                endif           ; ok        // for other definitions it "points" the correct handler
 436+ 97A0             >                // Use of "; ok" to suppress "warning[fwdref]"
 436+ 97A0             >
 436+ 97A0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 437+ 97A0 5C 8A 4C 88                  dw      WARNING, FETCH          // warning @
 438+ 97A4                                                              // if
 439+ 97A4 75 81                        dw      ZBRANCH
 440+ 97A6 18 00                        dw      Message_Else - $
 441+ 97A8 41 81 04 00                  dw          LIT, 4              //      4
 442+ 97AC E3 8A 4C 88                  dw          OFFSET, FETCH       //      offset @
 443+ 97B0 F5 89 FA 96                  dw          BSCR, DIV, SUBTRACT //      b/scr / -
 443+ 97B4 F6 8B
 444+ 97B6 88 97                        dw          DOT_LINE            //      .line
 445+ 97B8 B1 8C                        dw          SPACE               //      space
 446+ 97BA                                                              // else
 447+ 97BA
 448+ 97BA 60 81                        dw      BRANCH
 449+ 97BC 0B 00                        dw      Message_ENdif - $
 450+ 97BE              Message_Else:
 451+ 97BE 23 91                        dw          C_DOT_QUOTE         //      .( msg#)
 452+ 97C0 04 6D 73 67                  db          4, "msg#"
 452+ 97C4 23
 453+ 97C5 A4 9E                        dw          DOT                 //      .  ( forward )
 454+ 97C7              Message_ENdif:                                  // endif
 455+ 97C7 43 86                        dw      EXIT                    // ;
 456+ 97C9
 457+ 97C9
 458+ 97C9              //  ______________________________________________________________________
 459+ 97C9              //
 460+ 97C9              // device
 461+ 97C9                              Variable_Def DEVICE,   "DEVICE",   2
 461+ 97C9             >                New_Def  DEVICE, "DEVICE", Variable_Ptr, is_normal
 461+ 97C9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 461+ 97C9             >
 461+ 97C9             >                // dummy db directives used to calculate length of namec
 461+ 97C9 44 45 56 49 >                db      "DEVICE"
 461+ 97CD 43 45       >
 461+ 97CF             >len_NFA         defl    $ - temp_NFA
 461+ 97CF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 461+ 97C9             >
 461+ 97C9 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 461+ 97CA 44 45 56 49 >                db      "DEVICE"               // name string in 7-bit ascii, but
 461+ 97CE 43 45       >
 461+ 97D0             >                org     $-1                 // alter last byte of Name just above to set
 461+ 97CF C5          >                db      {b $} | END_BIT     // msb as name end
 461+ 97D0             >
 461+ 97D0 93 97       >                dw      last_NFA            // Link to previous definition Name
 461+ 97D2             >DEVICE:          if Variable_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 461+ 97D2 CD 80 89    >                call    Variable_Ptr ; ok        // for primitive definitions  actual code
 461+ 97D5             >
 461+ 97D5             >
 461+ 97D5             >                endif           ; ok        // for other definitions it "points" the correct handler
 461+ 97D5             >                // Use of "; ok" to suppress "warning[fwdref]"
 461+ 97D5             >
 461+ 97D5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 461+ 97D5 02 00       >                dw      2
 462+ 97D7
 463+ 97D7              //  ______________________________________________________________________
 464+ 97D7              //
 465+ 97D7              // inkey        -- c | 0
 466+ 97D7              // call ROM inkey$ routine, returns c or "zero".
 467+ 97D7
 468+ 97D7                              New_Def INKEY, "INKEY", is_code, is_normal
 468+ 97D7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 468+ 97D7             >
 468+ 97D7             >                // dummy db directives used to calculate length of namec
 468+ 97D7 49 4E 4B 45 >                db      "INKEY"
 468+ 97DB 59          >
 468+ 97DC             >len_NFA         defl    $ - temp_NFA
 468+ 97DC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 468+ 97D7             >
 468+ 97D7 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 468+ 97D8 49 4E 4B 45 >                db      "INKEY"               // name string in 7-bit ascii, but
 468+ 97DC 59          >
 468+ 97DD             >                org     $-1                 // alter last byte of Name just above to set
 468+ 97DC D9          >                db      {b $} | END_BIT     // msb as name end
 468+ 97DD             >
 468+ 97DD C9 97       >                dw      last_NFA            // Link to previous definition Name
 468+ 97DF             >INKEY:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 468+ 97DF ~           >                call    runcode ; ok        // for primitive definitions  actual code
 468+ 97DF ~           >
 468+ 97DF ~           >
 468+ 97DF             >                endif           ; ok        // for other definitions it "points" the correct handler
 468+ 97DF             >                // Use of "; ok" to suppress "warning[fwdref]"
 468+ 97DF             >
 468+ 97DF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 469+ 97DF
 470+ 97DF C5                           push    bc
 471+ 97E0 ED 73 2C 81                  ld      (SP_Saved), sp
 472+ 97E4 31 FE 80                     ld      sp, Cold_origin - 2
 473+ 97E7 DD E5                        push    ix
 474+ 97E9 CD E6 15                     call    $15E6                   // instead of 15E9
 475+ 97EC DD E1                        pop     ix
 476+ 97EE ED 7B 2C 81                  ld      sp, (SP_Saved)
 477+ 97F2 6F                           ld      l, a
 478+ 97F3 26 00                        ld      h, 0
 479+ 97F5 C1                           pop     bc
 480+ 97F6                              psh1
 480+ 97F6 E5          >                push    hl
 480+ 97F7 DD E9       >                jp      (ix)
 481+ 97F9
 482+ 97F9              //  ______________________________________________________________________
 483+ 97F9              //
 484+ 97F9              // select      n --
 485+ 97F9              // selects the given channel number
 486+ 97F9
 487+ 97F9                              New_Def SELECT, "SELECT", is_code, is_normal
 487+ 97F9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 487+ 97F9             >
 487+ 97F9             >                // dummy db directives used to calculate length of namec
 487+ 97F9 53 45 4C 45 >                db      "SELECT"
 487+ 97FD 43 54       >
 487+ 97FF             >len_NFA         defl    $ - temp_NFA
 487+ 97FF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 487+ 97F9             >
 487+ 97F9 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 487+ 97FA 53 45 4C 45 >                db      "SELECT"               // name string in 7-bit ascii, but
 487+ 97FE 43 54       >
 487+ 9800             >                org     $-1                 // alter last byte of Name just above to set
 487+ 97FF D4          >                db      {b $} | END_BIT     // msb as name end
 487+ 9800             >
 487+ 9800 D7 97       >                dw      last_NFA            // Link to previous definition Name
 487+ 9802             >SELECT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 487+ 9802 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 487+ 9802 ~           >
 487+ 9802 ~           >
 487+ 9802             >                endif           ; ok        // for other definitions it "points" the correct handler
 487+ 9802             >                // Use of "; ok" to suppress "warning[fwdref]"
 487+ 9802             >
 487+ 9802             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 488+ 9802 E1                           pop     hl
 489+ 9803 C5                           push    bc
 490+ 9804 7D                           ld      a, l
 491+ 9805 ED 73 2C 81                  ld      (SP_Saved), sp
 492+ 9809 31 FE 80                     ld      sp, Cold_origin - 2
 493+ 980C DD E5                        push    ix
 494+ 980E CD 01 16                     call    $1601
 495+ 9811 DD E1                        pop     ix
 496+ 9813 ED 7B 2C 81                  ld      sp, (SP_Saved)
 497+ 9817 C1                           pop     bc
 498+ 9818
 499+ 9818                              next
 499+ 9818 DD E9       >                jp      (ix)
 500+ 981A
 501+ 981A              //  ______________________________________________________________________
 502+ 981A
# file closed: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/L2.asm
  92  981A                              include "next-opt1.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/next-opt1.asm
   1+ 981A              //  ______________________________________________________________________
   2+ 981A              //
   3+ 981A              //  next-opt.asm
   4+ 981A              //
   5+ 981A              //  ZX Spectrum Next - peculiar definitions
   6+ 981A              //  ______________________________________________________________________
   7+ 981A
   8+ 981A              //  ______________________________________________________________________
   9+ 981A              //
  10+ 981A              // reg@         n -- b
  11+ 981A              // read Next REGister n giving byte b
  12+ 981A
  13+ 981A                              Colon_Def REG_FETCH, "REG@", is_normal
  13+ 981A             >                New_Def  REG_FETCH, "REG@", Enter_Ptr, is_normal ; ok
  13+ 981A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13+ 981A             >
  13+ 981A             >                // dummy db directives used to calculate length of namec
  13+ 981A 52 45 47 40 >                db      "REG@"
  13+ 981E             >len_NFA         defl    $ - temp_NFA
  13+ 981E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13+ 981A             >
  13+ 981A 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  13+ 981B 52 45 47 40 >                db      "REG@"               // name string in 7-bit ascii, but
  13+ 981F             >                org     $-1                 // alter last byte of Name just above to set
  13+ 981E C0          >                db      {b $} | END_BIT     // msb as name end
  13+ 981F             >
  13+ 981F F9 97       >                dw      last_NFA            // Link to previous definition Name
  13+ 9821             >REG_FETCH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  13+ 9821 CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  13+ 9824             >
  13+ 9824             >
  13+ 9824             >                endif           ; ok        // for other definitions it "points" the correct handler
  13+ 9824             >                // Use of "; ok" to suppress "warning[fwdref]"
  13+ 9824             >
  13+ 9824             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14+ 9824 41 81 3B 24                  dw      LIT, $243B
  15+ 9828 B1 88                        dw      PSTORE
  16+ 982A 41 81 3B 25                  dw      LIT, $253B
  17+ 982E A0 88                        dw      PFETCH
  18+ 9830 43 86                        dw      EXIT
  19+ 9832
  20+ 9832              //  ______________________________________________________________________
  21+ 9832              //
  22+ 9832              // reg!         b n --
  23+ 9832              // write value b to Next REGister n
  24+ 9832
  25+ 9832                              Colon_Def REG_STORE, "REG!", is_normal
  25+ 9832             >                New_Def  REG_STORE, "REG!", Enter_Ptr, is_normal ; ok
  25+ 9832             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  25+ 9832             >
  25+ 9832             >                // dummy db directives used to calculate length of namec
  25+ 9832 52 45 47 21 >                db      "REG!"
  25+ 9836             >len_NFA         defl    $ - temp_NFA
  25+ 9836             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  25+ 9832             >
  25+ 9832 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  25+ 9833 52 45 47 21 >                db      "REG!"               // name string in 7-bit ascii, but
  25+ 9837             >                org     $-1                 // alter last byte of Name just above to set
  25+ 9836 A1          >                db      {b $} | END_BIT     // msb as name end
  25+ 9837             >
  25+ 9837 1A 98       >                dw      last_NFA            // Link to previous definition Name
  25+ 9839             >REG_STORE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  25+ 9839 CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  25+ 983C             >
  25+ 983C             >
  25+ 983C             >                endif           ; ok        // for other definitions it "points" the correct handler
  25+ 983C             >                // Use of "; ok" to suppress "warning[fwdref]"
  25+ 983C             >
  25+ 983C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  26+ 983C 41 81 3B 24                  dw      LIT, $243B
  27+ 9840 B1 88                        dw      PSTORE
  28+ 9842 41 81 3B 25                  dw      LIT, $253B
  29+ 9846 B1 88                        dw      PSTORE
  30+ 9848 43 86                        dw      EXIT
  31+ 984A
  32+ 984A              //  ______________________________________________________________________
  33+ 984A              //
  34+ 984A              // mmu7@        -- n
  35+ 984A              // query current page in MMU7 8K-RAM : 0 and 223
  36+ 984A
  37+ 984A                              Colon_Def MMU7_FETCH, "MMU7@", is_normal
  37+ 984A             >                New_Def  MMU7_FETCH, "MMU7@", Enter_Ptr, is_normal ; ok
  37+ 984A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  37+ 984A             >
  37+ 984A             >                // dummy db directives used to calculate length of namec
  37+ 984A 4D 4D 55 37 >                db      "MMU7@"
  37+ 984E 40          >
  37+ 984F             >len_NFA         defl    $ - temp_NFA
  37+ 984F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  37+ 984A             >
  37+ 984A 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  37+ 984B 4D 4D 55 37 >                db      "MMU7@"               // name string in 7-bit ascii, but
  37+ 984F 40          >
  37+ 9850             >                org     $-1                 // alter last byte of Name just above to set
  37+ 984F C0          >                db      {b $} | END_BIT     // msb as name end
  37+ 9850             >
  37+ 9850 32 98       >                dw      last_NFA            // Link to previous definition Name
  37+ 9852             >MMU7_FETCH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  37+ 9852 CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  37+ 9855             >
  37+ 9855             >
  37+ 9855             >                endif           ; ok        // for other definitions it "points" the correct handler
  37+ 9855             >                // Use of "; ok" to suppress "warning[fwdref]"
  37+ 9855             >
  37+ 9855             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  38+ 9855 41 81 57 00                  dw      LIT, 87, REG_FETCH
  38+ 9859 21 98
  39+ 985B 43 86                        dw      EXIT
  40+ 985D
  41+ 985D              //  ______________________________________________________________________
  42+ 985D              //
  43+ 985D              // mmu7!        n --
  44+ 985D              // set MMU7 8K-RAM page to n given between 0 and 223
  45+ 985D              // optimized version that uses NEXTREG n,A Z80n op-code.
  46+ 985D
  47+ 985D                              New_Def MMU7_STORE, "MMU7!", is_code, is_normal
  47+ 985D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  47+ 985D             >
  47+ 985D             >                // dummy db directives used to calculate length of namec
  47+ 985D 4D 4D 55 37 >                db      "MMU7!"
  47+ 9861 21          >
  47+ 9862             >len_NFA         defl    $ - temp_NFA
  47+ 9862             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  47+ 985D             >
  47+ 985D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  47+ 985E 4D 4D 55 37 >                db      "MMU7!"               // name string in 7-bit ascii, but
  47+ 9862 21          >
  47+ 9863             >                org     $-1                 // alter last byte of Name just above to set
  47+ 9862 A1          >                db      {b $} | END_BIT     // msb as name end
  47+ 9863             >
  47+ 9863 4A 98       >                dw      last_NFA            // Link to previous definition Name
  47+ 9865             >MMU7_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  47+ 9865 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  47+ 9865 ~           >
  47+ 9865 ~           >
  47+ 9865             >                endif           ; ok        // for other definitions it "points" the correct handler
  47+ 9865             >                // Use of "; ok" to suppress "warning[fwdref]"
  47+ 9865             >
  47+ 9865             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  48+ 9865 E1                           pop     hl
  49+ 9866 7D                           ld      a, l
  50+ 9867 ED 92 57                     nextreg 87, a
  51+ 986A
  52+ 986A                              next
  52+ 986A DD E9       >                jp      (ix)
  53+ 986C
  54+ 986C              //  ______________________________________________________________________
  55+ 986C              //
  56+ 986C              // >far         ha -- a n
  57+ 986C              // decode bits 765 of H as one of the 8K-page between 64 and 71 (40h-47h)
  58+ 986C              // take lower bits of H and L as an offset from E000h
  59+ 986C              // then return address  a  between E000h-FFFFh
  60+ 986C              // and page number n  between 64-71 (40h-47h)
  61+ 986C              // For example, in hex:
  62+ 986C              //   0000 >FAR  gives  40.E000
  63+ 986C              //   1FFF >FAR  gives  40.FFFF
  64+ 986C              //   2000 >FAR  gives  41.E000
  65+ 986C              //   3FFF >FAR  gives  41.FFFF
  66+ 986C              //   EFFF >FAR  gives  47.EFFF
  67+ 986C              //   FFFF >FAR  gives  47.FFFF
  68+ 986C                              New_Def TO_FAR, ">FAR", is_code, is_normal
  68+ 986C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  68+ 986C             >
  68+ 986C             >                // dummy db directives used to calculate length of namec
  68+ 986C 3E 46 41 52 >                db      ">FAR"
  68+ 9870             >len_NFA         defl    $ - temp_NFA
  68+ 9870             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  68+ 986C             >
  68+ 986C 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  68+ 986D 3E 46 41 52 >                db      ">FAR"               // name string in 7-bit ascii, but
  68+ 9871             >                org     $-1                 // alter last byte of Name just above to set
  68+ 9870 D2          >                db      {b $} | END_BIT     // msb as name end
  68+ 9871             >
  68+ 9871 5D 98       >                dw      last_NFA            // Link to previous definition Name
  68+ 9873             >TO_FAR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  68+ 9873 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  68+ 9873 ~           >
  68+ 9873 ~           >
  68+ 9873             >                endif           ; ok        // for other definitions it "points" the correct handler
  68+ 9873             >                // Use of "; ok" to suppress "warning[fwdref]"
  68+ 9873             >
  68+ 9873             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  69+ 9873 E1                           pop     hl
  70+ 9874 7C                           ld      a, h
  71+ 9875 E6 E0                        and     $E0
  72+ 9877 07                           rlca
  73+ 9878 07                           rlca
  74+ 9879 07                           rlca
  75+ 987A F6 40                        or      $40
  76+ 987C 5F                           ld      e, a
  77+ 987D 16 00                        ld      d, 0
  78+ 987F 7C                           ld      a, h
  79+ 9880 F6 E0                        or      $E0
  80+ 9882 67                           ld      h, a
  81+ 9883 EB                           ex      de, hl
  82+ 9884                              psh2
  82+ 9884 D5          >                push    de
  82+ 9885 E5          >                push    hl
  82+ 9886 DD E9       >                jp      (ix)
  83+ 9888
  84+ 9888              //  ______________________________________________________________________
  85+ 9888              //
  86+ 9888              // <far         a n  -- ha
  87+ 9888              // given an address E000-FFFF and a page number n (64-71 or 40h-47h)
  88+ 9888              // reverse of >FAR: encodes a FAR address compressing
  89+ 9888              // to bits 765 of H, lower bits of HL address offset from E000h
  90+ 9888                              New_Def FROM_FAR, "<FAR", is_code, is_normal
  90+ 9888             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  90+ 9888             >
  90+ 9888             >                // dummy db directives used to calculate length of namec
  90+ 9888 3C 46 41 52 >                db      "<FAR"
  90+ 988C             >len_NFA         defl    $ - temp_NFA
  90+ 988C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  90+ 9888             >
  90+ 9888 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  90+ 9889 3C 46 41 52 >                db      "<FAR"               // name string in 7-bit ascii, but
  90+ 988D             >                org     $-1                 // alter last byte of Name just above to set
  90+ 988C D2          >                db      {b $} | END_BIT     // msb as name end
  90+ 988D             >
  90+ 988D 6C 98       >                dw      last_NFA            // Link to previous definition Name
  90+ 988F             >FROM_FAR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  90+ 988F ~           >                call    runcode ; ok        // for primitive definitions  actual code
  90+ 988F ~           >
  90+ 988F ~           >
  90+ 988F             >                endif           ; ok        // for other definitions it "points" the correct handler
  90+ 988F             >                // Use of "; ok" to suppress "warning[fwdref]"
  90+ 988F             >
  90+ 988F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  91+ 988F D1                           pop     de                  // page number in e
  92+ 9890 E1                           pop     hl                  // address in hl
  93+ 9891 7B                           ld      a, e
  94+ 9892 E6 07                        and     $07                 // reduced to 0-7
  95+ 9894 0F                           rrca
  96+ 9895 0F                           rrca
  97+ 9896 0F                           rrca
  98+ 9897 57                           ld      d, a                // save to d bits 765
  99+ 9898 7C                           ld      a, h                // drops
 100+ 9899 E6 1F                        and     $1F
 101+ 989B B2                           or      d
 102+ 989C 67                           ld      h, a
 103+ 989D
 104+ 989D                              psh1
 104+ 989D E5          >                push    hl
 104+ 989E DD E9       >                jp      (ix)
 105+ 98A0
 106+ 98A0              //  ______________________________________________________________________
 107+ 98A0              //
 108+ 98A0              // m_p3dos      n1 n2 n3 n4 a -- n5 n6 n7 n8  f
 109+ 98A0              // NextZXOS call wrapper.
 110+ 98A0              //  n1 = hl register parameter value
 111+ 98A0              //  n2 = de register parameter value
 112+ 98A0              //  n3 = bc register parameter value
 113+ 98A0              //  n4 =  a register parameter value
 114+ 98A0              //   a = routine address in ROM 3
 115+ 98A0              // ----
 116+ 98A0              //  n5 = hl returned value
 117+ 98A0              //  n6 = de returned value
 118+ 98A0              //  n7 = bc returned value
 119+ 98A0              //  n8 =  a returned value
 120+ 98A0              //   f
 121+ 98A0                              New_Def M_P3DOS, "M_P3DOS", is_code, is_normal
 121+ 98A0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 121+ 98A0             >
 121+ 98A0             >                // dummy db directives used to calculate length of namec
 121+ 98A0 4D 5F 50 33 >                db      "M_P3DOS"
 121+ 98A4 44 4F 53    >
 121+ 98A7             >len_NFA         defl    $ - temp_NFA
 121+ 98A7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 121+ 98A0             >
 121+ 98A0 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 121+ 98A1 4D 5F 50 33 >                db      "M_P3DOS"               // name string in 7-bit ascii, but
 121+ 98A5 44 4F 53    >
 121+ 98A8             >                org     $-1                 // alter last byte of Name just above to set
 121+ 98A7 D3          >                db      {b $} | END_BIT     // msb as name end
 121+ 98A8             >
 121+ 98A8 88 98       >                dw      last_NFA            // Link to previous definition Name
 121+ 98AA             >M_P3DOS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 121+ 98AA ~           >                call    runcode ; ok        // for primitive definitions  actual code
 121+ 98AA ~           >
 121+ 98AA ~           >
 121+ 98AA             >                endif           ; ok        // for other definitions it "points" the correct handler
 121+ 98AA             >                // Use of "; ok" to suppress "warning[fwdref]"
 121+ 98AA             >
 121+ 98AA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 122+ 98AA D1                           pop     de                  // dos call entry address in de
 123+ 98AB E1                           pop     hl                  // a register
 124+ 98AC 7D                           ld      a, l
 125+ 98AD D9                           exx
 126+ 98AE C1                           pop     bc
 127+ 98AF D1                           pop     de
 128+ 98B0 E1                           pop     hl
 129+ 98B1 D9                           exx
 130+ 98B2
 131+ 98B2 C5                           push    bc
 132+ 98B3 DD E5                        push    ix
 133+ 98B5
 134+ 98B5 ED 73 2C 81                  ld      (SP_Saved), sp
 135+ 98B9 31 FE 80                     ld      sp, Cold_origin - 2
 136+ 98BC 0E 07                        ld      c, 7                // use 7 RAM Bank
 137+ 98BE
 138+ 98BE CF                           rst     08
 139+ 98BF 94                           db      $94
 140+ 98C0
 141+ 98C0 ED 7B 2C 81                  ld      sp, (SP_Saved)
 142+ 98C4 DD E5                        push    ix
 143+ 98C6 E1                           pop     hl
 144+ 98C7 22 2A 81                     ld      (IX_Echo), hl
 145+ 98CA              //              nop
 146+ 98CA DD E1                        pop     ix
 147+ 98CC E3                           ex      (sp), hl            // hl argument and retrieve bc
 148+ 98CD D5                           push    de
 149+ 98CE C5                           push    bc
 150+ 98CF 4D                           ld      c, l
 151+ 98D0 44                           ld      b, h
 152+ 98D1
 153+ 98D1 26 00                        ld      h, 0
 154+ 98D3 6F                           ld      l, a
 155+ 98D4 E5                           push    hl
 156+ 98D5 ED 62                        sbc     hl, hl              // -1 for OK ; 0 for KO but now...
 157+ 98D7 23                           inc     hl                  //  0 for OK ; 1 for ko
 158+ 98D8
 159+ 98D8                              psh1
 159+ 98D8 E5          >                push    hl
 159+ 98D9 DD E9       >                jp      (ix)
 160+ 98DB
 161+ 98DB              //  ______________________________________________________________________
 162+ 98DB              //
 163+ 98DB              // blk-fh
 164+ 98DB                              Variable_Def BLK_FH,   "BLK-FH",   1
 164+ 98DB             >                New_Def  BLK_FH, "BLK-FH", Variable_Ptr, is_normal
 164+ 98DB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 164+ 98DB             >
 164+ 98DB             >                // dummy db directives used to calculate length of namec
 164+ 98DB 42 4C 4B 2D >                db      "BLK-FH"
 164+ 98DF 46 48       >
 164+ 98E1             >len_NFA         defl    $ - temp_NFA
 164+ 98E1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 164+ 98DB             >
 164+ 98DB 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 164+ 98DC 42 4C 4B 2D >                db      "BLK-FH"               // name string in 7-bit ascii, but
 164+ 98E0 46 48       >
 164+ 98E2             >                org     $-1                 // alter last byte of Name just above to set
 164+ 98E1 C8          >                db      {b $} | END_BIT     // msb as name end
 164+ 98E2             >
 164+ 98E2 A0 98       >                dw      last_NFA            // Link to previous definition Name
 164+ 98E4             >BLK_FH:          if Variable_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 164+ 98E4 CD 80 89    >                call    Variable_Ptr ; ok        // for primitive definitions  actual code
 164+ 98E7             >
 164+ 98E7             >
 164+ 98E7             >                endif           ; ok        // for other definitions it "points" the correct handler
 164+ 98E7             >                // Use of "; ok" to suppress "warning[fwdref]"
 164+ 98E7             >
 164+ 98E7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 164+ 98E7 01 00       >                dw      1
 165+ 98E9
 166+ 98E9                              New_Def BLK_FNAME,   "BLK-FNAME", Create_Ptr, is_normal
 166+ 98E9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 166+ 98E9             >
 166+ 98E9             >                // dummy db directives used to calculate length of namec
 166+ 98E9 42 4C 4B 2D >                db      "BLK-FNAME"
 166+ 98ED 46 4E 41 4D >
 166+ 98F1 45          >
 166+ 98F2             >len_NFA         defl    $ - temp_NFA
 166+ 98F2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 166+ 98E9             >
 166+ 98E9 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 166+ 98EA 42 4C 4B 2D >                db      "BLK-FNAME"               // name string in 7-bit ascii, but
 166+ 98EE 46 4E 41 4D >
 166+ 98F2 45          >
 166+ 98F3             >                org     $-1                 // alter last byte of Name just above to set
 166+ 98F2 C5          >                db      {b $} | END_BIT     // msb as name end
 166+ 98F3             >
 166+ 98F3 DB 98       >                dw      last_NFA            // Link to previous definition Name
 166+ 98F5             >BLK_FNAME:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 166+ 98F5 CD 96 93    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 166+ 98F8             >
 166+ 98F8             >
 166+ 98F8             >                endif           ; ok        // for other definitions it "points" the correct handler
 166+ 98F8             >                // Use of "; ok" to suppress "warning[fwdref]"
 166+ 98F8             >
 166+ 98F8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 167+ 98F8 0E 21 42 6C                  db      14, "!Blocks-64.bin", 0
 167+ 98FC 6F 63 6B 73
 167+ 9900 2D 36 34 2E
 167+ 9904 62 69 6E 00
 168+ 9908 00 00 00...                  ds      24
 169+ 9920
 170+ 9920              //  ______________________________________________________________________
 171+ 9920              //
 172+ 9920              // blk-seek     n --
 173+ 9920              // seek block n  within blocks!.bin  file
 174+ 9920                              Colon_Def BLK_SEEK, "BLK-SEEK", is_normal
 174+ 9920             >                New_Def  BLK_SEEK, "BLK-SEEK", Enter_Ptr, is_normal ; ok
 174+ 9920             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 174+ 9920             >
 174+ 9920             >                // dummy db directives used to calculate length of namec
 174+ 9920 42 4C 4B 2D >                db      "BLK-SEEK"
 174+ 9924 53 45 45 4B >
 174+ 9928             >len_NFA         defl    $ - temp_NFA
 174+ 9928             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 174+ 9920             >
 174+ 9920 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 174+ 9921 42 4C 4B 2D >                db      "BLK-SEEK"               // name string in 7-bit ascii, but
 174+ 9925 53 45 45 4B >
 174+ 9929             >                org     $-1                 // alter last byte of Name just above to set
 174+ 9928 CB          >                db      {b $} | END_BIT     // msb as name end
 174+ 9929             >
 174+ 9929 E9 98       >                dw      last_NFA            // Link to previous definition Name
 174+ 992B             >BLK_SEEK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 174+ 992B CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 174+ 992E             >
 174+ 992E             >
 174+ 992E             >                endif           ; ok        // for other definitions it "points" the correct handler
 174+ 992E             >                // Use of "; ok" to suppress "warning[fwdref]"
 174+ 992E             >
 174+ 992E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 175+ 992E E8 89 96 96                  dw  BBUF, MMUL
 176+ 9932 E4 98 4C 88                  dw  BLK_FH, FETCH
 177+ 9936 7C 84                        dw  F_SEEK
 178+ 9938 41 81 2D 00                  dw  LIT, $2D, QERROR
 178+ 993C 7B 8D
 179+ 993E 43 86                        dw  EXIT
 180+ 9940
 181+ 9940              //  ______________________________________________________________________
 182+ 9940              //
 183+ 9940              // blk-read     n --
 184+ 9940              // seek block n  within blocks!.bin  file
 185+ 9940                              Colon_Def BLK_READ, "BLK-READ", is_normal
 185+ 9940             >                New_Def  BLK_READ, "BLK-READ", Enter_Ptr, is_normal ; ok
 185+ 9940             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 185+ 9940             >
 185+ 9940             >                // dummy db directives used to calculate length of namec
 185+ 9940 42 4C 4B 2D >                db      "BLK-READ"
 185+ 9944 52 45 41 44 >
 185+ 9948             >len_NFA         defl    $ - temp_NFA
 185+ 9948             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 185+ 9940             >
 185+ 9940 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 185+ 9941 42 4C 4B 2D >                db      "BLK-READ"               // name string in 7-bit ascii, but
 185+ 9945 52 45 41 44 >
 185+ 9949             >                org     $-1                 // alter last byte of Name just above to set
 185+ 9948 C4          >                db      {b $} | END_BIT     // msb as name end
 185+ 9949             >
 185+ 9949 20 99       >                dw      last_NFA            // Link to previous definition Name
 185+ 994B             >BLK_READ:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 185+ 994B CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 185+ 994E             >
 185+ 994E             >
 185+ 994E             >                endif           ; ok        // for other definitions it "points" the correct handler
 185+ 994E             >                // Use of "; ok" to suppress "warning[fwdref]"
 185+ 994E             >
 185+ 994E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 186+ 994E 2B 99                        dw  BLK_SEEK
 187+ 9950 E8 89                        dw  BBUF
 188+ 9952 E4 98 4C 88                  dw  BLK_FH, FETCH
 189+ 9956 BB 84                        dw  F_READ
 190+ 9958 41 81 2E 00                  dw  LIT, $2E, QERROR
 190+ 995C 7B 8D
 191+ 995E 6F 87                        dw  DROP
 192+ 9960 43 86                        dw  EXIT
 193+ 9962
 194+ 9962              //  ______________________________________________________________________
 195+ 9962              //
 196+ 9962              // blk-write     n --
 197+ 9962              // seek block n  within blocks!.bin  file
 198+ 9962                              Colon_Def BLK_WRITE, "BLK-WRITE", is_normal
 198+ 9962             >                New_Def  BLK_WRITE, "BLK-WRITE", Enter_Ptr, is_normal ; ok
 198+ 9962             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 198+ 9962             >
 198+ 9962             >                // dummy db directives used to calculate length of namec
 198+ 9962 42 4C 4B 2D >                db      "BLK-WRITE"
 198+ 9966 57 52 49 54 >
 198+ 996A 45          >
 198+ 996B             >len_NFA         defl    $ - temp_NFA
 198+ 996B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 198+ 9962             >
 198+ 9962 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 198+ 9963 42 4C 4B 2D >                db      "BLK-WRITE"               // name string in 7-bit ascii, but
 198+ 9967 57 52 49 54 >
 198+ 996B 45          >
 198+ 996C             >                org     $-1                 // alter last byte of Name just above to set
 198+ 996B C5          >                db      {b $} | END_BIT     // msb as name end
 198+ 996C             >
 198+ 996C 40 99       >                dw      last_NFA            // Link to previous definition Name
 198+ 996E             >BLK_WRITE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 198+ 996E CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 198+ 9971             >
 198+ 9971             >
 198+ 9971             >                endif           ; ok        // for other definitions it "points" the correct handler
 198+ 9971             >                // Use of "; ok" to suppress "warning[fwdref]"
 198+ 9971             >
 198+ 9971             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 199+ 9971 2B 99                        dw  BLK_SEEK
 200+ 9973 E8 89                        dw  BBUF
 201+ 9975 E4 98 4C 88                  dw  BLK_FH, FETCH
 202+ 9979 D8 84                        dw  F_WRITE
 203+ 997B 41 81 2F 00                  dw  LIT, $2F, QERROR
 203+ 997F 7B 8D
 204+ 9981 6F 87                        dw  DROP
 205+ 9983 43 86                        dw  EXIT
 206+ 9985
 207+ 9985              //  ______________________________________________________________________
 208+ 9985              //
 209+ 9985              // blk-init     n --
 210+ 9985              // seek block n  within blocks!.bin  file
 211+ 9985                              Colon_Def BLK_INIT, "BLK-INIT", is_normal
 211+ 9985             >                New_Def  BLK_INIT, "BLK-INIT", Enter_Ptr, is_normal ; ok
 211+ 9985             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 211+ 9985             >
 211+ 9985             >                // dummy db directives used to calculate length of namec
 211+ 9985 42 4C 4B 2D >                db      "BLK-INIT"
 211+ 9989 49 4E 49 54 >
 211+ 998D             >len_NFA         defl    $ - temp_NFA
 211+ 998D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 211+ 9985             >
 211+ 9985 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 211+ 9986 42 4C 4B 2D >                db      "BLK-INIT"               // name string in 7-bit ascii, but
 211+ 998A 49 4E 49 54 >
 211+ 998E             >                org     $-1                 // alter last byte of Name just above to set
 211+ 998D D4          >                db      {b $} | END_BIT     // msb as name end
 211+ 998E             >
 211+ 998E 62 99       >                dw      last_NFA            // Link to previous definition Name
 211+ 9990             >BLK_INIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 211+ 9990 CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 211+ 9993             >
 211+ 9993             >
 211+ 9993             >                endif           ; ok        // for other definitions it "points" the correct handler
 211+ 9993             >                // Use of "; ok" to suppress "warning[fwdref]"
 211+ 9993             >
 211+ 9993             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 212+ 9993 E4 98 4C 88                  dw  BLK_FH, FETCH, F_CLOSE, DROP
 212+ 9997 F5 84 6F 87
 213+ 999B F5 98 ED 86                  dw  BLK_FNAME, ONE_PLUS
 214+ 999F A0 8B BC 89                  dw  HERE, THREE, F_OPEN         // open for update (read+write)
 214+ 99A3 0D 85
 215+ 99A5 41 81 2C 00                  dw  LIT, $2C, QERROR
 215+ 99A9 7B 8D
 216+ 99AB E4 98 57 88                  dw  BLK_FH, STORE
 217+ 99AF 43 86                        dw  EXIT
 218+ 99B1
 219+ 99B1              //  ______________________________________________________________________
 220+ 99B1              //
 221+ 99B1              // #sec
 222+ 99B1              // number of 512 Byte "sector" available on thie sysstem.
 223+ 99B1              // it addd up to 16 MByte of data that can be used as source or pool for almost anything.
 224+ 99B1
 225+ 99B1                              Constant_Def NSEC , "#SEC", 32767
 225+ 99B1             >                New_Def  NSEC, "#SEC", Constant_Ptr, is_normal
 225+ 99B1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 225+ 99B1             >
 225+ 99B1             >                // dummy db directives used to calculate length of namec
 225+ 99B1 23 53 45 43 >                db      "#SEC"
 225+ 99B5             >len_NFA         defl    $ - temp_NFA
 225+ 99B5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 225+ 99B1             >
 225+ 99B1 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 225+ 99B2 23 53 45 43 >                db      "#SEC"               // name string in 7-bit ascii, but
 225+ 99B6             >                org     $-1                 // alter last byte of Name just above to set
 225+ 99B5 C3          >                db      {b $} | END_BIT     // msb as name end
 225+ 99B6             >
 225+ 99B6 85 99       >                dw      last_NFA            // Link to previous definition Name
 225+ 99B8             >NSEC:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 225+ 99B8 CD 67 89    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 225+ 99BB             >
 225+ 99BB             >
 225+ 99BB             >                endif           ; ok        // for other definitions it "points" the correct handler
 225+ 99BB             >                // Use of "; ok" to suppress "warning[fwdref]"
 225+ 99BB             >
 225+ 99BB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 225+ 99BB FF 7F       >                dw      32767
 226+ 99BD
 227+ 99BD              //  ______________________________________________________________________
 228+ 99BD
 229+ 99BD
 230+ 99BD
# file closed: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/next-opt1.asm
  93  99BD                              include "L3.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/L3.asm
   1+ 99BD              //  ______________________________________________________________________
   2+ 99BD              //
   3+ 99BD              //  L3.asm
   4+ 99BD              //
   5+ 99BD              //  Continuation of L2.asm
   6+ 99BD              //  I/O Block definitions
   7+ 99BD              //  ______________________________________________________________________
   8+ 99BD
   9+ 99BD
  10+ 99BD              //  ______________________________________________________________________
  11+ 99BD              //
  12+ 99BD              // r/w          a n f --
  13+ 99BD              // read/write block n depending on flag f, true-flag means read, false-flag means write.
  14+ 99BD                              Colon_Def READ_WRITE, "R/W", is_normal
  14+ 99BD             >                New_Def  READ_WRITE, "R/W", Enter_Ptr, is_normal ; ok
  14+ 99BD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  14+ 99BD             >
  14+ 99BD             >                // dummy db directives used to calculate length of namec
  14+ 99BD 52 2F 57    >                db      "R/W"
  14+ 99C0             >len_NFA         defl    $ - temp_NFA
  14+ 99C0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  14+ 99BD             >
  14+ 99BD 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  14+ 99BE 52 2F 57    >                db      "R/W"               // name string in 7-bit ascii, but
  14+ 99C1             >                org     $-1                 // alter last byte of Name just above to set
  14+ 99C0 D7          >                db      {b $} | END_BIT     // msb as name end
  14+ 99C1             >
  14+ 99C1 B1 99       >                dw      last_NFA            // Link to previous definition Name
  14+ 99C3             >READ_WRITE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  14+ 99C3 CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  14+ 99C6             >
  14+ 99C6             >
  14+ 99C6             >                endif           ; ok        // for other definitions it "points" the correct handler
  14+ 99C6             >                // Use of "; ok" to suppress "warning[fwdref]"
  14+ 99C6             >
  14+ 99C6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  15+ 99C6 68 86                        dw      TO_R                    // >r
  16+ 99C8 F7 86                        dw      ONE_SUBTRACT            // 1-
  17+ 99CA 9C 87 A4 86                  dw      DUP, ZLESS              // dup 0<
  18+ 99CE 61 87 B8 99                  dw      OVER, NSEC              // over #sec
  19+ 99D2 F7 86 3C 8C                  dw      ONE_SUBTRACT, GREATER   // 1- >
  20+ 99D6 F3 85                        dw      OR_OP                   // or
  21+ 99D8 41 81 06 00                  dw      LIT, 6, QERROR          // 6 ?error
  21+ 99DC 7B 8D
  22+ 99DE 7A 86                        dw      R_TO                    // r>
  23+ 99E0                                                              // if
  24+ 99E0 75 81                        dw      ZBRANCH
  25+ 99E2 08 00                        dw      Read_Write_Else - $
  26+ 99E4 4B 99                        dw          BLK_READ            //      blk-read
  27+ 99E6 60 81                        dw      BRANCH
  28+ 99E8 04 00                        dw      Read_Write_Endif - $
  29+ 99EA              Read_Write_Else:                                // else
  30+ 99EA 6E 99                        dw          BLK_WRITE           //      blk-write
  31+ 99EC              Read_Write_Endif:                               // endif
  32+ 99EC 43 86                        dw      EXIT                    // ;
  33+ 99EE
  34+ 99EE
  35+ 99EE              //  ______________________________________________________________________
  36+ 99EE              //
  37+ 99EE              // +buf        a1 -- a2 f
  38+ 99EE              // advences to next buffer, cyclically rotating along them
  39+ 99EE                              Colon_Def PBUF, "+BUF", is_normal
  39+ 99EE             >                New_Def  PBUF, "+BUF", Enter_Ptr, is_normal ; ok
  39+ 99EE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  39+ 99EE             >
  39+ 99EE             >                // dummy db directives used to calculate length of namec
  39+ 99EE 2B 42 55 46 >                db      "+BUF"
  39+ 99F2             >len_NFA         defl    $ - temp_NFA
  39+ 99F2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  39+ 99EE             >
  39+ 99EE 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  39+ 99EF 2B 42 55 46 >                db      "+BUF"               // name string in 7-bit ascii, but
  39+ 99F3             >                org     $-1                 // alter last byte of Name just above to set
  39+ 99F2 C6          >                db      {b $} | END_BIT     // msb as name end
  39+ 99F3             >
  39+ 99F3 BD 99       >                dw      last_NFA            // Link to previous definition Name
  39+ 99F5             >PBUF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  39+ 99F5 CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  39+ 99F8             >
  39+ 99F8             >
  39+ 99F8             >                endif           ; ok        // for other definitions it "points" the correct handler
  39+ 99F8             >                // Use of "; ok" to suppress "warning[fwdref]"
  39+ 99F8             >
  39+ 99F8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  40+ 99F8 41 81 04 02                  dw      LIT, 516, PLUS          // 516 +
  40+ 99FC C8 86
  41+ 99FE 9C 87 98 8A                  dw      DUP, LIMIT, FETCH       // dup limit @
  41+ 9A02 4C 88
  42+ 9A04 02 8C                        dw      EQUALS                  // =
  43+ 9A06                                                              // if
  44+ 9A06 75 81                        dw      ZBRANCH
  45+ 9A08 08 00                        dw      PBuf_Endif - $
  46+ 9A0A 6F 87                        dw          DROP                //      drop
  47+ 9A0C 8C 8A 4C 88                  dw          FIRST, FETCH        //      first @
  48+ 9A10              PBuf_Endif:                                     // endif
  49+ 9A10 9C 87 5C 8B                  dw      DUP, PREV, FETCH        // dup prev @
  49+ 9A14 4C 88
  50+ 9A16 F6 8B                        dw      SUBTRACT                // -
  51+ 9A18 43 86                        dw      EXIT                    // ;
  52+ 9A1A
  53+ 9A1A              //  ______________________________________________________________________
  54+ 9A1A              //
  55+ 9A1A              // update       --
  56+ 9A1A              // mark the last used block to be written to disk
  57+ 9A1A                              Colon_Def UPDATE, "UPDATE", is_normal
  57+ 9A1A             >                New_Def  UPDATE, "UPDATE", Enter_Ptr, is_normal ; ok
  57+ 9A1A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  57+ 9A1A             >
  57+ 9A1A             >                // dummy db directives used to calculate length of namec
  57+ 9A1A 55 50 44 41 >                db      "UPDATE"
  57+ 9A1E 54 45       >
  57+ 9A20             >len_NFA         defl    $ - temp_NFA
  57+ 9A20             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  57+ 9A1A             >
  57+ 9A1A 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  57+ 9A1B 55 50 44 41 >                db      "UPDATE"               // name string in 7-bit ascii, but
  57+ 9A1F 54 45       >
  57+ 9A21             >                org     $-1                 // alter last byte of Name just above to set
  57+ 9A20 C5          >                db      {b $} | END_BIT     // msb as name end
  57+ 9A21             >
  57+ 9A21 EE 99       >                dw      last_NFA            // Link to previous definition Name
  57+ 9A23             >UPDATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  57+ 9A23 CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  57+ 9A26             >
  57+ 9A26             >
  57+ 9A26             >                endif           ; ok        // for other definitions it "points" the correct handler
  57+ 9A26             >                // Use of "; ok" to suppress "warning[fwdref]"
  57+ 9A26             >
  57+ 9A26             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  58+ 9A26 5C 8B 4C 88                  dw      PREV, FETCH, FETCH      // prev @ @
  58+ 9A2A 4C 88
  59+ 9A2C 41 81 00 80                  dw      LIT, $8000, OR_OP       // $8000, or
  59+ 9A30 F3 85
  60+ 9A32 5C 8B 4C 88                  dw      PREV, FETCH, STORE      // prev @ !
  60+ 9A36 57 88
  61+ 9A38 43 86                        dw      EXIT                    // ;
  62+ 9A3A
  63+ 9A3A
  64+ 9A3A              //  ______________________________________________________________________
  65+ 9A3A              //
  66+ 9A3A              // empty-buffers --
  67+ 9A3A                              Colon_Def EMPTY_BUFFERS, "EMPTY-BUFFERS", is_normal
  67+ 9A3A             >                New_Def  EMPTY_BUFFERS, "EMPTY-BUFFERS", Enter_Ptr, is_normal ; ok
  67+ 9A3A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  67+ 9A3A             >
  67+ 9A3A             >                // dummy db directives used to calculate length of namec
  67+ 9A3A 45 4D 50 54 >                db      "EMPTY-BUFFERS"
  67+ 9A3E 59 2D 42 55 >
  67+ 9A42 46 46 45 52 >
  67+ 9A46 53          >
  67+ 9A47             >len_NFA         defl    $ - temp_NFA
  67+ 9A47             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  67+ 9A3A             >
  67+ 9A3A 8D          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  67+ 9A3B 45 4D 50 54 >                db      "EMPTY-BUFFERS"               // name string in 7-bit ascii, but
  67+ 9A3F 59 2D 42 55 >
  67+ 9A43 46 46 45 52 >
  67+ 9A47 53          >
  67+ 9A48             >                org     $-1                 // alter last byte of Name just above to set
  67+ 9A47 D3          >                db      {b $} | END_BIT     // msb as name end
  67+ 9A48             >
  67+ 9A48 1A 9A       >                dw      last_NFA            // Link to previous definition Name
  67+ 9A4A             >EMPTY_BUFFERS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  67+ 9A4A CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  67+ 9A4D             >
  67+ 9A4D             >
  67+ 9A4D             >                endif           ; ok        // for other definitions it "points" the correct handler
  67+ 9A4D             >                // Use of "; ok" to suppress "warning[fwdref]"
  67+ 9A4D             >
  67+ 9A4D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  68+ 9A4D 8C 8A 4C 88                  dw      FIRST, FETCH            // first @
  69+ 9A51 98 8A 4C 88                  dw      LIMIT, FETCH            // limit @
  70+ 9A55 61 87 F6 8B                  dw      OVER, SUBTRACT, ERASE   // over - erase
  70+ 9A59 86 90
  71+ 9A5B 43 86                        dw      EXIT                    // ;
  72+ 9A5D
  73+ 9A5D              //  ______________________________________________________________________
  74+ 9A5D              //
  75+ 9A5D              // buffer       n -- a
  76+ 9A5D              // read block n and gives the address to a buffer
  77+ 9A5D              // any block previously inside the buffer, if modified, is rewritten to
  78+ 9A5D              // disk before reading the block n.
  79+ 9A5D
  80+ 9A5D                              Colon_Def BUFFER, "BUFFER", is_normal
  80+ 9A5D             >                New_Def  BUFFER, "BUFFER", Enter_Ptr, is_normal ; ok
  80+ 9A5D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  80+ 9A5D             >
  80+ 9A5D             >                // dummy db directives used to calculate length of namec
  80+ 9A5D 42 55 46 46 >                db      "BUFFER"
  80+ 9A61 45 52       >
  80+ 9A63             >len_NFA         defl    $ - temp_NFA
  80+ 9A63             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  80+ 9A5D             >
  80+ 9A5D 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  80+ 9A5E 42 55 46 46 >                db      "BUFFER"               // name string in 7-bit ascii, but
  80+ 9A62 45 52       >
  80+ 9A64             >                org     $-1                 // alter last byte of Name just above to set
  80+ 9A63 D2          >                db      {b $} | END_BIT     // msb as name end
  80+ 9A64             >
  80+ 9A64 3A 9A       >                dw      last_NFA            // Link to previous definition Name
  80+ 9A66             >BUFFER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  80+ 9A66 CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  80+ 9A69             >
  80+ 9A69             >
  80+ 9A69             >                endif           ; ok        // for other definitions it "points" the correct handler
  80+ 9A69             >                // Use of "; ok" to suppress "warning[fwdref]"
  80+ 9A69             >
  80+ 9A69             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  81+ 9A69 51 8B 4C 88                  dw      USE, FETCH              // use @
  82+ 9A6D 9C 87 68 86                  dw      DUP, TO_R               // dup >r
  83+ 9A71                                                              // begin
  84+ 9A71              Buffer_Begin:
  85+ 9A71 F5 99                        dw          PBUF                //      +buf
  86+ 9A73                                                              // until
  87+ 9A73 75 81                        dw      ZBRANCH
  88+ 9A75 FC FF                        dw      Buffer_Begin - $
  89+ 9A77 51 8B 57 88                  dw      USE, STORE              // use !
  90+ 9A7B 8B 86 4C 88                  dw      R_OP, FETCH, ZLESS      // r @ 0<
  90+ 9A7F A4 86
  91+ 9A81                                                              // if
  92+ 9A81 75 81                        dw      ZBRANCH
  93+ 9A83 14 00                        dw      Buffer_Endif - $
  94+ 9A85 8B 86 0F 87                  dw          R_OP, CELL_PLUS     //      r cell+
  95+ 9A89 8B 86 4C 88                  dw          R_OP, FETCH         //      r fetch
  96+ 9A8D 41 81 FF 7F                  dw          LIT, $7FFF          //      7FFF
  97+ 9A91 E3 85                        dw          AND_OP              //      and
  98+ 9A93 A1 89 C3 99                  dw          ZERO, READ_WRITE    //      0 r/w
  99+ 9A97              Buffer_Endif:                                   // endif
 100+ 9A97 8B 86 57 88                  dw      R_OP, STORE             // r !
 101+ 9A9B 8B 86 5C 8B                  dw      R_OP, PREV, STORE       // r prev !
 101+ 9A9F 57 88
 102+ 9AA1 7A 86 0F 87                  dw      R_TO, CELL_PLUS         // r> cell+
 103+ 9AA5 43 86                        dw      EXIT                    // ;
 104+ 9AA7
 105+ 9AA7              //  ______________________________________________________________________
 106+ 9AA7              //
 107+ 9AA7              // block        n -- a
 108+ 9AA7              // Leaves the buffer address that contains the block n.
 109+ 9AA7              // If the block is not already present, it will be loaded from disk
 110+ 9AA7              // The block previously inside the buffer, if modified, is rewritten to
 111+ 9AA7              // disk before reading the block n.
 112+ 9AA7              // See also BUFFER, R/W, UPDATE, FLUSH.
 113+ 9AA7
 114+ 9AA7                              Colon_Def BLOCK, "BLOCK", is_normal
 114+ 9AA7             >                New_Def  BLOCK, "BLOCK", Enter_Ptr, is_normal ; ok
 114+ 9AA7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 114+ 9AA7             >
 114+ 9AA7             >                // dummy db directives used to calculate length of namec
 114+ 9AA7 42 4C 4F 43 >                db      "BLOCK"
 114+ 9AAB 4B          >
 114+ 9AAC             >len_NFA         defl    $ - temp_NFA
 114+ 9AAC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 114+ 9AA7             >
 114+ 9AA7 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 114+ 9AA8 42 4C 4F 43 >                db      "BLOCK"               // name string in 7-bit ascii, but
 114+ 9AAC 4B          >
 114+ 9AAD             >                org     $-1                 // alter last byte of Name just above to set
 114+ 9AAC CB          >                db      {b $} | END_BIT     // msb as name end
 114+ 9AAD             >
 114+ 9AAD 5D 9A       >                dw      last_NFA            // Link to previous definition Name
 114+ 9AAF             >BLOCK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 114+ 9AAF CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 114+ 9AB2             >
 114+ 9AB2             >
 114+ 9AB2             >                endif           ; ok        // for other definitions it "points" the correct handler
 114+ 9AB2             >                // Use of "; ok" to suppress "warning[fwdref]"
 114+ 9AB2             >
 114+ 9AB2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 115+ 9AB2 E3 8A 4C 88                  dw      OFFSET, FETCH           // offset @
 116+ 9AB6 C8 86 68 86                  dw      PLUS, TO_R              // + >r
 117+ 9ABA 5C 8B 4C 88                  dw      PREV, FETCH             // prev @
 118+ 9ABE 9C 87 4C 88                  dw      DUP, FETCH              // dup @
 119+ 9AC2 8B 86 F6 8B                  dw      R_OP, SUBTRACT          // r -
 120+ 9AC6 9C 87 C8 86                  dw      DUP, PLUS               // dup +  ( trick: check equality without most significant bit )
 121+ 9ACA                                                              // if
 122+ 9ACA 75 81                        dw        ZBRANCH
 123+ 9ACC 34 00                        dw        Block_Endif_1 - $
 124+ 9ACE              Block_Begin:                                    //      begin
 125+ 9ACE F5 99 93 86                  dw          PBUF, ZEQUAL        //          +buf 0
 126+ 9AD2                                                              //          if
 127+ 9AD2 75 81                        dw          ZBRANCH
 128+ 9AD4 14 00                        dw          Block_Endif_2 - $
 129+ 9AD6 6F 87                        dw              DROP            //              drop
 130+ 9AD8 8B 86 66 9A                  dw              R_OP, BUFFER    //              r buffer
 131+ 9ADC 9C 87                        dw              DUP             //              dup
 132+ 9ADE 8B 86 AA 89                  dw              R_OP, ONE       //              r 1
 133+ 9AE2 C3 99                        dw              READ_WRITE      //              r/w
 134+ 9AE4 B3 89 F6 8B                  dw              TWO, SUBTRACT   //              2 -
 135+ 9AE8              Block_Endif_2:                                  //          endif
 136+ 9AE8 9C 87 4C 88                  dw          DUP, FETCH, R_OP    //          dup @ r
 136+ 9AEC 8B 86
 137+ 9AEE F6 8B 9C 87                  dw          SUBTRACT, DUP       //          - dup
 138+ 9AF2 C8 86 93 86                  dw          PLUS, ZEQUAL        //          + 0=
 139+ 9AF6                                                              //      until
 140+ 9AF6 75 81                        dw        ZBRANCH
 141+ 9AF8 D6 FF                        dw        Block_Begin - $
 142+ 9AFA              // Next_Breakpoint_1:
 143+ 9AFA
 144+ 9AFA 9C 87 5C 8B                  dw        DUP, PREV, STORE      //      dup prev !
 144+ 9AFE 57 88
 145+ 9B00              Block_Endif_1:                                  // endif
 146+ 9B00 7A 86 6F 87                  dw      R_TO, DROP, CELL_PLUS   // r> drop cell+
 146+ 9B04 0F 87
 147+ 9B06 43 86                        dw      EXIT                    // ;
 148+ 9B08
 149+ 9B08              //  ______________________________________________________________________
 150+ 9B08              //
 151+ 9B08              // #buff        -- n
 152+ 9B08              // number of buffers available. must be the difference between LIMIT and FIRST divided by 516
 153+ 9B08                              Constant_Def NBUFF,   "#BUFF", 7
 153+ 9B08             >                New_Def  NBUFF, "#BUFF", Constant_Ptr, is_normal
 153+ 9B08             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 153+ 9B08             >
 153+ 9B08             >                // dummy db directives used to calculate length of namec
 153+ 9B08 23 42 55 46 >                db      "#BUFF"
 153+ 9B0C 46          >
 153+ 9B0D             >len_NFA         defl    $ - temp_NFA
 153+ 9B0D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 153+ 9B08             >
 153+ 9B08 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 153+ 9B09 23 42 55 46 >                db      "#BUFF"               // name string in 7-bit ascii, but
 153+ 9B0D 46          >
 153+ 9B0E             >                org     $-1                 // alter last byte of Name just above to set
 153+ 9B0D C6          >                db      {b $} | END_BIT     // msb as name end
 153+ 9B0E             >
 153+ 9B0E A7 9A       >                dw      last_NFA            // Link to previous definition Name
 153+ 9B10             >NBUFF:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 153+ 9B10 CD 67 89    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 153+ 9B13             >
 153+ 9B13             >
 153+ 9B13             >                endif           ; ok        // for other definitions it "points" the correct handler
 153+ 9B13             >                // Use of "; ok" to suppress "warning[fwdref]"
 153+ 9B13             >
 153+ 9B13             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 153+ 9B13 07 00       >                dw      7
 154+ 9B15
 155+ 9B15              //  ______________________________________________________________________
 156+ 9B15              //
 157+ 9B15              // flush        --
 158+ 9B15                              Colon_Def FLUSH, "FLUSH", is_normal
 158+ 9B15             >                New_Def  FLUSH, "FLUSH", Enter_Ptr, is_normal ; ok
 158+ 9B15             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 158+ 9B15             >
 158+ 9B15             >                // dummy db directives used to calculate length of namec
 158+ 9B15 46 4C 55 53 >                db      "FLUSH"
 158+ 9B19 48          >
 158+ 9B1A             >len_NFA         defl    $ - temp_NFA
 158+ 9B1A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 158+ 9B15             >
 158+ 9B15 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 158+ 9B16 46 4C 55 53 >                db      "FLUSH"               // name string in 7-bit ascii, but
 158+ 9B1A 48          >
 158+ 9B1B             >                org     $-1                 // alter last byte of Name just above to set
 158+ 9B1A C8          >                db      {b $} | END_BIT     // msb as name end
 158+ 9B1B             >
 158+ 9B1B 08 9B       >                dw      last_NFA            // Link to previous definition Name
 158+ 9B1D             >FLUSH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 158+ 9B1D CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 158+ 9B20             >
 158+ 9B20             >
 158+ 9B20             >                endif           ; ok        // for other definitions it "points" the correct handler
 158+ 9B20             >                // Use of "; ok" to suppress "warning[fwdref]"
 158+ 9B20             >
 158+ 9B20             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 159+ 9B20 10 9B ED 86                  dw      NBUFF, ONE_PLUS, ZERO   // #buff 1+ 0
 159+ 9B24 A1 89
 160+ 9B26              Flush_Do:                                       // do
 161+ 9B26 F5 81                        dw      C_DO
 162+ 9B28 A1 89 66 9A                  dw      ZERO, BUFFER, DROP      //      0 buffer drop
 162+ 9B2C 6F 87
 163+ 9B2E                                                              // loop
 164+ 9B2E 88 81 F8 FF                  dw      C_LOOP, Flush_Do - $
 165+ 9B32 E4 98 4C 88                  dw      BLK_FH, FETCH           // blk-fh @     ( ZX-Next dependance )
 166+ 9B36 2E 85 6F 87                  dw      F_SYNC, DROP            // f_sync drop
 167+ 9B3A 43 86                        dw      EXIT                    // exit
 168+ 9B3C
 169+ 9B3C              //  ______________________________________________________________________
 170+ 9B3C              //
 171+ 9B3C              // f_getline    a fh -- a n
 172+ 9B3C              // Given an open filehandle read next line (terminated with $0D or $0A)
 173+ 9B3C              // Address a is left for subsequent processing
 174+ 9B3C              // and n as the actual number of byte read, that is the length of line
 175+ 9B3C                              Colon_Def F_GETLINE, "F_GETLINE", is_normal
 175+ 9B3C             >                New_Def  F_GETLINE, "F_GETLINE", Enter_Ptr, is_normal ; ok
 175+ 9B3C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 175+ 9B3C             >
 175+ 9B3C             >                // dummy db directives used to calculate length of namec
 175+ 9B3C 46 5F 47 45 >                db      "F_GETLINE"
 175+ 9B40 54 4C 49 4E >
 175+ 9B44 45          >
 175+ 9B45             >len_NFA         defl    $ - temp_NFA
 175+ 9B45             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 175+ 9B3C             >
 175+ 9B3C 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 175+ 9B3D 46 5F 47 45 >                db      "F_GETLINE"               // name string in 7-bit ascii, but
 175+ 9B41 54 4C 49 4E >
 175+ 9B45 45          >
 175+ 9B46             >                org     $-1                 // alter last byte of Name just above to set
 175+ 9B45 C5          >                db      {b $} | END_BIT     // msb as name end
 175+ 9B46             >
 175+ 9B46 15 9B       >                dw      last_NFA            // Link to previous definition Name
 175+ 9B48             >F_GETLINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 175+ 9B48 CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 175+ 9B4B             >
 175+ 9B4B             >
 175+ 9B4B             >                endif           ; ok        // for other definitions it "points" the correct handler
 175+ 9B4B             >                // Use of "; ok" to suppress "warning[fwdref]"
 175+ 9B4B             >
 175+ 9B4B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 176+ 9B4B 9C 87 68 86                  dw      DUP, TO_R               // dup >r           ( a  fh )  \  fh
 177+ 9B4F 9F 84                        dw      F_FGETPOS               // f_fgetpos        ( a  d  f )  \  fh
 178+ 9B51 41 81 2C 00                  dw      LIT, 44, QERROR         // 44 ?error        ( a  d  )  \  fh
 178+ 9B55 7B 8D
 179+ 9B57
 180+ 9B57 A7 87 9C 87                  dw      ROT, DUP, BBUF          // rot dup b/buf    ( d  a  a  512 )  \  fh
 180+ 9B5B E8 89
 181+ 9B5D FA 87 98 90                  dw      TWO_DUP, BLANKS         // 2dup blanks      ( d  a  a  512 )  \  fh
 182+ 9B61
 183+ 9B61 24 87                        dw      CELL_MINUS              //  cell-           ( d  a  a  510 )  \  fh
 184+ 9B63 91 87 ED 86                  dw      SWAP, ONE_PLUS, SWAP    // swap 1+ swap     ( d  a  a+1  510 )  \  fh
 184+ 9B67 91 87
 185+ 9B69
 186+ 9B69 F7 86 8B 86                  dw      ONE_SUBTRACT, R_OP      // 1- r             ( d  a  a+1  509  fh )  \  fh
 187+ 9B6D BB 84                        dw      F_READ                  // f_read           ( d  a  n  f )  \  fh
 188+ 9B6F 41 81 2E 00                  dw      LIT, 46, QERROR         // 46 ?error        ( d  a  n )  \  fh
 188+ 9B73 7B 8D
 189+ 9B75                                                              // if ( at least 1 chr was read )  \  fh
 190+ 9B75 75 81                        dw      ZBRANCH
 191+ 9B77 3A 00                        dw      FGetline_Else - $
 192+ 9B79 41 81 0A 00                  dw          LIT, 10, ENCLOSE    //      10 enclose       ( d  a   i j k )  \  fh
 192+ 9B7D D2 82
 193+ 9B7F 6F 87 91 87                  dw          DROP, SWAP, DROP    //      drop swap drop   ( d  a  j  )  \  fh
 193+ 9B83 6F 87
 194+ 9B85 91 87                        dw          SWAP                //      drop swap        ( d  j  a  )  \  fh
 195+ 9B87 41 81 0D 00                  dw          LIT, 13, ENCLOSE    //      13 enclose       ( d  j  a   i j k )  \  fh
 195+ 9B8B D2 82
 196+ 9B8D 6F 87 91 87                  dw          DROP, SWAP, DROP    //      drop swap drop   ( d  jnl  a  jcr  )  \  fh
 196+ 9B91 6F 87
 197+ 9B93 A7 87 4B 8C                  dw          ROT, MIN            //      rot min          ( d  a  n  )  \  fh
 198+ 9B97 9C 87 68 86                  dw          DUP, TO_R           //      dup >r           ( d  a  n  )    \  fh n
 199+ 9B9B EA 87 7A 86                  dw          TWO_SWAP, R_TO      //      2swap r>         ( a  n  d  n  )  \  fh
 200+ 9B9F A1 89 D3 86                  dw          ZERO, DPLUS         //      0 d+             ( a  n  d+n  )  \  fh
 201+ 9BA3 7A 86 7C 84                  dw          R_TO, F_SEEK        //      r> f_seek        ( a  n  f )
 202+ 9BA7 41 81 2D 00                  dw          LIT, 45, QERROR     //      45 ?error        ( a  n  )
 202+ 9BAB 7B 8D
 203+ 9BAD                                                              // else
 204+ 9BAD 60 81                        dw      BRANCH
 205+ 9BAF 0C 00                        dw      FGetline_Endif - $
 206+ 9BB1              FGetline_Else:
 207+ 9BB1 7A 86                        dw          R_TO                //      r>              ( d  a  fh  )
 208+ 9BB3 EA 87 DE 87                  dw          TWO_SWAP, TWO_DROP  //      2swap 2drop     ( a  fh  )
 209+ 9BB7 6F 87 A1 89                  dw          DROP, ZERO          //      drop, 0         ( a  0 )
 210+ 9BBB              FGetline_Endif:                                 // endif
 211+ 9BBB FA 87 C8 86                  dw      TWO_DUP, PLUS, OVER     // 2dup + over          ( a  n  a+n  n )
 211+ 9BBF 61 87
 212+ 9BC1 E8 89 91 87                  dw      BBUF, SWAP, SUBTRACT    // b/buf swap -         ( a  n  a+n  512-n )
 212+ 9BC5 F6 8B
 213+ 9BC7 98 90                        dw      BLANKS                  // blanks               ( a  n )
 214+ 9BC9 FA 87 C8 86                  dw      TWO_DUP, PLUS, ZERO     // 2dup + 0             ( a  n  a+n  0 )
 214+ 9BCD A1 89
 215+ 9BCF 91 87 6F 88                  dw      SWAP, CSTORE            // swap c!              ( a  n )
 216+ 9BD3 43 86                        dw      EXIT                    // ;
 217+ 9BD5
 218+ 9BD5              //  ______________________________________________________________________
 219+ 9BD5              //
 220+ 9BD5              // f_include    fh --
 221+ 9BD5              // Given a filehandle includes the source from file
 222+ 9BD5                              Colon_Def F_INCLUDE, "F_INCLUDE", is_normal
 222+ 9BD5             >                New_Def  F_INCLUDE, "F_INCLUDE", Enter_Ptr, is_normal ; ok
 222+ 9BD5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 222+ 9BD5             >
 222+ 9BD5             >                // dummy db directives used to calculate length of namec
 222+ 9BD5 46 5F 49 4E >                db      "F_INCLUDE"
 222+ 9BD9 43 4C 55 44 >
 222+ 9BDD 45          >
 222+ 9BDE             >len_NFA         defl    $ - temp_NFA
 222+ 9BDE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 222+ 9BD5             >
 222+ 9BD5 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 222+ 9BD6 46 5F 49 4E >                db      "F_INCLUDE"               // name string in 7-bit ascii, but
 222+ 9BDA 43 4C 55 44 >
 222+ 9BDE 45          >
 222+ 9BDF             >                org     $-1                 // alter last byte of Name just above to set
 222+ 9BDE C5          >                db      {b $} | END_BIT     // msb as name end
 222+ 9BDF             >
 222+ 9BDF 3C 9B       >                dw      last_NFA            // Link to previous definition Name
 222+ 9BE1             >F_INCLUDE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 222+ 9BE1 CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 222+ 9BE4             >
 222+ 9BE4             >
 222+ 9BE4             >                endif           ; ok        // for other definitions it "points" the correct handler
 222+ 9BE4             >                // Use of "; ok" to suppress "warning[fwdref]"
 222+ 9BE4             >
 222+ 9BE4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 223+ 9BE4 B8 8A 4C 88                  dw      BLK, FETCH, TO_R        // blk @ >r
 223+ 9BE8 68 86
 224+ 9BEA C2 8A 4C 88                  dw      TO_IN, FETCH, TO_R      // >in @ >r
 224+ 9BEE 68 86
 225+ 9BF0 81 8B 4C 88                  dw      SOURCE_ID, FETCH, TO_R  // source-id @ >r
 225+ 9BF4 68 86
 226+ 9BF6 8B 86                        dw      R_OP                    // r
 227+ 9BF8                                                              // if
 228+ 9BF8 75 81                        dw      ZBRANCH
 229+ 9BFA 10 00                        dw      FInclude_Else_1 - $
 230+ 9BFC 8B 86 9F 84                  dw          R_OP, F_FGETPOS     //      r f_getpos
 231+ 9C00 41 81 2C 00                  dw          LIT, 44, QERROR     //      44 ?error
 231+ 9C04 7B 8D
 232+ 9C06                                                              // else
 233+ 9C06 60 81                        dw      BRANCH
 234+ 9C08 06 00                        dw      FInclude_Endif_1 - $
 235+ 9C0A              FInclude_Else_1:
 236+ 9C0A A1 89 A1 89                  dw          ZERO, ZERO          //      0 0
 237+ 9C0E                                                              // endif
 238+ 9C0E              FInclude_Endif_1:
 239+ 9C0E 68 86 68 86                  dw      TO_R, TO_R              // >r >r
 240+ 9C12 81 8B 57 88                  dw      SOURCE_ID, STORE        // source-id !
 241+ 9C16              FInclude_Begin:                                 // begin
 242+ 9C16 AA 89 AF 9A                  dw          ONE, BLOCK          //      1 block
 243+ 9C1A 81 8B 4C 88                  dw          SOURCE_ID, FETCH    //      source-id @
 244+ 9C1E 48 9B                        dw          F_GETLINE           //      f_getline
 245+ 9C20 91 87 6F 87                  dw          SWAP, DROP          //      swap drop
 246+ 9C24                                                              // while
 247+ 9C24 75 81                        dw      ZBRANCH
 248+ 9C26 16 00                        dw      FInclude_Repeat - $
 249+ 9C28 23 9A                        dw          UPDATE              //      update
 250+ 9C2A AA 89 B8 8A                  dw          ONE, BLK, STORE     //      1 blk !
 250+ 9C2E 57 88
 251+ 9C30 A1 89 C2 8A                  dw          ZERO, TO_IN, STORE  //      0 >in !
 251+ 9C34 57 88
 252+ 9C36 87 94                        dw          INTERPRET           //      interpret
 253+ 9C38 60 81                        dw      BRANCH
 254+ 9C3A DC FF                        dw      FInclude_Begin - $
 255+ 9C3C              FInclude_Repeat:                                // repeat
 256+ 9C3C 81 8B 4C 88                  dw      SOURCE_ID, FETCH        // source-id @
 257+ 9C40 A1 89 81 8B                  dw      ZERO, SOURCE_ID, STORE  // 0 source-id !
 257+ 9C44 57 88
 258+ 9C46 F5 84                        dw      F_CLOSE                 // f_close
 259+ 9C48 41 81 2A 00                  dw      LIT, 42, QERROR         // 42 ?error
 259+ 9C4C 7B 8D
 260+ 9C4E 7A 86 7A 86                  dw      R_TO, R_TO, R_TO        // r> r> r>
 260+ 9C52 7A 86
 261+ 9C54 9C 87 81 8B                  dw      DUP, SOURCE_ID, STORE   // dup source-id !
 261+ 9C58 57 88
 262+ 9C5A                                                              // if
 263+ 9C5A 75 81                        dw      ZBRANCH
 264+ 9C5C 12 00                        dw      FInclude_Else_2 - $
 265+ 9C5E 81 8B 4C 88                  dw          SOURCE_ID, FETCH    //      source-id @
 266+ 9C62 7C 84                        dw          F_SEEK              //      f_seek
 267+ 9C64 41 81 2B 00                  dw          LIT, 43, QERROR     //      43, ?error
 267+ 9C68 7B 8D
 268+ 9C6A                                                              // else
 269+ 9C6A 60 81                        dw      BRANCH
 270+ 9C6C 04 00                        dw      FInclude_Endif_2 - $
 271+ 9C6E              FInclude_Else_2:
 272+ 9C6E DE 87                        dw          TWO_DROP            //      2drop
 273+ 9C70              FInclude_Endif_2:                               // endif
 274+ 9C70 7A 86 C2 8A                  dw      R_TO, TO_IN, STORE      // r> >in !
 274+ 9C74 57 88
 275+ 9C76 7A 86 B8 8A                  dw      R_TO, BLK, STORE        // r> blk !
 275+ 9C7A 57 88
 276+ 9C7C 43 86                        dw      EXIT                    // ;
 277+ 9C7E
 278+ 9C7E              //  ______________________________________________________________________
 279+ 9C7E              //
 280+ 9C7E              // include      -- cccc
 281+ 9C7E              // Include the following filename
 282+ 9C7E                              Colon_Def INCLUDE, "INCLUDE", is_normal
 282+ 9C7E             >                New_Def  INCLUDE, "INCLUDE", Enter_Ptr, is_normal ; ok
 282+ 9C7E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 282+ 9C7E             >
 282+ 9C7E             >                // dummy db directives used to calculate length of namec
 282+ 9C7E 49 4E 43 4C >                db      "INCLUDE"
 282+ 9C82 55 44 45    >
 282+ 9C85             >len_NFA         defl    $ - temp_NFA
 282+ 9C85             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 282+ 9C7E             >
 282+ 9C7E 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 282+ 9C7F 49 4E 43 4C >                db      "INCLUDE"               // name string in 7-bit ascii, but
 282+ 9C83 55 44 45    >
 282+ 9C86             >                org     $-1                 // alter last byte of Name just above to set
 282+ 9C85 C5          >                db      {b $} | END_BIT     // msb as name end
 282+ 9C86             >
 282+ 9C86 D5 9B       >                dw      last_NFA            // Link to previous definition Name
 282+ 9C88             >INCLUDE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 282+ 9C88 CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 282+ 9C8B             >
 282+ 9C8B             >
 282+ 9C8B             >                endif           ; ok        // for other definitions it "points" the correct handler
 282+ 9C8B             >                // Use of "; ok" to suppress "warning[fwdref]"
 282+ 9C8B             >
 282+ 9C8B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 283+ 9C8B D0 89 D3 90                  dw      BL, WORD, COUNT, OVER   // bl word count over
 283+ 9C8F 35 8F 61 87
 284+ 9C93 C8 86 A1 89                  dw      PLUS, ZERO, SWAP, STORE // + 0 swap !
 284+ 9C97 91 87 57 88
 285+ 9C9B BF 90 AA 89                  dw      PAD, ONE, F_OPEN        // pad 1 f_open
 285+ 9C9F 0D 85
 286+ 9CA1 41 81 2B 00                  dw      LIT, 43, QERROR         // 43 ?error
 286+ 9CA5 7B 8D
 287+ 9CA7 E1 9B                        dw      F_INCLUDE               // f_include
 288+ 9CA9 43 86                        dw      EXIT                    // ;
 289+ 9CAB
 290+ 9CAB              //  ______________________________________________________________________
 291+ 9CAB              //
 292+ 9CAB              // load+        n --
 293+ 9CAB                              Colon_Def LOAD_P, "LOAD+", is_normal
 293+ 9CAB             >                New_Def  LOAD_P, "LOAD+", Enter_Ptr, is_normal ; ok
 293+ 9CAB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 293+ 9CAB             >
 293+ 9CAB             >                // dummy db directives used to calculate length of namec
 293+ 9CAB 4C 4F 41 44 >                db      "LOAD+"
 293+ 9CAF 2B          >
 293+ 9CB0             >len_NFA         defl    $ - temp_NFA
 293+ 9CB0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 293+ 9CAB             >
 293+ 9CAB 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 293+ 9CAC 4C 4F 41 44 >                db      "LOAD+"               // name string in 7-bit ascii, but
 293+ 9CB0 2B          >
 293+ 9CB1             >                org     $-1                 // alter last byte of Name just above to set
 293+ 9CB0 AB          >                db      {b $} | END_BIT     // msb as name end
 293+ 9CB1             >
 293+ 9CB1 7E 9C       >                dw      last_NFA            // Link to previous definition Name
 293+ 9CB3             >LOAD_P:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 293+ 9CB3 CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 293+ 9CB6             >
 293+ 9CB6             >
 293+ 9CB6             >                endif           ; ok        // for other definitions it "points" the correct handler
 293+ 9CB6             >                // Use of "; ok" to suppress "warning[fwdref]"
 293+ 9CB6             >
 293+ 9CB6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 294+ 9CB6 B8 8A 4C 88                  dw      BLK, FETCH, TO_R        // blk @ >r
 294+ 9CBA 68 86
 295+ 9CBC C2 8A 4C 88                  dw      TO_IN, FETCH, TO_R      // >in @ >r
 295+ 9CC0 68 86
 296+ 9CC2
 297+ 9CC2 A1 89 C2 8A                  dw      ZERO, TO_IN, STORE      // 0 >in !
 297+ 9CC6 57 88
 298+ 9CC8 F5 89 D9 96                  dw      BSCR, MUL, BLK, STORE   // b/scr * blk !
 298+ 9CCC B8 8A 57 88
 299+ 9CD0 87 94                        dw      INTERPRET               // interpret
 300+ 9CD2
 301+ 9CD2 7A 86 C2 8A                  dw      R_TO, TO_IN, STORE      // r> >in !
 301+ 9CD6 57 88
 302+ 9CD8 7A 86 B8 8A                  dw      R_TO, BLK, STORE        // r> blk !
 302+ 9CDC 57 88
 303+ 9CDE 43 86                        dw      EXIT                    // ;
 304+ 9CE0
 305+ 9CE0              //  ______________________________________________________________________
 306+ 9CE0              //
 307+ 9CE0              // -->          --
 308+ 9CE0                              Colon_Def LOAD_NEXT, "-->", is_immediate
 308+ 9CE0             >                New_Def  LOAD_NEXT, "-->", Enter_Ptr, is_immediate ; ok
 308+ 9CE0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 308+ 9CE0             >
 308+ 9CE0             >                // dummy db directives used to calculate length of namec
 308+ 9CE0 2D 2D 3E    >                db      "-->"
 308+ 9CE3             >len_NFA         defl    $ - temp_NFA
 308+ 9CE3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 308+ 9CE0             >
 308+ 9CE0 C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 308+ 9CE1 2D 2D 3E    >                db      "-->"               // name string in 7-bit ascii, but
 308+ 9CE4             >                org     $-1                 // alter last byte of Name just above to set
 308+ 9CE3 BE          >                db      {b $} | END_BIT     // msb as name end
 308+ 9CE4             >
 308+ 9CE4 AB 9C       >                dw      last_NFA            // Link to previous definition Name
 308+ 9CE6             >LOAD_NEXT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 308+ 9CE6 CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 308+ 9CE9             >
 308+ 9CE9             >
 308+ 9CE9             >                endif           ; ok        // for other definitions it "points" the correct handler
 308+ 9CE9             >                // Use of "; ok" to suppress "warning[fwdref]"
 308+ 9CE9             >
 308+ 9CE9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 309+ 9CE9 F9 8D                        dw      QLOADING                // ?loading
 310+ 9CEB A1 89 C2 8A                  dw      ZERO, TO_IN, STORE      // 0 >in !
 310+ 9CEF 57 88
 311+ 9CF1 F5 89                        dw      BSCR                    // b/scr
 312+ 9CF3 B8 8A 4C 88                  dw      BLK, FETCH              // blk @
 313+ 9CF7 61 87                        dw      OVER                    // over
 314+ 9CF9 0B 97                        dw      MOD                     // mod
 315+ 9CFB F6 8B                        dw      SUBTRACT                // -
 316+ 9CFD B8 8A 2D 88                  dw      BLK, PLUSSTORE          // +!
 317+ 9D01 43 86                        dw      EXIT                    // ;
 318+ 9D03
 319+ 9D03              //  ______________________________________________________________________
 320+ 9D03              //
 321+ 9D03              // '            -- xt
 322+ 9D03                              Colon_Def TICK, "'", is_normal
 322+ 9D03             >                New_Def  TICK, "'", Enter_Ptr, is_normal ; ok
 322+ 9D03             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 322+ 9D03             >
 322+ 9D03             >                // dummy db directives used to calculate length of namec
 322+ 9D03 27          >                db      "'"
 322+ 9D04             >len_NFA         defl    $ - temp_NFA
 322+ 9D04             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 322+ 9D03             >
 322+ 9D03 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 322+ 9D04 27          >                db      "'"               // name string in 7-bit ascii, but
 322+ 9D05             >                org     $-1                 // alter last byte of Name just above to set
 322+ 9D04 A7          >                db      {b $} | END_BIT     // msb as name end
 322+ 9D05             >
 322+ 9D05 E0 9C       >                dw      last_NFA            // Link to previous definition Name
 322+ 9D07             >TICK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 322+ 9D07 CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 322+ 9D0A             >
 322+ 9D0A             >
 322+ 9D0A             >                endif           ; ok        // for other definitions it "points" the correct handler
 322+ 9D0A             >                // Use of "; ok" to suppress "warning[fwdref]"
 322+ 9D0A             >
 322+ 9D0A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 323+ 9D0A 8F 92                        dw      LFIND                   // -find
 324+ 9D0C 93 86                        dw      ZEQUAL                  // 0=
 325+ 9D0E A1 89 7B 8D                  dw      ZERO, QERROR            // 0 ?error
 326+ 9D12 6F 87                        dw      DROP                    // drop
 327+ 9D14 43 86                        dw      EXIT                    // ;
 328+ 9D16
 329+ 9D16              //  ______________________________________________________________________
 330+ 9D16              //
 331+ 9D16              // forget       -- cccc
 332+ 9D16                              Colon_Def FORGET, "FORGET", is_normal
 332+ 9D16             >                New_Def  FORGET, "FORGET", Enter_Ptr, is_normal ; ok
 332+ 9D16             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 332+ 9D16             >
 332+ 9D16             >                // dummy db directives used to calculate length of namec
 332+ 9D16 46 4F 52 47 >                db      "FORGET"
 332+ 9D1A 45 54       >
 332+ 9D1C             >len_NFA         defl    $ - temp_NFA
 332+ 9D1C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 332+ 9D16             >
 332+ 9D16 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 332+ 9D17 46 4F 52 47 >                db      "FORGET"               // name string in 7-bit ascii, but
 332+ 9D1B 45 54       >
 332+ 9D1D             >                org     $-1                 // alter last byte of Name just above to set
 332+ 9D1C D4          >                db      {b $} | END_BIT     // msb as name end
 332+ 9D1D             >
 332+ 9D1D 03 9D       >                dw      last_NFA            // Link to previous definition Name
 332+ 9D1F             >FORGET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 332+ 9D1F CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 332+ 9D22             >
 332+ 9D22             >
 332+ 9D22             >                endif           ; ok        // for other definitions it "points" the correct handler
 332+ 9D22             >                // Use of "; ok" to suppress "warning[fwdref]"
 332+ 9D22             >
 332+ 9D22             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 333+ 9D22 FF 8A 4C 88                  dw      CURRENT, FETCH          // current @
 334+ 9D26 F1 8A 4C 88                  dw      CONTEXT, FETCH          // context @
 335+ 9D2A F6 8B 41 81                  dw      SUBTRACT, LIT, 23, QERROR // - 23 ?error
 335+ 9D2E 17 00 7B 8D
 336+ 9D32 07 9D 46 8D                  dw      TICK, TO_BODY           // ' >body
 337+ 9D36 9C 87 68 8A                  dw      DUP, FENCE, FETCH       // dup fence @
 337+ 9D3A 4C 88
 338+ 9D3C 10 8C 41 81                  dw      ULESS, LIT, 21, QERROR  // u< 21 ?error
 338+ 9D40 15 00 7B 8D
 339+ 9D44 9C 87 1A 8D                  dw      DUP, NFA, DP, STORE     // dup nfa dp !
 339+ 9D48 71 8A 57 88
 340+ 9D4C FC 8C 4C 88                  dw      LFA, FETCH              // lfa @
 341+ 9D50 F1 8A 4C 88                  dw      CONTEXT, FETCH, STORE   // context @ !
 341+ 9D54 57 88
 342+ 9D56 43 86                        dw      EXIT                    // ;
 343+ 9D58
 344+ 9D58              //  ______________________________________________________________________
 345+ 9D58              //
 346+ 9D58              // marker       -- cccc
 347+ 9D58                              Colon_Def MARKER, "MARKER", is_immediate
 347+ 9D58             >                New_Def  MARKER, "MARKER", Enter_Ptr, is_immediate ; ok
 347+ 9D58             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 347+ 9D58             >
 347+ 9D58             >                // dummy db directives used to calculate length of namec
 347+ 9D58 4D 41 52 4B >                db      "MARKER"
 347+ 9D5C 45 52       >
 347+ 9D5E             >len_NFA         defl    $ - temp_NFA
 347+ 9D5E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 347+ 9D58             >
 347+ 9D58 C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 347+ 9D59 4D 41 52 4B >                db      "MARKER"               // name string in 7-bit ascii, but
 347+ 9D5D 45 52       >
 347+ 9D5F             >                org     $-1                 // alter last byte of Name just above to set
 347+ 9D5E D2          >                db      {b $} | END_BIT     // msb as name end
 347+ 9D5F             >
 347+ 9D5F 16 9D       >                dw      last_NFA            // Link to previous definition Name
 347+ 9D61             >MARKER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 347+ 9D61 CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 347+ 9D64             >
 347+ 9D64             >
 347+ 9D64             >                endif           ; ok        // for other definitions it "points" the correct handler
 347+ 9D64             >                // Use of "; ok" to suppress "warning[fwdref]"
 347+ 9D64             >
 347+ 9D64             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 348+ 9D64 E4 8E                        dw      CBUILDS
 349+ 9D66 80 8A 4C 88                  dw      VOC_LINK, FETCH, COMMA
 349+ 9D6A BE 8B
 350+ 9D6C FF 8A 4C 88                  dw      CURRENT, FETCH, COMMA
 350+ 9D70 BE 8B
 351+ 9D72 F1 8A 4C 88                  dw      CONTEXT, FETCH, COMMA
 351+ 9D76 BE 8B
 352+ 9D78 EB 8C BE 8B                  dw      LATEST, COMMA
 353+ 9D7C EB 8C 2F 8D                  dw      LATEST, PFA, LFA, FETCH, COMMA
 353+ 9D80 FC 8C 4C 88
 353+ 9D84 BE 8B
 354+ 9D86 0E 8F                        dw      DOES_TO
 355+ 9D88 9C 87 4C 88                  dw      DUP, FETCH, VOC_LINK, STORE, CELL_PLUS
 355+ 9D8C 80 8A 57 88
 355+ 9D90 0F 87
 356+ 9D92 9C 87 4C 88                  dw      DUP, FETCH, CURRENT, STORE, CELL_PLUS
 356+ 9D96 FF 8A 57 88
 356+ 9D9A 0F 87
 357+ 9D9C 9C 87 4C 88                  dw      DUP, FETCH, CONTEXT, STORE, CELL_PLUS
 357+ 9DA0 F1 8A 57 88
 357+ 9DA4 0F 87
 358+ 9DA6 9C 87 4C 88                  dw      DUP, FETCH, DP, STORE, CELL_PLUS
 358+ 9DAA 71 8A 57 88
 358+ 9DAE 0F 87
 359+ 9DB0 4C 88 FF 8A                  dw           FETCH, CURRENT, FETCH, STORE
 359+ 9DB4 4C 88 57 88
 360+ 9DB8 43 86                        dw      EXIT
 361+ 9DBA
 362+ 9DBA              //  ______________________________________________________________________
 363+ 9DBA              //
 364+ 9DBA              // spaces       n --
 365+ 9DBA                              Colon_Def SPACES, "SPACES", is_normal
 365+ 9DBA             >                New_Def  SPACES, "SPACES", Enter_Ptr, is_normal ; ok
 365+ 9DBA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 365+ 9DBA             >
 365+ 9DBA             >                // dummy db directives used to calculate length of namec
 365+ 9DBA 53 50 41 43 >                db      "SPACES"
 365+ 9DBE 45 53       >
 365+ 9DC0             >len_NFA         defl    $ - temp_NFA
 365+ 9DC0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 365+ 9DBA             >
 365+ 9DBA 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 365+ 9DBB 53 50 41 43 >                db      "SPACES"               // name string in 7-bit ascii, but
 365+ 9DBF 45 53       >
 365+ 9DC1             >                org     $-1                 // alter last byte of Name just above to set
 365+ 9DC0 D3          >                db      {b $} | END_BIT     // msb as name end
 365+ 9DC1             >
 365+ 9DC1 58 9D       >                dw      last_NFA            // Link to previous definition Name
 365+ 9DC3             >SPACES:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 365+ 9DC3 CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 365+ 9DC6             >
 365+ 9DC6             >
 365+ 9DC6             >                endif           ; ok        // for other definitions it "points" the correct handler
 365+ 9DC6             >                // Use of "; ok" to suppress "warning[fwdref]"
 365+ 9DC6             >
 365+ 9DC6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 366+ 9DC6 A1 89 62 8C                  dw      ZERO, MAX
 367+ 9DCA A1 89 C9 81                  dw      ZERO, C_Q_DO
 368+ 9DCE 08 00                        dw      Spaces_Leave - $
 369+ 9DD0              Spaces_Loop:
 370+ 9DD0 B1 8C                        dw          SPACE
 371+ 9DD2 88 81                        dw      C_LOOP
 372+ 9DD4 FC FF                        dw      Spaces_Loop - $
 373+ 9DD6              Spaces_Leave:
 374+ 9DD6 43 86                        dw      EXIT                    // ;
 375+ 9DD8
 376+ 9DD8              //  ______________________________________________________________________
 377+ 9DD8              //
 378+ 9DD8              // <#           --
 379+ 9DD8                              Colon_Def BEGIN_DASH, "<#", is_normal
 379+ 9DD8             >                New_Def  BEGIN_DASH, "<#", Enter_Ptr, is_normal ; ok
 379+ 9DD8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 379+ 9DD8             >
 379+ 9DD8             >                // dummy db directives used to calculate length of namec
 379+ 9DD8 3C 23       >                db      "<#"
 379+ 9DDA             >len_NFA         defl    $ - temp_NFA
 379+ 9DDA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 379+ 9DD8             >
 379+ 9DD8 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 379+ 9DD9 3C 23       >                db      "<#"               // name string in 7-bit ascii, but
 379+ 9DDB             >                org     $-1                 // alter last byte of Name just above to set
 379+ 9DDA A3          >                db      {b $} | END_BIT     // msb as name end
 379+ 9DDB             >
 379+ 9DDB BA 9D       >                dw      last_NFA            // Link to previous definition Name
 379+ 9DDD             >BEGIN_DASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 379+ 9DDD CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 379+ 9DE0             >
 379+ 9DE0             >
 379+ 9DE0             >                endif           ; ok        // for other definitions it "points" the correct handler
 379+ 9DE0             >                // Use of "; ok" to suppress "warning[fwdref]"
 379+ 9DE0             >
 379+ 9DE0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 380+ 9DE0 BF 90 47 8B                  dw      PAD, HLD, STORE
 380+ 9DE4 57 88
 381+ 9DE6 43 86                        dw      EXIT
 382+ 9DE8
 383+ 9DE8              //  ______________________________________________________________________
 384+ 9DE8              //
 385+ 9DE8              // #>           --
 386+ 9DE8                              Colon_Def DASH_END, "#>", is_normal
 386+ 9DE8             >                New_Def  DASH_END, "#>", Enter_Ptr, is_normal ; ok
 386+ 9DE8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 386+ 9DE8             >
 386+ 9DE8             >                // dummy db directives used to calculate length of namec
 386+ 9DE8 23 3E       >                db      "#>"
 386+ 9DEA             >len_NFA         defl    $ - temp_NFA
 386+ 9DEA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 386+ 9DE8             >
 386+ 9DE8 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 386+ 9DE9 23 3E       >                db      "#>"               // name string in 7-bit ascii, but
 386+ 9DEB             >                org     $-1                 // alter last byte of Name just above to set
 386+ 9DEA BE          >                db      {b $} | END_BIT     // msb as name end
 386+ 9DEB             >
 386+ 9DEB D8 9D       >                dw      last_NFA            // Link to previous definition Name
 386+ 9DED             >DASH_END:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 386+ 9DED CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 386+ 9DF0             >
 386+ 9DF0             >
 386+ 9DF0             >                endif           ; ok        // for other definitions it "points" the correct handler
 386+ 9DF0             >                // Use of "; ok" to suppress "warning[fwdref]"
 386+ 9DF0             >
 386+ 9DF0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 387+ 9DF0 DE 87                        dw      TWO_DROP
 388+ 9DF2 47 8B 4C 88                  dw      HLD, FETCH, PAD, OVER, SUBTRACT
 388+ 9DF6 BF 90 61 87
 388+ 9DFA F6 8B
 389+ 9DFC 43 86                        dw      EXIT
 390+ 9DFE
 391+ 9DFE              //  ______________________________________________________________________
 392+ 9DFE              //
 393+ 9DFE              // sign         n d -- d
 394+ 9DFE                              Colon_Def SIGN, "SIGN", is_normal
 394+ 9DFE             >                New_Def  SIGN, "SIGN", Enter_Ptr, is_normal ; ok
 394+ 9DFE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 394+ 9DFE             >
 394+ 9DFE             >                // dummy db directives used to calculate length of namec
 394+ 9DFE 53 49 47 4E >                db      "SIGN"
 394+ 9E02             >len_NFA         defl    $ - temp_NFA
 394+ 9E02             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 394+ 9DFE             >
 394+ 9DFE 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 394+ 9DFF 53 49 47 4E >                db      "SIGN"               // name string in 7-bit ascii, but
 394+ 9E03             >                org     $-1                 // alter last byte of Name just above to set
 394+ 9E02 CE          >                db      {b $} | END_BIT     // msb as name end
 394+ 9E03             >
 394+ 9E03 E8 9D       >                dw      last_NFA            // Link to previous definition Name
 394+ 9E05             >SIGN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 394+ 9E05 CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 394+ 9E08             >
 394+ 9E08             >
 394+ 9E08             >                endif           ; ok        // for other definitions it "points" the correct handler
 394+ 9E08             >                // Use of "; ok" to suppress "warning[fwdref]"
 394+ 9E08             >
 394+ 9E08             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 395+ 9E08 A7 87 A4 86                  dw      ROT, ZLESS
 396+ 9E0C 75 81                        dw      ZBRANCH
 397+ 9E0E 08 00                        dw      Sign_Endif - $
 398+ 9E10 41 81 2D 00                  dw          LIT, 45, HOLD
 398+ 9E14 A8 90
 399+ 9E16              Sign_Endif:
 400+ 9E16 43 86                        dw      EXIT
 401+ 9E18
 402+ 9E18              //  ______________________________________________________________________
 403+ 9E18              //
 404+ 9E18              // #           d1 -- d2
 405+ 9E18                              Colon_Def DASH, "#", is_normal
 405+ 9E18             >                New_Def  DASH, "#", Enter_Ptr, is_normal ; ok
 405+ 9E18             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 405+ 9E18             >
 405+ 9E18             >                // dummy db directives used to calculate length of namec
 405+ 9E18 23          >                db      "#"
 405+ 9E19             >len_NFA         defl    $ - temp_NFA
 405+ 9E19             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 405+ 9E18             >
 405+ 9E18 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 405+ 9E19 23          >                db      "#"               // name string in 7-bit ascii, but
 405+ 9E1A             >                org     $-1                 // alter last byte of Name just above to set
 405+ 9E19 A3          >                db      {b $} | END_BIT     // msb as name end
 405+ 9E1A             >
 405+ 9E1A FE 9D       >                dw      last_NFA            // Link to previous definition Name
 405+ 9E1C             >DASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 405+ 9E1C CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 405+ 9E1F             >
 405+ 9E1F             >
 405+ 9E1F             >                endif           ; ok        // for other definitions it "points" the correct handler
 405+ 9E1F             >                // Use of "; ok" to suppress "warning[fwdref]"
 405+ 9E1F             >
 405+ 9E1F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 406+ 9E1F 16 8B 4C 88                  dw      BASE, FETCH, MDIV_MOD, ROT
 406+ 9E23 41 97 A7 87
 407+ 9E27 41 81 09 00                  dw      LIT, 9, OVER, LESS
 407+ 9E2B 61 87 22 8C
 408+ 9E2F 75 81                        dw      ZBRANCH
 409+ 9E31 08 00                        dw      Dash_Endif - $
 410+ 9E33 41 81 07 00                  dw          LIT, 7, PLUS
 410+ 9E37 C8 86
 411+ 9E39              Dash_Endif:
 412+ 9E39
 413+ 9E39 41 81 30 00                  dw      LIT, 48, PLUS, HOLD
 413+ 9E3D C8 86 A8 90
 414+ 9E41 43 86                        dw      EXIT
 415+ 9E43
 416+ 9E43              //  ______________________________________________________________________
 417+ 9E43              //
 418+ 9E43              // #s           d1 -- d2
 419+ 9E43                              Colon_Def DASHES, "#S", is_normal
 419+ 9E43             >                New_Def  DASHES, "#S", Enter_Ptr, is_normal ; ok
 419+ 9E43             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 419+ 9E43             >
 419+ 9E43             >                // dummy db directives used to calculate length of namec
 419+ 9E43 23 53       >                db      "#S"
 419+ 9E45             >len_NFA         defl    $ - temp_NFA
 419+ 9E45             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 419+ 9E43             >
 419+ 9E43 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 419+ 9E44 23 53       >                db      "#S"               // name string in 7-bit ascii, but
 419+ 9E46             >                org     $-1                 // alter last byte of Name just above to set
 419+ 9E45 D3          >                db      {b $} | END_BIT     // msb as name end
 419+ 9E46             >
 419+ 9E46 18 9E       >                dw      last_NFA            // Link to previous definition Name
 419+ 9E48             >DASHES:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 419+ 9E48 CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 419+ 9E4B             >
 419+ 9E4B             >
 419+ 9E4B             >                endif           ; ok        // for other definitions it "points" the correct handler
 419+ 9E4B             >                // Use of "; ok" to suppress "warning[fwdref]"
 419+ 9E4B             >
 419+ 9E4B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 420+ 9E4B              Dashes_Begin:
 421+ 9E4B 1C 9E FA 87                  dw      DASH, TWO_DUP
 422+ 9E4F F3 85 93 86                  dw          OR_OP, ZEQUAL
 423+ 9E53 75 81                        dw      ZBRANCH
 424+ 9E55 F6 FF                        dw      Dashes_Begin - $
 425+ 9E57 43 86                        dw      EXIT
 426+ 9E59
 427+ 9E59              //  ______________________________________________________________________
 428+ 9E59              //
 429+ 9E59              // d.r          d n --
 430+ 9E59                              Colon_Def D_DOT_R, "D.R", is_normal
 430+ 9E59             >                New_Def  D_DOT_R, "D.R", Enter_Ptr, is_normal ; ok
 430+ 9E59             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 430+ 9E59             >
 430+ 9E59             >                // dummy db directives used to calculate length of namec
 430+ 9E59 44 2E 52    >                db      "D.R"
 430+ 9E5C             >len_NFA         defl    $ - temp_NFA
 430+ 9E5C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 430+ 9E59             >
 430+ 9E59 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 430+ 9E5A 44 2E 52    >                db      "D.R"               // name string in 7-bit ascii, but
 430+ 9E5D             >                org     $-1                 // alter last byte of Name just above to set
 430+ 9E5C D2          >                db      {b $} | END_BIT     // msb as name end
 430+ 9E5D             >
 430+ 9E5D 43 9E       >                dw      last_NFA            // Link to previous definition Name
 430+ 9E5F             >D_DOT_R:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 430+ 9E5F CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 430+ 9E62             >
 430+ 9E62             >
 430+ 9E62             >                endif           ; ok        // for other definitions it "points" the correct handler
 430+ 9E62             >                // Use of "; ok" to suppress "warning[fwdref]"
 430+ 9E62             >
 430+ 9E62             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 431+ 9E62 68 86                        dw      TO_R
 432+ 9E64 91 87 61 87                  dw      SWAP, OVER, DABS
 432+ 9E68 88 96
 433+ 9E6A DD 9D 48 9E                  dw      BEGIN_DASH, DASHES, SIGN, DASH_END
 433+ 9E6E 05 9E ED 9D
 434+ 9E72 7A 86                        dw      R_TO
 435+ 9E74 61 87 F6 8B                  dw      OVER, SUBTRACT, SPACES, TYPE
 435+ 9E78 C3 9D 49 8F
 436+ 9E7C 43 86                        dw      EXIT
 437+ 9E7E
 438+ 9E7E              //  ______________________________________________________________________
 439+ 9E7E              //
 440+ 9E7E              // .r           n1 n2 --
 441+ 9E7E                              Colon_Def DOT_R, ".R", is_normal
 441+ 9E7E             >                New_Def  DOT_R, ".R", Enter_Ptr, is_normal ; ok
 441+ 9E7E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 441+ 9E7E             >
 441+ 9E7E             >                // dummy db directives used to calculate length of namec
 441+ 9E7E 2E 52       >                db      ".R"
 441+ 9E80             >len_NFA         defl    $ - temp_NFA
 441+ 9E80             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 441+ 9E7E             >
 441+ 9E7E 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 441+ 9E7F 2E 52       >                db      ".R"               // name string in 7-bit ascii, but
 441+ 9E81             >                org     $-1                 // alter last byte of Name just above to set
 441+ 9E80 D2          >                db      {b $} | END_BIT     // msb as name end
 441+ 9E81             >
 441+ 9E81 59 9E       >                dw      last_NFA            // Link to previous definition Name
 441+ 9E83             >DOT_R:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 441+ 9E83 CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 441+ 9E86             >
 441+ 9E86             >
 441+ 9E86             >                endif           ; ok        // for other definitions it "points" the correct handler
 441+ 9E86             >                // Use of "; ok" to suppress "warning[fwdref]"
 441+ 9E86             >
 441+ 9E86             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 442+ 9E86 68 86                        dw      TO_R
 443+ 9E88 E4 8B 7A 86                  dw      S_TO_D, R_TO
 444+ 9E8C 5F 9E                        dw      D_DOT_R
 445+ 9E8E 43 86                        dw      EXIT
 446+ 9E90
 447+ 9E90              //  ______________________________________________________________________
 448+ 9E90              //
 449+ 9E90              // d.           d --
 450+ 9E90                              Colon_Def D_DOT, "D.", is_normal
 450+ 9E90             >                New_Def  D_DOT, "D.", Enter_Ptr, is_normal ; ok
 450+ 9E90             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 450+ 9E90             >
 450+ 9E90             >                // dummy db directives used to calculate length of namec
 450+ 9E90 44 2E       >                db      "D."
 450+ 9E92             >len_NFA         defl    $ - temp_NFA
 450+ 9E92             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 450+ 9E90             >
 450+ 9E90 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 450+ 9E91 44 2E       >                db      "D."               // name string in 7-bit ascii, but
 450+ 9E93             >                org     $-1                 // alter last byte of Name just above to set
 450+ 9E92 AE          >                db      {b $} | END_BIT     // msb as name end
 450+ 9E93             >
 450+ 9E93 7E 9E       >                dw      last_NFA            // Link to previous definition Name
 450+ 9E95             >D_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 450+ 9E95 CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 450+ 9E98             >
 450+ 9E98             >
 450+ 9E98             >                endif           ; ok        // for other definitions it "points" the correct handler
 450+ 9E98             >                // Use of "; ok" to suppress "warning[fwdref]"
 450+ 9E98             >
 450+ 9E98             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 451+ 9E98 A1 89 5F 9E                  dw      ZERO, D_DOT_R, SPACE
 451+ 9E9C B1 8C
 452+ 9E9E 43 86                        dw      EXIT
 453+ 9EA0
 454+ 9EA0              //  ______________________________________________________________________
 455+ 9EA0              //
 456+ 9EA0              // .            n --
 457+ 9EA0                              Colon_Def DOT, ".", is_normal
 457+ 9EA0             >                New_Def  DOT, ".", Enter_Ptr, is_normal ; ok
 457+ 9EA0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 457+ 9EA0             >
 457+ 9EA0             >                // dummy db directives used to calculate length of namec
 457+ 9EA0 2E          >                db      "."
 457+ 9EA1             >len_NFA         defl    $ - temp_NFA
 457+ 9EA1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 457+ 9EA0             >
 457+ 9EA0 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 457+ 9EA1 2E          >                db      "."               // name string in 7-bit ascii, but
 457+ 9EA2             >                org     $-1                 // alter last byte of Name just above to set
 457+ 9EA1 AE          >                db      {b $} | END_BIT     // msb as name end
 457+ 9EA2             >
 457+ 9EA2 90 9E       >                dw      last_NFA            // Link to previous definition Name
 457+ 9EA4             >DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 457+ 9EA4 CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 457+ 9EA7             >
 457+ 9EA7             >
 457+ 9EA7             >                endif           ; ok        // for other definitions it "points" the correct handler
 457+ 9EA7             >                // Use of "; ok" to suppress "warning[fwdref]"
 457+ 9EA7             >
 457+ 9EA7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 458+ 9EA7 E4 8B 95 9E                  dw      S_TO_D, D_DOT
 459+ 9EAB 43 86                        dw      EXIT
 460+ 9EAD
 461+ 9EAD              //  ______________________________________________________________________
 462+ 9EAD              //
 463+ 9EAD              // ?            n --
 464+ 9EAD                              Colon_Def QUESTION, "?", is_normal
 464+ 9EAD             >                New_Def  QUESTION, "?", Enter_Ptr, is_normal ; ok
 464+ 9EAD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 464+ 9EAD             >
 464+ 9EAD             >                // dummy db directives used to calculate length of namec
 464+ 9EAD 3F          >                db      "?"
 464+ 9EAE             >len_NFA         defl    $ - temp_NFA
 464+ 9EAE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 464+ 9EAD             >
 464+ 9EAD 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 464+ 9EAE 3F          >                db      "?"               // name string in 7-bit ascii, but
 464+ 9EAF             >                org     $-1                 // alter last byte of Name just above to set
 464+ 9EAE BF          >                db      {b $} | END_BIT     // msb as name end
 464+ 9EAF             >
 464+ 9EAF A0 9E       >                dw      last_NFA            // Link to previous definition Name
 464+ 9EB1             >QUESTION:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 464+ 9EB1 CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 464+ 9EB4             >
 464+ 9EB4             >
 464+ 9EB4             >                endif           ; ok        // for other definitions it "points" the correct handler
 464+ 9EB4             >                // Use of "; ok" to suppress "warning[fwdref]"
 464+ 9EB4             >
 464+ 9EB4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 465+ 9EB4 4C 88 A4 9E                  dw      FETCH, DOT
 466+ 9EB8 43 86                        dw      EXIT
 467+ 9EBA
 468+ 9EBA              //  ______________________________________________________________________
 469+ 9EBA              //
 470+ 9EBA              // u.           u --
 471+ 9EBA                              Colon_Def U_DOT, "U.", is_normal
 471+ 9EBA             >                New_Def  U_DOT, "U.", Enter_Ptr, is_normal ; ok
 471+ 9EBA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 471+ 9EBA             >
 471+ 9EBA             >                // dummy db directives used to calculate length of namec
 471+ 9EBA 55 2E       >                db      "U."
 471+ 9EBC             >len_NFA         defl    $ - temp_NFA
 471+ 9EBC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 471+ 9EBA             >
 471+ 9EBA 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 471+ 9EBB 55 2E       >                db      "U."               // name string in 7-bit ascii, but
 471+ 9EBD             >                org     $-1                 // alter last byte of Name just above to set
 471+ 9EBC AE          >                db      {b $} | END_BIT     // msb as name end
 471+ 9EBD             >
 471+ 9EBD AD 9E       >                dw      last_NFA            // Link to previous definition Name
 471+ 9EBF             >U_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 471+ 9EBF CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 471+ 9EC2             >
 471+ 9EC2             >
 471+ 9EC2             >                endif           ; ok        // for other definitions it "points" the correct handler
 471+ 9EC2             >                // Use of "; ok" to suppress "warning[fwdref]"
 471+ 9EC2             >
 471+ 9EC2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 472+ 9EC2 A1 89 95 9E                  dw      ZERO, D_DOT
 473+ 9EC6 43 86                        dw      EXIT
 474+ 9EC8
 475+ 9EC8              //  ______________________________________________________________________
 476+ 9EC8              //
 477+ 9EC8              // words        --
 478+ 9EC8                              Colon_Def WORDS, "WORDS", is_normal
 478+ 9EC8             >                New_Def  WORDS, "WORDS", Enter_Ptr, is_normal ; ok
 478+ 9EC8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 478+ 9EC8             >
 478+ 9EC8             >                // dummy db directives used to calculate length of namec
 478+ 9EC8 57 4F 52 44 >                db      "WORDS"
 478+ 9ECC 53          >
 478+ 9ECD             >len_NFA         defl    $ - temp_NFA
 478+ 9ECD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 478+ 9EC8             >
 478+ 9EC8 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 478+ 9EC9 57 4F 52 44 >                db      "WORDS"               // name string in 7-bit ascii, but
 478+ 9ECD 53          >
 478+ 9ECE             >                org     $-1                 // alter last byte of Name just above to set
 478+ 9ECD D3          >                db      {b $} | END_BIT     // msb as name end
 478+ 9ECE             >
 478+ 9ECE BA 9E       >                dw      last_NFA            // Link to previous definition Name
 478+ 9ED0             >WORDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 478+ 9ED0 CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 478+ 9ED3             >
 478+ 9ED3             >
 478+ 9ED3             >                endif           ; ok        // for other definitions it "points" the correct handler
 478+ 9ED3             >                // Use of "; ok" to suppress "warning[fwdref]"
 478+ 9ED3             >
 478+ 9ED3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 479+ 9ED3 41 81 80 00                  dw      LIT, 128, OUT, STORE
 479+ 9ED7 CC 8A 57 88
 480+ 9EDB F1 8A 4C 88                  dw      CONTEXT, FETCH, FETCH
 480+ 9EDF 4C 88
 481+ 9EE1              Words_Begin:
 482+ 9EE1 9C 87 63 88                  dw          DUP, CFETCH, LIT, $1F, AND_OP
 482+ 9EE5 41 81 1F 00
 482+ 9EE9 E3 85
 483+ 9EEB CC 8A 4C 88                  dw          OUT, FETCH, PLUS
 483+ 9EEF C8 86
 484+ 9EF1 DB 89 22 8C                  dw          CL, LESS, ZEQUAL
 484+ 9EF5 93 86
 485+ 9EF7 75 81                        dw          ZBRANCH
 486+ 9EF9 0A 00                        dw          Words_Endif - $
 487+ 9EFB 42 85 A1 89                  dw              CR, ZERO, OUT, STORE
 487+ 9EFF CC 8A 57 88
 488+ 9F03              Words_Endif:
 489+ 9F03 9C 87 03 93                  dw          DUP, ID_DOT
 490+ 9F07 2F 8D FC 8C                  dw          PFA, LFA, FETCH
 490+ 9F0B 4C 88
 491+ 9F0D 9C 87 93 86                  dw          DUP, ZEQUAL
 492+ 9F11 5C 84 F3 85                  dw          QTERMINAL, OR_OP
 493+ 9F15 75 81                        dw      ZBRANCH
 494+ 9F17 CA FF                        dw      Words_Begin - $
 495+ 9F19 6F 87                        dw      DROP
 496+ 9F1B 43 86                        dw      EXIT
 497+ 9F1D
 498+ 9F1D              //  ______________________________________________________________________
 499+ 9F1D              //
 500+ 9F1D              // list         n --
 501+ 9F1D                              Colon_Def LIST, "LIST", is_normal
 501+ 9F1D             >                New_Def  LIST, "LIST", Enter_Ptr, is_normal ; ok
 501+ 9F1D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 501+ 9F1D             >
 501+ 9F1D             >                // dummy db directives used to calculate length of namec
 501+ 9F1D 4C 49 53 54 >                db      "LIST"
 501+ 9F21             >len_NFA         defl    $ - temp_NFA
 501+ 9F21             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 501+ 9F1D             >
 501+ 9F1D 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 501+ 9F1E 4C 49 53 54 >                db      "LIST"               // name string in 7-bit ascii, but
 501+ 9F22             >                org     $-1                 // alter last byte of Name just above to set
 501+ 9F21 D4          >                db      {b $} | END_BIT     // msb as name end
 501+ 9F22             >
 501+ 9F22 C8 9E       >                dw      last_NFA            // Link to previous definition Name
 501+ 9F24             >LIST:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 501+ 9F24 CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 501+ 9F27             >
 501+ 9F27             >
 501+ 9F27             >                endif           ; ok        // for other definitions it "points" the correct handler
 501+ 9F27             >                // Use of "; ok" to suppress "warning[fwdref]"
 501+ 9F27             >
 501+ 9F27             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 502+ 9F27 93 8E 42 85                  dw      DECIMAL, CR
 503+ 9F2B 9C 87 D6 8A                  dw      DUP, SCR, STORE
 503+ 9F2F 57 88
 504+ 9F31 23 91                        dw      C_DOT_QUOTE
 505+ 9F33 05 53 63 72                  db      5, "Scr# "
 505+ 9F37 23 20
 506+ 9F39 A4 9E                        dw      DOT
 507+ 9F3B 02 8A A1 89                  dw      LSCR, ZERO, C_DO
 507+ 9F3F F5 81
 508+ 9F41              List_Loop:
 509+ 9F41 42 85                        dw          CR
 510+ 9F43 FE 81 BC 89                  dw          I, THREE
 511+ 9F47 83 9E B1 8C                  dw          DOT_R, SPACE
 512+ 9F4B FE 81 D6 8A                  dw          I, SCR, FETCH, DOT_LINE
 512+ 9F4F 4C 88 88 97
 513+ 9F53 5C 84                        dw          QTERMINAL
 514+ 9F55 75 81                        dw          ZBRANCH
 515+ 9F57 04 00                        dw          List_Endif - $
 516+ 9F59 57 86                        dw              LEAVE
 517+ 9F5B              List_Endif:
 518+ 9F5B 88 81                        dw      C_LOOP
 519+ 9F5D E4 FF                        dw      List_Loop - $
 520+ 9F5F 42 85                        dw      CR
 521+ 9F61 43 86                        dw      EXIT
 522+ 9F63
 523+ 9F63              //  ______________________________________________________________________
 524+ 9F63              //
 525+ 9F63              // index        n1 n2 --
 526+ 9F63                              Colon_Def INDEX, "INDEX", is_normal
 526+ 9F63             >                New_Def  INDEX, "INDEX", Enter_Ptr, is_normal ; ok
 526+ 9F63             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 526+ 9F63             >
 526+ 9F63             >                // dummy db directives used to calculate length of namec
 526+ 9F63 49 4E 44 45 >                db      "INDEX"
 526+ 9F67 58          >
 526+ 9F68             >len_NFA         defl    $ - temp_NFA
 526+ 9F68             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 526+ 9F63             >
 526+ 9F63 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 526+ 9F64 49 4E 44 45 >                db      "INDEX"               // name string in 7-bit ascii, but
 526+ 9F68 58          >
 526+ 9F69             >                org     $-1                 // alter last byte of Name just above to set
 526+ 9F68 D8          >                db      {b $} | END_BIT     // msb as name end
 526+ 9F69             >
 526+ 9F69 1D 9F       >                dw      last_NFA            // Link to previous definition Name
 526+ 9F6B             >INDEX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 526+ 9F6B CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 526+ 9F6E             >
 526+ 9F6E             >
 526+ 9F6E             >                endif           ; ok        // for other definitions it "points" the correct handler
 526+ 9F6E             >                // Use of "; ok" to suppress "warning[fwdref]"
 526+ 9F6E             >
 526+ 9F6E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 527+ 9F6E ED 86 91 87                  dw      ONE_PLUS, SWAP, C_DO
 527+ 9F72 F5 81
 528+ 9F74              Index_Loop:
 529+ 9F74 42 85 FE 81                  dw          CR, I, THREE
 529+ 9F78 BC 89
 530+ 9F7A 83 9E B1 8C                  dw          DOT_R, SPACE
 531+ 9F7E A1 89 FE 81                  dw          ZERO, I, DOT_LINE
 531+ 9F82 88 97
 532+ 9F84 5C 84                        dw          QTERMINAL
 533+ 9F86 75 81                        dw          ZBRANCH
 534+ 9F88 04 00                        dw          Index_Endif - $
 535+ 9F8A 57 86                        dw              LEAVE
 536+ 9F8C              Index_Endif:
 537+ 9F8C 88 81                        dw      C_LOOP
 538+ 9F8E E6 FF                        dw      Index_Loop - $
 539+ 9F90 43 86                        dw      EXIT
 540+ 9F92
 541+ 9F92              //  ______________________________________________________________________
 542+ 9F92              //
 543+ 9F92              // cls          --
 544+ 9F92                              Colon_Def CLS, "CLS", is_normal
 544+ 9F92             >                New_Def  CLS, "CLS", Enter_Ptr, is_normal ; ok
 544+ 9F92             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 544+ 9F92             >
 544+ 9F92             >                // dummy db directives used to calculate length of namec
 544+ 9F92 43 4C 53    >                db      "CLS"
 544+ 9F95             >len_NFA         defl    $ - temp_NFA
 544+ 9F95             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 544+ 9F92             >
 544+ 9F92 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 544+ 9F93 43 4C 53    >                db      "CLS"               // name string in 7-bit ascii, but
 544+ 9F96             >                org     $-1                 // alter last byte of Name just above to set
 544+ 9F95 D3          >                db      {b $} | END_BIT     // msb as name end
 544+ 9F96             >
 544+ 9F96 63 9F       >                dw      last_NFA            // Link to previous definition Name
 544+ 9F98             >CLS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 544+ 9F98 CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 544+ 9F9B             >
 544+ 9F9B             >
 544+ 9F9B             >                endif           ; ok        // for other definitions it "points" the correct handler
 544+ 9F9B             >                // Use of "; ok" to suppress "warning[fwdref]"
 544+ 9F9B             >
 544+ 9F9B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 545+ 9F9B 41 81 0E 00                  dw      LIT, $0E, EMITC
 545+ 9F9F 41 83
 546+ 9FA1 43 86                        dw      EXIT
 547+ 9FA3
 548+ 9FA3              //  ______________________________________________________________________
 549+ 9FA3              //
 550+ 9FA3              // splash       --
 551+ 9FA3                              Colon_Def SPLASH, "SPLASH", is_normal
 551+ 9FA3             >                New_Def  SPLASH, "SPLASH", Enter_Ptr, is_normal ; ok
 551+ 9FA3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 551+ 9FA3             >
 551+ 9FA3             >                // dummy db directives used to calculate length of namec
 551+ 9FA3 53 50 4C 41 >                db      "SPLASH"
 551+ 9FA7 53 48       >
 551+ 9FA9             >len_NFA         defl    $ - temp_NFA
 551+ 9FA9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 551+ 9FA3             >
 551+ 9FA3 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 551+ 9FA4 53 50 4C 41 >                db      "SPLASH"               // name string in 7-bit ascii, but
 551+ 9FA8 53 48       >
 551+ 9FAA             >                org     $-1                 // alter last byte of Name just above to set
 551+ 9FA9 C8          >                db      {b $} | END_BIT     // msb as name end
 551+ 9FAA             >
 551+ 9FAA 92 9F       >                dw      last_NFA            // Link to previous definition Name
 551+ 9FAC             >SPLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 551+ 9FAC CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 551+ 9FAF             >
 551+ 9FAF             >
 551+ 9FAF             >                endif           ; ok        // for other definitions it "points" the correct handler
 551+ 9FAF             >                // Use of "; ok" to suppress "warning[fwdref]"
 551+ 9FAF             >
 551+ 9FAF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 552+ 9FAF 98 9F                        dw      CLS
 553+ 9FB1 23 91                        dw      C_DOT_QUOTE
 554+ 9FB3 4F                           db      79
 555+ 9FB4 76 2D 46 6F                  db      "v-Forth 1.5 NextZXOS version", CR_CHAR
 555+ 9FB8 72 74 68 20
 555+ 9FBC 31 2E 35 20
 555+ 9FC0 4E 65 78 74
 555+ 9FC4 5A 58 4F 53
 555+ 9FC8 20 76 65 72
 555+ 9FCC 73 69 6F 6E
 555+ 9FD0 0D
 556+ 9FD1 73 6A 61 73                  db      "sjasmplus build 20210328", CR_CHAR
 556+ 9FD5 6D 70 6C 75
 556+ 9FD9 73 20 62 75
 556+ 9FDD 69 6C 64 20
 556+ 9FE1 32 30 32 31
 556+ 9FE5 30 33 32 38
 556+ 9FE9 0D
 557+ 9FEA 31 39 39 30                  db      "1990-2021 Matteo Vitturi", CR_CHAR
 557+ 9FEE 2D 32 30 32
 557+ 9FF2 31 20 4D 61
 557+ 9FF6 74 74 65 6F
 557+ 9FFA 20 56 69 74
 557+ 9FFE 74 75 72 69
 557+ A002 0D
 558+ A003 43 86                        dw      EXIT
 559+ A005
 560+ A005              //  ______________________________________________________________________
 561+ A005              //
 562+ A005              // video        --
 563+ A005                              Colon_Def VIDEO, "VIDEO", is_normal
 563+ A005             >                New_Def  VIDEO, "VIDEO", Enter_Ptr, is_normal ; ok
 563+ A005             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 563+ A005             >
 563+ A005             >                // dummy db directives used to calculate length of namec
 563+ A005 56 49 44 45 >                db      "VIDEO"
 563+ A009 4F          >
 563+ A00A             >len_NFA         defl    $ - temp_NFA
 563+ A00A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 563+ A005             >
 563+ A005 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 563+ A006 56 49 44 45 >                db      "VIDEO"               // name string in 7-bit ascii, but
 563+ A00A 4F          >
 563+ A00B             >                org     $-1                 // alter last byte of Name just above to set
 563+ A00A CF          >                db      {b $} | END_BIT     // msb as name end
 563+ A00B             >
 563+ A00B A3 9F       >                dw      last_NFA            // Link to previous definition Name
 563+ A00D             >VIDEO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 563+ A00D CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 563+ A010             >
 563+ A010             >
 563+ A010             >                endif           ; ok        // for other definitions it "points" the correct handler
 563+ A010             >                // Use of "; ok" to suppress "warning[fwdref]"
 563+ A010             >
 563+ A010             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 564+ A010 B3 89 9C 87                  dw      TWO, DUP, DEVICE, STORE
 564+ A014 D2 97 57 88
 565+ A018 02 98                        dw      SELECT
 566+ A01A 43 86                        dw      EXIT
 567+ A01C
 568+ A01C              //  ______________________________________________________________________
 569+ A01C              //
 570+ A01C              // accept-      a n1 -- n2
 571+ A01C                              Colon_Def ACCEPT_N, "ACCEPT-", is_normal
 571+ A01C             >                New_Def  ACCEPT_N, "ACCEPT-", Enter_Ptr, is_normal ; ok
 571+ A01C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 571+ A01C             >
 571+ A01C             >                // dummy db directives used to calculate length of namec
 571+ A01C 41 43 43 45 >                db      "ACCEPT-"
 571+ A020 50 54 2D    >
 571+ A023             >len_NFA         defl    $ - temp_NFA
 571+ A023             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 571+ A01C             >
 571+ A01C 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 571+ A01D 41 43 43 45 >                db      "ACCEPT-"               // name string in 7-bit ascii, but
 571+ A021 50 54 2D    >
 571+ A024             >                org     $-1                 // alter last byte of Name just above to set
 571+ A023 AD          >                db      {b $} | END_BIT     // msb as name end
 571+ A024             >
 571+ A024 05 A0       >                dw      last_NFA            // Link to previous definition Name
 571+ A026             >ACCEPT_N:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 571+ A026 CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 571+ A029             >
 571+ A029             >
 571+ A029             >                endif           ; ok        // for other definitions it "points" the correct handler
 571+ A029             >                // Use of "; ok" to suppress "warning[fwdref]"
 571+ A029             >
 571+ A029             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 572+ A029 68 86                        dw      TO_R
 573+ A02B A1 89                        dw      ZERO
 574+ A02D 91 87                        dw      SWAP
 575+ A02F 9C 87                        dw      DUP
 576+ A031 7A 86                        dw      R_TO
 577+ A033 C8 86                        dw      PLUS
 578+ A035 91 87                        dw      SWAP
 579+ A037 F5 81                        dw      C_DO
 580+ A039              AcceptN_Loop:
 581+ A039 52 98                        dw          MMU7_FETCH
 582+ A03B DF 97                        dw          INKEY
 583+ A03D 91 87 65 98                  dw          SWAP, MMU7_STORE
 584+ A041 9C 87 93 86                  dw          DUP, ZEQUAL
 585+ A045 75 81                        dw          ZBRANCH
 586+ A047 06 00                        dw          AcceptN_Endif_1 - $
 587+ A049 0D A0 5A 95                  dw              VIDEO, QUIT
 588+ A04D              AcceptN_Endif_1:
 589+ A04D 9C 87 41 81                  dw          DUP, LIT, 13, EQUALS
 589+ A051 0D 00 02 8C
 590+ A055 75 81                        dw          ZBRANCH
 591+ A057 06 00                        dw          AcceptN_Endif_2 - $
 592+ A059 6F 87 A1 89                  dw              DROP, ZERO
 593+ A05D              AcceptN_Endif_2:
 594+ A05D 9C 87 41 81                  dw          DUP, LIT, 10, EQUALS
 594+ A061 0A 00 02 8C
 595+ A065 75 81                        dw          ZBRANCH
 596+ A067 06 00                        dw          AcceptN_Endif_3 - $
 597+ A069 6F 87 A1 89                  dw              DROP, ZERO
 598+ A06D              AcceptN_Endif_3:
 599+ A06D 9C 87 93 86                  dw          DUP, ZEQUAL
 600+ A071 75 81                        dw          ZBRANCH
 601+ A073 04 00                        dw          AcceptN_Endif_4 - $
 602+ A075 57 86                        dw              LEAVE
 603+ A077              AcceptN_Endif_4:
 604+ A077 FE 81 6F 88                  dw          I, CSTORE, ONE_PLUS
 604+ A07B ED 86
 605+ A07D 88 81                        dw      C_LOOP
 606+ A07F BA FF                        dw      AcceptN_Loop -$
 607+ A081 43 86                        dw      EXIT
 608+ A083
 609+ A083              //  ______________________________________________________________________
 610+ A083              //
 611+ A083              // load-        n --
 612+ A083              // Provided that a stream n is OPEN# via the standart BASIC
 613+ A083              // it accepts text from stream #n to the normal INTERPRET
 614+ A083              // up to now, text-file must end with QUIT
 615+ A083                              Colon_Def LOAD_N, "LOAD-", is_normal
 615+ A083             >                New_Def  LOAD_N, "LOAD-", Enter_Ptr, is_normal ; ok
 615+ A083             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 615+ A083             >
 615+ A083             >                // dummy db directives used to calculate length of namec
 615+ A083 4C 4F 41 44 >                db      "LOAD-"
 615+ A087 2D          >
 615+ A088             >len_NFA         defl    $ - temp_NFA
 615+ A088             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 615+ A083             >
 615+ A083 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 615+ A084 4C 4F 41 44 >                db      "LOAD-"               // name string in 7-bit ascii, but
 615+ A088 2D          >
 615+ A089             >                org     $-1                 // alter last byte of Name just above to set
 615+ A088 AD          >                db      {b $} | END_BIT     // msb as name end
 615+ A089             >
 615+ A089 1C A0       >                dw      last_NFA            // Link to previous definition Name
 615+ A08B             >LOAD_N:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 615+ A08B CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 615+ A08E             >
 615+ A08E             >
 615+ A08E             >                endif           ; ok        // for other definitions it "points" the correct handler
 615+ A08E             >                // Use of "; ok" to suppress "warning[fwdref]"
 615+ A08E             >
 615+ A08E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 616+ A08E 81 8B 57 88                  dw      SOURCE_ID, STORE
 617+ A092              Load_N_Begin:
 618+ A092 42 8A 4C 88                  dw          TIB, FETCH
 619+ A096 9C 87 41 81                  dw          DUP, LIT, 80
 619+ A09A 50 00
 620+ A09C FA 87 98 90                  dw          TWO_DUP, BLANKS
 621+ A0A0 81 8B 4C 88                  dw          SOURCE_ID, FETCH
 622+ A0A4 78 96 9C 87                  dw          ABS_OP, DUP, DEVICE, STORE
 622+ A0A8 D2 97 57 88
 623+ A0AC 02 98                        dw          SELECT
 624+ A0AE 26 A0                        dw          ACCEPT_N
 625+ A0B0 0D A0                        dw          VIDEO
 626+ A0B2 DE 87                        dw          TWO_DROP
 627+ A0B4 A1 89 B8 8A                  dw          ZERO, BLK, STORE
 627+ A0B8 57 88
 628+ A0BA A1 89 C2 8A                  dw          ZERO, TO_IN, STORE
 628+ A0BE 57 88
 629+ A0C0 87 94                        dw          INTERPRET
 630+ A0C2 5C 84                        dw          QTERMINAL
 631+ A0C4 75 81                        dw      ZBRANCH
 632+ A0C6 CC FF                        dw      Load_N_Begin - $
 633+ A0C8 43 86                        dw      EXIT
 634+ A0CA
 635+ A0CA              //  ______________________________________________________________________
 636+ A0CA              //
 637+ A0CA              // load         n --
 638+ A0CA              // if n is positive, it loads screen #n (as usual)
 639+ A0CA              // if n is negative, it connects stream #n to the normal INTERPRET
 640+ A0CA              // this second way is useful if you want to load any kind of file
 641+ A0CA              // provied that it is OPEN# the usual BASIC way.
 642+ A0CA                              Colon_Def LOAD, "LOAD", is_normal
 642+ A0CA             >                New_Def  LOAD, "LOAD", Enter_Ptr, is_normal ; ok
 642+ A0CA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 642+ A0CA             >
 642+ A0CA             >                // dummy db directives used to calculate length of namec
 642+ A0CA 4C 4F 41 44 >                db      "LOAD"
 642+ A0CE             >len_NFA         defl    $ - temp_NFA
 642+ A0CE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 642+ A0CA             >
 642+ A0CA 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 642+ A0CB 4C 4F 41 44 >                db      "LOAD"               // name string in 7-bit ascii, but
 642+ A0CF             >                org     $-1                 // alter last byte of Name just above to set
 642+ A0CE C4          >                db      {b $} | END_BIT     // msb as name end
 642+ A0CF             >
 642+ A0CF 83 A0       >                dw      last_NFA            // Link to previous definition Name
 642+ A0D1             >LOAD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 642+ A0D1 CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 642+ A0D4             >
 642+ A0D4             >
 642+ A0D4             >                endif           ; ok        // for other definitions it "points" the correct handler
 642+ A0D4             >                // Use of "; ok" to suppress "warning[fwdref]"
 642+ A0D4             >
 642+ A0D4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 643+ A0D4 9C 87 A4 86                  dw      DUP, ZLESS
 644+ A0D8 75 81                        dw      ZBRANCH
 645+ A0DA 08 00                        dw      Load_Else - $
 646+ A0DC 8B A0                        dw          LOAD_N
 647+ A0DE 60 81                        dw      BRANCH
 648+ A0E0 04 00                        dw      Load_Endif - $
 649+ A0E2              Load_Else:
 650+ A0E2 B3 9C                        dw          LOAD_P
 651+ A0E4              Load_Endif:
 652+ A0E4 43 86                        dw      EXIT
 653+ A0E6
 654+ A0E6
 655+ A0E6              //  ______________________________________________________________________
 656+ A0E6              //
 657+ A0E6              // autoexec     --
 658+ A0E6              // this word is called the first time the Forth system boot to
 659+ A0E6              // load Screen# 1. Once called it patches itself to prevent furhter runs.
 660+ A0E6                              Colon_Def AUTOEXEC, "AUTOEXEC", is_normal
 660+ A0E6             >                New_Def  AUTOEXEC, "AUTOEXEC", Enter_Ptr, is_normal ; ok
 660+ A0E6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 660+ A0E6             >
 660+ A0E6             >                // dummy db directives used to calculate length of namec
 660+ A0E6 41 55 54 4F >                db      "AUTOEXEC"
 660+ A0EA 45 58 45 43 >
 660+ A0EE             >len_NFA         defl    $ - temp_NFA
 660+ A0EE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 660+ A0E6             >
 660+ A0E6 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 660+ A0E7 41 55 54 4F >                db      "AUTOEXEC"               // name string in 7-bit ascii, but
 660+ A0EB 45 58 45 43 >
 660+ A0EF             >                org     $-1                 // alter last byte of Name just above to set
 660+ A0EE C3          >                db      {b $} | END_BIT     // msb as name end
 660+ A0EF             >
 660+ A0EF CA A0       >                dw      last_NFA            // Link to previous definition Name
 660+ A0F1             >AUTOEXEC:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 660+ A0F1 CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 660+ A0F4             >
 660+ A0F4             >
 660+ A0F4             >                endif           ; ok        // for other definitions it "points" the correct handler
 660+ A0F4             >                // Use of "; ok" to suppress "warning[fwdref]"
 660+ A0F4             >
 660+ A0F4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 661+ A0F4 41 81 0B 00                  dw      LIT, 11
 662+ A0F8 41 81 4E 89                  dw      LIT, NOOP
 663+ A0FC 41 81 A3 95                  dw      LIT, Autoexec_Ptr
 664+ A100 57 88                        dw      STORE
 665+ A102 D1 A0                        dw      LOAD
 666+ A104 5A 95                        dw      QUIT
 667+ A106 43 86                        dw      EXIT
 668+ A108
 669+ A108
 670+ A108              //  ______________________________________________________________________
 671+ A108              //
 672+ A108              // bye     --
 673+ A108              //
 674+ A108                              Colon_Def BYE, "BYE", is_normal
 674+ A108             >                New_Def  BYE, "BYE", Enter_Ptr, is_normal ; ok
 674+ A108             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 674+ A108             >
 674+ A108             >                // dummy db directives used to calculate length of namec
 674+ A108 42 59 45    >                db      "BYE"
 674+ A10B             >len_NFA         defl    $ - temp_NFA
 674+ A10B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 674+ A108             >
 674+ A108 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 674+ A109 42 59 45    >                db      "BYE"               // name string in 7-bit ascii, but
 674+ A10C             >                org     $-1                 // alter last byte of Name just above to set
 674+ A10B C5          >                db      {b $} | END_BIT     // msb as name end
 674+ A10C             >
 674+ A10C E6 A0       >                dw      last_NFA            // Link to previous definition Name
 674+ A10E             >BYE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 674+ A10E CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 674+ A111             >
 674+ A111             >
 674+ A111             >                endif           ; ok        // for other definitions it "points" the correct handler
 674+ A111             >                // Use of "; ok" to suppress "warning[fwdref]"
 674+ A111             >
 674+ A111             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 675+ A111 1D 9B                        dw      FLUSH
 676+ A113 4A 9A                        dw      EMPTY_BUFFERS
 677+ A115 E4 98 4C 88                  dw      BLK_FH, FETCH, F_CLOSE, DROP
 677+ A119 F5 84 6F 87
 678+ A11D A1 89 11 8A                  dw      ZERO, PLUS_ORIGIN
 679+ A121 3D 96                        dw      BASIC
 680+ A123
 681+ A123              //  ______________________________________________________________________
 682+ A123              //
 683+ A123              // invv     --
 684+ A123              //
 685+ A123                              Colon_Def INVV, "INVV", is_normal
 685+ A123             >                New_Def  INVV, "INVV", Enter_Ptr, is_normal ; ok
 685+ A123             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 685+ A123             >
 685+ A123             >                // dummy db directives used to calculate length of namec
 685+ A123 49 4E 56 56 >                db      "INVV"
 685+ A127             >len_NFA         defl    $ - temp_NFA
 685+ A127             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 685+ A123             >
 685+ A123 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 685+ A124 49 4E 56 56 >                db      "INVV"               // name string in 7-bit ascii, but
 685+ A128             >                org     $-1                 // alter last byte of Name just above to set
 685+ A127 D6          >                db      {b $} | END_BIT     // msb as name end
 685+ A128             >
 685+ A128 08 A1       >                dw      last_NFA            // Link to previous definition Name
 685+ A12A             >INVV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 685+ A12A CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 685+ A12D             >
 685+ A12D             >
 685+ A12D             >                endif           ; ok        // for other definitions it "points" the correct handler
 685+ A12D             >                // Use of "; ok" to suppress "warning[fwdref]"
 685+ A12D             >
 685+ A12D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 686+ A12D 41 81 14 00                  dw      LIT, 20, EMITC, ONE, EMITC
 686+ A131 41 83 AA 89
 686+ A135 41 83
 687+ A137 43 86                        dw      EXIT
 688+ A139
 689+ A139              //  ______________________________________________________________________
 690+ A139              //
 691+ A139              // truv     --
 692+ A139              //
 693+ A139                              Colon_Def TRUV, "TRUV", is_normal
 693+ A139             >                New_Def  TRUV, "TRUV", Enter_Ptr, is_normal ; ok
 693+ A139             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 693+ A139             >
 693+ A139             >                // dummy db directives used to calculate length of namec
 693+ A139 54 52 55 56 >                db      "TRUV"
 693+ A13D             >len_NFA         defl    $ - temp_NFA
 693+ A13D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 693+ A139             >
 693+ A139 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 693+ A13A 54 52 55 56 >                db      "TRUV"               // name string in 7-bit ascii, but
 693+ A13E             >                org     $-1                 // alter last byte of Name just above to set
 693+ A13D D6          >                db      {b $} | END_BIT     // msb as name end
 693+ A13E             >
 693+ A13E 23 A1       >                dw      last_NFA            // Link to previous definition Name
 693+ A140             >TRUV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 693+ A140 CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 693+ A143             >
 693+ A143             >
 693+ A143             >                endif           ; ok        // for other definitions it "points" the correct handler
 693+ A143             >                // Use of "; ok" to suppress "warning[fwdref]"
 693+ A143             >
 693+ A143             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 694+ A143 41 81 14 00                  dw      LIT, 20, EMITC, ZERO, EMITC
 694+ A147 41 83 A1 89
 694+ A14B 41 83
 695+ A14D 43 86                        dw      EXIT
 696+ A14F
 697+ A14F              //  ______________________________________________________________________
 698+ A14F              //
 699+ A14F              // mark     --
 700+ A14F              //
 701+ A14F                              Colon_Def MARK, "MARK", is_normal
 701+ A14F             >                New_Def  MARK, "MARK", Enter_Ptr, is_normal ; ok
 701+ A14F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 701+ A14F             >
 701+ A14F             >                // dummy db directives used to calculate length of namec
 701+ A14F 4D 41 52 4B >                db      "MARK"
 701+ A153             >len_NFA         defl    $ - temp_NFA
 701+ A153             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 701+ A14F             >
 701+ A14F 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 701+ A150 4D 41 52 4B >                db      "MARK"               // name string in 7-bit ascii, but
 701+ A154             >                org     $-1                 // alter last byte of Name just above to set
 701+ A153 CB          >                db      {b $} | END_BIT     // msb as name end
 701+ A154             >
 701+ A154 39 A1       >                dw      last_NFA            // Link to previous definition Name
 701+ A156             >MARK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 701+ A156 CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 701+ A159             >
 701+ A159             >
 701+ A159             >                endif           ; ok        // for other definitions it "points" the correct handler
 701+ A159             >                // Use of "; ok" to suppress "warning[fwdref]"
 701+ A159             >
 701+ A159             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 702+ A159 2A A1 49 8F                  dw      INVV, TYPE, TRUV
 702+ A15D 40 A1
 703+ A15F 43 86                        dw      EXIT
 704+ A161
 705+ A161              //  ______________________________________________________________________
 706+ A161              //
 707+ A161              // back     --
 708+ A161              //
 709+ A161                              Colon_Def BACK, "BACK", is_normal
 709+ A161             >                New_Def  BACK, "BACK", Enter_Ptr, is_normal ; ok
 709+ A161             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 709+ A161             >
 709+ A161             >                // dummy db directives used to calculate length of namec
 709+ A161 42 41 43 4B >                db      "BACK"
 709+ A165             >len_NFA         defl    $ - temp_NFA
 709+ A165             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 709+ A161             >
 709+ A161 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 709+ A162 42 41 43 4B >                db      "BACK"               // name string in 7-bit ascii, but
 709+ A166             >                org     $-1                 // alter last byte of Name just above to set
 709+ A165 CB          >                db      {b $} | END_BIT     // msb as name end
 709+ A166             >
 709+ A166 4F A1       >                dw      last_NFA            // Link to previous definition Name
 709+ A168             >BACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 709+ A168 CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 709+ A16B             >
 709+ A16B             >
 709+ A16B             >                endif           ; ok        // for other definitions it "points" the correct handler
 709+ A16B             >                // Use of "; ok" to suppress "warning[fwdref]"
 709+ A16B             >
 709+ A16B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 710+ A16B A0 8B F6 8B                  dw      HERE, SUBTRACT, COMMA
 710+ A16F BE 8B
 711+ A171 43 86                        dw      EXIT
 712+ A173
 713+ A173              //  ______________________________________________________________________
 714+ A173              //
 715+ A173              // if          ( -- a 2 ) \ compile-time
 716+ A173              // IF ... THEN
 717+ A173              // IF ... ELSE ... ENDIF
 718+ A173                              Colon_Def IF, "IF", is_immediate
 718+ A173             >                New_Def  IF, "IF", Enter_Ptr, is_immediate ; ok
 718+ A173             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 718+ A173             >
 718+ A173             >                // dummy db directives used to calculate length of namec
 718+ A173 49 46       >                db      "IF"
 718+ A175             >len_NFA         defl    $ - temp_NFA
 718+ A175             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 718+ A173             >
 718+ A173 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 718+ A174 49 46       >                db      "IF"               // name string in 7-bit ascii, but
 718+ A176             >                org     $-1                 // alter last byte of Name just above to set
 718+ A175 C6          >                db      {b $} | END_BIT     // msb as name end
 718+ A176             >
 718+ A176 61 A1       >                dw      last_NFA            // Link to previous definition Name
 718+ A178             >IF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 718+ A178 CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 718+ A17B             >
 718+ A17B             >
 718+ A17B             >                endif           ; ok        // for other definitions it "points" the correct handler
 718+ A17B             >                // Use of "; ok" to suppress "warning[fwdref]"
 718+ A17B             >
 718+ A17B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 719+ A17B 14 8E 75 81                  dw      COMPILE, ZBRANCH
 720+ A17F A0 8B A1 89                  dw      HERE, ZERO, COMMA
 720+ A183 BE 8B
 721+ A185 B3 89                        dw      TWO
 722+ A187 43 86                        dw      EXIT
 723+ A189
 724+ A189              //  ______________________________________________________________________
 725+ A189              //
 726+ A189              // endif        ( a 2 -- ) \ compile-time
 727+ A189              //
 728+ A189                              Colon_Def ENDIF, "ENDIF", is_immediate
 728+ A189             >                New_Def  ENDIF, "ENDIF", Enter_Ptr, is_immediate ; ok
 728+ A189             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 728+ A189             >
 728+ A189             >                // dummy db directives used to calculate length of namec
 728+ A189 45 4E 44 49 >                db      "ENDIF"
 728+ A18D 46          >
 728+ A18E             >len_NFA         defl    $ - temp_NFA
 728+ A18E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 728+ A189             >
 728+ A189 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 728+ A18A 45 4E 44 49 >                db      "ENDIF"               // name string in 7-bit ascii, but
 728+ A18E 46          >
 728+ A18F             >                org     $-1                 // alter last byte of Name just above to set
 728+ A18E C6          >                db      {b $} | END_BIT     // msb as name end
 728+ A18F             >
 728+ A18F 73 A1       >                dw      last_NFA            // Link to previous definition Name
 728+ A191             >ENDIF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 728+ A191 CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 728+ A194             >
 728+ A194             >
 728+ A194             >                endif           ; ok        // for other definitions it "points" the correct handler
 728+ A194             >                // Use of "; ok" to suppress "warning[fwdref]"
 728+ A194             >
 728+ A194             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 729+ A194 96 8D                        dw      QCOMP
 730+ A196 B3 89 C7 8D                  dw      TWO, QPAIRS
 731+ A19A A0 8B 61 87                  dw      HERE, OVER, SUBTRACT, SWAP, STORE
 731+ A19E F6 8B 91 87
 731+ A1A2 57 88
 732+ A1A4 43 86                        dw      EXIT
 733+ A1A6
 734+ A1A6              //  ______________________________________________________________________
 735+ A1A6              //
 736+ A1A6              // then        ( a 2 -- ) \ compile-time
 737+ A1A6              //
 738+ A1A6                              Colon_Def THEN, "THEN", is_immediate
 738+ A1A6             >                New_Def  THEN, "THEN", Enter_Ptr, is_immediate ; ok
 738+ A1A6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 738+ A1A6             >
 738+ A1A6             >                // dummy db directives used to calculate length of namec
 738+ A1A6 54 48 45 4E >                db      "THEN"
 738+ A1AA             >len_NFA         defl    $ - temp_NFA
 738+ A1AA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 738+ A1A6             >
 738+ A1A6 C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 738+ A1A7 54 48 45 4E >                db      "THEN"               // name string in 7-bit ascii, but
 738+ A1AB             >                org     $-1                 // alter last byte of Name just above to set
 738+ A1AA CE          >                db      {b $} | END_BIT     // msb as name end
 738+ A1AB             >
 738+ A1AB 89 A1       >                dw      last_NFA            // Link to previous definition Name
 738+ A1AD             >THEN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 738+ A1AD CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 738+ A1B0             >
 738+ A1B0             >
 738+ A1B0             >                endif           ; ok        // for other definitions it "points" the correct handler
 738+ A1B0             >                // Use of "; ok" to suppress "warning[fwdref]"
 738+ A1B0             >
 738+ A1B0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 739+ A1B0 91 A1                        dw      ENDIF
 740+ A1B2 43 86                        dw      EXIT
 741+ A1B4
 742+ A1B4              //  ______________________________________________________________________
 743+ A1B4              //
 744+ A1B4              // else        ( a1 2 -- a2 2 ) \ compile-time
 745+ A1B4              //
 746+ A1B4                              Colon_Def ELSE, "ELSE", is_immediate
 746+ A1B4             >                New_Def  ELSE, "ELSE", Enter_Ptr, is_immediate ; ok
 746+ A1B4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 746+ A1B4             >
 746+ A1B4             >                // dummy db directives used to calculate length of namec
 746+ A1B4 45 4C 53 45 >                db      "ELSE"
 746+ A1B8             >len_NFA         defl    $ - temp_NFA
 746+ A1B8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 746+ A1B4             >
 746+ A1B4 C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 746+ A1B5 45 4C 53 45 >                db      "ELSE"               // name string in 7-bit ascii, but
 746+ A1B9             >                org     $-1                 // alter last byte of Name just above to set
 746+ A1B8 C5          >                db      {b $} | END_BIT     // msb as name end
 746+ A1B9             >
 746+ A1B9 A6 A1       >                dw      last_NFA            // Link to previous definition Name
 746+ A1BB             >ELSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 746+ A1BB CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 746+ A1BE             >
 746+ A1BE             >
 746+ A1BE             >                endif           ; ok        // for other definitions it "points" the correct handler
 746+ A1BE             >                // Use of "; ok" to suppress "warning[fwdref]"
 746+ A1BE             >
 746+ A1BE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 747+ A1BE 96 8D                        dw      QCOMP
 748+ A1C0 B3 89 C7 8D                  dw      TWO, QPAIRS
 749+ A1C4 14 8E 60 81                  dw      COMPILE, BRANCH
 750+ A1C8 A0 8B A1 89                  dw      HERE, ZERO, COMMA
 750+ A1CC BE 8B
 751+ A1CE 91 87 B3 89                  dw      SWAP, TWO, ENDIF
 751+ A1D2 91 A1
 752+ A1D4 B3 89                        dw      TWO
 753+ A1D6 43 86                        dw      EXIT
 754+ A1D8
 755+ A1D8              //  ______________________________________________________________________
 756+ A1D8              //
 757+ A1D8              // begin        ( -- a 1 ) \ compile-time
 758+ A1D8              // BEGIN ... AGAIN
 759+ A1D8              // BEGIN ... f UNTIL
 760+ A1D8              // BEGIN ... f WHILE ... REPEAT
 761+ A1D8                              Colon_Def BEGIN, "BEGIN", is_immediate
 761+ A1D8             >                New_Def  BEGIN, "BEGIN", Enter_Ptr, is_immediate ; ok
 761+ A1D8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 761+ A1D8             >
 761+ A1D8             >                // dummy db directives used to calculate length of namec
 761+ A1D8 42 45 47 49 >                db      "BEGIN"
 761+ A1DC 4E          >
 761+ A1DD             >len_NFA         defl    $ - temp_NFA
 761+ A1DD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 761+ A1D8             >
 761+ A1D8 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 761+ A1D9 42 45 47 49 >                db      "BEGIN"               // name string in 7-bit ascii, but
 761+ A1DD 4E          >
 761+ A1DE             >                org     $-1                 // alter last byte of Name just above to set
 761+ A1DD CE          >                db      {b $} | END_BIT     // msb as name end
 761+ A1DE             >
 761+ A1DE B4 A1       >                dw      last_NFA            // Link to previous definition Name
 761+ A1E0             >BEGIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 761+ A1E0 CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 761+ A1E3             >
 761+ A1E3             >
 761+ A1E3             >                endif           ; ok        // for other definitions it "points" the correct handler
 761+ A1E3             >                // Use of "; ok" to suppress "warning[fwdref]"
 761+ A1E3             >
 761+ A1E3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 762+ A1E3 96 8D                        dw      QCOMP
 763+ A1E5 A0 8B                        dw      HERE
 764+ A1E7 AA 89                        dw      ONE
 765+ A1E9 43 86                        dw      EXIT
 766+ A1EB
 767+ A1EB              //  ______________________________________________________________________
 768+ A1EB              //
 769+ A1EB              // again        ( a 1 -- ) \ compile-time
 770+ A1EB                              Colon_Def AGAIN, "AGAIN", is_immediate
 770+ A1EB             >                New_Def  AGAIN, "AGAIN", Enter_Ptr, is_immediate ; ok
 770+ A1EB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 770+ A1EB             >
 770+ A1EB             >                // dummy db directives used to calculate length of namec
 770+ A1EB 41 47 41 49 >                db      "AGAIN"
 770+ A1EF 4E          >
 770+ A1F0             >len_NFA         defl    $ - temp_NFA
 770+ A1F0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 770+ A1EB             >
 770+ A1EB C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 770+ A1EC 41 47 41 49 >                db      "AGAIN"               // name string in 7-bit ascii, but
 770+ A1F0 4E          >
 770+ A1F1             >                org     $-1                 // alter last byte of Name just above to set
 770+ A1F0 CE          >                db      {b $} | END_BIT     // msb as name end
 770+ A1F1             >
 770+ A1F1 D8 A1       >                dw      last_NFA            // Link to previous definition Name
 770+ A1F3             >AGAIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 770+ A1F3 CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 770+ A1F6             >
 770+ A1F6             >
 770+ A1F6             >                endif           ; ok        // for other definitions it "points" the correct handler
 770+ A1F6             >                // Use of "; ok" to suppress "warning[fwdref]"
 770+ A1F6             >
 770+ A1F6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 771+ A1F6 96 8D                        dw      QCOMP
 772+ A1F8 AA 89 C7 8D                  dw      ONE, QPAIRS
 773+ A1FC 14 8E 60 81                  dw      COMPILE, BRANCH
 774+ A200 68 A1                        dw      BACK
 775+ A202 43 86                        dw      EXIT
 776+ A204
 777+ A204              //  ______________________________________________________________________
 778+ A204              //
 779+ A204              // until        ( a 1 -- ) \ compile-time
 780+ A204                              Colon_Def UNTIL, "UNTIL", is_immediate
 780+ A204             >                New_Def  UNTIL, "UNTIL", Enter_Ptr, is_immediate ; ok
 780+ A204             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 780+ A204             >
 780+ A204             >                // dummy db directives used to calculate length of namec
 780+ A204 55 4E 54 49 >                db      "UNTIL"
 780+ A208 4C          >
 780+ A209             >len_NFA         defl    $ - temp_NFA
 780+ A209             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 780+ A204             >
 780+ A204 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 780+ A205 55 4E 54 49 >                db      "UNTIL"               // name string in 7-bit ascii, but
 780+ A209 4C          >
 780+ A20A             >                org     $-1                 // alter last byte of Name just above to set
 780+ A209 CC          >                db      {b $} | END_BIT     // msb as name end
 780+ A20A             >
 780+ A20A EB A1       >                dw      last_NFA            // Link to previous definition Name
 780+ A20C             >UNTIL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 780+ A20C CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 780+ A20F             >
 780+ A20F             >
 780+ A20F             >                endif           ; ok        // for other definitions it "points" the correct handler
 780+ A20F             >                // Use of "; ok" to suppress "warning[fwdref]"
 780+ A20F             >
 780+ A20F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 781+ A20F 96 8D                        dw      QCOMP
 782+ A211 AA 89 C7 8D                  dw      ONE, QPAIRS
 783+ A215 14 8E 75 81                  dw      COMPILE, ZBRANCH
 784+ A219 68 A1                        dw      BACK
 785+ A21B 43 86                        dw      EXIT
 786+ A21D
 787+ A21D              //  ______________________________________________________________________
 788+ A21D              //
 789+ A21D              // end          ( a 1 -- ) \ compile-time
 790+ A21D                              Colon_Def END, "END", is_immediate
 790+ A21D             >                New_Def  END, "END", Enter_Ptr, is_immediate ; ok
 790+ A21D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 790+ A21D             >
 790+ A21D             >                // dummy db directives used to calculate length of namec
 790+ A21D 45 4E 44    >                db      "END"
 790+ A220             >len_NFA         defl    $ - temp_NFA
 790+ A220             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 790+ A21D             >
 790+ A21D C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 790+ A21E 45 4E 44    >                db      "END"               // name string in 7-bit ascii, but
 790+ A221             >                org     $-1                 // alter last byte of Name just above to set
 790+ A220 C4          >                db      {b $} | END_BIT     // msb as name end
 790+ A221             >
 790+ A221 04 A2       >                dw      last_NFA            // Link to previous definition Name
 790+ A223             >END:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 790+ A223 CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 790+ A226             >
 790+ A226             >
 790+ A226             >                endif           ; ok        // for other definitions it "points" the correct handler
 790+ A226             >                // Use of "; ok" to suppress "warning[fwdref]"
 790+ A226             >
 790+ A226             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 791+ A226 0C A2                        dw      UNTIL
 792+ A228 43 86                        dw      EXIT
 793+ A22A
 794+ A22A              //  ______________________________________________________________________
 795+ A22A              //
 796+ A22A              // while        ( a1 1 -- a1 1 a2 4 ) \ compile-time
 797+ A22A                              Colon_Def WHILE, "WHILE", is_immediate
 797+ A22A             >                New_Def  WHILE, "WHILE", Enter_Ptr, is_immediate ; ok
 797+ A22A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 797+ A22A             >
 797+ A22A             >                // dummy db directives used to calculate length of namec
 797+ A22A 57 48 49 4C >                db      "WHILE"
 797+ A22E 45          >
 797+ A22F             >len_NFA         defl    $ - temp_NFA
 797+ A22F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 797+ A22A             >
 797+ A22A C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 797+ A22B 57 48 49 4C >                db      "WHILE"               // name string in 7-bit ascii, but
 797+ A22F 45          >
 797+ A230             >                org     $-1                 // alter last byte of Name just above to set
 797+ A22F C5          >                db      {b $} | END_BIT     // msb as name end
 797+ A230             >
 797+ A230 1D A2       >                dw      last_NFA            // Link to previous definition Name
 797+ A232             >WHILE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 797+ A232 CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 797+ A235             >
 797+ A235             >
 797+ A235             >                endif           ; ok        // for other definitions it "points" the correct handler
 797+ A235             >                // Use of "; ok" to suppress "warning[fwdref]"
 797+ A235             >
 797+ A235             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 798+ A235 78 A1                        dw      IF
 799+ A237 01 87                        dw      TWO_PLUS // ( that is 4 )
 800+ A239 43 86                        dw      EXIT
 801+ A23B
 802+ A23B              //  ______________________________________________________________________
 803+ A23B              //
 804+ A23B              // repeat       ( a1 1 a2 4 -- ) \ compile-time
 805+ A23B                              Colon_Def REPEAT, "REPEAT", is_immediate
 805+ A23B             >                New_Def  REPEAT, "REPEAT", Enter_Ptr, is_immediate ; ok
 805+ A23B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 805+ A23B             >
 805+ A23B             >                // dummy db directives used to calculate length of namec
 805+ A23B 52 45 50 45 >                db      "REPEAT"
 805+ A23F 41 54       >
 805+ A241             >len_NFA         defl    $ - temp_NFA
 805+ A241             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 805+ A23B             >
 805+ A23B C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 805+ A23C 52 45 50 45 >                db      "REPEAT"               // name string in 7-bit ascii, but
 805+ A240 41 54       >
 805+ A242             >                org     $-1                 // alter last byte of Name just above to set
 805+ A241 D4          >                db      {b $} | END_BIT     // msb as name end
 805+ A242             >
 805+ A242 2A A2       >                dw      last_NFA            // Link to previous definition Name
 805+ A244             >REPEAT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 805+ A244 CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 805+ A247             >
 805+ A247             >
 805+ A247             >                endif           ; ok        // for other definitions it "points" the correct handler
 805+ A247             >                // Use of "; ok" to suppress "warning[fwdref]"
 805+ A247             >
 805+ A247             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 806+ A247 EA 87                        dw      TWO_SWAP
 807+ A249 F3 A1                        dw      AGAIN
 808+ A24B B3 89 F6 8B                  dw      TWO, SUBTRACT
 809+ A24F 91 A1                        dw      ENDIF
 810+ A251 43 86                        dw      EXIT
 811+ A253
 812+ A253              //  ______________________________________________________________________
 813+ A253              //
 814+ A253              // ?do-
 815+ A253              // special version of "BACK" used by ?DO and LOOP
 816+ A253                              Colon_Def C_DO_BACK, "?DO-", is_normal
 816+ A253             >                New_Def  C_DO_BACK, "?DO-", Enter_Ptr, is_normal ; ok
 816+ A253             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 816+ A253             >
 816+ A253             >                // dummy db directives used to calculate length of namec
 816+ A253 3F 44 4F 2D >                db      "?DO-"
 816+ A257             >len_NFA         defl    $ - temp_NFA
 816+ A257             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 816+ A253             >
 816+ A253 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 816+ A254 3F 44 4F 2D >                db      "?DO-"               // name string in 7-bit ascii, but
 816+ A258             >                org     $-1                 // alter last byte of Name just above to set
 816+ A257 AD          >                db      {b $} | END_BIT     // msb as name end
 816+ A258             >
 816+ A258 3B A2       >                dw      last_NFA            // Link to previous definition Name
 816+ A25A             >C_DO_BACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 816+ A25A CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 816+ A25D             >
 816+ A25D             >
 816+ A25D             >                endif           ; ok        // for other definitions it "points" the correct handler
 816+ A25D             >                // Use of "; ok" to suppress "warning[fwdref]"
 816+ A25D             >
 816+ A25D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 817+ A25D 68 A1                        dw      BACK
 818+ A25F 15 86 34 8B                  dw      SPFETCH, CSP, FETCH, SUBTRACT
 818+ A263 4C 88 F6 8B
 819+ A267 75 81                        dw      ZBRANCH
 820+ A269 06 00                        dw      CDoBack_Endif - $
 821+ A26B 01 87 91 A1                  dw          TWO_PLUS, ENDIF
 822+ A26F              CDoBack_Endif:
 823+ A26F DB 8D 34 8B                  dw      QCSP, CSP, STORE
 823+ A273 57 88
 824+ A275 43 86                        dw      EXIT
 825+ A277
 826+ A277              //  ______________________________________________________________________
 827+ A277              //
 828+ A277              // do
 829+ A277              // DO  ... LOOP
 830+ A277              // DO  ... n +LOOP
 831+ A277              // ?DO ... LOOP
 832+ A277              // ?DO ... n +LOOP
 833+ A277                              Colon_Def DO, "DO", is_immediate
 833+ A277             >                New_Def  DO, "DO", Enter_Ptr, is_immediate ; ok
 833+ A277             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 833+ A277             >
 833+ A277             >                // dummy db directives used to calculate length of namec
 833+ A277 44 4F       >                db      "DO"
 833+ A279             >len_NFA         defl    $ - temp_NFA
 833+ A279             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 833+ A277             >
 833+ A277 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 833+ A278 44 4F       >                db      "DO"               // name string in 7-bit ascii, but
 833+ A27A             >                org     $-1                 // alter last byte of Name just above to set
 833+ A279 CF          >                db      {b $} | END_BIT     // msb as name end
 833+ A27A             >
 833+ A27A 53 A2       >                dw      last_NFA            // Link to previous definition Name
 833+ A27C             >DO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 833+ A27C CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 833+ A27F             >
 833+ A27F             >
 833+ A27F             >                endif           ; ok        // for other definitions it "points" the correct handler
 833+ A27F             >                // Use of "; ok" to suppress "warning[fwdref]"
 833+ A27F             >
 833+ A27F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 834+ A27F 14 8E F5 81                  dw      COMPILE, C_DO
 835+ A283 34 8B 4C 88                  dw      CSP, FETCH, STORE_CSP
 835+ A287 67 8D
 836+ A289 A0 8B BC 89                  dw      HERE, THREE
 837+ A28D 43 86                        dw      EXIT
 838+ A28F
 839+ A28F              //  ______________________________________________________________________
 840+ A28F              //
 841+ A28F              // loop
 842+ A28F                              Colon_Def LOOP, "LOOP", is_immediate
 842+ A28F             >                New_Def  LOOP, "LOOP", Enter_Ptr, is_immediate ; ok
 842+ A28F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 842+ A28F             >
 842+ A28F             >                // dummy db directives used to calculate length of namec
 842+ A28F 4C 4F 4F 50 >                db      "LOOP"
 842+ A293             >len_NFA         defl    $ - temp_NFA
 842+ A293             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 842+ A28F             >
 842+ A28F C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 842+ A290 4C 4F 4F 50 >                db      "LOOP"               // name string in 7-bit ascii, but
 842+ A294             >                org     $-1                 // alter last byte of Name just above to set
 842+ A293 D0          >                db      {b $} | END_BIT     // msb as name end
 842+ A294             >
 842+ A294 77 A2       >                dw      last_NFA            // Link to previous definition Name
 842+ A296             >LOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 842+ A296 CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 842+ A299             >
 842+ A299             >
 842+ A299             >                endif           ; ok        // for other definitions it "points" the correct handler
 842+ A299             >                // Use of "; ok" to suppress "warning[fwdref]"
 842+ A299             >
 842+ A299             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 843+ A299 BC 89 C7 8D                  dw      THREE, QPAIRS
 844+ A29D 14 8E 88 81                  dw      COMPILE, C_LOOP
 845+ A2A1 5A A2                        dw      C_DO_BACK
 846+ A2A3 43 86                        dw      EXIT
 847+ A2A5
 848+ A2A5              //  ______________________________________________________________________
 849+ A2A5              //
 850+ A2A5              // +loop
 851+ A2A5                              Colon_Def PLOOP, "+LOOP", is_immediate
 851+ A2A5             >                New_Def  PLOOP, "+LOOP", Enter_Ptr, is_immediate ; ok
 851+ A2A5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 851+ A2A5             >
 851+ A2A5             >                // dummy db directives used to calculate length of namec
 851+ A2A5 2B 4C 4F 4F >                db      "+LOOP"
 851+ A2A9 50          >
 851+ A2AA             >len_NFA         defl    $ - temp_NFA
 851+ A2AA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 851+ A2A5             >
 851+ A2A5 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 851+ A2A6 2B 4C 4F 4F >                db      "+LOOP"               // name string in 7-bit ascii, but
 851+ A2AA 50          >
 851+ A2AB             >                org     $-1                 // alter last byte of Name just above to set
 851+ A2AA D0          >                db      {b $} | END_BIT     // msb as name end
 851+ A2AB             >
 851+ A2AB 8F A2       >                dw      last_NFA            // Link to previous definition Name
 851+ A2AD             >PLOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 851+ A2AD CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 851+ A2B0             >
 851+ A2B0             >
 851+ A2B0             >                endif           ; ok        // for other definitions it "points" the correct handler
 851+ A2B0             >                // Use of "; ok" to suppress "warning[fwdref]"
 851+ A2B0             >
 851+ A2B0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 852+ A2B0 BC 89 C7 8D                  dw      THREE, QPAIRS
 853+ A2B4 14 8E BD 81                  dw      COMPILE, C_PLOOP
 854+ A2B8 5A A2                        dw      C_DO_BACK
 855+ A2BA 43 86                        dw      EXIT
 856+ A2BC
 857+ A2BC              //  ______________________________________________________________________
 858+ A2BC              //
 859+ A2BC              // ?do
 860+ A2BC                              Colon_Def QDO, "?DO", is_immediate
 860+ A2BC             >                New_Def  QDO, "?DO", Enter_Ptr, is_immediate ; ok
 860+ A2BC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 860+ A2BC             >
 860+ A2BC             >                // dummy db directives used to calculate length of namec
 860+ A2BC 3F 44 4F    >                db      "?DO"
 860+ A2BF             >len_NFA         defl    $ - temp_NFA
 860+ A2BF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 860+ A2BC             >
 860+ A2BC C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 860+ A2BD 3F 44 4F    >                db      "?DO"               // name string in 7-bit ascii, but
 860+ A2C0             >                org     $-1                 // alter last byte of Name just above to set
 860+ A2BF CF          >                db      {b $} | END_BIT     // msb as name end
 860+ A2C0             >
 860+ A2C0 A5 A2       >                dw      last_NFA            // Link to previous definition Name
 860+ A2C2             >QDO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 860+ A2C2 CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 860+ A2C5             >
 860+ A2C5             >
 860+ A2C5             >                endif           ; ok        // for other definitions it "points" the correct handler
 860+ A2C5             >                // Use of "; ok" to suppress "warning[fwdref]"
 860+ A2C5             >
 860+ A2C5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 861+ A2C5 14 8E C9 81                  dw      COMPILE, C_Q_DO
 862+ A2C9 34 8B 4C 88                  dw      CSP, FETCH, STORE_CSP
 862+ A2CD 67 8D
 863+ A2CF A0 8B A1 89                  dw      HERE, ZERO, COMMA, ZERO
 863+ A2D3 BE 8B A1 89
 864+ A2D7 A0 8B BC 89                  dw      HERE, THREE
 865+ A2DB 43 86                        dw      EXIT
 866+ A2DD
 867+ A2DD              //  ______________________________________________________________________
 868+ A2DD              //
 869+ A2DD              // \
 870+ A2DD                              Colon_Def BACKSLASH, "\\", is_immediate  // this is a single back-slash
 870+ A2DD             >                New_Def  BACKSLASH, "\\", Enter_Ptr, is_immediate ; ok
 870+ A2DD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 870+ A2DD             >
 870+ A2DD             >                // dummy db directives used to calculate length of namec
 870+ A2DD 5C          >                db      "\\"
 870+ A2DE             >len_NFA         defl    $ - temp_NFA
 870+ A2DE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 870+ A2DD             >
 870+ A2DD C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 870+ A2DE 5C          >                db      "\\"               // name string in 7-bit ascii, but
 870+ A2DF             >                org     $-1                 // alter last byte of Name just above to set
 870+ A2DE DC          >                db      {b $} | END_BIT     // msb as name end
 870+ A2DF             >
 870+ A2DF BC A2       >                dw      last_NFA            // Link to previous definition Name
 870+ A2E1             >BACKSLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 870+ A2E1 CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 870+ A2E4             >
 870+ A2E4             >
 870+ A2E4             >                endif           ; ok        // for other definitions it "points" the correct handler
 870+ A2E4             >                // Use of "; ok" to suppress "warning[fwdref]"
 870+ A2E4             >
 870+ A2E4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 871+ A2E4 B8 8A 4C 88                  dw      BLK, FETCH
 872+ A2E8 75 81                        dw      ZBRANCH
 873+ A2EA 30 00                        dw      Backslash_Else_1 - $
 874+ A2EC B8 8A 4C 88                  dw          BLK, FETCH, ONE, GREATER  // BLOCK 1 is used as temp-line in INCLUDE file
 874+ A2F0 AA 89 3C 8C
 875+ A2F4 75 81                        dw          ZBRANCH
 876+ A2F6 18 00                        dw          Backslash_Else_2 - $
 877+ A2F8 C2 8A 4C 88                  dw              TO_IN, FETCH, CL, MOD, CL
 877+ A2FC DB 89 0B 97
 877+ A300 DB 89
 878+ A302 91 87 F6 8B                  dw              SWAP, SUBTRACT, TO_IN, PLUSSTORE
 878+ A306 C2 8A 2D 88
 879+ A30A 60 81                        dw          BRANCH
 880+ A30C 0A 00                        dw          Backslash_Endif_2 - $
 881+ A30E              Backslash_Else_2:
 882+ A30E E8 89 24 87                  dw              BBUF, CELL_MINUS, TO_IN, STORE
 882+ A312 C2 8A 57 88
 883+ A316              Backslash_Endif_2:
 884+ A316 60 81                        dw      BRANCH
 885+ A318 0A 00                        dw      Backslash_Endif_1 - $
 886+ A31A              Backslash_Else_1:
 887+ A31A 41 81 50 00                  dw          LIT, 80, TO_IN, STORE
 887+ A31E C2 8A 57 88
 888+ A322              Backslash_Endif_1:
 889+ A322 43 86                        dw      EXIT
 890+ A324
 891+ A324              //  ______________________________________________________________________
 892+ A324              //
 893+ A324              // rename
 894+ A324                              Colon_Def RENAME, "RENAME", is_normal
 894+ A324             >                New_Def  RENAME, "RENAME", Enter_Ptr, is_normal ; ok
 894+ A324             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 894+ A324             >
 894+ A324             >                // dummy db directives used to calculate length of namec
 894+ A324 52 45 4E 41 >                db      "RENAME"
 894+ A328 4D 45       >
 894+ A32A             >len_NFA         defl    $ - temp_NFA
 894+ A32A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 894+ A324             >
 894+ A324 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 894+ A325 52 45 4E 41 >                db      "RENAME"               // name string in 7-bit ascii, but
 894+ A329 4D 45       >
 894+ A32B             >                org     $-1                 // alter last byte of Name just above to set
 894+ A32A C5          >                db      {b $} | END_BIT     // msb as name end
 894+ A32B             >
 894+ A32B DD A2       >                dw      last_NFA            // Link to previous definition Name
 894+ A32D             >RENAME:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 894+ A32D CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 894+ A330             >
 894+ A330             >
 894+ A330             >                endif           ; ok        // for other definitions it "points" the correct handler
 894+ A330             >                // Use of "; ok" to suppress "warning[fwdref]"
 894+ A330             >
 894+ A330             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 895+ A330 07 9D 46 8D                  dw      TICK, TO_BODY, NFA
 895+ A334 1A 8D
 896+ A336 9C 87 63 88                  dw      DUP, CFETCH, LIT, $1F, AND_OP
 896+ A33A 41 81 1F 00
 896+ A33E E3 85
 897+ A340 FA 87 C8 86                  dw      TWO_DUP, PLUS
 898+ A344 68 86                        dw      TO_R
 899+ A346 D0 89 D3 90                  dw      BL, WORD, LIT, 32, ALLOT
 899+ A34A 41 81 20 00
 899+ A34E B1 8B
 900+ A350 35 8F 41 81                  dw      COUNT, LIT, $1F, AND_OP, ROT, MIN
 900+ A354 1F 00 E3 85
 900+ A358 A7 87 4B 8C
 901+ A35C 68 86                        dw      TO_R
 902+ A35E 91 87 ED 86                  dw      SWAP, ONE_PLUS
 903+ A362 7A 86                        dw      R_TO
 904+ A364 4F 85                        dw      CMOVE
 905+ A366 8B 86 63 88                  dw      R_OP, CFETCH, LIT, END_BIT, OR_OP
 905+ A36A 41 81 80 00
 905+ A36E F3 85
 906+ A370 7A 86                        dw      R_TO
 907+ A372 6F 88                        dw      CSTORE
 908+ A374 41 81 E0 FF                  dw      LIT, -32, ALLOT
 908+ A378 B1 8B
 909+ A37A 43 86                        dw      EXIT
 910+ A37C
 911+ A37C              //  ______________________________________________________________________
 912+ A37C              //
 913+ A37C              // value        n cccc --
 914+ A37C                              Colon_Def VALUE, "VALUE", is_immediate
 914+ A37C             >                New_Def  VALUE, "VALUE", Enter_Ptr, is_immediate ; ok
 914+ A37C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 914+ A37C             >
 914+ A37C             >                // dummy db directives used to calculate length of namec
 914+ A37C 56 41 4C 55 >                db      "VALUE"
 914+ A380 45          >
 914+ A381             >len_NFA         defl    $ - temp_NFA
 914+ A381             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 914+ A37C             >
 914+ A37C C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 914+ A37D 56 41 4C 55 >                db      "VALUE"               // name string in 7-bit ascii, but
 914+ A381 45          >
 914+ A382             >                org     $-1                 // alter last byte of Name just above to set
 914+ A381 C5          >                db      {b $} | END_BIT     // msb as name end
 914+ A382             >
 914+ A382 24 A3       >                dw      last_NFA            // Link to previous definition Name
 914+ A384             >VALUE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 914+ A384 CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 914+ A387             >
 914+ A387             >
 914+ A387             >                endif           ; ok        // for other definitions it "points" the correct handler
 914+ A387             >                // Use of "; ok" to suppress "warning[fwdref]"
 914+ A387             >
 914+ A387             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 915+ A387 5E 89                        dw      CONSTANT                // [compile] constant
 916+ A389 43 86                        dw      EXIT                    // ;
 917+ A38B
 918+ A38B              Latest_Definition:
 919+ A38B              //  ______________________________________________________________________
 920+ A38B              //
 921+ A38B              // to           n -- cccc
 922+ A38B              // mixed operation: it leaves the remainder u3 and the quotient ud4 of ud1 / u1.
 923+ A38B              // All terms are unsigned.
 924+ A38B                              Colon_Def TO, "TO", is_immediate
 924+ A38B             >                New_Def  TO, "TO", Enter_Ptr, is_immediate ; ok
 924+ A38B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 924+ A38B             >
 924+ A38B             >                // dummy db directives used to calculate length of namec
 924+ A38B 54 4F       >                db      "TO"
 924+ A38D             >len_NFA         defl    $ - temp_NFA
 924+ A38D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 924+ A38B             >
 924+ A38B C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 924+ A38C 54 4F       >                db      "TO"               // name string in 7-bit ascii, but
 924+ A38E             >                org     $-1                 // alter last byte of Name just above to set
 924+ A38D CF          >                db      {b $} | END_BIT     // msb as name end
 924+ A38E             >
 924+ A38E 7C A3       >                dw      last_NFA            // Link to previous definition Name
 924+ A390             >TO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 924+ A390 CD 27 89    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 924+ A393             >
 924+ A393             >
 924+ A393             >                endif           ; ok        // for other definitions it "points" the correct handler
 924+ A393             >                // Use of "; ok" to suppress "warning[fwdref]"
 924+ A393             >
 924+ A393             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 925+ A393 07 9D 46 8D                  dw  TICK, TO_BODY               // ' >body'
 926+ A397 0B 8B 4C 88                  dw  STATE, FETCH                // state @
 927+ A39B                                                              // if
 928+ A39B 75 81                        dw  ZBRANCH
 929+ A39D 10 00                        dw  To_Else - $
 930+ A39F 14 8E 41 81                  dw      COMPILE, LIT            //      compile lit
 931+ A3A3 BE 8B                        dw      COMMA                   //      ,
 932+ A3A5 14 8E 57 88                  dw      COMPILE, STORE          //      compile !
 933+ A3A9                                                      // else
 934+ A3A9 60 81                        dw  BRANCH
 935+ A3AB 04 00                        dw  To_Endif - $
 936+ A3AD              To_Else:
 937+ A3AD 57 88                        dw      STORE                   //      !
 938+ A3AF              To_Endif:                                       // endif
 939+ A3AF 43 86                        dw  EXIT                        // ;
 940+ A3B1
 941+ A3B1              Fence_Word:
 942+ A3B1
 943+ A3B1              //  ______________________________________________________________________
 944+ A3B1              //
 945+ A3B1              // m+           d1 n -- d2
 946+ A3B1              // returns the unsigned sum of two top values
 947+ A3B1                              New_Def MPLUS, "M+", is_code, is_normal
 947+ A3B1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 947+ A3B1             >
 947+ A3B1             >                // dummy db directives used to calculate length of namec
 947+ A3B1 4D 2B       >                db      "M+"
 947+ A3B3             >len_NFA         defl    $ - temp_NFA
 947+ A3B3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 947+ A3B1             >
 947+ A3B1 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 947+ A3B2 4D 2B       >                db      "M+"               // name string in 7-bit ascii, but
 947+ A3B4             >                org     $-1                 // alter last byte of Name just above to set
 947+ A3B3 AB          >                db      {b $} | END_BIT     // msb as name end
 947+ A3B4             >
 947+ A3B4 8B A3       >                dw      last_NFA            // Link to previous definition Name
 947+ A3B6             >MPLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 947+ A3B6 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 947+ A3B6 ~           >
 947+ A3B6 ~           >
 947+ A3B6             >                endif           ; ok        // for other definitions it "points" the correct handler
 947+ A3B6             >                // Use of "; ok" to suppress "warning[fwdref]"
 947+ A3B6             >
 947+ A3B6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 948+ A3B6 60                           ld      h, b
 949+ A3B7 69                           ld      l, c
 950+ A3B8 D1                           pop     de                  // < de := d1-H
 951+ A3B9 C1                           pop     bc                  // < n
 952+ A3BA E3                           ex      (sp),hl             // < hl := d1-L > IP
 953+ A3BB 09                           add     hl, bc
 954+ A3BC C1                           pop     bc
 955+ A3BD
 956+ A3BD 30 01                        jr      nc, MPlus_Skip
 957+ A3BF 13                               inc     de
 958+ A3C0              MPlus_Skip:
 959+ A3C0 EB                           ex      de, hl
 960+ A3C1                              psh2
 960+ A3C1 D5          >                push    de
 960+ A3C2 E5          >                push    hl
 960+ A3C3 DD E9       >                jp      (ix)
 961+ A3C5
 962+ A3C5              //  ______________________________________________________________________
 963+ A3C5              //
 964+ A3C5
 965+ A3C5 00           Here_Dictionary db      0
 966+ A3C6
# file closed: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/L3.asm
  94  A3C6
  95  A3C6              // now we save the compiled file so we can either run it or debug it
  96  A3C6                              SAVENEX OPEN "output/main.nex", ORIGIN
  97  A3C6                              SAVENEX CORE 3, 0, 0                                // Next core 3.0.0 required as minimum
  98  A3C6                              SAVENEX CFG  0
  99  A3C6                              SAVENEX BANK 2, 0
 100  A3C6                              SAVENEX AUTO
 101  A3C6                              SAVENEX CLOSE
 102  A3C6
 103  A3C6              //              PAGE 7 ;set 7 page to current slot
 104  A3C6              //              SAVEBIN "ram7.bin",$C000,$4000 ;- save 4000h begin from C000h of RAM to file
 105  A3C6              //              SAVEBIN "output/ram2.bin", $8000, 9800 ;- save 3000h begin from 8000h of RAM to file
 106  A3C6
 107  A3C6              //              SAVETAP "output/F15j.tap", CODE, "forth15j", $6400, 9000
 108  A3C6
 109  A3C6                              SAVEBIN "output/forth15j.bin", ORIGIN, 9400
 110  A3C6
 111  A3C6                              END
# file closed: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/main.asm
